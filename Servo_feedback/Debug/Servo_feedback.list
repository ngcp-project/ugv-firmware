
Servo_feedback.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5ac  08000298  08000298  00001298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800a844  0800a844  0000b844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a87c  0800a87c  0000b87c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a884  0800a884  0000b884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a888  0800a888  0000b888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000014  24000000  0800a88c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000014  0800a8a0  0000c014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000074  0800a900  0000c074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000078c  240000d8  0800a960  0000c0d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24000864  0800a960  0000c864  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000c0d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000220b7  00000000  00000000  0000c102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034d0  00000000  00000000  0002e1b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001908  00000000  00000000  00031690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001397  00000000  00000000  00032f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003aa41  00000000  00000000  0003432f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f695  00000000  00000000  0006ed70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017ec56  00000000  00000000  0008e405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0020d05b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e38  00000000  00000000  0020d0a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00213ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d8 	.word	0x240000d8
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800a82c 	.word	0x0800a82c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000dc 	.word	0x240000dc
 80002d4:	0800a82c 	.word	0x0800a82c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <PID_controller_1>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float PID_controller_1(float set_value, float process_value, float Kp, float Ki, float Kd, float limit_1, float limit_2)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b08f      	sub	sp, #60	@ 0x3c
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	ed87 0a07 	vstr	s0, [r7, #28]
 80005d2:	edc7 0a06 	vstr	s1, [r7, #24]
 80005d6:	ed87 1a05 	vstr	s2, [r7, #20]
 80005da:	edc7 1a04 	vstr	s3, [r7, #16]
 80005de:	ed87 2a03 	vstr	s4, [r7, #12]
 80005e2:	edc7 2a02 	vstr	s5, [r7, #8]
 80005e6:	ed87 3a01 	vstr	s6, [r7, #4]
	float P_value;
	float I_value;
	float D_value;
	static float I_sum;
	float PID_value;
	float Time = 0.1;
 80005ea:	4b7b      	ldr	r3, [pc, #492]	@ (80007d8 <PID_controller_1+0x210>)
 80005ec:	62bb      	str	r3, [r7, #40]	@ 0x28

	error = (set_value - process_value);
 80005ee:	ed97 7a07 	vldr	s14, [r7, #28]
 80005f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80005f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80005fa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	P_value = Kp * error;
 80005fe:	ed97 7a05 	vldr	s14, [r7, #20]
 8000602:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800060a:	edc7 7a08 	vstr	s15, [r7, #32]
	if (Ki > 0)
 800060e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000612:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800061a:	dd61      	ble.n	80006e0 <PID_controller_1+0x118>
	{
		if(((Time * error) > 0 && Ki * I_sum <= limit_1) || ((Time * error) < 0 && Ki * Ki * I_sum >= limit_2) || (Ki * I_sum >= limit_1 && Ki * I_sum <= limit_2))
 800061c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000620:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000624:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000628:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800062c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000630:	dd0d      	ble.n	800064e <PID_controller_1+0x86>
 8000632:	4b6a      	ldr	r3, [pc, #424]	@ (80007dc <PID_controller_1+0x214>)
 8000634:	ed93 7a00 	vldr	s14, [r3]
 8000638:	edd7 7a04 	vldr	s15, [r7, #16]
 800063c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000640:	ed97 7a02 	vldr	s14, [r7, #8]
 8000644:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800064c:	da36      	bge.n	80006bc <PID_controller_1+0xf4>
 800064e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000652:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800065a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800065e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000662:	d50f      	bpl.n	8000684 <PID_controller_1+0xbc>
 8000664:	edd7 7a04 	vldr	s15, [r7, #16]
 8000668:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800066c:	4b5b      	ldr	r3, [pc, #364]	@ (80007dc <PID_controller_1+0x214>)
 800066e:	edd3 7a00 	vldr	s15, [r3]
 8000672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000676:	ed97 7a01 	vldr	s14, [r7, #4]
 800067a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800067e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000682:	d91b      	bls.n	80006bc <PID_controller_1+0xf4>
 8000684:	4b55      	ldr	r3, [pc, #340]	@ (80007dc <PID_controller_1+0x214>)
 8000686:	ed93 7a00 	vldr	s14, [r3]
 800068a:	edd7 7a04 	vldr	s15, [r7, #16]
 800068e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000692:	ed97 7a02 	vldr	s14, [r7, #8]
 8000696:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800069a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800069e:	d826      	bhi.n	80006ee <PID_controller_1+0x126>
 80006a0:	4b4e      	ldr	r3, [pc, #312]	@ (80007dc <PID_controller_1+0x214>)
 80006a2:	ed93 7a00 	vldr	s14, [r3]
 80006a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80006aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006ae:	ed97 7a01 	vldr	s14, [r7, #4]
 80006b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80006b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ba:	db18      	blt.n	80006ee <PID_controller_1+0x126>
		{
			I_value = I_sum += Time * error;
 80006bc:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80006c0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80006c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80006c8:	4b44      	ldr	r3, [pc, #272]	@ (80007dc <PID_controller_1+0x214>)
 80006ca:	edd3 7a00 	vldr	s15, [r3]
 80006ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006d2:	4b42      	ldr	r3, [pc, #264]	@ (80007dc <PID_controller_1+0x214>)
 80006d4:	edc3 7a00 	vstr	s15, [r3]
 80006d8:	4b40      	ldr	r3, [pc, #256]	@ (80007dc <PID_controller_1+0x214>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80006de:	e006      	b.n	80006ee <PID_controller_1+0x126>
		}
	}
	else
	{
		I_value = 0;
 80006e0:	f04f 0300 	mov.w	r3, #0
 80006e4:	637b      	str	r3, [r7, #52]	@ 0x34
		I_sum = 0;
 80006e6:	4b3d      	ldr	r3, [pc, #244]	@ (80007dc <PID_controller_1+0x214>)
 80006e8:	f04f 0200 	mov.w	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
	}
	if(Kd > 0)
 80006ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80006f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80006f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006fa:	dd31      	ble.n	8000760 <PID_controller_1+0x198>
	{
		if((error - error_old)/ Time < limit_2 && (error - error_old)/ Time > limit_1)
 80006fc:	4b38      	ldr	r3, [pc, #224]	@ (80007e0 <PID_controller_1+0x218>)
 80006fe:	edd3 7a00 	vldr	s15, [r3]
 8000702:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8000706:	ee77 6a67 	vsub.f32	s13, s14, s15
 800070a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800070e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000712:	ed97 7a01 	vldr	s14, [r7, #4]
 8000716:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800071a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800071e:	dd22      	ble.n	8000766 <PID_controller_1+0x19e>
 8000720:	4b2f      	ldr	r3, [pc, #188]	@ (80007e0 <PID_controller_1+0x218>)
 8000722:	edd3 7a00 	vldr	s15, [r3]
 8000726:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800072a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800072e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000732:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000736:	ed97 7a02 	vldr	s14, [r7, #8]
 800073a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800073e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000742:	d510      	bpl.n	8000766 <PID_controller_1+0x19e>
		{
			D_value = (error - error_old) / Time;
 8000744:	4b26      	ldr	r3, [pc, #152]	@ (80007e0 <PID_controller_1+0x218>)
 8000746:	edd3 7a00 	vldr	s15, [r3]
 800074a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800074e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000752:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000756:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800075a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
 800075e:	e002      	b.n	8000766 <PID_controller_1+0x19e>
		}
	}
	else
	{
		D_value = 0;
 8000760:	f04f 0300 	mov.w	r3, #0
 8000764:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	PID_value = P_value + Ki * I_value + Kd * D_value;
 8000766:	ed97 7a04 	vldr	s14, [r7, #16]
 800076a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800076e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000772:	edd7 7a08 	vldr	s15, [r7, #32]
 8000776:	ee37 7a27 	vadd.f32	s14, s14, s15
 800077a:	edd7 6a03 	vldr	s13, [r7, #12]
 800077e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000782:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000786:	ee77 7a27 	vadd.f32	s15, s14, s15
 800078a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	if (PID_value < limit_1)
 800078e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000792:	edd7 7a02 	vldr	s15, [r7, #8]
 8000796:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800079a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800079e:	d502      	bpl.n	80007a6 <PID_controller_1+0x1de>
	{
		PID_value = limit_1;
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80007a4:	e00a      	b.n	80007bc <PID_controller_1+0x1f4>
	}
	else if (PID_value > limit_2)
 80007a6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80007aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80007ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80007b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007b6:	dd01      	ble.n	80007bc <PID_controller_1+0x1f4>
	{
		PID_value = limit_2;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}
	error_old = error;
 80007bc:	4a08      	ldr	r2, [pc, #32]	@ (80007e0 <PID_controller_1+0x218>)
 80007be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007c0:	6013      	str	r3, [r2, #0]
	return PID_value;
 80007c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007c4:	ee07 3a90 	vmov	s15, r3
}
 80007c8:	eeb0 0a67 	vmov.f32	s0, s15
 80007cc:	373c      	adds	r7, #60	@ 0x3c
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	3dcccccd 	.word	0x3dcccccd
 80007dc:	24000850 	.word	0x24000850
 80007e0:	24000854 	.word	0x24000854
 80007e4:	00000000 	.word	0x00000000

080007e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ee:	f000 ffcb 	bl	8001788 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f2:	f000 f921 	bl	8000a38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f6:	f000 fb51 	bl	8000e9c <MX_GPIO_Init>
  MX_ETH_Init();
 80007fa:	f000 fa0d 	bl	8000c18 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80007fe:	f000 facf 	bl	8000da0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000802:	f000 fb19 	bl	8000e38 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8000806:	f000 fa53 	bl	8000cb0 <MX_TIM2_Init>
  MX_ADC3_Init();
 800080a:	f000 f995 	bl	8000b38 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  TIM2->CCR1 = 8736; //11648 = 2ms, 5824 = 1ms, 8736 = 1.5ms
 800080e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000812:	f242 2220 	movw	r2, #8736	@ 0x2220
 8000816:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000818:	2100      	movs	r1, #0
 800081a:	4877      	ldr	r0, [pc, #476]	@ (80009f8 <main+0x210>)
 800081c:	f007 fc0e 	bl	800803c <HAL_TIM_PWM_Start>

  HAL_ADC_Start_IT(&hadc3);
 8000820:	4876      	ldr	r0, [pc, #472]	@ (80009fc <main+0x214>)
 8000822:	f001 fd29 	bl	8002278 <HAL_ADC_Start_IT>

  TIM2->CCR1 = 5824; // turn to 0 deg.
 8000826:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800082a:	f44f 52b6 	mov.w	r2, #5824	@ 0x16c0
 800082e:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_Delay(2000);
 8000830:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000834:	f001 f83a 	bl	80018ac <HAL_Delay>
  for(int a = 0; a < 10; a++)
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	e00a      	b.n	8000854 <main+0x6c>
  {
	  adc_avg_1 += adc_value;
 800083e:	4b70      	ldr	r3, [pc, #448]	@ (8000a00 <main+0x218>)
 8000840:	881b      	ldrh	r3, [r3, #0]
 8000842:	461a      	mov	r2, r3
 8000844:	4b6f      	ldr	r3, [pc, #444]	@ (8000a04 <main+0x21c>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4413      	add	r3, r2
 800084a:	4a6e      	ldr	r2, [pc, #440]	@ (8000a04 <main+0x21c>)
 800084c:	6013      	str	r3, [r2, #0]
  for(int a = 0; a < 10; a++)
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	3301      	adds	r3, #1
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	2b09      	cmp	r3, #9
 8000858:	ddf1      	ble.n	800083e <main+0x56>
  }
  adc_avg_1 = adc_avg_1 / 10;
 800085a:	4b6a      	ldr	r3, [pc, #424]	@ (8000a04 <main+0x21c>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a6a      	ldr	r2, [pc, #424]	@ (8000a08 <main+0x220>)
 8000860:	fba2 2303 	umull	r2, r3, r2, r3
 8000864:	08db      	lsrs	r3, r3, #3
 8000866:	4a67      	ldr	r2, [pc, #412]	@ (8000a04 <main+0x21c>)
 8000868:	6013      	str	r3, [r2, #0]

  TIM2->CCR1 = 11648; // turn to 180 deg.
 800086a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800086e:	f44f 5236 	mov.w	r2, #11648	@ 0x2d80
 8000872:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_Delay(2000);
 8000874:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000878:	f001 f818 	bl	80018ac <HAL_Delay>
  for(int a = 0; a < 10; a++)
 800087c:	2300      	movs	r3, #0
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	e00a      	b.n	8000898 <main+0xb0>
  {
	  adc_avg_2 += adc_value;
 8000882:	4b5f      	ldr	r3, [pc, #380]	@ (8000a00 <main+0x218>)
 8000884:	881b      	ldrh	r3, [r3, #0]
 8000886:	461a      	mov	r2, r3
 8000888:	4b60      	ldr	r3, [pc, #384]	@ (8000a0c <main+0x224>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4413      	add	r3, r2
 800088e:	4a5f      	ldr	r2, [pc, #380]	@ (8000a0c <main+0x224>)
 8000890:	6013      	str	r3, [r2, #0]
  for(int a = 0; a < 10; a++)
 8000892:	68bb      	ldr	r3, [r7, #8]
 8000894:	3301      	adds	r3, #1
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	2b09      	cmp	r3, #9
 800089c:	ddf1      	ble.n	8000882 <main+0x9a>
  }
  adc_avg_2 = adc_avg_2 / 10;
 800089e:	4b5b      	ldr	r3, [pc, #364]	@ (8000a0c <main+0x224>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a59      	ldr	r2, [pc, #356]	@ (8000a08 <main+0x220>)
 80008a4:	fba2 2303 	umull	r2, r3, r2, r3
 80008a8:	08db      	lsrs	r3, r3, #3
 80008aa:	4a58      	ldr	r2, [pc, #352]	@ (8000a0c <main+0x224>)
 80008ac:	6013      	str	r3, [r2, #0]

  adc_cal = 180.0 / (adc_avg_2 - adc_avg_1);
 80008ae:	4b57      	ldr	r3, [pc, #348]	@ (8000a0c <main+0x224>)
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	4b54      	ldr	r3, [pc, #336]	@ (8000a04 <main+0x21c>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	1ad3      	subs	r3, r2, r3
 80008b8:	ee07 3a90 	vmov	s15, r3
 80008bc:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80008c0:	ed9f 5b47 	vldr	d5, [pc, #284]	@ 80009e0 <main+0x1f8>
 80008c4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80008c8:	4b51      	ldr	r3, [pc, #324]	@ (8000a10 <main+0x228>)
 80008ca:	ed83 7b00 	vstr	d7, [r3]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  servo_process = (int)((adc_value - adc_avg_1) * adc_cal);
 80008ce:	4b4c      	ldr	r3, [pc, #304]	@ (8000a00 <main+0x218>)
 80008d0:	881b      	ldrh	r3, [r3, #0]
 80008d2:	461a      	mov	r2, r3
 80008d4:	4b4b      	ldr	r3, [pc, #300]	@ (8000a04 <main+0x21c>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	1ad3      	subs	r3, r2, r3
 80008da:	ee07 3a90 	vmov	s15, r3
 80008de:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80008e2:	4b4b      	ldr	r3, [pc, #300]	@ (8000a10 <main+0x228>)
 80008e4:	ed93 7b00 	vldr	d7, [r3]
 80008e8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80008ec:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80008f0:	ee17 2a90 	vmov	r2, s15
 80008f4:	4b47      	ldr	r3, [pc, #284]	@ (8000a14 <main+0x22c>)
 80008f6:	601a      	str	r2, [r3, #0]

	  if(servo_process > 1000)
 80008f8:	4b46      	ldr	r3, [pc, #280]	@ (8000a14 <main+0x22c>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000900:	dd02      	ble.n	8000908 <main+0x120>
	  {
		  servo_process = 0;
 8000902:	4b44      	ldr	r3, [pc, #272]	@ (8000a14 <main+0x22c>)
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
	  }

	  for(int a = 9; a > 0; a--)
 8000908:	2309      	movs	r3, #9
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	e00b      	b.n	8000926 <main+0x13e>
	  {
		  adc_avg[a] = adc_avg[a-1];
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	3b01      	subs	r3, #1
 8000912:	4a41      	ldr	r2, [pc, #260]	@ (8000a18 <main+0x230>)
 8000914:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000918:	493f      	ldr	r1, [pc, #252]	@ (8000a18 <main+0x230>)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  for(int a = 9; a > 0; a--)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	3b01      	subs	r3, #1
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2b00      	cmp	r3, #0
 800092a:	dcf0      	bgt.n	800090e <main+0x126>
	  }
	  adc_avg[0] = servo_process;
 800092c:	4b39      	ldr	r3, [pc, #228]	@ (8000a14 <main+0x22c>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a39      	ldr	r2, [pc, #228]	@ (8000a18 <main+0x230>)
 8000932:	6013      	str	r3, [r2, #0]

	  adc_avg_val = 0;
 8000934:	4b39      	ldr	r3, [pc, #228]	@ (8000a1c <main+0x234>)
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
	  for(int b = 0; b < 10; b++)
 800093a:	2300      	movs	r3, #0
 800093c:	603b      	str	r3, [r7, #0]
 800093e:	e00b      	b.n	8000958 <main+0x170>
	  {
		  adc_avg_val += adc_avg[b];
 8000940:	4a35      	ldr	r2, [pc, #212]	@ (8000a18 <main+0x230>)
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000948:	4b34      	ldr	r3, [pc, #208]	@ (8000a1c <main+0x234>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4413      	add	r3, r2
 800094e:	4a33      	ldr	r2, [pc, #204]	@ (8000a1c <main+0x234>)
 8000950:	6013      	str	r3, [r2, #0]
	  for(int b = 0; b < 10; b++)
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	3301      	adds	r3, #1
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	2b09      	cmp	r3, #9
 800095c:	ddf0      	ble.n	8000940 <main+0x158>
	  }

	  adc_avg_val = adc_avg_val / 10;
 800095e:	4b2f      	ldr	r3, [pc, #188]	@ (8000a1c <main+0x234>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a2f      	ldr	r2, [pc, #188]	@ (8000a20 <main+0x238>)
 8000964:	fb82 1203 	smull	r1, r2, r2, r3
 8000968:	1092      	asrs	r2, r2, #2
 800096a:	17db      	asrs	r3, r3, #31
 800096c:	1ad3      	subs	r3, r2, r3
 800096e:	4a2b      	ldr	r2, [pc, #172]	@ (8000a1c <main+0x234>)
 8000970:	6013      	str	r3, [r2, #0]

	  servo_signal = (int)(PID_controller_1((float)servo_set, (float)adc_avg_val, 1, 1, 0.02, 0, 180) * 32.35556 + 5824);
 8000972:	4b2c      	ldr	r3, [pc, #176]	@ (8000a24 <main+0x23c>)
 8000974:	edd3 7a00 	vldr	s15, [r3]
 8000978:	4b28      	ldr	r3, [pc, #160]	@ (8000a1c <main+0x234>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	ee07 3a10 	vmov	s14, r3
 8000980:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000984:	ed9f 3a28 	vldr	s6, [pc, #160]	@ 8000a28 <main+0x240>
 8000988:	eddf 2a28 	vldr	s5, [pc, #160]	@ 8000a2c <main+0x244>
 800098c:	ed9f 2a28 	vldr	s4, [pc, #160]	@ 8000a30 <main+0x248>
 8000990:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 8000994:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8000998:	eef0 0a47 	vmov.f32	s1, s14
 800099c:	eeb0 0a67 	vmov.f32	s0, s15
 80009a0:	f7ff fe12 	bl	80005c8 <PID_controller_1>
 80009a4:	eef0 7a40 	vmov.f32	s15, s0
 80009a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009ac:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 80009e8 <main+0x200>
 80009b0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80009b4:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 80009f0 <main+0x208>
 80009b8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80009bc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80009c0:	ee17 3a90 	vmov	r3, s15
 80009c4:	b29a      	uxth	r2, r3
 80009c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000a34 <main+0x24c>)
 80009c8:	801a      	strh	r2, [r3, #0]

	  TIM2->CCR1 = servo_signal;
 80009ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000a34 <main+0x24c>)
 80009cc:	881a      	ldrh	r2, [r3, #0]
 80009ce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80009d2:	635a      	str	r2, [r3, #52]	@ 0x34
	  HAL_Delay(100);
 80009d4:	2064      	movs	r0, #100	@ 0x64
 80009d6:	f000 ff69 	bl	80018ac <HAL_Delay>
	  servo_process = (int)((adc_value - adc_avg_1) * adc_cal);
 80009da:	e778      	b.n	80008ce <main+0xe6>
 80009dc:	f3af 8000 	nop.w
 80009e0:	00000000 	.word	0x00000000
 80009e4:	40668000 	.word	0x40668000
 80009e8:	fd75e204 	.word	0xfd75e204
 80009ec:	40402d82 	.word	0x40402d82
 80009f0:	00000000 	.word	0x00000000
 80009f4:	40b6c000 	.word	0x40b6c000
 80009f8:	2400028c 	.word	0x2400028c
 80009fc:	24000178 	.word	0x24000178
 8000a00:	240000f4 	.word	0x240000f4
 8000a04:	24000120 	.word	0x24000120
 8000a08:	cccccccd 	.word	0xcccccccd
 8000a0c:	24000124 	.word	0x24000124
 8000a10:	24000130 	.word	0x24000130
 8000a14:	2400013c 	.word	0x2400013c
 8000a18:	240000f8 	.word	0x240000f8
 8000a1c:	24000128 	.word	0x24000128
 8000a20:	66666667 	.word	0x66666667
 8000a24:	24000138 	.word	0x24000138
 8000a28:	43340000 	.word	0x43340000
 8000a2c:	00000000 	.word	0x00000000
 8000a30:	3ca3d70a 	.word	0x3ca3d70a
 8000a34:	24000000 	.word	0x24000000

08000a38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b09c      	sub	sp, #112	@ 0x70
 8000a3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a42:	224c      	movs	r2, #76	@ 0x4c
 8000a44:	2100      	movs	r1, #0
 8000a46:	4618      	mov	r0, r3
 8000a48:	f009 fec3 	bl	800a7d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a4c:	1d3b      	adds	r3, r7, #4
 8000a4e:	2220      	movs	r2, #32
 8000a50:	2100      	movs	r1, #0
 8000a52:	4618      	mov	r0, r3
 8000a54:	f009 febd 	bl	800a7d2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a58:	2002      	movs	r0, #2
 8000a5a:	f003 fd09 	bl	8004470 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a5e:	2300      	movs	r3, #0
 8000a60:	603b      	str	r3, [r7, #0]
 8000a62:	4b33      	ldr	r3, [pc, #204]	@ (8000b30 <SystemClock_Config+0xf8>)
 8000a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a66:	4a32      	ldr	r2, [pc, #200]	@ (8000b30 <SystemClock_Config+0xf8>)
 8000a68:	f023 0301 	bic.w	r3, r3, #1
 8000a6c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a6e:	4b30      	ldr	r3, [pc, #192]	@ (8000b30 <SystemClock_Config+0xf8>)
 8000a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	603b      	str	r3, [r7, #0]
 8000a78:	4b2e      	ldr	r3, [pc, #184]	@ (8000b34 <SystemClock_Config+0xfc>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a80:	4a2c      	ldr	r2, [pc, #176]	@ (8000b34 <SystemClock_Config+0xfc>)
 8000a82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a86:	6193      	str	r3, [r2, #24]
 8000a88:	4b2a      	ldr	r3, [pc, #168]	@ (8000b34 <SystemClock_Config+0xfc>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a90:	603b      	str	r3, [r7, #0]
 8000a92:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a94:	bf00      	nop
 8000a96:	4b27      	ldr	r3, [pc, #156]	@ (8000b34 <SystemClock_Config+0xfc>)
 8000a98:	699b      	ldr	r3, [r3, #24]
 8000a9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000aa2:	d1f8      	bne.n	8000a96 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000aa8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000aac:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ab2:	2340      	movs	r3, #64	@ 0x40
 8000ab4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aba:	2302      	movs	r3, #2
 8000abc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 19;
 8000ac2:	2313      	movs	r3, #19
 8000ac4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000aca:	2303      	movs	r3, #3
 8000acc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ad2:	230c      	movs	r3, #12
 8000ad4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ade:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f003 fd0e 	bl	8004504 <HAL_RCC_OscConfig>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000aee:	f000 facb 	bl	8001088 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af2:	233f      	movs	r3, #63	@ 0x3f
 8000af4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000af6:	2300      	movs	r3, #0
 8000af8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000afa:	2300      	movs	r3, #0
 8000afc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000b02:	2300      	movs	r3, #0
 8000b04:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	2101      	movs	r1, #1
 8000b16:	4618      	mov	r0, r3
 8000b18:	f004 f94e 	bl	8004db8 <HAL_RCC_ClockConfig>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000b22:	f000 fab1 	bl	8001088 <Error_Handler>
  }
}
 8000b26:	bf00      	nop
 8000b28:	3770      	adds	r7, #112	@ 0x70
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	58000400 	.word	0x58000400
 8000b34:	58024800 	.word	0x58024800

08000b38 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b088      	sub	sp, #32
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b3e:	1d3b      	adds	r3, r7, #4
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]
 8000b4c:	615a      	str	r2, [r3, #20]
 8000b4e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000b50:	4b2e      	ldr	r3, [pc, #184]	@ (8000c0c <MX_ADC3_Init+0xd4>)
 8000b52:	4a2f      	ldr	r2, [pc, #188]	@ (8000c10 <MX_ADC3_Init+0xd8>)
 8000b54:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b56:	4b2d      	ldr	r3, [pc, #180]	@ (8000c0c <MX_ADC3_Init+0xd4>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	605a      	str	r2, [r3, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b5c:	4b2b      	ldr	r3, [pc, #172]	@ (8000c0c <MX_ADC3_Init+0xd4>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b62:	4b2a      	ldr	r3, [pc, #168]	@ (8000c0c <MX_ADC3_Init+0xd4>)
 8000b64:	2204      	movs	r2, #4
 8000b66:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000b68:	4b28      	ldr	r3, [pc, #160]	@ (8000c0c <MX_ADC3_Init+0xd4>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000b6e:	4b27      	ldr	r3, [pc, #156]	@ (8000c0c <MX_ADC3_Init+0xd4>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000b74:	4b25      	ldr	r3, [pc, #148]	@ (8000c0c <MX_ADC3_Init+0xd4>)
 8000b76:	2201      	movs	r2, #1
 8000b78:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000b7a:	4b24      	ldr	r3, [pc, #144]	@ (8000c0c <MX_ADC3_Init+0xd4>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b80:	4b22      	ldr	r3, [pc, #136]	@ (8000c0c <MX_ADC3_Init+0xd4>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b86:	4b21      	ldr	r3, [pc, #132]	@ (8000c0c <MX_ADC3_Init+0xd4>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b8c:	4b1f      	ldr	r3, [pc, #124]	@ (8000c0c <MX_ADC3_Init+0xd4>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b92:	4b1e      	ldr	r3, [pc, #120]	@ (8000c0c <MX_ADC3_Init+0xd4>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b98:	4b1c      	ldr	r3, [pc, #112]	@ (8000c0c <MX_ADC3_Init+0xd4>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8000c0c <MX_ADC3_Init+0xd4>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 8000ba6:	4b19      	ldr	r3, [pc, #100]	@ (8000c0c <MX_ADC3_Init+0xd4>)
 8000ba8:	2201      	movs	r2, #1
 8000baa:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000bac:	4817      	ldr	r0, [pc, #92]	@ (8000c0c <MX_ADC3_Init+0xd4>)
 8000bae:	f001 f8cd 	bl	8001d4c <HAL_ADC_Init>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 8000bb8:	f000 fa66 	bl	8001088 <Error_Handler>
  }
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000bbc:	4b13      	ldr	r3, [pc, #76]	@ (8000c0c <MX_ADC3_Init+0xd4>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000bc2:	4812      	ldr	r0, [pc, #72]	@ (8000c0c <MX_ADC3_Init+0xd4>)
 8000bc4:	f001 f8c2 	bl	8001d4c <HAL_ADC_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_ADC3_Init+0x9a>
  {
    Error_Handler();
 8000bce:	f000 fa5b 	bl	8001088 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000bd2:	4b10      	ldr	r3, [pc, #64]	@ (8000c14 <MX_ADC3_Init+0xdc>)
 8000bd4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bd6:	2306      	movs	r3, #6
 8000bd8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8000bda:	2305      	movs	r3, #5
 8000bdc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bde:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000be2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000be4:	2304      	movs	r3, #4
 8000be6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000bec:	2300      	movs	r3, #0
 8000bee:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4805      	ldr	r0, [pc, #20]	@ (8000c0c <MX_ADC3_Init+0xd4>)
 8000bf6:	f001 fed9 	bl	80029ac <HAL_ADC_ConfigChannel>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_ADC3_Init+0xcc>
  {
    Error_Handler();
 8000c00:	f000 fa42 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000c04:	bf00      	nop
 8000c06:	3720      	adds	r7, #32
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	24000178 	.word	0x24000178
 8000c10:	58026000 	.word	0x58026000
 8000c14:	04300002 	.word	0x04300002

08000c18 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000c1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000c98 <MX_ETH_Init+0x80>)
 8000c1e:	4a1f      	ldr	r2, [pc, #124]	@ (8000c9c <MX_ETH_Init+0x84>)
 8000c20:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000c22:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca0 <MX_ETH_Init+0x88>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000c28:	4b1d      	ldr	r3, [pc, #116]	@ (8000ca0 <MX_ETH_Init+0x88>)
 8000c2a:	2280      	movs	r2, #128	@ 0x80
 8000c2c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000c2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca0 <MX_ETH_Init+0x88>)
 8000c30:	22e1      	movs	r2, #225	@ 0xe1
 8000c32:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000c34:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca0 <MX_ETH_Init+0x88>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000c3a:	4b19      	ldr	r3, [pc, #100]	@ (8000ca0 <MX_ETH_Init+0x88>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000c40:	4b17      	ldr	r3, [pc, #92]	@ (8000ca0 <MX_ETH_Init+0x88>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000c46:	4b14      	ldr	r3, [pc, #80]	@ (8000c98 <MX_ETH_Init+0x80>)
 8000c48:	4a15      	ldr	r2, [pc, #84]	@ (8000ca0 <MX_ETH_Init+0x88>)
 8000c4a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000c4c:	4b12      	ldr	r3, [pc, #72]	@ (8000c98 <MX_ETH_Init+0x80>)
 8000c4e:	2201      	movs	r2, #1
 8000c50:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000c52:	4b11      	ldr	r3, [pc, #68]	@ (8000c98 <MX_ETH_Init+0x80>)
 8000c54:	4a13      	ldr	r2, [pc, #76]	@ (8000ca4 <MX_ETH_Init+0x8c>)
 8000c56:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000c58:	4b0f      	ldr	r3, [pc, #60]	@ (8000c98 <MX_ETH_Init+0x80>)
 8000c5a:	4a13      	ldr	r2, [pc, #76]	@ (8000ca8 <MX_ETH_Init+0x90>)
 8000c5c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c98 <MX_ETH_Init+0x80>)
 8000c60:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000c64:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000c66:	480c      	ldr	r0, [pc, #48]	@ (8000c98 <MX_ETH_Init+0x80>)
 8000c68:	f002 fcd4 	bl	8003614 <HAL_ETH_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000c72:	f000 fa09 	bl	8001088 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000c76:	2238      	movs	r2, #56	@ 0x38
 8000c78:	2100      	movs	r1, #0
 8000c7a:	480c      	ldr	r0, [pc, #48]	@ (8000cac <MX_ETH_Init+0x94>)
 8000c7c:	f009 fda9 	bl	800a7d2 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000c80:	4b0a      	ldr	r3, [pc, #40]	@ (8000cac <MX_ETH_Init+0x94>)
 8000c82:	2221      	movs	r2, #33	@ 0x21
 8000c84:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000c86:	4b09      	ldr	r3, [pc, #36]	@ (8000cac <MX_ETH_Init+0x94>)
 8000c88:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000c8c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000c8e:	4b07      	ldr	r3, [pc, #28]	@ (8000cac <MX_ETH_Init+0x94>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	240001dc 	.word	0x240001dc
 8000c9c:	40028000 	.word	0x40028000
 8000ca0:	24000858 	.word	0x24000858
 8000ca4:	24000074 	.word	0x24000074
 8000ca8:	24000014 	.word	0x24000014
 8000cac:	24000140 	.word	0x24000140

08000cb0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08e      	sub	sp, #56	@ 0x38
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cb6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc4:	f107 031c 	add.w	r3, r7, #28
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cd0:	463b      	mov	r3, r7
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
 8000cdc:	611a      	str	r2, [r3, #16]
 8000cde:	615a      	str	r2, [r3, #20]
 8000ce0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ce2:	4b2d      	ldr	r3, [pc, #180]	@ (8000d98 <MX_TIM2_Init+0xe8>)
 8000ce4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ce8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 8000cea:	4b2b      	ldr	r3, [pc, #172]	@ (8000d98 <MX_TIM2_Init+0xe8>)
 8000cec:	220a      	movs	r2, #10
 8000cee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf0:	4b29      	ldr	r3, [pc, #164]	@ (8000d98 <MX_TIM2_Init+0xe8>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 116480;
 8000cf6:	4b28      	ldr	r3, [pc, #160]	@ (8000d98 <MX_TIM2_Init+0xe8>)
 8000cf8:	4a28      	ldr	r2, [pc, #160]	@ (8000d9c <MX_TIM2_Init+0xec>)
 8000cfa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cfc:	4b26      	ldr	r3, [pc, #152]	@ (8000d98 <MX_TIM2_Init+0xe8>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d02:	4b25      	ldr	r3, [pc, #148]	@ (8000d98 <MX_TIM2_Init+0xe8>)
 8000d04:	2280      	movs	r2, #128	@ 0x80
 8000d06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d08:	4823      	ldr	r0, [pc, #140]	@ (8000d98 <MX_TIM2_Init+0xe8>)
 8000d0a:	f007 f8df 	bl	8007ecc <HAL_TIM_Base_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000d14:	f000 f9b8 	bl	8001088 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d1e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d22:	4619      	mov	r1, r3
 8000d24:	481c      	ldr	r0, [pc, #112]	@ (8000d98 <MX_TIM2_Init+0xe8>)
 8000d26:	f007 fbab 	bl	8008480 <HAL_TIM_ConfigClockSource>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000d30:	f000 f9aa 	bl	8001088 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d34:	4818      	ldr	r0, [pc, #96]	@ (8000d98 <MX_TIM2_Init+0xe8>)
 8000d36:	f007 f920 	bl	8007f7a <HAL_TIM_PWM_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000d40:	f000 f9a2 	bl	8001088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d4c:	f107 031c 	add.w	r3, r7, #28
 8000d50:	4619      	mov	r1, r3
 8000d52:	4811      	ldr	r0, [pc, #68]	@ (8000d98 <MX_TIM2_Init+0xe8>)
 8000d54:	f008 f8cc 	bl	8008ef0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000d5e:	f000 f993 	bl	8001088 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d62:	2360      	movs	r3, #96	@ 0x60
 8000d64:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 25;
 8000d66:	2319      	movs	r3, #25
 8000d68:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d72:	463b      	mov	r3, r7
 8000d74:	2200      	movs	r2, #0
 8000d76:	4619      	mov	r1, r3
 8000d78:	4807      	ldr	r0, [pc, #28]	@ (8000d98 <MX_TIM2_Init+0xe8>)
 8000d7a:	f007 fa6d 	bl	8008258 <HAL_TIM_PWM_ConfigChannel>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000d84:	f000 f980 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d88:	4803      	ldr	r0, [pc, #12]	@ (8000d98 <MX_TIM2_Init+0xe8>)
 8000d8a:	f000 faf3 	bl	8001374 <HAL_TIM_MspPostInit>

}
 8000d8e:	bf00      	nop
 8000d90:	3738      	adds	r7, #56	@ 0x38
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	2400028c 	.word	0x2400028c
 8000d9c:	0001c700 	.word	0x0001c700

08000da0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000da4:	4b22      	ldr	r3, [pc, #136]	@ (8000e30 <MX_USART3_UART_Init+0x90>)
 8000da6:	4a23      	ldr	r2, [pc, #140]	@ (8000e34 <MX_USART3_UART_Init+0x94>)
 8000da8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000daa:	4b21      	ldr	r3, [pc, #132]	@ (8000e30 <MX_USART3_UART_Init+0x90>)
 8000dac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000db0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000db2:	4b1f      	ldr	r3, [pc, #124]	@ (8000e30 <MX_USART3_UART_Init+0x90>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000db8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e30 <MX_USART3_UART_Init+0x90>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dbe:	4b1c      	ldr	r3, [pc, #112]	@ (8000e30 <MX_USART3_UART_Init+0x90>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dc4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e30 <MX_USART3_UART_Init+0x90>)
 8000dc6:	220c      	movs	r2, #12
 8000dc8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dca:	4b19      	ldr	r3, [pc, #100]	@ (8000e30 <MX_USART3_UART_Init+0x90>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd0:	4b17      	ldr	r3, [pc, #92]	@ (8000e30 <MX_USART3_UART_Init+0x90>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dd6:	4b16      	ldr	r3, [pc, #88]	@ (8000e30 <MX_USART3_UART_Init+0x90>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ddc:	4b14      	ldr	r3, [pc, #80]	@ (8000e30 <MX_USART3_UART_Init+0x90>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000de2:	4b13      	ldr	r3, [pc, #76]	@ (8000e30 <MX_USART3_UART_Init+0x90>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000de8:	4811      	ldr	r0, [pc, #68]	@ (8000e30 <MX_USART3_UART_Init+0x90>)
 8000dea:	f008 f90f 	bl	800900c <HAL_UART_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000df4:	f000 f948 	bl	8001088 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000df8:	2100      	movs	r1, #0
 8000dfa:	480d      	ldr	r0, [pc, #52]	@ (8000e30 <MX_USART3_UART_Init+0x90>)
 8000dfc:	f009 f917 	bl	800a02e <HAL_UARTEx_SetTxFifoThreshold>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e06:	f000 f93f 	bl	8001088 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4808      	ldr	r0, [pc, #32]	@ (8000e30 <MX_USART3_UART_Init+0x90>)
 8000e0e:	f009 f94c 	bl	800a0aa <HAL_UARTEx_SetRxFifoThreshold>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000e18:	f000 f936 	bl	8001088 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e1c:	4804      	ldr	r0, [pc, #16]	@ (8000e30 <MX_USART3_UART_Init+0x90>)
 8000e1e:	f009 f8cd 	bl	8009fbc <HAL_UARTEx_DisableFifoMode>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000e28:	f000 f92e 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	240002d8 	.word	0x240002d8
 8000e34:	40004800 	.word	0x40004800

08000e38 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e3c:	4b15      	ldr	r3, [pc, #84]	@ (8000e94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e3e:	4a16      	ldr	r2, [pc, #88]	@ (8000e98 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000e40:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000e42:	4b14      	ldr	r3, [pc, #80]	@ (8000e94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e44:	2209      	movs	r2, #9
 8000e46:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e48:	4b12      	ldr	r3, [pc, #72]	@ (8000e94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000e4e:	4b11      	ldr	r3, [pc, #68]	@ (8000e94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e54:	4b0f      	ldr	r3, [pc, #60]	@ (8000e94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e56:	2202      	movs	r2, #2
 8000e58:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e60:	4b0c      	ldr	r3, [pc, #48]	@ (8000e94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e66:	4b0b      	ldr	r3, [pc, #44]	@ (8000e94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000e6c:	4b09      	ldr	r3, [pc, #36]	@ (8000e94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e6e:	2201      	movs	r2, #1
 8000e70:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000e72:	4b08      	ldr	r3, [pc, #32]	@ (8000e94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000e78:	4b06      	ldr	r3, [pc, #24]	@ (8000e94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e7e:	4805      	ldr	r0, [pc, #20]	@ (8000e94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e80:	f003 f9c5 	bl	800420e <HAL_PCD_Init>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000e8a:	f000 f8fd 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	2400036c 	.word	0x2400036c
 8000e98:	40080000 	.word	0x40080000

08000e9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08c      	sub	sp, #48	@ 0x30
 8000ea0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea2:	f107 031c 	add.w	r3, r7, #28
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	609a      	str	r2, [r3, #8]
 8000eae:	60da      	str	r2, [r3, #12]
 8000eb0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb2:	4b62      	ldr	r3, [pc, #392]	@ (800103c <MX_GPIO_Init+0x1a0>)
 8000eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb8:	4a60      	ldr	r2, [pc, #384]	@ (800103c <MX_GPIO_Init+0x1a0>)
 8000eba:	f043 0304 	orr.w	r3, r3, #4
 8000ebe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ec2:	4b5e      	ldr	r3, [pc, #376]	@ (800103c <MX_GPIO_Init+0x1a0>)
 8000ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ec8:	f003 0304 	and.w	r3, r3, #4
 8000ecc:	61bb      	str	r3, [r7, #24]
 8000ece:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ed0:	4b5a      	ldr	r3, [pc, #360]	@ (800103c <MX_GPIO_Init+0x1a0>)
 8000ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ed6:	4a59      	ldr	r2, [pc, #356]	@ (800103c <MX_GPIO_Init+0x1a0>)
 8000ed8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000edc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ee0:	4b56      	ldr	r3, [pc, #344]	@ (800103c <MX_GPIO_Init+0x1a0>)
 8000ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ee6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000eea:	617b      	str	r3, [r7, #20]
 8000eec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eee:	4b53      	ldr	r3, [pc, #332]	@ (800103c <MX_GPIO_Init+0x1a0>)
 8000ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ef4:	4a51      	ldr	r2, [pc, #324]	@ (800103c <MX_GPIO_Init+0x1a0>)
 8000ef6:	f043 0301 	orr.w	r3, r3, #1
 8000efa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000efe:	4b4f      	ldr	r3, [pc, #316]	@ (800103c <MX_GPIO_Init+0x1a0>)
 8000f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f04:	f003 0301 	and.w	r3, r3, #1
 8000f08:	613b      	str	r3, [r7, #16]
 8000f0a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0c:	4b4b      	ldr	r3, [pc, #300]	@ (800103c <MX_GPIO_Init+0x1a0>)
 8000f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f12:	4a4a      	ldr	r2, [pc, #296]	@ (800103c <MX_GPIO_Init+0x1a0>)
 8000f14:	f043 0302 	orr.w	r3, r3, #2
 8000f18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f1c:	4b47      	ldr	r3, [pc, #284]	@ (800103c <MX_GPIO_Init+0x1a0>)
 8000f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f22:	f003 0302 	and.w	r3, r3, #2
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f2a:	4b44      	ldr	r3, [pc, #272]	@ (800103c <MX_GPIO_Init+0x1a0>)
 8000f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f30:	4a42      	ldr	r2, [pc, #264]	@ (800103c <MX_GPIO_Init+0x1a0>)
 8000f32:	f043 0308 	orr.w	r3, r3, #8
 8000f36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f3a:	4b40      	ldr	r3, [pc, #256]	@ (800103c <MX_GPIO_Init+0x1a0>)
 8000f3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f40:	f003 0308 	and.w	r3, r3, #8
 8000f44:	60bb      	str	r3, [r7, #8]
 8000f46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f48:	4b3c      	ldr	r3, [pc, #240]	@ (800103c <MX_GPIO_Init+0x1a0>)
 8000f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f4e:	4a3b      	ldr	r2, [pc, #236]	@ (800103c <MX_GPIO_Init+0x1a0>)
 8000f50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f58:	4b38      	ldr	r3, [pc, #224]	@ (800103c <MX_GPIO_Init+0x1a0>)
 8000f5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f66:	4b35      	ldr	r3, [pc, #212]	@ (800103c <MX_GPIO_Init+0x1a0>)
 8000f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f6c:	4a33      	ldr	r2, [pc, #204]	@ (800103c <MX_GPIO_Init+0x1a0>)
 8000f6e:	f043 0310 	orr.w	r3, r3, #16
 8000f72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f76:	4b31      	ldr	r3, [pc, #196]	@ (800103c <MX_GPIO_Init+0x1a0>)
 8000f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f7c:	f003 0310 	and.w	r3, r3, #16
 8000f80:	603b      	str	r3, [r7, #0]
 8000f82:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000f84:	2200      	movs	r2, #0
 8000f86:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000f8a:	482d      	ldr	r0, [pc, #180]	@ (8001040 <MX_GPIO_Init+0x1a4>)
 8000f8c:	f003 f926 	bl	80041dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000f90:	2200      	movs	r2, #0
 8000f92:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f96:	482b      	ldr	r0, [pc, #172]	@ (8001044 <MX_GPIO_Init+0x1a8>)
 8000f98:	f003 f920 	bl	80041dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2102      	movs	r1, #2
 8000fa0:	4829      	ldr	r0, [pc, #164]	@ (8001048 <MX_GPIO_Init+0x1ac>)
 8000fa2:	f003 f91b 	bl	80041dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fa6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000faa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fac:	2300      	movs	r3, #0
 8000fae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fb4:	f107 031c 	add.w	r3, r7, #28
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4824      	ldr	r0, [pc, #144]	@ (800104c <MX_GPIO_Init+0x1b0>)
 8000fbc:	f002 ff5e 	bl	8003e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000fc0:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000fc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd2:	f107 031c 	add.w	r3, r7, #28
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4819      	ldr	r0, [pc, #100]	@ (8001040 <MX_GPIO_Init+0x1a4>)
 8000fda:	f002 ff4f 	bl	8003e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000fde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fe2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fec:	2300      	movs	r3, #0
 8000fee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000ff0:	f107 031c 	add.w	r3, r7, #28
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4813      	ldr	r0, [pc, #76]	@ (8001044 <MX_GPIO_Init+0x1a8>)
 8000ff8:	f002 ff40 	bl	8003e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000ffc:	2380      	movs	r3, #128	@ 0x80
 8000ffe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001000:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001004:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800100a:	f107 031c 	add.w	r3, r7, #28
 800100e:	4619      	mov	r1, r3
 8001010:	480f      	ldr	r0, [pc, #60]	@ (8001050 <MX_GPIO_Init+0x1b4>)
 8001012:	f002 ff33 	bl	8003e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001016:	2302      	movs	r3, #2
 8001018:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101a:	2301      	movs	r3, #1
 800101c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001022:	2300      	movs	r3, #0
 8001024:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001026:	f107 031c 	add.w	r3, r7, #28
 800102a:	4619      	mov	r1, r3
 800102c:	4806      	ldr	r0, [pc, #24]	@ (8001048 <MX_GPIO_Init+0x1ac>)
 800102e:	f002 ff25 	bl	8003e7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001032:	bf00      	nop
 8001034:	3730      	adds	r7, #48	@ 0x30
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	58024400 	.word	0x58024400
 8001040:	58020400 	.word	0x58020400
 8001044:	58020c00 	.word	0x58020c00
 8001048:	58021000 	.word	0x58021000
 800104c:	58020800 	.word	0x58020800
 8001050:	58021800 	.word	0x58021800

08001054 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	if(HAL_ADC_PollForConversion(&hadc3, 10) == HAL_OK)
 800105c:	210a      	movs	r1, #10
 800105e:	4808      	ldr	r0, [pc, #32]	@ (8001080 <HAL_ADC_ConvCpltCallback+0x2c>)
 8001060:	f001 f816 	bl	8002090 <HAL_ADC_PollForConversion>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d106      	bne.n	8001078 <HAL_ADC_ConvCpltCallback+0x24>
	{
	  adc_value = HAL_ADC_GetValue(&hadc3);
 800106a:	4805      	ldr	r0, [pc, #20]	@ (8001080 <HAL_ADC_ConvCpltCallback+0x2c>)
 800106c:	f001 fa42 	bl	80024f4 <HAL_ADC_GetValue>
 8001070:	4603      	mov	r3, r0
 8001072:	b29a      	uxth	r2, r3
 8001074:	4b03      	ldr	r3, [pc, #12]	@ (8001084 <HAL_ADC_ConvCpltCallback+0x30>)
 8001076:	801a      	strh	r2, [r3, #0]
	}
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	24000178 	.word	0x24000178
 8001084:	240000f4 	.word	0x240000f4

08001088 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800108c:	b672      	cpsid	i
}
 800108e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001090:	bf00      	nop
 8001092:	e7fd      	b.n	8001090 <Error_Handler+0x8>

08001094 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109a:	4b0a      	ldr	r3, [pc, #40]	@ (80010c4 <HAL_MspInit+0x30>)
 800109c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010a0:	4a08      	ldr	r2, [pc, #32]	@ (80010c4 <HAL_MspInit+0x30>)
 80010a2:	f043 0302 	orr.w	r3, r3, #2
 80010a6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80010aa:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <HAL_MspInit+0x30>)
 80010ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010b0:	f003 0302 	and.w	r3, r3, #2
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	58024400 	.word	0x58024400

080010c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b0b4      	sub	sp, #208	@ 0xd0
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010d0:	f107 0310 	add.w	r3, r7, #16
 80010d4:	22c0      	movs	r2, #192	@ 0xc0
 80010d6:	2100      	movs	r1, #0
 80010d8:	4618      	mov	r0, r3
 80010da:	f009 fb7a 	bl	800a7d2 <memset>
  if(hadc->Instance==ADC3)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a2b      	ldr	r2, [pc, #172]	@ (8001190 <HAL_ADC_MspInit+0xc8>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d14e      	bne.n	8001186 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010e8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80010ec:	f04f 0300 	mov.w	r3, #0
 80010f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 80010f4:	2301      	movs	r3, #1
 80010f6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 19;
 80010f8:	2313      	movs	r3, #19
 80010fa:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80010fc:	2302      	movs	r3, #2
 80010fe:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001100:	2302      	movs	r3, #2
 8001102:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001104:	2302      	movs	r3, #2
 8001106:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001108:	23c0      	movs	r3, #192	@ 0xc0
 800110a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800110c:	2320      	movs	r3, #32
 800110e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 8001110:	2300      	movs	r3, #0
 8001112:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001114:	2300      	movs	r3, #0
 8001116:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800111a:	f107 0310 	add.w	r3, r7, #16
 800111e:	4618      	mov	r0, r3
 8001120:	f004 f9d6 	bl	80054d0 <HAL_RCCEx_PeriphCLKConfig>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 800112a:	f7ff ffad 	bl	8001088 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800112e:	4b19      	ldr	r3, [pc, #100]	@ (8001194 <HAL_ADC_MspInit+0xcc>)
 8001130:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001134:	4a17      	ldr	r2, [pc, #92]	@ (8001194 <HAL_ADC_MspInit+0xcc>)
 8001136:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800113a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800113e:	4b15      	ldr	r3, [pc, #84]	@ (8001194 <HAL_ADC_MspInit+0xcc>)
 8001140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001144:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800114c:	4b11      	ldr	r3, [pc, #68]	@ (8001194 <HAL_ADC_MspInit+0xcc>)
 800114e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001152:	4a10      	ldr	r2, [pc, #64]	@ (8001194 <HAL_ADC_MspInit+0xcc>)
 8001154:	f043 0304 	orr.w	r3, r3, #4
 8001158:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800115c:	4b0d      	ldr	r3, [pc, #52]	@ (8001194 <HAL_ADC_MspInit+0xcc>)
 800115e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001162:	f003 0304 	and.w	r3, r3, #4
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC3_C     ------> ADC3_INP1
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800116a:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 800116e:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8001172:	f000 fbdf 	bl	8001934 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	2100      	movs	r1, #0
 800117a:	207f      	movs	r0, #127	@ 0x7f
 800117c:	f002 fa15 	bl	80035aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8001180:	207f      	movs	r0, #127	@ 0x7f
 8001182:	f002 fa2c 	bl	80035de <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC3_MspInit 1 */

  }

}
 8001186:	bf00      	nop
 8001188:	37d0      	adds	r7, #208	@ 0xd0
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	58026000 	.word	0x58026000
 8001194:	58024400 	.word	0x58024400

08001198 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08e      	sub	sp, #56	@ 0x38
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a59      	ldr	r2, [pc, #356]	@ (800131c <HAL_ETH_MspInit+0x184>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	f040 80ab 	bne.w	8001312 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80011bc:	4b58      	ldr	r3, [pc, #352]	@ (8001320 <HAL_ETH_MspInit+0x188>)
 80011be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011c2:	4a57      	ldr	r2, [pc, #348]	@ (8001320 <HAL_ETH_MspInit+0x188>)
 80011c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011c8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80011cc:	4b54      	ldr	r3, [pc, #336]	@ (8001320 <HAL_ETH_MspInit+0x188>)
 80011ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80011d6:	623b      	str	r3, [r7, #32]
 80011d8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80011da:	4b51      	ldr	r3, [pc, #324]	@ (8001320 <HAL_ETH_MspInit+0x188>)
 80011dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011e0:	4a4f      	ldr	r2, [pc, #316]	@ (8001320 <HAL_ETH_MspInit+0x188>)
 80011e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011e6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80011ea:	4b4d      	ldr	r3, [pc, #308]	@ (8001320 <HAL_ETH_MspInit+0x188>)
 80011ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011f4:	61fb      	str	r3, [r7, #28]
 80011f6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80011f8:	4b49      	ldr	r3, [pc, #292]	@ (8001320 <HAL_ETH_MspInit+0x188>)
 80011fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011fe:	4a48      	ldr	r2, [pc, #288]	@ (8001320 <HAL_ETH_MspInit+0x188>)
 8001200:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001204:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001208:	4b45      	ldr	r3, [pc, #276]	@ (8001320 <HAL_ETH_MspInit+0x188>)
 800120a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800120e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001212:	61bb      	str	r3, [r7, #24]
 8001214:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001216:	4b42      	ldr	r3, [pc, #264]	@ (8001320 <HAL_ETH_MspInit+0x188>)
 8001218:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800121c:	4a40      	ldr	r2, [pc, #256]	@ (8001320 <HAL_ETH_MspInit+0x188>)
 800121e:	f043 0304 	orr.w	r3, r3, #4
 8001222:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001226:	4b3e      	ldr	r3, [pc, #248]	@ (8001320 <HAL_ETH_MspInit+0x188>)
 8001228:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800122c:	f003 0304 	and.w	r3, r3, #4
 8001230:	617b      	str	r3, [r7, #20]
 8001232:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001234:	4b3a      	ldr	r3, [pc, #232]	@ (8001320 <HAL_ETH_MspInit+0x188>)
 8001236:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800123a:	4a39      	ldr	r2, [pc, #228]	@ (8001320 <HAL_ETH_MspInit+0x188>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001244:	4b36      	ldr	r3, [pc, #216]	@ (8001320 <HAL_ETH_MspInit+0x188>)
 8001246:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	613b      	str	r3, [r7, #16]
 8001250:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001252:	4b33      	ldr	r3, [pc, #204]	@ (8001320 <HAL_ETH_MspInit+0x188>)
 8001254:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001258:	4a31      	ldr	r2, [pc, #196]	@ (8001320 <HAL_ETH_MspInit+0x188>)
 800125a:	f043 0302 	orr.w	r3, r3, #2
 800125e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001262:	4b2f      	ldr	r3, [pc, #188]	@ (8001320 <HAL_ETH_MspInit+0x188>)
 8001264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001268:	f003 0302 	and.w	r3, r3, #2
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001270:	4b2b      	ldr	r3, [pc, #172]	@ (8001320 <HAL_ETH_MspInit+0x188>)
 8001272:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001276:	4a2a      	ldr	r2, [pc, #168]	@ (8001320 <HAL_ETH_MspInit+0x188>)
 8001278:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800127c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001280:	4b27      	ldr	r3, [pc, #156]	@ (8001320 <HAL_ETH_MspInit+0x188>)
 8001282:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001286:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800128e:	2332      	movs	r3, #50	@ 0x32
 8001290:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001292:	2302      	movs	r3, #2
 8001294:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129a:	2300      	movs	r3, #0
 800129c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800129e:	230b      	movs	r3, #11
 80012a0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012a6:	4619      	mov	r1, r3
 80012a8:	481e      	ldr	r0, [pc, #120]	@ (8001324 <HAL_ETH_MspInit+0x18c>)
 80012aa:	f002 fde7 	bl	8003e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80012ae:	2386      	movs	r3, #134	@ 0x86
 80012b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b2:	2302      	movs	r3, #2
 80012b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ba:	2300      	movs	r3, #0
 80012bc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012be:	230b      	movs	r3, #11
 80012c0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012c6:	4619      	mov	r1, r3
 80012c8:	4817      	ldr	r0, [pc, #92]	@ (8001328 <HAL_ETH_MspInit+0x190>)
 80012ca:	f002 fdd7 	bl	8003e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d4:	2302      	movs	r3, #2
 80012d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012dc:	2300      	movs	r3, #0
 80012de:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012e0:	230b      	movs	r3, #11
 80012e2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012e8:	4619      	mov	r1, r3
 80012ea:	4810      	ldr	r0, [pc, #64]	@ (800132c <HAL_ETH_MspInit+0x194>)
 80012ec:	f002 fdc6 	bl	8003e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80012f0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80012f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f6:	2302      	movs	r3, #2
 80012f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fe:	2300      	movs	r3, #0
 8001300:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001302:	230b      	movs	r3, #11
 8001304:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001306:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800130a:	4619      	mov	r1, r3
 800130c:	4808      	ldr	r0, [pc, #32]	@ (8001330 <HAL_ETH_MspInit+0x198>)
 800130e:	f002 fdb5 	bl	8003e7c <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8001312:	bf00      	nop
 8001314:	3738      	adds	r7, #56	@ 0x38
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40028000 	.word	0x40028000
 8001320:	58024400 	.word	0x58024400
 8001324:	58020800 	.word	0x58020800
 8001328:	58020000 	.word	0x58020000
 800132c:	58020400 	.word	0x58020400
 8001330:	58021800 	.word	0x58021800

08001334 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001344:	d10e      	bne.n	8001364 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001346:	4b0a      	ldr	r3, [pc, #40]	@ (8001370 <HAL_TIM_Base_MspInit+0x3c>)
 8001348:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800134c:	4a08      	ldr	r2, [pc, #32]	@ (8001370 <HAL_TIM_Base_MspInit+0x3c>)
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001356:	4b06      	ldr	r3, [pc, #24]	@ (8001370 <HAL_TIM_Base_MspInit+0x3c>)
 8001358:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001364:	bf00      	nop
 8001366:	3714      	adds	r7, #20
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	58024400 	.word	0x58024400

08001374 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b088      	sub	sp, #32
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137c:	f107 030c 	add.w	r3, r7, #12
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001394:	d11e      	bne.n	80013d4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001396:	4b11      	ldr	r3, [pc, #68]	@ (80013dc <HAL_TIM_MspPostInit+0x68>)
 8001398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800139c:	4a0f      	ldr	r2, [pc, #60]	@ (80013dc <HAL_TIM_MspPostInit+0x68>)
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013a6:	4b0d      	ldr	r3, [pc, #52]	@ (80013dc <HAL_TIM_MspPostInit+0x68>)
 80013a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	60bb      	str	r3, [r7, #8]
 80013b2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013b4:	2301      	movs	r3, #1
 80013b6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b8:	2302      	movs	r3, #2
 80013ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c0:	2300      	movs	r3, #0
 80013c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013c4:	2301      	movs	r3, #1
 80013c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c8:	f107 030c 	add.w	r3, r7, #12
 80013cc:	4619      	mov	r1, r3
 80013ce:	4804      	ldr	r0, [pc, #16]	@ (80013e0 <HAL_TIM_MspPostInit+0x6c>)
 80013d0:	f002 fd54 	bl	8003e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80013d4:	bf00      	nop
 80013d6:	3720      	adds	r7, #32
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	58024400 	.word	0x58024400
 80013e0:	58020000 	.word	0x58020000

080013e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b0ba      	sub	sp, #232	@ 0xe8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ec:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013fc:	f107 0310 	add.w	r3, r7, #16
 8001400:	22c0      	movs	r2, #192	@ 0xc0
 8001402:	2100      	movs	r1, #0
 8001404:	4618      	mov	r0, r3
 8001406:	f009 f9e4 	bl	800a7d2 <memset>
  if(huart->Instance==USART3)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a27      	ldr	r2, [pc, #156]	@ (80014ac <HAL_UART_MspInit+0xc8>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d146      	bne.n	80014a2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001414:	f04f 0202 	mov.w	r2, #2
 8001418:	f04f 0300 	mov.w	r3, #0
 800141c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001420:	2300      	movs	r3, #0
 8001422:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001426:	f107 0310 	add.w	r3, r7, #16
 800142a:	4618      	mov	r0, r3
 800142c:	f004 f850 	bl	80054d0 <HAL_RCCEx_PeriphCLKConfig>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001436:	f7ff fe27 	bl	8001088 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800143a:	4b1d      	ldr	r3, [pc, #116]	@ (80014b0 <HAL_UART_MspInit+0xcc>)
 800143c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001440:	4a1b      	ldr	r2, [pc, #108]	@ (80014b0 <HAL_UART_MspInit+0xcc>)
 8001442:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001446:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800144a:	4b19      	ldr	r3, [pc, #100]	@ (80014b0 <HAL_UART_MspInit+0xcc>)
 800144c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001450:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001458:	4b15      	ldr	r3, [pc, #84]	@ (80014b0 <HAL_UART_MspInit+0xcc>)
 800145a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800145e:	4a14      	ldr	r2, [pc, #80]	@ (80014b0 <HAL_UART_MspInit+0xcc>)
 8001460:	f043 0308 	orr.w	r3, r3, #8
 8001464:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001468:	4b11      	ldr	r3, [pc, #68]	@ (80014b0 <HAL_UART_MspInit+0xcc>)
 800146a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800146e:	f003 0308 	and.w	r3, r3, #8
 8001472:	60bb      	str	r3, [r7, #8]
 8001474:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001476:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800147a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147e:	2302      	movs	r3, #2
 8001480:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148a:	2300      	movs	r3, #0
 800148c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001490:	2307      	movs	r3, #7
 8001492:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001496:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800149a:	4619      	mov	r1, r3
 800149c:	4805      	ldr	r0, [pc, #20]	@ (80014b4 <HAL_UART_MspInit+0xd0>)
 800149e:	f002 fced 	bl	8003e7c <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80014a2:	bf00      	nop
 80014a4:	37e8      	adds	r7, #232	@ 0xe8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40004800 	.word	0x40004800
 80014b0:	58024400 	.word	0x58024400
 80014b4:	58020c00 	.word	0x58020c00

080014b8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b0ba      	sub	sp, #232	@ 0xe8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014d0:	f107 0310 	add.w	r3, r7, #16
 80014d4:	22c0      	movs	r2, #192	@ 0xc0
 80014d6:	2100      	movs	r1, #0
 80014d8:	4618      	mov	r0, r3
 80014da:	f009 f97a 	bl	800a7d2 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a30      	ldr	r2, [pc, #192]	@ (80015a4 <HAL_PCD_MspInit+0xec>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d159      	bne.n	800159c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80014e8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80014ec:	f04f 0300 	mov.w	r3, #0
 80014f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80014f4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80014f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014fc:	f107 0310 	add.w	r3, r7, #16
 8001500:	4618      	mov	r0, r3
 8001502:	f003 ffe5 	bl	80054d0 <HAL_RCCEx_PeriphCLKConfig>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800150c:	f7ff fdbc 	bl	8001088 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001510:	f002 ffe8 	bl	80044e4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001514:	4b24      	ldr	r3, [pc, #144]	@ (80015a8 <HAL_PCD_MspInit+0xf0>)
 8001516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800151a:	4a23      	ldr	r2, [pc, #140]	@ (80015a8 <HAL_PCD_MspInit+0xf0>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001524:	4b20      	ldr	r3, [pc, #128]	@ (80015a8 <HAL_PCD_MspInit+0xf0>)
 8001526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001532:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001536:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153a:	2302      	movs	r3, #2
 800153c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001546:	2300      	movs	r3, #0
 8001548:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800154c:	230a      	movs	r3, #10
 800154e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001552:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001556:	4619      	mov	r1, r3
 8001558:	4814      	ldr	r0, [pc, #80]	@ (80015ac <HAL_PCD_MspInit+0xf4>)
 800155a:	f002 fc8f 	bl	8003e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800155e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001562:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001566:	2300      	movs	r3, #0
 8001568:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001572:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001576:	4619      	mov	r1, r3
 8001578:	480c      	ldr	r0, [pc, #48]	@ (80015ac <HAL_PCD_MspInit+0xf4>)
 800157a:	f002 fc7f 	bl	8003e7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800157e:	4b0a      	ldr	r3, [pc, #40]	@ (80015a8 <HAL_PCD_MspInit+0xf0>)
 8001580:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001584:	4a08      	ldr	r2, [pc, #32]	@ (80015a8 <HAL_PCD_MspInit+0xf0>)
 8001586:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800158a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800158e:	4b06      	ldr	r3, [pc, #24]	@ (80015a8 <HAL_PCD_MspInit+0xf0>)
 8001590:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001594:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 800159c:	bf00      	nop
 800159e:	37e8      	adds	r7, #232	@ 0xe8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40080000 	.word	0x40080000
 80015a8:	58024400 	.word	0x58024400
 80015ac:	58020000 	.word	0x58020000

080015b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015b4:	bf00      	nop
 80015b6:	e7fd      	b.n	80015b4 <NMI_Handler+0x4>

080015b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015bc:	bf00      	nop
 80015be:	e7fd      	b.n	80015bc <HardFault_Handler+0x4>

080015c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c4:	bf00      	nop
 80015c6:	e7fd      	b.n	80015c4 <MemManage_Handler+0x4>

080015c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015cc:	bf00      	nop
 80015ce:	e7fd      	b.n	80015cc <BusFault_Handler+0x4>

080015d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d4:	bf00      	nop
 80015d6:	e7fd      	b.n	80015d4 <UsageFault_Handler+0x4>

080015d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001606:	f000 f931 	bl	800186c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8001614:	4802      	ldr	r0, [pc, #8]	@ (8001620 <ADC3_IRQHandler+0x10>)
 8001616:	f000 ff7b 	bl	8002510 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	24000178 	.word	0x24000178

08001624 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001628:	4b37      	ldr	r3, [pc, #220]	@ (8001708 <SystemInit+0xe4>)
 800162a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800162e:	4a36      	ldr	r2, [pc, #216]	@ (8001708 <SystemInit+0xe4>)
 8001630:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001634:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001638:	4b34      	ldr	r3, [pc, #208]	@ (800170c <SystemInit+0xe8>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 030f 	and.w	r3, r3, #15
 8001640:	2b06      	cmp	r3, #6
 8001642:	d807      	bhi.n	8001654 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001644:	4b31      	ldr	r3, [pc, #196]	@ (800170c <SystemInit+0xe8>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f023 030f 	bic.w	r3, r3, #15
 800164c:	4a2f      	ldr	r2, [pc, #188]	@ (800170c <SystemInit+0xe8>)
 800164e:	f043 0307 	orr.w	r3, r3, #7
 8001652:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001654:	4b2e      	ldr	r3, [pc, #184]	@ (8001710 <SystemInit+0xec>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a2d      	ldr	r2, [pc, #180]	@ (8001710 <SystemInit+0xec>)
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001660:	4b2b      	ldr	r3, [pc, #172]	@ (8001710 <SystemInit+0xec>)
 8001662:	2200      	movs	r2, #0
 8001664:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001666:	4b2a      	ldr	r3, [pc, #168]	@ (8001710 <SystemInit+0xec>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	4929      	ldr	r1, [pc, #164]	@ (8001710 <SystemInit+0xec>)
 800166c:	4b29      	ldr	r3, [pc, #164]	@ (8001714 <SystemInit+0xf0>)
 800166e:	4013      	ands	r3, r2
 8001670:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001672:	4b26      	ldr	r3, [pc, #152]	@ (800170c <SystemInit+0xe8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0308 	and.w	r3, r3, #8
 800167a:	2b00      	cmp	r3, #0
 800167c:	d007      	beq.n	800168e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800167e:	4b23      	ldr	r3, [pc, #140]	@ (800170c <SystemInit+0xe8>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f023 030f 	bic.w	r3, r3, #15
 8001686:	4a21      	ldr	r2, [pc, #132]	@ (800170c <SystemInit+0xe8>)
 8001688:	f043 0307 	orr.w	r3, r3, #7
 800168c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800168e:	4b20      	ldr	r3, [pc, #128]	@ (8001710 <SystemInit+0xec>)
 8001690:	2200      	movs	r2, #0
 8001692:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001694:	4b1e      	ldr	r3, [pc, #120]	@ (8001710 <SystemInit+0xec>)
 8001696:	2200      	movs	r2, #0
 8001698:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800169a:	4b1d      	ldr	r3, [pc, #116]	@ (8001710 <SystemInit+0xec>)
 800169c:	2200      	movs	r2, #0
 800169e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80016a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001710 <SystemInit+0xec>)
 80016a2:	4a1d      	ldr	r2, [pc, #116]	@ (8001718 <SystemInit+0xf4>)
 80016a4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80016a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001710 <SystemInit+0xec>)
 80016a8:	4a1c      	ldr	r2, [pc, #112]	@ (800171c <SystemInit+0xf8>)
 80016aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80016ac:	4b18      	ldr	r3, [pc, #96]	@ (8001710 <SystemInit+0xec>)
 80016ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001720 <SystemInit+0xfc>)
 80016b0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80016b2:	4b17      	ldr	r3, [pc, #92]	@ (8001710 <SystemInit+0xec>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80016b8:	4b15      	ldr	r3, [pc, #84]	@ (8001710 <SystemInit+0xec>)
 80016ba:	4a19      	ldr	r2, [pc, #100]	@ (8001720 <SystemInit+0xfc>)
 80016bc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80016be:	4b14      	ldr	r3, [pc, #80]	@ (8001710 <SystemInit+0xec>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80016c4:	4b12      	ldr	r3, [pc, #72]	@ (8001710 <SystemInit+0xec>)
 80016c6:	4a16      	ldr	r2, [pc, #88]	@ (8001720 <SystemInit+0xfc>)
 80016c8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80016ca:	4b11      	ldr	r3, [pc, #68]	@ (8001710 <SystemInit+0xec>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001710 <SystemInit+0xec>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a0e      	ldr	r2, [pc, #56]	@ (8001710 <SystemInit+0xec>)
 80016d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016da:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80016dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001710 <SystemInit+0xec>)
 80016de:	2200      	movs	r2, #0
 80016e0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80016e2:	4b10      	ldr	r3, [pc, #64]	@ (8001724 <SystemInit+0x100>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	4b10      	ldr	r3, [pc, #64]	@ (8001728 <SystemInit+0x104>)
 80016e8:	4013      	ands	r3, r2
 80016ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80016ee:	d202      	bcs.n	80016f6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80016f0:	4b0e      	ldr	r3, [pc, #56]	@ (800172c <SystemInit+0x108>)
 80016f2:	2201      	movs	r2, #1
 80016f4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80016f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001730 <SystemInit+0x10c>)
 80016f8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80016fc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80016fe:	bf00      	nop
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000ed00 	.word	0xe000ed00
 800170c:	52002000 	.word	0x52002000
 8001710:	58024400 	.word	0x58024400
 8001714:	eaf6ed7f 	.word	0xeaf6ed7f
 8001718:	02020200 	.word	0x02020200
 800171c:	01ff0000 	.word	0x01ff0000
 8001720:	01010280 	.word	0x01010280
 8001724:	5c001000 	.word	0x5c001000
 8001728:	ffff0000 	.word	0xffff0000
 800172c:	51008108 	.word	0x51008108
 8001730:	52004000 	.word	0x52004000

08001734 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001734:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800176c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001738:	f7ff ff74 	bl	8001624 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800173c:	480c      	ldr	r0, [pc, #48]	@ (8001770 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800173e:	490d      	ldr	r1, [pc, #52]	@ (8001774 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001740:	4a0d      	ldr	r2, [pc, #52]	@ (8001778 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001742:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001744:	e002      	b.n	800174c <LoopCopyDataInit>

08001746 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001746:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001748:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800174a:	3304      	adds	r3, #4

0800174c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800174c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800174e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001750:	d3f9      	bcc.n	8001746 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001752:	4a0a      	ldr	r2, [pc, #40]	@ (800177c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001754:	4c0a      	ldr	r4, [pc, #40]	@ (8001780 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001756:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001758:	e001      	b.n	800175e <LoopFillZerobss>

0800175a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800175a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800175c:	3204      	adds	r2, #4

0800175e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800175e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001760:	d3fb      	bcc.n	800175a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001762:	f009 f83f 	bl	800a7e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001766:	f7ff f83f 	bl	80007e8 <main>
  bx  lr
 800176a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800176c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001770:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001774:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8001778:	0800a88c 	.word	0x0800a88c
  ldr r2, =_sbss
 800177c:	240000d8 	.word	0x240000d8
  ldr r4, =_ebss
 8001780:	24000864 	.word	0x24000864

08001784 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001784:	e7fe      	b.n	8001784 <ADC_IRQHandler>
	...

08001788 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800178e:	2003      	movs	r0, #3
 8001790:	f001 ff00 	bl	8003594 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001794:	f003 fcc6 	bl	8005124 <HAL_RCC_GetSysClockFreq>
 8001798:	4602      	mov	r2, r0
 800179a:	4b15      	ldr	r3, [pc, #84]	@ (80017f0 <HAL_Init+0x68>)
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	0a1b      	lsrs	r3, r3, #8
 80017a0:	f003 030f 	and.w	r3, r3, #15
 80017a4:	4913      	ldr	r1, [pc, #76]	@ (80017f4 <HAL_Init+0x6c>)
 80017a6:	5ccb      	ldrb	r3, [r1, r3]
 80017a8:	f003 031f 	and.w	r3, r3, #31
 80017ac:	fa22 f303 	lsr.w	r3, r2, r3
 80017b0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80017b2:	4b0f      	ldr	r3, [pc, #60]	@ (80017f0 <HAL_Init+0x68>)
 80017b4:	699b      	ldr	r3, [r3, #24]
 80017b6:	f003 030f 	and.w	r3, r3, #15
 80017ba:	4a0e      	ldr	r2, [pc, #56]	@ (80017f4 <HAL_Init+0x6c>)
 80017bc:	5cd3      	ldrb	r3, [r2, r3]
 80017be:	f003 031f 	and.w	r3, r3, #31
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	fa22 f303 	lsr.w	r3, r2, r3
 80017c8:	4a0b      	ldr	r2, [pc, #44]	@ (80017f8 <HAL_Init+0x70>)
 80017ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80017cc:	4a0b      	ldr	r2, [pc, #44]	@ (80017fc <HAL_Init+0x74>)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017d2:	2000      	movs	r0, #0
 80017d4:	f000 f814 	bl	8001800 <HAL_InitTick>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e002      	b.n	80017e8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80017e2:	f7ff fc57 	bl	8001094 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	58024400 	.word	0x58024400
 80017f4:	0800a844 	.word	0x0800a844
 80017f8:	24000008 	.word	0x24000008
 80017fc:	24000004 	.word	0x24000004

08001800 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001808:	4b15      	ldr	r3, [pc, #84]	@ (8001860 <HAL_InitTick+0x60>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d101      	bne.n	8001814 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e021      	b.n	8001858 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001814:	4b13      	ldr	r3, [pc, #76]	@ (8001864 <HAL_InitTick+0x64>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4b11      	ldr	r3, [pc, #68]	@ (8001860 <HAL_InitTick+0x60>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	4619      	mov	r1, r3
 800181e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001822:	fbb3 f3f1 	udiv	r3, r3, r1
 8001826:	fbb2 f3f3 	udiv	r3, r2, r3
 800182a:	4618      	mov	r0, r3
 800182c:	f001 fee5 	bl	80035fa <HAL_SYSTICK_Config>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e00e      	b.n	8001858 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2b0f      	cmp	r3, #15
 800183e:	d80a      	bhi.n	8001856 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001840:	2200      	movs	r2, #0
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	f04f 30ff 	mov.w	r0, #4294967295
 8001848:	f001 feaf 	bl	80035aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800184c:	4a06      	ldr	r2, [pc, #24]	@ (8001868 <HAL_InitTick+0x68>)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001852:	2300      	movs	r3, #0
 8001854:	e000      	b.n	8001858 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
}
 8001858:	4618      	mov	r0, r3
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	24000010 	.word	0x24000010
 8001864:	24000004 	.word	0x24000004
 8001868:	2400000c 	.word	0x2400000c

0800186c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001870:	4b06      	ldr	r3, [pc, #24]	@ (800188c <HAL_IncTick+0x20>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	461a      	mov	r2, r3
 8001876:	4b06      	ldr	r3, [pc, #24]	@ (8001890 <HAL_IncTick+0x24>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4413      	add	r3, r2
 800187c:	4a04      	ldr	r2, [pc, #16]	@ (8001890 <HAL_IncTick+0x24>)
 800187e:	6013      	str	r3, [r2, #0]
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	24000010 	.word	0x24000010
 8001890:	24000860 	.word	0x24000860

08001894 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return uwTick;
 8001898:	4b03      	ldr	r3, [pc, #12]	@ (80018a8 <HAL_GetTick+0x14>)
 800189a:	681b      	ldr	r3, [r3, #0]
}
 800189c:	4618      	mov	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	24000860 	.word	0x24000860

080018ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018b4:	f7ff ffee 	bl	8001894 <HAL_GetTick>
 80018b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018c4:	d005      	beq.n	80018d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018c6:	4b0a      	ldr	r3, [pc, #40]	@ (80018f0 <HAL_Delay+0x44>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	461a      	mov	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4413      	add	r3, r2
 80018d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018d2:	bf00      	nop
 80018d4:	f7ff ffde 	bl	8001894 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d8f7      	bhi.n	80018d4 <HAL_Delay+0x28>
  {
  }
}
 80018e4:	bf00      	nop
 80018e6:	bf00      	nop
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	24000010 	.word	0x24000010

080018f4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80018f8:	4b03      	ldr	r3, [pc, #12]	@ (8001908 <HAL_GetREVID+0x14>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	0c1b      	lsrs	r3, r3, #16
}
 80018fe:	4618      	mov	r0, r3
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	5c001000 	.word	0x5c001000

0800190c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001914:	4b06      	ldr	r3, [pc, #24]	@ (8001930 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 800191c:	4904      	ldr	r1, [pc, #16]	@ (8001930 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4313      	orrs	r3, r2
 8001922:	604b      	str	r3, [r1, #4]
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	58000400 	.word	0x58000400

08001934 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800193e:	4b07      	ldr	r3, [pc, #28]	@ (800195c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001940:	685a      	ldr	r2, [r3, #4]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	43db      	mvns	r3, r3
 8001946:	401a      	ands	r2, r3
 8001948:	4904      	ldr	r1, [pc, #16]	@ (800195c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	4313      	orrs	r3, r2
 800194e:	604b      	str	r3, [r1, #4]
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	58000400 	.word	0x58000400

08001960 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	431a      	orrs	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	609a      	str	r2, [r3, #8]
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001986:	b480      	push	{r7}
 8001988:	b083      	sub	sp, #12
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
 800198e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	431a      	orrs	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	609a      	str	r2, [r3, #8]
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80019bc:	4618      	mov	r0, r3
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b087      	sub	sp, #28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
 80019d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	3360      	adds	r3, #96	@ 0x60
 80019da:	461a      	mov	r2, r3
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	4413      	add	r3, r2
 80019e2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	430b      	orrs	r3, r1
 80019f6:	431a      	orrs	r2, r3
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80019fc:	bf00      	nop
 80019fe:	371c      	adds	r7, #28
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	f003 031f 	and.w	r3, r3, #31
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	fa01 f303 	lsl.w	r3, r1, r3
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	611a      	str	r2, [r3, #16]
}
 8001a2e:	bf00      	nop
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b087      	sub	sp, #28
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	60f8      	str	r0, [r7, #12]
 8001a42:	60b9      	str	r1, [r7, #8]
 8001a44:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	3360      	adds	r3, #96	@ 0x60
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4413      	add	r3, r2
 8001a52:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	601a      	str	r2, [r3, #0]
  }
}
 8001a64:	bf00      	nop
 8001a66:	371c      	adds	r7, #28
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d101      	bne.n	8001a88 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001a84:	2301      	movs	r3, #1
 8001a86:	e000      	b.n	8001a8a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b087      	sub	sp, #28
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	60f8      	str	r0, [r7, #12]
 8001a9e:	60b9      	str	r1, [r7, #8]
 8001aa0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	3330      	adds	r3, #48	@ 0x30
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	0a1b      	lsrs	r3, r3, #8
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	f003 030c 	and.w	r3, r3, #12
 8001ab2:	4413      	add	r3, r2
 8001ab4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	f003 031f 	and.w	r3, r3, #31
 8001ac0:	211f      	movs	r1, #31
 8001ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	401a      	ands	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	0e9b      	lsrs	r3, r3, #26
 8001ace:	f003 011f 	and.w	r1, r3, #31
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	f003 031f 	and.w	r3, r3, #31
 8001ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8001adc:	431a      	orrs	r2, r3
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ae2:	bf00      	nop
 8001ae4:	371c      	adds	r7, #28
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001afa:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001b02:	2301      	movs	r3, #1
 8001b04:	e000      	b.n	8001b08 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b087      	sub	sp, #28
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	3314      	adds	r3, #20
 8001b24:	461a      	mov	r2, r3
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	0e5b      	lsrs	r3, r3, #25
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	f003 0304 	and.w	r3, r3, #4
 8001b30:	4413      	add	r3, r2
 8001b32:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	0d1b      	lsrs	r3, r3, #20
 8001b3c:	f003 031f 	and.w	r3, r3, #31
 8001b40:	2107      	movs	r1, #7
 8001b42:	fa01 f303 	lsl.w	r3, r1, r3
 8001b46:	43db      	mvns	r3, r3
 8001b48:	401a      	ands	r2, r3
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	0d1b      	lsrs	r3, r3, #20
 8001b4e:	f003 031f 	and.w	r3, r3, #31
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	fa01 f303 	lsl.w	r3, r1, r3
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b5e:	bf00      	nop
 8001b60:	371c      	adds	r7, #28
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
	...

08001b6c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b84:	43db      	mvns	r3, r3
 8001b86:	401a      	ands	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f003 0318 	and.w	r3, r3, #24
 8001b8e:	4908      	ldr	r1, [pc, #32]	@ (8001bb0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b90:	40d9      	lsrs	r1, r3
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	400b      	ands	r3, r1
 8001b96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001ba2:	bf00      	nop
 8001ba4:	3714      	adds	r7, #20
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	000fffff 	.word	0x000fffff

08001bb4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 031f 	and.w	r3, r3, #31
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	4b04      	ldr	r3, [pc, #16]	@ (8001c0c <LL_ADC_DisableDeepPowerDown+0x20>)
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	6093      	str	r3, [r2, #8]
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	5fffffc0 	.word	0x5fffffc0

08001c10 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c24:	d101      	bne.n	8001c2a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c26:	2301      	movs	r3, #1
 8001c28:	e000      	b.n	8001c2c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689a      	ldr	r2, [r3, #8]
 8001c44:	4b05      	ldr	r3, [pc, #20]	@ (8001c5c <LL_ADC_EnableInternalRegulator+0x24>)
 8001c46:	4013      	ands	r3, r2
 8001c48:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	6fffffc0 	.word	0x6fffffc0

08001c60 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001c74:	d101      	bne.n	8001c7a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c76:	2301      	movs	r3, #1
 8001c78:	e000      	b.n	8001c7c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	4b05      	ldr	r3, [pc, #20]	@ (8001cac <LL_ADC_Enable+0x24>)
 8001c96:	4013      	ands	r3, r2
 8001c98:	f043 0201 	orr.w	r2, r3, #1
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	7fffffc0 	.word	0x7fffffc0

08001cb0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d101      	bne.n	8001cc8 <LL_ADC_IsEnabled+0x18>
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e000      	b.n	8001cca <LL_ADC_IsEnabled+0x1a>
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
	...

08001cd8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	4b05      	ldr	r3, [pc, #20]	@ (8001cfc <LL_ADC_REG_StartConversion+0x24>)
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	f043 0204 	orr.w	r2, r3, #4
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	7fffffc0 	.word	0x7fffffc0

08001d00 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f003 0304 	and.w	r3, r3, #4
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	d101      	bne.n	8001d18 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d14:	2301      	movs	r3, #1
 8001d16:	e000      	b.n	8001d1a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	2b08      	cmp	r3, #8
 8001d38:	d101      	bne.n	8001d3e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e000      	b.n	8001d40 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d4c:	b590      	push	{r4, r7, lr}
 8001d4e:	b089      	sub	sp, #36	@ 0x24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d54:	2300      	movs	r3, #0
 8001d56:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d101      	bne.n	8001d66 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e18f      	b.n	8002086 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d109      	bne.n	8001d88 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f7ff f9a7 	bl	80010c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff ff3f 	bl	8001c10 <LL_ADC_IsDeepPowerDownEnabled>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d004      	beq.n	8001da2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff ff25 	bl	8001bec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff ff5a 	bl	8001c60 <LL_ADC_IsInternalRegulatorEnabled>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d114      	bne.n	8001ddc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff ff3e 	bl	8001c38 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001dbc:	4b87      	ldr	r3, [pc, #540]	@ (8001fdc <HAL_ADC_Init+0x290>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	099b      	lsrs	r3, r3, #6
 8001dc2:	4a87      	ldr	r2, [pc, #540]	@ (8001fe0 <HAL_ADC_Init+0x294>)
 8001dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc8:	099b      	lsrs	r3, r3, #6
 8001dca:	3301      	adds	r3, #1
 8001dcc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001dce:	e002      	b.n	8001dd6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1f9      	bne.n	8001dd0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff ff3d 	bl	8001c60 <LL_ADC_IsInternalRegulatorEnabled>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d10d      	bne.n	8001e08 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001df0:	f043 0210 	orr.w	r2, r3, #16
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dfc:	f043 0201 	orr.w	r2, r3, #1
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff ff77 	bl	8001d00 <LL_ADC_REG_IsConversionOngoing>
 8001e12:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e18:	f003 0310 	and.w	r3, r3, #16
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f040 8129 	bne.w	8002074 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f040 8125 	bne.w	8002074 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e2e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001e32:	f043 0202 	orr.w	r2, r3, #2
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff ff36 	bl	8001cb0 <LL_ADC_IsEnabled>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d136      	bne.n	8001eb8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a65      	ldr	r2, [pc, #404]	@ (8001fe4 <HAL_ADC_Init+0x298>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d004      	beq.n	8001e5e <HAL_ADC_Init+0x112>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a63      	ldr	r2, [pc, #396]	@ (8001fe8 <HAL_ADC_Init+0x29c>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d10e      	bne.n	8001e7c <HAL_ADC_Init+0x130>
 8001e5e:	4861      	ldr	r0, [pc, #388]	@ (8001fe4 <HAL_ADC_Init+0x298>)
 8001e60:	f7ff ff26 	bl	8001cb0 <LL_ADC_IsEnabled>
 8001e64:	4604      	mov	r4, r0
 8001e66:	4860      	ldr	r0, [pc, #384]	@ (8001fe8 <HAL_ADC_Init+0x29c>)
 8001e68:	f7ff ff22 	bl	8001cb0 <LL_ADC_IsEnabled>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	4323      	orrs	r3, r4
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	bf0c      	ite	eq
 8001e74:	2301      	moveq	r3, #1
 8001e76:	2300      	movne	r3, #0
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	e008      	b.n	8001e8e <HAL_ADC_Init+0x142>
 8001e7c:	485b      	ldr	r0, [pc, #364]	@ (8001fec <HAL_ADC_Init+0x2a0>)
 8001e7e:	f7ff ff17 	bl	8001cb0 <LL_ADC_IsEnabled>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	bf0c      	ite	eq
 8001e88:	2301      	moveq	r3, #1
 8001e8a:	2300      	movne	r3, #0
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d012      	beq.n	8001eb8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a53      	ldr	r2, [pc, #332]	@ (8001fe4 <HAL_ADC_Init+0x298>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d004      	beq.n	8001ea6 <HAL_ADC_Init+0x15a>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a51      	ldr	r2, [pc, #324]	@ (8001fe8 <HAL_ADC_Init+0x29c>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d101      	bne.n	8001eaa <HAL_ADC_Init+0x15e>
 8001ea6:	4a52      	ldr	r2, [pc, #328]	@ (8001ff0 <HAL_ADC_Init+0x2a4>)
 8001ea8:	e000      	b.n	8001eac <HAL_ADC_Init+0x160>
 8001eaa:	4a52      	ldr	r2, [pc, #328]	@ (8001ff4 <HAL_ADC_Init+0x2a8>)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4610      	mov	r0, r2
 8001eb4:	f7ff fd54 	bl	8001960 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001eb8:	f7ff fd1c 	bl	80018f4 <HAL_GetREVID>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d914      	bls.n	8001ef0 <HAL_ADC_Init+0x1a4>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	2b10      	cmp	r3, #16
 8001ecc:	d110      	bne.n	8001ef0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	7d5b      	ldrb	r3, [r3, #21]
 8001ed2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ed8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001ede:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	7f1b      	ldrb	r3, [r3, #28]
 8001ee4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001ee6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ee8:	f043 030c 	orr.w	r3, r3, #12
 8001eec:	61bb      	str	r3, [r7, #24]
 8001eee:	e00d      	b.n	8001f0c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	7d5b      	ldrb	r3, [r3, #21]
 8001ef4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001efa:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001f00:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	7f1b      	ldrb	r3, [r3, #28]
 8001f06:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	7f1b      	ldrb	r3, [r3, #28]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d106      	bne.n	8001f22 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	045b      	lsls	r3, r3, #17
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d009      	beq.n	8001f3e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f2e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f36:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68da      	ldr	r2, [r3, #12]
 8001f44:	4b2c      	ldr	r3, [pc, #176]	@ (8001ff8 <HAL_ADC_Init+0x2ac>)
 8001f46:	4013      	ands	r3, r2
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	6812      	ldr	r2, [r2, #0]
 8001f4c:	69b9      	ldr	r1, [r7, #24]
 8001f4e:	430b      	orrs	r3, r1
 8001f50:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff fed2 	bl	8001d00 <LL_ADC_REG_IsConversionOngoing>
 8001f5c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff fedf 	bl	8001d26 <LL_ADC_INJ_IsConversionOngoing>
 8001f68:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d15f      	bne.n	8002030 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d15c      	bne.n	8002030 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	7d1b      	ldrb	r3, [r3, #20]
 8001f7a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001f80:	4313      	orrs	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	4b1c      	ldr	r3, [pc, #112]	@ (8001ffc <HAL_ADC_Init+0x2b0>)
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	6812      	ldr	r2, [r2, #0]
 8001f92:	69b9      	ldr	r1, [r7, #24]
 8001f94:	430b      	orrs	r3, r1
 8001f96:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d130      	bne.n	8002004 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	691a      	ldr	r2, [r3, #16]
 8001fae:	4b14      	ldr	r3, [pc, #80]	@ (8002000 <HAL_ADC_Init+0x2b4>)
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001fb6:	3a01      	subs	r2, #1
 8001fb8:	0411      	lsls	r1, r2, #16
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001fbe:	4311      	orrs	r1, r2
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001fc4:	4311      	orrs	r1, r2
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f042 0201 	orr.w	r2, r2, #1
 8001fd6:	611a      	str	r2, [r3, #16]
 8001fd8:	e01c      	b.n	8002014 <HAL_ADC_Init+0x2c8>
 8001fda:	bf00      	nop
 8001fdc:	24000004 	.word	0x24000004
 8001fe0:	053e2d63 	.word	0x053e2d63
 8001fe4:	40022000 	.word	0x40022000
 8001fe8:	40022100 	.word	0x40022100
 8001fec:	58026000 	.word	0x58026000
 8001ff0:	40022300 	.word	0x40022300
 8001ff4:	58026300 	.word	0x58026300
 8001ff8:	fff0c003 	.word	0xfff0c003
 8001ffc:	ffffbffc 	.word	0xffffbffc
 8002000:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	691a      	ldr	r2, [r3, #16]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 0201 	bic.w	r2, r2, #1
 8002012:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	430a      	orrs	r2, r1
 8002028:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f001 f8a4 	bl	8003178 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d10c      	bne.n	8002052 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203e:	f023 010f 	bic.w	r1, r3, #15
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	1e5a      	subs	r2, r3, #1
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	430a      	orrs	r2, r1
 800204e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002050:	e007      	b.n	8002062 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 020f 	bic.w	r2, r2, #15
 8002060:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002066:	f023 0303 	bic.w	r3, r3, #3
 800206a:	f043 0201 	orr.w	r2, r3, #1
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	655a      	str	r2, [r3, #84]	@ 0x54
 8002072:	e007      	b.n	8002084 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002078:	f043 0210 	orr.w	r2, r3, #16
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002084:	7ffb      	ldrb	r3, [r7, #31]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3724      	adds	r7, #36	@ 0x24
 800208a:	46bd      	mov	sp, r7
 800208c:	bd90      	pop	{r4, r7, pc}
 800208e:	bf00      	nop

08002090 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b088      	sub	sp, #32
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a72      	ldr	r2, [pc, #456]	@ (8002268 <HAL_ADC_PollForConversion+0x1d8>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d004      	beq.n	80020ae <HAL_ADC_PollForConversion+0x1e>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a70      	ldr	r2, [pc, #448]	@ (800226c <HAL_ADC_PollForConversion+0x1dc>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d101      	bne.n	80020b2 <HAL_ADC_PollForConversion+0x22>
 80020ae:	4b70      	ldr	r3, [pc, #448]	@ (8002270 <HAL_ADC_PollForConversion+0x1e0>)
 80020b0:	e000      	b.n	80020b4 <HAL_ADC_PollForConversion+0x24>
 80020b2:	4b70      	ldr	r3, [pc, #448]	@ (8002274 <HAL_ADC_PollForConversion+0x1e4>)
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff fd7d 	bl	8001bb4 <LL_ADC_GetMultimode>
 80020ba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	2b08      	cmp	r3, #8
 80020c2:	d102      	bne.n	80020ca <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80020c4:	2308      	movs	r3, #8
 80020c6:	61fb      	str	r3, [r7, #28]
 80020c8:	e037      	b.n	800213a <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	2b05      	cmp	r3, #5
 80020d4:	d002      	beq.n	80020dc <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	2b09      	cmp	r3, #9
 80020da:	d111      	bne.n	8002100 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d007      	beq.n	80020fa <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ee:	f043 0220 	orr.w	r2, r3, #32
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e0b1      	b.n	800225e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80020fa:	2304      	movs	r3, #4
 80020fc:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80020fe:	e01c      	b.n	800213a <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a58      	ldr	r2, [pc, #352]	@ (8002268 <HAL_ADC_PollForConversion+0x1d8>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d004      	beq.n	8002114 <HAL_ADC_PollForConversion+0x84>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a57      	ldr	r2, [pc, #348]	@ (800226c <HAL_ADC_PollForConversion+0x1dc>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d101      	bne.n	8002118 <HAL_ADC_PollForConversion+0x88>
 8002114:	4b56      	ldr	r3, [pc, #344]	@ (8002270 <HAL_ADC_PollForConversion+0x1e0>)
 8002116:	e000      	b.n	800211a <HAL_ADC_PollForConversion+0x8a>
 8002118:	4b56      	ldr	r3, [pc, #344]	@ (8002274 <HAL_ADC_PollForConversion+0x1e4>)
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff fd58 	bl	8001bd0 <LL_ADC_GetMultiDMATransfer>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d007      	beq.n	8002136 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800212a:	f043 0220 	orr.w	r2, r3, #32
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e093      	b.n	800225e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002136:	2304      	movs	r3, #4
 8002138:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800213a:	f7ff fbab 	bl	8001894 <HAL_GetTick>
 800213e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002140:	e021      	b.n	8002186 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002148:	d01d      	beq.n	8002186 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800214a:	f7ff fba3 	bl	8001894 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	429a      	cmp	r2, r3
 8002158:	d302      	bcc.n	8002160 <HAL_ADC_PollForConversion+0xd0>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d112      	bne.n	8002186 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	4013      	ands	r3, r2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10b      	bne.n	8002186 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002172:	f043 0204 	orr.w	r2, r3, #4
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e06b      	b.n	800225e <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	4013      	ands	r3, r2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d0d6      	beq.n	8002142 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002198:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff fc63 	bl	8001a70 <LL_ADC_REG_IsTriggerSourceSWStart>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d01c      	beq.n	80021ea <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	7d5b      	ldrb	r3, [r3, #21]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d118      	bne.n	80021ea <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0308 	and.w	r3, r3, #8
 80021c2:	2b08      	cmp	r3, #8
 80021c4:	d111      	bne.n	80021ea <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ca:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d105      	bne.n	80021ea <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021e2:	f043 0201 	orr.w	r2, r3, #1
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a1f      	ldr	r2, [pc, #124]	@ (800226c <HAL_ADC_PollForConversion+0x1dc>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d002      	beq.n	80021fa <HAL_ADC_PollForConversion+0x16a>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	e000      	b.n	80021fc <HAL_ADC_PollForConversion+0x16c>
 80021fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002268 <HAL_ADC_PollForConversion+0x1d8>)
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	6812      	ldr	r2, [r2, #0]
 8002200:	4293      	cmp	r3, r2
 8002202:	d008      	beq.n	8002216 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d005      	beq.n	8002216 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	2b05      	cmp	r3, #5
 800220e:	d002      	beq.n	8002216 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	2b09      	cmp	r3, #9
 8002214:	d104      	bne.n	8002220 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	61bb      	str	r3, [r7, #24]
 800221e:	e00c      	b.n	800223a <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a11      	ldr	r2, [pc, #68]	@ (800226c <HAL_ADC_PollForConversion+0x1dc>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d002      	beq.n	8002230 <HAL_ADC_PollForConversion+0x1a0>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	e000      	b.n	8002232 <HAL_ADC_PollForConversion+0x1a2>
 8002230:	4b0d      	ldr	r3, [pc, #52]	@ (8002268 <HAL_ADC_PollForConversion+0x1d8>)
 8002232:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	2b08      	cmp	r3, #8
 800223e:	d104      	bne.n	800224a <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2208      	movs	r2, #8
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	e008      	b.n	800225c <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d103      	bne.n	800225c <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	220c      	movs	r2, #12
 800225a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3720      	adds	r7, #32
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40022000 	.word	0x40022000
 800226c:	40022100 	.word	0x40022100
 8002270:	40022300 	.word	0x40022300
 8002274:	58026300 	.word	0x58026300

08002278 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a92      	ldr	r2, [pc, #584]	@ (80024d0 <HAL_ADC_Start_IT+0x258>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d004      	beq.n	8002294 <HAL_ADC_Start_IT+0x1c>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a91      	ldr	r2, [pc, #580]	@ (80024d4 <HAL_ADC_Start_IT+0x25c>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d101      	bne.n	8002298 <HAL_ADC_Start_IT+0x20>
 8002294:	4b90      	ldr	r3, [pc, #576]	@ (80024d8 <HAL_ADC_Start_IT+0x260>)
 8002296:	e000      	b.n	800229a <HAL_ADC_Start_IT+0x22>
 8002298:	4b90      	ldr	r3, [pc, #576]	@ (80024dc <HAL_ADC_Start_IT+0x264>)
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff fc8a 	bl	8001bb4 <LL_ADC_GetMultimode>
 80022a0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff fd2a 	bl	8001d00 <LL_ADC_REG_IsConversionOngoing>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f040 8118 	bne.w	80024e4 <HAL_ADC_Start_IT+0x26c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d101      	bne.n	80022c2 <HAL_ADC_Start_IT+0x4a>
 80022be:	2302      	movs	r3, #2
 80022c0:	e113      	b.n	80024ea <HAL_ADC_Start_IT+0x272>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 feca 	bl	8003064 <ADC_Enable>
 80022d0:	4603      	mov	r3, r0
 80022d2:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80022d4:	7dfb      	ldrb	r3, [r7, #23]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f040 80f5 	bne.w	80024c6 <HAL_ADC_Start_IT+0x24e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80022e0:	4b7f      	ldr	r3, [pc, #508]	@ (80024e0 <HAL_ADC_Start_IT+0x268>)
 80022e2:	4013      	ands	r3, r2
 80022e4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a78      	ldr	r2, [pc, #480]	@ (80024d4 <HAL_ADC_Start_IT+0x25c>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d002      	beq.n	80022fc <HAL_ADC_Start_IT+0x84>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	e000      	b.n	80022fe <HAL_ADC_Start_IT+0x86>
 80022fc:	4b74      	ldr	r3, [pc, #464]	@ (80024d0 <HAL_ADC_Start_IT+0x258>)
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	6812      	ldr	r2, [r2, #0]
 8002302:	4293      	cmp	r3, r2
 8002304:	d002      	beq.n	800230c <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d105      	bne.n	8002318 <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002310:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800231c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d006      	beq.n	8002332 <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002328:	f023 0206 	bic.w	r2, r3, #6
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002330:	e002      	b.n	8002338 <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	221c      	movs	r2, #28
 800233e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	685a      	ldr	r2, [r3, #4]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f022 021c 	bic.w	r2, r2, #28
 8002356:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	2b08      	cmp	r3, #8
 800235e:	d108      	bne.n	8002372 <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f042 0208 	orr.w	r2, r2, #8
 800236e:	605a      	str	r2, [r3, #4]
          break;
 8002370:	e008      	b.n	8002384 <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	685a      	ldr	r2, [r3, #4]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f042 0204 	orr.w	r2, r2, #4
 8002380:	605a      	str	r2, [r3, #4]
          break;
 8002382:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002388:	2b00      	cmp	r3, #0
 800238a:	d107      	bne.n	800239c <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	685a      	ldr	r2, [r3, #4]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f042 0210 	orr.w	r2, r2, #16
 800239a:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a4c      	ldr	r2, [pc, #304]	@ (80024d4 <HAL_ADC_Start_IT+0x25c>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d002      	beq.n	80023ac <HAL_ADC_Start_IT+0x134>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	e000      	b.n	80023ae <HAL_ADC_Start_IT+0x136>
 80023ac:	4b48      	ldr	r3, [pc, #288]	@ (80024d0 <HAL_ADC_Start_IT+0x258>)
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	6812      	ldr	r2, [r2, #0]
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d008      	beq.n	80023c8 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d005      	beq.n	80023c8 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	2b05      	cmp	r3, #5
 80023c0:	d002      	beq.n	80023c8 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	2b09      	cmp	r3, #9
 80023c6:	d13a      	bne.n	800243e <HAL_ADC_Start_IT+0x1c6>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d02d      	beq.n	8002432 <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023da:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80023de:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	2b08      	cmp	r3, #8
 80023ec:	d110      	bne.n	8002410 <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f022 0220 	bic.w	r2, r2, #32
 80023fc:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800240c:	605a      	str	r2, [r3, #4]
              break;
 800240e:	e010      	b.n	8002432 <HAL_ADC_Start_IT+0x1ba>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800241e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f042 0220 	orr.w	r2, r2, #32
 800242e:	605a      	str	r2, [r3, #4]
              break;
 8002430:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff fc4e 	bl	8001cd8 <LL_ADC_REG_StartConversion>
 800243c:	e054      	b.n	80024e8 <HAL_ADC_Start_IT+0x270>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002442:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a21      	ldr	r2, [pc, #132]	@ (80024d4 <HAL_ADC_Start_IT+0x25c>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d002      	beq.n	800245a <HAL_ADC_Start_IT+0x1e2>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	e000      	b.n	800245c <HAL_ADC_Start_IT+0x1e4>
 800245a:	4b1d      	ldr	r3, [pc, #116]	@ (80024d0 <HAL_ADC_Start_IT+0x258>)
 800245c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d03e      	beq.n	80024e8 <HAL_ADC_Start_IT+0x270>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800246e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002472:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	655a      	str	r2, [r3, #84]	@ 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	2b08      	cmp	r3, #8
 8002480:	d110      	bne.n	80024a4 <HAL_ADC_Start_IT+0x22c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 0220 	bic.w	r2, r2, #32
 8002490:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80024a0:	605a      	str	r2, [r3, #4]
              break;
 80024a2:	e021      	b.n	80024e8 <HAL_ADC_Start_IT+0x270>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024b2:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	685a      	ldr	r2, [r3, #4]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f042 0220 	orr.w	r2, r2, #32
 80024c2:	605a      	str	r2, [r3, #4]
              break;
 80024c4:	e010      	b.n	80024e8 <HAL_ADC_Start_IT+0x270>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80024ce:	e00b      	b.n	80024e8 <HAL_ADC_Start_IT+0x270>
 80024d0:	40022000 	.word	0x40022000
 80024d4:	40022100 	.word	0x40022100
 80024d8:	40022300 	.word	0x40022300
 80024dc:	58026300 	.word	0x58026300
 80024e0:	fffff0fe 	.word	0xfffff0fe
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80024e4:	2302      	movs	r3, #2
 80024e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80024e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop

080024f4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002502:	4618      	mov	r0, r3
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
	...

08002510 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b08a      	sub	sp, #40	@ 0x28
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002518:	2300      	movs	r3, #0
 800251a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a87      	ldr	r2, [pc, #540]	@ (8002750 <HAL_ADC_IRQHandler+0x240>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d004      	beq.n	8002540 <HAL_ADC_IRQHandler+0x30>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a86      	ldr	r2, [pc, #536]	@ (8002754 <HAL_ADC_IRQHandler+0x244>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d101      	bne.n	8002544 <HAL_ADC_IRQHandler+0x34>
 8002540:	4b85      	ldr	r3, [pc, #532]	@ (8002758 <HAL_ADC_IRQHandler+0x248>)
 8002542:	e000      	b.n	8002546 <HAL_ADC_IRQHandler+0x36>
 8002544:	4b85      	ldr	r3, [pc, #532]	@ (800275c <HAL_ADC_IRQHandler+0x24c>)
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff fb34 	bl	8001bb4 <LL_ADC_GetMultimode>
 800254c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d017      	beq.n	8002588 <HAL_ADC_IRQHandler+0x78>
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d012      	beq.n	8002588 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002566:	f003 0310 	and.w	r3, r3, #16
 800256a:	2b00      	cmp	r3, #0
 800256c:	d105      	bne.n	800257a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002572:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 ff30 	bl	80033e0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2202      	movs	r2, #2
 8002586:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	f003 0304 	and.w	r3, r3, #4
 800258e:	2b00      	cmp	r3, #0
 8002590:	d004      	beq.n	800259c <HAL_ADC_IRQHandler+0x8c>
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	2b00      	cmp	r3, #0
 800259a:	d10a      	bne.n	80025b2 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f000 8083 	beq.w	80026ae <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	f003 0308 	and.w	r3, r3, #8
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d07d      	beq.n	80026ae <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025b6:	f003 0310 	and.w	r3, r3, #16
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d105      	bne.n	80025ca <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025c2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff fa4e 	bl	8001a70 <LL_ADC_REG_IsTriggerSourceSWStart>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d062      	beq.n	80026a0 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a5d      	ldr	r2, [pc, #372]	@ (8002754 <HAL_ADC_IRQHandler+0x244>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d002      	beq.n	80025ea <HAL_ADC_IRQHandler+0xda>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	e000      	b.n	80025ec <HAL_ADC_IRQHandler+0xdc>
 80025ea:	4b59      	ldr	r3, [pc, #356]	@ (8002750 <HAL_ADC_IRQHandler+0x240>)
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	6812      	ldr	r2, [r2, #0]
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d008      	beq.n	8002606 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d005      	beq.n	8002606 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	2b05      	cmp	r3, #5
 80025fe:	d002      	beq.n	8002606 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	2b09      	cmp	r3, #9
 8002604:	d104      	bne.n	8002610 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	623b      	str	r3, [r7, #32]
 800260e:	e00c      	b.n	800262a <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a4f      	ldr	r2, [pc, #316]	@ (8002754 <HAL_ADC_IRQHandler+0x244>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d002      	beq.n	8002620 <HAL_ADC_IRQHandler+0x110>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	e000      	b.n	8002622 <HAL_ADC_IRQHandler+0x112>
 8002620:	4b4b      	ldr	r3, [pc, #300]	@ (8002750 <HAL_ADC_IRQHandler+0x240>)
 8002622:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800262a:	6a3b      	ldr	r3, [r7, #32]
 800262c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d135      	bne.n	80026a0 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0308 	and.w	r3, r3, #8
 800263e:	2b08      	cmp	r3, #8
 8002640:	d12e      	bne.n	80026a0 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f7ff fb5a 	bl	8001d00 <LL_ADC_REG_IsConversionOngoing>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d11a      	bne.n	8002688 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	685a      	ldr	r2, [r3, #4]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 020c 	bic.w	r2, r2, #12
 8002660:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002666:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002672:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d112      	bne.n	80026a0 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800267e:	f043 0201 	orr.w	r2, r3, #1
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	655a      	str	r2, [r3, #84]	@ 0x54
 8002686:	e00b      	b.n	80026a0 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800268c:	f043 0210 	orr.w	r2, r3, #16
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002698:	f043 0201 	orr.w	r2, r3, #1
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f7fe fcd7 	bl	8001054 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	220c      	movs	r2, #12
 80026ac:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	f003 0320 	and.w	r3, r3, #32
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d004      	beq.n	80026c2 <HAL_ADC_IRQHandler+0x1b2>
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	f003 0320 	and.w	r3, r3, #32
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d10b      	bne.n	80026da <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f000 80a0 	beq.w	800280e <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f000 809a 	beq.w	800280e <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026de:	f003 0310 	and.w	r3, r3, #16
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d105      	bne.n	80026f2 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ea:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff f9f9 	bl	8001aee <LL_ADC_INJ_IsTriggerSourceSWStart>
 80026fc:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff f9b4 	bl	8001a70 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002708:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a11      	ldr	r2, [pc, #68]	@ (8002754 <HAL_ADC_IRQHandler+0x244>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d002      	beq.n	800271a <HAL_ADC_IRQHandler+0x20a>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	e000      	b.n	800271c <HAL_ADC_IRQHandler+0x20c>
 800271a:	4b0d      	ldr	r3, [pc, #52]	@ (8002750 <HAL_ADC_IRQHandler+0x240>)
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	6812      	ldr	r2, [r2, #0]
 8002720:	4293      	cmp	r3, r2
 8002722:	d008      	beq.n	8002736 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d005      	beq.n	8002736 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	2b06      	cmp	r3, #6
 800272e:	d002      	beq.n	8002736 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	2b07      	cmp	r3, #7
 8002734:	d104      	bne.n	8002740 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	623b      	str	r3, [r7, #32]
 800273e:	e014      	b.n	800276a <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a03      	ldr	r2, [pc, #12]	@ (8002754 <HAL_ADC_IRQHandler+0x244>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d00a      	beq.n	8002760 <HAL_ADC_IRQHandler+0x250>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	e008      	b.n	8002762 <HAL_ADC_IRQHandler+0x252>
 8002750:	40022000 	.word	0x40022000
 8002754:	40022100 	.word	0x40022100
 8002758:	40022300 	.word	0x40022300
 800275c:	58026300 	.word	0x58026300
 8002760:	4b84      	ldr	r3, [pc, #528]	@ (8002974 <HAL_ADC_IRQHandler+0x464>)
 8002762:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d047      	beq.n	8002800 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002770:	6a3b      	ldr	r3, [r7, #32]
 8002772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d007      	beq.n	800278a <HAL_ADC_IRQHandler+0x27a>
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d03f      	beq.n	8002800 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002780:	6a3b      	ldr	r3, [r7, #32]
 8002782:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002786:	2b00      	cmp	r3, #0
 8002788:	d13a      	bne.n	8002800 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002794:	2b40      	cmp	r3, #64	@ 0x40
 8002796:	d133      	bne.n	8002800 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002798:	6a3b      	ldr	r3, [r7, #32]
 800279a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d12e      	bne.n	8002800 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff fabd 	bl	8001d26 <LL_ADC_INJ_IsConversionOngoing>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d11a      	bne.n	80027e8 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	685a      	ldr	r2, [r3, #4]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80027c0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027c6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d112      	bne.n	8002800 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027de:	f043 0201 	orr.w	r2, r3, #1
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	655a      	str	r2, [r3, #84]	@ 0x54
 80027e6:	e00b      	b.n	8002800 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ec:	f043 0210 	orr.w	r2, r3, #16
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f8:	f043 0201 	orr.w	r2, r3, #1
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 fdc5 	bl	8003390 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2260      	movs	r2, #96	@ 0x60
 800280c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002814:	2b00      	cmp	r3, #0
 8002816:	d011      	beq.n	800283c <HAL_ADC_IRQHandler+0x32c>
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00c      	beq.n	800283c <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002826:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f8a8 	bl	8002984 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2280      	movs	r2, #128	@ 0x80
 800283a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002842:	2b00      	cmp	r3, #0
 8002844:	d012      	beq.n	800286c <HAL_ADC_IRQHandler+0x35c>
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00d      	beq.n	800286c <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002854:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 fdab 	bl	80033b8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800286a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002872:	2b00      	cmp	r3, #0
 8002874:	d012      	beq.n	800289c <HAL_ADC_IRQHandler+0x38c>
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00d      	beq.n	800289c <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002884:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 fd9d 	bl	80033cc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800289a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	f003 0310 	and.w	r3, r3, #16
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d043      	beq.n	800292e <HAL_ADC_IRQHandler+0x41e>
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	f003 0310 	and.w	r3, r3, #16
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d03e      	beq.n	800292e <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d102      	bne.n	80028be <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 80028b8:	2301      	movs	r3, #1
 80028ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80028bc:	e021      	b.n	8002902 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d015      	beq.n	80028f0 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a2a      	ldr	r2, [pc, #168]	@ (8002974 <HAL_ADC_IRQHandler+0x464>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d004      	beq.n	80028d8 <HAL_ADC_IRQHandler+0x3c8>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a29      	ldr	r2, [pc, #164]	@ (8002978 <HAL_ADC_IRQHandler+0x468>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d101      	bne.n	80028dc <HAL_ADC_IRQHandler+0x3cc>
 80028d8:	4b28      	ldr	r3, [pc, #160]	@ (800297c <HAL_ADC_IRQHandler+0x46c>)
 80028da:	e000      	b.n	80028de <HAL_ADC_IRQHandler+0x3ce>
 80028dc:	4b28      	ldr	r3, [pc, #160]	@ (8002980 <HAL_ADC_IRQHandler+0x470>)
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff f976 	bl	8001bd0 <LL_ADC_GetMultiDMATransfer>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00b      	beq.n	8002902 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80028ea:	2301      	movs	r3, #1
 80028ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80028ee:	e008      	b.n	8002902 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80028fe:	2301      	movs	r3, #1
 8002900:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002904:	2b01      	cmp	r3, #1
 8002906:	d10e      	bne.n	8002926 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800290c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002918:	f043 0202 	orr.w	r2, r3, #2
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 f839 	bl	8002998 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2210      	movs	r2, #16
 800292c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002934:	2b00      	cmp	r3, #0
 8002936:	d018      	beq.n	800296a <HAL_ADC_IRQHandler+0x45a>
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800293e:	2b00      	cmp	r3, #0
 8002940:	d013      	beq.n	800296a <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002946:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002952:	f043 0208 	orr.w	r2, r3, #8
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002962:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 fd1d 	bl	80033a4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800296a:	bf00      	nop
 800296c:	3728      	adds	r7, #40	@ 0x28
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	40022000 	.word	0x40022000
 8002978:	40022100 	.word	0x40022100
 800297c:	40022300 	.word	0x40022300
 8002980:	58026300 	.word	0x58026300

08002984 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80029ac:	b590      	push	{r4, r7, lr}
 80029ae:	b0a1      	sub	sp, #132	@ 0x84
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029b6:	2300      	movs	r3, #0
 80029b8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80029bc:	2300      	movs	r3, #0
 80029be:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	4a65      	ldr	r2, [pc, #404]	@ (8002b5c <HAL_ADC_ConfigChannel+0x1b0>)
 80029c6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d101      	bne.n	80029d6 <HAL_ADC_ConfigChannel+0x2a>
 80029d2:	2302      	movs	r3, #2
 80029d4:	e32e      	b.n	8003034 <HAL_ADC_ConfigChannel+0x688>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff f98c 	bl	8001d00 <LL_ADC_REG_IsConversionOngoing>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f040 8313 	bne.w	8003016 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	db2c      	blt.n	8002a52 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d108      	bne.n	8002a16 <HAL_ADC_ConfigChannel+0x6a>
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	0e9b      	lsrs	r3, r3, #26
 8002a0a:	f003 031f 	and.w	r3, r3, #31
 8002a0e:	2201      	movs	r2, #1
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	e016      	b.n	8002a44 <HAL_ADC_ConfigChannel+0x98>
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a1e:	fa93 f3a3 	rbit	r3, r3
 8002a22:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a26:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002a28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8002a2e:	2320      	movs	r3, #32
 8002a30:	e003      	b.n	8002a3a <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8002a32:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a34:	fab3 f383 	clz	r3, r3
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	f003 031f 	and.w	r3, r3, #31
 8002a3e:	2201      	movs	r2, #1
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	6812      	ldr	r2, [r2, #0]
 8002a48:	69d1      	ldr	r1, [r2, #28]
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	6812      	ldr	r2, [r2, #0]
 8002a4e:	430b      	orrs	r3, r1
 8002a50:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6818      	ldr	r0, [r3, #0]
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	6859      	ldr	r1, [r3, #4]
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	f7ff f819 	bl	8001a96 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff f949 	bl	8001d00 <LL_ADC_REG_IsConversionOngoing>
 8002a6e:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7ff f956 	bl	8001d26 <LL_ADC_INJ_IsConversionOngoing>
 8002a7a:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f040 80b8 	bne.w	8002bf4 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f040 80b4 	bne.w	8002bf4 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6818      	ldr	r0, [r3, #0]
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	6819      	ldr	r1, [r3, #0]
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	461a      	mov	r2, r3
 8002a9a:	f7ff f83b 	bl	8001b14 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002a9e:	4b30      	ldr	r3, [pc, #192]	@ (8002b60 <HAL_ADC_ConfigChannel+0x1b4>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002aa6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002aaa:	d10b      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x118>
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	695a      	ldr	r2, [r3, #20]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	089b      	lsrs	r3, r3, #2
 8002ab8:	f003 0307 	and.w	r3, r3, #7
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	e01d      	b.n	8002b00 <HAL_ADC_ConfigChannel+0x154>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	f003 0310 	and.w	r3, r3, #16
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10b      	bne.n	8002aea <HAL_ADC_ConfigChannel+0x13e>
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	695a      	ldr	r2, [r3, #20]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	089b      	lsrs	r3, r3, #2
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	e00a      	b.n	8002b00 <HAL_ADC_ConfigChannel+0x154>
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	695a      	ldr	r2, [r3, #20]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	089b      	lsrs	r3, r3, #2
 8002af6:	f003 0304 	and.w	r3, r3, #4
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d02c      	beq.n	8002b64 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6818      	ldr	r0, [r3, #0]
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	6919      	ldr	r1, [r3, #16]
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b18:	f7fe ff56 	bl	80019c8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6818      	ldr	r0, [r3, #0]
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	6919      	ldr	r1, [r3, #16]
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	7e5b      	ldrb	r3, [r3, #25]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d102      	bne.n	8002b32 <HAL_ADC_ConfigChannel+0x186>
 8002b2c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002b30:	e000      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x188>
 8002b32:	2300      	movs	r3, #0
 8002b34:	461a      	mov	r2, r3
 8002b36:	f7fe ff80 	bl	8001a3a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6818      	ldr	r0, [r3, #0]
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	6919      	ldr	r1, [r3, #16]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	7e1b      	ldrb	r3, [r3, #24]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d102      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x1a4>
 8002b4a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002b4e:	e000      	b.n	8002b52 <HAL_ADC_ConfigChannel+0x1a6>
 8002b50:	2300      	movs	r3, #0
 8002b52:	461a      	mov	r2, r3
 8002b54:	f7fe ff58 	bl	8001a08 <LL_ADC_SetDataRightShift>
 8002b58:	e04c      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x248>
 8002b5a:	bf00      	nop
 8002b5c:	47ff0000 	.word	0x47ff0000
 8002b60:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b6a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	069b      	lsls	r3, r3, #26
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d107      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002b86:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b8e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	069b      	lsls	r3, r3, #26
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d107      	bne.n	8002bac <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002baa:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002bb2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	069b      	lsls	r3, r3, #26
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d107      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002bce:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bd6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	069b      	lsls	r3, r3, #26
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d107      	bne.n	8002bf4 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002bf2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff f859 	bl	8001cb0 <LL_ADC_IsEnabled>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f040 8211 	bne.w	8003028 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6818      	ldr	r0, [r3, #0]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	6819      	ldr	r1, [r3, #0]
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	461a      	mov	r2, r3
 8002c14:	f7fe ffaa 	bl	8001b6c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	4aa1      	ldr	r2, [pc, #644]	@ (8002ea4 <HAL_ADC_ConfigChannel+0x4f8>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	f040 812e 	bne.w	8002e80 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d10b      	bne.n	8002c4c <HAL_ADC_ConfigChannel+0x2a0>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	0e9b      	lsrs	r3, r3, #26
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	f003 031f 	and.w	r3, r3, #31
 8002c40:	2b09      	cmp	r3, #9
 8002c42:	bf94      	ite	ls
 8002c44:	2301      	movls	r3, #1
 8002c46:	2300      	movhi	r3, #0
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	e019      	b.n	8002c80 <HAL_ADC_ConfigChannel+0x2d4>
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c54:	fa93 f3a3 	rbit	r3, r3
 8002c58:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002c5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002c5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8002c64:	2320      	movs	r3, #32
 8002c66:	e003      	b.n	8002c70 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8002c68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c6a:	fab3 f383 	clz	r3, r3
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	3301      	adds	r3, #1
 8002c72:	f003 031f 	and.w	r3, r3, #31
 8002c76:	2b09      	cmp	r3, #9
 8002c78:	bf94      	ite	ls
 8002c7a:	2301      	movls	r3, #1
 8002c7c:	2300      	movhi	r3, #0
 8002c7e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d079      	beq.n	8002d78 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d107      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0x2f4>
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	0e9b      	lsrs	r3, r3, #26
 8002c96:	3301      	adds	r3, #1
 8002c98:	069b      	lsls	r3, r3, #26
 8002c9a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c9e:	e015      	b.n	8002ccc <HAL_ADC_ConfigChannel+0x320>
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ca8:	fa93 f3a3 	rbit	r3, r3
 8002cac:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002cae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cb0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002cb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d101      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8002cb8:	2320      	movs	r3, #32
 8002cba:	e003      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8002cbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002cbe:	fab3 f383 	clz	r3, r3
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	069b      	lsls	r3, r3, #26
 8002cc8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d109      	bne.n	8002cec <HAL_ADC_ConfigChannel+0x340>
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	0e9b      	lsrs	r3, r3, #26
 8002cde:	3301      	adds	r3, #1
 8002ce0:	f003 031f 	and.w	r3, r3, #31
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cea:	e017      	b.n	8002d1c <HAL_ADC_ConfigChannel+0x370>
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cf4:	fa93 f3a3 	rbit	r3, r3
 8002cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002cfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cfc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002cfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d101      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8002d04:	2320      	movs	r3, #32
 8002d06:	e003      	b.n	8002d10 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8002d08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d0a:	fab3 f383 	clz	r3, r3
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	3301      	adds	r3, #1
 8002d12:	f003 031f 	and.w	r3, r3, #31
 8002d16:	2101      	movs	r1, #1
 8002d18:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1c:	ea42 0103 	orr.w	r1, r2, r3
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10a      	bne.n	8002d42 <HAL_ADC_ConfigChannel+0x396>
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	0e9b      	lsrs	r3, r3, #26
 8002d32:	3301      	adds	r3, #1
 8002d34:	f003 021f 	and.w	r2, r3, #31
 8002d38:	4613      	mov	r3, r2
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	4413      	add	r3, r2
 8002d3e:	051b      	lsls	r3, r3, #20
 8002d40:	e018      	b.n	8002d74 <HAL_ADC_ConfigChannel+0x3c8>
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d4a:	fa93 f3a3 	rbit	r3, r3
 8002d4e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d52:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8002d5a:	2320      	movs	r3, #32
 8002d5c:	e003      	b.n	8002d66 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8002d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d60:	fab3 f383 	clz	r3, r3
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	3301      	adds	r3, #1
 8002d68:	f003 021f 	and.w	r2, r3, #31
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	4413      	add	r3, r2
 8002d72:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d74:	430b      	orrs	r3, r1
 8002d76:	e07e      	b.n	8002e76 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d107      	bne.n	8002d94 <HAL_ADC_ConfigChannel+0x3e8>
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	0e9b      	lsrs	r3, r3, #26
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	069b      	lsls	r3, r3, #26
 8002d8e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d92:	e015      	b.n	8002dc0 <HAL_ADC_ConfigChannel+0x414>
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d9c:	fa93 f3a3 	rbit	r3, r3
 8002da0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002da6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d101      	bne.n	8002db0 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8002dac:	2320      	movs	r3, #32
 8002dae:	e003      	b.n	8002db8 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8002db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002db2:	fab3 f383 	clz	r3, r3
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	3301      	adds	r3, #1
 8002dba:	069b      	lsls	r3, r3, #26
 8002dbc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d109      	bne.n	8002de0 <HAL_ADC_ConfigChannel+0x434>
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	0e9b      	lsrs	r3, r3, #26
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	f003 031f 	and.w	r3, r3, #31
 8002dd8:	2101      	movs	r1, #1
 8002dda:	fa01 f303 	lsl.w	r3, r1, r3
 8002dde:	e017      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x464>
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	fa93 f3a3 	rbit	r3, r3
 8002dec:	61bb      	str	r3, [r7, #24]
  return result;
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002df2:	6a3b      	ldr	r3, [r7, #32]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d101      	bne.n	8002dfc <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8002df8:	2320      	movs	r3, #32
 8002dfa:	e003      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8002dfc:	6a3b      	ldr	r3, [r7, #32]
 8002dfe:	fab3 f383 	clz	r3, r3
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	3301      	adds	r3, #1
 8002e06:	f003 031f 	and.w	r3, r3, #31
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e10:	ea42 0103 	orr.w	r1, r2, r3
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10d      	bne.n	8002e3c <HAL_ADC_ConfigChannel+0x490>
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	0e9b      	lsrs	r3, r3, #26
 8002e26:	3301      	adds	r3, #1
 8002e28:	f003 021f 	and.w	r2, r3, #31
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	4413      	add	r3, r2
 8002e32:	3b1e      	subs	r3, #30
 8002e34:	051b      	lsls	r3, r3, #20
 8002e36:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002e3a:	e01b      	b.n	8002e74 <HAL_ADC_ConfigChannel+0x4c8>
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	fa93 f3a3 	rbit	r3, r3
 8002e48:	60fb      	str	r3, [r7, #12]
  return result;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d101      	bne.n	8002e58 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002e54:	2320      	movs	r3, #32
 8002e56:	e003      	b.n	8002e60 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	fab3 f383 	clz	r3, r3
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	3301      	adds	r3, #1
 8002e62:	f003 021f 	and.w	r2, r3, #31
 8002e66:	4613      	mov	r3, r2
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	4413      	add	r3, r2
 8002e6c:	3b1e      	subs	r3, #30
 8002e6e:	051b      	lsls	r3, r3, #20
 8002e70:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e74:	430b      	orrs	r3, r1
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	6892      	ldr	r2, [r2, #8]
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	f7fe fe4a 	bl	8001b14 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f280 80cf 	bge.w	8003028 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a06      	ldr	r2, [pc, #24]	@ (8002ea8 <HAL_ADC_ConfigChannel+0x4fc>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d004      	beq.n	8002e9e <HAL_ADC_ConfigChannel+0x4f2>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a04      	ldr	r2, [pc, #16]	@ (8002eac <HAL_ADC_ConfigChannel+0x500>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d10a      	bne.n	8002eb4 <HAL_ADC_ConfigChannel+0x508>
 8002e9e:	4b04      	ldr	r3, [pc, #16]	@ (8002eb0 <HAL_ADC_ConfigChannel+0x504>)
 8002ea0:	e009      	b.n	8002eb6 <HAL_ADC_ConfigChannel+0x50a>
 8002ea2:	bf00      	nop
 8002ea4:	47ff0000 	.word	0x47ff0000
 8002ea8:	40022000 	.word	0x40022000
 8002eac:	40022100 	.word	0x40022100
 8002eb0:	40022300 	.word	0x40022300
 8002eb4:	4b61      	ldr	r3, [pc, #388]	@ (800303c <HAL_ADC_ConfigChannel+0x690>)
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7fe fd78 	bl	80019ac <LL_ADC_GetCommonPathInternalCh>
 8002ebc:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a5f      	ldr	r2, [pc, #380]	@ (8003040 <HAL_ADC_ConfigChannel+0x694>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d004      	beq.n	8002ed2 <HAL_ADC_ConfigChannel+0x526>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a5d      	ldr	r2, [pc, #372]	@ (8003044 <HAL_ADC_ConfigChannel+0x698>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d10e      	bne.n	8002ef0 <HAL_ADC_ConfigChannel+0x544>
 8002ed2:	485b      	ldr	r0, [pc, #364]	@ (8003040 <HAL_ADC_ConfigChannel+0x694>)
 8002ed4:	f7fe feec 	bl	8001cb0 <LL_ADC_IsEnabled>
 8002ed8:	4604      	mov	r4, r0
 8002eda:	485a      	ldr	r0, [pc, #360]	@ (8003044 <HAL_ADC_ConfigChannel+0x698>)
 8002edc:	f7fe fee8 	bl	8001cb0 <LL_ADC_IsEnabled>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	4323      	orrs	r3, r4
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	bf0c      	ite	eq
 8002ee8:	2301      	moveq	r3, #1
 8002eea:	2300      	movne	r3, #0
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	e008      	b.n	8002f02 <HAL_ADC_ConfigChannel+0x556>
 8002ef0:	4855      	ldr	r0, [pc, #340]	@ (8003048 <HAL_ADC_ConfigChannel+0x69c>)
 8002ef2:	f7fe fedd 	bl	8001cb0 <LL_ADC_IsEnabled>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	bf0c      	ite	eq
 8002efc:	2301      	moveq	r3, #1
 8002efe:	2300      	movne	r3, #0
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d07d      	beq.n	8003002 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a50      	ldr	r2, [pc, #320]	@ (800304c <HAL_ADC_ConfigChannel+0x6a0>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d130      	bne.n	8002f72 <HAL_ADC_ConfigChannel+0x5c6>
 8002f10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d12b      	bne.n	8002f72 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a4a      	ldr	r2, [pc, #296]	@ (8003048 <HAL_ADC_ConfigChannel+0x69c>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	f040 8081 	bne.w	8003028 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a45      	ldr	r2, [pc, #276]	@ (8003040 <HAL_ADC_ConfigChannel+0x694>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d004      	beq.n	8002f3a <HAL_ADC_ConfigChannel+0x58e>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a43      	ldr	r2, [pc, #268]	@ (8003044 <HAL_ADC_ConfigChannel+0x698>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d101      	bne.n	8002f3e <HAL_ADC_ConfigChannel+0x592>
 8002f3a:	4a45      	ldr	r2, [pc, #276]	@ (8003050 <HAL_ADC_ConfigChannel+0x6a4>)
 8002f3c:	e000      	b.n	8002f40 <HAL_ADC_ConfigChannel+0x594>
 8002f3e:	4a3f      	ldr	r2, [pc, #252]	@ (800303c <HAL_ADC_ConfigChannel+0x690>)
 8002f40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f42:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002f46:	4619      	mov	r1, r3
 8002f48:	4610      	mov	r0, r2
 8002f4a:	f7fe fd1c 	bl	8001986 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f4e:	4b41      	ldr	r3, [pc, #260]	@ (8003054 <HAL_ADC_ConfigChannel+0x6a8>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	099b      	lsrs	r3, r3, #6
 8002f54:	4a40      	ldr	r2, [pc, #256]	@ (8003058 <HAL_ADC_ConfigChannel+0x6ac>)
 8002f56:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5a:	099b      	lsrs	r3, r3, #6
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002f62:	e002      	b.n	8002f6a <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	3b01      	subs	r3, #1
 8002f68:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1f9      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f70:	e05a      	b.n	8003028 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a39      	ldr	r2, [pc, #228]	@ (800305c <HAL_ADC_ConfigChannel+0x6b0>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d11e      	bne.n	8002fba <HAL_ADC_ConfigChannel+0x60e>
 8002f7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f7e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d119      	bne.n	8002fba <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a2f      	ldr	r2, [pc, #188]	@ (8003048 <HAL_ADC_ConfigChannel+0x69c>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d14b      	bne.n	8003028 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a2a      	ldr	r2, [pc, #168]	@ (8003040 <HAL_ADC_ConfigChannel+0x694>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d004      	beq.n	8002fa4 <HAL_ADC_ConfigChannel+0x5f8>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a29      	ldr	r2, [pc, #164]	@ (8003044 <HAL_ADC_ConfigChannel+0x698>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d101      	bne.n	8002fa8 <HAL_ADC_ConfigChannel+0x5fc>
 8002fa4:	4a2a      	ldr	r2, [pc, #168]	@ (8003050 <HAL_ADC_ConfigChannel+0x6a4>)
 8002fa6:	e000      	b.n	8002faa <HAL_ADC_ConfigChannel+0x5fe>
 8002fa8:	4a24      	ldr	r2, [pc, #144]	@ (800303c <HAL_ADC_ConfigChannel+0x690>)
 8002faa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	4610      	mov	r0, r2
 8002fb4:	f7fe fce7 	bl	8001986 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002fb8:	e036      	b.n	8003028 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a28      	ldr	r2, [pc, #160]	@ (8003060 <HAL_ADC_ConfigChannel+0x6b4>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d131      	bne.n	8003028 <HAL_ADC_ConfigChannel+0x67c>
 8002fc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d12c      	bne.n	8003028 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a1d      	ldr	r2, [pc, #116]	@ (8003048 <HAL_ADC_ConfigChannel+0x69c>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d127      	bne.n	8003028 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a18      	ldr	r2, [pc, #96]	@ (8003040 <HAL_ADC_ConfigChannel+0x694>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d004      	beq.n	8002fec <HAL_ADC_ConfigChannel+0x640>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a17      	ldr	r2, [pc, #92]	@ (8003044 <HAL_ADC_ConfigChannel+0x698>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d101      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x644>
 8002fec:	4a18      	ldr	r2, [pc, #96]	@ (8003050 <HAL_ADC_ConfigChannel+0x6a4>)
 8002fee:	e000      	b.n	8002ff2 <HAL_ADC_ConfigChannel+0x646>
 8002ff0:	4a12      	ldr	r2, [pc, #72]	@ (800303c <HAL_ADC_ConfigChannel+0x690>)
 8002ff2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ff4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4610      	mov	r0, r2
 8002ffc:	f7fe fcc3 	bl	8001986 <LL_ADC_SetCommonPathInternalCh>
 8003000:	e012      	b.n	8003028 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003006:	f043 0220 	orr.w	r2, r3, #32
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003014:	e008      	b.n	8003028 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800301a:	f043 0220 	orr.w	r2, r3, #32
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003030:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003034:	4618      	mov	r0, r3
 8003036:	3784      	adds	r7, #132	@ 0x84
 8003038:	46bd      	mov	sp, r7
 800303a:	bd90      	pop	{r4, r7, pc}
 800303c:	58026300 	.word	0x58026300
 8003040:	40022000 	.word	0x40022000
 8003044:	40022100 	.word	0x40022100
 8003048:	58026000 	.word	0x58026000
 800304c:	cb840000 	.word	0xcb840000
 8003050:	40022300 	.word	0x40022300
 8003054:	24000004 	.word	0x24000004
 8003058:	053e2d63 	.word	0x053e2d63
 800305c:	c7520000 	.word	0xc7520000
 8003060:	cfb80000 	.word	0xcfb80000

08003064 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4618      	mov	r0, r3
 8003072:	f7fe fe1d 	bl	8001cb0 <LL_ADC_IsEnabled>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d16e      	bne.n	800315a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689a      	ldr	r2, [r3, #8]
 8003082:	4b38      	ldr	r3, [pc, #224]	@ (8003164 <ADC_Enable+0x100>)
 8003084:	4013      	ands	r3, r2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00d      	beq.n	80030a6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800308e:	f043 0210 	orr.w	r2, r3, #16
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800309a:	f043 0201 	orr.w	r2, r3, #1
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e05a      	b.n	800315c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7fe fdec 	bl	8001c88 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80030b0:	f7fe fbf0 	bl	8001894 <HAL_GetTick>
 80030b4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a2b      	ldr	r2, [pc, #172]	@ (8003168 <ADC_Enable+0x104>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d004      	beq.n	80030ca <ADC_Enable+0x66>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a29      	ldr	r2, [pc, #164]	@ (800316c <ADC_Enable+0x108>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d101      	bne.n	80030ce <ADC_Enable+0x6a>
 80030ca:	4b29      	ldr	r3, [pc, #164]	@ (8003170 <ADC_Enable+0x10c>)
 80030cc:	e000      	b.n	80030d0 <ADC_Enable+0x6c>
 80030ce:	4b29      	ldr	r3, [pc, #164]	@ (8003174 <ADC_Enable+0x110>)
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7fe fd6f 	bl	8001bb4 <LL_ADC_GetMultimode>
 80030d6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a23      	ldr	r2, [pc, #140]	@ (800316c <ADC_Enable+0x108>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d002      	beq.n	80030e8 <ADC_Enable+0x84>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	e000      	b.n	80030ea <ADC_Enable+0x86>
 80030e8:	4b1f      	ldr	r3, [pc, #124]	@ (8003168 <ADC_Enable+0x104>)
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	6812      	ldr	r2, [r2, #0]
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d02c      	beq.n	800314c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d130      	bne.n	800315a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030f8:	e028      	b.n	800314c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7fe fdd6 	bl	8001cb0 <LL_ADC_IsEnabled>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d104      	bne.n	8003114 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4618      	mov	r0, r3
 8003110:	f7fe fdba 	bl	8001c88 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003114:	f7fe fbbe 	bl	8001894 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d914      	bls.n	800314c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	2b01      	cmp	r3, #1
 800312e:	d00d      	beq.n	800314c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003134:	f043 0210 	orr.w	r2, r3, #16
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003140:	f043 0201 	orr.w	r2, r3, #1
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e007      	b.n	800315c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b01      	cmp	r3, #1
 8003158:	d1cf      	bne.n	80030fa <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	8000003f 	.word	0x8000003f
 8003168:	40022000 	.word	0x40022000
 800316c:	40022100 	.word	0x40022100
 8003170:	40022300 	.word	0x40022300
 8003174:	58026300 	.word	0x58026300

08003178 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a7a      	ldr	r2, [pc, #488]	@ (8003370 <ADC_ConfigureBoostMode+0x1f8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d004      	beq.n	8003194 <ADC_ConfigureBoostMode+0x1c>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a79      	ldr	r2, [pc, #484]	@ (8003374 <ADC_ConfigureBoostMode+0x1fc>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d109      	bne.n	80031a8 <ADC_ConfigureBoostMode+0x30>
 8003194:	4b78      	ldr	r3, [pc, #480]	@ (8003378 <ADC_ConfigureBoostMode+0x200>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800319c:	2b00      	cmp	r3, #0
 800319e:	bf14      	ite	ne
 80031a0:	2301      	movne	r3, #1
 80031a2:	2300      	moveq	r3, #0
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	e008      	b.n	80031ba <ADC_ConfigureBoostMode+0x42>
 80031a8:	4b74      	ldr	r3, [pc, #464]	@ (800337c <ADC_ConfigureBoostMode+0x204>)
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	bf14      	ite	ne
 80031b4:	2301      	movne	r3, #1
 80031b6:	2300      	moveq	r3, #0
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d01c      	beq.n	80031f8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80031be:	f002 f92b 	bl	8005418 <HAL_RCC_GetHCLKFreq>
 80031c2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80031cc:	d010      	beq.n	80031f0 <ADC_ConfigureBoostMode+0x78>
 80031ce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80031d2:	d873      	bhi.n	80032bc <ADC_ConfigureBoostMode+0x144>
 80031d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031d8:	d002      	beq.n	80031e0 <ADC_ConfigureBoostMode+0x68>
 80031da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80031de:	d16d      	bne.n	80032bc <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	0c1b      	lsrs	r3, r3, #16
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ec:	60fb      	str	r3, [r7, #12]
        break;
 80031ee:	e068      	b.n	80032c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	089b      	lsrs	r3, r3, #2
 80031f4:	60fb      	str	r3, [r7, #12]
        break;
 80031f6:	e064      	b.n	80032c2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80031f8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80031fc:	f04f 0100 	mov.w	r1, #0
 8003200:	f003 fb70 	bl	80068e4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003204:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800320e:	d051      	beq.n	80032b4 <ADC_ConfigureBoostMode+0x13c>
 8003210:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003214:	d854      	bhi.n	80032c0 <ADC_ConfigureBoostMode+0x148>
 8003216:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800321a:	d047      	beq.n	80032ac <ADC_ConfigureBoostMode+0x134>
 800321c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003220:	d84e      	bhi.n	80032c0 <ADC_ConfigureBoostMode+0x148>
 8003222:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003226:	d03d      	beq.n	80032a4 <ADC_ConfigureBoostMode+0x12c>
 8003228:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800322c:	d848      	bhi.n	80032c0 <ADC_ConfigureBoostMode+0x148>
 800322e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003232:	d033      	beq.n	800329c <ADC_ConfigureBoostMode+0x124>
 8003234:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003238:	d842      	bhi.n	80032c0 <ADC_ConfigureBoostMode+0x148>
 800323a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800323e:	d029      	beq.n	8003294 <ADC_ConfigureBoostMode+0x11c>
 8003240:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003244:	d83c      	bhi.n	80032c0 <ADC_ConfigureBoostMode+0x148>
 8003246:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800324a:	d01a      	beq.n	8003282 <ADC_ConfigureBoostMode+0x10a>
 800324c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003250:	d836      	bhi.n	80032c0 <ADC_ConfigureBoostMode+0x148>
 8003252:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003256:	d014      	beq.n	8003282 <ADC_ConfigureBoostMode+0x10a>
 8003258:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800325c:	d830      	bhi.n	80032c0 <ADC_ConfigureBoostMode+0x148>
 800325e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003262:	d00e      	beq.n	8003282 <ADC_ConfigureBoostMode+0x10a>
 8003264:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003268:	d82a      	bhi.n	80032c0 <ADC_ConfigureBoostMode+0x148>
 800326a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800326e:	d008      	beq.n	8003282 <ADC_ConfigureBoostMode+0x10a>
 8003270:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003274:	d824      	bhi.n	80032c0 <ADC_ConfigureBoostMode+0x148>
 8003276:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800327a:	d002      	beq.n	8003282 <ADC_ConfigureBoostMode+0x10a>
 800327c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003280:	d11e      	bne.n	80032c0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	0c9b      	lsrs	r3, r3, #18
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003290:	60fb      	str	r3, [r7, #12]
        break;
 8003292:	e016      	b.n	80032c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	091b      	lsrs	r3, r3, #4
 8003298:	60fb      	str	r3, [r7, #12]
        break;
 800329a:	e012      	b.n	80032c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	095b      	lsrs	r3, r3, #5
 80032a0:	60fb      	str	r3, [r7, #12]
        break;
 80032a2:	e00e      	b.n	80032c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	099b      	lsrs	r3, r3, #6
 80032a8:	60fb      	str	r3, [r7, #12]
        break;
 80032aa:	e00a      	b.n	80032c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	09db      	lsrs	r3, r3, #7
 80032b0:	60fb      	str	r3, [r7, #12]
        break;
 80032b2:	e006      	b.n	80032c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	0a1b      	lsrs	r3, r3, #8
 80032b8:	60fb      	str	r3, [r7, #12]
        break;
 80032ba:	e002      	b.n	80032c2 <ADC_ConfigureBoostMode+0x14a>
        break;
 80032bc:	bf00      	nop
 80032be:	e000      	b.n	80032c2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80032c0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80032c2:	f7fe fb17 	bl	80018f4 <HAL_GetREVID>
 80032c6:	4603      	mov	r3, r0
 80032c8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d815      	bhi.n	80032fc <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	4a2b      	ldr	r2, [pc, #172]	@ (8003380 <ADC_ConfigureBoostMode+0x208>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d908      	bls.n	80032ea <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	689a      	ldr	r2, [r3, #8]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032e6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80032e8:	e03e      	b.n	8003368 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80032f8:	609a      	str	r2, [r3, #8]
}
 80032fa:	e035      	b.n	8003368 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	085b      	lsrs	r3, r3, #1
 8003300:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	4a1f      	ldr	r2, [pc, #124]	@ (8003384 <ADC_ConfigureBoostMode+0x20c>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d808      	bhi.n	800331c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	689a      	ldr	r2, [r3, #8]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003318:	609a      	str	r2, [r3, #8]
}
 800331a:	e025      	b.n	8003368 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	4a1a      	ldr	r2, [pc, #104]	@ (8003388 <ADC_ConfigureBoostMode+0x210>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d80a      	bhi.n	800333a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003336:	609a      	str	r2, [r3, #8]
}
 8003338:	e016      	b.n	8003368 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	4a13      	ldr	r2, [pc, #76]	@ (800338c <ADC_ConfigureBoostMode+0x214>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d80a      	bhi.n	8003358 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003354:	609a      	str	r2, [r3, #8]
}
 8003356:	e007      	b.n	8003368 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003366:	609a      	str	r2, [r3, #8]
}
 8003368:	bf00      	nop
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40022000 	.word	0x40022000
 8003374:	40022100 	.word	0x40022100
 8003378:	40022300 	.word	0x40022300
 800337c:	58026300 	.word	0x58026300
 8003380:	01312d00 	.word	0x01312d00
 8003384:	005f5e10 	.word	0x005f5e10
 8003388:	00bebc20 	.word	0x00bebc20
 800338c:	017d7840 	.word	0x017d7840

08003390 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003404:	4b0b      	ldr	r3, [pc, #44]	@ (8003434 <__NVIC_SetPriorityGrouping+0x40>)
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003410:	4013      	ands	r3, r2
 8003412:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800341c:	4b06      	ldr	r3, [pc, #24]	@ (8003438 <__NVIC_SetPriorityGrouping+0x44>)
 800341e:	4313      	orrs	r3, r2
 8003420:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003422:	4a04      	ldr	r2, [pc, #16]	@ (8003434 <__NVIC_SetPriorityGrouping+0x40>)
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	60d3      	str	r3, [r2, #12]
}
 8003428:	bf00      	nop
 800342a:	3714      	adds	r7, #20
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr
 8003434:	e000ed00 	.word	0xe000ed00
 8003438:	05fa0000 	.word	0x05fa0000

0800343c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003440:	4b04      	ldr	r3, [pc, #16]	@ (8003454 <__NVIC_GetPriorityGrouping+0x18>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	0a1b      	lsrs	r3, r3, #8
 8003446:	f003 0307 	and.w	r3, r3, #7
}
 800344a:	4618      	mov	r0, r3
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr
 8003454:	e000ed00 	.word	0xe000ed00

08003458 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	4603      	mov	r3, r0
 8003460:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003462:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003466:	2b00      	cmp	r3, #0
 8003468:	db0b      	blt.n	8003482 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800346a:	88fb      	ldrh	r3, [r7, #6]
 800346c:	f003 021f 	and.w	r2, r3, #31
 8003470:	4907      	ldr	r1, [pc, #28]	@ (8003490 <__NVIC_EnableIRQ+0x38>)
 8003472:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003476:	095b      	lsrs	r3, r3, #5
 8003478:	2001      	movs	r0, #1
 800347a:	fa00 f202 	lsl.w	r2, r0, r2
 800347e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	e000e100 	.word	0xe000e100

08003494 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	4603      	mov	r3, r0
 800349c:	6039      	str	r1, [r7, #0]
 800349e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80034a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	db0a      	blt.n	80034be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	490c      	ldr	r1, [pc, #48]	@ (80034e0 <__NVIC_SetPriority+0x4c>)
 80034ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034b2:	0112      	lsls	r2, r2, #4
 80034b4:	b2d2      	uxtb	r2, r2
 80034b6:	440b      	add	r3, r1
 80034b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034bc:	e00a      	b.n	80034d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	b2da      	uxtb	r2, r3
 80034c2:	4908      	ldr	r1, [pc, #32]	@ (80034e4 <__NVIC_SetPriority+0x50>)
 80034c4:	88fb      	ldrh	r3, [r7, #6]
 80034c6:	f003 030f 	and.w	r3, r3, #15
 80034ca:	3b04      	subs	r3, #4
 80034cc:	0112      	lsls	r2, r2, #4
 80034ce:	b2d2      	uxtb	r2, r2
 80034d0:	440b      	add	r3, r1
 80034d2:	761a      	strb	r2, [r3, #24]
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr
 80034e0:	e000e100 	.word	0xe000e100
 80034e4:	e000ed00 	.word	0xe000ed00

080034e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b089      	sub	sp, #36	@ 0x24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f003 0307 	and.w	r3, r3, #7
 80034fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f1c3 0307 	rsb	r3, r3, #7
 8003502:	2b04      	cmp	r3, #4
 8003504:	bf28      	it	cs
 8003506:	2304      	movcs	r3, #4
 8003508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	3304      	adds	r3, #4
 800350e:	2b06      	cmp	r3, #6
 8003510:	d902      	bls.n	8003518 <NVIC_EncodePriority+0x30>
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	3b03      	subs	r3, #3
 8003516:	e000      	b.n	800351a <NVIC_EncodePriority+0x32>
 8003518:	2300      	movs	r3, #0
 800351a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800351c:	f04f 32ff 	mov.w	r2, #4294967295
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	fa02 f303 	lsl.w	r3, r2, r3
 8003526:	43da      	mvns	r2, r3
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	401a      	ands	r2, r3
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003530:	f04f 31ff 	mov.w	r1, #4294967295
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	fa01 f303 	lsl.w	r3, r1, r3
 800353a:	43d9      	mvns	r1, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003540:	4313      	orrs	r3, r2
         );
}
 8003542:	4618      	mov	r0, r3
 8003544:	3724      	adds	r7, #36	@ 0x24
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
	...

08003550 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	3b01      	subs	r3, #1
 800355c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003560:	d301      	bcc.n	8003566 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003562:	2301      	movs	r3, #1
 8003564:	e00f      	b.n	8003586 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003566:	4a0a      	ldr	r2, [pc, #40]	@ (8003590 <SysTick_Config+0x40>)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3b01      	subs	r3, #1
 800356c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800356e:	210f      	movs	r1, #15
 8003570:	f04f 30ff 	mov.w	r0, #4294967295
 8003574:	f7ff ff8e 	bl	8003494 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003578:	4b05      	ldr	r3, [pc, #20]	@ (8003590 <SysTick_Config+0x40>)
 800357a:	2200      	movs	r2, #0
 800357c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800357e:	4b04      	ldr	r3, [pc, #16]	@ (8003590 <SysTick_Config+0x40>)
 8003580:	2207      	movs	r2, #7
 8003582:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	e000e010 	.word	0xe000e010

08003594 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f7ff ff29 	bl	80033f4 <__NVIC_SetPriorityGrouping>
}
 80035a2:	bf00      	nop
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b086      	sub	sp, #24
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	4603      	mov	r3, r0
 80035b2:	60b9      	str	r1, [r7, #8]
 80035b4:	607a      	str	r2, [r7, #4]
 80035b6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035b8:	f7ff ff40 	bl	800343c <__NVIC_GetPriorityGrouping>
 80035bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	68b9      	ldr	r1, [r7, #8]
 80035c2:	6978      	ldr	r0, [r7, #20]
 80035c4:	f7ff ff90 	bl	80034e8 <NVIC_EncodePriority>
 80035c8:	4602      	mov	r2, r0
 80035ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80035ce:	4611      	mov	r1, r2
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff ff5f 	bl	8003494 <__NVIC_SetPriority>
}
 80035d6:	bf00      	nop
 80035d8:	3718      	adds	r7, #24
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b082      	sub	sp, #8
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	4603      	mov	r3, r0
 80035e6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7ff ff33 	bl	8003458 <__NVIC_EnableIRQ>
}
 80035f2:	bf00      	nop
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b082      	sub	sp, #8
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7ff ffa4 	bl	8003550 <SysTick_Config>
 8003608:	4603      	mov	r3, r0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
	...

08003614 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e0e3      	b.n	80037ee <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800362c:	2b00      	cmp	r3, #0
 800362e:	d106      	bne.n	800363e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2223      	movs	r2, #35	@ 0x23
 8003634:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f7fd fdad 	bl	8001198 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800363e:	4b6e      	ldr	r3, [pc, #440]	@ (80037f8 <HAL_ETH_Init+0x1e4>)
 8003640:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003644:	4a6c      	ldr	r2, [pc, #432]	@ (80037f8 <HAL_ETH_Init+0x1e4>)
 8003646:	f043 0302 	orr.w	r3, r3, #2
 800364a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800364e:	4b6a      	ldr	r3, [pc, #424]	@ (80037f8 <HAL_ETH_Init+0x1e4>)
 8003650:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	60bb      	str	r3, [r7, #8]
 800365a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	7a1b      	ldrb	r3, [r3, #8]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d103      	bne.n	800366c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003664:	2000      	movs	r0, #0
 8003666:	f7fe f951 	bl	800190c <HAL_SYSCFG_ETHInterfaceSelect>
 800366a:	e003      	b.n	8003674 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800366c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8003670:	f7fe f94c 	bl	800190c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8003674:	4b61      	ldr	r3, [pc, #388]	@ (80037fc <HAL_ETH_Init+0x1e8>)
 8003676:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	6812      	ldr	r2, [r2, #0]
 8003686:	f043 0301 	orr.w	r3, r3, #1
 800368a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800368e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003690:	f7fe f900 	bl	8001894 <HAL_GetTick>
 8003694:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003696:	e011      	b.n	80036bc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003698:	f7fe f8fc 	bl	8001894 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80036a6:	d909      	bls.n	80036bc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2204      	movs	r2, #4
 80036ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	22e0      	movs	r2, #224	@ 0xe0
 80036b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e098      	b.n	80037ee <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1e4      	bne.n	8003698 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f89e 	bl	8003810 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80036d4:	f001 fea0 	bl	8005418 <HAL_RCC_GetHCLKFreq>
 80036d8:	4603      	mov	r3, r0
 80036da:	4a49      	ldr	r2, [pc, #292]	@ (8003800 <HAL_ETH_Init+0x1ec>)
 80036dc:	fba2 2303 	umull	r2, r3, r2, r3
 80036e0:	0c9a      	lsrs	r2, r3, #18
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	3a01      	subs	r2, #1
 80036e8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 fa81 	bl	8003bf4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036fa:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80036fe:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	6812      	ldr	r2, [r2, #0]
 8003706:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800370a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800370e:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	f003 0303 	and.w	r3, r3, #3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d009      	beq.n	8003732 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	22e0      	movs	r2, #224	@ 0xe0
 800372a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e05d      	b.n	80037ee <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800373a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800373e:	4b31      	ldr	r3, [pc, #196]	@ (8003804 <HAL_ETH_Init+0x1f0>)
 8003740:	4013      	ands	r3, r2
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	6952      	ldr	r2, [r2, #20]
 8003746:	0051      	lsls	r1, r2, #1
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	6812      	ldr	r2, [r2, #0]
 800374c:	430b      	orrs	r3, r1
 800374e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003752:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 fae9 	bl	8003d2e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 fb2f 	bl	8003dc0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	3305      	adds	r3, #5
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	021a      	lsls	r2, r3, #8
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	3304      	adds	r3, #4
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	4619      	mov	r1, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	430a      	orrs	r2, r1
 800377c:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	3303      	adds	r3, #3
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	061a      	lsls	r2, r3, #24
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	3302      	adds	r3, #2
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	041b      	lsls	r3, r3, #16
 8003794:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	3301      	adds	r3, #1
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80037a0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80037ae:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80037b0:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	4b11      	ldr	r3, [pc, #68]	@ (8003808 <HAL_ETH_Init+0x1f4>)
 80037c2:	430b      	orrs	r3, r1
 80037c4:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	4b0d      	ldr	r3, [pc, #52]	@ (800380c <HAL_ETH_Init+0x1f8>)
 80037d6:	430b      	orrs	r3, r1
 80037d8:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2210      	movs	r2, #16
 80037e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	58024400 	.word	0x58024400
 80037fc:	58000400 	.word	0x58000400
 8003800:	431bde83 	.word	0x431bde83
 8003804:	ffff8001 	.word	0xffff8001
 8003808:	0c020060 	.word	0x0c020060
 800380c:	0c20c000 	.word	0x0c20c000

08003810 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003820:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003828:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800382a:	f001 fdf5 	bl	8005418 <HAL_RCC_GetHCLKFreq>
 800382e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	4a1a      	ldr	r2, [pc, #104]	@ (800389c <HAL_ETH_SetMDIOClockRange+0x8c>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d804      	bhi.n	8003842 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800383e:	60fb      	str	r3, [r7, #12]
 8003840:	e022      	b.n	8003888 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	4a16      	ldr	r2, [pc, #88]	@ (80038a0 <HAL_ETH_SetMDIOClockRange+0x90>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d204      	bcs.n	8003854 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8003850:	60fb      	str	r3, [r7, #12]
 8003852:	e019      	b.n	8003888 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	4a13      	ldr	r2, [pc, #76]	@ (80038a4 <HAL_ETH_SetMDIOClockRange+0x94>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d915      	bls.n	8003888 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	4a12      	ldr	r2, [pc, #72]	@ (80038a8 <HAL_ETH_SetMDIOClockRange+0x98>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d804      	bhi.n	800386e <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800386a:	60fb      	str	r3, [r7, #12]
 800386c:	e00c      	b.n	8003888 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	4a0e      	ldr	r2, [pc, #56]	@ (80038ac <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d804      	bhi.n	8003880 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800387c:	60fb      	str	r3, [r7, #12]
 800387e:	e003      	b.n	8003888 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8003886:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8003892:	bf00      	nop
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	02160ebf 	.word	0x02160ebf
 80038a0:	03938700 	.word	0x03938700
 80038a4:	05f5e0ff 	.word	0x05f5e0ff
 80038a8:	08f0d17f 	.word	0x08f0d17f
 80038ac:	0ee6b27f 	.word	0x0ee6b27f

080038b0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80038c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	791b      	ldrb	r3, [r3, #4]
 80038c8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80038ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	7b1b      	ldrb	r3, [r3, #12]
 80038d0:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80038d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	7b5b      	ldrb	r3, [r3, #13]
 80038d8:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80038da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	7b9b      	ldrb	r3, [r3, #14]
 80038e0:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80038e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	7bdb      	ldrb	r3, [r3, #15]
 80038e8:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80038ea:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	7c12      	ldrb	r2, [r2, #16]
 80038f0:	2a00      	cmp	r2, #0
 80038f2:	d102      	bne.n	80038fa <ETH_SetMACConfig+0x4a>
 80038f4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80038f8:	e000      	b.n	80038fc <ETH_SetMACConfig+0x4c>
 80038fa:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80038fc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	7c52      	ldrb	r2, [r2, #17]
 8003902:	2a00      	cmp	r2, #0
 8003904:	d102      	bne.n	800390c <ETH_SetMACConfig+0x5c>
 8003906:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800390a:	e000      	b.n	800390e <ETH_SetMACConfig+0x5e>
 800390c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800390e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	7c9b      	ldrb	r3, [r3, #18]
 8003914:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003916:	431a      	orrs	r2, r3
               macconf->Speed |
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800391c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8003922:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	7f1b      	ldrb	r3, [r3, #28]
 8003928:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800392a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	7f5b      	ldrb	r3, [r3, #29]
 8003930:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003932:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	7f92      	ldrb	r2, [r2, #30]
 8003938:	2a00      	cmp	r2, #0
 800393a:	d102      	bne.n	8003942 <ETH_SetMACConfig+0x92>
 800393c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003940:	e000      	b.n	8003944 <ETH_SetMACConfig+0x94>
 8003942:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003944:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	7fdb      	ldrb	r3, [r3, #31]
 800394a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800394c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003954:	2a00      	cmp	r2, #0
 8003956:	d102      	bne.n	800395e <ETH_SetMACConfig+0xae>
 8003958:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800395c:	e000      	b.n	8003960 <ETH_SetMACConfig+0xb0>
 800395e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003960:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003966:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800396e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8003970:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8003976:	4313      	orrs	r3, r2
 8003978:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	4b56      	ldr	r3, [pc, #344]	@ (8003adc <ETH_SetMACConfig+0x22c>)
 8003982:	4013      	ands	r3, r2
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	6812      	ldr	r2, [r2, #0]
 8003988:	68f9      	ldr	r1, [r7, #12]
 800398a:	430b      	orrs	r3, r1
 800398c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003992:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800399a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800399c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80039a4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80039a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80039ae:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80039b0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80039b8:	2a00      	cmp	r2, #0
 80039ba:	d102      	bne.n	80039c2 <ETH_SetMACConfig+0x112>
 80039bc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80039c0:	e000      	b.n	80039c4 <ETH_SetMACConfig+0x114>
 80039c2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80039c4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80039ca:	4313      	orrs	r3, r2
 80039cc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	685a      	ldr	r2, [r3, #4]
 80039d4:	4b42      	ldr	r3, [pc, #264]	@ (8003ae0 <ETH_SetMACConfig+0x230>)
 80039d6:	4013      	ands	r3, r2
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	6812      	ldr	r2, [r2, #0]
 80039dc:	68f9      	ldr	r1, [r7, #12]
 80039de:	430b      	orrs	r3, r1
 80039e0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80039e8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80039ee:	4313      	orrs	r3, r2
 80039f0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68da      	ldr	r2, [r3, #12]
 80039f8:	4b3a      	ldr	r3, [pc, #232]	@ (8003ae4 <ETH_SetMACConfig+0x234>)
 80039fa:	4013      	ands	r3, r2
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	6812      	ldr	r2, [r2, #0]
 8003a00:	68f9      	ldr	r1, [r7, #12]
 8003a02:	430b      	orrs	r3, r1
 8003a04:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003a0c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003a12:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8003a1a:	2a00      	cmp	r2, #0
 8003a1c:	d101      	bne.n	8003a22 <ETH_SetMACConfig+0x172>
 8003a1e:	2280      	movs	r2, #128	@ 0x80
 8003a20:	e000      	b.n	8003a24 <ETH_SetMACConfig+0x174>
 8003a22:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003a24:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a2a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003a36:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	6812      	ldr	r2, [r2, #0]
 8003a40:	68f9      	ldr	r1, [r7, #12]
 8003a42:	430b      	orrs	r3, r1
 8003a44:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8003a4c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8003a54:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003a56:	4313      	orrs	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a62:	f023 0103 	bic.w	r1, r3, #3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8003a7a:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003a90:	683a      	ldr	r2, [r7, #0]
 8003a92:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8003a96:	2a00      	cmp	r2, #0
 8003a98:	d101      	bne.n	8003a9e <ETH_SetMACConfig+0x1ee>
 8003a9a:	2240      	movs	r2, #64	@ 0x40
 8003a9c:	e000      	b.n	8003aa0 <ETH_SetMACConfig+0x1f0>
 8003a9e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003aa0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8003aa8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003aaa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8003ab2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8003ac0:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8003ad0:	bf00      	nop
 8003ad2:	3714      	adds	r7, #20
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	00048083 	.word	0x00048083
 8003ae0:	c0f88000 	.word	0xc0f88000
 8003ae4:	fffffef0 	.word	0xfffffef0

08003ae8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	4b38      	ldr	r3, [pc, #224]	@ (8003be0 <ETH_SetDMAConfig+0xf8>)
 8003afe:	4013      	ands	r3, r2
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	6811      	ldr	r1, [r2, #0]
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	6812      	ldr	r2, [r2, #0]
 8003b08:	430b      	orrs	r3, r1
 8003b0a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003b0e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	791b      	ldrb	r3, [r3, #4]
 8003b14:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003b1a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	7b1b      	ldrb	r3, [r3, #12]
 8003b20:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003b22:	4313      	orrs	r3, r2
 8003b24:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b2e:	685a      	ldr	r2, [r3, #4]
 8003b30:	4b2c      	ldr	r3, [pc, #176]	@ (8003be4 <ETH_SetDMAConfig+0xfc>)
 8003b32:	4013      	ands	r3, r2
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	6812      	ldr	r2, [r2, #0]
 8003b38:	68f9      	ldr	r1, [r7, #12]
 8003b3a:	430b      	orrs	r3, r1
 8003b3c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003b40:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	7b5b      	ldrb	r3, [r3, #13]
 8003b46:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b58:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8003b5c:	4b22      	ldr	r3, [pc, #136]	@ (8003be8 <ETH_SetDMAConfig+0x100>)
 8003b5e:	4013      	ands	r3, r2
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	6812      	ldr	r2, [r2, #0]
 8003b64:	68f9      	ldr	r1, [r7, #12]
 8003b66:	430b      	orrs	r3, r1
 8003b68:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003b6c:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	7d1b      	ldrb	r3, [r3, #20]
 8003b78:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8003b7a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	7f5b      	ldrb	r3, [r3, #29]
 8003b80:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003b82:	4313      	orrs	r3, r2
 8003b84:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b8e:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8003b92:	4b16      	ldr	r3, [pc, #88]	@ (8003bec <ETH_SetDMAConfig+0x104>)
 8003b94:	4013      	ands	r3, r2
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	6812      	ldr	r2, [r2, #0]
 8003b9a:	68f9      	ldr	r1, [r7, #12]
 8003b9c:	430b      	orrs	r3, r1
 8003b9e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003ba2:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	7f1b      	ldrb	r3, [r3, #28]
 8003baa:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bbc:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8003bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf0 <ETH_SetDMAConfig+0x108>)
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	6812      	ldr	r2, [r2, #0]
 8003bc8:	68f9      	ldr	r1, [r7, #12]
 8003bca:	430b      	orrs	r3, r1
 8003bcc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003bd0:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8003bd4:	bf00      	nop
 8003bd6:	3714      	adds	r7, #20
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr
 8003be0:	ffff87fd 	.word	0xffff87fd
 8003be4:	ffff2ffe 	.word	0xffff2ffe
 8003be8:	fffec000 	.word	0xfffec000
 8003bec:	ffc0efef 	.word	0xffc0efef
 8003bf0:	7fc0ffff 	.word	0x7fc0ffff

08003bf4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b0a4      	sub	sp, #144	@ 0x90
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003c02:	2300      	movs	r3, #0
 8003c04:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003c06:	2300      	movs	r3, #0
 8003c08:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003c12:	2301      	movs	r3, #1
 8003c14:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003c24:	2300      	movs	r3, #0
 8003c26:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003c30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003c34:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003c36:	2300      	movs	r3, #0
 8003c38:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003c40:	2300      	movs	r3, #0
 8003c42:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003c46:	2300      	movs	r3, #0
 8003c48:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8003c4c:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8003c50:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003c52:	2300      	movs	r3, #0
 8003c54:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003c62:	2300      	movs	r3, #0
 8003c64:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8003c72:	2300      	movs	r3, #0
 8003c74:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003c76:	2300      	movs	r3, #0
 8003c78:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003c80:	2300      	movs	r3, #0
 8003c82:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003c86:	2301      	movs	r3, #1
 8003c88:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003c8c:	2320      	movs	r3, #32
 8003c8e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003c92:	2301      	movs	r3, #1
 8003c94:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003c9e:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8003ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003ca4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003ca8:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003caa:	2300      	movs	r3, #0
 8003cac:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003cb0:	2302      	movs	r3, #2
 8003cb2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003cd8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003cdc:	4619      	mov	r1, r3
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f7ff fde6 	bl	80038b0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003cec:	2300      	movs	r3, #0
 8003cee:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003cfe:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003d02:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003d04:	2300      	movs	r3, #0
 8003d06:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003d08:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003d0c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8003d14:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8003d18:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003d1a:	f107 0308 	add.w	r3, r7, #8
 8003d1e:	4619      	mov	r1, r3
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f7ff fee1 	bl	8003ae8 <ETH_SetDMAConfig>
}
 8003d26:	bf00      	nop
 8003d28:	3790      	adds	r7, #144	@ 0x90
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b085      	sub	sp, #20
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003d36:	2300      	movs	r3, #0
 8003d38:	60fb      	str	r3, [r7, #12]
 8003d3a:	e01d      	b.n	8003d78 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68d9      	ldr	r1, [r3, #12]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	4613      	mov	r3, r2
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	4413      	add	r3, r2
 8003d48:	00db      	lsls	r3, r3, #3
 8003d4a:	440b      	add	r3, r1
 8003d4c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	2200      	movs	r2, #0
 8003d58:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	2200      	movs	r2, #0
 8003d64:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003d66:	68b9      	ldr	r1, [r7, #8]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	3206      	adds	r2, #6
 8003d6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	3301      	adds	r3, #1
 8003d76:	60fb      	str	r3, [r7, #12]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2b03      	cmp	r3, #3
 8003d7c:	d9de      	bls.n	8003d3c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	2303      	movs	r3, #3
 8003d90:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	68da      	ldr	r2, [r3, #12]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003da0:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68da      	ldr	r2, [r3, #12]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003db0:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8003db4:	bf00      	nop
 8003db6:	3714      	adds	r7, #20
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003dc8:	2300      	movs	r3, #0
 8003dca:	60fb      	str	r3, [r7, #12]
 8003dcc:	e023      	b.n	8003e16 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6919      	ldr	r1, [r3, #16]
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	4413      	add	r3, r2
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	440b      	add	r3, r1
 8003dde:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	2200      	movs	r2, #0
 8003de4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	2200      	movs	r2, #0
 8003dea:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	2200      	movs	r2, #0
 8003df0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	2200      	movs	r2, #0
 8003df6:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	2200      	movs	r2, #0
 8003e02:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003e04:	68b9      	ldr	r1, [r7, #8]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	3212      	adds	r2, #18
 8003e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	3301      	adds	r3, #1
 8003e14:	60fb      	str	r3, [r7, #12]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2b03      	cmp	r3, #3
 8003e1a:	d9d8      	bls.n	8003dce <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e42:	461a      	mov	r2, r3
 8003e44:	2303      	movs	r3, #3
 8003e46:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	691a      	ldr	r2, [r3, #16]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e56:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e6a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8003e6e:	bf00      	nop
 8003e70:	3714      	adds	r7, #20
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
	...

08003e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b089      	sub	sp, #36	@ 0x24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003e86:	2300      	movs	r3, #0
 8003e88:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003e8a:	4b89      	ldr	r3, [pc, #548]	@ (80040b0 <HAL_GPIO_Init+0x234>)
 8003e8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003e8e:	e194      	b.n	80041ba <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	2101      	movs	r1, #1
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	fa01 f303 	lsl.w	r3, r1, r3
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f000 8186 	beq.w	80041b4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f003 0303 	and.w	r3, r3, #3
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d005      	beq.n	8003ec0 <HAL_GPIO_Init+0x44>
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f003 0303 	and.w	r3, r3, #3
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d130      	bne.n	8003f22 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	2203      	movs	r2, #3
 8003ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed0:	43db      	mvns	r3, r3
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	68da      	ldr	r2, [r3, #12]
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	fa02 f303 	lsl.w	r3, r2, r3
 8003efe:	43db      	mvns	r3, r3
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	4013      	ands	r3, r2
 8003f04:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	091b      	lsrs	r3, r3, #4
 8003f0c:	f003 0201 	and.w	r2, r3, #1
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	fa02 f303 	lsl.w	r3, r2, r3
 8003f16:	69ba      	ldr	r2, [r7, #24]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	69ba      	ldr	r2, [r7, #24]
 8003f20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f003 0303 	and.w	r3, r3, #3
 8003f2a:	2b03      	cmp	r3, #3
 8003f2c:	d017      	beq.n	8003f5e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	005b      	lsls	r3, r3, #1
 8003f38:	2203      	movs	r2, #3
 8003f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3e:	43db      	mvns	r3, r3
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	4013      	ands	r3, r2
 8003f44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	689a      	ldr	r2, [r3, #8]
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f52:	69ba      	ldr	r2, [r7, #24]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f003 0303 	and.w	r3, r3, #3
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d123      	bne.n	8003fb2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	08da      	lsrs	r2, r3, #3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	3208      	adds	r2, #8
 8003f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	f003 0307 	and.w	r3, r3, #7
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	220f      	movs	r2, #15
 8003f82:	fa02 f303 	lsl.w	r3, r2, r3
 8003f86:	43db      	mvns	r3, r3
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	691a      	ldr	r2, [r3, #16]
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	f003 0307 	and.w	r3, r3, #7
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9e:	69ba      	ldr	r2, [r7, #24]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	08da      	lsrs	r2, r3, #3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	3208      	adds	r2, #8
 8003fac:	69b9      	ldr	r1, [r7, #24]
 8003fae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	005b      	lsls	r3, r3, #1
 8003fbc:	2203      	movs	r2, #3
 8003fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc2:	43db      	mvns	r3, r3
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f003 0203 	and.w	r2, r3, #3
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	005b      	lsls	r3, r3, #1
 8003fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fda:	69ba      	ldr	r2, [r7, #24]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	f000 80e0 	beq.w	80041b4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ff4:	4b2f      	ldr	r3, [pc, #188]	@ (80040b4 <HAL_GPIO_Init+0x238>)
 8003ff6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003ffa:	4a2e      	ldr	r2, [pc, #184]	@ (80040b4 <HAL_GPIO_Init+0x238>)
 8003ffc:	f043 0302 	orr.w	r3, r3, #2
 8004000:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004004:	4b2b      	ldr	r3, [pc, #172]	@ (80040b4 <HAL_GPIO_Init+0x238>)
 8004006:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	60fb      	str	r3, [r7, #12]
 8004010:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004012:	4a29      	ldr	r2, [pc, #164]	@ (80040b8 <HAL_GPIO_Init+0x23c>)
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	089b      	lsrs	r3, r3, #2
 8004018:	3302      	adds	r3, #2
 800401a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800401e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	f003 0303 	and.w	r3, r3, #3
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	220f      	movs	r2, #15
 800402a:	fa02 f303 	lsl.w	r3, r2, r3
 800402e:	43db      	mvns	r3, r3
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	4013      	ands	r3, r2
 8004034:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a20      	ldr	r2, [pc, #128]	@ (80040bc <HAL_GPIO_Init+0x240>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d052      	beq.n	80040e4 <HAL_GPIO_Init+0x268>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a1f      	ldr	r2, [pc, #124]	@ (80040c0 <HAL_GPIO_Init+0x244>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d031      	beq.n	80040aa <HAL_GPIO_Init+0x22e>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a1e      	ldr	r2, [pc, #120]	@ (80040c4 <HAL_GPIO_Init+0x248>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d02b      	beq.n	80040a6 <HAL_GPIO_Init+0x22a>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a1d      	ldr	r2, [pc, #116]	@ (80040c8 <HAL_GPIO_Init+0x24c>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d025      	beq.n	80040a2 <HAL_GPIO_Init+0x226>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a1c      	ldr	r2, [pc, #112]	@ (80040cc <HAL_GPIO_Init+0x250>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d01f      	beq.n	800409e <HAL_GPIO_Init+0x222>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a1b      	ldr	r2, [pc, #108]	@ (80040d0 <HAL_GPIO_Init+0x254>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d019      	beq.n	800409a <HAL_GPIO_Init+0x21e>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a1a      	ldr	r2, [pc, #104]	@ (80040d4 <HAL_GPIO_Init+0x258>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d013      	beq.n	8004096 <HAL_GPIO_Init+0x21a>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a19      	ldr	r2, [pc, #100]	@ (80040d8 <HAL_GPIO_Init+0x25c>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d00d      	beq.n	8004092 <HAL_GPIO_Init+0x216>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a18      	ldr	r2, [pc, #96]	@ (80040dc <HAL_GPIO_Init+0x260>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d007      	beq.n	800408e <HAL_GPIO_Init+0x212>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a17      	ldr	r2, [pc, #92]	@ (80040e0 <HAL_GPIO_Init+0x264>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d101      	bne.n	800408a <HAL_GPIO_Init+0x20e>
 8004086:	2309      	movs	r3, #9
 8004088:	e02d      	b.n	80040e6 <HAL_GPIO_Init+0x26a>
 800408a:	230a      	movs	r3, #10
 800408c:	e02b      	b.n	80040e6 <HAL_GPIO_Init+0x26a>
 800408e:	2308      	movs	r3, #8
 8004090:	e029      	b.n	80040e6 <HAL_GPIO_Init+0x26a>
 8004092:	2307      	movs	r3, #7
 8004094:	e027      	b.n	80040e6 <HAL_GPIO_Init+0x26a>
 8004096:	2306      	movs	r3, #6
 8004098:	e025      	b.n	80040e6 <HAL_GPIO_Init+0x26a>
 800409a:	2305      	movs	r3, #5
 800409c:	e023      	b.n	80040e6 <HAL_GPIO_Init+0x26a>
 800409e:	2304      	movs	r3, #4
 80040a0:	e021      	b.n	80040e6 <HAL_GPIO_Init+0x26a>
 80040a2:	2303      	movs	r3, #3
 80040a4:	e01f      	b.n	80040e6 <HAL_GPIO_Init+0x26a>
 80040a6:	2302      	movs	r3, #2
 80040a8:	e01d      	b.n	80040e6 <HAL_GPIO_Init+0x26a>
 80040aa:	2301      	movs	r3, #1
 80040ac:	e01b      	b.n	80040e6 <HAL_GPIO_Init+0x26a>
 80040ae:	bf00      	nop
 80040b0:	58000080 	.word	0x58000080
 80040b4:	58024400 	.word	0x58024400
 80040b8:	58000400 	.word	0x58000400
 80040bc:	58020000 	.word	0x58020000
 80040c0:	58020400 	.word	0x58020400
 80040c4:	58020800 	.word	0x58020800
 80040c8:	58020c00 	.word	0x58020c00
 80040cc:	58021000 	.word	0x58021000
 80040d0:	58021400 	.word	0x58021400
 80040d4:	58021800 	.word	0x58021800
 80040d8:	58021c00 	.word	0x58021c00
 80040dc:	58022000 	.word	0x58022000
 80040e0:	58022400 	.word	0x58022400
 80040e4:	2300      	movs	r3, #0
 80040e6:	69fa      	ldr	r2, [r7, #28]
 80040e8:	f002 0203 	and.w	r2, r2, #3
 80040ec:	0092      	lsls	r2, r2, #2
 80040ee:	4093      	lsls	r3, r2
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040f6:	4938      	ldr	r1, [pc, #224]	@ (80041d8 <HAL_GPIO_Init+0x35c>)
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	089b      	lsrs	r3, r3, #2
 80040fc:	3302      	adds	r3, #2
 80040fe:	69ba      	ldr	r2, [r7, #24]
 8004100:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004104:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	43db      	mvns	r3, r3
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	4013      	ands	r3, r2
 8004114:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d003      	beq.n	800412a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	4313      	orrs	r3, r2
 8004128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800412a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004132:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	43db      	mvns	r3, r3
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	4013      	ands	r3, r2
 8004142:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d003      	beq.n	8004158 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	4313      	orrs	r3, r2
 8004156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004158:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	43db      	mvns	r3, r3
 800416a:	69ba      	ldr	r2, [r7, #24]
 800416c:	4013      	ands	r3, r2
 800416e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d003      	beq.n	8004184 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	4313      	orrs	r3, r2
 8004182:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	69ba      	ldr	r2, [r7, #24]
 8004188:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	43db      	mvns	r3, r3
 8004194:	69ba      	ldr	r2, [r7, #24]
 8004196:	4013      	ands	r3, r2
 8004198:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80041a6:	69ba      	ldr	r2, [r7, #24]
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	3301      	adds	r3, #1
 80041b8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	fa22 f303 	lsr.w	r3, r2, r3
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f47f ae63 	bne.w	8003e90 <HAL_GPIO_Init+0x14>
  }
}
 80041ca:	bf00      	nop
 80041cc:	bf00      	nop
 80041ce:	3724      	adds	r7, #36	@ 0x24
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr
 80041d8:	58000400 	.word	0x58000400

080041dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	460b      	mov	r3, r1
 80041e6:	807b      	strh	r3, [r7, #2]
 80041e8:	4613      	mov	r3, r2
 80041ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041ec:	787b      	ldrb	r3, [r7, #1]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041f2:	887a      	ldrh	r2, [r7, #2]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80041f8:	e003      	b.n	8004202 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80041fa:	887b      	ldrh	r3, [r7, #2]
 80041fc:	041a      	lsls	r2, r3, #16
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	619a      	str	r2, [r3, #24]
}
 8004202:	bf00      	nop
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b086      	sub	sp, #24
 8004212:	af02      	add	r7, sp, #8
 8004214:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d101      	bne.n	8004220 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e0fe      	b.n	800441e <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b00      	cmp	r3, #0
 800422a:	d106      	bne.n	800423a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f7fd f93f 	bl	80014b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2203      	movs	r2, #3
 800423e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4618      	mov	r0, r3
 8004248:	f006 f82e 	bl	800a2a8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6818      	ldr	r0, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	7c1a      	ldrb	r2, [r3, #16]
 8004254:	f88d 2000 	strb.w	r2, [sp]
 8004258:	3304      	adds	r3, #4
 800425a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800425c:	f005 ffb2 	bl	800a1c4 <USB_CoreInit>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d005      	beq.n	8004272 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2202      	movs	r2, #2
 800426a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e0d5      	b.n	800441e <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2100      	movs	r1, #0
 8004278:	4618      	mov	r0, r3
 800427a:	f006 f826 	bl	800a2ca <USB_SetCurrentMode>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d005      	beq.n	8004290 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2202      	movs	r2, #2
 8004288:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e0c6      	b.n	800441e <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004290:	2300      	movs	r3, #0
 8004292:	73fb      	strb	r3, [r7, #15]
 8004294:	e04a      	b.n	800432c <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004296:	7bfa      	ldrb	r2, [r7, #15]
 8004298:	6879      	ldr	r1, [r7, #4]
 800429a:	4613      	mov	r3, r2
 800429c:	00db      	lsls	r3, r3, #3
 800429e:	4413      	add	r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	440b      	add	r3, r1
 80042a4:	3315      	adds	r3, #21
 80042a6:	2201      	movs	r2, #1
 80042a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80042aa:	7bfa      	ldrb	r2, [r7, #15]
 80042ac:	6879      	ldr	r1, [r7, #4]
 80042ae:	4613      	mov	r3, r2
 80042b0:	00db      	lsls	r3, r3, #3
 80042b2:	4413      	add	r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	440b      	add	r3, r1
 80042b8:	3314      	adds	r3, #20
 80042ba:	7bfa      	ldrb	r2, [r7, #15]
 80042bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80042be:	7bfa      	ldrb	r2, [r7, #15]
 80042c0:	7bfb      	ldrb	r3, [r7, #15]
 80042c2:	b298      	uxth	r0, r3
 80042c4:	6879      	ldr	r1, [r7, #4]
 80042c6:	4613      	mov	r3, r2
 80042c8:	00db      	lsls	r3, r3, #3
 80042ca:	4413      	add	r3, r2
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	440b      	add	r3, r1
 80042d0:	332e      	adds	r3, #46	@ 0x2e
 80042d2:	4602      	mov	r2, r0
 80042d4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80042d6:	7bfa      	ldrb	r2, [r7, #15]
 80042d8:	6879      	ldr	r1, [r7, #4]
 80042da:	4613      	mov	r3, r2
 80042dc:	00db      	lsls	r3, r3, #3
 80042de:	4413      	add	r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	440b      	add	r3, r1
 80042e4:	3318      	adds	r3, #24
 80042e6:	2200      	movs	r2, #0
 80042e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80042ea:	7bfa      	ldrb	r2, [r7, #15]
 80042ec:	6879      	ldr	r1, [r7, #4]
 80042ee:	4613      	mov	r3, r2
 80042f0:	00db      	lsls	r3, r3, #3
 80042f2:	4413      	add	r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	440b      	add	r3, r1
 80042f8:	331c      	adds	r3, #28
 80042fa:	2200      	movs	r2, #0
 80042fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80042fe:	7bfa      	ldrb	r2, [r7, #15]
 8004300:	6879      	ldr	r1, [r7, #4]
 8004302:	4613      	mov	r3, r2
 8004304:	00db      	lsls	r3, r3, #3
 8004306:	4413      	add	r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	440b      	add	r3, r1
 800430c:	3320      	adds	r3, #32
 800430e:	2200      	movs	r2, #0
 8004310:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004312:	7bfa      	ldrb	r2, [r7, #15]
 8004314:	6879      	ldr	r1, [r7, #4]
 8004316:	4613      	mov	r3, r2
 8004318:	00db      	lsls	r3, r3, #3
 800431a:	4413      	add	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	440b      	add	r3, r1
 8004320:	3324      	adds	r3, #36	@ 0x24
 8004322:	2200      	movs	r2, #0
 8004324:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004326:	7bfb      	ldrb	r3, [r7, #15]
 8004328:	3301      	adds	r3, #1
 800432a:	73fb      	strb	r3, [r7, #15]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	791b      	ldrb	r3, [r3, #4]
 8004330:	7bfa      	ldrb	r2, [r7, #15]
 8004332:	429a      	cmp	r2, r3
 8004334:	d3af      	bcc.n	8004296 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004336:	2300      	movs	r3, #0
 8004338:	73fb      	strb	r3, [r7, #15]
 800433a:	e044      	b.n	80043c6 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800433c:	7bfa      	ldrb	r2, [r7, #15]
 800433e:	6879      	ldr	r1, [r7, #4]
 8004340:	4613      	mov	r3, r2
 8004342:	00db      	lsls	r3, r3, #3
 8004344:	4413      	add	r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	440b      	add	r3, r1
 800434a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800434e:	2200      	movs	r2, #0
 8004350:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004352:	7bfa      	ldrb	r2, [r7, #15]
 8004354:	6879      	ldr	r1, [r7, #4]
 8004356:	4613      	mov	r3, r2
 8004358:	00db      	lsls	r3, r3, #3
 800435a:	4413      	add	r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	440b      	add	r3, r1
 8004360:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004364:	7bfa      	ldrb	r2, [r7, #15]
 8004366:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004368:	7bfa      	ldrb	r2, [r7, #15]
 800436a:	6879      	ldr	r1, [r7, #4]
 800436c:	4613      	mov	r3, r2
 800436e:	00db      	lsls	r3, r3, #3
 8004370:	4413      	add	r3, r2
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	440b      	add	r3, r1
 8004376:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800437a:	2200      	movs	r2, #0
 800437c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800437e:	7bfa      	ldrb	r2, [r7, #15]
 8004380:	6879      	ldr	r1, [r7, #4]
 8004382:	4613      	mov	r3, r2
 8004384:	00db      	lsls	r3, r3, #3
 8004386:	4413      	add	r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	440b      	add	r3, r1
 800438c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004390:	2200      	movs	r2, #0
 8004392:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004394:	7bfa      	ldrb	r2, [r7, #15]
 8004396:	6879      	ldr	r1, [r7, #4]
 8004398:	4613      	mov	r3, r2
 800439a:	00db      	lsls	r3, r3, #3
 800439c:	4413      	add	r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	440b      	add	r3, r1
 80043a2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80043a6:	2200      	movs	r2, #0
 80043a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80043aa:	7bfa      	ldrb	r2, [r7, #15]
 80043ac:	6879      	ldr	r1, [r7, #4]
 80043ae:	4613      	mov	r3, r2
 80043b0:	00db      	lsls	r3, r3, #3
 80043b2:	4413      	add	r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	440b      	add	r3, r1
 80043b8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80043bc:	2200      	movs	r2, #0
 80043be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043c0:	7bfb      	ldrb	r3, [r7, #15]
 80043c2:	3301      	adds	r3, #1
 80043c4:	73fb      	strb	r3, [r7, #15]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	791b      	ldrb	r3, [r3, #4]
 80043ca:	7bfa      	ldrb	r2, [r7, #15]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d3b5      	bcc.n	800433c <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6818      	ldr	r0, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	7c1a      	ldrb	r2, [r3, #16]
 80043d8:	f88d 2000 	strb.w	r2, [sp]
 80043dc:	3304      	adds	r3, #4
 80043de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043e0:	f005 ffc0 	bl	800a364 <USB_DevInit>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d005      	beq.n	80043f6 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2202      	movs	r2, #2
 80043ee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e013      	b.n	800441e <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	7b1b      	ldrb	r3, [r3, #12]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d102      	bne.n	8004412 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 f80b 	bl	8004428 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4618      	mov	r0, r3
 8004418:	f006 f97b 	bl	800a712 <USB_DevDisconnect>

  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
	...

08004428 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2201      	movs	r2, #1
 800443a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004456:	4b05      	ldr	r3, [pc, #20]	@ (800446c <HAL_PCDEx_ActivateLPM+0x44>)
 8004458:	4313      	orrs	r3, r2
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3714      	adds	r7, #20
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr
 800446c:	10000003 	.word	0x10000003

08004470 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004478:	4b19      	ldr	r3, [pc, #100]	@ (80044e0 <HAL_PWREx_ConfigSupply+0x70>)
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	f003 0304 	and.w	r3, r3, #4
 8004480:	2b04      	cmp	r3, #4
 8004482:	d00a      	beq.n	800449a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004484:	4b16      	ldr	r3, [pc, #88]	@ (80044e0 <HAL_PWREx_ConfigSupply+0x70>)
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	f003 0307 	and.w	r3, r3, #7
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	429a      	cmp	r2, r3
 8004490:	d001      	beq.n	8004496 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e01f      	b.n	80044d6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004496:	2300      	movs	r3, #0
 8004498:	e01d      	b.n	80044d6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800449a:	4b11      	ldr	r3, [pc, #68]	@ (80044e0 <HAL_PWREx_ConfigSupply+0x70>)
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	f023 0207 	bic.w	r2, r3, #7
 80044a2:	490f      	ldr	r1, [pc, #60]	@ (80044e0 <HAL_PWREx_ConfigSupply+0x70>)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80044aa:	f7fd f9f3 	bl	8001894 <HAL_GetTick>
 80044ae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80044b0:	e009      	b.n	80044c6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80044b2:	f7fd f9ef 	bl	8001894 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80044c0:	d901      	bls.n	80044c6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e007      	b.n	80044d6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80044c6:	4b06      	ldr	r3, [pc, #24]	@ (80044e0 <HAL_PWREx_ConfigSupply+0x70>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044d2:	d1ee      	bne.n	80044b2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	58024800 	.word	0x58024800

080044e4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80044e4:	b480      	push	{r7}
 80044e6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80044e8:	4b05      	ldr	r3, [pc, #20]	@ (8004500 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	4a04      	ldr	r2, [pc, #16]	@ (8004500 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80044ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044f2:	60d3      	str	r3, [r2, #12]
}
 80044f4:	bf00      	nop
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	58024800 	.word	0x58024800

08004504 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b08c      	sub	sp, #48	@ 0x30
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d102      	bne.n	8004518 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	f000 bc48 	b.w	8004da8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	2b00      	cmp	r3, #0
 8004522:	f000 8088 	beq.w	8004636 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004526:	4b99      	ldr	r3, [pc, #612]	@ (800478c <HAL_RCC_OscConfig+0x288>)
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800452e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004530:	4b96      	ldr	r3, [pc, #600]	@ (800478c <HAL_RCC_OscConfig+0x288>)
 8004532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004534:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004538:	2b10      	cmp	r3, #16
 800453a:	d007      	beq.n	800454c <HAL_RCC_OscConfig+0x48>
 800453c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800453e:	2b18      	cmp	r3, #24
 8004540:	d111      	bne.n	8004566 <HAL_RCC_OscConfig+0x62>
 8004542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004544:	f003 0303 	and.w	r3, r3, #3
 8004548:	2b02      	cmp	r3, #2
 800454a:	d10c      	bne.n	8004566 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800454c:	4b8f      	ldr	r3, [pc, #572]	@ (800478c <HAL_RCC_OscConfig+0x288>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d06d      	beq.n	8004634 <HAL_RCC_OscConfig+0x130>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d169      	bne.n	8004634 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	f000 bc21 	b.w	8004da8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800456e:	d106      	bne.n	800457e <HAL_RCC_OscConfig+0x7a>
 8004570:	4b86      	ldr	r3, [pc, #536]	@ (800478c <HAL_RCC_OscConfig+0x288>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a85      	ldr	r2, [pc, #532]	@ (800478c <HAL_RCC_OscConfig+0x288>)
 8004576:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800457a:	6013      	str	r3, [r2, #0]
 800457c:	e02e      	b.n	80045dc <HAL_RCC_OscConfig+0xd8>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10c      	bne.n	80045a0 <HAL_RCC_OscConfig+0x9c>
 8004586:	4b81      	ldr	r3, [pc, #516]	@ (800478c <HAL_RCC_OscConfig+0x288>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a80      	ldr	r2, [pc, #512]	@ (800478c <HAL_RCC_OscConfig+0x288>)
 800458c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004590:	6013      	str	r3, [r2, #0]
 8004592:	4b7e      	ldr	r3, [pc, #504]	@ (800478c <HAL_RCC_OscConfig+0x288>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a7d      	ldr	r2, [pc, #500]	@ (800478c <HAL_RCC_OscConfig+0x288>)
 8004598:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800459c:	6013      	str	r3, [r2, #0]
 800459e:	e01d      	b.n	80045dc <HAL_RCC_OscConfig+0xd8>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80045a8:	d10c      	bne.n	80045c4 <HAL_RCC_OscConfig+0xc0>
 80045aa:	4b78      	ldr	r3, [pc, #480]	@ (800478c <HAL_RCC_OscConfig+0x288>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a77      	ldr	r2, [pc, #476]	@ (800478c <HAL_RCC_OscConfig+0x288>)
 80045b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045b4:	6013      	str	r3, [r2, #0]
 80045b6:	4b75      	ldr	r3, [pc, #468]	@ (800478c <HAL_RCC_OscConfig+0x288>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a74      	ldr	r2, [pc, #464]	@ (800478c <HAL_RCC_OscConfig+0x288>)
 80045bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045c0:	6013      	str	r3, [r2, #0]
 80045c2:	e00b      	b.n	80045dc <HAL_RCC_OscConfig+0xd8>
 80045c4:	4b71      	ldr	r3, [pc, #452]	@ (800478c <HAL_RCC_OscConfig+0x288>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a70      	ldr	r2, [pc, #448]	@ (800478c <HAL_RCC_OscConfig+0x288>)
 80045ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045ce:	6013      	str	r3, [r2, #0]
 80045d0:	4b6e      	ldr	r3, [pc, #440]	@ (800478c <HAL_RCC_OscConfig+0x288>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a6d      	ldr	r2, [pc, #436]	@ (800478c <HAL_RCC_OscConfig+0x288>)
 80045d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d013      	beq.n	800460c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e4:	f7fd f956 	bl	8001894 <HAL_GetTick>
 80045e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045ec:	f7fd f952 	bl	8001894 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b64      	cmp	r3, #100	@ 0x64
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e3d4      	b.n	8004da8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045fe:	4b63      	ldr	r3, [pc, #396]	@ (800478c <HAL_RCC_OscConfig+0x288>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d0f0      	beq.n	80045ec <HAL_RCC_OscConfig+0xe8>
 800460a:	e014      	b.n	8004636 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800460c:	f7fd f942 	bl	8001894 <HAL_GetTick>
 8004610:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004612:	e008      	b.n	8004626 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004614:	f7fd f93e 	bl	8001894 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b64      	cmp	r3, #100	@ 0x64
 8004620:	d901      	bls.n	8004626 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e3c0      	b.n	8004da8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004626:	4b59      	ldr	r3, [pc, #356]	@ (800478c <HAL_RCC_OscConfig+0x288>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1f0      	bne.n	8004614 <HAL_RCC_OscConfig+0x110>
 8004632:	e000      	b.n	8004636 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004634:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	f000 80ca 	beq.w	80047d8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004644:	4b51      	ldr	r3, [pc, #324]	@ (800478c <HAL_RCC_OscConfig+0x288>)
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800464c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800464e:	4b4f      	ldr	r3, [pc, #316]	@ (800478c <HAL_RCC_OscConfig+0x288>)
 8004650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004652:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004654:	6a3b      	ldr	r3, [r7, #32]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d007      	beq.n	800466a <HAL_RCC_OscConfig+0x166>
 800465a:	6a3b      	ldr	r3, [r7, #32]
 800465c:	2b18      	cmp	r3, #24
 800465e:	d156      	bne.n	800470e <HAL_RCC_OscConfig+0x20a>
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	f003 0303 	and.w	r3, r3, #3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d151      	bne.n	800470e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800466a:	4b48      	ldr	r3, [pc, #288]	@ (800478c <HAL_RCC_OscConfig+0x288>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0304 	and.w	r3, r3, #4
 8004672:	2b00      	cmp	r3, #0
 8004674:	d005      	beq.n	8004682 <HAL_RCC_OscConfig+0x17e>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e392      	b.n	8004da8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004682:	4b42      	ldr	r3, [pc, #264]	@ (800478c <HAL_RCC_OscConfig+0x288>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f023 0219 	bic.w	r2, r3, #25
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	493f      	ldr	r1, [pc, #252]	@ (800478c <HAL_RCC_OscConfig+0x288>)
 8004690:	4313      	orrs	r3, r2
 8004692:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004694:	f7fd f8fe 	bl	8001894 <HAL_GetTick>
 8004698:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800469a:	e008      	b.n	80046ae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800469c:	f7fd f8fa 	bl	8001894 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e37c      	b.n	8004da8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046ae:	4b37      	ldr	r3, [pc, #220]	@ (800478c <HAL_RCC_OscConfig+0x288>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0304 	and.w	r3, r3, #4
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d0f0      	beq.n	800469c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046ba:	f7fd f91b 	bl	80018f4 <HAL_GetREVID>
 80046be:	4603      	mov	r3, r0
 80046c0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d817      	bhi.n	80046f8 <HAL_RCC_OscConfig+0x1f4>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	2b40      	cmp	r3, #64	@ 0x40
 80046ce:	d108      	bne.n	80046e2 <HAL_RCC_OscConfig+0x1de>
 80046d0:	4b2e      	ldr	r3, [pc, #184]	@ (800478c <HAL_RCC_OscConfig+0x288>)
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80046d8:	4a2c      	ldr	r2, [pc, #176]	@ (800478c <HAL_RCC_OscConfig+0x288>)
 80046da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046de:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046e0:	e07a      	b.n	80047d8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046e2:	4b2a      	ldr	r3, [pc, #168]	@ (800478c <HAL_RCC_OscConfig+0x288>)
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	031b      	lsls	r3, r3, #12
 80046f0:	4926      	ldr	r1, [pc, #152]	@ (800478c <HAL_RCC_OscConfig+0x288>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046f6:	e06f      	b.n	80047d8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046f8:	4b24      	ldr	r3, [pc, #144]	@ (800478c <HAL_RCC_OscConfig+0x288>)
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	061b      	lsls	r3, r3, #24
 8004706:	4921      	ldr	r1, [pc, #132]	@ (800478c <HAL_RCC_OscConfig+0x288>)
 8004708:	4313      	orrs	r3, r2
 800470a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800470c:	e064      	b.n	80047d8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d047      	beq.n	80047a6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004716:	4b1d      	ldr	r3, [pc, #116]	@ (800478c <HAL_RCC_OscConfig+0x288>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f023 0219 	bic.w	r2, r3, #25
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	491a      	ldr	r1, [pc, #104]	@ (800478c <HAL_RCC_OscConfig+0x288>)
 8004724:	4313      	orrs	r3, r2
 8004726:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004728:	f7fd f8b4 	bl	8001894 <HAL_GetTick>
 800472c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800472e:	e008      	b.n	8004742 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004730:	f7fd f8b0 	bl	8001894 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b02      	cmp	r3, #2
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e332      	b.n	8004da8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004742:	4b12      	ldr	r3, [pc, #72]	@ (800478c <HAL_RCC_OscConfig+0x288>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0304 	and.w	r3, r3, #4
 800474a:	2b00      	cmp	r3, #0
 800474c:	d0f0      	beq.n	8004730 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800474e:	f7fd f8d1 	bl	80018f4 <HAL_GetREVID>
 8004752:	4603      	mov	r3, r0
 8004754:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004758:	4293      	cmp	r3, r2
 800475a:	d819      	bhi.n	8004790 <HAL_RCC_OscConfig+0x28c>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	2b40      	cmp	r3, #64	@ 0x40
 8004762:	d108      	bne.n	8004776 <HAL_RCC_OscConfig+0x272>
 8004764:	4b09      	ldr	r3, [pc, #36]	@ (800478c <HAL_RCC_OscConfig+0x288>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800476c:	4a07      	ldr	r2, [pc, #28]	@ (800478c <HAL_RCC_OscConfig+0x288>)
 800476e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004772:	6053      	str	r3, [r2, #4]
 8004774:	e030      	b.n	80047d8 <HAL_RCC_OscConfig+0x2d4>
 8004776:	4b05      	ldr	r3, [pc, #20]	@ (800478c <HAL_RCC_OscConfig+0x288>)
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	031b      	lsls	r3, r3, #12
 8004784:	4901      	ldr	r1, [pc, #4]	@ (800478c <HAL_RCC_OscConfig+0x288>)
 8004786:	4313      	orrs	r3, r2
 8004788:	604b      	str	r3, [r1, #4]
 800478a:	e025      	b.n	80047d8 <HAL_RCC_OscConfig+0x2d4>
 800478c:	58024400 	.word	0x58024400
 8004790:	4b9a      	ldr	r3, [pc, #616]	@ (80049fc <HAL_RCC_OscConfig+0x4f8>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	061b      	lsls	r3, r3, #24
 800479e:	4997      	ldr	r1, [pc, #604]	@ (80049fc <HAL_RCC_OscConfig+0x4f8>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	604b      	str	r3, [r1, #4]
 80047a4:	e018      	b.n	80047d8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047a6:	4b95      	ldr	r3, [pc, #596]	@ (80049fc <HAL_RCC_OscConfig+0x4f8>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a94      	ldr	r2, [pc, #592]	@ (80049fc <HAL_RCC_OscConfig+0x4f8>)
 80047ac:	f023 0301 	bic.w	r3, r3, #1
 80047b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b2:	f7fd f86f 	bl	8001894 <HAL_GetTick>
 80047b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80047b8:	e008      	b.n	80047cc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047ba:	f7fd f86b 	bl	8001894 <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d901      	bls.n	80047cc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e2ed      	b.n	8004da8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80047cc:	4b8b      	ldr	r3, [pc, #556]	@ (80049fc <HAL_RCC_OscConfig+0x4f8>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0304 	and.w	r3, r3, #4
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1f0      	bne.n	80047ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0310 	and.w	r3, r3, #16
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f000 80a9 	beq.w	8004938 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047e6:	4b85      	ldr	r3, [pc, #532]	@ (80049fc <HAL_RCC_OscConfig+0x4f8>)
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80047ee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80047f0:	4b82      	ldr	r3, [pc, #520]	@ (80049fc <HAL_RCC_OscConfig+0x4f8>)
 80047f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	d007      	beq.n	800480c <HAL_RCC_OscConfig+0x308>
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	2b18      	cmp	r3, #24
 8004800:	d13a      	bne.n	8004878 <HAL_RCC_OscConfig+0x374>
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	f003 0303 	and.w	r3, r3, #3
 8004808:	2b01      	cmp	r3, #1
 800480a:	d135      	bne.n	8004878 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800480c:	4b7b      	ldr	r3, [pc, #492]	@ (80049fc <HAL_RCC_OscConfig+0x4f8>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004814:	2b00      	cmp	r3, #0
 8004816:	d005      	beq.n	8004824 <HAL_RCC_OscConfig+0x320>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	69db      	ldr	r3, [r3, #28]
 800481c:	2b80      	cmp	r3, #128	@ 0x80
 800481e:	d001      	beq.n	8004824 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e2c1      	b.n	8004da8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004824:	f7fd f866 	bl	80018f4 <HAL_GetREVID>
 8004828:	4603      	mov	r3, r0
 800482a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800482e:	4293      	cmp	r3, r2
 8004830:	d817      	bhi.n	8004862 <HAL_RCC_OscConfig+0x35e>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	2b20      	cmp	r3, #32
 8004838:	d108      	bne.n	800484c <HAL_RCC_OscConfig+0x348>
 800483a:	4b70      	ldr	r3, [pc, #448]	@ (80049fc <HAL_RCC_OscConfig+0x4f8>)
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004842:	4a6e      	ldr	r2, [pc, #440]	@ (80049fc <HAL_RCC_OscConfig+0x4f8>)
 8004844:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004848:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800484a:	e075      	b.n	8004938 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800484c:	4b6b      	ldr	r3, [pc, #428]	@ (80049fc <HAL_RCC_OscConfig+0x4f8>)
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	069b      	lsls	r3, r3, #26
 800485a:	4968      	ldr	r1, [pc, #416]	@ (80049fc <HAL_RCC_OscConfig+0x4f8>)
 800485c:	4313      	orrs	r3, r2
 800485e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004860:	e06a      	b.n	8004938 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004862:	4b66      	ldr	r3, [pc, #408]	@ (80049fc <HAL_RCC_OscConfig+0x4f8>)
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a1b      	ldr	r3, [r3, #32]
 800486e:	061b      	lsls	r3, r3, #24
 8004870:	4962      	ldr	r1, [pc, #392]	@ (80049fc <HAL_RCC_OscConfig+0x4f8>)
 8004872:	4313      	orrs	r3, r2
 8004874:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004876:	e05f      	b.n	8004938 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	69db      	ldr	r3, [r3, #28]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d042      	beq.n	8004906 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004880:	4b5e      	ldr	r3, [pc, #376]	@ (80049fc <HAL_RCC_OscConfig+0x4f8>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a5d      	ldr	r2, [pc, #372]	@ (80049fc <HAL_RCC_OscConfig+0x4f8>)
 8004886:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800488a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800488c:	f7fd f802 	bl	8001894 <HAL_GetTick>
 8004890:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004892:	e008      	b.n	80048a6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004894:	f7fc fffe 	bl	8001894 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e280      	b.n	8004da8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80048a6:	4b55      	ldr	r3, [pc, #340]	@ (80049fc <HAL_RCC_OscConfig+0x4f8>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d0f0      	beq.n	8004894 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80048b2:	f7fd f81f 	bl	80018f4 <HAL_GetREVID>
 80048b6:	4603      	mov	r3, r0
 80048b8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80048bc:	4293      	cmp	r3, r2
 80048be:	d817      	bhi.n	80048f0 <HAL_RCC_OscConfig+0x3ec>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a1b      	ldr	r3, [r3, #32]
 80048c4:	2b20      	cmp	r3, #32
 80048c6:	d108      	bne.n	80048da <HAL_RCC_OscConfig+0x3d6>
 80048c8:	4b4c      	ldr	r3, [pc, #304]	@ (80049fc <HAL_RCC_OscConfig+0x4f8>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80048d0:	4a4a      	ldr	r2, [pc, #296]	@ (80049fc <HAL_RCC_OscConfig+0x4f8>)
 80048d2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80048d6:	6053      	str	r3, [r2, #4]
 80048d8:	e02e      	b.n	8004938 <HAL_RCC_OscConfig+0x434>
 80048da:	4b48      	ldr	r3, [pc, #288]	@ (80049fc <HAL_RCC_OscConfig+0x4f8>)
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	069b      	lsls	r3, r3, #26
 80048e8:	4944      	ldr	r1, [pc, #272]	@ (80049fc <HAL_RCC_OscConfig+0x4f8>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	604b      	str	r3, [r1, #4]
 80048ee:	e023      	b.n	8004938 <HAL_RCC_OscConfig+0x434>
 80048f0:	4b42      	ldr	r3, [pc, #264]	@ (80049fc <HAL_RCC_OscConfig+0x4f8>)
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a1b      	ldr	r3, [r3, #32]
 80048fc:	061b      	lsls	r3, r3, #24
 80048fe:	493f      	ldr	r1, [pc, #252]	@ (80049fc <HAL_RCC_OscConfig+0x4f8>)
 8004900:	4313      	orrs	r3, r2
 8004902:	60cb      	str	r3, [r1, #12]
 8004904:	e018      	b.n	8004938 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004906:	4b3d      	ldr	r3, [pc, #244]	@ (80049fc <HAL_RCC_OscConfig+0x4f8>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a3c      	ldr	r2, [pc, #240]	@ (80049fc <HAL_RCC_OscConfig+0x4f8>)
 800490c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004910:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004912:	f7fc ffbf 	bl	8001894 <HAL_GetTick>
 8004916:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004918:	e008      	b.n	800492c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800491a:	f7fc ffbb 	bl	8001894 <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	2b02      	cmp	r3, #2
 8004926:	d901      	bls.n	800492c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e23d      	b.n	8004da8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800492c:	4b33      	ldr	r3, [pc, #204]	@ (80049fc <HAL_RCC_OscConfig+0x4f8>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004934:	2b00      	cmp	r3, #0
 8004936:	d1f0      	bne.n	800491a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0308 	and.w	r3, r3, #8
 8004940:	2b00      	cmp	r3, #0
 8004942:	d036      	beq.n	80049b2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	695b      	ldr	r3, [r3, #20]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d019      	beq.n	8004980 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800494c:	4b2b      	ldr	r3, [pc, #172]	@ (80049fc <HAL_RCC_OscConfig+0x4f8>)
 800494e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004950:	4a2a      	ldr	r2, [pc, #168]	@ (80049fc <HAL_RCC_OscConfig+0x4f8>)
 8004952:	f043 0301 	orr.w	r3, r3, #1
 8004956:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004958:	f7fc ff9c 	bl	8001894 <HAL_GetTick>
 800495c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800495e:	e008      	b.n	8004972 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004960:	f7fc ff98 	bl	8001894 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b02      	cmp	r3, #2
 800496c:	d901      	bls.n	8004972 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e21a      	b.n	8004da8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004972:	4b22      	ldr	r3, [pc, #136]	@ (80049fc <HAL_RCC_OscConfig+0x4f8>)
 8004974:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b00      	cmp	r3, #0
 800497c:	d0f0      	beq.n	8004960 <HAL_RCC_OscConfig+0x45c>
 800497e:	e018      	b.n	80049b2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004980:	4b1e      	ldr	r3, [pc, #120]	@ (80049fc <HAL_RCC_OscConfig+0x4f8>)
 8004982:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004984:	4a1d      	ldr	r2, [pc, #116]	@ (80049fc <HAL_RCC_OscConfig+0x4f8>)
 8004986:	f023 0301 	bic.w	r3, r3, #1
 800498a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800498c:	f7fc ff82 	bl	8001894 <HAL_GetTick>
 8004990:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004992:	e008      	b.n	80049a6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004994:	f7fc ff7e 	bl	8001894 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e200      	b.n	8004da8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80049a6:	4b15      	ldr	r3, [pc, #84]	@ (80049fc <HAL_RCC_OscConfig+0x4f8>)
 80049a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1f0      	bne.n	8004994 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0320 	and.w	r3, r3, #32
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d039      	beq.n	8004a32 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d01c      	beq.n	8004a00 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80049c6:	4b0d      	ldr	r3, [pc, #52]	@ (80049fc <HAL_RCC_OscConfig+0x4f8>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a0c      	ldr	r2, [pc, #48]	@ (80049fc <HAL_RCC_OscConfig+0x4f8>)
 80049cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80049d0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80049d2:	f7fc ff5f 	bl	8001894 <HAL_GetTick>
 80049d6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80049d8:	e008      	b.n	80049ec <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049da:	f7fc ff5b 	bl	8001894 <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d901      	bls.n	80049ec <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e1dd      	b.n	8004da8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80049ec:	4b03      	ldr	r3, [pc, #12]	@ (80049fc <HAL_RCC_OscConfig+0x4f8>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d0f0      	beq.n	80049da <HAL_RCC_OscConfig+0x4d6>
 80049f8:	e01b      	b.n	8004a32 <HAL_RCC_OscConfig+0x52e>
 80049fa:	bf00      	nop
 80049fc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a00:	4b9b      	ldr	r3, [pc, #620]	@ (8004c70 <HAL_RCC_OscConfig+0x76c>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a9a      	ldr	r2, [pc, #616]	@ (8004c70 <HAL_RCC_OscConfig+0x76c>)
 8004a06:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a0a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004a0c:	f7fc ff42 	bl	8001894 <HAL_GetTick>
 8004a10:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004a12:	e008      	b.n	8004a26 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a14:	f7fc ff3e 	bl	8001894 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e1c0      	b.n	8004da8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004a26:	4b92      	ldr	r3, [pc, #584]	@ (8004c70 <HAL_RCC_OscConfig+0x76c>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1f0      	bne.n	8004a14 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0304 	and.w	r3, r3, #4
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f000 8081 	beq.w	8004b42 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004a40:	4b8c      	ldr	r3, [pc, #560]	@ (8004c74 <HAL_RCC_OscConfig+0x770>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a8b      	ldr	r2, [pc, #556]	@ (8004c74 <HAL_RCC_OscConfig+0x770>)
 8004a46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a4c:	f7fc ff22 	bl	8001894 <HAL_GetTick>
 8004a50:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a52:	e008      	b.n	8004a66 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a54:	f7fc ff1e 	bl	8001894 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b64      	cmp	r3, #100	@ 0x64
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e1a0      	b.n	8004da8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a66:	4b83      	ldr	r3, [pc, #524]	@ (8004c74 <HAL_RCC_OscConfig+0x770>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d0f0      	beq.n	8004a54 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d106      	bne.n	8004a88 <HAL_RCC_OscConfig+0x584>
 8004a7a:	4b7d      	ldr	r3, [pc, #500]	@ (8004c70 <HAL_RCC_OscConfig+0x76c>)
 8004a7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a7e:	4a7c      	ldr	r2, [pc, #496]	@ (8004c70 <HAL_RCC_OscConfig+0x76c>)
 8004a80:	f043 0301 	orr.w	r3, r3, #1
 8004a84:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a86:	e02d      	b.n	8004ae4 <HAL_RCC_OscConfig+0x5e0>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d10c      	bne.n	8004aaa <HAL_RCC_OscConfig+0x5a6>
 8004a90:	4b77      	ldr	r3, [pc, #476]	@ (8004c70 <HAL_RCC_OscConfig+0x76c>)
 8004a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a94:	4a76      	ldr	r2, [pc, #472]	@ (8004c70 <HAL_RCC_OscConfig+0x76c>)
 8004a96:	f023 0301 	bic.w	r3, r3, #1
 8004a9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a9c:	4b74      	ldr	r3, [pc, #464]	@ (8004c70 <HAL_RCC_OscConfig+0x76c>)
 8004a9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aa0:	4a73      	ldr	r2, [pc, #460]	@ (8004c70 <HAL_RCC_OscConfig+0x76c>)
 8004aa2:	f023 0304 	bic.w	r3, r3, #4
 8004aa6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004aa8:	e01c      	b.n	8004ae4 <HAL_RCC_OscConfig+0x5e0>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	2b05      	cmp	r3, #5
 8004ab0:	d10c      	bne.n	8004acc <HAL_RCC_OscConfig+0x5c8>
 8004ab2:	4b6f      	ldr	r3, [pc, #444]	@ (8004c70 <HAL_RCC_OscConfig+0x76c>)
 8004ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ab6:	4a6e      	ldr	r2, [pc, #440]	@ (8004c70 <HAL_RCC_OscConfig+0x76c>)
 8004ab8:	f043 0304 	orr.w	r3, r3, #4
 8004abc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004abe:	4b6c      	ldr	r3, [pc, #432]	@ (8004c70 <HAL_RCC_OscConfig+0x76c>)
 8004ac0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ac2:	4a6b      	ldr	r2, [pc, #428]	@ (8004c70 <HAL_RCC_OscConfig+0x76c>)
 8004ac4:	f043 0301 	orr.w	r3, r3, #1
 8004ac8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004aca:	e00b      	b.n	8004ae4 <HAL_RCC_OscConfig+0x5e0>
 8004acc:	4b68      	ldr	r3, [pc, #416]	@ (8004c70 <HAL_RCC_OscConfig+0x76c>)
 8004ace:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ad0:	4a67      	ldr	r2, [pc, #412]	@ (8004c70 <HAL_RCC_OscConfig+0x76c>)
 8004ad2:	f023 0301 	bic.w	r3, r3, #1
 8004ad6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ad8:	4b65      	ldr	r3, [pc, #404]	@ (8004c70 <HAL_RCC_OscConfig+0x76c>)
 8004ada:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004adc:	4a64      	ldr	r2, [pc, #400]	@ (8004c70 <HAL_RCC_OscConfig+0x76c>)
 8004ade:	f023 0304 	bic.w	r3, r3, #4
 8004ae2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d015      	beq.n	8004b18 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aec:	f7fc fed2 	bl	8001894 <HAL_GetTick>
 8004af0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004af2:	e00a      	b.n	8004b0a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004af4:	f7fc fece 	bl	8001894 <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e14e      	b.n	8004da8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b0a:	4b59      	ldr	r3, [pc, #356]	@ (8004c70 <HAL_RCC_OscConfig+0x76c>)
 8004b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d0ee      	beq.n	8004af4 <HAL_RCC_OscConfig+0x5f0>
 8004b16:	e014      	b.n	8004b42 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b18:	f7fc febc 	bl	8001894 <HAL_GetTick>
 8004b1c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b1e:	e00a      	b.n	8004b36 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b20:	f7fc feb8 	bl	8001894 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d901      	bls.n	8004b36 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e138      	b.n	8004da8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b36:	4b4e      	ldr	r3, [pc, #312]	@ (8004c70 <HAL_RCC_OscConfig+0x76c>)
 8004b38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1ee      	bne.n	8004b20 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f000 812d 	beq.w	8004da6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004b4c:	4b48      	ldr	r3, [pc, #288]	@ (8004c70 <HAL_RCC_OscConfig+0x76c>)
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b54:	2b18      	cmp	r3, #24
 8004b56:	f000 80bd 	beq.w	8004cd4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	f040 809e 	bne.w	8004ca0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b64:	4b42      	ldr	r3, [pc, #264]	@ (8004c70 <HAL_RCC_OscConfig+0x76c>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a41      	ldr	r2, [pc, #260]	@ (8004c70 <HAL_RCC_OscConfig+0x76c>)
 8004b6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b70:	f7fc fe90 	bl	8001894 <HAL_GetTick>
 8004b74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b76:	e008      	b.n	8004b8a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b78:	f7fc fe8c 	bl	8001894 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d901      	bls.n	8004b8a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e10e      	b.n	8004da8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b8a:	4b39      	ldr	r3, [pc, #228]	@ (8004c70 <HAL_RCC_OscConfig+0x76c>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1f0      	bne.n	8004b78 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b96:	4b36      	ldr	r3, [pc, #216]	@ (8004c70 <HAL_RCC_OscConfig+0x76c>)
 8004b98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b9a:	4b37      	ldr	r3, [pc, #220]	@ (8004c78 <HAL_RCC_OscConfig+0x774>)
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004ba6:	0112      	lsls	r2, r2, #4
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	4931      	ldr	r1, [pc, #196]	@ (8004c70 <HAL_RCC_OscConfig+0x76c>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	628b      	str	r3, [r1, #40]	@ 0x28
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	025b      	lsls	r3, r3, #9
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	431a      	orrs	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	041b      	lsls	r3, r3, #16
 8004bce:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004bd2:	431a      	orrs	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	061b      	lsls	r3, r3, #24
 8004bdc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004be0:	4923      	ldr	r1, [pc, #140]	@ (8004c70 <HAL_RCC_OscConfig+0x76c>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004be6:	4b22      	ldr	r3, [pc, #136]	@ (8004c70 <HAL_RCC_OscConfig+0x76c>)
 8004be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bea:	4a21      	ldr	r2, [pc, #132]	@ (8004c70 <HAL_RCC_OscConfig+0x76c>)
 8004bec:	f023 0301 	bic.w	r3, r3, #1
 8004bf0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004bf2:	4b1f      	ldr	r3, [pc, #124]	@ (8004c70 <HAL_RCC_OscConfig+0x76c>)
 8004bf4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bf6:	4b21      	ldr	r3, [pc, #132]	@ (8004c7c <HAL_RCC_OscConfig+0x778>)
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004bfe:	00d2      	lsls	r2, r2, #3
 8004c00:	491b      	ldr	r1, [pc, #108]	@ (8004c70 <HAL_RCC_OscConfig+0x76c>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004c06:	4b1a      	ldr	r3, [pc, #104]	@ (8004c70 <HAL_RCC_OscConfig+0x76c>)
 8004c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c0a:	f023 020c 	bic.w	r2, r3, #12
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c12:	4917      	ldr	r1, [pc, #92]	@ (8004c70 <HAL_RCC_OscConfig+0x76c>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004c18:	4b15      	ldr	r3, [pc, #84]	@ (8004c70 <HAL_RCC_OscConfig+0x76c>)
 8004c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c1c:	f023 0202 	bic.w	r2, r3, #2
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c24:	4912      	ldr	r1, [pc, #72]	@ (8004c70 <HAL_RCC_OscConfig+0x76c>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004c2a:	4b11      	ldr	r3, [pc, #68]	@ (8004c70 <HAL_RCC_OscConfig+0x76c>)
 8004c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c2e:	4a10      	ldr	r2, [pc, #64]	@ (8004c70 <HAL_RCC_OscConfig+0x76c>)
 8004c30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c36:	4b0e      	ldr	r3, [pc, #56]	@ (8004c70 <HAL_RCC_OscConfig+0x76c>)
 8004c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c3a:	4a0d      	ldr	r2, [pc, #52]	@ (8004c70 <HAL_RCC_OscConfig+0x76c>)
 8004c3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004c42:	4b0b      	ldr	r3, [pc, #44]	@ (8004c70 <HAL_RCC_OscConfig+0x76c>)
 8004c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c46:	4a0a      	ldr	r2, [pc, #40]	@ (8004c70 <HAL_RCC_OscConfig+0x76c>)
 8004c48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004c4e:	4b08      	ldr	r3, [pc, #32]	@ (8004c70 <HAL_RCC_OscConfig+0x76c>)
 8004c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c52:	4a07      	ldr	r2, [pc, #28]	@ (8004c70 <HAL_RCC_OscConfig+0x76c>)
 8004c54:	f043 0301 	orr.w	r3, r3, #1
 8004c58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c5a:	4b05      	ldr	r3, [pc, #20]	@ (8004c70 <HAL_RCC_OscConfig+0x76c>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a04      	ldr	r2, [pc, #16]	@ (8004c70 <HAL_RCC_OscConfig+0x76c>)
 8004c60:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c66:	f7fc fe15 	bl	8001894 <HAL_GetTick>
 8004c6a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c6c:	e011      	b.n	8004c92 <HAL_RCC_OscConfig+0x78e>
 8004c6e:	bf00      	nop
 8004c70:	58024400 	.word	0x58024400
 8004c74:	58024800 	.word	0x58024800
 8004c78:	fffffc0c 	.word	0xfffffc0c
 8004c7c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c80:	f7fc fe08 	bl	8001894 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e08a      	b.n	8004da8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c92:	4b47      	ldr	r3, [pc, #284]	@ (8004db0 <HAL_RCC_OscConfig+0x8ac>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d0f0      	beq.n	8004c80 <HAL_RCC_OscConfig+0x77c>
 8004c9e:	e082      	b.n	8004da6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ca0:	4b43      	ldr	r3, [pc, #268]	@ (8004db0 <HAL_RCC_OscConfig+0x8ac>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a42      	ldr	r2, [pc, #264]	@ (8004db0 <HAL_RCC_OscConfig+0x8ac>)
 8004ca6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004caa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cac:	f7fc fdf2 	bl	8001894 <HAL_GetTick>
 8004cb0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004cb2:	e008      	b.n	8004cc6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cb4:	f7fc fdee 	bl	8001894 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d901      	bls.n	8004cc6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e070      	b.n	8004da8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004cc6:	4b3a      	ldr	r3, [pc, #232]	@ (8004db0 <HAL_RCC_OscConfig+0x8ac>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1f0      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x7b0>
 8004cd2:	e068      	b.n	8004da6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004cd4:	4b36      	ldr	r3, [pc, #216]	@ (8004db0 <HAL_RCC_OscConfig+0x8ac>)
 8004cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004cda:	4b35      	ldr	r3, [pc, #212]	@ (8004db0 <HAL_RCC_OscConfig+0x8ac>)
 8004cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cde:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d031      	beq.n	8004d4c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	f003 0203 	and.w	r2, r3, #3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d12a      	bne.n	8004d4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	091b      	lsrs	r3, r3, #4
 8004cfa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d122      	bne.n	8004d4c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d10:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d11a      	bne.n	8004d4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	0a5b      	lsrs	r3, r3, #9
 8004d1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d22:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d111      	bne.n	8004d4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	0c1b      	lsrs	r3, r3, #16
 8004d2c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d34:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d108      	bne.n	8004d4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	0e1b      	lsrs	r3, r3, #24
 8004d3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d46:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d001      	beq.n	8004d50 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e02b      	b.n	8004da8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004d50:	4b17      	ldr	r3, [pc, #92]	@ (8004db0 <HAL_RCC_OscConfig+0x8ac>)
 8004d52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d54:	08db      	lsrs	r3, r3, #3
 8004d56:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d5a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d01f      	beq.n	8004da6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004d66:	4b12      	ldr	r3, [pc, #72]	@ (8004db0 <HAL_RCC_OscConfig+0x8ac>)
 8004d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d6a:	4a11      	ldr	r2, [pc, #68]	@ (8004db0 <HAL_RCC_OscConfig+0x8ac>)
 8004d6c:	f023 0301 	bic.w	r3, r3, #1
 8004d70:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d72:	f7fc fd8f 	bl	8001894 <HAL_GetTick>
 8004d76:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004d78:	bf00      	nop
 8004d7a:	f7fc fd8b 	bl	8001894 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d0f9      	beq.n	8004d7a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004d86:	4b0a      	ldr	r3, [pc, #40]	@ (8004db0 <HAL_RCC_OscConfig+0x8ac>)
 8004d88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8004db4 <HAL_RCC_OscConfig+0x8b0>)
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004d92:	00d2      	lsls	r2, r2, #3
 8004d94:	4906      	ldr	r1, [pc, #24]	@ (8004db0 <HAL_RCC_OscConfig+0x8ac>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004d9a:	4b05      	ldr	r3, [pc, #20]	@ (8004db0 <HAL_RCC_OscConfig+0x8ac>)
 8004d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d9e:	4a04      	ldr	r2, [pc, #16]	@ (8004db0 <HAL_RCC_OscConfig+0x8ac>)
 8004da0:	f043 0301 	orr.w	r3, r3, #1
 8004da4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3730      	adds	r7, #48	@ 0x30
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	58024400 	.word	0x58024400
 8004db4:	ffff0007 	.word	0xffff0007

08004db8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b086      	sub	sp, #24
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d101      	bne.n	8004dcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e19c      	b.n	8005106 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004dcc:	4b8a      	ldr	r3, [pc, #552]	@ (8004ff8 <HAL_RCC_ClockConfig+0x240>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 030f 	and.w	r3, r3, #15
 8004dd4:	683a      	ldr	r2, [r7, #0]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d910      	bls.n	8004dfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dda:	4b87      	ldr	r3, [pc, #540]	@ (8004ff8 <HAL_RCC_ClockConfig+0x240>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f023 020f 	bic.w	r2, r3, #15
 8004de2:	4985      	ldr	r1, [pc, #532]	@ (8004ff8 <HAL_RCC_ClockConfig+0x240>)
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dea:	4b83      	ldr	r3, [pc, #524]	@ (8004ff8 <HAL_RCC_ClockConfig+0x240>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 030f 	and.w	r3, r3, #15
 8004df2:	683a      	ldr	r2, [r7, #0]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d001      	beq.n	8004dfc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e184      	b.n	8005106 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0304 	and.w	r3, r3, #4
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d010      	beq.n	8004e2a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	691a      	ldr	r2, [r3, #16]
 8004e0c:	4b7b      	ldr	r3, [pc, #492]	@ (8004ffc <HAL_RCC_ClockConfig+0x244>)
 8004e0e:	699b      	ldr	r3, [r3, #24]
 8004e10:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d908      	bls.n	8004e2a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004e18:	4b78      	ldr	r3, [pc, #480]	@ (8004ffc <HAL_RCC_ClockConfig+0x244>)
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	4975      	ldr	r1, [pc, #468]	@ (8004ffc <HAL_RCC_ClockConfig+0x244>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0308 	and.w	r3, r3, #8
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d010      	beq.n	8004e58 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	695a      	ldr	r2, [r3, #20]
 8004e3a:	4b70      	ldr	r3, [pc, #448]	@ (8004ffc <HAL_RCC_ClockConfig+0x244>)
 8004e3c:	69db      	ldr	r3, [r3, #28]
 8004e3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d908      	bls.n	8004e58 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004e46:	4b6d      	ldr	r3, [pc, #436]	@ (8004ffc <HAL_RCC_ClockConfig+0x244>)
 8004e48:	69db      	ldr	r3, [r3, #28]
 8004e4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	496a      	ldr	r1, [pc, #424]	@ (8004ffc <HAL_RCC_ClockConfig+0x244>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0310 	and.w	r3, r3, #16
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d010      	beq.n	8004e86 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	699a      	ldr	r2, [r3, #24]
 8004e68:	4b64      	ldr	r3, [pc, #400]	@ (8004ffc <HAL_RCC_ClockConfig+0x244>)
 8004e6a:	69db      	ldr	r3, [r3, #28]
 8004e6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d908      	bls.n	8004e86 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004e74:	4b61      	ldr	r3, [pc, #388]	@ (8004ffc <HAL_RCC_ClockConfig+0x244>)
 8004e76:	69db      	ldr	r3, [r3, #28]
 8004e78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	495e      	ldr	r1, [pc, #376]	@ (8004ffc <HAL_RCC_ClockConfig+0x244>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0320 	and.w	r3, r3, #32
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d010      	beq.n	8004eb4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	69da      	ldr	r2, [r3, #28]
 8004e96:	4b59      	ldr	r3, [pc, #356]	@ (8004ffc <HAL_RCC_ClockConfig+0x244>)
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d908      	bls.n	8004eb4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004ea2:	4b56      	ldr	r3, [pc, #344]	@ (8004ffc <HAL_RCC_ClockConfig+0x244>)
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	69db      	ldr	r3, [r3, #28]
 8004eae:	4953      	ldr	r1, [pc, #332]	@ (8004ffc <HAL_RCC_ClockConfig+0x244>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0302 	and.w	r3, r3, #2
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d010      	beq.n	8004ee2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	68da      	ldr	r2, [r3, #12]
 8004ec4:	4b4d      	ldr	r3, [pc, #308]	@ (8004ffc <HAL_RCC_ClockConfig+0x244>)
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	f003 030f 	and.w	r3, r3, #15
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d908      	bls.n	8004ee2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ed0:	4b4a      	ldr	r3, [pc, #296]	@ (8004ffc <HAL_RCC_ClockConfig+0x244>)
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	f023 020f 	bic.w	r2, r3, #15
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	4947      	ldr	r1, [pc, #284]	@ (8004ffc <HAL_RCC_ClockConfig+0x244>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d055      	beq.n	8004f9a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004eee:	4b43      	ldr	r3, [pc, #268]	@ (8004ffc <HAL_RCC_ClockConfig+0x244>)
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	4940      	ldr	r1, [pc, #256]	@ (8004ffc <HAL_RCC_ClockConfig+0x244>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d107      	bne.n	8004f18 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f08:	4b3c      	ldr	r3, [pc, #240]	@ (8004ffc <HAL_RCC_ClockConfig+0x244>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d121      	bne.n	8004f58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e0f6      	b.n	8005106 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	2b03      	cmp	r3, #3
 8004f1e:	d107      	bne.n	8004f30 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f20:	4b36      	ldr	r3, [pc, #216]	@ (8004ffc <HAL_RCC_ClockConfig+0x244>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d115      	bne.n	8004f58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e0ea      	b.n	8005106 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d107      	bne.n	8004f48 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f38:	4b30      	ldr	r3, [pc, #192]	@ (8004ffc <HAL_RCC_ClockConfig+0x244>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d109      	bne.n	8004f58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e0de      	b.n	8005106 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f48:	4b2c      	ldr	r3, [pc, #176]	@ (8004ffc <HAL_RCC_ClockConfig+0x244>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0304 	and.w	r3, r3, #4
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d101      	bne.n	8004f58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e0d6      	b.n	8005106 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f58:	4b28      	ldr	r3, [pc, #160]	@ (8004ffc <HAL_RCC_ClockConfig+0x244>)
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	f023 0207 	bic.w	r2, r3, #7
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	4925      	ldr	r1, [pc, #148]	@ (8004ffc <HAL_RCC_ClockConfig+0x244>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f6a:	f7fc fc93 	bl	8001894 <HAL_GetTick>
 8004f6e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f70:	e00a      	b.n	8004f88 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f72:	f7fc fc8f 	bl	8001894 <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d901      	bls.n	8004f88 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e0be      	b.n	8005106 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f88:	4b1c      	ldr	r3, [pc, #112]	@ (8004ffc <HAL_RCC_ClockConfig+0x244>)
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	00db      	lsls	r3, r3, #3
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d1eb      	bne.n	8004f72 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d010      	beq.n	8004fc8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	68da      	ldr	r2, [r3, #12]
 8004faa:	4b14      	ldr	r3, [pc, #80]	@ (8004ffc <HAL_RCC_ClockConfig+0x244>)
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	f003 030f 	and.w	r3, r3, #15
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d208      	bcs.n	8004fc8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fb6:	4b11      	ldr	r3, [pc, #68]	@ (8004ffc <HAL_RCC_ClockConfig+0x244>)
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	f023 020f 	bic.w	r2, r3, #15
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	490e      	ldr	r1, [pc, #56]	@ (8004ffc <HAL_RCC_ClockConfig+0x244>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8004ff8 <HAL_RCC_ClockConfig+0x240>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 030f 	and.w	r3, r3, #15
 8004fd0:	683a      	ldr	r2, [r7, #0]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d214      	bcs.n	8005000 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fd6:	4b08      	ldr	r3, [pc, #32]	@ (8004ff8 <HAL_RCC_ClockConfig+0x240>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f023 020f 	bic.w	r2, r3, #15
 8004fde:	4906      	ldr	r1, [pc, #24]	@ (8004ff8 <HAL_RCC_ClockConfig+0x240>)
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fe6:	4b04      	ldr	r3, [pc, #16]	@ (8004ff8 <HAL_RCC_ClockConfig+0x240>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 030f 	and.w	r3, r3, #15
 8004fee:	683a      	ldr	r2, [r7, #0]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d005      	beq.n	8005000 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e086      	b.n	8005106 <HAL_RCC_ClockConfig+0x34e>
 8004ff8:	52002000 	.word	0x52002000
 8004ffc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0304 	and.w	r3, r3, #4
 8005008:	2b00      	cmp	r3, #0
 800500a:	d010      	beq.n	800502e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	691a      	ldr	r2, [r3, #16]
 8005010:	4b3f      	ldr	r3, [pc, #252]	@ (8005110 <HAL_RCC_ClockConfig+0x358>)
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005018:	429a      	cmp	r2, r3
 800501a:	d208      	bcs.n	800502e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800501c:	4b3c      	ldr	r3, [pc, #240]	@ (8005110 <HAL_RCC_ClockConfig+0x358>)
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	4939      	ldr	r1, [pc, #228]	@ (8005110 <HAL_RCC_ClockConfig+0x358>)
 800502a:	4313      	orrs	r3, r2
 800502c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0308 	and.w	r3, r3, #8
 8005036:	2b00      	cmp	r3, #0
 8005038:	d010      	beq.n	800505c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	695a      	ldr	r2, [r3, #20]
 800503e:	4b34      	ldr	r3, [pc, #208]	@ (8005110 <HAL_RCC_ClockConfig+0x358>)
 8005040:	69db      	ldr	r3, [r3, #28]
 8005042:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005046:	429a      	cmp	r2, r3
 8005048:	d208      	bcs.n	800505c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800504a:	4b31      	ldr	r3, [pc, #196]	@ (8005110 <HAL_RCC_ClockConfig+0x358>)
 800504c:	69db      	ldr	r3, [r3, #28]
 800504e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	492e      	ldr	r1, [pc, #184]	@ (8005110 <HAL_RCC_ClockConfig+0x358>)
 8005058:	4313      	orrs	r3, r2
 800505a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0310 	and.w	r3, r3, #16
 8005064:	2b00      	cmp	r3, #0
 8005066:	d010      	beq.n	800508a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	699a      	ldr	r2, [r3, #24]
 800506c:	4b28      	ldr	r3, [pc, #160]	@ (8005110 <HAL_RCC_ClockConfig+0x358>)
 800506e:	69db      	ldr	r3, [r3, #28]
 8005070:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005074:	429a      	cmp	r2, r3
 8005076:	d208      	bcs.n	800508a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005078:	4b25      	ldr	r3, [pc, #148]	@ (8005110 <HAL_RCC_ClockConfig+0x358>)
 800507a:	69db      	ldr	r3, [r3, #28]
 800507c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	4922      	ldr	r1, [pc, #136]	@ (8005110 <HAL_RCC_ClockConfig+0x358>)
 8005086:	4313      	orrs	r3, r2
 8005088:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0320 	and.w	r3, r3, #32
 8005092:	2b00      	cmp	r3, #0
 8005094:	d010      	beq.n	80050b8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	69da      	ldr	r2, [r3, #28]
 800509a:	4b1d      	ldr	r3, [pc, #116]	@ (8005110 <HAL_RCC_ClockConfig+0x358>)
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d208      	bcs.n	80050b8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80050a6:	4b1a      	ldr	r3, [pc, #104]	@ (8005110 <HAL_RCC_ClockConfig+0x358>)
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	69db      	ldr	r3, [r3, #28]
 80050b2:	4917      	ldr	r1, [pc, #92]	@ (8005110 <HAL_RCC_ClockConfig+0x358>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80050b8:	f000 f834 	bl	8005124 <HAL_RCC_GetSysClockFreq>
 80050bc:	4602      	mov	r2, r0
 80050be:	4b14      	ldr	r3, [pc, #80]	@ (8005110 <HAL_RCC_ClockConfig+0x358>)
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	0a1b      	lsrs	r3, r3, #8
 80050c4:	f003 030f 	and.w	r3, r3, #15
 80050c8:	4912      	ldr	r1, [pc, #72]	@ (8005114 <HAL_RCC_ClockConfig+0x35c>)
 80050ca:	5ccb      	ldrb	r3, [r1, r3]
 80050cc:	f003 031f 	and.w	r3, r3, #31
 80050d0:	fa22 f303 	lsr.w	r3, r2, r3
 80050d4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80050d6:	4b0e      	ldr	r3, [pc, #56]	@ (8005110 <HAL_RCC_ClockConfig+0x358>)
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	f003 030f 	and.w	r3, r3, #15
 80050de:	4a0d      	ldr	r2, [pc, #52]	@ (8005114 <HAL_RCC_ClockConfig+0x35c>)
 80050e0:	5cd3      	ldrb	r3, [r2, r3]
 80050e2:	f003 031f 	and.w	r3, r3, #31
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	fa22 f303 	lsr.w	r3, r2, r3
 80050ec:	4a0a      	ldr	r2, [pc, #40]	@ (8005118 <HAL_RCC_ClockConfig+0x360>)
 80050ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80050f0:	4a0a      	ldr	r2, [pc, #40]	@ (800511c <HAL_RCC_ClockConfig+0x364>)
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80050f6:	4b0a      	ldr	r3, [pc, #40]	@ (8005120 <HAL_RCC_ClockConfig+0x368>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7fc fb80 	bl	8001800 <HAL_InitTick>
 8005100:	4603      	mov	r3, r0
 8005102:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005104:	7bfb      	ldrb	r3, [r7, #15]
}
 8005106:	4618      	mov	r0, r3
 8005108:	3718      	adds	r7, #24
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	58024400 	.word	0x58024400
 8005114:	0800a844 	.word	0x0800a844
 8005118:	24000008 	.word	0x24000008
 800511c:	24000004 	.word	0x24000004
 8005120:	2400000c 	.word	0x2400000c

08005124 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005124:	b480      	push	{r7}
 8005126:	b089      	sub	sp, #36	@ 0x24
 8005128:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800512a:	4bb3      	ldr	r3, [pc, #716]	@ (80053f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005132:	2b18      	cmp	r3, #24
 8005134:	f200 8155 	bhi.w	80053e2 <HAL_RCC_GetSysClockFreq+0x2be>
 8005138:	a201      	add	r2, pc, #4	@ (adr r2, 8005140 <HAL_RCC_GetSysClockFreq+0x1c>)
 800513a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800513e:	bf00      	nop
 8005140:	080051a5 	.word	0x080051a5
 8005144:	080053e3 	.word	0x080053e3
 8005148:	080053e3 	.word	0x080053e3
 800514c:	080053e3 	.word	0x080053e3
 8005150:	080053e3 	.word	0x080053e3
 8005154:	080053e3 	.word	0x080053e3
 8005158:	080053e3 	.word	0x080053e3
 800515c:	080053e3 	.word	0x080053e3
 8005160:	080051cb 	.word	0x080051cb
 8005164:	080053e3 	.word	0x080053e3
 8005168:	080053e3 	.word	0x080053e3
 800516c:	080053e3 	.word	0x080053e3
 8005170:	080053e3 	.word	0x080053e3
 8005174:	080053e3 	.word	0x080053e3
 8005178:	080053e3 	.word	0x080053e3
 800517c:	080053e3 	.word	0x080053e3
 8005180:	080051d1 	.word	0x080051d1
 8005184:	080053e3 	.word	0x080053e3
 8005188:	080053e3 	.word	0x080053e3
 800518c:	080053e3 	.word	0x080053e3
 8005190:	080053e3 	.word	0x080053e3
 8005194:	080053e3 	.word	0x080053e3
 8005198:	080053e3 	.word	0x080053e3
 800519c:	080053e3 	.word	0x080053e3
 80051a0:	080051d7 	.word	0x080051d7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051a4:	4b94      	ldr	r3, [pc, #592]	@ (80053f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0320 	and.w	r3, r3, #32
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d009      	beq.n	80051c4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80051b0:	4b91      	ldr	r3, [pc, #580]	@ (80053f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	08db      	lsrs	r3, r3, #3
 80051b6:	f003 0303 	and.w	r3, r3, #3
 80051ba:	4a90      	ldr	r2, [pc, #576]	@ (80053fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80051bc:	fa22 f303 	lsr.w	r3, r2, r3
 80051c0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80051c2:	e111      	b.n	80053e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80051c4:	4b8d      	ldr	r3, [pc, #564]	@ (80053fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80051c6:	61bb      	str	r3, [r7, #24]
      break;
 80051c8:	e10e      	b.n	80053e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80051ca:	4b8d      	ldr	r3, [pc, #564]	@ (8005400 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80051cc:	61bb      	str	r3, [r7, #24]
      break;
 80051ce:	e10b      	b.n	80053e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80051d0:	4b8c      	ldr	r3, [pc, #560]	@ (8005404 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80051d2:	61bb      	str	r3, [r7, #24]
      break;
 80051d4:	e108      	b.n	80053e8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80051d6:	4b88      	ldr	r3, [pc, #544]	@ (80053f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051da:	f003 0303 	and.w	r3, r3, #3
 80051de:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80051e0:	4b85      	ldr	r3, [pc, #532]	@ (80053f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051e4:	091b      	lsrs	r3, r3, #4
 80051e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051ea:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80051ec:	4b82      	ldr	r3, [pc, #520]	@ (80053f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f0:	f003 0301 	and.w	r3, r3, #1
 80051f4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80051f6:	4b80      	ldr	r3, [pc, #512]	@ (80053f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051fa:	08db      	lsrs	r3, r3, #3
 80051fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	fb02 f303 	mul.w	r3, r2, r3
 8005206:	ee07 3a90 	vmov	s15, r3
 800520a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800520e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	2b00      	cmp	r3, #0
 8005216:	f000 80e1 	beq.w	80053dc <HAL_RCC_GetSysClockFreq+0x2b8>
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	2b02      	cmp	r3, #2
 800521e:	f000 8083 	beq.w	8005328 <HAL_RCC_GetSysClockFreq+0x204>
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	2b02      	cmp	r3, #2
 8005226:	f200 80a1 	bhi.w	800536c <HAL_RCC_GetSysClockFreq+0x248>
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d003      	beq.n	8005238 <HAL_RCC_GetSysClockFreq+0x114>
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d056      	beq.n	80052e4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005236:	e099      	b.n	800536c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005238:	4b6f      	ldr	r3, [pc, #444]	@ (80053f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0320 	and.w	r3, r3, #32
 8005240:	2b00      	cmp	r3, #0
 8005242:	d02d      	beq.n	80052a0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005244:	4b6c      	ldr	r3, [pc, #432]	@ (80053f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	08db      	lsrs	r3, r3, #3
 800524a:	f003 0303 	and.w	r3, r3, #3
 800524e:	4a6b      	ldr	r2, [pc, #428]	@ (80053fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005250:	fa22 f303 	lsr.w	r3, r2, r3
 8005254:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	ee07 3a90 	vmov	s15, r3
 800525c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	ee07 3a90 	vmov	s15, r3
 8005266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800526a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800526e:	4b62      	ldr	r3, [pc, #392]	@ (80053f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005276:	ee07 3a90 	vmov	s15, r3
 800527a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800527e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005282:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005408 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800528a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800528e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800529a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800529e:	e087      	b.n	80053b0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	ee07 3a90 	vmov	s15, r3
 80052a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052aa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800540c <HAL_RCC_GetSysClockFreq+0x2e8>
 80052ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052b2:	4b51      	ldr	r3, [pc, #324]	@ (80053f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ba:	ee07 3a90 	vmov	s15, r3
 80052be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80052c6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005408 <HAL_RCC_GetSysClockFreq+0x2e4>
 80052ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80052e2:	e065      	b.n	80053b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	ee07 3a90 	vmov	s15, r3
 80052ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ee:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005410 <HAL_RCC_GetSysClockFreq+0x2ec>
 80052f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052f6:	4b40      	ldr	r3, [pc, #256]	@ (80053f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052fe:	ee07 3a90 	vmov	s15, r3
 8005302:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005306:	ed97 6a02 	vldr	s12, [r7, #8]
 800530a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005408 <HAL_RCC_GetSysClockFreq+0x2e4>
 800530e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005312:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005316:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800531a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800531e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005322:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005326:	e043      	b.n	80053b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	ee07 3a90 	vmov	s15, r3
 800532e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005332:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005414 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800533a:	4b2f      	ldr	r3, [pc, #188]	@ (80053f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800533c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800533e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005342:	ee07 3a90 	vmov	s15, r3
 8005346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800534a:	ed97 6a02 	vldr	s12, [r7, #8]
 800534e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005408 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800535a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800535e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005366:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800536a:	e021      	b.n	80053b0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	ee07 3a90 	vmov	s15, r3
 8005372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005376:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005410 <HAL_RCC_GetSysClockFreq+0x2ec>
 800537a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800537e:	4b1e      	ldr	r3, [pc, #120]	@ (80053f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005386:	ee07 3a90 	vmov	s15, r3
 800538a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800538e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005392:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005408 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800539a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800539e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80053ae:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80053b0:	4b11      	ldr	r3, [pc, #68]	@ (80053f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b4:	0a5b      	lsrs	r3, r3, #9
 80053b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053ba:	3301      	adds	r3, #1
 80053bc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	ee07 3a90 	vmov	s15, r3
 80053c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80053c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80053cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053d4:	ee17 3a90 	vmov	r3, s15
 80053d8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80053da:	e005      	b.n	80053e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80053dc:	2300      	movs	r3, #0
 80053de:	61bb      	str	r3, [r7, #24]
      break;
 80053e0:	e002      	b.n	80053e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80053e2:	4b07      	ldr	r3, [pc, #28]	@ (8005400 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80053e4:	61bb      	str	r3, [r7, #24]
      break;
 80053e6:	bf00      	nop
  }

  return sysclockfreq;
 80053e8:	69bb      	ldr	r3, [r7, #24]
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3724      	adds	r7, #36	@ 0x24
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	58024400 	.word	0x58024400
 80053fc:	03d09000 	.word	0x03d09000
 8005400:	003d0900 	.word	0x003d0900
 8005404:	007a1200 	.word	0x007a1200
 8005408:	46000000 	.word	0x46000000
 800540c:	4c742400 	.word	0x4c742400
 8005410:	4a742400 	.word	0x4a742400
 8005414:	4af42400 	.word	0x4af42400

08005418 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800541e:	f7ff fe81 	bl	8005124 <HAL_RCC_GetSysClockFreq>
 8005422:	4602      	mov	r2, r0
 8005424:	4b10      	ldr	r3, [pc, #64]	@ (8005468 <HAL_RCC_GetHCLKFreq+0x50>)
 8005426:	699b      	ldr	r3, [r3, #24]
 8005428:	0a1b      	lsrs	r3, r3, #8
 800542a:	f003 030f 	and.w	r3, r3, #15
 800542e:	490f      	ldr	r1, [pc, #60]	@ (800546c <HAL_RCC_GetHCLKFreq+0x54>)
 8005430:	5ccb      	ldrb	r3, [r1, r3]
 8005432:	f003 031f 	and.w	r3, r3, #31
 8005436:	fa22 f303 	lsr.w	r3, r2, r3
 800543a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800543c:	4b0a      	ldr	r3, [pc, #40]	@ (8005468 <HAL_RCC_GetHCLKFreq+0x50>)
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	f003 030f 	and.w	r3, r3, #15
 8005444:	4a09      	ldr	r2, [pc, #36]	@ (800546c <HAL_RCC_GetHCLKFreq+0x54>)
 8005446:	5cd3      	ldrb	r3, [r2, r3]
 8005448:	f003 031f 	and.w	r3, r3, #31
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	fa22 f303 	lsr.w	r3, r2, r3
 8005452:	4a07      	ldr	r2, [pc, #28]	@ (8005470 <HAL_RCC_GetHCLKFreq+0x58>)
 8005454:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005456:	4a07      	ldr	r2, [pc, #28]	@ (8005474 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800545c:	4b04      	ldr	r3, [pc, #16]	@ (8005470 <HAL_RCC_GetHCLKFreq+0x58>)
 800545e:	681b      	ldr	r3, [r3, #0]
}
 8005460:	4618      	mov	r0, r3
 8005462:	3708      	adds	r7, #8
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}
 8005468:	58024400 	.word	0x58024400
 800546c:	0800a844 	.word	0x0800a844
 8005470:	24000008 	.word	0x24000008
 8005474:	24000004 	.word	0x24000004

08005478 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800547c:	f7ff ffcc 	bl	8005418 <HAL_RCC_GetHCLKFreq>
 8005480:	4602      	mov	r2, r0
 8005482:	4b06      	ldr	r3, [pc, #24]	@ (800549c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005484:	69db      	ldr	r3, [r3, #28]
 8005486:	091b      	lsrs	r3, r3, #4
 8005488:	f003 0307 	and.w	r3, r3, #7
 800548c:	4904      	ldr	r1, [pc, #16]	@ (80054a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800548e:	5ccb      	ldrb	r3, [r1, r3]
 8005490:	f003 031f 	and.w	r3, r3, #31
 8005494:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005498:	4618      	mov	r0, r3
 800549a:	bd80      	pop	{r7, pc}
 800549c:	58024400 	.word	0x58024400
 80054a0:	0800a844 	.word	0x0800a844

080054a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80054a8:	f7ff ffb6 	bl	8005418 <HAL_RCC_GetHCLKFreq>
 80054ac:	4602      	mov	r2, r0
 80054ae:	4b06      	ldr	r3, [pc, #24]	@ (80054c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054b0:	69db      	ldr	r3, [r3, #28]
 80054b2:	0a1b      	lsrs	r3, r3, #8
 80054b4:	f003 0307 	and.w	r3, r3, #7
 80054b8:	4904      	ldr	r1, [pc, #16]	@ (80054cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80054ba:	5ccb      	ldrb	r3, [r1, r3]
 80054bc:	f003 031f 	and.w	r3, r3, #31
 80054c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	58024400 	.word	0x58024400
 80054cc:	0800a844 	.word	0x0800a844

080054d0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054d4:	b0ca      	sub	sp, #296	@ 0x128
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80054dc:	2300      	movs	r3, #0
 80054de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80054e2:	2300      	movs	r3, #0
 80054e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80054e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80054f4:	2500      	movs	r5, #0
 80054f6:	ea54 0305 	orrs.w	r3, r4, r5
 80054fa:	d049      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80054fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005500:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005502:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005506:	d02f      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005508:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800550c:	d828      	bhi.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800550e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005512:	d01a      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005514:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005518:	d822      	bhi.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800551a:	2b00      	cmp	r3, #0
 800551c:	d003      	beq.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800551e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005522:	d007      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005524:	e01c      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005526:	4bb8      	ldr	r3, [pc, #736]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800552a:	4ab7      	ldr	r2, [pc, #732]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800552c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005530:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005532:	e01a      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005538:	3308      	adds	r3, #8
 800553a:	2102      	movs	r1, #2
 800553c:	4618      	mov	r0, r3
 800553e:	f002 fb61 	bl	8007c04 <RCCEx_PLL2_Config>
 8005542:	4603      	mov	r3, r0
 8005544:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005548:	e00f      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800554a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800554e:	3328      	adds	r3, #40	@ 0x28
 8005550:	2102      	movs	r1, #2
 8005552:	4618      	mov	r0, r3
 8005554:	f002 fc08 	bl	8007d68 <RCCEx_PLL3_Config>
 8005558:	4603      	mov	r3, r0
 800555a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800555e:	e004      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005566:	e000      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005568:	bf00      	nop
    }

    if (ret == HAL_OK)
 800556a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800556e:	2b00      	cmp	r3, #0
 8005570:	d10a      	bne.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005572:	4ba5      	ldr	r3, [pc, #660]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005574:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005576:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800557a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800557e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005580:	4aa1      	ldr	r2, [pc, #644]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005582:	430b      	orrs	r3, r1
 8005584:	6513      	str	r3, [r2, #80]	@ 0x50
 8005586:	e003      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005588:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800558c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005590:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005598:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800559c:	f04f 0900 	mov.w	r9, #0
 80055a0:	ea58 0309 	orrs.w	r3, r8, r9
 80055a4:	d047      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80055a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055ac:	2b04      	cmp	r3, #4
 80055ae:	d82a      	bhi.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80055b0:	a201      	add	r2, pc, #4	@ (adr r2, 80055b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80055b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b6:	bf00      	nop
 80055b8:	080055cd 	.word	0x080055cd
 80055bc:	080055db 	.word	0x080055db
 80055c0:	080055f1 	.word	0x080055f1
 80055c4:	0800560f 	.word	0x0800560f
 80055c8:	0800560f 	.word	0x0800560f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055cc:	4b8e      	ldr	r3, [pc, #568]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055d0:	4a8d      	ldr	r2, [pc, #564]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80055d8:	e01a      	b.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055de:	3308      	adds	r3, #8
 80055e0:	2100      	movs	r1, #0
 80055e2:	4618      	mov	r0, r3
 80055e4:	f002 fb0e 	bl	8007c04 <RCCEx_PLL2_Config>
 80055e8:	4603      	mov	r3, r0
 80055ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80055ee:	e00f      	b.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80055f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055f4:	3328      	adds	r3, #40	@ 0x28
 80055f6:	2100      	movs	r1, #0
 80055f8:	4618      	mov	r0, r3
 80055fa:	f002 fbb5 	bl	8007d68 <RCCEx_PLL3_Config>
 80055fe:	4603      	mov	r3, r0
 8005600:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005604:	e004      	b.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800560c:	e000      	b.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800560e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005610:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005614:	2b00      	cmp	r3, #0
 8005616:	d10a      	bne.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005618:	4b7b      	ldr	r3, [pc, #492]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800561a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800561c:	f023 0107 	bic.w	r1, r3, #7
 8005620:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005626:	4a78      	ldr	r2, [pc, #480]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005628:	430b      	orrs	r3, r1
 800562a:	6513      	str	r3, [r2, #80]	@ 0x50
 800562c:	e003      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800562e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005632:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005636:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800563a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005642:	f04f 0b00 	mov.w	fp, #0
 8005646:	ea5a 030b 	orrs.w	r3, sl, fp
 800564a:	d04c      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800564c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005650:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005652:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005656:	d030      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005658:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800565c:	d829      	bhi.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800565e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005660:	d02d      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005662:	2bc0      	cmp	r3, #192	@ 0xc0
 8005664:	d825      	bhi.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005666:	2b80      	cmp	r3, #128	@ 0x80
 8005668:	d018      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800566a:	2b80      	cmp	r3, #128	@ 0x80
 800566c:	d821      	bhi.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800566e:	2b00      	cmp	r3, #0
 8005670:	d002      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005672:	2b40      	cmp	r3, #64	@ 0x40
 8005674:	d007      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005676:	e01c      	b.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005678:	4b63      	ldr	r3, [pc, #396]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800567a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800567c:	4a62      	ldr	r2, [pc, #392]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800567e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005682:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005684:	e01c      	b.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800568a:	3308      	adds	r3, #8
 800568c:	2100      	movs	r1, #0
 800568e:	4618      	mov	r0, r3
 8005690:	f002 fab8 	bl	8007c04 <RCCEx_PLL2_Config>
 8005694:	4603      	mov	r3, r0
 8005696:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800569a:	e011      	b.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800569c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056a0:	3328      	adds	r3, #40	@ 0x28
 80056a2:	2100      	movs	r1, #0
 80056a4:	4618      	mov	r0, r3
 80056a6:	f002 fb5f 	bl	8007d68 <RCCEx_PLL3_Config>
 80056aa:	4603      	mov	r3, r0
 80056ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80056b0:	e006      	b.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80056b8:	e002      	b.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80056ba:	bf00      	nop
 80056bc:	e000      	b.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80056be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d10a      	bne.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80056c8:	4b4f      	ldr	r3, [pc, #316]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056cc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80056d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056d6:	4a4c      	ldr	r2, [pc, #304]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056d8:	430b      	orrs	r3, r1
 80056da:	6513      	str	r3, [r2, #80]	@ 0x50
 80056dc:	e003      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80056e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ee:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80056f2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80056f6:	2300      	movs	r3, #0
 80056f8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80056fc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005700:	460b      	mov	r3, r1
 8005702:	4313      	orrs	r3, r2
 8005704:	d053      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800570a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800570e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005712:	d035      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005714:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005718:	d82e      	bhi.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800571a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800571e:	d031      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005720:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005724:	d828      	bhi.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005726:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800572a:	d01a      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800572c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005730:	d822      	bhi.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005732:	2b00      	cmp	r3, #0
 8005734:	d003      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005736:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800573a:	d007      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800573c:	e01c      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800573e:	4b32      	ldr	r3, [pc, #200]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005742:	4a31      	ldr	r2, [pc, #196]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005744:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005748:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800574a:	e01c      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800574c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005750:	3308      	adds	r3, #8
 8005752:	2100      	movs	r1, #0
 8005754:	4618      	mov	r0, r3
 8005756:	f002 fa55 	bl	8007c04 <RCCEx_PLL2_Config>
 800575a:	4603      	mov	r3, r0
 800575c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005760:	e011      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005766:	3328      	adds	r3, #40	@ 0x28
 8005768:	2100      	movs	r1, #0
 800576a:	4618      	mov	r0, r3
 800576c:	f002 fafc 	bl	8007d68 <RCCEx_PLL3_Config>
 8005770:	4603      	mov	r3, r0
 8005772:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005776:	e006      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800577e:	e002      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005780:	bf00      	nop
 8005782:	e000      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005784:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005786:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10b      	bne.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800578e:	4b1e      	ldr	r3, [pc, #120]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005792:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800579a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800579e:	4a1a      	ldr	r2, [pc, #104]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057a0:	430b      	orrs	r3, r1
 80057a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80057a4:	e003      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80057ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80057ba:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80057be:	2300      	movs	r3, #0
 80057c0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80057c4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80057c8:	460b      	mov	r3, r1
 80057ca:	4313      	orrs	r3, r2
 80057cc:	d056      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80057ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80057d6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80057da:	d038      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80057dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80057e0:	d831      	bhi.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80057e2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80057e6:	d034      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80057e8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80057ec:	d82b      	bhi.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80057ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80057f2:	d01d      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80057f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80057f8:	d825      	bhi.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d006      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80057fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005802:	d00a      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005804:	e01f      	b.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005806:	bf00      	nop
 8005808:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800580c:	4ba2      	ldr	r3, [pc, #648]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800580e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005810:	4aa1      	ldr	r2, [pc, #644]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005812:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005816:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005818:	e01c      	b.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800581a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800581e:	3308      	adds	r3, #8
 8005820:	2100      	movs	r1, #0
 8005822:	4618      	mov	r0, r3
 8005824:	f002 f9ee 	bl	8007c04 <RCCEx_PLL2_Config>
 8005828:	4603      	mov	r3, r0
 800582a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800582e:	e011      	b.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005834:	3328      	adds	r3, #40	@ 0x28
 8005836:	2100      	movs	r1, #0
 8005838:	4618      	mov	r0, r3
 800583a:	f002 fa95 	bl	8007d68 <RCCEx_PLL3_Config>
 800583e:	4603      	mov	r3, r0
 8005840:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005844:	e006      	b.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800584c:	e002      	b.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800584e:	bf00      	nop
 8005850:	e000      	b.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005852:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005854:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005858:	2b00      	cmp	r3, #0
 800585a:	d10b      	bne.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800585c:	4b8e      	ldr	r3, [pc, #568]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800585e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005860:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005864:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005868:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800586c:	4a8a      	ldr	r2, [pc, #552]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800586e:	430b      	orrs	r3, r1
 8005870:	6593      	str	r3, [r2, #88]	@ 0x58
 8005872:	e003      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005874:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005878:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800587c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005884:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005888:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800588c:	2300      	movs	r3, #0
 800588e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005892:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005896:	460b      	mov	r3, r1
 8005898:	4313      	orrs	r3, r2
 800589a:	d03a      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800589c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058a2:	2b30      	cmp	r3, #48	@ 0x30
 80058a4:	d01f      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80058a6:	2b30      	cmp	r3, #48	@ 0x30
 80058a8:	d819      	bhi.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80058aa:	2b20      	cmp	r3, #32
 80058ac:	d00c      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80058ae:	2b20      	cmp	r3, #32
 80058b0:	d815      	bhi.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d019      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80058b6:	2b10      	cmp	r3, #16
 80058b8:	d111      	bne.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058ba:	4b77      	ldr	r3, [pc, #476]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058be:	4a76      	ldr	r2, [pc, #472]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80058c6:	e011      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80058c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058cc:	3308      	adds	r3, #8
 80058ce:	2102      	movs	r1, #2
 80058d0:	4618      	mov	r0, r3
 80058d2:	f002 f997 	bl	8007c04 <RCCEx_PLL2_Config>
 80058d6:	4603      	mov	r3, r0
 80058d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80058dc:	e006      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058e4:	e002      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80058e6:	bf00      	nop
 80058e8:	e000      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80058ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d10a      	bne.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80058f4:	4b68      	ldr	r3, [pc, #416]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058f8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80058fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005902:	4a65      	ldr	r2, [pc, #404]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005904:	430b      	orrs	r3, r1
 8005906:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005908:	e003      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800590a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800590e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800591e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005922:	2300      	movs	r3, #0
 8005924:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005928:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800592c:	460b      	mov	r3, r1
 800592e:	4313      	orrs	r3, r2
 8005930:	d051      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005936:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005938:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800593c:	d035      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800593e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005942:	d82e      	bhi.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005944:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005948:	d031      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800594a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800594e:	d828      	bhi.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005950:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005954:	d01a      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005956:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800595a:	d822      	bhi.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800595c:	2b00      	cmp	r3, #0
 800595e:	d003      	beq.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005960:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005964:	d007      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005966:	e01c      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005968:	4b4b      	ldr	r3, [pc, #300]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800596a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800596c:	4a4a      	ldr	r2, [pc, #296]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800596e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005972:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005974:	e01c      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800597a:	3308      	adds	r3, #8
 800597c:	2100      	movs	r1, #0
 800597e:	4618      	mov	r0, r3
 8005980:	f002 f940 	bl	8007c04 <RCCEx_PLL2_Config>
 8005984:	4603      	mov	r3, r0
 8005986:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800598a:	e011      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800598c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005990:	3328      	adds	r3, #40	@ 0x28
 8005992:	2100      	movs	r1, #0
 8005994:	4618      	mov	r0, r3
 8005996:	f002 f9e7 	bl	8007d68 <RCCEx_PLL3_Config>
 800599a:	4603      	mov	r3, r0
 800599c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80059a0:	e006      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059a8:	e002      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80059aa:	bf00      	nop
 80059ac:	e000      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80059ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d10a      	bne.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80059b8:	4b37      	ldr	r3, [pc, #220]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059bc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80059c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059c6:	4a34      	ldr	r2, [pc, #208]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059c8:	430b      	orrs	r3, r1
 80059ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80059cc:	e003      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80059d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059de:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80059e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80059e6:	2300      	movs	r3, #0
 80059e8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80059ec:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80059f0:	460b      	mov	r3, r1
 80059f2:	4313      	orrs	r3, r2
 80059f4:	d056      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80059f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a00:	d033      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005a02:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a06:	d82c      	bhi.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005a08:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005a0c:	d02f      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005a0e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005a12:	d826      	bhi.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005a14:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005a18:	d02b      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005a1a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005a1e:	d820      	bhi.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005a20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a24:	d012      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005a26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a2a:	d81a      	bhi.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d022      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005a30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a34:	d115      	bne.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a3a:	3308      	adds	r3, #8
 8005a3c:	2101      	movs	r1, #1
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f002 f8e0 	bl	8007c04 <RCCEx_PLL2_Config>
 8005a44:	4603      	mov	r3, r0
 8005a46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005a4a:	e015      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a50:	3328      	adds	r3, #40	@ 0x28
 8005a52:	2101      	movs	r1, #1
 8005a54:	4618      	mov	r0, r3
 8005a56:	f002 f987 	bl	8007d68 <RCCEx_PLL3_Config>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005a60:	e00a      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a68:	e006      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005a6a:	bf00      	nop
 8005a6c:	e004      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005a6e:	bf00      	nop
 8005a70:	e002      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005a72:	bf00      	nop
 8005a74:	e000      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005a76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d10d      	bne.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005a80:	4b05      	ldr	r3, [pc, #20]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a84:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a8e:	4a02      	ldr	r2, [pc, #8]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a90:	430b      	orrs	r3, r1
 8005a92:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a94:	e006      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005a96:	bf00      	nop
 8005a98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005aa0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aac:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005ab0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005aba:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005abe:	460b      	mov	r3, r1
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	d055      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ac8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005acc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ad0:	d033      	beq.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005ad2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ad6:	d82c      	bhi.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005adc:	d02f      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005ade:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ae2:	d826      	bhi.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005ae4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005ae8:	d02b      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005aea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005aee:	d820      	bhi.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005af0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005af4:	d012      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005af6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005afa:	d81a      	bhi.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d022      	beq.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005b00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b04:	d115      	bne.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b0a:	3308      	adds	r3, #8
 8005b0c:	2101      	movs	r1, #1
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f002 f878 	bl	8007c04 <RCCEx_PLL2_Config>
 8005b14:	4603      	mov	r3, r0
 8005b16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005b1a:	e015      	b.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b20:	3328      	adds	r3, #40	@ 0x28
 8005b22:	2101      	movs	r1, #1
 8005b24:	4618      	mov	r0, r3
 8005b26:	f002 f91f 	bl	8007d68 <RCCEx_PLL3_Config>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005b30:	e00a      	b.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b38:	e006      	b.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005b3a:	bf00      	nop
 8005b3c:	e004      	b.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005b3e:	bf00      	nop
 8005b40:	e002      	b.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005b42:	bf00      	nop
 8005b44:	e000      	b.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005b46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10b      	bne.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005b50:	4ba3      	ldr	r3, [pc, #652]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b54:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005b60:	4a9f      	ldr	r2, [pc, #636]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b62:	430b      	orrs	r3, r1
 8005b64:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b66:	e003      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b78:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005b7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005b80:	2300      	movs	r3, #0
 8005b82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005b86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	d037      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b9a:	d00e      	beq.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005b9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ba0:	d816      	bhi.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d018      	beq.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005ba6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005baa:	d111      	bne.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bac:	4b8c      	ldr	r3, [pc, #560]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bb0:	4a8b      	ldr	r2, [pc, #556]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005bb8:	e00f      	b.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bbe:	3308      	adds	r3, #8
 8005bc0:	2101      	movs	r1, #1
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f002 f81e 	bl	8007c04 <RCCEx_PLL2_Config>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005bce:	e004      	b.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005bd6:	e000      	b.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005bd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d10a      	bne.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005be2:	4b7f      	ldr	r3, [pc, #508]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005be4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005be6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bf0:	4a7b      	ldr	r2, [pc, #492]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bf2:	430b      	orrs	r3, r1
 8005bf4:	6513      	str	r3, [r2, #80]	@ 0x50
 8005bf6:	e003      	b.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bf8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bfc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c08:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005c0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c10:	2300      	movs	r3, #0
 8005c12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005c16:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	d039      	beq.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c26:	2b03      	cmp	r3, #3
 8005c28:	d81c      	bhi.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005c2a:	a201      	add	r2, pc, #4	@ (adr r2, 8005c30 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c30:	08005c6d 	.word	0x08005c6d
 8005c34:	08005c41 	.word	0x08005c41
 8005c38:	08005c4f 	.word	0x08005c4f
 8005c3c:	08005c6d 	.word	0x08005c6d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c40:	4b67      	ldr	r3, [pc, #412]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c44:	4a66      	ldr	r2, [pc, #408]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005c4c:	e00f      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c52:	3308      	adds	r3, #8
 8005c54:	2102      	movs	r1, #2
 8005c56:	4618      	mov	r0, r3
 8005c58:	f001 ffd4 	bl	8007c04 <RCCEx_PLL2_Config>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005c62:	e004      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c6a:	e000      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005c6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d10a      	bne.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005c76:	4b5a      	ldr	r3, [pc, #360]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c7a:	f023 0103 	bic.w	r1, r3, #3
 8005c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c84:	4a56      	ldr	r2, [pc, #344]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c86:	430b      	orrs	r3, r1
 8005c88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005c8a:	e003      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c9c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005ca0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005caa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005cae:	460b      	mov	r3, r1
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	f000 809f 	beq.w	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005cb6:	4b4b      	ldr	r3, [pc, #300]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a4a      	ldr	r2, [pc, #296]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005cbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cc0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005cc2:	f7fb fde7 	bl	8001894 <HAL_GetTick>
 8005cc6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005cca:	e00b      	b.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ccc:	f7fb fde2 	bl	8001894 <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	2b64      	cmp	r3, #100	@ 0x64
 8005cda:	d903      	bls.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ce2:	e005      	b.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ce4:	4b3f      	ldr	r3, [pc, #252]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d0ed      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005cf0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d179      	bne.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005cf8:	4b39      	ldr	r3, [pc, #228]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cfa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d00:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d04:	4053      	eors	r3, r2
 8005d06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d015      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d0e:	4b34      	ldr	r3, [pc, #208]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d16:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d1a:	4b31      	ldr	r3, [pc, #196]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d1e:	4a30      	ldr	r2, [pc, #192]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d24:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d26:	4b2e      	ldr	r3, [pc, #184]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d2a:	4a2d      	ldr	r2, [pc, #180]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d30:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005d32:	4a2b      	ldr	r2, [pc, #172]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d34:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d38:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d46:	d118      	bne.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d48:	f7fb fda4 	bl	8001894 <HAL_GetTick>
 8005d4c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d50:	e00d      	b.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d52:	f7fb fd9f 	bl	8001894 <HAL_GetTick>
 8005d56:	4602      	mov	r2, r0
 8005d58:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005d5c:	1ad2      	subs	r2, r2, r3
 8005d5e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d903      	bls.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005d6c:	e005      	b.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d6e:	4b1c      	ldr	r3, [pc, #112]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d72:	f003 0302 	and.w	r3, r3, #2
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d0eb      	beq.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005d7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d129      	bne.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d86:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d92:	d10e      	bne.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005d94:	4b12      	ldr	r3, [pc, #72]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005da0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005da4:	091a      	lsrs	r2, r3, #4
 8005da6:	4b10      	ldr	r3, [pc, #64]	@ (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005da8:	4013      	ands	r3, r2
 8005daa:	4a0d      	ldr	r2, [pc, #52]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dac:	430b      	orrs	r3, r1
 8005dae:	6113      	str	r3, [r2, #16]
 8005db0:	e005      	b.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005db2:	4b0b      	ldr	r3, [pc, #44]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	4a0a      	ldr	r2, [pc, #40]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005db8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005dbc:	6113      	str	r3, [r2, #16]
 8005dbe:	4b08      	ldr	r3, [pc, #32]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dc0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dc6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005dca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dce:	4a04      	ldr	r2, [pc, #16]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dd0:	430b      	orrs	r3, r1
 8005dd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005dd4:	e00e      	b.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005dd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005dde:	e009      	b.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005de0:	58024400 	.word	0x58024400
 8005de4:	58024800 	.word	0x58024800
 8005de8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005df0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dfc:	f002 0301 	and.w	r3, r2, #1
 8005e00:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005e04:	2300      	movs	r3, #0
 8005e06:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005e0a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005e0e:	460b      	mov	r3, r1
 8005e10:	4313      	orrs	r3, r2
 8005e12:	f000 8089 	beq.w	8005f28 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e1c:	2b28      	cmp	r3, #40	@ 0x28
 8005e1e:	d86b      	bhi.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005e20:	a201      	add	r2, pc, #4	@ (adr r2, 8005e28 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e26:	bf00      	nop
 8005e28:	08005f01 	.word	0x08005f01
 8005e2c:	08005ef9 	.word	0x08005ef9
 8005e30:	08005ef9 	.word	0x08005ef9
 8005e34:	08005ef9 	.word	0x08005ef9
 8005e38:	08005ef9 	.word	0x08005ef9
 8005e3c:	08005ef9 	.word	0x08005ef9
 8005e40:	08005ef9 	.word	0x08005ef9
 8005e44:	08005ef9 	.word	0x08005ef9
 8005e48:	08005ecd 	.word	0x08005ecd
 8005e4c:	08005ef9 	.word	0x08005ef9
 8005e50:	08005ef9 	.word	0x08005ef9
 8005e54:	08005ef9 	.word	0x08005ef9
 8005e58:	08005ef9 	.word	0x08005ef9
 8005e5c:	08005ef9 	.word	0x08005ef9
 8005e60:	08005ef9 	.word	0x08005ef9
 8005e64:	08005ef9 	.word	0x08005ef9
 8005e68:	08005ee3 	.word	0x08005ee3
 8005e6c:	08005ef9 	.word	0x08005ef9
 8005e70:	08005ef9 	.word	0x08005ef9
 8005e74:	08005ef9 	.word	0x08005ef9
 8005e78:	08005ef9 	.word	0x08005ef9
 8005e7c:	08005ef9 	.word	0x08005ef9
 8005e80:	08005ef9 	.word	0x08005ef9
 8005e84:	08005ef9 	.word	0x08005ef9
 8005e88:	08005f01 	.word	0x08005f01
 8005e8c:	08005ef9 	.word	0x08005ef9
 8005e90:	08005ef9 	.word	0x08005ef9
 8005e94:	08005ef9 	.word	0x08005ef9
 8005e98:	08005ef9 	.word	0x08005ef9
 8005e9c:	08005ef9 	.word	0x08005ef9
 8005ea0:	08005ef9 	.word	0x08005ef9
 8005ea4:	08005ef9 	.word	0x08005ef9
 8005ea8:	08005f01 	.word	0x08005f01
 8005eac:	08005ef9 	.word	0x08005ef9
 8005eb0:	08005ef9 	.word	0x08005ef9
 8005eb4:	08005ef9 	.word	0x08005ef9
 8005eb8:	08005ef9 	.word	0x08005ef9
 8005ebc:	08005ef9 	.word	0x08005ef9
 8005ec0:	08005ef9 	.word	0x08005ef9
 8005ec4:	08005ef9 	.word	0x08005ef9
 8005ec8:	08005f01 	.word	0x08005f01
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ed0:	3308      	adds	r3, #8
 8005ed2:	2101      	movs	r1, #1
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f001 fe95 	bl	8007c04 <RCCEx_PLL2_Config>
 8005eda:	4603      	mov	r3, r0
 8005edc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005ee0:	e00f      	b.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ee6:	3328      	adds	r3, #40	@ 0x28
 8005ee8:	2101      	movs	r1, #1
 8005eea:	4618      	mov	r0, r3
 8005eec:	f001 ff3c 	bl	8007d68 <RCCEx_PLL3_Config>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005ef6:	e004      	b.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005efe:	e000      	b.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005f00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10a      	bne.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005f0a:	4bbf      	ldr	r3, [pc, #764]	@ (8006208 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f0e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f18:	4abb      	ldr	r2, [pc, #748]	@ (8006208 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f1a:	430b      	orrs	r3, r1
 8005f1c:	6553      	str	r3, [r2, #84]	@ 0x54
 8005f1e:	e003      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f30:	f002 0302 	and.w	r3, r2, #2
 8005f34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f38:	2300      	movs	r3, #0
 8005f3a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005f3e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005f42:	460b      	mov	r3, r1
 8005f44:	4313      	orrs	r3, r2
 8005f46:	d041      	beq.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005f4e:	2b05      	cmp	r3, #5
 8005f50:	d824      	bhi.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005f52:	a201      	add	r2, pc, #4	@ (adr r2, 8005f58 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f58:	08005fa5 	.word	0x08005fa5
 8005f5c:	08005f71 	.word	0x08005f71
 8005f60:	08005f87 	.word	0x08005f87
 8005f64:	08005fa5 	.word	0x08005fa5
 8005f68:	08005fa5 	.word	0x08005fa5
 8005f6c:	08005fa5 	.word	0x08005fa5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f74:	3308      	adds	r3, #8
 8005f76:	2101      	movs	r1, #1
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f001 fe43 	bl	8007c04 <RCCEx_PLL2_Config>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005f84:	e00f      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f8a:	3328      	adds	r3, #40	@ 0x28
 8005f8c:	2101      	movs	r1, #1
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f001 feea 	bl	8007d68 <RCCEx_PLL3_Config>
 8005f94:	4603      	mov	r3, r0
 8005f96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005f9a:	e004      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005fa2:	e000      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005fa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d10a      	bne.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005fae:	4b96      	ldr	r3, [pc, #600]	@ (8006208 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fb2:	f023 0107 	bic.w	r1, r3, #7
 8005fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005fbc:	4a92      	ldr	r2, [pc, #584]	@ (8006208 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005fbe:	430b      	orrs	r3, r1
 8005fc0:	6553      	str	r3, [r2, #84]	@ 0x54
 8005fc2:	e003      	b.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd4:	f002 0304 	and.w	r3, r2, #4
 8005fd8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005fdc:	2300      	movs	r3, #0
 8005fde:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005fe2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	d044      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ff4:	2b05      	cmp	r3, #5
 8005ff6:	d825      	bhi.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005ff8:	a201      	add	r2, pc, #4	@ (adr r2, 8006000 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ffe:	bf00      	nop
 8006000:	0800604d 	.word	0x0800604d
 8006004:	08006019 	.word	0x08006019
 8006008:	0800602f 	.word	0x0800602f
 800600c:	0800604d 	.word	0x0800604d
 8006010:	0800604d 	.word	0x0800604d
 8006014:	0800604d 	.word	0x0800604d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800601c:	3308      	adds	r3, #8
 800601e:	2101      	movs	r1, #1
 8006020:	4618      	mov	r0, r3
 8006022:	f001 fdef 	bl	8007c04 <RCCEx_PLL2_Config>
 8006026:	4603      	mov	r3, r0
 8006028:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800602c:	e00f      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800602e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006032:	3328      	adds	r3, #40	@ 0x28
 8006034:	2101      	movs	r1, #1
 8006036:	4618      	mov	r0, r3
 8006038:	f001 fe96 	bl	8007d68 <RCCEx_PLL3_Config>
 800603c:	4603      	mov	r3, r0
 800603e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006042:	e004      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800604a:	e000      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800604c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800604e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10b      	bne.n	800606e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006056:	4b6c      	ldr	r3, [pc, #432]	@ (8006208 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800605a:	f023 0107 	bic.w	r1, r3, #7
 800605e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006062:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006066:	4a68      	ldr	r2, [pc, #416]	@ (8006208 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006068:	430b      	orrs	r3, r1
 800606a:	6593      	str	r3, [r2, #88]	@ 0x58
 800606c:	e003      	b.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800606e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006072:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800607a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607e:	f002 0320 	and.w	r3, r2, #32
 8006082:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006086:	2300      	movs	r3, #0
 8006088:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800608c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006090:	460b      	mov	r3, r1
 8006092:	4313      	orrs	r3, r2
 8006094:	d055      	beq.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800609a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800609e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80060a2:	d033      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80060a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80060a8:	d82c      	bhi.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80060aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060ae:	d02f      	beq.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80060b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060b4:	d826      	bhi.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80060b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80060ba:	d02b      	beq.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80060bc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80060c0:	d820      	bhi.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80060c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060c6:	d012      	beq.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80060c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060cc:	d81a      	bhi.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d022      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80060d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060d6:	d115      	bne.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060dc:	3308      	adds	r3, #8
 80060de:	2100      	movs	r1, #0
 80060e0:	4618      	mov	r0, r3
 80060e2:	f001 fd8f 	bl	8007c04 <RCCEx_PLL2_Config>
 80060e6:	4603      	mov	r3, r0
 80060e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80060ec:	e015      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80060ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060f2:	3328      	adds	r3, #40	@ 0x28
 80060f4:	2102      	movs	r1, #2
 80060f6:	4618      	mov	r0, r3
 80060f8:	f001 fe36 	bl	8007d68 <RCCEx_PLL3_Config>
 80060fc:	4603      	mov	r3, r0
 80060fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006102:	e00a      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800610a:	e006      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800610c:	bf00      	nop
 800610e:	e004      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006110:	bf00      	nop
 8006112:	e002      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006114:	bf00      	nop
 8006116:	e000      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006118:	bf00      	nop
    }

    if (ret == HAL_OK)
 800611a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10b      	bne.n	800613a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006122:	4b39      	ldr	r3, [pc, #228]	@ (8006208 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006126:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800612a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800612e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006132:	4a35      	ldr	r2, [pc, #212]	@ (8006208 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006134:	430b      	orrs	r3, r1
 8006136:	6553      	str	r3, [r2, #84]	@ 0x54
 8006138:	e003      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800613a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800613e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800614e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006152:	2300      	movs	r3, #0
 8006154:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006158:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800615c:	460b      	mov	r3, r1
 800615e:	4313      	orrs	r3, r2
 8006160:	d058      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006166:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800616a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800616e:	d033      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006170:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006174:	d82c      	bhi.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006176:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800617a:	d02f      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800617c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006180:	d826      	bhi.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006182:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006186:	d02b      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006188:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800618c:	d820      	bhi.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800618e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006192:	d012      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006194:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006198:	d81a      	bhi.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800619a:	2b00      	cmp	r3, #0
 800619c:	d022      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800619e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061a2:	d115      	bne.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061a8:	3308      	adds	r3, #8
 80061aa:	2100      	movs	r1, #0
 80061ac:	4618      	mov	r0, r3
 80061ae:	f001 fd29 	bl	8007c04 <RCCEx_PLL2_Config>
 80061b2:	4603      	mov	r3, r0
 80061b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80061b8:	e015      	b.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80061ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061be:	3328      	adds	r3, #40	@ 0x28
 80061c0:	2102      	movs	r1, #2
 80061c2:	4618      	mov	r0, r3
 80061c4:	f001 fdd0 	bl	8007d68 <RCCEx_PLL3_Config>
 80061c8:	4603      	mov	r3, r0
 80061ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80061ce:	e00a      	b.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061d6:	e006      	b.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80061d8:	bf00      	nop
 80061da:	e004      	b.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80061dc:	bf00      	nop
 80061de:	e002      	b.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80061e0:	bf00      	nop
 80061e2:	e000      	b.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80061e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d10e      	bne.n	800620c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80061ee:	4b06      	ldr	r3, [pc, #24]	@ (8006208 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061f2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80061f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80061fe:	4a02      	ldr	r2, [pc, #8]	@ (8006208 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006200:	430b      	orrs	r3, r1
 8006202:	6593      	str	r3, [r2, #88]	@ 0x58
 8006204:	e006      	b.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006206:	bf00      	nop
 8006208:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800620c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006210:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006220:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006224:	2300      	movs	r3, #0
 8006226:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800622a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800622e:	460b      	mov	r3, r1
 8006230:	4313      	orrs	r3, r2
 8006232:	d055      	beq.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006234:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006238:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800623c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006240:	d033      	beq.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006242:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006246:	d82c      	bhi.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006248:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800624c:	d02f      	beq.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800624e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006252:	d826      	bhi.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006254:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006258:	d02b      	beq.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800625a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800625e:	d820      	bhi.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006260:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006264:	d012      	beq.n	800628c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006266:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800626a:	d81a      	bhi.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800626c:	2b00      	cmp	r3, #0
 800626e:	d022      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006270:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006274:	d115      	bne.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800627a:	3308      	adds	r3, #8
 800627c:	2100      	movs	r1, #0
 800627e:	4618      	mov	r0, r3
 8006280:	f001 fcc0 	bl	8007c04 <RCCEx_PLL2_Config>
 8006284:	4603      	mov	r3, r0
 8006286:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800628a:	e015      	b.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800628c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006290:	3328      	adds	r3, #40	@ 0x28
 8006292:	2102      	movs	r1, #2
 8006294:	4618      	mov	r0, r3
 8006296:	f001 fd67 	bl	8007d68 <RCCEx_PLL3_Config>
 800629a:	4603      	mov	r3, r0
 800629c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80062a0:	e00a      	b.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80062a8:	e006      	b.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80062aa:	bf00      	nop
 80062ac:	e004      	b.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80062ae:	bf00      	nop
 80062b0:	e002      	b.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80062b2:	bf00      	nop
 80062b4:	e000      	b.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80062b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d10b      	bne.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80062c0:	4ba1      	ldr	r3, [pc, #644]	@ (8006548 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062c4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80062c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80062d0:	4a9d      	ldr	r2, [pc, #628]	@ (8006548 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062d2:	430b      	orrs	r3, r1
 80062d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80062d6:	e003      	b.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80062e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e8:	f002 0308 	and.w	r3, r2, #8
 80062ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80062f0:	2300      	movs	r3, #0
 80062f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80062f6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80062fa:	460b      	mov	r3, r1
 80062fc:	4313      	orrs	r3, r2
 80062fe:	d01e      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006300:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006304:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006308:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800630c:	d10c      	bne.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800630e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006312:	3328      	adds	r3, #40	@ 0x28
 8006314:	2102      	movs	r1, #2
 8006316:	4618      	mov	r0, r3
 8006318:	f001 fd26 	bl	8007d68 <RCCEx_PLL3_Config>
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d002      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006328:	4b87      	ldr	r3, [pc, #540]	@ (8006548 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800632a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800632c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006334:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006338:	4a83      	ldr	r2, [pc, #524]	@ (8006548 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800633a:	430b      	orrs	r3, r1
 800633c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800633e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006346:	f002 0310 	and.w	r3, r2, #16
 800634a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800634e:	2300      	movs	r3, #0
 8006350:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006354:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006358:	460b      	mov	r3, r1
 800635a:	4313      	orrs	r3, r2
 800635c:	d01e      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800635e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006362:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006366:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800636a:	d10c      	bne.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800636c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006370:	3328      	adds	r3, #40	@ 0x28
 8006372:	2102      	movs	r1, #2
 8006374:	4618      	mov	r0, r3
 8006376:	f001 fcf7 	bl	8007d68 <RCCEx_PLL3_Config>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d002      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006386:	4b70      	ldr	r3, [pc, #448]	@ (8006548 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800638a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800638e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006392:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006396:	4a6c      	ldr	r2, [pc, #432]	@ (8006548 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006398:	430b      	orrs	r3, r1
 800639a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800639c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80063a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80063ac:	2300      	movs	r3, #0
 80063ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80063b2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80063b6:	460b      	mov	r3, r1
 80063b8:	4313      	orrs	r3, r2
 80063ba:	d03e      	beq.n	800643a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80063bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80063c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063c8:	d022      	beq.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80063ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063ce:	d81b      	bhi.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d003      	beq.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80063d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063d8:	d00b      	beq.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80063da:	e015      	b.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063e0:	3308      	adds	r3, #8
 80063e2:	2100      	movs	r1, #0
 80063e4:	4618      	mov	r0, r3
 80063e6:	f001 fc0d 	bl	8007c04 <RCCEx_PLL2_Config>
 80063ea:	4603      	mov	r3, r0
 80063ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80063f0:	e00f      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80063f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063f6:	3328      	adds	r3, #40	@ 0x28
 80063f8:	2102      	movs	r1, #2
 80063fa:	4618      	mov	r0, r3
 80063fc:	f001 fcb4 	bl	8007d68 <RCCEx_PLL3_Config>
 8006400:	4603      	mov	r3, r0
 8006402:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006406:	e004      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800640e:	e000      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006410:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006412:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006416:	2b00      	cmp	r3, #0
 8006418:	d10b      	bne.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800641a:	4b4b      	ldr	r3, [pc, #300]	@ (8006548 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800641c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800641e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006426:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800642a:	4a47      	ldr	r2, [pc, #284]	@ (8006548 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800642c:	430b      	orrs	r3, r1
 800642e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006430:	e003      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006432:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006436:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800643a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800643e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006442:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006446:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006448:	2300      	movs	r3, #0
 800644a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800644c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006450:	460b      	mov	r3, r1
 8006452:	4313      	orrs	r3, r2
 8006454:	d03b      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800645a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800645e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006462:	d01f      	beq.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006464:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006468:	d818      	bhi.n	800649c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800646a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800646e:	d003      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006470:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006474:	d007      	beq.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006476:	e011      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006478:	4b33      	ldr	r3, [pc, #204]	@ (8006548 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800647a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800647c:	4a32      	ldr	r2, [pc, #200]	@ (8006548 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800647e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006482:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006484:	e00f      	b.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800648a:	3328      	adds	r3, #40	@ 0x28
 800648c:	2101      	movs	r1, #1
 800648e:	4618      	mov	r0, r3
 8006490:	f001 fc6a 	bl	8007d68 <RCCEx_PLL3_Config>
 8006494:	4603      	mov	r3, r0
 8006496:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800649a:	e004      	b.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064a2:	e000      	b.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80064a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d10b      	bne.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80064ae:	4b26      	ldr	r3, [pc, #152]	@ (8006548 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064b2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80064b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064be:	4a22      	ldr	r2, [pc, #136]	@ (8006548 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064c0:	430b      	orrs	r3, r1
 80064c2:	6553      	str	r3, [r2, #84]	@ 0x54
 80064c4:	e003      	b.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80064ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80064da:	673b      	str	r3, [r7, #112]	@ 0x70
 80064dc:	2300      	movs	r3, #0
 80064de:	677b      	str	r3, [r7, #116]	@ 0x74
 80064e0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80064e4:	460b      	mov	r3, r1
 80064e6:	4313      	orrs	r3, r2
 80064e8:	d034      	beq.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80064ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d003      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80064f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064f8:	d007      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80064fa:	e011      	b.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064fc:	4b12      	ldr	r3, [pc, #72]	@ (8006548 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006500:	4a11      	ldr	r2, [pc, #68]	@ (8006548 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006502:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006506:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006508:	e00e      	b.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800650a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800650e:	3308      	adds	r3, #8
 8006510:	2102      	movs	r1, #2
 8006512:	4618      	mov	r0, r3
 8006514:	f001 fb76 	bl	8007c04 <RCCEx_PLL2_Config>
 8006518:	4603      	mov	r3, r0
 800651a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800651e:	e003      	b.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006526:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006528:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10d      	bne.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006530:	4b05      	ldr	r3, [pc, #20]	@ (8006548 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006532:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006534:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006538:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800653c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800653e:	4a02      	ldr	r2, [pc, #8]	@ (8006548 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006540:	430b      	orrs	r3, r1
 8006542:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006544:	e006      	b.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006546:	bf00      	nop
 8006548:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800654c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006550:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006560:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006562:	2300      	movs	r3, #0
 8006564:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006566:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800656a:	460b      	mov	r3, r1
 800656c:	4313      	orrs	r3, r2
 800656e:	d00c      	beq.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006570:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006574:	3328      	adds	r3, #40	@ 0x28
 8006576:	2102      	movs	r1, #2
 8006578:	4618      	mov	r0, r3
 800657a:	f001 fbf5 	bl	8007d68 <RCCEx_PLL3_Config>
 800657e:	4603      	mov	r3, r0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d002      	beq.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800658a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800658e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006592:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006596:	663b      	str	r3, [r7, #96]	@ 0x60
 8006598:	2300      	movs	r3, #0
 800659a:	667b      	str	r3, [r7, #100]	@ 0x64
 800659c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80065a0:	460b      	mov	r3, r1
 80065a2:	4313      	orrs	r3, r2
 80065a4:	d038      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80065a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065b2:	d018      	beq.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80065b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065b8:	d811      	bhi.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80065ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065be:	d014      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80065c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065c4:	d80b      	bhi.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d011      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80065ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065ce:	d106      	bne.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065d0:	4bc3      	ldr	r3, [pc, #780]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065d4:	4ac2      	ldr	r2, [pc, #776]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80065dc:	e008      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80065e4:	e004      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80065e6:	bf00      	nop
 80065e8:	e002      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80065ea:	bf00      	nop
 80065ec:	e000      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80065ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d10b      	bne.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80065f8:	4bb9      	ldr	r3, [pc, #740]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065fc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006600:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006604:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006608:	4ab5      	ldr	r2, [pc, #724]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800660a:	430b      	orrs	r3, r1
 800660c:	6553      	str	r3, [r2, #84]	@ 0x54
 800660e:	e003      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006610:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006614:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800661c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006620:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006624:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006626:	2300      	movs	r3, #0
 8006628:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800662a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800662e:	460b      	mov	r3, r1
 8006630:	4313      	orrs	r3, r2
 8006632:	d009      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006634:	4baa      	ldr	r3, [pc, #680]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006636:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006638:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800663c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006640:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006642:	4aa7      	ldr	r2, [pc, #668]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006644:	430b      	orrs	r3, r1
 8006646:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800664c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006650:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006654:	653b      	str	r3, [r7, #80]	@ 0x50
 8006656:	2300      	movs	r3, #0
 8006658:	657b      	str	r3, [r7, #84]	@ 0x54
 800665a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800665e:	460b      	mov	r3, r1
 8006660:	4313      	orrs	r3, r2
 8006662:	d00a      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006664:	4b9e      	ldr	r3, [pc, #632]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800666c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006670:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006674:	4a9a      	ldr	r2, [pc, #616]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006676:	430b      	orrs	r3, r1
 8006678:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800667a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800667e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006682:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006686:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006688:	2300      	movs	r3, #0
 800668a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800668c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006690:	460b      	mov	r3, r1
 8006692:	4313      	orrs	r3, r2
 8006694:	d009      	beq.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006696:	4b92      	ldr	r3, [pc, #584]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006698:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800669a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800669e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066a4:	4a8e      	ldr	r2, [pc, #568]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066a6:	430b      	orrs	r3, r1
 80066a8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80066aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80066b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80066b8:	2300      	movs	r3, #0
 80066ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80066bc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80066c0:	460b      	mov	r3, r1
 80066c2:	4313      	orrs	r3, r2
 80066c4:	d00e      	beq.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80066c6:	4b86      	ldr	r3, [pc, #536]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	4a85      	ldr	r2, [pc, #532]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066cc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80066d0:	6113      	str	r3, [r2, #16]
 80066d2:	4b83      	ldr	r3, [pc, #524]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066d4:	6919      	ldr	r1, [r3, #16]
 80066d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066da:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80066de:	4a80      	ldr	r2, [pc, #512]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066e0:	430b      	orrs	r3, r1
 80066e2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80066e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ec:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80066f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80066f2:	2300      	movs	r3, #0
 80066f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066f6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80066fa:	460b      	mov	r3, r1
 80066fc:	4313      	orrs	r3, r2
 80066fe:	d009      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006700:	4b77      	ldr	r3, [pc, #476]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006704:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800670c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800670e:	4a74      	ldr	r2, [pc, #464]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006710:	430b      	orrs	r3, r1
 8006712:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006720:	633b      	str	r3, [r7, #48]	@ 0x30
 8006722:	2300      	movs	r3, #0
 8006724:	637b      	str	r3, [r7, #52]	@ 0x34
 8006726:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800672a:	460b      	mov	r3, r1
 800672c:	4313      	orrs	r3, r2
 800672e:	d00a      	beq.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006730:	4b6b      	ldr	r3, [pc, #428]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006734:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006738:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800673c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006740:	4a67      	ldr	r2, [pc, #412]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006742:	430b      	orrs	r3, r1
 8006744:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800674a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674e:	2100      	movs	r1, #0
 8006750:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006752:	f003 0301 	and.w	r3, r3, #1
 8006756:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006758:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800675c:	460b      	mov	r3, r1
 800675e:	4313      	orrs	r3, r2
 8006760:	d011      	beq.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006766:	3308      	adds	r3, #8
 8006768:	2100      	movs	r1, #0
 800676a:	4618      	mov	r0, r3
 800676c:	f001 fa4a 	bl	8007c04 <RCCEx_PLL2_Config>
 8006770:	4603      	mov	r3, r0
 8006772:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006776:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800677a:	2b00      	cmp	r3, #0
 800677c:	d003      	beq.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800677e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006782:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800678a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678e:	2100      	movs	r1, #0
 8006790:	6239      	str	r1, [r7, #32]
 8006792:	f003 0302 	and.w	r3, r3, #2
 8006796:	627b      	str	r3, [r7, #36]	@ 0x24
 8006798:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800679c:	460b      	mov	r3, r1
 800679e:	4313      	orrs	r3, r2
 80067a0:	d011      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80067a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067a6:	3308      	adds	r3, #8
 80067a8:	2101      	movs	r1, #1
 80067aa:	4618      	mov	r0, r3
 80067ac:	f001 fa2a 	bl	8007c04 <RCCEx_PLL2_Config>
 80067b0:	4603      	mov	r3, r0
 80067b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80067b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d003      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80067c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ce:	2100      	movs	r1, #0
 80067d0:	61b9      	str	r1, [r7, #24]
 80067d2:	f003 0304 	and.w	r3, r3, #4
 80067d6:	61fb      	str	r3, [r7, #28]
 80067d8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80067dc:	460b      	mov	r3, r1
 80067de:	4313      	orrs	r3, r2
 80067e0:	d011      	beq.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80067e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067e6:	3308      	adds	r3, #8
 80067e8:	2102      	movs	r1, #2
 80067ea:	4618      	mov	r0, r3
 80067ec:	f001 fa0a 	bl	8007c04 <RCCEx_PLL2_Config>
 80067f0:	4603      	mov	r3, r0
 80067f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80067f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d003      	beq.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006802:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800680a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680e:	2100      	movs	r1, #0
 8006810:	6139      	str	r1, [r7, #16]
 8006812:	f003 0308 	and.w	r3, r3, #8
 8006816:	617b      	str	r3, [r7, #20]
 8006818:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800681c:	460b      	mov	r3, r1
 800681e:	4313      	orrs	r3, r2
 8006820:	d011      	beq.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006826:	3328      	adds	r3, #40	@ 0x28
 8006828:	2100      	movs	r1, #0
 800682a:	4618      	mov	r0, r3
 800682c:	f001 fa9c 	bl	8007d68 <RCCEx_PLL3_Config>
 8006830:	4603      	mov	r3, r0
 8006832:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006836:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800683a:	2b00      	cmp	r3, #0
 800683c:	d003      	beq.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800683e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006842:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800684a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684e:	2100      	movs	r1, #0
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	f003 0310 	and.w	r3, r3, #16
 8006856:	60fb      	str	r3, [r7, #12]
 8006858:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800685c:	460b      	mov	r3, r1
 800685e:	4313      	orrs	r3, r2
 8006860:	d011      	beq.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006866:	3328      	adds	r3, #40	@ 0x28
 8006868:	2101      	movs	r1, #1
 800686a:	4618      	mov	r0, r3
 800686c:	f001 fa7c 	bl	8007d68 <RCCEx_PLL3_Config>
 8006870:	4603      	mov	r3, r0
 8006872:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006876:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800687a:	2b00      	cmp	r3, #0
 800687c:	d003      	beq.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800687e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006882:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800688a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688e:	2100      	movs	r1, #0
 8006890:	6039      	str	r1, [r7, #0]
 8006892:	f003 0320 	and.w	r3, r3, #32
 8006896:	607b      	str	r3, [r7, #4]
 8006898:	e9d7 1200 	ldrd	r1, r2, [r7]
 800689c:	460b      	mov	r3, r1
 800689e:	4313      	orrs	r3, r2
 80068a0:	d011      	beq.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80068a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068a6:	3328      	adds	r3, #40	@ 0x28
 80068a8:	2102      	movs	r1, #2
 80068aa:	4618      	mov	r0, r3
 80068ac:	f001 fa5c 	bl	8007d68 <RCCEx_PLL3_Config>
 80068b0:	4603      	mov	r3, r0
 80068b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80068b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d003      	beq.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80068c6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d101      	bne.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80068ce:	2300      	movs	r3, #0
 80068d0:	e000      	b.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80068da:	46bd      	mov	sp, r7
 80068dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068e0:	58024400 	.word	0x58024400

080068e4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b090      	sub	sp, #64	@ 0x40
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80068ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068f2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80068f6:	430b      	orrs	r3, r1
 80068f8:	f040 8094 	bne.w	8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80068fc:	4b9e      	ldr	r3, [pc, #632]	@ (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006900:	f003 0307 	and.w	r3, r3, #7
 8006904:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006908:	2b04      	cmp	r3, #4
 800690a:	f200 8087 	bhi.w	8006a1c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800690e:	a201      	add	r2, pc, #4	@ (adr r2, 8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006914:	08006929 	.word	0x08006929
 8006918:	08006951 	.word	0x08006951
 800691c:	08006979 	.word	0x08006979
 8006920:	08006a15 	.word	0x08006a15
 8006924:	080069a1 	.word	0x080069a1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006928:	4b93      	ldr	r3, [pc, #588]	@ (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006930:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006934:	d108      	bne.n	8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006936:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800693a:	4618      	mov	r0, r3
 800693c:	f001 f810 	bl	8007960 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006942:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006944:	f000 bd45 	b.w	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006948:	2300      	movs	r3, #0
 800694a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800694c:	f000 bd41 	b.w	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006950:	4b89      	ldr	r3, [pc, #548]	@ (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006958:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800695c:	d108      	bne.n	8006970 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800695e:	f107 0318 	add.w	r3, r7, #24
 8006962:	4618      	mov	r0, r3
 8006964:	f000 fd54 	bl	8007410 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800696c:	f000 bd31 	b.w	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006970:	2300      	movs	r3, #0
 8006972:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006974:	f000 bd2d 	b.w	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006978:	4b7f      	ldr	r3, [pc, #508]	@ (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006980:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006984:	d108      	bne.n	8006998 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006986:	f107 030c 	add.w	r3, r7, #12
 800698a:	4618      	mov	r0, r3
 800698c:	f000 fe94 	bl	80076b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006994:	f000 bd1d 	b.w	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006998:	2300      	movs	r3, #0
 800699a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800699c:	f000 bd19 	b.w	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80069a0:	4b75      	ldr	r3, [pc, #468]	@ (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80069a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069a4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80069a8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80069aa:	4b73      	ldr	r3, [pc, #460]	@ (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 0304 	and.w	r3, r3, #4
 80069b2:	2b04      	cmp	r3, #4
 80069b4:	d10c      	bne.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80069b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d109      	bne.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80069bc:	4b6e      	ldr	r3, [pc, #440]	@ (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	08db      	lsrs	r3, r3, #3
 80069c2:	f003 0303 	and.w	r3, r3, #3
 80069c6:	4a6d      	ldr	r2, [pc, #436]	@ (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80069c8:	fa22 f303 	lsr.w	r3, r2, r3
 80069cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069ce:	e01f      	b.n	8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80069d0:	4b69      	ldr	r3, [pc, #420]	@ (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069dc:	d106      	bne.n	80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80069de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80069e4:	d102      	bne.n	80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80069e6:	4b66      	ldr	r3, [pc, #408]	@ (8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80069e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069ea:	e011      	b.n	8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80069ec:	4b62      	ldr	r3, [pc, #392]	@ (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80069f8:	d106      	bne.n	8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80069fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a00:	d102      	bne.n	8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006a02:	4b60      	ldr	r3, [pc, #384]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a06:	e003      	b.n	8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006a0c:	f000 bce1 	b.w	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006a10:	f000 bcdf 	b.w	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006a14:	4b5c      	ldr	r3, [pc, #368]	@ (8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a18:	f000 bcdb 	b.w	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a20:	f000 bcd7 	b.w	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006a24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a28:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006a2c:	430b      	orrs	r3, r1
 8006a2e:	f040 80ad 	bne.w	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006a32:	4b51      	ldr	r3, [pc, #324]	@ (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a36:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006a3a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a42:	d056      	beq.n	8006af2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a4a:	f200 8090 	bhi.w	8006b6e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a50:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a52:	f000 8088 	beq.w	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8006a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a58:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a5a:	f200 8088 	bhi.w	8006b6e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a60:	2b80      	cmp	r3, #128	@ 0x80
 8006a62:	d032      	beq.n	8006aca <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a66:	2b80      	cmp	r3, #128	@ 0x80
 8006a68:	f200 8081 	bhi.w	8006b6e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d003      	beq.n	8006a7a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8006a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a74:	2b40      	cmp	r3, #64	@ 0x40
 8006a76:	d014      	beq.n	8006aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006a78:	e079      	b.n	8006b6e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006a7a:	4b3f      	ldr	r3, [pc, #252]	@ (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a86:	d108      	bne.n	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f000 ff67 	bl	8007960 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a96:	f000 bc9c 	b.w	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a9e:	f000 bc98 	b.w	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006aa2:	4b35      	ldr	r3, [pc, #212]	@ (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006aaa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006aae:	d108      	bne.n	8006ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ab0:	f107 0318 	add.w	r3, r7, #24
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f000 fcab 	bl	8007410 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006aba:	69bb      	ldr	r3, [r7, #24]
 8006abc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006abe:	f000 bc88 	b.w	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ac6:	f000 bc84 	b.w	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006aca:	4b2b      	ldr	r3, [pc, #172]	@ (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ad2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ad6:	d108      	bne.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ad8:	f107 030c 	add.w	r3, r7, #12
 8006adc:	4618      	mov	r0, r3
 8006ade:	f000 fdeb 	bl	80076b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ae6:	f000 bc74 	b.w	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006aea:	2300      	movs	r3, #0
 8006aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006aee:	f000 bc70 	b.w	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006af2:	4b21      	ldr	r3, [pc, #132]	@ (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006af6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006afa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006afc:	4b1e      	ldr	r3, [pc, #120]	@ (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 0304 	and.w	r3, r3, #4
 8006b04:	2b04      	cmp	r3, #4
 8006b06:	d10c      	bne.n	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006b08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d109      	bne.n	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b0e:	4b1a      	ldr	r3, [pc, #104]	@ (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	08db      	lsrs	r3, r3, #3
 8006b14:	f003 0303 	and.w	r3, r3, #3
 8006b18:	4a18      	ldr	r2, [pc, #96]	@ (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b20:	e01f      	b.n	8006b62 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b22:	4b15      	ldr	r3, [pc, #84]	@ (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b2e:	d106      	bne.n	8006b3e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006b30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b36:	d102      	bne.n	8006b3e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006b38:	4b11      	ldr	r3, [pc, #68]	@ (8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b3c:	e011      	b.n	8006b62 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b4a:	d106      	bne.n	8006b5a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8006b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b52:	d102      	bne.n	8006b5a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006b54:	4b0b      	ldr	r3, [pc, #44]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b58:	e003      	b.n	8006b62 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006b5e:	f000 bc38 	b.w	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006b62:	f000 bc36 	b.w	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006b66:	4b08      	ldr	r3, [pc, #32]	@ (8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006b68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b6a:	f000 bc32 	b.w	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b72:	f000 bc2e 	b.w	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006b76:	bf00      	nop
 8006b78:	58024400 	.word	0x58024400
 8006b7c:	03d09000 	.word	0x03d09000
 8006b80:	003d0900 	.word	0x003d0900
 8006b84:	007a1200 	.word	0x007a1200
 8006b88:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006b8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b90:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006b94:	430b      	orrs	r3, r1
 8006b96:	f040 809c 	bne.w	8006cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006b9a:	4b9e      	ldr	r3, [pc, #632]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b9e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8006ba2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006baa:	d054      	beq.n	8006c56 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006bb2:	f200 808b 	bhi.w	8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006bbc:	f000 8083 	beq.w	8006cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006bc6:	f200 8081 	bhi.w	8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bcc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006bd0:	d02f      	beq.n	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8006bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006bd8:	d878      	bhi.n	8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d004      	beq.n	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006be6:	d012      	beq.n	8006c0e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006be8:	e070      	b.n	8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006bea:	4b8a      	ldr	r3, [pc, #552]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bf2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006bf6:	d107      	bne.n	8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006bf8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f000 feaf 	bl	8007960 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c06:	e3e4      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c0c:	e3e1      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c0e:	4b81      	ldr	r3, [pc, #516]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c1a:	d107      	bne.n	8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c1c:	f107 0318 	add.w	r3, r7, #24
 8006c20:	4618      	mov	r0, r3
 8006c22:	f000 fbf5 	bl	8007410 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c2a:	e3d2      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c30:	e3cf      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006c32:	4b78      	ldr	r3, [pc, #480]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c3e:	d107      	bne.n	8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c40:	f107 030c 	add.w	r3, r7, #12
 8006c44:	4618      	mov	r0, r3
 8006c46:	f000 fd37 	bl	80076b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c4e:	e3c0      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c50:	2300      	movs	r3, #0
 8006c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c54:	e3bd      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006c56:	4b6f      	ldr	r3, [pc, #444]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c5a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006c5e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006c60:	4b6c      	ldr	r3, [pc, #432]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 0304 	and.w	r3, r3, #4
 8006c68:	2b04      	cmp	r3, #4
 8006c6a:	d10c      	bne.n	8006c86 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d109      	bne.n	8006c86 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c72:	4b68      	ldr	r3, [pc, #416]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	08db      	lsrs	r3, r3, #3
 8006c78:	f003 0303 	and.w	r3, r3, #3
 8006c7c:	4a66      	ldr	r2, [pc, #408]	@ (8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8006c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c84:	e01e      	b.n	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006c86:	4b63      	ldr	r3, [pc, #396]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c92:	d106      	bne.n	8006ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006c94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c9a:	d102      	bne.n	8006ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006c9c:	4b5f      	ldr	r3, [pc, #380]	@ (8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ca0:	e010      	b.n	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006ca2:	4b5c      	ldr	r3, [pc, #368]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006caa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006cae:	d106      	bne.n	8006cbe <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006cb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006cb6:	d102      	bne.n	8006cbe <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006cb8:	4b59      	ldr	r3, [pc, #356]	@ (8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cbc:	e002      	b.n	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006cc2:	e386      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006cc4:	e385      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006cc6:	4b57      	ldr	r3, [pc, #348]	@ (8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cca:	e382      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cd0:	e37f      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006cd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cd6:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8006cda:	430b      	orrs	r3, r1
 8006cdc:	f040 80a7 	bne.w	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006ce0:	4b4c      	ldr	r3, [pc, #304]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ce2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ce4:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006ce8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006cf0:	d055      	beq.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8006cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006cf8:	f200 8096 	bhi.w	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cfe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006d02:	f000 8084 	beq.w	8006e0e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d08:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006d0c:	f200 808c 	bhi.w	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d12:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006d16:	d030      	beq.n	8006d7a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8006d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006d1e:	f200 8083 	bhi.w	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d004      	beq.n	8006d32 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006d2e:	d012      	beq.n	8006d56 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006d30:	e07a      	b.n	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006d32:	4b38      	ldr	r3, [pc, #224]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d3a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006d3e:	d107      	bne.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d44:	4618      	mov	r0, r3
 8006d46:	f000 fe0b 	bl	8007960 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d4e:	e340      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d50:	2300      	movs	r3, #0
 8006d52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d54:	e33d      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d56:	4b2f      	ldr	r3, [pc, #188]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d62:	d107      	bne.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d64:	f107 0318 	add.w	r3, r7, #24
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f000 fb51 	bl	8007410 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d72:	e32e      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d74:	2300      	movs	r3, #0
 8006d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d78:	e32b      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006d7a:	4b26      	ldr	r3, [pc, #152]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006d82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d86:	d107      	bne.n	8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d88:	f107 030c 	add.w	r3, r7, #12
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f000 fc93 	bl	80076b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d96:	e31c      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d9c:	e319      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006d9e:	4b1d      	ldr	r3, [pc, #116]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006da2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006da6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006da8:	4b1a      	ldr	r3, [pc, #104]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 0304 	and.w	r3, r3, #4
 8006db0:	2b04      	cmp	r3, #4
 8006db2:	d10c      	bne.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006db4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d109      	bne.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006dba:	4b16      	ldr	r3, [pc, #88]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	08db      	lsrs	r3, r3, #3
 8006dc0:	f003 0303 	and.w	r3, r3, #3
 8006dc4:	4a14      	ldr	r2, [pc, #80]	@ (8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8006dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006dcc:	e01e      	b.n	8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006dce:	4b11      	ldr	r3, [pc, #68]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006dda:	d106      	bne.n	8006dea <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006ddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dde:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006de2:	d102      	bne.n	8006dea <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006de4:	4b0d      	ldr	r3, [pc, #52]	@ (8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006de8:	e010      	b.n	8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006dea:	4b0a      	ldr	r3, [pc, #40]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006df2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006df6:	d106      	bne.n	8006e06 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8006df8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dfa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006dfe:	d102      	bne.n	8006e06 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006e00:	4b07      	ldr	r3, [pc, #28]	@ (8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e04:	e002      	b.n	8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006e06:	2300      	movs	r3, #0
 8006e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006e0a:	e2e2      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006e0c:	e2e1      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006e0e:	4b05      	ldr	r3, [pc, #20]	@ (8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e12:	e2de      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006e14:	58024400 	.word	0x58024400
 8006e18:	03d09000 	.word	0x03d09000
 8006e1c:	003d0900 	.word	0x003d0900
 8006e20:	007a1200 	.word	0x007a1200
 8006e24:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e2c:	e2d1      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006e2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e32:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006e36:	430b      	orrs	r3, r1
 8006e38:	f040 809c 	bne.w	8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006e3c:	4b93      	ldr	r3, [pc, #588]	@ (800708c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e40:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006e44:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e48:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e4c:	d054      	beq.n	8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e50:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e54:	f200 808b 	bhi.w	8006f6e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e5a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006e5e:	f000 8083 	beq.w	8006f68 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e64:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006e68:	f200 8081 	bhi.w	8006f6e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e72:	d02f      	beq.n	8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e7a:	d878      	bhi.n	8006f6e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d004      	beq.n	8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e88:	d012      	beq.n	8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006e8a:	e070      	b.n	8006f6e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006e8c:	4b7f      	ldr	r3, [pc, #508]	@ (800708c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e98:	d107      	bne.n	8006eaa <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f000 fd5e 	bl	8007960 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ea8:	e293      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006eae:	e290      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006eb0:	4b76      	ldr	r3, [pc, #472]	@ (800708c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006eb8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ebc:	d107      	bne.n	8006ece <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ebe:	f107 0318 	add.w	r3, r7, #24
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f000 faa4 	bl	8007410 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ecc:	e281      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ed2:	e27e      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006ed4:	4b6d      	ldr	r3, [pc, #436]	@ (800708c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006edc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ee0:	d107      	bne.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ee2:	f107 030c 	add.w	r3, r7, #12
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f000 fbe6 	bl	80076b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ef0:	e26f      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ef6:	e26c      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006ef8:	4b64      	ldr	r3, [pc, #400]	@ (800708c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006efa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006efc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006f00:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006f02:	4b62      	ldr	r3, [pc, #392]	@ (800708c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 0304 	and.w	r3, r3, #4
 8006f0a:	2b04      	cmp	r3, #4
 8006f0c:	d10c      	bne.n	8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006f0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d109      	bne.n	8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f14:	4b5d      	ldr	r3, [pc, #372]	@ (800708c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	08db      	lsrs	r3, r3, #3
 8006f1a:	f003 0303 	and.w	r3, r3, #3
 8006f1e:	4a5c      	ldr	r2, [pc, #368]	@ (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006f20:	fa22 f303 	lsr.w	r3, r2, r3
 8006f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f26:	e01e      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006f28:	4b58      	ldr	r3, [pc, #352]	@ (800708c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f34:	d106      	bne.n	8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006f36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f3c:	d102      	bne.n	8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006f3e:	4b55      	ldr	r3, [pc, #340]	@ (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f42:	e010      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006f44:	4b51      	ldr	r3, [pc, #324]	@ (800708c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f50:	d106      	bne.n	8006f60 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006f52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f58:	d102      	bne.n	8006f60 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006f5a:	4b4f      	ldr	r3, [pc, #316]	@ (8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f5e:	e002      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006f60:	2300      	movs	r3, #0
 8006f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006f64:	e235      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006f66:	e234      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006f68:	4b4c      	ldr	r3, [pc, #304]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f6c:	e231      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f72:	e22e      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006f74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f78:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006f7c:	430b      	orrs	r3, r1
 8006f7e:	f040 808f 	bne.w	80070a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006f82:	4b42      	ldr	r3, [pc, #264]	@ (800708c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f86:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006f8a:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8006f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f8e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006f92:	d06b      	beq.n	800706c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f96:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006f9a:	d874      	bhi.n	8007086 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f9e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006fa2:	d056      	beq.n	8007052 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fa6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006faa:	d86c      	bhi.n	8007086 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006fb2:	d03b      	beq.n	800702c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fb6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006fba:	d864      	bhi.n	8007086 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fbe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006fc2:	d021      	beq.n	8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fc6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006fca:	d85c      	bhi.n	8007086 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d004      	beq.n	8006fdc <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fd8:	d004      	beq.n	8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006fda:	e054      	b.n	8007086 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006fdc:	f7fe fa4c 	bl	8005478 <HAL_RCC_GetPCLK1Freq>
 8006fe0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006fe2:	e1f6      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006fe4:	4b29      	ldr	r3, [pc, #164]	@ (800708c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006fec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ff0:	d107      	bne.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ff2:	f107 0318 	add.w	r3, r7, #24
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f000 fa0a 	bl	8007410 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007000:	e1e7      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007002:	2300      	movs	r3, #0
 8007004:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007006:	e1e4      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007008:	4b20      	ldr	r3, [pc, #128]	@ (800708c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007010:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007014:	d107      	bne.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007016:	f107 030c 	add.w	r3, r7, #12
 800701a:	4618      	mov	r0, r3
 800701c:	f000 fb4c 	bl	80076b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007024:	e1d5      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007026:	2300      	movs	r3, #0
 8007028:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800702a:	e1d2      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800702c:	4b17      	ldr	r3, [pc, #92]	@ (800708c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 0304 	and.w	r3, r3, #4
 8007034:	2b04      	cmp	r3, #4
 8007036:	d109      	bne.n	800704c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007038:	4b14      	ldr	r3, [pc, #80]	@ (800708c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	08db      	lsrs	r3, r3, #3
 800703e:	f003 0303 	and.w	r3, r3, #3
 8007042:	4a13      	ldr	r2, [pc, #76]	@ (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007044:	fa22 f303 	lsr.w	r3, r2, r3
 8007048:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800704a:	e1c2      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800704c:	2300      	movs	r3, #0
 800704e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007050:	e1bf      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007052:	4b0e      	ldr	r3, [pc, #56]	@ (800708c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800705a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800705e:	d102      	bne.n	8007066 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007060:	4b0c      	ldr	r3, [pc, #48]	@ (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007062:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007064:	e1b5      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007066:	2300      	movs	r3, #0
 8007068:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800706a:	e1b2      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800706c:	4b07      	ldr	r3, [pc, #28]	@ (800708c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007074:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007078:	d102      	bne.n	8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800707a:	4b07      	ldr	r3, [pc, #28]	@ (8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800707c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800707e:	e1a8      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007080:	2300      	movs	r3, #0
 8007082:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007084:	e1a5      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007086:	2300      	movs	r3, #0
 8007088:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800708a:	e1a2      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800708c:	58024400 	.word	0x58024400
 8007090:	03d09000 	.word	0x03d09000
 8007094:	003d0900 	.word	0x003d0900
 8007098:	007a1200 	.word	0x007a1200
 800709c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80070a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070a4:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80070a8:	430b      	orrs	r3, r1
 80070aa:	d173      	bne.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80070ac:	4b9c      	ldr	r3, [pc, #624]	@ (8007320 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80070b4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80070b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070bc:	d02f      	beq.n	800711e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80070be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070c4:	d863      	bhi.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80070c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d004      	beq.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80070cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070d2:	d012      	beq.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80070d4:	e05b      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070d6:	4b92      	ldr	r3, [pc, #584]	@ (8007320 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80070e2:	d107      	bne.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070e4:	f107 0318 	add.w	r3, r7, #24
 80070e8:	4618      	mov	r0, r3
 80070ea:	f000 f991 	bl	8007410 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070f2:	e16e      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070f4:	2300      	movs	r3, #0
 80070f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070f8:	e16b      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80070fa:	4b89      	ldr	r3, [pc, #548]	@ (8007320 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007102:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007106:	d107      	bne.n	8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007108:	f107 030c 	add.w	r3, r7, #12
 800710c:	4618      	mov	r0, r3
 800710e:	f000 fad3 	bl	80076b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007116:	e15c      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007118:	2300      	movs	r3, #0
 800711a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800711c:	e159      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800711e:	4b80      	ldr	r3, [pc, #512]	@ (8007320 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007122:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007126:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007128:	4b7d      	ldr	r3, [pc, #500]	@ (8007320 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f003 0304 	and.w	r3, r3, #4
 8007130:	2b04      	cmp	r3, #4
 8007132:	d10c      	bne.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007136:	2b00      	cmp	r3, #0
 8007138:	d109      	bne.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800713a:	4b79      	ldr	r3, [pc, #484]	@ (8007320 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	08db      	lsrs	r3, r3, #3
 8007140:	f003 0303 	and.w	r3, r3, #3
 8007144:	4a77      	ldr	r2, [pc, #476]	@ (8007324 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007146:	fa22 f303 	lsr.w	r3, r2, r3
 800714a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800714c:	e01e      	b.n	800718c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800714e:	4b74      	ldr	r3, [pc, #464]	@ (8007320 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007156:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800715a:	d106      	bne.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800715c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800715e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007162:	d102      	bne.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007164:	4b70      	ldr	r3, [pc, #448]	@ (8007328 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007166:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007168:	e010      	b.n	800718c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800716a:	4b6d      	ldr	r3, [pc, #436]	@ (8007320 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007172:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007176:	d106      	bne.n	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800717a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800717e:	d102      	bne.n	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007180:	4b6a      	ldr	r3, [pc, #424]	@ (800732c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007182:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007184:	e002      	b.n	800718c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007186:	2300      	movs	r3, #0
 8007188:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800718a:	e122      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800718c:	e121      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800718e:	2300      	movs	r3, #0
 8007190:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007192:	e11e      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007194:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007198:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800719c:	430b      	orrs	r3, r1
 800719e:	d133      	bne.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80071a0:	4b5f      	ldr	r3, [pc, #380]	@ (8007320 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80071a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80071a8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80071aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d004      	beq.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80071b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071b6:	d012      	beq.n	80071de <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80071b8:	e023      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80071ba:	4b59      	ldr	r3, [pc, #356]	@ (8007320 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80071c6:	d107      	bne.n	80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80071c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80071cc:	4618      	mov	r0, r3
 80071ce:	f000 fbc7 	bl	8007960 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80071d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071d6:	e0fc      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071d8:	2300      	movs	r3, #0
 80071da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071dc:	e0f9      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80071de:	4b50      	ldr	r3, [pc, #320]	@ (8007320 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80071e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80071ea:	d107      	bne.n	80071fc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071ec:	f107 0318 	add.w	r3, r7, #24
 80071f0:	4618      	mov	r0, r3
 80071f2:	f000 f90d 	bl	8007410 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80071f6:	6a3b      	ldr	r3, [r7, #32]
 80071f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071fa:	e0ea      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071fc:	2300      	movs	r3, #0
 80071fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007200:	e0e7      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007202:	2300      	movs	r3, #0
 8007204:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007206:	e0e4      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007208:	e9d7 2300 	ldrd	r2, r3, [r7]
 800720c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8007210:	430b      	orrs	r3, r1
 8007212:	f040 808d 	bne.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007216:	4b42      	ldr	r3, [pc, #264]	@ (8007320 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800721a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800721e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007222:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007226:	d06b      	beq.n	8007300 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800722a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800722e:	d874      	bhi.n	800731a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007232:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007236:	d056      	beq.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800723a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800723e:	d86c      	bhi.n	800731a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007242:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007246:	d03b      	beq.n	80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800724a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800724e:	d864      	bhi.n	800731a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007252:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007256:	d021      	beq.n	800729c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800725a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800725e:	d85c      	bhi.n	800731a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007262:	2b00      	cmp	r3, #0
 8007264:	d004      	beq.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007268:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800726c:	d004      	beq.n	8007278 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800726e:	e054      	b.n	800731a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007270:	f000 f8b8 	bl	80073e4 <HAL_RCCEx_GetD3PCLK1Freq>
 8007274:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007276:	e0ac      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007278:	4b29      	ldr	r3, [pc, #164]	@ (8007320 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007280:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007284:	d107      	bne.n	8007296 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007286:	f107 0318 	add.w	r3, r7, #24
 800728a:	4618      	mov	r0, r3
 800728c:	f000 f8c0 	bl	8007410 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007294:	e09d      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007296:	2300      	movs	r3, #0
 8007298:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800729a:	e09a      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800729c:	4b20      	ldr	r3, [pc, #128]	@ (8007320 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80072a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072a8:	d107      	bne.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072aa:	f107 030c 	add.w	r3, r7, #12
 80072ae:	4618      	mov	r0, r3
 80072b0:	f000 fa02 	bl	80076b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072b8:	e08b      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072ba:	2300      	movs	r3, #0
 80072bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072be:	e088      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80072c0:	4b17      	ldr	r3, [pc, #92]	@ (8007320 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f003 0304 	and.w	r3, r3, #4
 80072c8:	2b04      	cmp	r3, #4
 80072ca:	d109      	bne.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80072cc:	4b14      	ldr	r3, [pc, #80]	@ (8007320 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	08db      	lsrs	r3, r3, #3
 80072d2:	f003 0303 	and.w	r3, r3, #3
 80072d6:	4a13      	ldr	r2, [pc, #76]	@ (8007324 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80072d8:	fa22 f303 	lsr.w	r3, r2, r3
 80072dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072de:	e078      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072e0:	2300      	movs	r3, #0
 80072e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072e4:	e075      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80072e6:	4b0e      	ldr	r3, [pc, #56]	@ (8007320 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072f2:	d102      	bne.n	80072fa <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80072f4:	4b0c      	ldr	r3, [pc, #48]	@ (8007328 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80072f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072f8:	e06b      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072fa:	2300      	movs	r3, #0
 80072fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072fe:	e068      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007300:	4b07      	ldr	r3, [pc, #28]	@ (8007320 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007308:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800730c:	d102      	bne.n	8007314 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800730e:	4b07      	ldr	r3, [pc, #28]	@ (800732c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007310:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007312:	e05e      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007314:	2300      	movs	r3, #0
 8007316:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007318:	e05b      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800731a:	2300      	movs	r3, #0
 800731c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800731e:	e058      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007320:	58024400 	.word	0x58024400
 8007324:	03d09000 	.word	0x03d09000
 8007328:	003d0900 	.word	0x003d0900
 800732c:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007330:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007334:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007338:	430b      	orrs	r3, r1
 800733a:	d148      	bne.n	80073ce <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800733c:	4b27      	ldr	r3, [pc, #156]	@ (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800733e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007340:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007344:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007348:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800734c:	d02a      	beq.n	80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800734e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007350:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007354:	d838      	bhi.n	80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007358:	2b00      	cmp	r3, #0
 800735a:	d004      	beq.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800735c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800735e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007362:	d00d      	beq.n	8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007364:	e030      	b.n	80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007366:	4b1d      	ldr	r3, [pc, #116]	@ (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800736e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007372:	d102      	bne.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007374:	4b1a      	ldr	r3, [pc, #104]	@ (80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007376:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007378:	e02b      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800737a:	2300      	movs	r3, #0
 800737c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800737e:	e028      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007380:	4b16      	ldr	r3, [pc, #88]	@ (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007388:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800738c:	d107      	bne.n	800739e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800738e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007392:	4618      	mov	r0, r3
 8007394:	f000 fae4 	bl	8007960 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800739a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800739c:	e019      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800739e:	2300      	movs	r3, #0
 80073a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073a2:	e016      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80073a4:	4b0d      	ldr	r3, [pc, #52]	@ (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80073b0:	d107      	bne.n	80073c2 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073b2:	f107 0318 	add.w	r3, r7, #24
 80073b6:	4618      	mov	r0, r3
 80073b8:	f000 f82a 	bl	8007410 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80073bc:	69fb      	ldr	r3, [r7, #28]
 80073be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073c0:	e007      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80073c2:	2300      	movs	r3, #0
 80073c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073c6:	e004      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80073c8:	2300      	movs	r3, #0
 80073ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073cc:	e001      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80073ce:	2300      	movs	r3, #0
 80073d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80073d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3740      	adds	r7, #64	@ 0x40
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	58024400 	.word	0x58024400
 80073e0:	007a1200 	.word	0x007a1200

080073e4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80073e8:	f7fe f816 	bl	8005418 <HAL_RCC_GetHCLKFreq>
 80073ec:	4602      	mov	r2, r0
 80073ee:	4b06      	ldr	r3, [pc, #24]	@ (8007408 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80073f0:	6a1b      	ldr	r3, [r3, #32]
 80073f2:	091b      	lsrs	r3, r3, #4
 80073f4:	f003 0307 	and.w	r3, r3, #7
 80073f8:	4904      	ldr	r1, [pc, #16]	@ (800740c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80073fa:	5ccb      	ldrb	r3, [r1, r3]
 80073fc:	f003 031f 	and.w	r3, r3, #31
 8007400:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007404:	4618      	mov	r0, r3
 8007406:	bd80      	pop	{r7, pc}
 8007408:	58024400 	.word	0x58024400
 800740c:	0800a844 	.word	0x0800a844

08007410 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007410:	b480      	push	{r7}
 8007412:	b089      	sub	sp, #36	@ 0x24
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007418:	4ba1      	ldr	r3, [pc, #644]	@ (80076a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800741a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800741c:	f003 0303 	and.w	r3, r3, #3
 8007420:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007422:	4b9f      	ldr	r3, [pc, #636]	@ (80076a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007426:	0b1b      	lsrs	r3, r3, #12
 8007428:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800742c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800742e:	4b9c      	ldr	r3, [pc, #624]	@ (80076a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007432:	091b      	lsrs	r3, r3, #4
 8007434:	f003 0301 	and.w	r3, r3, #1
 8007438:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800743a:	4b99      	ldr	r3, [pc, #612]	@ (80076a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800743c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800743e:	08db      	lsrs	r3, r3, #3
 8007440:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007444:	693a      	ldr	r2, [r7, #16]
 8007446:	fb02 f303 	mul.w	r3, r2, r3
 800744a:	ee07 3a90 	vmov	s15, r3
 800744e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007452:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	2b00      	cmp	r3, #0
 800745a:	f000 8111 	beq.w	8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	2b02      	cmp	r3, #2
 8007462:	f000 8083 	beq.w	800756c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	2b02      	cmp	r3, #2
 800746a:	f200 80a1 	bhi.w	80075b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d003      	beq.n	800747c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007474:	69bb      	ldr	r3, [r7, #24]
 8007476:	2b01      	cmp	r3, #1
 8007478:	d056      	beq.n	8007528 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800747a:	e099      	b.n	80075b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800747c:	4b88      	ldr	r3, [pc, #544]	@ (80076a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f003 0320 	and.w	r3, r3, #32
 8007484:	2b00      	cmp	r3, #0
 8007486:	d02d      	beq.n	80074e4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007488:	4b85      	ldr	r3, [pc, #532]	@ (80076a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	08db      	lsrs	r3, r3, #3
 800748e:	f003 0303 	and.w	r3, r3, #3
 8007492:	4a84      	ldr	r2, [pc, #528]	@ (80076a4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007494:	fa22 f303 	lsr.w	r3, r2, r3
 8007498:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	ee07 3a90 	vmov	s15, r3
 80074a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	ee07 3a90 	vmov	s15, r3
 80074aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074b2:	4b7b      	ldr	r3, [pc, #492]	@ (80076a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074ba:	ee07 3a90 	vmov	s15, r3
 80074be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80074c6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80076a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80074ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80074e2:	e087      	b.n	80075f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	ee07 3a90 	vmov	s15, r3
 80074ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ee:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80076ac <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80074f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074f6:	4b6a      	ldr	r3, [pc, #424]	@ (80076a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074fe:	ee07 3a90 	vmov	s15, r3
 8007502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007506:	ed97 6a03 	vldr	s12, [r7, #12]
 800750a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80076a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800750e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007516:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800751a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800751e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007522:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007526:	e065      	b.n	80075f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	ee07 3a90 	vmov	s15, r3
 800752e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007532:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80076b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800753a:	4b59      	ldr	r3, [pc, #356]	@ (80076a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800753c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800753e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007542:	ee07 3a90 	vmov	s15, r3
 8007546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800754a:	ed97 6a03 	vldr	s12, [r7, #12]
 800754e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80076a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800755a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800755e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007566:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800756a:	e043      	b.n	80075f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	ee07 3a90 	vmov	s15, r3
 8007572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007576:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80076b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800757a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800757e:	4b48      	ldr	r3, [pc, #288]	@ (80076a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007586:	ee07 3a90 	vmov	s15, r3
 800758a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800758e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007592:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80076a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800759a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800759e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075ae:	e021      	b.n	80075f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	ee07 3a90 	vmov	s15, r3
 80075b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ba:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80076b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80075be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075c2:	4b37      	ldr	r3, [pc, #220]	@ (80076a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ca:	ee07 3a90 	vmov	s15, r3
 80075ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80075d6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80076a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80075da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075f2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80075f4:	4b2a      	ldr	r3, [pc, #168]	@ (80076a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075f8:	0a5b      	lsrs	r3, r3, #9
 80075fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075fe:	ee07 3a90 	vmov	s15, r3
 8007602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007606:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800760a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800760e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007612:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007616:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800761a:	ee17 2a90 	vmov	r2, s15
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007622:	4b1f      	ldr	r3, [pc, #124]	@ (80076a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007626:	0c1b      	lsrs	r3, r3, #16
 8007628:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800762c:	ee07 3a90 	vmov	s15, r3
 8007630:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007634:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007638:	ee37 7a87 	vadd.f32	s14, s15, s14
 800763c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007640:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007644:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007648:	ee17 2a90 	vmov	r2, s15
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007650:	4b13      	ldr	r3, [pc, #76]	@ (80076a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007654:	0e1b      	lsrs	r3, r3, #24
 8007656:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800765a:	ee07 3a90 	vmov	s15, r3
 800765e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007662:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007666:	ee37 7a87 	vadd.f32	s14, s15, s14
 800766a:	edd7 6a07 	vldr	s13, [r7, #28]
 800766e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007672:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007676:	ee17 2a90 	vmov	r2, s15
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800767e:	e008      	b.n	8007692 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	609a      	str	r2, [r3, #8]
}
 8007692:	bf00      	nop
 8007694:	3724      	adds	r7, #36	@ 0x24
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr
 800769e:	bf00      	nop
 80076a0:	58024400 	.word	0x58024400
 80076a4:	03d09000 	.word	0x03d09000
 80076a8:	46000000 	.word	0x46000000
 80076ac:	4c742400 	.word	0x4c742400
 80076b0:	4a742400 	.word	0x4a742400
 80076b4:	4af42400 	.word	0x4af42400

080076b8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b089      	sub	sp, #36	@ 0x24
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80076c0:	4ba1      	ldr	r3, [pc, #644]	@ (8007948 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076c4:	f003 0303 	and.w	r3, r3, #3
 80076c8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80076ca:	4b9f      	ldr	r3, [pc, #636]	@ (8007948 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ce:	0d1b      	lsrs	r3, r3, #20
 80076d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80076d4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80076d6:	4b9c      	ldr	r3, [pc, #624]	@ (8007948 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076da:	0a1b      	lsrs	r3, r3, #8
 80076dc:	f003 0301 	and.w	r3, r3, #1
 80076e0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80076e2:	4b99      	ldr	r3, [pc, #612]	@ (8007948 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076e6:	08db      	lsrs	r3, r3, #3
 80076e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80076ec:	693a      	ldr	r2, [r7, #16]
 80076ee:	fb02 f303 	mul.w	r3, r2, r3
 80076f2:	ee07 3a90 	vmov	s15, r3
 80076f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076fa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	2b00      	cmp	r3, #0
 8007702:	f000 8111 	beq.w	8007928 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007706:	69bb      	ldr	r3, [r7, #24]
 8007708:	2b02      	cmp	r3, #2
 800770a:	f000 8083 	beq.w	8007814 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800770e:	69bb      	ldr	r3, [r7, #24]
 8007710:	2b02      	cmp	r3, #2
 8007712:	f200 80a1 	bhi.w	8007858 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d003      	beq.n	8007724 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	2b01      	cmp	r3, #1
 8007720:	d056      	beq.n	80077d0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007722:	e099      	b.n	8007858 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007724:	4b88      	ldr	r3, [pc, #544]	@ (8007948 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f003 0320 	and.w	r3, r3, #32
 800772c:	2b00      	cmp	r3, #0
 800772e:	d02d      	beq.n	800778c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007730:	4b85      	ldr	r3, [pc, #532]	@ (8007948 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	08db      	lsrs	r3, r3, #3
 8007736:	f003 0303 	and.w	r3, r3, #3
 800773a:	4a84      	ldr	r2, [pc, #528]	@ (800794c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800773c:	fa22 f303 	lsr.w	r3, r2, r3
 8007740:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	ee07 3a90 	vmov	s15, r3
 8007748:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	ee07 3a90 	vmov	s15, r3
 8007752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800775a:	4b7b      	ldr	r3, [pc, #492]	@ (8007948 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800775c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800775e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007762:	ee07 3a90 	vmov	s15, r3
 8007766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800776a:	ed97 6a03 	vldr	s12, [r7, #12]
 800776e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007950 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007772:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800777a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800777e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007786:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800778a:	e087      	b.n	800789c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	ee07 3a90 	vmov	s15, r3
 8007792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007796:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007954 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800779a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800779e:	4b6a      	ldr	r3, [pc, #424]	@ (8007948 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077a6:	ee07 3a90 	vmov	s15, r3
 80077aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80077b2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007950 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80077b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077ce:	e065      	b.n	800789c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	ee07 3a90 	vmov	s15, r3
 80077d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077da:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007958 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80077de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077e2:	4b59      	ldr	r3, [pc, #356]	@ (8007948 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ea:	ee07 3a90 	vmov	s15, r3
 80077ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80077f6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007950 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80077fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007802:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007806:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800780a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800780e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007812:	e043      	b.n	800789c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	ee07 3a90 	vmov	s15, r3
 800781a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800781e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800795c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007826:	4b48      	ldr	r3, [pc, #288]	@ (8007948 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800782a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800782e:	ee07 3a90 	vmov	s15, r3
 8007832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007836:	ed97 6a03 	vldr	s12, [r7, #12]
 800783a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007950 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800783e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007846:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800784a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800784e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007852:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007856:	e021      	b.n	800789c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	ee07 3a90 	vmov	s15, r3
 800785e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007862:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007958 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800786a:	4b37      	ldr	r3, [pc, #220]	@ (8007948 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800786c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800786e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007872:	ee07 3a90 	vmov	s15, r3
 8007876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800787a:	ed97 6a03 	vldr	s12, [r7, #12]
 800787e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007950 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800788a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800788e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007896:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800789a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800789c:	4b2a      	ldr	r3, [pc, #168]	@ (8007948 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800789e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078a0:	0a5b      	lsrs	r3, r3, #9
 80078a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078a6:	ee07 3a90 	vmov	s15, r3
 80078aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80078b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80078ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078c2:	ee17 2a90 	vmov	r2, s15
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80078ca:	4b1f      	ldr	r3, [pc, #124]	@ (8007948 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078ce:	0c1b      	lsrs	r3, r3, #16
 80078d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078d4:	ee07 3a90 	vmov	s15, r3
 80078d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078dc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80078e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80078e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078f0:	ee17 2a90 	vmov	r2, s15
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80078f8:	4b13      	ldr	r3, [pc, #76]	@ (8007948 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078fc:	0e1b      	lsrs	r3, r3, #24
 80078fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007902:	ee07 3a90 	vmov	s15, r3
 8007906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800790a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800790e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007912:	edd7 6a07 	vldr	s13, [r7, #28]
 8007916:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800791a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800791e:	ee17 2a90 	vmov	r2, s15
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007926:	e008      	b.n	800793a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	609a      	str	r2, [r3, #8]
}
 800793a:	bf00      	nop
 800793c:	3724      	adds	r7, #36	@ 0x24
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop
 8007948:	58024400 	.word	0x58024400
 800794c:	03d09000 	.word	0x03d09000
 8007950:	46000000 	.word	0x46000000
 8007954:	4c742400 	.word	0x4c742400
 8007958:	4a742400 	.word	0x4a742400
 800795c:	4af42400 	.word	0x4af42400

08007960 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007960:	b480      	push	{r7}
 8007962:	b089      	sub	sp, #36	@ 0x24
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007968:	4ba0      	ldr	r3, [pc, #640]	@ (8007bec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800796a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800796c:	f003 0303 	and.w	r3, r3, #3
 8007970:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007972:	4b9e      	ldr	r3, [pc, #632]	@ (8007bec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007976:	091b      	lsrs	r3, r3, #4
 8007978:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800797c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800797e:	4b9b      	ldr	r3, [pc, #620]	@ (8007bec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007982:	f003 0301 	and.w	r3, r3, #1
 8007986:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007988:	4b98      	ldr	r3, [pc, #608]	@ (8007bec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800798a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800798c:	08db      	lsrs	r3, r3, #3
 800798e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007992:	693a      	ldr	r2, [r7, #16]
 8007994:	fb02 f303 	mul.w	r3, r2, r3
 8007998:	ee07 3a90 	vmov	s15, r3
 800799c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079a0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	f000 8111 	beq.w	8007bce <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	2b02      	cmp	r3, #2
 80079b0:	f000 8083 	beq.w	8007aba <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80079b4:	69bb      	ldr	r3, [r7, #24]
 80079b6:	2b02      	cmp	r3, #2
 80079b8:	f200 80a1 	bhi.w	8007afe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d003      	beq.n	80079ca <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80079c2:	69bb      	ldr	r3, [r7, #24]
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d056      	beq.n	8007a76 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80079c8:	e099      	b.n	8007afe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079ca:	4b88      	ldr	r3, [pc, #544]	@ (8007bec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f003 0320 	and.w	r3, r3, #32
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d02d      	beq.n	8007a32 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80079d6:	4b85      	ldr	r3, [pc, #532]	@ (8007bec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	08db      	lsrs	r3, r3, #3
 80079dc:	f003 0303 	and.w	r3, r3, #3
 80079e0:	4a83      	ldr	r2, [pc, #524]	@ (8007bf0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80079e2:	fa22 f303 	lsr.w	r3, r2, r3
 80079e6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	ee07 3a90 	vmov	s15, r3
 80079ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	ee07 3a90 	vmov	s15, r3
 80079f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a00:	4b7a      	ldr	r3, [pc, #488]	@ (8007bec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a08:	ee07 3a90 	vmov	s15, r3
 8007a0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a10:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a14:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8007bf4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007a18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a20:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a2c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007a30:	e087      	b.n	8007b42 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	ee07 3a90 	vmov	s15, r3
 8007a38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a3c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8007bf8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007a40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a44:	4b69      	ldr	r3, [pc, #420]	@ (8007bec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a4c:	ee07 3a90 	vmov	s15, r3
 8007a50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a54:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a58:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8007bf4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007a5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a64:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a70:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a74:	e065      	b.n	8007b42 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	ee07 3a90 	vmov	s15, r3
 8007a7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a80:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8007bfc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007a84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a88:	4b58      	ldr	r3, [pc, #352]	@ (8007bec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a90:	ee07 3a90 	vmov	s15, r3
 8007a94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a98:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a9c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8007bf4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007aa0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007aa4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007aa8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007aac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ab0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ab4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ab8:	e043      	b.n	8007b42 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	ee07 3a90 	vmov	s15, r3
 8007ac0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ac4:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8007c00 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007ac8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007acc:	4b47      	ldr	r3, [pc, #284]	@ (8007bec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ad4:	ee07 3a90 	vmov	s15, r3
 8007ad8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007adc:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ae0:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8007bf4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007ae4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ae8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007aec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007af0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007af4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007af8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007afc:	e021      	b.n	8007b42 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	ee07 3a90 	vmov	s15, r3
 8007b04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b08:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8007bf8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007b0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b10:	4b36      	ldr	r3, [pc, #216]	@ (8007bec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b18:	ee07 3a90 	vmov	s15, r3
 8007b1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b20:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b24:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8007bf4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007b28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b30:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b3c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b40:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007b42:	4b2a      	ldr	r3, [pc, #168]	@ (8007bec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b46:	0a5b      	lsrs	r3, r3, #9
 8007b48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b4c:	ee07 3a90 	vmov	s15, r3
 8007b50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b54:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b58:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b68:	ee17 2a90 	vmov	r2, s15
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007b70:	4b1e      	ldr	r3, [pc, #120]	@ (8007bec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b74:	0c1b      	lsrs	r3, r3, #16
 8007b76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b7a:	ee07 3a90 	vmov	s15, r3
 8007b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b96:	ee17 2a90 	vmov	r2, s15
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007b9e:	4b13      	ldr	r3, [pc, #76]	@ (8007bec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ba2:	0e1b      	lsrs	r3, r3, #24
 8007ba4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ba8:	ee07 3a90 	vmov	s15, r3
 8007bac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bb0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007bb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007bb8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bc4:	ee17 2a90 	vmov	r2, s15
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007bcc:	e008      	b.n	8007be0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	609a      	str	r2, [r3, #8]
}
 8007be0:	bf00      	nop
 8007be2:	3724      	adds	r7, #36	@ 0x24
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr
 8007bec:	58024400 	.word	0x58024400
 8007bf0:	03d09000 	.word	0x03d09000
 8007bf4:	46000000 	.word	0x46000000
 8007bf8:	4c742400 	.word	0x4c742400
 8007bfc:	4a742400 	.word	0x4a742400
 8007c00:	4af42400 	.word	0x4af42400

08007c04 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c12:	4b53      	ldr	r3, [pc, #332]	@ (8007d60 <RCCEx_PLL2_Config+0x15c>)
 8007c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c16:	f003 0303 	and.w	r3, r3, #3
 8007c1a:	2b03      	cmp	r3, #3
 8007c1c:	d101      	bne.n	8007c22 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e099      	b.n	8007d56 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007c22:	4b4f      	ldr	r3, [pc, #316]	@ (8007d60 <RCCEx_PLL2_Config+0x15c>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a4e      	ldr	r2, [pc, #312]	@ (8007d60 <RCCEx_PLL2_Config+0x15c>)
 8007c28:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007c2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c2e:	f7f9 fe31 	bl	8001894 <HAL_GetTick>
 8007c32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007c34:	e008      	b.n	8007c48 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007c36:	f7f9 fe2d 	bl	8001894 <HAL_GetTick>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	1ad3      	subs	r3, r2, r3
 8007c40:	2b02      	cmp	r3, #2
 8007c42:	d901      	bls.n	8007c48 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007c44:	2303      	movs	r3, #3
 8007c46:	e086      	b.n	8007d56 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007c48:	4b45      	ldr	r3, [pc, #276]	@ (8007d60 <RCCEx_PLL2_Config+0x15c>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d1f0      	bne.n	8007c36 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007c54:	4b42      	ldr	r3, [pc, #264]	@ (8007d60 <RCCEx_PLL2_Config+0x15c>)
 8007c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c58:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	031b      	lsls	r3, r3, #12
 8007c62:	493f      	ldr	r1, [pc, #252]	@ (8007d60 <RCCEx_PLL2_Config+0x15c>)
 8007c64:	4313      	orrs	r3, r2
 8007c66:	628b      	str	r3, [r1, #40]	@ 0x28
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	3b01      	subs	r3, #1
 8007c6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	689b      	ldr	r3, [r3, #8]
 8007c76:	3b01      	subs	r3, #1
 8007c78:	025b      	lsls	r3, r3, #9
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	431a      	orrs	r2, r3
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	68db      	ldr	r3, [r3, #12]
 8007c82:	3b01      	subs	r3, #1
 8007c84:	041b      	lsls	r3, r3, #16
 8007c86:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007c8a:	431a      	orrs	r2, r3
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	691b      	ldr	r3, [r3, #16]
 8007c90:	3b01      	subs	r3, #1
 8007c92:	061b      	lsls	r3, r3, #24
 8007c94:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007c98:	4931      	ldr	r1, [pc, #196]	@ (8007d60 <RCCEx_PLL2_Config+0x15c>)
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007c9e:	4b30      	ldr	r3, [pc, #192]	@ (8007d60 <RCCEx_PLL2_Config+0x15c>)
 8007ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ca2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	695b      	ldr	r3, [r3, #20]
 8007caa:	492d      	ldr	r1, [pc, #180]	@ (8007d60 <RCCEx_PLL2_Config+0x15c>)
 8007cac:	4313      	orrs	r3, r2
 8007cae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007cb0:	4b2b      	ldr	r3, [pc, #172]	@ (8007d60 <RCCEx_PLL2_Config+0x15c>)
 8007cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cb4:	f023 0220 	bic.w	r2, r3, #32
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	699b      	ldr	r3, [r3, #24]
 8007cbc:	4928      	ldr	r1, [pc, #160]	@ (8007d60 <RCCEx_PLL2_Config+0x15c>)
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007cc2:	4b27      	ldr	r3, [pc, #156]	@ (8007d60 <RCCEx_PLL2_Config+0x15c>)
 8007cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cc6:	4a26      	ldr	r2, [pc, #152]	@ (8007d60 <RCCEx_PLL2_Config+0x15c>)
 8007cc8:	f023 0310 	bic.w	r3, r3, #16
 8007ccc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007cce:	4b24      	ldr	r3, [pc, #144]	@ (8007d60 <RCCEx_PLL2_Config+0x15c>)
 8007cd0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007cd2:	4b24      	ldr	r3, [pc, #144]	@ (8007d64 <RCCEx_PLL2_Config+0x160>)
 8007cd4:	4013      	ands	r3, r2
 8007cd6:	687a      	ldr	r2, [r7, #4]
 8007cd8:	69d2      	ldr	r2, [r2, #28]
 8007cda:	00d2      	lsls	r2, r2, #3
 8007cdc:	4920      	ldr	r1, [pc, #128]	@ (8007d60 <RCCEx_PLL2_Config+0x15c>)
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007ce2:	4b1f      	ldr	r3, [pc, #124]	@ (8007d60 <RCCEx_PLL2_Config+0x15c>)
 8007ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ce6:	4a1e      	ldr	r2, [pc, #120]	@ (8007d60 <RCCEx_PLL2_Config+0x15c>)
 8007ce8:	f043 0310 	orr.w	r3, r3, #16
 8007cec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d106      	bne.n	8007d02 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007cf4:	4b1a      	ldr	r3, [pc, #104]	@ (8007d60 <RCCEx_PLL2_Config+0x15c>)
 8007cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cf8:	4a19      	ldr	r2, [pc, #100]	@ (8007d60 <RCCEx_PLL2_Config+0x15c>)
 8007cfa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007cfe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007d00:	e00f      	b.n	8007d22 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d106      	bne.n	8007d16 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007d08:	4b15      	ldr	r3, [pc, #84]	@ (8007d60 <RCCEx_PLL2_Config+0x15c>)
 8007d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d0c:	4a14      	ldr	r2, [pc, #80]	@ (8007d60 <RCCEx_PLL2_Config+0x15c>)
 8007d0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d12:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007d14:	e005      	b.n	8007d22 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007d16:	4b12      	ldr	r3, [pc, #72]	@ (8007d60 <RCCEx_PLL2_Config+0x15c>)
 8007d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d1a:	4a11      	ldr	r2, [pc, #68]	@ (8007d60 <RCCEx_PLL2_Config+0x15c>)
 8007d1c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007d20:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007d22:	4b0f      	ldr	r3, [pc, #60]	@ (8007d60 <RCCEx_PLL2_Config+0x15c>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a0e      	ldr	r2, [pc, #56]	@ (8007d60 <RCCEx_PLL2_Config+0x15c>)
 8007d28:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007d2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d2e:	f7f9 fdb1 	bl	8001894 <HAL_GetTick>
 8007d32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007d34:	e008      	b.n	8007d48 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007d36:	f7f9 fdad 	bl	8001894 <HAL_GetTick>
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	1ad3      	subs	r3, r2, r3
 8007d40:	2b02      	cmp	r3, #2
 8007d42:	d901      	bls.n	8007d48 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007d44:	2303      	movs	r3, #3
 8007d46:	e006      	b.n	8007d56 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007d48:	4b05      	ldr	r3, [pc, #20]	@ (8007d60 <RCCEx_PLL2_Config+0x15c>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d0f0      	beq.n	8007d36 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	58024400 	.word	0x58024400
 8007d64:	ffff0007 	.word	0xffff0007

08007d68 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d72:	2300      	movs	r3, #0
 8007d74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007d76:	4b53      	ldr	r3, [pc, #332]	@ (8007ec4 <RCCEx_PLL3_Config+0x15c>)
 8007d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d7a:	f003 0303 	and.w	r3, r3, #3
 8007d7e:	2b03      	cmp	r3, #3
 8007d80:	d101      	bne.n	8007d86 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	e099      	b.n	8007eba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007d86:	4b4f      	ldr	r3, [pc, #316]	@ (8007ec4 <RCCEx_PLL3_Config+0x15c>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a4e      	ldr	r2, [pc, #312]	@ (8007ec4 <RCCEx_PLL3_Config+0x15c>)
 8007d8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d92:	f7f9 fd7f 	bl	8001894 <HAL_GetTick>
 8007d96:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007d98:	e008      	b.n	8007dac <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007d9a:	f7f9 fd7b 	bl	8001894 <HAL_GetTick>
 8007d9e:	4602      	mov	r2, r0
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	1ad3      	subs	r3, r2, r3
 8007da4:	2b02      	cmp	r3, #2
 8007da6:	d901      	bls.n	8007dac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007da8:	2303      	movs	r3, #3
 8007daa:	e086      	b.n	8007eba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007dac:	4b45      	ldr	r3, [pc, #276]	@ (8007ec4 <RCCEx_PLL3_Config+0x15c>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d1f0      	bne.n	8007d9a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007db8:	4b42      	ldr	r3, [pc, #264]	@ (8007ec4 <RCCEx_PLL3_Config+0x15c>)
 8007dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dbc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	051b      	lsls	r3, r3, #20
 8007dc6:	493f      	ldr	r1, [pc, #252]	@ (8007ec4 <RCCEx_PLL3_Config+0x15c>)
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	628b      	str	r3, [r1, #40]	@ 0x28
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	3b01      	subs	r3, #1
 8007dd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	3b01      	subs	r3, #1
 8007ddc:	025b      	lsls	r3, r3, #9
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	431a      	orrs	r2, r3
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	3b01      	subs	r3, #1
 8007de8:	041b      	lsls	r3, r3, #16
 8007dea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007dee:	431a      	orrs	r2, r3
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	691b      	ldr	r3, [r3, #16]
 8007df4:	3b01      	subs	r3, #1
 8007df6:	061b      	lsls	r3, r3, #24
 8007df8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007dfc:	4931      	ldr	r1, [pc, #196]	@ (8007ec4 <RCCEx_PLL3_Config+0x15c>)
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007e02:	4b30      	ldr	r3, [pc, #192]	@ (8007ec4 <RCCEx_PLL3_Config+0x15c>)
 8007e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e06:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	695b      	ldr	r3, [r3, #20]
 8007e0e:	492d      	ldr	r1, [pc, #180]	@ (8007ec4 <RCCEx_PLL3_Config+0x15c>)
 8007e10:	4313      	orrs	r3, r2
 8007e12:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007e14:	4b2b      	ldr	r3, [pc, #172]	@ (8007ec4 <RCCEx_PLL3_Config+0x15c>)
 8007e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e18:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	699b      	ldr	r3, [r3, #24]
 8007e20:	4928      	ldr	r1, [pc, #160]	@ (8007ec4 <RCCEx_PLL3_Config+0x15c>)
 8007e22:	4313      	orrs	r3, r2
 8007e24:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007e26:	4b27      	ldr	r3, [pc, #156]	@ (8007ec4 <RCCEx_PLL3_Config+0x15c>)
 8007e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e2a:	4a26      	ldr	r2, [pc, #152]	@ (8007ec4 <RCCEx_PLL3_Config+0x15c>)
 8007e2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e30:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007e32:	4b24      	ldr	r3, [pc, #144]	@ (8007ec4 <RCCEx_PLL3_Config+0x15c>)
 8007e34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e36:	4b24      	ldr	r3, [pc, #144]	@ (8007ec8 <RCCEx_PLL3_Config+0x160>)
 8007e38:	4013      	ands	r3, r2
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	69d2      	ldr	r2, [r2, #28]
 8007e3e:	00d2      	lsls	r2, r2, #3
 8007e40:	4920      	ldr	r1, [pc, #128]	@ (8007ec4 <RCCEx_PLL3_Config+0x15c>)
 8007e42:	4313      	orrs	r3, r2
 8007e44:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007e46:	4b1f      	ldr	r3, [pc, #124]	@ (8007ec4 <RCCEx_PLL3_Config+0x15c>)
 8007e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e4a:	4a1e      	ldr	r2, [pc, #120]	@ (8007ec4 <RCCEx_PLL3_Config+0x15c>)
 8007e4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e50:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d106      	bne.n	8007e66 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007e58:	4b1a      	ldr	r3, [pc, #104]	@ (8007ec4 <RCCEx_PLL3_Config+0x15c>)
 8007e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e5c:	4a19      	ldr	r2, [pc, #100]	@ (8007ec4 <RCCEx_PLL3_Config+0x15c>)
 8007e5e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007e62:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007e64:	e00f      	b.n	8007e86 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d106      	bne.n	8007e7a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007e6c:	4b15      	ldr	r3, [pc, #84]	@ (8007ec4 <RCCEx_PLL3_Config+0x15c>)
 8007e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e70:	4a14      	ldr	r2, [pc, #80]	@ (8007ec4 <RCCEx_PLL3_Config+0x15c>)
 8007e72:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007e76:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007e78:	e005      	b.n	8007e86 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007e7a:	4b12      	ldr	r3, [pc, #72]	@ (8007ec4 <RCCEx_PLL3_Config+0x15c>)
 8007e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e7e:	4a11      	ldr	r2, [pc, #68]	@ (8007ec4 <RCCEx_PLL3_Config+0x15c>)
 8007e80:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007e84:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007e86:	4b0f      	ldr	r3, [pc, #60]	@ (8007ec4 <RCCEx_PLL3_Config+0x15c>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a0e      	ldr	r2, [pc, #56]	@ (8007ec4 <RCCEx_PLL3_Config+0x15c>)
 8007e8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e92:	f7f9 fcff 	bl	8001894 <HAL_GetTick>
 8007e96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007e98:	e008      	b.n	8007eac <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007e9a:	f7f9 fcfb 	bl	8001894 <HAL_GetTick>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	1ad3      	subs	r3, r2, r3
 8007ea4:	2b02      	cmp	r3, #2
 8007ea6:	d901      	bls.n	8007eac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007ea8:	2303      	movs	r3, #3
 8007eaa:	e006      	b.n	8007eba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007eac:	4b05      	ldr	r3, [pc, #20]	@ (8007ec4 <RCCEx_PLL3_Config+0x15c>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d0f0      	beq.n	8007e9a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3710      	adds	r7, #16
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
 8007ec2:	bf00      	nop
 8007ec4:	58024400 	.word	0x58024400
 8007ec8:	ffff0007 	.word	0xffff0007

08007ecc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b082      	sub	sp, #8
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d101      	bne.n	8007ede <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e049      	b.n	8007f72 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d106      	bne.n	8007ef8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f7f9 fa1e 	bl	8001334 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2202      	movs	r2, #2
 8007efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	3304      	adds	r3, #4
 8007f08:	4619      	mov	r1, r3
 8007f0a:	4610      	mov	r0, r2
 8007f0c:	f000 fbb0 	bl	8008670 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2201      	movs	r2, #1
 8007f14:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2201      	movs	r2, #1
 8007f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2201      	movs	r2, #1
 8007f64:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3708      	adds	r7, #8
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}

08007f7a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007f7a:	b580      	push	{r7, lr}
 8007f7c:	b082      	sub	sp, #8
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d101      	bne.n	8007f8c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	e049      	b.n	8008020 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d106      	bne.n	8007fa6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 f841 	bl	8008028 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2202      	movs	r2, #2
 8007faa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	3304      	adds	r3, #4
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	4610      	mov	r0, r2
 8007fba:	f000 fb59 	bl	8008670 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2201      	movs	r2, #1
 8007fca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2201      	movs	r2, #1
 8007fda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2201      	movs	r2, #1
 8007fea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2201      	movs	r2, #1
 8008002:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2201      	movs	r2, #1
 800800a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2201      	movs	r2, #1
 8008012:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2201      	movs	r2, #1
 800801a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800801e:	2300      	movs	r3, #0
}
 8008020:	4618      	mov	r0, r3
 8008022:	3708      	adds	r7, #8
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008030:	bf00      	nop
 8008032:	370c      	adds	r7, #12
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr

0800803c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b084      	sub	sp, #16
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d109      	bne.n	8008060 <HAL_TIM_PWM_Start+0x24>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008052:	b2db      	uxtb	r3, r3
 8008054:	2b01      	cmp	r3, #1
 8008056:	bf14      	ite	ne
 8008058:	2301      	movne	r3, #1
 800805a:	2300      	moveq	r3, #0
 800805c:	b2db      	uxtb	r3, r3
 800805e:	e03c      	b.n	80080da <HAL_TIM_PWM_Start+0x9e>
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	2b04      	cmp	r3, #4
 8008064:	d109      	bne.n	800807a <HAL_TIM_PWM_Start+0x3e>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800806c:	b2db      	uxtb	r3, r3
 800806e:	2b01      	cmp	r3, #1
 8008070:	bf14      	ite	ne
 8008072:	2301      	movne	r3, #1
 8008074:	2300      	moveq	r3, #0
 8008076:	b2db      	uxtb	r3, r3
 8008078:	e02f      	b.n	80080da <HAL_TIM_PWM_Start+0x9e>
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	2b08      	cmp	r3, #8
 800807e:	d109      	bne.n	8008094 <HAL_TIM_PWM_Start+0x58>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008086:	b2db      	uxtb	r3, r3
 8008088:	2b01      	cmp	r3, #1
 800808a:	bf14      	ite	ne
 800808c:	2301      	movne	r3, #1
 800808e:	2300      	moveq	r3, #0
 8008090:	b2db      	uxtb	r3, r3
 8008092:	e022      	b.n	80080da <HAL_TIM_PWM_Start+0x9e>
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	2b0c      	cmp	r3, #12
 8008098:	d109      	bne.n	80080ae <HAL_TIM_PWM_Start+0x72>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	bf14      	ite	ne
 80080a6:	2301      	movne	r3, #1
 80080a8:	2300      	moveq	r3, #0
 80080aa:	b2db      	uxtb	r3, r3
 80080ac:	e015      	b.n	80080da <HAL_TIM_PWM_Start+0x9e>
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	2b10      	cmp	r3, #16
 80080b2:	d109      	bne.n	80080c8 <HAL_TIM_PWM_Start+0x8c>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	2b01      	cmp	r3, #1
 80080be:	bf14      	ite	ne
 80080c0:	2301      	movne	r3, #1
 80080c2:	2300      	moveq	r3, #0
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	e008      	b.n	80080da <HAL_TIM_PWM_Start+0x9e>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	bf14      	ite	ne
 80080d4:	2301      	movne	r3, #1
 80080d6:	2300      	moveq	r3, #0
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d001      	beq.n	80080e2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	e0a1      	b.n	8008226 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d104      	bne.n	80080f2 <HAL_TIM_PWM_Start+0xb6>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2202      	movs	r2, #2
 80080ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80080f0:	e023      	b.n	800813a <HAL_TIM_PWM_Start+0xfe>
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	2b04      	cmp	r3, #4
 80080f6:	d104      	bne.n	8008102 <HAL_TIM_PWM_Start+0xc6>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2202      	movs	r2, #2
 80080fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008100:	e01b      	b.n	800813a <HAL_TIM_PWM_Start+0xfe>
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	2b08      	cmp	r3, #8
 8008106:	d104      	bne.n	8008112 <HAL_TIM_PWM_Start+0xd6>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2202      	movs	r2, #2
 800810c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008110:	e013      	b.n	800813a <HAL_TIM_PWM_Start+0xfe>
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	2b0c      	cmp	r3, #12
 8008116:	d104      	bne.n	8008122 <HAL_TIM_PWM_Start+0xe6>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2202      	movs	r2, #2
 800811c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008120:	e00b      	b.n	800813a <HAL_TIM_PWM_Start+0xfe>
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	2b10      	cmp	r3, #16
 8008126:	d104      	bne.n	8008132 <HAL_TIM_PWM_Start+0xf6>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2202      	movs	r2, #2
 800812c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008130:	e003      	b.n	800813a <HAL_TIM_PWM_Start+0xfe>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2202      	movs	r2, #2
 8008136:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	2201      	movs	r2, #1
 8008140:	6839      	ldr	r1, [r7, #0]
 8008142:	4618      	mov	r0, r3
 8008144:	f000 feae 	bl	8008ea4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a38      	ldr	r2, [pc, #224]	@ (8008230 <HAL_TIM_PWM_Start+0x1f4>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d013      	beq.n	800817a <HAL_TIM_PWM_Start+0x13e>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a37      	ldr	r2, [pc, #220]	@ (8008234 <HAL_TIM_PWM_Start+0x1f8>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d00e      	beq.n	800817a <HAL_TIM_PWM_Start+0x13e>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a35      	ldr	r2, [pc, #212]	@ (8008238 <HAL_TIM_PWM_Start+0x1fc>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d009      	beq.n	800817a <HAL_TIM_PWM_Start+0x13e>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a34      	ldr	r2, [pc, #208]	@ (800823c <HAL_TIM_PWM_Start+0x200>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d004      	beq.n	800817a <HAL_TIM_PWM_Start+0x13e>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a32      	ldr	r2, [pc, #200]	@ (8008240 <HAL_TIM_PWM_Start+0x204>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d101      	bne.n	800817e <HAL_TIM_PWM_Start+0x142>
 800817a:	2301      	movs	r3, #1
 800817c:	e000      	b.n	8008180 <HAL_TIM_PWM_Start+0x144>
 800817e:	2300      	movs	r3, #0
 8008180:	2b00      	cmp	r3, #0
 8008182:	d007      	beq.n	8008194 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008192:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a25      	ldr	r2, [pc, #148]	@ (8008230 <HAL_TIM_PWM_Start+0x1f4>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d022      	beq.n	80081e4 <HAL_TIM_PWM_Start+0x1a8>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081a6:	d01d      	beq.n	80081e4 <HAL_TIM_PWM_Start+0x1a8>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a25      	ldr	r2, [pc, #148]	@ (8008244 <HAL_TIM_PWM_Start+0x208>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d018      	beq.n	80081e4 <HAL_TIM_PWM_Start+0x1a8>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a24      	ldr	r2, [pc, #144]	@ (8008248 <HAL_TIM_PWM_Start+0x20c>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d013      	beq.n	80081e4 <HAL_TIM_PWM_Start+0x1a8>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a22      	ldr	r2, [pc, #136]	@ (800824c <HAL_TIM_PWM_Start+0x210>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d00e      	beq.n	80081e4 <HAL_TIM_PWM_Start+0x1a8>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a1a      	ldr	r2, [pc, #104]	@ (8008234 <HAL_TIM_PWM_Start+0x1f8>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d009      	beq.n	80081e4 <HAL_TIM_PWM_Start+0x1a8>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a1e      	ldr	r2, [pc, #120]	@ (8008250 <HAL_TIM_PWM_Start+0x214>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d004      	beq.n	80081e4 <HAL_TIM_PWM_Start+0x1a8>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a16      	ldr	r2, [pc, #88]	@ (8008238 <HAL_TIM_PWM_Start+0x1fc>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d115      	bne.n	8008210 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	689a      	ldr	r2, [r3, #8]
 80081ea:	4b1a      	ldr	r3, [pc, #104]	@ (8008254 <HAL_TIM_PWM_Start+0x218>)
 80081ec:	4013      	ands	r3, r2
 80081ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2b06      	cmp	r3, #6
 80081f4:	d015      	beq.n	8008222 <HAL_TIM_PWM_Start+0x1e6>
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081fc:	d011      	beq.n	8008222 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f042 0201 	orr.w	r2, r2, #1
 800820c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800820e:	e008      	b.n	8008222 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f042 0201 	orr.w	r2, r2, #1
 800821e:	601a      	str	r2, [r3, #0]
 8008220:	e000      	b.n	8008224 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008222:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008224:	2300      	movs	r3, #0
}
 8008226:	4618      	mov	r0, r3
 8008228:	3710      	adds	r7, #16
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	40010000 	.word	0x40010000
 8008234:	40010400 	.word	0x40010400
 8008238:	40014000 	.word	0x40014000
 800823c:	40014400 	.word	0x40014400
 8008240:	40014800 	.word	0x40014800
 8008244:	40000400 	.word	0x40000400
 8008248:	40000800 	.word	0x40000800
 800824c:	40000c00 	.word	0x40000c00
 8008250:	40001800 	.word	0x40001800
 8008254:	00010007 	.word	0x00010007

08008258 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b086      	sub	sp, #24
 800825c:	af00      	add	r7, sp, #0
 800825e:	60f8      	str	r0, [r7, #12]
 8008260:	60b9      	str	r1, [r7, #8]
 8008262:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008264:	2300      	movs	r3, #0
 8008266:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800826e:	2b01      	cmp	r3, #1
 8008270:	d101      	bne.n	8008276 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008272:	2302      	movs	r3, #2
 8008274:	e0ff      	b.n	8008476 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2201      	movs	r2, #1
 800827a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2b14      	cmp	r3, #20
 8008282:	f200 80f0 	bhi.w	8008466 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008286:	a201      	add	r2, pc, #4	@ (adr r2, 800828c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800828c:	080082e1 	.word	0x080082e1
 8008290:	08008467 	.word	0x08008467
 8008294:	08008467 	.word	0x08008467
 8008298:	08008467 	.word	0x08008467
 800829c:	08008321 	.word	0x08008321
 80082a0:	08008467 	.word	0x08008467
 80082a4:	08008467 	.word	0x08008467
 80082a8:	08008467 	.word	0x08008467
 80082ac:	08008363 	.word	0x08008363
 80082b0:	08008467 	.word	0x08008467
 80082b4:	08008467 	.word	0x08008467
 80082b8:	08008467 	.word	0x08008467
 80082bc:	080083a3 	.word	0x080083a3
 80082c0:	08008467 	.word	0x08008467
 80082c4:	08008467 	.word	0x08008467
 80082c8:	08008467 	.word	0x08008467
 80082cc:	080083e5 	.word	0x080083e5
 80082d0:	08008467 	.word	0x08008467
 80082d4:	08008467 	.word	0x08008467
 80082d8:	08008467 	.word	0x08008467
 80082dc:	08008425 	.word	0x08008425
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	68b9      	ldr	r1, [r7, #8]
 80082e6:	4618      	mov	r0, r3
 80082e8:	f000 fa68 	bl	80087bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	699a      	ldr	r2, [r3, #24]
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f042 0208 	orr.w	r2, r2, #8
 80082fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	699a      	ldr	r2, [r3, #24]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f022 0204 	bic.w	r2, r2, #4
 800830a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	6999      	ldr	r1, [r3, #24]
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	691a      	ldr	r2, [r3, #16]
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	430a      	orrs	r2, r1
 800831c:	619a      	str	r2, [r3, #24]
      break;
 800831e:	e0a5      	b.n	800846c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	68b9      	ldr	r1, [r7, #8]
 8008326:	4618      	mov	r0, r3
 8008328:	f000 fad8 	bl	80088dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	699a      	ldr	r2, [r3, #24]
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800833a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	699a      	ldr	r2, [r3, #24]
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800834a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	6999      	ldr	r1, [r3, #24]
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	691b      	ldr	r3, [r3, #16]
 8008356:	021a      	lsls	r2, r3, #8
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	430a      	orrs	r2, r1
 800835e:	619a      	str	r2, [r3, #24]
      break;
 8008360:	e084      	b.n	800846c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	68b9      	ldr	r1, [r7, #8]
 8008368:	4618      	mov	r0, r3
 800836a:	f000 fb41 	bl	80089f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	69da      	ldr	r2, [r3, #28]
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f042 0208 	orr.w	r2, r2, #8
 800837c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	69da      	ldr	r2, [r3, #28]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f022 0204 	bic.w	r2, r2, #4
 800838c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	69d9      	ldr	r1, [r3, #28]
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	691a      	ldr	r2, [r3, #16]
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	430a      	orrs	r2, r1
 800839e:	61da      	str	r2, [r3, #28]
      break;
 80083a0:	e064      	b.n	800846c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	68b9      	ldr	r1, [r7, #8]
 80083a8:	4618      	mov	r0, r3
 80083aa:	f000 fba9 	bl	8008b00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	69da      	ldr	r2, [r3, #28]
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80083bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	69da      	ldr	r2, [r3, #28]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80083cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	69d9      	ldr	r1, [r3, #28]
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	691b      	ldr	r3, [r3, #16]
 80083d8:	021a      	lsls	r2, r3, #8
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	430a      	orrs	r2, r1
 80083e0:	61da      	str	r2, [r3, #28]
      break;
 80083e2:	e043      	b.n	800846c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	68b9      	ldr	r1, [r7, #8]
 80083ea:	4618      	mov	r0, r3
 80083ec:	f000 fbf2 	bl	8008bd4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f042 0208 	orr.w	r2, r2, #8
 80083fe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f022 0204 	bic.w	r2, r2, #4
 800840e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	691a      	ldr	r2, [r3, #16]
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	430a      	orrs	r2, r1
 8008420:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008422:	e023      	b.n	800846c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	68b9      	ldr	r1, [r7, #8]
 800842a:	4618      	mov	r0, r3
 800842c:	f000 fc36 	bl	8008c9c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800843e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800844e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	691b      	ldr	r3, [r3, #16]
 800845a:	021a      	lsls	r2, r3, #8
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	430a      	orrs	r2, r1
 8008462:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008464:	e002      	b.n	800846c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008466:	2301      	movs	r3, #1
 8008468:	75fb      	strb	r3, [r7, #23]
      break;
 800846a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2200      	movs	r2, #0
 8008470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008474:	7dfb      	ldrb	r3, [r7, #23]
}
 8008476:	4618      	mov	r0, r3
 8008478:	3718      	adds	r7, #24
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
 800847e:	bf00      	nop

08008480 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b084      	sub	sp, #16
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800848a:	2300      	movs	r3, #0
 800848c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008494:	2b01      	cmp	r3, #1
 8008496:	d101      	bne.n	800849c <HAL_TIM_ConfigClockSource+0x1c>
 8008498:	2302      	movs	r3, #2
 800849a:	e0dc      	b.n	8008656 <HAL_TIM_ConfigClockSource+0x1d6>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2201      	movs	r2, #1
 80084a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2202      	movs	r2, #2
 80084a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80084b4:	68ba      	ldr	r2, [r7, #8]
 80084b6:	4b6a      	ldr	r3, [pc, #424]	@ (8008660 <HAL_TIM_ConfigClockSource+0x1e0>)
 80084b8:	4013      	ands	r3, r2
 80084ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80084c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	68ba      	ldr	r2, [r7, #8]
 80084ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a64      	ldr	r2, [pc, #400]	@ (8008664 <HAL_TIM_ConfigClockSource+0x1e4>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	f000 80a9 	beq.w	800862a <HAL_TIM_ConfigClockSource+0x1aa>
 80084d8:	4a62      	ldr	r2, [pc, #392]	@ (8008664 <HAL_TIM_ConfigClockSource+0x1e4>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	f200 80ae 	bhi.w	800863c <HAL_TIM_ConfigClockSource+0x1bc>
 80084e0:	4a61      	ldr	r2, [pc, #388]	@ (8008668 <HAL_TIM_ConfigClockSource+0x1e8>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	f000 80a1 	beq.w	800862a <HAL_TIM_ConfigClockSource+0x1aa>
 80084e8:	4a5f      	ldr	r2, [pc, #380]	@ (8008668 <HAL_TIM_ConfigClockSource+0x1e8>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	f200 80a6 	bhi.w	800863c <HAL_TIM_ConfigClockSource+0x1bc>
 80084f0:	4a5e      	ldr	r2, [pc, #376]	@ (800866c <HAL_TIM_ConfigClockSource+0x1ec>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	f000 8099 	beq.w	800862a <HAL_TIM_ConfigClockSource+0x1aa>
 80084f8:	4a5c      	ldr	r2, [pc, #368]	@ (800866c <HAL_TIM_ConfigClockSource+0x1ec>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	f200 809e 	bhi.w	800863c <HAL_TIM_ConfigClockSource+0x1bc>
 8008500:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008504:	f000 8091 	beq.w	800862a <HAL_TIM_ConfigClockSource+0x1aa>
 8008508:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800850c:	f200 8096 	bhi.w	800863c <HAL_TIM_ConfigClockSource+0x1bc>
 8008510:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008514:	f000 8089 	beq.w	800862a <HAL_TIM_ConfigClockSource+0x1aa>
 8008518:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800851c:	f200 808e 	bhi.w	800863c <HAL_TIM_ConfigClockSource+0x1bc>
 8008520:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008524:	d03e      	beq.n	80085a4 <HAL_TIM_ConfigClockSource+0x124>
 8008526:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800852a:	f200 8087 	bhi.w	800863c <HAL_TIM_ConfigClockSource+0x1bc>
 800852e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008532:	f000 8086 	beq.w	8008642 <HAL_TIM_ConfigClockSource+0x1c2>
 8008536:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800853a:	d87f      	bhi.n	800863c <HAL_TIM_ConfigClockSource+0x1bc>
 800853c:	2b70      	cmp	r3, #112	@ 0x70
 800853e:	d01a      	beq.n	8008576 <HAL_TIM_ConfigClockSource+0xf6>
 8008540:	2b70      	cmp	r3, #112	@ 0x70
 8008542:	d87b      	bhi.n	800863c <HAL_TIM_ConfigClockSource+0x1bc>
 8008544:	2b60      	cmp	r3, #96	@ 0x60
 8008546:	d050      	beq.n	80085ea <HAL_TIM_ConfigClockSource+0x16a>
 8008548:	2b60      	cmp	r3, #96	@ 0x60
 800854a:	d877      	bhi.n	800863c <HAL_TIM_ConfigClockSource+0x1bc>
 800854c:	2b50      	cmp	r3, #80	@ 0x50
 800854e:	d03c      	beq.n	80085ca <HAL_TIM_ConfigClockSource+0x14a>
 8008550:	2b50      	cmp	r3, #80	@ 0x50
 8008552:	d873      	bhi.n	800863c <HAL_TIM_ConfigClockSource+0x1bc>
 8008554:	2b40      	cmp	r3, #64	@ 0x40
 8008556:	d058      	beq.n	800860a <HAL_TIM_ConfigClockSource+0x18a>
 8008558:	2b40      	cmp	r3, #64	@ 0x40
 800855a:	d86f      	bhi.n	800863c <HAL_TIM_ConfigClockSource+0x1bc>
 800855c:	2b30      	cmp	r3, #48	@ 0x30
 800855e:	d064      	beq.n	800862a <HAL_TIM_ConfigClockSource+0x1aa>
 8008560:	2b30      	cmp	r3, #48	@ 0x30
 8008562:	d86b      	bhi.n	800863c <HAL_TIM_ConfigClockSource+0x1bc>
 8008564:	2b20      	cmp	r3, #32
 8008566:	d060      	beq.n	800862a <HAL_TIM_ConfigClockSource+0x1aa>
 8008568:	2b20      	cmp	r3, #32
 800856a:	d867      	bhi.n	800863c <HAL_TIM_ConfigClockSource+0x1bc>
 800856c:	2b00      	cmp	r3, #0
 800856e:	d05c      	beq.n	800862a <HAL_TIM_ConfigClockSource+0x1aa>
 8008570:	2b10      	cmp	r3, #16
 8008572:	d05a      	beq.n	800862a <HAL_TIM_ConfigClockSource+0x1aa>
 8008574:	e062      	b.n	800863c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008586:	f000 fc6d 	bl	8008e64 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	689b      	ldr	r3, [r3, #8]
 8008590:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008598:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	68ba      	ldr	r2, [r7, #8]
 80085a0:	609a      	str	r2, [r3, #8]
      break;
 80085a2:	e04f      	b.n	8008644 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80085b4:	f000 fc56 	bl	8008e64 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	689a      	ldr	r2, [r3, #8]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80085c6:	609a      	str	r2, [r3, #8]
      break;
 80085c8:	e03c      	b.n	8008644 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80085d6:	461a      	mov	r2, r3
 80085d8:	f000 fbc6 	bl	8008d68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	2150      	movs	r1, #80	@ 0x50
 80085e2:	4618      	mov	r0, r3
 80085e4:	f000 fc20 	bl	8008e28 <TIM_ITRx_SetConfig>
      break;
 80085e8:	e02c      	b.n	8008644 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80085f6:	461a      	mov	r2, r3
 80085f8:	f000 fbe5 	bl	8008dc6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2160      	movs	r1, #96	@ 0x60
 8008602:	4618      	mov	r0, r3
 8008604:	f000 fc10 	bl	8008e28 <TIM_ITRx_SetConfig>
      break;
 8008608:	e01c      	b.n	8008644 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008616:	461a      	mov	r2, r3
 8008618:	f000 fba6 	bl	8008d68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2140      	movs	r1, #64	@ 0x40
 8008622:	4618      	mov	r0, r3
 8008624:	f000 fc00 	bl	8008e28 <TIM_ITRx_SetConfig>
      break;
 8008628:	e00c      	b.n	8008644 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681a      	ldr	r2, [r3, #0]
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4619      	mov	r1, r3
 8008634:	4610      	mov	r0, r2
 8008636:	f000 fbf7 	bl	8008e28 <TIM_ITRx_SetConfig>
      break;
 800863a:	e003      	b.n	8008644 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800863c:	2301      	movs	r3, #1
 800863e:	73fb      	strb	r3, [r7, #15]
      break;
 8008640:	e000      	b.n	8008644 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008642:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2201      	movs	r2, #1
 8008648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2200      	movs	r2, #0
 8008650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008654:	7bfb      	ldrb	r3, [r7, #15]
}
 8008656:	4618      	mov	r0, r3
 8008658:	3710      	adds	r7, #16
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	ffceff88 	.word	0xffceff88
 8008664:	00100040 	.word	0x00100040
 8008668:	00100030 	.word	0x00100030
 800866c:	00100020 	.word	0x00100020

08008670 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008670:	b480      	push	{r7}
 8008672:	b085      	sub	sp, #20
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	4a46      	ldr	r2, [pc, #280]	@ (800879c <TIM_Base_SetConfig+0x12c>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d013      	beq.n	80086b0 <TIM_Base_SetConfig+0x40>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800868e:	d00f      	beq.n	80086b0 <TIM_Base_SetConfig+0x40>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	4a43      	ldr	r2, [pc, #268]	@ (80087a0 <TIM_Base_SetConfig+0x130>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d00b      	beq.n	80086b0 <TIM_Base_SetConfig+0x40>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	4a42      	ldr	r2, [pc, #264]	@ (80087a4 <TIM_Base_SetConfig+0x134>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d007      	beq.n	80086b0 <TIM_Base_SetConfig+0x40>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	4a41      	ldr	r2, [pc, #260]	@ (80087a8 <TIM_Base_SetConfig+0x138>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d003      	beq.n	80086b0 <TIM_Base_SetConfig+0x40>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	4a40      	ldr	r2, [pc, #256]	@ (80087ac <TIM_Base_SetConfig+0x13c>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d108      	bne.n	80086c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	68fa      	ldr	r2, [r7, #12]
 80086be:	4313      	orrs	r3, r2
 80086c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	4a35      	ldr	r2, [pc, #212]	@ (800879c <TIM_Base_SetConfig+0x12c>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d01f      	beq.n	800870a <TIM_Base_SetConfig+0x9a>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086d0:	d01b      	beq.n	800870a <TIM_Base_SetConfig+0x9a>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	4a32      	ldr	r2, [pc, #200]	@ (80087a0 <TIM_Base_SetConfig+0x130>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d017      	beq.n	800870a <TIM_Base_SetConfig+0x9a>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	4a31      	ldr	r2, [pc, #196]	@ (80087a4 <TIM_Base_SetConfig+0x134>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d013      	beq.n	800870a <TIM_Base_SetConfig+0x9a>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	4a30      	ldr	r2, [pc, #192]	@ (80087a8 <TIM_Base_SetConfig+0x138>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d00f      	beq.n	800870a <TIM_Base_SetConfig+0x9a>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	4a2f      	ldr	r2, [pc, #188]	@ (80087ac <TIM_Base_SetConfig+0x13c>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d00b      	beq.n	800870a <TIM_Base_SetConfig+0x9a>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	4a2e      	ldr	r2, [pc, #184]	@ (80087b0 <TIM_Base_SetConfig+0x140>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d007      	beq.n	800870a <TIM_Base_SetConfig+0x9a>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4a2d      	ldr	r2, [pc, #180]	@ (80087b4 <TIM_Base_SetConfig+0x144>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d003      	beq.n	800870a <TIM_Base_SetConfig+0x9a>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4a2c      	ldr	r2, [pc, #176]	@ (80087b8 <TIM_Base_SetConfig+0x148>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d108      	bne.n	800871c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008710:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	68db      	ldr	r3, [r3, #12]
 8008716:	68fa      	ldr	r2, [r7, #12]
 8008718:	4313      	orrs	r3, r2
 800871a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	695b      	ldr	r3, [r3, #20]
 8008726:	4313      	orrs	r3, r2
 8008728:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	68fa      	ldr	r2, [r7, #12]
 800872e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	689a      	ldr	r2, [r3, #8]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	4a16      	ldr	r2, [pc, #88]	@ (800879c <TIM_Base_SetConfig+0x12c>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d00f      	beq.n	8008768 <TIM_Base_SetConfig+0xf8>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4a18      	ldr	r2, [pc, #96]	@ (80087ac <TIM_Base_SetConfig+0x13c>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d00b      	beq.n	8008768 <TIM_Base_SetConfig+0xf8>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	4a17      	ldr	r2, [pc, #92]	@ (80087b0 <TIM_Base_SetConfig+0x140>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d007      	beq.n	8008768 <TIM_Base_SetConfig+0xf8>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4a16      	ldr	r2, [pc, #88]	@ (80087b4 <TIM_Base_SetConfig+0x144>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d003      	beq.n	8008768 <TIM_Base_SetConfig+0xf8>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4a15      	ldr	r2, [pc, #84]	@ (80087b8 <TIM_Base_SetConfig+0x148>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d103      	bne.n	8008770 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	691a      	ldr	r2, [r3, #16]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2201      	movs	r2, #1
 8008774:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	691b      	ldr	r3, [r3, #16]
 800877a:	f003 0301 	and.w	r3, r3, #1
 800877e:	2b01      	cmp	r3, #1
 8008780:	d105      	bne.n	800878e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	691b      	ldr	r3, [r3, #16]
 8008786:	f023 0201 	bic.w	r2, r3, #1
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	611a      	str	r2, [r3, #16]
  }
}
 800878e:	bf00      	nop
 8008790:	3714      	adds	r7, #20
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr
 800879a:	bf00      	nop
 800879c:	40010000 	.word	0x40010000
 80087a0:	40000400 	.word	0x40000400
 80087a4:	40000800 	.word	0x40000800
 80087a8:	40000c00 	.word	0x40000c00
 80087ac:	40010400 	.word	0x40010400
 80087b0:	40014000 	.word	0x40014000
 80087b4:	40014400 	.word	0x40014400
 80087b8:	40014800 	.word	0x40014800

080087bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80087bc:	b480      	push	{r7}
 80087be:	b087      	sub	sp, #28
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6a1b      	ldr	r3, [r3, #32]
 80087ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6a1b      	ldr	r3, [r3, #32]
 80087d0:	f023 0201 	bic.w	r2, r3, #1
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	699b      	ldr	r3, [r3, #24]
 80087e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80087e4:	68fa      	ldr	r2, [r7, #12]
 80087e6:	4b37      	ldr	r3, [pc, #220]	@ (80088c4 <TIM_OC1_SetConfig+0x108>)
 80087e8:	4013      	ands	r3, r2
 80087ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f023 0303 	bic.w	r3, r3, #3
 80087f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	68fa      	ldr	r2, [r7, #12]
 80087fa:	4313      	orrs	r3, r2
 80087fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	f023 0302 	bic.w	r3, r3, #2
 8008804:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	689b      	ldr	r3, [r3, #8]
 800880a:	697a      	ldr	r2, [r7, #20]
 800880c:	4313      	orrs	r3, r2
 800880e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	4a2d      	ldr	r2, [pc, #180]	@ (80088c8 <TIM_OC1_SetConfig+0x10c>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d00f      	beq.n	8008838 <TIM_OC1_SetConfig+0x7c>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	4a2c      	ldr	r2, [pc, #176]	@ (80088cc <TIM_OC1_SetConfig+0x110>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d00b      	beq.n	8008838 <TIM_OC1_SetConfig+0x7c>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	4a2b      	ldr	r2, [pc, #172]	@ (80088d0 <TIM_OC1_SetConfig+0x114>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d007      	beq.n	8008838 <TIM_OC1_SetConfig+0x7c>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	4a2a      	ldr	r2, [pc, #168]	@ (80088d4 <TIM_OC1_SetConfig+0x118>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d003      	beq.n	8008838 <TIM_OC1_SetConfig+0x7c>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	4a29      	ldr	r2, [pc, #164]	@ (80088d8 <TIM_OC1_SetConfig+0x11c>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d10c      	bne.n	8008852 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	f023 0308 	bic.w	r3, r3, #8
 800883e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	68db      	ldr	r3, [r3, #12]
 8008844:	697a      	ldr	r2, [r7, #20]
 8008846:	4313      	orrs	r3, r2
 8008848:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	f023 0304 	bic.w	r3, r3, #4
 8008850:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	4a1c      	ldr	r2, [pc, #112]	@ (80088c8 <TIM_OC1_SetConfig+0x10c>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d00f      	beq.n	800887a <TIM_OC1_SetConfig+0xbe>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	4a1b      	ldr	r2, [pc, #108]	@ (80088cc <TIM_OC1_SetConfig+0x110>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d00b      	beq.n	800887a <TIM_OC1_SetConfig+0xbe>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4a1a      	ldr	r2, [pc, #104]	@ (80088d0 <TIM_OC1_SetConfig+0x114>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d007      	beq.n	800887a <TIM_OC1_SetConfig+0xbe>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	4a19      	ldr	r2, [pc, #100]	@ (80088d4 <TIM_OC1_SetConfig+0x118>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d003      	beq.n	800887a <TIM_OC1_SetConfig+0xbe>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4a18      	ldr	r2, [pc, #96]	@ (80088d8 <TIM_OC1_SetConfig+0x11c>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d111      	bne.n	800889e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008880:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008888:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	695b      	ldr	r3, [r3, #20]
 800888e:	693a      	ldr	r2, [r7, #16]
 8008890:	4313      	orrs	r3, r2
 8008892:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	699b      	ldr	r3, [r3, #24]
 8008898:	693a      	ldr	r2, [r7, #16]
 800889a:	4313      	orrs	r3, r2
 800889c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	693a      	ldr	r2, [r7, #16]
 80088a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	68fa      	ldr	r2, [r7, #12]
 80088a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	685a      	ldr	r2, [r3, #4]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	697a      	ldr	r2, [r7, #20]
 80088b6:	621a      	str	r2, [r3, #32]
}
 80088b8:	bf00      	nop
 80088ba:	371c      	adds	r7, #28
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr
 80088c4:	fffeff8f 	.word	0xfffeff8f
 80088c8:	40010000 	.word	0x40010000
 80088cc:	40010400 	.word	0x40010400
 80088d0:	40014000 	.word	0x40014000
 80088d4:	40014400 	.word	0x40014400
 80088d8:	40014800 	.word	0x40014800

080088dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088dc:	b480      	push	{r7}
 80088de:	b087      	sub	sp, #28
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6a1b      	ldr	r3, [r3, #32]
 80088ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6a1b      	ldr	r3, [r3, #32]
 80088f0:	f023 0210 	bic.w	r2, r3, #16
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	699b      	ldr	r3, [r3, #24]
 8008902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008904:	68fa      	ldr	r2, [r7, #12]
 8008906:	4b34      	ldr	r3, [pc, #208]	@ (80089d8 <TIM_OC2_SetConfig+0xfc>)
 8008908:	4013      	ands	r3, r2
 800890a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008912:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	021b      	lsls	r3, r3, #8
 800891a:	68fa      	ldr	r2, [r7, #12]
 800891c:	4313      	orrs	r3, r2
 800891e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	f023 0320 	bic.w	r3, r3, #32
 8008926:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	011b      	lsls	r3, r3, #4
 800892e:	697a      	ldr	r2, [r7, #20]
 8008930:	4313      	orrs	r3, r2
 8008932:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	4a29      	ldr	r2, [pc, #164]	@ (80089dc <TIM_OC2_SetConfig+0x100>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d003      	beq.n	8008944 <TIM_OC2_SetConfig+0x68>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	4a28      	ldr	r2, [pc, #160]	@ (80089e0 <TIM_OC2_SetConfig+0x104>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d10d      	bne.n	8008960 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800894a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	68db      	ldr	r3, [r3, #12]
 8008950:	011b      	lsls	r3, r3, #4
 8008952:	697a      	ldr	r2, [r7, #20]
 8008954:	4313      	orrs	r3, r2
 8008956:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800895e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	4a1e      	ldr	r2, [pc, #120]	@ (80089dc <TIM_OC2_SetConfig+0x100>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d00f      	beq.n	8008988 <TIM_OC2_SetConfig+0xac>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	4a1d      	ldr	r2, [pc, #116]	@ (80089e0 <TIM_OC2_SetConfig+0x104>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d00b      	beq.n	8008988 <TIM_OC2_SetConfig+0xac>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	4a1c      	ldr	r2, [pc, #112]	@ (80089e4 <TIM_OC2_SetConfig+0x108>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d007      	beq.n	8008988 <TIM_OC2_SetConfig+0xac>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	4a1b      	ldr	r2, [pc, #108]	@ (80089e8 <TIM_OC2_SetConfig+0x10c>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d003      	beq.n	8008988 <TIM_OC2_SetConfig+0xac>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	4a1a      	ldr	r2, [pc, #104]	@ (80089ec <TIM_OC2_SetConfig+0x110>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d113      	bne.n	80089b0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800898e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008996:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	695b      	ldr	r3, [r3, #20]
 800899c:	009b      	lsls	r3, r3, #2
 800899e:	693a      	ldr	r2, [r7, #16]
 80089a0:	4313      	orrs	r3, r2
 80089a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	699b      	ldr	r3, [r3, #24]
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	693a      	ldr	r2, [r7, #16]
 80089ac:	4313      	orrs	r3, r2
 80089ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	693a      	ldr	r2, [r7, #16]
 80089b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	68fa      	ldr	r2, [r7, #12]
 80089ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	685a      	ldr	r2, [r3, #4]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	697a      	ldr	r2, [r7, #20]
 80089c8:	621a      	str	r2, [r3, #32]
}
 80089ca:	bf00      	nop
 80089cc:	371c      	adds	r7, #28
 80089ce:	46bd      	mov	sp, r7
 80089d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d4:	4770      	bx	lr
 80089d6:	bf00      	nop
 80089d8:	feff8fff 	.word	0xfeff8fff
 80089dc:	40010000 	.word	0x40010000
 80089e0:	40010400 	.word	0x40010400
 80089e4:	40014000 	.word	0x40014000
 80089e8:	40014400 	.word	0x40014400
 80089ec:	40014800 	.word	0x40014800

080089f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b087      	sub	sp, #28
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6a1b      	ldr	r3, [r3, #32]
 80089fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6a1b      	ldr	r3, [r3, #32]
 8008a04:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	69db      	ldr	r3, [r3, #28]
 8008a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008a18:	68fa      	ldr	r2, [r7, #12]
 8008a1a:	4b33      	ldr	r3, [pc, #204]	@ (8008ae8 <TIM_OC3_SetConfig+0xf8>)
 8008a1c:	4013      	ands	r3, r2
 8008a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f023 0303 	bic.w	r3, r3, #3
 8008a26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	68fa      	ldr	r2, [r7, #12]
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008a38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	689b      	ldr	r3, [r3, #8]
 8008a3e:	021b      	lsls	r3, r3, #8
 8008a40:	697a      	ldr	r2, [r7, #20]
 8008a42:	4313      	orrs	r3, r2
 8008a44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	4a28      	ldr	r2, [pc, #160]	@ (8008aec <TIM_OC3_SetConfig+0xfc>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d003      	beq.n	8008a56 <TIM_OC3_SetConfig+0x66>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	4a27      	ldr	r2, [pc, #156]	@ (8008af0 <TIM_OC3_SetConfig+0x100>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d10d      	bne.n	8008a72 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008a5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	68db      	ldr	r3, [r3, #12]
 8008a62:	021b      	lsls	r3, r3, #8
 8008a64:	697a      	ldr	r2, [r7, #20]
 8008a66:	4313      	orrs	r3, r2
 8008a68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008a70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	4a1d      	ldr	r2, [pc, #116]	@ (8008aec <TIM_OC3_SetConfig+0xfc>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d00f      	beq.n	8008a9a <TIM_OC3_SetConfig+0xaa>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	4a1c      	ldr	r2, [pc, #112]	@ (8008af0 <TIM_OC3_SetConfig+0x100>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d00b      	beq.n	8008a9a <TIM_OC3_SetConfig+0xaa>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	4a1b      	ldr	r2, [pc, #108]	@ (8008af4 <TIM_OC3_SetConfig+0x104>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d007      	beq.n	8008a9a <TIM_OC3_SetConfig+0xaa>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	4a1a      	ldr	r2, [pc, #104]	@ (8008af8 <TIM_OC3_SetConfig+0x108>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d003      	beq.n	8008a9a <TIM_OC3_SetConfig+0xaa>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	4a19      	ldr	r2, [pc, #100]	@ (8008afc <TIM_OC3_SetConfig+0x10c>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d113      	bne.n	8008ac2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008aa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008aa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	695b      	ldr	r3, [r3, #20]
 8008aae:	011b      	lsls	r3, r3, #4
 8008ab0:	693a      	ldr	r2, [r7, #16]
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	699b      	ldr	r3, [r3, #24]
 8008aba:	011b      	lsls	r3, r3, #4
 8008abc:	693a      	ldr	r2, [r7, #16]
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	693a      	ldr	r2, [r7, #16]
 8008ac6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	68fa      	ldr	r2, [r7, #12]
 8008acc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	685a      	ldr	r2, [r3, #4]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	697a      	ldr	r2, [r7, #20]
 8008ada:	621a      	str	r2, [r3, #32]
}
 8008adc:	bf00      	nop
 8008ade:	371c      	adds	r7, #28
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr
 8008ae8:	fffeff8f 	.word	0xfffeff8f
 8008aec:	40010000 	.word	0x40010000
 8008af0:	40010400 	.word	0x40010400
 8008af4:	40014000 	.word	0x40014000
 8008af8:	40014400 	.word	0x40014400
 8008afc:	40014800 	.word	0x40014800

08008b00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b087      	sub	sp, #28
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6a1b      	ldr	r3, [r3, #32]
 8008b0e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6a1b      	ldr	r3, [r3, #32]
 8008b14:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	69db      	ldr	r3, [r3, #28]
 8008b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008b28:	68fa      	ldr	r2, [r7, #12]
 8008b2a:	4b24      	ldr	r3, [pc, #144]	@ (8008bbc <TIM_OC4_SetConfig+0xbc>)
 8008b2c:	4013      	ands	r3, r2
 8008b2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	021b      	lsls	r3, r3, #8
 8008b3e:	68fa      	ldr	r2, [r7, #12]
 8008b40:	4313      	orrs	r3, r2
 8008b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008b4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	689b      	ldr	r3, [r3, #8]
 8008b50:	031b      	lsls	r3, r3, #12
 8008b52:	693a      	ldr	r2, [r7, #16]
 8008b54:	4313      	orrs	r3, r2
 8008b56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	4a19      	ldr	r2, [pc, #100]	@ (8008bc0 <TIM_OC4_SetConfig+0xc0>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d00f      	beq.n	8008b80 <TIM_OC4_SetConfig+0x80>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	4a18      	ldr	r2, [pc, #96]	@ (8008bc4 <TIM_OC4_SetConfig+0xc4>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d00b      	beq.n	8008b80 <TIM_OC4_SetConfig+0x80>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	4a17      	ldr	r2, [pc, #92]	@ (8008bc8 <TIM_OC4_SetConfig+0xc8>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d007      	beq.n	8008b80 <TIM_OC4_SetConfig+0x80>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	4a16      	ldr	r2, [pc, #88]	@ (8008bcc <TIM_OC4_SetConfig+0xcc>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d003      	beq.n	8008b80 <TIM_OC4_SetConfig+0x80>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	4a15      	ldr	r2, [pc, #84]	@ (8008bd0 <TIM_OC4_SetConfig+0xd0>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d109      	bne.n	8008b94 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008b86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	695b      	ldr	r3, [r3, #20]
 8008b8c:	019b      	lsls	r3, r3, #6
 8008b8e:	697a      	ldr	r2, [r7, #20]
 8008b90:	4313      	orrs	r3, r2
 8008b92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	697a      	ldr	r2, [r7, #20]
 8008b98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	68fa      	ldr	r2, [r7, #12]
 8008b9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	685a      	ldr	r2, [r3, #4]
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	693a      	ldr	r2, [r7, #16]
 8008bac:	621a      	str	r2, [r3, #32]
}
 8008bae:	bf00      	nop
 8008bb0:	371c      	adds	r7, #28
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr
 8008bba:	bf00      	nop
 8008bbc:	feff8fff 	.word	0xfeff8fff
 8008bc0:	40010000 	.word	0x40010000
 8008bc4:	40010400 	.word	0x40010400
 8008bc8:	40014000 	.word	0x40014000
 8008bcc:	40014400 	.word	0x40014400
 8008bd0:	40014800 	.word	0x40014800

08008bd4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b087      	sub	sp, #28
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6a1b      	ldr	r3, [r3, #32]
 8008be2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6a1b      	ldr	r3, [r3, #32]
 8008be8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008bfc:	68fa      	ldr	r2, [r7, #12]
 8008bfe:	4b21      	ldr	r3, [pc, #132]	@ (8008c84 <TIM_OC5_SetConfig+0xb0>)
 8008c00:	4013      	ands	r3, r2
 8008c02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	68fa      	ldr	r2, [r7, #12]
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008c14:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	041b      	lsls	r3, r3, #16
 8008c1c:	693a      	ldr	r2, [r7, #16]
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	4a18      	ldr	r2, [pc, #96]	@ (8008c88 <TIM_OC5_SetConfig+0xb4>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d00f      	beq.n	8008c4a <TIM_OC5_SetConfig+0x76>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	4a17      	ldr	r2, [pc, #92]	@ (8008c8c <TIM_OC5_SetConfig+0xb8>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d00b      	beq.n	8008c4a <TIM_OC5_SetConfig+0x76>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	4a16      	ldr	r2, [pc, #88]	@ (8008c90 <TIM_OC5_SetConfig+0xbc>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d007      	beq.n	8008c4a <TIM_OC5_SetConfig+0x76>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	4a15      	ldr	r2, [pc, #84]	@ (8008c94 <TIM_OC5_SetConfig+0xc0>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d003      	beq.n	8008c4a <TIM_OC5_SetConfig+0x76>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	4a14      	ldr	r2, [pc, #80]	@ (8008c98 <TIM_OC5_SetConfig+0xc4>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d109      	bne.n	8008c5e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c50:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	695b      	ldr	r3, [r3, #20]
 8008c56:	021b      	lsls	r3, r3, #8
 8008c58:	697a      	ldr	r2, [r7, #20]
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	697a      	ldr	r2, [r7, #20]
 8008c62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	68fa      	ldr	r2, [r7, #12]
 8008c68:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	685a      	ldr	r2, [r3, #4]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	693a      	ldr	r2, [r7, #16]
 8008c76:	621a      	str	r2, [r3, #32]
}
 8008c78:	bf00      	nop
 8008c7a:	371c      	adds	r7, #28
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr
 8008c84:	fffeff8f 	.word	0xfffeff8f
 8008c88:	40010000 	.word	0x40010000
 8008c8c:	40010400 	.word	0x40010400
 8008c90:	40014000 	.word	0x40014000
 8008c94:	40014400 	.word	0x40014400
 8008c98:	40014800 	.word	0x40014800

08008c9c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b087      	sub	sp, #28
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6a1b      	ldr	r3, [r3, #32]
 8008caa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6a1b      	ldr	r3, [r3, #32]
 8008cb0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008cc4:	68fa      	ldr	r2, [r7, #12]
 8008cc6:	4b22      	ldr	r3, [pc, #136]	@ (8008d50 <TIM_OC6_SetConfig+0xb4>)
 8008cc8:	4013      	ands	r3, r2
 8008cca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	021b      	lsls	r3, r3, #8
 8008cd2:	68fa      	ldr	r2, [r7, #12]
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008cde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	051b      	lsls	r3, r3, #20
 8008ce6:	693a      	ldr	r2, [r7, #16]
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	4a19      	ldr	r2, [pc, #100]	@ (8008d54 <TIM_OC6_SetConfig+0xb8>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d00f      	beq.n	8008d14 <TIM_OC6_SetConfig+0x78>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	4a18      	ldr	r2, [pc, #96]	@ (8008d58 <TIM_OC6_SetConfig+0xbc>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d00b      	beq.n	8008d14 <TIM_OC6_SetConfig+0x78>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	4a17      	ldr	r2, [pc, #92]	@ (8008d5c <TIM_OC6_SetConfig+0xc0>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d007      	beq.n	8008d14 <TIM_OC6_SetConfig+0x78>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	4a16      	ldr	r2, [pc, #88]	@ (8008d60 <TIM_OC6_SetConfig+0xc4>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d003      	beq.n	8008d14 <TIM_OC6_SetConfig+0x78>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	4a15      	ldr	r2, [pc, #84]	@ (8008d64 <TIM_OC6_SetConfig+0xc8>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d109      	bne.n	8008d28 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008d1a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	695b      	ldr	r3, [r3, #20]
 8008d20:	029b      	lsls	r3, r3, #10
 8008d22:	697a      	ldr	r2, [r7, #20]
 8008d24:	4313      	orrs	r3, r2
 8008d26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	697a      	ldr	r2, [r7, #20]
 8008d2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	68fa      	ldr	r2, [r7, #12]
 8008d32:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	685a      	ldr	r2, [r3, #4]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	693a      	ldr	r2, [r7, #16]
 8008d40:	621a      	str	r2, [r3, #32]
}
 8008d42:	bf00      	nop
 8008d44:	371c      	adds	r7, #28
 8008d46:	46bd      	mov	sp, r7
 8008d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4c:	4770      	bx	lr
 8008d4e:	bf00      	nop
 8008d50:	feff8fff 	.word	0xfeff8fff
 8008d54:	40010000 	.word	0x40010000
 8008d58:	40010400 	.word	0x40010400
 8008d5c:	40014000 	.word	0x40014000
 8008d60:	40014400 	.word	0x40014400
 8008d64:	40014800 	.word	0x40014800

08008d68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b087      	sub	sp, #28
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	60f8      	str	r0, [r7, #12]
 8008d70:	60b9      	str	r1, [r7, #8]
 8008d72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	6a1b      	ldr	r3, [r3, #32]
 8008d78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	6a1b      	ldr	r3, [r3, #32]
 8008d7e:	f023 0201 	bic.w	r2, r3, #1
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	699b      	ldr	r3, [r3, #24]
 8008d8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008d92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	011b      	lsls	r3, r3, #4
 8008d98:	693a      	ldr	r2, [r7, #16]
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	f023 030a 	bic.w	r3, r3, #10
 8008da4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008da6:	697a      	ldr	r2, [r7, #20]
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	4313      	orrs	r3, r2
 8008dac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	693a      	ldr	r2, [r7, #16]
 8008db2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	697a      	ldr	r2, [r7, #20]
 8008db8:	621a      	str	r2, [r3, #32]
}
 8008dba:	bf00      	nop
 8008dbc:	371c      	adds	r7, #28
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr

08008dc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008dc6:	b480      	push	{r7}
 8008dc8:	b087      	sub	sp, #28
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	60f8      	str	r0, [r7, #12]
 8008dce:	60b9      	str	r1, [r7, #8]
 8008dd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	6a1b      	ldr	r3, [r3, #32]
 8008dd6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	6a1b      	ldr	r3, [r3, #32]
 8008ddc:	f023 0210 	bic.w	r2, r3, #16
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	699b      	ldr	r3, [r3, #24]
 8008de8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008df0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	031b      	lsls	r3, r3, #12
 8008df6:	693a      	ldr	r2, [r7, #16]
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008e02:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	011b      	lsls	r3, r3, #4
 8008e08:	697a      	ldr	r2, [r7, #20]
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	693a      	ldr	r2, [r7, #16]
 8008e12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	697a      	ldr	r2, [r7, #20]
 8008e18:	621a      	str	r2, [r3, #32]
}
 8008e1a:	bf00      	nop
 8008e1c:	371c      	adds	r7, #28
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e24:	4770      	bx	lr
	...

08008e28 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b085      	sub	sp, #20
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	689b      	ldr	r3, [r3, #8]
 8008e36:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008e38:	68fa      	ldr	r2, [r7, #12]
 8008e3a:	4b09      	ldr	r3, [pc, #36]	@ (8008e60 <TIM_ITRx_SetConfig+0x38>)
 8008e3c:	4013      	ands	r3, r2
 8008e3e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008e40:	683a      	ldr	r2, [r7, #0]
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	4313      	orrs	r3, r2
 8008e46:	f043 0307 	orr.w	r3, r3, #7
 8008e4a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	68fa      	ldr	r2, [r7, #12]
 8008e50:	609a      	str	r2, [r3, #8]
}
 8008e52:	bf00      	nop
 8008e54:	3714      	adds	r7, #20
 8008e56:	46bd      	mov	sp, r7
 8008e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5c:	4770      	bx	lr
 8008e5e:	bf00      	nop
 8008e60:	ffcfff8f 	.word	0xffcfff8f

08008e64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b087      	sub	sp, #28
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	60f8      	str	r0, [r7, #12]
 8008e6c:	60b9      	str	r1, [r7, #8]
 8008e6e:	607a      	str	r2, [r7, #4]
 8008e70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	689b      	ldr	r3, [r3, #8]
 8008e76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008e7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	021a      	lsls	r2, r3, #8
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	431a      	orrs	r2, r3
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	697a      	ldr	r2, [r7, #20]
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	697a      	ldr	r2, [r7, #20]
 8008e96:	609a      	str	r2, [r3, #8]
}
 8008e98:	bf00      	nop
 8008e9a:	371c      	adds	r7, #28
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr

08008ea4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b087      	sub	sp, #28
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	60b9      	str	r1, [r7, #8]
 8008eae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	f003 031f 	and.w	r3, r3, #31
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8008ebc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	6a1a      	ldr	r2, [r3, #32]
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	43db      	mvns	r3, r3
 8008ec6:	401a      	ands	r2, r3
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	6a1a      	ldr	r2, [r3, #32]
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	f003 031f 	and.w	r3, r3, #31
 8008ed6:	6879      	ldr	r1, [r7, #4]
 8008ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8008edc:	431a      	orrs	r2, r3
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	621a      	str	r2, [r3, #32]
}
 8008ee2:	bf00      	nop
 8008ee4:	371c      	adds	r7, #28
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	4770      	bx	lr
	...

08008ef0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b085      	sub	sp, #20
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d101      	bne.n	8008f08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f04:	2302      	movs	r3, #2
 8008f06:	e06d      	b.n	8008fe4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2202      	movs	r2, #2
 8008f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	689b      	ldr	r3, [r3, #8]
 8008f26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4a30      	ldr	r2, [pc, #192]	@ (8008ff0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d004      	beq.n	8008f3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4a2f      	ldr	r2, [pc, #188]	@ (8008ff4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d108      	bne.n	8008f4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008f42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	68fa      	ldr	r2, [r7, #12]
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	68fa      	ldr	r2, [r7, #12]
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	68fa      	ldr	r2, [r7, #12]
 8008f66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a20      	ldr	r2, [pc, #128]	@ (8008ff0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d022      	beq.n	8008fb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f7a:	d01d      	beq.n	8008fb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a1d      	ldr	r2, [pc, #116]	@ (8008ff8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d018      	beq.n	8008fb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a1c      	ldr	r2, [pc, #112]	@ (8008ffc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d013      	beq.n	8008fb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a1a      	ldr	r2, [pc, #104]	@ (8009000 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d00e      	beq.n	8008fb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4a15      	ldr	r2, [pc, #84]	@ (8008ff4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d009      	beq.n	8008fb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a16      	ldr	r2, [pc, #88]	@ (8009004 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d004      	beq.n	8008fb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4a15      	ldr	r2, [pc, #84]	@ (8009008 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d10c      	bne.n	8008fd2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008fbe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	689b      	ldr	r3, [r3, #8]
 8008fc4:	68ba      	ldr	r2, [r7, #8]
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	68ba      	ldr	r2, [r7, #8]
 8008fd0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008fe2:	2300      	movs	r3, #0
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3714      	adds	r7, #20
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr
 8008ff0:	40010000 	.word	0x40010000
 8008ff4:	40010400 	.word	0x40010400
 8008ff8:	40000400 	.word	0x40000400
 8008ffc:	40000800 	.word	0x40000800
 8009000:	40000c00 	.word	0x40000c00
 8009004:	40001800 	.word	0x40001800
 8009008:	40014000 	.word	0x40014000

0800900c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b082      	sub	sp, #8
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d101      	bne.n	800901e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800901a:	2301      	movs	r3, #1
 800901c:	e042      	b.n	80090a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009024:	2b00      	cmp	r3, #0
 8009026:	d106      	bne.n	8009036 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2200      	movs	r2, #0
 800902c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f7f8 f9d7 	bl	80013e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2224      	movs	r2, #36	@ 0x24
 800903a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	681a      	ldr	r2, [r3, #0]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f022 0201 	bic.w	r2, r2, #1
 800904c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009052:	2b00      	cmp	r3, #0
 8009054:	d002      	beq.n	800905c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f000 fd90 	bl	8009b7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 f825 	bl	80090ac <UART_SetConfig>
 8009062:	4603      	mov	r3, r0
 8009064:	2b01      	cmp	r3, #1
 8009066:	d101      	bne.n	800906c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009068:	2301      	movs	r3, #1
 800906a:	e01b      	b.n	80090a4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	685a      	ldr	r2, [r3, #4]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800907a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	689a      	ldr	r2, [r3, #8]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800908a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f042 0201 	orr.w	r2, r2, #1
 800909a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f000 fe0f 	bl	8009cc0 <UART_CheckIdleState>
 80090a2:	4603      	mov	r3, r0
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3708      	adds	r7, #8
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}

080090ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80090ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80090b0:	b092      	sub	sp, #72	@ 0x48
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80090b6:	2300      	movs	r3, #0
 80090b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	689a      	ldr	r2, [r3, #8]
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	691b      	ldr	r3, [r3, #16]
 80090c4:	431a      	orrs	r2, r3
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	695b      	ldr	r3, [r3, #20]
 80090ca:	431a      	orrs	r2, r3
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	69db      	ldr	r3, [r3, #28]
 80090d0:	4313      	orrs	r3, r2
 80090d2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	681a      	ldr	r2, [r3, #0]
 80090da:	4bbe      	ldr	r3, [pc, #760]	@ (80093d4 <UART_SetConfig+0x328>)
 80090dc:	4013      	ands	r3, r2
 80090de:	697a      	ldr	r2, [r7, #20]
 80090e0:	6812      	ldr	r2, [r2, #0]
 80090e2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80090e4:	430b      	orrs	r3, r1
 80090e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	68da      	ldr	r2, [r3, #12]
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	430a      	orrs	r2, r1
 80090fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	699b      	ldr	r3, [r3, #24]
 8009102:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4ab3      	ldr	r2, [pc, #716]	@ (80093d8 <UART_SetConfig+0x32c>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d004      	beq.n	8009118 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	6a1b      	ldr	r3, [r3, #32]
 8009112:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009114:	4313      	orrs	r3, r2
 8009116:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	689a      	ldr	r2, [r3, #8]
 800911e:	4baf      	ldr	r3, [pc, #700]	@ (80093dc <UART_SetConfig+0x330>)
 8009120:	4013      	ands	r3, r2
 8009122:	697a      	ldr	r2, [r7, #20]
 8009124:	6812      	ldr	r2, [r2, #0]
 8009126:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009128:	430b      	orrs	r3, r1
 800912a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009132:	f023 010f 	bic.w	r1, r3, #15
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	430a      	orrs	r2, r1
 8009140:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4aa6      	ldr	r2, [pc, #664]	@ (80093e0 <UART_SetConfig+0x334>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d177      	bne.n	800923c <UART_SetConfig+0x190>
 800914c:	4ba5      	ldr	r3, [pc, #660]	@ (80093e4 <UART_SetConfig+0x338>)
 800914e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009150:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009154:	2b28      	cmp	r3, #40	@ 0x28
 8009156:	d86d      	bhi.n	8009234 <UART_SetConfig+0x188>
 8009158:	a201      	add	r2, pc, #4	@ (adr r2, 8009160 <UART_SetConfig+0xb4>)
 800915a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800915e:	bf00      	nop
 8009160:	08009205 	.word	0x08009205
 8009164:	08009235 	.word	0x08009235
 8009168:	08009235 	.word	0x08009235
 800916c:	08009235 	.word	0x08009235
 8009170:	08009235 	.word	0x08009235
 8009174:	08009235 	.word	0x08009235
 8009178:	08009235 	.word	0x08009235
 800917c:	08009235 	.word	0x08009235
 8009180:	0800920d 	.word	0x0800920d
 8009184:	08009235 	.word	0x08009235
 8009188:	08009235 	.word	0x08009235
 800918c:	08009235 	.word	0x08009235
 8009190:	08009235 	.word	0x08009235
 8009194:	08009235 	.word	0x08009235
 8009198:	08009235 	.word	0x08009235
 800919c:	08009235 	.word	0x08009235
 80091a0:	08009215 	.word	0x08009215
 80091a4:	08009235 	.word	0x08009235
 80091a8:	08009235 	.word	0x08009235
 80091ac:	08009235 	.word	0x08009235
 80091b0:	08009235 	.word	0x08009235
 80091b4:	08009235 	.word	0x08009235
 80091b8:	08009235 	.word	0x08009235
 80091bc:	08009235 	.word	0x08009235
 80091c0:	0800921d 	.word	0x0800921d
 80091c4:	08009235 	.word	0x08009235
 80091c8:	08009235 	.word	0x08009235
 80091cc:	08009235 	.word	0x08009235
 80091d0:	08009235 	.word	0x08009235
 80091d4:	08009235 	.word	0x08009235
 80091d8:	08009235 	.word	0x08009235
 80091dc:	08009235 	.word	0x08009235
 80091e0:	08009225 	.word	0x08009225
 80091e4:	08009235 	.word	0x08009235
 80091e8:	08009235 	.word	0x08009235
 80091ec:	08009235 	.word	0x08009235
 80091f0:	08009235 	.word	0x08009235
 80091f4:	08009235 	.word	0x08009235
 80091f8:	08009235 	.word	0x08009235
 80091fc:	08009235 	.word	0x08009235
 8009200:	0800922d 	.word	0x0800922d
 8009204:	2301      	movs	r3, #1
 8009206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800920a:	e222      	b.n	8009652 <UART_SetConfig+0x5a6>
 800920c:	2304      	movs	r3, #4
 800920e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009212:	e21e      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009214:	2308      	movs	r3, #8
 8009216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800921a:	e21a      	b.n	8009652 <UART_SetConfig+0x5a6>
 800921c:	2310      	movs	r3, #16
 800921e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009222:	e216      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009224:	2320      	movs	r3, #32
 8009226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800922a:	e212      	b.n	8009652 <UART_SetConfig+0x5a6>
 800922c:	2340      	movs	r3, #64	@ 0x40
 800922e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009232:	e20e      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009234:	2380      	movs	r3, #128	@ 0x80
 8009236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800923a:	e20a      	b.n	8009652 <UART_SetConfig+0x5a6>
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4a69      	ldr	r2, [pc, #420]	@ (80093e8 <UART_SetConfig+0x33c>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d130      	bne.n	80092a8 <UART_SetConfig+0x1fc>
 8009246:	4b67      	ldr	r3, [pc, #412]	@ (80093e4 <UART_SetConfig+0x338>)
 8009248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800924a:	f003 0307 	and.w	r3, r3, #7
 800924e:	2b05      	cmp	r3, #5
 8009250:	d826      	bhi.n	80092a0 <UART_SetConfig+0x1f4>
 8009252:	a201      	add	r2, pc, #4	@ (adr r2, 8009258 <UART_SetConfig+0x1ac>)
 8009254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009258:	08009271 	.word	0x08009271
 800925c:	08009279 	.word	0x08009279
 8009260:	08009281 	.word	0x08009281
 8009264:	08009289 	.word	0x08009289
 8009268:	08009291 	.word	0x08009291
 800926c:	08009299 	.word	0x08009299
 8009270:	2300      	movs	r3, #0
 8009272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009276:	e1ec      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009278:	2304      	movs	r3, #4
 800927a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800927e:	e1e8      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009280:	2308      	movs	r3, #8
 8009282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009286:	e1e4      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009288:	2310      	movs	r3, #16
 800928a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800928e:	e1e0      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009290:	2320      	movs	r3, #32
 8009292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009296:	e1dc      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009298:	2340      	movs	r3, #64	@ 0x40
 800929a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800929e:	e1d8      	b.n	8009652 <UART_SetConfig+0x5a6>
 80092a0:	2380      	movs	r3, #128	@ 0x80
 80092a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092a6:	e1d4      	b.n	8009652 <UART_SetConfig+0x5a6>
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4a4f      	ldr	r2, [pc, #316]	@ (80093ec <UART_SetConfig+0x340>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d130      	bne.n	8009314 <UART_SetConfig+0x268>
 80092b2:	4b4c      	ldr	r3, [pc, #304]	@ (80093e4 <UART_SetConfig+0x338>)
 80092b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092b6:	f003 0307 	and.w	r3, r3, #7
 80092ba:	2b05      	cmp	r3, #5
 80092bc:	d826      	bhi.n	800930c <UART_SetConfig+0x260>
 80092be:	a201      	add	r2, pc, #4	@ (adr r2, 80092c4 <UART_SetConfig+0x218>)
 80092c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092c4:	080092dd 	.word	0x080092dd
 80092c8:	080092e5 	.word	0x080092e5
 80092cc:	080092ed 	.word	0x080092ed
 80092d0:	080092f5 	.word	0x080092f5
 80092d4:	080092fd 	.word	0x080092fd
 80092d8:	08009305 	.word	0x08009305
 80092dc:	2300      	movs	r3, #0
 80092de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092e2:	e1b6      	b.n	8009652 <UART_SetConfig+0x5a6>
 80092e4:	2304      	movs	r3, #4
 80092e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092ea:	e1b2      	b.n	8009652 <UART_SetConfig+0x5a6>
 80092ec:	2308      	movs	r3, #8
 80092ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092f2:	e1ae      	b.n	8009652 <UART_SetConfig+0x5a6>
 80092f4:	2310      	movs	r3, #16
 80092f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092fa:	e1aa      	b.n	8009652 <UART_SetConfig+0x5a6>
 80092fc:	2320      	movs	r3, #32
 80092fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009302:	e1a6      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009304:	2340      	movs	r3, #64	@ 0x40
 8009306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800930a:	e1a2      	b.n	8009652 <UART_SetConfig+0x5a6>
 800930c:	2380      	movs	r3, #128	@ 0x80
 800930e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009312:	e19e      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4a35      	ldr	r2, [pc, #212]	@ (80093f0 <UART_SetConfig+0x344>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d130      	bne.n	8009380 <UART_SetConfig+0x2d4>
 800931e:	4b31      	ldr	r3, [pc, #196]	@ (80093e4 <UART_SetConfig+0x338>)
 8009320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009322:	f003 0307 	and.w	r3, r3, #7
 8009326:	2b05      	cmp	r3, #5
 8009328:	d826      	bhi.n	8009378 <UART_SetConfig+0x2cc>
 800932a:	a201      	add	r2, pc, #4	@ (adr r2, 8009330 <UART_SetConfig+0x284>)
 800932c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009330:	08009349 	.word	0x08009349
 8009334:	08009351 	.word	0x08009351
 8009338:	08009359 	.word	0x08009359
 800933c:	08009361 	.word	0x08009361
 8009340:	08009369 	.word	0x08009369
 8009344:	08009371 	.word	0x08009371
 8009348:	2300      	movs	r3, #0
 800934a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800934e:	e180      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009350:	2304      	movs	r3, #4
 8009352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009356:	e17c      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009358:	2308      	movs	r3, #8
 800935a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800935e:	e178      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009360:	2310      	movs	r3, #16
 8009362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009366:	e174      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009368:	2320      	movs	r3, #32
 800936a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800936e:	e170      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009370:	2340      	movs	r3, #64	@ 0x40
 8009372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009376:	e16c      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009378:	2380      	movs	r3, #128	@ 0x80
 800937a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800937e:	e168      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a1b      	ldr	r2, [pc, #108]	@ (80093f4 <UART_SetConfig+0x348>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d142      	bne.n	8009410 <UART_SetConfig+0x364>
 800938a:	4b16      	ldr	r3, [pc, #88]	@ (80093e4 <UART_SetConfig+0x338>)
 800938c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800938e:	f003 0307 	and.w	r3, r3, #7
 8009392:	2b05      	cmp	r3, #5
 8009394:	d838      	bhi.n	8009408 <UART_SetConfig+0x35c>
 8009396:	a201      	add	r2, pc, #4	@ (adr r2, 800939c <UART_SetConfig+0x2f0>)
 8009398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800939c:	080093b5 	.word	0x080093b5
 80093a0:	080093bd 	.word	0x080093bd
 80093a4:	080093c5 	.word	0x080093c5
 80093a8:	080093cd 	.word	0x080093cd
 80093ac:	080093f9 	.word	0x080093f9
 80093b0:	08009401 	.word	0x08009401
 80093b4:	2300      	movs	r3, #0
 80093b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ba:	e14a      	b.n	8009652 <UART_SetConfig+0x5a6>
 80093bc:	2304      	movs	r3, #4
 80093be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093c2:	e146      	b.n	8009652 <UART_SetConfig+0x5a6>
 80093c4:	2308      	movs	r3, #8
 80093c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ca:	e142      	b.n	8009652 <UART_SetConfig+0x5a6>
 80093cc:	2310      	movs	r3, #16
 80093ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093d2:	e13e      	b.n	8009652 <UART_SetConfig+0x5a6>
 80093d4:	cfff69f3 	.word	0xcfff69f3
 80093d8:	58000c00 	.word	0x58000c00
 80093dc:	11fff4ff 	.word	0x11fff4ff
 80093e0:	40011000 	.word	0x40011000
 80093e4:	58024400 	.word	0x58024400
 80093e8:	40004400 	.word	0x40004400
 80093ec:	40004800 	.word	0x40004800
 80093f0:	40004c00 	.word	0x40004c00
 80093f4:	40005000 	.word	0x40005000
 80093f8:	2320      	movs	r3, #32
 80093fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093fe:	e128      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009400:	2340      	movs	r3, #64	@ 0x40
 8009402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009406:	e124      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009408:	2380      	movs	r3, #128	@ 0x80
 800940a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800940e:	e120      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4acb      	ldr	r2, [pc, #812]	@ (8009744 <UART_SetConfig+0x698>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d176      	bne.n	8009508 <UART_SetConfig+0x45c>
 800941a:	4bcb      	ldr	r3, [pc, #812]	@ (8009748 <UART_SetConfig+0x69c>)
 800941c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800941e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009422:	2b28      	cmp	r3, #40	@ 0x28
 8009424:	d86c      	bhi.n	8009500 <UART_SetConfig+0x454>
 8009426:	a201      	add	r2, pc, #4	@ (adr r2, 800942c <UART_SetConfig+0x380>)
 8009428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800942c:	080094d1 	.word	0x080094d1
 8009430:	08009501 	.word	0x08009501
 8009434:	08009501 	.word	0x08009501
 8009438:	08009501 	.word	0x08009501
 800943c:	08009501 	.word	0x08009501
 8009440:	08009501 	.word	0x08009501
 8009444:	08009501 	.word	0x08009501
 8009448:	08009501 	.word	0x08009501
 800944c:	080094d9 	.word	0x080094d9
 8009450:	08009501 	.word	0x08009501
 8009454:	08009501 	.word	0x08009501
 8009458:	08009501 	.word	0x08009501
 800945c:	08009501 	.word	0x08009501
 8009460:	08009501 	.word	0x08009501
 8009464:	08009501 	.word	0x08009501
 8009468:	08009501 	.word	0x08009501
 800946c:	080094e1 	.word	0x080094e1
 8009470:	08009501 	.word	0x08009501
 8009474:	08009501 	.word	0x08009501
 8009478:	08009501 	.word	0x08009501
 800947c:	08009501 	.word	0x08009501
 8009480:	08009501 	.word	0x08009501
 8009484:	08009501 	.word	0x08009501
 8009488:	08009501 	.word	0x08009501
 800948c:	080094e9 	.word	0x080094e9
 8009490:	08009501 	.word	0x08009501
 8009494:	08009501 	.word	0x08009501
 8009498:	08009501 	.word	0x08009501
 800949c:	08009501 	.word	0x08009501
 80094a0:	08009501 	.word	0x08009501
 80094a4:	08009501 	.word	0x08009501
 80094a8:	08009501 	.word	0x08009501
 80094ac:	080094f1 	.word	0x080094f1
 80094b0:	08009501 	.word	0x08009501
 80094b4:	08009501 	.word	0x08009501
 80094b8:	08009501 	.word	0x08009501
 80094bc:	08009501 	.word	0x08009501
 80094c0:	08009501 	.word	0x08009501
 80094c4:	08009501 	.word	0x08009501
 80094c8:	08009501 	.word	0x08009501
 80094cc:	080094f9 	.word	0x080094f9
 80094d0:	2301      	movs	r3, #1
 80094d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094d6:	e0bc      	b.n	8009652 <UART_SetConfig+0x5a6>
 80094d8:	2304      	movs	r3, #4
 80094da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094de:	e0b8      	b.n	8009652 <UART_SetConfig+0x5a6>
 80094e0:	2308      	movs	r3, #8
 80094e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094e6:	e0b4      	b.n	8009652 <UART_SetConfig+0x5a6>
 80094e8:	2310      	movs	r3, #16
 80094ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ee:	e0b0      	b.n	8009652 <UART_SetConfig+0x5a6>
 80094f0:	2320      	movs	r3, #32
 80094f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094f6:	e0ac      	b.n	8009652 <UART_SetConfig+0x5a6>
 80094f8:	2340      	movs	r3, #64	@ 0x40
 80094fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094fe:	e0a8      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009500:	2380      	movs	r3, #128	@ 0x80
 8009502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009506:	e0a4      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a8f      	ldr	r2, [pc, #572]	@ (800974c <UART_SetConfig+0x6a0>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d130      	bne.n	8009574 <UART_SetConfig+0x4c8>
 8009512:	4b8d      	ldr	r3, [pc, #564]	@ (8009748 <UART_SetConfig+0x69c>)
 8009514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009516:	f003 0307 	and.w	r3, r3, #7
 800951a:	2b05      	cmp	r3, #5
 800951c:	d826      	bhi.n	800956c <UART_SetConfig+0x4c0>
 800951e:	a201      	add	r2, pc, #4	@ (adr r2, 8009524 <UART_SetConfig+0x478>)
 8009520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009524:	0800953d 	.word	0x0800953d
 8009528:	08009545 	.word	0x08009545
 800952c:	0800954d 	.word	0x0800954d
 8009530:	08009555 	.word	0x08009555
 8009534:	0800955d 	.word	0x0800955d
 8009538:	08009565 	.word	0x08009565
 800953c:	2300      	movs	r3, #0
 800953e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009542:	e086      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009544:	2304      	movs	r3, #4
 8009546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800954a:	e082      	b.n	8009652 <UART_SetConfig+0x5a6>
 800954c:	2308      	movs	r3, #8
 800954e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009552:	e07e      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009554:	2310      	movs	r3, #16
 8009556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800955a:	e07a      	b.n	8009652 <UART_SetConfig+0x5a6>
 800955c:	2320      	movs	r3, #32
 800955e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009562:	e076      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009564:	2340      	movs	r3, #64	@ 0x40
 8009566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800956a:	e072      	b.n	8009652 <UART_SetConfig+0x5a6>
 800956c:	2380      	movs	r3, #128	@ 0x80
 800956e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009572:	e06e      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a75      	ldr	r2, [pc, #468]	@ (8009750 <UART_SetConfig+0x6a4>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d130      	bne.n	80095e0 <UART_SetConfig+0x534>
 800957e:	4b72      	ldr	r3, [pc, #456]	@ (8009748 <UART_SetConfig+0x69c>)
 8009580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009582:	f003 0307 	and.w	r3, r3, #7
 8009586:	2b05      	cmp	r3, #5
 8009588:	d826      	bhi.n	80095d8 <UART_SetConfig+0x52c>
 800958a:	a201      	add	r2, pc, #4	@ (adr r2, 8009590 <UART_SetConfig+0x4e4>)
 800958c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009590:	080095a9 	.word	0x080095a9
 8009594:	080095b1 	.word	0x080095b1
 8009598:	080095b9 	.word	0x080095b9
 800959c:	080095c1 	.word	0x080095c1
 80095a0:	080095c9 	.word	0x080095c9
 80095a4:	080095d1 	.word	0x080095d1
 80095a8:	2300      	movs	r3, #0
 80095aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ae:	e050      	b.n	8009652 <UART_SetConfig+0x5a6>
 80095b0:	2304      	movs	r3, #4
 80095b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095b6:	e04c      	b.n	8009652 <UART_SetConfig+0x5a6>
 80095b8:	2308      	movs	r3, #8
 80095ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095be:	e048      	b.n	8009652 <UART_SetConfig+0x5a6>
 80095c0:	2310      	movs	r3, #16
 80095c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095c6:	e044      	b.n	8009652 <UART_SetConfig+0x5a6>
 80095c8:	2320      	movs	r3, #32
 80095ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ce:	e040      	b.n	8009652 <UART_SetConfig+0x5a6>
 80095d0:	2340      	movs	r3, #64	@ 0x40
 80095d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095d6:	e03c      	b.n	8009652 <UART_SetConfig+0x5a6>
 80095d8:	2380      	movs	r3, #128	@ 0x80
 80095da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095de:	e038      	b.n	8009652 <UART_SetConfig+0x5a6>
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a5b      	ldr	r2, [pc, #364]	@ (8009754 <UART_SetConfig+0x6a8>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d130      	bne.n	800964c <UART_SetConfig+0x5a0>
 80095ea:	4b57      	ldr	r3, [pc, #348]	@ (8009748 <UART_SetConfig+0x69c>)
 80095ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095ee:	f003 0307 	and.w	r3, r3, #7
 80095f2:	2b05      	cmp	r3, #5
 80095f4:	d826      	bhi.n	8009644 <UART_SetConfig+0x598>
 80095f6:	a201      	add	r2, pc, #4	@ (adr r2, 80095fc <UART_SetConfig+0x550>)
 80095f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095fc:	08009615 	.word	0x08009615
 8009600:	0800961d 	.word	0x0800961d
 8009604:	08009625 	.word	0x08009625
 8009608:	0800962d 	.word	0x0800962d
 800960c:	08009635 	.word	0x08009635
 8009610:	0800963d 	.word	0x0800963d
 8009614:	2302      	movs	r3, #2
 8009616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800961a:	e01a      	b.n	8009652 <UART_SetConfig+0x5a6>
 800961c:	2304      	movs	r3, #4
 800961e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009622:	e016      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009624:	2308      	movs	r3, #8
 8009626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800962a:	e012      	b.n	8009652 <UART_SetConfig+0x5a6>
 800962c:	2310      	movs	r3, #16
 800962e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009632:	e00e      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009634:	2320      	movs	r3, #32
 8009636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800963a:	e00a      	b.n	8009652 <UART_SetConfig+0x5a6>
 800963c:	2340      	movs	r3, #64	@ 0x40
 800963e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009642:	e006      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009644:	2380      	movs	r3, #128	@ 0x80
 8009646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800964a:	e002      	b.n	8009652 <UART_SetConfig+0x5a6>
 800964c:	2380      	movs	r3, #128	@ 0x80
 800964e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a3f      	ldr	r2, [pc, #252]	@ (8009754 <UART_SetConfig+0x6a8>)
 8009658:	4293      	cmp	r3, r2
 800965a:	f040 80f8 	bne.w	800984e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800965e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009662:	2b20      	cmp	r3, #32
 8009664:	dc46      	bgt.n	80096f4 <UART_SetConfig+0x648>
 8009666:	2b02      	cmp	r3, #2
 8009668:	f2c0 8082 	blt.w	8009770 <UART_SetConfig+0x6c4>
 800966c:	3b02      	subs	r3, #2
 800966e:	2b1e      	cmp	r3, #30
 8009670:	d87e      	bhi.n	8009770 <UART_SetConfig+0x6c4>
 8009672:	a201      	add	r2, pc, #4	@ (adr r2, 8009678 <UART_SetConfig+0x5cc>)
 8009674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009678:	080096fb 	.word	0x080096fb
 800967c:	08009771 	.word	0x08009771
 8009680:	08009703 	.word	0x08009703
 8009684:	08009771 	.word	0x08009771
 8009688:	08009771 	.word	0x08009771
 800968c:	08009771 	.word	0x08009771
 8009690:	08009713 	.word	0x08009713
 8009694:	08009771 	.word	0x08009771
 8009698:	08009771 	.word	0x08009771
 800969c:	08009771 	.word	0x08009771
 80096a0:	08009771 	.word	0x08009771
 80096a4:	08009771 	.word	0x08009771
 80096a8:	08009771 	.word	0x08009771
 80096ac:	08009771 	.word	0x08009771
 80096b0:	08009723 	.word	0x08009723
 80096b4:	08009771 	.word	0x08009771
 80096b8:	08009771 	.word	0x08009771
 80096bc:	08009771 	.word	0x08009771
 80096c0:	08009771 	.word	0x08009771
 80096c4:	08009771 	.word	0x08009771
 80096c8:	08009771 	.word	0x08009771
 80096cc:	08009771 	.word	0x08009771
 80096d0:	08009771 	.word	0x08009771
 80096d4:	08009771 	.word	0x08009771
 80096d8:	08009771 	.word	0x08009771
 80096dc:	08009771 	.word	0x08009771
 80096e0:	08009771 	.word	0x08009771
 80096e4:	08009771 	.word	0x08009771
 80096e8:	08009771 	.word	0x08009771
 80096ec:	08009771 	.word	0x08009771
 80096f0:	08009763 	.word	0x08009763
 80096f4:	2b40      	cmp	r3, #64	@ 0x40
 80096f6:	d037      	beq.n	8009768 <UART_SetConfig+0x6bc>
 80096f8:	e03a      	b.n	8009770 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80096fa:	f7fd fe73 	bl	80073e4 <HAL_RCCEx_GetD3PCLK1Freq>
 80096fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009700:	e03c      	b.n	800977c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009702:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009706:	4618      	mov	r0, r3
 8009708:	f7fd fe82 	bl	8007410 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800970c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800970e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009710:	e034      	b.n	800977c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009712:	f107 0318 	add.w	r3, r7, #24
 8009716:	4618      	mov	r0, r3
 8009718:	f7fd ffce 	bl	80076b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800971c:	69fb      	ldr	r3, [r7, #28]
 800971e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009720:	e02c      	b.n	800977c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009722:	4b09      	ldr	r3, [pc, #36]	@ (8009748 <UART_SetConfig+0x69c>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f003 0320 	and.w	r3, r3, #32
 800972a:	2b00      	cmp	r3, #0
 800972c:	d016      	beq.n	800975c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800972e:	4b06      	ldr	r3, [pc, #24]	@ (8009748 <UART_SetConfig+0x69c>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	08db      	lsrs	r3, r3, #3
 8009734:	f003 0303 	and.w	r3, r3, #3
 8009738:	4a07      	ldr	r2, [pc, #28]	@ (8009758 <UART_SetConfig+0x6ac>)
 800973a:	fa22 f303 	lsr.w	r3, r2, r3
 800973e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009740:	e01c      	b.n	800977c <UART_SetConfig+0x6d0>
 8009742:	bf00      	nop
 8009744:	40011400 	.word	0x40011400
 8009748:	58024400 	.word	0x58024400
 800974c:	40007800 	.word	0x40007800
 8009750:	40007c00 	.word	0x40007c00
 8009754:	58000c00 	.word	0x58000c00
 8009758:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800975c:	4b9d      	ldr	r3, [pc, #628]	@ (80099d4 <UART_SetConfig+0x928>)
 800975e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009760:	e00c      	b.n	800977c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009762:	4b9d      	ldr	r3, [pc, #628]	@ (80099d8 <UART_SetConfig+0x92c>)
 8009764:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009766:	e009      	b.n	800977c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009768:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800976c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800976e:	e005      	b.n	800977c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009770:	2300      	movs	r3, #0
 8009772:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009774:	2301      	movs	r3, #1
 8009776:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800977a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800977c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800977e:	2b00      	cmp	r3, #0
 8009780:	f000 81de 	beq.w	8009b40 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009788:	4a94      	ldr	r2, [pc, #592]	@ (80099dc <UART_SetConfig+0x930>)
 800978a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800978e:	461a      	mov	r2, r3
 8009790:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009792:	fbb3 f3f2 	udiv	r3, r3, r2
 8009796:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	685a      	ldr	r2, [r3, #4]
 800979c:	4613      	mov	r3, r2
 800979e:	005b      	lsls	r3, r3, #1
 80097a0:	4413      	add	r3, r2
 80097a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d305      	bcc.n	80097b4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80097ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d903      	bls.n	80097bc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80097b4:	2301      	movs	r3, #1
 80097b6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80097ba:	e1c1      	b.n	8009b40 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097be:	2200      	movs	r2, #0
 80097c0:	60bb      	str	r3, [r7, #8]
 80097c2:	60fa      	str	r2, [r7, #12]
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097c8:	4a84      	ldr	r2, [pc, #528]	@ (80099dc <UART_SetConfig+0x930>)
 80097ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097ce:	b29b      	uxth	r3, r3
 80097d0:	2200      	movs	r2, #0
 80097d2:	603b      	str	r3, [r7, #0]
 80097d4:	607a      	str	r2, [r7, #4]
 80097d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80097de:	f7f6 fd7b 	bl	80002d8 <__aeabi_uldivmod>
 80097e2:	4602      	mov	r2, r0
 80097e4:	460b      	mov	r3, r1
 80097e6:	4610      	mov	r0, r2
 80097e8:	4619      	mov	r1, r3
 80097ea:	f04f 0200 	mov.w	r2, #0
 80097ee:	f04f 0300 	mov.w	r3, #0
 80097f2:	020b      	lsls	r3, r1, #8
 80097f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80097f8:	0202      	lsls	r2, r0, #8
 80097fa:	6979      	ldr	r1, [r7, #20]
 80097fc:	6849      	ldr	r1, [r1, #4]
 80097fe:	0849      	lsrs	r1, r1, #1
 8009800:	2000      	movs	r0, #0
 8009802:	460c      	mov	r4, r1
 8009804:	4605      	mov	r5, r0
 8009806:	eb12 0804 	adds.w	r8, r2, r4
 800980a:	eb43 0905 	adc.w	r9, r3, r5
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	2200      	movs	r2, #0
 8009814:	469a      	mov	sl, r3
 8009816:	4693      	mov	fp, r2
 8009818:	4652      	mov	r2, sl
 800981a:	465b      	mov	r3, fp
 800981c:	4640      	mov	r0, r8
 800981e:	4649      	mov	r1, r9
 8009820:	f7f6 fd5a 	bl	80002d8 <__aeabi_uldivmod>
 8009824:	4602      	mov	r2, r0
 8009826:	460b      	mov	r3, r1
 8009828:	4613      	mov	r3, r2
 800982a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800982c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800982e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009832:	d308      	bcc.n	8009846 <UART_SetConfig+0x79a>
 8009834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009836:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800983a:	d204      	bcs.n	8009846 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009842:	60da      	str	r2, [r3, #12]
 8009844:	e17c      	b.n	8009b40 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009846:	2301      	movs	r3, #1
 8009848:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800984c:	e178      	b.n	8009b40 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	69db      	ldr	r3, [r3, #28]
 8009852:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009856:	f040 80c5 	bne.w	80099e4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800985a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800985e:	2b20      	cmp	r3, #32
 8009860:	dc48      	bgt.n	80098f4 <UART_SetConfig+0x848>
 8009862:	2b00      	cmp	r3, #0
 8009864:	db7b      	blt.n	800995e <UART_SetConfig+0x8b2>
 8009866:	2b20      	cmp	r3, #32
 8009868:	d879      	bhi.n	800995e <UART_SetConfig+0x8b2>
 800986a:	a201      	add	r2, pc, #4	@ (adr r2, 8009870 <UART_SetConfig+0x7c4>)
 800986c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009870:	080098fb 	.word	0x080098fb
 8009874:	08009903 	.word	0x08009903
 8009878:	0800995f 	.word	0x0800995f
 800987c:	0800995f 	.word	0x0800995f
 8009880:	0800990b 	.word	0x0800990b
 8009884:	0800995f 	.word	0x0800995f
 8009888:	0800995f 	.word	0x0800995f
 800988c:	0800995f 	.word	0x0800995f
 8009890:	0800991b 	.word	0x0800991b
 8009894:	0800995f 	.word	0x0800995f
 8009898:	0800995f 	.word	0x0800995f
 800989c:	0800995f 	.word	0x0800995f
 80098a0:	0800995f 	.word	0x0800995f
 80098a4:	0800995f 	.word	0x0800995f
 80098a8:	0800995f 	.word	0x0800995f
 80098ac:	0800995f 	.word	0x0800995f
 80098b0:	0800992b 	.word	0x0800992b
 80098b4:	0800995f 	.word	0x0800995f
 80098b8:	0800995f 	.word	0x0800995f
 80098bc:	0800995f 	.word	0x0800995f
 80098c0:	0800995f 	.word	0x0800995f
 80098c4:	0800995f 	.word	0x0800995f
 80098c8:	0800995f 	.word	0x0800995f
 80098cc:	0800995f 	.word	0x0800995f
 80098d0:	0800995f 	.word	0x0800995f
 80098d4:	0800995f 	.word	0x0800995f
 80098d8:	0800995f 	.word	0x0800995f
 80098dc:	0800995f 	.word	0x0800995f
 80098e0:	0800995f 	.word	0x0800995f
 80098e4:	0800995f 	.word	0x0800995f
 80098e8:	0800995f 	.word	0x0800995f
 80098ec:	0800995f 	.word	0x0800995f
 80098f0:	08009951 	.word	0x08009951
 80098f4:	2b40      	cmp	r3, #64	@ 0x40
 80098f6:	d02e      	beq.n	8009956 <UART_SetConfig+0x8aa>
 80098f8:	e031      	b.n	800995e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80098fa:	f7fb fdbd 	bl	8005478 <HAL_RCC_GetPCLK1Freq>
 80098fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009900:	e033      	b.n	800996a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009902:	f7fb fdcf 	bl	80054a4 <HAL_RCC_GetPCLK2Freq>
 8009906:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009908:	e02f      	b.n	800996a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800990a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800990e:	4618      	mov	r0, r3
 8009910:	f7fd fd7e 	bl	8007410 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009916:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009918:	e027      	b.n	800996a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800991a:	f107 0318 	add.w	r3, r7, #24
 800991e:	4618      	mov	r0, r3
 8009920:	f7fd feca 	bl	80076b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009924:	69fb      	ldr	r3, [r7, #28]
 8009926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009928:	e01f      	b.n	800996a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800992a:	4b2d      	ldr	r3, [pc, #180]	@ (80099e0 <UART_SetConfig+0x934>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f003 0320 	and.w	r3, r3, #32
 8009932:	2b00      	cmp	r3, #0
 8009934:	d009      	beq.n	800994a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009936:	4b2a      	ldr	r3, [pc, #168]	@ (80099e0 <UART_SetConfig+0x934>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	08db      	lsrs	r3, r3, #3
 800993c:	f003 0303 	and.w	r3, r3, #3
 8009940:	4a24      	ldr	r2, [pc, #144]	@ (80099d4 <UART_SetConfig+0x928>)
 8009942:	fa22 f303 	lsr.w	r3, r2, r3
 8009946:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009948:	e00f      	b.n	800996a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800994a:	4b22      	ldr	r3, [pc, #136]	@ (80099d4 <UART_SetConfig+0x928>)
 800994c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800994e:	e00c      	b.n	800996a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009950:	4b21      	ldr	r3, [pc, #132]	@ (80099d8 <UART_SetConfig+0x92c>)
 8009952:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009954:	e009      	b.n	800996a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009956:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800995a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800995c:	e005      	b.n	800996a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800995e:	2300      	movs	r3, #0
 8009960:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009962:	2301      	movs	r3, #1
 8009964:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009968:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800996a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800996c:	2b00      	cmp	r3, #0
 800996e:	f000 80e7 	beq.w	8009b40 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009976:	4a19      	ldr	r2, [pc, #100]	@ (80099dc <UART_SetConfig+0x930>)
 8009978:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800997c:	461a      	mov	r2, r3
 800997e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009980:	fbb3 f3f2 	udiv	r3, r3, r2
 8009984:	005a      	lsls	r2, r3, #1
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	085b      	lsrs	r3, r3, #1
 800998c:	441a      	add	r2, r3
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	fbb2 f3f3 	udiv	r3, r2, r3
 8009996:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800999a:	2b0f      	cmp	r3, #15
 800999c:	d916      	bls.n	80099cc <UART_SetConfig+0x920>
 800999e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099a4:	d212      	bcs.n	80099cc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80099a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	f023 030f 	bic.w	r3, r3, #15
 80099ae:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80099b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099b2:	085b      	lsrs	r3, r3, #1
 80099b4:	b29b      	uxth	r3, r3
 80099b6:	f003 0307 	and.w	r3, r3, #7
 80099ba:	b29a      	uxth	r2, r3
 80099bc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80099be:	4313      	orrs	r3, r2
 80099c0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80099c8:	60da      	str	r2, [r3, #12]
 80099ca:	e0b9      	b.n	8009b40 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80099cc:	2301      	movs	r3, #1
 80099ce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80099d2:	e0b5      	b.n	8009b40 <UART_SetConfig+0xa94>
 80099d4:	03d09000 	.word	0x03d09000
 80099d8:	003d0900 	.word	0x003d0900
 80099dc:	0800a854 	.word	0x0800a854
 80099e0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80099e4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80099e8:	2b20      	cmp	r3, #32
 80099ea:	dc49      	bgt.n	8009a80 <UART_SetConfig+0x9d4>
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	db7c      	blt.n	8009aea <UART_SetConfig+0xa3e>
 80099f0:	2b20      	cmp	r3, #32
 80099f2:	d87a      	bhi.n	8009aea <UART_SetConfig+0xa3e>
 80099f4:	a201      	add	r2, pc, #4	@ (adr r2, 80099fc <UART_SetConfig+0x950>)
 80099f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099fa:	bf00      	nop
 80099fc:	08009a87 	.word	0x08009a87
 8009a00:	08009a8f 	.word	0x08009a8f
 8009a04:	08009aeb 	.word	0x08009aeb
 8009a08:	08009aeb 	.word	0x08009aeb
 8009a0c:	08009a97 	.word	0x08009a97
 8009a10:	08009aeb 	.word	0x08009aeb
 8009a14:	08009aeb 	.word	0x08009aeb
 8009a18:	08009aeb 	.word	0x08009aeb
 8009a1c:	08009aa7 	.word	0x08009aa7
 8009a20:	08009aeb 	.word	0x08009aeb
 8009a24:	08009aeb 	.word	0x08009aeb
 8009a28:	08009aeb 	.word	0x08009aeb
 8009a2c:	08009aeb 	.word	0x08009aeb
 8009a30:	08009aeb 	.word	0x08009aeb
 8009a34:	08009aeb 	.word	0x08009aeb
 8009a38:	08009aeb 	.word	0x08009aeb
 8009a3c:	08009ab7 	.word	0x08009ab7
 8009a40:	08009aeb 	.word	0x08009aeb
 8009a44:	08009aeb 	.word	0x08009aeb
 8009a48:	08009aeb 	.word	0x08009aeb
 8009a4c:	08009aeb 	.word	0x08009aeb
 8009a50:	08009aeb 	.word	0x08009aeb
 8009a54:	08009aeb 	.word	0x08009aeb
 8009a58:	08009aeb 	.word	0x08009aeb
 8009a5c:	08009aeb 	.word	0x08009aeb
 8009a60:	08009aeb 	.word	0x08009aeb
 8009a64:	08009aeb 	.word	0x08009aeb
 8009a68:	08009aeb 	.word	0x08009aeb
 8009a6c:	08009aeb 	.word	0x08009aeb
 8009a70:	08009aeb 	.word	0x08009aeb
 8009a74:	08009aeb 	.word	0x08009aeb
 8009a78:	08009aeb 	.word	0x08009aeb
 8009a7c:	08009add 	.word	0x08009add
 8009a80:	2b40      	cmp	r3, #64	@ 0x40
 8009a82:	d02e      	beq.n	8009ae2 <UART_SetConfig+0xa36>
 8009a84:	e031      	b.n	8009aea <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a86:	f7fb fcf7 	bl	8005478 <HAL_RCC_GetPCLK1Freq>
 8009a8a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009a8c:	e033      	b.n	8009af6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a8e:	f7fb fd09 	bl	80054a4 <HAL_RCC_GetPCLK2Freq>
 8009a92:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009a94:	e02f      	b.n	8009af6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f7fd fcb8 	bl	8007410 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009aa4:	e027      	b.n	8009af6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009aa6:	f107 0318 	add.w	r3, r7, #24
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f7fd fe04 	bl	80076b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009ab0:	69fb      	ldr	r3, [r7, #28]
 8009ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ab4:	e01f      	b.n	8009af6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ab6:	4b2d      	ldr	r3, [pc, #180]	@ (8009b6c <UART_SetConfig+0xac0>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f003 0320 	and.w	r3, r3, #32
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d009      	beq.n	8009ad6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009ac2:	4b2a      	ldr	r3, [pc, #168]	@ (8009b6c <UART_SetConfig+0xac0>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	08db      	lsrs	r3, r3, #3
 8009ac8:	f003 0303 	and.w	r3, r3, #3
 8009acc:	4a28      	ldr	r2, [pc, #160]	@ (8009b70 <UART_SetConfig+0xac4>)
 8009ace:	fa22 f303 	lsr.w	r3, r2, r3
 8009ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009ad4:	e00f      	b.n	8009af6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009ad6:	4b26      	ldr	r3, [pc, #152]	@ (8009b70 <UART_SetConfig+0xac4>)
 8009ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ada:	e00c      	b.n	8009af6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009adc:	4b25      	ldr	r3, [pc, #148]	@ (8009b74 <UART_SetConfig+0xac8>)
 8009ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ae0:	e009      	b.n	8009af6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ae2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ae8:	e005      	b.n	8009af6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009aea:	2300      	movs	r3, #0
 8009aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009aee:	2301      	movs	r3, #1
 8009af0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009af4:	bf00      	nop
    }

    if (pclk != 0U)
 8009af6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d021      	beq.n	8009b40 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b00:	4a1d      	ldr	r2, [pc, #116]	@ (8009b78 <UART_SetConfig+0xacc>)
 8009b02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b06:	461a      	mov	r2, r3
 8009b08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b0a:	fbb3 f2f2 	udiv	r2, r3, r2
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	085b      	lsrs	r3, r3, #1
 8009b14:	441a      	add	r2, r3
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	685b      	ldr	r3, [r3, #4]
 8009b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b1e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b22:	2b0f      	cmp	r3, #15
 8009b24:	d909      	bls.n	8009b3a <UART_SetConfig+0xa8e>
 8009b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b2c:	d205      	bcs.n	8009b3a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b30:	b29a      	uxth	r2, r3
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	60da      	str	r2, [r3, #12]
 8009b38:	e002      	b.n	8009b40 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	2201      	movs	r2, #1
 8009b44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	2200      	movs	r2, #0
 8009b54:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009b5c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3748      	adds	r7, #72	@ 0x48
 8009b64:	46bd      	mov	sp, r7
 8009b66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009b6a:	bf00      	nop
 8009b6c:	58024400 	.word	0x58024400
 8009b70:	03d09000 	.word	0x03d09000
 8009b74:	003d0900 	.word	0x003d0900
 8009b78:	0800a854 	.word	0x0800a854

08009b7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b083      	sub	sp, #12
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b88:	f003 0308 	and.w	r3, r3, #8
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d00a      	beq.n	8009ba6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	685b      	ldr	r3, [r3, #4]
 8009b96:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	430a      	orrs	r2, r1
 8009ba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009baa:	f003 0301 	and.w	r3, r3, #1
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d00a      	beq.n	8009bc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	685b      	ldr	r3, [r3, #4]
 8009bb8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	430a      	orrs	r2, r1
 8009bc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bcc:	f003 0302 	and.w	r3, r3, #2
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d00a      	beq.n	8009bea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	430a      	orrs	r2, r1
 8009be8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bee:	f003 0304 	and.w	r3, r3, #4
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d00a      	beq.n	8009c0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	685b      	ldr	r3, [r3, #4]
 8009bfc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	430a      	orrs	r2, r1
 8009c0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c10:	f003 0310 	and.w	r3, r3, #16
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d00a      	beq.n	8009c2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	689b      	ldr	r3, [r3, #8]
 8009c1e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	430a      	orrs	r2, r1
 8009c2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c32:	f003 0320 	and.w	r3, r3, #32
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d00a      	beq.n	8009c50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	689b      	ldr	r3, [r3, #8]
 8009c40:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	430a      	orrs	r2, r1
 8009c4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d01a      	beq.n	8009c92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	685b      	ldr	r3, [r3, #4]
 8009c62:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	430a      	orrs	r2, r1
 8009c70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c7a:	d10a      	bne.n	8009c92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	430a      	orrs	r2, r1
 8009c90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d00a      	beq.n	8009cb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	430a      	orrs	r2, r1
 8009cb2:	605a      	str	r2, [r3, #4]
  }
}
 8009cb4:	bf00      	nop
 8009cb6:	370c      	adds	r7, #12
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbe:	4770      	bx	lr

08009cc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b098      	sub	sp, #96	@ 0x60
 8009cc4:	af02      	add	r7, sp, #8
 8009cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009cd0:	f7f7 fde0 	bl	8001894 <HAL_GetTick>
 8009cd4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f003 0308 	and.w	r3, r3, #8
 8009ce0:	2b08      	cmp	r3, #8
 8009ce2:	d12f      	bne.n	8009d44 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ce4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009ce8:	9300      	str	r3, [sp, #0]
 8009cea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009cec:	2200      	movs	r2, #0
 8009cee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 f88e 	bl	8009e14 <UART_WaitOnFlagUntilTimeout>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d022      	beq.n	8009d44 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d06:	e853 3f00 	ldrex	r3, [r3]
 8009d0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009d0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009d12:	653b      	str	r3, [r7, #80]	@ 0x50
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	461a      	mov	r2, r3
 8009d1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d1e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009d22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d24:	e841 2300 	strex	r3, r2, [r1]
 8009d28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009d2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d1e6      	bne.n	8009cfe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2220      	movs	r2, #32
 8009d34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d40:	2303      	movs	r3, #3
 8009d42:	e063      	b.n	8009e0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f003 0304 	and.w	r3, r3, #4
 8009d4e:	2b04      	cmp	r3, #4
 8009d50:	d149      	bne.n	8009de6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d52:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009d56:	9300      	str	r3, [sp, #0]
 8009d58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f000 f857 	bl	8009e14 <UART_WaitOnFlagUntilTimeout>
 8009d66:	4603      	mov	r3, r0
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d03c      	beq.n	8009de6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d74:	e853 3f00 	ldrex	r3, [r3]
 8009d78:	623b      	str	r3, [r7, #32]
   return(result);
 8009d7a:	6a3b      	ldr	r3, [r7, #32]
 8009d7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009d80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	461a      	mov	r2, r3
 8009d88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d92:	e841 2300 	strex	r3, r2, [r1]
 8009d96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d1e6      	bne.n	8009d6c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	3308      	adds	r3, #8
 8009da4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	e853 3f00 	ldrex	r3, [r3]
 8009dac:	60fb      	str	r3, [r7, #12]
   return(result);
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	f023 0301 	bic.w	r3, r3, #1
 8009db4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	3308      	adds	r3, #8
 8009dbc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009dbe:	61fa      	str	r2, [r7, #28]
 8009dc0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dc2:	69b9      	ldr	r1, [r7, #24]
 8009dc4:	69fa      	ldr	r2, [r7, #28]
 8009dc6:	e841 2300 	strex	r3, r2, [r1]
 8009dca:	617b      	str	r3, [r7, #20]
   return(result);
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d1e5      	bne.n	8009d9e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2220      	movs	r2, #32
 8009dd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009de2:	2303      	movs	r3, #3
 8009de4:	e012      	b.n	8009e0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2220      	movs	r2, #32
 8009dea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2220      	movs	r2, #32
 8009df2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2200      	movs	r2, #0
 8009e06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009e0a:	2300      	movs	r3, #0
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3758      	adds	r7, #88	@ 0x58
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}

08009e14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b084      	sub	sp, #16
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	60f8      	str	r0, [r7, #12]
 8009e1c:	60b9      	str	r1, [r7, #8]
 8009e1e:	603b      	str	r3, [r7, #0]
 8009e20:	4613      	mov	r3, r2
 8009e22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e24:	e04f      	b.n	8009ec6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e26:	69bb      	ldr	r3, [r7, #24]
 8009e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e2c:	d04b      	beq.n	8009ec6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e2e:	f7f7 fd31 	bl	8001894 <HAL_GetTick>
 8009e32:	4602      	mov	r2, r0
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	1ad3      	subs	r3, r2, r3
 8009e38:	69ba      	ldr	r2, [r7, #24]
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	d302      	bcc.n	8009e44 <UART_WaitOnFlagUntilTimeout+0x30>
 8009e3e:	69bb      	ldr	r3, [r7, #24]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d101      	bne.n	8009e48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009e44:	2303      	movs	r3, #3
 8009e46:	e04e      	b.n	8009ee6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f003 0304 	and.w	r3, r3, #4
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d037      	beq.n	8009ec6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	2b80      	cmp	r3, #128	@ 0x80
 8009e5a:	d034      	beq.n	8009ec6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	2b40      	cmp	r3, #64	@ 0x40
 8009e60:	d031      	beq.n	8009ec6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	69db      	ldr	r3, [r3, #28]
 8009e68:	f003 0308 	and.w	r3, r3, #8
 8009e6c:	2b08      	cmp	r3, #8
 8009e6e:	d110      	bne.n	8009e92 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	2208      	movs	r2, #8
 8009e76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009e78:	68f8      	ldr	r0, [r7, #12]
 8009e7a:	f000 f839 	bl	8009ef0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2208      	movs	r2, #8
 8009e82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	e029      	b.n	8009ee6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	69db      	ldr	r3, [r3, #28]
 8009e98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009e9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ea0:	d111      	bne.n	8009ec6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009eaa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009eac:	68f8      	ldr	r0, [r7, #12]
 8009eae:	f000 f81f 	bl	8009ef0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	2220      	movs	r2, #32
 8009eb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009ec2:	2303      	movs	r3, #3
 8009ec4:	e00f      	b.n	8009ee6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	69da      	ldr	r2, [r3, #28]
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	4013      	ands	r3, r2
 8009ed0:	68ba      	ldr	r2, [r7, #8]
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	bf0c      	ite	eq
 8009ed6:	2301      	moveq	r3, #1
 8009ed8:	2300      	movne	r3, #0
 8009eda:	b2db      	uxtb	r3, r3
 8009edc:	461a      	mov	r2, r3
 8009ede:	79fb      	ldrb	r3, [r7, #7]
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d0a0      	beq.n	8009e26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ee4:	2300      	movs	r3, #0
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3710      	adds	r7, #16
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
	...

08009ef0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b095      	sub	sp, #84	@ 0x54
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009efe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f00:	e853 3f00 	ldrex	r3, [r3]
 8009f04:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009f0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	461a      	mov	r2, r3
 8009f14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f16:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f18:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f1a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009f1c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009f1e:	e841 2300 	strex	r3, r2, [r1]
 8009f22:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d1e6      	bne.n	8009ef8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	3308      	adds	r3, #8
 8009f30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f32:	6a3b      	ldr	r3, [r7, #32]
 8009f34:	e853 3f00 	ldrex	r3, [r3]
 8009f38:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f3a:	69fa      	ldr	r2, [r7, #28]
 8009f3c:	4b1e      	ldr	r3, [pc, #120]	@ (8009fb8 <UART_EndRxTransfer+0xc8>)
 8009f3e:	4013      	ands	r3, r2
 8009f40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	3308      	adds	r3, #8
 8009f48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009f50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f52:	e841 2300 	strex	r3, r2, [r1]
 8009f56:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d1e5      	bne.n	8009f2a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f62:	2b01      	cmp	r3, #1
 8009f64:	d118      	bne.n	8009f98 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	e853 3f00 	ldrex	r3, [r3]
 8009f72:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	f023 0310 	bic.w	r3, r3, #16
 8009f7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	461a      	mov	r2, r3
 8009f82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f84:	61bb      	str	r3, [r7, #24]
 8009f86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f88:	6979      	ldr	r1, [r7, #20]
 8009f8a:	69ba      	ldr	r2, [r7, #24]
 8009f8c:	e841 2300 	strex	r3, r2, [r1]
 8009f90:	613b      	str	r3, [r7, #16]
   return(result);
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d1e6      	bne.n	8009f66 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2220      	movs	r2, #32
 8009f9c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009fac:	bf00      	nop
 8009fae:	3754      	adds	r7, #84	@ 0x54
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb6:	4770      	bx	lr
 8009fb8:	effffffe 	.word	0xeffffffe

08009fbc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b085      	sub	sp, #20
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009fca:	2b01      	cmp	r3, #1
 8009fcc:	d101      	bne.n	8009fd2 <HAL_UARTEx_DisableFifoMode+0x16>
 8009fce:	2302      	movs	r3, #2
 8009fd0:	e027      	b.n	800a022 <HAL_UARTEx_DisableFifoMode+0x66>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2201      	movs	r2, #1
 8009fd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2224      	movs	r2, #36	@ 0x24
 8009fde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	681a      	ldr	r2, [r3, #0]
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f022 0201 	bic.w	r2, r2, #1
 8009ff8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a000:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2200      	movs	r2, #0
 800a006:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	68fa      	ldr	r2, [r7, #12]
 800a00e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2220      	movs	r2, #32
 800a014:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2200      	movs	r2, #0
 800a01c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a020:	2300      	movs	r3, #0
}
 800a022:	4618      	mov	r0, r3
 800a024:	3714      	adds	r7, #20
 800a026:	46bd      	mov	sp, r7
 800a028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02c:	4770      	bx	lr

0800a02e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a02e:	b580      	push	{r7, lr}
 800a030:	b084      	sub	sp, #16
 800a032:	af00      	add	r7, sp, #0
 800a034:	6078      	str	r0, [r7, #4]
 800a036:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a03e:	2b01      	cmp	r3, #1
 800a040:	d101      	bne.n	800a046 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a042:	2302      	movs	r3, #2
 800a044:	e02d      	b.n	800a0a2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2201      	movs	r2, #1
 800a04a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2224      	movs	r2, #36	@ 0x24
 800a052:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	681a      	ldr	r2, [r3, #0]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f022 0201 	bic.w	r2, r2, #1
 800a06c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	689b      	ldr	r3, [r3, #8]
 800a074:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	683a      	ldr	r2, [r7, #0]
 800a07e:	430a      	orrs	r2, r1
 800a080:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f000 f850 	bl	800a128 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	68fa      	ldr	r2, [r7, #12]
 800a08e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2220      	movs	r2, #32
 800a094:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2200      	movs	r2, #0
 800a09c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a0a0:	2300      	movs	r3, #0
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3710      	adds	r7, #16
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}

0800a0aa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a0aa:	b580      	push	{r7, lr}
 800a0ac:	b084      	sub	sp, #16
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	6078      	str	r0, [r7, #4]
 800a0b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a0ba:	2b01      	cmp	r3, #1
 800a0bc:	d101      	bne.n	800a0c2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a0be:	2302      	movs	r3, #2
 800a0c0:	e02d      	b.n	800a11e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2201      	movs	r2, #1
 800a0c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2224      	movs	r2, #36	@ 0x24
 800a0ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	681a      	ldr	r2, [r3, #0]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f022 0201 	bic.w	r2, r2, #1
 800a0e8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	689b      	ldr	r3, [r3, #8]
 800a0f0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	683a      	ldr	r2, [r7, #0]
 800a0fa:	430a      	orrs	r2, r1
 800a0fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 f812 	bl	800a128 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	68fa      	ldr	r2, [r7, #12]
 800a10a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2220      	movs	r2, #32
 800a110:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2200      	movs	r2, #0
 800a118:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a11c:	2300      	movs	r3, #0
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3710      	adds	r7, #16
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
	...

0800a128 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a128:	b480      	push	{r7}
 800a12a:	b085      	sub	sp, #20
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a134:	2b00      	cmp	r3, #0
 800a136:	d108      	bne.n	800a14a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2201      	movs	r2, #1
 800a13c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2201      	movs	r2, #1
 800a144:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a148:	e031      	b.n	800a1ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a14a:	2310      	movs	r3, #16
 800a14c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a14e:	2310      	movs	r3, #16
 800a150:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	689b      	ldr	r3, [r3, #8]
 800a158:	0e5b      	lsrs	r3, r3, #25
 800a15a:	b2db      	uxtb	r3, r3
 800a15c:	f003 0307 	and.w	r3, r3, #7
 800a160:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	689b      	ldr	r3, [r3, #8]
 800a168:	0f5b      	lsrs	r3, r3, #29
 800a16a:	b2db      	uxtb	r3, r3
 800a16c:	f003 0307 	and.w	r3, r3, #7
 800a170:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a172:	7bbb      	ldrb	r3, [r7, #14]
 800a174:	7b3a      	ldrb	r2, [r7, #12]
 800a176:	4911      	ldr	r1, [pc, #68]	@ (800a1bc <UARTEx_SetNbDataToProcess+0x94>)
 800a178:	5c8a      	ldrb	r2, [r1, r2]
 800a17a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a17e:	7b3a      	ldrb	r2, [r7, #12]
 800a180:	490f      	ldr	r1, [pc, #60]	@ (800a1c0 <UARTEx_SetNbDataToProcess+0x98>)
 800a182:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a184:	fb93 f3f2 	sdiv	r3, r3, r2
 800a188:	b29a      	uxth	r2, r3
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a190:	7bfb      	ldrb	r3, [r7, #15]
 800a192:	7b7a      	ldrb	r2, [r7, #13]
 800a194:	4909      	ldr	r1, [pc, #36]	@ (800a1bc <UARTEx_SetNbDataToProcess+0x94>)
 800a196:	5c8a      	ldrb	r2, [r1, r2]
 800a198:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a19c:	7b7a      	ldrb	r2, [r7, #13]
 800a19e:	4908      	ldr	r1, [pc, #32]	@ (800a1c0 <UARTEx_SetNbDataToProcess+0x98>)
 800a1a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a1a2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a1a6:	b29a      	uxth	r2, r3
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a1ae:	bf00      	nop
 800a1b0:	3714      	adds	r7, #20
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr
 800a1ba:	bf00      	nop
 800a1bc:	0800a86c 	.word	0x0800a86c
 800a1c0:	0800a874 	.word	0x0800a874

0800a1c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a1c4:	b084      	sub	sp, #16
 800a1c6:	b580      	push	{r7, lr}
 800a1c8:	b084      	sub	sp, #16
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	6078      	str	r0, [r7, #4]
 800a1ce:	f107 001c 	add.w	r0, r7, #28
 800a1d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a1d6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	d121      	bne.n	800a222 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1e2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	68da      	ldr	r2, [r3, #12]
 800a1ee:	4b2c      	ldr	r3, [pc, #176]	@ (800a2a0 <USB_CoreInit+0xdc>)
 800a1f0:	4013      	ands	r3, r2
 800a1f2:	687a      	ldr	r2, [r7, #4]
 800a1f4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	68db      	ldr	r3, [r3, #12]
 800a1fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a202:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a206:	2b01      	cmp	r3, #1
 800a208:	d105      	bne.n	800a216 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	68db      	ldr	r3, [r3, #12]
 800a20e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f000 faaa 	bl	800a770 <USB_CoreReset>
 800a21c:	4603      	mov	r3, r0
 800a21e:	73fb      	strb	r3, [r7, #15]
 800a220:	e01b      	b.n	800a25a <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	68db      	ldr	r3, [r3, #12]
 800a226:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f000 fa9e 	bl	800a770 <USB_CoreReset>
 800a234:	4603      	mov	r3, r0
 800a236:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a238:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d106      	bne.n	800a24e <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a244:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	639a      	str	r2, [r3, #56]	@ 0x38
 800a24c:	e005      	b.n	800a25a <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a252:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a25a:	7fbb      	ldrb	r3, [r7, #30]
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	d116      	bne.n	800a28e <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a264:	b29a      	uxth	r2, r3
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a26e:	4b0d      	ldr	r3, [pc, #52]	@ (800a2a4 <USB_CoreInit+0xe0>)
 800a270:	4313      	orrs	r3, r2
 800a272:	687a      	ldr	r2, [r7, #4]
 800a274:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	689b      	ldr	r3, [r3, #8]
 800a27a:	f043 0206 	orr.w	r2, r3, #6
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	689b      	ldr	r3, [r3, #8]
 800a286:	f043 0220 	orr.w	r2, r3, #32
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a28e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a290:	4618      	mov	r0, r3
 800a292:	3710      	adds	r7, #16
 800a294:	46bd      	mov	sp, r7
 800a296:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a29a:	b004      	add	sp, #16
 800a29c:	4770      	bx	lr
 800a29e:	bf00      	nop
 800a2a0:	ffbdffbf 	.word	0xffbdffbf
 800a2a4:	03ee0000 	.word	0x03ee0000

0800a2a8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b083      	sub	sp, #12
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	689b      	ldr	r3, [r3, #8]
 800a2b4:	f023 0201 	bic.w	r2, r3, #1
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a2bc:	2300      	movs	r3, #0
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	370c      	adds	r7, #12
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c8:	4770      	bx	lr

0800a2ca <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a2ca:	b580      	push	{r7, lr}
 800a2cc:	b084      	sub	sp, #16
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	6078      	str	r0, [r7, #4]
 800a2d2:	460b      	mov	r3, r1
 800a2d4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	68db      	ldr	r3, [r3, #12]
 800a2de:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a2e6:	78fb      	ldrb	r3, [r7, #3]
 800a2e8:	2b01      	cmp	r3, #1
 800a2ea:	d115      	bne.n	800a318 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	68db      	ldr	r3, [r3, #12]
 800a2f0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a2f8:	200a      	movs	r0, #10
 800a2fa:	f7f7 fad7 	bl	80018ac <HAL_Delay>
      ms += 10U;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	330a      	adds	r3, #10
 800a302:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f000 fa25 	bl	800a754 <USB_GetMode>
 800a30a:	4603      	mov	r3, r0
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d01e      	beq.n	800a34e <USB_SetCurrentMode+0x84>
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	2bc7      	cmp	r3, #199	@ 0xc7
 800a314:	d9f0      	bls.n	800a2f8 <USB_SetCurrentMode+0x2e>
 800a316:	e01a      	b.n	800a34e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a318:	78fb      	ldrb	r3, [r7, #3]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d115      	bne.n	800a34a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	68db      	ldr	r3, [r3, #12]
 800a322:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a32a:	200a      	movs	r0, #10
 800a32c:	f7f7 fabe 	bl	80018ac <HAL_Delay>
      ms += 10U;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	330a      	adds	r3, #10
 800a334:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f000 fa0c 	bl	800a754 <USB_GetMode>
 800a33c:	4603      	mov	r3, r0
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d005      	beq.n	800a34e <USB_SetCurrentMode+0x84>
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2bc7      	cmp	r3, #199	@ 0xc7
 800a346:	d9f0      	bls.n	800a32a <USB_SetCurrentMode+0x60>
 800a348:	e001      	b.n	800a34e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a34a:	2301      	movs	r3, #1
 800a34c:	e005      	b.n	800a35a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	2bc8      	cmp	r3, #200	@ 0xc8
 800a352:	d101      	bne.n	800a358 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a354:	2301      	movs	r3, #1
 800a356:	e000      	b.n	800a35a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a358:	2300      	movs	r3, #0
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3710      	adds	r7, #16
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
	...

0800a364 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a364:	b084      	sub	sp, #16
 800a366:	b580      	push	{r7, lr}
 800a368:	b086      	sub	sp, #24
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	6078      	str	r0, [r7, #4]
 800a36e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a372:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a376:	2300      	movs	r3, #0
 800a378:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a37e:	2300      	movs	r3, #0
 800a380:	613b      	str	r3, [r7, #16]
 800a382:	e009      	b.n	800a398 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a384:	687a      	ldr	r2, [r7, #4]
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	3340      	adds	r3, #64	@ 0x40
 800a38a:	009b      	lsls	r3, r3, #2
 800a38c:	4413      	add	r3, r2
 800a38e:	2200      	movs	r2, #0
 800a390:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	3301      	adds	r3, #1
 800a396:	613b      	str	r3, [r7, #16]
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	2b0e      	cmp	r3, #14
 800a39c:	d9f2      	bls.n	800a384 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a39e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d11c      	bne.n	800a3e0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	68fa      	ldr	r2, [r7, #12]
 800a3b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a3b4:	f043 0302 	orr.w	r3, r3, #2
 800a3b8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3be:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	601a      	str	r2, [r3, #0]
 800a3de:	e005      	b.n	800a3ec <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3e4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a3f8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a3fc:	2b01      	cmp	r3, #1
 800a3fe:	d10d      	bne.n	800a41c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a400:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a404:	2b00      	cmp	r3, #0
 800a406:	d104      	bne.n	800a412 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a408:	2100      	movs	r1, #0
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f000 f968 	bl	800a6e0 <USB_SetDevSpeed>
 800a410:	e008      	b.n	800a424 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a412:	2101      	movs	r1, #1
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f000 f963 	bl	800a6e0 <USB_SetDevSpeed>
 800a41a:	e003      	b.n	800a424 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a41c:	2103      	movs	r1, #3
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f000 f95e 	bl	800a6e0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a424:	2110      	movs	r1, #16
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f000 f8fa 	bl	800a620 <USB_FlushTxFifo>
 800a42c:	4603      	mov	r3, r0
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d001      	beq.n	800a436 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800a432:	2301      	movs	r3, #1
 800a434:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f000 f924 	bl	800a684 <USB_FlushRxFifo>
 800a43c:	4603      	mov	r3, r0
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d001      	beq.n	800a446 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800a442:	2301      	movs	r3, #1
 800a444:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a44c:	461a      	mov	r2, r3
 800a44e:	2300      	movs	r3, #0
 800a450:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a458:	461a      	mov	r2, r3
 800a45a:	2300      	movs	r3, #0
 800a45c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a464:	461a      	mov	r2, r3
 800a466:	2300      	movs	r3, #0
 800a468:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a46a:	2300      	movs	r3, #0
 800a46c:	613b      	str	r3, [r7, #16]
 800a46e:	e043      	b.n	800a4f8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a470:	693b      	ldr	r3, [r7, #16]
 800a472:	015a      	lsls	r2, r3, #5
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	4413      	add	r3, r2
 800a478:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a482:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a486:	d118      	bne.n	800a4ba <USB_DevInit+0x156>
    {
      if (i == 0U)
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d10a      	bne.n	800a4a4 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a48e:	693b      	ldr	r3, [r7, #16]
 800a490:	015a      	lsls	r2, r3, #5
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	4413      	add	r3, r2
 800a496:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a49a:	461a      	mov	r2, r3
 800a49c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a4a0:	6013      	str	r3, [r2, #0]
 800a4a2:	e013      	b.n	800a4cc <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a4a4:	693b      	ldr	r3, [r7, #16]
 800a4a6:	015a      	lsls	r2, r3, #5
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	4413      	add	r3, r2
 800a4ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4b0:	461a      	mov	r2, r3
 800a4b2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a4b6:	6013      	str	r3, [r2, #0]
 800a4b8:	e008      	b.n	800a4cc <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	015a      	lsls	r2, r3, #5
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	4413      	add	r3, r2
 800a4c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4c6:	461a      	mov	r2, r3
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a4cc:	693b      	ldr	r3, [r7, #16]
 800a4ce:	015a      	lsls	r2, r3, #5
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	4413      	add	r3, r2
 800a4d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4d8:	461a      	mov	r2, r3
 800a4da:	2300      	movs	r3, #0
 800a4dc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a4de:	693b      	ldr	r3, [r7, #16]
 800a4e0:	015a      	lsls	r2, r3, #5
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	4413      	add	r3, r2
 800a4e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4ea:	461a      	mov	r2, r3
 800a4ec:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a4f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	3301      	adds	r3, #1
 800a4f6:	613b      	str	r3, [r7, #16]
 800a4f8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a4fc:	461a      	mov	r2, r3
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	4293      	cmp	r3, r2
 800a502:	d3b5      	bcc.n	800a470 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a504:	2300      	movs	r3, #0
 800a506:	613b      	str	r3, [r7, #16]
 800a508:	e043      	b.n	800a592 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	015a      	lsls	r2, r3, #5
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	4413      	add	r3, r2
 800a512:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a51c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a520:	d118      	bne.n	800a554 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d10a      	bne.n	800a53e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	015a      	lsls	r2, r3, #5
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	4413      	add	r3, r2
 800a530:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a534:	461a      	mov	r2, r3
 800a536:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a53a:	6013      	str	r3, [r2, #0]
 800a53c:	e013      	b.n	800a566 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	015a      	lsls	r2, r3, #5
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	4413      	add	r3, r2
 800a546:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a54a:	461a      	mov	r2, r3
 800a54c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a550:	6013      	str	r3, [r2, #0]
 800a552:	e008      	b.n	800a566 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	015a      	lsls	r2, r3, #5
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	4413      	add	r3, r2
 800a55c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a560:	461a      	mov	r2, r3
 800a562:	2300      	movs	r3, #0
 800a564:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	015a      	lsls	r2, r3, #5
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	4413      	add	r3, r2
 800a56e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a572:	461a      	mov	r2, r3
 800a574:	2300      	movs	r3, #0
 800a576:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	015a      	lsls	r2, r3, #5
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	4413      	add	r3, r2
 800a580:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a584:	461a      	mov	r2, r3
 800a586:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a58a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	3301      	adds	r3, #1
 800a590:	613b      	str	r3, [r7, #16]
 800a592:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a596:	461a      	mov	r2, r3
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d3b5      	bcc.n	800a50a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5a4:	691b      	ldr	r3, [r3, #16]
 800a5a6:	68fa      	ldr	r2, [r7, #12]
 800a5a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a5ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a5b0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a5be:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a5c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d105      	bne.n	800a5d4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	699b      	ldr	r3, [r3, #24]
 800a5cc:	f043 0210 	orr.w	r2, r3, #16
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	699a      	ldr	r2, [r3, #24]
 800a5d8:	4b0f      	ldr	r3, [pc, #60]	@ (800a618 <USB_DevInit+0x2b4>)
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	687a      	ldr	r2, [r7, #4]
 800a5de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a5e0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d005      	beq.n	800a5f4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	699b      	ldr	r3, [r3, #24]
 800a5ec:	f043 0208 	orr.w	r2, r3, #8
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a5f4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a5f8:	2b01      	cmp	r3, #1
 800a5fa:	d105      	bne.n	800a608 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	699a      	ldr	r2, [r3, #24]
 800a600:	4b06      	ldr	r3, [pc, #24]	@ (800a61c <USB_DevInit+0x2b8>)
 800a602:	4313      	orrs	r3, r2
 800a604:	687a      	ldr	r2, [r7, #4]
 800a606:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a608:	7dfb      	ldrb	r3, [r7, #23]
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3718      	adds	r7, #24
 800a60e:	46bd      	mov	sp, r7
 800a610:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a614:	b004      	add	sp, #16
 800a616:	4770      	bx	lr
 800a618:	803c3800 	.word	0x803c3800
 800a61c:	40000004 	.word	0x40000004

0800a620 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a620:	b480      	push	{r7}
 800a622:	b085      	sub	sp, #20
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a62a:	2300      	movs	r3, #0
 800a62c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	3301      	adds	r3, #1
 800a632:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a63a:	d901      	bls.n	800a640 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a63c:	2303      	movs	r3, #3
 800a63e:	e01b      	b.n	800a678 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	691b      	ldr	r3, [r3, #16]
 800a644:	2b00      	cmp	r3, #0
 800a646:	daf2      	bge.n	800a62e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a648:	2300      	movs	r3, #0
 800a64a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	019b      	lsls	r3, r3, #6
 800a650:	f043 0220 	orr.w	r2, r3, #32
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	3301      	adds	r3, #1
 800a65c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a664:	d901      	bls.n	800a66a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a666:	2303      	movs	r3, #3
 800a668:	e006      	b.n	800a678 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	691b      	ldr	r3, [r3, #16]
 800a66e:	f003 0320 	and.w	r3, r3, #32
 800a672:	2b20      	cmp	r3, #32
 800a674:	d0f0      	beq.n	800a658 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a676:	2300      	movs	r3, #0
}
 800a678:	4618      	mov	r0, r3
 800a67a:	3714      	adds	r7, #20
 800a67c:	46bd      	mov	sp, r7
 800a67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a682:	4770      	bx	lr

0800a684 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a684:	b480      	push	{r7}
 800a686:	b085      	sub	sp, #20
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a68c:	2300      	movs	r3, #0
 800a68e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	3301      	adds	r3, #1
 800a694:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a69c:	d901      	bls.n	800a6a2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a69e:	2303      	movs	r3, #3
 800a6a0:	e018      	b.n	800a6d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	691b      	ldr	r3, [r3, #16]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	daf2      	bge.n	800a690 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2210      	movs	r2, #16
 800a6b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	3301      	adds	r3, #1
 800a6b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a6c0:	d901      	bls.n	800a6c6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a6c2:	2303      	movs	r3, #3
 800a6c4:	e006      	b.n	800a6d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	691b      	ldr	r3, [r3, #16]
 800a6ca:	f003 0310 	and.w	r3, r3, #16
 800a6ce:	2b10      	cmp	r3, #16
 800a6d0:	d0f0      	beq.n	800a6b4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a6d2:	2300      	movs	r3, #0
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	3714      	adds	r7, #20
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6de:	4770      	bx	lr

0800a6e0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b085      	sub	sp, #20
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
 800a6e8:	460b      	mov	r3, r1
 800a6ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6f6:	681a      	ldr	r2, [r3, #0]
 800a6f8:	78fb      	ldrb	r3, [r7, #3]
 800a6fa:	68f9      	ldr	r1, [r7, #12]
 800a6fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a700:	4313      	orrs	r3, r2
 800a702:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a704:	2300      	movs	r3, #0
}
 800a706:	4618      	mov	r0, r3
 800a708:	3714      	adds	r7, #20
 800a70a:	46bd      	mov	sp, r7
 800a70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a710:	4770      	bx	lr

0800a712 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a712:	b480      	push	{r7}
 800a714:	b085      	sub	sp, #20
 800a716:	af00      	add	r7, sp, #0
 800a718:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	68fa      	ldr	r2, [r7, #12]
 800a728:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a72c:	f023 0303 	bic.w	r3, r3, #3
 800a730:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a738:	685b      	ldr	r3, [r3, #4]
 800a73a:	68fa      	ldr	r2, [r7, #12]
 800a73c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a740:	f043 0302 	orr.w	r3, r3, #2
 800a744:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a746:	2300      	movs	r3, #0
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3714      	adds	r7, #20
 800a74c:	46bd      	mov	sp, r7
 800a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a752:	4770      	bx	lr

0800a754 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a754:	b480      	push	{r7}
 800a756:	b083      	sub	sp, #12
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	695b      	ldr	r3, [r3, #20]
 800a760:	f003 0301 	and.w	r3, r3, #1
}
 800a764:	4618      	mov	r0, r3
 800a766:	370c      	adds	r7, #12
 800a768:	46bd      	mov	sp, r7
 800a76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76e:	4770      	bx	lr

0800a770 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a770:	b480      	push	{r7}
 800a772:	b085      	sub	sp, #20
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a778:	2300      	movs	r3, #0
 800a77a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	3301      	adds	r3, #1
 800a780:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a788:	d901      	bls.n	800a78e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a78a:	2303      	movs	r3, #3
 800a78c:	e01b      	b.n	800a7c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	691b      	ldr	r3, [r3, #16]
 800a792:	2b00      	cmp	r3, #0
 800a794:	daf2      	bge.n	800a77c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a796:	2300      	movs	r3, #0
 800a798:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	691b      	ldr	r3, [r3, #16]
 800a79e:	f043 0201 	orr.w	r2, r3, #1
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	3301      	adds	r3, #1
 800a7aa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a7b2:	d901      	bls.n	800a7b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a7b4:	2303      	movs	r3, #3
 800a7b6:	e006      	b.n	800a7c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	691b      	ldr	r3, [r3, #16]
 800a7bc:	f003 0301 	and.w	r3, r3, #1
 800a7c0:	2b01      	cmp	r3, #1
 800a7c2:	d0f0      	beq.n	800a7a6 <USB_CoreReset+0x36>

  return HAL_OK;
 800a7c4:	2300      	movs	r3, #0
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3714      	adds	r7, #20
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d0:	4770      	bx	lr

0800a7d2 <memset>:
 800a7d2:	4402      	add	r2, r0
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d100      	bne.n	800a7dc <memset+0xa>
 800a7da:	4770      	bx	lr
 800a7dc:	f803 1b01 	strb.w	r1, [r3], #1
 800a7e0:	e7f9      	b.n	800a7d6 <memset+0x4>
	...

0800a7e4 <__libc_init_array>:
 800a7e4:	b570      	push	{r4, r5, r6, lr}
 800a7e6:	4d0d      	ldr	r5, [pc, #52]	@ (800a81c <__libc_init_array+0x38>)
 800a7e8:	4c0d      	ldr	r4, [pc, #52]	@ (800a820 <__libc_init_array+0x3c>)
 800a7ea:	1b64      	subs	r4, r4, r5
 800a7ec:	10a4      	asrs	r4, r4, #2
 800a7ee:	2600      	movs	r6, #0
 800a7f0:	42a6      	cmp	r6, r4
 800a7f2:	d109      	bne.n	800a808 <__libc_init_array+0x24>
 800a7f4:	4d0b      	ldr	r5, [pc, #44]	@ (800a824 <__libc_init_array+0x40>)
 800a7f6:	4c0c      	ldr	r4, [pc, #48]	@ (800a828 <__libc_init_array+0x44>)
 800a7f8:	f000 f818 	bl	800a82c <_init>
 800a7fc:	1b64      	subs	r4, r4, r5
 800a7fe:	10a4      	asrs	r4, r4, #2
 800a800:	2600      	movs	r6, #0
 800a802:	42a6      	cmp	r6, r4
 800a804:	d105      	bne.n	800a812 <__libc_init_array+0x2e>
 800a806:	bd70      	pop	{r4, r5, r6, pc}
 800a808:	f855 3b04 	ldr.w	r3, [r5], #4
 800a80c:	4798      	blx	r3
 800a80e:	3601      	adds	r6, #1
 800a810:	e7ee      	b.n	800a7f0 <__libc_init_array+0xc>
 800a812:	f855 3b04 	ldr.w	r3, [r5], #4
 800a816:	4798      	blx	r3
 800a818:	3601      	adds	r6, #1
 800a81a:	e7f2      	b.n	800a802 <__libc_init_array+0x1e>
 800a81c:	0800a884 	.word	0x0800a884
 800a820:	0800a884 	.word	0x0800a884
 800a824:	0800a884 	.word	0x0800a884
 800a828:	0800a888 	.word	0x0800a888

0800a82c <_init>:
 800a82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a82e:	bf00      	nop
 800a830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a832:	bc08      	pop	{r3}
 800a834:	469e      	mov	lr, r3
 800a836:	4770      	bx	lr

0800a838 <_fini>:
 800a838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a83a:	bf00      	nop
 800a83c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a83e:	bc08      	pop	{r3}
 800a840:	469e      	mov	lr, r3
 800a842:	4770      	bx	lr
