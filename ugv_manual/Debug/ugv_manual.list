
ugv_manual.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000137dc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f78  080139e0  080139e0  000239e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016958  08016958  00030334  2**0
                  CONTENTS
  4 .ARM          00000008  08016958  08016958  00026958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016960  08016960  00030334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016960  08016960  00026960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016964  08016964  00026964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08016968  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001f4  08016b5c  000301f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000294  08016bfc  00030294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000a69c  20000334  08016c9c  00030334  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  2000a9d0  08016c9c  0003a9d0  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00030334  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00030362  2**0
                  CONTENTS, READONLY
 15 .debug_info   00024486  00000000  00000000  000303a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00005a19  00000000  00000000  0005482b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001a90  00000000  00000000  0005a248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000154f  00000000  00000000  0005bcd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00034d10  00000000  00000000  0005d227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002a44a  00000000  00000000  00091f37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00114538  00000000  00000000  000bc381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00007de4  00000000  00000000  001d08bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000062  00000000  00000000  001d86a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000334 	.word	0x20000334
 800021c:	00000000 	.word	0x00000000
 8000220:	080139c4 	.word	0x080139c4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000338 	.word	0x20000338
 800023c:	080139c4 	.word	0x080139c4

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_uldivmod>:
 8000658:	b953      	cbnz	r3, 8000670 <__aeabi_uldivmod+0x18>
 800065a:	b94a      	cbnz	r2, 8000670 <__aeabi_uldivmod+0x18>
 800065c:	2900      	cmp	r1, #0
 800065e:	bf08      	it	eq
 8000660:	2800      	cmpeq	r0, #0
 8000662:	bf1c      	itt	ne
 8000664:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000668:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800066c:	f000 b9a8 	b.w	80009c0 <__aeabi_idiv0>
 8000670:	f1ad 0c08 	sub.w	ip, sp, #8
 8000674:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000678:	f000 f83e 	bl	80006f8 <__udivmoddi4>
 800067c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000680:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000684:	b004      	add	sp, #16
 8000686:	4770      	bx	lr

08000688 <__aeabi_d2lz>:
 8000688:	b508      	push	{r3, lr}
 800068a:	4602      	mov	r2, r0
 800068c:	460b      	mov	r3, r1
 800068e:	ec43 2b17 	vmov	d7, r2, r3
 8000692:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800069a:	d403      	bmi.n	80006a4 <__aeabi_d2lz+0x1c>
 800069c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006a0:	f000 b80a 	b.w	80006b8 <__aeabi_d2ulz>
 80006a4:	eeb1 7b47 	vneg.f64	d7, d7
 80006a8:	ec51 0b17 	vmov	r0, r1, d7
 80006ac:	f000 f804 	bl	80006b8 <__aeabi_d2ulz>
 80006b0:	4240      	negs	r0, r0
 80006b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b6:	bd08      	pop	{r3, pc}

080006b8 <__aeabi_d2ulz>:
 80006b8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006e8 <__aeabi_d2ulz+0x30>
 80006bc:	ec41 0b17 	vmov	d7, r0, r1
 80006c0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80006f0 <__aeabi_d2ulz+0x38>
 80006c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006c8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006cc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006d0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006d8:	ee16 1a10 	vmov	r1, s12
 80006dc:	ee17 0a90 	vmov	r0, s15
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	f3af 8000 	nop.w
 80006e8:	00000000 	.word	0x00000000
 80006ec:	3df00000 	.word	0x3df00000
 80006f0:	00000000 	.word	0x00000000
 80006f4:	41f00000 	.word	0x41f00000

080006f8 <__udivmoddi4>:
 80006f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006fc:	9e08      	ldr	r6, [sp, #32]
 80006fe:	460d      	mov	r5, r1
 8000700:	4604      	mov	r4, r0
 8000702:	460f      	mov	r7, r1
 8000704:	2b00      	cmp	r3, #0
 8000706:	d14a      	bne.n	800079e <__udivmoddi4+0xa6>
 8000708:	428a      	cmp	r2, r1
 800070a:	4694      	mov	ip, r2
 800070c:	d965      	bls.n	80007da <__udivmoddi4+0xe2>
 800070e:	fab2 f382 	clz	r3, r2
 8000712:	b143      	cbz	r3, 8000726 <__udivmoddi4+0x2e>
 8000714:	fa02 fc03 	lsl.w	ip, r2, r3
 8000718:	f1c3 0220 	rsb	r2, r3, #32
 800071c:	409f      	lsls	r7, r3
 800071e:	fa20 f202 	lsr.w	r2, r0, r2
 8000722:	4317      	orrs	r7, r2
 8000724:	409c      	lsls	r4, r3
 8000726:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800072a:	fa1f f58c 	uxth.w	r5, ip
 800072e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000732:	0c22      	lsrs	r2, r4, #16
 8000734:	fb0e 7711 	mls	r7, lr, r1, r7
 8000738:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800073c:	fb01 f005 	mul.w	r0, r1, r5
 8000740:	4290      	cmp	r0, r2
 8000742:	d90a      	bls.n	800075a <__udivmoddi4+0x62>
 8000744:	eb1c 0202 	adds.w	r2, ip, r2
 8000748:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800074c:	f080 811c 	bcs.w	8000988 <__udivmoddi4+0x290>
 8000750:	4290      	cmp	r0, r2
 8000752:	f240 8119 	bls.w	8000988 <__udivmoddi4+0x290>
 8000756:	3902      	subs	r1, #2
 8000758:	4462      	add	r2, ip
 800075a:	1a12      	subs	r2, r2, r0
 800075c:	b2a4      	uxth	r4, r4
 800075e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000762:	fb0e 2210 	mls	r2, lr, r0, r2
 8000766:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800076a:	fb00 f505 	mul.w	r5, r0, r5
 800076e:	42a5      	cmp	r5, r4
 8000770:	d90a      	bls.n	8000788 <__udivmoddi4+0x90>
 8000772:	eb1c 0404 	adds.w	r4, ip, r4
 8000776:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800077a:	f080 8107 	bcs.w	800098c <__udivmoddi4+0x294>
 800077e:	42a5      	cmp	r5, r4
 8000780:	f240 8104 	bls.w	800098c <__udivmoddi4+0x294>
 8000784:	4464      	add	r4, ip
 8000786:	3802      	subs	r0, #2
 8000788:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800078c:	1b64      	subs	r4, r4, r5
 800078e:	2100      	movs	r1, #0
 8000790:	b11e      	cbz	r6, 800079a <__udivmoddi4+0xa2>
 8000792:	40dc      	lsrs	r4, r3
 8000794:	2300      	movs	r3, #0
 8000796:	e9c6 4300 	strd	r4, r3, [r6]
 800079a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800079e:	428b      	cmp	r3, r1
 80007a0:	d908      	bls.n	80007b4 <__udivmoddi4+0xbc>
 80007a2:	2e00      	cmp	r6, #0
 80007a4:	f000 80ed 	beq.w	8000982 <__udivmoddi4+0x28a>
 80007a8:	2100      	movs	r1, #0
 80007aa:	e9c6 0500 	strd	r0, r5, [r6]
 80007ae:	4608      	mov	r0, r1
 80007b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b4:	fab3 f183 	clz	r1, r3
 80007b8:	2900      	cmp	r1, #0
 80007ba:	d149      	bne.n	8000850 <__udivmoddi4+0x158>
 80007bc:	42ab      	cmp	r3, r5
 80007be:	d302      	bcc.n	80007c6 <__udivmoddi4+0xce>
 80007c0:	4282      	cmp	r2, r0
 80007c2:	f200 80f8 	bhi.w	80009b6 <__udivmoddi4+0x2be>
 80007c6:	1a84      	subs	r4, r0, r2
 80007c8:	eb65 0203 	sbc.w	r2, r5, r3
 80007cc:	2001      	movs	r0, #1
 80007ce:	4617      	mov	r7, r2
 80007d0:	2e00      	cmp	r6, #0
 80007d2:	d0e2      	beq.n	800079a <__udivmoddi4+0xa2>
 80007d4:	e9c6 4700 	strd	r4, r7, [r6]
 80007d8:	e7df      	b.n	800079a <__udivmoddi4+0xa2>
 80007da:	b902      	cbnz	r2, 80007de <__udivmoddi4+0xe6>
 80007dc:	deff      	udf	#255	; 0xff
 80007de:	fab2 f382 	clz	r3, r2
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	f040 8090 	bne.w	8000908 <__udivmoddi4+0x210>
 80007e8:	1a8a      	subs	r2, r1, r2
 80007ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007ee:	fa1f fe8c 	uxth.w	lr, ip
 80007f2:	2101      	movs	r1, #1
 80007f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80007f8:	fb07 2015 	mls	r0, r7, r5, r2
 80007fc:	0c22      	lsrs	r2, r4, #16
 80007fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000802:	fb0e f005 	mul.w	r0, lr, r5
 8000806:	4290      	cmp	r0, r2
 8000808:	d908      	bls.n	800081c <__udivmoddi4+0x124>
 800080a:	eb1c 0202 	adds.w	r2, ip, r2
 800080e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000812:	d202      	bcs.n	800081a <__udivmoddi4+0x122>
 8000814:	4290      	cmp	r0, r2
 8000816:	f200 80cb 	bhi.w	80009b0 <__udivmoddi4+0x2b8>
 800081a:	4645      	mov	r5, r8
 800081c:	1a12      	subs	r2, r2, r0
 800081e:	b2a4      	uxth	r4, r4
 8000820:	fbb2 f0f7 	udiv	r0, r2, r7
 8000824:	fb07 2210 	mls	r2, r7, r0, r2
 8000828:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800082c:	fb0e fe00 	mul.w	lr, lr, r0
 8000830:	45a6      	cmp	lr, r4
 8000832:	d908      	bls.n	8000846 <__udivmoddi4+0x14e>
 8000834:	eb1c 0404 	adds.w	r4, ip, r4
 8000838:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800083c:	d202      	bcs.n	8000844 <__udivmoddi4+0x14c>
 800083e:	45a6      	cmp	lr, r4
 8000840:	f200 80bb 	bhi.w	80009ba <__udivmoddi4+0x2c2>
 8000844:	4610      	mov	r0, r2
 8000846:	eba4 040e 	sub.w	r4, r4, lr
 800084a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800084e:	e79f      	b.n	8000790 <__udivmoddi4+0x98>
 8000850:	f1c1 0720 	rsb	r7, r1, #32
 8000854:	408b      	lsls	r3, r1
 8000856:	fa22 fc07 	lsr.w	ip, r2, r7
 800085a:	ea4c 0c03 	orr.w	ip, ip, r3
 800085e:	fa05 f401 	lsl.w	r4, r5, r1
 8000862:	fa20 f307 	lsr.w	r3, r0, r7
 8000866:	40fd      	lsrs	r5, r7
 8000868:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800086c:	4323      	orrs	r3, r4
 800086e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000872:	fa1f fe8c 	uxth.w	lr, ip
 8000876:	fb09 5518 	mls	r5, r9, r8, r5
 800087a:	0c1c      	lsrs	r4, r3, #16
 800087c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000880:	fb08 f50e 	mul.w	r5, r8, lr
 8000884:	42a5      	cmp	r5, r4
 8000886:	fa02 f201 	lsl.w	r2, r2, r1
 800088a:	fa00 f001 	lsl.w	r0, r0, r1
 800088e:	d90b      	bls.n	80008a8 <__udivmoddi4+0x1b0>
 8000890:	eb1c 0404 	adds.w	r4, ip, r4
 8000894:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000898:	f080 8088 	bcs.w	80009ac <__udivmoddi4+0x2b4>
 800089c:	42a5      	cmp	r5, r4
 800089e:	f240 8085 	bls.w	80009ac <__udivmoddi4+0x2b4>
 80008a2:	f1a8 0802 	sub.w	r8, r8, #2
 80008a6:	4464      	add	r4, ip
 80008a8:	1b64      	subs	r4, r4, r5
 80008aa:	b29d      	uxth	r5, r3
 80008ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80008b0:	fb09 4413 	mls	r4, r9, r3, r4
 80008b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80008b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80008bc:	45a6      	cmp	lr, r4
 80008be:	d908      	bls.n	80008d2 <__udivmoddi4+0x1da>
 80008c0:	eb1c 0404 	adds.w	r4, ip, r4
 80008c4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80008c8:	d26c      	bcs.n	80009a4 <__udivmoddi4+0x2ac>
 80008ca:	45a6      	cmp	lr, r4
 80008cc:	d96a      	bls.n	80009a4 <__udivmoddi4+0x2ac>
 80008ce:	3b02      	subs	r3, #2
 80008d0:	4464      	add	r4, ip
 80008d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008d6:	fba3 9502 	umull	r9, r5, r3, r2
 80008da:	eba4 040e 	sub.w	r4, r4, lr
 80008de:	42ac      	cmp	r4, r5
 80008e0:	46c8      	mov	r8, r9
 80008e2:	46ae      	mov	lr, r5
 80008e4:	d356      	bcc.n	8000994 <__udivmoddi4+0x29c>
 80008e6:	d053      	beq.n	8000990 <__udivmoddi4+0x298>
 80008e8:	b156      	cbz	r6, 8000900 <__udivmoddi4+0x208>
 80008ea:	ebb0 0208 	subs.w	r2, r0, r8
 80008ee:	eb64 040e 	sbc.w	r4, r4, lr
 80008f2:	fa04 f707 	lsl.w	r7, r4, r7
 80008f6:	40ca      	lsrs	r2, r1
 80008f8:	40cc      	lsrs	r4, r1
 80008fa:	4317      	orrs	r7, r2
 80008fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000900:	4618      	mov	r0, r3
 8000902:	2100      	movs	r1, #0
 8000904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000908:	f1c3 0120 	rsb	r1, r3, #32
 800090c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000910:	fa20 f201 	lsr.w	r2, r0, r1
 8000914:	fa25 f101 	lsr.w	r1, r5, r1
 8000918:	409d      	lsls	r5, r3
 800091a:	432a      	orrs	r2, r5
 800091c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000920:	fa1f fe8c 	uxth.w	lr, ip
 8000924:	fbb1 f0f7 	udiv	r0, r1, r7
 8000928:	fb07 1510 	mls	r5, r7, r0, r1
 800092c:	0c11      	lsrs	r1, r2, #16
 800092e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000932:	fb00 f50e 	mul.w	r5, r0, lr
 8000936:	428d      	cmp	r5, r1
 8000938:	fa04 f403 	lsl.w	r4, r4, r3
 800093c:	d908      	bls.n	8000950 <__udivmoddi4+0x258>
 800093e:	eb1c 0101 	adds.w	r1, ip, r1
 8000942:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000946:	d22f      	bcs.n	80009a8 <__udivmoddi4+0x2b0>
 8000948:	428d      	cmp	r5, r1
 800094a:	d92d      	bls.n	80009a8 <__udivmoddi4+0x2b0>
 800094c:	3802      	subs	r0, #2
 800094e:	4461      	add	r1, ip
 8000950:	1b49      	subs	r1, r1, r5
 8000952:	b292      	uxth	r2, r2
 8000954:	fbb1 f5f7 	udiv	r5, r1, r7
 8000958:	fb07 1115 	mls	r1, r7, r5, r1
 800095c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000960:	fb05 f10e 	mul.w	r1, r5, lr
 8000964:	4291      	cmp	r1, r2
 8000966:	d908      	bls.n	800097a <__udivmoddi4+0x282>
 8000968:	eb1c 0202 	adds.w	r2, ip, r2
 800096c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000970:	d216      	bcs.n	80009a0 <__udivmoddi4+0x2a8>
 8000972:	4291      	cmp	r1, r2
 8000974:	d914      	bls.n	80009a0 <__udivmoddi4+0x2a8>
 8000976:	3d02      	subs	r5, #2
 8000978:	4462      	add	r2, ip
 800097a:	1a52      	subs	r2, r2, r1
 800097c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000980:	e738      	b.n	80007f4 <__udivmoddi4+0xfc>
 8000982:	4631      	mov	r1, r6
 8000984:	4630      	mov	r0, r6
 8000986:	e708      	b.n	800079a <__udivmoddi4+0xa2>
 8000988:	4639      	mov	r1, r7
 800098a:	e6e6      	b.n	800075a <__udivmoddi4+0x62>
 800098c:	4610      	mov	r0, r2
 800098e:	e6fb      	b.n	8000788 <__udivmoddi4+0x90>
 8000990:	4548      	cmp	r0, r9
 8000992:	d2a9      	bcs.n	80008e8 <__udivmoddi4+0x1f0>
 8000994:	ebb9 0802 	subs.w	r8, r9, r2
 8000998:	eb65 0e0c 	sbc.w	lr, r5, ip
 800099c:	3b01      	subs	r3, #1
 800099e:	e7a3      	b.n	80008e8 <__udivmoddi4+0x1f0>
 80009a0:	4645      	mov	r5, r8
 80009a2:	e7ea      	b.n	800097a <__udivmoddi4+0x282>
 80009a4:	462b      	mov	r3, r5
 80009a6:	e794      	b.n	80008d2 <__udivmoddi4+0x1da>
 80009a8:	4640      	mov	r0, r8
 80009aa:	e7d1      	b.n	8000950 <__udivmoddi4+0x258>
 80009ac:	46d0      	mov	r8, sl
 80009ae:	e77b      	b.n	80008a8 <__udivmoddi4+0x1b0>
 80009b0:	3d02      	subs	r5, #2
 80009b2:	4462      	add	r2, ip
 80009b4:	e732      	b.n	800081c <__udivmoddi4+0x124>
 80009b6:	4608      	mov	r0, r1
 80009b8:	e70a      	b.n	80007d0 <__udivmoddi4+0xd8>
 80009ba:	4464      	add	r4, ip
 80009bc:	3802      	subs	r0, #2
 80009be:	e742      	b.n	8000846 <__udivmoddi4+0x14e>

080009c0 <__aeabi_idiv0>:
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80009c8:	f3bf 8f4f 	dsb	sy
}
 80009cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009ce:	f3bf 8f6f 	isb	sy
}
 80009d2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80009d4:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <SCB_EnableICache+0x48>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80009dc:	f3bf 8f4f 	dsb	sy
}
 80009e0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009e2:	f3bf 8f6f 	isb	sy
}
 80009e6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80009e8:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <SCB_EnableICache+0x48>)
 80009ea:	695b      	ldr	r3, [r3, #20]
 80009ec:	4a07      	ldr	r2, [pc, #28]	; (8000a0c <SCB_EnableICache+0x48>)
 80009ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80009f4:	f3bf 8f4f 	dsb	sy
}
 80009f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009fa:	f3bf 8f6f 	isb	sy
}
 80009fe:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000a16:	4b1f      	ldr	r3, [pc, #124]	; (8000a94 <SCB_EnableDCache+0x84>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000a1e:	f3bf 8f4f 	dsb	sy
}
 8000a22:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000a24:	4b1b      	ldr	r3, [pc, #108]	; (8000a94 <SCB_EnableDCache+0x84>)
 8000a26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000a2a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	0b5b      	lsrs	r3, r3, #13
 8000a30:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000a34:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	08db      	lsrs	r3, r3, #3
 8000a3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a3e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	015a      	lsls	r2, r3, #5
 8000a44:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000a48:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000a4a:	68ba      	ldr	r2, [r7, #8]
 8000a4c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a4e:	4911      	ldr	r1, [pc, #68]	; (8000a94 <SCB_EnableDCache+0x84>)
 8000a50:	4313      	orrs	r3, r2
 8000a52:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	1e5a      	subs	r2, r3, #1
 8000a5a:	60ba      	str	r2, [r7, #8]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d1ef      	bne.n	8000a40 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	1e5a      	subs	r2, r3, #1
 8000a64:	60fa      	str	r2, [r7, #12]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d1e5      	bne.n	8000a36 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000a6a:	f3bf 8f4f 	dsb	sy
}
 8000a6e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000a70:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <SCB_EnableDCache+0x84>)
 8000a72:	695b      	ldr	r3, [r3, #20]
 8000a74:	4a07      	ldr	r2, [pc, #28]	; (8000a94 <SCB_EnableDCache+0x84>)
 8000a76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a7a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a7c:	f3bf 8f4f 	dsb	sy
}
 8000a80:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a82:	f3bf 8f6f 	isb	sy
}
 8000a86:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000a88:	bf00      	nop
 8000a8a:	3714      	adds	r7, #20
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000a9c:	f000 fb10 	bl	80010c0 <MPU_Config>
/* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000aa0:	f7ff ff90 	bl	80009c4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000aa4:	f7ff ffb4 	bl	8000a10 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aa8:	f000 fe9c 	bl	80017e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aac:	f000 f852 	bl	8000b54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ab0:	f000 f990 	bl	8000dd4 <MX_GPIO_Init>
  MX_LWIP_Init();
 8000ab4:	f005 fd4e 	bl	8006554 <MX_LWIP_Init>
  MX_TIM1_Init();
 8000ab8:	f000 f8ba 	bl	8000c30 <MX_TIM1_Init>
  MX_TIM10_Init();
 8000abc:	f000 f90c 	bl	8000cd8 <MX_TIM10_Init>
  MX_USART3_UART_Init();
 8000ac0:	f000 f958 	bl	8000d74 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // 2022 Servo Driver
	steeringServo.timerInstance = &htim10;
 8000ac4:	4b1a      	ldr	r3, [pc, #104]	; (8000b30 <main+0x98>)
 8000ac6:	4a1b      	ldr	r2, [pc, #108]	; (8000b34 <main+0x9c>)
 8000ac8:	601a      	str	r2, [r3, #0]
	steeringServo.timerCCRX = &TIM10->CCR1;
 8000aca:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <main+0x98>)
 8000acc:	4a1a      	ldr	r2, [pc, #104]	; (8000b38 <main+0xa0>)
 8000ace:	605a      	str	r2, [r3, #4]
	steeringServo.timerCh = TIM_CHANNEL_1;
 8000ad0:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <main+0x98>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	811a      	strh	r2, [r3, #8]
	//	steeringServo.travelOffset = 50;
	steeringServo.travelOffset = 10;
	*/

	/* HS-985MG Servo */
	steeringServo.timerARR = 59999;
 8000ad6:	4b16      	ldr	r3, [pc, #88]	; (8000b30 <main+0x98>)
 8000ad8:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8000adc:	815a      	strh	r2, [r3, #10]
	steeringServo.minPulse = 500;
 8000ade:	4b14      	ldr	r3, [pc, #80]	; (8000b30 <main+0x98>)
 8000ae0:	4a16      	ldr	r2, [pc, #88]	; (8000b3c <main+0xa4>)
 8000ae2:	60da      	str	r2, [r3, #12]
	steeringServo.maxPulse = 2500;
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <main+0x98>)
 8000ae6:	4a16      	ldr	r2, [pc, #88]	; (8000b40 <main+0xa8>)
 8000ae8:	611a      	str	r2, [r3, #16]
	steeringServo.timerPeriod = 20000;
 8000aea:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <main+0x98>)
 8000aec:	4a15      	ldr	r2, [pc, #84]	; (8000b44 <main+0xac>)
 8000aee:	615a      	str	r2, [r3, #20]
	steeringServo.travelAngle = 270.0;
 8000af0:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <main+0x98>)
 8000af2:	4a15      	ldr	r2, [pc, #84]	; (8000b48 <main+0xb0>)
 8000af4:	625a      	str	r2, [r3, #36]	; 0x24
	steeringServo.minLimit = 1;
 8000af6:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <main+0x98>)
 8000af8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000afc:	62da      	str	r2, [r3, #44]	; 0x2c
	steeringServo.maxLimit = 270.0;
 8000afe:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <main+0x98>)
 8000b00:	4a11      	ldr	r2, [pc, #68]	; (8000b48 <main+0xb0>)
 8000b02:	631a      	str	r2, [r3, #48]	; 0x30
	steeringServo.travelOffset = 0;
 8000b04:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <main+0x98>)
 8000b06:	f04f 0200 	mov.w	r2, #0
 8000b0a:	629a      	str	r2, [r3, #40]	; 0x28

	ugv_servoInitServo(&steeringServo);
 8000b0c:	4808      	ldr	r0, [pc, #32]	; (8000b30 <main+0x98>)
 8000b0e:	f005 fc3a 	bl	8006386 <ugv_servoInitServo>

  udp_client_connect();
 8000b12:	f000 fa2b 	bl	8000f6c <udp_client_connect>

  /* Start HAL timer interrupt
  /  Interrupt occurs once every 250ms
  */
  HAL_TIM_Base_Start_IT(&htim1);
 8000b16:	480d      	ldr	r0, [pc, #52]	; (8000b4c <main+0xb4>)
 8000b18:	f003 fe10 	bl	800473c <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  ethernetif_input(&gnetif);
 8000b1c:	480c      	ldr	r0, [pc, #48]	; (8000b50 <main+0xb8>)
 8000b1e:	f005 ffa9 	bl	8006a74 <ethernetif_input>
	  ethernet_link_check_state(&gnetif);
 8000b22:	480b      	ldr	r0, [pc, #44]	; (8000b50 <main+0xb8>)
 8000b24:	f006 f924 	bl	8006d70 <ethernet_link_check_state>
	  //udpClient
//	  gnetif.input()
	  //ethernet_input(p, netif)
	  sys_check_timeouts();
 8000b28:	f00d fa70 	bl	800e00c <sys_check_timeouts>
	  ethernetif_input(&gnetif);
 8000b2c:	e7f6      	b.n	8000b1c <main+0x84>
 8000b2e:	bf00      	nop
 8000b30:	20000470 	.word	0x20000470
 8000b34:	2000039c 	.word	0x2000039c
 8000b38:	40014434 	.word	0x40014434
 8000b3c:	43fa0000 	.word	0x43fa0000
 8000b40:	451c4000 	.word	0x451c4000
 8000b44:	469c4000 	.word	0x469c4000
 8000b48:	43870000 	.word	0x43870000
 8000b4c:	20000350 	.word	0x20000350
 8000b50:	20000518 	.word	0x20000518

08000b54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b094      	sub	sp, #80	; 0x50
 8000b58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b5a:	f107 031c 	add.w	r3, r7, #28
 8000b5e:	2234      	movs	r2, #52	; 0x34
 8000b60:	2100      	movs	r1, #0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f010 ffbd 	bl	8011ae2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b68:	f107 0308 	add.w	r3, r7, #8
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b78:	4b2b      	ldr	r3, [pc, #172]	; (8000c28 <SystemClock_Config+0xd4>)
 8000b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7c:	4a2a      	ldr	r2, [pc, #168]	; (8000c28 <SystemClock_Config+0xd4>)
 8000b7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b82:	6413      	str	r3, [r2, #64]	; 0x40
 8000b84:	4b28      	ldr	r3, [pc, #160]	; (8000c28 <SystemClock_Config+0xd4>)
 8000b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b90:	4b26      	ldr	r3, [pc, #152]	; (8000c2c <SystemClock_Config+0xd8>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a25      	ldr	r2, [pc, #148]	; (8000c2c <SystemClock_Config+0xd8>)
 8000b96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b9a:	6013      	str	r3, [r2, #0]
 8000b9c:	4b23      	ldr	r3, [pc, #140]	; (8000c2c <SystemClock_Config+0xd8>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ba4:	603b      	str	r3, [r7, #0]
 8000ba6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bb0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bb6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bbc:	2308      	movs	r3, #8
 8000bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000bc0:	23d8      	movs	r3, #216	; 0xd8
 8000bc2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd0:	f107 031c 	add.w	r3, r7, #28
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f002 fc5f 	bl	8003498 <HAL_RCC_OscConfig>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000be0:	f000 fa9c 	bl	800111c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000be4:	f002 fc08 	bl	80033f8 <HAL_PWREx_EnableOverDrive>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000bee:	f000 fa95 	bl	800111c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf2:	230f      	movs	r3, #15
 8000bf4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bfe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c08:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000c0a:	f107 0308 	add.w	r3, r7, #8
 8000c0e:	2107      	movs	r1, #7
 8000c10:	4618      	mov	r0, r3
 8000c12:	f002 feef 	bl	80039f4 <HAL_RCC_ClockConfig>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000c1c:	f000 fa7e 	bl	800111c <Error_Handler>
  }
}
 8000c20:	bf00      	nop
 8000c22:	3750      	adds	r7, #80	; 0x50
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40007000 	.word	0x40007000

08000c30 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b088      	sub	sp, #32
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c36:	f107 0310 	add.w	r3, r7, #16
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
 8000c42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c44:	1d3b      	adds	r3, r7, #4
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c4e:	4b20      	ldr	r3, [pc, #128]	; (8000cd0 <MX_TIM1_Init+0xa0>)
 8000c50:	4a20      	ldr	r2, [pc, #128]	; (8000cd4 <MX_TIM1_Init+0xa4>)
 8000c52:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10800;
 8000c54:	4b1e      	ldr	r3, [pc, #120]	; (8000cd0 <MX_TIM1_Init+0xa0>)
 8000c56:	f642 2230 	movw	r2, #10800	; 0x2a30
 8000c5a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c5c:	4b1c      	ldr	r3, [pc, #112]	; (8000cd0 <MX_TIM1_Init+0xa0>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8000c62:	4b1b      	ldr	r3, [pc, #108]	; (8000cd0 <MX_TIM1_Init+0xa0>)
 8000c64:	f242 7210 	movw	r2, #10000	; 0x2710
 8000c68:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c6a:	4b19      	ldr	r3, [pc, #100]	; (8000cd0 <MX_TIM1_Init+0xa0>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c70:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <MX_TIM1_Init+0xa0>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c76:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <MX_TIM1_Init+0xa0>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c7c:	4814      	ldr	r0, [pc, #80]	; (8000cd0 <MX_TIM1_Init+0xa0>)
 8000c7e:	f003 fd05 	bl	800468c <HAL_TIM_Base_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000c88:	f000 fa48 	bl	800111c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c90:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c92:	f107 0310 	add.w	r3, r7, #16
 8000c96:	4619      	mov	r1, r3
 8000c98:	480d      	ldr	r0, [pc, #52]	; (8000cd0 <MX_TIM1_Init+0xa0>)
 8000c9a:	f004 f93f 	bl	8004f1c <HAL_TIM_ConfigClockSource>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000ca4:	f000 fa3a 	bl	800111c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000cac:	2300      	movs	r3, #0
 8000cae:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cb4:	1d3b      	adds	r3, r7, #4
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4805      	ldr	r0, [pc, #20]	; (8000cd0 <MX_TIM1_Init+0xa0>)
 8000cba:	f004 fdeb 	bl	8005894 <HAL_TIMEx_MasterConfigSynchronization>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000cc4:	f000 fa2a 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000cc8:	bf00      	nop
 8000cca:	3720      	adds	r7, #32
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000350 	.word	0x20000350
 8000cd4:	40010000 	.word	0x40010000

08000cd8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b088      	sub	sp, #32
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
 8000cec:	615a      	str	r2, [r3, #20]
 8000cee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000cf0:	4b1e      	ldr	r3, [pc, #120]	; (8000d6c <MX_TIM10_Init+0x94>)
 8000cf2:	4a1f      	ldr	r2, [pc, #124]	; (8000d70 <MX_TIM10_Init+0x98>)
 8000cf4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 71;
 8000cf6:	4b1d      	ldr	r3, [pc, #116]	; (8000d6c <MX_TIM10_Init+0x94>)
 8000cf8:	2247      	movs	r2, #71	; 0x47
 8000cfa:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfc:	4b1b      	ldr	r3, [pc, #108]	; (8000d6c <MX_TIM10_Init+0x94>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 59999;
 8000d02:	4b1a      	ldr	r3, [pc, #104]	; (8000d6c <MX_TIM10_Init+0x94>)
 8000d04:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8000d08:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d0a:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <MX_TIM10_Init+0x94>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d10:	4b16      	ldr	r3, [pc, #88]	; (8000d6c <MX_TIM10_Init+0x94>)
 8000d12:	2280      	movs	r2, #128	; 0x80
 8000d14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000d16:	4815      	ldr	r0, [pc, #84]	; (8000d6c <MX_TIM10_Init+0x94>)
 8000d18:	f003 fcb8 	bl	800468c <HAL_TIM_Base_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8000d22:	f000 f9fb 	bl	800111c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8000d26:	4811      	ldr	r0, [pc, #68]	; (8000d6c <MX_TIM10_Init+0x94>)
 8000d28:	f003 fd80 	bl	800482c <HAL_TIM_PWM_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8000d32:	f000 f9f3 	bl	800111c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d36:	2360      	movs	r3, #96	; 0x60
 8000d38:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d46:	1d3b      	adds	r3, r7, #4
 8000d48:	2200      	movs	r2, #0
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4807      	ldr	r0, [pc, #28]	; (8000d6c <MX_TIM10_Init+0x94>)
 8000d4e:	f003 ffd1 	bl	8004cf4 <HAL_TIM_PWM_ConfigChannel>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8000d58:	f000 f9e0 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8000d5c:	4803      	ldr	r0, [pc, #12]	; (8000d6c <MX_TIM10_Init+0x94>)
 8000d5e:	f000 fa51 	bl	8001204 <HAL_TIM_MspPostInit>

}
 8000d62:	bf00      	nop
 8000d64:	3720      	adds	r7, #32
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	2000039c 	.word	0x2000039c
 8000d70:	40014400 	.word	0x40014400

08000d74 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d78:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <MX_USART3_UART_Init+0x58>)
 8000d7a:	4a15      	ldr	r2, [pc, #84]	; (8000dd0 <MX_USART3_UART_Init+0x5c>)
 8000d7c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d7e:	4b13      	ldr	r3, [pc, #76]	; (8000dcc <MX_USART3_UART_Init+0x58>)
 8000d80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d84:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d86:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <MX_USART3_UART_Init+0x58>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d8c:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <MX_USART3_UART_Init+0x58>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d92:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <MX_USART3_UART_Init+0x58>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d98:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <MX_USART3_UART_Init+0x58>)
 8000d9a:	220c      	movs	r2, #12
 8000d9c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <MX_USART3_UART_Init+0x58>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da4:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <MX_USART3_UART_Init+0x58>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000daa:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <MX_USART3_UART_Init+0x58>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <MX_USART3_UART_Init+0x58>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000db6:	4805      	ldr	r0, [pc, #20]	; (8000dcc <MX_USART3_UART_Init+0x58>)
 8000db8:	f004 fe18 	bl	80059ec <HAL_UART_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000dc2:	f000 f9ab 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	200003e8 	.word	0x200003e8
 8000dd0:	40004800 	.word	0x40004800

08000dd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08c      	sub	sp, #48	; 0x30
 8000dd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dda:	f107 031c 	add.w	r3, r7, #28
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]
 8000de4:	609a      	str	r2, [r3, #8]
 8000de6:	60da      	str	r2, [r3, #12]
 8000de8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dea:	4b56      	ldr	r3, [pc, #344]	; (8000f44 <MX_GPIO_Init+0x170>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	4a55      	ldr	r2, [pc, #340]	; (8000f44 <MX_GPIO_Init+0x170>)
 8000df0:	f043 0304 	orr.w	r3, r3, #4
 8000df4:	6313      	str	r3, [r2, #48]	; 0x30
 8000df6:	4b53      	ldr	r3, [pc, #332]	; (8000f44 <MX_GPIO_Init+0x170>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	f003 0304 	and.w	r3, r3, #4
 8000dfe:	61bb      	str	r3, [r7, #24]
 8000e00:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e02:	4b50      	ldr	r3, [pc, #320]	; (8000f44 <MX_GPIO_Init+0x170>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a4f      	ldr	r2, [pc, #316]	; (8000f44 <MX_GPIO_Init+0x170>)
 8000e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b4d      	ldr	r3, [pc, #308]	; (8000f44 <MX_GPIO_Init+0x170>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e16:	617b      	str	r3, [r7, #20]
 8000e18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1a:	4b4a      	ldr	r3, [pc, #296]	; (8000f44 <MX_GPIO_Init+0x170>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a49      	ldr	r2, [pc, #292]	; (8000f44 <MX_GPIO_Init+0x170>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	4b47      	ldr	r3, [pc, #284]	; (8000f44 <MX_GPIO_Init+0x170>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e32:	4b44      	ldr	r3, [pc, #272]	; (8000f44 <MX_GPIO_Init+0x170>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a43      	ldr	r2, [pc, #268]	; (8000f44 <MX_GPIO_Init+0x170>)
 8000e38:	f043 0302 	orr.w	r3, r3, #2
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b41      	ldr	r3, [pc, #260]	; (8000f44 <MX_GPIO_Init+0x170>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e4a:	4b3e      	ldr	r3, [pc, #248]	; (8000f44 <MX_GPIO_Init+0x170>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a3d      	ldr	r2, [pc, #244]	; (8000f44 <MX_GPIO_Init+0x170>)
 8000e50:	f043 0308 	orr.w	r3, r3, #8
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b3b      	ldr	r3, [pc, #236]	; (8000f44 <MX_GPIO_Init+0x170>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0308 	and.w	r3, r3, #8
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e62:	4b38      	ldr	r3, [pc, #224]	; (8000f44 <MX_GPIO_Init+0x170>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a37      	ldr	r2, [pc, #220]	; (8000f44 <MX_GPIO_Init+0x170>)
 8000e68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b35      	ldr	r3, [pc, #212]	; (8000f44 <MX_GPIO_Init+0x170>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e76:	607b      	str	r3, [r7, #4]
 8000e78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000e80:	4831      	ldr	r0, [pc, #196]	; (8000f48 <MX_GPIO_Init+0x174>)
 8000e82:	f002 fa85 	bl	8003390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2140      	movs	r1, #64	; 0x40
 8000e8a:	4830      	ldr	r0, [pc, #192]	; (8000f4c <MX_GPIO_Init+0x178>)
 8000e8c:	f002 fa80 	bl	8003390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000e90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e96:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ea0:	f107 031c 	add.w	r3, r7, #28
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	482a      	ldr	r0, [pc, #168]	; (8000f50 <MX_GPIO_Init+0x17c>)
 8000ea8:	f002 f8c6 	bl	8003038 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000eac:	f244 0381 	movw	r3, #16513	; 0x4081
 8000eb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ebe:	f107 031c 	add.w	r3, r7, #28
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4820      	ldr	r0, [pc, #128]	; (8000f48 <MX_GPIO_Init+0x174>)
 8000ec6:	f002 f8b7 	bl	8003038 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000eca:	2340      	movs	r3, #64	; 0x40
 8000ecc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000eda:	f107 031c 	add.w	r3, r7, #28
 8000ede:	4619      	mov	r1, r3
 8000ee0:	481a      	ldr	r0, [pc, #104]	; (8000f4c <MX_GPIO_Init+0x178>)
 8000ee2:	f002 f8a9 	bl	8003038 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ee6:	2380      	movs	r3, #128	; 0x80
 8000ee8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eea:	2300      	movs	r3, #0
 8000eec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ef2:	f107 031c 	add.w	r3, r7, #28
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4814      	ldr	r0, [pc, #80]	; (8000f4c <MX_GPIO_Init+0x178>)
 8000efa:	f002 f89d 	bl	8003038 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000efe:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000f02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f04:	2302      	movs	r3, #2
 8000f06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f10:	230a      	movs	r3, #10
 8000f12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f14:	f107 031c 	add.w	r3, r7, #28
 8000f18:	4619      	mov	r1, r3
 8000f1a:	480e      	ldr	r0, [pc, #56]	; (8000f54 <MX_GPIO_Init+0x180>)
 8000f1c:	f002 f88c 	bl	8003038 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f26:	2300      	movs	r3, #0
 8000f28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f2e:	f107 031c 	add.w	r3, r7, #28
 8000f32:	4619      	mov	r1, r3
 8000f34:	4807      	ldr	r0, [pc, #28]	; (8000f54 <MX_GPIO_Init+0x180>)
 8000f36:	f002 f87f 	bl	8003038 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f3a:	bf00      	nop
 8000f3c:	3730      	adds	r7, #48	; 0x30
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40023800 	.word	0x40023800
 8000f48:	40020400 	.word	0x40020400
 8000f4c:	40021800 	.word	0x40021800
 8000f50:	40020800 	.word	0x40020800
 8000f54:	40020000 	.word	0x40020000

08000f58 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);

	// Timer callback meant to send data from stm -> Rpi in a periodic manner

//	udp_client_send();
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <udp_client_connect>:

void udp_client_connect()
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
	err_t err;

	// Create a new UDP control block
	// Need to check for null return
	upcb = udp_new();
 8000f72:	f00d fb65 	bl	800e640 <udp_new>
 8000f76:	4603      	mov	r3, r0
 8000f78:	4a15      	ldr	r2, [pc, #84]	; (8000fd0 <udp_client_connect+0x64>)
 8000f7a:	6013      	str	r3, [r2, #0]

	// Bind control block to module's IP address and port
	// Static IP address: 192.168.2.xxx
	ip_addr_t my_ip;
//	IP_ADDR4(&my_ip, 192, 168, 5, 21); 	//STM ip when connected to RPI 5
	IP_ADDR4(&my_ip, 192, 168, 20, 21); //STM ip when connected to Jetson Orin
 8000f7c:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <udp_client_connect+0x68>)
 8000f7e:	60bb      	str	r3, [r7, #8]
//	IP_ADDR4(&my_ip, 192, 168, 2, 21); 	// STM ip when connected to linux desktop

	// Binds udp protocol control block to a local IP address
	// Arbitrary port # selection: 8
	udp_bind(upcb, &my_ip, 8);
 8000f80:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <udp_client_connect+0x64>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f107 0108 	add.w	r1, r7, #8
 8000f88:	2208      	movs	r2, #8
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f00d fa42 	bl	800e414 <udp_bind>
	// Configure destination IP address
	// Host ip address: 192.168.2.5
	// Arbitrary port # selection: 12345
	ip_addr_t DestIPaddr;
//	IP_ADDR4(&DestIPaddr, 192, 168, 5, 5);  //RPI 5 host ip address
	IP_ADDR4(&DestIPaddr, 192, 168, 20, 5);  //Jetson Orin Nano host ip address
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <udp_client_connect+0x6c>)
 8000f92:	607b      	str	r3, [r7, #4]
//	IP_ADDR4(&DestIPaddr, 192, 168, 2, 5);  //Desktop Host ip address
	err = udp_connect(upcb, &DestIPaddr, 12345);
 8000f94:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <udp_client_connect+0x64>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	1d39      	adds	r1, r7, #4
 8000f9a:	f243 0239 	movw	r2, #12345	; 0x3039
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f00d fac0 	bl	800e524 <udp_connect>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	73fb      	strb	r3, [r7, #15]

	if (err == HAL_OK)
 8000fa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d10a      	bne.n	8000fc6 <udp_client_connect+0x5a>
	{
		// Blue LED
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000fb0:	2180      	movs	r1, #128	; 0x80
 8000fb2:	480a      	ldr	r0, [pc, #40]	; (8000fdc <udp_client_connect+0x70>)
 8000fb4:	f002 fa05 	bl	80033c2 <HAL_GPIO_TogglePin>
		// Set a receive callback for the upcb when server sends data to client
		udp_recv(upcb, udp_receive_callback, NULL);
 8000fb8:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <udp_client_connect+0x64>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	4908      	ldr	r1, [pc, #32]	; (8000fe0 <udp_client_connect+0x74>)
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f00d fb1d 	bl	800e600 <udp_recv>

	}
}
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	200004a4 	.word	0x200004a4
 8000fd4:	1514a8c0 	.word	0x1514a8c0
 8000fd8:	0514a8c0 	.word	0x0514a8c0
 8000fdc:	40020400 	.word	0x40020400
 8000fe0:	08000fe5 	.word	0x08000fe5

08000fe4 <udp_receive_callback>:
	}
}

void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p,
		const ip_addr_t *addr, u16_t port)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b092      	sub	sp, #72	; 0x48
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
 8000ff0:	603b      	str	r3, [r7, #0]
	// Copy data from the pbuf
	strncpy(buffer, (char *)p->payload, p->len);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6859      	ldr	r1, [r3, #4]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	895b      	ldrh	r3, [r3, #10]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	482b      	ldr	r0, [pc, #172]	; (80010ac <udp_receive_callback+0xc8>)
 8000ffe:	f010 fd8a 	bl	8011b16 <strncpy>

	// Increment message count
	++counter;
 8001002:	4b2b      	ldr	r3, [pc, #172]	; (80010b0 <udp_receive_callback+0xcc>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	3301      	adds	r3, #1
 8001008:	4a29      	ldr	r2, [pc, #164]	; (80010b0 <udp_receive_callback+0xcc>)
 800100a:	6013      	str	r3, [r2, #0]

	//Parse Input
	uint8_t data_index = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	float drive_vals[10] = {0};
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	2228      	movs	r2, #40	; 0x28
 8001018:	2100      	movs	r1, #0
 800101a:	4618      	mov	r0, r3
 800101c:	f010 fd61 	bl	8011ae2 <memset>
	char *buffer_data = strtok(buffer, ",");
 8001020:	4924      	ldr	r1, [pc, #144]	; (80010b4 <udp_receive_callback+0xd0>)
 8001022:	4822      	ldr	r0, [pc, #136]	; (80010ac <udp_receive_callback+0xc8>)
 8001024:	f010 fd8a 	bl	8011b3c <strtok>
 8001028:	6438      	str	r0, [r7, #64]	; 0x40
	while (buffer_data != NULL && data_index < 10)
 800102a:	e026      	b.n	800107a <udp_receive_callback+0x96>
	{
		float conv_check = atof(buffer_data);
 800102c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800102e:	f00f fe15 	bl	8010c5c <atof>
 8001032:	eeb0 7b40 	vmov.f64	d7, d0
 8001036:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800103a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		//Make data was converted properly
		if (conv_check == 0)
 800103e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001042:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800104a:	d104      	bne.n	8001056 <udp_receive_callback+0x72>
		{
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800104c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001050:	4819      	ldr	r0, [pc, #100]	; (80010b8 <udp_receive_callback+0xd4>)
 8001052:	f002 f9b6 	bl	80033c2 <HAL_GPIO_TogglePin>
		}

		drive_vals[data_index] = conv_check;
 8001056:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	3348      	adds	r3, #72	; 0x48
 800105e:	443b      	add	r3, r7
 8001060:	3b34      	subs	r3, #52	; 0x34
 8001062:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001064:	601a      	str	r2, [r3, #0]

		++data_index;
 8001066:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800106a:	3301      	adds	r3, #1
 800106c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		buffer_data = strtok(NULL, ",");
 8001070:	4910      	ldr	r1, [pc, #64]	; (80010b4 <udp_receive_callback+0xd0>)
 8001072:	2000      	movs	r0, #0
 8001074:	f010 fd62 	bl	8011b3c <strtok>
 8001078:	6438      	str	r0, [r7, #64]	; 0x40
	while (buffer_data != NULL && data_index < 10)
 800107a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800107c:	2b00      	cmp	r3, #0
 800107e:	d003      	beq.n	8001088 <udp_receive_callback+0xa4>
 8001080:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001084:	2b09      	cmp	r3, #9
 8001086:	d9d1      	bls.n	800102c <udp_receive_callback+0x48>
	}

	// Free recieve pbuf;
	pbuf_free(p);
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f007 facd 	bl	8008628 <pbuf_free>


	//Might need to reset drive_vals to 0
	// Set Steering Angle for Servo
	//ugv_servoSetAngle(&steeringServo, steer_val);
	ugv_servoSetAngle(&steeringServo, drive_vals[1]);
 800108e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001092:	eeb0 0a67 	vmov.f32	s0, s15
 8001096:	4809      	ldr	r0, [pc, #36]	; (80010bc <udp_receive_callback+0xd8>)
 8001098:	f005 f9b9 	bl	800640e <ugv_servoSetAngle>

	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800109c:	2101      	movs	r1, #1
 800109e:	4806      	ldr	r0, [pc, #24]	; (80010b8 <udp_receive_callback+0xd4>)
 80010a0:	f002 f98f 	bl	80033c2 <HAL_GPIO_TogglePin>
}
 80010a4:	bf00      	nop
 80010a6:	3748      	adds	r7, #72	; 0x48
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	200004a8 	.word	0x200004a8
 80010b0:	2000050c 	.word	0x2000050c
 80010b4:	08013a00 	.word	0x08013a00
 80010b8:	40020400 	.word	0x40020400
 80010bc:	20000470 	.word	0x20000470

080010c0 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80010c6:	463b      	mov	r3, r7
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80010d2:	f000 fd23 	bl	8001b1c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80010d6:	2301      	movs	r3, #1
 80010d8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80010da:	2300      	movs	r3, #0
 80010dc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x2007c000;
 80010de:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <MPU_Config+0x58>)
 80010e0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 80010e2:	230d      	movs	r3, #13
 80010e4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80010ea:	2301      	movs	r3, #1
 80010ec:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80010ee:	2303      	movs	r3, #3
 80010f0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80010f2:	2301      	movs	r3, #1
 80010f4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80010f6:	2301      	movs	r3, #1
 80010f8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80010fa:	2300      	movs	r3, #0
 80010fc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80010fe:	2300      	movs	r3, #0
 8001100:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001102:	463b      	mov	r3, r7
 8001104:	4618      	mov	r0, r3
 8001106:	f000 fd41 	bl	8001b8c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800110a:	2004      	movs	r0, #4
 800110c:	f000 fd1e 	bl	8001b4c <HAL_MPU_Enable>

}
 8001110:	bf00      	nop
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	2007c000 	.word	0x2007c000

0800111c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001120:	b672      	cpsid	i
}
 8001122:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001124:	e7fe      	b.n	8001124 <Error_Handler+0x8>
	...

08001128 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800112e:	4b0f      	ldr	r3, [pc, #60]	; (800116c <HAL_MspInit+0x44>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	4a0e      	ldr	r2, [pc, #56]	; (800116c <HAL_MspInit+0x44>)
 8001134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001138:	6413      	str	r3, [r2, #64]	; 0x40
 800113a:	4b0c      	ldr	r3, [pc, #48]	; (800116c <HAL_MspInit+0x44>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001146:	4b09      	ldr	r3, [pc, #36]	; (800116c <HAL_MspInit+0x44>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114a:	4a08      	ldr	r2, [pc, #32]	; (800116c <HAL_MspInit+0x44>)
 800114c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001150:	6453      	str	r3, [r2, #68]	; 0x44
 8001152:	4b06      	ldr	r3, [pc, #24]	; (800116c <HAL_MspInit+0x44>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800115a:	603b      	str	r3, [r7, #0]
 800115c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	40023800 	.word	0x40023800

08001170 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a1e      	ldr	r2, [pc, #120]	; (80011f8 <HAL_TIM_Base_MspInit+0x88>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d11c      	bne.n	80011bc <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001182:	4b1e      	ldr	r3, [pc, #120]	; (80011fc <HAL_TIM_Base_MspInit+0x8c>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001186:	4a1d      	ldr	r2, [pc, #116]	; (80011fc <HAL_TIM_Base_MspInit+0x8c>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	6453      	str	r3, [r2, #68]	; 0x44
 800118e:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <HAL_TIM_Base_MspInit+0x8c>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800119a:	2200      	movs	r2, #0
 800119c:	2100      	movs	r1, #0
 800119e:	2018      	movs	r0, #24
 80011a0:	f000 fc85 	bl	8001aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80011a4:	2018      	movs	r0, #24
 80011a6:	f000 fc9e 	bl	8001ae6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2100      	movs	r1, #0
 80011ae:	2019      	movs	r0, #25
 80011b0:	f000 fc7d 	bl	8001aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80011b4:	2019      	movs	r0, #25
 80011b6:	f000 fc96 	bl	8001ae6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80011ba:	e018      	b.n	80011ee <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM10)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a0f      	ldr	r2, [pc, #60]	; (8001200 <HAL_TIM_Base_MspInit+0x90>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d113      	bne.n	80011ee <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80011c6:	4b0d      	ldr	r3, [pc, #52]	; (80011fc <HAL_TIM_Base_MspInit+0x8c>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	4a0c      	ldr	r2, [pc, #48]	; (80011fc <HAL_TIM_Base_MspInit+0x8c>)
 80011cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011d0:	6453      	str	r3, [r2, #68]	; 0x44
 80011d2:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <HAL_TIM_Base_MspInit+0x8c>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80011de:	2200      	movs	r2, #0
 80011e0:	2100      	movs	r1, #0
 80011e2:	2019      	movs	r0, #25
 80011e4:	f000 fc63 	bl	8001aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80011e8:	2019      	movs	r0, #25
 80011ea:	f000 fc7c 	bl	8001ae6 <HAL_NVIC_EnableIRQ>
}
 80011ee:	bf00      	nop
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40010000 	.word	0x40010000
 80011fc:	40023800 	.word	0x40023800
 8001200:	40014400 	.word	0x40014400

08001204 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b088      	sub	sp, #32
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f107 030c 	add.w	r3, r7, #12
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM10)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a11      	ldr	r2, [pc, #68]	; (8001268 <HAL_TIM_MspPostInit+0x64>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d11c      	bne.n	8001260 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM10_MspPostInit 0 */

  /* USER CODE END TIM10_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001226:	4b11      	ldr	r3, [pc, #68]	; (800126c <HAL_TIM_MspPostInit+0x68>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a10      	ldr	r2, [pc, #64]	; (800126c <HAL_TIM_MspPostInit+0x68>)
 800122c:	f043 0302 	orr.w	r3, r3, #2
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b0e      	ldr	r3, [pc, #56]	; (800126c <HAL_TIM_MspPostInit+0x68>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
    /**TIM10 GPIO Configuration
    PB8     ------> TIM10_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800123e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001242:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001244:	2302      	movs	r3, #2
 8001246:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124c:	2300      	movs	r3, #0
 800124e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001250:	2303      	movs	r3, #3
 8001252:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001254:	f107 030c 	add.w	r3, r7, #12
 8001258:	4619      	mov	r1, r3
 800125a:	4805      	ldr	r0, [pc, #20]	; (8001270 <HAL_TIM_MspPostInit+0x6c>)
 800125c:	f001 feec 	bl	8003038 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8001260:	bf00      	nop
 8001262:	3720      	adds	r7, #32
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40014400 	.word	0x40014400
 800126c:	40023800 	.word	0x40023800
 8001270:	40020400 	.word	0x40020400

08001274 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b0ae      	sub	sp, #184	; 0xb8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	2290      	movs	r2, #144	; 0x90
 8001292:	2100      	movs	r1, #0
 8001294:	4618      	mov	r0, r3
 8001296:	f010 fc24 	bl	8011ae2 <memset>
  if(huart->Instance==USART3)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a22      	ldr	r2, [pc, #136]	; (8001328 <HAL_UART_MspInit+0xb4>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d13c      	bne.n	800131e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012a8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80012aa:	2300      	movs	r3, #0
 80012ac:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ae:	f107 0314 	add.w	r3, r7, #20
 80012b2:	4618      	mov	r0, r3
 80012b4:	f002 fdc2 	bl	8003e3c <HAL_RCCEx_PeriphCLKConfig>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80012be:	f7ff ff2d 	bl	800111c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012c2:	4b1a      	ldr	r3, [pc, #104]	; (800132c <HAL_UART_MspInit+0xb8>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	4a19      	ldr	r2, [pc, #100]	; (800132c <HAL_UART_MspInit+0xb8>)
 80012c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012cc:	6413      	str	r3, [r2, #64]	; 0x40
 80012ce:	4b17      	ldr	r3, [pc, #92]	; (800132c <HAL_UART_MspInit+0xb8>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012da:	4b14      	ldr	r3, [pc, #80]	; (800132c <HAL_UART_MspInit+0xb8>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	4a13      	ldr	r2, [pc, #76]	; (800132c <HAL_UART_MspInit+0xb8>)
 80012e0:	f043 0308 	orr.w	r3, r3, #8
 80012e4:	6313      	str	r3, [r2, #48]	; 0x30
 80012e6:	4b11      	ldr	r3, [pc, #68]	; (800132c <HAL_UART_MspInit+0xb8>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	f003 0308 	and.w	r3, r3, #8
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80012f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fa:	2302      	movs	r3, #2
 80012fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001306:	2303      	movs	r3, #3
 8001308:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800130c:	2307      	movs	r3, #7
 800130e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001312:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001316:	4619      	mov	r1, r3
 8001318:	4805      	ldr	r0, [pc, #20]	; (8001330 <HAL_UART_MspInit+0xbc>)
 800131a:	f001 fe8d 	bl	8003038 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800131e:	bf00      	nop
 8001320:	37b8      	adds	r7, #184	; 0xb8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40004800 	.word	0x40004800
 800132c:	40023800 	.word	0x40023800
 8001330:	40020c00 	.word	0x40020c00

08001334 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001338:	e7fe      	b.n	8001338 <NMI_Handler+0x4>

0800133a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800133e:	e7fe      	b.n	800133e <HardFault_Handler+0x4>

08001340 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001344:	e7fe      	b.n	8001344 <MemManage_Handler+0x4>

08001346 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800134a:	e7fe      	b.n	800134a <BusFault_Handler+0x4>

0800134c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <UsageFault_Handler+0x4>

08001352 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001380:	f000 fa76 	bl	8001870 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}

08001388 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800138c:	4802      	ldr	r0, [pc, #8]	; (8001398 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800138e:	f003 fba9 	bl	8004ae4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000350 	.word	0x20000350

0800139c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013a0:	4803      	ldr	r0, [pc, #12]	; (80013b0 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80013a2:	f003 fb9f 	bl	8004ae4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80013a6:	4803      	ldr	r0, [pc, #12]	; (80013b4 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80013a8:	f003 fb9c 	bl	8004ae4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000350 	.word	0x20000350
 80013b4:	2000039c 	.word	0x2000039c

080013b8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80013bc:	4802      	ldr	r0, [pc, #8]	; (80013c8 <ETH_IRQHandler+0x10>)
 80013be:	f000 ff4f 	bl	8002260 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20004ef0 	.word	0x20004ef0

080013cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  return 1;
 80013d0:	2301      	movs	r3, #1
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <_kill>:

int _kill(int pid, int sig)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013e6:	4b05      	ldr	r3, [pc, #20]	; (80013fc <_kill+0x20>)
 80013e8:	2216      	movs	r2, #22
 80013ea:	601a      	str	r2, [r3, #0]
  return -1;
 80013ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	2000a9c0 	.word	0x2000a9c0

08001400 <_exit>:

void _exit (int status)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001408:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff ffe5 	bl	80013dc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001412:	e7fe      	b.n	8001412 <_exit+0x12>

08001414 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
 8001424:	e00a      	b.n	800143c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001426:	f3af 8000 	nop.w
 800142a:	4601      	mov	r1, r0
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	1c5a      	adds	r2, r3, #1
 8001430:	60ba      	str	r2, [r7, #8]
 8001432:	b2ca      	uxtb	r2, r1
 8001434:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	3301      	adds	r3, #1
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	697a      	ldr	r2, [r7, #20]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	429a      	cmp	r2, r3
 8001442:	dbf0      	blt.n	8001426 <_read+0x12>
  }

  return len;
 8001444:	687b      	ldr	r3, [r7, #4]
}
 8001446:	4618      	mov	r0, r3
 8001448:	3718      	adds	r7, #24
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b086      	sub	sp, #24
 8001452:	af00      	add	r7, sp, #0
 8001454:	60f8      	str	r0, [r7, #12]
 8001456:	60b9      	str	r1, [r7, #8]
 8001458:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800145a:	2300      	movs	r3, #0
 800145c:	617b      	str	r3, [r7, #20]
 800145e:	e009      	b.n	8001474 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	1c5a      	adds	r2, r3, #1
 8001464:	60ba      	str	r2, [r7, #8]
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	4618      	mov	r0, r3
 800146a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	3301      	adds	r3, #1
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	697a      	ldr	r2, [r7, #20]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	429a      	cmp	r2, r3
 800147a:	dbf1      	blt.n	8001460 <_write+0x12>
  }
  return len;
 800147c:	687b      	ldr	r3, [r7, #4]
}
 800147e:	4618      	mov	r0, r3
 8001480:	3718      	adds	r7, #24
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <_close>:

int _close(int file)
{
 8001486:	b480      	push	{r7}
 8001488:	b083      	sub	sp, #12
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800148e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001492:	4618      	mov	r0, r3
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800149e:	b480      	push	{r7}
 80014a0:	b083      	sub	sp, #12
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
 80014a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014ae:	605a      	str	r2, [r3, #4]
  return 0;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <_isatty>:

int _isatty(int file)
{
 80014be:	b480      	push	{r7}
 80014c0:	b083      	sub	sp, #12
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014c6:	2301      	movs	r3, #1
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3714      	adds	r7, #20
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
	...

080014f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b087      	sub	sp, #28
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014f8:	4a14      	ldr	r2, [pc, #80]	; (800154c <_sbrk+0x5c>)
 80014fa:	4b15      	ldr	r3, [pc, #84]	; (8001550 <_sbrk+0x60>)
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001504:	4b13      	ldr	r3, [pc, #76]	; (8001554 <_sbrk+0x64>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d102      	bne.n	8001512 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800150c:	4b11      	ldr	r3, [pc, #68]	; (8001554 <_sbrk+0x64>)
 800150e:	4a12      	ldr	r2, [pc, #72]	; (8001558 <_sbrk+0x68>)
 8001510:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001512:	4b10      	ldr	r3, [pc, #64]	; (8001554 <_sbrk+0x64>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4413      	add	r3, r2
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	429a      	cmp	r2, r3
 800151e:	d205      	bcs.n	800152c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001520:	4b0e      	ldr	r3, [pc, #56]	; (800155c <_sbrk+0x6c>)
 8001522:	220c      	movs	r2, #12
 8001524:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001526:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800152a:	e009      	b.n	8001540 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800152c:	4b09      	ldr	r3, [pc, #36]	; (8001554 <_sbrk+0x64>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001532:	4b08      	ldr	r3, [pc, #32]	; (8001554 <_sbrk+0x64>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4413      	add	r3, r2
 800153a:	4a06      	ldr	r2, [pc, #24]	; (8001554 <_sbrk+0x64>)
 800153c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800153e:	68fb      	ldr	r3, [r7, #12]
}
 8001540:	4618      	mov	r0, r3
 8001542:	371c      	adds	r7, #28
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	20080000 	.word	0x20080000
 8001550:	00000400 	.word	0x00000400
 8001554:	20000510 	.word	0x20000510
 8001558:	2000a9d0 	.word	0x2000a9d0
 800155c:	2000a9c0 	.word	0x2000a9c0

08001560 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001564:	4b06      	ldr	r3, [pc, #24]	; (8001580 <SystemInit+0x20>)
 8001566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800156a:	4a05      	ldr	r2, [pc, #20]	; (8001580 <SystemInit+0x20>)
 800156c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001570:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001584:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001588:	f7ff ffea 	bl	8001560 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800158c:	480c      	ldr	r0, [pc, #48]	; (80015c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800158e:	490d      	ldr	r1, [pc, #52]	; (80015c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001590:	4a0d      	ldr	r2, [pc, #52]	; (80015c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001592:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001594:	e002      	b.n	800159c <LoopCopyDataInit>

08001596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800159a:	3304      	adds	r3, #4

0800159c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800159c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800159e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a0:	d3f9      	bcc.n	8001596 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015a2:	4a0a      	ldr	r2, [pc, #40]	; (80015cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015a4:	4c0a      	ldr	r4, [pc, #40]	; (80015d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a8:	e001      	b.n	80015ae <LoopFillZerobss>

080015aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015ac:	3204      	adds	r2, #4

080015ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b0:	d3fb      	bcc.n	80015aa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80015b2:	f010 fb6b 	bl	8011c8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015b6:	f7ff fa6f 	bl	8000a98 <main>
  bx  lr    
 80015ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015bc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80015c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c4:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80015c8:	08016968 	.word	0x08016968
  ldr r2, =_sbss
 80015cc:	20000334 	.word	0x20000334
  ldr r4, =_ebss
 80015d0:	2000a9d0 	.word	0x2000a9d0

080015d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015d4:	e7fe      	b.n	80015d4 <ADC_IRQHandler>

080015d6 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b083      	sub	sp, #12
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
 80015de:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d00b      	beq.n	80015fe <LAN8742_RegisterBusIO+0x28>
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d007      	beq.n	80015fe <LAN8742_RegisterBusIO+0x28>
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d003      	beq.n	80015fe <LAN8742_RegisterBusIO+0x28>
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	691b      	ldr	r3, [r3, #16]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d102      	bne.n	8001604 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80015fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001602:	e014      	b.n	800162e <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685a      	ldr	r2, [r3, #4]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	68da      	ldr	r2, [r3, #12]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	691a      	ldr	r2, [r3, #16]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800163a:	b580      	push	{r7, lr}
 800163c:	b086      	sub	sp, #24
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	2300      	movs	r3, #0
 8001648:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800164a:	2300      	movs	r3, #0
 800164c:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d139      	bne.n	80016ca <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d002      	beq.n	8001664 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2220      	movs	r2, #32
 8001668:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
 800166e:	e01c      	b.n	80016aa <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	695b      	ldr	r3, [r3, #20]
 8001674:	f107 020c 	add.w	r2, r7, #12
 8001678:	2112      	movs	r1, #18
 800167a:	6978      	ldr	r0, [r7, #20]
 800167c:	4798      	blx	r3
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	da03      	bge.n	800168c <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001684:	f06f 0304 	mvn.w	r3, #4
 8001688:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 800168a:	e00b      	b.n	80016a4 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f003 031f 	and.w	r3, r3, #31
 8001692:	697a      	ldr	r2, [r7, #20]
 8001694:	429a      	cmp	r2, r3
 8001696:	d105      	bne.n	80016a4 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	697a      	ldr	r2, [r7, #20]
 800169c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800169e:	2300      	movs	r3, #0
 80016a0:	613b      	str	r3, [r7, #16]
         break;
 80016a2:	e005      	b.n	80016b0 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	3301      	adds	r3, #1
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	2b1f      	cmp	r3, #31
 80016ae:	d9df      	bls.n	8001670 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b1f      	cmp	r3, #31
 80016b6:	d902      	bls.n	80016be <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80016b8:	f06f 0302 	mvn.w	r3, #2
 80016bc:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d102      	bne.n	80016ca <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2201      	movs	r2, #1
 80016c8:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 80016ca:	693b      	ldr	r3, [r7, #16]
 }
 80016cc:	4618      	mov	r0, r3
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80016dc:	2300      	movs	r3, #0
 80016de:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	695b      	ldr	r3, [r3, #20]
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	6810      	ldr	r0, [r2, #0]
 80016e8:	f107 020c 	add.w	r2, r7, #12
 80016ec:	2101      	movs	r1, #1
 80016ee:	4798      	blx	r3
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	da02      	bge.n	80016fc <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80016f6:	f06f 0304 	mvn.w	r3, #4
 80016fa:	e06e      	b.n	80017da <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	695b      	ldr	r3, [r3, #20]
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	6810      	ldr	r0, [r2, #0]
 8001704:	f107 020c 	add.w	r2, r7, #12
 8001708:	2101      	movs	r1, #1
 800170a:	4798      	blx	r3
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	da02      	bge.n	8001718 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001712:	f06f 0304 	mvn.w	r3, #4
 8001716:	e060      	b.n	80017da <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f003 0304 	and.w	r3, r3, #4
 800171e:	2b00      	cmp	r3, #0
 8001720:	d101      	bne.n	8001726 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001722:	2301      	movs	r3, #1
 8001724:	e059      	b.n	80017da <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	6810      	ldr	r0, [r2, #0]
 800172e:	f107 020c 	add.w	r2, r7, #12
 8001732:	2100      	movs	r1, #0
 8001734:	4798      	blx	r3
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	da02      	bge.n	8001742 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800173c:	f06f 0304 	mvn.w	r3, #4
 8001740:	e04b      	b.n	80017da <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d11b      	bne.n	8001784 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d006      	beq.n	8001764 <LAN8742_GetLinkState+0x90>
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001760:	2302      	movs	r3, #2
 8001762:	e03a      	b.n	80017da <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800176e:	2303      	movs	r3, #3
 8001770:	e033      	b.n	80017da <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800177c:	2304      	movs	r3, #4
 800177e:	e02c      	b.n	80017da <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001780:	2305      	movs	r3, #5
 8001782:	e02a      	b.n	80017da <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	695b      	ldr	r3, [r3, #20]
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	6810      	ldr	r0, [r2, #0]
 800178c:	f107 020c 	add.w	r2, r7, #12
 8001790:	211f      	movs	r1, #31
 8001792:	4798      	blx	r3
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	da02      	bge.n	80017a0 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800179a:	f06f 0304 	mvn.w	r3, #4
 800179e:	e01c      	b.n	80017da <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80017aa:	2306      	movs	r3, #6
 80017ac:	e015      	b.n	80017da <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	f003 031c 	and.w	r3, r3, #28
 80017b4:	2b18      	cmp	r3, #24
 80017b6:	d101      	bne.n	80017bc <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80017b8:	2302      	movs	r3, #2
 80017ba:	e00e      	b.n	80017da <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f003 031c 	and.w	r3, r3, #28
 80017c2:	2b08      	cmp	r3, #8
 80017c4:	d101      	bne.n	80017ca <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e007      	b.n	80017da <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	f003 031c 	and.w	r3, r3, #28
 80017d0:	2b14      	cmp	r3, #20
 80017d2:	d101      	bne.n	80017d8 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80017d4:	2304      	movs	r3, #4
 80017d6:	e000      	b.n	80017da <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80017d8:	2305      	movs	r3, #5
    }
  }
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
	...

080017e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017e8:	4b08      	ldr	r3, [pc, #32]	; (800180c <HAL_Init+0x28>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a07      	ldr	r2, [pc, #28]	; (800180c <HAL_Init+0x28>)
 80017ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f4:	2003      	movs	r0, #3
 80017f6:	f000 f94f 	bl	8001a98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017fa:	2000      	movs	r0, #0
 80017fc:	f000 f808 	bl	8001810 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001800:	f7ff fc92 	bl	8001128 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40023c00 	.word	0x40023c00

08001810 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001818:	4b12      	ldr	r3, [pc, #72]	; (8001864 <HAL_InitTick+0x54>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	4b12      	ldr	r3, [pc, #72]	; (8001868 <HAL_InitTick+0x58>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	4619      	mov	r1, r3
 8001822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001826:	fbb3 f3f1 	udiv	r3, r3, r1
 800182a:	fbb2 f3f3 	udiv	r3, r2, r3
 800182e:	4618      	mov	r0, r3
 8001830:	f000 f967 	bl	8001b02 <HAL_SYSTICK_Config>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e00e      	b.n	800185c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2b0f      	cmp	r3, #15
 8001842:	d80a      	bhi.n	800185a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001844:	2200      	movs	r2, #0
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800184c:	f000 f92f 	bl	8001aae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001850:	4a06      	ldr	r2, [pc, #24]	; (800186c <HAL_InitTick+0x5c>)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001856:	2300      	movs	r3, #0
 8001858:	e000      	b.n	800185c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
}
 800185c:	4618      	mov	r0, r3
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20000000 	.word	0x20000000
 8001868:	20000008 	.word	0x20000008
 800186c:	20000004 	.word	0x20000004

08001870 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <HAL_IncTick+0x20>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	461a      	mov	r2, r3
 800187a:	4b06      	ldr	r3, [pc, #24]	; (8001894 <HAL_IncTick+0x24>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4413      	add	r3, r2
 8001880:	4a04      	ldr	r2, [pc, #16]	; (8001894 <HAL_IncTick+0x24>)
 8001882:	6013      	str	r3, [r2, #0]
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	20000008 	.word	0x20000008
 8001894:	20000514 	.word	0x20000514

08001898 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return uwTick;
 800189c:	4b03      	ldr	r3, [pc, #12]	; (80018ac <HAL_GetTick+0x14>)
 800189e:	681b      	ldr	r3, [r3, #0]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	20000514 	.word	0x20000514

080018b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018b8:	f7ff ffee 	bl	8001898 <HAL_GetTick>
 80018bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018c8:	d005      	beq.n	80018d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ca:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <HAL_Delay+0x44>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	461a      	mov	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	4413      	add	r3, r2
 80018d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018d6:	bf00      	nop
 80018d8:	f7ff ffde 	bl	8001898 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d8f7      	bhi.n	80018d8 <HAL_Delay+0x28>
  {
  }
}
 80018e8:	bf00      	nop
 80018ea:	bf00      	nop
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000008 	.word	0x20000008

080018f8 <__NVIC_SetPriorityGrouping>:
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001908:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <__NVIC_SetPriorityGrouping+0x40>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800190e:	68ba      	ldr	r2, [r7, #8]
 8001910:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001914:	4013      	ands	r3, r2
 8001916:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001920:	4b06      	ldr	r3, [pc, #24]	; (800193c <__NVIC_SetPriorityGrouping+0x44>)
 8001922:	4313      	orrs	r3, r2
 8001924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001926:	4a04      	ldr	r2, [pc, #16]	; (8001938 <__NVIC_SetPriorityGrouping+0x40>)
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	60d3      	str	r3, [r2, #12]
}
 800192c:	bf00      	nop
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	e000ed00 	.word	0xe000ed00
 800193c:	05fa0000 	.word	0x05fa0000

08001940 <__NVIC_GetPriorityGrouping>:
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001944:	4b04      	ldr	r3, [pc, #16]	; (8001958 <__NVIC_GetPriorityGrouping+0x18>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	0a1b      	lsrs	r3, r3, #8
 800194a:	f003 0307 	and.w	r3, r3, #7
}
 800194e:	4618      	mov	r0, r3
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <__NVIC_EnableIRQ>:
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196a:	2b00      	cmp	r3, #0
 800196c:	db0b      	blt.n	8001986 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	f003 021f 	and.w	r2, r3, #31
 8001974:	4907      	ldr	r1, [pc, #28]	; (8001994 <__NVIC_EnableIRQ+0x38>)
 8001976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197a:	095b      	lsrs	r3, r3, #5
 800197c:	2001      	movs	r0, #1
 800197e:	fa00 f202 	lsl.w	r2, r0, r2
 8001982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	e000e100 	.word	0xe000e100

08001998 <__NVIC_SetPriority>:
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	6039      	str	r1, [r7, #0]
 80019a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	db0a      	blt.n	80019c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	490c      	ldr	r1, [pc, #48]	; (80019e4 <__NVIC_SetPriority+0x4c>)
 80019b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b6:	0112      	lsls	r2, r2, #4
 80019b8:	b2d2      	uxtb	r2, r2
 80019ba:	440b      	add	r3, r1
 80019bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80019c0:	e00a      	b.n	80019d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	4908      	ldr	r1, [pc, #32]	; (80019e8 <__NVIC_SetPriority+0x50>)
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	f003 030f 	and.w	r3, r3, #15
 80019ce:	3b04      	subs	r3, #4
 80019d0:	0112      	lsls	r2, r2, #4
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	440b      	add	r3, r1
 80019d6:	761a      	strb	r2, [r3, #24]
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	e000e100 	.word	0xe000e100
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <NVIC_EncodePriority>:
{
 80019ec:	b480      	push	{r7}
 80019ee:	b089      	sub	sp, #36	; 0x24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	f1c3 0307 	rsb	r3, r3, #7
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	bf28      	it	cs
 8001a0a:	2304      	movcs	r3, #4
 8001a0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	3304      	adds	r3, #4
 8001a12:	2b06      	cmp	r3, #6
 8001a14:	d902      	bls.n	8001a1c <NVIC_EncodePriority+0x30>
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3b03      	subs	r3, #3
 8001a1a:	e000      	b.n	8001a1e <NVIC_EncodePriority+0x32>
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43da      	mvns	r2, r3
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	401a      	ands	r2, r3
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3e:	43d9      	mvns	r1, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a44:	4313      	orrs	r3, r2
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3724      	adds	r7, #36	; 0x24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
	...

08001a54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a64:	d301      	bcc.n	8001a6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a66:	2301      	movs	r3, #1
 8001a68:	e00f      	b.n	8001a8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a6a:	4a0a      	ldr	r2, [pc, #40]	; (8001a94 <SysTick_Config+0x40>)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a72:	210f      	movs	r1, #15
 8001a74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a78:	f7ff ff8e 	bl	8001998 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a7c:	4b05      	ldr	r3, [pc, #20]	; (8001a94 <SysTick_Config+0x40>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a82:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <SysTick_Config+0x40>)
 8001a84:	2207      	movs	r2, #7
 8001a86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	e000e010 	.word	0xe000e010

08001a98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f7ff ff29 	bl	80018f8 <__NVIC_SetPriorityGrouping>
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b086      	sub	sp, #24
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
 8001aba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac0:	f7ff ff3e 	bl	8001940 <__NVIC_GetPriorityGrouping>
 8001ac4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	68b9      	ldr	r1, [r7, #8]
 8001aca:	6978      	ldr	r0, [r7, #20]
 8001acc:	f7ff ff8e 	bl	80019ec <NVIC_EncodePriority>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff ff5d 	bl	8001998 <__NVIC_SetPriority>
}
 8001ade:	bf00      	nop
 8001ae0:	3718      	adds	r7, #24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	4603      	mov	r3, r0
 8001aee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff ff31 	bl	800195c <__NVIC_EnableIRQ>
}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff ffa2 	bl	8001a54 <SysTick_Config>
 8001b10:	4603      	mov	r3, r0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001b20:	f3bf 8f5f 	dmb	sy
}
 8001b24:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001b26:	4b07      	ldr	r3, [pc, #28]	; (8001b44 <HAL_MPU_Disable+0x28>)
 8001b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2a:	4a06      	ldr	r2, [pc, #24]	; (8001b44 <HAL_MPU_Disable+0x28>)
 8001b2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b30:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001b32:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <HAL_MPU_Disable+0x2c>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	605a      	str	r2, [r3, #4]
}
 8001b38:	bf00      	nop
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	e000ed00 	.word	0xe000ed00
 8001b48:	e000ed90 	.word	0xe000ed90

08001b4c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001b54:	4a0b      	ldr	r2, [pc, #44]	; (8001b84 <HAL_MPU_Enable+0x38>)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001b5e:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <HAL_MPU_Enable+0x3c>)
 8001b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b62:	4a09      	ldr	r2, [pc, #36]	; (8001b88 <HAL_MPU_Enable+0x3c>)
 8001b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b68:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001b6a:	f3bf 8f4f 	dsb	sy
}
 8001b6e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b70:	f3bf 8f6f 	isb	sy
}
 8001b74:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	e000ed90 	.word	0xe000ed90
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	785a      	ldrb	r2, [r3, #1]
 8001b98:	4b1b      	ldr	r3, [pc, #108]	; (8001c08 <HAL_MPU_ConfigRegion+0x7c>)
 8001b9a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001b9c:	4b1a      	ldr	r3, [pc, #104]	; (8001c08 <HAL_MPU_ConfigRegion+0x7c>)
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	4a19      	ldr	r2, [pc, #100]	; (8001c08 <HAL_MPU_ConfigRegion+0x7c>)
 8001ba2:	f023 0301 	bic.w	r3, r3, #1
 8001ba6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001ba8:	4a17      	ldr	r2, [pc, #92]	; (8001c08 <HAL_MPU_ConfigRegion+0x7c>)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	7b1b      	ldrb	r3, [r3, #12]
 8001bb4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	7adb      	ldrb	r3, [r3, #11]
 8001bba:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001bbc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	7a9b      	ldrb	r3, [r3, #10]
 8001bc2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001bc4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	7b5b      	ldrb	r3, [r3, #13]
 8001bca:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001bcc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	7b9b      	ldrb	r3, [r3, #14]
 8001bd2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001bd4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	7bdb      	ldrb	r3, [r3, #15]
 8001bda:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001bdc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	7a5b      	ldrb	r3, [r3, #9]
 8001be2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001be4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	7a1b      	ldrb	r3, [r3, #8]
 8001bea:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001bec:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	7812      	ldrb	r2, [r2, #0]
 8001bf2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001bf4:	4a04      	ldr	r2, [pc, #16]	; (8001c08 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001bf6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001bf8:	6113      	str	r3, [r2, #16]
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	e000ed90 	.word	0xe000ed90

08001c0c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e086      	b.n	8001d2c <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d106      	bne.n	8001c36 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2223      	movs	r2, #35	; 0x23
 8001c2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f004 ff8f 	bl	8006b54 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c36:	4b3f      	ldr	r3, [pc, #252]	; (8001d34 <HAL_ETH_Init+0x128>)
 8001c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3a:	4a3e      	ldr	r2, [pc, #248]	; (8001d34 <HAL_ETH_Init+0x128>)
 8001c3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c40:	6453      	str	r3, [r2, #68]	; 0x44
 8001c42:	4b3c      	ldr	r3, [pc, #240]	; (8001d34 <HAL_ETH_Init+0x128>)
 8001c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c4a:	60bb      	str	r3, [r7, #8]
 8001c4c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001c4e:	4b3a      	ldr	r3, [pc, #232]	; (8001d38 <HAL_ETH_Init+0x12c>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	4a39      	ldr	r2, [pc, #228]	; (8001d38 <HAL_ETH_Init+0x12c>)
 8001c54:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001c58:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001c5a:	4b37      	ldr	r3, [pc, #220]	; (8001d38 <HAL_ETH_Init+0x12c>)
 8001c5c:	685a      	ldr	r2, [r3, #4]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	4935      	ldr	r1, [pc, #212]	; (8001d38 <HAL_ETH_Init+0x12c>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001c68:	4b33      	ldr	r3, [pc, #204]	; (8001d38 <HAL_ETH_Init+0x12c>)
 8001c6a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	6812      	ldr	r2, [r2, #0]
 8001c7a:	f043 0301 	orr.w	r3, r3, #1
 8001c7e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c82:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c84:	f7ff fe08 	bl	8001898 <HAL_GetTick>
 8001c88:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001c8a:	e011      	b.n	8001cb0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001c8c:	f7ff fe04 	bl	8001898 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001c9a:	d909      	bls.n	8001cb0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2204      	movs	r2, #4
 8001ca0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	22e0      	movs	r2, #224	; 0xe0
 8001ca8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e03d      	b.n	8001d2c <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1e4      	bne.n	8001c8c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 fefc 	bl	8002ac0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f000 ffa7 	bl	8002c1c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 fffd 	bl	8002cce <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	461a      	mov	r2, r3
 8001cda:	2100      	movs	r1, #0
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 ff65 	bl	8002bac <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8001cf0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <HAL_ETH_Init+0x130>)
 8001d00:	430b      	orrs	r3, r1
 8001d02:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8001d16:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2210      	movs	r2, #16
 8001d26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40023800 	.word	0x40023800
 8001d38:	40013800 	.word	0x40013800
 8001d3c:	00020060 	.word	0x00020060

08001d40 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d4e:	2b10      	cmp	r3, #16
 8001d50:	d150      	bne.n	8001df4 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2223      	movs	r2, #35	; 0x23
 8001d56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2204      	movs	r2, #4
 8001d5e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 f9f9 	bl	8002158 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f042 0208 	orr.w	r2, r2, #8
 8001d74:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d7e:	2001      	movs	r0, #1
 8001d80:	f7ff fd96 	bl	80018b0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f042 0204 	orr.w	r2, r2, #4
 8001d9a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001da4:	2001      	movs	r0, #1
 8001da6:	f7ff fd83 	bl	80018b0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 fd20 	bl	80027f8 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	6812      	ldr	r2, [r2, #0]
 8001dc6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001dca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001dce:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	6812      	ldr	r2, [r2, #0]
 8001dde:	f043 0302 	orr.w	r3, r3, #2
 8001de2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001de6:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2223      	movs	r2, #35	; 0x23
 8001dec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8001df0:	2300      	movs	r3, #0
 8001df2:	e000      	b.n	8001df6 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
  }
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b084      	sub	sp, #16
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e0c:	2b23      	cmp	r3, #35	; 0x23
 8001e0e:	d14a      	bne.n	8001ea6 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2223      	movs	r2, #35	; 0x23
 8001e14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	6812      	ldr	r2, [r2, #0]
 8001e26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e2a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e2e:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6812      	ldr	r2, [r2, #0]
 8001e3e:	f023 0302 	bic.w	r3, r3, #2
 8001e42:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e46:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 0204 	bic.w	r2, r2, #4
 8001e56:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e60:	2001      	movs	r0, #1
 8001e62:	f7ff fd25 	bl	80018b0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 fcc2 	bl	80027f8 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 0208 	bic.w	r2, r2, #8
 8001e82:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e8c:	2001      	movs	r0, #1
 8001e8e:	f7ff fd0f 	bl	80018b0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2210      	movs	r2, #16
 8001e9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	e000      	b.n	8001ea8 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
  }
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d109      	bne.n	8001ed6 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ec8:	f043 0201 	orr.w	r2, r3, #1
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e07c      	b.n	8001fd0 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001edc:	2b23      	cmp	r3, #35	; 0x23
 8001ede:	d176      	bne.n	8001fce <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	68b9      	ldr	r1, [r7, #8]
 8001ee4:	68f8      	ldr	r0, [r7, #12]
 8001ee6:	f000 ff61 	bl	8002dac <ETH_Prepare_Tx_Descriptors>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d009      	beq.n	8001f04 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ef6:	f043 0202 	orr.w	r2, r3, #2
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e065      	b.n	8001fd0 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8001f04:	f3bf 8f4f 	dsb	sy
}
 8001f08:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	3206      	adds	r2, #6
 8001f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f16:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1c:	1c5a      	adds	r2, r3, #1
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	629a      	str	r2, [r3, #40]	; 0x28
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f26:	2b03      	cmp	r3, #3
 8001f28:	d904      	bls.n	8001f34 <HAL_ETH_Transmit+0x84>
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2e:	1f1a      	subs	r2, r3, #4
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	3106      	adds	r1, #6
 8001f40:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001f44:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f48:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8001f4a:	f7ff fca5 	bl	8001898 <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001f50:	e037      	b.n	8001fc2 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f5a:	695b      	ldr	r3, [r3, #20]
 8001f5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d011      	beq.n	8001f88 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f6a:	f043 0208 	orr.w	r2, r3, #8
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f7c:	695a      	ldr	r2, [r3, #20]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e023      	b.n	8001fd0 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f8e:	d018      	beq.n	8001fc2 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f90:	f7ff fc82 	bl	8001898 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d302      	bcc.n	8001fa6 <HAL_ETH_Transmit+0xf6>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d10d      	bne.n	8001fc2 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fac:	f043 0204 	orr.w	r2, r3, #4
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001fbc:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e006      	b.n	8001fd0 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	dbc3      	blt.n	8001f52 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	e000      	b.n	8001fd0 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
  }
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3718      	adds	r7, #24
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b088      	sub	sp, #32
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d109      	bne.n	8002004 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff6:	f043 0201 	orr.w	r2, r3, #1
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e0a4      	b.n	800214e <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800200a:	2b23      	cmp	r3, #35	; 0x23
 800200c:	d001      	beq.n	8002012 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e09d      	b.n	800214e <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002016:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	69fa      	ldr	r2, [r7, #28]
 800201c:	3212      	adds	r2, #18
 800201e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002022:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002028:	f1c3 0304 	rsb	r3, r3, #4
 800202c:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800202e:	e066      	b.n	80020fe <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002038:	2b00      	cmp	r3, #0
 800203a:	d007      	beq.n	800204c <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	69da      	ldr	r2, [r3, #28]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	699a      	ldr	r2, [r3, #24]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002054:	2b00      	cmp	r3, #0
 8002056:	d103      	bne.n	8002060 <HAL_ETH_ReadData+0x88>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800205c:	2b00      	cmp	r3, #0
 800205e:	d03c      	beq.n	80020da <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002068:	2b00      	cmp	r3, #0
 800206a:	d005      	beq.n	8002078 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	0c1b      	lsrs	r3, r3, #16
 800207e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002082:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208c:	2b00      	cmp	r3, #0
 800208e:	d005      	beq.n	800209c <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8002098:	2301      	movs	r3, #1
 800209a:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80020b4:	461a      	mov	r2, r3
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	f004 ff15 	bl	8006ee8 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020c2:	1c5a      	adds	r2, r3, #1
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	441a      	add	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	2200      	movs	r2, #0
 80020d8:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	3301      	adds	r3, #1
 80020de:	61fb      	str	r3, [r7, #28]
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	2b03      	cmp	r3, #3
 80020e4:	d902      	bls.n	80020ec <HAL_ETH_ReadData+0x114>
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	3b04      	subs	r3, #4
 80020ea:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	69fa      	ldr	r2, [r7, #28]
 80020f0:	3212      	adds	r2, #18
 80020f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020f6:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	3301      	adds	r3, #1
 80020fc:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8002102:	2b00      	cmp	r3, #0
 8002104:	db06      	blt.n	8002114 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	429a      	cmp	r2, r3
 800210c:	d202      	bcs.n	8002114 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 800210e:	7cfb      	ldrb	r3, [r7, #19]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d08d      	beq.n	8002030 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	441a      	add	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002124:	2b00      	cmp	r3, #0
 8002126:	d002      	beq.n	800212e <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 f815 	bl	8002158 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69fa      	ldr	r2, [r7, #28]
 8002132:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8002134:	7cfb      	ldrb	r3, [r7, #19]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d108      	bne.n	800214c <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002148:	2300      	movs	r3, #0
 800214a:	e000      	b.n	800214e <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
}
 800214e:	4618      	mov	r0, r3
 8002150:	3720      	adds	r7, #32
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
	...

08002158 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b088      	sub	sp, #32
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002160:	2300      	movs	r3, #0
 8002162:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8002164:	2301      	movs	r3, #1
 8002166:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800216c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	69fa      	ldr	r2, [r7, #28]
 8002172:	3212      	adds	r2, #18
 8002174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002178:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800217e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002180:	e042      	b.n	8002208 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d112      	bne.n	80021b0 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800218a:	f107 0308 	add.w	r3, r7, #8
 800218e:	4618      	mov	r0, r3
 8002190:	f004 fe7a 	bl	8006e88 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d102      	bne.n	80021a0 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800219a:	2300      	movs	r3, #0
 800219c:	74fb      	strb	r3, [r7, #19]
 800219e:	e007      	b.n	80021b0 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	461a      	mov	r2, r3
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	461a      	mov	r2, r3
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80021b0:	7cfb      	ldrb	r3, [r7, #19]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d028      	beq.n	8002208 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d106      	bne.n	80021cc <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	695a      	ldr	r2, [r3, #20]
 80021c2:	4b26      	ldr	r3, [pc, #152]	; (800225c <ETH_UpdateDescriptor+0x104>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	6053      	str	r3, [r2, #4]
 80021ca:	e005      	b.n	80021d8 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	695b      	ldr	r3, [r3, #20]
 80021d0:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	3301      	adds	r3, #1
 80021e8:	61fb      	str	r3, [r7, #28]
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	2b03      	cmp	r3, #3
 80021ee:	d902      	bls.n	80021f6 <ETH_UpdateDescriptor+0x9e>
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	3b04      	subs	r3, #4
 80021f4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69fa      	ldr	r2, [r7, #28]
 80021fa:	3212      	adds	r2, #18
 80021fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002200:	617b      	str	r3, [r7, #20]
      desccount--;
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	3b01      	subs	r3, #1
 8002206:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d002      	beq.n	8002214 <ETH_UpdateDescriptor+0xbc>
 800220e:	7cfb      	ldrb	r3, [r7, #19]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1b6      	bne.n	8002182 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	429a      	cmp	r2, r3
 800221c:	d01a      	beq.n	8002254 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	3301      	adds	r3, #1
 8002222:	f003 0303 	and.w	r3, r3, #3
 8002226:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002228:	f3bf 8f5f 	dmb	sy
}
 800222c:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6919      	ldr	r1, [r3, #16]
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	4613      	mov	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	18ca      	adds	r2, r1, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002246:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	69fa      	ldr	r2, [r7, #28]
 800224c:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8002254:	bf00      	nop
 8002256:	3720      	adds	r7, #32
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	80004000 	.word	0x80004000

08002260 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800226e:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8002288:	4b4b      	ldr	r3, [pc, #300]	; (80023b8 <HAL_ETH_IRQHandler+0x158>)
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00e      	beq.n	80022b6 <HAL_ETH_IRQHandler+0x56>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d009      	beq.n	80022b6 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022aa:	461a      	mov	r2, r3
 80022ac:	4b43      	ldr	r3, [pc, #268]	; (80023bc <HAL_ETH_IRQHandler+0x15c>)
 80022ae:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 f891 	bl	80023d8 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00f      	beq.n	80022e0 <HAL_ETH_IRQHandler+0x80>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00a      	beq.n	80022e0 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022d2:	461a      	mov	r2, r3
 80022d4:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80022d8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f872 	bl	80023c4 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d042      	beq.n	8002370 <HAL_ETH_IRQHandler+0x110>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d03d      	beq.n	8002370 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022fa:	f043 0208 	orr.w	r2, r3, #8
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d01a      	beq.n	8002344 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002316:	695a      	ldr	r2, [r3, #20]
 8002318:	4b29      	ldr	r3, [pc, #164]	; (80023c0 <HAL_ETH_IRQHandler+0x160>)
 800231a:	4013      	ands	r3, r2
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800232a:	69db      	ldr	r3, [r3, #28]
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	6812      	ldr	r2, [r2, #0]
 8002330:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8002334:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002338:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	22e0      	movs	r2, #224	; 0xe0
 800233e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002342:	e012      	b.n	800236a <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800234c:	695a      	ldr	r2, [r3, #20]
 800234e:	f248 6380 	movw	r3, #34432	; 0x8680
 8002352:	4013      	ands	r3, r2
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002362:	461a      	mov	r2, r3
 8002364:	f248 6380 	movw	r3, #34432	; 0x8680
 8002368:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 f83e 	bl	80023ec <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	f003 0308 	and.w	r3, r3, #8
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00e      	beq.n	8002398 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002380:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 f838 	bl	8002400 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d006      	beq.n	80023b0 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80023a2:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <HAL_ETH_IRQHandler+0x158>)
 80023a4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80023a8:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 f832 	bl	8002414 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80023b0:	bf00      	nop
 80023b2:	3718      	adds	r7, #24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40013c00 	.word	0x40013c00
 80023bc:	00010040 	.word	0x00010040
 80023c0:	007e2000 	.word	0x007e2000

080023c4 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
 8002434:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	f003 031c 	and.w	r3, r3, #28
 8002444:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	02db      	lsls	r3, r3, #11
 800244a:	b29b      	uxth	r3, r3
 800244c:	697a      	ldr	r2, [r7, #20]
 800244e:	4313      	orrs	r3, r2
 8002450:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	019b      	lsls	r3, r3, #6
 8002456:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	4313      	orrs	r3, r2
 800245e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	f023 0302 	bic.w	r3, r3, #2
 8002466:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	697a      	ldr	r2, [r7, #20]
 8002476:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002478:	f7ff fa0e 	bl	8001898 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800247e:	e00d      	b.n	800249c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002480:	f7ff fa0a 	bl	8001898 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800248e:	d301      	bcc.n	8002494 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e010      	b.n	80024b6 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1ec      	bne.n	8002480 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	695b      	ldr	r3, [r3, #20]
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	461a      	mov	r2, r3
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3718      	adds	r7, #24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b086      	sub	sp, #24
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	60f8      	str	r0, [r7, #12]
 80024c6:	60b9      	str	r1, [r7, #8]
 80024c8:	607a      	str	r2, [r7, #4]
 80024ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	f003 031c 	and.w	r3, r3, #28
 80024da:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	02db      	lsls	r3, r3, #11
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	019b      	lsls	r3, r3, #6
 80024ec:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	f043 0302 	orr.w	r3, r3, #2
 80024fc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	f043 0301 	orr.w	r3, r3, #1
 8002504:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	b29a      	uxth	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002518:	f7ff f9be 	bl	8001898 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800251e:	e00d      	b.n	800253c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002520:	f7ff f9ba 	bl	8001898 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800252e:	d301      	bcc.n	8002534 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e009      	b.n	8002548 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1ec      	bne.n	8002520 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3718      	adds	r7, #24
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e0e6      	b.n	8002732 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0310 	and.w	r3, r3, #16
 800256e:	2b00      	cmp	r3, #0
 8002570:	bf14      	ite	ne
 8002572:	2301      	movne	r3, #1
 8002574:	2300      	moveq	r3, #0
 8002576:	b2db      	uxtb	r3, r3
 8002578:	461a      	mov	r2, r3
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002598:	2b00      	cmp	r3, #0
 800259a:	bf0c      	ite	eq
 800259c:	2301      	moveq	r3, #1
 800259e:	2300      	movne	r3, #0
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	461a      	mov	r2, r3
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	bf14      	ite	ne
 80025b8:	2301      	movne	r3, #1
 80025ba:	2300      	moveq	r3, #0
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	bf0c      	ite	eq
 80025d2:	2301      	moveq	r3, #1
 80025d4:	2300      	movne	r3, #0
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	461a      	mov	r2, r3
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	bf14      	ite	ne
 80025ec:	2301      	movne	r3, #1
 80025ee:	2300      	moveq	r3, #0
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	461a      	mov	r2, r3
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800261e:	2b00      	cmp	r3, #0
 8002620:	bf0c      	ite	eq
 8002622:	2301      	moveq	r3, #1
 8002624:	2300      	movne	r3, #0
 8002626:	b2db      	uxtb	r3, r3
 8002628:	461a      	mov	r2, r3
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002638:	2b00      	cmp	r3, #0
 800263a:	bf0c      	ite	eq
 800263c:	2301      	moveq	r3, #1
 800263e:	2300      	movne	r3, #0
 8002640:	b2db      	uxtb	r3, r3
 8002642:	461a      	mov	r2, r3
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002652:	2b00      	cmp	r3, #0
 8002654:	bf14      	ite	ne
 8002656:	2301      	movne	r3, #1
 8002658:	2300      	moveq	r3, #0
 800265a:	b2db      	uxtb	r3, r3
 800265c:	461a      	mov	r2, r3
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800267a:	2b00      	cmp	r3, #0
 800267c:	bf14      	ite	ne
 800267e:	2301      	movne	r3, #1
 8002680:	2300      	moveq	r3, #0
 8002682:	b2db      	uxtb	r3, r3
 8002684:	461a      	mov	r2, r3
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002694:	2b00      	cmp	r3, #0
 8002696:	bf14      	ite	ne
 8002698:	2301      	movne	r3, #1
 800269a:	2300      	moveq	r3, #0
 800269c:	b2db      	uxtb	r3, r3
 800269e:	461a      	mov	r2, r3
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	bf14      	ite	ne
 80026b2:	2301      	movne	r3, #1
 80026b4:	2300      	moveq	r3, #0
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	461a      	mov	r2, r3
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	bf0c      	ite	eq
 80026ce:	2301      	moveq	r3, #1
 80026d0:	2300      	movne	r3, #0
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	461a      	mov	r2, r3
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	0c1b      	lsrs	r3, r3, #16
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	f003 0304 	and.w	r3, r3, #4
 8002702:	2b00      	cmp	r3, #0
 8002704:	bf14      	ite	ne
 8002706:	2301      	movne	r3, #1
 8002708:	2300      	moveq	r3, #0
 800270a:	b2db      	uxtb	r3, r3
 800270c:	461a      	mov	r2, r3
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 800271e:	2b00      	cmp	r3, #0
 8002720:	bf14      	ite	ne
 8002722:	2301      	movne	r3, #1
 8002724:	2300      	moveq	r3, #0
 8002726:	b2db      	uxtb	r3, r3
 8002728:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b082      	sub	sp, #8
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
 8002746:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e00b      	b.n	800276a <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002758:	2b10      	cmp	r3, #16
 800275a:	d105      	bne.n	8002768 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800275c:	6839      	ldr	r1, [r7, #0]
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f870 	bl	8002844 <ETH_SetMACConfig>

    return HAL_OK;
 8002764:	2300      	movs	r3, #0
 8002766:	e000      	b.n	800276a <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
  }
}
 800276a:	4618      	mov	r0, r3
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
	...

08002774 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f023 031c 	bic.w	r3, r3, #28
 800278a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800278c:	f001 fb22 	bl	8003dd4 <HAL_RCC_GetHCLKFreq>
 8002790:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	4a14      	ldr	r2, [pc, #80]	; (80027e8 <HAL_ETH_SetMDIOClockRange+0x74>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d804      	bhi.n	80027a4 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f043 0308 	orr.w	r3, r3, #8
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	e019      	b.n	80027d8 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	4a11      	ldr	r2, [pc, #68]	; (80027ec <HAL_ETH_SetMDIOClockRange+0x78>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d204      	bcs.n	80027b6 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f043 030c 	orr.w	r3, r3, #12
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	e010      	b.n	80027d8 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	4a0d      	ldr	r2, [pc, #52]	; (80027f0 <HAL_ETH_SetMDIOClockRange+0x7c>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d90c      	bls.n	80027d8 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	4a0c      	ldr	r2, [pc, #48]	; (80027f4 <HAL_ETH_SetMDIOClockRange+0x80>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d804      	bhi.n	80027d0 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f043 0304 	orr.w	r3, r3, #4
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	e003      	b.n	80027d8 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f043 0310 	orr.w	r3, r3, #16
 80027d6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	611a      	str	r2, [r3, #16]
}
 80027e0:	bf00      	nop
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	02160ebf 	.word	0x02160ebf
 80027ec:	03938700 	.word	0x03938700
 80027f0:	05f5e0ff 	.word	0x05f5e0ff
 80027f4:	08f0d17f 	.word	0x08f0d17f

080027f8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002800:	2300      	movs	r3, #0
 8002802:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	6812      	ldr	r2, [r2, #0]
 8002812:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002816:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800281a:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002828:	2001      	movs	r0, #1
 800282a:	f7ff f841 	bl	80018b0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002838:	6193      	str	r3, [r2, #24]
}
 800283a:	bf00      	nop
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
	...

08002844 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	4b53      	ldr	r3, [pc, #332]	; (80029a8 <ETH_SetMACConfig+0x164>)
 800285a:	4013      	ands	r3, r2
 800285c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	7b9b      	ldrb	r3, [r3, #14]
 8002862:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	7c12      	ldrb	r2, [r2, #16]
 8002868:	2a00      	cmp	r2, #0
 800286a:	d102      	bne.n	8002872 <ETH_SetMACConfig+0x2e>
 800286c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002870:	e000      	b.n	8002874 <ETH_SetMACConfig+0x30>
 8002872:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002874:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	7c52      	ldrb	r2, [r2, #17]
 800287a:	2a00      	cmp	r2, #0
 800287c:	d102      	bne.n	8002884 <ETH_SetMACConfig+0x40>
 800287e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002882:	e000      	b.n	8002886 <ETH_SetMACConfig+0x42>
 8002884:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002886:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800288c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	7fdb      	ldrb	r3, [r3, #31]
 8002892:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002894:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800289a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	7f92      	ldrb	r2, [r2, #30]
 80028a0:	2a00      	cmp	r2, #0
 80028a2:	d102      	bne.n	80028aa <ETH_SetMACConfig+0x66>
 80028a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028a8:	e000      	b.n	80028ac <ETH_SetMACConfig+0x68>
 80028aa:	2200      	movs	r2, #0
                        macconf->Speed |
 80028ac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	7f1b      	ldrb	r3, [r3, #28]
 80028b2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80028b4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80028ba:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	791b      	ldrb	r3, [r3, #4]
 80028c0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80028c2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80028ca:	2a00      	cmp	r2, #0
 80028cc:	d102      	bne.n	80028d4 <ETH_SetMACConfig+0x90>
 80028ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028d2:	e000      	b.n	80028d6 <ETH_SetMACConfig+0x92>
 80028d4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80028d6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	7bdb      	ldrb	r3, [r3, #15]
 80028dc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80028de:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80028e4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80028ec:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80028ee:	4313      	orrs	r3, r2
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002906:	2001      	movs	r0, #1
 8002908:	f7fe ffd2 	bl	80018b0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002922:	4013      	ands	r3, r2
 8002924:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800292a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002932:	2a00      	cmp	r2, #0
 8002934:	d101      	bne.n	800293a <ETH_SetMACConfig+0xf6>
 8002936:	2280      	movs	r2, #128	; 0x80
 8002938:	e000      	b.n	800293c <ETH_SetMACConfig+0xf8>
 800293a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800293c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002942:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800294a:	2a01      	cmp	r2, #1
 800294c:	d101      	bne.n	8002952 <ETH_SetMACConfig+0x10e>
 800294e:	2208      	movs	r2, #8
 8002950:	e000      	b.n	8002954 <ETH_SetMACConfig+0x110>
 8002952:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002954:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800295c:	2a01      	cmp	r2, #1
 800295e:	d101      	bne.n	8002964 <ETH_SetMACConfig+0x120>
 8002960:	2204      	movs	r2, #4
 8002962:	e000      	b.n	8002966 <ETH_SetMACConfig+0x122>
 8002964:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002966:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800296e:	2a01      	cmp	r2, #1
 8002970:	d101      	bne.n	8002976 <ETH_SetMACConfig+0x132>
 8002972:	2202      	movs	r2, #2
 8002974:	e000      	b.n	8002978 <ETH_SetMACConfig+0x134>
 8002976:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002978:	4313      	orrs	r3, r2
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	4313      	orrs	r3, r2
 800297e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002990:	2001      	movs	r0, #1
 8002992:	f7fe ff8d 	bl	80018b0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	619a      	str	r2, [r3, #24]
}
 800299e:	bf00      	nop
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	fd20810f 	.word	0xfd20810f

080029ac <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	4b3d      	ldr	r3, [pc, #244]	; (8002abc <ETH_SetDMAConfig+0x110>)
 80029c6:	4013      	ands	r3, r2
 80029c8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	7b1b      	ldrb	r3, [r3, #12]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d102      	bne.n	80029d8 <ETH_SetDMAConfig+0x2c>
 80029d2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80029d6:	e000      	b.n	80029da <ETH_SetDMAConfig+0x2e>
 80029d8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	7b5b      	ldrb	r3, [r3, #13]
 80029de:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80029e0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	7f52      	ldrb	r2, [r2, #29]
 80029e6:	2a00      	cmp	r2, #0
 80029e8:	d102      	bne.n	80029f0 <ETH_SetDMAConfig+0x44>
 80029ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80029ee:	e000      	b.n	80029f2 <ETH_SetDMAConfig+0x46>
 80029f0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80029f2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	7b9b      	ldrb	r3, [r3, #14]
 80029f8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80029fa:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002a00:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	7f1b      	ldrb	r3, [r3, #28]
 8002a06:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002a08:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	7f9b      	ldrb	r3, [r3, #30]
 8002a0e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002a10:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002a16:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a1e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002a20:	4313      	orrs	r3, r2
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a30:	461a      	mov	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a42:	2001      	movs	r0, #1
 8002a44:	f7fe ff34 	bl	80018b0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a50:	461a      	mov	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	791b      	ldrb	r3, [r3, #4]
 8002a5a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002a60:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002a66:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002a6c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002a74:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002a76:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002a7e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002a84:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	6812      	ldr	r2, [r2, #0]
 8002a8a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a8e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a92:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002aa0:	2001      	movs	r0, #1
 8002aa2:	f7fe ff05 	bl	80018b0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aae:	461a      	mov	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6013      	str	r3, [r2, #0]
}
 8002ab4:	bf00      	nop
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	f8de3f23 	.word	0xf8de3f23

08002ac0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b0a6      	sub	sp, #152	; 0x98
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002aea:	2301      	movs	r3, #1
 8002aec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002af0:	2301      	movs	r3, #1
 8002af2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002af6:	2300      	movs	r3, #0
 8002af8:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002afc:	2300      	movs	r3, #0
 8002afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002b02:	2300      	movs	r3, #0
 8002b04:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002b06:	2300      	movs	r3, #0
 8002b08:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002b10:	2300      	movs	r3, #0
 8002b12:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002b16:	2300      	movs	r3, #0
 8002b18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002b22:	2300      	movs	r3, #0
 8002b24:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002b28:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b2c:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002b2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b32:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002b34:	2300      	movs	r3, #0
 8002b36:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002b3a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b3e:	4619      	mov	r1, r3
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f7ff fe7f 	bl	8002844 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002b46:	2301      	movs	r3, #1
 8002b48:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002b54:	2301      	movs	r3, #1
 8002b56:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002b62:	2300      	movs	r3, #0
 8002b64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002b72:	2301      	movs	r3, #1
 8002b74:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002b76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b7a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002b7c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b80:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002b82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b86:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002b92:	2300      	movs	r3, #0
 8002b94:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002b96:	f107 0308 	add.w	r3, r7, #8
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f7ff ff05 	bl	80029ac <ETH_SetDMAConfig>
}
 8002ba2:	bf00      	nop
 8002ba4:	3798      	adds	r7, #152	; 0x98
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
	...

08002bac <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b087      	sub	sp, #28
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	3305      	adds	r3, #5
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	021b      	lsls	r3, r3, #8
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	3204      	adds	r2, #4
 8002bc4:	7812      	ldrb	r2, [r2, #0]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002bca:	68ba      	ldr	r2, [r7, #8]
 8002bcc:	4b11      	ldr	r3, [pc, #68]	; (8002c14 <ETH_MACAddressConfig+0x68>)
 8002bce:	4413      	add	r3, r2
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	3303      	adds	r3, #3
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	061a      	lsls	r2, r3, #24
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	3302      	adds	r3, #2
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	041b      	lsls	r3, r3, #16
 8002be6:	431a      	orrs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3301      	adds	r3, #1
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	021b      	lsls	r3, r3, #8
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	7812      	ldrb	r2, [r2, #0]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002bfa:	68ba      	ldr	r2, [r7, #8]
 8002bfc:	4b06      	ldr	r3, [pc, #24]	; (8002c18 <ETH_MACAddressConfig+0x6c>)
 8002bfe:	4413      	add	r3, r2
 8002c00:	461a      	mov	r2, r3
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	6013      	str	r3, [r2, #0]
}
 8002c06:	bf00      	nop
 8002c08:	371c      	adds	r7, #28
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	40028040 	.word	0x40028040
 8002c18:	40028044 	.word	0x40028044

08002c1c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002c24:	2300      	movs	r3, #0
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	e03e      	b.n	8002ca8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68d9      	ldr	r1, [r3, #12]
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	4613      	mov	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	440b      	add	r3, r1
 8002c3a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	2200      	movs	r2, #0
 8002c46:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	2200      	movs	r2, #0
 8002c52:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002c54:	68b9      	ldr	r1, [r7, #8]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	3206      	adds	r2, #6
 8002c5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d80c      	bhi.n	8002c8c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68d9      	ldr	r1, [r3, #12]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	1c5a      	adds	r2, r3, #1
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4413      	add	r3, r2
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	440b      	add	r3, r1
 8002c84:	461a      	mov	r2, r3
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	60da      	str	r2, [r3, #12]
 8002c8a:	e004      	b.n	8002c96 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	461a      	mov	r2, r3
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2b03      	cmp	r3, #3
 8002cac:	d9bd      	bls.n	8002c2a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68da      	ldr	r2, [r3, #12]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cc0:	611a      	str	r2, [r3, #16]
}
 8002cc2:	bf00      	nop
 8002cc4:	3714      	adds	r7, #20
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b085      	sub	sp, #20
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	e048      	b.n	8002d6e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6919      	ldr	r1, [r3, #16]
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	4413      	add	r3, r2
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	440b      	add	r3, r1
 8002cec:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	2200      	movs	r2, #0
 8002d04:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002d18:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002d32:	68b9      	ldr	r1, [r7, #8]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	3212      	adds	r2, #18
 8002d3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d80c      	bhi.n	8002d5e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6919      	ldr	r1, [r3, #16]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	1c5a      	adds	r2, r3, #1
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	4413      	add	r3, r2
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	440b      	add	r3, r1
 8002d56:	461a      	mov	r2, r3
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	60da      	str	r2, [r3, #12]
 8002d5c:	e004      	b.n	8002d68 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	461a      	mov	r2, r3
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	60fb      	str	r3, [r7, #12]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2b03      	cmp	r3, #3
 8002d72:	d9b3      	bls.n	8002cdc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	691a      	ldr	r2, [r3, #16]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d9e:	60da      	str	r2, [r3, #12]
}
 8002da0:	bf00      	nop
 8002da2:	3714      	adds	r7, #20
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b091      	sub	sp, #68	; 0x44
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	3318      	adds	r3, #24
 8002dbc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	637b      	str	r3, [r7, #52]	; 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002dd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dd6:	633b      	str	r3, [r7, #48]	; 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t           bd_count = 0;
 8002dde:	2300      	movs	r3, #0
 8002de0:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002dea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002dee:	d007      	beq.n	8002e00 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002df4:	3304      	adds	r3, #4
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002e00:	2302      	movs	r3, #2
 8002e02:	e111      	b.n	8003028 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8002e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e06:	3301      	adds	r3, #1
 8002e08:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e12:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	4b86      	ldr	r3, [pc, #536]	; (8003034 <ETH_Prepare_Tx_Descriptors+0x288>)
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e1e:	6852      	ldr	r2, [r2, #4]
 8002e20:	431a      	orrs	r2, r3
 8002e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e24:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d008      	beq.n	8002e44 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e42:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0320 	and.w	r3, r3, #32
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d008      	beq.n	8002e62 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	431a      	orrs	r2, r3
 8002e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e60:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0304 	and.w	r3, r3, #4
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d005      	beq.n	8002e7a <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e78:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e84:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002e86:	e082      	b.n	8002f8e <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e92:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d006      	beq.n	8002ea8 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	e005      	b.n	8002eb4 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb2:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ebc:	2b03      	cmp	r3, #3
 8002ebe:	d902      	bls.n	8002ec6 <ETH_Prepare_Tx_Descriptors+0x11a>
 8002ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ec2:	3b04      	subs	r3, #4
 8002ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ece:	633b      	str	r3, [r7, #48]	; 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ed8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002edc:	d007      	beq.n	8002eee <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ee2:	3304      	adds	r3, #4
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d029      	beq.n	8002f42 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8002eee:	6a3b      	ldr	r3, [r7, #32]
 8002ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002efa:	633b      	str	r3, [r7, #48]	; 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002efc:	2300      	movs	r3, #0
 8002efe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f00:	e019      	b.n	8002f36 <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8002f02:	f3bf 8f5f 	dmb	sy
}
 8002f06:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f12:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f16:	3301      	adds	r3, #1
 8002f18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f1c:	2b03      	cmp	r3, #3
 8002f1e:	d902      	bls.n	8002f26 <ETH_Prepare_Tx_Descriptors+0x17a>
 8002f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f22:	3b04      	subs	r3, #4
 8002f24:	63fb      	str	r3, [r7, #60]	; 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f2e:	633b      	str	r3, [r7, #48]	; 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f32:	3301      	adds	r3, #1
 8002f34:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d3e1      	bcc.n	8002f02 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8002f3e:	2302      	movs	r3, #2
 8002f40:	e072      	b.n	8003028 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4c:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8002f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f50:	3301      	adds	r3, #1
 8002f52:	637b      	str	r3, [r7, #52]	; 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f62:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	4b32      	ldr	r3, [pc, #200]	; (8003034 <ETH_Prepare_Tx_Descriptors+0x288>)
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f6e:	6852      	ldr	r2, [r2, #4]
 8002f70:	431a      	orrs	r2, r3
 8002f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f74:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f78:	3301      	adds	r3, #1
 8002f7a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8002f7c:	f3bf 8f5f 	dmb	sy
}
 8002f80:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8c:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f47f af78 	bne.w	8002e88 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d006      	beq.n	8002fac <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	e005      	b.n	8002fb8 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb6:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc2:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	6a3a      	ldr	r2, [r7, #32]
 8002fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fcc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8002fce:	f3bf 8f5f 	dmb	sy
}
 8002fd2:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fde:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fe4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fe8:	3304      	adds	r3, #4
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ff4:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ff6:	f3ef 8310 	mrs	r3, PRIMASK
 8002ffa:	613b      	str	r3, [r7, #16]
  return(result);
 8002ffc:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8002ffe:	61fb      	str	r3, [r7, #28]
 8003000:	2301      	movs	r3, #1
 8003002:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	f383 8810 	msr	PRIMASK, r3
}
 800300a:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003012:	4413      	add	r3, r2
 8003014:	1c5a      	adds	r2, r3, #1
 8003016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003018:	629a      	str	r2, [r3, #40]	; 0x28
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	f383 8810 	msr	PRIMASK, r3
}
 8003024:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3744      	adds	r7, #68	; 0x44
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	ffffe000 	.word	0xffffe000

08003038 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003038:	b480      	push	{r7}
 800303a:	b089      	sub	sp, #36	; 0x24
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003042:	2300      	movs	r3, #0
 8003044:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003046:	2300      	movs	r3, #0
 8003048:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800304a:	2300      	movs	r3, #0
 800304c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800304e:	2300      	movs	r3, #0
 8003050:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003052:	2300      	movs	r3, #0
 8003054:	61fb      	str	r3, [r7, #28]
 8003056:	e175      	b.n	8003344 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003058:	2201      	movs	r2, #1
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	4013      	ands	r3, r2
 800306a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	429a      	cmp	r2, r3
 8003072:	f040 8164 	bne.w	800333e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f003 0303 	and.w	r3, r3, #3
 800307e:	2b01      	cmp	r3, #1
 8003080:	d005      	beq.n	800308e <HAL_GPIO_Init+0x56>
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d130      	bne.n	80030f0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	2203      	movs	r2, #3
 800309a:	fa02 f303 	lsl.w	r3, r2, r3
 800309e:	43db      	mvns	r3, r3
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	4013      	ands	r3, r2
 80030a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	68da      	ldr	r2, [r3, #12]
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030c4:	2201      	movs	r2, #1
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	43db      	mvns	r3, r3
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	4013      	ands	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	091b      	lsrs	r3, r3, #4
 80030da:	f003 0201 	and.w	r2, r3, #1
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f003 0303 	and.w	r3, r3, #3
 80030f8:	2b03      	cmp	r3, #3
 80030fa:	d017      	beq.n	800312c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	2203      	movs	r2, #3
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	43db      	mvns	r3, r3
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	4013      	ands	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	4313      	orrs	r3, r2
 8003124:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f003 0303 	and.w	r3, r3, #3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d123      	bne.n	8003180 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	08da      	lsrs	r2, r3, #3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	3208      	adds	r2, #8
 8003140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	f003 0307 	and.w	r3, r3, #7
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	220f      	movs	r2, #15
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	43db      	mvns	r3, r3
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	4013      	ands	r3, r2
 800315a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	691a      	ldr	r2, [r3, #16]
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	f003 0307 	and.w	r3, r3, #7
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	4313      	orrs	r3, r2
 8003170:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	08da      	lsrs	r2, r3, #3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	3208      	adds	r2, #8
 800317a:	69b9      	ldr	r1, [r7, #24]
 800317c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	2203      	movs	r2, #3
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	43db      	mvns	r3, r3
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	4013      	ands	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f003 0203 	and.w	r2, r3, #3
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f000 80be 	beq.w	800333e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031c2:	4b66      	ldr	r3, [pc, #408]	; (800335c <HAL_GPIO_Init+0x324>)
 80031c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c6:	4a65      	ldr	r2, [pc, #404]	; (800335c <HAL_GPIO_Init+0x324>)
 80031c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031cc:	6453      	str	r3, [r2, #68]	; 0x44
 80031ce:	4b63      	ldr	r3, [pc, #396]	; (800335c <HAL_GPIO_Init+0x324>)
 80031d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80031da:	4a61      	ldr	r2, [pc, #388]	; (8003360 <HAL_GPIO_Init+0x328>)
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	089b      	lsrs	r3, r3, #2
 80031e0:	3302      	adds	r3, #2
 80031e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	f003 0303 	and.w	r3, r3, #3
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	220f      	movs	r2, #15
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	43db      	mvns	r3, r3
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	4013      	ands	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a58      	ldr	r2, [pc, #352]	; (8003364 <HAL_GPIO_Init+0x32c>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d037      	beq.n	8003276 <HAL_GPIO_Init+0x23e>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a57      	ldr	r2, [pc, #348]	; (8003368 <HAL_GPIO_Init+0x330>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d031      	beq.n	8003272 <HAL_GPIO_Init+0x23a>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a56      	ldr	r2, [pc, #344]	; (800336c <HAL_GPIO_Init+0x334>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d02b      	beq.n	800326e <HAL_GPIO_Init+0x236>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a55      	ldr	r2, [pc, #340]	; (8003370 <HAL_GPIO_Init+0x338>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d025      	beq.n	800326a <HAL_GPIO_Init+0x232>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a54      	ldr	r2, [pc, #336]	; (8003374 <HAL_GPIO_Init+0x33c>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d01f      	beq.n	8003266 <HAL_GPIO_Init+0x22e>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a53      	ldr	r2, [pc, #332]	; (8003378 <HAL_GPIO_Init+0x340>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d019      	beq.n	8003262 <HAL_GPIO_Init+0x22a>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a52      	ldr	r2, [pc, #328]	; (800337c <HAL_GPIO_Init+0x344>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d013      	beq.n	800325e <HAL_GPIO_Init+0x226>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a51      	ldr	r2, [pc, #324]	; (8003380 <HAL_GPIO_Init+0x348>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d00d      	beq.n	800325a <HAL_GPIO_Init+0x222>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a50      	ldr	r2, [pc, #320]	; (8003384 <HAL_GPIO_Init+0x34c>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d007      	beq.n	8003256 <HAL_GPIO_Init+0x21e>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a4f      	ldr	r2, [pc, #316]	; (8003388 <HAL_GPIO_Init+0x350>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d101      	bne.n	8003252 <HAL_GPIO_Init+0x21a>
 800324e:	2309      	movs	r3, #9
 8003250:	e012      	b.n	8003278 <HAL_GPIO_Init+0x240>
 8003252:	230a      	movs	r3, #10
 8003254:	e010      	b.n	8003278 <HAL_GPIO_Init+0x240>
 8003256:	2308      	movs	r3, #8
 8003258:	e00e      	b.n	8003278 <HAL_GPIO_Init+0x240>
 800325a:	2307      	movs	r3, #7
 800325c:	e00c      	b.n	8003278 <HAL_GPIO_Init+0x240>
 800325e:	2306      	movs	r3, #6
 8003260:	e00a      	b.n	8003278 <HAL_GPIO_Init+0x240>
 8003262:	2305      	movs	r3, #5
 8003264:	e008      	b.n	8003278 <HAL_GPIO_Init+0x240>
 8003266:	2304      	movs	r3, #4
 8003268:	e006      	b.n	8003278 <HAL_GPIO_Init+0x240>
 800326a:	2303      	movs	r3, #3
 800326c:	e004      	b.n	8003278 <HAL_GPIO_Init+0x240>
 800326e:	2302      	movs	r3, #2
 8003270:	e002      	b.n	8003278 <HAL_GPIO_Init+0x240>
 8003272:	2301      	movs	r3, #1
 8003274:	e000      	b.n	8003278 <HAL_GPIO_Init+0x240>
 8003276:	2300      	movs	r3, #0
 8003278:	69fa      	ldr	r2, [r7, #28]
 800327a:	f002 0203 	and.w	r2, r2, #3
 800327e:	0092      	lsls	r2, r2, #2
 8003280:	4093      	lsls	r3, r2
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	4313      	orrs	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003288:	4935      	ldr	r1, [pc, #212]	; (8003360 <HAL_GPIO_Init+0x328>)
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	089b      	lsrs	r3, r3, #2
 800328e:	3302      	adds	r3, #2
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003296:	4b3d      	ldr	r3, [pc, #244]	; (800338c <HAL_GPIO_Init+0x354>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	43db      	mvns	r3, r3
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	4013      	ands	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d003      	beq.n	80032ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032ba:	4a34      	ldr	r2, [pc, #208]	; (800338c <HAL_GPIO_Init+0x354>)
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032c0:	4b32      	ldr	r3, [pc, #200]	; (800338c <HAL_GPIO_Init+0x354>)
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	43db      	mvns	r3, r3
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	4013      	ands	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d003      	beq.n	80032e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032e4:	4a29      	ldr	r2, [pc, #164]	; (800338c <HAL_GPIO_Init+0x354>)
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032ea:	4b28      	ldr	r3, [pc, #160]	; (800338c <HAL_GPIO_Init+0x354>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	43db      	mvns	r3, r3
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	4013      	ands	r3, r2
 80032f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d003      	beq.n	800330e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	4313      	orrs	r3, r2
 800330c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800330e:	4a1f      	ldr	r2, [pc, #124]	; (800338c <HAL_GPIO_Init+0x354>)
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003314:	4b1d      	ldr	r3, [pc, #116]	; (800338c <HAL_GPIO_Init+0x354>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	43db      	mvns	r3, r3
 800331e:	69ba      	ldr	r2, [r7, #24]
 8003320:	4013      	ands	r3, r2
 8003322:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d003      	beq.n	8003338 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	4313      	orrs	r3, r2
 8003336:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003338:	4a14      	ldr	r2, [pc, #80]	; (800338c <HAL_GPIO_Init+0x354>)
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	3301      	adds	r3, #1
 8003342:	61fb      	str	r3, [r7, #28]
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	2b0f      	cmp	r3, #15
 8003348:	f67f ae86 	bls.w	8003058 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800334c:	bf00      	nop
 800334e:	bf00      	nop
 8003350:	3724      	adds	r7, #36	; 0x24
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	40023800 	.word	0x40023800
 8003360:	40013800 	.word	0x40013800
 8003364:	40020000 	.word	0x40020000
 8003368:	40020400 	.word	0x40020400
 800336c:	40020800 	.word	0x40020800
 8003370:	40020c00 	.word	0x40020c00
 8003374:	40021000 	.word	0x40021000
 8003378:	40021400 	.word	0x40021400
 800337c:	40021800 	.word	0x40021800
 8003380:	40021c00 	.word	0x40021c00
 8003384:	40022000 	.word	0x40022000
 8003388:	40022400 	.word	0x40022400
 800338c:	40013c00 	.word	0x40013c00

08003390 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	460b      	mov	r3, r1
 800339a:	807b      	strh	r3, [r7, #2]
 800339c:	4613      	mov	r3, r2
 800339e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033a0:	787b      	ldrb	r3, [r7, #1]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033a6:	887a      	ldrh	r2, [r7, #2]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80033ac:	e003      	b.n	80033b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80033ae:	887b      	ldrh	r3, [r7, #2]
 80033b0:	041a      	lsls	r2, r3, #16
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	619a      	str	r2, [r3, #24]
}
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80033c2:	b480      	push	{r7}
 80033c4:	b085      	sub	sp, #20
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
 80033ca:	460b      	mov	r3, r1
 80033cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033d4:	887a      	ldrh	r2, [r7, #2]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	4013      	ands	r3, r2
 80033da:	041a      	lsls	r2, r3, #16
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	43d9      	mvns	r1, r3
 80033e0:	887b      	ldrh	r3, [r7, #2]
 80033e2:	400b      	ands	r3, r1
 80033e4:	431a      	orrs	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	619a      	str	r2, [r3, #24]
}
 80033ea:	bf00      	nop
 80033ec:	3714      	adds	r7, #20
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
	...

080033f8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80033fe:	2300      	movs	r3, #0
 8003400:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003402:	4b23      	ldr	r3, [pc, #140]	; (8003490 <HAL_PWREx_EnableOverDrive+0x98>)
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	4a22      	ldr	r2, [pc, #136]	; (8003490 <HAL_PWREx_EnableOverDrive+0x98>)
 8003408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800340c:	6413      	str	r3, [r2, #64]	; 0x40
 800340e:	4b20      	ldr	r3, [pc, #128]	; (8003490 <HAL_PWREx_EnableOverDrive+0x98>)
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003416:	603b      	str	r3, [r7, #0]
 8003418:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800341a:	4b1e      	ldr	r3, [pc, #120]	; (8003494 <HAL_PWREx_EnableOverDrive+0x9c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a1d      	ldr	r2, [pc, #116]	; (8003494 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003424:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003426:	f7fe fa37 	bl	8001898 <HAL_GetTick>
 800342a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800342c:	e009      	b.n	8003442 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800342e:	f7fe fa33 	bl	8001898 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800343c:	d901      	bls.n	8003442 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e022      	b.n	8003488 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003442:	4b14      	ldr	r3, [pc, #80]	; (8003494 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800344a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800344e:	d1ee      	bne.n	800342e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003450:	4b10      	ldr	r3, [pc, #64]	; (8003494 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a0f      	ldr	r2, [pc, #60]	; (8003494 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003456:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800345a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800345c:	f7fe fa1c 	bl	8001898 <HAL_GetTick>
 8003460:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003462:	e009      	b.n	8003478 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003464:	f7fe fa18 	bl	8001898 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003472:	d901      	bls.n	8003478 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e007      	b.n	8003488 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003478:	4b06      	ldr	r3, [pc, #24]	; (8003494 <HAL_PWREx_EnableOverDrive+0x9c>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003480:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003484:	d1ee      	bne.n	8003464 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3708      	adds	r7, #8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40023800 	.word	0x40023800
 8003494:	40007000 	.word	0x40007000

08003498 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80034a0:	2300      	movs	r3, #0
 80034a2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e29b      	b.n	80039e6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f000 8087 	beq.w	80035ca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034bc:	4b96      	ldr	r3, [pc, #600]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f003 030c 	and.w	r3, r3, #12
 80034c4:	2b04      	cmp	r3, #4
 80034c6:	d00c      	beq.n	80034e2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034c8:	4b93      	ldr	r3, [pc, #588]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f003 030c 	and.w	r3, r3, #12
 80034d0:	2b08      	cmp	r3, #8
 80034d2:	d112      	bne.n	80034fa <HAL_RCC_OscConfig+0x62>
 80034d4:	4b90      	ldr	r3, [pc, #576]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034e0:	d10b      	bne.n	80034fa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034e2:	4b8d      	ldr	r3, [pc, #564]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d06c      	beq.n	80035c8 <HAL_RCC_OscConfig+0x130>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d168      	bne.n	80035c8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e275      	b.n	80039e6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003502:	d106      	bne.n	8003512 <HAL_RCC_OscConfig+0x7a>
 8003504:	4b84      	ldr	r3, [pc, #528]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a83      	ldr	r2, [pc, #524]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 800350a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800350e:	6013      	str	r3, [r2, #0]
 8003510:	e02e      	b.n	8003570 <HAL_RCC_OscConfig+0xd8>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10c      	bne.n	8003534 <HAL_RCC_OscConfig+0x9c>
 800351a:	4b7f      	ldr	r3, [pc, #508]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a7e      	ldr	r2, [pc, #504]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 8003520:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003524:	6013      	str	r3, [r2, #0]
 8003526:	4b7c      	ldr	r3, [pc, #496]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a7b      	ldr	r2, [pc, #492]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 800352c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003530:	6013      	str	r3, [r2, #0]
 8003532:	e01d      	b.n	8003570 <HAL_RCC_OscConfig+0xd8>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800353c:	d10c      	bne.n	8003558 <HAL_RCC_OscConfig+0xc0>
 800353e:	4b76      	ldr	r3, [pc, #472]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a75      	ldr	r2, [pc, #468]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 8003544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003548:	6013      	str	r3, [r2, #0]
 800354a:	4b73      	ldr	r3, [pc, #460]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a72      	ldr	r2, [pc, #456]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 8003550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003554:	6013      	str	r3, [r2, #0]
 8003556:	e00b      	b.n	8003570 <HAL_RCC_OscConfig+0xd8>
 8003558:	4b6f      	ldr	r3, [pc, #444]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a6e      	ldr	r2, [pc, #440]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 800355e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003562:	6013      	str	r3, [r2, #0]
 8003564:	4b6c      	ldr	r3, [pc, #432]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a6b      	ldr	r2, [pc, #428]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 800356a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800356e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d013      	beq.n	80035a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003578:	f7fe f98e 	bl	8001898 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003580:	f7fe f98a 	bl	8001898 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b64      	cmp	r3, #100	; 0x64
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e229      	b.n	80039e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003592:	4b61      	ldr	r3, [pc, #388]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d0f0      	beq.n	8003580 <HAL_RCC_OscConfig+0xe8>
 800359e:	e014      	b.n	80035ca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a0:	f7fe f97a 	bl	8001898 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035a8:	f7fe f976 	bl	8001898 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b64      	cmp	r3, #100	; 0x64
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e215      	b.n	80039e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ba:	4b57      	ldr	r3, [pc, #348]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1f0      	bne.n	80035a8 <HAL_RCC_OscConfig+0x110>
 80035c6:	e000      	b.n	80035ca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d069      	beq.n	80036aa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035d6:	4b50      	ldr	r3, [pc, #320]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f003 030c 	and.w	r3, r3, #12
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00b      	beq.n	80035fa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035e2:	4b4d      	ldr	r3, [pc, #308]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 030c 	and.w	r3, r3, #12
 80035ea:	2b08      	cmp	r3, #8
 80035ec:	d11c      	bne.n	8003628 <HAL_RCC_OscConfig+0x190>
 80035ee:	4b4a      	ldr	r3, [pc, #296]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d116      	bne.n	8003628 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035fa:	4b47      	ldr	r3, [pc, #284]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d005      	beq.n	8003612 <HAL_RCC_OscConfig+0x17a>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d001      	beq.n	8003612 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e1e9      	b.n	80039e6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003612:	4b41      	ldr	r3, [pc, #260]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	493d      	ldr	r1, [pc, #244]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 8003622:	4313      	orrs	r3, r2
 8003624:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003626:	e040      	b.n	80036aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d023      	beq.n	8003678 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003630:	4b39      	ldr	r3, [pc, #228]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a38      	ldr	r2, [pc, #224]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 8003636:	f043 0301 	orr.w	r3, r3, #1
 800363a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800363c:	f7fe f92c 	bl	8001898 <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003644:	f7fe f928 	bl	8001898 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b02      	cmp	r3, #2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e1c7      	b.n	80039e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003656:	4b30      	ldr	r3, [pc, #192]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0f0      	beq.n	8003644 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003662:	4b2d      	ldr	r3, [pc, #180]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	4929      	ldr	r1, [pc, #164]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 8003672:	4313      	orrs	r3, r2
 8003674:	600b      	str	r3, [r1, #0]
 8003676:	e018      	b.n	80036aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003678:	4b27      	ldr	r3, [pc, #156]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a26      	ldr	r2, [pc, #152]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 800367e:	f023 0301 	bic.w	r3, r3, #1
 8003682:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003684:	f7fe f908 	bl	8001898 <HAL_GetTick>
 8003688:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800368a:	e008      	b.n	800369e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800368c:	f7fe f904 	bl	8001898 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e1a3      	b.n	80039e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800369e:	4b1e      	ldr	r3, [pc, #120]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1f0      	bne.n	800368c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0308 	and.w	r3, r3, #8
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d038      	beq.n	8003728 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d019      	beq.n	80036f2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036be:	4b16      	ldr	r3, [pc, #88]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 80036c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036c2:	4a15      	ldr	r2, [pc, #84]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 80036c4:	f043 0301 	orr.w	r3, r3, #1
 80036c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ca:	f7fe f8e5 	bl	8001898 <HAL_GetTick>
 80036ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036d0:	e008      	b.n	80036e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036d2:	f7fe f8e1 	bl	8001898 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d901      	bls.n	80036e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e180      	b.n	80039e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036e4:	4b0c      	ldr	r3, [pc, #48]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 80036e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d0f0      	beq.n	80036d2 <HAL_RCC_OscConfig+0x23a>
 80036f0:	e01a      	b.n	8003728 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036f2:	4b09      	ldr	r3, [pc, #36]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 80036f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036f6:	4a08      	ldr	r2, [pc, #32]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 80036f8:	f023 0301 	bic.w	r3, r3, #1
 80036fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036fe:	f7fe f8cb 	bl	8001898 <HAL_GetTick>
 8003702:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003704:	e00a      	b.n	800371c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003706:	f7fe f8c7 	bl	8001898 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d903      	bls.n	800371c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e166      	b.n	80039e6 <HAL_RCC_OscConfig+0x54e>
 8003718:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800371c:	4b92      	ldr	r3, [pc, #584]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 800371e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1ee      	bne.n	8003706 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0304 	and.w	r3, r3, #4
 8003730:	2b00      	cmp	r3, #0
 8003732:	f000 80a4 	beq.w	800387e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003736:	4b8c      	ldr	r3, [pc, #560]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10d      	bne.n	800375e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003742:	4b89      	ldr	r3, [pc, #548]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	4a88      	ldr	r2, [pc, #544]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 8003748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800374c:	6413      	str	r3, [r2, #64]	; 0x40
 800374e:	4b86      	ldr	r3, [pc, #536]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 8003750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003756:	60bb      	str	r3, [r7, #8]
 8003758:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800375a:	2301      	movs	r3, #1
 800375c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800375e:	4b83      	ldr	r3, [pc, #524]	; (800396c <HAL_RCC_OscConfig+0x4d4>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003766:	2b00      	cmp	r3, #0
 8003768:	d118      	bne.n	800379c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800376a:	4b80      	ldr	r3, [pc, #512]	; (800396c <HAL_RCC_OscConfig+0x4d4>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a7f      	ldr	r2, [pc, #508]	; (800396c <HAL_RCC_OscConfig+0x4d4>)
 8003770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003774:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003776:	f7fe f88f 	bl	8001898 <HAL_GetTick>
 800377a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800377c:	e008      	b.n	8003790 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800377e:	f7fe f88b 	bl	8001898 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b64      	cmp	r3, #100	; 0x64
 800378a:	d901      	bls.n	8003790 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e12a      	b.n	80039e6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003790:	4b76      	ldr	r3, [pc, #472]	; (800396c <HAL_RCC_OscConfig+0x4d4>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003798:	2b00      	cmp	r3, #0
 800379a:	d0f0      	beq.n	800377e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d106      	bne.n	80037b2 <HAL_RCC_OscConfig+0x31a>
 80037a4:	4b70      	ldr	r3, [pc, #448]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 80037a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a8:	4a6f      	ldr	r2, [pc, #444]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 80037aa:	f043 0301 	orr.w	r3, r3, #1
 80037ae:	6713      	str	r3, [r2, #112]	; 0x70
 80037b0:	e02d      	b.n	800380e <HAL_RCC_OscConfig+0x376>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10c      	bne.n	80037d4 <HAL_RCC_OscConfig+0x33c>
 80037ba:	4b6b      	ldr	r3, [pc, #428]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 80037bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037be:	4a6a      	ldr	r2, [pc, #424]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 80037c0:	f023 0301 	bic.w	r3, r3, #1
 80037c4:	6713      	str	r3, [r2, #112]	; 0x70
 80037c6:	4b68      	ldr	r3, [pc, #416]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 80037c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ca:	4a67      	ldr	r2, [pc, #412]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 80037cc:	f023 0304 	bic.w	r3, r3, #4
 80037d0:	6713      	str	r3, [r2, #112]	; 0x70
 80037d2:	e01c      	b.n	800380e <HAL_RCC_OscConfig+0x376>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	2b05      	cmp	r3, #5
 80037da:	d10c      	bne.n	80037f6 <HAL_RCC_OscConfig+0x35e>
 80037dc:	4b62      	ldr	r3, [pc, #392]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 80037de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e0:	4a61      	ldr	r2, [pc, #388]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 80037e2:	f043 0304 	orr.w	r3, r3, #4
 80037e6:	6713      	str	r3, [r2, #112]	; 0x70
 80037e8:	4b5f      	ldr	r3, [pc, #380]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 80037ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ec:	4a5e      	ldr	r2, [pc, #376]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 80037ee:	f043 0301 	orr.w	r3, r3, #1
 80037f2:	6713      	str	r3, [r2, #112]	; 0x70
 80037f4:	e00b      	b.n	800380e <HAL_RCC_OscConfig+0x376>
 80037f6:	4b5c      	ldr	r3, [pc, #368]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 80037f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fa:	4a5b      	ldr	r2, [pc, #364]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 80037fc:	f023 0301 	bic.w	r3, r3, #1
 8003800:	6713      	str	r3, [r2, #112]	; 0x70
 8003802:	4b59      	ldr	r3, [pc, #356]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 8003804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003806:	4a58      	ldr	r2, [pc, #352]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 8003808:	f023 0304 	bic.w	r3, r3, #4
 800380c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d015      	beq.n	8003842 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003816:	f7fe f83f 	bl	8001898 <HAL_GetTick>
 800381a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800381c:	e00a      	b.n	8003834 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800381e:	f7fe f83b 	bl	8001898 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	f241 3288 	movw	r2, #5000	; 0x1388
 800382c:	4293      	cmp	r3, r2
 800382e:	d901      	bls.n	8003834 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e0d8      	b.n	80039e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003834:	4b4c      	ldr	r3, [pc, #304]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 8003836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d0ee      	beq.n	800381e <HAL_RCC_OscConfig+0x386>
 8003840:	e014      	b.n	800386c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003842:	f7fe f829 	bl	8001898 <HAL_GetTick>
 8003846:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003848:	e00a      	b.n	8003860 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800384a:	f7fe f825 	bl	8001898 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	f241 3288 	movw	r2, #5000	; 0x1388
 8003858:	4293      	cmp	r3, r2
 800385a:	d901      	bls.n	8003860 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e0c2      	b.n	80039e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003860:	4b41      	ldr	r3, [pc, #260]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 8003862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1ee      	bne.n	800384a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800386c:	7dfb      	ldrb	r3, [r7, #23]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d105      	bne.n	800387e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003872:	4b3d      	ldr	r3, [pc, #244]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 8003874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003876:	4a3c      	ldr	r2, [pc, #240]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 8003878:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800387c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	2b00      	cmp	r3, #0
 8003884:	f000 80ae 	beq.w	80039e4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003888:	4b37      	ldr	r3, [pc, #220]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f003 030c 	and.w	r3, r3, #12
 8003890:	2b08      	cmp	r3, #8
 8003892:	d06d      	beq.n	8003970 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	2b02      	cmp	r3, #2
 800389a:	d14b      	bne.n	8003934 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800389c:	4b32      	ldr	r3, [pc, #200]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a31      	ldr	r2, [pc, #196]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 80038a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a8:	f7fd fff6 	bl	8001898 <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038b0:	f7fd fff2 	bl	8001898 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e091      	b.n	80039e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038c2:	4b29      	ldr	r3, [pc, #164]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1f0      	bne.n	80038b0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	69da      	ldr	r2, [r3, #28]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038dc:	019b      	lsls	r3, r3, #6
 80038de:	431a      	orrs	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e4:	085b      	lsrs	r3, r3, #1
 80038e6:	3b01      	subs	r3, #1
 80038e8:	041b      	lsls	r3, r3, #16
 80038ea:	431a      	orrs	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f0:	061b      	lsls	r3, r3, #24
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f8:	071b      	lsls	r3, r3, #28
 80038fa:	491b      	ldr	r1, [pc, #108]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003900:	4b19      	ldr	r3, [pc, #100]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a18      	ldr	r2, [pc, #96]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 8003906:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800390a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800390c:	f7fd ffc4 	bl	8001898 <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003914:	f7fd ffc0 	bl	8001898 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e05f      	b.n	80039e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003926:	4b10      	ldr	r3, [pc, #64]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d0f0      	beq.n	8003914 <HAL_RCC_OscConfig+0x47c>
 8003932:	e057      	b.n	80039e4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003934:	4b0c      	ldr	r3, [pc, #48]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a0b      	ldr	r2, [pc, #44]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 800393a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800393e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003940:	f7fd ffaa 	bl	8001898 <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003948:	f7fd ffa6 	bl	8001898 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e045      	b.n	80039e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800395a:	4b03      	ldr	r3, [pc, #12]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1f0      	bne.n	8003948 <HAL_RCC_OscConfig+0x4b0>
 8003966:	e03d      	b.n	80039e4 <HAL_RCC_OscConfig+0x54c>
 8003968:	40023800 	.word	0x40023800
 800396c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003970:	4b1f      	ldr	r3, [pc, #124]	; (80039f0 <HAL_RCC_OscConfig+0x558>)
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d030      	beq.n	80039e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003988:	429a      	cmp	r2, r3
 800398a:	d129      	bne.n	80039e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003996:	429a      	cmp	r2, r3
 8003998:	d122      	bne.n	80039e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039a0:	4013      	ands	r3, r2
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039a6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d119      	bne.n	80039e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b6:	085b      	lsrs	r3, r3, #1
 80039b8:	3b01      	subs	r3, #1
 80039ba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039bc:	429a      	cmp	r2, r3
 80039be:	d10f      	bne.n	80039e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d107      	bne.n	80039e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039da:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039dc:	429a      	cmp	r2, r3
 80039de:	d001      	beq.n	80039e4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e000      	b.n	80039e6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3718      	adds	r7, #24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	40023800 	.word	0x40023800

080039f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80039fe:	2300      	movs	r3, #0
 8003a00:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d101      	bne.n	8003a0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e0d0      	b.n	8003bae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a0c:	4b6a      	ldr	r3, [pc, #424]	; (8003bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 030f 	and.w	r3, r3, #15
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d910      	bls.n	8003a3c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a1a:	4b67      	ldr	r3, [pc, #412]	; (8003bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f023 020f 	bic.w	r2, r3, #15
 8003a22:	4965      	ldr	r1, [pc, #404]	; (8003bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a2a:	4b63      	ldr	r3, [pc, #396]	; (8003bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 030f 	and.w	r3, r3, #15
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d001      	beq.n	8003a3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e0b8      	b.n	8003bae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d020      	beq.n	8003a8a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0304 	and.w	r3, r3, #4
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d005      	beq.n	8003a60 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a54:	4b59      	ldr	r3, [pc, #356]	; (8003bbc <HAL_RCC_ClockConfig+0x1c8>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	4a58      	ldr	r2, [pc, #352]	; (8003bbc <HAL_RCC_ClockConfig+0x1c8>)
 8003a5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a5e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0308 	and.w	r3, r3, #8
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d005      	beq.n	8003a78 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a6c:	4b53      	ldr	r3, [pc, #332]	; (8003bbc <HAL_RCC_ClockConfig+0x1c8>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	4a52      	ldr	r2, [pc, #328]	; (8003bbc <HAL_RCC_ClockConfig+0x1c8>)
 8003a72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a76:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a78:	4b50      	ldr	r3, [pc, #320]	; (8003bbc <HAL_RCC_ClockConfig+0x1c8>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	494d      	ldr	r1, [pc, #308]	; (8003bbc <HAL_RCC_ClockConfig+0x1c8>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d040      	beq.n	8003b18 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d107      	bne.n	8003aae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a9e:	4b47      	ldr	r3, [pc, #284]	; (8003bbc <HAL_RCC_ClockConfig+0x1c8>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d115      	bne.n	8003ad6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e07f      	b.n	8003bae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d107      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ab6:	4b41      	ldr	r3, [pc, #260]	; (8003bbc <HAL_RCC_ClockConfig+0x1c8>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d109      	bne.n	8003ad6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e073      	b.n	8003bae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ac6:	4b3d      	ldr	r3, [pc, #244]	; (8003bbc <HAL_RCC_ClockConfig+0x1c8>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e06b      	b.n	8003bae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ad6:	4b39      	ldr	r3, [pc, #228]	; (8003bbc <HAL_RCC_ClockConfig+0x1c8>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f023 0203 	bic.w	r2, r3, #3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	4936      	ldr	r1, [pc, #216]	; (8003bbc <HAL_RCC_ClockConfig+0x1c8>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ae8:	f7fd fed6 	bl	8001898 <HAL_GetTick>
 8003aec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aee:	e00a      	b.n	8003b06 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003af0:	f7fd fed2 	bl	8001898 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e053      	b.n	8003bae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b06:	4b2d      	ldr	r3, [pc, #180]	; (8003bbc <HAL_RCC_ClockConfig+0x1c8>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f003 020c 	and.w	r2, r3, #12
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d1eb      	bne.n	8003af0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b18:	4b27      	ldr	r3, [pc, #156]	; (8003bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 030f 	and.w	r3, r3, #15
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d210      	bcs.n	8003b48 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b26:	4b24      	ldr	r3, [pc, #144]	; (8003bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f023 020f 	bic.w	r2, r3, #15
 8003b2e:	4922      	ldr	r1, [pc, #136]	; (8003bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b36:	4b20      	ldr	r3, [pc, #128]	; (8003bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 030f 	and.w	r3, r3, #15
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d001      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e032      	b.n	8003bae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d008      	beq.n	8003b66 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b54:	4b19      	ldr	r3, [pc, #100]	; (8003bbc <HAL_RCC_ClockConfig+0x1c8>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	4916      	ldr	r1, [pc, #88]	; (8003bbc <HAL_RCC_ClockConfig+0x1c8>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0308 	and.w	r3, r3, #8
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d009      	beq.n	8003b86 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b72:	4b12      	ldr	r3, [pc, #72]	; (8003bbc <HAL_RCC_ClockConfig+0x1c8>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	00db      	lsls	r3, r3, #3
 8003b80:	490e      	ldr	r1, [pc, #56]	; (8003bbc <HAL_RCC_ClockConfig+0x1c8>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b86:	f000 f821 	bl	8003bcc <HAL_RCC_GetSysClockFreq>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	4b0b      	ldr	r3, [pc, #44]	; (8003bbc <HAL_RCC_ClockConfig+0x1c8>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	091b      	lsrs	r3, r3, #4
 8003b92:	f003 030f 	and.w	r3, r3, #15
 8003b96:	490a      	ldr	r1, [pc, #40]	; (8003bc0 <HAL_RCC_ClockConfig+0x1cc>)
 8003b98:	5ccb      	ldrb	r3, [r1, r3]
 8003b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b9e:	4a09      	ldr	r2, [pc, #36]	; (8003bc4 <HAL_RCC_ClockConfig+0x1d0>)
 8003ba0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ba2:	4b09      	ldr	r3, [pc, #36]	; (8003bc8 <HAL_RCC_ClockConfig+0x1d4>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7fd fe32 	bl	8001810 <HAL_InitTick>

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	40023c00 	.word	0x40023c00
 8003bbc:	40023800 	.word	0x40023800
 8003bc0:	080163e4 	.word	0x080163e4
 8003bc4:	20000000 	.word	0x20000000
 8003bc8:	20000004 	.word	0x20000004

08003bcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bd0:	b094      	sub	sp, #80	; 0x50
 8003bd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	647b      	str	r3, [r7, #68]	; 0x44
 8003bd8:	2300      	movs	r3, #0
 8003bda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bdc:	2300      	movs	r3, #0
 8003bde:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003be0:	2300      	movs	r3, #0
 8003be2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003be4:	4b79      	ldr	r3, [pc, #484]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x200>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f003 030c 	and.w	r3, r3, #12
 8003bec:	2b08      	cmp	r3, #8
 8003bee:	d00d      	beq.n	8003c0c <HAL_RCC_GetSysClockFreq+0x40>
 8003bf0:	2b08      	cmp	r3, #8
 8003bf2:	f200 80e1 	bhi.w	8003db8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d002      	beq.n	8003c00 <HAL_RCC_GetSysClockFreq+0x34>
 8003bfa:	2b04      	cmp	r3, #4
 8003bfc:	d003      	beq.n	8003c06 <HAL_RCC_GetSysClockFreq+0x3a>
 8003bfe:	e0db      	b.n	8003db8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c00:	4b73      	ldr	r3, [pc, #460]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c02:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c04:	e0db      	b.n	8003dbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c06:	4b72      	ldr	r3, [pc, #456]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c0a:	e0d8      	b.n	8003dbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c0c:	4b6f      	ldr	r3, [pc, #444]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x200>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c14:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003c16:	4b6d      	ldr	r3, [pc, #436]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x200>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d063      	beq.n	8003cea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c22:	4b6a      	ldr	r3, [pc, #424]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x200>)
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	099b      	lsrs	r3, r3, #6
 8003c28:	2200      	movs	r2, #0
 8003c2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c2c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c34:	633b      	str	r3, [r7, #48]	; 0x30
 8003c36:	2300      	movs	r3, #0
 8003c38:	637b      	str	r3, [r7, #52]	; 0x34
 8003c3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c3e:	4622      	mov	r2, r4
 8003c40:	462b      	mov	r3, r5
 8003c42:	f04f 0000 	mov.w	r0, #0
 8003c46:	f04f 0100 	mov.w	r1, #0
 8003c4a:	0159      	lsls	r1, r3, #5
 8003c4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c50:	0150      	lsls	r0, r2, #5
 8003c52:	4602      	mov	r2, r0
 8003c54:	460b      	mov	r3, r1
 8003c56:	4621      	mov	r1, r4
 8003c58:	1a51      	subs	r1, r2, r1
 8003c5a:	6139      	str	r1, [r7, #16]
 8003c5c:	4629      	mov	r1, r5
 8003c5e:	eb63 0301 	sbc.w	r3, r3, r1
 8003c62:	617b      	str	r3, [r7, #20]
 8003c64:	f04f 0200 	mov.w	r2, #0
 8003c68:	f04f 0300 	mov.w	r3, #0
 8003c6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c70:	4659      	mov	r1, fp
 8003c72:	018b      	lsls	r3, r1, #6
 8003c74:	4651      	mov	r1, sl
 8003c76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c7a:	4651      	mov	r1, sl
 8003c7c:	018a      	lsls	r2, r1, #6
 8003c7e:	4651      	mov	r1, sl
 8003c80:	ebb2 0801 	subs.w	r8, r2, r1
 8003c84:	4659      	mov	r1, fp
 8003c86:	eb63 0901 	sbc.w	r9, r3, r1
 8003c8a:	f04f 0200 	mov.w	r2, #0
 8003c8e:	f04f 0300 	mov.w	r3, #0
 8003c92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c9e:	4690      	mov	r8, r2
 8003ca0:	4699      	mov	r9, r3
 8003ca2:	4623      	mov	r3, r4
 8003ca4:	eb18 0303 	adds.w	r3, r8, r3
 8003ca8:	60bb      	str	r3, [r7, #8]
 8003caa:	462b      	mov	r3, r5
 8003cac:	eb49 0303 	adc.w	r3, r9, r3
 8003cb0:	60fb      	str	r3, [r7, #12]
 8003cb2:	f04f 0200 	mov.w	r2, #0
 8003cb6:	f04f 0300 	mov.w	r3, #0
 8003cba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003cbe:	4629      	mov	r1, r5
 8003cc0:	028b      	lsls	r3, r1, #10
 8003cc2:	4621      	mov	r1, r4
 8003cc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cc8:	4621      	mov	r1, r4
 8003cca:	028a      	lsls	r2, r1, #10
 8003ccc:	4610      	mov	r0, r2
 8003cce:	4619      	mov	r1, r3
 8003cd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cd8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003cdc:	f7fc fcbc 	bl	8000658 <__aeabi_uldivmod>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ce8:	e058      	b.n	8003d9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cea:	4b38      	ldr	r3, [pc, #224]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x200>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	099b      	lsrs	r3, r3, #6
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	4611      	mov	r1, r2
 8003cf6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cfa:	623b      	str	r3, [r7, #32]
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	627b      	str	r3, [r7, #36]	; 0x24
 8003d00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d04:	4642      	mov	r2, r8
 8003d06:	464b      	mov	r3, r9
 8003d08:	f04f 0000 	mov.w	r0, #0
 8003d0c:	f04f 0100 	mov.w	r1, #0
 8003d10:	0159      	lsls	r1, r3, #5
 8003d12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d16:	0150      	lsls	r0, r2, #5
 8003d18:	4602      	mov	r2, r0
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	4641      	mov	r1, r8
 8003d1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d22:	4649      	mov	r1, r9
 8003d24:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d28:	f04f 0200 	mov.w	r2, #0
 8003d2c:	f04f 0300 	mov.w	r3, #0
 8003d30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d3c:	ebb2 040a 	subs.w	r4, r2, sl
 8003d40:	eb63 050b 	sbc.w	r5, r3, fp
 8003d44:	f04f 0200 	mov.w	r2, #0
 8003d48:	f04f 0300 	mov.w	r3, #0
 8003d4c:	00eb      	lsls	r3, r5, #3
 8003d4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d52:	00e2      	lsls	r2, r4, #3
 8003d54:	4614      	mov	r4, r2
 8003d56:	461d      	mov	r5, r3
 8003d58:	4643      	mov	r3, r8
 8003d5a:	18e3      	adds	r3, r4, r3
 8003d5c:	603b      	str	r3, [r7, #0]
 8003d5e:	464b      	mov	r3, r9
 8003d60:	eb45 0303 	adc.w	r3, r5, r3
 8003d64:	607b      	str	r3, [r7, #4]
 8003d66:	f04f 0200 	mov.w	r2, #0
 8003d6a:	f04f 0300 	mov.w	r3, #0
 8003d6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d72:	4629      	mov	r1, r5
 8003d74:	028b      	lsls	r3, r1, #10
 8003d76:	4621      	mov	r1, r4
 8003d78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d7c:	4621      	mov	r1, r4
 8003d7e:	028a      	lsls	r2, r1, #10
 8003d80:	4610      	mov	r0, r2
 8003d82:	4619      	mov	r1, r3
 8003d84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d86:	2200      	movs	r2, #0
 8003d88:	61bb      	str	r3, [r7, #24]
 8003d8a:	61fa      	str	r2, [r7, #28]
 8003d8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d90:	f7fc fc62 	bl	8000658 <__aeabi_uldivmod>
 8003d94:	4602      	mov	r2, r0
 8003d96:	460b      	mov	r3, r1
 8003d98:	4613      	mov	r3, r2
 8003d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003d9c:	4b0b      	ldr	r3, [pc, #44]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x200>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	0c1b      	lsrs	r3, r3, #16
 8003da2:	f003 0303 	and.w	r3, r3, #3
 8003da6:	3301      	adds	r3, #1
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003dac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003dae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003db6:	e002      	b.n	8003dbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003db8:	4b05      	ldr	r3, [pc, #20]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003dba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003dbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3750      	adds	r7, #80	; 0x50
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dca:	bf00      	nop
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	00f42400 	.word	0x00f42400

08003dd4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dd8:	4b03      	ldr	r3, [pc, #12]	; (8003de8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dda:	681b      	ldr	r3, [r3, #0]
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	20000000 	.word	0x20000000

08003dec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003df0:	f7ff fff0 	bl	8003dd4 <HAL_RCC_GetHCLKFreq>
 8003df4:	4602      	mov	r2, r0
 8003df6:	4b05      	ldr	r3, [pc, #20]	; (8003e0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	0a9b      	lsrs	r3, r3, #10
 8003dfc:	f003 0307 	and.w	r3, r3, #7
 8003e00:	4903      	ldr	r1, [pc, #12]	; (8003e10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e02:	5ccb      	ldrb	r3, [r1, r3]
 8003e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	080163f4 	.word	0x080163f4

08003e14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e18:	f7ff ffdc 	bl	8003dd4 <HAL_RCC_GetHCLKFreq>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	4b05      	ldr	r3, [pc, #20]	; (8003e34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	0b5b      	lsrs	r3, r3, #13
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	4903      	ldr	r1, [pc, #12]	; (8003e38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e2a:	5ccb      	ldrb	r3, [r1, r3]
 8003e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	40023800 	.word	0x40023800
 8003e38:	080163f4 	.word	0x080163f4

08003e3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b088      	sub	sp, #32
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003e44:	2300      	movs	r3, #0
 8003e46:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003e50:	2300      	movs	r3, #0
 8003e52:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003e54:	2300      	movs	r3, #0
 8003e56:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0301 	and.w	r3, r3, #1
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d012      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e64:	4b69      	ldr	r3, [pc, #420]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	4a68      	ldr	r2, [pc, #416]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e6a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003e6e:	6093      	str	r3, [r2, #8]
 8003e70:	4b66      	ldr	r3, [pc, #408]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e72:	689a      	ldr	r2, [r3, #8]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e78:	4964      	ldr	r1, [pc, #400]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003e86:	2301      	movs	r3, #1
 8003e88:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d017      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e96:	4b5d      	ldr	r3, [pc, #372]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea4:	4959      	ldr	r1, [pc, #356]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003eb4:	d101      	bne.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d017      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ed2:	4b4e      	ldr	r3, [pc, #312]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ed4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ed8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee0:	494a      	ldr	r1, [pc, #296]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ef0:	d101      	bne.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003efe:	2301      	movs	r3, #1
 8003f00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0320 	and.w	r3, r3, #32
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f000 808b 	beq.w	8004036 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f20:	4b3a      	ldr	r3, [pc, #232]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f24:	4a39      	ldr	r2, [pc, #228]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f2a:	6413      	str	r3, [r2, #64]	; 0x40
 8003f2c:	4b37      	ldr	r3, [pc, #220]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f34:	60bb      	str	r3, [r7, #8]
 8003f36:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003f38:	4b35      	ldr	r3, [pc, #212]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a34      	ldr	r2, [pc, #208]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f44:	f7fd fca8 	bl	8001898 <HAL_GetTick>
 8003f48:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f4a:	e008      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f4c:	f7fd fca4 	bl	8001898 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b64      	cmp	r3, #100	; 0x64
 8003f58:	d901      	bls.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e38f      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f5e:	4b2c      	ldr	r3, [pc, #176]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d0f0      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f6a:	4b28      	ldr	r3, [pc, #160]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f72:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d035      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d02e      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f88:	4b20      	ldr	r3, [pc, #128]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f90:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f92:	4b1e      	ldr	r3, [pc, #120]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f96:	4a1d      	ldr	r2, [pc, #116]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f9c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f9e:	4b1b      	ldr	r3, [pc, #108]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa2:	4a1a      	ldr	r2, [pc, #104]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fa8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003faa:	4a18      	ldr	r2, [pc, #96]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003fb0:	4b16      	ldr	r3, [pc, #88]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d114      	bne.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fbc:	f7fd fc6c 	bl	8001898 <HAL_GetTick>
 8003fc0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fc2:	e00a      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fc4:	f7fd fc68 	bl	8001898 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d901      	bls.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e351      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fda:	4b0c      	ldr	r3, [pc, #48]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d0ee      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ff2:	d111      	bne.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003ff4:	4b05      	ldr	r3, [pc, #20]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004000:	4b04      	ldr	r3, [pc, #16]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004002:	400b      	ands	r3, r1
 8004004:	4901      	ldr	r1, [pc, #4]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004006:	4313      	orrs	r3, r2
 8004008:	608b      	str	r3, [r1, #8]
 800400a:	e00b      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800400c:	40023800 	.word	0x40023800
 8004010:	40007000 	.word	0x40007000
 8004014:	0ffffcff 	.word	0x0ffffcff
 8004018:	4bac      	ldr	r3, [pc, #688]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	4aab      	ldr	r2, [pc, #684]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800401e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004022:	6093      	str	r3, [r2, #8]
 8004024:	4ba9      	ldr	r3, [pc, #676]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004026:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004030:	49a6      	ldr	r1, [pc, #664]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004032:	4313      	orrs	r3, r2
 8004034:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0310 	and.w	r3, r3, #16
 800403e:	2b00      	cmp	r3, #0
 8004040:	d010      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004042:	4ba2      	ldr	r3, [pc, #648]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004044:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004048:	4aa0      	ldr	r2, [pc, #640]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800404a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800404e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004052:	4b9e      	ldr	r3, [pc, #632]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004054:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405c:	499b      	ldr	r1, [pc, #620]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800405e:	4313      	orrs	r3, r2
 8004060:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00a      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004070:	4b96      	ldr	r3, [pc, #600]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004076:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800407e:	4993      	ldr	r1, [pc, #588]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004080:	4313      	orrs	r3, r2
 8004082:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00a      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004092:	4b8e      	ldr	r3, [pc, #568]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004098:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040a0:	498a      	ldr	r1, [pc, #552]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00a      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040b4:	4b85      	ldr	r3, [pc, #532]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040c2:	4982      	ldr	r1, [pc, #520]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00a      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040d6:	4b7d      	ldr	r3, [pc, #500]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e4:	4979      	ldr	r1, [pc, #484]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00a      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040f8:	4b74      	ldr	r3, [pc, #464]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040fe:	f023 0203 	bic.w	r2, r3, #3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004106:	4971      	ldr	r1, [pc, #452]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004108:	4313      	orrs	r3, r2
 800410a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00a      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800411a:	4b6c      	ldr	r3, [pc, #432]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800411c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004120:	f023 020c 	bic.w	r2, r3, #12
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004128:	4968      	ldr	r1, [pc, #416]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800412a:	4313      	orrs	r3, r2
 800412c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00a      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800413c:	4b63      	ldr	r3, [pc, #396]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800413e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004142:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800414a:	4960      	ldr	r1, [pc, #384]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800414c:	4313      	orrs	r3, r2
 800414e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00a      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800415e:	4b5b      	ldr	r3, [pc, #364]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004164:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800416c:	4957      	ldr	r1, [pc, #348]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800416e:	4313      	orrs	r3, r2
 8004170:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00a      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004180:	4b52      	ldr	r3, [pc, #328]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004186:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800418e:	494f      	ldr	r1, [pc, #316]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004190:	4313      	orrs	r3, r2
 8004192:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00a      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80041a2:	4b4a      	ldr	r3, [pc, #296]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b0:	4946      	ldr	r1, [pc, #280]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00a      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80041c4:	4b41      	ldr	r3, [pc, #260]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d2:	493e      	ldr	r1, [pc, #248]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00a      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80041e6:	4b39      	ldr	r3, [pc, #228]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041f4:	4935      	ldr	r1, [pc, #212]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00a      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004208:	4b30      	ldr	r3, [pc, #192]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800420a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800420e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004216:	492d      	ldr	r1, [pc, #180]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004218:	4313      	orrs	r3, r2
 800421a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d011      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800422a:	4b28      	ldr	r3, [pc, #160]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800422c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004230:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004238:	4924      	ldr	r1, [pc, #144]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800423a:	4313      	orrs	r3, r2
 800423c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004244:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004248:	d101      	bne.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800424a:	2301      	movs	r3, #1
 800424c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0308 	and.w	r3, r3, #8
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800425a:	2301      	movs	r3, #1
 800425c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00a      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800426a:	4b18      	ldr	r3, [pc, #96]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800426c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004270:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004278:	4914      	ldr	r1, [pc, #80]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800427a:	4313      	orrs	r3, r2
 800427c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00b      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800428c:	4b0f      	ldr	r3, [pc, #60]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800428e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004292:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800429c:	490b      	ldr	r1, [pc, #44]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00f      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80042b0:	4b06      	ldr	r3, [pc, #24]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042c0:	4902      	ldr	r1, [pc, #8]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80042c8:	e002      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80042ca:	bf00      	nop
 80042cc:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00b      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80042dc:	4b8a      	ldr	r3, [pc, #552]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042e2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ec:	4986      	ldr	r1, [pc, #536]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00b      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004300:	4b81      	ldr	r3, [pc, #516]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004302:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004306:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004310:	497d      	ldr	r1, [pc, #500]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004312:	4313      	orrs	r3, r2
 8004314:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d006      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004326:	2b00      	cmp	r3, #0
 8004328:	f000 80d6 	beq.w	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800432c:	4b76      	ldr	r3, [pc, #472]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a75      	ldr	r2, [pc, #468]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004332:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004336:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004338:	f7fd faae 	bl	8001898 <HAL_GetTick>
 800433c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800433e:	e008      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004340:	f7fd faaa 	bl	8001898 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b64      	cmp	r3, #100	; 0x64
 800434c:	d901      	bls.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e195      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004352:	4b6d      	ldr	r3, [pc, #436]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1f0      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b00      	cmp	r3, #0
 8004368:	d021      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x572>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800436e:	2b00      	cmp	r3, #0
 8004370:	d11d      	bne.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004372:	4b65      	ldr	r3, [pc, #404]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004374:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004378:	0c1b      	lsrs	r3, r3, #16
 800437a:	f003 0303 	and.w	r3, r3, #3
 800437e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004380:	4b61      	ldr	r3, [pc, #388]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004382:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004386:	0e1b      	lsrs	r3, r3, #24
 8004388:	f003 030f 	and.w	r3, r3, #15
 800438c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	019a      	lsls	r2, r3, #6
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	041b      	lsls	r3, r3, #16
 8004398:	431a      	orrs	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	061b      	lsls	r3, r3, #24
 800439e:	431a      	orrs	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	071b      	lsls	r3, r3, #28
 80043a6:	4958      	ldr	r1, [pc, #352]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d004      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043c2:	d00a      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d02e      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043d8:	d129      	bne.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80043da:	4b4b      	ldr	r3, [pc, #300]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043e0:	0c1b      	lsrs	r3, r3, #16
 80043e2:	f003 0303 	and.w	r3, r3, #3
 80043e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80043e8:	4b47      	ldr	r3, [pc, #284]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043ee:	0f1b      	lsrs	r3, r3, #28
 80043f0:	f003 0307 	and.w	r3, r3, #7
 80043f4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	019a      	lsls	r2, r3, #6
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	041b      	lsls	r3, r3, #16
 8004400:	431a      	orrs	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	061b      	lsls	r3, r3, #24
 8004408:	431a      	orrs	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	071b      	lsls	r3, r3, #28
 800440e:	493e      	ldr	r1, [pc, #248]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004410:	4313      	orrs	r3, r2
 8004412:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004416:	4b3c      	ldr	r3, [pc, #240]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004418:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800441c:	f023 021f 	bic.w	r2, r3, #31
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004424:	3b01      	subs	r3, #1
 8004426:	4938      	ldr	r1, [pc, #224]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004428:	4313      	orrs	r3, r2
 800442a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d01d      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800443a:	4b33      	ldr	r3, [pc, #204]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800443c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004440:	0e1b      	lsrs	r3, r3, #24
 8004442:	f003 030f 	and.w	r3, r3, #15
 8004446:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004448:	4b2f      	ldr	r3, [pc, #188]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800444a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800444e:	0f1b      	lsrs	r3, r3, #28
 8004450:	f003 0307 	and.w	r3, r3, #7
 8004454:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	019a      	lsls	r2, r3, #6
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	041b      	lsls	r3, r3, #16
 8004462:	431a      	orrs	r2, r3
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	061b      	lsls	r3, r3, #24
 8004468:	431a      	orrs	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	071b      	lsls	r3, r3, #28
 800446e:	4926      	ldr	r1, [pc, #152]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004470:	4313      	orrs	r3, r2
 8004472:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d011      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	019a      	lsls	r2, r3, #6
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	041b      	lsls	r3, r3, #16
 800448e:	431a      	orrs	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	061b      	lsls	r3, r3, #24
 8004496:	431a      	orrs	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	071b      	lsls	r3, r3, #28
 800449e:	491a      	ldr	r1, [pc, #104]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80044a6:	4b18      	ldr	r3, [pc, #96]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a17      	ldr	r2, [pc, #92]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044b2:	f7fd f9f1 	bl	8001898 <HAL_GetTick>
 80044b6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044b8:	e008      	b.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80044ba:	f7fd f9ed 	bl	8001898 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b64      	cmp	r3, #100	; 0x64
 80044c6:	d901      	bls.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e0d8      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044cc:	4b0e      	ldr	r3, [pc, #56]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d0f0      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	f040 80ce 	bne.w	800467c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80044e0:	4b09      	ldr	r3, [pc, #36]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a08      	ldr	r2, [pc, #32]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044ec:	f7fd f9d4 	bl	8001898 <HAL_GetTick>
 80044f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80044f2:	e00b      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80044f4:	f7fd f9d0 	bl	8001898 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b64      	cmp	r3, #100	; 0x64
 8004500:	d904      	bls.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e0bb      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004506:	bf00      	nop
 8004508:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800450c:	4b5e      	ldr	r3, [pc, #376]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004514:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004518:	d0ec      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d003      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800452a:	2b00      	cmp	r3, #0
 800452c:	d009      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004536:	2b00      	cmp	r3, #0
 8004538:	d02e      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453e:	2b00      	cmp	r3, #0
 8004540:	d12a      	bne.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004542:	4b51      	ldr	r3, [pc, #324]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004548:	0c1b      	lsrs	r3, r3, #16
 800454a:	f003 0303 	and.w	r3, r3, #3
 800454e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004550:	4b4d      	ldr	r3, [pc, #308]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004556:	0f1b      	lsrs	r3, r3, #28
 8004558:	f003 0307 	and.w	r3, r3, #7
 800455c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	019a      	lsls	r2, r3, #6
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	041b      	lsls	r3, r3, #16
 8004568:	431a      	orrs	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	061b      	lsls	r3, r3, #24
 8004570:	431a      	orrs	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	071b      	lsls	r3, r3, #28
 8004576:	4944      	ldr	r1, [pc, #272]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004578:	4313      	orrs	r3, r2
 800457a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800457e:	4b42      	ldr	r3, [pc, #264]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004580:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004584:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458c:	3b01      	subs	r3, #1
 800458e:	021b      	lsls	r3, r3, #8
 8004590:	493d      	ldr	r1, [pc, #244]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004592:	4313      	orrs	r3, r2
 8004594:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d022      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045ac:	d11d      	bne.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80045ae:	4b36      	ldr	r3, [pc, #216]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b4:	0e1b      	lsrs	r3, r3, #24
 80045b6:	f003 030f 	and.w	r3, r3, #15
 80045ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80045bc:	4b32      	ldr	r3, [pc, #200]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c2:	0f1b      	lsrs	r3, r3, #28
 80045c4:	f003 0307 	and.w	r3, r3, #7
 80045c8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	019a      	lsls	r2, r3, #6
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	041b      	lsls	r3, r3, #16
 80045d6:	431a      	orrs	r2, r3
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	061b      	lsls	r3, r3, #24
 80045dc:	431a      	orrs	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	071b      	lsls	r3, r3, #28
 80045e2:	4929      	ldr	r1, [pc, #164]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0308 	and.w	r3, r3, #8
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d028      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80045f6:	4b24      	ldr	r3, [pc, #144]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fc:	0e1b      	lsrs	r3, r3, #24
 80045fe:	f003 030f 	and.w	r3, r3, #15
 8004602:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004604:	4b20      	ldr	r3, [pc, #128]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800460a:	0c1b      	lsrs	r3, r3, #16
 800460c:	f003 0303 	and.w	r3, r3, #3
 8004610:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	019a      	lsls	r2, r3, #6
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	041b      	lsls	r3, r3, #16
 800461c:	431a      	orrs	r2, r3
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	061b      	lsls	r3, r3, #24
 8004622:	431a      	orrs	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	69db      	ldr	r3, [r3, #28]
 8004628:	071b      	lsls	r3, r3, #28
 800462a:	4917      	ldr	r1, [pc, #92]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800462c:	4313      	orrs	r3, r2
 800462e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004632:	4b15      	ldr	r3, [pc, #84]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004634:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004638:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004640:	4911      	ldr	r1, [pc, #68]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004642:	4313      	orrs	r3, r2
 8004644:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004648:	4b0f      	ldr	r3, [pc, #60]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a0e      	ldr	r2, [pc, #56]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800464e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004652:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004654:	f7fd f920 	bl	8001898 <HAL_GetTick>
 8004658:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800465a:	e008      	b.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800465c:	f7fd f91c 	bl	8001898 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b64      	cmp	r3, #100	; 0x64
 8004668:	d901      	bls.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e007      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800466e:	4b06      	ldr	r3, [pc, #24]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004676:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800467a:	d1ef      	bne.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3720      	adds	r7, #32
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	40023800 	.word	0x40023800

0800468c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e049      	b.n	8004732 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d106      	bne.n	80046b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f7fc fd5c 	bl	8001170 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2202      	movs	r2, #2
 80046bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	3304      	adds	r3, #4
 80046c8:	4619      	mov	r1, r3
 80046ca:	4610      	mov	r0, r2
 80046cc:	f000 fd18 	bl	8005100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3708      	adds	r7, #8
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
	...

0800473c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b01      	cmp	r3, #1
 800474e:	d001      	beq.n	8004754 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e054      	b.n	80047fe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2202      	movs	r2, #2
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68da      	ldr	r2, [r3, #12]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f042 0201 	orr.w	r2, r2, #1
 800476a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a26      	ldr	r2, [pc, #152]	; (800480c <HAL_TIM_Base_Start_IT+0xd0>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d022      	beq.n	80047bc <HAL_TIM_Base_Start_IT+0x80>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800477e:	d01d      	beq.n	80047bc <HAL_TIM_Base_Start_IT+0x80>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a22      	ldr	r2, [pc, #136]	; (8004810 <HAL_TIM_Base_Start_IT+0xd4>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d018      	beq.n	80047bc <HAL_TIM_Base_Start_IT+0x80>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a21      	ldr	r2, [pc, #132]	; (8004814 <HAL_TIM_Base_Start_IT+0xd8>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d013      	beq.n	80047bc <HAL_TIM_Base_Start_IT+0x80>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a1f      	ldr	r2, [pc, #124]	; (8004818 <HAL_TIM_Base_Start_IT+0xdc>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d00e      	beq.n	80047bc <HAL_TIM_Base_Start_IT+0x80>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a1e      	ldr	r2, [pc, #120]	; (800481c <HAL_TIM_Base_Start_IT+0xe0>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d009      	beq.n	80047bc <HAL_TIM_Base_Start_IT+0x80>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a1c      	ldr	r2, [pc, #112]	; (8004820 <HAL_TIM_Base_Start_IT+0xe4>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d004      	beq.n	80047bc <HAL_TIM_Base_Start_IT+0x80>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a1b      	ldr	r2, [pc, #108]	; (8004824 <HAL_TIM_Base_Start_IT+0xe8>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d115      	bne.n	80047e8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	689a      	ldr	r2, [r3, #8]
 80047c2:	4b19      	ldr	r3, [pc, #100]	; (8004828 <HAL_TIM_Base_Start_IT+0xec>)
 80047c4:	4013      	ands	r3, r2
 80047c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2b06      	cmp	r3, #6
 80047cc:	d015      	beq.n	80047fa <HAL_TIM_Base_Start_IT+0xbe>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047d4:	d011      	beq.n	80047fa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f042 0201 	orr.w	r2, r2, #1
 80047e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047e6:	e008      	b.n	80047fa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f042 0201 	orr.w	r2, r2, #1
 80047f6:	601a      	str	r2, [r3, #0]
 80047f8:	e000      	b.n	80047fc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	40010000 	.word	0x40010000
 8004810:	40000400 	.word	0x40000400
 8004814:	40000800 	.word	0x40000800
 8004818:	40000c00 	.word	0x40000c00
 800481c:	40010400 	.word	0x40010400
 8004820:	40014000 	.word	0x40014000
 8004824:	40001800 	.word	0x40001800
 8004828:	00010007 	.word	0x00010007

0800482c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d101      	bne.n	800483e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e049      	b.n	80048d2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d106      	bne.n	8004858 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 f841 	bl	80048da <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2202      	movs	r2, #2
 800485c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	3304      	adds	r3, #4
 8004868:	4619      	mov	r1, r3
 800486a:	4610      	mov	r0, r2
 800486c:	f000 fc48 	bl	8005100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3708      	adds	r7, #8
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}

080048da <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80048da:	b480      	push	{r7}
 80048dc:	b083      	sub	sp, #12
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80048e2:	bf00      	nop
 80048e4:	370c      	adds	r7, #12
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
	...

080048f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d109      	bne.n	8004914 <HAL_TIM_PWM_Start+0x24>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b01      	cmp	r3, #1
 800490a:	bf14      	ite	ne
 800490c:	2301      	movne	r3, #1
 800490e:	2300      	moveq	r3, #0
 8004910:	b2db      	uxtb	r3, r3
 8004912:	e03c      	b.n	800498e <HAL_TIM_PWM_Start+0x9e>
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	2b04      	cmp	r3, #4
 8004918:	d109      	bne.n	800492e <HAL_TIM_PWM_Start+0x3e>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b01      	cmp	r3, #1
 8004924:	bf14      	ite	ne
 8004926:	2301      	movne	r3, #1
 8004928:	2300      	moveq	r3, #0
 800492a:	b2db      	uxtb	r3, r3
 800492c:	e02f      	b.n	800498e <HAL_TIM_PWM_Start+0x9e>
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	2b08      	cmp	r3, #8
 8004932:	d109      	bne.n	8004948 <HAL_TIM_PWM_Start+0x58>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800493a:	b2db      	uxtb	r3, r3
 800493c:	2b01      	cmp	r3, #1
 800493e:	bf14      	ite	ne
 8004940:	2301      	movne	r3, #1
 8004942:	2300      	moveq	r3, #0
 8004944:	b2db      	uxtb	r3, r3
 8004946:	e022      	b.n	800498e <HAL_TIM_PWM_Start+0x9e>
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	2b0c      	cmp	r3, #12
 800494c:	d109      	bne.n	8004962 <HAL_TIM_PWM_Start+0x72>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004954:	b2db      	uxtb	r3, r3
 8004956:	2b01      	cmp	r3, #1
 8004958:	bf14      	ite	ne
 800495a:	2301      	movne	r3, #1
 800495c:	2300      	moveq	r3, #0
 800495e:	b2db      	uxtb	r3, r3
 8004960:	e015      	b.n	800498e <HAL_TIM_PWM_Start+0x9e>
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	2b10      	cmp	r3, #16
 8004966:	d109      	bne.n	800497c <HAL_TIM_PWM_Start+0x8c>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800496e:	b2db      	uxtb	r3, r3
 8004970:	2b01      	cmp	r3, #1
 8004972:	bf14      	ite	ne
 8004974:	2301      	movne	r3, #1
 8004976:	2300      	moveq	r3, #0
 8004978:	b2db      	uxtb	r3, r3
 800497a:	e008      	b.n	800498e <HAL_TIM_PWM_Start+0x9e>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004982:	b2db      	uxtb	r3, r3
 8004984:	2b01      	cmp	r3, #1
 8004986:	bf14      	ite	ne
 8004988:	2301      	movne	r3, #1
 800498a:	2300      	moveq	r3, #0
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d001      	beq.n	8004996 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e092      	b.n	8004abc <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d104      	bne.n	80049a6 <HAL_TIM_PWM_Start+0xb6>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2202      	movs	r2, #2
 80049a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049a4:	e023      	b.n	80049ee <HAL_TIM_PWM_Start+0xfe>
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	2b04      	cmp	r3, #4
 80049aa:	d104      	bne.n	80049b6 <HAL_TIM_PWM_Start+0xc6>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2202      	movs	r2, #2
 80049b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049b4:	e01b      	b.n	80049ee <HAL_TIM_PWM_Start+0xfe>
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	2b08      	cmp	r3, #8
 80049ba:	d104      	bne.n	80049c6 <HAL_TIM_PWM_Start+0xd6>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2202      	movs	r2, #2
 80049c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049c4:	e013      	b.n	80049ee <HAL_TIM_PWM_Start+0xfe>
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b0c      	cmp	r3, #12
 80049ca:	d104      	bne.n	80049d6 <HAL_TIM_PWM_Start+0xe6>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2202      	movs	r2, #2
 80049d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049d4:	e00b      	b.n	80049ee <HAL_TIM_PWM_Start+0xfe>
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	2b10      	cmp	r3, #16
 80049da:	d104      	bne.n	80049e6 <HAL_TIM_PWM_Start+0xf6>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2202      	movs	r2, #2
 80049e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049e4:	e003      	b.n	80049ee <HAL_TIM_PWM_Start+0xfe>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2202      	movs	r2, #2
 80049ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2201      	movs	r2, #1
 80049f4:	6839      	ldr	r1, [r7, #0]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f000 ff26 	bl	8005848 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a30      	ldr	r2, [pc, #192]	; (8004ac4 <HAL_TIM_PWM_Start+0x1d4>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d004      	beq.n	8004a10 <HAL_TIM_PWM_Start+0x120>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a2f      	ldr	r2, [pc, #188]	; (8004ac8 <HAL_TIM_PWM_Start+0x1d8>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d101      	bne.n	8004a14 <HAL_TIM_PWM_Start+0x124>
 8004a10:	2301      	movs	r3, #1
 8004a12:	e000      	b.n	8004a16 <HAL_TIM_PWM_Start+0x126>
 8004a14:	2300      	movs	r3, #0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d007      	beq.n	8004a2a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a28:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a25      	ldr	r2, [pc, #148]	; (8004ac4 <HAL_TIM_PWM_Start+0x1d4>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d022      	beq.n	8004a7a <HAL_TIM_PWM_Start+0x18a>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a3c:	d01d      	beq.n	8004a7a <HAL_TIM_PWM_Start+0x18a>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a22      	ldr	r2, [pc, #136]	; (8004acc <HAL_TIM_PWM_Start+0x1dc>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d018      	beq.n	8004a7a <HAL_TIM_PWM_Start+0x18a>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a20      	ldr	r2, [pc, #128]	; (8004ad0 <HAL_TIM_PWM_Start+0x1e0>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d013      	beq.n	8004a7a <HAL_TIM_PWM_Start+0x18a>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a1f      	ldr	r2, [pc, #124]	; (8004ad4 <HAL_TIM_PWM_Start+0x1e4>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d00e      	beq.n	8004a7a <HAL_TIM_PWM_Start+0x18a>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a19      	ldr	r2, [pc, #100]	; (8004ac8 <HAL_TIM_PWM_Start+0x1d8>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d009      	beq.n	8004a7a <HAL_TIM_PWM_Start+0x18a>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a1b      	ldr	r2, [pc, #108]	; (8004ad8 <HAL_TIM_PWM_Start+0x1e8>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d004      	beq.n	8004a7a <HAL_TIM_PWM_Start+0x18a>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a19      	ldr	r2, [pc, #100]	; (8004adc <HAL_TIM_PWM_Start+0x1ec>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d115      	bne.n	8004aa6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	689a      	ldr	r2, [r3, #8]
 8004a80:	4b17      	ldr	r3, [pc, #92]	; (8004ae0 <HAL_TIM_PWM_Start+0x1f0>)
 8004a82:	4013      	ands	r3, r2
 8004a84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2b06      	cmp	r3, #6
 8004a8a:	d015      	beq.n	8004ab8 <HAL_TIM_PWM_Start+0x1c8>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a92:	d011      	beq.n	8004ab8 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f042 0201 	orr.w	r2, r2, #1
 8004aa2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aa4:	e008      	b.n	8004ab8 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f042 0201 	orr.w	r2, r2, #1
 8004ab4:	601a      	str	r2, [r3, #0]
 8004ab6:	e000      	b.n	8004aba <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ab8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3710      	adds	r7, #16
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	40010000 	.word	0x40010000
 8004ac8:	40010400 	.word	0x40010400
 8004acc:	40000400 	.word	0x40000400
 8004ad0:	40000800 	.word	0x40000800
 8004ad4:	40000c00 	.word	0x40000c00
 8004ad8:	40014000 	.word	0x40014000
 8004adc:	40001800 	.word	0x40001800
 8004ae0:	00010007 	.word	0x00010007

08004ae4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d020      	beq.n	8004b48 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f003 0302 	and.w	r3, r3, #2
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d01b      	beq.n	8004b48 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f06f 0202 	mvn.w	r2, #2
 8004b18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	f003 0303 	and.w	r3, r3, #3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 fac8 	bl	80050c4 <HAL_TIM_IC_CaptureCallback>
 8004b34:	e005      	b.n	8004b42 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 faba 	bl	80050b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 facb 	bl	80050d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	f003 0304 	and.w	r3, r3, #4
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d020      	beq.n	8004b94 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f003 0304 	and.w	r3, r3, #4
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d01b      	beq.n	8004b94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f06f 0204 	mvn.w	r2, #4
 8004b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2202      	movs	r2, #2
 8004b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 faa2 	bl	80050c4 <HAL_TIM_IC_CaptureCallback>
 8004b80:	e005      	b.n	8004b8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 fa94 	bl	80050b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 faa5 	bl	80050d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	f003 0308 	and.w	r3, r3, #8
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d020      	beq.n	8004be0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f003 0308 	and.w	r3, r3, #8
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d01b      	beq.n	8004be0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f06f 0208 	mvn.w	r2, #8
 8004bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2204      	movs	r2, #4
 8004bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	f003 0303 	and.w	r3, r3, #3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d003      	beq.n	8004bce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 fa7c 	bl	80050c4 <HAL_TIM_IC_CaptureCallback>
 8004bcc:	e005      	b.n	8004bda <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 fa6e 	bl	80050b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 fa7f 	bl	80050d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f003 0310 	and.w	r3, r3, #16
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d020      	beq.n	8004c2c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f003 0310 	and.w	r3, r3, #16
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d01b      	beq.n	8004c2c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f06f 0210 	mvn.w	r2, #16
 8004bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2208      	movs	r2, #8
 8004c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	69db      	ldr	r3, [r3, #28]
 8004c0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d003      	beq.n	8004c1a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 fa56 	bl	80050c4 <HAL_TIM_IC_CaptureCallback>
 8004c18:	e005      	b.n	8004c26 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 fa48 	bl	80050b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 fa59 	bl	80050d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00c      	beq.n	8004c50 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f003 0301 	and.w	r3, r3, #1
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d007      	beq.n	8004c50 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f06f 0201 	mvn.w	r2, #1
 8004c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f7fc f984 	bl	8000f58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d104      	bne.n	8004c64 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00c      	beq.n	8004c7e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d007      	beq.n	8004c7e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8004c76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 fea3 	bl	80059c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00c      	beq.n	8004ca2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d007      	beq.n	8004ca2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004c9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 fe9b 	bl	80059d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00c      	beq.n	8004cc6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d007      	beq.n	8004cc6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004cbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 fa13 	bl	80050ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	f003 0320 	and.w	r3, r3, #32
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00c      	beq.n	8004cea <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f003 0320 	and.w	r3, r3, #32
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d007      	beq.n	8004cea <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f06f 0220 	mvn.w	r2, #32
 8004ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 fe63 	bl	80059b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cea:	bf00      	nop
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
	...

08004cf4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b086      	sub	sp, #24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d00:	2300      	movs	r3, #0
 8004d02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d101      	bne.n	8004d12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d0e:	2302      	movs	r3, #2
 8004d10:	e0ff      	b.n	8004f12 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2201      	movs	r2, #1
 8004d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2b14      	cmp	r3, #20
 8004d1e:	f200 80f0 	bhi.w	8004f02 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004d22:	a201      	add	r2, pc, #4	; (adr r2, 8004d28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d28:	08004d7d 	.word	0x08004d7d
 8004d2c:	08004f03 	.word	0x08004f03
 8004d30:	08004f03 	.word	0x08004f03
 8004d34:	08004f03 	.word	0x08004f03
 8004d38:	08004dbd 	.word	0x08004dbd
 8004d3c:	08004f03 	.word	0x08004f03
 8004d40:	08004f03 	.word	0x08004f03
 8004d44:	08004f03 	.word	0x08004f03
 8004d48:	08004dff 	.word	0x08004dff
 8004d4c:	08004f03 	.word	0x08004f03
 8004d50:	08004f03 	.word	0x08004f03
 8004d54:	08004f03 	.word	0x08004f03
 8004d58:	08004e3f 	.word	0x08004e3f
 8004d5c:	08004f03 	.word	0x08004f03
 8004d60:	08004f03 	.word	0x08004f03
 8004d64:	08004f03 	.word	0x08004f03
 8004d68:	08004e81 	.word	0x08004e81
 8004d6c:	08004f03 	.word	0x08004f03
 8004d70:	08004f03 	.word	0x08004f03
 8004d74:	08004f03 	.word	0x08004f03
 8004d78:	08004ec1 	.word	0x08004ec1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68b9      	ldr	r1, [r7, #8]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f000 fa68 	bl	8005258 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	699a      	ldr	r2, [r3, #24]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f042 0208 	orr.w	r2, r2, #8
 8004d96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	699a      	ldr	r2, [r3, #24]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f022 0204 	bic.w	r2, r2, #4
 8004da6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	6999      	ldr	r1, [r3, #24]
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	691a      	ldr	r2, [r3, #16]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	430a      	orrs	r2, r1
 8004db8:	619a      	str	r2, [r3, #24]
      break;
 8004dba:	e0a5      	b.n	8004f08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68b9      	ldr	r1, [r7, #8]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f000 faba 	bl	800533c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	699a      	ldr	r2, [r3, #24]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	699a      	ldr	r2, [r3, #24]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004de6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	6999      	ldr	r1, [r3, #24]
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	021a      	lsls	r2, r3, #8
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	619a      	str	r2, [r3, #24]
      break;
 8004dfc:	e084      	b.n	8004f08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68b9      	ldr	r1, [r7, #8]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f000 fb11 	bl	800542c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	69da      	ldr	r2, [r3, #28]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f042 0208 	orr.w	r2, r2, #8
 8004e18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	69da      	ldr	r2, [r3, #28]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f022 0204 	bic.w	r2, r2, #4
 8004e28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	69d9      	ldr	r1, [r3, #28]
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	691a      	ldr	r2, [r3, #16]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	61da      	str	r2, [r3, #28]
      break;
 8004e3c:	e064      	b.n	8004f08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68b9      	ldr	r1, [r7, #8]
 8004e44:	4618      	mov	r0, r3
 8004e46:	f000 fb67 	bl	8005518 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	69da      	ldr	r2, [r3, #28]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	69da      	ldr	r2, [r3, #28]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	69d9      	ldr	r1, [r3, #28]
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	021a      	lsls	r2, r3, #8
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	61da      	str	r2, [r3, #28]
      break;
 8004e7e:	e043      	b.n	8004f08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68b9      	ldr	r1, [r7, #8]
 8004e86:	4618      	mov	r0, r3
 8004e88:	f000 fb9e 	bl	80055c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f042 0208 	orr.w	r2, r2, #8
 8004e9a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f022 0204 	bic.w	r2, r2, #4
 8004eaa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	691a      	ldr	r2, [r3, #16]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004ebe:	e023      	b.n	8004f08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68b9      	ldr	r1, [r7, #8]
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f000 fbd0 	bl	800566c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004eda:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	021a      	lsls	r2, r3, #8
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	430a      	orrs	r2, r1
 8004efe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004f00:	e002      	b.n	8004f08 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	75fb      	strb	r3, [r7, #23]
      break;
 8004f06:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f10:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3718      	adds	r7, #24
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop

08004f1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f26:	2300      	movs	r3, #0
 8004f28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d101      	bne.n	8004f38 <HAL_TIM_ConfigClockSource+0x1c>
 8004f34:	2302      	movs	r3, #2
 8004f36:	e0b4      	b.n	80050a2 <HAL_TIM_ConfigClockSource+0x186>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2202      	movs	r2, #2
 8004f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f50:	68ba      	ldr	r2, [r7, #8]
 8004f52:	4b56      	ldr	r3, [pc, #344]	; (80050ac <HAL_TIM_ConfigClockSource+0x190>)
 8004f54:	4013      	ands	r3, r2
 8004f56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68ba      	ldr	r2, [r7, #8]
 8004f66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f70:	d03e      	beq.n	8004ff0 <HAL_TIM_ConfigClockSource+0xd4>
 8004f72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f76:	f200 8087 	bhi.w	8005088 <HAL_TIM_ConfigClockSource+0x16c>
 8004f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f7e:	f000 8086 	beq.w	800508e <HAL_TIM_ConfigClockSource+0x172>
 8004f82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f86:	d87f      	bhi.n	8005088 <HAL_TIM_ConfigClockSource+0x16c>
 8004f88:	2b70      	cmp	r3, #112	; 0x70
 8004f8a:	d01a      	beq.n	8004fc2 <HAL_TIM_ConfigClockSource+0xa6>
 8004f8c:	2b70      	cmp	r3, #112	; 0x70
 8004f8e:	d87b      	bhi.n	8005088 <HAL_TIM_ConfigClockSource+0x16c>
 8004f90:	2b60      	cmp	r3, #96	; 0x60
 8004f92:	d050      	beq.n	8005036 <HAL_TIM_ConfigClockSource+0x11a>
 8004f94:	2b60      	cmp	r3, #96	; 0x60
 8004f96:	d877      	bhi.n	8005088 <HAL_TIM_ConfigClockSource+0x16c>
 8004f98:	2b50      	cmp	r3, #80	; 0x50
 8004f9a:	d03c      	beq.n	8005016 <HAL_TIM_ConfigClockSource+0xfa>
 8004f9c:	2b50      	cmp	r3, #80	; 0x50
 8004f9e:	d873      	bhi.n	8005088 <HAL_TIM_ConfigClockSource+0x16c>
 8004fa0:	2b40      	cmp	r3, #64	; 0x40
 8004fa2:	d058      	beq.n	8005056 <HAL_TIM_ConfigClockSource+0x13a>
 8004fa4:	2b40      	cmp	r3, #64	; 0x40
 8004fa6:	d86f      	bhi.n	8005088 <HAL_TIM_ConfigClockSource+0x16c>
 8004fa8:	2b30      	cmp	r3, #48	; 0x30
 8004faa:	d064      	beq.n	8005076 <HAL_TIM_ConfigClockSource+0x15a>
 8004fac:	2b30      	cmp	r3, #48	; 0x30
 8004fae:	d86b      	bhi.n	8005088 <HAL_TIM_ConfigClockSource+0x16c>
 8004fb0:	2b20      	cmp	r3, #32
 8004fb2:	d060      	beq.n	8005076 <HAL_TIM_ConfigClockSource+0x15a>
 8004fb4:	2b20      	cmp	r3, #32
 8004fb6:	d867      	bhi.n	8005088 <HAL_TIM_ConfigClockSource+0x16c>
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d05c      	beq.n	8005076 <HAL_TIM_ConfigClockSource+0x15a>
 8004fbc:	2b10      	cmp	r3, #16
 8004fbe:	d05a      	beq.n	8005076 <HAL_TIM_ConfigClockSource+0x15a>
 8004fc0:	e062      	b.n	8005088 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004fd2:	f000 fc19 	bl	8005808 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004fe4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68ba      	ldr	r2, [r7, #8]
 8004fec:	609a      	str	r2, [r3, #8]
      break;
 8004fee:	e04f      	b.n	8005090 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005000:	f000 fc02 	bl	8005808 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	689a      	ldr	r2, [r3, #8]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005012:	609a      	str	r2, [r3, #8]
      break;
 8005014:	e03c      	b.n	8005090 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005022:	461a      	mov	r2, r3
 8005024:	f000 fb76 	bl	8005714 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2150      	movs	r1, #80	; 0x50
 800502e:	4618      	mov	r0, r3
 8005030:	f000 fbcf 	bl	80057d2 <TIM_ITRx_SetConfig>
      break;
 8005034:	e02c      	b.n	8005090 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005042:	461a      	mov	r2, r3
 8005044:	f000 fb95 	bl	8005772 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2160      	movs	r1, #96	; 0x60
 800504e:	4618      	mov	r0, r3
 8005050:	f000 fbbf 	bl	80057d2 <TIM_ITRx_SetConfig>
      break;
 8005054:	e01c      	b.n	8005090 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005062:	461a      	mov	r2, r3
 8005064:	f000 fb56 	bl	8005714 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2140      	movs	r1, #64	; 0x40
 800506e:	4618      	mov	r0, r3
 8005070:	f000 fbaf 	bl	80057d2 <TIM_ITRx_SetConfig>
      break;
 8005074:	e00c      	b.n	8005090 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4619      	mov	r1, r3
 8005080:	4610      	mov	r0, r2
 8005082:	f000 fba6 	bl	80057d2 <TIM_ITRx_SetConfig>
      break;
 8005086:	e003      	b.n	8005090 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	73fb      	strb	r3, [r7, #15]
      break;
 800508c:	e000      	b.n	8005090 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800508e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3710      	adds	r7, #16
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	fffeff88 	.word	0xfffeff88

080050b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050b8:	bf00      	nop
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050cc:	bf00      	nop
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050f4:	bf00      	nop
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a46      	ldr	r2, [pc, #280]	; (800522c <TIM_Base_SetConfig+0x12c>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d013      	beq.n	8005140 <TIM_Base_SetConfig+0x40>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800511e:	d00f      	beq.n	8005140 <TIM_Base_SetConfig+0x40>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a43      	ldr	r2, [pc, #268]	; (8005230 <TIM_Base_SetConfig+0x130>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d00b      	beq.n	8005140 <TIM_Base_SetConfig+0x40>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a42      	ldr	r2, [pc, #264]	; (8005234 <TIM_Base_SetConfig+0x134>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d007      	beq.n	8005140 <TIM_Base_SetConfig+0x40>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a41      	ldr	r2, [pc, #260]	; (8005238 <TIM_Base_SetConfig+0x138>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d003      	beq.n	8005140 <TIM_Base_SetConfig+0x40>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a40      	ldr	r2, [pc, #256]	; (800523c <TIM_Base_SetConfig+0x13c>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d108      	bne.n	8005152 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005146:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	4313      	orrs	r3, r2
 8005150:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a35      	ldr	r2, [pc, #212]	; (800522c <TIM_Base_SetConfig+0x12c>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d02b      	beq.n	80051b2 <TIM_Base_SetConfig+0xb2>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005160:	d027      	beq.n	80051b2 <TIM_Base_SetConfig+0xb2>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a32      	ldr	r2, [pc, #200]	; (8005230 <TIM_Base_SetConfig+0x130>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d023      	beq.n	80051b2 <TIM_Base_SetConfig+0xb2>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a31      	ldr	r2, [pc, #196]	; (8005234 <TIM_Base_SetConfig+0x134>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d01f      	beq.n	80051b2 <TIM_Base_SetConfig+0xb2>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a30      	ldr	r2, [pc, #192]	; (8005238 <TIM_Base_SetConfig+0x138>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d01b      	beq.n	80051b2 <TIM_Base_SetConfig+0xb2>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a2f      	ldr	r2, [pc, #188]	; (800523c <TIM_Base_SetConfig+0x13c>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d017      	beq.n	80051b2 <TIM_Base_SetConfig+0xb2>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a2e      	ldr	r2, [pc, #184]	; (8005240 <TIM_Base_SetConfig+0x140>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d013      	beq.n	80051b2 <TIM_Base_SetConfig+0xb2>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a2d      	ldr	r2, [pc, #180]	; (8005244 <TIM_Base_SetConfig+0x144>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d00f      	beq.n	80051b2 <TIM_Base_SetConfig+0xb2>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a2c      	ldr	r2, [pc, #176]	; (8005248 <TIM_Base_SetConfig+0x148>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d00b      	beq.n	80051b2 <TIM_Base_SetConfig+0xb2>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a2b      	ldr	r2, [pc, #172]	; (800524c <TIM_Base_SetConfig+0x14c>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d007      	beq.n	80051b2 <TIM_Base_SetConfig+0xb2>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a2a      	ldr	r2, [pc, #168]	; (8005250 <TIM_Base_SetConfig+0x150>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d003      	beq.n	80051b2 <TIM_Base_SetConfig+0xb2>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a29      	ldr	r2, [pc, #164]	; (8005254 <TIM_Base_SetConfig+0x154>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d108      	bne.n	80051c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	689a      	ldr	r2, [r3, #8]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a10      	ldr	r2, [pc, #64]	; (800522c <TIM_Base_SetConfig+0x12c>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d003      	beq.n	80051f8 <TIM_Base_SetConfig+0xf8>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a12      	ldr	r2, [pc, #72]	; (800523c <TIM_Base_SetConfig+0x13c>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d103      	bne.n	8005200 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	691a      	ldr	r2, [r3, #16]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	2b01      	cmp	r3, #1
 8005210:	d105      	bne.n	800521e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	f023 0201 	bic.w	r2, r3, #1
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	611a      	str	r2, [r3, #16]
  }
}
 800521e:	bf00      	nop
 8005220:	3714      	adds	r7, #20
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	40010000 	.word	0x40010000
 8005230:	40000400 	.word	0x40000400
 8005234:	40000800 	.word	0x40000800
 8005238:	40000c00 	.word	0x40000c00
 800523c:	40010400 	.word	0x40010400
 8005240:	40014000 	.word	0x40014000
 8005244:	40014400 	.word	0x40014400
 8005248:	40014800 	.word	0x40014800
 800524c:	40001800 	.word	0x40001800
 8005250:	40001c00 	.word	0x40001c00
 8005254:	40002000 	.word	0x40002000

08005258 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005258:	b480      	push	{r7}
 800525a:	b087      	sub	sp, #28
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a1b      	ldr	r3, [r3, #32]
 800526c:	f023 0201 	bic.w	r2, r3, #1
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	4b2b      	ldr	r3, [pc, #172]	; (8005330 <TIM_OC1_SetConfig+0xd8>)
 8005284:	4013      	ands	r3, r2
 8005286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f023 0303 	bic.w	r3, r3, #3
 800528e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	4313      	orrs	r3, r2
 8005298:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	f023 0302 	bic.w	r3, r3, #2
 80052a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	697a      	ldr	r2, [r7, #20]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a21      	ldr	r2, [pc, #132]	; (8005334 <TIM_OC1_SetConfig+0xdc>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d003      	beq.n	80052bc <TIM_OC1_SetConfig+0x64>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a20      	ldr	r2, [pc, #128]	; (8005338 <TIM_OC1_SetConfig+0xe0>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d10c      	bne.n	80052d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	f023 0308 	bic.w	r3, r3, #8
 80052c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	f023 0304 	bic.w	r3, r3, #4
 80052d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a16      	ldr	r2, [pc, #88]	; (8005334 <TIM_OC1_SetConfig+0xdc>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d003      	beq.n	80052e6 <TIM_OC1_SetConfig+0x8e>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a15      	ldr	r2, [pc, #84]	; (8005338 <TIM_OC1_SetConfig+0xe0>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d111      	bne.n	800530a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	4313      	orrs	r3, r2
 8005308:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	685a      	ldr	r2, [r3, #4]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	697a      	ldr	r2, [r7, #20]
 8005322:	621a      	str	r2, [r3, #32]
}
 8005324:	bf00      	nop
 8005326:	371c      	adds	r7, #28
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr
 8005330:	fffeff8f 	.word	0xfffeff8f
 8005334:	40010000 	.word	0x40010000
 8005338:	40010400 	.word	0x40010400

0800533c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800533c:	b480      	push	{r7}
 800533e:	b087      	sub	sp, #28
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a1b      	ldr	r3, [r3, #32]
 800534a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a1b      	ldr	r3, [r3, #32]
 8005350:	f023 0210 	bic.w	r2, r3, #16
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	4b2e      	ldr	r3, [pc, #184]	; (8005420 <TIM_OC2_SetConfig+0xe4>)
 8005368:	4013      	ands	r3, r2
 800536a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005372:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	021b      	lsls	r3, r3, #8
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	4313      	orrs	r3, r2
 800537e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	f023 0320 	bic.w	r3, r3, #32
 8005386:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	011b      	lsls	r3, r3, #4
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	4313      	orrs	r3, r2
 8005392:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a23      	ldr	r2, [pc, #140]	; (8005424 <TIM_OC2_SetConfig+0xe8>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d003      	beq.n	80053a4 <TIM_OC2_SetConfig+0x68>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a22      	ldr	r2, [pc, #136]	; (8005428 <TIM_OC2_SetConfig+0xec>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d10d      	bne.n	80053c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	011b      	lsls	r3, r3, #4
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a18      	ldr	r2, [pc, #96]	; (8005424 <TIM_OC2_SetConfig+0xe8>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d003      	beq.n	80053d0 <TIM_OC2_SetConfig+0x94>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a17      	ldr	r2, [pc, #92]	; (8005428 <TIM_OC2_SetConfig+0xec>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d113      	bne.n	80053f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	695b      	ldr	r3, [r3, #20]
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	693a      	ldr	r2, [r7, #16]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	693a      	ldr	r2, [r7, #16]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	693a      	ldr	r2, [r7, #16]
 80053fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	685a      	ldr	r2, [r3, #4]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	621a      	str	r2, [r3, #32]
}
 8005412:	bf00      	nop
 8005414:	371c      	adds	r7, #28
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	feff8fff 	.word	0xfeff8fff
 8005424:	40010000 	.word	0x40010000
 8005428:	40010400 	.word	0x40010400

0800542c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800542c:	b480      	push	{r7}
 800542e:	b087      	sub	sp, #28
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a1b      	ldr	r3, [r3, #32]
 800543a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a1b      	ldr	r3, [r3, #32]
 8005440:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	69db      	ldr	r3, [r3, #28]
 8005452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	4b2d      	ldr	r3, [pc, #180]	; (800550c <TIM_OC3_SetConfig+0xe0>)
 8005458:	4013      	ands	r3, r2
 800545a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f023 0303 	bic.w	r3, r3, #3
 8005462:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	4313      	orrs	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005474:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	021b      	lsls	r3, r3, #8
 800547c:	697a      	ldr	r2, [r7, #20]
 800547e:	4313      	orrs	r3, r2
 8005480:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a22      	ldr	r2, [pc, #136]	; (8005510 <TIM_OC3_SetConfig+0xe4>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d003      	beq.n	8005492 <TIM_OC3_SetConfig+0x66>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a21      	ldr	r2, [pc, #132]	; (8005514 <TIM_OC3_SetConfig+0xe8>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d10d      	bne.n	80054ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005498:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	021b      	lsls	r3, r3, #8
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a17      	ldr	r2, [pc, #92]	; (8005510 <TIM_OC3_SetConfig+0xe4>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d003      	beq.n	80054be <TIM_OC3_SetConfig+0x92>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a16      	ldr	r2, [pc, #88]	; (8005514 <TIM_OC3_SetConfig+0xe8>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d113      	bne.n	80054e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	011b      	lsls	r3, r3, #4
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	011b      	lsls	r3, r3, #4
 80054e0:	693a      	ldr	r2, [r7, #16]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	685a      	ldr	r2, [r3, #4]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	621a      	str	r2, [r3, #32]
}
 8005500:	bf00      	nop
 8005502:	371c      	adds	r7, #28
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr
 800550c:	fffeff8f 	.word	0xfffeff8f
 8005510:	40010000 	.word	0x40010000
 8005514:	40010400 	.word	0x40010400

08005518 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005518:	b480      	push	{r7}
 800551a:	b087      	sub	sp, #28
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a1b      	ldr	r3, [r3, #32]
 800552c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	69db      	ldr	r3, [r3, #28]
 800553e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	4b1e      	ldr	r3, [pc, #120]	; (80055bc <TIM_OC4_SetConfig+0xa4>)
 8005544:	4013      	ands	r3, r2
 8005546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800554e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	021b      	lsls	r3, r3, #8
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	4313      	orrs	r3, r2
 800555a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005562:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	031b      	lsls	r3, r3, #12
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	4313      	orrs	r3, r2
 800556e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a13      	ldr	r2, [pc, #76]	; (80055c0 <TIM_OC4_SetConfig+0xa8>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d003      	beq.n	8005580 <TIM_OC4_SetConfig+0x68>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a12      	ldr	r2, [pc, #72]	; (80055c4 <TIM_OC4_SetConfig+0xac>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d109      	bne.n	8005594 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005586:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	695b      	ldr	r3, [r3, #20]
 800558c:	019b      	lsls	r3, r3, #6
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	4313      	orrs	r3, r2
 8005592:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	685a      	ldr	r2, [r3, #4]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	693a      	ldr	r2, [r7, #16]
 80055ac:	621a      	str	r2, [r3, #32]
}
 80055ae:	bf00      	nop
 80055b0:	371c      	adds	r7, #28
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	feff8fff 	.word	0xfeff8fff
 80055c0:	40010000 	.word	0x40010000
 80055c4:	40010400 	.word	0x40010400

080055c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b087      	sub	sp, #28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	4b1b      	ldr	r3, [pc, #108]	; (8005660 <TIM_OC5_SetConfig+0x98>)
 80055f4:	4013      	ands	r3, r2
 80055f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	4313      	orrs	r3, r2
 8005600:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005608:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	041b      	lsls	r3, r3, #16
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	4313      	orrs	r3, r2
 8005614:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a12      	ldr	r2, [pc, #72]	; (8005664 <TIM_OC5_SetConfig+0x9c>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d003      	beq.n	8005626 <TIM_OC5_SetConfig+0x5e>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a11      	ldr	r2, [pc, #68]	; (8005668 <TIM_OC5_SetConfig+0xa0>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d109      	bne.n	800563a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800562c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	021b      	lsls	r3, r3, #8
 8005634:	697a      	ldr	r2, [r7, #20]
 8005636:	4313      	orrs	r3, r2
 8005638:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	685a      	ldr	r2, [r3, #4]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	621a      	str	r2, [r3, #32]
}
 8005654:	bf00      	nop
 8005656:	371c      	adds	r7, #28
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr
 8005660:	fffeff8f 	.word	0xfffeff8f
 8005664:	40010000 	.word	0x40010000
 8005668:	40010400 	.word	0x40010400

0800566c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800566c:	b480      	push	{r7}
 800566e:	b087      	sub	sp, #28
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a1b      	ldr	r3, [r3, #32]
 8005680:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	4b1c      	ldr	r3, [pc, #112]	; (8005708 <TIM_OC6_SetConfig+0x9c>)
 8005698:	4013      	ands	r3, r2
 800569a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	021b      	lsls	r3, r3, #8
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80056ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	051b      	lsls	r3, r3, #20
 80056b6:	693a      	ldr	r2, [r7, #16]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a13      	ldr	r2, [pc, #76]	; (800570c <TIM_OC6_SetConfig+0xa0>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d003      	beq.n	80056cc <TIM_OC6_SetConfig+0x60>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a12      	ldr	r2, [pc, #72]	; (8005710 <TIM_OC6_SetConfig+0xa4>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d109      	bne.n	80056e0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	029b      	lsls	r3, r3, #10
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	4313      	orrs	r3, r2
 80056de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	685a      	ldr	r2, [r3, #4]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	621a      	str	r2, [r3, #32]
}
 80056fa:	bf00      	nop
 80056fc:	371c      	adds	r7, #28
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	feff8fff 	.word	0xfeff8fff
 800570c:	40010000 	.word	0x40010000
 8005710:	40010400 	.word	0x40010400

08005714 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005714:	b480      	push	{r7}
 8005716:	b087      	sub	sp, #28
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6a1b      	ldr	r3, [r3, #32]
 8005724:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	f023 0201 	bic.w	r2, r3, #1
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800573e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	011b      	lsls	r3, r3, #4
 8005744:	693a      	ldr	r2, [r7, #16]
 8005746:	4313      	orrs	r3, r2
 8005748:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	f023 030a 	bic.w	r3, r3, #10
 8005750:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005752:	697a      	ldr	r2, [r7, #20]
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	4313      	orrs	r3, r2
 8005758:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	621a      	str	r2, [r3, #32]
}
 8005766:	bf00      	nop
 8005768:	371c      	adds	r7, #28
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005772:	b480      	push	{r7}
 8005774:	b087      	sub	sp, #28
 8005776:	af00      	add	r7, sp, #0
 8005778:	60f8      	str	r0, [r7, #12]
 800577a:	60b9      	str	r1, [r7, #8]
 800577c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6a1b      	ldr	r3, [r3, #32]
 8005788:	f023 0210 	bic.w	r2, r3, #16
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	699b      	ldr	r3, [r3, #24]
 8005794:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800579c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	031b      	lsls	r3, r3, #12
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057ae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	011b      	lsls	r3, r3, #4
 80057b4:	697a      	ldr	r2, [r7, #20]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	697a      	ldr	r2, [r7, #20]
 80057c4:	621a      	str	r2, [r3, #32]
}
 80057c6:	bf00      	nop
 80057c8:	371c      	adds	r7, #28
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b085      	sub	sp, #20
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
 80057da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057ea:	683a      	ldr	r2, [r7, #0]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	f043 0307 	orr.w	r3, r3, #7
 80057f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	609a      	str	r2, [r3, #8]
}
 80057fc:	bf00      	nop
 80057fe:	3714      	adds	r7, #20
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005808:	b480      	push	{r7}
 800580a:	b087      	sub	sp, #28
 800580c:	af00      	add	r7, sp, #0
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	607a      	str	r2, [r7, #4]
 8005814:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005822:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	021a      	lsls	r2, r3, #8
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	431a      	orrs	r2, r3
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	4313      	orrs	r3, r2
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	4313      	orrs	r3, r2
 8005834:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	697a      	ldr	r2, [r7, #20]
 800583a:	609a      	str	r2, [r3, #8]
}
 800583c:	bf00      	nop
 800583e:	371c      	adds	r7, #28
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005848:	b480      	push	{r7}
 800584a:	b087      	sub	sp, #28
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	f003 031f 	and.w	r3, r3, #31
 800585a:	2201      	movs	r2, #1
 800585c:	fa02 f303 	lsl.w	r3, r2, r3
 8005860:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6a1a      	ldr	r2, [r3, #32]
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	43db      	mvns	r3, r3
 800586a:	401a      	ands	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6a1a      	ldr	r2, [r3, #32]
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	f003 031f 	and.w	r3, r3, #31
 800587a:	6879      	ldr	r1, [r7, #4]
 800587c:	fa01 f303 	lsl.w	r3, r1, r3
 8005880:	431a      	orrs	r2, r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	621a      	str	r2, [r3, #32]
}
 8005886:	bf00      	nop
 8005888:	371c      	adds	r7, #28
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
	...

08005894 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d101      	bne.n	80058ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058a8:	2302      	movs	r3, #2
 80058aa:	e06d      	b.n	8005988 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2202      	movs	r2, #2
 80058b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a30      	ldr	r2, [pc, #192]	; (8005994 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d004      	beq.n	80058e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a2f      	ldr	r2, [pc, #188]	; (8005998 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d108      	bne.n	80058f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80058e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	4313      	orrs	r3, r2
 8005902:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a20      	ldr	r2, [pc, #128]	; (8005994 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d022      	beq.n	800595c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800591e:	d01d      	beq.n	800595c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a1d      	ldr	r2, [pc, #116]	; (800599c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d018      	beq.n	800595c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a1c      	ldr	r2, [pc, #112]	; (80059a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d013      	beq.n	800595c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a1a      	ldr	r2, [pc, #104]	; (80059a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d00e      	beq.n	800595c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a15      	ldr	r2, [pc, #84]	; (8005998 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d009      	beq.n	800595c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a16      	ldr	r2, [pc, #88]	; (80059a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d004      	beq.n	800595c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a15      	ldr	r2, [pc, #84]	; (80059ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d10c      	bne.n	8005976 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005962:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	4313      	orrs	r3, r2
 800596c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68ba      	ldr	r2, [r7, #8]
 8005974:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2201      	movs	r2, #1
 800597a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3714      	adds	r7, #20
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr
 8005994:	40010000 	.word	0x40010000
 8005998:	40010400 	.word	0x40010400
 800599c:	40000400 	.word	0x40000400
 80059a0:	40000800 	.word	0x40000800
 80059a4:	40000c00 	.word	0x40000c00
 80059a8:	40014000 	.word	0x40014000
 80059ac:	40001800 	.word	0x40001800

080059b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059b8:	bf00      	nop
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059cc:	bf00      	nop
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d101      	bne.n	80059fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e040      	b.n	8005a80 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d106      	bne.n	8005a14 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f7fb fc30 	bl	8001274 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2224      	movs	r2, #36	; 0x24
 8005a18:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f022 0201 	bic.w	r2, r2, #1
 8005a28:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d002      	beq.n	8005a38 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 fa8c 	bl	8005f50 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 f825 	bl	8005a88 <UART_SetConfig>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d101      	bne.n	8005a48 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e01b      	b.n	8005a80 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	685a      	ldr	r2, [r3, #4]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	689a      	ldr	r2, [r3, #8]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f042 0201 	orr.w	r2, r2, #1
 8005a76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 fb0b 	bl	8006094 <UART_CheckIdleState>
 8005a7e:	4603      	mov	r3, r0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3708      	adds	r7, #8
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b088      	sub	sp, #32
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a90:	2300      	movs	r3, #0
 8005a92:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	689a      	ldr	r2, [r3, #8]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	691b      	ldr	r3, [r3, #16]
 8005a9c:	431a      	orrs	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	69db      	ldr	r3, [r3, #28]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	4ba6      	ldr	r3, [pc, #664]	; (8005d4c <UART_SetConfig+0x2c4>)
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	6812      	ldr	r2, [r2, #0]
 8005aba:	6979      	ldr	r1, [r7, #20]
 8005abc:	430b      	orrs	r3, r1
 8005abe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	68da      	ldr	r2, [r3, #12]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	699b      	ldr	r3, [r3, #24]
 8005ada:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a1b      	ldr	r3, [r3, #32]
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	697a      	ldr	r2, [r7, #20]
 8005af6:	430a      	orrs	r2, r1
 8005af8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a94      	ldr	r2, [pc, #592]	; (8005d50 <UART_SetConfig+0x2c8>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d120      	bne.n	8005b46 <UART_SetConfig+0xbe>
 8005b04:	4b93      	ldr	r3, [pc, #588]	; (8005d54 <UART_SetConfig+0x2cc>)
 8005b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b0a:	f003 0303 	and.w	r3, r3, #3
 8005b0e:	2b03      	cmp	r3, #3
 8005b10:	d816      	bhi.n	8005b40 <UART_SetConfig+0xb8>
 8005b12:	a201      	add	r2, pc, #4	; (adr r2, 8005b18 <UART_SetConfig+0x90>)
 8005b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b18:	08005b29 	.word	0x08005b29
 8005b1c:	08005b35 	.word	0x08005b35
 8005b20:	08005b2f 	.word	0x08005b2f
 8005b24:	08005b3b 	.word	0x08005b3b
 8005b28:	2301      	movs	r3, #1
 8005b2a:	77fb      	strb	r3, [r7, #31]
 8005b2c:	e150      	b.n	8005dd0 <UART_SetConfig+0x348>
 8005b2e:	2302      	movs	r3, #2
 8005b30:	77fb      	strb	r3, [r7, #31]
 8005b32:	e14d      	b.n	8005dd0 <UART_SetConfig+0x348>
 8005b34:	2304      	movs	r3, #4
 8005b36:	77fb      	strb	r3, [r7, #31]
 8005b38:	e14a      	b.n	8005dd0 <UART_SetConfig+0x348>
 8005b3a:	2308      	movs	r3, #8
 8005b3c:	77fb      	strb	r3, [r7, #31]
 8005b3e:	e147      	b.n	8005dd0 <UART_SetConfig+0x348>
 8005b40:	2310      	movs	r3, #16
 8005b42:	77fb      	strb	r3, [r7, #31]
 8005b44:	e144      	b.n	8005dd0 <UART_SetConfig+0x348>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a83      	ldr	r2, [pc, #524]	; (8005d58 <UART_SetConfig+0x2d0>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d132      	bne.n	8005bb6 <UART_SetConfig+0x12e>
 8005b50:	4b80      	ldr	r3, [pc, #512]	; (8005d54 <UART_SetConfig+0x2cc>)
 8005b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b56:	f003 030c 	and.w	r3, r3, #12
 8005b5a:	2b0c      	cmp	r3, #12
 8005b5c:	d828      	bhi.n	8005bb0 <UART_SetConfig+0x128>
 8005b5e:	a201      	add	r2, pc, #4	; (adr r2, 8005b64 <UART_SetConfig+0xdc>)
 8005b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b64:	08005b99 	.word	0x08005b99
 8005b68:	08005bb1 	.word	0x08005bb1
 8005b6c:	08005bb1 	.word	0x08005bb1
 8005b70:	08005bb1 	.word	0x08005bb1
 8005b74:	08005ba5 	.word	0x08005ba5
 8005b78:	08005bb1 	.word	0x08005bb1
 8005b7c:	08005bb1 	.word	0x08005bb1
 8005b80:	08005bb1 	.word	0x08005bb1
 8005b84:	08005b9f 	.word	0x08005b9f
 8005b88:	08005bb1 	.word	0x08005bb1
 8005b8c:	08005bb1 	.word	0x08005bb1
 8005b90:	08005bb1 	.word	0x08005bb1
 8005b94:	08005bab 	.word	0x08005bab
 8005b98:	2300      	movs	r3, #0
 8005b9a:	77fb      	strb	r3, [r7, #31]
 8005b9c:	e118      	b.n	8005dd0 <UART_SetConfig+0x348>
 8005b9e:	2302      	movs	r3, #2
 8005ba0:	77fb      	strb	r3, [r7, #31]
 8005ba2:	e115      	b.n	8005dd0 <UART_SetConfig+0x348>
 8005ba4:	2304      	movs	r3, #4
 8005ba6:	77fb      	strb	r3, [r7, #31]
 8005ba8:	e112      	b.n	8005dd0 <UART_SetConfig+0x348>
 8005baa:	2308      	movs	r3, #8
 8005bac:	77fb      	strb	r3, [r7, #31]
 8005bae:	e10f      	b.n	8005dd0 <UART_SetConfig+0x348>
 8005bb0:	2310      	movs	r3, #16
 8005bb2:	77fb      	strb	r3, [r7, #31]
 8005bb4:	e10c      	b.n	8005dd0 <UART_SetConfig+0x348>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a68      	ldr	r2, [pc, #416]	; (8005d5c <UART_SetConfig+0x2d4>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d120      	bne.n	8005c02 <UART_SetConfig+0x17a>
 8005bc0:	4b64      	ldr	r3, [pc, #400]	; (8005d54 <UART_SetConfig+0x2cc>)
 8005bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bc6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005bca:	2b30      	cmp	r3, #48	; 0x30
 8005bcc:	d013      	beq.n	8005bf6 <UART_SetConfig+0x16e>
 8005bce:	2b30      	cmp	r3, #48	; 0x30
 8005bd0:	d814      	bhi.n	8005bfc <UART_SetConfig+0x174>
 8005bd2:	2b20      	cmp	r3, #32
 8005bd4:	d009      	beq.n	8005bea <UART_SetConfig+0x162>
 8005bd6:	2b20      	cmp	r3, #32
 8005bd8:	d810      	bhi.n	8005bfc <UART_SetConfig+0x174>
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d002      	beq.n	8005be4 <UART_SetConfig+0x15c>
 8005bde:	2b10      	cmp	r3, #16
 8005be0:	d006      	beq.n	8005bf0 <UART_SetConfig+0x168>
 8005be2:	e00b      	b.n	8005bfc <UART_SetConfig+0x174>
 8005be4:	2300      	movs	r3, #0
 8005be6:	77fb      	strb	r3, [r7, #31]
 8005be8:	e0f2      	b.n	8005dd0 <UART_SetConfig+0x348>
 8005bea:	2302      	movs	r3, #2
 8005bec:	77fb      	strb	r3, [r7, #31]
 8005bee:	e0ef      	b.n	8005dd0 <UART_SetConfig+0x348>
 8005bf0:	2304      	movs	r3, #4
 8005bf2:	77fb      	strb	r3, [r7, #31]
 8005bf4:	e0ec      	b.n	8005dd0 <UART_SetConfig+0x348>
 8005bf6:	2308      	movs	r3, #8
 8005bf8:	77fb      	strb	r3, [r7, #31]
 8005bfa:	e0e9      	b.n	8005dd0 <UART_SetConfig+0x348>
 8005bfc:	2310      	movs	r3, #16
 8005bfe:	77fb      	strb	r3, [r7, #31]
 8005c00:	e0e6      	b.n	8005dd0 <UART_SetConfig+0x348>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a56      	ldr	r2, [pc, #344]	; (8005d60 <UART_SetConfig+0x2d8>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d120      	bne.n	8005c4e <UART_SetConfig+0x1c6>
 8005c0c:	4b51      	ldr	r3, [pc, #324]	; (8005d54 <UART_SetConfig+0x2cc>)
 8005c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c12:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005c16:	2bc0      	cmp	r3, #192	; 0xc0
 8005c18:	d013      	beq.n	8005c42 <UART_SetConfig+0x1ba>
 8005c1a:	2bc0      	cmp	r3, #192	; 0xc0
 8005c1c:	d814      	bhi.n	8005c48 <UART_SetConfig+0x1c0>
 8005c1e:	2b80      	cmp	r3, #128	; 0x80
 8005c20:	d009      	beq.n	8005c36 <UART_SetConfig+0x1ae>
 8005c22:	2b80      	cmp	r3, #128	; 0x80
 8005c24:	d810      	bhi.n	8005c48 <UART_SetConfig+0x1c0>
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d002      	beq.n	8005c30 <UART_SetConfig+0x1a8>
 8005c2a:	2b40      	cmp	r3, #64	; 0x40
 8005c2c:	d006      	beq.n	8005c3c <UART_SetConfig+0x1b4>
 8005c2e:	e00b      	b.n	8005c48 <UART_SetConfig+0x1c0>
 8005c30:	2300      	movs	r3, #0
 8005c32:	77fb      	strb	r3, [r7, #31]
 8005c34:	e0cc      	b.n	8005dd0 <UART_SetConfig+0x348>
 8005c36:	2302      	movs	r3, #2
 8005c38:	77fb      	strb	r3, [r7, #31]
 8005c3a:	e0c9      	b.n	8005dd0 <UART_SetConfig+0x348>
 8005c3c:	2304      	movs	r3, #4
 8005c3e:	77fb      	strb	r3, [r7, #31]
 8005c40:	e0c6      	b.n	8005dd0 <UART_SetConfig+0x348>
 8005c42:	2308      	movs	r3, #8
 8005c44:	77fb      	strb	r3, [r7, #31]
 8005c46:	e0c3      	b.n	8005dd0 <UART_SetConfig+0x348>
 8005c48:	2310      	movs	r3, #16
 8005c4a:	77fb      	strb	r3, [r7, #31]
 8005c4c:	e0c0      	b.n	8005dd0 <UART_SetConfig+0x348>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a44      	ldr	r2, [pc, #272]	; (8005d64 <UART_SetConfig+0x2dc>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d125      	bne.n	8005ca4 <UART_SetConfig+0x21c>
 8005c58:	4b3e      	ldr	r3, [pc, #248]	; (8005d54 <UART_SetConfig+0x2cc>)
 8005c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c66:	d017      	beq.n	8005c98 <UART_SetConfig+0x210>
 8005c68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c6c:	d817      	bhi.n	8005c9e <UART_SetConfig+0x216>
 8005c6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c72:	d00b      	beq.n	8005c8c <UART_SetConfig+0x204>
 8005c74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c78:	d811      	bhi.n	8005c9e <UART_SetConfig+0x216>
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d003      	beq.n	8005c86 <UART_SetConfig+0x1fe>
 8005c7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c82:	d006      	beq.n	8005c92 <UART_SetConfig+0x20a>
 8005c84:	e00b      	b.n	8005c9e <UART_SetConfig+0x216>
 8005c86:	2300      	movs	r3, #0
 8005c88:	77fb      	strb	r3, [r7, #31]
 8005c8a:	e0a1      	b.n	8005dd0 <UART_SetConfig+0x348>
 8005c8c:	2302      	movs	r3, #2
 8005c8e:	77fb      	strb	r3, [r7, #31]
 8005c90:	e09e      	b.n	8005dd0 <UART_SetConfig+0x348>
 8005c92:	2304      	movs	r3, #4
 8005c94:	77fb      	strb	r3, [r7, #31]
 8005c96:	e09b      	b.n	8005dd0 <UART_SetConfig+0x348>
 8005c98:	2308      	movs	r3, #8
 8005c9a:	77fb      	strb	r3, [r7, #31]
 8005c9c:	e098      	b.n	8005dd0 <UART_SetConfig+0x348>
 8005c9e:	2310      	movs	r3, #16
 8005ca0:	77fb      	strb	r3, [r7, #31]
 8005ca2:	e095      	b.n	8005dd0 <UART_SetConfig+0x348>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a2f      	ldr	r2, [pc, #188]	; (8005d68 <UART_SetConfig+0x2e0>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d125      	bne.n	8005cfa <UART_SetConfig+0x272>
 8005cae:	4b29      	ldr	r3, [pc, #164]	; (8005d54 <UART_SetConfig+0x2cc>)
 8005cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cb4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005cb8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005cbc:	d017      	beq.n	8005cee <UART_SetConfig+0x266>
 8005cbe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005cc2:	d817      	bhi.n	8005cf4 <UART_SetConfig+0x26c>
 8005cc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cc8:	d00b      	beq.n	8005ce2 <UART_SetConfig+0x25a>
 8005cca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cce:	d811      	bhi.n	8005cf4 <UART_SetConfig+0x26c>
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d003      	beq.n	8005cdc <UART_SetConfig+0x254>
 8005cd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cd8:	d006      	beq.n	8005ce8 <UART_SetConfig+0x260>
 8005cda:	e00b      	b.n	8005cf4 <UART_SetConfig+0x26c>
 8005cdc:	2301      	movs	r3, #1
 8005cde:	77fb      	strb	r3, [r7, #31]
 8005ce0:	e076      	b.n	8005dd0 <UART_SetConfig+0x348>
 8005ce2:	2302      	movs	r3, #2
 8005ce4:	77fb      	strb	r3, [r7, #31]
 8005ce6:	e073      	b.n	8005dd0 <UART_SetConfig+0x348>
 8005ce8:	2304      	movs	r3, #4
 8005cea:	77fb      	strb	r3, [r7, #31]
 8005cec:	e070      	b.n	8005dd0 <UART_SetConfig+0x348>
 8005cee:	2308      	movs	r3, #8
 8005cf0:	77fb      	strb	r3, [r7, #31]
 8005cf2:	e06d      	b.n	8005dd0 <UART_SetConfig+0x348>
 8005cf4:	2310      	movs	r3, #16
 8005cf6:	77fb      	strb	r3, [r7, #31]
 8005cf8:	e06a      	b.n	8005dd0 <UART_SetConfig+0x348>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a1b      	ldr	r2, [pc, #108]	; (8005d6c <UART_SetConfig+0x2e4>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d138      	bne.n	8005d76 <UART_SetConfig+0x2ee>
 8005d04:	4b13      	ldr	r3, [pc, #76]	; (8005d54 <UART_SetConfig+0x2cc>)
 8005d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d0a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005d0e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d12:	d017      	beq.n	8005d44 <UART_SetConfig+0x2bc>
 8005d14:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d18:	d82a      	bhi.n	8005d70 <UART_SetConfig+0x2e8>
 8005d1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d1e:	d00b      	beq.n	8005d38 <UART_SetConfig+0x2b0>
 8005d20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d24:	d824      	bhi.n	8005d70 <UART_SetConfig+0x2e8>
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d003      	beq.n	8005d32 <UART_SetConfig+0x2aa>
 8005d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d2e:	d006      	beq.n	8005d3e <UART_SetConfig+0x2b6>
 8005d30:	e01e      	b.n	8005d70 <UART_SetConfig+0x2e8>
 8005d32:	2300      	movs	r3, #0
 8005d34:	77fb      	strb	r3, [r7, #31]
 8005d36:	e04b      	b.n	8005dd0 <UART_SetConfig+0x348>
 8005d38:	2302      	movs	r3, #2
 8005d3a:	77fb      	strb	r3, [r7, #31]
 8005d3c:	e048      	b.n	8005dd0 <UART_SetConfig+0x348>
 8005d3e:	2304      	movs	r3, #4
 8005d40:	77fb      	strb	r3, [r7, #31]
 8005d42:	e045      	b.n	8005dd0 <UART_SetConfig+0x348>
 8005d44:	2308      	movs	r3, #8
 8005d46:	77fb      	strb	r3, [r7, #31]
 8005d48:	e042      	b.n	8005dd0 <UART_SetConfig+0x348>
 8005d4a:	bf00      	nop
 8005d4c:	efff69f3 	.word	0xefff69f3
 8005d50:	40011000 	.word	0x40011000
 8005d54:	40023800 	.word	0x40023800
 8005d58:	40004400 	.word	0x40004400
 8005d5c:	40004800 	.word	0x40004800
 8005d60:	40004c00 	.word	0x40004c00
 8005d64:	40005000 	.word	0x40005000
 8005d68:	40011400 	.word	0x40011400
 8005d6c:	40007800 	.word	0x40007800
 8005d70:	2310      	movs	r3, #16
 8005d72:	77fb      	strb	r3, [r7, #31]
 8005d74:	e02c      	b.n	8005dd0 <UART_SetConfig+0x348>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a72      	ldr	r2, [pc, #456]	; (8005f44 <UART_SetConfig+0x4bc>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d125      	bne.n	8005dcc <UART_SetConfig+0x344>
 8005d80:	4b71      	ldr	r3, [pc, #452]	; (8005f48 <UART_SetConfig+0x4c0>)
 8005d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d86:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005d8a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005d8e:	d017      	beq.n	8005dc0 <UART_SetConfig+0x338>
 8005d90:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005d94:	d817      	bhi.n	8005dc6 <UART_SetConfig+0x33e>
 8005d96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d9a:	d00b      	beq.n	8005db4 <UART_SetConfig+0x32c>
 8005d9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005da0:	d811      	bhi.n	8005dc6 <UART_SetConfig+0x33e>
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d003      	beq.n	8005dae <UART_SetConfig+0x326>
 8005da6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005daa:	d006      	beq.n	8005dba <UART_SetConfig+0x332>
 8005dac:	e00b      	b.n	8005dc6 <UART_SetConfig+0x33e>
 8005dae:	2300      	movs	r3, #0
 8005db0:	77fb      	strb	r3, [r7, #31]
 8005db2:	e00d      	b.n	8005dd0 <UART_SetConfig+0x348>
 8005db4:	2302      	movs	r3, #2
 8005db6:	77fb      	strb	r3, [r7, #31]
 8005db8:	e00a      	b.n	8005dd0 <UART_SetConfig+0x348>
 8005dba:	2304      	movs	r3, #4
 8005dbc:	77fb      	strb	r3, [r7, #31]
 8005dbe:	e007      	b.n	8005dd0 <UART_SetConfig+0x348>
 8005dc0:	2308      	movs	r3, #8
 8005dc2:	77fb      	strb	r3, [r7, #31]
 8005dc4:	e004      	b.n	8005dd0 <UART_SetConfig+0x348>
 8005dc6:	2310      	movs	r3, #16
 8005dc8:	77fb      	strb	r3, [r7, #31]
 8005dca:	e001      	b.n	8005dd0 <UART_SetConfig+0x348>
 8005dcc:	2310      	movs	r3, #16
 8005dce:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	69db      	ldr	r3, [r3, #28]
 8005dd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dd8:	d15b      	bne.n	8005e92 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005dda:	7ffb      	ldrb	r3, [r7, #31]
 8005ddc:	2b08      	cmp	r3, #8
 8005dde:	d828      	bhi.n	8005e32 <UART_SetConfig+0x3aa>
 8005de0:	a201      	add	r2, pc, #4	; (adr r2, 8005de8 <UART_SetConfig+0x360>)
 8005de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de6:	bf00      	nop
 8005de8:	08005e0d 	.word	0x08005e0d
 8005dec:	08005e15 	.word	0x08005e15
 8005df0:	08005e1d 	.word	0x08005e1d
 8005df4:	08005e33 	.word	0x08005e33
 8005df8:	08005e23 	.word	0x08005e23
 8005dfc:	08005e33 	.word	0x08005e33
 8005e00:	08005e33 	.word	0x08005e33
 8005e04:	08005e33 	.word	0x08005e33
 8005e08:	08005e2b 	.word	0x08005e2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e0c:	f7fd ffee 	bl	8003dec <HAL_RCC_GetPCLK1Freq>
 8005e10:	61b8      	str	r0, [r7, #24]
        break;
 8005e12:	e013      	b.n	8005e3c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e14:	f7fd fffe 	bl	8003e14 <HAL_RCC_GetPCLK2Freq>
 8005e18:	61b8      	str	r0, [r7, #24]
        break;
 8005e1a:	e00f      	b.n	8005e3c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e1c:	4b4b      	ldr	r3, [pc, #300]	; (8005f4c <UART_SetConfig+0x4c4>)
 8005e1e:	61bb      	str	r3, [r7, #24]
        break;
 8005e20:	e00c      	b.n	8005e3c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e22:	f7fd fed3 	bl	8003bcc <HAL_RCC_GetSysClockFreq>
 8005e26:	61b8      	str	r0, [r7, #24]
        break;
 8005e28:	e008      	b.n	8005e3c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e2e:	61bb      	str	r3, [r7, #24]
        break;
 8005e30:	e004      	b.n	8005e3c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005e32:	2300      	movs	r3, #0
 8005e34:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	77bb      	strb	r3, [r7, #30]
        break;
 8005e3a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d074      	beq.n	8005f2c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	005a      	lsls	r2, r3, #1
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	085b      	lsrs	r3, r3, #1
 8005e4c:	441a      	add	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e56:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	2b0f      	cmp	r3, #15
 8005e5c:	d916      	bls.n	8005e8c <UART_SetConfig+0x404>
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e64:	d212      	bcs.n	8005e8c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	f023 030f 	bic.w	r3, r3, #15
 8005e6e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	085b      	lsrs	r3, r3, #1
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	f003 0307 	and.w	r3, r3, #7
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	89fb      	ldrh	r3, [r7, #14]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	89fa      	ldrh	r2, [r7, #14]
 8005e88:	60da      	str	r2, [r3, #12]
 8005e8a:	e04f      	b.n	8005f2c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	77bb      	strb	r3, [r7, #30]
 8005e90:	e04c      	b.n	8005f2c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e92:	7ffb      	ldrb	r3, [r7, #31]
 8005e94:	2b08      	cmp	r3, #8
 8005e96:	d828      	bhi.n	8005eea <UART_SetConfig+0x462>
 8005e98:	a201      	add	r2, pc, #4	; (adr r2, 8005ea0 <UART_SetConfig+0x418>)
 8005e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e9e:	bf00      	nop
 8005ea0:	08005ec5 	.word	0x08005ec5
 8005ea4:	08005ecd 	.word	0x08005ecd
 8005ea8:	08005ed5 	.word	0x08005ed5
 8005eac:	08005eeb 	.word	0x08005eeb
 8005eb0:	08005edb 	.word	0x08005edb
 8005eb4:	08005eeb 	.word	0x08005eeb
 8005eb8:	08005eeb 	.word	0x08005eeb
 8005ebc:	08005eeb 	.word	0x08005eeb
 8005ec0:	08005ee3 	.word	0x08005ee3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ec4:	f7fd ff92 	bl	8003dec <HAL_RCC_GetPCLK1Freq>
 8005ec8:	61b8      	str	r0, [r7, #24]
        break;
 8005eca:	e013      	b.n	8005ef4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ecc:	f7fd ffa2 	bl	8003e14 <HAL_RCC_GetPCLK2Freq>
 8005ed0:	61b8      	str	r0, [r7, #24]
        break;
 8005ed2:	e00f      	b.n	8005ef4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ed4:	4b1d      	ldr	r3, [pc, #116]	; (8005f4c <UART_SetConfig+0x4c4>)
 8005ed6:	61bb      	str	r3, [r7, #24]
        break;
 8005ed8:	e00c      	b.n	8005ef4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005eda:	f7fd fe77 	bl	8003bcc <HAL_RCC_GetSysClockFreq>
 8005ede:	61b8      	str	r0, [r7, #24]
        break;
 8005ee0:	e008      	b.n	8005ef4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ee2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ee6:	61bb      	str	r3, [r7, #24]
        break;
 8005ee8:	e004      	b.n	8005ef4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005eea:	2300      	movs	r3, #0
 8005eec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	77bb      	strb	r3, [r7, #30]
        break;
 8005ef2:	bf00      	nop
    }

    if (pclk != 0U)
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d018      	beq.n	8005f2c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	085a      	lsrs	r2, r3, #1
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	441a      	add	r2, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f0c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	2b0f      	cmp	r3, #15
 8005f12:	d909      	bls.n	8005f28 <UART_SetConfig+0x4a0>
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f1a:	d205      	bcs.n	8005f28 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	b29a      	uxth	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	60da      	str	r2, [r3, #12]
 8005f26:	e001      	b.n	8005f2c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005f38:	7fbb      	ldrb	r3, [r7, #30]
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3720      	adds	r7, #32
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	40007c00 	.word	0x40007c00
 8005f48:	40023800 	.word	0x40023800
 8005f4c:	00f42400 	.word	0x00f42400

08005f50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5c:	f003 0308 	and.w	r3, r3, #8
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d00a      	beq.n	8005f7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	430a      	orrs	r2, r1
 8005f78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7e:	f003 0301 	and.w	r3, r3, #1
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00a      	beq.n	8005f9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	430a      	orrs	r2, r1
 8005f9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa0:	f003 0302 	and.w	r3, r3, #2
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00a      	beq.n	8005fbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	430a      	orrs	r2, r1
 8005fbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc2:	f003 0304 	and.w	r3, r3, #4
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00a      	beq.n	8005fe0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	430a      	orrs	r2, r1
 8005fde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe4:	f003 0310 	and.w	r3, r3, #16
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d00a      	beq.n	8006002 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	430a      	orrs	r2, r1
 8006000:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006006:	f003 0320 	and.w	r3, r3, #32
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00a      	beq.n	8006024 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	430a      	orrs	r2, r1
 8006022:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800602c:	2b00      	cmp	r3, #0
 800602e:	d01a      	beq.n	8006066 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	430a      	orrs	r2, r1
 8006044:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800604e:	d10a      	bne.n	8006066 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	430a      	orrs	r2, r1
 8006064:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00a      	beq.n	8006088 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	430a      	orrs	r2, r1
 8006086:	605a      	str	r2, [r3, #4]
  }
}
 8006088:	bf00      	nop
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b098      	sub	sp, #96	; 0x60
 8006098:	af02      	add	r7, sp, #8
 800609a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80060a4:	f7fb fbf8 	bl	8001898 <HAL_GetTick>
 80060a8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0308 	and.w	r3, r3, #8
 80060b4:	2b08      	cmp	r3, #8
 80060b6:	d12e      	bne.n	8006116 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060bc:	9300      	str	r3, [sp, #0]
 80060be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060c0:	2200      	movs	r2, #0
 80060c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 f88c 	bl	80061e4 <UART_WaitOnFlagUntilTimeout>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d021      	beq.n	8006116 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060da:	e853 3f00 	ldrex	r3, [r3]
 80060de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80060e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060e6:	653b      	str	r3, [r7, #80]	; 0x50
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	461a      	mov	r2, r3
 80060ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060f0:	647b      	str	r3, [r7, #68]	; 0x44
 80060f2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80060f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060f8:	e841 2300 	strex	r3, r2, [r1]
 80060fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80060fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006100:	2b00      	cmp	r3, #0
 8006102:	d1e6      	bne.n	80060d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2220      	movs	r2, #32
 8006108:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e062      	b.n	80061dc <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0304 	and.w	r3, r3, #4
 8006120:	2b04      	cmp	r3, #4
 8006122:	d149      	bne.n	80061b8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006124:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006128:	9300      	str	r3, [sp, #0]
 800612a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800612c:	2200      	movs	r2, #0
 800612e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 f856 	bl	80061e4 <UART_WaitOnFlagUntilTimeout>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d03c      	beq.n	80061b8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006146:	e853 3f00 	ldrex	r3, [r3]
 800614a:	623b      	str	r3, [r7, #32]
   return(result);
 800614c:	6a3b      	ldr	r3, [r7, #32]
 800614e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006152:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	461a      	mov	r2, r3
 800615a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800615c:	633b      	str	r3, [r7, #48]	; 0x30
 800615e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006160:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006162:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006164:	e841 2300 	strex	r3, r2, [r1]
 8006168:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800616a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616c:	2b00      	cmp	r3, #0
 800616e:	d1e6      	bne.n	800613e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	3308      	adds	r3, #8
 8006176:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	e853 3f00 	ldrex	r3, [r3]
 800617e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f023 0301 	bic.w	r3, r3, #1
 8006186:	64bb      	str	r3, [r7, #72]	; 0x48
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	3308      	adds	r3, #8
 800618e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006190:	61fa      	str	r2, [r7, #28]
 8006192:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006194:	69b9      	ldr	r1, [r7, #24]
 8006196:	69fa      	ldr	r2, [r7, #28]
 8006198:	e841 2300 	strex	r3, r2, [r1]
 800619c:	617b      	str	r3, [r7, #20]
   return(result);
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d1e5      	bne.n	8006170 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2220      	movs	r2, #32
 80061a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	e011      	b.n	80061dc <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2220      	movs	r2, #32
 80061bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2220      	movs	r2, #32
 80061c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3758      	adds	r7, #88	; 0x58
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	603b      	str	r3, [r7, #0]
 80061f0:	4613      	mov	r3, r2
 80061f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061f4:	e04f      	b.n	8006296 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061fc:	d04b      	beq.n	8006296 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061fe:	f7fb fb4b 	bl	8001898 <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	69ba      	ldr	r2, [r7, #24]
 800620a:	429a      	cmp	r2, r3
 800620c:	d302      	bcc.n	8006214 <UART_WaitOnFlagUntilTimeout+0x30>
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d101      	bne.n	8006218 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006214:	2303      	movs	r3, #3
 8006216:	e04e      	b.n	80062b6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f003 0304 	and.w	r3, r3, #4
 8006222:	2b00      	cmp	r3, #0
 8006224:	d037      	beq.n	8006296 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	2b80      	cmp	r3, #128	; 0x80
 800622a:	d034      	beq.n	8006296 <UART_WaitOnFlagUntilTimeout+0xb2>
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	2b40      	cmp	r3, #64	; 0x40
 8006230:	d031      	beq.n	8006296 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	69db      	ldr	r3, [r3, #28]
 8006238:	f003 0308 	and.w	r3, r3, #8
 800623c:	2b08      	cmp	r3, #8
 800623e:	d110      	bne.n	8006262 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2208      	movs	r2, #8
 8006246:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006248:	68f8      	ldr	r0, [r7, #12]
 800624a:	f000 f838 	bl	80062be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2208      	movs	r2, #8
 8006252:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2200      	movs	r2, #0
 800625a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e029      	b.n	80062b6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	69db      	ldr	r3, [r3, #28]
 8006268:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800626c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006270:	d111      	bne.n	8006296 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800627a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f000 f81e 	bl	80062be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2220      	movs	r2, #32
 8006286:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	e00f      	b.n	80062b6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	69da      	ldr	r2, [r3, #28]
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	4013      	ands	r3, r2
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	bf0c      	ite	eq
 80062a6:	2301      	moveq	r3, #1
 80062a8:	2300      	movne	r3, #0
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	461a      	mov	r2, r3
 80062ae:	79fb      	ldrb	r3, [r7, #7]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d0a0      	beq.n	80061f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062be:	b480      	push	{r7}
 80062c0:	b095      	sub	sp, #84	; 0x54
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ce:	e853 3f00 	ldrex	r3, [r3]
 80062d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80062d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	461a      	mov	r2, r3
 80062e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062e4:	643b      	str	r3, [r7, #64]	; 0x40
 80062e6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80062ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062ec:	e841 2300 	strex	r3, r2, [r1]
 80062f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d1e6      	bne.n	80062c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	3308      	adds	r3, #8
 80062fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006300:	6a3b      	ldr	r3, [r7, #32]
 8006302:	e853 3f00 	ldrex	r3, [r3]
 8006306:	61fb      	str	r3, [r7, #28]
   return(result);
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	f023 0301 	bic.w	r3, r3, #1
 800630e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	3308      	adds	r3, #8
 8006316:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006318:	62fa      	str	r2, [r7, #44]	; 0x2c
 800631a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800631c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800631e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006320:	e841 2300 	strex	r3, r2, [r1]
 8006324:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006328:	2b00      	cmp	r3, #0
 800632a:	d1e5      	bne.n	80062f8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006330:	2b01      	cmp	r3, #1
 8006332:	d118      	bne.n	8006366 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	e853 3f00 	ldrex	r3, [r3]
 8006340:	60bb      	str	r3, [r7, #8]
   return(result);
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	f023 0310 	bic.w	r3, r3, #16
 8006348:	647b      	str	r3, [r7, #68]	; 0x44
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	461a      	mov	r2, r3
 8006350:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006352:	61bb      	str	r3, [r7, #24]
 8006354:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006356:	6979      	ldr	r1, [r7, #20]
 8006358:	69ba      	ldr	r2, [r7, #24]
 800635a:	e841 2300 	strex	r3, r2, [r1]
 800635e:	613b      	str	r3, [r7, #16]
   return(result);
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d1e6      	bne.n	8006334 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2220      	movs	r2, #32
 800636a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	669a      	str	r2, [r3, #104]	; 0x68
}
 800637a:	bf00      	nop
 800637c:	3754      	adds	r7, #84	; 0x54
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr

08006386 <ugv_servoInitServo>:
#include "ugv_servo.h"


void ugv_servoInitServo(ugvServo_t *servoM){
 8006386:	b580      	push	{r7, lr}
 8006388:	b082      	sub	sp, #8
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(servoM->timerInstance, servoM->timerCh);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	891b      	ldrh	r3, [r3, #8]
 8006396:	4619      	mov	r1, r3
 8006398:	4610      	mov	r0, r2
 800639a:	f7fe faa9 	bl	80048f0 <HAL_TIM_PWM_Start>

	servoM->maxPeriod = (int) (servoM->timerARR)*(servoM->maxPulse/servoM->timerPeriod);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	895b      	ldrh	r3, [r3, #10]
 80063a2:	ee07 3a90 	vmov	s15, r3
 80063a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	ed93 6a04 	vldr	s12, [r3, #16]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	edd3 6a05 	vldr	s13, [r3, #20]
 80063b6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80063ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80063c2:	ee17 2a90 	vmov	r2, s15
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	61da      	str	r2, [r3, #28]
	servoM->minPeriod = (int) (servoM->timerARR)*(servoM->minPulse/servoM->timerPeriod);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	895b      	ldrh	r3, [r3, #10]
 80063ce:	ee07 3a90 	vmov	s15, r3
 80063d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	ed93 6a03 	vldr	s12, [r3, #12]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	edd3 6a05 	vldr	s13, [r3, #20]
 80063e2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80063e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80063ee:	ee17 2a90 	vmov	r2, s15
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	619a      	str	r2, [r3, #24]

	ugv_servoSetAngle(servoM, servoM->travelOffset);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80063fc:	eeb0 0a67 	vmov.f32	s0, s15
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 f804 	bl	800640e <ugv_servoSetAngle>
}
 8006406:	bf00      	nop
 8006408:	3708      	adds	r7, #8
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}

0800640e <ugv_servoSetAngle>:
/**
 *	Make the servo move to a specific angle
 * @param s
 * @param angle
 */
void ugv_servoSetAngle(ugvServo_t *servoM, float angle) {
 800640e:	b480      	push	{r7}
 8006410:	b085      	sub	sp, #20
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
 8006416:	ed87 0a00 	vstr	s0, [r7]
	float setAngle = angle + servoM->travelOffset;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8006420:	ed97 7a00 	vldr	s14, [r7]
 8006424:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006428:	edc7 7a03 	vstr	s15, [r7, #12]

	if ((setAngle) > servoM->maxLimit) {
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8006432:	ed97 7a03 	vldr	s14, [r7, #12]
 8006436:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800643a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800643e:	dd2d      	ble.n	800649c <ugv_servoSetAngle+0x8e>
		*servoM->timerCCRX = (long unsigned int) ((((servoM->maxLimit)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
				* (servoM->maxPeriod - servoM->minPeriod))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	69da      	ldr	r2, [r3, #28]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	1ad3      	subs	r3, r2, r3
 8006450:	ee07 3a90 	vmov	s15, r3
 8006454:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006458:	ee67 6a27 	vmul.f32	s13, s14, s15
				/ (servoM->travelAngle)) + servoM->minPeriod);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8006462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	699b      	ldr	r3, [r3, #24]
 800646a:	ee07 3a90 	vmov	s15, r3
 800646e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006472:	ee77 7a27 	vadd.f32	s15, s14, s15
		*servoM->timerCCRX = (long unsigned int) ((((servoM->maxLimit)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800647e:	ee17 2a90 	vmov	r2, s15
 8006482:	601a      	str	r2, [r3, #0]

		servoM->setPointAngle = servoM->maxLimit - servoM->travelOffset;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8006490:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	edc3 7a08 	vstr	s15, [r3, #32]
				* (servoM->maxPeriod - servoM->minPeriod))
				/ (servoM->travelAngle)) + servoM->minPeriod);
		servoM->setPointAngle = angle;
	}

}
 800649a:	e054      	b.n	8006546 <ugv_servoSetAngle+0x138>
	} else if ((setAngle) < servoM->minLimit) {
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80064a2:	ed97 7a03 	vldr	s14, [r7, #12]
 80064a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80064aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064ae:	d526      	bpl.n	80064fe <ugv_servoSetAngle+0xf0>
		*servoM->timerCCRX = (long unsigned int) ((((servoM->minLimit)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
				* (servoM->maxPeriod - servoM->minPeriod))
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	69da      	ldr	r2, [r3, #28]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	699b      	ldr	r3, [r3, #24]
 80064be:	1ad3      	subs	r3, r2, r3
 80064c0:	ee07 3a90 	vmov	s15, r3
 80064c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064c8:	ee67 6a27 	vmul.f32	s13, s14, s15
				/ (servoM->travelAngle)) + servoM->minPeriod);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80064d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	699b      	ldr	r3, [r3, #24]
 80064da:	ee07 3a90 	vmov	s15, r3
 80064de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064e2:	ee77 7a27 	vadd.f32	s15, s14, s15
		*servoM->timerCCRX = (long unsigned int) ((((servoM->minLimit)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064ee:	ee17 2a90 	vmov	r2, s15
 80064f2:	601a      	str	r2, [r3, #0]
		servoM->setPointAngle = servoM->minLimit;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	621a      	str	r2, [r3, #32]
}
 80064fc:	e023      	b.n	8006546 <ugv_servoSetAngle+0x138>
				* (servoM->maxPeriod - servoM->minPeriod))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	69da      	ldr	r2, [r3, #28]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	699b      	ldr	r3, [r3, #24]
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	ee07 3a90 	vmov	s15, r3
 800650c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006510:	edd7 7a03 	vldr	s15, [r7, #12]
 8006514:	ee67 6a27 	vmul.f32	s13, s14, s15
				/ (servoM->travelAngle)) + servoM->minPeriod);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800651e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	699b      	ldr	r3, [r3, #24]
 8006526:	ee07 3a90 	vmov	s15, r3
 800652a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800652e:	ee77 7a27 	vadd.f32	s15, s14, s15
		*servoM->timerCCRX = (long unsigned int) ((((setAngle)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800653a:	ee17 2a90 	vmov	r2, s15
 800653e:	601a      	str	r2, [r3, #0]
		servoM->setPointAngle = angle;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	683a      	ldr	r2, [r7, #0]
 8006544:	621a      	str	r2, [r3, #32]
}
 8006546:	bf00      	nop
 8006548:	3714      	adds	r7, #20
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
	...

08006554 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800655a:	4b87      	ldr	r3, [pc, #540]	; (8006778 <MX_LWIP_Init+0x224>)
 800655c:	22c0      	movs	r2, #192	; 0xc0
 800655e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8006560:	4b85      	ldr	r3, [pc, #532]	; (8006778 <MX_LWIP_Init+0x224>)
 8006562:	22a8      	movs	r2, #168	; 0xa8
 8006564:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 20;
 8006566:	4b84      	ldr	r3, [pc, #528]	; (8006778 <MX_LWIP_Init+0x224>)
 8006568:	2214      	movs	r2, #20
 800656a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 21;
 800656c:	4b82      	ldr	r3, [pc, #520]	; (8006778 <MX_LWIP_Init+0x224>)
 800656e:	2215      	movs	r2, #21
 8006570:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8006572:	4b82      	ldr	r3, [pc, #520]	; (800677c <MX_LWIP_Init+0x228>)
 8006574:	22ff      	movs	r2, #255	; 0xff
 8006576:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8006578:	4b80      	ldr	r3, [pc, #512]	; (800677c <MX_LWIP_Init+0x228>)
 800657a:	22ff      	movs	r2, #255	; 0xff
 800657c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800657e:	4b7f      	ldr	r3, [pc, #508]	; (800677c <MX_LWIP_Init+0x228>)
 8006580:	22ff      	movs	r2, #255	; 0xff
 8006582:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8006584:	4b7d      	ldr	r3, [pc, #500]	; (800677c <MX_LWIP_Init+0x228>)
 8006586:	2200      	movs	r2, #0
 8006588:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800658a:	4b7d      	ldr	r3, [pc, #500]	; (8006780 <MX_LWIP_Init+0x22c>)
 800658c:	22c0      	movs	r2, #192	; 0xc0
 800658e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8006590:	4b7b      	ldr	r3, [pc, #492]	; (8006780 <MX_LWIP_Init+0x22c>)
 8006592:	22a8      	movs	r2, #168	; 0xa8
 8006594:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 20;
 8006596:	4b7a      	ldr	r3, [pc, #488]	; (8006780 <MX_LWIP_Init+0x22c>)
 8006598:	2214      	movs	r2, #20
 800659a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800659c:	4b78      	ldr	r3, [pc, #480]	; (8006780 <MX_LWIP_Init+0x22c>)
 800659e:	2201      	movs	r2, #1
 80065a0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80065a2:	f000 fd11 	bl	8006fc8 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80065a6:	4b74      	ldr	r3, [pc, #464]	; (8006778 <MX_LWIP_Init+0x224>)
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	061a      	lsls	r2, r3, #24
 80065ac:	4b72      	ldr	r3, [pc, #456]	; (8006778 <MX_LWIP_Init+0x224>)
 80065ae:	785b      	ldrb	r3, [r3, #1]
 80065b0:	041b      	lsls	r3, r3, #16
 80065b2:	431a      	orrs	r2, r3
 80065b4:	4b70      	ldr	r3, [pc, #448]	; (8006778 <MX_LWIP_Init+0x224>)
 80065b6:	789b      	ldrb	r3, [r3, #2]
 80065b8:	021b      	lsls	r3, r3, #8
 80065ba:	4313      	orrs	r3, r2
 80065bc:	4a6e      	ldr	r2, [pc, #440]	; (8006778 <MX_LWIP_Init+0x224>)
 80065be:	78d2      	ldrb	r2, [r2, #3]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	061a      	lsls	r2, r3, #24
 80065c4:	4b6c      	ldr	r3, [pc, #432]	; (8006778 <MX_LWIP_Init+0x224>)
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	0619      	lsls	r1, r3, #24
 80065ca:	4b6b      	ldr	r3, [pc, #428]	; (8006778 <MX_LWIP_Init+0x224>)
 80065cc:	785b      	ldrb	r3, [r3, #1]
 80065ce:	041b      	lsls	r3, r3, #16
 80065d0:	4319      	orrs	r1, r3
 80065d2:	4b69      	ldr	r3, [pc, #420]	; (8006778 <MX_LWIP_Init+0x224>)
 80065d4:	789b      	ldrb	r3, [r3, #2]
 80065d6:	021b      	lsls	r3, r3, #8
 80065d8:	430b      	orrs	r3, r1
 80065da:	4967      	ldr	r1, [pc, #412]	; (8006778 <MX_LWIP_Init+0x224>)
 80065dc:	78c9      	ldrb	r1, [r1, #3]
 80065de:	430b      	orrs	r3, r1
 80065e0:	021b      	lsls	r3, r3, #8
 80065e2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80065e6:	431a      	orrs	r2, r3
 80065e8:	4b63      	ldr	r3, [pc, #396]	; (8006778 <MX_LWIP_Init+0x224>)
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	0619      	lsls	r1, r3, #24
 80065ee:	4b62      	ldr	r3, [pc, #392]	; (8006778 <MX_LWIP_Init+0x224>)
 80065f0:	785b      	ldrb	r3, [r3, #1]
 80065f2:	041b      	lsls	r3, r3, #16
 80065f4:	4319      	orrs	r1, r3
 80065f6:	4b60      	ldr	r3, [pc, #384]	; (8006778 <MX_LWIP_Init+0x224>)
 80065f8:	789b      	ldrb	r3, [r3, #2]
 80065fa:	021b      	lsls	r3, r3, #8
 80065fc:	430b      	orrs	r3, r1
 80065fe:	495e      	ldr	r1, [pc, #376]	; (8006778 <MX_LWIP_Init+0x224>)
 8006600:	78c9      	ldrb	r1, [r1, #3]
 8006602:	430b      	orrs	r3, r1
 8006604:	0a1b      	lsrs	r3, r3, #8
 8006606:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800660a:	431a      	orrs	r2, r3
 800660c:	4b5a      	ldr	r3, [pc, #360]	; (8006778 <MX_LWIP_Init+0x224>)
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	0619      	lsls	r1, r3, #24
 8006612:	4b59      	ldr	r3, [pc, #356]	; (8006778 <MX_LWIP_Init+0x224>)
 8006614:	785b      	ldrb	r3, [r3, #1]
 8006616:	041b      	lsls	r3, r3, #16
 8006618:	4319      	orrs	r1, r3
 800661a:	4b57      	ldr	r3, [pc, #348]	; (8006778 <MX_LWIP_Init+0x224>)
 800661c:	789b      	ldrb	r3, [r3, #2]
 800661e:	021b      	lsls	r3, r3, #8
 8006620:	430b      	orrs	r3, r1
 8006622:	4955      	ldr	r1, [pc, #340]	; (8006778 <MX_LWIP_Init+0x224>)
 8006624:	78c9      	ldrb	r1, [r1, #3]
 8006626:	430b      	orrs	r3, r1
 8006628:	0e1b      	lsrs	r3, r3, #24
 800662a:	4313      	orrs	r3, r2
 800662c:	4a55      	ldr	r2, [pc, #340]	; (8006784 <MX_LWIP_Init+0x230>)
 800662e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8006630:	4b52      	ldr	r3, [pc, #328]	; (800677c <MX_LWIP_Init+0x228>)
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	061a      	lsls	r2, r3, #24
 8006636:	4b51      	ldr	r3, [pc, #324]	; (800677c <MX_LWIP_Init+0x228>)
 8006638:	785b      	ldrb	r3, [r3, #1]
 800663a:	041b      	lsls	r3, r3, #16
 800663c:	431a      	orrs	r2, r3
 800663e:	4b4f      	ldr	r3, [pc, #316]	; (800677c <MX_LWIP_Init+0x228>)
 8006640:	789b      	ldrb	r3, [r3, #2]
 8006642:	021b      	lsls	r3, r3, #8
 8006644:	4313      	orrs	r3, r2
 8006646:	4a4d      	ldr	r2, [pc, #308]	; (800677c <MX_LWIP_Init+0x228>)
 8006648:	78d2      	ldrb	r2, [r2, #3]
 800664a:	4313      	orrs	r3, r2
 800664c:	061a      	lsls	r2, r3, #24
 800664e:	4b4b      	ldr	r3, [pc, #300]	; (800677c <MX_LWIP_Init+0x228>)
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	0619      	lsls	r1, r3, #24
 8006654:	4b49      	ldr	r3, [pc, #292]	; (800677c <MX_LWIP_Init+0x228>)
 8006656:	785b      	ldrb	r3, [r3, #1]
 8006658:	041b      	lsls	r3, r3, #16
 800665a:	4319      	orrs	r1, r3
 800665c:	4b47      	ldr	r3, [pc, #284]	; (800677c <MX_LWIP_Init+0x228>)
 800665e:	789b      	ldrb	r3, [r3, #2]
 8006660:	021b      	lsls	r3, r3, #8
 8006662:	430b      	orrs	r3, r1
 8006664:	4945      	ldr	r1, [pc, #276]	; (800677c <MX_LWIP_Init+0x228>)
 8006666:	78c9      	ldrb	r1, [r1, #3]
 8006668:	430b      	orrs	r3, r1
 800666a:	021b      	lsls	r3, r3, #8
 800666c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006670:	431a      	orrs	r2, r3
 8006672:	4b42      	ldr	r3, [pc, #264]	; (800677c <MX_LWIP_Init+0x228>)
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	0619      	lsls	r1, r3, #24
 8006678:	4b40      	ldr	r3, [pc, #256]	; (800677c <MX_LWIP_Init+0x228>)
 800667a:	785b      	ldrb	r3, [r3, #1]
 800667c:	041b      	lsls	r3, r3, #16
 800667e:	4319      	orrs	r1, r3
 8006680:	4b3e      	ldr	r3, [pc, #248]	; (800677c <MX_LWIP_Init+0x228>)
 8006682:	789b      	ldrb	r3, [r3, #2]
 8006684:	021b      	lsls	r3, r3, #8
 8006686:	430b      	orrs	r3, r1
 8006688:	493c      	ldr	r1, [pc, #240]	; (800677c <MX_LWIP_Init+0x228>)
 800668a:	78c9      	ldrb	r1, [r1, #3]
 800668c:	430b      	orrs	r3, r1
 800668e:	0a1b      	lsrs	r3, r3, #8
 8006690:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006694:	431a      	orrs	r2, r3
 8006696:	4b39      	ldr	r3, [pc, #228]	; (800677c <MX_LWIP_Init+0x228>)
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	0619      	lsls	r1, r3, #24
 800669c:	4b37      	ldr	r3, [pc, #220]	; (800677c <MX_LWIP_Init+0x228>)
 800669e:	785b      	ldrb	r3, [r3, #1]
 80066a0:	041b      	lsls	r3, r3, #16
 80066a2:	4319      	orrs	r1, r3
 80066a4:	4b35      	ldr	r3, [pc, #212]	; (800677c <MX_LWIP_Init+0x228>)
 80066a6:	789b      	ldrb	r3, [r3, #2]
 80066a8:	021b      	lsls	r3, r3, #8
 80066aa:	430b      	orrs	r3, r1
 80066ac:	4933      	ldr	r1, [pc, #204]	; (800677c <MX_LWIP_Init+0x228>)
 80066ae:	78c9      	ldrb	r1, [r1, #3]
 80066b0:	430b      	orrs	r3, r1
 80066b2:	0e1b      	lsrs	r3, r3, #24
 80066b4:	4313      	orrs	r3, r2
 80066b6:	4a34      	ldr	r2, [pc, #208]	; (8006788 <MX_LWIP_Init+0x234>)
 80066b8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80066ba:	4b31      	ldr	r3, [pc, #196]	; (8006780 <MX_LWIP_Init+0x22c>)
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	061a      	lsls	r2, r3, #24
 80066c0:	4b2f      	ldr	r3, [pc, #188]	; (8006780 <MX_LWIP_Init+0x22c>)
 80066c2:	785b      	ldrb	r3, [r3, #1]
 80066c4:	041b      	lsls	r3, r3, #16
 80066c6:	431a      	orrs	r2, r3
 80066c8:	4b2d      	ldr	r3, [pc, #180]	; (8006780 <MX_LWIP_Init+0x22c>)
 80066ca:	789b      	ldrb	r3, [r3, #2]
 80066cc:	021b      	lsls	r3, r3, #8
 80066ce:	4313      	orrs	r3, r2
 80066d0:	4a2b      	ldr	r2, [pc, #172]	; (8006780 <MX_LWIP_Init+0x22c>)
 80066d2:	78d2      	ldrb	r2, [r2, #3]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	061a      	lsls	r2, r3, #24
 80066d8:	4b29      	ldr	r3, [pc, #164]	; (8006780 <MX_LWIP_Init+0x22c>)
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	0619      	lsls	r1, r3, #24
 80066de:	4b28      	ldr	r3, [pc, #160]	; (8006780 <MX_LWIP_Init+0x22c>)
 80066e0:	785b      	ldrb	r3, [r3, #1]
 80066e2:	041b      	lsls	r3, r3, #16
 80066e4:	4319      	orrs	r1, r3
 80066e6:	4b26      	ldr	r3, [pc, #152]	; (8006780 <MX_LWIP_Init+0x22c>)
 80066e8:	789b      	ldrb	r3, [r3, #2]
 80066ea:	021b      	lsls	r3, r3, #8
 80066ec:	430b      	orrs	r3, r1
 80066ee:	4924      	ldr	r1, [pc, #144]	; (8006780 <MX_LWIP_Init+0x22c>)
 80066f0:	78c9      	ldrb	r1, [r1, #3]
 80066f2:	430b      	orrs	r3, r1
 80066f4:	021b      	lsls	r3, r3, #8
 80066f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80066fa:	431a      	orrs	r2, r3
 80066fc:	4b20      	ldr	r3, [pc, #128]	; (8006780 <MX_LWIP_Init+0x22c>)
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	0619      	lsls	r1, r3, #24
 8006702:	4b1f      	ldr	r3, [pc, #124]	; (8006780 <MX_LWIP_Init+0x22c>)
 8006704:	785b      	ldrb	r3, [r3, #1]
 8006706:	041b      	lsls	r3, r3, #16
 8006708:	4319      	orrs	r1, r3
 800670a:	4b1d      	ldr	r3, [pc, #116]	; (8006780 <MX_LWIP_Init+0x22c>)
 800670c:	789b      	ldrb	r3, [r3, #2]
 800670e:	021b      	lsls	r3, r3, #8
 8006710:	430b      	orrs	r3, r1
 8006712:	491b      	ldr	r1, [pc, #108]	; (8006780 <MX_LWIP_Init+0x22c>)
 8006714:	78c9      	ldrb	r1, [r1, #3]
 8006716:	430b      	orrs	r3, r1
 8006718:	0a1b      	lsrs	r3, r3, #8
 800671a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800671e:	431a      	orrs	r2, r3
 8006720:	4b17      	ldr	r3, [pc, #92]	; (8006780 <MX_LWIP_Init+0x22c>)
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	0619      	lsls	r1, r3, #24
 8006726:	4b16      	ldr	r3, [pc, #88]	; (8006780 <MX_LWIP_Init+0x22c>)
 8006728:	785b      	ldrb	r3, [r3, #1]
 800672a:	041b      	lsls	r3, r3, #16
 800672c:	4319      	orrs	r1, r3
 800672e:	4b14      	ldr	r3, [pc, #80]	; (8006780 <MX_LWIP_Init+0x22c>)
 8006730:	789b      	ldrb	r3, [r3, #2]
 8006732:	021b      	lsls	r3, r3, #8
 8006734:	430b      	orrs	r3, r1
 8006736:	4912      	ldr	r1, [pc, #72]	; (8006780 <MX_LWIP_Init+0x22c>)
 8006738:	78c9      	ldrb	r1, [r1, #3]
 800673a:	430b      	orrs	r3, r1
 800673c:	0e1b      	lsrs	r3, r3, #24
 800673e:	4313      	orrs	r3, r2
 8006740:	4a12      	ldr	r2, [pc, #72]	; (800678c <MX_LWIP_Init+0x238>)
 8006742:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8006744:	4b12      	ldr	r3, [pc, #72]	; (8006790 <MX_LWIP_Init+0x23c>)
 8006746:	9302      	str	r3, [sp, #8]
 8006748:	4b12      	ldr	r3, [pc, #72]	; (8006794 <MX_LWIP_Init+0x240>)
 800674a:	9301      	str	r3, [sp, #4]
 800674c:	2300      	movs	r3, #0
 800674e:	9300      	str	r3, [sp, #0]
 8006750:	4b0e      	ldr	r3, [pc, #56]	; (800678c <MX_LWIP_Init+0x238>)
 8006752:	4a0d      	ldr	r2, [pc, #52]	; (8006788 <MX_LWIP_Init+0x234>)
 8006754:	490b      	ldr	r1, [pc, #44]	; (8006784 <MX_LWIP_Init+0x230>)
 8006756:	4810      	ldr	r0, [pc, #64]	; (8006798 <MX_LWIP_Init+0x244>)
 8006758:	f001 f922 	bl	80079a0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800675c:	480e      	ldr	r0, [pc, #56]	; (8006798 <MX_LWIP_Init+0x244>)
 800675e:	f001 fad1 	bl	8007d04 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8006762:	480d      	ldr	r0, [pc, #52]	; (8006798 <MX_LWIP_Init+0x244>)
 8006764:	f001 fade 	bl	8007d24 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8006768:	490c      	ldr	r1, [pc, #48]	; (800679c <MX_LWIP_Init+0x248>)
 800676a:	480b      	ldr	r0, [pc, #44]	; (8006798 <MX_LWIP_Init+0x244>)
 800676c:	f001 fbdc 	bl	8007f28 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8006770:	bf00      	nop
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	20000558 	.word	0x20000558
 800677c:	2000055c 	.word	0x2000055c
 8006780:	20000560 	.word	0x20000560
 8006784:	2000054c 	.word	0x2000054c
 8006788:	20000550 	.word	0x20000550
 800678c:	20000554 	.word	0x20000554
 8006790:	08010ab1 	.word	0x08010ab1
 8006794:	08006ab5 	.word	0x08006ab5
 8006798:	20000518 	.word	0x20000518
 800679c:	080067a1 	.word	0x080067a1

080067a0 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80067a8:	bf00      	nop
 80067aa:	370c      	adds	r7, #12
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <SCB_InvalidateDCache_by_Addr>:
{
 80067b4:	b480      	push	{r7}
 80067b6:	b087      	sub	sp, #28
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 80067c6:	2320      	movs	r3, #32
 80067c8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80067ca:	f3bf 8f4f 	dsb	sy
}
 80067ce:	bf00      	nop
    while (op_size > 0) {
 80067d0:	e00b      	b.n	80067ea <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 80067d2:	4a0d      	ldr	r2, [pc, #52]	; (8006808 <SCB_InvalidateDCache_by_Addr+0x54>)
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	693a      	ldr	r2, [r7, #16]
 80067de:	4413      	add	r3, r2
 80067e0:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	dcf0      	bgt.n	80067d2 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 80067f0:	f3bf 8f4f 	dsb	sy
}
 80067f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80067f6:	f3bf 8f6f 	isb	sy
}
 80067fa:	bf00      	nop
}
 80067fc:	bf00      	nop
 80067fe:	371c      	adds	r7, #28
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr
 8006808:	e000ed00 	.word	0xe000ed00

0800680c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8006814:	2300      	movs	r3, #0
 8006816:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8006818:	4b40      	ldr	r3, [pc, #256]	; (800691c <low_level_init+0x110>)
 800681a:	4a41      	ldr	r2, [pc, #260]	; (8006920 <low_level_init+0x114>)
 800681c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800681e:	2300      	movs	r3, #0
 8006820:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8006822:	2380      	movs	r3, #128	; 0x80
 8006824:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8006826:	23e1      	movs	r3, #225	; 0xe1
 8006828:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800682a:	2300      	movs	r3, #0
 800682c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800682e:	2300      	movs	r3, #0
 8006830:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x20;
 8006832:	2320      	movs	r3, #32
 8006834:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8006836:	4a39      	ldr	r2, [pc, #228]	; (800691c <low_level_init+0x110>)
 8006838:	f107 0308 	add.w	r3, r7, #8
 800683c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800683e:	4b37      	ldr	r3, [pc, #220]	; (800691c <low_level_init+0x110>)
 8006840:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006844:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8006846:	4b35      	ldr	r3, [pc, #212]	; (800691c <low_level_init+0x110>)
 8006848:	4a36      	ldr	r2, [pc, #216]	; (8006924 <low_level_init+0x118>)
 800684a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800684c:	4b33      	ldr	r3, [pc, #204]	; (800691c <low_level_init+0x110>)
 800684e:	4a36      	ldr	r2, [pc, #216]	; (8006928 <low_level_init+0x11c>)
 8006850:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8006852:	4b32      	ldr	r3, [pc, #200]	; (800691c <low_level_init+0x110>)
 8006854:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8006858:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800685a:	4830      	ldr	r0, [pc, #192]	; (800691c <low_level_init+0x110>)
 800685c:	f7fb f9d6 	bl	8001c0c <HAL_ETH_Init>
 8006860:	4603      	mov	r3, r0
 8006862:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8006864:	2238      	movs	r2, #56	; 0x38
 8006866:	2100      	movs	r1, #0
 8006868:	4830      	ldr	r0, [pc, #192]	; (800692c <low_level_init+0x120>)
 800686a:	f00b f93a 	bl	8011ae2 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800686e:	4b2f      	ldr	r3, [pc, #188]	; (800692c <low_level_init+0x120>)
 8006870:	2221      	movs	r2, #33	; 0x21
 8006872:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8006874:	4b2d      	ldr	r3, [pc, #180]	; (800692c <low_level_init+0x120>)
 8006876:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800687a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800687c:	4b2b      	ldr	r3, [pc, #172]	; (800692c <low_level_init+0x120>)
 800687e:	2200      	movs	r2, #0
 8006880:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8006882:	482b      	ldr	r0, [pc, #172]	; (8006930 <low_level_init+0x124>)
 8006884:	f000 ff54 	bl	8007730 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2206      	movs	r2, #6
 800688c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8006890:	4b22      	ldr	r3, [pc, #136]	; (800691c <low_level_init+0x110>)
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	781a      	ldrb	r2, [r3, #0]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800689c:	4b1f      	ldr	r3, [pc, #124]	; (800691c <low_level_init+0x110>)
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	785a      	ldrb	r2, [r3, #1]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80068a8:	4b1c      	ldr	r3, [pc, #112]	; (800691c <low_level_init+0x110>)
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	789a      	ldrb	r2, [r3, #2]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80068b4:	4b19      	ldr	r3, [pc, #100]	; (800691c <low_level_init+0x110>)
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	78da      	ldrb	r2, [r3, #3]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80068c0:	4b16      	ldr	r3, [pc, #88]	; (800691c <low_level_init+0x110>)
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	791a      	ldrb	r2, [r3, #4]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80068cc:	4b13      	ldr	r3, [pc, #76]	; (800691c <low_level_init+0x110>)
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	795a      	ldrb	r2, [r3, #5]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80068de:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80068e6:	f043 030a 	orr.w	r3, r3, #10
 80068ea:	b2da      	uxtb	r2, r3
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80068f2:	4910      	ldr	r1, [pc, #64]	; (8006934 <low_level_init+0x128>)
 80068f4:	4810      	ldr	r0, [pc, #64]	; (8006938 <low_level_init+0x12c>)
 80068f6:	f7fa fe6e 	bl	80015d6 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 80068fa:	480f      	ldr	r0, [pc, #60]	; (8006938 <low_level_init+0x12c>)
 80068fc:	f7fa fe9d 	bl	800163a <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8006900:	7bfb      	ldrb	r3, [r7, #15]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d103      	bne.n	800690e <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 fa32 	bl	8006d70 <ethernet_link_check_state>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 800690c:	e001      	b.n	8006912 <low_level_init+0x106>
    Error_Handler();
 800690e:	f7fa fc05 	bl	800111c <Error_Handler>
}
 8006912:	bf00      	nop
 8006914:	3710      	adds	r7, #16
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	20004ef0 	.word	0x20004ef0
 8006920:	40028000 	.word	0x40028000
 8006924:	20000294 	.word	0x20000294
 8006928:	200001f4 	.word	0x200001f4
 800692c:	20004fa0 	.word	0x20004fa0
 8006930:	080163fc 	.word	0x080163fc
 8006934:	2000000c 	.word	0x2000000c
 8006938:	20004fd8 	.word	0x20004fd8

0800693c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b092      	sub	sp, #72	; 0x48
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8006946:	2300      	movs	r3, #0
 8006948:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800694a:	2300      	movs	r3, #0
 800694c:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800694e:	2300      	movs	r3, #0
 8006950:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8006954:	f107 030c 	add.w	r3, r7, #12
 8006958:	2230      	movs	r2, #48	; 0x30
 800695a:	2100      	movs	r1, #0
 800695c:	4618      	mov	r0, r3
 800695e:	f00b f8c0 	bl	8011ae2 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8006962:	f107 030c 	add.w	r3, r7, #12
 8006966:	2230      	movs	r2, #48	; 0x30
 8006968:	2100      	movs	r1, #0
 800696a:	4618      	mov	r0, r3
 800696c:	f00b f8b9 	bl	8011ae2 <memset>

  for(q = p; q != NULL; q = q->next)
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	643b      	str	r3, [r7, #64]	; 0x40
 8006974:	e045      	b.n	8006a02 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8006976:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006978:	2b03      	cmp	r3, #3
 800697a:	d902      	bls.n	8006982 <low_level_output+0x46>
      return ERR_IF;
 800697c:	f06f 030b 	mvn.w	r3, #11
 8006980:	e055      	b.n	8006a2e <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8006982:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006984:	6859      	ldr	r1, [r3, #4]
 8006986:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006988:	4613      	mov	r3, r2
 800698a:	005b      	lsls	r3, r3, #1
 800698c:	4413      	add	r3, r2
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	3348      	adds	r3, #72	; 0x48
 8006992:	443b      	add	r3, r7
 8006994:	3b3c      	subs	r3, #60	; 0x3c
 8006996:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8006998:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800699a:	895b      	ldrh	r3, [r3, #10]
 800699c:	4619      	mov	r1, r3
 800699e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069a0:	4613      	mov	r3, r2
 80069a2:	005b      	lsls	r3, r3, #1
 80069a4:	4413      	add	r3, r2
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	3348      	adds	r3, #72	; 0x48
 80069aa:	443b      	add	r3, r7
 80069ac:	3b38      	subs	r3, #56	; 0x38
 80069ae:	6019      	str	r1, [r3, #0]

    if(i>0)
 80069b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d011      	beq.n	80069da <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80069b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069b8:	1e5a      	subs	r2, r3, #1
 80069ba:	f107 000c 	add.w	r0, r7, #12
 80069be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80069c0:	460b      	mov	r3, r1
 80069c2:	005b      	lsls	r3, r3, #1
 80069c4:	440b      	add	r3, r1
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	18c1      	adds	r1, r0, r3
 80069ca:	4613      	mov	r3, r2
 80069cc:	005b      	lsls	r3, r3, #1
 80069ce:	4413      	add	r3, r2
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	3348      	adds	r3, #72	; 0x48
 80069d4:	443b      	add	r3, r7
 80069d6:	3b34      	subs	r3, #52	; 0x34
 80069d8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80069da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d109      	bne.n	80069f6 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80069e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069e4:	4613      	mov	r3, r2
 80069e6:	005b      	lsls	r3, r3, #1
 80069e8:	4413      	add	r3, r2
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	3348      	adds	r3, #72	; 0x48
 80069ee:	443b      	add	r3, r7
 80069f0:	3b34      	subs	r3, #52	; 0x34
 80069f2:	2200      	movs	r2, #0
 80069f4:	601a      	str	r2, [r3, #0]
    }

    i++;
 80069f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069f8:	3301      	adds	r3, #1
 80069fa:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80069fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	643b      	str	r3, [r7, #64]	; 0x40
 8006a02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d1b6      	bne.n	8006976 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	891b      	ldrh	r3, [r3, #8]
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	4b0a      	ldr	r3, [pc, #40]	; (8006a38 <low_level_output+0xfc>)
 8006a10:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8006a12:	4a09      	ldr	r2, [pc, #36]	; (8006a38 <low_level_output+0xfc>)
 8006a14:	f107 030c 	add.w	r3, r7, #12
 8006a18:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8006a1a:	4a07      	ldr	r2, [pc, #28]	; (8006a38 <low_level_output+0xfc>)
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8006a20:	2214      	movs	r2, #20
 8006a22:	4905      	ldr	r1, [pc, #20]	; (8006a38 <low_level_output+0xfc>)
 8006a24:	4805      	ldr	r0, [pc, #20]	; (8006a3c <low_level_output+0x100>)
 8006a26:	f7fb fa43 	bl	8001eb0 <HAL_ETH_Transmit>

  return errval;
 8006a2a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3748      	adds	r7, #72	; 0x48
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	20004fa0 	.word	0x20004fa0
 8006a3c:	20004ef0 	.word	0x20004ef0

08006a40 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8006a4c:	4b07      	ldr	r3, [pc, #28]	; (8006a6c <low_level_input+0x2c>)
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d105      	bne.n	8006a60 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8006a54:	f107 030c 	add.w	r3, r7, #12
 8006a58:	4619      	mov	r1, r3
 8006a5a:	4805      	ldr	r0, [pc, #20]	; (8006a70 <low_level_input+0x30>)
 8006a5c:	f7fb fabc 	bl	8001fd8 <HAL_ETH_ReadData>
  }

  return p;
 8006a60:	68fb      	ldr	r3, [r7, #12]
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	20004eec 	.word	0x20004eec
 8006a70:	20004ef0 	.word	0x20004ef0

08006a74 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f7ff ffdd 	bl	8006a40 <low_level_input>
 8006a86:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00a      	beq.n	8006aa4 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	6879      	ldr	r1, [r7, #4]
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	4798      	blx	r3
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d002      	beq.n	8006aa4 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	f001 fdc2 	bl	8008628 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d1ea      	bne.n	8006a80 <ethernetif_input+0xc>
}
 8006aaa:	bf00      	nop
 8006aac:	bf00      	nop
 8006aae:	3710      	adds	r7, #16
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d106      	bne.n	8006ad0 <ethernetif_init+0x1c>
 8006ac2:	4b0e      	ldr	r3, [pc, #56]	; (8006afc <ethernetif_init+0x48>)
 8006ac4:	f240 127b 	movw	r2, #379	; 0x17b
 8006ac8:	490d      	ldr	r1, [pc, #52]	; (8006b00 <ethernetif_init+0x4c>)
 8006aca:	480e      	ldr	r0, [pc, #56]	; (8006b04 <ethernetif_init+0x50>)
 8006acc:	f00a ffa4 	bl	8011a18 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2273      	movs	r2, #115	; 0x73
 8006ad4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2274      	movs	r2, #116	; 0x74
 8006adc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a09      	ldr	r2, [pc, #36]	; (8006b08 <ethernetif_init+0x54>)
 8006ae4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4a08      	ldr	r2, [pc, #32]	; (8006b0c <ethernetif_init+0x58>)
 8006aea:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f7ff fe8d 	bl	800680c <low_level_init>

  return ERR_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3708      	adds	r7, #8
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	08013a04 	.word	0x08013a04
 8006b00:	08013a20 	.word	0x08013a20
 8006b04:	08013a30 	.word	0x08013a30
 8006b08:	0800ef69 	.word	0x0800ef69
 8006b0c:	0800693d 	.word	0x0800693d

08006b10 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8006b1c:	68f9      	ldr	r1, [r7, #12]
 8006b1e:	4807      	ldr	r0, [pc, #28]	; (8006b3c <pbuf_free_custom+0x2c>)
 8006b20:	f000 fee8 	bl	80078f4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8006b24:	4b06      	ldr	r3, [pc, #24]	; (8006b40 <pbuf_free_custom+0x30>)
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d102      	bne.n	8006b32 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8006b2c:	4b04      	ldr	r3, [pc, #16]	; (8006b40 <pbuf_free_custom+0x30>)
 8006b2e:	2200      	movs	r2, #0
 8006b30:	701a      	strb	r2, [r3, #0]
  }
}
 8006b32:	bf00      	nop
 8006b34:	3710      	adds	r7, #16
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	080163fc 	.word	0x080163fc
 8006b40:	20004eec 	.word	0x20004eec

08006b44 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006b48:	f7fa fea6 	bl	8001898 <HAL_GetTick>
 8006b4c:	4603      	mov	r3, r0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	bd80      	pop	{r7, pc}
	...

08006b54 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b08e      	sub	sp, #56	; 0x38
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b60:	2200      	movs	r2, #0
 8006b62:	601a      	str	r2, [r3, #0]
 8006b64:	605a      	str	r2, [r3, #4]
 8006b66:	609a      	str	r2, [r3, #8]
 8006b68:	60da      	str	r2, [r3, #12]
 8006b6a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a52      	ldr	r2, [pc, #328]	; (8006cbc <HAL_ETH_MspInit+0x168>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	f040 809e 	bne.w	8006cb4 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8006b78:	4b51      	ldr	r3, [pc, #324]	; (8006cc0 <HAL_ETH_MspInit+0x16c>)
 8006b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b7c:	4a50      	ldr	r2, [pc, #320]	; (8006cc0 <HAL_ETH_MspInit+0x16c>)
 8006b7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006b82:	6313      	str	r3, [r2, #48]	; 0x30
 8006b84:	4b4e      	ldr	r3, [pc, #312]	; (8006cc0 <HAL_ETH_MspInit+0x16c>)
 8006b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b8c:	623b      	str	r3, [r7, #32]
 8006b8e:	6a3b      	ldr	r3, [r7, #32]
 8006b90:	4b4b      	ldr	r3, [pc, #300]	; (8006cc0 <HAL_ETH_MspInit+0x16c>)
 8006b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b94:	4a4a      	ldr	r2, [pc, #296]	; (8006cc0 <HAL_ETH_MspInit+0x16c>)
 8006b96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006b9a:	6313      	str	r3, [r2, #48]	; 0x30
 8006b9c:	4b48      	ldr	r3, [pc, #288]	; (8006cc0 <HAL_ETH_MspInit+0x16c>)
 8006b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006ba4:	61fb      	str	r3, [r7, #28]
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	4b45      	ldr	r3, [pc, #276]	; (8006cc0 <HAL_ETH_MspInit+0x16c>)
 8006baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bac:	4a44      	ldr	r2, [pc, #272]	; (8006cc0 <HAL_ETH_MspInit+0x16c>)
 8006bae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006bb2:	6313      	str	r3, [r2, #48]	; 0x30
 8006bb4:	4b42      	ldr	r3, [pc, #264]	; (8006cc0 <HAL_ETH_MspInit+0x16c>)
 8006bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bbc:	61bb      	str	r3, [r7, #24]
 8006bbe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006bc0:	4b3f      	ldr	r3, [pc, #252]	; (8006cc0 <HAL_ETH_MspInit+0x16c>)
 8006bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc4:	4a3e      	ldr	r2, [pc, #248]	; (8006cc0 <HAL_ETH_MspInit+0x16c>)
 8006bc6:	f043 0304 	orr.w	r3, r3, #4
 8006bca:	6313      	str	r3, [r2, #48]	; 0x30
 8006bcc:	4b3c      	ldr	r3, [pc, #240]	; (8006cc0 <HAL_ETH_MspInit+0x16c>)
 8006bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd0:	f003 0304 	and.w	r3, r3, #4
 8006bd4:	617b      	str	r3, [r7, #20]
 8006bd6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006bd8:	4b39      	ldr	r3, [pc, #228]	; (8006cc0 <HAL_ETH_MspInit+0x16c>)
 8006bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bdc:	4a38      	ldr	r2, [pc, #224]	; (8006cc0 <HAL_ETH_MspInit+0x16c>)
 8006bde:	f043 0301 	orr.w	r3, r3, #1
 8006be2:	6313      	str	r3, [r2, #48]	; 0x30
 8006be4:	4b36      	ldr	r3, [pc, #216]	; (8006cc0 <HAL_ETH_MspInit+0x16c>)
 8006be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be8:	f003 0301 	and.w	r3, r3, #1
 8006bec:	613b      	str	r3, [r7, #16]
 8006bee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006bf0:	4b33      	ldr	r3, [pc, #204]	; (8006cc0 <HAL_ETH_MspInit+0x16c>)
 8006bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf4:	4a32      	ldr	r2, [pc, #200]	; (8006cc0 <HAL_ETH_MspInit+0x16c>)
 8006bf6:	f043 0302 	orr.w	r3, r3, #2
 8006bfa:	6313      	str	r3, [r2, #48]	; 0x30
 8006bfc:	4b30      	ldr	r3, [pc, #192]	; (8006cc0 <HAL_ETH_MspInit+0x16c>)
 8006bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c00:	f003 0302 	and.w	r3, r3, #2
 8006c04:	60fb      	str	r3, [r7, #12]
 8006c06:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006c08:	4b2d      	ldr	r3, [pc, #180]	; (8006cc0 <HAL_ETH_MspInit+0x16c>)
 8006c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c0c:	4a2c      	ldr	r2, [pc, #176]	; (8006cc0 <HAL_ETH_MspInit+0x16c>)
 8006c0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c12:	6313      	str	r3, [r2, #48]	; 0x30
 8006c14:	4b2a      	ldr	r3, [pc, #168]	; (8006cc0 <HAL_ETH_MspInit+0x16c>)
 8006c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c1c:	60bb      	str	r3, [r7, #8]
 8006c1e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8006c20:	2332      	movs	r3, #50	; 0x32
 8006c22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c24:	2302      	movs	r3, #2
 8006c26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006c30:	230b      	movs	r3, #11
 8006c32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006c34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c38:	4619      	mov	r1, r3
 8006c3a:	4822      	ldr	r0, [pc, #136]	; (8006cc4 <HAL_ETH_MspInit+0x170>)
 8006c3c:	f7fc f9fc 	bl	8003038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8006c40:	2386      	movs	r3, #134	; 0x86
 8006c42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c44:	2302      	movs	r3, #2
 8006c46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c4c:	2303      	movs	r3, #3
 8006c4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006c50:	230b      	movs	r3, #11
 8006c52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c58:	4619      	mov	r1, r3
 8006c5a:	481b      	ldr	r0, [pc, #108]	; (8006cc8 <HAL_ETH_MspInit+0x174>)
 8006c5c:	f7fc f9ec 	bl	8003038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8006c60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006c64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c66:	2302      	movs	r3, #2
 8006c68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006c72:	230b      	movs	r3, #11
 8006c74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8006c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	4813      	ldr	r0, [pc, #76]	; (8006ccc <HAL_ETH_MspInit+0x178>)
 8006c7e:	f7fc f9db 	bl	8003038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8006c82:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8006c86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c88:	2302      	movs	r3, #2
 8006c8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c90:	2303      	movs	r3, #3
 8006c92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006c94:	230b      	movs	r3, #11
 8006c96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	480c      	ldr	r0, [pc, #48]	; (8006cd0 <HAL_ETH_MspInit+0x17c>)
 8006ca0:	f7fc f9ca 	bl	8003038 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	2100      	movs	r1, #0
 8006ca8:	203d      	movs	r0, #61	; 0x3d
 8006caa:	f7fa ff00 	bl	8001aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8006cae:	203d      	movs	r0, #61	; 0x3d
 8006cb0:	f7fa ff19 	bl	8001ae6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006cb4:	bf00      	nop
 8006cb6:	3738      	adds	r7, #56	; 0x38
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}
 8006cbc:	40028000 	.word	0x40028000
 8006cc0:	40023800 	.word	0x40023800
 8006cc4:	40020800 	.word	0x40020800
 8006cc8:	40020000 	.word	0x40020000
 8006ccc:	40020400 	.word	0x40020400
 8006cd0:	40021800 	.word	0x40021800

08006cd4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8006cd8:	4802      	ldr	r0, [pc, #8]	; (8006ce4 <ETH_PHY_IO_Init+0x10>)
 8006cda:	f7fb fd4b 	bl	8002774 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	20004ef0 	.word	0x20004ef0

08006ce8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	af00      	add	r7, sp, #0
  return 0;
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	68ba      	ldr	r2, [r7, #8]
 8006d08:	68f9      	ldr	r1, [r7, #12]
 8006d0a:	4807      	ldr	r0, [pc, #28]	; (8006d28 <ETH_PHY_IO_ReadReg+0x30>)
 8006d0c:	f7fb fb8c 	bl	8002428 <HAL_ETH_ReadPHYRegister>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d002      	beq.n	8006d1c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8006d16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d1a:	e000      	b.n	8006d1e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8006d1c:	2300      	movs	r3, #0
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3710      	adds	r7, #16
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	20004ef0 	.word	0x20004ef0

08006d2c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	68ba      	ldr	r2, [r7, #8]
 8006d3c:	68f9      	ldr	r1, [r7, #12]
 8006d3e:	4807      	ldr	r0, [pc, #28]	; (8006d5c <ETH_PHY_IO_WriteReg+0x30>)
 8006d40:	f7fb fbbd 	bl	80024be <HAL_ETH_WritePHYRegister>
 8006d44:	4603      	mov	r3, r0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d002      	beq.n	8006d50 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8006d4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d4e:	e000      	b.n	8006d52 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3710      	adds	r7, #16
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	20004ef0 	.word	0x20004ef0

08006d60 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006d64:	f7fa fd98 	bl	8001898 <HAL_GetTick>
 8006d68:	4603      	mov	r3, r0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	bd80      	pop	{r7, pc}
	...

08006d70 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b0a0      	sub	sp, #128	; 0x80
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8006d78:	f107 030c 	add.w	r3, r7, #12
 8006d7c:	2264      	movs	r2, #100	; 0x64
 8006d7e:	2100      	movs	r1, #0
 8006d80:	4618      	mov	r0, r3
 8006d82:	f00a feae 	bl	8011ae2 <memset>
  int32_t PHYLinkState = 0;
 8006d86:	2300      	movs	r3, #0
 8006d88:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006d8e:	2300      	movs	r3, #0
 8006d90:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d92:	2300      	movs	r3, #0
 8006d94:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006d96:	483a      	ldr	r0, [pc, #232]	; (8006e80 <ethernet_link_check_state+0x110>)
 8006d98:	f7fa fc9c 	bl	80016d4 <LAN8742_GetLinkState>
 8006d9c:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006da4:	089b      	lsrs	r3, r3, #2
 8006da6:	f003 0301 	and.w	r3, r3, #1
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d00c      	beq.n	8006dca <ethernet_link_check_state+0x5a>
 8006db0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	dc09      	bgt.n	8006dca <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8006db6:	4833      	ldr	r0, [pc, #204]	; (8006e84 <ethernet_link_check_state+0x114>)
 8006db8:	f7fb f821 	bl	8001dfe <HAL_ETH_Stop>
    netif_set_down(netif);
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f001 f81d 	bl	8007dfc <netif_set_down>
    netif_set_link_down(netif);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f001 f880 	bl	8007ec8 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8006dc8:	e055      	b.n	8006e76 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006dd0:	f003 0304 	and.w	r3, r3, #4
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d14e      	bne.n	8006e76 <ethernet_link_check_state+0x106>
 8006dd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	dd4b      	ble.n	8006e76 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8006dde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006de0:	3b02      	subs	r3, #2
 8006de2:	2b03      	cmp	r3, #3
 8006de4:	d82a      	bhi.n	8006e3c <ethernet_link_check_state+0xcc>
 8006de6:	a201      	add	r2, pc, #4	; (adr r2, 8006dec <ethernet_link_check_state+0x7c>)
 8006de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dec:	08006dfd 	.word	0x08006dfd
 8006df0:	08006e0f 	.word	0x08006e0f
 8006df4:	08006e1f 	.word	0x08006e1f
 8006df8:	08006e2f 	.word	0x08006e2f
      duplex = ETH_FULLDUPLEX_MODE;
 8006dfc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006e00:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8006e02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006e06:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8006e0c:	e017      	b.n	8006e3e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8006e12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006e16:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8006e1c:	e00f      	b.n	8006e3e <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8006e1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006e22:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8006e24:	2300      	movs	r3, #0
 8006e26:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8006e2c:	e007      	b.n	8006e3e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8006e32:	2300      	movs	r3, #0
 8006e34:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006e36:	2301      	movs	r3, #1
 8006e38:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8006e3a:	e000      	b.n	8006e3e <ethernet_link_check_state+0xce>
      break;
 8006e3c:	bf00      	nop
    if(linkchanged)
 8006e3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d018      	beq.n	8006e76 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006e44:	f107 030c 	add.w	r3, r7, #12
 8006e48:	4619      	mov	r1, r3
 8006e4a:	480e      	ldr	r0, [pc, #56]	; (8006e84 <ethernet_link_check_state+0x114>)
 8006e4c:	f7fb fb80 	bl	8002550 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8006e50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e52:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8006e54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e56:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006e58:	f107 030c 	add.w	r3, r7, #12
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	4809      	ldr	r0, [pc, #36]	; (8006e84 <ethernet_link_check_state+0x114>)
 8006e60:	f7fb fc6d 	bl	800273e <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8006e64:	4807      	ldr	r0, [pc, #28]	; (8006e84 <ethernet_link_check_state+0x114>)
 8006e66:	f7fa ff6b 	bl	8001d40 <HAL_ETH_Start>
      netif_set_up(netif);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 ff5a 	bl	8007d24 <netif_set_up>
      netif_set_link_up(netif);
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 fff5 	bl	8007e60 <netif_set_link_up>
}
 8006e76:	bf00      	nop
 8006e78:	3780      	adds	r7, #128	; 0x80
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	20004fd8 	.word	0x20004fd8
 8006e84:	20004ef0 	.word	0x20004ef0

08006e88 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b086      	sub	sp, #24
 8006e8c:	af02      	add	r7, sp, #8
 8006e8e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8006e90:	4812      	ldr	r0, [pc, #72]	; (8006edc <HAL_ETH_RxAllocateCallback+0x54>)
 8006e92:	f000 fcc1 	bl	8007818 <memp_malloc_pool>
 8006e96:	60f8      	str	r0, [r7, #12]
  if (p)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d014      	beq.n	8006ec8 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f103 0220 	add.w	r2, r3, #32
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	4a0d      	ldr	r2, [pc, #52]	; (8006ee0 <HAL_ETH_RxAllocateCallback+0x58>)
 8006eac:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8006eb6:	9201      	str	r2, [sp, #4]
 8006eb8:	9300      	str	r3, [sp, #0]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2241      	movs	r2, #65	; 0x41
 8006ebe:	2100      	movs	r1, #0
 8006ec0:	2000      	movs	r0, #0
 8006ec2:	f001 f9f7 	bl	80082b4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8006ec6:	e005      	b.n	8006ed4 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8006ec8:	4b06      	ldr	r3, [pc, #24]	; (8006ee4 <HAL_ETH_RxAllocateCallback+0x5c>)
 8006eca:	2201      	movs	r2, #1
 8006ecc:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	601a      	str	r2, [r3, #0]
}
 8006ed4:	bf00      	nop
 8006ed6:	3710      	adds	r7, #16
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	080163fc 	.word	0x080163fc
 8006ee0:	08006b11 	.word	0x08006b11
 8006ee4:	20004eec 	.word	0x20004eec

08006ee8 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b088      	sub	sp, #32
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	607a      	str	r2, [r7, #4]
 8006ef4:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8006efe:	2300      	movs	r3, #0
 8006f00:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	3b20      	subs	r3, #32
 8006f06:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	2200      	movs	r2, #0
 8006f12:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	887a      	ldrh	r2, [r7, #2]
 8006f18:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d103      	bne.n	8006f2a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	69fa      	ldr	r2, [r7, #28]
 8006f26:	601a      	str	r2, [r3, #0]
 8006f28:	e003      	b.n	8006f32 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	69fa      	ldr	r2, [r7, #28]
 8006f30:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	69fa      	ldr	r2, [r7, #28]
 8006f36:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	61fb      	str	r3, [r7, #28]
 8006f3e:	e009      	b.n	8006f54 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	891a      	ldrh	r2, [r3, #8]
 8006f44:	887b      	ldrh	r3, [r7, #2]
 8006f46:	4413      	add	r3, r2
 8006f48:	b29a      	uxth	r2, r3
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	61fb      	str	r3, [r7, #28]
 8006f54:	69fb      	ldr	r3, [r7, #28]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d1f2      	bne.n	8006f40 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8006f5a:	887b      	ldrh	r3, [r7, #2]
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f7ff fc28 	bl	80067b4 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8006f64:	bf00      	nop
 8006f66:	3720      	adds	r7, #32
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	4603      	mov	r3, r0
 8006f74:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8006f76:	88fb      	ldrh	r3, [r7, #6]
 8006f78:	021b      	lsls	r3, r3, #8
 8006f7a:	b21a      	sxth	r2, r3
 8006f7c:	88fb      	ldrh	r3, [r7, #6]
 8006f7e:	0a1b      	lsrs	r3, r3, #8
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	b21b      	sxth	r3, r3
 8006f84:	4313      	orrs	r3, r2
 8006f86:	b21b      	sxth	r3, r3
 8006f88:	b29b      	uxth	r3, r3
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	370c      	adds	r7, #12
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr

08006f96 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8006f96:	b480      	push	{r7}
 8006f98:	b083      	sub	sp, #12
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	061a      	lsls	r2, r3, #24
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	021b      	lsls	r3, r3, #8
 8006fa6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006faa:	431a      	orrs	r2, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	0a1b      	lsrs	r3, r3, #8
 8006fb0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006fb4:	431a      	orrs	r2, r3
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	0e1b      	lsrs	r3, r3, #24
 8006fba:	4313      	orrs	r3, r2
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b082      	sub	sp, #8
 8006fcc:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8006fd2:	f000 f8d5 	bl	8007180 <mem_init>
  memp_init();
 8006fd6:	f000 fbdb 	bl	8007790 <memp_init>
  pbuf_init();
  netif_init();
 8006fda:	f000 fcd9 	bl	8007990 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8006fde:	f007 f857 	bl	800e090 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8006fe2:	f001 fdaf 	bl	8008b44 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8006fe6:	f006 ffc9 	bl	800df7c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8006fea:	bf00      	nop
 8006fec:	3708      	adds	r7, #8
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
	...

08006ff4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8006ffe:	4b05      	ldr	r3, [pc, #20]	; (8007014 <ptr_to_mem+0x20>)
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	88fb      	ldrh	r3, [r7, #6]
 8007004:	4413      	add	r3, r2
}
 8007006:	4618      	mov	r0, r3
 8007008:	370c      	adds	r7, #12
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop
 8007014:	20007824 	.word	0x20007824

08007018 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8007020:	4b05      	ldr	r3, [pc, #20]	; (8007038 <mem_to_ptr+0x20>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	1ad3      	subs	r3, r2, r3
 8007028:	b29b      	uxth	r3, r3
}
 800702a:	4618      	mov	r0, r3
 800702c:	370c      	adds	r7, #12
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr
 8007036:	bf00      	nop
 8007038:	20007824 	.word	0x20007824

0800703c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800703c:	b590      	push	{r4, r7, lr}
 800703e:	b085      	sub	sp, #20
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007044:	4b45      	ldr	r3, [pc, #276]	; (800715c <plug_holes+0x120>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	429a      	cmp	r2, r3
 800704c:	d206      	bcs.n	800705c <plug_holes+0x20>
 800704e:	4b44      	ldr	r3, [pc, #272]	; (8007160 <plug_holes+0x124>)
 8007050:	f240 12df 	movw	r2, #479	; 0x1df
 8007054:	4943      	ldr	r1, [pc, #268]	; (8007164 <plug_holes+0x128>)
 8007056:	4844      	ldr	r0, [pc, #272]	; (8007168 <plug_holes+0x12c>)
 8007058:	f00a fcde 	bl	8011a18 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800705c:	4b43      	ldr	r3, [pc, #268]	; (800716c <plug_holes+0x130>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	429a      	cmp	r2, r3
 8007064:	d306      	bcc.n	8007074 <plug_holes+0x38>
 8007066:	4b3e      	ldr	r3, [pc, #248]	; (8007160 <plug_holes+0x124>)
 8007068:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800706c:	4940      	ldr	r1, [pc, #256]	; (8007170 <plug_holes+0x134>)
 800706e:	483e      	ldr	r0, [pc, #248]	; (8007168 <plug_holes+0x12c>)
 8007070:	f00a fcd2 	bl	8011a18 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	791b      	ldrb	r3, [r3, #4]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d006      	beq.n	800708a <plug_holes+0x4e>
 800707c:	4b38      	ldr	r3, [pc, #224]	; (8007160 <plug_holes+0x124>)
 800707e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8007082:	493c      	ldr	r1, [pc, #240]	; (8007174 <plug_holes+0x138>)
 8007084:	4838      	ldr	r0, [pc, #224]	; (8007168 <plug_holes+0x12c>)
 8007086:	f00a fcc7 	bl	8011a18 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	881b      	ldrh	r3, [r3, #0]
 800708e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007092:	d906      	bls.n	80070a2 <plug_holes+0x66>
 8007094:	4b32      	ldr	r3, [pc, #200]	; (8007160 <plug_holes+0x124>)
 8007096:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800709a:	4937      	ldr	r1, [pc, #220]	; (8007178 <plug_holes+0x13c>)
 800709c:	4832      	ldr	r0, [pc, #200]	; (8007168 <plug_holes+0x12c>)
 800709e:	f00a fcbb 	bl	8011a18 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	881b      	ldrh	r3, [r3, #0]
 80070a6:	4618      	mov	r0, r3
 80070a8:	f7ff ffa4 	bl	8006ff4 <ptr_to_mem>
 80070ac:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d024      	beq.n	8007100 <plug_holes+0xc4>
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	791b      	ldrb	r3, [r3, #4]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d120      	bne.n	8007100 <plug_holes+0xc4>
 80070be:	4b2b      	ldr	r3, [pc, #172]	; (800716c <plug_holes+0x130>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d01b      	beq.n	8007100 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80070c8:	4b2c      	ldr	r3, [pc, #176]	; (800717c <plug_holes+0x140>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68fa      	ldr	r2, [r7, #12]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d102      	bne.n	80070d8 <plug_holes+0x9c>
      lfree = mem;
 80070d2:	4a2a      	ldr	r2, [pc, #168]	; (800717c <plug_holes+0x140>)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	881a      	ldrh	r2, [r3, #0]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	881b      	ldrh	r3, [r3, #0]
 80070e4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80070e8:	d00a      	beq.n	8007100 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	881b      	ldrh	r3, [r3, #0]
 80070ee:	4618      	mov	r0, r3
 80070f0:	f7ff ff80 	bl	8006ff4 <ptr_to_mem>
 80070f4:	4604      	mov	r4, r0
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f7ff ff8e 	bl	8007018 <mem_to_ptr>
 80070fc:	4603      	mov	r3, r0
 80070fe:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	885b      	ldrh	r3, [r3, #2]
 8007104:	4618      	mov	r0, r3
 8007106:	f7ff ff75 	bl	8006ff4 <ptr_to_mem>
 800710a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800710c:	68ba      	ldr	r2, [r7, #8]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	429a      	cmp	r2, r3
 8007112:	d01f      	beq.n	8007154 <plug_holes+0x118>
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	791b      	ldrb	r3, [r3, #4]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d11b      	bne.n	8007154 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800711c:	4b17      	ldr	r3, [pc, #92]	; (800717c <plug_holes+0x140>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	429a      	cmp	r2, r3
 8007124:	d102      	bne.n	800712c <plug_holes+0xf0>
      lfree = pmem;
 8007126:	4a15      	ldr	r2, [pc, #84]	; (800717c <plug_holes+0x140>)
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	881a      	ldrh	r2, [r3, #0]
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	881b      	ldrh	r3, [r3, #0]
 8007138:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800713c:	d00a      	beq.n	8007154 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	881b      	ldrh	r3, [r3, #0]
 8007142:	4618      	mov	r0, r3
 8007144:	f7ff ff56 	bl	8006ff4 <ptr_to_mem>
 8007148:	4604      	mov	r4, r0
 800714a:	68b8      	ldr	r0, [r7, #8]
 800714c:	f7ff ff64 	bl	8007018 <mem_to_ptr>
 8007150:	4603      	mov	r3, r0
 8007152:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8007154:	bf00      	nop
 8007156:	3714      	adds	r7, #20
 8007158:	46bd      	mov	sp, r7
 800715a:	bd90      	pop	{r4, r7, pc}
 800715c:	20007824 	.word	0x20007824
 8007160:	08013a58 	.word	0x08013a58
 8007164:	08013a88 	.word	0x08013a88
 8007168:	08013aa0 	.word	0x08013aa0
 800716c:	20007828 	.word	0x20007828
 8007170:	08013ac8 	.word	0x08013ac8
 8007174:	08013ae4 	.word	0x08013ae4
 8007178:	08013b00 	.word	0x08013b00
 800717c:	2000782c 	.word	0x2000782c

08007180 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8007186:	4b18      	ldr	r3, [pc, #96]	; (80071e8 <mem_init+0x68>)
 8007188:	3303      	adds	r3, #3
 800718a:	f023 0303 	bic.w	r3, r3, #3
 800718e:	461a      	mov	r2, r3
 8007190:	4b16      	ldr	r3, [pc, #88]	; (80071ec <mem_init+0x6c>)
 8007192:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8007194:	4b15      	ldr	r3, [pc, #84]	; (80071ec <mem_init+0x6c>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80071a0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80071ae:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 80071b2:	f7ff ff1f 	bl	8006ff4 <ptr_to_mem>
 80071b6:	4603      	mov	r3, r0
 80071b8:	4a0d      	ldr	r2, [pc, #52]	; (80071f0 <mem_init+0x70>)
 80071ba:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80071bc:	4b0c      	ldr	r3, [pc, #48]	; (80071f0 <mem_init+0x70>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	2201      	movs	r2, #1
 80071c2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80071c4:	4b0a      	ldr	r3, [pc, #40]	; (80071f0 <mem_init+0x70>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80071cc:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80071ce:	4b08      	ldr	r3, [pc, #32]	; (80071f0 <mem_init+0x70>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80071d6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80071d8:	4b04      	ldr	r3, [pc, #16]	; (80071ec <mem_init+0x6c>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a05      	ldr	r2, [pc, #20]	; (80071f4 <mem_init+0x74>)
 80071de:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80071e0:	bf00      	nop
 80071e2:	3708      	adds	r7, #8
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	20005010 	.word	0x20005010
 80071ec:	20007824 	.word	0x20007824
 80071f0:	20007828 	.word	0x20007828
 80071f4:	2000782c 	.word	0x2000782c

080071f8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b086      	sub	sp, #24
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f7ff ff09 	bl	8007018 <mem_to_ptr>
 8007206:	4603      	mov	r3, r0
 8007208:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	881b      	ldrh	r3, [r3, #0]
 800720e:	4618      	mov	r0, r3
 8007210:	f7ff fef0 	bl	8006ff4 <ptr_to_mem>
 8007214:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	885b      	ldrh	r3, [r3, #2]
 800721a:	4618      	mov	r0, r3
 800721c:	f7ff feea 	bl	8006ff4 <ptr_to_mem>
 8007220:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	881b      	ldrh	r3, [r3, #0]
 8007226:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800722a:	d818      	bhi.n	800725e <mem_link_valid+0x66>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	885b      	ldrh	r3, [r3, #2]
 8007230:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007234:	d813      	bhi.n	800725e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800723a:	8afa      	ldrh	r2, [r7, #22]
 800723c:	429a      	cmp	r2, r3
 800723e:	d004      	beq.n	800724a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	881b      	ldrh	r3, [r3, #0]
 8007244:	8afa      	ldrh	r2, [r7, #22]
 8007246:	429a      	cmp	r2, r3
 8007248:	d109      	bne.n	800725e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800724a:	4b08      	ldr	r3, [pc, #32]	; (800726c <mem_link_valid+0x74>)
 800724c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800724e:	693a      	ldr	r2, [r7, #16]
 8007250:	429a      	cmp	r2, r3
 8007252:	d006      	beq.n	8007262 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	885b      	ldrh	r3, [r3, #2]
 8007258:	8afa      	ldrh	r2, [r7, #22]
 800725a:	429a      	cmp	r2, r3
 800725c:	d001      	beq.n	8007262 <mem_link_valid+0x6a>
    return 0;
 800725e:	2300      	movs	r3, #0
 8007260:	e000      	b.n	8007264 <mem_link_valid+0x6c>
  }
  return 1;
 8007262:	2301      	movs	r3, #1
}
 8007264:	4618      	mov	r0, r3
 8007266:	3718      	adds	r7, #24
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}
 800726c:	20007828 	.word	0x20007828

08007270 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d04c      	beq.n	8007318 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f003 0303 	and.w	r3, r3, #3
 8007284:	2b00      	cmp	r3, #0
 8007286:	d007      	beq.n	8007298 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8007288:	4b25      	ldr	r3, [pc, #148]	; (8007320 <mem_free+0xb0>)
 800728a:	f240 2273 	movw	r2, #627	; 0x273
 800728e:	4925      	ldr	r1, [pc, #148]	; (8007324 <mem_free+0xb4>)
 8007290:	4825      	ldr	r0, [pc, #148]	; (8007328 <mem_free+0xb8>)
 8007292:	f00a fbc1 	bl	8011a18 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007296:	e040      	b.n	800731a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	3b08      	subs	r3, #8
 800729c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800729e:	4b23      	ldr	r3, [pc, #140]	; (800732c <mem_free+0xbc>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68fa      	ldr	r2, [r7, #12]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d306      	bcc.n	80072b6 <mem_free+0x46>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f103 020c 	add.w	r2, r3, #12
 80072ae:	4b20      	ldr	r3, [pc, #128]	; (8007330 <mem_free+0xc0>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d907      	bls.n	80072c6 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80072b6:	4b1a      	ldr	r3, [pc, #104]	; (8007320 <mem_free+0xb0>)
 80072b8:	f240 227f 	movw	r2, #639	; 0x27f
 80072bc:	491d      	ldr	r1, [pc, #116]	; (8007334 <mem_free+0xc4>)
 80072be:	481a      	ldr	r0, [pc, #104]	; (8007328 <mem_free+0xb8>)
 80072c0:	f00a fbaa 	bl	8011a18 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80072c4:	e029      	b.n	800731a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	791b      	ldrb	r3, [r3, #4]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d107      	bne.n	80072de <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80072ce:	4b14      	ldr	r3, [pc, #80]	; (8007320 <mem_free+0xb0>)
 80072d0:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80072d4:	4918      	ldr	r1, [pc, #96]	; (8007338 <mem_free+0xc8>)
 80072d6:	4814      	ldr	r0, [pc, #80]	; (8007328 <mem_free+0xb8>)
 80072d8:	f00a fb9e 	bl	8011a18 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80072dc:	e01d      	b.n	800731a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80072de:	68f8      	ldr	r0, [r7, #12]
 80072e0:	f7ff ff8a 	bl	80071f8 <mem_link_valid>
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d107      	bne.n	80072fa <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80072ea:	4b0d      	ldr	r3, [pc, #52]	; (8007320 <mem_free+0xb0>)
 80072ec:	f240 2295 	movw	r2, #661	; 0x295
 80072f0:	4912      	ldr	r1, [pc, #72]	; (800733c <mem_free+0xcc>)
 80072f2:	480d      	ldr	r0, [pc, #52]	; (8007328 <mem_free+0xb8>)
 80072f4:	f00a fb90 	bl	8011a18 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80072f8:	e00f      	b.n	800731a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2200      	movs	r2, #0
 80072fe:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8007300:	4b0f      	ldr	r3, [pc, #60]	; (8007340 <mem_free+0xd0>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	68fa      	ldr	r2, [r7, #12]
 8007306:	429a      	cmp	r2, r3
 8007308:	d202      	bcs.n	8007310 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800730a:	4a0d      	ldr	r2, [pc, #52]	; (8007340 <mem_free+0xd0>)
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f7ff fe93 	bl	800703c <plug_holes>
 8007316:	e000      	b.n	800731a <mem_free+0xaa>
    return;
 8007318:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800731a:	3710      	adds	r7, #16
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}
 8007320:	08013a58 	.word	0x08013a58
 8007324:	08013b2c 	.word	0x08013b2c
 8007328:	08013aa0 	.word	0x08013aa0
 800732c:	20007824 	.word	0x20007824
 8007330:	20007828 	.word	0x20007828
 8007334:	08013b50 	.word	0x08013b50
 8007338:	08013b6c 	.word	0x08013b6c
 800733c:	08013b94 	.word	0x08013b94
 8007340:	2000782c 	.word	0x2000782c

08007344 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b088      	sub	sp, #32
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	460b      	mov	r3, r1
 800734e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8007350:	887b      	ldrh	r3, [r7, #2]
 8007352:	3303      	adds	r3, #3
 8007354:	b29b      	uxth	r3, r3
 8007356:	f023 0303 	bic.w	r3, r3, #3
 800735a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800735c:	8bfb      	ldrh	r3, [r7, #30]
 800735e:	2b0b      	cmp	r3, #11
 8007360:	d801      	bhi.n	8007366 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8007362:	230c      	movs	r3, #12
 8007364:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8007366:	8bfb      	ldrh	r3, [r7, #30]
 8007368:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800736c:	d803      	bhi.n	8007376 <mem_trim+0x32>
 800736e:	8bfa      	ldrh	r2, [r7, #30]
 8007370:	887b      	ldrh	r3, [r7, #2]
 8007372:	429a      	cmp	r2, r3
 8007374:	d201      	bcs.n	800737a <mem_trim+0x36>
    return NULL;
 8007376:	2300      	movs	r3, #0
 8007378:	e0cc      	b.n	8007514 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800737a:	4b68      	ldr	r3, [pc, #416]	; (800751c <mem_trim+0x1d8>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	429a      	cmp	r2, r3
 8007382:	d304      	bcc.n	800738e <mem_trim+0x4a>
 8007384:	4b66      	ldr	r3, [pc, #408]	; (8007520 <mem_trim+0x1dc>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	429a      	cmp	r2, r3
 800738c:	d306      	bcc.n	800739c <mem_trim+0x58>
 800738e:	4b65      	ldr	r3, [pc, #404]	; (8007524 <mem_trim+0x1e0>)
 8007390:	f240 22d1 	movw	r2, #721	; 0x2d1
 8007394:	4964      	ldr	r1, [pc, #400]	; (8007528 <mem_trim+0x1e4>)
 8007396:	4865      	ldr	r0, [pc, #404]	; (800752c <mem_trim+0x1e8>)
 8007398:	f00a fb3e 	bl	8011a18 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800739c:	4b5f      	ldr	r3, [pc, #380]	; (800751c <mem_trim+0x1d8>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d304      	bcc.n	80073b0 <mem_trim+0x6c>
 80073a6:	4b5e      	ldr	r3, [pc, #376]	; (8007520 <mem_trim+0x1dc>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d301      	bcc.n	80073b4 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	e0af      	b.n	8007514 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	3b08      	subs	r3, #8
 80073b8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80073ba:	69b8      	ldr	r0, [r7, #24]
 80073bc:	f7ff fe2c 	bl	8007018 <mem_to_ptr>
 80073c0:	4603      	mov	r3, r0
 80073c2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	881a      	ldrh	r2, [r3, #0]
 80073c8:	8afb      	ldrh	r3, [r7, #22]
 80073ca:	1ad3      	subs	r3, r2, r3
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	3b08      	subs	r3, #8
 80073d0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80073d2:	8bfa      	ldrh	r2, [r7, #30]
 80073d4:	8abb      	ldrh	r3, [r7, #20]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d906      	bls.n	80073e8 <mem_trim+0xa4>
 80073da:	4b52      	ldr	r3, [pc, #328]	; (8007524 <mem_trim+0x1e0>)
 80073dc:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80073e0:	4953      	ldr	r1, [pc, #332]	; (8007530 <mem_trim+0x1ec>)
 80073e2:	4852      	ldr	r0, [pc, #328]	; (800752c <mem_trim+0x1e8>)
 80073e4:	f00a fb18 	bl	8011a18 <iprintf>
  if (newsize > size) {
 80073e8:	8bfa      	ldrh	r2, [r7, #30]
 80073ea:	8abb      	ldrh	r3, [r7, #20]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d901      	bls.n	80073f4 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 80073f0:	2300      	movs	r3, #0
 80073f2:	e08f      	b.n	8007514 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 80073f4:	8bfa      	ldrh	r2, [r7, #30]
 80073f6:	8abb      	ldrh	r3, [r7, #20]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d101      	bne.n	8007400 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	e089      	b.n	8007514 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8007400:	69bb      	ldr	r3, [r7, #24]
 8007402:	881b      	ldrh	r3, [r3, #0]
 8007404:	4618      	mov	r0, r3
 8007406:	f7ff fdf5 	bl	8006ff4 <ptr_to_mem>
 800740a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	791b      	ldrb	r3, [r3, #4]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d13f      	bne.n	8007494 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007414:	69bb      	ldr	r3, [r7, #24]
 8007416:	881b      	ldrh	r3, [r3, #0]
 8007418:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800741c:	d106      	bne.n	800742c <mem_trim+0xe8>
 800741e:	4b41      	ldr	r3, [pc, #260]	; (8007524 <mem_trim+0x1e0>)
 8007420:	f240 22f5 	movw	r2, #757	; 0x2f5
 8007424:	4943      	ldr	r1, [pc, #268]	; (8007534 <mem_trim+0x1f0>)
 8007426:	4841      	ldr	r0, [pc, #260]	; (800752c <mem_trim+0x1e8>)
 8007428:	f00a faf6 	bl	8011a18 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	881b      	ldrh	r3, [r3, #0]
 8007430:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007432:	8afa      	ldrh	r2, [r7, #22]
 8007434:	8bfb      	ldrh	r3, [r7, #30]
 8007436:	4413      	add	r3, r2
 8007438:	b29b      	uxth	r3, r3
 800743a:	3308      	adds	r3, #8
 800743c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800743e:	4b3e      	ldr	r3, [pc, #248]	; (8007538 <mem_trim+0x1f4>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	693a      	ldr	r2, [r7, #16]
 8007444:	429a      	cmp	r2, r3
 8007446:	d106      	bne.n	8007456 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8007448:	89fb      	ldrh	r3, [r7, #14]
 800744a:	4618      	mov	r0, r3
 800744c:	f7ff fdd2 	bl	8006ff4 <ptr_to_mem>
 8007450:	4603      	mov	r3, r0
 8007452:	4a39      	ldr	r2, [pc, #228]	; (8007538 <mem_trim+0x1f4>)
 8007454:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8007456:	89fb      	ldrh	r3, [r7, #14]
 8007458:	4618      	mov	r0, r3
 800745a:	f7ff fdcb 	bl	8006ff4 <ptr_to_mem>
 800745e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	2200      	movs	r2, #0
 8007464:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	89ba      	ldrh	r2, [r7, #12]
 800746a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	8afa      	ldrh	r2, [r7, #22]
 8007470:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	89fa      	ldrh	r2, [r7, #14]
 8007476:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	881b      	ldrh	r3, [r3, #0]
 800747c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007480:	d047      	beq.n	8007512 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	881b      	ldrh	r3, [r3, #0]
 8007486:	4618      	mov	r0, r3
 8007488:	f7ff fdb4 	bl	8006ff4 <ptr_to_mem>
 800748c:	4602      	mov	r2, r0
 800748e:	89fb      	ldrh	r3, [r7, #14]
 8007490:	8053      	strh	r3, [r2, #2]
 8007492:	e03e      	b.n	8007512 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8007494:	8bfb      	ldrh	r3, [r7, #30]
 8007496:	f103 0214 	add.w	r2, r3, #20
 800749a:	8abb      	ldrh	r3, [r7, #20]
 800749c:	429a      	cmp	r2, r3
 800749e:	d838      	bhi.n	8007512 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80074a0:	8afa      	ldrh	r2, [r7, #22]
 80074a2:	8bfb      	ldrh	r3, [r7, #30]
 80074a4:	4413      	add	r3, r2
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	3308      	adds	r3, #8
 80074aa:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80074ac:	69bb      	ldr	r3, [r7, #24]
 80074ae:	881b      	ldrh	r3, [r3, #0]
 80074b0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80074b4:	d106      	bne.n	80074c4 <mem_trim+0x180>
 80074b6:	4b1b      	ldr	r3, [pc, #108]	; (8007524 <mem_trim+0x1e0>)
 80074b8:	f240 3216 	movw	r2, #790	; 0x316
 80074bc:	491d      	ldr	r1, [pc, #116]	; (8007534 <mem_trim+0x1f0>)
 80074be:	481b      	ldr	r0, [pc, #108]	; (800752c <mem_trim+0x1e8>)
 80074c0:	f00a faaa 	bl	8011a18 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80074c4:	89fb      	ldrh	r3, [r7, #14]
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7ff fd94 	bl	8006ff4 <ptr_to_mem>
 80074cc:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80074ce:	4b1a      	ldr	r3, [pc, #104]	; (8007538 <mem_trim+0x1f4>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	693a      	ldr	r2, [r7, #16]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d202      	bcs.n	80074de <mem_trim+0x19a>
      lfree = mem2;
 80074d8:	4a17      	ldr	r2, [pc, #92]	; (8007538 <mem_trim+0x1f4>)
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	2200      	movs	r2, #0
 80074e2:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80074e4:	69bb      	ldr	r3, [r7, #24]
 80074e6:	881a      	ldrh	r2, [r3, #0]
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	8afa      	ldrh	r2, [r7, #22]
 80074f0:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80074f2:	69bb      	ldr	r3, [r7, #24]
 80074f4:	89fa      	ldrh	r2, [r7, #14]
 80074f6:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	881b      	ldrh	r3, [r3, #0]
 80074fc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007500:	d007      	beq.n	8007512 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	881b      	ldrh	r3, [r3, #0]
 8007506:	4618      	mov	r0, r3
 8007508:	f7ff fd74 	bl	8006ff4 <ptr_to_mem>
 800750c:	4602      	mov	r2, r0
 800750e:	89fb      	ldrh	r3, [r7, #14]
 8007510:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8007512:	687b      	ldr	r3, [r7, #4]
}
 8007514:	4618      	mov	r0, r3
 8007516:	3720      	adds	r7, #32
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}
 800751c:	20007824 	.word	0x20007824
 8007520:	20007828 	.word	0x20007828
 8007524:	08013a58 	.word	0x08013a58
 8007528:	08013bc8 	.word	0x08013bc8
 800752c:	08013aa0 	.word	0x08013aa0
 8007530:	08013be0 	.word	0x08013be0
 8007534:	08013c00 	.word	0x08013c00
 8007538:	2000782c 	.word	0x2000782c

0800753c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b088      	sub	sp, #32
 8007540:	af00      	add	r7, sp, #0
 8007542:	4603      	mov	r3, r0
 8007544:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8007546:	88fb      	ldrh	r3, [r7, #6]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d101      	bne.n	8007550 <mem_malloc+0x14>
    return NULL;
 800754c:	2300      	movs	r3, #0
 800754e:	e0d9      	b.n	8007704 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8007550:	88fb      	ldrh	r3, [r7, #6]
 8007552:	3303      	adds	r3, #3
 8007554:	b29b      	uxth	r3, r3
 8007556:	f023 0303 	bic.w	r3, r3, #3
 800755a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800755c:	8bbb      	ldrh	r3, [r7, #28]
 800755e:	2b0b      	cmp	r3, #11
 8007560:	d801      	bhi.n	8007566 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8007562:	230c      	movs	r3, #12
 8007564:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8007566:	8bbb      	ldrh	r3, [r7, #28]
 8007568:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800756c:	d803      	bhi.n	8007576 <mem_malloc+0x3a>
 800756e:	8bba      	ldrh	r2, [r7, #28]
 8007570:	88fb      	ldrh	r3, [r7, #6]
 8007572:	429a      	cmp	r2, r3
 8007574:	d201      	bcs.n	800757a <mem_malloc+0x3e>
    return NULL;
 8007576:	2300      	movs	r3, #0
 8007578:	e0c4      	b.n	8007704 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800757a:	4b64      	ldr	r3, [pc, #400]	; (800770c <mem_malloc+0x1d0>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4618      	mov	r0, r3
 8007580:	f7ff fd4a 	bl	8007018 <mem_to_ptr>
 8007584:	4603      	mov	r3, r0
 8007586:	83fb      	strh	r3, [r7, #30]
 8007588:	e0b4      	b.n	80076f4 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800758a:	8bfb      	ldrh	r3, [r7, #30]
 800758c:	4618      	mov	r0, r3
 800758e:	f7ff fd31 	bl	8006ff4 <ptr_to_mem>
 8007592:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	791b      	ldrb	r3, [r3, #4]
 8007598:	2b00      	cmp	r3, #0
 800759a:	f040 80a4 	bne.w	80076e6 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	881b      	ldrh	r3, [r3, #0]
 80075a2:	461a      	mov	r2, r3
 80075a4:	8bfb      	ldrh	r3, [r7, #30]
 80075a6:	1ad3      	subs	r3, r2, r3
 80075a8:	f1a3 0208 	sub.w	r2, r3, #8
 80075ac:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80075ae:	429a      	cmp	r2, r3
 80075b0:	f0c0 8099 	bcc.w	80076e6 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	881b      	ldrh	r3, [r3, #0]
 80075b8:	461a      	mov	r2, r3
 80075ba:	8bfb      	ldrh	r3, [r7, #30]
 80075bc:	1ad3      	subs	r3, r2, r3
 80075be:	f1a3 0208 	sub.w	r2, r3, #8
 80075c2:	8bbb      	ldrh	r3, [r7, #28]
 80075c4:	3314      	adds	r3, #20
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d333      	bcc.n	8007632 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80075ca:	8bfa      	ldrh	r2, [r7, #30]
 80075cc:	8bbb      	ldrh	r3, [r7, #28]
 80075ce:	4413      	add	r3, r2
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	3308      	adds	r3, #8
 80075d4:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80075d6:	8a7b      	ldrh	r3, [r7, #18]
 80075d8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80075dc:	d106      	bne.n	80075ec <mem_malloc+0xb0>
 80075de:	4b4c      	ldr	r3, [pc, #304]	; (8007710 <mem_malloc+0x1d4>)
 80075e0:	f240 3287 	movw	r2, #903	; 0x387
 80075e4:	494b      	ldr	r1, [pc, #300]	; (8007714 <mem_malloc+0x1d8>)
 80075e6:	484c      	ldr	r0, [pc, #304]	; (8007718 <mem_malloc+0x1dc>)
 80075e8:	f00a fa16 	bl	8011a18 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80075ec:	8a7b      	ldrh	r3, [r7, #18]
 80075ee:	4618      	mov	r0, r3
 80075f0:	f7ff fd00 	bl	8006ff4 <ptr_to_mem>
 80075f4:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2200      	movs	r2, #0
 80075fa:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	881a      	ldrh	r2, [r3, #0]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	8bfa      	ldrh	r2, [r7, #30]
 8007608:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	8a7a      	ldrh	r2, [r7, #18]
 800760e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	2201      	movs	r2, #1
 8007614:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	881b      	ldrh	r3, [r3, #0]
 800761a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800761e:	d00b      	beq.n	8007638 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	881b      	ldrh	r3, [r3, #0]
 8007624:	4618      	mov	r0, r3
 8007626:	f7ff fce5 	bl	8006ff4 <ptr_to_mem>
 800762a:	4602      	mov	r2, r0
 800762c:	8a7b      	ldrh	r3, [r7, #18]
 800762e:	8053      	strh	r3, [r2, #2]
 8007630:	e002      	b.n	8007638 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	2201      	movs	r2, #1
 8007636:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8007638:	4b34      	ldr	r3, [pc, #208]	; (800770c <mem_malloc+0x1d0>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	697a      	ldr	r2, [r7, #20]
 800763e:	429a      	cmp	r2, r3
 8007640:	d127      	bne.n	8007692 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8007642:	4b32      	ldr	r3, [pc, #200]	; (800770c <mem_malloc+0x1d0>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8007648:	e005      	b.n	8007656 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800764a:	69bb      	ldr	r3, [r7, #24]
 800764c:	881b      	ldrh	r3, [r3, #0]
 800764e:	4618      	mov	r0, r3
 8007650:	f7ff fcd0 	bl	8006ff4 <ptr_to_mem>
 8007654:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	791b      	ldrb	r3, [r3, #4]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d004      	beq.n	8007668 <mem_malloc+0x12c>
 800765e:	4b2f      	ldr	r3, [pc, #188]	; (800771c <mem_malloc+0x1e0>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	69ba      	ldr	r2, [r7, #24]
 8007664:	429a      	cmp	r2, r3
 8007666:	d1f0      	bne.n	800764a <mem_malloc+0x10e>
          }
          lfree = cur;
 8007668:	4a28      	ldr	r2, [pc, #160]	; (800770c <mem_malloc+0x1d0>)
 800766a:	69bb      	ldr	r3, [r7, #24]
 800766c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800766e:	4b27      	ldr	r3, [pc, #156]	; (800770c <mem_malloc+0x1d0>)
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	4b2a      	ldr	r3, [pc, #168]	; (800771c <mem_malloc+0x1e0>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	429a      	cmp	r2, r3
 8007678:	d00b      	beq.n	8007692 <mem_malloc+0x156>
 800767a:	4b24      	ldr	r3, [pc, #144]	; (800770c <mem_malloc+0x1d0>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	791b      	ldrb	r3, [r3, #4]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d006      	beq.n	8007692 <mem_malloc+0x156>
 8007684:	4b22      	ldr	r3, [pc, #136]	; (8007710 <mem_malloc+0x1d4>)
 8007686:	f240 32b5 	movw	r2, #949	; 0x3b5
 800768a:	4925      	ldr	r1, [pc, #148]	; (8007720 <mem_malloc+0x1e4>)
 800768c:	4822      	ldr	r0, [pc, #136]	; (8007718 <mem_malloc+0x1dc>)
 800768e:	f00a f9c3 	bl	8011a18 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8007692:	8bba      	ldrh	r2, [r7, #28]
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	4413      	add	r3, r2
 8007698:	3308      	adds	r3, #8
 800769a:	4a20      	ldr	r2, [pc, #128]	; (800771c <mem_malloc+0x1e0>)
 800769c:	6812      	ldr	r2, [r2, #0]
 800769e:	4293      	cmp	r3, r2
 80076a0:	d906      	bls.n	80076b0 <mem_malloc+0x174>
 80076a2:	4b1b      	ldr	r3, [pc, #108]	; (8007710 <mem_malloc+0x1d4>)
 80076a4:	f240 32b9 	movw	r2, #953	; 0x3b9
 80076a8:	491e      	ldr	r1, [pc, #120]	; (8007724 <mem_malloc+0x1e8>)
 80076aa:	481b      	ldr	r0, [pc, #108]	; (8007718 <mem_malloc+0x1dc>)
 80076ac:	f00a f9b4 	bl	8011a18 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	f003 0303 	and.w	r3, r3, #3
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d006      	beq.n	80076c8 <mem_malloc+0x18c>
 80076ba:	4b15      	ldr	r3, [pc, #84]	; (8007710 <mem_malloc+0x1d4>)
 80076bc:	f240 32bb 	movw	r2, #955	; 0x3bb
 80076c0:	4919      	ldr	r1, [pc, #100]	; (8007728 <mem_malloc+0x1ec>)
 80076c2:	4815      	ldr	r0, [pc, #84]	; (8007718 <mem_malloc+0x1dc>)
 80076c4:	f00a f9a8 	bl	8011a18 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	f003 0303 	and.w	r3, r3, #3
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d006      	beq.n	80076e0 <mem_malloc+0x1a4>
 80076d2:	4b0f      	ldr	r3, [pc, #60]	; (8007710 <mem_malloc+0x1d4>)
 80076d4:	f240 32bd 	movw	r2, #957	; 0x3bd
 80076d8:	4914      	ldr	r1, [pc, #80]	; (800772c <mem_malloc+0x1f0>)
 80076da:	480f      	ldr	r0, [pc, #60]	; (8007718 <mem_malloc+0x1dc>)
 80076dc:	f00a f99c 	bl	8011a18 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	3308      	adds	r3, #8
 80076e4:	e00e      	b.n	8007704 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80076e6:	8bfb      	ldrh	r3, [r7, #30]
 80076e8:	4618      	mov	r0, r3
 80076ea:	f7ff fc83 	bl	8006ff4 <ptr_to_mem>
 80076ee:	4603      	mov	r3, r0
 80076f0:	881b      	ldrh	r3, [r3, #0]
 80076f2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80076f4:	8bfa      	ldrh	r2, [r7, #30]
 80076f6:	8bbb      	ldrh	r3, [r7, #28]
 80076f8:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 80076fc:	429a      	cmp	r2, r3
 80076fe:	f4ff af44 	bcc.w	800758a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8007702:	2300      	movs	r3, #0
}
 8007704:	4618      	mov	r0, r3
 8007706:	3720      	adds	r7, #32
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
 800770c:	2000782c 	.word	0x2000782c
 8007710:	08013a58 	.word	0x08013a58
 8007714:	08013c00 	.word	0x08013c00
 8007718:	08013aa0 	.word	0x08013aa0
 800771c:	20007828 	.word	0x20007828
 8007720:	08013c14 	.word	0x08013c14
 8007724:	08013c30 	.word	0x08013c30
 8007728:	08013c60 	.word	0x08013c60
 800772c:	08013c90 	.word	0x08013c90

08007730 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8007730:	b480      	push	{r7}
 8007732:	b085      	sub	sp, #20
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	2200      	movs	r2, #0
 800773e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	3303      	adds	r3, #3
 8007746:	f023 0303 	bic.w	r3, r3, #3
 800774a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800774c:	2300      	movs	r3, #0
 800774e:	60fb      	str	r3, [r7, #12]
 8007750:	e011      	b.n	8007776 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	68ba      	ldr	r2, [r7, #8]
 8007762:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	881b      	ldrh	r3, [r3, #0]
 8007768:	461a      	mov	r2, r3
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	4413      	add	r3, r2
 800776e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	3301      	adds	r3, #1
 8007774:	60fb      	str	r3, [r7, #12]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	885b      	ldrh	r3, [r3, #2]
 800777a:	461a      	mov	r2, r3
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	4293      	cmp	r3, r2
 8007780:	dbe7      	blt.n	8007752 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8007782:	bf00      	nop
 8007784:	bf00      	nop
 8007786:	3714      	adds	r7, #20
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr

08007790 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b082      	sub	sp, #8
 8007794:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007796:	2300      	movs	r3, #0
 8007798:	80fb      	strh	r3, [r7, #6]
 800779a:	e009      	b.n	80077b0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800779c:	88fb      	ldrh	r3, [r7, #6]
 800779e:	4a08      	ldr	r2, [pc, #32]	; (80077c0 <memp_init+0x30>)
 80077a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077a4:	4618      	mov	r0, r3
 80077a6:	f7ff ffc3 	bl	8007730 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80077aa:	88fb      	ldrh	r3, [r7, #6]
 80077ac:	3301      	adds	r3, #1
 80077ae:	80fb      	strh	r3, [r7, #6]
 80077b0:	88fb      	ldrh	r3, [r7, #6]
 80077b2:	2b08      	cmp	r3, #8
 80077b4:	d9f2      	bls.n	800779c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80077b6:	bf00      	nop
 80077b8:	bf00      	nop
 80077ba:	3708      	adds	r7, #8
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}
 80077c0:	08016474 	.word	0x08016474

080077c4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d012      	beq.n	8007800 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	6812      	ldr	r2, [r2, #0]
 80077e2:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f003 0303 	and.w	r3, r3, #3
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d006      	beq.n	80077fc <do_memp_malloc_pool+0x38>
 80077ee:	4b07      	ldr	r3, [pc, #28]	; (800780c <do_memp_malloc_pool+0x48>)
 80077f0:	f44f 728c 	mov.w	r2, #280	; 0x118
 80077f4:	4906      	ldr	r1, [pc, #24]	; (8007810 <do_memp_malloc_pool+0x4c>)
 80077f6:	4807      	ldr	r0, [pc, #28]	; (8007814 <do_memp_malloc_pool+0x50>)
 80077f8:	f00a f90e 	bl	8011a18 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	e000      	b.n	8007802 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	08013cb4 	.word	0x08013cb4
 8007810:	08013ce4 	.word	0x08013ce4
 8007814:	08013d08 	.word	0x08013d08

08007818 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d106      	bne.n	8007834 <memp_malloc_pool+0x1c>
 8007826:	4b0a      	ldr	r3, [pc, #40]	; (8007850 <memp_malloc_pool+0x38>)
 8007828:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800782c:	4909      	ldr	r1, [pc, #36]	; (8007854 <memp_malloc_pool+0x3c>)
 800782e:	480a      	ldr	r0, [pc, #40]	; (8007858 <memp_malloc_pool+0x40>)
 8007830:	f00a f8f2 	bl	8011a18 <iprintf>
  if (desc == NULL) {
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d101      	bne.n	800783e <memp_malloc_pool+0x26>
    return NULL;
 800783a:	2300      	movs	r3, #0
 800783c:	e003      	b.n	8007846 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f7ff ffc0 	bl	80077c4 <do_memp_malloc_pool>
 8007844:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8007846:	4618      	mov	r0, r3
 8007848:	3708      	adds	r7, #8
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop
 8007850:	08013cb4 	.word	0x08013cb4
 8007854:	08013d30 	.word	0x08013d30
 8007858:	08013d08 	.word	0x08013d08

0800785c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	4603      	mov	r3, r0
 8007864:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007866:	79fb      	ldrb	r3, [r7, #7]
 8007868:	2b08      	cmp	r3, #8
 800786a:	d908      	bls.n	800787e <memp_malloc+0x22>
 800786c:	4b0a      	ldr	r3, [pc, #40]	; (8007898 <memp_malloc+0x3c>)
 800786e:	f240 1257 	movw	r2, #343	; 0x157
 8007872:	490a      	ldr	r1, [pc, #40]	; (800789c <memp_malloc+0x40>)
 8007874:	480a      	ldr	r0, [pc, #40]	; (80078a0 <memp_malloc+0x44>)
 8007876:	f00a f8cf 	bl	8011a18 <iprintf>
 800787a:	2300      	movs	r3, #0
 800787c:	e008      	b.n	8007890 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800787e:	79fb      	ldrb	r3, [r7, #7]
 8007880:	4a08      	ldr	r2, [pc, #32]	; (80078a4 <memp_malloc+0x48>)
 8007882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007886:	4618      	mov	r0, r3
 8007888:	f7ff ff9c 	bl	80077c4 <do_memp_malloc_pool>
 800788c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800788e:	68fb      	ldr	r3, [r7, #12]
}
 8007890:	4618      	mov	r0, r3
 8007892:	3710      	adds	r7, #16
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}
 8007898:	08013cb4 	.word	0x08013cb4
 800789c:	08013d44 	.word	0x08013d44
 80078a0:	08013d08 	.word	0x08013d08
 80078a4:	08016474 	.word	0x08016474

080078a8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b084      	sub	sp, #16
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	f003 0303 	and.w	r3, r3, #3
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d006      	beq.n	80078ca <do_memp_free_pool+0x22>
 80078bc:	4b0a      	ldr	r3, [pc, #40]	; (80078e8 <do_memp_free_pool+0x40>)
 80078be:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80078c2:	490a      	ldr	r1, [pc, #40]	; (80078ec <do_memp_free_pool+0x44>)
 80078c4:	480a      	ldr	r0, [pc, #40]	; (80078f0 <do_memp_free_pool+0x48>)
 80078c6:	f00a f8a7 	bl	8011a18 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	68fa      	ldr	r2, [r7, #12]
 80078de:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80078e0:	bf00      	nop
 80078e2:	3710      	adds	r7, #16
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}
 80078e8:	08013cb4 	.word	0x08013cb4
 80078ec:	08013d64 	.word	0x08013d64
 80078f0:	08013d08 	.word	0x08013d08

080078f4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d106      	bne.n	8007912 <memp_free_pool+0x1e>
 8007904:	4b0a      	ldr	r3, [pc, #40]	; (8007930 <memp_free_pool+0x3c>)
 8007906:	f240 1295 	movw	r2, #405	; 0x195
 800790a:	490a      	ldr	r1, [pc, #40]	; (8007934 <memp_free_pool+0x40>)
 800790c:	480a      	ldr	r0, [pc, #40]	; (8007938 <memp_free_pool+0x44>)
 800790e:	f00a f883 	bl	8011a18 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d007      	beq.n	8007928 <memp_free_pool+0x34>
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d004      	beq.n	8007928 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800791e:	6839      	ldr	r1, [r7, #0]
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f7ff ffc1 	bl	80078a8 <do_memp_free_pool>
 8007926:	e000      	b.n	800792a <memp_free_pool+0x36>
    return;
 8007928:	bf00      	nop
}
 800792a:	3708      	adds	r7, #8
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}
 8007930:	08013cb4 	.word	0x08013cb4
 8007934:	08013d30 	.word	0x08013d30
 8007938:	08013d08 	.word	0x08013d08

0800793c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	4603      	mov	r3, r0
 8007944:	6039      	str	r1, [r7, #0]
 8007946:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007948:	79fb      	ldrb	r3, [r7, #7]
 800794a:	2b08      	cmp	r3, #8
 800794c:	d907      	bls.n	800795e <memp_free+0x22>
 800794e:	4b0c      	ldr	r3, [pc, #48]	; (8007980 <memp_free+0x44>)
 8007950:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8007954:	490b      	ldr	r1, [pc, #44]	; (8007984 <memp_free+0x48>)
 8007956:	480c      	ldr	r0, [pc, #48]	; (8007988 <memp_free+0x4c>)
 8007958:	f00a f85e 	bl	8011a18 <iprintf>
 800795c:	e00c      	b.n	8007978 <memp_free+0x3c>

  if (mem == NULL) {
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d008      	beq.n	8007976 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007964:	79fb      	ldrb	r3, [r7, #7]
 8007966:	4a09      	ldr	r2, [pc, #36]	; (800798c <memp_free+0x50>)
 8007968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800796c:	6839      	ldr	r1, [r7, #0]
 800796e:	4618      	mov	r0, r3
 8007970:	f7ff ff9a 	bl	80078a8 <do_memp_free_pool>
 8007974:	e000      	b.n	8007978 <memp_free+0x3c>
    return;
 8007976:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8007978:	3708      	adds	r7, #8
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	08013cb4 	.word	0x08013cb4
 8007984:	08013d84 	.word	0x08013d84
 8007988:	08013d08 	.word	0x08013d08
 800798c:	08016474 	.word	0x08016474

08007990 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8007990:	b480      	push	{r7}
 8007992:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8007994:	bf00      	nop
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr
	...

080079a0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b086      	sub	sp, #24
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	607a      	str	r2, [r7, #4]
 80079ac:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d108      	bne.n	80079c6 <netif_add+0x26>
 80079b4:	4b57      	ldr	r3, [pc, #348]	; (8007b14 <netif_add+0x174>)
 80079b6:	f240 1227 	movw	r2, #295	; 0x127
 80079ba:	4957      	ldr	r1, [pc, #348]	; (8007b18 <netif_add+0x178>)
 80079bc:	4857      	ldr	r0, [pc, #348]	; (8007b1c <netif_add+0x17c>)
 80079be:	f00a f82b 	bl	8011a18 <iprintf>
 80079c2:	2300      	movs	r3, #0
 80079c4:	e0a2      	b.n	8007b0c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80079c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d108      	bne.n	80079de <netif_add+0x3e>
 80079cc:	4b51      	ldr	r3, [pc, #324]	; (8007b14 <netif_add+0x174>)
 80079ce:	f44f 7294 	mov.w	r2, #296	; 0x128
 80079d2:	4953      	ldr	r1, [pc, #332]	; (8007b20 <netif_add+0x180>)
 80079d4:	4851      	ldr	r0, [pc, #324]	; (8007b1c <netif_add+0x17c>)
 80079d6:	f00a f81f 	bl	8011a18 <iprintf>
 80079da:	2300      	movs	r3, #0
 80079dc:	e096      	b.n	8007b0c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d101      	bne.n	80079e8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80079e4:	4b4f      	ldr	r3, [pc, #316]	; (8007b24 <netif_add+0x184>)
 80079e6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d101      	bne.n	80079f2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80079ee:	4b4d      	ldr	r3, [pc, #308]	; (8007b24 <netif_add+0x184>)
 80079f0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d101      	bne.n	80079fc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80079f8:	4b4a      	ldr	r3, [pc, #296]	; (8007b24 <netif_add+0x184>)
 80079fa:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2200      	movs	r2, #0
 8007a00:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2200      	movs	r2, #0
 8007a06:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	4a45      	ldr	r2, [pc, #276]	; (8007b28 <netif_add+0x188>)
 8007a12:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2200      	movs	r2, #0
 8007a18:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2200      	movs	r2, #0
 8007a26:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	6a3a      	ldr	r2, [r7, #32]
 8007a2c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8007a2e:	4b3f      	ldr	r3, [pc, #252]	; (8007b2c <netif_add+0x18c>)
 8007a30:	781a      	ldrb	r2, [r3, #0]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a3c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	68b9      	ldr	r1, [r7, #8]
 8007a44:	68f8      	ldr	r0, [r7, #12]
 8007a46:	f000 f913 	bl	8007c70 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8007a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4c:	68f8      	ldr	r0, [r7, #12]
 8007a4e:	4798      	blx	r3
 8007a50:	4603      	mov	r3, r0
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d001      	beq.n	8007a5a <netif_add+0xba>
    return NULL;
 8007a56:	2300      	movs	r3, #0
 8007a58:	e058      	b.n	8007b0c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007a60:	2bff      	cmp	r3, #255	; 0xff
 8007a62:	d103      	bne.n	8007a6c <netif_add+0xcc>
        netif->num = 0;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007a70:	4b2f      	ldr	r3, [pc, #188]	; (8007b30 <netif_add+0x190>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	617b      	str	r3, [r7, #20]
 8007a76:	e02b      	b.n	8007ad0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8007a78:	697a      	ldr	r2, [r7, #20]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d106      	bne.n	8007a8e <netif_add+0xee>
 8007a80:	4b24      	ldr	r3, [pc, #144]	; (8007b14 <netif_add+0x174>)
 8007a82:	f240 128b 	movw	r2, #395	; 0x18b
 8007a86:	492b      	ldr	r1, [pc, #172]	; (8007b34 <netif_add+0x194>)
 8007a88:	4824      	ldr	r0, [pc, #144]	; (8007b1c <netif_add+0x17c>)
 8007a8a:	f009 ffc5 	bl	8011a18 <iprintf>
        num_netifs++;
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	3301      	adds	r3, #1
 8007a92:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	2bff      	cmp	r3, #255	; 0xff
 8007a98:	dd06      	ble.n	8007aa8 <netif_add+0x108>
 8007a9a:	4b1e      	ldr	r3, [pc, #120]	; (8007b14 <netif_add+0x174>)
 8007a9c:	f240 128d 	movw	r2, #397	; 0x18d
 8007aa0:	4925      	ldr	r1, [pc, #148]	; (8007b38 <netif_add+0x198>)
 8007aa2:	481e      	ldr	r0, [pc, #120]	; (8007b1c <netif_add+0x17c>)
 8007aa4:	f009 ffb8 	bl	8011a18 <iprintf>
        if (netif2->num == netif->num) {
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d108      	bne.n	8007aca <netif_add+0x12a>
          netif->num++;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007abe:	3301      	adds	r3, #1
 8007ac0:	b2da      	uxtb	r2, r3
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8007ac8:	e005      	b.n	8007ad6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	617b      	str	r3, [r7, #20]
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d1d0      	bne.n	8007a78 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d1be      	bne.n	8007a5a <netif_add+0xba>
  }
  if (netif->num == 254) {
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007ae2:	2bfe      	cmp	r3, #254	; 0xfe
 8007ae4:	d103      	bne.n	8007aee <netif_add+0x14e>
    netif_num = 0;
 8007ae6:	4b11      	ldr	r3, [pc, #68]	; (8007b2c <netif_add+0x18c>)
 8007ae8:	2200      	movs	r2, #0
 8007aea:	701a      	strb	r2, [r3, #0]
 8007aec:	e006      	b.n	8007afc <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007af4:	3301      	adds	r3, #1
 8007af6:	b2da      	uxtb	r2, r3
 8007af8:	4b0c      	ldr	r3, [pc, #48]	; (8007b2c <netif_add+0x18c>)
 8007afa:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8007afc:	4b0c      	ldr	r3, [pc, #48]	; (8007b30 <netif_add+0x190>)
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8007b04:	4a0a      	ldr	r2, [pc, #40]	; (8007b30 <netif_add+0x190>)
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3718      	adds	r7, #24
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}
 8007b14:	08013da0 	.word	0x08013da0
 8007b18:	08013e34 	.word	0x08013e34
 8007b1c:	08013df0 	.word	0x08013df0
 8007b20:	08013e50 	.word	0x08013e50
 8007b24:	080164d8 	.word	0x080164d8
 8007b28:	08007f4b 	.word	0x08007f4b
 8007b2c:	2000a724 	.word	0x2000a724
 8007b30:	2000a71c 	.word	0x2000a71c
 8007b34:	08013e74 	.word	0x08013e74
 8007b38:	08013e88 	.word	0x08013e88

08007b3c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8007b46:	6839      	ldr	r1, [r7, #0]
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f002 fb43 	bl	800a1d4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8007b4e:	6839      	ldr	r1, [r7, #0]
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f006 fd8d 	bl	800e670 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8007b56:	bf00      	nop
 8007b58:	3708      	adds	r7, #8
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
	...

08007b60 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b086      	sub	sp, #24
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d106      	bne.n	8007b80 <netif_do_set_ipaddr+0x20>
 8007b72:	4b1d      	ldr	r3, [pc, #116]	; (8007be8 <netif_do_set_ipaddr+0x88>)
 8007b74:	f240 12cb 	movw	r2, #459	; 0x1cb
 8007b78:	491c      	ldr	r1, [pc, #112]	; (8007bec <netif_do_set_ipaddr+0x8c>)
 8007b7a:	481d      	ldr	r0, [pc, #116]	; (8007bf0 <netif_do_set_ipaddr+0x90>)
 8007b7c:	f009 ff4c 	bl	8011a18 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d106      	bne.n	8007b94 <netif_do_set_ipaddr+0x34>
 8007b86:	4b18      	ldr	r3, [pc, #96]	; (8007be8 <netif_do_set_ipaddr+0x88>)
 8007b88:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8007b8c:	4917      	ldr	r1, [pc, #92]	; (8007bec <netif_do_set_ipaddr+0x8c>)
 8007b8e:	4818      	ldr	r0, [pc, #96]	; (8007bf0 <netif_do_set_ipaddr+0x90>)
 8007b90:	f009 ff42 	bl	8011a18 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	3304      	adds	r3, #4
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d01c      	beq.n	8007bdc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	3304      	adds	r3, #4
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8007bb2:	f107 0314 	add.w	r3, r7, #20
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f7ff ffbf 	bl	8007b3c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d002      	beq.n	8007bca <netif_do_set_ipaddr+0x6a>
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	e000      	b.n	8007bcc <netif_do_set_ipaddr+0x6c>
 8007bca:	2300      	movs	r3, #0
 8007bcc:	68fa      	ldr	r2, [r7, #12]
 8007bce:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8007bd0:	2101      	movs	r1, #1
 8007bd2:	68f8      	ldr	r0, [r7, #12]
 8007bd4:	f000 f8d2 	bl	8007d7c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8007bd8:	2301      	movs	r3, #1
 8007bda:	e000      	b.n	8007bde <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3718      	adds	r7, #24
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop
 8007be8:	08013da0 	.word	0x08013da0
 8007bec:	08013eb8 	.word	0x08013eb8
 8007bf0:	08013df0 	.word	0x08013df0

08007bf4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b085      	sub	sp, #20
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	60b9      	str	r1, [r7, #8]
 8007bfe:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	681a      	ldr	r2, [r3, #0]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	3308      	adds	r3, #8
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d00a      	beq.n	8007c24 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d002      	beq.n	8007c1a <netif_do_set_netmask+0x26>
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	e000      	b.n	8007c1c <netif_do_set_netmask+0x28>
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	68fa      	ldr	r2, [r7, #12]
 8007c1e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8007c20:	2301      	movs	r3, #1
 8007c22:	e000      	b.n	8007c26 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8007c24:	2300      	movs	r3, #0
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3714      	adds	r7, #20
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr

08007c32 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8007c32:	b480      	push	{r7}
 8007c34:	b085      	sub	sp, #20
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	60f8      	str	r0, [r7, #12]
 8007c3a:	60b9      	str	r1, [r7, #8]
 8007c3c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	330c      	adds	r3, #12
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d00a      	beq.n	8007c62 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d002      	beq.n	8007c58 <netif_do_set_gw+0x26>
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	e000      	b.n	8007c5a <netif_do_set_gw+0x28>
 8007c58:	2300      	movs	r3, #0
 8007c5a:	68fa      	ldr	r2, [r7, #12]
 8007c5c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8007c5e:	2301      	movs	r3, #1
 8007c60:	e000      	b.n	8007c64 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8007c62:	2300      	movs	r3, #0
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3714      	adds	r7, #20
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b088      	sub	sp, #32
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	60b9      	str	r1, [r7, #8]
 8007c7a:	607a      	str	r2, [r7, #4]
 8007c7c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8007c82:	2300      	movs	r3, #0
 8007c84:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d101      	bne.n	8007c90 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8007c8c:	4b1c      	ldr	r3, [pc, #112]	; (8007d00 <netif_set_addr+0x90>)
 8007c8e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d101      	bne.n	8007c9a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8007c96:	4b1a      	ldr	r3, [pc, #104]	; (8007d00 <netif_set_addr+0x90>)
 8007c98:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d101      	bne.n	8007ca4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8007ca0:	4b17      	ldr	r3, [pc, #92]	; (8007d00 <netif_set_addr+0x90>)
 8007ca2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d003      	beq.n	8007cb2 <netif_set_addr+0x42>
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d101      	bne.n	8007cb6 <netif_set_addr+0x46>
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e000      	b.n	8007cb8 <netif_set_addr+0x48>
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	617b      	str	r3, [r7, #20]
  if (remove) {
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d006      	beq.n	8007cce <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007cc0:	f107 0310 	add.w	r3, r7, #16
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	68b9      	ldr	r1, [r7, #8]
 8007cc8:	68f8      	ldr	r0, [r7, #12]
 8007cca:	f7ff ff49 	bl	8007b60 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8007cce:	69fa      	ldr	r2, [r7, #28]
 8007cd0:	6879      	ldr	r1, [r7, #4]
 8007cd2:	68f8      	ldr	r0, [r7, #12]
 8007cd4:	f7ff ff8e 	bl	8007bf4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8007cd8:	69ba      	ldr	r2, [r7, #24]
 8007cda:	6839      	ldr	r1, [r7, #0]
 8007cdc:	68f8      	ldr	r0, [r7, #12]
 8007cde:	f7ff ffa8 	bl	8007c32 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d106      	bne.n	8007cf6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007ce8:	f107 0310 	add.w	r3, r7, #16
 8007cec:	461a      	mov	r2, r3
 8007cee:	68b9      	ldr	r1, [r7, #8]
 8007cf0:	68f8      	ldr	r0, [r7, #12]
 8007cf2:	f7ff ff35 	bl	8007b60 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8007cf6:	bf00      	nop
 8007cf8:	3720      	adds	r7, #32
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	080164d8 	.word	0x080164d8

08007d04 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b083      	sub	sp, #12
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8007d0c:	4a04      	ldr	r2, [pc, #16]	; (8007d20 <netif_set_default+0x1c>)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8007d12:	bf00      	nop
 8007d14:	370c      	adds	r7, #12
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr
 8007d1e:	bf00      	nop
 8007d20:	2000a720 	.word	0x2000a720

08007d24 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d107      	bne.n	8007d42 <netif_set_up+0x1e>
 8007d32:	4b0f      	ldr	r3, [pc, #60]	; (8007d70 <netif_set_up+0x4c>)
 8007d34:	f44f 7254 	mov.w	r2, #848	; 0x350
 8007d38:	490e      	ldr	r1, [pc, #56]	; (8007d74 <netif_set_up+0x50>)
 8007d3a:	480f      	ldr	r0, [pc, #60]	; (8007d78 <netif_set_up+0x54>)
 8007d3c:	f009 fe6c 	bl	8011a18 <iprintf>
 8007d40:	e013      	b.n	8007d6a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007d48:	f003 0301 	and.w	r3, r3, #1
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d10c      	bne.n	8007d6a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007d56:	f043 0301 	orr.w	r3, r3, #1
 8007d5a:	b2da      	uxtb	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007d62:	2103      	movs	r1, #3
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 f809 	bl	8007d7c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8007d6a:	3708      	adds	r7, #8
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	08013da0 	.word	0x08013da0
 8007d74:	08013f28 	.word	0x08013f28
 8007d78:	08013df0 	.word	0x08013df0

08007d7c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	460b      	mov	r3, r1
 8007d86:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d106      	bne.n	8007d9c <netif_issue_reports+0x20>
 8007d8e:	4b18      	ldr	r3, [pc, #96]	; (8007df0 <netif_issue_reports+0x74>)
 8007d90:	f240 326d 	movw	r2, #877	; 0x36d
 8007d94:	4917      	ldr	r1, [pc, #92]	; (8007df4 <netif_issue_reports+0x78>)
 8007d96:	4818      	ldr	r0, [pc, #96]	; (8007df8 <netif_issue_reports+0x7c>)
 8007d98:	f009 fe3e 	bl	8011a18 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007da2:	f003 0304 	and.w	r3, r3, #4
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d01e      	beq.n	8007de8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007db0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d017      	beq.n	8007de8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007db8:	78fb      	ldrb	r3, [r7, #3]
 8007dba:	f003 0301 	and.w	r3, r3, #1
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d013      	beq.n	8007dea <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	3304      	adds	r3, #4
 8007dc6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d00e      	beq.n	8007dea <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007dd2:	f003 0308 	and.w	r3, r3, #8
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d007      	beq.n	8007dea <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	3304      	adds	r3, #4
 8007dde:	4619      	mov	r1, r3
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f007 fbaf 	bl	800f544 <etharp_request>
 8007de6:	e000      	b.n	8007dea <netif_issue_reports+0x6e>
    return;
 8007de8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8007dea:	3708      	adds	r7, #8
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	08013da0 	.word	0x08013da0
 8007df4:	08013f44 	.word	0x08013f44
 8007df8:	08013df0 	.word	0x08013df0

08007dfc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b082      	sub	sp, #8
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d107      	bne.n	8007e1a <netif_set_down+0x1e>
 8007e0a:	4b12      	ldr	r3, [pc, #72]	; (8007e54 <netif_set_down+0x58>)
 8007e0c:	f240 329b 	movw	r2, #923	; 0x39b
 8007e10:	4911      	ldr	r1, [pc, #68]	; (8007e58 <netif_set_down+0x5c>)
 8007e12:	4812      	ldr	r0, [pc, #72]	; (8007e5c <netif_set_down+0x60>)
 8007e14:	f009 fe00 	bl	8011a18 <iprintf>
 8007e18:	e019      	b.n	8007e4e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007e20:	f003 0301 	and.w	r3, r3, #1
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d012      	beq.n	8007e4e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007e2e:	f023 0301 	bic.w	r3, r3, #1
 8007e32:	b2da      	uxtb	r2, r3
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007e40:	f003 0308 	and.w	r3, r3, #8
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d002      	beq.n	8007e4e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f006 ff39 	bl	800ecc0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8007e4e:	3708      	adds	r7, #8
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	08013da0 	.word	0x08013da0
 8007e58:	08013f68 	.word	0x08013f68
 8007e5c:	08013df0 	.word	0x08013df0

08007e60 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b082      	sub	sp, #8
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d107      	bne.n	8007e7e <netif_set_link_up+0x1e>
 8007e6e:	4b13      	ldr	r3, [pc, #76]	; (8007ebc <netif_set_link_up+0x5c>)
 8007e70:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8007e74:	4912      	ldr	r1, [pc, #72]	; (8007ec0 <netif_set_link_up+0x60>)
 8007e76:	4813      	ldr	r0, [pc, #76]	; (8007ec4 <netif_set_link_up+0x64>)
 8007e78:	f009 fdce 	bl	8011a18 <iprintf>
 8007e7c:	e01b      	b.n	8007eb6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007e84:	f003 0304 	and.w	r3, r3, #4
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d114      	bne.n	8007eb6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007e92:	f043 0304 	orr.w	r3, r3, #4
 8007e96:	b2da      	uxtb	r2, r3
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007e9e:	2103      	movs	r1, #3
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f7ff ff6b 	bl	8007d7c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	69db      	ldr	r3, [r3, #28]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d003      	beq.n	8007eb6 <netif_set_link_up+0x56>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	69db      	ldr	r3, [r3, #28]
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8007eb6:	3708      	adds	r7, #8
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}
 8007ebc:	08013da0 	.word	0x08013da0
 8007ec0:	08013f88 	.word	0x08013f88
 8007ec4:	08013df0 	.word	0x08013df0

08007ec8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d107      	bne.n	8007ee6 <netif_set_link_down+0x1e>
 8007ed6:	4b11      	ldr	r3, [pc, #68]	; (8007f1c <netif_set_link_down+0x54>)
 8007ed8:	f240 4206 	movw	r2, #1030	; 0x406
 8007edc:	4910      	ldr	r1, [pc, #64]	; (8007f20 <netif_set_link_down+0x58>)
 8007ede:	4811      	ldr	r0, [pc, #68]	; (8007f24 <netif_set_link_down+0x5c>)
 8007ee0:	f009 fd9a 	bl	8011a18 <iprintf>
 8007ee4:	e017      	b.n	8007f16 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007eec:	f003 0304 	and.w	r3, r3, #4
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d010      	beq.n	8007f16 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007efa:	f023 0304 	bic.w	r3, r3, #4
 8007efe:	b2da      	uxtb	r2, r3
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	69db      	ldr	r3, [r3, #28]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d003      	beq.n	8007f16 <netif_set_link_down+0x4e>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	69db      	ldr	r3, [r3, #28]
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8007f16:	3708      	adds	r7, #8
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}
 8007f1c:	08013da0 	.word	0x08013da0
 8007f20:	08013fac 	.word	0x08013fac
 8007f24:	08013df0 	.word	0x08013df0

08007f28 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d002      	beq.n	8007f3e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	683a      	ldr	r2, [r7, #0]
 8007f3c:	61da      	str	r2, [r3, #28]
  }
}
 8007f3e:	bf00      	nop
 8007f40:	370c      	adds	r7, #12
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr

08007f4a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8007f4a:	b480      	push	{r7}
 8007f4c:	b085      	sub	sp, #20
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	60f8      	str	r0, [r7, #12]
 8007f52:	60b9      	str	r1, [r7, #8]
 8007f54:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8007f56:	f06f 030b 	mvn.w	r3, #11
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3714      	adds	r7, #20
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr
	...

08007f68 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b085      	sub	sp, #20
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	4603      	mov	r3, r0
 8007f70:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8007f72:	79fb      	ldrb	r3, [r7, #7]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d013      	beq.n	8007fa0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8007f78:	4b0d      	ldr	r3, [pc, #52]	; (8007fb0 <netif_get_by_index+0x48>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	60fb      	str	r3, [r7, #12]
 8007f7e:	e00c      	b.n	8007f9a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007f86:	3301      	adds	r3, #1
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	79fa      	ldrb	r2, [r7, #7]
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d101      	bne.n	8007f94 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	e006      	b.n	8007fa2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	60fb      	str	r3, [r7, #12]
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d1ef      	bne.n	8007f80 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8007fa0:	2300      	movs	r3, #0
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3714      	adds	r7, #20
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr
 8007fae:	bf00      	nop
 8007fb0:	2000a71c 	.word	0x2000a71c

08007fb4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8007fba:	4b0c      	ldr	r3, [pc, #48]	; (8007fec <pbuf_free_ooseq+0x38>)
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007fc0:	4b0b      	ldr	r3, [pc, #44]	; (8007ff0 <pbuf_free_ooseq+0x3c>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	607b      	str	r3, [r7, #4]
 8007fc6:	e00a      	b.n	8007fde <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d003      	beq.n	8007fd8 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f002 f93d 	bl	800a250 <tcp_free_ooseq>
      return;
 8007fd6:	e005      	b.n	8007fe4 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	68db      	ldr	r3, [r3, #12]
 8007fdc:	607b      	str	r3, [r7, #4]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d1f1      	bne.n	8007fc8 <pbuf_free_ooseq+0x14>
    }
  }
}
 8007fe4:	3708      	adds	r7, #8
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop
 8007fec:	2000a725 	.word	0x2000a725
 8007ff0:	2000a734 	.word	0x2000a734

08007ff4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8007ff8:	4b03      	ldr	r3, [pc, #12]	; (8008008 <pbuf_pool_is_empty+0x14>)
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8007ffe:	bf00      	nop
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr
 8008008:	2000a725 	.word	0x2000a725

0800800c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800800c:	b480      	push	{r7}
 800800e:	b085      	sub	sp, #20
 8008010:	af00      	add	r7, sp, #0
 8008012:	60f8      	str	r0, [r7, #12]
 8008014:	60b9      	str	r1, [r7, #8]
 8008016:	4611      	mov	r1, r2
 8008018:	461a      	mov	r2, r3
 800801a:	460b      	mov	r3, r1
 800801c:	80fb      	strh	r3, [r7, #6]
 800801e:	4613      	mov	r3, r2
 8008020:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2200      	movs	r2, #0
 8008026:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	68ba      	ldr	r2, [r7, #8]
 800802c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	88fa      	ldrh	r2, [r7, #6]
 8008032:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	88ba      	ldrh	r2, [r7, #4]
 8008038:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800803a:	8b3b      	ldrh	r3, [r7, #24]
 800803c:	b2da      	uxtb	r2, r3
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	7f3a      	ldrb	r2, [r7, #28]
 8008046:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2201      	movs	r2, #1
 800804c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2200      	movs	r2, #0
 8008052:	73da      	strb	r2, [r3, #15]
}
 8008054:	bf00      	nop
 8008056:	3714      	adds	r7, #20
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr

08008060 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b08c      	sub	sp, #48	; 0x30
 8008064:	af02      	add	r7, sp, #8
 8008066:	4603      	mov	r3, r0
 8008068:	71fb      	strb	r3, [r7, #7]
 800806a:	460b      	mov	r3, r1
 800806c:	80bb      	strh	r3, [r7, #4]
 800806e:	4613      	mov	r3, r2
 8008070:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8008072:	79fb      	ldrb	r3, [r7, #7]
 8008074:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8008076:	887b      	ldrh	r3, [r7, #2]
 8008078:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800807c:	d07f      	beq.n	800817e <pbuf_alloc+0x11e>
 800807e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8008082:	f300 80c8 	bgt.w	8008216 <pbuf_alloc+0x1b6>
 8008086:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800808a:	d010      	beq.n	80080ae <pbuf_alloc+0x4e>
 800808c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8008090:	f300 80c1 	bgt.w	8008216 <pbuf_alloc+0x1b6>
 8008094:	2b01      	cmp	r3, #1
 8008096:	d002      	beq.n	800809e <pbuf_alloc+0x3e>
 8008098:	2b41      	cmp	r3, #65	; 0x41
 800809a:	f040 80bc 	bne.w	8008216 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800809e:	887a      	ldrh	r2, [r7, #2]
 80080a0:	88bb      	ldrh	r3, [r7, #4]
 80080a2:	4619      	mov	r1, r3
 80080a4:	2000      	movs	r0, #0
 80080a6:	f000 f8d1 	bl	800824c <pbuf_alloc_reference>
 80080aa:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80080ac:	e0bd      	b.n	800822a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80080ae:	2300      	movs	r3, #0
 80080b0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80080b2:	2300      	movs	r3, #0
 80080b4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80080b6:	88bb      	ldrh	r3, [r7, #4]
 80080b8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80080ba:	2008      	movs	r0, #8
 80080bc:	f7ff fbce 	bl	800785c <memp_malloc>
 80080c0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d109      	bne.n	80080dc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80080c8:	f7ff ff94 	bl	8007ff4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80080cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d002      	beq.n	80080d8 <pbuf_alloc+0x78>
            pbuf_free(p);
 80080d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80080d4:	f000 faa8 	bl	8008628 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80080d8:	2300      	movs	r3, #0
 80080da:	e0a7      	b.n	800822c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80080dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80080de:	3303      	adds	r3, #3
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	f023 0303 	bic.w	r3, r3, #3
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	8b7a      	ldrh	r2, [r7, #26]
 80080f0:	4293      	cmp	r3, r2
 80080f2:	bf28      	it	cs
 80080f4:	4613      	movcs	r3, r2
 80080f6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80080f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80080fa:	3310      	adds	r3, #16
 80080fc:	693a      	ldr	r2, [r7, #16]
 80080fe:	4413      	add	r3, r2
 8008100:	3303      	adds	r3, #3
 8008102:	f023 0303 	bic.w	r3, r3, #3
 8008106:	4618      	mov	r0, r3
 8008108:	89f9      	ldrh	r1, [r7, #14]
 800810a:	8b7a      	ldrh	r2, [r7, #26]
 800810c:	2300      	movs	r3, #0
 800810e:	9301      	str	r3, [sp, #4]
 8008110:	887b      	ldrh	r3, [r7, #2]
 8008112:	9300      	str	r3, [sp, #0]
 8008114:	460b      	mov	r3, r1
 8008116:	4601      	mov	r1, r0
 8008118:	6938      	ldr	r0, [r7, #16]
 800811a:	f7ff ff77 	bl	800800c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	f003 0303 	and.w	r3, r3, #3
 8008126:	2b00      	cmp	r3, #0
 8008128:	d006      	beq.n	8008138 <pbuf_alloc+0xd8>
 800812a:	4b42      	ldr	r3, [pc, #264]	; (8008234 <pbuf_alloc+0x1d4>)
 800812c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008130:	4941      	ldr	r1, [pc, #260]	; (8008238 <pbuf_alloc+0x1d8>)
 8008132:	4842      	ldr	r0, [pc, #264]	; (800823c <pbuf_alloc+0x1dc>)
 8008134:	f009 fc70 	bl	8011a18 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8008138:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800813a:	3303      	adds	r3, #3
 800813c:	f023 0303 	bic.w	r3, r3, #3
 8008140:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8008144:	d106      	bne.n	8008154 <pbuf_alloc+0xf4>
 8008146:	4b3b      	ldr	r3, [pc, #236]	; (8008234 <pbuf_alloc+0x1d4>)
 8008148:	f44f 7281 	mov.w	r2, #258	; 0x102
 800814c:	493c      	ldr	r1, [pc, #240]	; (8008240 <pbuf_alloc+0x1e0>)
 800814e:	483b      	ldr	r0, [pc, #236]	; (800823c <pbuf_alloc+0x1dc>)
 8008150:	f009 fc62 	bl	8011a18 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8008154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008156:	2b00      	cmp	r3, #0
 8008158:	d102      	bne.n	8008160 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	627b      	str	r3, [r7, #36]	; 0x24
 800815e:	e002      	b.n	8008166 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8008160:	69fb      	ldr	r3, [r7, #28]
 8008162:	693a      	ldr	r2, [r7, #16]
 8008164:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800816a:	8b7a      	ldrh	r2, [r7, #26]
 800816c:	89fb      	ldrh	r3, [r7, #14]
 800816e:	1ad3      	subs	r3, r2, r3
 8008170:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8008172:	2300      	movs	r3, #0
 8008174:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8008176:	8b7b      	ldrh	r3, [r7, #26]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d19e      	bne.n	80080ba <pbuf_alloc+0x5a>
      break;
 800817c:	e055      	b.n	800822a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800817e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008180:	3303      	adds	r3, #3
 8008182:	b29b      	uxth	r3, r3
 8008184:	f023 0303 	bic.w	r3, r3, #3
 8008188:	b29a      	uxth	r2, r3
 800818a:	88bb      	ldrh	r3, [r7, #4]
 800818c:	3303      	adds	r3, #3
 800818e:	b29b      	uxth	r3, r3
 8008190:	f023 0303 	bic.w	r3, r3, #3
 8008194:	b29b      	uxth	r3, r3
 8008196:	4413      	add	r3, r2
 8008198:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800819a:	8b3b      	ldrh	r3, [r7, #24]
 800819c:	3310      	adds	r3, #16
 800819e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80081a0:	8b3a      	ldrh	r2, [r7, #24]
 80081a2:	88bb      	ldrh	r3, [r7, #4]
 80081a4:	3303      	adds	r3, #3
 80081a6:	f023 0303 	bic.w	r3, r3, #3
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d306      	bcc.n	80081bc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80081ae:	8afa      	ldrh	r2, [r7, #22]
 80081b0:	88bb      	ldrh	r3, [r7, #4]
 80081b2:	3303      	adds	r3, #3
 80081b4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d201      	bcs.n	80081c0 <pbuf_alloc+0x160>
        return NULL;
 80081bc:	2300      	movs	r3, #0
 80081be:	e035      	b.n	800822c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80081c0:	8afb      	ldrh	r3, [r7, #22]
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7ff f9ba 	bl	800753c <mem_malloc>
 80081c8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80081ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d101      	bne.n	80081d4 <pbuf_alloc+0x174>
        return NULL;
 80081d0:	2300      	movs	r3, #0
 80081d2:	e02b      	b.n	800822c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80081d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80081d6:	3310      	adds	r3, #16
 80081d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081da:	4413      	add	r3, r2
 80081dc:	3303      	adds	r3, #3
 80081de:	f023 0303 	bic.w	r3, r3, #3
 80081e2:	4618      	mov	r0, r3
 80081e4:	88b9      	ldrh	r1, [r7, #4]
 80081e6:	88ba      	ldrh	r2, [r7, #4]
 80081e8:	2300      	movs	r3, #0
 80081ea:	9301      	str	r3, [sp, #4]
 80081ec:	887b      	ldrh	r3, [r7, #2]
 80081ee:	9300      	str	r3, [sp, #0]
 80081f0:	460b      	mov	r3, r1
 80081f2:	4601      	mov	r1, r0
 80081f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80081f6:	f7ff ff09 	bl	800800c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80081fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	f003 0303 	and.w	r3, r3, #3
 8008202:	2b00      	cmp	r3, #0
 8008204:	d010      	beq.n	8008228 <pbuf_alloc+0x1c8>
 8008206:	4b0b      	ldr	r3, [pc, #44]	; (8008234 <pbuf_alloc+0x1d4>)
 8008208:	f44f 7291 	mov.w	r2, #290	; 0x122
 800820c:	490d      	ldr	r1, [pc, #52]	; (8008244 <pbuf_alloc+0x1e4>)
 800820e:	480b      	ldr	r0, [pc, #44]	; (800823c <pbuf_alloc+0x1dc>)
 8008210:	f009 fc02 	bl	8011a18 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8008214:	e008      	b.n	8008228 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8008216:	4b07      	ldr	r3, [pc, #28]	; (8008234 <pbuf_alloc+0x1d4>)
 8008218:	f240 1227 	movw	r2, #295	; 0x127
 800821c:	490a      	ldr	r1, [pc, #40]	; (8008248 <pbuf_alloc+0x1e8>)
 800821e:	4807      	ldr	r0, [pc, #28]	; (800823c <pbuf_alloc+0x1dc>)
 8008220:	f009 fbfa 	bl	8011a18 <iprintf>
      return NULL;
 8008224:	2300      	movs	r3, #0
 8008226:	e001      	b.n	800822c <pbuf_alloc+0x1cc>
      break;
 8008228:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800822a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800822c:	4618      	mov	r0, r3
 800822e:	3728      	adds	r7, #40	; 0x28
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}
 8008234:	08013fd0 	.word	0x08013fd0
 8008238:	08014000 	.word	0x08014000
 800823c:	08014030 	.word	0x08014030
 8008240:	08014058 	.word	0x08014058
 8008244:	0801408c 	.word	0x0801408c
 8008248:	080140b8 	.word	0x080140b8

0800824c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b086      	sub	sp, #24
 8008250:	af02      	add	r7, sp, #8
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	460b      	mov	r3, r1
 8008256:	807b      	strh	r3, [r7, #2]
 8008258:	4613      	mov	r3, r2
 800825a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800825c:	883b      	ldrh	r3, [r7, #0]
 800825e:	2b41      	cmp	r3, #65	; 0x41
 8008260:	d009      	beq.n	8008276 <pbuf_alloc_reference+0x2a>
 8008262:	883b      	ldrh	r3, [r7, #0]
 8008264:	2b01      	cmp	r3, #1
 8008266:	d006      	beq.n	8008276 <pbuf_alloc_reference+0x2a>
 8008268:	4b0f      	ldr	r3, [pc, #60]	; (80082a8 <pbuf_alloc_reference+0x5c>)
 800826a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800826e:	490f      	ldr	r1, [pc, #60]	; (80082ac <pbuf_alloc_reference+0x60>)
 8008270:	480f      	ldr	r0, [pc, #60]	; (80082b0 <pbuf_alloc_reference+0x64>)
 8008272:	f009 fbd1 	bl	8011a18 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8008276:	2007      	movs	r0, #7
 8008278:	f7ff faf0 	bl	800785c <memp_malloc>
 800827c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d101      	bne.n	8008288 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8008284:	2300      	movs	r3, #0
 8008286:	e00b      	b.n	80082a0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8008288:	8879      	ldrh	r1, [r7, #2]
 800828a:	887a      	ldrh	r2, [r7, #2]
 800828c:	2300      	movs	r3, #0
 800828e:	9301      	str	r3, [sp, #4]
 8008290:	883b      	ldrh	r3, [r7, #0]
 8008292:	9300      	str	r3, [sp, #0]
 8008294:	460b      	mov	r3, r1
 8008296:	6879      	ldr	r1, [r7, #4]
 8008298:	68f8      	ldr	r0, [r7, #12]
 800829a:	f7ff feb7 	bl	800800c <pbuf_init_alloced_pbuf>
  return p;
 800829e:	68fb      	ldr	r3, [r7, #12]
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3710      	adds	r7, #16
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	08013fd0 	.word	0x08013fd0
 80082ac:	080140d4 	.word	0x080140d4
 80082b0:	08014030 	.word	0x08014030

080082b4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b088      	sub	sp, #32
 80082b8:	af02      	add	r7, sp, #8
 80082ba:	607b      	str	r3, [r7, #4]
 80082bc:	4603      	mov	r3, r0
 80082be:	73fb      	strb	r3, [r7, #15]
 80082c0:	460b      	mov	r3, r1
 80082c2:	81bb      	strh	r3, [r7, #12]
 80082c4:	4613      	mov	r3, r2
 80082c6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80082c8:	7bfb      	ldrb	r3, [r7, #15]
 80082ca:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80082cc:	8a7b      	ldrh	r3, [r7, #18]
 80082ce:	3303      	adds	r3, #3
 80082d0:	f023 0203 	bic.w	r2, r3, #3
 80082d4:	89bb      	ldrh	r3, [r7, #12]
 80082d6:	441a      	add	r2, r3
 80082d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80082da:	429a      	cmp	r2, r3
 80082dc:	d901      	bls.n	80082e2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80082de:	2300      	movs	r3, #0
 80082e0:	e018      	b.n	8008314 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80082e2:	6a3b      	ldr	r3, [r7, #32]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d007      	beq.n	80082f8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80082e8:	8a7b      	ldrh	r3, [r7, #18]
 80082ea:	3303      	adds	r3, #3
 80082ec:	f023 0303 	bic.w	r3, r3, #3
 80082f0:	6a3a      	ldr	r2, [r7, #32]
 80082f2:	4413      	add	r3, r2
 80082f4:	617b      	str	r3, [r7, #20]
 80082f6:	e001      	b.n	80082fc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80082f8:	2300      	movs	r3, #0
 80082fa:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	89b9      	ldrh	r1, [r7, #12]
 8008300:	89ba      	ldrh	r2, [r7, #12]
 8008302:	2302      	movs	r3, #2
 8008304:	9301      	str	r3, [sp, #4]
 8008306:	897b      	ldrh	r3, [r7, #10]
 8008308:	9300      	str	r3, [sp, #0]
 800830a:	460b      	mov	r3, r1
 800830c:	6979      	ldr	r1, [r7, #20]
 800830e:	f7ff fe7d 	bl	800800c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8008312:	687b      	ldr	r3, [r7, #4]
}
 8008314:	4618      	mov	r0, r3
 8008316:	3718      	adds	r7, #24
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	460b      	mov	r3, r1
 8008326:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d106      	bne.n	800833c <pbuf_realloc+0x20>
 800832e:	4b3a      	ldr	r3, [pc, #232]	; (8008418 <pbuf_realloc+0xfc>)
 8008330:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8008334:	4939      	ldr	r1, [pc, #228]	; (800841c <pbuf_realloc+0x100>)
 8008336:	483a      	ldr	r0, [pc, #232]	; (8008420 <pbuf_realloc+0x104>)
 8008338:	f009 fb6e 	bl	8011a18 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	891b      	ldrh	r3, [r3, #8]
 8008340:	887a      	ldrh	r2, [r7, #2]
 8008342:	429a      	cmp	r2, r3
 8008344:	d263      	bcs.n	800840e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	891a      	ldrh	r2, [r3, #8]
 800834a:	887b      	ldrh	r3, [r7, #2]
 800834c:	1ad3      	subs	r3, r2, r3
 800834e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8008350:	887b      	ldrh	r3, [r7, #2]
 8008352:	817b      	strh	r3, [r7, #10]
  q = p;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8008358:	e018      	b.n	800838c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	895b      	ldrh	r3, [r3, #10]
 800835e:	897a      	ldrh	r2, [r7, #10]
 8008360:	1ad3      	subs	r3, r2, r3
 8008362:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	891a      	ldrh	r2, [r3, #8]
 8008368:	893b      	ldrh	r3, [r7, #8]
 800836a:	1ad3      	subs	r3, r2, r3
 800836c:	b29a      	uxth	r2, r3
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d106      	bne.n	800838c <pbuf_realloc+0x70>
 800837e:	4b26      	ldr	r3, [pc, #152]	; (8008418 <pbuf_realloc+0xfc>)
 8008380:	f240 12af 	movw	r2, #431	; 0x1af
 8008384:	4927      	ldr	r1, [pc, #156]	; (8008424 <pbuf_realloc+0x108>)
 8008386:	4826      	ldr	r0, [pc, #152]	; (8008420 <pbuf_realloc+0x104>)
 8008388:	f009 fb46 	bl	8011a18 <iprintf>
  while (rem_len > q->len) {
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	895b      	ldrh	r3, [r3, #10]
 8008390:	897a      	ldrh	r2, [r7, #10]
 8008392:	429a      	cmp	r2, r3
 8008394:	d8e1      	bhi.n	800835a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	7b1b      	ldrb	r3, [r3, #12]
 800839a:	f003 030f 	and.w	r3, r3, #15
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d121      	bne.n	80083e6 <pbuf_realloc+0xca>
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	895b      	ldrh	r3, [r3, #10]
 80083a6:	897a      	ldrh	r2, [r7, #10]
 80083a8:	429a      	cmp	r2, r3
 80083aa:	d01c      	beq.n	80083e6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	7b5b      	ldrb	r3, [r3, #13]
 80083b0:	f003 0302 	and.w	r3, r3, #2
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d116      	bne.n	80083e6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	685a      	ldr	r2, [r3, #4]
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	1ad3      	subs	r3, r2, r3
 80083c0:	b29a      	uxth	r2, r3
 80083c2:	897b      	ldrh	r3, [r7, #10]
 80083c4:	4413      	add	r3, r2
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	4619      	mov	r1, r3
 80083ca:	68f8      	ldr	r0, [r7, #12]
 80083cc:	f7fe ffba 	bl	8007344 <mem_trim>
 80083d0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d106      	bne.n	80083e6 <pbuf_realloc+0xca>
 80083d8:	4b0f      	ldr	r3, [pc, #60]	; (8008418 <pbuf_realloc+0xfc>)
 80083da:	f240 12bd 	movw	r2, #445	; 0x1bd
 80083de:	4912      	ldr	r1, [pc, #72]	; (8008428 <pbuf_realloc+0x10c>)
 80083e0:	480f      	ldr	r0, [pc, #60]	; (8008420 <pbuf_realloc+0x104>)
 80083e2:	f009 fb19 	bl	8011a18 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	897a      	ldrh	r2, [r7, #10]
 80083ea:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	895a      	ldrh	r2, [r3, #10]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d004      	beq.n	8008406 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4618      	mov	r0, r3
 8008402:	f000 f911 	bl	8008628 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2200      	movs	r2, #0
 800840a:	601a      	str	r2, [r3, #0]
 800840c:	e000      	b.n	8008410 <pbuf_realloc+0xf4>
    return;
 800840e:	bf00      	nop

}
 8008410:	3710      	adds	r7, #16
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	08013fd0 	.word	0x08013fd0
 800841c:	080140e8 	.word	0x080140e8
 8008420:	08014030 	.word	0x08014030
 8008424:	08014100 	.word	0x08014100
 8008428:	08014118 	.word	0x08014118

0800842c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b086      	sub	sp, #24
 8008430:	af00      	add	r7, sp, #0
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	4613      	mov	r3, r2
 8008438:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d106      	bne.n	800844e <pbuf_add_header_impl+0x22>
 8008440:	4b2b      	ldr	r3, [pc, #172]	; (80084f0 <pbuf_add_header_impl+0xc4>)
 8008442:	f240 12df 	movw	r2, #479	; 0x1df
 8008446:	492b      	ldr	r1, [pc, #172]	; (80084f4 <pbuf_add_header_impl+0xc8>)
 8008448:	482b      	ldr	r0, [pc, #172]	; (80084f8 <pbuf_add_header_impl+0xcc>)
 800844a:	f009 fae5 	bl	8011a18 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d003      	beq.n	800845c <pbuf_add_header_impl+0x30>
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800845a:	d301      	bcc.n	8008460 <pbuf_add_header_impl+0x34>
    return 1;
 800845c:	2301      	movs	r3, #1
 800845e:	e043      	b.n	80084e8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d101      	bne.n	800846a <pbuf_add_header_impl+0x3e>
    return 0;
 8008466:	2300      	movs	r3, #0
 8008468:	e03e      	b.n	80084e8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	891a      	ldrh	r2, [r3, #8]
 8008472:	8a7b      	ldrh	r3, [r7, #18]
 8008474:	4413      	add	r3, r2
 8008476:	b29b      	uxth	r3, r3
 8008478:	8a7a      	ldrh	r2, [r7, #18]
 800847a:	429a      	cmp	r2, r3
 800847c:	d901      	bls.n	8008482 <pbuf_add_header_impl+0x56>
    return 1;
 800847e:	2301      	movs	r3, #1
 8008480:	e032      	b.n	80084e8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	7b1b      	ldrb	r3, [r3, #12]
 8008486:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8008488:	8a3b      	ldrh	r3, [r7, #16]
 800848a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800848e:	2b00      	cmp	r3, #0
 8008490:	d00c      	beq.n	80084ac <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	685a      	ldr	r2, [r3, #4]
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	425b      	negs	r3, r3
 800849a:	4413      	add	r3, r2
 800849c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	3310      	adds	r3, #16
 80084a2:	697a      	ldr	r2, [r7, #20]
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d20d      	bcs.n	80084c4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80084a8:	2301      	movs	r3, #1
 80084aa:	e01d      	b.n	80084e8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80084ac:	79fb      	ldrb	r3, [r7, #7]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d006      	beq.n	80084c0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	685a      	ldr	r2, [r3, #4]
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	425b      	negs	r3, r3
 80084ba:	4413      	add	r3, r2
 80084bc:	617b      	str	r3, [r7, #20]
 80084be:	e001      	b.n	80084c4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80084c0:	2301      	movs	r3, #1
 80084c2:	e011      	b.n	80084e8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	697a      	ldr	r2, [r7, #20]
 80084c8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	895a      	ldrh	r2, [r3, #10]
 80084ce:	8a7b      	ldrh	r3, [r7, #18]
 80084d0:	4413      	add	r3, r2
 80084d2:	b29a      	uxth	r2, r3
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	891a      	ldrh	r2, [r3, #8]
 80084dc:	8a7b      	ldrh	r3, [r7, #18]
 80084de:	4413      	add	r3, r2
 80084e0:	b29a      	uxth	r2, r3
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	811a      	strh	r2, [r3, #8]


  return 0;
 80084e6:	2300      	movs	r3, #0
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3718      	adds	r7, #24
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}
 80084f0:	08013fd0 	.word	0x08013fd0
 80084f4:	08014134 	.word	0x08014134
 80084f8:	08014030 	.word	0x08014030

080084fc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b082      	sub	sp, #8
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8008506:	2200      	movs	r2, #0
 8008508:	6839      	ldr	r1, [r7, #0]
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f7ff ff8e 	bl	800842c <pbuf_add_header_impl>
 8008510:	4603      	mov	r3, r0
}
 8008512:	4618      	mov	r0, r3
 8008514:	3708      	adds	r7, #8
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
	...

0800851c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d106      	bne.n	800853a <pbuf_remove_header+0x1e>
 800852c:	4b20      	ldr	r3, [pc, #128]	; (80085b0 <pbuf_remove_header+0x94>)
 800852e:	f240 224b 	movw	r2, #587	; 0x24b
 8008532:	4920      	ldr	r1, [pc, #128]	; (80085b4 <pbuf_remove_header+0x98>)
 8008534:	4820      	ldr	r0, [pc, #128]	; (80085b8 <pbuf_remove_header+0x9c>)
 8008536:	f009 fa6f 	bl	8011a18 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d003      	beq.n	8008548 <pbuf_remove_header+0x2c>
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008546:	d301      	bcc.n	800854c <pbuf_remove_header+0x30>
    return 1;
 8008548:	2301      	movs	r3, #1
 800854a:	e02c      	b.n	80085a6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d101      	bne.n	8008556 <pbuf_remove_header+0x3a>
    return 0;
 8008552:	2300      	movs	r3, #0
 8008554:	e027      	b.n	80085a6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	895b      	ldrh	r3, [r3, #10]
 800855e:	89fa      	ldrh	r2, [r7, #14]
 8008560:	429a      	cmp	r2, r3
 8008562:	d908      	bls.n	8008576 <pbuf_remove_header+0x5a>
 8008564:	4b12      	ldr	r3, [pc, #72]	; (80085b0 <pbuf_remove_header+0x94>)
 8008566:	f240 2255 	movw	r2, #597	; 0x255
 800856a:	4914      	ldr	r1, [pc, #80]	; (80085bc <pbuf_remove_header+0xa0>)
 800856c:	4812      	ldr	r0, [pc, #72]	; (80085b8 <pbuf_remove_header+0x9c>)
 800856e:	f009 fa53 	bl	8011a18 <iprintf>
 8008572:	2301      	movs	r3, #1
 8008574:	e017      	b.n	80085a6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	685a      	ldr	r2, [r3, #4]
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	441a      	add	r2, r3
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	895a      	ldrh	r2, [r3, #10]
 800858c:	89fb      	ldrh	r3, [r7, #14]
 800858e:	1ad3      	subs	r3, r2, r3
 8008590:	b29a      	uxth	r2, r3
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	891a      	ldrh	r2, [r3, #8]
 800859a:	89fb      	ldrh	r3, [r7, #14]
 800859c:	1ad3      	subs	r3, r2, r3
 800859e:	b29a      	uxth	r2, r3
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80085a4:	2300      	movs	r3, #0
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3710      	adds	r7, #16
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
 80085ae:	bf00      	nop
 80085b0:	08013fd0 	.word	0x08013fd0
 80085b4:	08014134 	.word	0x08014134
 80085b8:	08014030 	.word	0x08014030
 80085bc:	08014140 	.word	0x08014140

080085c0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b082      	sub	sp, #8
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	460b      	mov	r3, r1
 80085ca:	807b      	strh	r3, [r7, #2]
 80085cc:	4613      	mov	r3, r2
 80085ce:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80085d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	da08      	bge.n	80085ea <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80085d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80085dc:	425b      	negs	r3, r3
 80085de:	4619      	mov	r1, r3
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f7ff ff9b 	bl	800851c <pbuf_remove_header>
 80085e6:	4603      	mov	r3, r0
 80085e8:	e007      	b.n	80085fa <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80085ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80085ee:	787a      	ldrb	r2, [r7, #1]
 80085f0:	4619      	mov	r1, r3
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f7ff ff1a 	bl	800842c <pbuf_add_header_impl>
 80085f8:	4603      	mov	r3, r0
  }
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3708      	adds	r7, #8
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}

08008602 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8008602:	b580      	push	{r7, lr}
 8008604:	b082      	sub	sp, #8
 8008606:	af00      	add	r7, sp, #0
 8008608:	6078      	str	r0, [r7, #4]
 800860a:	460b      	mov	r3, r1
 800860c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800860e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008612:	2201      	movs	r2, #1
 8008614:	4619      	mov	r1, r3
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f7ff ffd2 	bl	80085c0 <pbuf_header_impl>
 800861c:	4603      	mov	r3, r0
}
 800861e:	4618      	mov	r0, r3
 8008620:	3708      	adds	r7, #8
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
	...

08008628 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b086      	sub	sp, #24
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d10b      	bne.n	800864e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d106      	bne.n	800864a <pbuf_free+0x22>
 800863c:	4b38      	ldr	r3, [pc, #224]	; (8008720 <pbuf_free+0xf8>)
 800863e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8008642:	4938      	ldr	r1, [pc, #224]	; (8008724 <pbuf_free+0xfc>)
 8008644:	4838      	ldr	r0, [pc, #224]	; (8008728 <pbuf_free+0x100>)
 8008646:	f009 f9e7 	bl	8011a18 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800864a:	2300      	movs	r3, #0
 800864c:	e063      	b.n	8008716 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800864e:	2300      	movs	r3, #0
 8008650:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8008652:	e05c      	b.n	800870e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	7b9b      	ldrb	r3, [r3, #14]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d106      	bne.n	800866a <pbuf_free+0x42>
 800865c:	4b30      	ldr	r3, [pc, #192]	; (8008720 <pbuf_free+0xf8>)
 800865e:	f240 22f1 	movw	r2, #753	; 0x2f1
 8008662:	4932      	ldr	r1, [pc, #200]	; (800872c <pbuf_free+0x104>)
 8008664:	4830      	ldr	r0, [pc, #192]	; (8008728 <pbuf_free+0x100>)
 8008666:	f009 f9d7 	bl	8011a18 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	7b9b      	ldrb	r3, [r3, #14]
 800866e:	3b01      	subs	r3, #1
 8008670:	b2da      	uxtb	r2, r3
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	739a      	strb	r2, [r3, #14]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	7b9b      	ldrb	r3, [r3, #14]
 800867a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800867c:	7dbb      	ldrb	r3, [r7, #22]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d143      	bne.n	800870a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	7b1b      	ldrb	r3, [r3, #12]
 800868c:	f003 030f 	and.w	r3, r3, #15
 8008690:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	7b5b      	ldrb	r3, [r3, #13]
 8008696:	f003 0302 	and.w	r3, r3, #2
 800869a:	2b00      	cmp	r3, #0
 800869c:	d011      	beq.n	80086c2 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	691b      	ldr	r3, [r3, #16]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d106      	bne.n	80086b8 <pbuf_free+0x90>
 80086aa:	4b1d      	ldr	r3, [pc, #116]	; (8008720 <pbuf_free+0xf8>)
 80086ac:	f240 22ff 	movw	r2, #767	; 0x2ff
 80086b0:	491f      	ldr	r1, [pc, #124]	; (8008730 <pbuf_free+0x108>)
 80086b2:	481d      	ldr	r0, [pc, #116]	; (8008728 <pbuf_free+0x100>)
 80086b4:	f009 f9b0 	bl	8011a18 <iprintf>
        pc->custom_free_function(p);
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	691b      	ldr	r3, [r3, #16]
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	4798      	blx	r3
 80086c0:	e01d      	b.n	80086fe <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80086c2:	7bfb      	ldrb	r3, [r7, #15]
 80086c4:	2b02      	cmp	r3, #2
 80086c6:	d104      	bne.n	80086d2 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80086c8:	6879      	ldr	r1, [r7, #4]
 80086ca:	2008      	movs	r0, #8
 80086cc:	f7ff f936 	bl	800793c <memp_free>
 80086d0:	e015      	b.n	80086fe <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80086d2:	7bfb      	ldrb	r3, [r7, #15]
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d104      	bne.n	80086e2 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80086d8:	6879      	ldr	r1, [r7, #4]
 80086da:	2007      	movs	r0, #7
 80086dc:	f7ff f92e 	bl	800793c <memp_free>
 80086e0:	e00d      	b.n	80086fe <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80086e2:	7bfb      	ldrb	r3, [r7, #15]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d103      	bne.n	80086f0 <pbuf_free+0xc8>
          mem_free(p);
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f7fe fdc1 	bl	8007270 <mem_free>
 80086ee:	e006      	b.n	80086fe <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80086f0:	4b0b      	ldr	r3, [pc, #44]	; (8008720 <pbuf_free+0xf8>)
 80086f2:	f240 320f 	movw	r2, #783	; 0x30f
 80086f6:	490f      	ldr	r1, [pc, #60]	; (8008734 <pbuf_free+0x10c>)
 80086f8:	480b      	ldr	r0, [pc, #44]	; (8008728 <pbuf_free+0x100>)
 80086fa:	f009 f98d 	bl	8011a18 <iprintf>
        }
      }
      count++;
 80086fe:	7dfb      	ldrb	r3, [r7, #23]
 8008700:	3301      	adds	r3, #1
 8008702:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	607b      	str	r3, [r7, #4]
 8008708:	e001      	b.n	800870e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800870a:	2300      	movs	r3, #0
 800870c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d19f      	bne.n	8008654 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8008714:	7dfb      	ldrb	r3, [r7, #23]
}
 8008716:	4618      	mov	r0, r3
 8008718:	3718      	adds	r7, #24
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop
 8008720:	08013fd0 	.word	0x08013fd0
 8008724:	08014134 	.word	0x08014134
 8008728:	08014030 	.word	0x08014030
 800872c:	08014160 	.word	0x08014160
 8008730:	08014178 	.word	0x08014178
 8008734:	0801419c 	.word	0x0801419c

08008738 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8008738:	b480      	push	{r7}
 800873a:	b085      	sub	sp, #20
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8008740:	2300      	movs	r3, #0
 8008742:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8008744:	e005      	b.n	8008752 <pbuf_clen+0x1a>
    ++len;
 8008746:	89fb      	ldrh	r3, [r7, #14]
 8008748:	3301      	adds	r3, #1
 800874a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d1f6      	bne.n	8008746 <pbuf_clen+0xe>
  }
  return len;
 8008758:	89fb      	ldrh	r3, [r7, #14]
}
 800875a:	4618      	mov	r0, r3
 800875c:	3714      	adds	r7, #20
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr
	...

08008768 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d010      	beq.n	8008798 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	7b9b      	ldrb	r3, [r3, #14]
 800877a:	3301      	adds	r3, #1
 800877c:	b2da      	uxtb	r2, r3
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	7b9b      	ldrb	r3, [r3, #14]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d106      	bne.n	8008798 <pbuf_ref+0x30>
 800878a:	4b05      	ldr	r3, [pc, #20]	; (80087a0 <pbuf_ref+0x38>)
 800878c:	f240 3242 	movw	r2, #834	; 0x342
 8008790:	4904      	ldr	r1, [pc, #16]	; (80087a4 <pbuf_ref+0x3c>)
 8008792:	4805      	ldr	r0, [pc, #20]	; (80087a8 <pbuf_ref+0x40>)
 8008794:	f009 f940 	bl	8011a18 <iprintf>
  }
}
 8008798:	bf00      	nop
 800879a:	3708      	adds	r7, #8
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}
 80087a0:	08013fd0 	.word	0x08013fd0
 80087a4:	080141b0 	.word	0x080141b0
 80087a8:	08014030 	.word	0x08014030

080087ac <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b084      	sub	sp, #16
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d002      	beq.n	80087c2 <pbuf_cat+0x16>
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d107      	bne.n	80087d2 <pbuf_cat+0x26>
 80087c2:	4b20      	ldr	r3, [pc, #128]	; (8008844 <pbuf_cat+0x98>)
 80087c4:	f240 3259 	movw	r2, #857	; 0x359
 80087c8:	491f      	ldr	r1, [pc, #124]	; (8008848 <pbuf_cat+0x9c>)
 80087ca:	4820      	ldr	r0, [pc, #128]	; (800884c <pbuf_cat+0xa0>)
 80087cc:	f009 f924 	bl	8011a18 <iprintf>
 80087d0:	e034      	b.n	800883c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	60fb      	str	r3, [r7, #12]
 80087d6:	e00a      	b.n	80087ee <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	891a      	ldrh	r2, [r3, #8]
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	891b      	ldrh	r3, [r3, #8]
 80087e0:	4413      	add	r3, r2
 80087e2:	b29a      	uxth	r2, r3
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	60fb      	str	r3, [r7, #12]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d1f0      	bne.n	80087d8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	891a      	ldrh	r2, [r3, #8]
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	895b      	ldrh	r3, [r3, #10]
 80087fe:	429a      	cmp	r2, r3
 8008800:	d006      	beq.n	8008810 <pbuf_cat+0x64>
 8008802:	4b10      	ldr	r3, [pc, #64]	; (8008844 <pbuf_cat+0x98>)
 8008804:	f240 3262 	movw	r2, #866	; 0x362
 8008808:	4911      	ldr	r1, [pc, #68]	; (8008850 <pbuf_cat+0xa4>)
 800880a:	4810      	ldr	r0, [pc, #64]	; (800884c <pbuf_cat+0xa0>)
 800880c:	f009 f904 	bl	8011a18 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d006      	beq.n	8008826 <pbuf_cat+0x7a>
 8008818:	4b0a      	ldr	r3, [pc, #40]	; (8008844 <pbuf_cat+0x98>)
 800881a:	f240 3263 	movw	r2, #867	; 0x363
 800881e:	490d      	ldr	r1, [pc, #52]	; (8008854 <pbuf_cat+0xa8>)
 8008820:	480a      	ldr	r0, [pc, #40]	; (800884c <pbuf_cat+0xa0>)
 8008822:	f009 f8f9 	bl	8011a18 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	891a      	ldrh	r2, [r3, #8]
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	891b      	ldrh	r3, [r3, #8]
 800882e:	4413      	add	r3, r2
 8008830:	b29a      	uxth	r2, r3
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	683a      	ldr	r2, [r7, #0]
 800883a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800883c:	3710      	adds	r7, #16
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
 8008842:	bf00      	nop
 8008844:	08013fd0 	.word	0x08013fd0
 8008848:	080141c4 	.word	0x080141c4
 800884c:	08014030 	.word	0x08014030
 8008850:	080141fc 	.word	0x080141fc
 8008854:	0801422c 	.word	0x0801422c

08008858 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b086      	sub	sp, #24
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8008862:	2300      	movs	r3, #0
 8008864:	617b      	str	r3, [r7, #20]
 8008866:	2300      	movs	r3, #0
 8008868:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d008      	beq.n	8008882 <pbuf_copy+0x2a>
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d005      	beq.n	8008882 <pbuf_copy+0x2a>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	891a      	ldrh	r2, [r3, #8]
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	891b      	ldrh	r3, [r3, #8]
 800887e:	429a      	cmp	r2, r3
 8008880:	d209      	bcs.n	8008896 <pbuf_copy+0x3e>
 8008882:	4b57      	ldr	r3, [pc, #348]	; (80089e0 <pbuf_copy+0x188>)
 8008884:	f240 32c9 	movw	r2, #969	; 0x3c9
 8008888:	4956      	ldr	r1, [pc, #344]	; (80089e4 <pbuf_copy+0x18c>)
 800888a:	4857      	ldr	r0, [pc, #348]	; (80089e8 <pbuf_copy+0x190>)
 800888c:	f009 f8c4 	bl	8011a18 <iprintf>
 8008890:	f06f 030f 	mvn.w	r3, #15
 8008894:	e09f      	b.n	80089d6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	895b      	ldrh	r3, [r3, #10]
 800889a:	461a      	mov	r2, r3
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	1ad2      	subs	r2, r2, r3
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	895b      	ldrh	r3, [r3, #10]
 80088a4:	4619      	mov	r1, r3
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	1acb      	subs	r3, r1, r3
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d306      	bcc.n	80088bc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	895b      	ldrh	r3, [r3, #10]
 80088b2:	461a      	mov	r2, r3
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	1ad3      	subs	r3, r2, r3
 80088b8:	60fb      	str	r3, [r7, #12]
 80088ba:	e005      	b.n	80088c8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	895b      	ldrh	r3, [r3, #10]
 80088c0:	461a      	mov	r2, r3
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	1ad3      	subs	r3, r2, r3
 80088c6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	685a      	ldr	r2, [r3, #4]
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	18d0      	adds	r0, r2, r3
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	685a      	ldr	r2, [r3, #4]
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	4413      	add	r3, r2
 80088d8:	68fa      	ldr	r2, [r7, #12]
 80088da:	4619      	mov	r1, r3
 80088dc:	f009 f9fd 	bl	8011cda <memcpy>
    offset_to += len;
 80088e0:	697a      	ldr	r2, [r7, #20]
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	4413      	add	r3, r2
 80088e6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80088e8:	693a      	ldr	r2, [r7, #16]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	4413      	add	r3, r2
 80088ee:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	895b      	ldrh	r3, [r3, #10]
 80088f4:	461a      	mov	r2, r3
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d906      	bls.n	800890a <pbuf_copy+0xb2>
 80088fc:	4b38      	ldr	r3, [pc, #224]	; (80089e0 <pbuf_copy+0x188>)
 80088fe:	f240 32d9 	movw	r2, #985	; 0x3d9
 8008902:	493a      	ldr	r1, [pc, #232]	; (80089ec <pbuf_copy+0x194>)
 8008904:	4838      	ldr	r0, [pc, #224]	; (80089e8 <pbuf_copy+0x190>)
 8008906:	f009 f887 	bl	8011a18 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	895b      	ldrh	r3, [r3, #10]
 800890e:	461a      	mov	r2, r3
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	4293      	cmp	r3, r2
 8008914:	d906      	bls.n	8008924 <pbuf_copy+0xcc>
 8008916:	4b32      	ldr	r3, [pc, #200]	; (80089e0 <pbuf_copy+0x188>)
 8008918:	f240 32da 	movw	r2, #986	; 0x3da
 800891c:	4934      	ldr	r1, [pc, #208]	; (80089f0 <pbuf_copy+0x198>)
 800891e:	4832      	ldr	r0, [pc, #200]	; (80089e8 <pbuf_copy+0x190>)
 8008920:	f009 f87a 	bl	8011a18 <iprintf>
    if (offset_from >= p_from->len) {
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	895b      	ldrh	r3, [r3, #10]
 8008928:	461a      	mov	r2, r3
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	4293      	cmp	r3, r2
 800892e:	d304      	bcc.n	800893a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8008930:	2300      	movs	r3, #0
 8008932:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	895b      	ldrh	r3, [r3, #10]
 800893e:	461a      	mov	r2, r3
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	4293      	cmp	r3, r2
 8008944:	d114      	bne.n	8008970 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8008946:	2300      	movs	r3, #0
 8008948:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d10c      	bne.n	8008970 <pbuf_copy+0x118>
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d009      	beq.n	8008970 <pbuf_copy+0x118>
 800895c:	4b20      	ldr	r3, [pc, #128]	; (80089e0 <pbuf_copy+0x188>)
 800895e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8008962:	4924      	ldr	r1, [pc, #144]	; (80089f4 <pbuf_copy+0x19c>)
 8008964:	4820      	ldr	r0, [pc, #128]	; (80089e8 <pbuf_copy+0x190>)
 8008966:	f009 f857 	bl	8011a18 <iprintf>
 800896a:	f06f 030f 	mvn.w	r3, #15
 800896e:	e032      	b.n	80089d6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d013      	beq.n	800899e <pbuf_copy+0x146>
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	895a      	ldrh	r2, [r3, #10]
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	891b      	ldrh	r3, [r3, #8]
 800897e:	429a      	cmp	r2, r3
 8008980:	d10d      	bne.n	800899e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d009      	beq.n	800899e <pbuf_copy+0x146>
 800898a:	4b15      	ldr	r3, [pc, #84]	; (80089e0 <pbuf_copy+0x188>)
 800898c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8008990:	4919      	ldr	r1, [pc, #100]	; (80089f8 <pbuf_copy+0x1a0>)
 8008992:	4815      	ldr	r0, [pc, #84]	; (80089e8 <pbuf_copy+0x190>)
 8008994:	f009 f840 	bl	8011a18 <iprintf>
 8008998:	f06f 0305 	mvn.w	r3, #5
 800899c:	e01b      	b.n	80089d6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d013      	beq.n	80089cc <pbuf_copy+0x174>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	895a      	ldrh	r2, [r3, #10]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	891b      	ldrh	r3, [r3, #8]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d10d      	bne.n	80089cc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d009      	beq.n	80089cc <pbuf_copy+0x174>
 80089b8:	4b09      	ldr	r3, [pc, #36]	; (80089e0 <pbuf_copy+0x188>)
 80089ba:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80089be:	490e      	ldr	r1, [pc, #56]	; (80089f8 <pbuf_copy+0x1a0>)
 80089c0:	4809      	ldr	r0, [pc, #36]	; (80089e8 <pbuf_copy+0x190>)
 80089c2:	f009 f829 	bl	8011a18 <iprintf>
 80089c6:	f06f 0305 	mvn.w	r3, #5
 80089ca:	e004      	b.n	80089d6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	f47f af61 	bne.w	8008896 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80089d4:	2300      	movs	r3, #0
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3718      	adds	r7, #24
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	bf00      	nop
 80089e0:	08013fd0 	.word	0x08013fd0
 80089e4:	08014278 	.word	0x08014278
 80089e8:	08014030 	.word	0x08014030
 80089ec:	080142a8 	.word	0x080142a8
 80089f0:	080142c0 	.word	0x080142c0
 80089f4:	080142dc 	.word	0x080142dc
 80089f8:	080142ec 	.word	0x080142ec

080089fc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b088      	sub	sp, #32
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	60f8      	str	r0, [r7, #12]
 8008a04:	60b9      	str	r1, [r7, #8]
 8008a06:	4611      	mov	r1, r2
 8008a08:	461a      	mov	r2, r3
 8008a0a:	460b      	mov	r3, r1
 8008a0c:	80fb      	strh	r3, [r7, #6]
 8008a0e:	4613      	mov	r3, r2
 8008a10:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8008a12:	2300      	movs	r3, #0
 8008a14:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8008a16:	2300      	movs	r3, #0
 8008a18:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d108      	bne.n	8008a32 <pbuf_copy_partial+0x36>
 8008a20:	4b2b      	ldr	r3, [pc, #172]	; (8008ad0 <pbuf_copy_partial+0xd4>)
 8008a22:	f240 420a 	movw	r2, #1034	; 0x40a
 8008a26:	492b      	ldr	r1, [pc, #172]	; (8008ad4 <pbuf_copy_partial+0xd8>)
 8008a28:	482b      	ldr	r0, [pc, #172]	; (8008ad8 <pbuf_copy_partial+0xdc>)
 8008a2a:	f008 fff5 	bl	8011a18 <iprintf>
 8008a2e:	2300      	movs	r3, #0
 8008a30:	e04a      	b.n	8008ac8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d108      	bne.n	8008a4a <pbuf_copy_partial+0x4e>
 8008a38:	4b25      	ldr	r3, [pc, #148]	; (8008ad0 <pbuf_copy_partial+0xd4>)
 8008a3a:	f240 420b 	movw	r2, #1035	; 0x40b
 8008a3e:	4927      	ldr	r1, [pc, #156]	; (8008adc <pbuf_copy_partial+0xe0>)
 8008a40:	4825      	ldr	r0, [pc, #148]	; (8008ad8 <pbuf_copy_partial+0xdc>)
 8008a42:	f008 ffe9 	bl	8011a18 <iprintf>
 8008a46:	2300      	movs	r3, #0
 8008a48:	e03e      	b.n	8008ac8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	61fb      	str	r3, [r7, #28]
 8008a4e:	e034      	b.n	8008aba <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8008a50:	88bb      	ldrh	r3, [r7, #4]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d00a      	beq.n	8008a6c <pbuf_copy_partial+0x70>
 8008a56:	69fb      	ldr	r3, [r7, #28]
 8008a58:	895b      	ldrh	r3, [r3, #10]
 8008a5a:	88ba      	ldrh	r2, [r7, #4]
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d305      	bcc.n	8008a6c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	895b      	ldrh	r3, [r3, #10]
 8008a64:	88ba      	ldrh	r2, [r7, #4]
 8008a66:	1ad3      	subs	r3, r2, r3
 8008a68:	80bb      	strh	r3, [r7, #4]
 8008a6a:	e023      	b.n	8008ab4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8008a6c:	69fb      	ldr	r3, [r7, #28]
 8008a6e:	895a      	ldrh	r2, [r3, #10]
 8008a70:	88bb      	ldrh	r3, [r7, #4]
 8008a72:	1ad3      	subs	r3, r2, r3
 8008a74:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8008a76:	8b3a      	ldrh	r2, [r7, #24]
 8008a78:	88fb      	ldrh	r3, [r7, #6]
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d901      	bls.n	8008a82 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8008a7e:	88fb      	ldrh	r3, [r7, #6]
 8008a80:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8008a82:	8b7b      	ldrh	r3, [r7, #26]
 8008a84:	68ba      	ldr	r2, [r7, #8]
 8008a86:	18d0      	adds	r0, r2, r3
 8008a88:	69fb      	ldr	r3, [r7, #28]
 8008a8a:	685a      	ldr	r2, [r3, #4]
 8008a8c:	88bb      	ldrh	r3, [r7, #4]
 8008a8e:	4413      	add	r3, r2
 8008a90:	8b3a      	ldrh	r2, [r7, #24]
 8008a92:	4619      	mov	r1, r3
 8008a94:	f009 f921 	bl	8011cda <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8008a98:	8afa      	ldrh	r2, [r7, #22]
 8008a9a:	8b3b      	ldrh	r3, [r7, #24]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8008aa0:	8b7a      	ldrh	r2, [r7, #26]
 8008aa2:	8b3b      	ldrh	r3, [r7, #24]
 8008aa4:	4413      	add	r3, r2
 8008aa6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8008aa8:	88fa      	ldrh	r2, [r7, #6]
 8008aaa:	8b3b      	ldrh	r3, [r7, #24]
 8008aac:	1ad3      	subs	r3, r2, r3
 8008aae:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008ab4:	69fb      	ldr	r3, [r7, #28]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	61fb      	str	r3, [r7, #28]
 8008aba:	88fb      	ldrh	r3, [r7, #6]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d002      	beq.n	8008ac6 <pbuf_copy_partial+0xca>
 8008ac0:	69fb      	ldr	r3, [r7, #28]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d1c4      	bne.n	8008a50 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8008ac6:	8afb      	ldrh	r3, [r7, #22]
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3720      	adds	r7, #32
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}
 8008ad0:	08013fd0 	.word	0x08013fd0
 8008ad4:	08014318 	.word	0x08014318
 8008ad8:	08014030 	.word	0x08014030
 8008adc:	08014338 	.word	0x08014338

08008ae0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b084      	sub	sp, #16
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	603a      	str	r2, [r7, #0]
 8008aea:	71fb      	strb	r3, [r7, #7]
 8008aec:	460b      	mov	r3, r1
 8008aee:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	8919      	ldrh	r1, [r3, #8]
 8008af4:	88ba      	ldrh	r2, [r7, #4]
 8008af6:	79fb      	ldrb	r3, [r7, #7]
 8008af8:	4618      	mov	r0, r3
 8008afa:	f7ff fab1 	bl	8008060 <pbuf_alloc>
 8008afe:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d101      	bne.n	8008b0a <pbuf_clone+0x2a>
    return NULL;
 8008b06:	2300      	movs	r3, #0
 8008b08:	e011      	b.n	8008b2e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8008b0a:	6839      	ldr	r1, [r7, #0]
 8008b0c:	68f8      	ldr	r0, [r7, #12]
 8008b0e:	f7ff fea3 	bl	8008858 <pbuf_copy>
 8008b12:	4603      	mov	r3, r0
 8008b14:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8008b16:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d006      	beq.n	8008b2c <pbuf_clone+0x4c>
 8008b1e:	4b06      	ldr	r3, [pc, #24]	; (8008b38 <pbuf_clone+0x58>)
 8008b20:	f240 5224 	movw	r2, #1316	; 0x524
 8008b24:	4905      	ldr	r1, [pc, #20]	; (8008b3c <pbuf_clone+0x5c>)
 8008b26:	4806      	ldr	r0, [pc, #24]	; (8008b40 <pbuf_clone+0x60>)
 8008b28:	f008 ff76 	bl	8011a18 <iprintf>
  return q;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3710      	adds	r7, #16
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	08013fd0 	.word	0x08013fd0
 8008b3c:	08014444 	.word	0x08014444
 8008b40:	08014030 	.word	0x08014030

08008b44 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8008b48:	f008 f88c 	bl	8010c64 <rand>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8008b5a:	b29a      	uxth	r2, r3
 8008b5c:	4b01      	ldr	r3, [pc, #4]	; (8008b64 <tcp_init+0x20>)
 8008b5e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8008b60:	bf00      	nop
 8008b62:	bd80      	pop	{r7, pc}
 8008b64:	20000020 	.word	0x20000020

08008b68 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b082      	sub	sp, #8
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	7d1b      	ldrb	r3, [r3, #20]
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d105      	bne.n	8008b84 <tcp_free+0x1c>
 8008b78:	4b06      	ldr	r3, [pc, #24]	; (8008b94 <tcp_free+0x2c>)
 8008b7a:	22d4      	movs	r2, #212	; 0xd4
 8008b7c:	4906      	ldr	r1, [pc, #24]	; (8008b98 <tcp_free+0x30>)
 8008b7e:	4807      	ldr	r0, [pc, #28]	; (8008b9c <tcp_free+0x34>)
 8008b80:	f008 ff4a 	bl	8011a18 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8008b84:	6879      	ldr	r1, [r7, #4]
 8008b86:	2001      	movs	r0, #1
 8008b88:	f7fe fed8 	bl	800793c <memp_free>
}
 8008b8c:	bf00      	nop
 8008b8e:	3708      	adds	r7, #8
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}
 8008b94:	080144d0 	.word	0x080144d0
 8008b98:	08014500 	.word	0x08014500
 8008b9c:	08014514 	.word	0x08014514

08008ba0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b082      	sub	sp, #8
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	7d1b      	ldrb	r3, [r3, #20]
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d105      	bne.n	8008bbc <tcp_free_listen+0x1c>
 8008bb0:	4b06      	ldr	r3, [pc, #24]	; (8008bcc <tcp_free_listen+0x2c>)
 8008bb2:	22df      	movs	r2, #223	; 0xdf
 8008bb4:	4906      	ldr	r1, [pc, #24]	; (8008bd0 <tcp_free_listen+0x30>)
 8008bb6:	4807      	ldr	r0, [pc, #28]	; (8008bd4 <tcp_free_listen+0x34>)
 8008bb8:	f008 ff2e 	bl	8011a18 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8008bbc:	6879      	ldr	r1, [r7, #4]
 8008bbe:	2002      	movs	r0, #2
 8008bc0:	f7fe febc 	bl	800793c <memp_free>
}
 8008bc4:	bf00      	nop
 8008bc6:	3708      	adds	r7, #8
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}
 8008bcc:	080144d0 	.word	0x080144d0
 8008bd0:	0801453c 	.word	0x0801453c
 8008bd4:	08014514 	.word	0x08014514

08008bd8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8008bdc:	f000 fea2 	bl	8009924 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8008be0:	4b07      	ldr	r3, [pc, #28]	; (8008c00 <tcp_tmr+0x28>)
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	3301      	adds	r3, #1
 8008be6:	b2da      	uxtb	r2, r3
 8008be8:	4b05      	ldr	r3, [pc, #20]	; (8008c00 <tcp_tmr+0x28>)
 8008bea:	701a      	strb	r2, [r3, #0]
 8008bec:	4b04      	ldr	r3, [pc, #16]	; (8008c00 <tcp_tmr+0x28>)
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	f003 0301 	and.w	r3, r3, #1
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d001      	beq.n	8008bfc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8008bf8:	f000 fb54 	bl	80092a4 <tcp_slowtmr>
  }
}
 8008bfc:	bf00      	nop
 8008bfe:	bd80      	pop	{r7, pc}
 8008c00:	2000a73d 	.word	0x2000a73d

08008c04 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d105      	bne.n	8008c20 <tcp_remove_listener+0x1c>
 8008c14:	4b0d      	ldr	r3, [pc, #52]	; (8008c4c <tcp_remove_listener+0x48>)
 8008c16:	22ff      	movs	r2, #255	; 0xff
 8008c18:	490d      	ldr	r1, [pc, #52]	; (8008c50 <tcp_remove_listener+0x4c>)
 8008c1a:	480e      	ldr	r0, [pc, #56]	; (8008c54 <tcp_remove_listener+0x50>)
 8008c1c:	f008 fefc 	bl	8011a18 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	60fb      	str	r3, [r7, #12]
 8008c24:	e00a      	b.n	8008c3c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c2a:	683a      	ldr	r2, [r7, #0]
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d102      	bne.n	8008c36 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2200      	movs	r2, #0
 8008c34:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	68db      	ldr	r3, [r3, #12]
 8008c3a:	60fb      	str	r3, [r7, #12]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d1f1      	bne.n	8008c26 <tcp_remove_listener+0x22>
    }
  }
}
 8008c42:	bf00      	nop
 8008c44:	bf00      	nop
 8008c46:	3710      	adds	r7, #16
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}
 8008c4c:	080144d0 	.word	0x080144d0
 8008c50:	08014558 	.word	0x08014558
 8008c54:	08014514 	.word	0x08014514

08008c58 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d106      	bne.n	8008c74 <tcp_listen_closed+0x1c>
 8008c66:	4b14      	ldr	r3, [pc, #80]	; (8008cb8 <tcp_listen_closed+0x60>)
 8008c68:	f240 1211 	movw	r2, #273	; 0x111
 8008c6c:	4913      	ldr	r1, [pc, #76]	; (8008cbc <tcp_listen_closed+0x64>)
 8008c6e:	4814      	ldr	r0, [pc, #80]	; (8008cc0 <tcp_listen_closed+0x68>)
 8008c70:	f008 fed2 	bl	8011a18 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	7d1b      	ldrb	r3, [r3, #20]
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d006      	beq.n	8008c8a <tcp_listen_closed+0x32>
 8008c7c:	4b0e      	ldr	r3, [pc, #56]	; (8008cb8 <tcp_listen_closed+0x60>)
 8008c7e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8008c82:	4910      	ldr	r1, [pc, #64]	; (8008cc4 <tcp_listen_closed+0x6c>)
 8008c84:	480e      	ldr	r0, [pc, #56]	; (8008cc0 <tcp_listen_closed+0x68>)
 8008c86:	f008 fec7 	bl	8011a18 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	60fb      	str	r3, [r7, #12]
 8008c8e:	e00b      	b.n	8008ca8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8008c90:	4a0d      	ldr	r2, [pc, #52]	; (8008cc8 <tcp_listen_closed+0x70>)
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	6879      	ldr	r1, [r7, #4]
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f7ff ffb1 	bl	8008c04 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	60fb      	str	r3, [r7, #12]
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2b03      	cmp	r3, #3
 8008cac:	d9f0      	bls.n	8008c90 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8008cae:	bf00      	nop
 8008cb0:	bf00      	nop
 8008cb2:	3710      	adds	r7, #16
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}
 8008cb8:	080144d0 	.word	0x080144d0
 8008cbc:	08014580 	.word	0x08014580
 8008cc0:	08014514 	.word	0x08014514
 8008cc4:	0801458c 	.word	0x0801458c
 8008cc8:	080164b0 	.word	0x080164b0

08008ccc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8008ccc:	b5b0      	push	{r4, r5, r7, lr}
 8008cce:	b088      	sub	sp, #32
 8008cd0:	af04      	add	r7, sp, #16
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d106      	bne.n	8008cec <tcp_close_shutdown+0x20>
 8008cde:	4b63      	ldr	r3, [pc, #396]	; (8008e6c <tcp_close_shutdown+0x1a0>)
 8008ce0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8008ce4:	4962      	ldr	r1, [pc, #392]	; (8008e70 <tcp_close_shutdown+0x1a4>)
 8008ce6:	4863      	ldr	r0, [pc, #396]	; (8008e74 <tcp_close_shutdown+0x1a8>)
 8008ce8:	f008 fe96 	bl	8011a18 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8008cec:	78fb      	ldrb	r3, [r7, #3]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d066      	beq.n	8008dc0 <tcp_close_shutdown+0xf4>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	7d1b      	ldrb	r3, [r3, #20]
 8008cf6:	2b04      	cmp	r3, #4
 8008cf8:	d003      	beq.n	8008d02 <tcp_close_shutdown+0x36>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	7d1b      	ldrb	r3, [r3, #20]
 8008cfe:	2b07      	cmp	r3, #7
 8008d00:	d15e      	bne.n	8008dc0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d104      	bne.n	8008d14 <tcp_close_shutdown+0x48>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d0e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008d12:	d055      	beq.n	8008dc0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	8b5b      	ldrh	r3, [r3, #26]
 8008d18:	f003 0310 	and.w	r3, r3, #16
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d106      	bne.n	8008d2e <tcp_close_shutdown+0x62>
 8008d20:	4b52      	ldr	r3, [pc, #328]	; (8008e6c <tcp_close_shutdown+0x1a0>)
 8008d22:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8008d26:	4954      	ldr	r1, [pc, #336]	; (8008e78 <tcp_close_shutdown+0x1ac>)
 8008d28:	4852      	ldr	r0, [pc, #328]	; (8008e74 <tcp_close_shutdown+0x1a8>)
 8008d2a:	f008 fe75 	bl	8011a18 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008d36:	687d      	ldr	r5, [r7, #4]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	3304      	adds	r3, #4
 8008d3c:	687a      	ldr	r2, [r7, #4]
 8008d3e:	8ad2      	ldrh	r2, [r2, #22]
 8008d40:	6879      	ldr	r1, [r7, #4]
 8008d42:	8b09      	ldrh	r1, [r1, #24]
 8008d44:	9102      	str	r1, [sp, #8]
 8008d46:	9201      	str	r2, [sp, #4]
 8008d48:	9300      	str	r3, [sp, #0]
 8008d4a:	462b      	mov	r3, r5
 8008d4c:	4622      	mov	r2, r4
 8008d4e:	4601      	mov	r1, r0
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f004 fe91 	bl	800da78 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f001 f8c6 	bl	8009ee8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008d5c:	4b47      	ldr	r3, [pc, #284]	; (8008e7c <tcp_close_shutdown+0x1b0>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d105      	bne.n	8008d72 <tcp_close_shutdown+0xa6>
 8008d66:	4b45      	ldr	r3, [pc, #276]	; (8008e7c <tcp_close_shutdown+0x1b0>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	4a43      	ldr	r2, [pc, #268]	; (8008e7c <tcp_close_shutdown+0x1b0>)
 8008d6e:	6013      	str	r3, [r2, #0]
 8008d70:	e013      	b.n	8008d9a <tcp_close_shutdown+0xce>
 8008d72:	4b42      	ldr	r3, [pc, #264]	; (8008e7c <tcp_close_shutdown+0x1b0>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	60fb      	str	r3, [r7, #12]
 8008d78:	e00c      	b.n	8008d94 <tcp_close_shutdown+0xc8>
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	68db      	ldr	r3, [r3, #12]
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	429a      	cmp	r2, r3
 8008d82:	d104      	bne.n	8008d8e <tcp_close_shutdown+0xc2>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	68da      	ldr	r2, [r3, #12]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	60da      	str	r2, [r3, #12]
 8008d8c:	e005      	b.n	8008d9a <tcp_close_shutdown+0xce>
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	68db      	ldr	r3, [r3, #12]
 8008d92:	60fb      	str	r3, [r7, #12]
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d1ef      	bne.n	8008d7a <tcp_close_shutdown+0xae>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	60da      	str	r2, [r3, #12]
 8008da0:	4b37      	ldr	r3, [pc, #220]	; (8008e80 <tcp_close_shutdown+0x1b4>)
 8008da2:	2201      	movs	r2, #1
 8008da4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8008da6:	4b37      	ldr	r3, [pc, #220]	; (8008e84 <tcp_close_shutdown+0x1b8>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d102      	bne.n	8008db6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8008db0:	f003 fd5e 	bl	800c870 <tcp_trigger_input_pcb_close>
 8008db4:	e002      	b.n	8008dbc <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f7ff fed6 	bl	8008b68 <tcp_free>
      }
      return ERR_OK;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	e050      	b.n	8008e62 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	7d1b      	ldrb	r3, [r3, #20]
 8008dc4:	2b02      	cmp	r3, #2
 8008dc6:	d03b      	beq.n	8008e40 <tcp_close_shutdown+0x174>
 8008dc8:	2b02      	cmp	r3, #2
 8008dca:	dc44      	bgt.n	8008e56 <tcp_close_shutdown+0x18a>
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d002      	beq.n	8008dd6 <tcp_close_shutdown+0x10a>
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d02a      	beq.n	8008e2a <tcp_close_shutdown+0x15e>
 8008dd4:	e03f      	b.n	8008e56 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	8adb      	ldrh	r3, [r3, #22]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d021      	beq.n	8008e22 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008dde:	4b2a      	ldr	r3, [pc, #168]	; (8008e88 <tcp_close_shutdown+0x1bc>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	429a      	cmp	r2, r3
 8008de6:	d105      	bne.n	8008df4 <tcp_close_shutdown+0x128>
 8008de8:	4b27      	ldr	r3, [pc, #156]	; (8008e88 <tcp_close_shutdown+0x1bc>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	68db      	ldr	r3, [r3, #12]
 8008dee:	4a26      	ldr	r2, [pc, #152]	; (8008e88 <tcp_close_shutdown+0x1bc>)
 8008df0:	6013      	str	r3, [r2, #0]
 8008df2:	e013      	b.n	8008e1c <tcp_close_shutdown+0x150>
 8008df4:	4b24      	ldr	r3, [pc, #144]	; (8008e88 <tcp_close_shutdown+0x1bc>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	60bb      	str	r3, [r7, #8]
 8008dfa:	e00c      	b.n	8008e16 <tcp_close_shutdown+0x14a>
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	68db      	ldr	r3, [r3, #12]
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d104      	bne.n	8008e10 <tcp_close_shutdown+0x144>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	68da      	ldr	r2, [r3, #12]
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	60da      	str	r2, [r3, #12]
 8008e0e:	e005      	b.n	8008e1c <tcp_close_shutdown+0x150>
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	68db      	ldr	r3, [r3, #12]
 8008e14:	60bb      	str	r3, [r7, #8]
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d1ef      	bne.n	8008dfc <tcp_close_shutdown+0x130>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f7ff fea0 	bl	8008b68 <tcp_free>
      break;
 8008e28:	e01a      	b.n	8008e60 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f7ff ff14 	bl	8008c58 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8008e30:	6879      	ldr	r1, [r7, #4]
 8008e32:	4816      	ldr	r0, [pc, #88]	; (8008e8c <tcp_close_shutdown+0x1c0>)
 8008e34:	f001 f8a8 	bl	8009f88 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f7ff feb1 	bl	8008ba0 <tcp_free_listen>
      break;
 8008e3e:	e00f      	b.n	8008e60 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008e40:	6879      	ldr	r1, [r7, #4]
 8008e42:	480e      	ldr	r0, [pc, #56]	; (8008e7c <tcp_close_shutdown+0x1b0>)
 8008e44:	f001 f8a0 	bl	8009f88 <tcp_pcb_remove>
 8008e48:	4b0d      	ldr	r3, [pc, #52]	; (8008e80 <tcp_close_shutdown+0x1b4>)
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f7ff fe8a 	bl	8008b68 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8008e54:	e004      	b.n	8008e60 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f000 f81a 	bl	8008e90 <tcp_close_shutdown_fin>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	e000      	b.n	8008e62 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8008e60:	2300      	movs	r3, #0
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3710      	adds	r7, #16
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bdb0      	pop	{r4, r5, r7, pc}
 8008e6a:	bf00      	nop
 8008e6c:	080144d0 	.word	0x080144d0
 8008e70:	080145a4 	.word	0x080145a4
 8008e74:	08014514 	.word	0x08014514
 8008e78:	080145c4 	.word	0x080145c4
 8008e7c:	2000a734 	.word	0x2000a734
 8008e80:	2000a73c 	.word	0x2000a73c
 8008e84:	2000a774 	.word	0x2000a774
 8008e88:	2000a72c 	.word	0x2000a72c
 8008e8c:	2000a730 	.word	0x2000a730

08008e90 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b084      	sub	sp, #16
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d106      	bne.n	8008eac <tcp_close_shutdown_fin+0x1c>
 8008e9e:	4b2e      	ldr	r3, [pc, #184]	; (8008f58 <tcp_close_shutdown_fin+0xc8>)
 8008ea0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8008ea4:	492d      	ldr	r1, [pc, #180]	; (8008f5c <tcp_close_shutdown_fin+0xcc>)
 8008ea6:	482e      	ldr	r0, [pc, #184]	; (8008f60 <tcp_close_shutdown_fin+0xd0>)
 8008ea8:	f008 fdb6 	bl	8011a18 <iprintf>

  switch (pcb->state) {
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	7d1b      	ldrb	r3, [r3, #20]
 8008eb0:	2b07      	cmp	r3, #7
 8008eb2:	d020      	beq.n	8008ef6 <tcp_close_shutdown_fin+0x66>
 8008eb4:	2b07      	cmp	r3, #7
 8008eb6:	dc2b      	bgt.n	8008f10 <tcp_close_shutdown_fin+0x80>
 8008eb8:	2b03      	cmp	r3, #3
 8008eba:	d002      	beq.n	8008ec2 <tcp_close_shutdown_fin+0x32>
 8008ebc:	2b04      	cmp	r3, #4
 8008ebe:	d00d      	beq.n	8008edc <tcp_close_shutdown_fin+0x4c>
 8008ec0:	e026      	b.n	8008f10 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f003 fee6 	bl	800cc94 <tcp_send_fin>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008ecc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d11f      	bne.n	8008f14 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2205      	movs	r2, #5
 8008ed8:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008eda:	e01b      	b.n	8008f14 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f003 fed9 	bl	800cc94 <tcp_send_fin>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d114      	bne.n	8008f18 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2205      	movs	r2, #5
 8008ef2:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008ef4:	e010      	b.n	8008f18 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f003 fecc 	bl	800cc94 <tcp_send_fin>
 8008efc:	4603      	mov	r3, r0
 8008efe:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008f00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d109      	bne.n	8008f1c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2209      	movs	r2, #9
 8008f0c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008f0e:	e005      	b.n	8008f1c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8008f10:	2300      	movs	r3, #0
 8008f12:	e01c      	b.n	8008f4e <tcp_close_shutdown_fin+0xbe>
      break;
 8008f14:	bf00      	nop
 8008f16:	e002      	b.n	8008f1e <tcp_close_shutdown_fin+0x8e>
      break;
 8008f18:	bf00      	nop
 8008f1a:	e000      	b.n	8008f1e <tcp_close_shutdown_fin+0x8e>
      break;
 8008f1c:	bf00      	nop
  }

  if (err == ERR_OK) {
 8008f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d103      	bne.n	8008f2e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f003 fff2 	bl	800cf10 <tcp_output>
 8008f2c:	e00d      	b.n	8008f4a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8008f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f36:	d108      	bne.n	8008f4a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	8b5b      	ldrh	r3, [r3, #26]
 8008f3c:	f043 0308 	orr.w	r3, r3, #8
 8008f40:	b29a      	uxth	r2, r3
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8008f46:	2300      	movs	r3, #0
 8008f48:	e001      	b.n	8008f4e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8008f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3710      	adds	r7, #16
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
 8008f56:	bf00      	nop
 8008f58:	080144d0 	.word	0x080144d0
 8008f5c:	08014580 	.word	0x08014580
 8008f60:	08014514 	.word	0x08014514

08008f64 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b082      	sub	sp, #8
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d109      	bne.n	8008f86 <tcp_close+0x22>
 8008f72:	4b0f      	ldr	r3, [pc, #60]	; (8008fb0 <tcp_close+0x4c>)
 8008f74:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8008f78:	490e      	ldr	r1, [pc, #56]	; (8008fb4 <tcp_close+0x50>)
 8008f7a:	480f      	ldr	r0, [pc, #60]	; (8008fb8 <tcp_close+0x54>)
 8008f7c:	f008 fd4c 	bl	8011a18 <iprintf>
 8008f80:	f06f 030f 	mvn.w	r3, #15
 8008f84:	e00f      	b.n	8008fa6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	7d1b      	ldrb	r3, [r3, #20]
 8008f8a:	2b01      	cmp	r3, #1
 8008f8c:	d006      	beq.n	8008f9c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	8b5b      	ldrh	r3, [r3, #26]
 8008f92:	f043 0310 	orr.w	r3, r3, #16
 8008f96:	b29a      	uxth	r2, r3
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8008f9c:	2101      	movs	r1, #1
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f7ff fe94 	bl	8008ccc <tcp_close_shutdown>
 8008fa4:	4603      	mov	r3, r0
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3708      	adds	r7, #8
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}
 8008fae:	bf00      	nop
 8008fb0:	080144d0 	.word	0x080144d0
 8008fb4:	080145e0 	.word	0x080145e0
 8008fb8:	08014514 	.word	0x08014514

08008fbc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b08e      	sub	sp, #56	; 0x38
 8008fc0:	af04      	add	r7, sp, #16
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d107      	bne.n	8008fdc <tcp_abandon+0x20>
 8008fcc:	4b52      	ldr	r3, [pc, #328]	; (8009118 <tcp_abandon+0x15c>)
 8008fce:	f240 223d 	movw	r2, #573	; 0x23d
 8008fd2:	4952      	ldr	r1, [pc, #328]	; (800911c <tcp_abandon+0x160>)
 8008fd4:	4852      	ldr	r0, [pc, #328]	; (8009120 <tcp_abandon+0x164>)
 8008fd6:	f008 fd1f 	bl	8011a18 <iprintf>
 8008fda:	e099      	b.n	8009110 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	7d1b      	ldrb	r3, [r3, #20]
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d106      	bne.n	8008ff2 <tcp_abandon+0x36>
 8008fe4:	4b4c      	ldr	r3, [pc, #304]	; (8009118 <tcp_abandon+0x15c>)
 8008fe6:	f44f 7210 	mov.w	r2, #576	; 0x240
 8008fea:	494e      	ldr	r1, [pc, #312]	; (8009124 <tcp_abandon+0x168>)
 8008fec:	484c      	ldr	r0, [pc, #304]	; (8009120 <tcp_abandon+0x164>)
 8008fee:	f008 fd13 	bl	8011a18 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	7d1b      	ldrb	r3, [r3, #20]
 8008ff6:	2b0a      	cmp	r3, #10
 8008ff8:	d107      	bne.n	800900a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8008ffa:	6879      	ldr	r1, [r7, #4]
 8008ffc:	484a      	ldr	r0, [pc, #296]	; (8009128 <tcp_abandon+0x16c>)
 8008ffe:	f000 ffc3 	bl	8009f88 <tcp_pcb_remove>
    tcp_free(pcb);
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f7ff fdb0 	bl	8008b68 <tcp_free>
 8009008:	e082      	b.n	8009110 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800900a:	2300      	movs	r3, #0
 800900c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800900e:	2300      	movs	r3, #0
 8009010:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009016:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800901c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009024:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	691b      	ldr	r3, [r3, #16]
 800902a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	7d1b      	ldrb	r3, [r3, #20]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d126      	bne.n	8009082 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	8adb      	ldrh	r3, [r3, #22]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d02e      	beq.n	800909a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800903c:	4b3b      	ldr	r3, [pc, #236]	; (800912c <tcp_abandon+0x170>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	429a      	cmp	r2, r3
 8009044:	d105      	bne.n	8009052 <tcp_abandon+0x96>
 8009046:	4b39      	ldr	r3, [pc, #228]	; (800912c <tcp_abandon+0x170>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	68db      	ldr	r3, [r3, #12]
 800904c:	4a37      	ldr	r2, [pc, #220]	; (800912c <tcp_abandon+0x170>)
 800904e:	6013      	str	r3, [r2, #0]
 8009050:	e013      	b.n	800907a <tcp_abandon+0xbe>
 8009052:	4b36      	ldr	r3, [pc, #216]	; (800912c <tcp_abandon+0x170>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	61fb      	str	r3, [r7, #28]
 8009058:	e00c      	b.n	8009074 <tcp_abandon+0xb8>
 800905a:	69fb      	ldr	r3, [r7, #28]
 800905c:	68db      	ldr	r3, [r3, #12]
 800905e:	687a      	ldr	r2, [r7, #4]
 8009060:	429a      	cmp	r2, r3
 8009062:	d104      	bne.n	800906e <tcp_abandon+0xb2>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	68da      	ldr	r2, [r3, #12]
 8009068:	69fb      	ldr	r3, [r7, #28]
 800906a:	60da      	str	r2, [r3, #12]
 800906c:	e005      	b.n	800907a <tcp_abandon+0xbe>
 800906e:	69fb      	ldr	r3, [r7, #28]
 8009070:	68db      	ldr	r3, [r3, #12]
 8009072:	61fb      	str	r3, [r7, #28]
 8009074:	69fb      	ldr	r3, [r7, #28]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d1ef      	bne.n	800905a <tcp_abandon+0x9e>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2200      	movs	r2, #0
 800907e:	60da      	str	r2, [r3, #12]
 8009080:	e00b      	b.n	800909a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	8adb      	ldrh	r3, [r3, #22]
 800908a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800908c:	6879      	ldr	r1, [r7, #4]
 800908e:	4828      	ldr	r0, [pc, #160]	; (8009130 <tcp_abandon+0x174>)
 8009090:	f000 ff7a 	bl	8009f88 <tcp_pcb_remove>
 8009094:	4b27      	ldr	r3, [pc, #156]	; (8009134 <tcp_abandon+0x178>)
 8009096:	2201      	movs	r2, #1
 8009098:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d004      	beq.n	80090ac <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090a6:	4618      	mov	r0, r3
 80090a8:	f000 fd1c 	bl	8009ae4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d004      	beq.n	80090be <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090b8:	4618      	mov	r0, r3
 80090ba:	f000 fd13 	bl	8009ae4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d004      	beq.n	80090d0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090ca:	4618      	mov	r0, r3
 80090cc:	f000 fd0a 	bl	8009ae4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80090d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d00e      	beq.n	80090f4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80090d6:	6879      	ldr	r1, [r7, #4]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	3304      	adds	r3, #4
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	8b12      	ldrh	r2, [r2, #24]
 80090e0:	9202      	str	r2, [sp, #8]
 80090e2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80090e4:	9201      	str	r2, [sp, #4]
 80090e6:	9300      	str	r3, [sp, #0]
 80090e8:	460b      	mov	r3, r1
 80090ea:	697a      	ldr	r2, [r7, #20]
 80090ec:	69b9      	ldr	r1, [r7, #24]
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f004 fcc2 	bl	800da78 <tcp_rst>
    }
    last_state = pcb->state;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	7d1b      	ldrb	r3, [r3, #20]
 80090f8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f7ff fd34 	bl	8008b68 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d004      	beq.n	8009110 <tcp_abandon+0x154>
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	f06f 010c 	mvn.w	r1, #12
 800910c:	68f8      	ldr	r0, [r7, #12]
 800910e:	4798      	blx	r3
  }
}
 8009110:	3728      	adds	r7, #40	; 0x28
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
 8009116:	bf00      	nop
 8009118:	080144d0 	.word	0x080144d0
 800911c:	08014614 	.word	0x08014614
 8009120:	08014514 	.word	0x08014514
 8009124:	08014630 	.word	0x08014630
 8009128:	2000a738 	.word	0x2000a738
 800912c:	2000a72c 	.word	0x2000a72c
 8009130:	2000a734 	.word	0x2000a734
 8009134:	2000a73c 	.word	0x2000a73c

08009138 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b082      	sub	sp, #8
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8009140:	2101      	movs	r1, #1
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f7ff ff3a 	bl	8008fbc <tcp_abandon>
}
 8009148:	bf00      	nop
 800914a:	3708      	adds	r7, #8
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d106      	bne.n	800916c <tcp_update_rcv_ann_wnd+0x1c>
 800915e:	4b25      	ldr	r3, [pc, #148]	; (80091f4 <tcp_update_rcv_ann_wnd+0xa4>)
 8009160:	f240 32a6 	movw	r2, #934	; 0x3a6
 8009164:	4924      	ldr	r1, [pc, #144]	; (80091f8 <tcp_update_rcv_ann_wnd+0xa8>)
 8009166:	4825      	ldr	r0, [pc, #148]	; (80091fc <tcp_update_rcv_ann_wnd+0xac>)
 8009168:	f008 fc56 	bl	8011a18 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8009174:	4413      	add	r3, r2
 8009176:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800917c:	687a      	ldr	r2, [r7, #4]
 800917e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8009180:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8009184:	bf28      	it	cs
 8009186:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800918a:	b292      	uxth	r2, r2
 800918c:	4413      	add	r3, r2
 800918e:	68fa      	ldr	r2, [r7, #12]
 8009190:	1ad3      	subs	r3, r2, r3
 8009192:	2b00      	cmp	r3, #0
 8009194:	db08      	blt.n	80091a8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091a2:	68fa      	ldr	r2, [r7, #12]
 80091a4:	1ad3      	subs	r3, r2, r3
 80091a6:	e020      	b.n	80091ea <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091b0:	1ad3      	subs	r3, r2, r3
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	dd03      	ble.n	80091be <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2200      	movs	r2, #0
 80091ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80091bc:	e014      	b.n	80091e8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c6:	1ad3      	subs	r3, r2, r3
 80091c8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091d0:	d306      	bcc.n	80091e0 <tcp_update_rcv_ann_wnd+0x90>
 80091d2:	4b08      	ldr	r3, [pc, #32]	; (80091f4 <tcp_update_rcv_ann_wnd+0xa4>)
 80091d4:	f240 32b6 	movw	r2, #950	; 0x3b6
 80091d8:	4909      	ldr	r1, [pc, #36]	; (8009200 <tcp_update_rcv_ann_wnd+0xb0>)
 80091da:	4808      	ldr	r0, [pc, #32]	; (80091fc <tcp_update_rcv_ann_wnd+0xac>)
 80091dc:	f008 fc1c 	bl	8011a18 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	b29a      	uxth	r2, r3
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80091e8:	2300      	movs	r3, #0
  }
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3710      	adds	r7, #16
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
 80091f2:	bf00      	nop
 80091f4:	080144d0 	.word	0x080144d0
 80091f8:	0801472c 	.word	0x0801472c
 80091fc:	08014514 	.word	0x08014514
 8009200:	08014750 	.word	0x08014750

08009204 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b084      	sub	sp, #16
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	460b      	mov	r3, r1
 800920e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d107      	bne.n	8009226 <tcp_recved+0x22>
 8009216:	4b1f      	ldr	r3, [pc, #124]	; (8009294 <tcp_recved+0x90>)
 8009218:	f240 32cf 	movw	r2, #975	; 0x3cf
 800921c:	491e      	ldr	r1, [pc, #120]	; (8009298 <tcp_recved+0x94>)
 800921e:	481f      	ldr	r0, [pc, #124]	; (800929c <tcp_recved+0x98>)
 8009220:	f008 fbfa 	bl	8011a18 <iprintf>
 8009224:	e032      	b.n	800928c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	7d1b      	ldrb	r3, [r3, #20]
 800922a:	2b01      	cmp	r3, #1
 800922c:	d106      	bne.n	800923c <tcp_recved+0x38>
 800922e:	4b19      	ldr	r3, [pc, #100]	; (8009294 <tcp_recved+0x90>)
 8009230:	f240 32d2 	movw	r2, #978	; 0x3d2
 8009234:	491a      	ldr	r1, [pc, #104]	; (80092a0 <tcp_recved+0x9c>)
 8009236:	4819      	ldr	r0, [pc, #100]	; (800929c <tcp_recved+0x98>)
 8009238:	f008 fbee 	bl	8011a18 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009240:	887b      	ldrh	r3, [r7, #2]
 8009242:	4413      	add	r3, r2
 8009244:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8009246:	89fb      	ldrh	r3, [r7, #14]
 8009248:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800924c:	d804      	bhi.n	8009258 <tcp_recved+0x54>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009252:	89fa      	ldrh	r2, [r7, #14]
 8009254:	429a      	cmp	r2, r3
 8009256:	d204      	bcs.n	8009262 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800925e:	851a      	strh	r2, [r3, #40]	; 0x28
 8009260:	e002      	b.n	8009268 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	89fa      	ldrh	r2, [r7, #14]
 8009266:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f7ff ff71 	bl	8009150 <tcp_update_rcv_ann_wnd>
 800926e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009276:	d309      	bcc.n	800928c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	8b5b      	ldrh	r3, [r3, #26]
 800927c:	f043 0302 	orr.w	r3, r3, #2
 8009280:	b29a      	uxth	r2, r3
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f003 fe42 	bl	800cf10 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800928c:	3710      	adds	r7, #16
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}
 8009292:	bf00      	nop
 8009294:	080144d0 	.word	0x080144d0
 8009298:	0801476c 	.word	0x0801476c
 800929c:	08014514 	.word	0x08014514
 80092a0:	08014784 	.word	0x08014784

080092a4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80092a4:	b5b0      	push	{r4, r5, r7, lr}
 80092a6:	b090      	sub	sp, #64	; 0x40
 80092a8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80092aa:	2300      	movs	r3, #0
 80092ac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80092b0:	4b94      	ldr	r3, [pc, #592]	; (8009504 <tcp_slowtmr+0x260>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	3301      	adds	r3, #1
 80092b6:	4a93      	ldr	r2, [pc, #588]	; (8009504 <tcp_slowtmr+0x260>)
 80092b8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80092ba:	4b93      	ldr	r3, [pc, #588]	; (8009508 <tcp_slowtmr+0x264>)
 80092bc:	781b      	ldrb	r3, [r3, #0]
 80092be:	3301      	adds	r3, #1
 80092c0:	b2da      	uxtb	r2, r3
 80092c2:	4b91      	ldr	r3, [pc, #580]	; (8009508 <tcp_slowtmr+0x264>)
 80092c4:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80092c6:	2300      	movs	r3, #0
 80092c8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80092ca:	4b90      	ldr	r3, [pc, #576]	; (800950c <tcp_slowtmr+0x268>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80092d0:	e29d      	b.n	800980e <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80092d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d4:	7d1b      	ldrb	r3, [r3, #20]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d106      	bne.n	80092e8 <tcp_slowtmr+0x44>
 80092da:	4b8d      	ldr	r3, [pc, #564]	; (8009510 <tcp_slowtmr+0x26c>)
 80092dc:	f240 42be 	movw	r2, #1214	; 0x4be
 80092e0:	498c      	ldr	r1, [pc, #560]	; (8009514 <tcp_slowtmr+0x270>)
 80092e2:	488d      	ldr	r0, [pc, #564]	; (8009518 <tcp_slowtmr+0x274>)
 80092e4:	f008 fb98 	bl	8011a18 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80092e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ea:	7d1b      	ldrb	r3, [r3, #20]
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	d106      	bne.n	80092fe <tcp_slowtmr+0x5a>
 80092f0:	4b87      	ldr	r3, [pc, #540]	; (8009510 <tcp_slowtmr+0x26c>)
 80092f2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80092f6:	4989      	ldr	r1, [pc, #548]	; (800951c <tcp_slowtmr+0x278>)
 80092f8:	4887      	ldr	r0, [pc, #540]	; (8009518 <tcp_slowtmr+0x274>)
 80092fa:	f008 fb8d 	bl	8011a18 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80092fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009300:	7d1b      	ldrb	r3, [r3, #20]
 8009302:	2b0a      	cmp	r3, #10
 8009304:	d106      	bne.n	8009314 <tcp_slowtmr+0x70>
 8009306:	4b82      	ldr	r3, [pc, #520]	; (8009510 <tcp_slowtmr+0x26c>)
 8009308:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800930c:	4984      	ldr	r1, [pc, #528]	; (8009520 <tcp_slowtmr+0x27c>)
 800930e:	4882      	ldr	r0, [pc, #520]	; (8009518 <tcp_slowtmr+0x274>)
 8009310:	f008 fb82 	bl	8011a18 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8009314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009316:	7f9a      	ldrb	r2, [r3, #30]
 8009318:	4b7b      	ldr	r3, [pc, #492]	; (8009508 <tcp_slowtmr+0x264>)
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	429a      	cmp	r2, r3
 800931e:	d105      	bne.n	800932c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8009320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009322:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009326:	68db      	ldr	r3, [r3, #12]
 8009328:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800932a:	e270      	b.n	800980e <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800932c:	4b76      	ldr	r3, [pc, #472]	; (8009508 <tcp_slowtmr+0x264>)
 800932e:	781a      	ldrb	r2, [r3, #0]
 8009330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009332:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8009334:	2300      	movs	r3, #0
 8009336:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800933a:	2300      	movs	r3, #0
 800933c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009342:	7d1b      	ldrb	r3, [r3, #20]
 8009344:	2b02      	cmp	r3, #2
 8009346:	d10a      	bne.n	800935e <tcp_slowtmr+0xba>
 8009348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800934a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800934e:	2b05      	cmp	r3, #5
 8009350:	d905      	bls.n	800935e <tcp_slowtmr+0xba>
      ++pcb_remove;
 8009352:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009356:	3301      	adds	r3, #1
 8009358:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800935c:	e11e      	b.n	800959c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800935e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009360:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009364:	2b0b      	cmp	r3, #11
 8009366:	d905      	bls.n	8009374 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8009368:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800936c:	3301      	adds	r3, #1
 800936e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009372:	e113      	b.n	800959c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8009374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009376:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800937a:	2b00      	cmp	r3, #0
 800937c:	d075      	beq.n	800946a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800937e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009382:	2b00      	cmp	r3, #0
 8009384:	d006      	beq.n	8009394 <tcp_slowtmr+0xf0>
 8009386:	4b62      	ldr	r3, [pc, #392]	; (8009510 <tcp_slowtmr+0x26c>)
 8009388:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800938c:	4965      	ldr	r1, [pc, #404]	; (8009524 <tcp_slowtmr+0x280>)
 800938e:	4862      	ldr	r0, [pc, #392]	; (8009518 <tcp_slowtmr+0x274>)
 8009390:	f008 fb42 	bl	8011a18 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8009394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009396:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009398:	2b00      	cmp	r3, #0
 800939a:	d106      	bne.n	80093aa <tcp_slowtmr+0x106>
 800939c:	4b5c      	ldr	r3, [pc, #368]	; (8009510 <tcp_slowtmr+0x26c>)
 800939e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80093a2:	4961      	ldr	r1, [pc, #388]	; (8009528 <tcp_slowtmr+0x284>)
 80093a4:	485c      	ldr	r0, [pc, #368]	; (8009518 <tcp_slowtmr+0x274>)
 80093a6:	f008 fb37 	bl	8011a18 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80093aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ac:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80093b0:	2b0b      	cmp	r3, #11
 80093b2:	d905      	bls.n	80093c0 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80093b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80093b8:	3301      	adds	r3, #1
 80093ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80093be:	e0ed      	b.n	800959c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80093c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093c2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80093c6:	3b01      	subs	r3, #1
 80093c8:	4a58      	ldr	r2, [pc, #352]	; (800952c <tcp_slowtmr+0x288>)
 80093ca:	5cd3      	ldrb	r3, [r2, r3]
 80093cc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80093ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80093d4:	7c7a      	ldrb	r2, [r7, #17]
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d907      	bls.n	80093ea <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80093da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093dc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80093e0:	3301      	adds	r3, #1
 80093e2:	b2da      	uxtb	r2, r3
 80093e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80093ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ec:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80093f0:	7c7a      	ldrb	r2, [r7, #17]
 80093f2:	429a      	cmp	r2, r3
 80093f4:	f200 80d2 	bhi.w	800959c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80093f8:	2301      	movs	r3, #1
 80093fa:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80093fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009402:	2b00      	cmp	r3, #0
 8009404:	d108      	bne.n	8009418 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8009406:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009408:	f004 fc2a 	bl	800dc60 <tcp_zero_window_probe>
 800940c:	4603      	mov	r3, r0
 800940e:	2b00      	cmp	r3, #0
 8009410:	d014      	beq.n	800943c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8009412:	2300      	movs	r3, #0
 8009414:	623b      	str	r3, [r7, #32]
 8009416:	e011      	b.n	800943c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8009418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800941a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800941e:	4619      	mov	r1, r3
 8009420:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009422:	f003 faef 	bl	800ca04 <tcp_split_unsent_seg>
 8009426:	4603      	mov	r3, r0
 8009428:	2b00      	cmp	r3, #0
 800942a:	d107      	bne.n	800943c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800942c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800942e:	f003 fd6f 	bl	800cf10 <tcp_output>
 8009432:	4603      	mov	r3, r0
 8009434:	2b00      	cmp	r3, #0
 8009436:	d101      	bne.n	800943c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8009438:	2300      	movs	r3, #0
 800943a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800943c:	6a3b      	ldr	r3, [r7, #32]
 800943e:	2b00      	cmp	r3, #0
 8009440:	f000 80ac 	beq.w	800959c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8009444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009446:	2200      	movs	r2, #0
 8009448:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800944c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800944e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009452:	2b06      	cmp	r3, #6
 8009454:	f200 80a2 	bhi.w	800959c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8009458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800945a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800945e:	3301      	adds	r3, #1
 8009460:	b2da      	uxtb	r2, r3
 8009462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009464:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8009468:	e098      	b.n	800959c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800946a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800946c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009470:	2b00      	cmp	r3, #0
 8009472:	db0f      	blt.n	8009494 <tcp_slowtmr+0x1f0>
 8009474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009476:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800947a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800947e:	4293      	cmp	r3, r2
 8009480:	d008      	beq.n	8009494 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8009482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009484:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009488:	b29b      	uxth	r3, r3
 800948a:	3301      	adds	r3, #1
 800948c:	b29b      	uxth	r3, r3
 800948e:	b21a      	sxth	r2, r3
 8009490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009492:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8009494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009496:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800949a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800949c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80094a0:	429a      	cmp	r2, r3
 80094a2:	db7b      	blt.n	800959c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80094a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80094a6:	f004 f827 	bl	800d4f8 <tcp_rexmit_rto_prepare>
 80094aa:	4603      	mov	r3, r0
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d007      	beq.n	80094c0 <tcp_slowtmr+0x21c>
 80094b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d171      	bne.n	800959c <tcp_slowtmr+0x2f8>
 80094b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d06d      	beq.n	800959c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80094c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094c2:	7d1b      	ldrb	r3, [r3, #20]
 80094c4:	2b02      	cmp	r3, #2
 80094c6:	d03a      	beq.n	800953e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80094c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80094ce:	2b0c      	cmp	r3, #12
 80094d0:	bf28      	it	cs
 80094d2:	230c      	movcs	r3, #12
 80094d4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80094d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094d8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80094dc:	10db      	asrs	r3, r3, #3
 80094de:	b21b      	sxth	r3, r3
 80094e0:	461a      	mov	r2, r3
 80094e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80094e8:	4413      	add	r3, r2
 80094ea:	7efa      	ldrb	r2, [r7, #27]
 80094ec:	4910      	ldr	r1, [pc, #64]	; (8009530 <tcp_slowtmr+0x28c>)
 80094ee:	5c8a      	ldrb	r2, [r1, r2]
 80094f0:	4093      	lsls	r3, r2
 80094f2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80094fa:	4293      	cmp	r3, r2
 80094fc:	dc1a      	bgt.n	8009534 <tcp_slowtmr+0x290>
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	b21a      	sxth	r2, r3
 8009502:	e019      	b.n	8009538 <tcp_slowtmr+0x294>
 8009504:	2000a728 	.word	0x2000a728
 8009508:	2000a73e 	.word	0x2000a73e
 800950c:	2000a734 	.word	0x2000a734
 8009510:	080144d0 	.word	0x080144d0
 8009514:	08014814 	.word	0x08014814
 8009518:	08014514 	.word	0x08014514
 800951c:	08014840 	.word	0x08014840
 8009520:	0801486c 	.word	0x0801486c
 8009524:	0801489c 	.word	0x0801489c
 8009528:	080148d0 	.word	0x080148d0
 800952c:	080164a8 	.word	0x080164a8
 8009530:	08016498 	.word	0x08016498
 8009534:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8009538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800953a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800953e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009540:	2200      	movs	r2, #0
 8009542:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8009544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009546:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800954a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800954c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009550:	4293      	cmp	r3, r2
 8009552:	bf28      	it	cs
 8009554:	4613      	movcs	r3, r2
 8009556:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8009558:	8a7b      	ldrh	r3, [r7, #18]
 800955a:	085b      	lsrs	r3, r3, #1
 800955c:	b29a      	uxth	r2, r3
 800955e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009560:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009566:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800956a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800956c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800956e:	005b      	lsls	r3, r3, #1
 8009570:	b29b      	uxth	r3, r3
 8009572:	429a      	cmp	r2, r3
 8009574:	d206      	bcs.n	8009584 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8009576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009578:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800957a:	005b      	lsls	r3, r3, #1
 800957c:	b29a      	uxth	r2, r3
 800957e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009580:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8009584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009586:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8009588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800958a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800958e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009590:	2200      	movs	r2, #0
 8009592:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8009596:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009598:	f004 f81e 	bl	800d5d8 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800959c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800959e:	7d1b      	ldrb	r3, [r3, #20]
 80095a0:	2b06      	cmp	r3, #6
 80095a2:	d111      	bne.n	80095c8 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80095a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a6:	8b5b      	ldrh	r3, [r3, #26]
 80095a8:	f003 0310 	and.w	r3, r3, #16
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d00b      	beq.n	80095c8 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80095b0:	4b9c      	ldr	r3, [pc, #624]	; (8009824 <tcp_slowtmr+0x580>)
 80095b2:	681a      	ldr	r2, [r3, #0]
 80095b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b6:	6a1b      	ldr	r3, [r3, #32]
 80095b8:	1ad3      	subs	r3, r2, r3
 80095ba:	2b28      	cmp	r3, #40	; 0x28
 80095bc:	d904      	bls.n	80095c8 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80095be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095c2:	3301      	adds	r3, #1
 80095c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80095c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ca:	7a5b      	ldrb	r3, [r3, #9]
 80095cc:	f003 0308 	and.w	r3, r3, #8
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d04a      	beq.n	800966a <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 80095d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80095d8:	2b04      	cmp	r3, #4
 80095da:	d003      	beq.n	80095e4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80095dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095de:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80095e0:	2b07      	cmp	r3, #7
 80095e2:	d142      	bne.n	800966a <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80095e4:	4b8f      	ldr	r3, [pc, #572]	; (8009824 <tcp_slowtmr+0x580>)
 80095e6:	681a      	ldr	r2, [r3, #0]
 80095e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ea:	6a1b      	ldr	r3, [r3, #32]
 80095ec:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80095ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095f0:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80095f4:	4b8c      	ldr	r3, [pc, #560]	; (8009828 <tcp_slowtmr+0x584>)
 80095f6:	440b      	add	r3, r1
 80095f8:	498c      	ldr	r1, [pc, #560]	; (800982c <tcp_slowtmr+0x588>)
 80095fa:	fba1 1303 	umull	r1, r3, r1, r3
 80095fe:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009600:	429a      	cmp	r2, r3
 8009602:	d90a      	bls.n	800961a <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8009604:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009608:	3301      	adds	r3, #1
 800960a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800960e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009612:	3301      	adds	r3, #1
 8009614:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009618:	e027      	b.n	800966a <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800961a:	4b82      	ldr	r3, [pc, #520]	; (8009824 <tcp_slowtmr+0x580>)
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009620:	6a1b      	ldr	r3, [r3, #32]
 8009622:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8009624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009626:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800962a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800962c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8009630:	4618      	mov	r0, r3
 8009632:	4b7f      	ldr	r3, [pc, #508]	; (8009830 <tcp_slowtmr+0x58c>)
 8009634:	fb00 f303 	mul.w	r3, r0, r3
 8009638:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800963a:	497c      	ldr	r1, [pc, #496]	; (800982c <tcp_slowtmr+0x588>)
 800963c:	fba1 1303 	umull	r1, r3, r1, r3
 8009640:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009642:	429a      	cmp	r2, r3
 8009644:	d911      	bls.n	800966a <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8009646:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009648:	f004 faca 	bl	800dbe0 <tcp_keepalive>
 800964c:	4603      	mov	r3, r0
 800964e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8009652:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8009656:	2b00      	cmp	r3, #0
 8009658:	d107      	bne.n	800966a <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800965a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800965c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8009660:	3301      	adds	r3, #1
 8009662:	b2da      	uxtb	r2, r3
 8009664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009666:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800966a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800966c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800966e:	2b00      	cmp	r3, #0
 8009670:	d011      	beq.n	8009696 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8009672:	4b6c      	ldr	r3, [pc, #432]	; (8009824 <tcp_slowtmr+0x580>)
 8009674:	681a      	ldr	r2, [r3, #0]
 8009676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009678:	6a1b      	ldr	r3, [r3, #32]
 800967a:	1ad2      	subs	r2, r2, r3
 800967c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800967e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8009682:	4619      	mov	r1, r3
 8009684:	460b      	mov	r3, r1
 8009686:	005b      	lsls	r3, r3, #1
 8009688:	440b      	add	r3, r1
 800968a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800968c:	429a      	cmp	r2, r3
 800968e:	d302      	bcc.n	8009696 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8009690:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009692:	f000 fddd 	bl	800a250 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8009696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009698:	7d1b      	ldrb	r3, [r3, #20]
 800969a:	2b03      	cmp	r3, #3
 800969c:	d10b      	bne.n	80096b6 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800969e:	4b61      	ldr	r3, [pc, #388]	; (8009824 <tcp_slowtmr+0x580>)
 80096a0:	681a      	ldr	r2, [r3, #0]
 80096a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096a4:	6a1b      	ldr	r3, [r3, #32]
 80096a6:	1ad3      	subs	r3, r2, r3
 80096a8:	2b28      	cmp	r3, #40	; 0x28
 80096aa:	d904      	bls.n	80096b6 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80096ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096b0:	3301      	adds	r3, #1
 80096b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80096b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096b8:	7d1b      	ldrb	r3, [r3, #20]
 80096ba:	2b09      	cmp	r3, #9
 80096bc:	d10b      	bne.n	80096d6 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80096be:	4b59      	ldr	r3, [pc, #356]	; (8009824 <tcp_slowtmr+0x580>)
 80096c0:	681a      	ldr	r2, [r3, #0]
 80096c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096c4:	6a1b      	ldr	r3, [r3, #32]
 80096c6:	1ad3      	subs	r3, r2, r3
 80096c8:	2bf0      	cmp	r3, #240	; 0xf0
 80096ca:	d904      	bls.n	80096d6 <tcp_slowtmr+0x432>
        ++pcb_remove;
 80096cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096d0:	3301      	adds	r3, #1
 80096d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80096d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d060      	beq.n	80097a0 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80096de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096e4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80096e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096e8:	f000 fbfe 	bl	8009ee8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80096ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d010      	beq.n	8009714 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80096f2:	4b50      	ldr	r3, [pc, #320]	; (8009834 <tcp_slowtmr+0x590>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d106      	bne.n	800970a <tcp_slowtmr+0x466>
 80096fc:	4b4e      	ldr	r3, [pc, #312]	; (8009838 <tcp_slowtmr+0x594>)
 80096fe:	f240 526d 	movw	r2, #1389	; 0x56d
 8009702:	494e      	ldr	r1, [pc, #312]	; (800983c <tcp_slowtmr+0x598>)
 8009704:	484e      	ldr	r0, [pc, #312]	; (8009840 <tcp_slowtmr+0x59c>)
 8009706:	f008 f987 	bl	8011a18 <iprintf>
        prev->next = pcb->next;
 800970a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800970c:	68da      	ldr	r2, [r3, #12]
 800970e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009710:	60da      	str	r2, [r3, #12]
 8009712:	e00f      	b.n	8009734 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8009714:	4b47      	ldr	r3, [pc, #284]	; (8009834 <tcp_slowtmr+0x590>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800971a:	429a      	cmp	r2, r3
 800971c:	d006      	beq.n	800972c <tcp_slowtmr+0x488>
 800971e:	4b46      	ldr	r3, [pc, #280]	; (8009838 <tcp_slowtmr+0x594>)
 8009720:	f240 5271 	movw	r2, #1393	; 0x571
 8009724:	4947      	ldr	r1, [pc, #284]	; (8009844 <tcp_slowtmr+0x5a0>)
 8009726:	4846      	ldr	r0, [pc, #280]	; (8009840 <tcp_slowtmr+0x59c>)
 8009728:	f008 f976 	bl	8011a18 <iprintf>
        tcp_active_pcbs = pcb->next;
 800972c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800972e:	68db      	ldr	r3, [r3, #12]
 8009730:	4a40      	ldr	r2, [pc, #256]	; (8009834 <tcp_slowtmr+0x590>)
 8009732:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8009734:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009738:	2b00      	cmp	r3, #0
 800973a:	d013      	beq.n	8009764 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800973c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800973e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009742:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009744:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8009746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009748:	3304      	adds	r3, #4
 800974a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800974c:	8ad2      	ldrh	r2, [r2, #22]
 800974e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009750:	8b09      	ldrh	r1, [r1, #24]
 8009752:	9102      	str	r1, [sp, #8]
 8009754:	9201      	str	r2, [sp, #4]
 8009756:	9300      	str	r3, [sp, #0]
 8009758:	462b      	mov	r3, r5
 800975a:	4622      	mov	r2, r4
 800975c:	4601      	mov	r1, r0
 800975e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009760:	f004 f98a 	bl	800da78 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8009764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009766:	691b      	ldr	r3, [r3, #16]
 8009768:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800976a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800976c:	7d1b      	ldrb	r3, [r3, #20]
 800976e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8009770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009772:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8009774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009776:	68db      	ldr	r3, [r3, #12]
 8009778:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800977a:	6838      	ldr	r0, [r7, #0]
 800977c:	f7ff f9f4 	bl	8008b68 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8009780:	4b31      	ldr	r3, [pc, #196]	; (8009848 <tcp_slowtmr+0x5a4>)
 8009782:	2200      	movs	r2, #0
 8009784:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d004      	beq.n	8009796 <tcp_slowtmr+0x4f2>
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f06f 010c 	mvn.w	r1, #12
 8009792:	68b8      	ldr	r0, [r7, #8]
 8009794:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8009796:	4b2c      	ldr	r3, [pc, #176]	; (8009848 <tcp_slowtmr+0x5a4>)
 8009798:	781b      	ldrb	r3, [r3, #0]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d037      	beq.n	800980e <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800979e:	e592      	b.n	80092c6 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80097a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097a2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80097a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097a6:	68db      	ldr	r3, [r3, #12]
 80097a8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80097aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ac:	7f1b      	ldrb	r3, [r3, #28]
 80097ae:	3301      	adds	r3, #1
 80097b0:	b2da      	uxtb	r2, r3
 80097b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80097b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b8:	7f1a      	ldrb	r2, [r3, #28]
 80097ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097bc:	7f5b      	ldrb	r3, [r3, #29]
 80097be:	429a      	cmp	r2, r3
 80097c0:	d325      	bcc.n	800980e <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 80097c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c4:	2200      	movs	r2, #0
 80097c6:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80097c8:	4b1f      	ldr	r3, [pc, #124]	; (8009848 <tcp_slowtmr+0x5a4>)
 80097ca:	2200      	movs	r2, #0
 80097cc:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80097ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d00b      	beq.n	80097f0 <tcp_slowtmr+0x54c>
 80097d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097e0:	6912      	ldr	r2, [r2, #16]
 80097e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80097e4:	4610      	mov	r0, r2
 80097e6:	4798      	blx	r3
 80097e8:	4603      	mov	r3, r0
 80097ea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80097ee:	e002      	b.n	80097f6 <tcp_slowtmr+0x552>
 80097f0:	2300      	movs	r3, #0
 80097f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80097f6:	4b14      	ldr	r3, [pc, #80]	; (8009848 <tcp_slowtmr+0x5a4>)
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d000      	beq.n	8009800 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 80097fe:	e562      	b.n	80092c6 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8009800:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8009804:	2b00      	cmp	r3, #0
 8009806:	d102      	bne.n	800980e <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8009808:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800980a:	f003 fb81 	bl	800cf10 <tcp_output>
  while (pcb != NULL) {
 800980e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009810:	2b00      	cmp	r3, #0
 8009812:	f47f ad5e 	bne.w	80092d2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8009816:	2300      	movs	r3, #0
 8009818:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800981a:	4b0c      	ldr	r3, [pc, #48]	; (800984c <tcp_slowtmr+0x5a8>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8009820:	e069      	b.n	80098f6 <tcp_slowtmr+0x652>
 8009822:	bf00      	nop
 8009824:	2000a728 	.word	0x2000a728
 8009828:	000a4cb8 	.word	0x000a4cb8
 800982c:	10624dd3 	.word	0x10624dd3
 8009830:	000124f8 	.word	0x000124f8
 8009834:	2000a734 	.word	0x2000a734
 8009838:	080144d0 	.word	0x080144d0
 800983c:	08014908 	.word	0x08014908
 8009840:	08014514 	.word	0x08014514
 8009844:	08014934 	.word	0x08014934
 8009848:	2000a73c 	.word	0x2000a73c
 800984c:	2000a738 	.word	0x2000a738
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009852:	7d1b      	ldrb	r3, [r3, #20]
 8009854:	2b0a      	cmp	r3, #10
 8009856:	d006      	beq.n	8009866 <tcp_slowtmr+0x5c2>
 8009858:	4b2b      	ldr	r3, [pc, #172]	; (8009908 <tcp_slowtmr+0x664>)
 800985a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800985e:	492b      	ldr	r1, [pc, #172]	; (800990c <tcp_slowtmr+0x668>)
 8009860:	482b      	ldr	r0, [pc, #172]	; (8009910 <tcp_slowtmr+0x66c>)
 8009862:	f008 f8d9 	bl	8011a18 <iprintf>
    pcb_remove = 0;
 8009866:	2300      	movs	r3, #0
 8009868:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800986c:	4b29      	ldr	r3, [pc, #164]	; (8009914 <tcp_slowtmr+0x670>)
 800986e:	681a      	ldr	r2, [r3, #0]
 8009870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009872:	6a1b      	ldr	r3, [r3, #32]
 8009874:	1ad3      	subs	r3, r2, r3
 8009876:	2bf0      	cmp	r3, #240	; 0xf0
 8009878:	d904      	bls.n	8009884 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800987a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800987e:	3301      	adds	r3, #1
 8009880:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009884:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009888:	2b00      	cmp	r3, #0
 800988a:	d02f      	beq.n	80098ec <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800988c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800988e:	f000 fb2b 	bl	8009ee8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8009892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009894:	2b00      	cmp	r3, #0
 8009896:	d010      	beq.n	80098ba <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009898:	4b1f      	ldr	r3, [pc, #124]	; (8009918 <tcp_slowtmr+0x674>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800989e:	429a      	cmp	r2, r3
 80098a0:	d106      	bne.n	80098b0 <tcp_slowtmr+0x60c>
 80098a2:	4b19      	ldr	r3, [pc, #100]	; (8009908 <tcp_slowtmr+0x664>)
 80098a4:	f240 52af 	movw	r2, #1455	; 0x5af
 80098a8:	491c      	ldr	r1, [pc, #112]	; (800991c <tcp_slowtmr+0x678>)
 80098aa:	4819      	ldr	r0, [pc, #100]	; (8009910 <tcp_slowtmr+0x66c>)
 80098ac:	f008 f8b4 	bl	8011a18 <iprintf>
        prev->next = pcb->next;
 80098b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b2:	68da      	ldr	r2, [r3, #12]
 80098b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b6:	60da      	str	r2, [r3, #12]
 80098b8:	e00f      	b.n	80098da <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80098ba:	4b17      	ldr	r3, [pc, #92]	; (8009918 <tcp_slowtmr+0x674>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d006      	beq.n	80098d2 <tcp_slowtmr+0x62e>
 80098c4:	4b10      	ldr	r3, [pc, #64]	; (8009908 <tcp_slowtmr+0x664>)
 80098c6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80098ca:	4915      	ldr	r1, [pc, #84]	; (8009920 <tcp_slowtmr+0x67c>)
 80098cc:	4810      	ldr	r0, [pc, #64]	; (8009910 <tcp_slowtmr+0x66c>)
 80098ce:	f008 f8a3 	bl	8011a18 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80098d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d4:	68db      	ldr	r3, [r3, #12]
 80098d6:	4a10      	ldr	r2, [pc, #64]	; (8009918 <tcp_slowtmr+0x674>)
 80098d8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80098da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098dc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80098de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098e0:	68db      	ldr	r3, [r3, #12]
 80098e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80098e4:	69f8      	ldr	r0, [r7, #28]
 80098e6:	f7ff f93f 	bl	8008b68 <tcp_free>
 80098ea:	e004      	b.n	80098f6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80098ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ee:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80098f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098f2:	68db      	ldr	r3, [r3, #12]
 80098f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80098f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d1a9      	bne.n	8009850 <tcp_slowtmr+0x5ac>
    }
  }
}
 80098fc:	bf00      	nop
 80098fe:	bf00      	nop
 8009900:	3730      	adds	r7, #48	; 0x30
 8009902:	46bd      	mov	sp, r7
 8009904:	bdb0      	pop	{r4, r5, r7, pc}
 8009906:	bf00      	nop
 8009908:	080144d0 	.word	0x080144d0
 800990c:	08014960 	.word	0x08014960
 8009910:	08014514 	.word	0x08014514
 8009914:	2000a728 	.word	0x2000a728
 8009918:	2000a738 	.word	0x2000a738
 800991c:	08014990 	.word	0x08014990
 8009920:	080149b8 	.word	0x080149b8

08009924 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b082      	sub	sp, #8
 8009928:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800992a:	4b2d      	ldr	r3, [pc, #180]	; (80099e0 <tcp_fasttmr+0xbc>)
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	3301      	adds	r3, #1
 8009930:	b2da      	uxtb	r2, r3
 8009932:	4b2b      	ldr	r3, [pc, #172]	; (80099e0 <tcp_fasttmr+0xbc>)
 8009934:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8009936:	4b2b      	ldr	r3, [pc, #172]	; (80099e4 <tcp_fasttmr+0xc0>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800993c:	e048      	b.n	80099d0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	7f9a      	ldrb	r2, [r3, #30]
 8009942:	4b27      	ldr	r3, [pc, #156]	; (80099e0 <tcp_fasttmr+0xbc>)
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	429a      	cmp	r2, r3
 8009948:	d03f      	beq.n	80099ca <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800994a:	4b25      	ldr	r3, [pc, #148]	; (80099e0 <tcp_fasttmr+0xbc>)
 800994c:	781a      	ldrb	r2, [r3, #0]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	8b5b      	ldrh	r3, [r3, #26]
 8009956:	f003 0301 	and.w	r3, r3, #1
 800995a:	2b00      	cmp	r3, #0
 800995c:	d010      	beq.n	8009980 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	8b5b      	ldrh	r3, [r3, #26]
 8009962:	f043 0302 	orr.w	r3, r3, #2
 8009966:	b29a      	uxth	r2, r3
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f003 facf 	bl	800cf10 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	8b5b      	ldrh	r3, [r3, #26]
 8009976:	f023 0303 	bic.w	r3, r3, #3
 800997a:	b29a      	uxth	r2, r3
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	8b5b      	ldrh	r3, [r3, #26]
 8009984:	f003 0308 	and.w	r3, r3, #8
 8009988:	2b00      	cmp	r3, #0
 800998a:	d009      	beq.n	80099a0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	8b5b      	ldrh	r3, [r3, #26]
 8009990:	f023 0308 	bic.w	r3, r3, #8
 8009994:	b29a      	uxth	r2, r3
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f7ff fa78 	bl	8008e90 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	68db      	ldr	r3, [r3, #12]
 80099a4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d00a      	beq.n	80099c4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80099ae:	4b0e      	ldr	r3, [pc, #56]	; (80099e8 <tcp_fasttmr+0xc4>)
 80099b0:	2200      	movs	r2, #0
 80099b2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 f819 	bl	80099ec <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80099ba:	4b0b      	ldr	r3, [pc, #44]	; (80099e8 <tcp_fasttmr+0xc4>)
 80099bc:	781b      	ldrb	r3, [r3, #0]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d000      	beq.n	80099c4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80099c2:	e7b8      	b.n	8009936 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	607b      	str	r3, [r7, #4]
 80099c8:	e002      	b.n	80099d0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	68db      	ldr	r3, [r3, #12]
 80099ce:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d1b3      	bne.n	800993e <tcp_fasttmr+0x1a>
    }
  }
}
 80099d6:	bf00      	nop
 80099d8:	bf00      	nop
 80099da:	3708      	adds	r7, #8
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}
 80099e0:	2000a73e 	.word	0x2000a73e
 80099e4:	2000a734 	.word	0x2000a734
 80099e8:	2000a73c 	.word	0x2000a73c

080099ec <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80099ec:	b590      	push	{r4, r7, lr}
 80099ee:	b085      	sub	sp, #20
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d109      	bne.n	8009a0e <tcp_process_refused_data+0x22>
 80099fa:	4b37      	ldr	r3, [pc, #220]	; (8009ad8 <tcp_process_refused_data+0xec>)
 80099fc:	f240 6209 	movw	r2, #1545	; 0x609
 8009a00:	4936      	ldr	r1, [pc, #216]	; (8009adc <tcp_process_refused_data+0xf0>)
 8009a02:	4837      	ldr	r0, [pc, #220]	; (8009ae0 <tcp_process_refused_data+0xf4>)
 8009a04:	f008 f808 	bl	8011a18 <iprintf>
 8009a08:	f06f 030f 	mvn.w	r3, #15
 8009a0c:	e060      	b.n	8009ad0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a12:	7b5b      	ldrb	r3, [r3, #13]
 8009a14:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a1a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d00b      	beq.n	8009a44 <tcp_process_refused_data+0x58>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6918      	ldr	r0, [r3, #16]
 8009a36:	2300      	movs	r3, #0
 8009a38:	68ba      	ldr	r2, [r7, #8]
 8009a3a:	6879      	ldr	r1, [r7, #4]
 8009a3c:	47a0      	blx	r4
 8009a3e:	4603      	mov	r3, r0
 8009a40:	73fb      	strb	r3, [r7, #15]
 8009a42:	e007      	b.n	8009a54 <tcp_process_refused_data+0x68>
 8009a44:	2300      	movs	r3, #0
 8009a46:	68ba      	ldr	r2, [r7, #8]
 8009a48:	6879      	ldr	r1, [r7, #4]
 8009a4a:	2000      	movs	r0, #0
 8009a4c:	f000 f8a4 	bl	8009b98 <tcp_recv_null>
 8009a50:	4603      	mov	r3, r0
 8009a52:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009a54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d12a      	bne.n	8009ab2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8009a5c:	7bbb      	ldrb	r3, [r7, #14]
 8009a5e:	f003 0320 	and.w	r3, r3, #32
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d033      	beq.n	8009ace <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a6a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009a6e:	d005      	beq.n	8009a7c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a74:	3301      	adds	r3, #1
 8009a76:	b29a      	uxth	r2, r3
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d00b      	beq.n	8009a9e <tcp_process_refused_data+0xb2>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6918      	ldr	r0, [r3, #16]
 8009a90:	2300      	movs	r3, #0
 8009a92:	2200      	movs	r2, #0
 8009a94:	6879      	ldr	r1, [r7, #4]
 8009a96:	47a0      	blx	r4
 8009a98:	4603      	mov	r3, r0
 8009a9a:	73fb      	strb	r3, [r7, #15]
 8009a9c:	e001      	b.n	8009aa2 <tcp_process_refused_data+0xb6>
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8009aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009aa6:	f113 0f0d 	cmn.w	r3, #13
 8009aaa:	d110      	bne.n	8009ace <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8009aac:	f06f 030c 	mvn.w	r3, #12
 8009ab0:	e00e      	b.n	8009ad0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8009ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ab6:	f113 0f0d 	cmn.w	r3, #13
 8009aba:	d102      	bne.n	8009ac2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8009abc:	f06f 030c 	mvn.w	r3, #12
 8009ac0:	e006      	b.n	8009ad0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	68ba      	ldr	r2, [r7, #8]
 8009ac6:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8009ac8:	f06f 0304 	mvn.w	r3, #4
 8009acc:	e000      	b.n	8009ad0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8009ace:	2300      	movs	r3, #0
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3714      	adds	r7, #20
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd90      	pop	{r4, r7, pc}
 8009ad8:	080144d0 	.word	0x080144d0
 8009adc:	080149e0 	.word	0x080149e0
 8009ae0:	08014514 	.word	0x08014514

08009ae4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b084      	sub	sp, #16
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8009aec:	e007      	b.n	8009afe <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 f80a 	bl	8009b0e <tcp_seg_free>
    seg = next;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d1f4      	bne.n	8009aee <tcp_segs_free+0xa>
  }
}
 8009b04:	bf00      	nop
 8009b06:	bf00      	nop
 8009b08:	3710      	adds	r7, #16
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}

08009b0e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8009b0e:	b580      	push	{r7, lr}
 8009b10:	b082      	sub	sp, #8
 8009b12:	af00      	add	r7, sp, #0
 8009b14:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d00c      	beq.n	8009b36 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d004      	beq.n	8009b2e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	685b      	ldr	r3, [r3, #4]
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f7fe fd7d 	bl	8008628 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8009b2e:	6879      	ldr	r1, [r7, #4]
 8009b30:	2003      	movs	r0, #3
 8009b32:	f7fd ff03 	bl	800793c <memp_free>
  }
}
 8009b36:	bf00      	nop
 8009b38:	3708      	adds	r7, #8
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
	...

08009b40 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b084      	sub	sp, #16
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d106      	bne.n	8009b5c <tcp_seg_copy+0x1c>
 8009b4e:	4b0f      	ldr	r3, [pc, #60]	; (8009b8c <tcp_seg_copy+0x4c>)
 8009b50:	f240 6282 	movw	r2, #1666	; 0x682
 8009b54:	490e      	ldr	r1, [pc, #56]	; (8009b90 <tcp_seg_copy+0x50>)
 8009b56:	480f      	ldr	r0, [pc, #60]	; (8009b94 <tcp_seg_copy+0x54>)
 8009b58:	f007 ff5e 	bl	8011a18 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8009b5c:	2003      	movs	r0, #3
 8009b5e:	f7fd fe7d 	bl	800785c <memp_malloc>
 8009b62:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d101      	bne.n	8009b6e <tcp_seg_copy+0x2e>
    return NULL;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	e00a      	b.n	8009b84 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8009b6e:	2210      	movs	r2, #16
 8009b70:	6879      	ldr	r1, [r7, #4]
 8009b72:	68f8      	ldr	r0, [r7, #12]
 8009b74:	f008 f8b1 	bl	8011cda <memcpy>
  pbuf_ref(cseg->p);
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	685b      	ldr	r3, [r3, #4]
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f7fe fdf3 	bl	8008768 <pbuf_ref>
  return cseg;
 8009b82:	68fb      	ldr	r3, [r7, #12]
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	3710      	adds	r7, #16
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}
 8009b8c:	080144d0 	.word	0x080144d0
 8009b90:	08014a24 	.word	0x08014a24
 8009b94:	08014514 	.word	0x08014514

08009b98 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b084      	sub	sp, #16
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	60f8      	str	r0, [r7, #12]
 8009ba0:	60b9      	str	r1, [r7, #8]
 8009ba2:	607a      	str	r2, [r7, #4]
 8009ba4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d109      	bne.n	8009bc0 <tcp_recv_null+0x28>
 8009bac:	4b12      	ldr	r3, [pc, #72]	; (8009bf8 <tcp_recv_null+0x60>)
 8009bae:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8009bb2:	4912      	ldr	r1, [pc, #72]	; (8009bfc <tcp_recv_null+0x64>)
 8009bb4:	4812      	ldr	r0, [pc, #72]	; (8009c00 <tcp_recv_null+0x68>)
 8009bb6:	f007 ff2f 	bl	8011a18 <iprintf>
 8009bba:	f06f 030f 	mvn.w	r3, #15
 8009bbe:	e016      	b.n	8009bee <tcp_recv_null+0x56>

  if (p != NULL) {
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d009      	beq.n	8009bda <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	891b      	ldrh	r3, [r3, #8]
 8009bca:	4619      	mov	r1, r3
 8009bcc:	68b8      	ldr	r0, [r7, #8]
 8009bce:	f7ff fb19 	bl	8009204 <tcp_recved>
    pbuf_free(p);
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f7fe fd28 	bl	8008628 <pbuf_free>
 8009bd8:	e008      	b.n	8009bec <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8009bda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d104      	bne.n	8009bec <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8009be2:	68b8      	ldr	r0, [r7, #8]
 8009be4:	f7ff f9be 	bl	8008f64 <tcp_close>
 8009be8:	4603      	mov	r3, r0
 8009bea:	e000      	b.n	8009bee <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8009bec:	2300      	movs	r3, #0
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3710      	adds	r7, #16
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}
 8009bf6:	bf00      	nop
 8009bf8:	080144d0 	.word	0x080144d0
 8009bfc:	08014a40 	.word	0x08014a40
 8009c00:	08014514 	.word	0x08014514

08009c04 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b086      	sub	sp, #24
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	db01      	blt.n	8009c1a <tcp_kill_prio+0x16>
 8009c16:	79fb      	ldrb	r3, [r7, #7]
 8009c18:	e000      	b.n	8009c1c <tcp_kill_prio+0x18>
 8009c1a:	237f      	movs	r3, #127	; 0x7f
 8009c1c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8009c1e:	7afb      	ldrb	r3, [r7, #11]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d034      	beq.n	8009c8e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8009c24:	7afb      	ldrb	r3, [r7, #11]
 8009c26:	3b01      	subs	r3, #1
 8009c28:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009c32:	4b19      	ldr	r3, [pc, #100]	; (8009c98 <tcp_kill_prio+0x94>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	617b      	str	r3, [r7, #20]
 8009c38:	e01f      	b.n	8009c7a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	7d5b      	ldrb	r3, [r3, #21]
 8009c3e:	7afa      	ldrb	r2, [r7, #11]
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d80c      	bhi.n	8009c5e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8009c48:	7afa      	ldrb	r2, [r7, #11]
 8009c4a:	429a      	cmp	r2, r3
 8009c4c:	d112      	bne.n	8009c74 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009c4e:	4b13      	ldr	r3, [pc, #76]	; (8009c9c <tcp_kill_prio+0x98>)
 8009c50:	681a      	ldr	r2, [r3, #0]
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	6a1b      	ldr	r3, [r3, #32]
 8009c56:	1ad3      	subs	r3, r2, r3
 8009c58:	68fa      	ldr	r2, [r7, #12]
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d80a      	bhi.n	8009c74 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8009c5e:	4b0f      	ldr	r3, [pc, #60]	; (8009c9c <tcp_kill_prio+0x98>)
 8009c60:	681a      	ldr	r2, [r3, #0]
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	6a1b      	ldr	r3, [r3, #32]
 8009c66:	1ad3      	subs	r3, r2, r3
 8009c68:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	7d5b      	ldrb	r3, [r3, #21]
 8009c72:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	68db      	ldr	r3, [r3, #12]
 8009c78:	617b      	str	r3, [r7, #20]
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d1dc      	bne.n	8009c3a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d004      	beq.n	8009c90 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009c86:	6938      	ldr	r0, [r7, #16]
 8009c88:	f7ff fa56 	bl	8009138 <tcp_abort>
 8009c8c:	e000      	b.n	8009c90 <tcp_kill_prio+0x8c>
    return;
 8009c8e:	bf00      	nop
  }
}
 8009c90:	3718      	adds	r7, #24
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
 8009c96:	bf00      	nop
 8009c98:	2000a734 	.word	0x2000a734
 8009c9c:	2000a728 	.word	0x2000a728

08009ca0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b086      	sub	sp, #24
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8009caa:	79fb      	ldrb	r3, [r7, #7]
 8009cac:	2b08      	cmp	r3, #8
 8009cae:	d009      	beq.n	8009cc4 <tcp_kill_state+0x24>
 8009cb0:	79fb      	ldrb	r3, [r7, #7]
 8009cb2:	2b09      	cmp	r3, #9
 8009cb4:	d006      	beq.n	8009cc4 <tcp_kill_state+0x24>
 8009cb6:	4b1a      	ldr	r3, [pc, #104]	; (8009d20 <tcp_kill_state+0x80>)
 8009cb8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8009cbc:	4919      	ldr	r1, [pc, #100]	; (8009d24 <tcp_kill_state+0x84>)
 8009cbe:	481a      	ldr	r0, [pc, #104]	; (8009d28 <tcp_kill_state+0x88>)
 8009cc0:	f007 feaa 	bl	8011a18 <iprintf>

  inactivity = 0;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009ccc:	4b17      	ldr	r3, [pc, #92]	; (8009d2c <tcp_kill_state+0x8c>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	617b      	str	r3, [r7, #20]
 8009cd2:	e017      	b.n	8009d04 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	7d1b      	ldrb	r3, [r3, #20]
 8009cd8:	79fa      	ldrb	r2, [r7, #7]
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	d10f      	bne.n	8009cfe <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009cde:	4b14      	ldr	r3, [pc, #80]	; (8009d30 <tcp_kill_state+0x90>)
 8009ce0:	681a      	ldr	r2, [r3, #0]
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	6a1b      	ldr	r3, [r3, #32]
 8009ce6:	1ad3      	subs	r3, r2, r3
 8009ce8:	68fa      	ldr	r2, [r7, #12]
 8009cea:	429a      	cmp	r2, r3
 8009cec:	d807      	bhi.n	8009cfe <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8009cee:	4b10      	ldr	r3, [pc, #64]	; (8009d30 <tcp_kill_state+0x90>)
 8009cf0:	681a      	ldr	r2, [r3, #0]
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	6a1b      	ldr	r3, [r3, #32]
 8009cf6:	1ad3      	subs	r3, r2, r3
 8009cf8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	68db      	ldr	r3, [r3, #12]
 8009d02:	617b      	str	r3, [r7, #20]
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d1e4      	bne.n	8009cd4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d003      	beq.n	8009d18 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8009d10:	2100      	movs	r1, #0
 8009d12:	6938      	ldr	r0, [r7, #16]
 8009d14:	f7ff f952 	bl	8008fbc <tcp_abandon>
  }
}
 8009d18:	bf00      	nop
 8009d1a:	3718      	adds	r7, #24
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}
 8009d20:	080144d0 	.word	0x080144d0
 8009d24:	08014a5c 	.word	0x08014a5c
 8009d28:	08014514 	.word	0x08014514
 8009d2c:	2000a734 	.word	0x2000a734
 8009d30:	2000a728 	.word	0x2000a728

08009d34 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b084      	sub	sp, #16
 8009d38:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009d42:	4b12      	ldr	r3, [pc, #72]	; (8009d8c <tcp_kill_timewait+0x58>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	60fb      	str	r3, [r7, #12]
 8009d48:	e012      	b.n	8009d70 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009d4a:	4b11      	ldr	r3, [pc, #68]	; (8009d90 <tcp_kill_timewait+0x5c>)
 8009d4c:	681a      	ldr	r2, [r3, #0]
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	6a1b      	ldr	r3, [r3, #32]
 8009d52:	1ad3      	subs	r3, r2, r3
 8009d54:	687a      	ldr	r2, [r7, #4]
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d807      	bhi.n	8009d6a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8009d5a:	4b0d      	ldr	r3, [pc, #52]	; (8009d90 <tcp_kill_timewait+0x5c>)
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	6a1b      	ldr	r3, [r3, #32]
 8009d62:	1ad3      	subs	r3, r2, r3
 8009d64:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	68db      	ldr	r3, [r3, #12]
 8009d6e:	60fb      	str	r3, [r7, #12]
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d1e9      	bne.n	8009d4a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d002      	beq.n	8009d82 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009d7c:	68b8      	ldr	r0, [r7, #8]
 8009d7e:	f7ff f9db 	bl	8009138 <tcp_abort>
  }
}
 8009d82:	bf00      	nop
 8009d84:	3710      	adds	r7, #16
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
 8009d8a:	bf00      	nop
 8009d8c:	2000a738 	.word	0x2000a738
 8009d90:	2000a728 	.word	0x2000a728

08009d94 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b082      	sub	sp, #8
 8009d98:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8009d9a:	4b10      	ldr	r3, [pc, #64]	; (8009ddc <tcp_handle_closepend+0x48>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009da0:	e014      	b.n	8009dcc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	68db      	ldr	r3, [r3, #12]
 8009da6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	8b5b      	ldrh	r3, [r3, #26]
 8009dac:	f003 0308 	and.w	r3, r3, #8
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d009      	beq.n	8009dc8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	8b5b      	ldrh	r3, [r3, #26]
 8009db8:	f023 0308 	bic.w	r3, r3, #8
 8009dbc:	b29a      	uxth	r2, r3
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f7ff f864 	bl	8008e90 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d1e7      	bne.n	8009da2 <tcp_handle_closepend+0xe>
  }
}
 8009dd2:	bf00      	nop
 8009dd4:	bf00      	nop
 8009dd6:	3708      	adds	r7, #8
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}
 8009ddc:	2000a734 	.word	0x2000a734

08009de0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b084      	sub	sp, #16
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	4603      	mov	r3, r0
 8009de8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009dea:	2001      	movs	r0, #1
 8009dec:	f7fd fd36 	bl	800785c <memp_malloc>
 8009df0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d126      	bne.n	8009e46 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8009df8:	f7ff ffcc 	bl	8009d94 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8009dfc:	f7ff ff9a 	bl	8009d34 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009e00:	2001      	movs	r0, #1
 8009e02:	f7fd fd2b 	bl	800785c <memp_malloc>
 8009e06:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d11b      	bne.n	8009e46 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8009e0e:	2009      	movs	r0, #9
 8009e10:	f7ff ff46 	bl	8009ca0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009e14:	2001      	movs	r0, #1
 8009e16:	f7fd fd21 	bl	800785c <memp_malloc>
 8009e1a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d111      	bne.n	8009e46 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8009e22:	2008      	movs	r0, #8
 8009e24:	f7ff ff3c 	bl	8009ca0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009e28:	2001      	movs	r0, #1
 8009e2a:	f7fd fd17 	bl	800785c <memp_malloc>
 8009e2e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d107      	bne.n	8009e46 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8009e36:	79fb      	ldrb	r3, [r7, #7]
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f7ff fee3 	bl	8009c04 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009e3e:	2001      	movs	r0, #1
 8009e40:	f7fd fd0c 	bl	800785c <memp_malloc>
 8009e44:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d03f      	beq.n	8009ecc <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8009e4c:	229c      	movs	r2, #156	; 0x9c
 8009e4e:	2100      	movs	r1, #0
 8009e50:	68f8      	ldr	r0, [r7, #12]
 8009e52:	f007 fe46 	bl	8011ae2 <memset>
    pcb->prio = prio;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	79fa      	ldrb	r2, [r7, #7]
 8009e5a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009e62:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009e6c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	22ff      	movs	r2, #255	; 0xff
 8009e7a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009e82:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	2206      	movs	r2, #6
 8009e88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	2206      	movs	r2, #6
 8009e90:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009e98:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	2201      	movs	r2, #1
 8009e9e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8009ea2:	4b0d      	ldr	r3, [pc, #52]	; (8009ed8 <tcp_alloc+0xf8>)
 8009ea4:	681a      	ldr	r2, [r3, #0]
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8009eaa:	4b0c      	ldr	r3, [pc, #48]	; (8009edc <tcp_alloc+0xfc>)
 8009eac:	781a      	ldrb	r2, [r3, #0]
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009eb8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	4a08      	ldr	r2, [pc, #32]	; (8009ee0 <tcp_alloc+0x100>)
 8009ec0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	4a07      	ldr	r2, [pc, #28]	; (8009ee4 <tcp_alloc+0x104>)
 8009ec8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3710      	adds	r7, #16
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}
 8009ed6:	bf00      	nop
 8009ed8:	2000a728 	.word	0x2000a728
 8009edc:	2000a73e 	.word	0x2000a73e
 8009ee0:	08009b99 	.word	0x08009b99
 8009ee4:	006ddd00 	.word	0x006ddd00

08009ee8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b082      	sub	sp, #8
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d107      	bne.n	8009f06 <tcp_pcb_purge+0x1e>
 8009ef6:	4b21      	ldr	r3, [pc, #132]	; (8009f7c <tcp_pcb_purge+0x94>)
 8009ef8:	f640 0251 	movw	r2, #2129	; 0x851
 8009efc:	4920      	ldr	r1, [pc, #128]	; (8009f80 <tcp_pcb_purge+0x98>)
 8009efe:	4821      	ldr	r0, [pc, #132]	; (8009f84 <tcp_pcb_purge+0x9c>)
 8009f00:	f007 fd8a 	bl	8011a18 <iprintf>
 8009f04:	e037      	b.n	8009f76 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	7d1b      	ldrb	r3, [r3, #20]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d033      	beq.n	8009f76 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8009f12:	2b0a      	cmp	r3, #10
 8009f14:	d02f      	beq.n	8009f76 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8009f1a:	2b01      	cmp	r3, #1
 8009f1c:	d02b      	beq.n	8009f76 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d007      	beq.n	8009f36 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f7fe fb7c 	bl	8008628 <pbuf_free>
      pcb->refused_data = NULL;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2200      	movs	r2, #0
 8009f34:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d002      	beq.n	8009f44 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f000 f986 	bl	800a250 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009f4a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f50:	4618      	mov	r0, r3
 8009f52:	f7ff fdc7 	bl	8009ae4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f7ff fdc2 	bl	8009ae4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2200      	movs	r2, #0
 8009f64:	66da      	str	r2, [r3, #108]	; 0x6c
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2200      	movs	r2, #0
 8009f72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8009f76:	3708      	adds	r7, #8
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}
 8009f7c:	080144d0 	.word	0x080144d0
 8009f80:	08014b1c 	.word	0x08014b1c
 8009f84:	08014514 	.word	0x08014514

08009f88 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b084      	sub	sp, #16
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
 8009f90:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d106      	bne.n	8009fa6 <tcp_pcb_remove+0x1e>
 8009f98:	4b3e      	ldr	r3, [pc, #248]	; (800a094 <tcp_pcb_remove+0x10c>)
 8009f9a:	f640 0283 	movw	r2, #2179	; 0x883
 8009f9e:	493e      	ldr	r1, [pc, #248]	; (800a098 <tcp_pcb_remove+0x110>)
 8009fa0:	483e      	ldr	r0, [pc, #248]	; (800a09c <tcp_pcb_remove+0x114>)
 8009fa2:	f007 fd39 	bl	8011a18 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d106      	bne.n	8009fba <tcp_pcb_remove+0x32>
 8009fac:	4b39      	ldr	r3, [pc, #228]	; (800a094 <tcp_pcb_remove+0x10c>)
 8009fae:	f640 0284 	movw	r2, #2180	; 0x884
 8009fb2:	493b      	ldr	r1, [pc, #236]	; (800a0a0 <tcp_pcb_remove+0x118>)
 8009fb4:	4839      	ldr	r0, [pc, #228]	; (800a09c <tcp_pcb_remove+0x114>)
 8009fb6:	f007 fd2f 	bl	8011a18 <iprintf>

  TCP_RMV(pcblist, pcb);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	683a      	ldr	r2, [r7, #0]
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	d105      	bne.n	8009fd0 <tcp_pcb_remove+0x48>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	68da      	ldr	r2, [r3, #12]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	601a      	str	r2, [r3, #0]
 8009fce:	e013      	b.n	8009ff8 <tcp_pcb_remove+0x70>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	60fb      	str	r3, [r7, #12]
 8009fd6:	e00c      	b.n	8009ff2 <tcp_pcb_remove+0x6a>
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	68db      	ldr	r3, [r3, #12]
 8009fdc:	683a      	ldr	r2, [r7, #0]
 8009fde:	429a      	cmp	r2, r3
 8009fe0:	d104      	bne.n	8009fec <tcp_pcb_remove+0x64>
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	68da      	ldr	r2, [r3, #12]
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	60da      	str	r2, [r3, #12]
 8009fea:	e005      	b.n	8009ff8 <tcp_pcb_remove+0x70>
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	68db      	ldr	r3, [r3, #12]
 8009ff0:	60fb      	str	r3, [r7, #12]
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d1ef      	bne.n	8009fd8 <tcp_pcb_remove+0x50>
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8009ffe:	6838      	ldr	r0, [r7, #0]
 800a000:	f7ff ff72 	bl	8009ee8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	7d1b      	ldrb	r3, [r3, #20]
 800a008:	2b0a      	cmp	r3, #10
 800a00a:	d013      	beq.n	800a034 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800a010:	2b01      	cmp	r3, #1
 800a012:	d00f      	beq.n	800a034 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	8b5b      	ldrh	r3, [r3, #26]
 800a018:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d009      	beq.n	800a034 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	8b5b      	ldrh	r3, [r3, #26]
 800a024:	f043 0302 	orr.w	r3, r3, #2
 800a028:	b29a      	uxth	r2, r3
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a02e:	6838      	ldr	r0, [r7, #0]
 800a030:	f002 ff6e 	bl	800cf10 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	7d1b      	ldrb	r3, [r3, #20]
 800a038:	2b01      	cmp	r3, #1
 800a03a:	d020      	beq.n	800a07e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a040:	2b00      	cmp	r3, #0
 800a042:	d006      	beq.n	800a052 <tcp_pcb_remove+0xca>
 800a044:	4b13      	ldr	r3, [pc, #76]	; (800a094 <tcp_pcb_remove+0x10c>)
 800a046:	f640 0293 	movw	r2, #2195	; 0x893
 800a04a:	4916      	ldr	r1, [pc, #88]	; (800a0a4 <tcp_pcb_remove+0x11c>)
 800a04c:	4813      	ldr	r0, [pc, #76]	; (800a09c <tcp_pcb_remove+0x114>)
 800a04e:	f007 fce3 	bl	8011a18 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a056:	2b00      	cmp	r3, #0
 800a058:	d006      	beq.n	800a068 <tcp_pcb_remove+0xe0>
 800a05a:	4b0e      	ldr	r3, [pc, #56]	; (800a094 <tcp_pcb_remove+0x10c>)
 800a05c:	f640 0294 	movw	r2, #2196	; 0x894
 800a060:	4911      	ldr	r1, [pc, #68]	; (800a0a8 <tcp_pcb_remove+0x120>)
 800a062:	480e      	ldr	r0, [pc, #56]	; (800a09c <tcp_pcb_remove+0x114>)
 800a064:	f007 fcd8 	bl	8011a18 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d006      	beq.n	800a07e <tcp_pcb_remove+0xf6>
 800a070:	4b08      	ldr	r3, [pc, #32]	; (800a094 <tcp_pcb_remove+0x10c>)
 800a072:	f640 0296 	movw	r2, #2198	; 0x896
 800a076:	490d      	ldr	r1, [pc, #52]	; (800a0ac <tcp_pcb_remove+0x124>)
 800a078:	4808      	ldr	r0, [pc, #32]	; (800a09c <tcp_pcb_remove+0x114>)
 800a07a:	f007 fccd 	bl	8011a18 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	2200      	movs	r2, #0
 800a082:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	2200      	movs	r2, #0
 800a088:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800a08a:	bf00      	nop
 800a08c:	3710      	adds	r7, #16
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}
 800a092:	bf00      	nop
 800a094:	080144d0 	.word	0x080144d0
 800a098:	08014b38 	.word	0x08014b38
 800a09c:	08014514 	.word	0x08014514
 800a0a0:	08014b54 	.word	0x08014b54
 800a0a4:	08014b74 	.word	0x08014b74
 800a0a8:	08014b8c 	.word	0x08014b8c
 800a0ac:	08014ba8 	.word	0x08014ba8

0800a0b0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b082      	sub	sp, #8
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d106      	bne.n	800a0cc <tcp_next_iss+0x1c>
 800a0be:	4b0a      	ldr	r3, [pc, #40]	; (800a0e8 <tcp_next_iss+0x38>)
 800a0c0:	f640 02af 	movw	r2, #2223	; 0x8af
 800a0c4:	4909      	ldr	r1, [pc, #36]	; (800a0ec <tcp_next_iss+0x3c>)
 800a0c6:	480a      	ldr	r0, [pc, #40]	; (800a0f0 <tcp_next_iss+0x40>)
 800a0c8:	f007 fca6 	bl	8011a18 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800a0cc:	4b09      	ldr	r3, [pc, #36]	; (800a0f4 <tcp_next_iss+0x44>)
 800a0ce:	681a      	ldr	r2, [r3, #0]
 800a0d0:	4b09      	ldr	r3, [pc, #36]	; (800a0f8 <tcp_next_iss+0x48>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4413      	add	r3, r2
 800a0d6:	4a07      	ldr	r2, [pc, #28]	; (800a0f4 <tcp_next_iss+0x44>)
 800a0d8:	6013      	str	r3, [r2, #0]
  return iss;
 800a0da:	4b06      	ldr	r3, [pc, #24]	; (800a0f4 <tcp_next_iss+0x44>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3708      	adds	r7, #8
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	080144d0 	.word	0x080144d0
 800a0ec:	08014bc0 	.word	0x08014bc0
 800a0f0:	08014514 	.word	0x08014514
 800a0f4:	20000024 	.word	0x20000024
 800a0f8:	2000a728 	.word	0x2000a728

0800a0fc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b086      	sub	sp, #24
 800a100:	af00      	add	r7, sp, #0
 800a102:	4603      	mov	r3, r0
 800a104:	60b9      	str	r1, [r7, #8]
 800a106:	607a      	str	r2, [r7, #4]
 800a108:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d106      	bne.n	800a11e <tcp_eff_send_mss_netif+0x22>
 800a110:	4b14      	ldr	r3, [pc, #80]	; (800a164 <tcp_eff_send_mss_netif+0x68>)
 800a112:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800a116:	4914      	ldr	r1, [pc, #80]	; (800a168 <tcp_eff_send_mss_netif+0x6c>)
 800a118:	4814      	ldr	r0, [pc, #80]	; (800a16c <tcp_eff_send_mss_netif+0x70>)
 800a11a:	f007 fc7d 	bl	8011a18 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d101      	bne.n	800a128 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800a124:	89fb      	ldrh	r3, [r7, #14]
 800a126:	e019      	b.n	800a15c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a12c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800a12e:	8afb      	ldrh	r3, [r7, #22]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d012      	beq.n	800a15a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800a134:	2328      	movs	r3, #40	; 0x28
 800a136:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800a138:	8afa      	ldrh	r2, [r7, #22]
 800a13a:	8abb      	ldrh	r3, [r7, #20]
 800a13c:	429a      	cmp	r2, r3
 800a13e:	d904      	bls.n	800a14a <tcp_eff_send_mss_netif+0x4e>
 800a140:	8afa      	ldrh	r2, [r7, #22]
 800a142:	8abb      	ldrh	r3, [r7, #20]
 800a144:	1ad3      	subs	r3, r2, r3
 800a146:	b29b      	uxth	r3, r3
 800a148:	e000      	b.n	800a14c <tcp_eff_send_mss_netif+0x50>
 800a14a:	2300      	movs	r3, #0
 800a14c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800a14e:	8a7a      	ldrh	r2, [r7, #18]
 800a150:	89fb      	ldrh	r3, [r7, #14]
 800a152:	4293      	cmp	r3, r2
 800a154:	bf28      	it	cs
 800a156:	4613      	movcs	r3, r2
 800a158:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800a15a:	89fb      	ldrh	r3, [r7, #14]
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3718      	adds	r7, #24
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}
 800a164:	080144d0 	.word	0x080144d0
 800a168:	08014bdc 	.word	0x08014bdc
 800a16c:	08014514 	.word	0x08014514

0800a170 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b084      	sub	sp, #16
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
 800a178:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d119      	bne.n	800a1b8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800a184:	4b10      	ldr	r3, [pc, #64]	; (800a1c8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800a186:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800a18a:	4910      	ldr	r1, [pc, #64]	; (800a1cc <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800a18c:	4810      	ldr	r0, [pc, #64]	; (800a1d0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800a18e:	f007 fc43 	bl	8011a18 <iprintf>

  while (pcb != NULL) {
 800a192:	e011      	b.n	800a1b8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681a      	ldr	r2, [r3, #0]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	429a      	cmp	r2, r3
 800a19e:	d108      	bne.n	800a1b2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	68db      	ldr	r3, [r3, #12]
 800a1a4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800a1a6:	68f8      	ldr	r0, [r7, #12]
 800a1a8:	f7fe ffc6 	bl	8009138 <tcp_abort>
      pcb = next;
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	60fb      	str	r3, [r7, #12]
 800a1b0:	e002      	b.n	800a1b8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	68db      	ldr	r3, [r3, #12]
 800a1b6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d1ea      	bne.n	800a194 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800a1be:	bf00      	nop
 800a1c0:	bf00      	nop
 800a1c2:	3710      	adds	r7, #16
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}
 800a1c8:	080144d0 	.word	0x080144d0
 800a1cc:	08014c04 	.word	0x08014c04
 800a1d0:	08014514 	.word	0x08014514

0800a1d4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b084      	sub	sp, #16
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d02a      	beq.n	800a23a <tcp_netif_ip_addr_changed+0x66>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d026      	beq.n	800a23a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800a1ec:	4b15      	ldr	r3, [pc, #84]	; (800a244 <tcp_netif_ip_addr_changed+0x70>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f7ff ffbc 	bl	800a170 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800a1f8:	4b13      	ldr	r3, [pc, #76]	; (800a248 <tcp_netif_ip_addr_changed+0x74>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4619      	mov	r1, r3
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f7ff ffb6 	bl	800a170 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d017      	beq.n	800a23a <tcp_netif_ip_addr_changed+0x66>
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d013      	beq.n	800a23a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a212:	4b0e      	ldr	r3, [pc, #56]	; (800a24c <tcp_netif_ip_addr_changed+0x78>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	60fb      	str	r3, [r7, #12]
 800a218:	e00c      	b.n	800a234 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681a      	ldr	r2, [r3, #0]
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	429a      	cmp	r2, r3
 800a224:	d103      	bne.n	800a22e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	681a      	ldr	r2, [r3, #0]
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	68db      	ldr	r3, [r3, #12]
 800a232:	60fb      	str	r3, [r7, #12]
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d1ef      	bne.n	800a21a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800a23a:	bf00      	nop
 800a23c:	3710      	adds	r7, #16
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}
 800a242:	bf00      	nop
 800a244:	2000a734 	.word	0x2000a734
 800a248:	2000a72c 	.word	0x2000a72c
 800a24c:	2000a730 	.word	0x2000a730

0800a250 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b082      	sub	sp, #8
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d007      	beq.n	800a270 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a264:	4618      	mov	r0, r3
 800a266:	f7ff fc3d 	bl	8009ae4 <tcp_segs_free>
    pcb->ooseq = NULL;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2200      	movs	r2, #0
 800a26e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800a270:	bf00      	nop
 800a272:	3708      	adds	r7, #8
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800a278:	b590      	push	{r4, r7, lr}
 800a27a:	b08d      	sub	sp, #52	; 0x34
 800a27c:	af04      	add	r7, sp, #16
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d105      	bne.n	800a294 <tcp_input+0x1c>
 800a288:	4b9b      	ldr	r3, [pc, #620]	; (800a4f8 <tcp_input+0x280>)
 800a28a:	2283      	movs	r2, #131	; 0x83
 800a28c:	499b      	ldr	r1, [pc, #620]	; (800a4fc <tcp_input+0x284>)
 800a28e:	489c      	ldr	r0, [pc, #624]	; (800a500 <tcp_input+0x288>)
 800a290:	f007 fbc2 	bl	8011a18 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	4a9a      	ldr	r2, [pc, #616]	; (800a504 <tcp_input+0x28c>)
 800a29a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	895b      	ldrh	r3, [r3, #10]
 800a2a0:	2b13      	cmp	r3, #19
 800a2a2:	f240 83d1 	bls.w	800aa48 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a2a6:	4b98      	ldr	r3, [pc, #608]	; (800a508 <tcp_input+0x290>)
 800a2a8:	695b      	ldr	r3, [r3, #20]
 800a2aa:	4a97      	ldr	r2, [pc, #604]	; (800a508 <tcp_input+0x290>)
 800a2ac:	6812      	ldr	r2, [r2, #0]
 800a2ae:	4611      	mov	r1, r2
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f005 fd7d 	bl	800fdb0 <ip4_addr_isbroadcast_u32>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	f040 83c7 	bne.w	800aa4c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800a2be:	4b92      	ldr	r3, [pc, #584]	; (800a508 <tcp_input+0x290>)
 800a2c0:	695b      	ldr	r3, [r3, #20]
 800a2c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a2c6:	2be0      	cmp	r3, #224	; 0xe0
 800a2c8:	f000 83c0 	beq.w	800aa4c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800a2cc:	4b8d      	ldr	r3, [pc, #564]	; (800a504 <tcp_input+0x28c>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	899b      	ldrh	r3, [r3, #12]
 800a2d2:	b29b      	uxth	r3, r3
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f7fc fe49 	bl	8006f6c <lwip_htons>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	0b1b      	lsrs	r3, r3, #12
 800a2de:	b29b      	uxth	r3, r3
 800a2e0:	b2db      	uxtb	r3, r3
 800a2e2:	009b      	lsls	r3, r3, #2
 800a2e4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800a2e6:	7cbb      	ldrb	r3, [r7, #18]
 800a2e8:	2b13      	cmp	r3, #19
 800a2ea:	f240 83b1 	bls.w	800aa50 <tcp_input+0x7d8>
 800a2ee:	7cbb      	ldrb	r3, [r7, #18]
 800a2f0:	b29a      	uxth	r2, r3
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	891b      	ldrh	r3, [r3, #8]
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	f200 83aa 	bhi.w	800aa50 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a2fc:	7cbb      	ldrb	r3, [r7, #18]
 800a2fe:	b29b      	uxth	r3, r3
 800a300:	3b14      	subs	r3, #20
 800a302:	b29a      	uxth	r2, r3
 800a304:	4b81      	ldr	r3, [pc, #516]	; (800a50c <tcp_input+0x294>)
 800a306:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800a308:	4b81      	ldr	r3, [pc, #516]	; (800a510 <tcp_input+0x298>)
 800a30a:	2200      	movs	r2, #0
 800a30c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	895a      	ldrh	r2, [r3, #10]
 800a312:	7cbb      	ldrb	r3, [r7, #18]
 800a314:	b29b      	uxth	r3, r3
 800a316:	429a      	cmp	r2, r3
 800a318:	d309      	bcc.n	800a32e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800a31a:	4b7c      	ldr	r3, [pc, #496]	; (800a50c <tcp_input+0x294>)
 800a31c:	881a      	ldrh	r2, [r3, #0]
 800a31e:	4b7d      	ldr	r3, [pc, #500]	; (800a514 <tcp_input+0x29c>)
 800a320:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800a322:	7cbb      	ldrb	r3, [r7, #18]
 800a324:	4619      	mov	r1, r3
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f7fe f8f8 	bl	800851c <pbuf_remove_header>
 800a32c:	e04e      	b.n	800a3cc <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d105      	bne.n	800a342 <tcp_input+0xca>
 800a336:	4b70      	ldr	r3, [pc, #448]	; (800a4f8 <tcp_input+0x280>)
 800a338:	22c2      	movs	r2, #194	; 0xc2
 800a33a:	4977      	ldr	r1, [pc, #476]	; (800a518 <tcp_input+0x2a0>)
 800a33c:	4870      	ldr	r0, [pc, #448]	; (800a500 <tcp_input+0x288>)
 800a33e:	f007 fb6b 	bl	8011a18 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800a342:	2114      	movs	r1, #20
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f7fe f8e9 	bl	800851c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	895a      	ldrh	r2, [r3, #10]
 800a34e:	4b71      	ldr	r3, [pc, #452]	; (800a514 <tcp_input+0x29c>)
 800a350:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a352:	4b6e      	ldr	r3, [pc, #440]	; (800a50c <tcp_input+0x294>)
 800a354:	881a      	ldrh	r2, [r3, #0]
 800a356:	4b6f      	ldr	r3, [pc, #444]	; (800a514 <tcp_input+0x29c>)
 800a358:	881b      	ldrh	r3, [r3, #0]
 800a35a:	1ad3      	subs	r3, r2, r3
 800a35c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800a35e:	4b6d      	ldr	r3, [pc, #436]	; (800a514 <tcp_input+0x29c>)
 800a360:	881b      	ldrh	r3, [r3, #0]
 800a362:	4619      	mov	r1, r3
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f7fe f8d9 	bl	800851c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	895b      	ldrh	r3, [r3, #10]
 800a370:	8a3a      	ldrh	r2, [r7, #16]
 800a372:	429a      	cmp	r2, r3
 800a374:	f200 836e 	bhi.w	800aa54 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	685b      	ldr	r3, [r3, #4]
 800a37e:	4a64      	ldr	r2, [pc, #400]	; (800a510 <tcp_input+0x298>)
 800a380:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	8a3a      	ldrh	r2, [r7, #16]
 800a388:	4611      	mov	r1, r2
 800a38a:	4618      	mov	r0, r3
 800a38c:	f7fe f8c6 	bl	800851c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	891a      	ldrh	r2, [r3, #8]
 800a394:	8a3b      	ldrh	r3, [r7, #16]
 800a396:	1ad3      	subs	r3, r2, r3
 800a398:	b29a      	uxth	r2, r3
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	895b      	ldrh	r3, [r3, #10]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d005      	beq.n	800a3b2 <tcp_input+0x13a>
 800a3a6:	4b54      	ldr	r3, [pc, #336]	; (800a4f8 <tcp_input+0x280>)
 800a3a8:	22df      	movs	r2, #223	; 0xdf
 800a3aa:	495c      	ldr	r1, [pc, #368]	; (800a51c <tcp_input+0x2a4>)
 800a3ac:	4854      	ldr	r0, [pc, #336]	; (800a500 <tcp_input+0x288>)
 800a3ae:	f007 fb33 	bl	8011a18 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	891a      	ldrh	r2, [r3, #8]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	891b      	ldrh	r3, [r3, #8]
 800a3bc:	429a      	cmp	r2, r3
 800a3be:	d005      	beq.n	800a3cc <tcp_input+0x154>
 800a3c0:	4b4d      	ldr	r3, [pc, #308]	; (800a4f8 <tcp_input+0x280>)
 800a3c2:	22e0      	movs	r2, #224	; 0xe0
 800a3c4:	4956      	ldr	r1, [pc, #344]	; (800a520 <tcp_input+0x2a8>)
 800a3c6:	484e      	ldr	r0, [pc, #312]	; (800a500 <tcp_input+0x288>)
 800a3c8:	f007 fb26 	bl	8011a18 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800a3cc:	4b4d      	ldr	r3, [pc, #308]	; (800a504 <tcp_input+0x28c>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	881b      	ldrh	r3, [r3, #0]
 800a3d2:	b29b      	uxth	r3, r3
 800a3d4:	4a4b      	ldr	r2, [pc, #300]	; (800a504 <tcp_input+0x28c>)
 800a3d6:	6814      	ldr	r4, [r2, #0]
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f7fc fdc7 	bl	8006f6c <lwip_htons>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800a3e2:	4b48      	ldr	r3, [pc, #288]	; (800a504 <tcp_input+0x28c>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	885b      	ldrh	r3, [r3, #2]
 800a3e8:	b29b      	uxth	r3, r3
 800a3ea:	4a46      	ldr	r2, [pc, #280]	; (800a504 <tcp_input+0x28c>)
 800a3ec:	6814      	ldr	r4, [r2, #0]
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f7fc fdbc 	bl	8006f6c <lwip_htons>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a3f8:	4b42      	ldr	r3, [pc, #264]	; (800a504 <tcp_input+0x28c>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	685b      	ldr	r3, [r3, #4]
 800a3fe:	4a41      	ldr	r2, [pc, #260]	; (800a504 <tcp_input+0x28c>)
 800a400:	6814      	ldr	r4, [r2, #0]
 800a402:	4618      	mov	r0, r3
 800a404:	f7fc fdc7 	bl	8006f96 <lwip_htonl>
 800a408:	4603      	mov	r3, r0
 800a40a:	6063      	str	r3, [r4, #4]
 800a40c:	6863      	ldr	r3, [r4, #4]
 800a40e:	4a45      	ldr	r2, [pc, #276]	; (800a524 <tcp_input+0x2ac>)
 800a410:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a412:	4b3c      	ldr	r3, [pc, #240]	; (800a504 <tcp_input+0x28c>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	689b      	ldr	r3, [r3, #8]
 800a418:	4a3a      	ldr	r2, [pc, #232]	; (800a504 <tcp_input+0x28c>)
 800a41a:	6814      	ldr	r4, [r2, #0]
 800a41c:	4618      	mov	r0, r3
 800a41e:	f7fc fdba 	bl	8006f96 <lwip_htonl>
 800a422:	4603      	mov	r3, r0
 800a424:	60a3      	str	r3, [r4, #8]
 800a426:	68a3      	ldr	r3, [r4, #8]
 800a428:	4a3f      	ldr	r2, [pc, #252]	; (800a528 <tcp_input+0x2b0>)
 800a42a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a42c:	4b35      	ldr	r3, [pc, #212]	; (800a504 <tcp_input+0x28c>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	89db      	ldrh	r3, [r3, #14]
 800a432:	b29b      	uxth	r3, r3
 800a434:	4a33      	ldr	r2, [pc, #204]	; (800a504 <tcp_input+0x28c>)
 800a436:	6814      	ldr	r4, [r2, #0]
 800a438:	4618      	mov	r0, r3
 800a43a:	f7fc fd97 	bl	8006f6c <lwip_htons>
 800a43e:	4603      	mov	r3, r0
 800a440:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800a442:	4b30      	ldr	r3, [pc, #192]	; (800a504 <tcp_input+0x28c>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	899b      	ldrh	r3, [r3, #12]
 800a448:	b29b      	uxth	r3, r3
 800a44a:	4618      	mov	r0, r3
 800a44c:	f7fc fd8e 	bl	8006f6c <lwip_htons>
 800a450:	4603      	mov	r3, r0
 800a452:	b2db      	uxtb	r3, r3
 800a454:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a458:	b2da      	uxtb	r2, r3
 800a45a:	4b34      	ldr	r3, [pc, #208]	; (800a52c <tcp_input+0x2b4>)
 800a45c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	891a      	ldrh	r2, [r3, #8]
 800a462:	4b33      	ldr	r3, [pc, #204]	; (800a530 <tcp_input+0x2b8>)
 800a464:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800a466:	4b31      	ldr	r3, [pc, #196]	; (800a52c <tcp_input+0x2b4>)
 800a468:	781b      	ldrb	r3, [r3, #0]
 800a46a:	f003 0303 	and.w	r3, r3, #3
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d00c      	beq.n	800a48c <tcp_input+0x214>
    tcplen++;
 800a472:	4b2f      	ldr	r3, [pc, #188]	; (800a530 <tcp_input+0x2b8>)
 800a474:	881b      	ldrh	r3, [r3, #0]
 800a476:	3301      	adds	r3, #1
 800a478:	b29a      	uxth	r2, r3
 800a47a:	4b2d      	ldr	r3, [pc, #180]	; (800a530 <tcp_input+0x2b8>)
 800a47c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	891a      	ldrh	r2, [r3, #8]
 800a482:	4b2b      	ldr	r3, [pc, #172]	; (800a530 <tcp_input+0x2b8>)
 800a484:	881b      	ldrh	r3, [r3, #0]
 800a486:	429a      	cmp	r2, r3
 800a488:	f200 82e6 	bhi.w	800aa58 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800a48c:	2300      	movs	r3, #0
 800a48e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a490:	4b28      	ldr	r3, [pc, #160]	; (800a534 <tcp_input+0x2bc>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	61fb      	str	r3, [r7, #28]
 800a496:	e09d      	b.n	800a5d4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a498:	69fb      	ldr	r3, [r7, #28]
 800a49a:	7d1b      	ldrb	r3, [r3, #20]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d105      	bne.n	800a4ac <tcp_input+0x234>
 800a4a0:	4b15      	ldr	r3, [pc, #84]	; (800a4f8 <tcp_input+0x280>)
 800a4a2:	22fb      	movs	r2, #251	; 0xfb
 800a4a4:	4924      	ldr	r1, [pc, #144]	; (800a538 <tcp_input+0x2c0>)
 800a4a6:	4816      	ldr	r0, [pc, #88]	; (800a500 <tcp_input+0x288>)
 800a4a8:	f007 fab6 	bl	8011a18 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a4ac:	69fb      	ldr	r3, [r7, #28]
 800a4ae:	7d1b      	ldrb	r3, [r3, #20]
 800a4b0:	2b0a      	cmp	r3, #10
 800a4b2:	d105      	bne.n	800a4c0 <tcp_input+0x248>
 800a4b4:	4b10      	ldr	r3, [pc, #64]	; (800a4f8 <tcp_input+0x280>)
 800a4b6:	22fc      	movs	r2, #252	; 0xfc
 800a4b8:	4920      	ldr	r1, [pc, #128]	; (800a53c <tcp_input+0x2c4>)
 800a4ba:	4811      	ldr	r0, [pc, #68]	; (800a500 <tcp_input+0x288>)
 800a4bc:	f007 faac 	bl	8011a18 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a4c0:	69fb      	ldr	r3, [r7, #28]
 800a4c2:	7d1b      	ldrb	r3, [r3, #20]
 800a4c4:	2b01      	cmp	r3, #1
 800a4c6:	d105      	bne.n	800a4d4 <tcp_input+0x25c>
 800a4c8:	4b0b      	ldr	r3, [pc, #44]	; (800a4f8 <tcp_input+0x280>)
 800a4ca:	22fd      	movs	r2, #253	; 0xfd
 800a4cc:	491c      	ldr	r1, [pc, #112]	; (800a540 <tcp_input+0x2c8>)
 800a4ce:	480c      	ldr	r0, [pc, #48]	; (800a500 <tcp_input+0x288>)
 800a4d0:	f007 faa2 	bl	8011a18 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a4d4:	69fb      	ldr	r3, [r7, #28]
 800a4d6:	7a1b      	ldrb	r3, [r3, #8]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d033      	beq.n	800a544 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a4dc:	69fb      	ldr	r3, [r7, #28]
 800a4de:	7a1a      	ldrb	r2, [r3, #8]
 800a4e0:	4b09      	ldr	r3, [pc, #36]	; (800a508 <tcp_input+0x290>)
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a4e8:	3301      	adds	r3, #1
 800a4ea:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	d029      	beq.n	800a544 <tcp_input+0x2cc>
      prev = pcb;
 800a4f0:	69fb      	ldr	r3, [r7, #28]
 800a4f2:	61bb      	str	r3, [r7, #24]
      continue;
 800a4f4:	e06b      	b.n	800a5ce <tcp_input+0x356>
 800a4f6:	bf00      	nop
 800a4f8:	08014c38 	.word	0x08014c38
 800a4fc:	08014c6c 	.word	0x08014c6c
 800a500:	08014c84 	.word	0x08014c84
 800a504:	2000a750 	.word	0x2000a750
 800a508:	20004ff8 	.word	0x20004ff8
 800a50c:	2000a754 	.word	0x2000a754
 800a510:	2000a758 	.word	0x2000a758
 800a514:	2000a756 	.word	0x2000a756
 800a518:	08014cac 	.word	0x08014cac
 800a51c:	08014cbc 	.word	0x08014cbc
 800a520:	08014cc8 	.word	0x08014cc8
 800a524:	2000a760 	.word	0x2000a760
 800a528:	2000a764 	.word	0x2000a764
 800a52c:	2000a76c 	.word	0x2000a76c
 800a530:	2000a76a 	.word	0x2000a76a
 800a534:	2000a734 	.word	0x2000a734
 800a538:	08014ce8 	.word	0x08014ce8
 800a53c:	08014d10 	.word	0x08014d10
 800a540:	08014d3c 	.word	0x08014d3c
    }

    if (pcb->remote_port == tcphdr->src &&
 800a544:	69fb      	ldr	r3, [r7, #28]
 800a546:	8b1a      	ldrh	r2, [r3, #24]
 800a548:	4b72      	ldr	r3, [pc, #456]	; (800a714 <tcp_input+0x49c>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	881b      	ldrh	r3, [r3, #0]
 800a54e:	b29b      	uxth	r3, r3
 800a550:	429a      	cmp	r2, r3
 800a552:	d13a      	bne.n	800a5ca <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800a554:	69fb      	ldr	r3, [r7, #28]
 800a556:	8ada      	ldrh	r2, [r3, #22]
 800a558:	4b6e      	ldr	r3, [pc, #440]	; (800a714 <tcp_input+0x49c>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	885b      	ldrh	r3, [r3, #2]
 800a55e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800a560:	429a      	cmp	r2, r3
 800a562:	d132      	bne.n	800a5ca <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a564:	69fb      	ldr	r3, [r7, #28]
 800a566:	685a      	ldr	r2, [r3, #4]
 800a568:	4b6b      	ldr	r3, [pc, #428]	; (800a718 <tcp_input+0x4a0>)
 800a56a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800a56c:	429a      	cmp	r2, r3
 800a56e:	d12c      	bne.n	800a5ca <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a570:	69fb      	ldr	r3, [r7, #28]
 800a572:	681a      	ldr	r2, [r3, #0]
 800a574:	4b68      	ldr	r3, [pc, #416]	; (800a718 <tcp_input+0x4a0>)
 800a576:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a578:	429a      	cmp	r2, r3
 800a57a:	d126      	bne.n	800a5ca <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a57c:	69fb      	ldr	r3, [r7, #28]
 800a57e:	68db      	ldr	r3, [r3, #12]
 800a580:	69fa      	ldr	r2, [r7, #28]
 800a582:	429a      	cmp	r2, r3
 800a584:	d106      	bne.n	800a594 <tcp_input+0x31c>
 800a586:	4b65      	ldr	r3, [pc, #404]	; (800a71c <tcp_input+0x4a4>)
 800a588:	f240 120d 	movw	r2, #269	; 0x10d
 800a58c:	4964      	ldr	r1, [pc, #400]	; (800a720 <tcp_input+0x4a8>)
 800a58e:	4865      	ldr	r0, [pc, #404]	; (800a724 <tcp_input+0x4ac>)
 800a590:	f007 fa42 	bl	8011a18 <iprintf>
      if (prev != NULL) {
 800a594:	69bb      	ldr	r3, [r7, #24]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d00a      	beq.n	800a5b0 <tcp_input+0x338>
        prev->next = pcb->next;
 800a59a:	69fb      	ldr	r3, [r7, #28]
 800a59c:	68da      	ldr	r2, [r3, #12]
 800a59e:	69bb      	ldr	r3, [r7, #24]
 800a5a0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800a5a2:	4b61      	ldr	r3, [pc, #388]	; (800a728 <tcp_input+0x4b0>)
 800a5a4:	681a      	ldr	r2, [r3, #0]
 800a5a6:	69fb      	ldr	r3, [r7, #28]
 800a5a8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800a5aa:	4a5f      	ldr	r2, [pc, #380]	; (800a728 <tcp_input+0x4b0>)
 800a5ac:	69fb      	ldr	r3, [r7, #28]
 800a5ae:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a5b0:	69fb      	ldr	r3, [r7, #28]
 800a5b2:	68db      	ldr	r3, [r3, #12]
 800a5b4:	69fa      	ldr	r2, [r7, #28]
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d111      	bne.n	800a5de <tcp_input+0x366>
 800a5ba:	4b58      	ldr	r3, [pc, #352]	; (800a71c <tcp_input+0x4a4>)
 800a5bc:	f240 1215 	movw	r2, #277	; 0x115
 800a5c0:	495a      	ldr	r1, [pc, #360]	; (800a72c <tcp_input+0x4b4>)
 800a5c2:	4858      	ldr	r0, [pc, #352]	; (800a724 <tcp_input+0x4ac>)
 800a5c4:	f007 fa28 	bl	8011a18 <iprintf>
      break;
 800a5c8:	e009      	b.n	800a5de <tcp_input+0x366>
    }
    prev = pcb;
 800a5ca:	69fb      	ldr	r3, [r7, #28]
 800a5cc:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a5ce:	69fb      	ldr	r3, [r7, #28]
 800a5d0:	68db      	ldr	r3, [r3, #12]
 800a5d2:	61fb      	str	r3, [r7, #28]
 800a5d4:	69fb      	ldr	r3, [r7, #28]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	f47f af5e 	bne.w	800a498 <tcp_input+0x220>
 800a5dc:	e000      	b.n	800a5e0 <tcp_input+0x368>
      break;
 800a5de:	bf00      	nop
  }

  if (pcb == NULL) {
 800a5e0:	69fb      	ldr	r3, [r7, #28]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	f040 80aa 	bne.w	800a73c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a5e8:	4b51      	ldr	r3, [pc, #324]	; (800a730 <tcp_input+0x4b8>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	61fb      	str	r3, [r7, #28]
 800a5ee:	e03f      	b.n	800a670 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a5f0:	69fb      	ldr	r3, [r7, #28]
 800a5f2:	7d1b      	ldrb	r3, [r3, #20]
 800a5f4:	2b0a      	cmp	r3, #10
 800a5f6:	d006      	beq.n	800a606 <tcp_input+0x38e>
 800a5f8:	4b48      	ldr	r3, [pc, #288]	; (800a71c <tcp_input+0x4a4>)
 800a5fa:	f240 121f 	movw	r2, #287	; 0x11f
 800a5fe:	494d      	ldr	r1, [pc, #308]	; (800a734 <tcp_input+0x4bc>)
 800a600:	4848      	ldr	r0, [pc, #288]	; (800a724 <tcp_input+0x4ac>)
 800a602:	f007 fa09 	bl	8011a18 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a606:	69fb      	ldr	r3, [r7, #28]
 800a608:	7a1b      	ldrb	r3, [r3, #8]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d009      	beq.n	800a622 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a60e:	69fb      	ldr	r3, [r7, #28]
 800a610:	7a1a      	ldrb	r2, [r3, #8]
 800a612:	4b41      	ldr	r3, [pc, #260]	; (800a718 <tcp_input+0x4a0>)
 800a614:	685b      	ldr	r3, [r3, #4]
 800a616:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a61a:	3301      	adds	r3, #1
 800a61c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a61e:	429a      	cmp	r2, r3
 800a620:	d122      	bne.n	800a668 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800a622:	69fb      	ldr	r3, [r7, #28]
 800a624:	8b1a      	ldrh	r2, [r3, #24]
 800a626:	4b3b      	ldr	r3, [pc, #236]	; (800a714 <tcp_input+0x49c>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	881b      	ldrh	r3, [r3, #0]
 800a62c:	b29b      	uxth	r3, r3
 800a62e:	429a      	cmp	r2, r3
 800a630:	d11b      	bne.n	800a66a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800a632:	69fb      	ldr	r3, [r7, #28]
 800a634:	8ada      	ldrh	r2, [r3, #22]
 800a636:	4b37      	ldr	r3, [pc, #220]	; (800a714 <tcp_input+0x49c>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	885b      	ldrh	r3, [r3, #2]
 800a63c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800a63e:	429a      	cmp	r2, r3
 800a640:	d113      	bne.n	800a66a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a642:	69fb      	ldr	r3, [r7, #28]
 800a644:	685a      	ldr	r2, [r3, #4]
 800a646:	4b34      	ldr	r3, [pc, #208]	; (800a718 <tcp_input+0x4a0>)
 800a648:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800a64a:	429a      	cmp	r2, r3
 800a64c:	d10d      	bne.n	800a66a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a64e:	69fb      	ldr	r3, [r7, #28]
 800a650:	681a      	ldr	r2, [r3, #0]
 800a652:	4b31      	ldr	r3, [pc, #196]	; (800a718 <tcp_input+0x4a0>)
 800a654:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a656:	429a      	cmp	r2, r3
 800a658:	d107      	bne.n	800a66a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800a65a:	69f8      	ldr	r0, [r7, #28]
 800a65c:	f000 fb56 	bl	800ad0c <tcp_timewait_input>
        }
        pbuf_free(p);
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f7fd ffe1 	bl	8008628 <pbuf_free>
        return;
 800a666:	e1fd      	b.n	800aa64 <tcp_input+0x7ec>
        continue;
 800a668:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a66a:	69fb      	ldr	r3, [r7, #28]
 800a66c:	68db      	ldr	r3, [r3, #12]
 800a66e:	61fb      	str	r3, [r7, #28]
 800a670:	69fb      	ldr	r3, [r7, #28]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d1bc      	bne.n	800a5f0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800a676:	2300      	movs	r3, #0
 800a678:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a67a:	4b2f      	ldr	r3, [pc, #188]	; (800a738 <tcp_input+0x4c0>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	617b      	str	r3, [r7, #20]
 800a680:	e02a      	b.n	800a6d8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	7a1b      	ldrb	r3, [r3, #8]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d00c      	beq.n	800a6a4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	7a1a      	ldrb	r2, [r3, #8]
 800a68e:	4b22      	ldr	r3, [pc, #136]	; (800a718 <tcp_input+0x4a0>)
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a696:	3301      	adds	r3, #1
 800a698:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a69a:	429a      	cmp	r2, r3
 800a69c:	d002      	beq.n	800a6a4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	61bb      	str	r3, [r7, #24]
        continue;
 800a6a2:	e016      	b.n	800a6d2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	8ada      	ldrh	r2, [r3, #22]
 800a6a8:	4b1a      	ldr	r3, [pc, #104]	; (800a714 <tcp_input+0x49c>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	885b      	ldrh	r3, [r3, #2]
 800a6ae:	b29b      	uxth	r3, r3
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	d10c      	bne.n	800a6ce <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	681a      	ldr	r2, [r3, #0]
 800a6b8:	4b17      	ldr	r3, [pc, #92]	; (800a718 <tcp_input+0x4a0>)
 800a6ba:	695b      	ldr	r3, [r3, #20]
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	d00f      	beq.n	800a6e0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d00d      	beq.n	800a6e2 <tcp_input+0x46a>
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d009      	beq.n	800a6e2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	68db      	ldr	r3, [r3, #12]
 800a6d6:	617b      	str	r3, [r7, #20]
 800a6d8:	697b      	ldr	r3, [r7, #20]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d1d1      	bne.n	800a682 <tcp_input+0x40a>
 800a6de:	e000      	b.n	800a6e2 <tcp_input+0x46a>
            break;
 800a6e0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d029      	beq.n	800a73c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800a6e8:	69bb      	ldr	r3, [r7, #24]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d00a      	beq.n	800a704 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	68da      	ldr	r2, [r3, #12]
 800a6f2:	69bb      	ldr	r3, [r7, #24]
 800a6f4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800a6f6:	4b10      	ldr	r3, [pc, #64]	; (800a738 <tcp_input+0x4c0>)
 800a6f8:	681a      	ldr	r2, [r3, #0]
 800a6fa:	697b      	ldr	r3, [r7, #20]
 800a6fc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800a6fe:	4a0e      	ldr	r2, [pc, #56]	; (800a738 <tcp_input+0x4c0>)
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800a704:	6978      	ldr	r0, [r7, #20]
 800a706:	f000 fa03 	bl	800ab10 <tcp_listen_input>
      }
      pbuf_free(p);
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f7fd ff8c 	bl	8008628 <pbuf_free>
      return;
 800a710:	e1a8      	b.n	800aa64 <tcp_input+0x7ec>
 800a712:	bf00      	nop
 800a714:	2000a750 	.word	0x2000a750
 800a718:	20004ff8 	.word	0x20004ff8
 800a71c:	08014c38 	.word	0x08014c38
 800a720:	08014d64 	.word	0x08014d64
 800a724:	08014c84 	.word	0x08014c84
 800a728:	2000a734 	.word	0x2000a734
 800a72c:	08014d90 	.word	0x08014d90
 800a730:	2000a738 	.word	0x2000a738
 800a734:	08014dbc 	.word	0x08014dbc
 800a738:	2000a730 	.word	0x2000a730
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800a73c:	69fb      	ldr	r3, [r7, #28]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	f000 8158 	beq.w	800a9f4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800a744:	4b95      	ldr	r3, [pc, #596]	; (800a99c <tcp_input+0x724>)
 800a746:	2200      	movs	r2, #0
 800a748:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	891a      	ldrh	r2, [r3, #8]
 800a74e:	4b93      	ldr	r3, [pc, #588]	; (800a99c <tcp_input+0x724>)
 800a750:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800a752:	4a92      	ldr	r2, [pc, #584]	; (800a99c <tcp_input+0x724>)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800a758:	4b91      	ldr	r3, [pc, #580]	; (800a9a0 <tcp_input+0x728>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	4a8f      	ldr	r2, [pc, #572]	; (800a99c <tcp_input+0x724>)
 800a75e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800a760:	4b90      	ldr	r3, [pc, #576]	; (800a9a4 <tcp_input+0x72c>)
 800a762:	2200      	movs	r2, #0
 800a764:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800a766:	4b90      	ldr	r3, [pc, #576]	; (800a9a8 <tcp_input+0x730>)
 800a768:	2200      	movs	r2, #0
 800a76a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800a76c:	4b8f      	ldr	r3, [pc, #572]	; (800a9ac <tcp_input+0x734>)
 800a76e:	2200      	movs	r2, #0
 800a770:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800a772:	4b8f      	ldr	r3, [pc, #572]	; (800a9b0 <tcp_input+0x738>)
 800a774:	781b      	ldrb	r3, [r3, #0]
 800a776:	f003 0308 	and.w	r3, r3, #8
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d006      	beq.n	800a78c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	7b5b      	ldrb	r3, [r3, #13]
 800a782:	f043 0301 	orr.w	r3, r3, #1
 800a786:	b2da      	uxtb	r2, r3
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800a78c:	69fb      	ldr	r3, [r7, #28]
 800a78e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a790:	2b00      	cmp	r3, #0
 800a792:	d017      	beq.n	800a7c4 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a794:	69f8      	ldr	r0, [r7, #28]
 800a796:	f7ff f929 	bl	80099ec <tcp_process_refused_data>
 800a79a:	4603      	mov	r3, r0
 800a79c:	f113 0f0d 	cmn.w	r3, #13
 800a7a0:	d007      	beq.n	800a7b2 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a7a2:	69fb      	ldr	r3, [r7, #28]
 800a7a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d00c      	beq.n	800a7c4 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a7aa:	4b82      	ldr	r3, [pc, #520]	; (800a9b4 <tcp_input+0x73c>)
 800a7ac:	881b      	ldrh	r3, [r3, #0]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d008      	beq.n	800a7c4 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800a7b2:	69fb      	ldr	r3, [r7, #28]
 800a7b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	f040 80e3 	bne.w	800a982 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800a7bc:	69f8      	ldr	r0, [r7, #28]
 800a7be:	f003 f9ad 	bl	800db1c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800a7c2:	e0de      	b.n	800a982 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800a7c4:	4a7c      	ldr	r2, [pc, #496]	; (800a9b8 <tcp_input+0x740>)
 800a7c6:	69fb      	ldr	r3, [r7, #28]
 800a7c8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800a7ca:	69f8      	ldr	r0, [r7, #28]
 800a7cc:	f000 fb18 	bl	800ae00 <tcp_process>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800a7d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a7d8:	f113 0f0d 	cmn.w	r3, #13
 800a7dc:	f000 80d3 	beq.w	800a986 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800a7e0:	4b71      	ldr	r3, [pc, #452]	; (800a9a8 <tcp_input+0x730>)
 800a7e2:	781b      	ldrb	r3, [r3, #0]
 800a7e4:	f003 0308 	and.w	r3, r3, #8
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d015      	beq.n	800a818 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800a7ec:	69fb      	ldr	r3, [r7, #28]
 800a7ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d008      	beq.n	800a808 <tcp_input+0x590>
 800a7f6:	69fb      	ldr	r3, [r7, #28]
 800a7f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7fc:	69fa      	ldr	r2, [r7, #28]
 800a7fe:	6912      	ldr	r2, [r2, #16]
 800a800:	f06f 010d 	mvn.w	r1, #13
 800a804:	4610      	mov	r0, r2
 800a806:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a808:	69f9      	ldr	r1, [r7, #28]
 800a80a:	486c      	ldr	r0, [pc, #432]	; (800a9bc <tcp_input+0x744>)
 800a80c:	f7ff fbbc 	bl	8009f88 <tcp_pcb_remove>
        tcp_free(pcb);
 800a810:	69f8      	ldr	r0, [r7, #28]
 800a812:	f7fe f9a9 	bl	8008b68 <tcp_free>
 800a816:	e0da      	b.n	800a9ce <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800a818:	2300      	movs	r3, #0
 800a81a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800a81c:	4b63      	ldr	r3, [pc, #396]	; (800a9ac <tcp_input+0x734>)
 800a81e:	881b      	ldrh	r3, [r3, #0]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d01d      	beq.n	800a860 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800a824:	4b61      	ldr	r3, [pc, #388]	; (800a9ac <tcp_input+0x734>)
 800a826:	881b      	ldrh	r3, [r3, #0]
 800a828:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800a82a:	69fb      	ldr	r3, [r7, #28]
 800a82c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a830:	2b00      	cmp	r3, #0
 800a832:	d00a      	beq.n	800a84a <tcp_input+0x5d2>
 800a834:	69fb      	ldr	r3, [r7, #28]
 800a836:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a83a:	69fa      	ldr	r2, [r7, #28]
 800a83c:	6910      	ldr	r0, [r2, #16]
 800a83e:	89fa      	ldrh	r2, [r7, #14]
 800a840:	69f9      	ldr	r1, [r7, #28]
 800a842:	4798      	blx	r3
 800a844:	4603      	mov	r3, r0
 800a846:	74fb      	strb	r3, [r7, #19]
 800a848:	e001      	b.n	800a84e <tcp_input+0x5d6>
 800a84a:	2300      	movs	r3, #0
 800a84c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a84e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a852:	f113 0f0d 	cmn.w	r3, #13
 800a856:	f000 8098 	beq.w	800a98a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800a85a:	4b54      	ldr	r3, [pc, #336]	; (800a9ac <tcp_input+0x734>)
 800a85c:	2200      	movs	r2, #0
 800a85e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800a860:	69f8      	ldr	r0, [r7, #28]
 800a862:	f000 f915 	bl	800aa90 <tcp_input_delayed_close>
 800a866:	4603      	mov	r3, r0
 800a868:	2b00      	cmp	r3, #0
 800a86a:	f040 8090 	bne.w	800a98e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800a86e:	4b4d      	ldr	r3, [pc, #308]	; (800a9a4 <tcp_input+0x72c>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d041      	beq.n	800a8fa <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800a876:	69fb      	ldr	r3, [r7, #28]
 800a878:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d006      	beq.n	800a88c <tcp_input+0x614>
 800a87e:	4b50      	ldr	r3, [pc, #320]	; (800a9c0 <tcp_input+0x748>)
 800a880:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a884:	494f      	ldr	r1, [pc, #316]	; (800a9c4 <tcp_input+0x74c>)
 800a886:	4850      	ldr	r0, [pc, #320]	; (800a9c8 <tcp_input+0x750>)
 800a888:	f007 f8c6 	bl	8011a18 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800a88c:	69fb      	ldr	r3, [r7, #28]
 800a88e:	8b5b      	ldrh	r3, [r3, #26]
 800a890:	f003 0310 	and.w	r3, r3, #16
 800a894:	2b00      	cmp	r3, #0
 800a896:	d008      	beq.n	800a8aa <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800a898:	4b42      	ldr	r3, [pc, #264]	; (800a9a4 <tcp_input+0x72c>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	4618      	mov	r0, r3
 800a89e:	f7fd fec3 	bl	8008628 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800a8a2:	69f8      	ldr	r0, [r7, #28]
 800a8a4:	f7fe fc48 	bl	8009138 <tcp_abort>
            goto aborted;
 800a8a8:	e091      	b.n	800a9ce <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800a8aa:	69fb      	ldr	r3, [r7, #28]
 800a8ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d00c      	beq.n	800a8ce <tcp_input+0x656>
 800a8b4:	69fb      	ldr	r3, [r7, #28]
 800a8b6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a8ba:	69fb      	ldr	r3, [r7, #28]
 800a8bc:	6918      	ldr	r0, [r3, #16]
 800a8be:	4b39      	ldr	r3, [pc, #228]	; (800a9a4 <tcp_input+0x72c>)
 800a8c0:	681a      	ldr	r2, [r3, #0]
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	69f9      	ldr	r1, [r7, #28]
 800a8c6:	47a0      	blx	r4
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	74fb      	strb	r3, [r7, #19]
 800a8cc:	e008      	b.n	800a8e0 <tcp_input+0x668>
 800a8ce:	4b35      	ldr	r3, [pc, #212]	; (800a9a4 <tcp_input+0x72c>)
 800a8d0:	681a      	ldr	r2, [r3, #0]
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	69f9      	ldr	r1, [r7, #28]
 800a8d6:	2000      	movs	r0, #0
 800a8d8:	f7ff f95e 	bl	8009b98 <tcp_recv_null>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800a8e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a8e4:	f113 0f0d 	cmn.w	r3, #13
 800a8e8:	d053      	beq.n	800a992 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800a8ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d003      	beq.n	800a8fa <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800a8f2:	4b2c      	ldr	r3, [pc, #176]	; (800a9a4 <tcp_input+0x72c>)
 800a8f4:	681a      	ldr	r2, [r3, #0]
 800a8f6:	69fb      	ldr	r3, [r7, #28]
 800a8f8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800a8fa:	4b2b      	ldr	r3, [pc, #172]	; (800a9a8 <tcp_input+0x730>)
 800a8fc:	781b      	ldrb	r3, [r3, #0]
 800a8fe:	f003 0320 	and.w	r3, r3, #32
 800a902:	2b00      	cmp	r3, #0
 800a904:	d030      	beq.n	800a968 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800a906:	69fb      	ldr	r3, [r7, #28]
 800a908:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d009      	beq.n	800a922 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800a90e:	69fb      	ldr	r3, [r7, #28]
 800a910:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a912:	7b5a      	ldrb	r2, [r3, #13]
 800a914:	69fb      	ldr	r3, [r7, #28]
 800a916:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a918:	f042 0220 	orr.w	r2, r2, #32
 800a91c:	b2d2      	uxtb	r2, r2
 800a91e:	735a      	strb	r2, [r3, #13]
 800a920:	e022      	b.n	800a968 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a922:	69fb      	ldr	r3, [r7, #28]
 800a924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a926:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a92a:	d005      	beq.n	800a938 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800a92c:	69fb      	ldr	r3, [r7, #28]
 800a92e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a930:	3301      	adds	r3, #1
 800a932:	b29a      	uxth	r2, r3
 800a934:	69fb      	ldr	r3, [r7, #28]
 800a936:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800a938:	69fb      	ldr	r3, [r7, #28]
 800a93a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d00b      	beq.n	800a95a <tcp_input+0x6e2>
 800a942:	69fb      	ldr	r3, [r7, #28]
 800a944:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a948:	69fb      	ldr	r3, [r7, #28]
 800a94a:	6918      	ldr	r0, [r3, #16]
 800a94c:	2300      	movs	r3, #0
 800a94e:	2200      	movs	r2, #0
 800a950:	69f9      	ldr	r1, [r7, #28]
 800a952:	47a0      	blx	r4
 800a954:	4603      	mov	r3, r0
 800a956:	74fb      	strb	r3, [r7, #19]
 800a958:	e001      	b.n	800a95e <tcp_input+0x6e6>
 800a95a:	2300      	movs	r3, #0
 800a95c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a95e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a962:	f113 0f0d 	cmn.w	r3, #13
 800a966:	d016      	beq.n	800a996 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800a968:	4b13      	ldr	r3, [pc, #76]	; (800a9b8 <tcp_input+0x740>)
 800a96a:	2200      	movs	r2, #0
 800a96c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800a96e:	69f8      	ldr	r0, [r7, #28]
 800a970:	f000 f88e 	bl	800aa90 <tcp_input_delayed_close>
 800a974:	4603      	mov	r3, r0
 800a976:	2b00      	cmp	r3, #0
 800a978:	d128      	bne.n	800a9cc <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800a97a:	69f8      	ldr	r0, [r7, #28]
 800a97c:	f002 fac8 	bl	800cf10 <tcp_output>
 800a980:	e025      	b.n	800a9ce <tcp_input+0x756>
        goto aborted;
 800a982:	bf00      	nop
 800a984:	e023      	b.n	800a9ce <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800a986:	bf00      	nop
 800a988:	e021      	b.n	800a9ce <tcp_input+0x756>
              goto aborted;
 800a98a:	bf00      	nop
 800a98c:	e01f      	b.n	800a9ce <tcp_input+0x756>
          goto aborted;
 800a98e:	bf00      	nop
 800a990:	e01d      	b.n	800a9ce <tcp_input+0x756>
            goto aborted;
 800a992:	bf00      	nop
 800a994:	e01b      	b.n	800a9ce <tcp_input+0x756>
              goto aborted;
 800a996:	bf00      	nop
 800a998:	e019      	b.n	800a9ce <tcp_input+0x756>
 800a99a:	bf00      	nop
 800a99c:	2000a740 	.word	0x2000a740
 800a9a0:	2000a750 	.word	0x2000a750
 800a9a4:	2000a770 	.word	0x2000a770
 800a9a8:	2000a76d 	.word	0x2000a76d
 800a9ac:	2000a768 	.word	0x2000a768
 800a9b0:	2000a76c 	.word	0x2000a76c
 800a9b4:	2000a76a 	.word	0x2000a76a
 800a9b8:	2000a774 	.word	0x2000a774
 800a9bc:	2000a734 	.word	0x2000a734
 800a9c0:	08014c38 	.word	0x08014c38
 800a9c4:	08014dec 	.word	0x08014dec
 800a9c8:	08014c84 	.word	0x08014c84
          goto aborted;
 800a9cc:	bf00      	nop
    tcp_input_pcb = NULL;
 800a9ce:	4b27      	ldr	r3, [pc, #156]	; (800aa6c <tcp_input+0x7f4>)
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800a9d4:	4b26      	ldr	r3, [pc, #152]	; (800aa70 <tcp_input+0x7f8>)
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800a9da:	4b26      	ldr	r3, [pc, #152]	; (800aa74 <tcp_input+0x7fc>)
 800a9dc:	685b      	ldr	r3, [r3, #4]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d03f      	beq.n	800aa62 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800a9e2:	4b24      	ldr	r3, [pc, #144]	; (800aa74 <tcp_input+0x7fc>)
 800a9e4:	685b      	ldr	r3, [r3, #4]
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f7fd fe1e 	bl	8008628 <pbuf_free>
      inseg.p = NULL;
 800a9ec:	4b21      	ldr	r3, [pc, #132]	; (800aa74 <tcp_input+0x7fc>)
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800a9f2:	e036      	b.n	800aa62 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800a9f4:	4b20      	ldr	r3, [pc, #128]	; (800aa78 <tcp_input+0x800>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	899b      	ldrh	r3, [r3, #12]
 800a9fa:	b29b      	uxth	r3, r3
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f7fc fab5 	bl	8006f6c <lwip_htons>
 800aa02:	4603      	mov	r3, r0
 800aa04:	b2db      	uxtb	r3, r3
 800aa06:	f003 0304 	and.w	r3, r3, #4
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d118      	bne.n	800aa40 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aa0e:	4b1b      	ldr	r3, [pc, #108]	; (800aa7c <tcp_input+0x804>)
 800aa10:	6819      	ldr	r1, [r3, #0]
 800aa12:	4b1b      	ldr	r3, [pc, #108]	; (800aa80 <tcp_input+0x808>)
 800aa14:	881b      	ldrh	r3, [r3, #0]
 800aa16:	461a      	mov	r2, r3
 800aa18:	4b1a      	ldr	r3, [pc, #104]	; (800aa84 <tcp_input+0x80c>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800aa1e:	4b16      	ldr	r3, [pc, #88]	; (800aa78 <tcp_input+0x800>)
 800aa20:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aa22:	885b      	ldrh	r3, [r3, #2]
 800aa24:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800aa26:	4a14      	ldr	r2, [pc, #80]	; (800aa78 <tcp_input+0x800>)
 800aa28:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aa2a:	8812      	ldrh	r2, [r2, #0]
 800aa2c:	b292      	uxth	r2, r2
 800aa2e:	9202      	str	r2, [sp, #8]
 800aa30:	9301      	str	r3, [sp, #4]
 800aa32:	4b15      	ldr	r3, [pc, #84]	; (800aa88 <tcp_input+0x810>)
 800aa34:	9300      	str	r3, [sp, #0]
 800aa36:	4b15      	ldr	r3, [pc, #84]	; (800aa8c <tcp_input+0x814>)
 800aa38:	4602      	mov	r2, r0
 800aa3a:	2000      	movs	r0, #0
 800aa3c:	f003 f81c 	bl	800da78 <tcp_rst>
    pbuf_free(p);
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f7fd fdf1 	bl	8008628 <pbuf_free>
  return;
 800aa46:	e00c      	b.n	800aa62 <tcp_input+0x7ea>
    goto dropped;
 800aa48:	bf00      	nop
 800aa4a:	e006      	b.n	800aa5a <tcp_input+0x7e2>
    goto dropped;
 800aa4c:	bf00      	nop
 800aa4e:	e004      	b.n	800aa5a <tcp_input+0x7e2>
    goto dropped;
 800aa50:	bf00      	nop
 800aa52:	e002      	b.n	800aa5a <tcp_input+0x7e2>
      goto dropped;
 800aa54:	bf00      	nop
 800aa56:	e000      	b.n	800aa5a <tcp_input+0x7e2>
      goto dropped;
 800aa58:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f7fd fde4 	bl	8008628 <pbuf_free>
 800aa60:	e000      	b.n	800aa64 <tcp_input+0x7ec>
  return;
 800aa62:	bf00      	nop
}
 800aa64:	3724      	adds	r7, #36	; 0x24
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd90      	pop	{r4, r7, pc}
 800aa6a:	bf00      	nop
 800aa6c:	2000a774 	.word	0x2000a774
 800aa70:	2000a770 	.word	0x2000a770
 800aa74:	2000a740 	.word	0x2000a740
 800aa78:	2000a750 	.word	0x2000a750
 800aa7c:	2000a764 	.word	0x2000a764
 800aa80:	2000a76a 	.word	0x2000a76a
 800aa84:	2000a760 	.word	0x2000a760
 800aa88:	20005008 	.word	0x20005008
 800aa8c:	2000500c 	.word	0x2000500c

0800aa90 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b082      	sub	sp, #8
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d106      	bne.n	800aaac <tcp_input_delayed_close+0x1c>
 800aa9e:	4b17      	ldr	r3, [pc, #92]	; (800aafc <tcp_input_delayed_close+0x6c>)
 800aaa0:	f240 225a 	movw	r2, #602	; 0x25a
 800aaa4:	4916      	ldr	r1, [pc, #88]	; (800ab00 <tcp_input_delayed_close+0x70>)
 800aaa6:	4817      	ldr	r0, [pc, #92]	; (800ab04 <tcp_input_delayed_close+0x74>)
 800aaa8:	f006 ffb6 	bl	8011a18 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800aaac:	4b16      	ldr	r3, [pc, #88]	; (800ab08 <tcp_input_delayed_close+0x78>)
 800aaae:	781b      	ldrb	r3, [r3, #0]
 800aab0:	f003 0310 	and.w	r3, r3, #16
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d01c      	beq.n	800aaf2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	8b5b      	ldrh	r3, [r3, #26]
 800aabc:	f003 0310 	and.w	r3, r3, #16
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d10d      	bne.n	800aae0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d008      	beq.n	800aae0 <tcp_input_delayed_close+0x50>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aad4:	687a      	ldr	r2, [r7, #4]
 800aad6:	6912      	ldr	r2, [r2, #16]
 800aad8:	f06f 010e 	mvn.w	r1, #14
 800aadc:	4610      	mov	r0, r2
 800aade:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800aae0:	6879      	ldr	r1, [r7, #4]
 800aae2:	480a      	ldr	r0, [pc, #40]	; (800ab0c <tcp_input_delayed_close+0x7c>)
 800aae4:	f7ff fa50 	bl	8009f88 <tcp_pcb_remove>
    tcp_free(pcb);
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f7fe f83d 	bl	8008b68 <tcp_free>
    return 1;
 800aaee:	2301      	movs	r3, #1
 800aaf0:	e000      	b.n	800aaf4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800aaf2:	2300      	movs	r3, #0
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3708      	adds	r7, #8
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}
 800aafc:	08014c38 	.word	0x08014c38
 800ab00:	08014e08 	.word	0x08014e08
 800ab04:	08014c84 	.word	0x08014c84
 800ab08:	2000a76d 	.word	0x2000a76d
 800ab0c:	2000a734 	.word	0x2000a734

0800ab10 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800ab10:	b590      	push	{r4, r7, lr}
 800ab12:	b08b      	sub	sp, #44	; 0x2c
 800ab14:	af04      	add	r7, sp, #16
 800ab16:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800ab18:	4b6f      	ldr	r3, [pc, #444]	; (800acd8 <tcp_listen_input+0x1c8>)
 800ab1a:	781b      	ldrb	r3, [r3, #0]
 800ab1c:	f003 0304 	and.w	r3, r3, #4
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	f040 80d2 	bne.w	800acca <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d106      	bne.n	800ab3a <tcp_listen_input+0x2a>
 800ab2c:	4b6b      	ldr	r3, [pc, #428]	; (800acdc <tcp_listen_input+0x1cc>)
 800ab2e:	f240 2281 	movw	r2, #641	; 0x281
 800ab32:	496b      	ldr	r1, [pc, #428]	; (800ace0 <tcp_listen_input+0x1d0>)
 800ab34:	486b      	ldr	r0, [pc, #428]	; (800ace4 <tcp_listen_input+0x1d4>)
 800ab36:	f006 ff6f 	bl	8011a18 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800ab3a:	4b67      	ldr	r3, [pc, #412]	; (800acd8 <tcp_listen_input+0x1c8>)
 800ab3c:	781b      	ldrb	r3, [r3, #0]
 800ab3e:	f003 0310 	and.w	r3, r3, #16
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d019      	beq.n	800ab7a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ab46:	4b68      	ldr	r3, [pc, #416]	; (800ace8 <tcp_listen_input+0x1d8>)
 800ab48:	6819      	ldr	r1, [r3, #0]
 800ab4a:	4b68      	ldr	r3, [pc, #416]	; (800acec <tcp_listen_input+0x1dc>)
 800ab4c:	881b      	ldrh	r3, [r3, #0]
 800ab4e:	461a      	mov	r2, r3
 800ab50:	4b67      	ldr	r3, [pc, #412]	; (800acf0 <tcp_listen_input+0x1e0>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ab56:	4b67      	ldr	r3, [pc, #412]	; (800acf4 <tcp_listen_input+0x1e4>)
 800ab58:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ab5a:	885b      	ldrh	r3, [r3, #2]
 800ab5c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ab5e:	4a65      	ldr	r2, [pc, #404]	; (800acf4 <tcp_listen_input+0x1e4>)
 800ab60:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ab62:	8812      	ldrh	r2, [r2, #0]
 800ab64:	b292      	uxth	r2, r2
 800ab66:	9202      	str	r2, [sp, #8]
 800ab68:	9301      	str	r3, [sp, #4]
 800ab6a:	4b63      	ldr	r3, [pc, #396]	; (800acf8 <tcp_listen_input+0x1e8>)
 800ab6c:	9300      	str	r3, [sp, #0]
 800ab6e:	4b63      	ldr	r3, [pc, #396]	; (800acfc <tcp_listen_input+0x1ec>)
 800ab70:	4602      	mov	r2, r0
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f002 ff80 	bl	800da78 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800ab78:	e0a9      	b.n	800acce <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800ab7a:	4b57      	ldr	r3, [pc, #348]	; (800acd8 <tcp_listen_input+0x1c8>)
 800ab7c:	781b      	ldrb	r3, [r3, #0]
 800ab7e:	f003 0302 	and.w	r3, r3, #2
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	f000 80a3 	beq.w	800acce <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	7d5b      	ldrb	r3, [r3, #21]
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f7ff f927 	bl	8009de0 <tcp_alloc>
 800ab92:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d111      	bne.n	800abbe <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	699b      	ldr	r3, [r3, #24]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d00a      	beq.n	800abb8 <tcp_listen_input+0xa8>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	699b      	ldr	r3, [r3, #24]
 800aba6:	687a      	ldr	r2, [r7, #4]
 800aba8:	6910      	ldr	r0, [r2, #16]
 800abaa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800abae:	2100      	movs	r1, #0
 800abb0:	4798      	blx	r3
 800abb2:	4603      	mov	r3, r0
 800abb4:	73bb      	strb	r3, [r7, #14]
      return;
 800abb6:	e08b      	b.n	800acd0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800abb8:	23f0      	movs	r3, #240	; 0xf0
 800abba:	73bb      	strb	r3, [r7, #14]
      return;
 800abbc:	e088      	b.n	800acd0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800abbe:	4b50      	ldr	r3, [pc, #320]	; (800ad00 <tcp_listen_input+0x1f0>)
 800abc0:	695a      	ldr	r2, [r3, #20]
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800abc6:	4b4e      	ldr	r3, [pc, #312]	; (800ad00 <tcp_listen_input+0x1f0>)
 800abc8:	691a      	ldr	r2, [r3, #16]
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	8ada      	ldrh	r2, [r3, #22]
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800abd6:	4b47      	ldr	r3, [pc, #284]	; (800acf4 <tcp_listen_input+0x1e4>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	881b      	ldrh	r3, [r3, #0]
 800abdc:	b29a      	uxth	r2, r3
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	2203      	movs	r2, #3
 800abe6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800abe8:	4b41      	ldr	r3, [pc, #260]	; (800acf0 <tcp_listen_input+0x1e0>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	1c5a      	adds	r2, r3, #1
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800abfa:	6978      	ldr	r0, [r7, #20]
 800abfc:	f7ff fa58 	bl	800a0b0 <tcp_next_iss>
 800ac00:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800ac02:	697b      	ldr	r3, [r7, #20]
 800ac04:	693a      	ldr	r2, [r7, #16]
 800ac06:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	693a      	ldr	r2, [r7, #16]
 800ac0c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	693a      	ldr	r2, [r7, #16]
 800ac12:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	693a      	ldr	r2, [r7, #16]
 800ac18:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ac1a:	4b35      	ldr	r3, [pc, #212]	; (800acf0 <tcp_listen_input+0x1e0>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	1e5a      	subs	r2, r3, #1
 800ac20:	697b      	ldr	r3, [r7, #20]
 800ac22:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	691a      	ldr	r2, [r3, #16]
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	687a      	ldr	r2, [r7, #4]
 800ac30:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	7a5b      	ldrb	r3, [r3, #9]
 800ac36:	f003 030c 	and.w	r3, r3, #12
 800ac3a:	b2da      	uxtb	r2, r3
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	7a1a      	ldrb	r2, [r3, #8]
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800ac48:	4b2e      	ldr	r3, [pc, #184]	; (800ad04 <tcp_listen_input+0x1f4>)
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	60da      	str	r2, [r3, #12]
 800ac50:	4a2c      	ldr	r2, [pc, #176]	; (800ad04 <tcp_listen_input+0x1f4>)
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	6013      	str	r3, [r2, #0]
 800ac56:	f003 f8d1 	bl	800ddfc <tcp_timer_needed>
 800ac5a:	4b2b      	ldr	r3, [pc, #172]	; (800ad08 <tcp_listen_input+0x1f8>)
 800ac5c:	2201      	movs	r2, #1
 800ac5e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ac60:	6978      	ldr	r0, [r7, #20]
 800ac62:	f001 fd8f 	bl	800c784 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ac66:	4b23      	ldr	r3, [pc, #140]	; (800acf4 <tcp_listen_input+0x1e4>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	89db      	ldrh	r3, [r3, #14]
 800ac6c:	b29a      	uxth	r2, r3
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	3304      	adds	r3, #4
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f004 fdfb 	bl	800f884 <ip4_route>
 800ac8e:	4601      	mov	r1, r0
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	3304      	adds	r3, #4
 800ac94:	461a      	mov	r2, r3
 800ac96:	4620      	mov	r0, r4
 800ac98:	f7ff fa30 	bl	800a0fc <tcp_eff_send_mss_netif>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	461a      	mov	r2, r3
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800aca4:	2112      	movs	r1, #18
 800aca6:	6978      	ldr	r0, [r7, #20]
 800aca8:	f002 f844 	bl	800cd34 <tcp_enqueue_flags>
 800acac:	4603      	mov	r3, r0
 800acae:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800acb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d004      	beq.n	800acc2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800acb8:	2100      	movs	r1, #0
 800acba:	6978      	ldr	r0, [r7, #20]
 800acbc:	f7fe f97e 	bl	8008fbc <tcp_abandon>
      return;
 800acc0:	e006      	b.n	800acd0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800acc2:	6978      	ldr	r0, [r7, #20]
 800acc4:	f002 f924 	bl	800cf10 <tcp_output>
  return;
 800acc8:	e001      	b.n	800acce <tcp_listen_input+0x1be>
    return;
 800acca:	bf00      	nop
 800accc:	e000      	b.n	800acd0 <tcp_listen_input+0x1c0>
  return;
 800acce:	bf00      	nop
}
 800acd0:	371c      	adds	r7, #28
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd90      	pop	{r4, r7, pc}
 800acd6:	bf00      	nop
 800acd8:	2000a76c 	.word	0x2000a76c
 800acdc:	08014c38 	.word	0x08014c38
 800ace0:	08014e30 	.word	0x08014e30
 800ace4:	08014c84 	.word	0x08014c84
 800ace8:	2000a764 	.word	0x2000a764
 800acec:	2000a76a 	.word	0x2000a76a
 800acf0:	2000a760 	.word	0x2000a760
 800acf4:	2000a750 	.word	0x2000a750
 800acf8:	20005008 	.word	0x20005008
 800acfc:	2000500c 	.word	0x2000500c
 800ad00:	20004ff8 	.word	0x20004ff8
 800ad04:	2000a734 	.word	0x2000a734
 800ad08:	2000a73c 	.word	0x2000a73c

0800ad0c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b086      	sub	sp, #24
 800ad10:	af04      	add	r7, sp, #16
 800ad12:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800ad14:	4b2f      	ldr	r3, [pc, #188]	; (800add4 <tcp_timewait_input+0xc8>)
 800ad16:	781b      	ldrb	r3, [r3, #0]
 800ad18:	f003 0304 	and.w	r3, r3, #4
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d153      	bne.n	800adc8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d106      	bne.n	800ad34 <tcp_timewait_input+0x28>
 800ad26:	4b2c      	ldr	r3, [pc, #176]	; (800add8 <tcp_timewait_input+0xcc>)
 800ad28:	f240 22ee 	movw	r2, #750	; 0x2ee
 800ad2c:	492b      	ldr	r1, [pc, #172]	; (800addc <tcp_timewait_input+0xd0>)
 800ad2e:	482c      	ldr	r0, [pc, #176]	; (800ade0 <tcp_timewait_input+0xd4>)
 800ad30:	f006 fe72 	bl	8011a18 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800ad34:	4b27      	ldr	r3, [pc, #156]	; (800add4 <tcp_timewait_input+0xc8>)
 800ad36:	781b      	ldrb	r3, [r3, #0]
 800ad38:	f003 0302 	and.w	r3, r3, #2
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d02a      	beq.n	800ad96 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800ad40:	4b28      	ldr	r3, [pc, #160]	; (800ade4 <tcp_timewait_input+0xd8>)
 800ad42:	681a      	ldr	r2, [r3, #0]
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad48:	1ad3      	subs	r3, r2, r3
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	db2d      	blt.n	800adaa <tcp_timewait_input+0x9e>
 800ad4e:	4b25      	ldr	r3, [pc, #148]	; (800ade4 <tcp_timewait_input+0xd8>)
 800ad50:	681a      	ldr	r2, [r3, #0]
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad56:	6879      	ldr	r1, [r7, #4]
 800ad58:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ad5a:	440b      	add	r3, r1
 800ad5c:	1ad3      	subs	r3, r2, r3
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	dc23      	bgt.n	800adaa <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ad62:	4b21      	ldr	r3, [pc, #132]	; (800ade8 <tcp_timewait_input+0xdc>)
 800ad64:	6819      	ldr	r1, [r3, #0]
 800ad66:	4b21      	ldr	r3, [pc, #132]	; (800adec <tcp_timewait_input+0xe0>)
 800ad68:	881b      	ldrh	r3, [r3, #0]
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	4b1d      	ldr	r3, [pc, #116]	; (800ade4 <tcp_timewait_input+0xd8>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ad72:	4b1f      	ldr	r3, [pc, #124]	; (800adf0 <tcp_timewait_input+0xe4>)
 800ad74:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ad76:	885b      	ldrh	r3, [r3, #2]
 800ad78:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ad7a:	4a1d      	ldr	r2, [pc, #116]	; (800adf0 <tcp_timewait_input+0xe4>)
 800ad7c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ad7e:	8812      	ldrh	r2, [r2, #0]
 800ad80:	b292      	uxth	r2, r2
 800ad82:	9202      	str	r2, [sp, #8]
 800ad84:	9301      	str	r3, [sp, #4]
 800ad86:	4b1b      	ldr	r3, [pc, #108]	; (800adf4 <tcp_timewait_input+0xe8>)
 800ad88:	9300      	str	r3, [sp, #0]
 800ad8a:	4b1b      	ldr	r3, [pc, #108]	; (800adf8 <tcp_timewait_input+0xec>)
 800ad8c:	4602      	mov	r2, r0
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f002 fe72 	bl	800da78 <tcp_rst>
      return;
 800ad94:	e01b      	b.n	800adce <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800ad96:	4b0f      	ldr	r3, [pc, #60]	; (800add4 <tcp_timewait_input+0xc8>)
 800ad98:	781b      	ldrb	r3, [r3, #0]
 800ad9a:	f003 0301 	and.w	r3, r3, #1
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d003      	beq.n	800adaa <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800ada2:	4b16      	ldr	r3, [pc, #88]	; (800adfc <tcp_timewait_input+0xf0>)
 800ada4:	681a      	ldr	r2, [r3, #0]
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800adaa:	4b10      	ldr	r3, [pc, #64]	; (800adec <tcp_timewait_input+0xe0>)
 800adac:	881b      	ldrh	r3, [r3, #0]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d00c      	beq.n	800adcc <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	8b5b      	ldrh	r3, [r3, #26]
 800adb6:	f043 0302 	orr.w	r3, r3, #2
 800adba:	b29a      	uxth	r2, r3
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f002 f8a5 	bl	800cf10 <tcp_output>
  }
  return;
 800adc6:	e001      	b.n	800adcc <tcp_timewait_input+0xc0>
    return;
 800adc8:	bf00      	nop
 800adca:	e000      	b.n	800adce <tcp_timewait_input+0xc2>
  return;
 800adcc:	bf00      	nop
}
 800adce:	3708      	adds	r7, #8
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}
 800add4:	2000a76c 	.word	0x2000a76c
 800add8:	08014c38 	.word	0x08014c38
 800addc:	08014e50 	.word	0x08014e50
 800ade0:	08014c84 	.word	0x08014c84
 800ade4:	2000a760 	.word	0x2000a760
 800ade8:	2000a764 	.word	0x2000a764
 800adec:	2000a76a 	.word	0x2000a76a
 800adf0:	2000a750 	.word	0x2000a750
 800adf4:	20005008 	.word	0x20005008
 800adf8:	2000500c 	.word	0x2000500c
 800adfc:	2000a728 	.word	0x2000a728

0800ae00 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800ae00:	b590      	push	{r4, r7, lr}
 800ae02:	b08d      	sub	sp, #52	; 0x34
 800ae04:	af04      	add	r7, sp, #16
 800ae06:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d106      	bne.n	800ae24 <tcp_process+0x24>
 800ae16:	4b9d      	ldr	r3, [pc, #628]	; (800b08c <tcp_process+0x28c>)
 800ae18:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800ae1c:	499c      	ldr	r1, [pc, #624]	; (800b090 <tcp_process+0x290>)
 800ae1e:	489d      	ldr	r0, [pc, #628]	; (800b094 <tcp_process+0x294>)
 800ae20:	f006 fdfa 	bl	8011a18 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800ae24:	4b9c      	ldr	r3, [pc, #624]	; (800b098 <tcp_process+0x298>)
 800ae26:	781b      	ldrb	r3, [r3, #0]
 800ae28:	f003 0304 	and.w	r3, r3, #4
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d04e      	beq.n	800aece <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	7d1b      	ldrb	r3, [r3, #20]
 800ae34:	2b02      	cmp	r3, #2
 800ae36:	d108      	bne.n	800ae4a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ae3c:	4b97      	ldr	r3, [pc, #604]	; (800b09c <tcp_process+0x29c>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	429a      	cmp	r2, r3
 800ae42:	d123      	bne.n	800ae8c <tcp_process+0x8c>
        acceptable = 1;
 800ae44:	2301      	movs	r3, #1
 800ae46:	76fb      	strb	r3, [r7, #27]
 800ae48:	e020      	b.n	800ae8c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae4e:	4b94      	ldr	r3, [pc, #592]	; (800b0a0 <tcp_process+0x2a0>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	429a      	cmp	r2, r3
 800ae54:	d102      	bne.n	800ae5c <tcp_process+0x5c>
        acceptable = 1;
 800ae56:	2301      	movs	r3, #1
 800ae58:	76fb      	strb	r3, [r7, #27]
 800ae5a:	e017      	b.n	800ae8c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ae5c:	4b90      	ldr	r3, [pc, #576]	; (800b0a0 <tcp_process+0x2a0>)
 800ae5e:	681a      	ldr	r2, [r3, #0]
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae64:	1ad3      	subs	r3, r2, r3
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	db10      	blt.n	800ae8c <tcp_process+0x8c>
 800ae6a:	4b8d      	ldr	r3, [pc, #564]	; (800b0a0 <tcp_process+0x2a0>)
 800ae6c:	681a      	ldr	r2, [r3, #0]
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae72:	6879      	ldr	r1, [r7, #4]
 800ae74:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ae76:	440b      	add	r3, r1
 800ae78:	1ad3      	subs	r3, r2, r3
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	dc06      	bgt.n	800ae8c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	8b5b      	ldrh	r3, [r3, #26]
 800ae82:	f043 0302 	orr.w	r3, r3, #2
 800ae86:	b29a      	uxth	r2, r3
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800ae8c:	7efb      	ldrb	r3, [r7, #27]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d01b      	beq.n	800aeca <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	7d1b      	ldrb	r3, [r3, #20]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d106      	bne.n	800aea8 <tcp_process+0xa8>
 800ae9a:	4b7c      	ldr	r3, [pc, #496]	; (800b08c <tcp_process+0x28c>)
 800ae9c:	f44f 724e 	mov.w	r2, #824	; 0x338
 800aea0:	4980      	ldr	r1, [pc, #512]	; (800b0a4 <tcp_process+0x2a4>)
 800aea2:	487c      	ldr	r0, [pc, #496]	; (800b094 <tcp_process+0x294>)
 800aea4:	f006 fdb8 	bl	8011a18 <iprintf>
      recv_flags |= TF_RESET;
 800aea8:	4b7f      	ldr	r3, [pc, #508]	; (800b0a8 <tcp_process+0x2a8>)
 800aeaa:	781b      	ldrb	r3, [r3, #0]
 800aeac:	f043 0308 	orr.w	r3, r3, #8
 800aeb0:	b2da      	uxtb	r2, r3
 800aeb2:	4b7d      	ldr	r3, [pc, #500]	; (800b0a8 <tcp_process+0x2a8>)
 800aeb4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	8b5b      	ldrh	r3, [r3, #26]
 800aeba:	f023 0301 	bic.w	r3, r3, #1
 800aebe:	b29a      	uxth	r2, r3
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800aec4:	f06f 030d 	mvn.w	r3, #13
 800aec8:	e37a      	b.n	800b5c0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800aeca:	2300      	movs	r3, #0
 800aecc:	e378      	b.n	800b5c0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800aece:	4b72      	ldr	r3, [pc, #456]	; (800b098 <tcp_process+0x298>)
 800aed0:	781b      	ldrb	r3, [r3, #0]
 800aed2:	f003 0302 	and.w	r3, r3, #2
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d010      	beq.n	800aefc <tcp_process+0xfc>
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	7d1b      	ldrb	r3, [r3, #20]
 800aede:	2b02      	cmp	r3, #2
 800aee0:	d00c      	beq.n	800aefc <tcp_process+0xfc>
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	7d1b      	ldrb	r3, [r3, #20]
 800aee6:	2b03      	cmp	r3, #3
 800aee8:	d008      	beq.n	800aefc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	8b5b      	ldrh	r3, [r3, #26]
 800aeee:	f043 0302 	orr.w	r3, r3, #2
 800aef2:	b29a      	uxth	r2, r3
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800aef8:	2300      	movs	r3, #0
 800aefa:	e361      	b.n	800b5c0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	8b5b      	ldrh	r3, [r3, #26]
 800af00:	f003 0310 	and.w	r3, r3, #16
 800af04:	2b00      	cmp	r3, #0
 800af06:	d103      	bne.n	800af10 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800af08:	4b68      	ldr	r3, [pc, #416]	; (800b0ac <tcp_process+0x2ac>)
 800af0a:	681a      	ldr	r2, [r3, #0]
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2200      	movs	r2, #0
 800af14:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2200      	movs	r2, #0
 800af1c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f001 fc2f 	bl	800c784 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	7d1b      	ldrb	r3, [r3, #20]
 800af2a:	3b02      	subs	r3, #2
 800af2c:	2b07      	cmp	r3, #7
 800af2e:	f200 8337 	bhi.w	800b5a0 <tcp_process+0x7a0>
 800af32:	a201      	add	r2, pc, #4	; (adr r2, 800af38 <tcp_process+0x138>)
 800af34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af38:	0800af59 	.word	0x0800af59
 800af3c:	0800b189 	.word	0x0800b189
 800af40:	0800b301 	.word	0x0800b301
 800af44:	0800b32b 	.word	0x0800b32b
 800af48:	0800b44f 	.word	0x0800b44f
 800af4c:	0800b301 	.word	0x0800b301
 800af50:	0800b4db 	.word	0x0800b4db
 800af54:	0800b56b 	.word	0x0800b56b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800af58:	4b4f      	ldr	r3, [pc, #316]	; (800b098 <tcp_process+0x298>)
 800af5a:	781b      	ldrb	r3, [r3, #0]
 800af5c:	f003 0310 	and.w	r3, r3, #16
 800af60:	2b00      	cmp	r3, #0
 800af62:	f000 80e4 	beq.w	800b12e <tcp_process+0x32e>
 800af66:	4b4c      	ldr	r3, [pc, #304]	; (800b098 <tcp_process+0x298>)
 800af68:	781b      	ldrb	r3, [r3, #0]
 800af6a:	f003 0302 	and.w	r3, r3, #2
 800af6e:	2b00      	cmp	r3, #0
 800af70:	f000 80dd 	beq.w	800b12e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af78:	1c5a      	adds	r2, r3, #1
 800af7a:	4b48      	ldr	r3, [pc, #288]	; (800b09c <tcp_process+0x29c>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	429a      	cmp	r2, r3
 800af80:	f040 80d5 	bne.w	800b12e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800af84:	4b46      	ldr	r3, [pc, #280]	; (800b0a0 <tcp_process+0x2a0>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	1c5a      	adds	r2, r3, #1
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800af96:	4b41      	ldr	r3, [pc, #260]	; (800b09c <tcp_process+0x29c>)
 800af98:	681a      	ldr	r2, [r3, #0]
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800af9e:	4b44      	ldr	r3, [pc, #272]	; (800b0b0 <tcp_process+0x2b0>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	89db      	ldrh	r3, [r3, #14]
 800afa4:	b29a      	uxth	r2, r3
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800afb8:	4b39      	ldr	r3, [pc, #228]	; (800b0a0 <tcp_process+0x2a0>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	1e5a      	subs	r2, r3, #1
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2204      	movs	r2, #4
 800afc6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	3304      	adds	r3, #4
 800afd0:	4618      	mov	r0, r3
 800afd2:	f004 fc57 	bl	800f884 <ip4_route>
 800afd6:	4601      	mov	r1, r0
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	3304      	adds	r3, #4
 800afdc:	461a      	mov	r2, r3
 800afde:	4620      	mov	r0, r4
 800afe0:	f7ff f88c 	bl	800a0fc <tcp_eff_send_mss_netif>
 800afe4:	4603      	mov	r3, r0
 800afe6:	461a      	mov	r2, r3
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aff0:	009a      	lsls	r2, r3, #2
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aff6:	005b      	lsls	r3, r3, #1
 800aff8:	f241 111c 	movw	r1, #4380	; 0x111c
 800affc:	428b      	cmp	r3, r1
 800affe:	bf38      	it	cc
 800b000:	460b      	movcc	r3, r1
 800b002:	429a      	cmp	r2, r3
 800b004:	d204      	bcs.n	800b010 <tcp_process+0x210>
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b00a:	009b      	lsls	r3, r3, #2
 800b00c:	b29b      	uxth	r3, r3
 800b00e:	e00d      	b.n	800b02c <tcp_process+0x22c>
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b014:	005b      	lsls	r3, r3, #1
 800b016:	f241 121c 	movw	r2, #4380	; 0x111c
 800b01a:	4293      	cmp	r3, r2
 800b01c:	d904      	bls.n	800b028 <tcp_process+0x228>
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b022:	005b      	lsls	r3, r3, #1
 800b024:	b29b      	uxth	r3, r3
 800b026:	e001      	b.n	800b02c <tcp_process+0x22c>
 800b028:	f241 131c 	movw	r3, #4380	; 0x111c
 800b02c:	687a      	ldr	r2, [r7, #4]
 800b02e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d106      	bne.n	800b04a <tcp_process+0x24a>
 800b03c:	4b13      	ldr	r3, [pc, #76]	; (800b08c <tcp_process+0x28c>)
 800b03e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800b042:	491c      	ldr	r1, [pc, #112]	; (800b0b4 <tcp_process+0x2b4>)
 800b044:	4813      	ldr	r0, [pc, #76]	; (800b094 <tcp_process+0x294>)
 800b046:	f006 fce7 	bl	8011a18 <iprintf>
        --pcb->snd_queuelen;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b050:	3b01      	subs	r3, #1
 800b052:	b29a      	uxth	r2, r3
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b05e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800b060:	69fb      	ldr	r3, [r7, #28]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d12a      	bne.n	800b0bc <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b06a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800b06c:	69fb      	ldr	r3, [r7, #28]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d106      	bne.n	800b080 <tcp_process+0x280>
 800b072:	4b06      	ldr	r3, [pc, #24]	; (800b08c <tcp_process+0x28c>)
 800b074:	f44f 725d 	mov.w	r2, #884	; 0x374
 800b078:	490f      	ldr	r1, [pc, #60]	; (800b0b8 <tcp_process+0x2b8>)
 800b07a:	4806      	ldr	r0, [pc, #24]	; (800b094 <tcp_process+0x294>)
 800b07c:	f006 fccc 	bl	8011a18 <iprintf>
          pcb->unsent = rseg->next;
 800b080:	69fb      	ldr	r3, [r7, #28]
 800b082:	681a      	ldr	r2, [r3, #0]
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	66da      	str	r2, [r3, #108]	; 0x6c
 800b088:	e01c      	b.n	800b0c4 <tcp_process+0x2c4>
 800b08a:	bf00      	nop
 800b08c:	08014c38 	.word	0x08014c38
 800b090:	08014e70 	.word	0x08014e70
 800b094:	08014c84 	.word	0x08014c84
 800b098:	2000a76c 	.word	0x2000a76c
 800b09c:	2000a764 	.word	0x2000a764
 800b0a0:	2000a760 	.word	0x2000a760
 800b0a4:	08014e8c 	.word	0x08014e8c
 800b0a8:	2000a76d 	.word	0x2000a76d
 800b0ac:	2000a728 	.word	0x2000a728
 800b0b0:	2000a750 	.word	0x2000a750
 800b0b4:	08014eac 	.word	0x08014eac
 800b0b8:	08014ec4 	.word	0x08014ec4
        } else {
          pcb->unacked = rseg->next;
 800b0bc:	69fb      	ldr	r3, [r7, #28]
 800b0be:	681a      	ldr	r2, [r3, #0]
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800b0c4:	69f8      	ldr	r0, [r7, #28]
 800b0c6:	f7fe fd22 	bl	8009b0e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d104      	bne.n	800b0dc <tcp_process+0x2dc>
          pcb->rtime = -1;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b0d8:	861a      	strh	r2, [r3, #48]	; 0x30
 800b0da:	e006      	b.n	800b0ea <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2200      	movs	r2, #0
 800b0e0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d00a      	beq.n	800b10a <tcp_process+0x30a>
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0fa:	687a      	ldr	r2, [r7, #4]
 800b0fc:	6910      	ldr	r0, [r2, #16]
 800b0fe:	2200      	movs	r2, #0
 800b100:	6879      	ldr	r1, [r7, #4]
 800b102:	4798      	blx	r3
 800b104:	4603      	mov	r3, r0
 800b106:	76bb      	strb	r3, [r7, #26]
 800b108:	e001      	b.n	800b10e <tcp_process+0x30e>
 800b10a:	2300      	movs	r3, #0
 800b10c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800b10e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b112:	f113 0f0d 	cmn.w	r3, #13
 800b116:	d102      	bne.n	800b11e <tcp_process+0x31e>
          return ERR_ABRT;
 800b118:	f06f 030c 	mvn.w	r3, #12
 800b11c:	e250      	b.n	800b5c0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	8b5b      	ldrh	r3, [r3, #26]
 800b122:	f043 0302 	orr.w	r3, r3, #2
 800b126:	b29a      	uxth	r2, r3
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800b12c:	e23a      	b.n	800b5a4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800b12e:	4b98      	ldr	r3, [pc, #608]	; (800b390 <tcp_process+0x590>)
 800b130:	781b      	ldrb	r3, [r3, #0]
 800b132:	f003 0310 	and.w	r3, r3, #16
 800b136:	2b00      	cmp	r3, #0
 800b138:	f000 8234 	beq.w	800b5a4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b13c:	4b95      	ldr	r3, [pc, #596]	; (800b394 <tcp_process+0x594>)
 800b13e:	6819      	ldr	r1, [r3, #0]
 800b140:	4b95      	ldr	r3, [pc, #596]	; (800b398 <tcp_process+0x598>)
 800b142:	881b      	ldrh	r3, [r3, #0]
 800b144:	461a      	mov	r2, r3
 800b146:	4b95      	ldr	r3, [pc, #596]	; (800b39c <tcp_process+0x59c>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b14c:	4b94      	ldr	r3, [pc, #592]	; (800b3a0 <tcp_process+0x5a0>)
 800b14e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b150:	885b      	ldrh	r3, [r3, #2]
 800b152:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b154:	4a92      	ldr	r2, [pc, #584]	; (800b3a0 <tcp_process+0x5a0>)
 800b156:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b158:	8812      	ldrh	r2, [r2, #0]
 800b15a:	b292      	uxth	r2, r2
 800b15c:	9202      	str	r2, [sp, #8]
 800b15e:	9301      	str	r3, [sp, #4]
 800b160:	4b90      	ldr	r3, [pc, #576]	; (800b3a4 <tcp_process+0x5a4>)
 800b162:	9300      	str	r3, [sp, #0]
 800b164:	4b90      	ldr	r3, [pc, #576]	; (800b3a8 <tcp_process+0x5a8>)
 800b166:	4602      	mov	r2, r0
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	f002 fc85 	bl	800da78 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b174:	2b05      	cmp	r3, #5
 800b176:	f200 8215 	bhi.w	800b5a4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2200      	movs	r2, #0
 800b17e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f002 fa51 	bl	800d628 <tcp_rexmit_rto>
      break;
 800b186:	e20d      	b.n	800b5a4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800b188:	4b81      	ldr	r3, [pc, #516]	; (800b390 <tcp_process+0x590>)
 800b18a:	781b      	ldrb	r3, [r3, #0]
 800b18c:	f003 0310 	and.w	r3, r3, #16
 800b190:	2b00      	cmp	r3, #0
 800b192:	f000 80a1 	beq.w	800b2d8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b196:	4b7f      	ldr	r3, [pc, #508]	; (800b394 <tcp_process+0x594>)
 800b198:	681a      	ldr	r2, [r3, #0]
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b19e:	1ad3      	subs	r3, r2, r3
 800b1a0:	3b01      	subs	r3, #1
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	db7e      	blt.n	800b2a4 <tcp_process+0x4a4>
 800b1a6:	4b7b      	ldr	r3, [pc, #492]	; (800b394 <tcp_process+0x594>)
 800b1a8:	681a      	ldr	r2, [r3, #0]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1ae:	1ad3      	subs	r3, r2, r3
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	dc77      	bgt.n	800b2a4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2204      	movs	r2, #4
 800b1b8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d102      	bne.n	800b1c8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800b1c2:	23fa      	movs	r3, #250	; 0xfa
 800b1c4:	76bb      	strb	r3, [r7, #26]
 800b1c6:	e01d      	b.n	800b204 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1cc:	699b      	ldr	r3, [r3, #24]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d106      	bne.n	800b1e0 <tcp_process+0x3e0>
 800b1d2:	4b76      	ldr	r3, [pc, #472]	; (800b3ac <tcp_process+0x5ac>)
 800b1d4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800b1d8:	4975      	ldr	r1, [pc, #468]	; (800b3b0 <tcp_process+0x5b0>)
 800b1da:	4876      	ldr	r0, [pc, #472]	; (800b3b4 <tcp_process+0x5b4>)
 800b1dc:	f006 fc1c 	bl	8011a18 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1e4:	699b      	ldr	r3, [r3, #24]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d00a      	beq.n	800b200 <tcp_process+0x400>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1ee:	699b      	ldr	r3, [r3, #24]
 800b1f0:	687a      	ldr	r2, [r7, #4]
 800b1f2:	6910      	ldr	r0, [r2, #16]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	6879      	ldr	r1, [r7, #4]
 800b1f8:	4798      	blx	r3
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	76bb      	strb	r3, [r7, #26]
 800b1fe:	e001      	b.n	800b204 <tcp_process+0x404>
 800b200:	23f0      	movs	r3, #240	; 0xf0
 800b202:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800b204:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d00a      	beq.n	800b222 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800b20c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b210:	f113 0f0d 	cmn.w	r3, #13
 800b214:	d002      	beq.n	800b21c <tcp_process+0x41c>
              tcp_abort(pcb);
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f7fd ff8e 	bl	8009138 <tcp_abort>
            }
            return ERR_ABRT;
 800b21c:	f06f 030c 	mvn.w	r3, #12
 800b220:	e1ce      	b.n	800b5c0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f000 fae0 	bl	800b7e8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800b228:	4b63      	ldr	r3, [pc, #396]	; (800b3b8 <tcp_process+0x5b8>)
 800b22a:	881b      	ldrh	r3, [r3, #0]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d005      	beq.n	800b23c <tcp_process+0x43c>
            recv_acked--;
 800b230:	4b61      	ldr	r3, [pc, #388]	; (800b3b8 <tcp_process+0x5b8>)
 800b232:	881b      	ldrh	r3, [r3, #0]
 800b234:	3b01      	subs	r3, #1
 800b236:	b29a      	uxth	r2, r3
 800b238:	4b5f      	ldr	r3, [pc, #380]	; (800b3b8 <tcp_process+0x5b8>)
 800b23a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b240:	009a      	lsls	r2, r3, #2
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b246:	005b      	lsls	r3, r3, #1
 800b248:	f241 111c 	movw	r1, #4380	; 0x111c
 800b24c:	428b      	cmp	r3, r1
 800b24e:	bf38      	it	cc
 800b250:	460b      	movcc	r3, r1
 800b252:	429a      	cmp	r2, r3
 800b254:	d204      	bcs.n	800b260 <tcp_process+0x460>
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b25a:	009b      	lsls	r3, r3, #2
 800b25c:	b29b      	uxth	r3, r3
 800b25e:	e00d      	b.n	800b27c <tcp_process+0x47c>
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b264:	005b      	lsls	r3, r3, #1
 800b266:	f241 121c 	movw	r2, #4380	; 0x111c
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d904      	bls.n	800b278 <tcp_process+0x478>
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b272:	005b      	lsls	r3, r3, #1
 800b274:	b29b      	uxth	r3, r3
 800b276:	e001      	b.n	800b27c <tcp_process+0x47c>
 800b278:	f241 131c 	movw	r3, #4380	; 0x111c
 800b27c:	687a      	ldr	r2, [r7, #4]
 800b27e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800b282:	4b4e      	ldr	r3, [pc, #312]	; (800b3bc <tcp_process+0x5bc>)
 800b284:	781b      	ldrb	r3, [r3, #0]
 800b286:	f003 0320 	and.w	r3, r3, #32
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d037      	beq.n	800b2fe <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	8b5b      	ldrh	r3, [r3, #26]
 800b292:	f043 0302 	orr.w	r3, r3, #2
 800b296:	b29a      	uxth	r2, r3
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2207      	movs	r2, #7
 800b2a0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800b2a2:	e02c      	b.n	800b2fe <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b2a4:	4b3b      	ldr	r3, [pc, #236]	; (800b394 <tcp_process+0x594>)
 800b2a6:	6819      	ldr	r1, [r3, #0]
 800b2a8:	4b3b      	ldr	r3, [pc, #236]	; (800b398 <tcp_process+0x598>)
 800b2aa:	881b      	ldrh	r3, [r3, #0]
 800b2ac:	461a      	mov	r2, r3
 800b2ae:	4b3b      	ldr	r3, [pc, #236]	; (800b39c <tcp_process+0x59c>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b2b4:	4b3a      	ldr	r3, [pc, #232]	; (800b3a0 <tcp_process+0x5a0>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b2b8:	885b      	ldrh	r3, [r3, #2]
 800b2ba:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b2bc:	4a38      	ldr	r2, [pc, #224]	; (800b3a0 <tcp_process+0x5a0>)
 800b2be:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b2c0:	8812      	ldrh	r2, [r2, #0]
 800b2c2:	b292      	uxth	r2, r2
 800b2c4:	9202      	str	r2, [sp, #8]
 800b2c6:	9301      	str	r3, [sp, #4]
 800b2c8:	4b36      	ldr	r3, [pc, #216]	; (800b3a4 <tcp_process+0x5a4>)
 800b2ca:	9300      	str	r3, [sp, #0]
 800b2cc:	4b36      	ldr	r3, [pc, #216]	; (800b3a8 <tcp_process+0x5a8>)
 800b2ce:	4602      	mov	r2, r0
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f002 fbd1 	bl	800da78 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800b2d6:	e167      	b.n	800b5a8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800b2d8:	4b2d      	ldr	r3, [pc, #180]	; (800b390 <tcp_process+0x590>)
 800b2da:	781b      	ldrb	r3, [r3, #0]
 800b2dc:	f003 0302 	and.w	r3, r3, #2
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	f000 8161 	beq.w	800b5a8 <tcp_process+0x7a8>
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ea:	1e5a      	subs	r2, r3, #1
 800b2ec:	4b2b      	ldr	r3, [pc, #172]	; (800b39c <tcp_process+0x59c>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	f040 8159 	bne.w	800b5a8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f002 f9b8 	bl	800d66c <tcp_rexmit>
      break;
 800b2fc:	e154      	b.n	800b5a8 <tcp_process+0x7a8>
 800b2fe:	e153      	b.n	800b5a8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f000 fa71 	bl	800b7e8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800b306:	4b2d      	ldr	r3, [pc, #180]	; (800b3bc <tcp_process+0x5bc>)
 800b308:	781b      	ldrb	r3, [r3, #0]
 800b30a:	f003 0320 	and.w	r3, r3, #32
 800b30e:	2b00      	cmp	r3, #0
 800b310:	f000 814c 	beq.w	800b5ac <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	8b5b      	ldrh	r3, [r3, #26]
 800b318:	f043 0302 	orr.w	r3, r3, #2
 800b31c:	b29a      	uxth	r2, r3
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2207      	movs	r2, #7
 800b326:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b328:	e140      	b.n	800b5ac <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f000 fa5c 	bl	800b7e8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b330:	4b22      	ldr	r3, [pc, #136]	; (800b3bc <tcp_process+0x5bc>)
 800b332:	781b      	ldrb	r3, [r3, #0]
 800b334:	f003 0320 	and.w	r3, r3, #32
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d071      	beq.n	800b420 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b33c:	4b14      	ldr	r3, [pc, #80]	; (800b390 <tcp_process+0x590>)
 800b33e:	781b      	ldrb	r3, [r3, #0]
 800b340:	f003 0310 	and.w	r3, r3, #16
 800b344:	2b00      	cmp	r3, #0
 800b346:	d060      	beq.n	800b40a <tcp_process+0x60a>
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b34c:	4b11      	ldr	r3, [pc, #68]	; (800b394 <tcp_process+0x594>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	429a      	cmp	r2, r3
 800b352:	d15a      	bne.n	800b40a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d156      	bne.n	800b40a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	8b5b      	ldrh	r3, [r3, #26]
 800b360:	f043 0302 	orr.w	r3, r3, #2
 800b364:	b29a      	uxth	r2, r3
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f7fe fdbc 	bl	8009ee8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800b370:	4b13      	ldr	r3, [pc, #76]	; (800b3c0 <tcp_process+0x5c0>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	687a      	ldr	r2, [r7, #4]
 800b376:	429a      	cmp	r2, r3
 800b378:	d105      	bne.n	800b386 <tcp_process+0x586>
 800b37a:	4b11      	ldr	r3, [pc, #68]	; (800b3c0 <tcp_process+0x5c0>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	68db      	ldr	r3, [r3, #12]
 800b380:	4a0f      	ldr	r2, [pc, #60]	; (800b3c0 <tcp_process+0x5c0>)
 800b382:	6013      	str	r3, [r2, #0]
 800b384:	e02e      	b.n	800b3e4 <tcp_process+0x5e4>
 800b386:	4b0e      	ldr	r3, [pc, #56]	; (800b3c0 <tcp_process+0x5c0>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	617b      	str	r3, [r7, #20]
 800b38c:	e027      	b.n	800b3de <tcp_process+0x5de>
 800b38e:	bf00      	nop
 800b390:	2000a76c 	.word	0x2000a76c
 800b394:	2000a764 	.word	0x2000a764
 800b398:	2000a76a 	.word	0x2000a76a
 800b39c:	2000a760 	.word	0x2000a760
 800b3a0:	2000a750 	.word	0x2000a750
 800b3a4:	20005008 	.word	0x20005008
 800b3a8:	2000500c 	.word	0x2000500c
 800b3ac:	08014c38 	.word	0x08014c38
 800b3b0:	08014ed8 	.word	0x08014ed8
 800b3b4:	08014c84 	.word	0x08014c84
 800b3b8:	2000a768 	.word	0x2000a768
 800b3bc:	2000a76d 	.word	0x2000a76d
 800b3c0:	2000a734 	.word	0x2000a734
 800b3c4:	697b      	ldr	r3, [r7, #20]
 800b3c6:	68db      	ldr	r3, [r3, #12]
 800b3c8:	687a      	ldr	r2, [r7, #4]
 800b3ca:	429a      	cmp	r2, r3
 800b3cc:	d104      	bne.n	800b3d8 <tcp_process+0x5d8>
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	68da      	ldr	r2, [r3, #12]
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	60da      	str	r2, [r3, #12]
 800b3d6:	e005      	b.n	800b3e4 <tcp_process+0x5e4>
 800b3d8:	697b      	ldr	r3, [r7, #20]
 800b3da:	68db      	ldr	r3, [r3, #12]
 800b3dc:	617b      	str	r3, [r7, #20]
 800b3de:	697b      	ldr	r3, [r7, #20]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d1ef      	bne.n	800b3c4 <tcp_process+0x5c4>
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	60da      	str	r2, [r3, #12]
 800b3ea:	4b77      	ldr	r3, [pc, #476]	; (800b5c8 <tcp_process+0x7c8>)
 800b3ec:	2201      	movs	r2, #1
 800b3ee:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	220a      	movs	r2, #10
 800b3f4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800b3f6:	4b75      	ldr	r3, [pc, #468]	; (800b5cc <tcp_process+0x7cc>)
 800b3f8:	681a      	ldr	r2, [r3, #0]
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	60da      	str	r2, [r3, #12]
 800b3fe:	4a73      	ldr	r2, [pc, #460]	; (800b5cc <tcp_process+0x7cc>)
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6013      	str	r3, [r2, #0]
 800b404:	f002 fcfa 	bl	800ddfc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800b408:	e0d2      	b.n	800b5b0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	8b5b      	ldrh	r3, [r3, #26]
 800b40e:	f043 0302 	orr.w	r3, r3, #2
 800b412:	b29a      	uxth	r2, r3
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2208      	movs	r2, #8
 800b41c:	751a      	strb	r2, [r3, #20]
      break;
 800b41e:	e0c7      	b.n	800b5b0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b420:	4b6b      	ldr	r3, [pc, #428]	; (800b5d0 <tcp_process+0x7d0>)
 800b422:	781b      	ldrb	r3, [r3, #0]
 800b424:	f003 0310 	and.w	r3, r3, #16
 800b428:	2b00      	cmp	r3, #0
 800b42a:	f000 80c1 	beq.w	800b5b0 <tcp_process+0x7b0>
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b432:	4b68      	ldr	r3, [pc, #416]	; (800b5d4 <tcp_process+0x7d4>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	429a      	cmp	r2, r3
 800b438:	f040 80ba 	bne.w	800b5b0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b440:	2b00      	cmp	r3, #0
 800b442:	f040 80b5 	bne.w	800b5b0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2206      	movs	r2, #6
 800b44a:	751a      	strb	r2, [r3, #20]
      break;
 800b44c:	e0b0      	b.n	800b5b0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f000 f9ca 	bl	800b7e8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b454:	4b60      	ldr	r3, [pc, #384]	; (800b5d8 <tcp_process+0x7d8>)
 800b456:	781b      	ldrb	r3, [r3, #0]
 800b458:	f003 0320 	and.w	r3, r3, #32
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	f000 80a9 	beq.w	800b5b4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	8b5b      	ldrh	r3, [r3, #26]
 800b466:	f043 0302 	orr.w	r3, r3, #2
 800b46a:	b29a      	uxth	r2, r3
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f7fe fd39 	bl	8009ee8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b476:	4b59      	ldr	r3, [pc, #356]	; (800b5dc <tcp_process+0x7dc>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	687a      	ldr	r2, [r7, #4]
 800b47c:	429a      	cmp	r2, r3
 800b47e:	d105      	bne.n	800b48c <tcp_process+0x68c>
 800b480:	4b56      	ldr	r3, [pc, #344]	; (800b5dc <tcp_process+0x7dc>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	68db      	ldr	r3, [r3, #12]
 800b486:	4a55      	ldr	r2, [pc, #340]	; (800b5dc <tcp_process+0x7dc>)
 800b488:	6013      	str	r3, [r2, #0]
 800b48a:	e013      	b.n	800b4b4 <tcp_process+0x6b4>
 800b48c:	4b53      	ldr	r3, [pc, #332]	; (800b5dc <tcp_process+0x7dc>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	613b      	str	r3, [r7, #16]
 800b492:	e00c      	b.n	800b4ae <tcp_process+0x6ae>
 800b494:	693b      	ldr	r3, [r7, #16]
 800b496:	68db      	ldr	r3, [r3, #12]
 800b498:	687a      	ldr	r2, [r7, #4]
 800b49a:	429a      	cmp	r2, r3
 800b49c:	d104      	bne.n	800b4a8 <tcp_process+0x6a8>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	68da      	ldr	r2, [r3, #12]
 800b4a2:	693b      	ldr	r3, [r7, #16]
 800b4a4:	60da      	str	r2, [r3, #12]
 800b4a6:	e005      	b.n	800b4b4 <tcp_process+0x6b4>
 800b4a8:	693b      	ldr	r3, [r7, #16]
 800b4aa:	68db      	ldr	r3, [r3, #12]
 800b4ac:	613b      	str	r3, [r7, #16]
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d1ef      	bne.n	800b494 <tcp_process+0x694>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	60da      	str	r2, [r3, #12]
 800b4ba:	4b43      	ldr	r3, [pc, #268]	; (800b5c8 <tcp_process+0x7c8>)
 800b4bc:	2201      	movs	r2, #1
 800b4be:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	220a      	movs	r2, #10
 800b4c4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b4c6:	4b41      	ldr	r3, [pc, #260]	; (800b5cc <tcp_process+0x7cc>)
 800b4c8:	681a      	ldr	r2, [r3, #0]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	60da      	str	r2, [r3, #12]
 800b4ce:	4a3f      	ldr	r2, [pc, #252]	; (800b5cc <tcp_process+0x7cc>)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	6013      	str	r3, [r2, #0]
 800b4d4:	f002 fc92 	bl	800ddfc <tcp_timer_needed>
      }
      break;
 800b4d8:	e06c      	b.n	800b5b4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f000 f984 	bl	800b7e8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b4e0:	4b3b      	ldr	r3, [pc, #236]	; (800b5d0 <tcp_process+0x7d0>)
 800b4e2:	781b      	ldrb	r3, [r3, #0]
 800b4e4:	f003 0310 	and.w	r3, r3, #16
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d065      	beq.n	800b5b8 <tcp_process+0x7b8>
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b4f0:	4b38      	ldr	r3, [pc, #224]	; (800b5d4 <tcp_process+0x7d4>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	429a      	cmp	r2, r3
 800b4f6:	d15f      	bne.n	800b5b8 <tcp_process+0x7b8>
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d15b      	bne.n	800b5b8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f7fe fcf1 	bl	8009ee8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b506:	4b35      	ldr	r3, [pc, #212]	; (800b5dc <tcp_process+0x7dc>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	687a      	ldr	r2, [r7, #4]
 800b50c:	429a      	cmp	r2, r3
 800b50e:	d105      	bne.n	800b51c <tcp_process+0x71c>
 800b510:	4b32      	ldr	r3, [pc, #200]	; (800b5dc <tcp_process+0x7dc>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	68db      	ldr	r3, [r3, #12]
 800b516:	4a31      	ldr	r2, [pc, #196]	; (800b5dc <tcp_process+0x7dc>)
 800b518:	6013      	str	r3, [r2, #0]
 800b51a:	e013      	b.n	800b544 <tcp_process+0x744>
 800b51c:	4b2f      	ldr	r3, [pc, #188]	; (800b5dc <tcp_process+0x7dc>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	60fb      	str	r3, [r7, #12]
 800b522:	e00c      	b.n	800b53e <tcp_process+0x73e>
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	68db      	ldr	r3, [r3, #12]
 800b528:	687a      	ldr	r2, [r7, #4]
 800b52a:	429a      	cmp	r2, r3
 800b52c:	d104      	bne.n	800b538 <tcp_process+0x738>
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	68da      	ldr	r2, [r3, #12]
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	60da      	str	r2, [r3, #12]
 800b536:	e005      	b.n	800b544 <tcp_process+0x744>
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	68db      	ldr	r3, [r3, #12]
 800b53c:	60fb      	str	r3, [r7, #12]
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d1ef      	bne.n	800b524 <tcp_process+0x724>
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2200      	movs	r2, #0
 800b548:	60da      	str	r2, [r3, #12]
 800b54a:	4b1f      	ldr	r3, [pc, #124]	; (800b5c8 <tcp_process+0x7c8>)
 800b54c:	2201      	movs	r2, #1
 800b54e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	220a      	movs	r2, #10
 800b554:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b556:	4b1d      	ldr	r3, [pc, #116]	; (800b5cc <tcp_process+0x7cc>)
 800b558:	681a      	ldr	r2, [r3, #0]
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	60da      	str	r2, [r3, #12]
 800b55e:	4a1b      	ldr	r2, [pc, #108]	; (800b5cc <tcp_process+0x7cc>)
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6013      	str	r3, [r2, #0]
 800b564:	f002 fc4a 	bl	800ddfc <tcp_timer_needed>
      }
      break;
 800b568:	e026      	b.n	800b5b8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f000 f93c 	bl	800b7e8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b570:	4b17      	ldr	r3, [pc, #92]	; (800b5d0 <tcp_process+0x7d0>)
 800b572:	781b      	ldrb	r3, [r3, #0]
 800b574:	f003 0310 	and.w	r3, r3, #16
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d01f      	beq.n	800b5bc <tcp_process+0x7bc>
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b580:	4b14      	ldr	r3, [pc, #80]	; (800b5d4 <tcp_process+0x7d4>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	429a      	cmp	r2, r3
 800b586:	d119      	bne.n	800b5bc <tcp_process+0x7bc>
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d115      	bne.n	800b5bc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800b590:	4b11      	ldr	r3, [pc, #68]	; (800b5d8 <tcp_process+0x7d8>)
 800b592:	781b      	ldrb	r3, [r3, #0]
 800b594:	f043 0310 	orr.w	r3, r3, #16
 800b598:	b2da      	uxtb	r2, r3
 800b59a:	4b0f      	ldr	r3, [pc, #60]	; (800b5d8 <tcp_process+0x7d8>)
 800b59c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800b59e:	e00d      	b.n	800b5bc <tcp_process+0x7bc>
    default:
      break;
 800b5a0:	bf00      	nop
 800b5a2:	e00c      	b.n	800b5be <tcp_process+0x7be>
      break;
 800b5a4:	bf00      	nop
 800b5a6:	e00a      	b.n	800b5be <tcp_process+0x7be>
      break;
 800b5a8:	bf00      	nop
 800b5aa:	e008      	b.n	800b5be <tcp_process+0x7be>
      break;
 800b5ac:	bf00      	nop
 800b5ae:	e006      	b.n	800b5be <tcp_process+0x7be>
      break;
 800b5b0:	bf00      	nop
 800b5b2:	e004      	b.n	800b5be <tcp_process+0x7be>
      break;
 800b5b4:	bf00      	nop
 800b5b6:	e002      	b.n	800b5be <tcp_process+0x7be>
      break;
 800b5b8:	bf00      	nop
 800b5ba:	e000      	b.n	800b5be <tcp_process+0x7be>
      break;
 800b5bc:	bf00      	nop
  }
  return ERR_OK;
 800b5be:	2300      	movs	r3, #0
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3724      	adds	r7, #36	; 0x24
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd90      	pop	{r4, r7, pc}
 800b5c8:	2000a73c 	.word	0x2000a73c
 800b5cc:	2000a738 	.word	0x2000a738
 800b5d0:	2000a76c 	.word	0x2000a76c
 800b5d4:	2000a764 	.word	0x2000a764
 800b5d8:	2000a76d 	.word	0x2000a76d
 800b5dc:	2000a734 	.word	0x2000a734

0800b5e0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800b5e0:	b590      	push	{r4, r7, lr}
 800b5e2:	b085      	sub	sp, #20
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
 800b5e8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d106      	bne.n	800b5fe <tcp_oos_insert_segment+0x1e>
 800b5f0:	4b3b      	ldr	r3, [pc, #236]	; (800b6e0 <tcp_oos_insert_segment+0x100>)
 800b5f2:	f240 421f 	movw	r2, #1055	; 0x41f
 800b5f6:	493b      	ldr	r1, [pc, #236]	; (800b6e4 <tcp_oos_insert_segment+0x104>)
 800b5f8:	483b      	ldr	r0, [pc, #236]	; (800b6e8 <tcp_oos_insert_segment+0x108>)
 800b5fa:	f006 fa0d 	bl	8011a18 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	68db      	ldr	r3, [r3, #12]
 800b602:	899b      	ldrh	r3, [r3, #12]
 800b604:	b29b      	uxth	r3, r3
 800b606:	4618      	mov	r0, r3
 800b608:	f7fb fcb0 	bl	8006f6c <lwip_htons>
 800b60c:	4603      	mov	r3, r0
 800b60e:	b2db      	uxtb	r3, r3
 800b610:	f003 0301 	and.w	r3, r3, #1
 800b614:	2b00      	cmp	r3, #0
 800b616:	d028      	beq.n	800b66a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800b618:	6838      	ldr	r0, [r7, #0]
 800b61a:	f7fe fa63 	bl	8009ae4 <tcp_segs_free>
    next = NULL;
 800b61e:	2300      	movs	r3, #0
 800b620:	603b      	str	r3, [r7, #0]
 800b622:	e056      	b.n	800b6d2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	68db      	ldr	r3, [r3, #12]
 800b628:	899b      	ldrh	r3, [r3, #12]
 800b62a:	b29b      	uxth	r3, r3
 800b62c:	4618      	mov	r0, r3
 800b62e:	f7fb fc9d 	bl	8006f6c <lwip_htons>
 800b632:	4603      	mov	r3, r0
 800b634:	b2db      	uxtb	r3, r3
 800b636:	f003 0301 	and.w	r3, r3, #1
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d00d      	beq.n	800b65a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	68db      	ldr	r3, [r3, #12]
 800b642:	899b      	ldrh	r3, [r3, #12]
 800b644:	b29c      	uxth	r4, r3
 800b646:	2001      	movs	r0, #1
 800b648:	f7fb fc90 	bl	8006f6c <lwip_htons>
 800b64c:	4603      	mov	r3, r0
 800b64e:	461a      	mov	r2, r3
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	68db      	ldr	r3, [r3, #12]
 800b654:	4322      	orrs	r2, r4
 800b656:	b292      	uxth	r2, r2
 800b658:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800b664:	68f8      	ldr	r0, [r7, #12]
 800b666:	f7fe fa52 	bl	8009b0e <tcp_seg_free>
    while (next &&
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d00e      	beq.n	800b68e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	891b      	ldrh	r3, [r3, #8]
 800b674:	461a      	mov	r2, r3
 800b676:	4b1d      	ldr	r3, [pc, #116]	; (800b6ec <tcp_oos_insert_segment+0x10c>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	441a      	add	r2, r3
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	68db      	ldr	r3, [r3, #12]
 800b680:	685b      	ldr	r3, [r3, #4]
 800b682:	6839      	ldr	r1, [r7, #0]
 800b684:	8909      	ldrh	r1, [r1, #8]
 800b686:	440b      	add	r3, r1
 800b688:	1ad3      	subs	r3, r2, r3
    while (next &&
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	daca      	bge.n	800b624 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d01e      	beq.n	800b6d2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	891b      	ldrh	r3, [r3, #8]
 800b698:	461a      	mov	r2, r3
 800b69a:	4b14      	ldr	r3, [pc, #80]	; (800b6ec <tcp_oos_insert_segment+0x10c>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	441a      	add	r2, r3
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	68db      	ldr	r3, [r3, #12]
 800b6a4:	685b      	ldr	r3, [r3, #4]
 800b6a6:	1ad3      	subs	r3, r2, r3
    if (next &&
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	dd12      	ble.n	800b6d2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	68db      	ldr	r3, [r3, #12]
 800b6b0:	685b      	ldr	r3, [r3, #4]
 800b6b2:	b29a      	uxth	r2, r3
 800b6b4:	4b0d      	ldr	r3, [pc, #52]	; (800b6ec <tcp_oos_insert_segment+0x10c>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	b29b      	uxth	r3, r3
 800b6ba:	1ad3      	subs	r3, r2, r3
 800b6bc:	b29a      	uxth	r2, r3
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	685a      	ldr	r2, [r3, #4]
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	891b      	ldrh	r3, [r3, #8]
 800b6ca:	4619      	mov	r1, r3
 800b6cc:	4610      	mov	r0, r2
 800b6ce:	f7fc fe25 	bl	800831c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	683a      	ldr	r2, [r7, #0]
 800b6d6:	601a      	str	r2, [r3, #0]
}
 800b6d8:	bf00      	nop
 800b6da:	3714      	adds	r7, #20
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd90      	pop	{r4, r7, pc}
 800b6e0:	08014c38 	.word	0x08014c38
 800b6e4:	08014ef8 	.word	0x08014ef8
 800b6e8:	08014c84 	.word	0x08014c84
 800b6ec:	2000a760 	.word	0x2000a760

0800b6f0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800b6f0:	b5b0      	push	{r4, r5, r7, lr}
 800b6f2:	b086      	sub	sp, #24
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	60f8      	str	r0, [r7, #12]
 800b6f8:	60b9      	str	r1, [r7, #8]
 800b6fa:	607a      	str	r2, [r7, #4]
 800b6fc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800b6fe:	e03e      	b.n	800b77e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	685b      	ldr	r3, [r3, #4]
 800b70e:	4618      	mov	r0, r3
 800b710:	f7fd f812 	bl	8008738 <pbuf_clen>
 800b714:	4603      	mov	r3, r0
 800b716:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b71e:	8a7a      	ldrh	r2, [r7, #18]
 800b720:	429a      	cmp	r2, r3
 800b722:	d906      	bls.n	800b732 <tcp_free_acked_segments+0x42>
 800b724:	4b2a      	ldr	r3, [pc, #168]	; (800b7d0 <tcp_free_acked_segments+0xe0>)
 800b726:	f240 4257 	movw	r2, #1111	; 0x457
 800b72a:	492a      	ldr	r1, [pc, #168]	; (800b7d4 <tcp_free_acked_segments+0xe4>)
 800b72c:	482a      	ldr	r0, [pc, #168]	; (800b7d8 <tcp_free_acked_segments+0xe8>)
 800b72e:	f006 f973 	bl	8011a18 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800b738:	8a7b      	ldrh	r3, [r7, #18]
 800b73a:	1ad3      	subs	r3, r2, r3
 800b73c:	b29a      	uxth	r2, r3
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	891a      	ldrh	r2, [r3, #8]
 800b748:	4b24      	ldr	r3, [pc, #144]	; (800b7dc <tcp_free_acked_segments+0xec>)
 800b74a:	881b      	ldrh	r3, [r3, #0]
 800b74c:	4413      	add	r3, r2
 800b74e:	b29a      	uxth	r2, r3
 800b750:	4b22      	ldr	r3, [pc, #136]	; (800b7dc <tcp_free_acked_segments+0xec>)
 800b752:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800b754:	6978      	ldr	r0, [r7, #20]
 800b756:	f7fe f9da 	bl	8009b0e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b760:	2b00      	cmp	r3, #0
 800b762:	d00c      	beq.n	800b77e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d109      	bne.n	800b77e <tcp_free_acked_segments+0x8e>
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d106      	bne.n	800b77e <tcp_free_acked_segments+0x8e>
 800b770:	4b17      	ldr	r3, [pc, #92]	; (800b7d0 <tcp_free_acked_segments+0xe0>)
 800b772:	f240 4261 	movw	r2, #1121	; 0x461
 800b776:	491a      	ldr	r1, [pc, #104]	; (800b7e0 <tcp_free_acked_segments+0xf0>)
 800b778:	4817      	ldr	r0, [pc, #92]	; (800b7d8 <tcp_free_acked_segments+0xe8>)
 800b77a:	f006 f94d 	bl	8011a18 <iprintf>
  while (seg_list != NULL &&
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d020      	beq.n	800b7c6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	68db      	ldr	r3, [r3, #12]
 800b788:	685b      	ldr	r3, [r3, #4]
 800b78a:	4618      	mov	r0, r3
 800b78c:	f7fb fc03 	bl	8006f96 <lwip_htonl>
 800b790:	4604      	mov	r4, r0
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	891b      	ldrh	r3, [r3, #8]
 800b796:	461d      	mov	r5, r3
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	68db      	ldr	r3, [r3, #12]
 800b79c:	899b      	ldrh	r3, [r3, #12]
 800b79e:	b29b      	uxth	r3, r3
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f7fb fbe3 	bl	8006f6c <lwip_htons>
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	b2db      	uxtb	r3, r3
 800b7aa:	f003 0303 	and.w	r3, r3, #3
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d001      	beq.n	800b7b6 <tcp_free_acked_segments+0xc6>
 800b7b2:	2301      	movs	r3, #1
 800b7b4:	e000      	b.n	800b7b8 <tcp_free_acked_segments+0xc8>
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	442b      	add	r3, r5
 800b7ba:	18e2      	adds	r2, r4, r3
 800b7bc:	4b09      	ldr	r3, [pc, #36]	; (800b7e4 <tcp_free_acked_segments+0xf4>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	dd9c      	ble.n	800b700 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800b7c6:	68bb      	ldr	r3, [r7, #8]
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3718      	adds	r7, #24
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bdb0      	pop	{r4, r5, r7, pc}
 800b7d0:	08014c38 	.word	0x08014c38
 800b7d4:	08014f20 	.word	0x08014f20
 800b7d8:	08014c84 	.word	0x08014c84
 800b7dc:	2000a768 	.word	0x2000a768
 800b7e0:	08014f48 	.word	0x08014f48
 800b7e4:	2000a764 	.word	0x2000a764

0800b7e8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800b7e8:	b5b0      	push	{r4, r5, r7, lr}
 800b7ea:	b094      	sub	sp, #80	; 0x50
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d106      	bne.n	800b808 <tcp_receive+0x20>
 800b7fa:	4b91      	ldr	r3, [pc, #580]	; (800ba40 <tcp_receive+0x258>)
 800b7fc:	f240 427b 	movw	r2, #1147	; 0x47b
 800b800:	4990      	ldr	r1, [pc, #576]	; (800ba44 <tcp_receive+0x25c>)
 800b802:	4891      	ldr	r0, [pc, #580]	; (800ba48 <tcp_receive+0x260>)
 800b804:	f006 f908 	bl	8011a18 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	7d1b      	ldrb	r3, [r3, #20]
 800b80c:	2b03      	cmp	r3, #3
 800b80e:	d806      	bhi.n	800b81e <tcp_receive+0x36>
 800b810:	4b8b      	ldr	r3, [pc, #556]	; (800ba40 <tcp_receive+0x258>)
 800b812:	f240 427c 	movw	r2, #1148	; 0x47c
 800b816:	498d      	ldr	r1, [pc, #564]	; (800ba4c <tcp_receive+0x264>)
 800b818:	488b      	ldr	r0, [pc, #556]	; (800ba48 <tcp_receive+0x260>)
 800b81a:	f006 f8fd 	bl	8011a18 <iprintf>

  if (flags & TCP_ACK) {
 800b81e:	4b8c      	ldr	r3, [pc, #560]	; (800ba50 <tcp_receive+0x268>)
 800b820:	781b      	ldrb	r3, [r3, #0]
 800b822:	f003 0310 	and.w	r3, r3, #16
 800b826:	2b00      	cmp	r3, #0
 800b828:	f000 8264 	beq.w	800bcf4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b832:	461a      	mov	r2, r3
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b838:	4413      	add	r3, r2
 800b83a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b840:	4b84      	ldr	r3, [pc, #528]	; (800ba54 <tcp_receive+0x26c>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	1ad3      	subs	r3, r2, r3
 800b846:	2b00      	cmp	r3, #0
 800b848:	db1b      	blt.n	800b882 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b84e:	4b81      	ldr	r3, [pc, #516]	; (800ba54 <tcp_receive+0x26c>)
 800b850:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b852:	429a      	cmp	r2, r3
 800b854:	d106      	bne.n	800b864 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b85a:	4b7f      	ldr	r3, [pc, #508]	; (800ba58 <tcp_receive+0x270>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	1ad3      	subs	r3, r2, r3
 800b860:	2b00      	cmp	r3, #0
 800b862:	db0e      	blt.n	800b882 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b868:	4b7b      	ldr	r3, [pc, #492]	; (800ba58 <tcp_receive+0x270>)
 800b86a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b86c:	429a      	cmp	r2, r3
 800b86e:	d125      	bne.n	800b8bc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b870:	4b7a      	ldr	r3, [pc, #488]	; (800ba5c <tcp_receive+0x274>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	89db      	ldrh	r3, [r3, #14]
 800b876:	b29a      	uxth	r2, r3
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b87e:	429a      	cmp	r2, r3
 800b880:	d91c      	bls.n	800b8bc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800b882:	4b76      	ldr	r3, [pc, #472]	; (800ba5c <tcp_receive+0x274>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	89db      	ldrh	r3, [r3, #14]
 800b888:	b29a      	uxth	r2, r3
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b89c:	429a      	cmp	r2, r3
 800b89e:	d205      	bcs.n	800b8ac <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800b8ac:	4b69      	ldr	r3, [pc, #420]	; (800ba54 <tcp_receive+0x26c>)
 800b8ae:	681a      	ldr	r2, [r3, #0]
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800b8b4:	4b68      	ldr	r3, [pc, #416]	; (800ba58 <tcp_receive+0x270>)
 800b8b6:	681a      	ldr	r2, [r3, #0]
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800b8bc:	4b66      	ldr	r3, [pc, #408]	; (800ba58 <tcp_receive+0x270>)
 800b8be:	681a      	ldr	r2, [r3, #0]
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8c4:	1ad3      	subs	r3, r2, r3
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	dc58      	bgt.n	800b97c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800b8ca:	4b65      	ldr	r3, [pc, #404]	; (800ba60 <tcp_receive+0x278>)
 800b8cc:	881b      	ldrh	r3, [r3, #0]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d14b      	bne.n	800b96a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8d6:	687a      	ldr	r2, [r7, #4]
 800b8d8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800b8dc:	4413      	add	r3, r2
 800b8de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8e0:	429a      	cmp	r2, r3
 800b8e2:	d142      	bne.n	800b96a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	db3d      	blt.n	800b96a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b8f2:	4b59      	ldr	r3, [pc, #356]	; (800ba58 <tcp_receive+0x270>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	429a      	cmp	r2, r3
 800b8f8:	d137      	bne.n	800b96a <tcp_receive+0x182>
              found_dupack = 1;
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b904:	2bff      	cmp	r3, #255	; 0xff
 800b906:	d007      	beq.n	800b918 <tcp_receive+0x130>
                ++pcb->dupacks;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b90e:	3301      	adds	r3, #1
 800b910:	b2da      	uxtb	r2, r3
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b91e:	2b03      	cmp	r3, #3
 800b920:	d91b      	bls.n	800b95a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b92c:	4413      	add	r3, r2
 800b92e:	b29a      	uxth	r2, r3
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b936:	429a      	cmp	r2, r3
 800b938:	d30a      	bcc.n	800b950 <tcp_receive+0x168>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b944:	4413      	add	r3, r2
 800b946:	b29a      	uxth	r2, r3
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b94e:	e004      	b.n	800b95a <tcp_receive+0x172>
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b956:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b960:	2b02      	cmp	r3, #2
 800b962:	d902      	bls.n	800b96a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800b964:	6878      	ldr	r0, [r7, #4]
 800b966:	f001 feed 	bl	800d744 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800b96a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	f040 8161 	bne.w	800bc34 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	2200      	movs	r2, #0
 800b976:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b97a:	e15b      	b.n	800bc34 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b97c:	4b36      	ldr	r3, [pc, #216]	; (800ba58 <tcp_receive+0x270>)
 800b97e:	681a      	ldr	r2, [r3, #0]
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b984:	1ad3      	subs	r3, r2, r3
 800b986:	3b01      	subs	r3, #1
 800b988:	2b00      	cmp	r3, #0
 800b98a:	f2c0 814e 	blt.w	800bc2a <tcp_receive+0x442>
 800b98e:	4b32      	ldr	r3, [pc, #200]	; (800ba58 <tcp_receive+0x270>)
 800b990:	681a      	ldr	r2, [r3, #0]
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b996:	1ad3      	subs	r3, r2, r3
 800b998:	2b00      	cmp	r3, #0
 800b99a:	f300 8146 	bgt.w	800bc2a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	8b5b      	ldrh	r3, [r3, #26]
 800b9a2:	f003 0304 	and.w	r3, r3, #4
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d010      	beq.n	800b9cc <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	8b5b      	ldrh	r3, [r3, #26]
 800b9ae:	f023 0304 	bic.w	r3, r3, #4
 800b9b2:	b29a      	uxth	r2, r3
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b9da:	10db      	asrs	r3, r3, #3
 800b9dc:	b21b      	sxth	r3, r3
 800b9de:	b29a      	uxth	r2, r3
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b9e6:	b29b      	uxth	r3, r3
 800b9e8:	4413      	add	r3, r2
 800b9ea:	b29b      	uxth	r3, r3
 800b9ec:	b21a      	sxth	r2, r3
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800b9f4:	4b18      	ldr	r3, [pc, #96]	; (800ba58 <tcp_receive+0x270>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	b29a      	uxth	r2, r3
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9fe:	b29b      	uxth	r3, r3
 800ba00:	1ad3      	subs	r3, r2, r3
 800ba02:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2200      	movs	r2, #0
 800ba08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800ba0c:	4b12      	ldr	r3, [pc, #72]	; (800ba58 <tcp_receive+0x270>)
 800ba0e:	681a      	ldr	r2, [r3, #0]
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	7d1b      	ldrb	r3, [r3, #20]
 800ba18:	2b03      	cmp	r3, #3
 800ba1a:	f240 8097 	bls.w	800bb4c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	d245      	bcs.n	800baba <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	8b5b      	ldrh	r3, [r3, #26]
 800ba32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d014      	beq.n	800ba64 <tcp_receive+0x27c>
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	e013      	b.n	800ba66 <tcp_receive+0x27e>
 800ba3e:	bf00      	nop
 800ba40:	08014c38 	.word	0x08014c38
 800ba44:	08014f68 	.word	0x08014f68
 800ba48:	08014c84 	.word	0x08014c84
 800ba4c:	08014f84 	.word	0x08014f84
 800ba50:	2000a76c 	.word	0x2000a76c
 800ba54:	2000a760 	.word	0x2000a760
 800ba58:	2000a764 	.word	0x2000a764
 800ba5c:	2000a750 	.word	0x2000a750
 800ba60:	2000a76a 	.word	0x2000a76a
 800ba64:	2302      	movs	r3, #2
 800ba66:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800ba6a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ba6e:	b29a      	uxth	r2, r3
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ba74:	fb12 f303 	smulbb	r3, r2, r3
 800ba78:	b29b      	uxth	r3, r3
 800ba7a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	bf28      	it	cs
 800ba80:	4613      	movcs	r3, r2
 800ba82:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ba8a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ba8c:	4413      	add	r3, r2
 800ba8e:	b29a      	uxth	r2, r3
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ba96:	429a      	cmp	r2, r3
 800ba98:	d309      	bcc.n	800baae <tcp_receive+0x2c6>
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800baa0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800baa2:	4413      	add	r3, r2
 800baa4:	b29a      	uxth	r2, r3
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800baac:	e04e      	b.n	800bb4c <tcp_receive+0x364>
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bab4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800bab8:	e048      	b.n	800bb4c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800bac0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bac2:	4413      	add	r3, r2
 800bac4:	b29a      	uxth	r2, r3
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bacc:	429a      	cmp	r2, r3
 800bace:	d309      	bcc.n	800bae4 <tcp_receive+0x2fc>
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800bad6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bad8:	4413      	add	r3, r2
 800bada:	b29a      	uxth	r2, r3
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bae2:	e004      	b.n	800baee <tcp_receive+0x306>
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800baea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bafa:	429a      	cmp	r2, r3
 800bafc:	d326      	bcc.n	800bb4c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bb0a:	1ad3      	subs	r3, r2, r3
 800bb0c:	b29a      	uxth	r2, r3
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bb1e:	4413      	add	r3, r2
 800bb20:	b29a      	uxth	r2, r3
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	d30a      	bcc.n	800bb42 <tcp_receive+0x35a>
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bb36:	4413      	add	r3, r2
 800bb38:	b29a      	uxth	r2, r3
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800bb40:	e004      	b.n	800bb4c <tcp_receive+0x364>
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bb48:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb54:	4a98      	ldr	r2, [pc, #608]	; (800bdb8 <tcp_receive+0x5d0>)
 800bb56:	6878      	ldr	r0, [r7, #4]
 800bb58:	f7ff fdca 	bl	800b6f0 <tcp_free_acked_segments>
 800bb5c:	4602      	mov	r2, r0
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb6a:	4a94      	ldr	r2, [pc, #592]	; (800bdbc <tcp_receive+0x5d4>)
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f7ff fdbf 	bl	800b6f0 <tcp_free_acked_segments>
 800bb72:	4602      	mov	r2, r0
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d104      	bne.n	800bb8a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bb86:	861a      	strh	r2, [r3, #48]	; 0x30
 800bb88:	e002      	b.n	800bb90 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2200      	movs	r2, #0
 800bb94:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d103      	bne.n	800bba6 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2200      	movs	r2, #0
 800bba2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800bbac:	4b84      	ldr	r3, [pc, #528]	; (800bdc0 <tcp_receive+0x5d8>)
 800bbae:	881b      	ldrh	r3, [r3, #0]
 800bbb0:	4413      	add	r3, r2
 800bbb2:	b29a      	uxth	r2, r3
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	8b5b      	ldrh	r3, [r3, #26]
 800bbbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d035      	beq.n	800bc32 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d118      	bne.n	800bc00 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d00c      	beq.n	800bbf0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbde:	68db      	ldr	r3, [r3, #12]
 800bbe0:	685b      	ldr	r3, [r3, #4]
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f7fb f9d7 	bl	8006f96 <lwip_htonl>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	dc20      	bgt.n	800bc32 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	8b5b      	ldrh	r3, [r3, #26]
 800bbf4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bbf8:	b29a      	uxth	r2, r3
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bbfe:	e018      	b.n	800bc32 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc08:	68db      	ldr	r3, [r3, #12]
 800bc0a:	685b      	ldr	r3, [r3, #4]
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f7fb f9c2 	bl	8006f96 <lwip_htonl>
 800bc12:	4603      	mov	r3, r0
 800bc14:	1ae3      	subs	r3, r4, r3
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	dc0b      	bgt.n	800bc32 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	8b5b      	ldrh	r3, [r3, #26]
 800bc1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bc22:	b29a      	uxth	r2, r3
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bc28:	e003      	b.n	800bc32 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f001 ff76 	bl	800db1c <tcp_send_empty_ack>
 800bc30:	e000      	b.n	800bc34 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bc32:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d05b      	beq.n	800bcf4 <tcp_receive+0x50c>
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc40:	4b60      	ldr	r3, [pc, #384]	; (800bdc4 <tcp_receive+0x5dc>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	1ad3      	subs	r3, r2, r3
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	da54      	bge.n	800bcf4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800bc4a:	4b5f      	ldr	r3, [pc, #380]	; (800bdc8 <tcp_receive+0x5e0>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	b29a      	uxth	r2, r3
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc54:	b29b      	uxth	r3, r3
 800bc56:	1ad3      	subs	r3, r2, r3
 800bc58:	b29b      	uxth	r3, r3
 800bc5a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800bc5e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bc68:	10db      	asrs	r3, r3, #3
 800bc6a:	b21b      	sxth	r3, r3
 800bc6c:	b29b      	uxth	r3, r3
 800bc6e:	1ad3      	subs	r3, r2, r3
 800bc70:	b29b      	uxth	r3, r3
 800bc72:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bc7c:	b29a      	uxth	r2, r3
 800bc7e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bc82:	4413      	add	r3, r2
 800bc84:	b29b      	uxth	r3, r3
 800bc86:	b21a      	sxth	r2, r3
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800bc8c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	da05      	bge.n	800bca0 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800bc94:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bc98:	425b      	negs	r3, r3
 800bc9a:	b29b      	uxth	r3, r3
 800bc9c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800bca0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bcaa:	109b      	asrs	r3, r3, #2
 800bcac:	b21b      	sxth	r3, r3
 800bcae:	b29b      	uxth	r3, r3
 800bcb0:	1ad3      	subs	r3, r2, r3
 800bcb2:	b29b      	uxth	r3, r3
 800bcb4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bcbe:	b29a      	uxth	r2, r3
 800bcc0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bcc4:	4413      	add	r3, r2
 800bcc6:	b29b      	uxth	r3, r3
 800bcc8:	b21a      	sxth	r2, r3
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bcd4:	10db      	asrs	r3, r3, #3
 800bcd6:	b21b      	sxth	r3, r3
 800bcd8:	b29a      	uxth	r2, r3
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bce0:	b29b      	uxth	r3, r3
 800bce2:	4413      	add	r3, r2
 800bce4:	b29b      	uxth	r3, r3
 800bce6:	b21a      	sxth	r2, r3
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800bcf4:	4b35      	ldr	r3, [pc, #212]	; (800bdcc <tcp_receive+0x5e4>)
 800bcf6:	881b      	ldrh	r3, [r3, #0]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	f000 84e2 	beq.w	800c6c2 <tcp_receive+0xeda>
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	7d1b      	ldrb	r3, [r3, #20]
 800bd02:	2b06      	cmp	r3, #6
 800bd04:	f200 84dd 	bhi.w	800c6c2 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bd0c:	4b30      	ldr	r3, [pc, #192]	; (800bdd0 <tcp_receive+0x5e8>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	1ad3      	subs	r3, r2, r3
 800bd12:	3b01      	subs	r3, #1
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	f2c0 808f 	blt.w	800be38 <tcp_receive+0x650>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bd1e:	4b2b      	ldr	r3, [pc, #172]	; (800bdcc <tcp_receive+0x5e4>)
 800bd20:	881b      	ldrh	r3, [r3, #0]
 800bd22:	4619      	mov	r1, r3
 800bd24:	4b2a      	ldr	r3, [pc, #168]	; (800bdd0 <tcp_receive+0x5e8>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	440b      	add	r3, r1
 800bd2a:	1ad3      	subs	r3, r2, r3
 800bd2c:	3301      	adds	r3, #1
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	f300 8082 	bgt.w	800be38 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800bd34:	4b27      	ldr	r3, [pc, #156]	; (800bdd4 <tcp_receive+0x5ec>)
 800bd36:	685b      	ldr	r3, [r3, #4]
 800bd38:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bd3e:	4b24      	ldr	r3, [pc, #144]	; (800bdd0 <tcp_receive+0x5e8>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	1ad3      	subs	r3, r2, r3
 800bd44:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800bd46:	4b23      	ldr	r3, [pc, #140]	; (800bdd4 <tcp_receive+0x5ec>)
 800bd48:	685b      	ldr	r3, [r3, #4]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d106      	bne.n	800bd5c <tcp_receive+0x574>
 800bd4e:	4b22      	ldr	r3, [pc, #136]	; (800bdd8 <tcp_receive+0x5f0>)
 800bd50:	f240 5294 	movw	r2, #1428	; 0x594
 800bd54:	4921      	ldr	r1, [pc, #132]	; (800bddc <tcp_receive+0x5f4>)
 800bd56:	4822      	ldr	r0, [pc, #136]	; (800bde0 <tcp_receive+0x5f8>)
 800bd58:	f005 fe5e 	bl	8011a18 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800bd5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd5e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bd62:	4293      	cmp	r3, r2
 800bd64:	d906      	bls.n	800bd74 <tcp_receive+0x58c>
 800bd66:	4b1c      	ldr	r3, [pc, #112]	; (800bdd8 <tcp_receive+0x5f0>)
 800bd68:	f240 5295 	movw	r2, #1429	; 0x595
 800bd6c:	491d      	ldr	r1, [pc, #116]	; (800bde4 <tcp_receive+0x5fc>)
 800bd6e:	481c      	ldr	r0, [pc, #112]	; (800bde0 <tcp_receive+0x5f8>)
 800bd70:	f005 fe52 	bl	8011a18 <iprintf>
      off = (u16_t)off32;
 800bd74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd76:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800bd7a:	4b16      	ldr	r3, [pc, #88]	; (800bdd4 <tcp_receive+0x5ec>)
 800bd7c:	685b      	ldr	r3, [r3, #4]
 800bd7e:	891b      	ldrh	r3, [r3, #8]
 800bd80:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bd84:	429a      	cmp	r2, r3
 800bd86:	d906      	bls.n	800bd96 <tcp_receive+0x5ae>
 800bd88:	4b13      	ldr	r3, [pc, #76]	; (800bdd8 <tcp_receive+0x5f0>)
 800bd8a:	f240 5297 	movw	r2, #1431	; 0x597
 800bd8e:	4916      	ldr	r1, [pc, #88]	; (800bde8 <tcp_receive+0x600>)
 800bd90:	4813      	ldr	r0, [pc, #76]	; (800bde0 <tcp_receive+0x5f8>)
 800bd92:	f005 fe41 	bl	8011a18 <iprintf>
      inseg.len -= off;
 800bd96:	4b0f      	ldr	r3, [pc, #60]	; (800bdd4 <tcp_receive+0x5ec>)
 800bd98:	891a      	ldrh	r2, [r3, #8]
 800bd9a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bd9e:	1ad3      	subs	r3, r2, r3
 800bda0:	b29a      	uxth	r2, r3
 800bda2:	4b0c      	ldr	r3, [pc, #48]	; (800bdd4 <tcp_receive+0x5ec>)
 800bda4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800bda6:	4b0b      	ldr	r3, [pc, #44]	; (800bdd4 <tcp_receive+0x5ec>)
 800bda8:	685b      	ldr	r3, [r3, #4]
 800bdaa:	891a      	ldrh	r2, [r3, #8]
 800bdac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bdb0:	1ad3      	subs	r3, r2, r3
 800bdb2:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800bdb4:	e02a      	b.n	800be0c <tcp_receive+0x624>
 800bdb6:	bf00      	nop
 800bdb8:	08014fa0 	.word	0x08014fa0
 800bdbc:	08014fa8 	.word	0x08014fa8
 800bdc0:	2000a768 	.word	0x2000a768
 800bdc4:	2000a764 	.word	0x2000a764
 800bdc8:	2000a728 	.word	0x2000a728
 800bdcc:	2000a76a 	.word	0x2000a76a
 800bdd0:	2000a760 	.word	0x2000a760
 800bdd4:	2000a740 	.word	0x2000a740
 800bdd8:	08014c38 	.word	0x08014c38
 800bddc:	08014fb0 	.word	0x08014fb0
 800bde0:	08014c84 	.word	0x08014c84
 800bde4:	08014fc0 	.word	0x08014fc0
 800bde8:	08014fd0 	.word	0x08014fd0
        off -= p->len;
 800bdec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bdee:	895b      	ldrh	r3, [r3, #10]
 800bdf0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bdf4:	1ad3      	subs	r3, r2, r3
 800bdf6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800bdfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bdfc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800bdfe:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800be00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be02:	2200      	movs	r2, #0
 800be04:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800be06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800be0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be0e:	895b      	ldrh	r3, [r3, #10]
 800be10:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800be14:	429a      	cmp	r2, r3
 800be16:	d8e9      	bhi.n	800bdec <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800be18:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800be1c:	4619      	mov	r1, r3
 800be1e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800be20:	f7fc fb7c 	bl	800851c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be28:	4a91      	ldr	r2, [pc, #580]	; (800c070 <tcp_receive+0x888>)
 800be2a:	6013      	str	r3, [r2, #0]
 800be2c:	4b91      	ldr	r3, [pc, #580]	; (800c074 <tcp_receive+0x88c>)
 800be2e:	68db      	ldr	r3, [r3, #12]
 800be30:	4a8f      	ldr	r2, [pc, #572]	; (800c070 <tcp_receive+0x888>)
 800be32:	6812      	ldr	r2, [r2, #0]
 800be34:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800be36:	e00d      	b.n	800be54 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800be38:	4b8d      	ldr	r3, [pc, #564]	; (800c070 <tcp_receive+0x888>)
 800be3a:	681a      	ldr	r2, [r3, #0]
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be40:	1ad3      	subs	r3, r2, r3
 800be42:	2b00      	cmp	r3, #0
 800be44:	da06      	bge.n	800be54 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	8b5b      	ldrh	r3, [r3, #26]
 800be4a:	f043 0302 	orr.w	r3, r3, #2
 800be4e:	b29a      	uxth	r2, r3
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800be54:	4b86      	ldr	r3, [pc, #536]	; (800c070 <tcp_receive+0x888>)
 800be56:	681a      	ldr	r2, [r3, #0]
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be5c:	1ad3      	subs	r3, r2, r3
 800be5e:	2b00      	cmp	r3, #0
 800be60:	f2c0 842a 	blt.w	800c6b8 <tcp_receive+0xed0>
 800be64:	4b82      	ldr	r3, [pc, #520]	; (800c070 <tcp_receive+0x888>)
 800be66:	681a      	ldr	r2, [r3, #0]
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be6c:	6879      	ldr	r1, [r7, #4]
 800be6e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800be70:	440b      	add	r3, r1
 800be72:	1ad3      	subs	r3, r2, r3
 800be74:	3301      	adds	r3, #1
 800be76:	2b00      	cmp	r3, #0
 800be78:	f300 841e 	bgt.w	800c6b8 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be80:	4b7b      	ldr	r3, [pc, #492]	; (800c070 <tcp_receive+0x888>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	429a      	cmp	r2, r3
 800be86:	f040 829a 	bne.w	800c3be <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800be8a:	4b7a      	ldr	r3, [pc, #488]	; (800c074 <tcp_receive+0x88c>)
 800be8c:	891c      	ldrh	r4, [r3, #8]
 800be8e:	4b79      	ldr	r3, [pc, #484]	; (800c074 <tcp_receive+0x88c>)
 800be90:	68db      	ldr	r3, [r3, #12]
 800be92:	899b      	ldrh	r3, [r3, #12]
 800be94:	b29b      	uxth	r3, r3
 800be96:	4618      	mov	r0, r3
 800be98:	f7fb f868 	bl	8006f6c <lwip_htons>
 800be9c:	4603      	mov	r3, r0
 800be9e:	b2db      	uxtb	r3, r3
 800bea0:	f003 0303 	and.w	r3, r3, #3
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d001      	beq.n	800beac <tcp_receive+0x6c4>
 800bea8:	2301      	movs	r3, #1
 800beaa:	e000      	b.n	800beae <tcp_receive+0x6c6>
 800beac:	2300      	movs	r3, #0
 800beae:	4423      	add	r3, r4
 800beb0:	b29a      	uxth	r2, r3
 800beb2:	4b71      	ldr	r3, [pc, #452]	; (800c078 <tcp_receive+0x890>)
 800beb4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800beba:	4b6f      	ldr	r3, [pc, #444]	; (800c078 <tcp_receive+0x890>)
 800bebc:	881b      	ldrh	r3, [r3, #0]
 800bebe:	429a      	cmp	r2, r3
 800bec0:	d275      	bcs.n	800bfae <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800bec2:	4b6c      	ldr	r3, [pc, #432]	; (800c074 <tcp_receive+0x88c>)
 800bec4:	68db      	ldr	r3, [r3, #12]
 800bec6:	899b      	ldrh	r3, [r3, #12]
 800bec8:	b29b      	uxth	r3, r3
 800beca:	4618      	mov	r0, r3
 800becc:	f7fb f84e 	bl	8006f6c <lwip_htons>
 800bed0:	4603      	mov	r3, r0
 800bed2:	b2db      	uxtb	r3, r3
 800bed4:	f003 0301 	and.w	r3, r3, #1
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d01f      	beq.n	800bf1c <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800bedc:	4b65      	ldr	r3, [pc, #404]	; (800c074 <tcp_receive+0x88c>)
 800bede:	68db      	ldr	r3, [r3, #12]
 800bee0:	899b      	ldrh	r3, [r3, #12]
 800bee2:	b29b      	uxth	r3, r3
 800bee4:	b21b      	sxth	r3, r3
 800bee6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800beea:	b21c      	sxth	r4, r3
 800beec:	4b61      	ldr	r3, [pc, #388]	; (800c074 <tcp_receive+0x88c>)
 800beee:	68db      	ldr	r3, [r3, #12]
 800bef0:	899b      	ldrh	r3, [r3, #12]
 800bef2:	b29b      	uxth	r3, r3
 800bef4:	4618      	mov	r0, r3
 800bef6:	f7fb f839 	bl	8006f6c <lwip_htons>
 800befa:	4603      	mov	r3, r0
 800befc:	b2db      	uxtb	r3, r3
 800befe:	b29b      	uxth	r3, r3
 800bf00:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800bf04:	b29b      	uxth	r3, r3
 800bf06:	4618      	mov	r0, r3
 800bf08:	f7fb f830 	bl	8006f6c <lwip_htons>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	b21b      	sxth	r3, r3
 800bf10:	4323      	orrs	r3, r4
 800bf12:	b21a      	sxth	r2, r3
 800bf14:	4b57      	ldr	r3, [pc, #348]	; (800c074 <tcp_receive+0x88c>)
 800bf16:	68db      	ldr	r3, [r3, #12]
 800bf18:	b292      	uxth	r2, r2
 800bf1a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bf20:	4b54      	ldr	r3, [pc, #336]	; (800c074 <tcp_receive+0x88c>)
 800bf22:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800bf24:	4b53      	ldr	r3, [pc, #332]	; (800c074 <tcp_receive+0x88c>)
 800bf26:	68db      	ldr	r3, [r3, #12]
 800bf28:	899b      	ldrh	r3, [r3, #12]
 800bf2a:	b29b      	uxth	r3, r3
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	f7fb f81d 	bl	8006f6c <lwip_htons>
 800bf32:	4603      	mov	r3, r0
 800bf34:	b2db      	uxtb	r3, r3
 800bf36:	f003 0302 	and.w	r3, r3, #2
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d005      	beq.n	800bf4a <tcp_receive+0x762>
            inseg.len -= 1;
 800bf3e:	4b4d      	ldr	r3, [pc, #308]	; (800c074 <tcp_receive+0x88c>)
 800bf40:	891b      	ldrh	r3, [r3, #8]
 800bf42:	3b01      	subs	r3, #1
 800bf44:	b29a      	uxth	r2, r3
 800bf46:	4b4b      	ldr	r3, [pc, #300]	; (800c074 <tcp_receive+0x88c>)
 800bf48:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800bf4a:	4b4a      	ldr	r3, [pc, #296]	; (800c074 <tcp_receive+0x88c>)
 800bf4c:	685b      	ldr	r3, [r3, #4]
 800bf4e:	4a49      	ldr	r2, [pc, #292]	; (800c074 <tcp_receive+0x88c>)
 800bf50:	8912      	ldrh	r2, [r2, #8]
 800bf52:	4611      	mov	r1, r2
 800bf54:	4618      	mov	r0, r3
 800bf56:	f7fc f9e1 	bl	800831c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800bf5a:	4b46      	ldr	r3, [pc, #280]	; (800c074 <tcp_receive+0x88c>)
 800bf5c:	891c      	ldrh	r4, [r3, #8]
 800bf5e:	4b45      	ldr	r3, [pc, #276]	; (800c074 <tcp_receive+0x88c>)
 800bf60:	68db      	ldr	r3, [r3, #12]
 800bf62:	899b      	ldrh	r3, [r3, #12]
 800bf64:	b29b      	uxth	r3, r3
 800bf66:	4618      	mov	r0, r3
 800bf68:	f7fb f800 	bl	8006f6c <lwip_htons>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	b2db      	uxtb	r3, r3
 800bf70:	f003 0303 	and.w	r3, r3, #3
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d001      	beq.n	800bf7c <tcp_receive+0x794>
 800bf78:	2301      	movs	r3, #1
 800bf7a:	e000      	b.n	800bf7e <tcp_receive+0x796>
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	4423      	add	r3, r4
 800bf80:	b29a      	uxth	r2, r3
 800bf82:	4b3d      	ldr	r3, [pc, #244]	; (800c078 <tcp_receive+0x890>)
 800bf84:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800bf86:	4b3c      	ldr	r3, [pc, #240]	; (800c078 <tcp_receive+0x890>)
 800bf88:	881b      	ldrh	r3, [r3, #0]
 800bf8a:	461a      	mov	r2, r3
 800bf8c:	4b38      	ldr	r3, [pc, #224]	; (800c070 <tcp_receive+0x888>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	441a      	add	r2, r3
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf96:	6879      	ldr	r1, [r7, #4]
 800bf98:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bf9a:	440b      	add	r3, r1
 800bf9c:	429a      	cmp	r2, r3
 800bf9e:	d006      	beq.n	800bfae <tcp_receive+0x7c6>
 800bfa0:	4b36      	ldr	r3, [pc, #216]	; (800c07c <tcp_receive+0x894>)
 800bfa2:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800bfa6:	4936      	ldr	r1, [pc, #216]	; (800c080 <tcp_receive+0x898>)
 800bfa8:	4836      	ldr	r0, [pc, #216]	; (800c084 <tcp_receive+0x89c>)
 800bfaa:	f005 fd35 	bl	8011a18 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	f000 80e7 	beq.w	800c186 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800bfb8:	4b2e      	ldr	r3, [pc, #184]	; (800c074 <tcp_receive+0x88c>)
 800bfba:	68db      	ldr	r3, [r3, #12]
 800bfbc:	899b      	ldrh	r3, [r3, #12]
 800bfbe:	b29b      	uxth	r3, r3
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	f7fa ffd3 	bl	8006f6c <lwip_htons>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	b2db      	uxtb	r3, r3
 800bfca:	f003 0301 	and.w	r3, r3, #1
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d010      	beq.n	800bff4 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800bfd2:	e00a      	b.n	800bfea <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bfd8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bfde:	681a      	ldr	r2, [r3, #0]
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800bfe4:	68f8      	ldr	r0, [r7, #12]
 800bfe6:	f7fd fd92 	bl	8009b0e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d1f0      	bne.n	800bfd4 <tcp_receive+0x7ec>
 800bff2:	e0c8      	b.n	800c186 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bff8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800bffa:	e052      	b.n	800c0a2 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800bffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bffe:	68db      	ldr	r3, [r3, #12]
 800c000:	899b      	ldrh	r3, [r3, #12]
 800c002:	b29b      	uxth	r3, r3
 800c004:	4618      	mov	r0, r3
 800c006:	f7fa ffb1 	bl	8006f6c <lwip_htons>
 800c00a:	4603      	mov	r3, r0
 800c00c:	b2db      	uxtb	r3, r3
 800c00e:	f003 0301 	and.w	r3, r3, #1
 800c012:	2b00      	cmp	r3, #0
 800c014:	d03d      	beq.n	800c092 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800c016:	4b17      	ldr	r3, [pc, #92]	; (800c074 <tcp_receive+0x88c>)
 800c018:	68db      	ldr	r3, [r3, #12]
 800c01a:	899b      	ldrh	r3, [r3, #12]
 800c01c:	b29b      	uxth	r3, r3
 800c01e:	4618      	mov	r0, r3
 800c020:	f7fa ffa4 	bl	8006f6c <lwip_htons>
 800c024:	4603      	mov	r3, r0
 800c026:	b2db      	uxtb	r3, r3
 800c028:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d130      	bne.n	800c092 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800c030:	4b10      	ldr	r3, [pc, #64]	; (800c074 <tcp_receive+0x88c>)
 800c032:	68db      	ldr	r3, [r3, #12]
 800c034:	899b      	ldrh	r3, [r3, #12]
 800c036:	b29c      	uxth	r4, r3
 800c038:	2001      	movs	r0, #1
 800c03a:	f7fa ff97 	bl	8006f6c <lwip_htons>
 800c03e:	4603      	mov	r3, r0
 800c040:	461a      	mov	r2, r3
 800c042:	4b0c      	ldr	r3, [pc, #48]	; (800c074 <tcp_receive+0x88c>)
 800c044:	68db      	ldr	r3, [r3, #12]
 800c046:	4322      	orrs	r2, r4
 800c048:	b292      	uxth	r2, r2
 800c04a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800c04c:	4b09      	ldr	r3, [pc, #36]	; (800c074 <tcp_receive+0x88c>)
 800c04e:	891c      	ldrh	r4, [r3, #8]
 800c050:	4b08      	ldr	r3, [pc, #32]	; (800c074 <tcp_receive+0x88c>)
 800c052:	68db      	ldr	r3, [r3, #12]
 800c054:	899b      	ldrh	r3, [r3, #12]
 800c056:	b29b      	uxth	r3, r3
 800c058:	4618      	mov	r0, r3
 800c05a:	f7fa ff87 	bl	8006f6c <lwip_htons>
 800c05e:	4603      	mov	r3, r0
 800c060:	b2db      	uxtb	r3, r3
 800c062:	f003 0303 	and.w	r3, r3, #3
 800c066:	2b00      	cmp	r3, #0
 800c068:	d00e      	beq.n	800c088 <tcp_receive+0x8a0>
 800c06a:	2301      	movs	r3, #1
 800c06c:	e00d      	b.n	800c08a <tcp_receive+0x8a2>
 800c06e:	bf00      	nop
 800c070:	2000a760 	.word	0x2000a760
 800c074:	2000a740 	.word	0x2000a740
 800c078:	2000a76a 	.word	0x2000a76a
 800c07c:	08014c38 	.word	0x08014c38
 800c080:	08014fe0 	.word	0x08014fe0
 800c084:	08014c84 	.word	0x08014c84
 800c088:	2300      	movs	r3, #0
 800c08a:	4423      	add	r3, r4
 800c08c:	b29a      	uxth	r2, r3
 800c08e:	4b98      	ldr	r3, [pc, #608]	; (800c2f0 <tcp_receive+0xb08>)
 800c090:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800c092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c094:	613b      	str	r3, [r7, #16]
              next = next->next;
 800c096:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800c09c:	6938      	ldr	r0, [r7, #16]
 800c09e:	f7fd fd36 	bl	8009b0e <tcp_seg_free>
            while (next &&
 800c0a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d00e      	beq.n	800c0c6 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800c0a8:	4b91      	ldr	r3, [pc, #580]	; (800c2f0 <tcp_receive+0xb08>)
 800c0aa:	881b      	ldrh	r3, [r3, #0]
 800c0ac:	461a      	mov	r2, r3
 800c0ae:	4b91      	ldr	r3, [pc, #580]	; (800c2f4 <tcp_receive+0xb0c>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	441a      	add	r2, r3
 800c0b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0b6:	68db      	ldr	r3, [r3, #12]
 800c0b8:	685b      	ldr	r3, [r3, #4]
 800c0ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c0bc:	8909      	ldrh	r1, [r1, #8]
 800c0be:	440b      	add	r3, r1
 800c0c0:	1ad3      	subs	r3, r2, r3
            while (next &&
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	da9a      	bge.n	800bffc <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800c0c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d059      	beq.n	800c180 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800c0cc:	4b88      	ldr	r3, [pc, #544]	; (800c2f0 <tcp_receive+0xb08>)
 800c0ce:	881b      	ldrh	r3, [r3, #0]
 800c0d0:	461a      	mov	r2, r3
 800c0d2:	4b88      	ldr	r3, [pc, #544]	; (800c2f4 <tcp_receive+0xb0c>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	441a      	add	r2, r3
 800c0d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0da:	68db      	ldr	r3, [r3, #12]
 800c0dc:	685b      	ldr	r3, [r3, #4]
 800c0de:	1ad3      	subs	r3, r2, r3
            if (next &&
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	dd4d      	ble.n	800c180 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800c0e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0e6:	68db      	ldr	r3, [r3, #12]
 800c0e8:	685b      	ldr	r3, [r3, #4]
 800c0ea:	b29a      	uxth	r2, r3
 800c0ec:	4b81      	ldr	r3, [pc, #516]	; (800c2f4 <tcp_receive+0xb0c>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	b29b      	uxth	r3, r3
 800c0f2:	1ad3      	subs	r3, r2, r3
 800c0f4:	b29a      	uxth	r2, r3
 800c0f6:	4b80      	ldr	r3, [pc, #512]	; (800c2f8 <tcp_receive+0xb10>)
 800c0f8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c0fa:	4b7f      	ldr	r3, [pc, #508]	; (800c2f8 <tcp_receive+0xb10>)
 800c0fc:	68db      	ldr	r3, [r3, #12]
 800c0fe:	899b      	ldrh	r3, [r3, #12]
 800c100:	b29b      	uxth	r3, r3
 800c102:	4618      	mov	r0, r3
 800c104:	f7fa ff32 	bl	8006f6c <lwip_htons>
 800c108:	4603      	mov	r3, r0
 800c10a:	b2db      	uxtb	r3, r3
 800c10c:	f003 0302 	and.w	r3, r3, #2
 800c110:	2b00      	cmp	r3, #0
 800c112:	d005      	beq.n	800c120 <tcp_receive+0x938>
                inseg.len -= 1;
 800c114:	4b78      	ldr	r3, [pc, #480]	; (800c2f8 <tcp_receive+0xb10>)
 800c116:	891b      	ldrh	r3, [r3, #8]
 800c118:	3b01      	subs	r3, #1
 800c11a:	b29a      	uxth	r2, r3
 800c11c:	4b76      	ldr	r3, [pc, #472]	; (800c2f8 <tcp_receive+0xb10>)
 800c11e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800c120:	4b75      	ldr	r3, [pc, #468]	; (800c2f8 <tcp_receive+0xb10>)
 800c122:	685b      	ldr	r3, [r3, #4]
 800c124:	4a74      	ldr	r2, [pc, #464]	; (800c2f8 <tcp_receive+0xb10>)
 800c126:	8912      	ldrh	r2, [r2, #8]
 800c128:	4611      	mov	r1, r2
 800c12a:	4618      	mov	r0, r3
 800c12c:	f7fc f8f6 	bl	800831c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800c130:	4b71      	ldr	r3, [pc, #452]	; (800c2f8 <tcp_receive+0xb10>)
 800c132:	891c      	ldrh	r4, [r3, #8]
 800c134:	4b70      	ldr	r3, [pc, #448]	; (800c2f8 <tcp_receive+0xb10>)
 800c136:	68db      	ldr	r3, [r3, #12]
 800c138:	899b      	ldrh	r3, [r3, #12]
 800c13a:	b29b      	uxth	r3, r3
 800c13c:	4618      	mov	r0, r3
 800c13e:	f7fa ff15 	bl	8006f6c <lwip_htons>
 800c142:	4603      	mov	r3, r0
 800c144:	b2db      	uxtb	r3, r3
 800c146:	f003 0303 	and.w	r3, r3, #3
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d001      	beq.n	800c152 <tcp_receive+0x96a>
 800c14e:	2301      	movs	r3, #1
 800c150:	e000      	b.n	800c154 <tcp_receive+0x96c>
 800c152:	2300      	movs	r3, #0
 800c154:	4423      	add	r3, r4
 800c156:	b29a      	uxth	r2, r3
 800c158:	4b65      	ldr	r3, [pc, #404]	; (800c2f0 <tcp_receive+0xb08>)
 800c15a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800c15c:	4b64      	ldr	r3, [pc, #400]	; (800c2f0 <tcp_receive+0xb08>)
 800c15e:	881b      	ldrh	r3, [r3, #0]
 800c160:	461a      	mov	r2, r3
 800c162:	4b64      	ldr	r3, [pc, #400]	; (800c2f4 <tcp_receive+0xb0c>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	441a      	add	r2, r3
 800c168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c16a:	68db      	ldr	r3, [r3, #12]
 800c16c:	685b      	ldr	r3, [r3, #4]
 800c16e:	429a      	cmp	r2, r3
 800c170:	d006      	beq.n	800c180 <tcp_receive+0x998>
 800c172:	4b62      	ldr	r3, [pc, #392]	; (800c2fc <tcp_receive+0xb14>)
 800c174:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800c178:	4961      	ldr	r1, [pc, #388]	; (800c300 <tcp_receive+0xb18>)
 800c17a:	4862      	ldr	r0, [pc, #392]	; (800c304 <tcp_receive+0xb1c>)
 800c17c:	f005 fc4c 	bl	8011a18 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c184:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800c186:	4b5a      	ldr	r3, [pc, #360]	; (800c2f0 <tcp_receive+0xb08>)
 800c188:	881b      	ldrh	r3, [r3, #0]
 800c18a:	461a      	mov	r2, r3
 800c18c:	4b59      	ldr	r3, [pc, #356]	; (800c2f4 <tcp_receive+0xb0c>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	441a      	add	r2, r3
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c19a:	4b55      	ldr	r3, [pc, #340]	; (800c2f0 <tcp_receive+0xb08>)
 800c19c:	881b      	ldrh	r3, [r3, #0]
 800c19e:	429a      	cmp	r2, r3
 800c1a0:	d206      	bcs.n	800c1b0 <tcp_receive+0x9c8>
 800c1a2:	4b56      	ldr	r3, [pc, #344]	; (800c2fc <tcp_receive+0xb14>)
 800c1a4:	f240 6207 	movw	r2, #1543	; 0x607
 800c1a8:	4957      	ldr	r1, [pc, #348]	; (800c308 <tcp_receive+0xb20>)
 800c1aa:	4856      	ldr	r0, [pc, #344]	; (800c304 <tcp_receive+0xb1c>)
 800c1ac:	f005 fc34 	bl	8011a18 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c1b4:	4b4e      	ldr	r3, [pc, #312]	; (800c2f0 <tcp_receive+0xb08>)
 800c1b6:	881b      	ldrh	r3, [r3, #0]
 800c1b8:	1ad3      	subs	r3, r2, r3
 800c1ba:	b29a      	uxth	r2, r3
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f7fc ffc5 	bl	8009150 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800c1c6:	4b4c      	ldr	r3, [pc, #304]	; (800c2f8 <tcp_receive+0xb10>)
 800c1c8:	685b      	ldr	r3, [r3, #4]
 800c1ca:	891b      	ldrh	r3, [r3, #8]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d006      	beq.n	800c1de <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800c1d0:	4b49      	ldr	r3, [pc, #292]	; (800c2f8 <tcp_receive+0xb10>)
 800c1d2:	685b      	ldr	r3, [r3, #4]
 800c1d4:	4a4d      	ldr	r2, [pc, #308]	; (800c30c <tcp_receive+0xb24>)
 800c1d6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800c1d8:	4b47      	ldr	r3, [pc, #284]	; (800c2f8 <tcp_receive+0xb10>)
 800c1da:	2200      	movs	r2, #0
 800c1dc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c1de:	4b46      	ldr	r3, [pc, #280]	; (800c2f8 <tcp_receive+0xb10>)
 800c1e0:	68db      	ldr	r3, [r3, #12]
 800c1e2:	899b      	ldrh	r3, [r3, #12]
 800c1e4:	b29b      	uxth	r3, r3
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f7fa fec0 	bl	8006f6c <lwip_htons>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	b2db      	uxtb	r3, r3
 800c1f0:	f003 0301 	and.w	r3, r3, #1
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	f000 80b8 	beq.w	800c36a <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800c1fa:	4b45      	ldr	r3, [pc, #276]	; (800c310 <tcp_receive+0xb28>)
 800c1fc:	781b      	ldrb	r3, [r3, #0]
 800c1fe:	f043 0320 	orr.w	r3, r3, #32
 800c202:	b2da      	uxtb	r2, r3
 800c204:	4b42      	ldr	r3, [pc, #264]	; (800c310 <tcp_receive+0xb28>)
 800c206:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800c208:	e0af      	b.n	800c36a <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c20e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c214:	68db      	ldr	r3, [r3, #12]
 800c216:	685b      	ldr	r3, [r3, #4]
 800c218:	4a36      	ldr	r2, [pc, #216]	; (800c2f4 <tcp_receive+0xb0c>)
 800c21a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800c21c:	68bb      	ldr	r3, [r7, #8]
 800c21e:	891b      	ldrh	r3, [r3, #8]
 800c220:	461c      	mov	r4, r3
 800c222:	68bb      	ldr	r3, [r7, #8]
 800c224:	68db      	ldr	r3, [r3, #12]
 800c226:	899b      	ldrh	r3, [r3, #12]
 800c228:	b29b      	uxth	r3, r3
 800c22a:	4618      	mov	r0, r3
 800c22c:	f7fa fe9e 	bl	8006f6c <lwip_htons>
 800c230:	4603      	mov	r3, r0
 800c232:	b2db      	uxtb	r3, r3
 800c234:	f003 0303 	and.w	r3, r3, #3
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d001      	beq.n	800c240 <tcp_receive+0xa58>
 800c23c:	2301      	movs	r3, #1
 800c23e:	e000      	b.n	800c242 <tcp_receive+0xa5a>
 800c240:	2300      	movs	r3, #0
 800c242:	191a      	adds	r2, r3, r4
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c248:	441a      	add	r2, r3
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c252:	461c      	mov	r4, r3
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	891b      	ldrh	r3, [r3, #8]
 800c258:	461d      	mov	r5, r3
 800c25a:	68bb      	ldr	r3, [r7, #8]
 800c25c:	68db      	ldr	r3, [r3, #12]
 800c25e:	899b      	ldrh	r3, [r3, #12]
 800c260:	b29b      	uxth	r3, r3
 800c262:	4618      	mov	r0, r3
 800c264:	f7fa fe82 	bl	8006f6c <lwip_htons>
 800c268:	4603      	mov	r3, r0
 800c26a:	b2db      	uxtb	r3, r3
 800c26c:	f003 0303 	and.w	r3, r3, #3
 800c270:	2b00      	cmp	r3, #0
 800c272:	d001      	beq.n	800c278 <tcp_receive+0xa90>
 800c274:	2301      	movs	r3, #1
 800c276:	e000      	b.n	800c27a <tcp_receive+0xa92>
 800c278:	2300      	movs	r3, #0
 800c27a:	442b      	add	r3, r5
 800c27c:	429c      	cmp	r4, r3
 800c27e:	d206      	bcs.n	800c28e <tcp_receive+0xaa6>
 800c280:	4b1e      	ldr	r3, [pc, #120]	; (800c2fc <tcp_receive+0xb14>)
 800c282:	f240 622b 	movw	r2, #1579	; 0x62b
 800c286:	4923      	ldr	r1, [pc, #140]	; (800c314 <tcp_receive+0xb2c>)
 800c288:	481e      	ldr	r0, [pc, #120]	; (800c304 <tcp_receive+0xb1c>)
 800c28a:	f005 fbc5 	bl	8011a18 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800c28e:	68bb      	ldr	r3, [r7, #8]
 800c290:	891b      	ldrh	r3, [r3, #8]
 800c292:	461c      	mov	r4, r3
 800c294:	68bb      	ldr	r3, [r7, #8]
 800c296:	68db      	ldr	r3, [r3, #12]
 800c298:	899b      	ldrh	r3, [r3, #12]
 800c29a:	b29b      	uxth	r3, r3
 800c29c:	4618      	mov	r0, r3
 800c29e:	f7fa fe65 	bl	8006f6c <lwip_htons>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	b2db      	uxtb	r3, r3
 800c2a6:	f003 0303 	and.w	r3, r3, #3
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d001      	beq.n	800c2b2 <tcp_receive+0xaca>
 800c2ae:	2301      	movs	r3, #1
 800c2b0:	e000      	b.n	800c2b4 <tcp_receive+0xacc>
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	1919      	adds	r1, r3, r4
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c2ba:	b28b      	uxth	r3, r1
 800c2bc:	1ad3      	subs	r3, r2, r3
 800c2be:	b29a      	uxth	r2, r3
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f7fc ff43 	bl	8009150 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800c2ca:	68bb      	ldr	r3, [r7, #8]
 800c2cc:	685b      	ldr	r3, [r3, #4]
 800c2ce:	891b      	ldrh	r3, [r3, #8]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d028      	beq.n	800c326 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800c2d4:	4b0d      	ldr	r3, [pc, #52]	; (800c30c <tcp_receive+0xb24>)
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d01d      	beq.n	800c318 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800c2dc:	4b0b      	ldr	r3, [pc, #44]	; (800c30c <tcp_receive+0xb24>)
 800c2de:	681a      	ldr	r2, [r3, #0]
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	685b      	ldr	r3, [r3, #4]
 800c2e4:	4619      	mov	r1, r3
 800c2e6:	4610      	mov	r0, r2
 800c2e8:	f7fc fa60 	bl	80087ac <pbuf_cat>
 800c2ec:	e018      	b.n	800c320 <tcp_receive+0xb38>
 800c2ee:	bf00      	nop
 800c2f0:	2000a76a 	.word	0x2000a76a
 800c2f4:	2000a760 	.word	0x2000a760
 800c2f8:	2000a740 	.word	0x2000a740
 800c2fc:	08014c38 	.word	0x08014c38
 800c300:	08015018 	.word	0x08015018
 800c304:	08014c84 	.word	0x08014c84
 800c308:	08015054 	.word	0x08015054
 800c30c:	2000a770 	.word	0x2000a770
 800c310:	2000a76d 	.word	0x2000a76d
 800c314:	08015074 	.word	0x08015074
            } else {
              recv_data = cseg->p;
 800c318:	68bb      	ldr	r3, [r7, #8]
 800c31a:	685b      	ldr	r3, [r3, #4]
 800c31c:	4a70      	ldr	r2, [pc, #448]	; (800c4e0 <tcp_receive+0xcf8>)
 800c31e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	2200      	movs	r2, #0
 800c324:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	68db      	ldr	r3, [r3, #12]
 800c32a:	899b      	ldrh	r3, [r3, #12]
 800c32c:	b29b      	uxth	r3, r3
 800c32e:	4618      	mov	r0, r3
 800c330:	f7fa fe1c 	bl	8006f6c <lwip_htons>
 800c334:	4603      	mov	r3, r0
 800c336:	b2db      	uxtb	r3, r3
 800c338:	f003 0301 	and.w	r3, r3, #1
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d00d      	beq.n	800c35c <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800c340:	4b68      	ldr	r3, [pc, #416]	; (800c4e4 <tcp_receive+0xcfc>)
 800c342:	781b      	ldrb	r3, [r3, #0]
 800c344:	f043 0320 	orr.w	r3, r3, #32
 800c348:	b2da      	uxtb	r2, r3
 800c34a:	4b66      	ldr	r3, [pc, #408]	; (800c4e4 <tcp_receive+0xcfc>)
 800c34c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	7d1b      	ldrb	r3, [r3, #20]
 800c352:	2b04      	cmp	r3, #4
 800c354:	d102      	bne.n	800c35c <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2207      	movs	r2, #7
 800c35a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	681a      	ldr	r2, [r3, #0]
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800c364:	68b8      	ldr	r0, [r7, #8]
 800c366:	f7fd fbd2 	bl	8009b0e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d008      	beq.n	800c384 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c376:	68db      	ldr	r3, [r3, #12]
 800c378:	685a      	ldr	r2, [r3, #4]
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800c37e:	429a      	cmp	r2, r3
 800c380:	f43f af43 	beq.w	800c20a <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	8b5b      	ldrh	r3, [r3, #26]
 800c388:	f003 0301 	and.w	r3, r3, #1
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d00e      	beq.n	800c3ae <tcp_receive+0xbc6>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	8b5b      	ldrh	r3, [r3, #26]
 800c394:	f023 0301 	bic.w	r3, r3, #1
 800c398:	b29a      	uxth	r2, r3
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	835a      	strh	r2, [r3, #26]
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	8b5b      	ldrh	r3, [r3, #26]
 800c3a2:	f043 0302 	orr.w	r3, r3, #2
 800c3a6:	b29a      	uxth	r2, r3
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c3ac:	e188      	b.n	800c6c0 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	8b5b      	ldrh	r3, [r3, #26]
 800c3b2:	f043 0301 	orr.w	r3, r3, #1
 800c3b6:	b29a      	uxth	r2, r3
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c3bc:	e180      	b.n	800c6c0 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d106      	bne.n	800c3d4 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800c3c6:	4848      	ldr	r0, [pc, #288]	; (800c4e8 <tcp_receive+0xd00>)
 800c3c8:	f7fd fbba 	bl	8009b40 <tcp_seg_copy>
 800c3cc:	4602      	mov	r2, r0
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	675a      	str	r2, [r3, #116]	; 0x74
 800c3d2:	e16d      	b.n	800c6b0 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3dc:	63bb      	str	r3, [r7, #56]	; 0x38
 800c3de:	e157      	b.n	800c690 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800c3e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3e2:	68db      	ldr	r3, [r3, #12]
 800c3e4:	685a      	ldr	r2, [r3, #4]
 800c3e6:	4b41      	ldr	r3, [pc, #260]	; (800c4ec <tcp_receive+0xd04>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	429a      	cmp	r2, r3
 800c3ec:	d11d      	bne.n	800c42a <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800c3ee:	4b3e      	ldr	r3, [pc, #248]	; (800c4e8 <tcp_receive+0xd00>)
 800c3f0:	891a      	ldrh	r2, [r3, #8]
 800c3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f4:	891b      	ldrh	r3, [r3, #8]
 800c3f6:	429a      	cmp	r2, r3
 800c3f8:	f240 814f 	bls.w	800c69a <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c3fc:	483a      	ldr	r0, [pc, #232]	; (800c4e8 <tcp_receive+0xd00>)
 800c3fe:	f7fd fb9f 	bl	8009b40 <tcp_seg_copy>
 800c402:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800c404:	697b      	ldr	r3, [r7, #20]
 800c406:	2b00      	cmp	r3, #0
 800c408:	f000 8149 	beq.w	800c69e <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800c40c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d003      	beq.n	800c41a <tcp_receive+0xc32>
                    prev->next = cseg;
 800c412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c414:	697a      	ldr	r2, [r7, #20]
 800c416:	601a      	str	r2, [r3, #0]
 800c418:	e002      	b.n	800c420 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	697a      	ldr	r2, [r7, #20]
 800c41e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800c420:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c422:	6978      	ldr	r0, [r7, #20]
 800c424:	f7ff f8dc 	bl	800b5e0 <tcp_oos_insert_segment>
                }
                break;
 800c428:	e139      	b.n	800c69e <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800c42a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d117      	bne.n	800c460 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800c430:	4b2e      	ldr	r3, [pc, #184]	; (800c4ec <tcp_receive+0xd04>)
 800c432:	681a      	ldr	r2, [r3, #0]
 800c434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c436:	68db      	ldr	r3, [r3, #12]
 800c438:	685b      	ldr	r3, [r3, #4]
 800c43a:	1ad3      	subs	r3, r2, r3
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	da57      	bge.n	800c4f0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c440:	4829      	ldr	r0, [pc, #164]	; (800c4e8 <tcp_receive+0xd00>)
 800c442:	f7fd fb7d 	bl	8009b40 <tcp_seg_copy>
 800c446:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800c448:	69bb      	ldr	r3, [r7, #24]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	f000 8129 	beq.w	800c6a2 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	69ba      	ldr	r2, [r7, #24]
 800c454:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800c456:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c458:	69b8      	ldr	r0, [r7, #24]
 800c45a:	f7ff f8c1 	bl	800b5e0 <tcp_oos_insert_segment>
                  }
                  break;
 800c45e:	e120      	b.n	800c6a2 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800c460:	4b22      	ldr	r3, [pc, #136]	; (800c4ec <tcp_receive+0xd04>)
 800c462:	681a      	ldr	r2, [r3, #0]
 800c464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c466:	68db      	ldr	r3, [r3, #12]
 800c468:	685b      	ldr	r3, [r3, #4]
 800c46a:	1ad3      	subs	r3, r2, r3
 800c46c:	3b01      	subs	r3, #1
 800c46e:	2b00      	cmp	r3, #0
 800c470:	db3e      	blt.n	800c4f0 <tcp_receive+0xd08>
 800c472:	4b1e      	ldr	r3, [pc, #120]	; (800c4ec <tcp_receive+0xd04>)
 800c474:	681a      	ldr	r2, [r3, #0]
 800c476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c478:	68db      	ldr	r3, [r3, #12]
 800c47a:	685b      	ldr	r3, [r3, #4]
 800c47c:	1ad3      	subs	r3, r2, r3
 800c47e:	3301      	adds	r3, #1
 800c480:	2b00      	cmp	r3, #0
 800c482:	dc35      	bgt.n	800c4f0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c484:	4818      	ldr	r0, [pc, #96]	; (800c4e8 <tcp_receive+0xd00>)
 800c486:	f7fd fb5b 	bl	8009b40 <tcp_seg_copy>
 800c48a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800c48c:	69fb      	ldr	r3, [r7, #28]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	f000 8109 	beq.w	800c6a6 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800c494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c496:	68db      	ldr	r3, [r3, #12]
 800c498:	685b      	ldr	r3, [r3, #4]
 800c49a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c49c:	8912      	ldrh	r2, [r2, #8]
 800c49e:	441a      	add	r2, r3
 800c4a0:	4b12      	ldr	r3, [pc, #72]	; (800c4ec <tcp_receive+0xd04>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	1ad3      	subs	r3, r2, r3
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	dd12      	ble.n	800c4d0 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800c4aa:	4b10      	ldr	r3, [pc, #64]	; (800c4ec <tcp_receive+0xd04>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	b29a      	uxth	r2, r3
 800c4b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4b2:	68db      	ldr	r3, [r3, #12]
 800c4b4:	685b      	ldr	r3, [r3, #4]
 800c4b6:	b29b      	uxth	r3, r3
 800c4b8:	1ad3      	subs	r3, r2, r3
 800c4ba:	b29a      	uxth	r2, r3
 800c4bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4be:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800c4c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4c2:	685a      	ldr	r2, [r3, #4]
 800c4c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4c6:	891b      	ldrh	r3, [r3, #8]
 800c4c8:	4619      	mov	r1, r3
 800c4ca:	4610      	mov	r0, r2
 800c4cc:	f7fb ff26 	bl	800831c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800c4d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4d2:	69fa      	ldr	r2, [r7, #28]
 800c4d4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800c4d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c4d8:	69f8      	ldr	r0, [r7, #28]
 800c4da:	f7ff f881 	bl	800b5e0 <tcp_oos_insert_segment>
                  }
                  break;
 800c4de:	e0e2      	b.n	800c6a6 <tcp_receive+0xebe>
 800c4e0:	2000a770 	.word	0x2000a770
 800c4e4:	2000a76d 	.word	0x2000a76d
 800c4e8:	2000a740 	.word	0x2000a740
 800c4ec:	2000a760 	.word	0x2000a760
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800c4f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4f2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800c4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	f040 80c6 	bne.w	800c68a <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800c4fe:	4b80      	ldr	r3, [pc, #512]	; (800c700 <tcp_receive+0xf18>)
 800c500:	681a      	ldr	r2, [r3, #0]
 800c502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c504:	68db      	ldr	r3, [r3, #12]
 800c506:	685b      	ldr	r3, [r3, #4]
 800c508:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	f340 80bd 	ble.w	800c68a <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c512:	68db      	ldr	r3, [r3, #12]
 800c514:	899b      	ldrh	r3, [r3, #12]
 800c516:	b29b      	uxth	r3, r3
 800c518:	4618      	mov	r0, r3
 800c51a:	f7fa fd27 	bl	8006f6c <lwip_htons>
 800c51e:	4603      	mov	r3, r0
 800c520:	b2db      	uxtb	r3, r3
 800c522:	f003 0301 	and.w	r3, r3, #1
 800c526:	2b00      	cmp	r3, #0
 800c528:	f040 80bf 	bne.w	800c6aa <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800c52c:	4875      	ldr	r0, [pc, #468]	; (800c704 <tcp_receive+0xf1c>)
 800c52e:	f7fd fb07 	bl	8009b40 <tcp_seg_copy>
 800c532:	4602      	mov	r2, r0
 800c534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c536:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800c538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	f000 80b6 	beq.w	800c6ae <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800c542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c544:	68db      	ldr	r3, [r3, #12]
 800c546:	685b      	ldr	r3, [r3, #4]
 800c548:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c54a:	8912      	ldrh	r2, [r2, #8]
 800c54c:	441a      	add	r2, r3
 800c54e:	4b6c      	ldr	r3, [pc, #432]	; (800c700 <tcp_receive+0xf18>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	1ad3      	subs	r3, r2, r3
 800c554:	2b00      	cmp	r3, #0
 800c556:	dd12      	ble.n	800c57e <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800c558:	4b69      	ldr	r3, [pc, #420]	; (800c700 <tcp_receive+0xf18>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	b29a      	uxth	r2, r3
 800c55e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c560:	68db      	ldr	r3, [r3, #12]
 800c562:	685b      	ldr	r3, [r3, #4]
 800c564:	b29b      	uxth	r3, r3
 800c566:	1ad3      	subs	r3, r2, r3
 800c568:	b29a      	uxth	r2, r3
 800c56a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c56c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800c56e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c570:	685a      	ldr	r2, [r3, #4]
 800c572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c574:	891b      	ldrh	r3, [r3, #8]
 800c576:	4619      	mov	r1, r3
 800c578:	4610      	mov	r0, r2
 800c57a:	f7fb fecf 	bl	800831c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800c57e:	4b62      	ldr	r3, [pc, #392]	; (800c708 <tcp_receive+0xf20>)
 800c580:	881b      	ldrh	r3, [r3, #0]
 800c582:	461a      	mov	r2, r3
 800c584:	4b5e      	ldr	r3, [pc, #376]	; (800c700 <tcp_receive+0xf18>)
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	441a      	add	r2, r3
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c58e:	6879      	ldr	r1, [r7, #4]
 800c590:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c592:	440b      	add	r3, r1
 800c594:	1ad3      	subs	r3, r2, r3
 800c596:	2b00      	cmp	r3, #0
 800c598:	f340 8089 	ble.w	800c6ae <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800c59c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	68db      	ldr	r3, [r3, #12]
 800c5a2:	899b      	ldrh	r3, [r3, #12]
 800c5a4:	b29b      	uxth	r3, r3
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f7fa fce0 	bl	8006f6c <lwip_htons>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	b2db      	uxtb	r3, r3
 800c5b0:	f003 0301 	and.w	r3, r3, #1
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d022      	beq.n	800c5fe <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800c5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	68db      	ldr	r3, [r3, #12]
 800c5be:	899b      	ldrh	r3, [r3, #12]
 800c5c0:	b29b      	uxth	r3, r3
 800c5c2:	b21b      	sxth	r3, r3
 800c5c4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c5c8:	b21c      	sxth	r4, r3
 800c5ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	68db      	ldr	r3, [r3, #12]
 800c5d0:	899b      	ldrh	r3, [r3, #12]
 800c5d2:	b29b      	uxth	r3, r3
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	f7fa fcc9 	bl	8006f6c <lwip_htons>
 800c5da:	4603      	mov	r3, r0
 800c5dc:	b2db      	uxtb	r3, r3
 800c5de:	b29b      	uxth	r3, r3
 800c5e0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c5e4:	b29b      	uxth	r3, r3
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f7fa fcc0 	bl	8006f6c <lwip_htons>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	b21b      	sxth	r3, r3
 800c5f0:	4323      	orrs	r3, r4
 800c5f2:	b21a      	sxth	r2, r3
 800c5f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	68db      	ldr	r3, [r3, #12]
 800c5fa:	b292      	uxth	r2, r2
 800c5fc:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c602:	b29a      	uxth	r2, r3
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c608:	4413      	add	r3, r2
 800c60a:	b299      	uxth	r1, r3
 800c60c:	4b3c      	ldr	r3, [pc, #240]	; (800c700 <tcp_receive+0xf18>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	b29a      	uxth	r2, r3
 800c612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	1a8a      	subs	r2, r1, r2
 800c618:	b292      	uxth	r2, r2
 800c61a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800c61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	685a      	ldr	r2, [r3, #4]
 800c622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	891b      	ldrh	r3, [r3, #8]
 800c628:	4619      	mov	r1, r3
 800c62a:	4610      	mov	r0, r2
 800c62c:	f7fb fe76 	bl	800831c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800c630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	891c      	ldrh	r4, [r3, #8]
 800c636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	68db      	ldr	r3, [r3, #12]
 800c63c:	899b      	ldrh	r3, [r3, #12]
 800c63e:	b29b      	uxth	r3, r3
 800c640:	4618      	mov	r0, r3
 800c642:	f7fa fc93 	bl	8006f6c <lwip_htons>
 800c646:	4603      	mov	r3, r0
 800c648:	b2db      	uxtb	r3, r3
 800c64a:	f003 0303 	and.w	r3, r3, #3
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d001      	beq.n	800c656 <tcp_receive+0xe6e>
 800c652:	2301      	movs	r3, #1
 800c654:	e000      	b.n	800c658 <tcp_receive+0xe70>
 800c656:	2300      	movs	r3, #0
 800c658:	4423      	add	r3, r4
 800c65a:	b29a      	uxth	r2, r3
 800c65c:	4b2a      	ldr	r3, [pc, #168]	; (800c708 <tcp_receive+0xf20>)
 800c65e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c660:	4b29      	ldr	r3, [pc, #164]	; (800c708 <tcp_receive+0xf20>)
 800c662:	881b      	ldrh	r3, [r3, #0]
 800c664:	461a      	mov	r2, r3
 800c666:	4b26      	ldr	r3, [pc, #152]	; (800c700 <tcp_receive+0xf18>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	441a      	add	r2, r3
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c670:	6879      	ldr	r1, [r7, #4]
 800c672:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c674:	440b      	add	r3, r1
 800c676:	429a      	cmp	r2, r3
 800c678:	d019      	beq.n	800c6ae <tcp_receive+0xec6>
 800c67a:	4b24      	ldr	r3, [pc, #144]	; (800c70c <tcp_receive+0xf24>)
 800c67c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800c680:	4923      	ldr	r1, [pc, #140]	; (800c710 <tcp_receive+0xf28>)
 800c682:	4824      	ldr	r0, [pc, #144]	; (800c714 <tcp_receive+0xf2c>)
 800c684:	f005 f9c8 	bl	8011a18 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800c688:	e011      	b.n	800c6ae <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c68a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	63bb      	str	r3, [r7, #56]	; 0x38
 800c690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c692:	2b00      	cmp	r3, #0
 800c694:	f47f aea4 	bne.w	800c3e0 <tcp_receive+0xbf8>
 800c698:	e00a      	b.n	800c6b0 <tcp_receive+0xec8>
                break;
 800c69a:	bf00      	nop
 800c69c:	e008      	b.n	800c6b0 <tcp_receive+0xec8>
                break;
 800c69e:	bf00      	nop
 800c6a0:	e006      	b.n	800c6b0 <tcp_receive+0xec8>
                  break;
 800c6a2:	bf00      	nop
 800c6a4:	e004      	b.n	800c6b0 <tcp_receive+0xec8>
                  break;
 800c6a6:	bf00      	nop
 800c6a8:	e002      	b.n	800c6b0 <tcp_receive+0xec8>
                  break;
 800c6aa:	bf00      	nop
 800c6ac:	e000      	b.n	800c6b0 <tcp_receive+0xec8>
                break;
 800c6ae:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f001 fa33 	bl	800db1c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800c6b6:	e003      	b.n	800c6c0 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	f001 fa2f 	bl	800db1c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c6be:	e01a      	b.n	800c6f6 <tcp_receive+0xf0e>
 800c6c0:	e019      	b.n	800c6f6 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800c6c2:	4b0f      	ldr	r3, [pc, #60]	; (800c700 <tcp_receive+0xf18>)
 800c6c4:	681a      	ldr	r2, [r3, #0]
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6ca:	1ad3      	subs	r3, r2, r3
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	db0a      	blt.n	800c6e6 <tcp_receive+0xefe>
 800c6d0:	4b0b      	ldr	r3, [pc, #44]	; (800c700 <tcp_receive+0xf18>)
 800c6d2:	681a      	ldr	r2, [r3, #0]
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6d8:	6879      	ldr	r1, [r7, #4]
 800c6da:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c6dc:	440b      	add	r3, r1
 800c6de:	1ad3      	subs	r3, r2, r3
 800c6e0:	3301      	adds	r3, #1
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	dd07      	ble.n	800c6f6 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	8b5b      	ldrh	r3, [r3, #26]
 800c6ea:	f043 0302 	orr.w	r3, r3, #2
 800c6ee:	b29a      	uxth	r2, r3
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800c6f4:	e7ff      	b.n	800c6f6 <tcp_receive+0xf0e>
 800c6f6:	bf00      	nop
 800c6f8:	3750      	adds	r7, #80	; 0x50
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bdb0      	pop	{r4, r5, r7, pc}
 800c6fe:	bf00      	nop
 800c700:	2000a760 	.word	0x2000a760
 800c704:	2000a740 	.word	0x2000a740
 800c708:	2000a76a 	.word	0x2000a76a
 800c70c:	08014c38 	.word	0x08014c38
 800c710:	08014fe0 	.word	0x08014fe0
 800c714:	08014c84 	.word	0x08014c84

0800c718 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800c718:	b480      	push	{r7}
 800c71a:	b083      	sub	sp, #12
 800c71c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800c71e:	4b15      	ldr	r3, [pc, #84]	; (800c774 <tcp_get_next_optbyte+0x5c>)
 800c720:	881b      	ldrh	r3, [r3, #0]
 800c722:	1c5a      	adds	r2, r3, #1
 800c724:	b291      	uxth	r1, r2
 800c726:	4a13      	ldr	r2, [pc, #76]	; (800c774 <tcp_get_next_optbyte+0x5c>)
 800c728:	8011      	strh	r1, [r2, #0]
 800c72a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c72c:	4b12      	ldr	r3, [pc, #72]	; (800c778 <tcp_get_next_optbyte+0x60>)
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d004      	beq.n	800c73e <tcp_get_next_optbyte+0x26>
 800c734:	4b11      	ldr	r3, [pc, #68]	; (800c77c <tcp_get_next_optbyte+0x64>)
 800c736:	881b      	ldrh	r3, [r3, #0]
 800c738:	88fa      	ldrh	r2, [r7, #6]
 800c73a:	429a      	cmp	r2, r3
 800c73c:	d208      	bcs.n	800c750 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800c73e:	4b10      	ldr	r3, [pc, #64]	; (800c780 <tcp_get_next_optbyte+0x68>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	3314      	adds	r3, #20
 800c744:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800c746:	88fb      	ldrh	r3, [r7, #6]
 800c748:	683a      	ldr	r2, [r7, #0]
 800c74a:	4413      	add	r3, r2
 800c74c:	781b      	ldrb	r3, [r3, #0]
 800c74e:	e00b      	b.n	800c768 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800c750:	88fb      	ldrh	r3, [r7, #6]
 800c752:	b2da      	uxtb	r2, r3
 800c754:	4b09      	ldr	r3, [pc, #36]	; (800c77c <tcp_get_next_optbyte+0x64>)
 800c756:	881b      	ldrh	r3, [r3, #0]
 800c758:	b2db      	uxtb	r3, r3
 800c75a:	1ad3      	subs	r3, r2, r3
 800c75c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800c75e:	4b06      	ldr	r3, [pc, #24]	; (800c778 <tcp_get_next_optbyte+0x60>)
 800c760:	681a      	ldr	r2, [r3, #0]
 800c762:	797b      	ldrb	r3, [r7, #5]
 800c764:	4413      	add	r3, r2
 800c766:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c768:	4618      	mov	r0, r3
 800c76a:	370c      	adds	r7, #12
 800c76c:	46bd      	mov	sp, r7
 800c76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c772:	4770      	bx	lr
 800c774:	2000a75c 	.word	0x2000a75c
 800c778:	2000a758 	.word	0x2000a758
 800c77c:	2000a756 	.word	0x2000a756
 800c780:	2000a750 	.word	0x2000a750

0800c784 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b084      	sub	sp, #16
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d106      	bne.n	800c7a0 <tcp_parseopt+0x1c>
 800c792:	4b32      	ldr	r3, [pc, #200]	; (800c85c <tcp_parseopt+0xd8>)
 800c794:	f240 727d 	movw	r2, #1917	; 0x77d
 800c798:	4931      	ldr	r1, [pc, #196]	; (800c860 <tcp_parseopt+0xdc>)
 800c79a:	4832      	ldr	r0, [pc, #200]	; (800c864 <tcp_parseopt+0xe0>)
 800c79c:	f005 f93c 	bl	8011a18 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800c7a0:	4b31      	ldr	r3, [pc, #196]	; (800c868 <tcp_parseopt+0xe4>)
 800c7a2:	881b      	ldrh	r3, [r3, #0]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d055      	beq.n	800c854 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c7a8:	4b30      	ldr	r3, [pc, #192]	; (800c86c <tcp_parseopt+0xe8>)
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	801a      	strh	r2, [r3, #0]
 800c7ae:	e045      	b.n	800c83c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800c7b0:	f7ff ffb2 	bl	800c718 <tcp_get_next_optbyte>
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800c7b8:	7bfb      	ldrb	r3, [r7, #15]
 800c7ba:	2b02      	cmp	r3, #2
 800c7bc:	d006      	beq.n	800c7cc <tcp_parseopt+0x48>
 800c7be:	2b02      	cmp	r3, #2
 800c7c0:	dc2b      	bgt.n	800c81a <tcp_parseopt+0x96>
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d041      	beq.n	800c84a <tcp_parseopt+0xc6>
 800c7c6:	2b01      	cmp	r3, #1
 800c7c8:	d127      	bne.n	800c81a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800c7ca:	e037      	b.n	800c83c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800c7cc:	f7ff ffa4 	bl	800c718 <tcp_get_next_optbyte>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	2b04      	cmp	r3, #4
 800c7d4:	d13b      	bne.n	800c84e <tcp_parseopt+0xca>
 800c7d6:	4b25      	ldr	r3, [pc, #148]	; (800c86c <tcp_parseopt+0xe8>)
 800c7d8:	881b      	ldrh	r3, [r3, #0]
 800c7da:	3301      	adds	r3, #1
 800c7dc:	4a22      	ldr	r2, [pc, #136]	; (800c868 <tcp_parseopt+0xe4>)
 800c7de:	8812      	ldrh	r2, [r2, #0]
 800c7e0:	4293      	cmp	r3, r2
 800c7e2:	da34      	bge.n	800c84e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800c7e4:	f7ff ff98 	bl	800c718 <tcp_get_next_optbyte>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	b29b      	uxth	r3, r3
 800c7ec:	021b      	lsls	r3, r3, #8
 800c7ee:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800c7f0:	f7ff ff92 	bl	800c718 <tcp_get_next_optbyte>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	b29a      	uxth	r2, r3
 800c7f8:	89bb      	ldrh	r3, [r7, #12]
 800c7fa:	4313      	orrs	r3, r2
 800c7fc:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800c7fe:	89bb      	ldrh	r3, [r7, #12]
 800c800:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c804:	d804      	bhi.n	800c810 <tcp_parseopt+0x8c>
 800c806:	89bb      	ldrh	r3, [r7, #12]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d001      	beq.n	800c810 <tcp_parseopt+0x8c>
 800c80c:	89ba      	ldrh	r2, [r7, #12]
 800c80e:	e001      	b.n	800c814 <tcp_parseopt+0x90>
 800c810:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800c818:	e010      	b.n	800c83c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800c81a:	f7ff ff7d 	bl	800c718 <tcp_get_next_optbyte>
 800c81e:	4603      	mov	r3, r0
 800c820:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800c822:	7afb      	ldrb	r3, [r7, #11]
 800c824:	2b01      	cmp	r3, #1
 800c826:	d914      	bls.n	800c852 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800c828:	7afb      	ldrb	r3, [r7, #11]
 800c82a:	b29a      	uxth	r2, r3
 800c82c:	4b0f      	ldr	r3, [pc, #60]	; (800c86c <tcp_parseopt+0xe8>)
 800c82e:	881b      	ldrh	r3, [r3, #0]
 800c830:	4413      	add	r3, r2
 800c832:	b29b      	uxth	r3, r3
 800c834:	3b02      	subs	r3, #2
 800c836:	b29a      	uxth	r2, r3
 800c838:	4b0c      	ldr	r3, [pc, #48]	; (800c86c <tcp_parseopt+0xe8>)
 800c83a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c83c:	4b0b      	ldr	r3, [pc, #44]	; (800c86c <tcp_parseopt+0xe8>)
 800c83e:	881a      	ldrh	r2, [r3, #0]
 800c840:	4b09      	ldr	r3, [pc, #36]	; (800c868 <tcp_parseopt+0xe4>)
 800c842:	881b      	ldrh	r3, [r3, #0]
 800c844:	429a      	cmp	r2, r3
 800c846:	d3b3      	bcc.n	800c7b0 <tcp_parseopt+0x2c>
 800c848:	e004      	b.n	800c854 <tcp_parseopt+0xd0>
          return;
 800c84a:	bf00      	nop
 800c84c:	e002      	b.n	800c854 <tcp_parseopt+0xd0>
            return;
 800c84e:	bf00      	nop
 800c850:	e000      	b.n	800c854 <tcp_parseopt+0xd0>
            return;
 800c852:	bf00      	nop
      }
    }
  }
}
 800c854:	3710      	adds	r7, #16
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}
 800c85a:	bf00      	nop
 800c85c:	08014c38 	.word	0x08014c38
 800c860:	0801509c 	.word	0x0801509c
 800c864:	08014c84 	.word	0x08014c84
 800c868:	2000a754 	.word	0x2000a754
 800c86c:	2000a75c 	.word	0x2000a75c

0800c870 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800c870:	b480      	push	{r7}
 800c872:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800c874:	4b05      	ldr	r3, [pc, #20]	; (800c88c <tcp_trigger_input_pcb_close+0x1c>)
 800c876:	781b      	ldrb	r3, [r3, #0]
 800c878:	f043 0310 	orr.w	r3, r3, #16
 800c87c:	b2da      	uxtb	r2, r3
 800c87e:	4b03      	ldr	r3, [pc, #12]	; (800c88c <tcp_trigger_input_pcb_close+0x1c>)
 800c880:	701a      	strb	r2, [r3, #0]
}
 800c882:	bf00      	nop
 800c884:	46bd      	mov	sp, r7
 800c886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88a:	4770      	bx	lr
 800c88c:	2000a76d 	.word	0x2000a76d

0800c890 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b084      	sub	sp, #16
 800c894:	af00      	add	r7, sp, #0
 800c896:	60f8      	str	r0, [r7, #12]
 800c898:	60b9      	str	r1, [r7, #8]
 800c89a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d00a      	beq.n	800c8b8 <tcp_route+0x28>
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	7a1b      	ldrb	r3, [r3, #8]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d006      	beq.n	800c8b8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	7a1b      	ldrb	r3, [r3, #8]
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	f7fb fb5a 	bl	8007f68 <netif_get_by_index>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	e003      	b.n	800c8c0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800c8b8:	6878      	ldr	r0, [r7, #4]
 800c8ba:	f002 ffe3 	bl	800f884 <ip4_route>
 800c8be:	4603      	mov	r3, r0
  }
}
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	3710      	adds	r7, #16
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	bd80      	pop	{r7, pc}

0800c8c8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800c8c8:	b590      	push	{r4, r7, lr}
 800c8ca:	b087      	sub	sp, #28
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	60f8      	str	r0, [r7, #12]
 800c8d0:	60b9      	str	r1, [r7, #8]
 800c8d2:	603b      	str	r3, [r7, #0]
 800c8d4:	4613      	mov	r3, r2
 800c8d6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d105      	bne.n	800c8ea <tcp_create_segment+0x22>
 800c8de:	4b44      	ldr	r3, [pc, #272]	; (800c9f0 <tcp_create_segment+0x128>)
 800c8e0:	22a3      	movs	r2, #163	; 0xa3
 800c8e2:	4944      	ldr	r1, [pc, #272]	; (800c9f4 <tcp_create_segment+0x12c>)
 800c8e4:	4844      	ldr	r0, [pc, #272]	; (800c9f8 <tcp_create_segment+0x130>)
 800c8e6:	f005 f897 	bl	8011a18 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800c8ea:	68bb      	ldr	r3, [r7, #8]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d105      	bne.n	800c8fc <tcp_create_segment+0x34>
 800c8f0:	4b3f      	ldr	r3, [pc, #252]	; (800c9f0 <tcp_create_segment+0x128>)
 800c8f2:	22a4      	movs	r2, #164	; 0xa4
 800c8f4:	4941      	ldr	r1, [pc, #260]	; (800c9fc <tcp_create_segment+0x134>)
 800c8f6:	4840      	ldr	r0, [pc, #256]	; (800c9f8 <tcp_create_segment+0x130>)
 800c8f8:	f005 f88e 	bl	8011a18 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c8fc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c900:	009b      	lsls	r3, r3, #2
 800c902:	b2db      	uxtb	r3, r3
 800c904:	f003 0304 	and.w	r3, r3, #4
 800c908:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c90a:	2003      	movs	r0, #3
 800c90c:	f7fa ffa6 	bl	800785c <memp_malloc>
 800c910:	6138      	str	r0, [r7, #16]
 800c912:	693b      	ldr	r3, [r7, #16]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d104      	bne.n	800c922 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800c918:	68b8      	ldr	r0, [r7, #8]
 800c91a:	f7fb fe85 	bl	8008628 <pbuf_free>
    return NULL;
 800c91e:	2300      	movs	r3, #0
 800c920:	e061      	b.n	800c9e6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800c922:	693b      	ldr	r3, [r7, #16]
 800c924:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800c928:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800c92a:	693b      	ldr	r3, [r7, #16]
 800c92c:	2200      	movs	r2, #0
 800c92e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800c930:	693b      	ldr	r3, [r7, #16]
 800c932:	68ba      	ldr	r2, [r7, #8]
 800c934:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	891a      	ldrh	r2, [r3, #8]
 800c93a:	7dfb      	ldrb	r3, [r7, #23]
 800c93c:	b29b      	uxth	r3, r3
 800c93e:	429a      	cmp	r2, r3
 800c940:	d205      	bcs.n	800c94e <tcp_create_segment+0x86>
 800c942:	4b2b      	ldr	r3, [pc, #172]	; (800c9f0 <tcp_create_segment+0x128>)
 800c944:	22b0      	movs	r2, #176	; 0xb0
 800c946:	492e      	ldr	r1, [pc, #184]	; (800ca00 <tcp_create_segment+0x138>)
 800c948:	482b      	ldr	r0, [pc, #172]	; (800c9f8 <tcp_create_segment+0x130>)
 800c94a:	f005 f865 	bl	8011a18 <iprintf>
  seg->len = p->tot_len - optlen;
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	891a      	ldrh	r2, [r3, #8]
 800c952:	7dfb      	ldrb	r3, [r7, #23]
 800c954:	b29b      	uxth	r3, r3
 800c956:	1ad3      	subs	r3, r2, r3
 800c958:	b29a      	uxth	r2, r3
 800c95a:	693b      	ldr	r3, [r7, #16]
 800c95c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800c95e:	2114      	movs	r1, #20
 800c960:	68b8      	ldr	r0, [r7, #8]
 800c962:	f7fb fdcb 	bl	80084fc <pbuf_add_header>
 800c966:	4603      	mov	r3, r0
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d004      	beq.n	800c976 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800c96c:	6938      	ldr	r0, [r7, #16]
 800c96e:	f7fd f8ce 	bl	8009b0e <tcp_seg_free>
    return NULL;
 800c972:	2300      	movs	r3, #0
 800c974:	e037      	b.n	800c9e6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c976:	693b      	ldr	r3, [r7, #16]
 800c978:	685b      	ldr	r3, [r3, #4]
 800c97a:	685a      	ldr	r2, [r3, #4]
 800c97c:	693b      	ldr	r3, [r7, #16]
 800c97e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	8ada      	ldrh	r2, [r3, #22]
 800c984:	693b      	ldr	r3, [r7, #16]
 800c986:	68dc      	ldr	r4, [r3, #12]
 800c988:	4610      	mov	r0, r2
 800c98a:	f7fa faef 	bl	8006f6c <lwip_htons>
 800c98e:	4603      	mov	r3, r0
 800c990:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	8b1a      	ldrh	r2, [r3, #24]
 800c996:	693b      	ldr	r3, [r7, #16]
 800c998:	68dc      	ldr	r4, [r3, #12]
 800c99a:	4610      	mov	r0, r2
 800c99c:	f7fa fae6 	bl	8006f6c <lwip_htons>
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800c9a4:	693b      	ldr	r3, [r7, #16]
 800c9a6:	68dc      	ldr	r4, [r3, #12]
 800c9a8:	6838      	ldr	r0, [r7, #0]
 800c9aa:	f7fa faf4 	bl	8006f96 <lwip_htonl>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c9b2:	7dfb      	ldrb	r3, [r7, #23]
 800c9b4:	089b      	lsrs	r3, r3, #2
 800c9b6:	b2db      	uxtb	r3, r3
 800c9b8:	b29b      	uxth	r3, r3
 800c9ba:	3305      	adds	r3, #5
 800c9bc:	b29b      	uxth	r3, r3
 800c9be:	031b      	lsls	r3, r3, #12
 800c9c0:	b29a      	uxth	r2, r3
 800c9c2:	79fb      	ldrb	r3, [r7, #7]
 800c9c4:	b29b      	uxth	r3, r3
 800c9c6:	4313      	orrs	r3, r2
 800c9c8:	b29a      	uxth	r2, r3
 800c9ca:	693b      	ldr	r3, [r7, #16]
 800c9cc:	68dc      	ldr	r4, [r3, #12]
 800c9ce:	4610      	mov	r0, r2
 800c9d0:	f7fa facc 	bl	8006f6c <lwip_htons>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800c9d8:	693b      	ldr	r3, [r7, #16]
 800c9da:	68db      	ldr	r3, [r3, #12]
 800c9dc:	2200      	movs	r2, #0
 800c9de:	749a      	strb	r2, [r3, #18]
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	74da      	strb	r2, [r3, #19]
  return seg;
 800c9e4:	693b      	ldr	r3, [r7, #16]
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	371c      	adds	r7, #28
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd90      	pop	{r4, r7, pc}
 800c9ee:	bf00      	nop
 800c9f0:	080150b8 	.word	0x080150b8
 800c9f4:	080150ec 	.word	0x080150ec
 800c9f8:	0801510c 	.word	0x0801510c
 800c9fc:	08015134 	.word	0x08015134
 800ca00:	08015158 	.word	0x08015158

0800ca04 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800ca04:	b590      	push	{r4, r7, lr}
 800ca06:	b08b      	sub	sp, #44	; 0x2c
 800ca08:	af02      	add	r7, sp, #8
 800ca0a:	6078      	str	r0, [r7, #4]
 800ca0c:	460b      	mov	r3, r1
 800ca0e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800ca10:	2300      	movs	r3, #0
 800ca12:	61fb      	str	r3, [r7, #28]
 800ca14:	2300      	movs	r3, #0
 800ca16:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800ca18:	2300      	movs	r3, #0
 800ca1a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d106      	bne.n	800ca30 <tcp_split_unsent_seg+0x2c>
 800ca22:	4b95      	ldr	r3, [pc, #596]	; (800cc78 <tcp_split_unsent_seg+0x274>)
 800ca24:	f240 324b 	movw	r2, #843	; 0x34b
 800ca28:	4994      	ldr	r1, [pc, #592]	; (800cc7c <tcp_split_unsent_seg+0x278>)
 800ca2a:	4895      	ldr	r0, [pc, #596]	; (800cc80 <tcp_split_unsent_seg+0x27c>)
 800ca2c:	f004 fff4 	bl	8011a18 <iprintf>

  useg = pcb->unsent;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca34:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800ca36:	697b      	ldr	r3, [r7, #20]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d102      	bne.n	800ca42 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800ca3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ca40:	e116      	b.n	800cc70 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800ca42:	887b      	ldrh	r3, [r7, #2]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d109      	bne.n	800ca5c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800ca48:	4b8b      	ldr	r3, [pc, #556]	; (800cc78 <tcp_split_unsent_seg+0x274>)
 800ca4a:	f240 3253 	movw	r2, #851	; 0x353
 800ca4e:	498d      	ldr	r1, [pc, #564]	; (800cc84 <tcp_split_unsent_seg+0x280>)
 800ca50:	488b      	ldr	r0, [pc, #556]	; (800cc80 <tcp_split_unsent_seg+0x27c>)
 800ca52:	f004 ffe1 	bl	8011a18 <iprintf>
    return ERR_VAL;
 800ca56:	f06f 0305 	mvn.w	r3, #5
 800ca5a:	e109      	b.n	800cc70 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800ca5c:	697b      	ldr	r3, [r7, #20]
 800ca5e:	891b      	ldrh	r3, [r3, #8]
 800ca60:	887a      	ldrh	r2, [r7, #2]
 800ca62:	429a      	cmp	r2, r3
 800ca64:	d301      	bcc.n	800ca6a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800ca66:	2300      	movs	r3, #0
 800ca68:	e102      	b.n	800cc70 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ca6e:	887a      	ldrh	r2, [r7, #2]
 800ca70:	429a      	cmp	r2, r3
 800ca72:	d906      	bls.n	800ca82 <tcp_split_unsent_seg+0x7e>
 800ca74:	4b80      	ldr	r3, [pc, #512]	; (800cc78 <tcp_split_unsent_seg+0x274>)
 800ca76:	f240 325b 	movw	r2, #859	; 0x35b
 800ca7a:	4983      	ldr	r1, [pc, #524]	; (800cc88 <tcp_split_unsent_seg+0x284>)
 800ca7c:	4880      	ldr	r0, [pc, #512]	; (800cc80 <tcp_split_unsent_seg+0x27c>)
 800ca7e:	f004 ffcb 	bl	8011a18 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800ca82:	697b      	ldr	r3, [r7, #20]
 800ca84:	891b      	ldrh	r3, [r3, #8]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d106      	bne.n	800ca98 <tcp_split_unsent_seg+0x94>
 800ca8a:	4b7b      	ldr	r3, [pc, #492]	; (800cc78 <tcp_split_unsent_seg+0x274>)
 800ca8c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800ca90:	497e      	ldr	r1, [pc, #504]	; (800cc8c <tcp_split_unsent_seg+0x288>)
 800ca92:	487b      	ldr	r0, [pc, #492]	; (800cc80 <tcp_split_unsent_seg+0x27c>)
 800ca94:	f004 ffc0 	bl	8011a18 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800ca98:	697b      	ldr	r3, [r7, #20]
 800ca9a:	7a9b      	ldrb	r3, [r3, #10]
 800ca9c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800ca9e:	7bfb      	ldrb	r3, [r7, #15]
 800caa0:	009b      	lsls	r3, r3, #2
 800caa2:	b2db      	uxtb	r3, r3
 800caa4:	f003 0304 	and.w	r3, r3, #4
 800caa8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800caaa:	697b      	ldr	r3, [r7, #20]
 800caac:	891a      	ldrh	r2, [r3, #8]
 800caae:	887b      	ldrh	r3, [r7, #2]
 800cab0:	1ad3      	subs	r3, r2, r3
 800cab2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800cab4:	7bbb      	ldrb	r3, [r7, #14]
 800cab6:	b29a      	uxth	r2, r3
 800cab8:	89bb      	ldrh	r3, [r7, #12]
 800caba:	4413      	add	r3, r2
 800cabc:	b29b      	uxth	r3, r3
 800cabe:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cac2:	4619      	mov	r1, r3
 800cac4:	2036      	movs	r0, #54	; 0x36
 800cac6:	f7fb facb 	bl	8008060 <pbuf_alloc>
 800caca:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800cacc:	693b      	ldr	r3, [r7, #16]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	f000 80b7 	beq.w	800cc42 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800cad4:	697b      	ldr	r3, [r7, #20]
 800cad6:	685b      	ldr	r3, [r3, #4]
 800cad8:	891a      	ldrh	r2, [r3, #8]
 800cada:	697b      	ldr	r3, [r7, #20]
 800cadc:	891b      	ldrh	r3, [r3, #8]
 800cade:	1ad3      	subs	r3, r2, r3
 800cae0:	b29a      	uxth	r2, r3
 800cae2:	887b      	ldrh	r3, [r7, #2]
 800cae4:	4413      	add	r3, r2
 800cae6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800cae8:	697b      	ldr	r3, [r7, #20]
 800caea:	6858      	ldr	r0, [r3, #4]
 800caec:	693b      	ldr	r3, [r7, #16]
 800caee:	685a      	ldr	r2, [r3, #4]
 800caf0:	7bbb      	ldrb	r3, [r7, #14]
 800caf2:	18d1      	adds	r1, r2, r3
 800caf4:	897b      	ldrh	r3, [r7, #10]
 800caf6:	89ba      	ldrh	r2, [r7, #12]
 800caf8:	f7fb ff80 	bl	80089fc <pbuf_copy_partial>
 800cafc:	4603      	mov	r3, r0
 800cafe:	461a      	mov	r2, r3
 800cb00:	89bb      	ldrh	r3, [r7, #12]
 800cb02:	4293      	cmp	r3, r2
 800cb04:	f040 809f 	bne.w	800cc46 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	68db      	ldr	r3, [r3, #12]
 800cb0c:	899b      	ldrh	r3, [r3, #12]
 800cb0e:	b29b      	uxth	r3, r3
 800cb10:	4618      	mov	r0, r3
 800cb12:	f7fa fa2b 	bl	8006f6c <lwip_htons>
 800cb16:	4603      	mov	r3, r0
 800cb18:	b2db      	uxtb	r3, r3
 800cb1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cb1e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800cb20:	2300      	movs	r3, #0
 800cb22:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800cb24:	7efb      	ldrb	r3, [r7, #27]
 800cb26:	f003 0308 	and.w	r3, r3, #8
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d007      	beq.n	800cb3e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800cb2e:	7efb      	ldrb	r3, [r7, #27]
 800cb30:	f023 0308 	bic.w	r3, r3, #8
 800cb34:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800cb36:	7ebb      	ldrb	r3, [r7, #26]
 800cb38:	f043 0308 	orr.w	r3, r3, #8
 800cb3c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800cb3e:	7efb      	ldrb	r3, [r7, #27]
 800cb40:	f003 0301 	and.w	r3, r3, #1
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d007      	beq.n	800cb58 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800cb48:	7efb      	ldrb	r3, [r7, #27]
 800cb4a:	f023 0301 	bic.w	r3, r3, #1
 800cb4e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800cb50:	7ebb      	ldrb	r3, [r7, #26]
 800cb52:	f043 0301 	orr.w	r3, r3, #1
 800cb56:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800cb58:	697b      	ldr	r3, [r7, #20]
 800cb5a:	68db      	ldr	r3, [r3, #12]
 800cb5c:	685b      	ldr	r3, [r3, #4]
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f7fa fa19 	bl	8006f96 <lwip_htonl>
 800cb64:	4602      	mov	r2, r0
 800cb66:	887b      	ldrh	r3, [r7, #2]
 800cb68:	18d1      	adds	r1, r2, r3
 800cb6a:	7eba      	ldrb	r2, [r7, #26]
 800cb6c:	7bfb      	ldrb	r3, [r7, #15]
 800cb6e:	9300      	str	r3, [sp, #0]
 800cb70:	460b      	mov	r3, r1
 800cb72:	6939      	ldr	r1, [r7, #16]
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f7ff fea7 	bl	800c8c8 <tcp_create_segment>
 800cb7a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800cb7c:	69fb      	ldr	r3, [r7, #28]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d063      	beq.n	800cc4a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	685b      	ldr	r3, [r3, #4]
 800cb86:	4618      	mov	r0, r3
 800cb88:	f7fb fdd6 	bl	8008738 <pbuf_clen>
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	461a      	mov	r2, r3
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cb96:	1a9b      	subs	r3, r3, r2
 800cb98:	b29a      	uxth	r2, r3
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800cba0:	697b      	ldr	r3, [r7, #20]
 800cba2:	6858      	ldr	r0, [r3, #4]
 800cba4:	697b      	ldr	r3, [r7, #20]
 800cba6:	685b      	ldr	r3, [r3, #4]
 800cba8:	891a      	ldrh	r2, [r3, #8]
 800cbaa:	89bb      	ldrh	r3, [r7, #12]
 800cbac:	1ad3      	subs	r3, r2, r3
 800cbae:	b29b      	uxth	r3, r3
 800cbb0:	4619      	mov	r1, r3
 800cbb2:	f7fb fbb3 	bl	800831c <pbuf_realloc>
  useg->len -= remainder;
 800cbb6:	697b      	ldr	r3, [r7, #20]
 800cbb8:	891a      	ldrh	r2, [r3, #8]
 800cbba:	89bb      	ldrh	r3, [r7, #12]
 800cbbc:	1ad3      	subs	r3, r2, r3
 800cbbe:	b29a      	uxth	r2, r3
 800cbc0:	697b      	ldr	r3, [r7, #20]
 800cbc2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	68db      	ldr	r3, [r3, #12]
 800cbc8:	899b      	ldrh	r3, [r3, #12]
 800cbca:	b29c      	uxth	r4, r3
 800cbcc:	7efb      	ldrb	r3, [r7, #27]
 800cbce:	b29b      	uxth	r3, r3
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f7fa f9cb 	bl	8006f6c <lwip_htons>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	461a      	mov	r2, r3
 800cbda:	697b      	ldr	r3, [r7, #20]
 800cbdc:	68db      	ldr	r3, [r3, #12]
 800cbde:	4322      	orrs	r2, r4
 800cbe0:	b292      	uxth	r2, r2
 800cbe2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800cbe4:	697b      	ldr	r3, [r7, #20]
 800cbe6:	685b      	ldr	r3, [r3, #4]
 800cbe8:	4618      	mov	r0, r3
 800cbea:	f7fb fda5 	bl	8008738 <pbuf_clen>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	461a      	mov	r2, r3
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cbf8:	4413      	add	r3, r2
 800cbfa:	b29a      	uxth	r2, r3
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800cc02:	69fb      	ldr	r3, [r7, #28]
 800cc04:	685b      	ldr	r3, [r3, #4]
 800cc06:	4618      	mov	r0, r3
 800cc08:	f7fb fd96 	bl	8008738 <pbuf_clen>
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	461a      	mov	r2, r3
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cc16:	4413      	add	r3, r2
 800cc18:	b29a      	uxth	r2, r3
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800cc20:	697b      	ldr	r3, [r7, #20]
 800cc22:	681a      	ldr	r2, [r3, #0]
 800cc24:	69fb      	ldr	r3, [r7, #28]
 800cc26:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800cc28:	697b      	ldr	r3, [r7, #20]
 800cc2a:	69fa      	ldr	r2, [r7, #28]
 800cc2c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800cc2e:	69fb      	ldr	r3, [r7, #28]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d103      	bne.n	800cc3e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2200      	movs	r2, #0
 800cc3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800cc3e:	2300      	movs	r3, #0
 800cc40:	e016      	b.n	800cc70 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800cc42:	bf00      	nop
 800cc44:	e002      	b.n	800cc4c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800cc46:	bf00      	nop
 800cc48:	e000      	b.n	800cc4c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800cc4a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800cc4c:	69fb      	ldr	r3, [r7, #28]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d006      	beq.n	800cc60 <tcp_split_unsent_seg+0x25c>
 800cc52:	4b09      	ldr	r3, [pc, #36]	; (800cc78 <tcp_split_unsent_seg+0x274>)
 800cc54:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800cc58:	490d      	ldr	r1, [pc, #52]	; (800cc90 <tcp_split_unsent_seg+0x28c>)
 800cc5a:	4809      	ldr	r0, [pc, #36]	; (800cc80 <tcp_split_unsent_seg+0x27c>)
 800cc5c:	f004 fedc 	bl	8011a18 <iprintf>
  if (p != NULL) {
 800cc60:	693b      	ldr	r3, [r7, #16]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d002      	beq.n	800cc6c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800cc66:	6938      	ldr	r0, [r7, #16]
 800cc68:	f7fb fcde 	bl	8008628 <pbuf_free>
  }

  return ERR_MEM;
 800cc6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800cc70:	4618      	mov	r0, r3
 800cc72:	3724      	adds	r7, #36	; 0x24
 800cc74:	46bd      	mov	sp, r7
 800cc76:	bd90      	pop	{r4, r7, pc}
 800cc78:	080150b8 	.word	0x080150b8
 800cc7c:	0801544c 	.word	0x0801544c
 800cc80:	0801510c 	.word	0x0801510c
 800cc84:	08015470 	.word	0x08015470
 800cc88:	08015494 	.word	0x08015494
 800cc8c:	080154a4 	.word	0x080154a4
 800cc90:	080154b4 	.word	0x080154b4

0800cc94 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800cc94:	b590      	push	{r4, r7, lr}
 800cc96:	b085      	sub	sp, #20
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d106      	bne.n	800ccb0 <tcp_send_fin+0x1c>
 800cca2:	4b21      	ldr	r3, [pc, #132]	; (800cd28 <tcp_send_fin+0x94>)
 800cca4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800cca8:	4920      	ldr	r1, [pc, #128]	; (800cd2c <tcp_send_fin+0x98>)
 800ccaa:	4821      	ldr	r0, [pc, #132]	; (800cd30 <tcp_send_fin+0x9c>)
 800ccac:	f004 feb4 	bl	8011a18 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d02e      	beq.n	800cd16 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccbc:	60fb      	str	r3, [r7, #12]
 800ccbe:	e002      	b.n	800ccc6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d1f8      	bne.n	800ccc0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	68db      	ldr	r3, [r3, #12]
 800ccd2:	899b      	ldrh	r3, [r3, #12]
 800ccd4:	b29b      	uxth	r3, r3
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f7fa f948 	bl	8006f6c <lwip_htons>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	b2db      	uxtb	r3, r3
 800cce0:	f003 0307 	and.w	r3, r3, #7
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d116      	bne.n	800cd16 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	68db      	ldr	r3, [r3, #12]
 800ccec:	899b      	ldrh	r3, [r3, #12]
 800ccee:	b29c      	uxth	r4, r3
 800ccf0:	2001      	movs	r0, #1
 800ccf2:	f7fa f93b 	bl	8006f6c <lwip_htons>
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	461a      	mov	r2, r3
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	68db      	ldr	r3, [r3, #12]
 800ccfe:	4322      	orrs	r2, r4
 800cd00:	b292      	uxth	r2, r2
 800cd02:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	8b5b      	ldrh	r3, [r3, #26]
 800cd08:	f043 0320 	orr.w	r3, r3, #32
 800cd0c:	b29a      	uxth	r2, r3
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800cd12:	2300      	movs	r3, #0
 800cd14:	e004      	b.n	800cd20 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800cd16:	2101      	movs	r1, #1
 800cd18:	6878      	ldr	r0, [r7, #4]
 800cd1a:	f000 f80b 	bl	800cd34 <tcp_enqueue_flags>
 800cd1e:	4603      	mov	r3, r0
}
 800cd20:	4618      	mov	r0, r3
 800cd22:	3714      	adds	r7, #20
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd90      	pop	{r4, r7, pc}
 800cd28:	080150b8 	.word	0x080150b8
 800cd2c:	080154c0 	.word	0x080154c0
 800cd30:	0801510c 	.word	0x0801510c

0800cd34 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b08a      	sub	sp, #40	; 0x28
 800cd38:	af02      	add	r7, sp, #8
 800cd3a:	6078      	str	r0, [r7, #4]
 800cd3c:	460b      	mov	r3, r1
 800cd3e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800cd40:	2300      	movs	r3, #0
 800cd42:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800cd44:	2300      	movs	r3, #0
 800cd46:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800cd48:	78fb      	ldrb	r3, [r7, #3]
 800cd4a:	f003 0303 	and.w	r3, r3, #3
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d106      	bne.n	800cd60 <tcp_enqueue_flags+0x2c>
 800cd52:	4b67      	ldr	r3, [pc, #412]	; (800cef0 <tcp_enqueue_flags+0x1bc>)
 800cd54:	f240 4211 	movw	r2, #1041	; 0x411
 800cd58:	4966      	ldr	r1, [pc, #408]	; (800cef4 <tcp_enqueue_flags+0x1c0>)
 800cd5a:	4867      	ldr	r0, [pc, #412]	; (800cef8 <tcp_enqueue_flags+0x1c4>)
 800cd5c:	f004 fe5c 	bl	8011a18 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d106      	bne.n	800cd74 <tcp_enqueue_flags+0x40>
 800cd66:	4b62      	ldr	r3, [pc, #392]	; (800cef0 <tcp_enqueue_flags+0x1bc>)
 800cd68:	f240 4213 	movw	r2, #1043	; 0x413
 800cd6c:	4963      	ldr	r1, [pc, #396]	; (800cefc <tcp_enqueue_flags+0x1c8>)
 800cd6e:	4862      	ldr	r0, [pc, #392]	; (800cef8 <tcp_enqueue_flags+0x1c4>)
 800cd70:	f004 fe52 	bl	8011a18 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800cd74:	78fb      	ldrb	r3, [r7, #3]
 800cd76:	f003 0302 	and.w	r3, r3, #2
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d001      	beq.n	800cd82 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800cd7e:	2301      	movs	r3, #1
 800cd80:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cd82:	7ffb      	ldrb	r3, [r7, #31]
 800cd84:	009b      	lsls	r3, r3, #2
 800cd86:	b2db      	uxtb	r3, r3
 800cd88:	f003 0304 	and.w	r3, r3, #4
 800cd8c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800cd8e:	7dfb      	ldrb	r3, [r7, #23]
 800cd90:	b29b      	uxth	r3, r3
 800cd92:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cd96:	4619      	mov	r1, r3
 800cd98:	2036      	movs	r0, #54	; 0x36
 800cd9a:	f7fb f961 	bl	8008060 <pbuf_alloc>
 800cd9e:	6138      	str	r0, [r7, #16]
 800cda0:	693b      	ldr	r3, [r7, #16]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d109      	bne.n	800cdba <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	8b5b      	ldrh	r3, [r3, #26]
 800cdaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdae:	b29a      	uxth	r2, r3
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800cdb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cdb8:	e095      	b.n	800cee6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800cdba:	693b      	ldr	r3, [r7, #16]
 800cdbc:	895a      	ldrh	r2, [r3, #10]
 800cdbe:	7dfb      	ldrb	r3, [r7, #23]
 800cdc0:	b29b      	uxth	r3, r3
 800cdc2:	429a      	cmp	r2, r3
 800cdc4:	d206      	bcs.n	800cdd4 <tcp_enqueue_flags+0xa0>
 800cdc6:	4b4a      	ldr	r3, [pc, #296]	; (800cef0 <tcp_enqueue_flags+0x1bc>)
 800cdc8:	f240 4239 	movw	r2, #1081	; 0x439
 800cdcc:	494c      	ldr	r1, [pc, #304]	; (800cf00 <tcp_enqueue_flags+0x1cc>)
 800cdce:	484a      	ldr	r0, [pc, #296]	; (800cef8 <tcp_enqueue_flags+0x1c4>)
 800cdd0:	f004 fe22 	bl	8011a18 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800cdd8:	78fa      	ldrb	r2, [r7, #3]
 800cdda:	7ffb      	ldrb	r3, [r7, #31]
 800cddc:	9300      	str	r3, [sp, #0]
 800cdde:	460b      	mov	r3, r1
 800cde0:	6939      	ldr	r1, [r7, #16]
 800cde2:	6878      	ldr	r0, [r7, #4]
 800cde4:	f7ff fd70 	bl	800c8c8 <tcp_create_segment>
 800cde8:	60f8      	str	r0, [r7, #12]
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d109      	bne.n	800ce04 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	8b5b      	ldrh	r3, [r3, #26]
 800cdf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdf8:	b29a      	uxth	r2, r3
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800cdfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ce02:	e070      	b.n	800cee6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	68db      	ldr	r3, [r3, #12]
 800ce08:	f003 0303 	and.w	r3, r3, #3
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d006      	beq.n	800ce1e <tcp_enqueue_flags+0xea>
 800ce10:	4b37      	ldr	r3, [pc, #220]	; (800cef0 <tcp_enqueue_flags+0x1bc>)
 800ce12:	f240 4242 	movw	r2, #1090	; 0x442
 800ce16:	493b      	ldr	r1, [pc, #236]	; (800cf04 <tcp_enqueue_flags+0x1d0>)
 800ce18:	4837      	ldr	r0, [pc, #220]	; (800cef8 <tcp_enqueue_flags+0x1c4>)
 800ce1a:	f004 fdfd 	bl	8011a18 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	891b      	ldrh	r3, [r3, #8]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d006      	beq.n	800ce34 <tcp_enqueue_flags+0x100>
 800ce26:	4b32      	ldr	r3, [pc, #200]	; (800cef0 <tcp_enqueue_flags+0x1bc>)
 800ce28:	f240 4243 	movw	r2, #1091	; 0x443
 800ce2c:	4936      	ldr	r1, [pc, #216]	; (800cf08 <tcp_enqueue_flags+0x1d4>)
 800ce2e:	4832      	ldr	r0, [pc, #200]	; (800cef8 <tcp_enqueue_flags+0x1c4>)
 800ce30:	f004 fdf2 	bl	8011a18 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d103      	bne.n	800ce44 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	68fa      	ldr	r2, [r7, #12]
 800ce40:	66da      	str	r2, [r3, #108]	; 0x6c
 800ce42:	e00d      	b.n	800ce60 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce48:	61bb      	str	r3, [r7, #24]
 800ce4a:	e002      	b.n	800ce52 <tcp_enqueue_flags+0x11e>
 800ce4c:	69bb      	ldr	r3, [r7, #24]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	61bb      	str	r3, [r7, #24]
 800ce52:	69bb      	ldr	r3, [r7, #24]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d1f8      	bne.n	800ce4c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800ce5a:	69bb      	ldr	r3, [r7, #24]
 800ce5c:	68fa      	ldr	r2, [r7, #12]
 800ce5e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2200      	movs	r2, #0
 800ce64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800ce68:	78fb      	ldrb	r3, [r7, #3]
 800ce6a:	f003 0302 	and.w	r3, r3, #2
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d104      	bne.n	800ce7c <tcp_enqueue_flags+0x148>
 800ce72:	78fb      	ldrb	r3, [r7, #3]
 800ce74:	f003 0301 	and.w	r3, r3, #1
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d004      	beq.n	800ce86 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce80:	1c5a      	adds	r2, r3, #1
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800ce86:	78fb      	ldrb	r3, [r7, #3]
 800ce88:	f003 0301 	and.w	r3, r3, #1
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d006      	beq.n	800ce9e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	8b5b      	ldrh	r3, [r3, #26]
 800ce94:	f043 0320 	orr.w	r3, r3, #32
 800ce98:	b29a      	uxth	r2, r3
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	685b      	ldr	r3, [r3, #4]
 800cea2:	4618      	mov	r0, r3
 800cea4:	f7fb fc48 	bl	8008738 <pbuf_clen>
 800cea8:	4603      	mov	r3, r0
 800ceaa:	461a      	mov	r2, r3
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ceb2:	4413      	add	r3, r2
 800ceb4:	b29a      	uxth	r2, r3
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d00e      	beq.n	800cee4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d10a      	bne.n	800cee4 <tcp_enqueue_flags+0x1b0>
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d106      	bne.n	800cee4 <tcp_enqueue_flags+0x1b0>
 800ced6:	4b06      	ldr	r3, [pc, #24]	; (800cef0 <tcp_enqueue_flags+0x1bc>)
 800ced8:	f240 4265 	movw	r2, #1125	; 0x465
 800cedc:	490b      	ldr	r1, [pc, #44]	; (800cf0c <tcp_enqueue_flags+0x1d8>)
 800cede:	4806      	ldr	r0, [pc, #24]	; (800cef8 <tcp_enqueue_flags+0x1c4>)
 800cee0:	f004 fd9a 	bl	8011a18 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800cee4:	2300      	movs	r3, #0
}
 800cee6:	4618      	mov	r0, r3
 800cee8:	3720      	adds	r7, #32
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bd80      	pop	{r7, pc}
 800ceee:	bf00      	nop
 800cef0:	080150b8 	.word	0x080150b8
 800cef4:	080154dc 	.word	0x080154dc
 800cef8:	0801510c 	.word	0x0801510c
 800cefc:	08015534 	.word	0x08015534
 800cf00:	08015554 	.word	0x08015554
 800cf04:	08015590 	.word	0x08015590
 800cf08:	080155a8 	.word	0x080155a8
 800cf0c:	080155d4 	.word	0x080155d4

0800cf10 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800cf10:	b5b0      	push	{r4, r5, r7, lr}
 800cf12:	b08a      	sub	sp, #40	; 0x28
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d106      	bne.n	800cf2c <tcp_output+0x1c>
 800cf1e:	4b8a      	ldr	r3, [pc, #552]	; (800d148 <tcp_output+0x238>)
 800cf20:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800cf24:	4989      	ldr	r1, [pc, #548]	; (800d14c <tcp_output+0x23c>)
 800cf26:	488a      	ldr	r0, [pc, #552]	; (800d150 <tcp_output+0x240>)
 800cf28:	f004 fd76 	bl	8011a18 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	7d1b      	ldrb	r3, [r3, #20]
 800cf30:	2b01      	cmp	r3, #1
 800cf32:	d106      	bne.n	800cf42 <tcp_output+0x32>
 800cf34:	4b84      	ldr	r3, [pc, #528]	; (800d148 <tcp_output+0x238>)
 800cf36:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800cf3a:	4986      	ldr	r1, [pc, #536]	; (800d154 <tcp_output+0x244>)
 800cf3c:	4884      	ldr	r0, [pc, #528]	; (800d150 <tcp_output+0x240>)
 800cf3e:	f004 fd6b 	bl	8011a18 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800cf42:	4b85      	ldr	r3, [pc, #532]	; (800d158 <tcp_output+0x248>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	687a      	ldr	r2, [r7, #4]
 800cf48:	429a      	cmp	r2, r3
 800cf4a:	d101      	bne.n	800cf50 <tcp_output+0x40>
    return ERR_OK;
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	e1ce      	b.n	800d2ee <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cf5c:	4293      	cmp	r3, r2
 800cf5e:	bf28      	it	cs
 800cf60:	4613      	movcs	r3, r2
 800cf62:	b29b      	uxth	r3, r3
 800cf64:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf6a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800cf6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d10b      	bne.n	800cf8a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	8b5b      	ldrh	r3, [r3, #26]
 800cf76:	f003 0302 	and.w	r3, r3, #2
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	f000 81aa 	beq.w	800d2d4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800cf80:	6878      	ldr	r0, [r7, #4]
 800cf82:	f000 fdcb 	bl	800db1c <tcp_send_empty_ack>
 800cf86:	4603      	mov	r3, r0
 800cf88:	e1b1      	b.n	800d2ee <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800cf8a:	6879      	ldr	r1, [r7, #4]
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	3304      	adds	r3, #4
 800cf90:	461a      	mov	r2, r3
 800cf92:	6878      	ldr	r0, [r7, #4]
 800cf94:	f7ff fc7c 	bl	800c890 <tcp_route>
 800cf98:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800cf9a:	697b      	ldr	r3, [r7, #20]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d102      	bne.n	800cfa6 <tcp_output+0x96>
    return ERR_RTE;
 800cfa0:	f06f 0303 	mvn.w	r3, #3
 800cfa4:	e1a3      	b.n	800d2ee <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d003      	beq.n	800cfb4 <tcp_output+0xa4>
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d111      	bne.n	800cfd8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800cfb4:	697b      	ldr	r3, [r7, #20]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d002      	beq.n	800cfc0 <tcp_output+0xb0>
 800cfba:	697b      	ldr	r3, [r7, #20]
 800cfbc:	3304      	adds	r3, #4
 800cfbe:	e000      	b.n	800cfc2 <tcp_output+0xb2>
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800cfc4:	693b      	ldr	r3, [r7, #16]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d102      	bne.n	800cfd0 <tcp_output+0xc0>
      return ERR_RTE;
 800cfca:	f06f 0303 	mvn.w	r3, #3
 800cfce:	e18e      	b.n	800d2ee <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800cfd0:	693b      	ldr	r3, [r7, #16]
 800cfd2:	681a      	ldr	r2, [r3, #0]
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800cfd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfda:	68db      	ldr	r3, [r3, #12]
 800cfdc:	685b      	ldr	r3, [r3, #4]
 800cfde:	4618      	mov	r0, r3
 800cfe0:	f7f9 ffd9 	bl	8006f96 <lwip_htonl>
 800cfe4:	4602      	mov	r2, r0
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfea:	1ad3      	subs	r3, r2, r3
 800cfec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfee:	8912      	ldrh	r2, [r2, #8]
 800cff0:	4413      	add	r3, r2
 800cff2:	69ba      	ldr	r2, [r7, #24]
 800cff4:	429a      	cmp	r2, r3
 800cff6:	d227      	bcs.n	800d048 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cffe:	461a      	mov	r2, r3
 800d000:	69bb      	ldr	r3, [r7, #24]
 800d002:	4293      	cmp	r3, r2
 800d004:	d114      	bne.n	800d030 <tcp_output+0x120>
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d110      	bne.n	800d030 <tcp_output+0x120>
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d014:	2b00      	cmp	r3, #0
 800d016:	d10b      	bne.n	800d030 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2200      	movs	r2, #0
 800d01c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2201      	movs	r2, #1
 800d024:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2200      	movs	r2, #0
 800d02c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	8b5b      	ldrh	r3, [r3, #26]
 800d034:	f003 0302 	and.w	r3, r3, #2
 800d038:	2b00      	cmp	r3, #0
 800d03a:	f000 814d 	beq.w	800d2d8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	f000 fd6c 	bl	800db1c <tcp_send_empty_ack>
 800d044:	4603      	mov	r3, r0
 800d046:	e152      	b.n	800d2ee <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	2200      	movs	r2, #0
 800d04c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d054:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800d056:	6a3b      	ldr	r3, [r7, #32]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	f000 811c 	beq.w	800d296 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800d05e:	e002      	b.n	800d066 <tcp_output+0x156>
 800d060:	6a3b      	ldr	r3, [r7, #32]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	623b      	str	r3, [r7, #32]
 800d066:	6a3b      	ldr	r3, [r7, #32]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d1f8      	bne.n	800d060 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800d06e:	e112      	b.n	800d296 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800d070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d072:	68db      	ldr	r3, [r3, #12]
 800d074:	899b      	ldrh	r3, [r3, #12]
 800d076:	b29b      	uxth	r3, r3
 800d078:	4618      	mov	r0, r3
 800d07a:	f7f9 ff77 	bl	8006f6c <lwip_htons>
 800d07e:	4603      	mov	r3, r0
 800d080:	b2db      	uxtb	r3, r3
 800d082:	f003 0304 	and.w	r3, r3, #4
 800d086:	2b00      	cmp	r3, #0
 800d088:	d006      	beq.n	800d098 <tcp_output+0x188>
 800d08a:	4b2f      	ldr	r3, [pc, #188]	; (800d148 <tcp_output+0x238>)
 800d08c:	f240 5236 	movw	r2, #1334	; 0x536
 800d090:	4932      	ldr	r1, [pc, #200]	; (800d15c <tcp_output+0x24c>)
 800d092:	482f      	ldr	r0, [pc, #188]	; (800d150 <tcp_output+0x240>)
 800d094:	f004 fcc0 	bl	8011a18 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d01f      	beq.n	800d0e0 <tcp_output+0x1d0>
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	8b5b      	ldrh	r3, [r3, #26]
 800d0a4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d119      	bne.n	800d0e0 <tcp_output+0x1d0>
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d00b      	beq.n	800d0cc <tcp_output+0x1bc>
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d110      	bne.n	800d0e0 <tcp_output+0x1d0>
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0c2:	891a      	ldrh	r2, [r3, #8]
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d0c8:	429a      	cmp	r2, r3
 800d0ca:	d209      	bcs.n	800d0e0 <tcp_output+0x1d0>
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d004      	beq.n	800d0e0 <tcp_output+0x1d0>
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d0dc:	2b08      	cmp	r3, #8
 800d0de:	d901      	bls.n	800d0e4 <tcp_output+0x1d4>
 800d0e0:	2301      	movs	r3, #1
 800d0e2:	e000      	b.n	800d0e6 <tcp_output+0x1d6>
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d106      	bne.n	800d0f8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	8b5b      	ldrh	r3, [r3, #26]
 800d0ee:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	f000 80e4 	beq.w	800d2c0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	7d1b      	ldrb	r3, [r3, #20]
 800d0fc:	2b02      	cmp	r3, #2
 800d0fe:	d00d      	beq.n	800d11c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800d100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d102:	68db      	ldr	r3, [r3, #12]
 800d104:	899b      	ldrh	r3, [r3, #12]
 800d106:	b29c      	uxth	r4, r3
 800d108:	2010      	movs	r0, #16
 800d10a:	f7f9 ff2f 	bl	8006f6c <lwip_htons>
 800d10e:	4603      	mov	r3, r0
 800d110:	461a      	mov	r2, r3
 800d112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d114:	68db      	ldr	r3, [r3, #12]
 800d116:	4322      	orrs	r2, r4
 800d118:	b292      	uxth	r2, r2
 800d11a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800d11c:	697a      	ldr	r2, [r7, #20]
 800d11e:	6879      	ldr	r1, [r7, #4]
 800d120:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d122:	f000 f909 	bl	800d338 <tcp_output_segment>
 800d126:	4603      	mov	r3, r0
 800d128:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800d12a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d016      	beq.n	800d160 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	8b5b      	ldrh	r3, [r3, #26]
 800d136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d13a:	b29a      	uxth	r2, r3
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	835a      	strh	r2, [r3, #26]
      return err;
 800d140:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d144:	e0d3      	b.n	800d2ee <tcp_output+0x3de>
 800d146:	bf00      	nop
 800d148:	080150b8 	.word	0x080150b8
 800d14c:	080155fc 	.word	0x080155fc
 800d150:	0801510c 	.word	0x0801510c
 800d154:	08015614 	.word	0x08015614
 800d158:	2000a774 	.word	0x2000a774
 800d15c:	0801563c 	.word	0x0801563c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800d160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d162:	681a      	ldr	r2, [r3, #0]
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	7d1b      	ldrb	r3, [r3, #20]
 800d16c:	2b02      	cmp	r3, #2
 800d16e:	d006      	beq.n	800d17e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	8b5b      	ldrh	r3, [r3, #26]
 800d174:	f023 0303 	bic.w	r3, r3, #3
 800d178:	b29a      	uxth	r2, r3
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d180:	68db      	ldr	r3, [r3, #12]
 800d182:	685b      	ldr	r3, [r3, #4]
 800d184:	4618      	mov	r0, r3
 800d186:	f7f9 ff06 	bl	8006f96 <lwip_htonl>
 800d18a:	4604      	mov	r4, r0
 800d18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d18e:	891b      	ldrh	r3, [r3, #8]
 800d190:	461d      	mov	r5, r3
 800d192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d194:	68db      	ldr	r3, [r3, #12]
 800d196:	899b      	ldrh	r3, [r3, #12]
 800d198:	b29b      	uxth	r3, r3
 800d19a:	4618      	mov	r0, r3
 800d19c:	f7f9 fee6 	bl	8006f6c <lwip_htons>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	b2db      	uxtb	r3, r3
 800d1a4:	f003 0303 	and.w	r3, r3, #3
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d001      	beq.n	800d1b0 <tcp_output+0x2a0>
 800d1ac:	2301      	movs	r3, #1
 800d1ae:	e000      	b.n	800d1b2 <tcp_output+0x2a2>
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	442b      	add	r3, r5
 800d1b4:	4423      	add	r3, r4
 800d1b6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d1bc:	68bb      	ldr	r3, [r7, #8]
 800d1be:	1ad3      	subs	r3, r2, r3
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	da02      	bge.n	800d1ca <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	68ba      	ldr	r2, [r7, #8]
 800d1c8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800d1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1cc:	891b      	ldrh	r3, [r3, #8]
 800d1ce:	461c      	mov	r4, r3
 800d1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1d2:	68db      	ldr	r3, [r3, #12]
 800d1d4:	899b      	ldrh	r3, [r3, #12]
 800d1d6:	b29b      	uxth	r3, r3
 800d1d8:	4618      	mov	r0, r3
 800d1da:	f7f9 fec7 	bl	8006f6c <lwip_htons>
 800d1de:	4603      	mov	r3, r0
 800d1e0:	b2db      	uxtb	r3, r3
 800d1e2:	f003 0303 	and.w	r3, r3, #3
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d001      	beq.n	800d1ee <tcp_output+0x2de>
 800d1ea:	2301      	movs	r3, #1
 800d1ec:	e000      	b.n	800d1f0 <tcp_output+0x2e0>
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	4423      	add	r3, r4
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d049      	beq.n	800d28a <tcp_output+0x37a>
      seg->next = NULL;
 800d1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d200:	2b00      	cmp	r3, #0
 800d202:	d105      	bne.n	800d210 <tcp_output+0x300>
        pcb->unacked = seg;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d208:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800d20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d20c:	623b      	str	r3, [r7, #32]
 800d20e:	e03f      	b.n	800d290 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800d210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d212:	68db      	ldr	r3, [r3, #12]
 800d214:	685b      	ldr	r3, [r3, #4]
 800d216:	4618      	mov	r0, r3
 800d218:	f7f9 febd 	bl	8006f96 <lwip_htonl>
 800d21c:	4604      	mov	r4, r0
 800d21e:	6a3b      	ldr	r3, [r7, #32]
 800d220:	68db      	ldr	r3, [r3, #12]
 800d222:	685b      	ldr	r3, [r3, #4]
 800d224:	4618      	mov	r0, r3
 800d226:	f7f9 feb6 	bl	8006f96 <lwip_htonl>
 800d22a:	4603      	mov	r3, r0
 800d22c:	1ae3      	subs	r3, r4, r3
 800d22e:	2b00      	cmp	r3, #0
 800d230:	da24      	bge.n	800d27c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	3370      	adds	r3, #112	; 0x70
 800d236:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d238:	e002      	b.n	800d240 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800d23a:	69fb      	ldr	r3, [r7, #28]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d240:	69fb      	ldr	r3, [r7, #28]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d011      	beq.n	800d26c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d248:	69fb      	ldr	r3, [r7, #28]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	68db      	ldr	r3, [r3, #12]
 800d24e:	685b      	ldr	r3, [r3, #4]
 800d250:	4618      	mov	r0, r3
 800d252:	f7f9 fea0 	bl	8006f96 <lwip_htonl>
 800d256:	4604      	mov	r4, r0
 800d258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d25a:	68db      	ldr	r3, [r3, #12]
 800d25c:	685b      	ldr	r3, [r3, #4]
 800d25e:	4618      	mov	r0, r3
 800d260:	f7f9 fe99 	bl	8006f96 <lwip_htonl>
 800d264:	4603      	mov	r3, r0
 800d266:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800d268:	2b00      	cmp	r3, #0
 800d26a:	dbe6      	blt.n	800d23a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800d26c:	69fb      	ldr	r3, [r7, #28]
 800d26e:	681a      	ldr	r2, [r3, #0]
 800d270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d272:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800d274:	69fb      	ldr	r3, [r7, #28]
 800d276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d278:	601a      	str	r2, [r3, #0]
 800d27a:	e009      	b.n	800d290 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800d27c:	6a3b      	ldr	r3, [r7, #32]
 800d27e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d280:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800d282:	6a3b      	ldr	r3, [r7, #32]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	623b      	str	r3, [r7, #32]
 800d288:	e002      	b.n	800d290 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800d28a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d28c:	f7fc fc3f 	bl	8009b0e <tcp_seg_free>
    }
    seg = pcb->unsent;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d294:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800d296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d012      	beq.n	800d2c2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800d29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d29e:	68db      	ldr	r3, [r3, #12]
 800d2a0:	685b      	ldr	r3, [r3, #4]
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f7f9 fe77 	bl	8006f96 <lwip_htonl>
 800d2a8:	4602      	mov	r2, r0
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2ae:	1ad3      	subs	r3, r2, r3
 800d2b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2b2:	8912      	ldrh	r2, [r2, #8]
 800d2b4:	4413      	add	r3, r2
  while (seg != NULL &&
 800d2b6:	69ba      	ldr	r2, [r7, #24]
 800d2b8:	429a      	cmp	r2, r3
 800d2ba:	f4bf aed9 	bcs.w	800d070 <tcp_output+0x160>
 800d2be:	e000      	b.n	800d2c2 <tcp_output+0x3b2>
      break;
 800d2c0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d108      	bne.n	800d2dc <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800d2d2:	e004      	b.n	800d2de <tcp_output+0x3ce>
    goto output_done;
 800d2d4:	bf00      	nop
 800d2d6:	e002      	b.n	800d2de <tcp_output+0x3ce>
    goto output_done;
 800d2d8:	bf00      	nop
 800d2da:	e000      	b.n	800d2de <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800d2dc:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	8b5b      	ldrh	r3, [r3, #26]
 800d2e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d2e6:	b29a      	uxth	r2, r3
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800d2ec:	2300      	movs	r3, #0
}
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	3728      	adds	r7, #40	; 0x28
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	bdb0      	pop	{r4, r5, r7, pc}
 800d2f6:	bf00      	nop

0800d2f8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b082      	sub	sp, #8
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d106      	bne.n	800d314 <tcp_output_segment_busy+0x1c>
 800d306:	4b09      	ldr	r3, [pc, #36]	; (800d32c <tcp_output_segment_busy+0x34>)
 800d308:	f240 529a 	movw	r2, #1434	; 0x59a
 800d30c:	4908      	ldr	r1, [pc, #32]	; (800d330 <tcp_output_segment_busy+0x38>)
 800d30e:	4809      	ldr	r0, [pc, #36]	; (800d334 <tcp_output_segment_busy+0x3c>)
 800d310:	f004 fb82 	bl	8011a18 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	685b      	ldr	r3, [r3, #4]
 800d318:	7b9b      	ldrb	r3, [r3, #14]
 800d31a:	2b01      	cmp	r3, #1
 800d31c:	d001      	beq.n	800d322 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800d31e:	2301      	movs	r3, #1
 800d320:	e000      	b.n	800d324 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800d322:	2300      	movs	r3, #0
}
 800d324:	4618      	mov	r0, r3
 800d326:	3708      	adds	r7, #8
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd80      	pop	{r7, pc}
 800d32c:	080150b8 	.word	0x080150b8
 800d330:	08015654 	.word	0x08015654
 800d334:	0801510c 	.word	0x0801510c

0800d338 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800d338:	b5b0      	push	{r4, r5, r7, lr}
 800d33a:	b08c      	sub	sp, #48	; 0x30
 800d33c:	af04      	add	r7, sp, #16
 800d33e:	60f8      	str	r0, [r7, #12]
 800d340:	60b9      	str	r1, [r7, #8]
 800d342:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d106      	bne.n	800d358 <tcp_output_segment+0x20>
 800d34a:	4b64      	ldr	r3, [pc, #400]	; (800d4dc <tcp_output_segment+0x1a4>)
 800d34c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800d350:	4963      	ldr	r1, [pc, #396]	; (800d4e0 <tcp_output_segment+0x1a8>)
 800d352:	4864      	ldr	r0, [pc, #400]	; (800d4e4 <tcp_output_segment+0x1ac>)
 800d354:	f004 fb60 	bl	8011a18 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800d358:	68bb      	ldr	r3, [r7, #8]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d106      	bne.n	800d36c <tcp_output_segment+0x34>
 800d35e:	4b5f      	ldr	r3, [pc, #380]	; (800d4dc <tcp_output_segment+0x1a4>)
 800d360:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800d364:	4960      	ldr	r1, [pc, #384]	; (800d4e8 <tcp_output_segment+0x1b0>)
 800d366:	485f      	ldr	r0, [pc, #380]	; (800d4e4 <tcp_output_segment+0x1ac>)
 800d368:	f004 fb56 	bl	8011a18 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d106      	bne.n	800d380 <tcp_output_segment+0x48>
 800d372:	4b5a      	ldr	r3, [pc, #360]	; (800d4dc <tcp_output_segment+0x1a4>)
 800d374:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800d378:	495c      	ldr	r1, [pc, #368]	; (800d4ec <tcp_output_segment+0x1b4>)
 800d37a:	485a      	ldr	r0, [pc, #360]	; (800d4e4 <tcp_output_segment+0x1ac>)
 800d37c:	f004 fb4c 	bl	8011a18 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800d380:	68f8      	ldr	r0, [r7, #12]
 800d382:	f7ff ffb9 	bl	800d2f8 <tcp_output_segment_busy>
 800d386:	4603      	mov	r3, r0
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d001      	beq.n	800d390 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800d38c:	2300      	movs	r3, #0
 800d38e:	e0a1      	b.n	800d4d4 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	68dc      	ldr	r4, [r3, #12]
 800d398:	4610      	mov	r0, r2
 800d39a:	f7f9 fdfc 	bl	8006f96 <lwip_htonl>
 800d39e:	4603      	mov	r3, r0
 800d3a0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d3a2:	68bb      	ldr	r3, [r7, #8]
 800d3a4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	68dc      	ldr	r4, [r3, #12]
 800d3aa:	4610      	mov	r0, r2
 800d3ac:	f7f9 fdde 	bl	8006f6c <lwip_htons>
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d3b4:	68bb      	ldr	r3, [r7, #8]
 800d3b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3b8:	68ba      	ldr	r2, [r7, #8]
 800d3ba:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800d3bc:	441a      	add	r2, r3
 800d3be:	68bb      	ldr	r3, [r7, #8]
 800d3c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	68db      	ldr	r3, [r3, #12]
 800d3c6:	3314      	adds	r3, #20
 800d3c8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	7a9b      	ldrb	r3, [r3, #10]
 800d3ce:	f003 0301 	and.w	r3, r3, #1
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d015      	beq.n	800d402 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800d3d6:	68bb      	ldr	r3, [r7, #8]
 800d3d8:	3304      	adds	r3, #4
 800d3da:	461a      	mov	r2, r3
 800d3dc:	6879      	ldr	r1, [r7, #4]
 800d3de:	f44f 7006 	mov.w	r0, #536	; 0x218
 800d3e2:	f7fc fe8b 	bl	800a0fc <tcp_eff_send_mss_netif>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800d3ea:	8b7b      	ldrh	r3, [r7, #26]
 800d3ec:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	f7f9 fdd0 	bl	8006f96 <lwip_htonl>
 800d3f6:	4602      	mov	r2, r0
 800d3f8:	69fb      	ldr	r3, [r7, #28]
 800d3fa:	601a      	str	r2, [r3, #0]
    opts += 1;
 800d3fc:	69fb      	ldr	r3, [r7, #28]
 800d3fe:	3304      	adds	r3, #4
 800d400:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800d402:	68bb      	ldr	r3, [r7, #8]
 800d404:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d408:	2b00      	cmp	r3, #0
 800d40a:	da02      	bge.n	800d412 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800d40c:	68bb      	ldr	r3, [r7, #8]
 800d40e:	2200      	movs	r2, #0
 800d410:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800d412:	68bb      	ldr	r3, [r7, #8]
 800d414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d416:	2b00      	cmp	r3, #0
 800d418:	d10c      	bne.n	800d434 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800d41a:	4b35      	ldr	r3, [pc, #212]	; (800d4f0 <tcp_output_segment+0x1b8>)
 800d41c:	681a      	ldr	r2, [r3, #0]
 800d41e:	68bb      	ldr	r3, [r7, #8]
 800d420:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	68db      	ldr	r3, [r3, #12]
 800d426:	685b      	ldr	r3, [r3, #4]
 800d428:	4618      	mov	r0, r3
 800d42a:	f7f9 fdb4 	bl	8006f96 <lwip_htonl>
 800d42e:	4602      	mov	r2, r0
 800d430:	68bb      	ldr	r3, [r7, #8]
 800d432:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	68da      	ldr	r2, [r3, #12]
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	685b      	ldr	r3, [r3, #4]
 800d43c:	685b      	ldr	r3, [r3, #4]
 800d43e:	1ad3      	subs	r3, r2, r3
 800d440:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	685b      	ldr	r3, [r3, #4]
 800d446:	8959      	ldrh	r1, [r3, #10]
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	685b      	ldr	r3, [r3, #4]
 800d44c:	8b3a      	ldrh	r2, [r7, #24]
 800d44e:	1a8a      	subs	r2, r1, r2
 800d450:	b292      	uxth	r2, r2
 800d452:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	685b      	ldr	r3, [r3, #4]
 800d458:	8919      	ldrh	r1, [r3, #8]
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	685b      	ldr	r3, [r3, #4]
 800d45e:	8b3a      	ldrh	r2, [r7, #24]
 800d460:	1a8a      	subs	r2, r1, r2
 800d462:	b292      	uxth	r2, r2
 800d464:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	685b      	ldr	r3, [r3, #4]
 800d46a:	68fa      	ldr	r2, [r7, #12]
 800d46c:	68d2      	ldr	r2, [r2, #12]
 800d46e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	68db      	ldr	r3, [r3, #12]
 800d474:	2200      	movs	r2, #0
 800d476:	741a      	strb	r2, [r3, #16]
 800d478:	2200      	movs	r2, #0
 800d47a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	68da      	ldr	r2, [r3, #12]
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	7a9b      	ldrb	r3, [r3, #10]
 800d484:	f003 0301 	and.w	r3, r3, #1
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d001      	beq.n	800d490 <tcp_output_segment+0x158>
 800d48c:	2318      	movs	r3, #24
 800d48e:	e000      	b.n	800d492 <tcp_output_segment+0x15a>
 800d490:	2314      	movs	r3, #20
 800d492:	4413      	add	r3, r2
 800d494:	69fa      	ldr	r2, [r7, #28]
 800d496:	429a      	cmp	r2, r3
 800d498:	d006      	beq.n	800d4a8 <tcp_output_segment+0x170>
 800d49a:	4b10      	ldr	r3, [pc, #64]	; (800d4dc <tcp_output_segment+0x1a4>)
 800d49c:	f240 621c 	movw	r2, #1564	; 0x61c
 800d4a0:	4914      	ldr	r1, [pc, #80]	; (800d4f4 <tcp_output_segment+0x1bc>)
 800d4a2:	4810      	ldr	r0, [pc, #64]	; (800d4e4 <tcp_output_segment+0x1ac>)
 800d4a4:	f004 fab8 	bl	8011a18 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	6858      	ldr	r0, [r3, #4]
 800d4ac:	68b9      	ldr	r1, [r7, #8]
 800d4ae:	68bb      	ldr	r3, [r7, #8]
 800d4b0:	1d1c      	adds	r4, r3, #4
 800d4b2:	68bb      	ldr	r3, [r7, #8]
 800d4b4:	7add      	ldrb	r5, [r3, #11]
 800d4b6:	68bb      	ldr	r3, [r7, #8]
 800d4b8:	7a9b      	ldrb	r3, [r3, #10]
 800d4ba:	687a      	ldr	r2, [r7, #4]
 800d4bc:	9202      	str	r2, [sp, #8]
 800d4be:	2206      	movs	r2, #6
 800d4c0:	9201      	str	r2, [sp, #4]
 800d4c2:	9300      	str	r3, [sp, #0]
 800d4c4:	462b      	mov	r3, r5
 800d4c6:	4622      	mov	r2, r4
 800d4c8:	f002 fb9a 	bl	800fc00 <ip4_output_if>
 800d4cc:	4603      	mov	r3, r0
 800d4ce:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800d4d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	3720      	adds	r7, #32
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	bdb0      	pop	{r4, r5, r7, pc}
 800d4dc:	080150b8 	.word	0x080150b8
 800d4e0:	0801567c 	.word	0x0801567c
 800d4e4:	0801510c 	.word	0x0801510c
 800d4e8:	0801569c 	.word	0x0801569c
 800d4ec:	080156bc 	.word	0x080156bc
 800d4f0:	2000a728 	.word	0x2000a728
 800d4f4:	080156e0 	.word	0x080156e0

0800d4f8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800d4f8:	b5b0      	push	{r4, r5, r7, lr}
 800d4fa:	b084      	sub	sp, #16
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d106      	bne.n	800d514 <tcp_rexmit_rto_prepare+0x1c>
 800d506:	4b31      	ldr	r3, [pc, #196]	; (800d5cc <tcp_rexmit_rto_prepare+0xd4>)
 800d508:	f240 6263 	movw	r2, #1635	; 0x663
 800d50c:	4930      	ldr	r1, [pc, #192]	; (800d5d0 <tcp_rexmit_rto_prepare+0xd8>)
 800d50e:	4831      	ldr	r0, [pc, #196]	; (800d5d4 <tcp_rexmit_rto_prepare+0xdc>)
 800d510:	f004 fa82 	bl	8011a18 <iprintf>

  if (pcb->unacked == NULL) {
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d102      	bne.n	800d522 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800d51c:	f06f 0305 	mvn.w	r3, #5
 800d520:	e050      	b.n	800d5c4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d526:	60fb      	str	r3, [r7, #12]
 800d528:	e00b      	b.n	800d542 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800d52a:	68f8      	ldr	r0, [r7, #12]
 800d52c:	f7ff fee4 	bl	800d2f8 <tcp_output_segment_busy>
 800d530:	4603      	mov	r3, r0
 800d532:	2b00      	cmp	r3, #0
 800d534:	d002      	beq.n	800d53c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800d536:	f06f 0305 	mvn.w	r3, #5
 800d53a:	e043      	b.n	800d5c4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	60fb      	str	r3, [r7, #12]
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d1ef      	bne.n	800d52a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800d54a:	68f8      	ldr	r0, [r7, #12]
 800d54c:	f7ff fed4 	bl	800d2f8 <tcp_output_segment_busy>
 800d550:	4603      	mov	r3, r0
 800d552:	2b00      	cmp	r3, #0
 800d554:	d002      	beq.n	800d55c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800d556:	f06f 0305 	mvn.w	r3, #5
 800d55a:	e033      	b.n	800d5c4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2200      	movs	r2, #0
 800d570:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	8b5b      	ldrh	r3, [r3, #26]
 800d576:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d57a:	b29a      	uxth	r2, r3
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	68db      	ldr	r3, [r3, #12]
 800d584:	685b      	ldr	r3, [r3, #4]
 800d586:	4618      	mov	r0, r3
 800d588:	f7f9 fd05 	bl	8006f96 <lwip_htonl>
 800d58c:	4604      	mov	r4, r0
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	891b      	ldrh	r3, [r3, #8]
 800d592:	461d      	mov	r5, r3
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	68db      	ldr	r3, [r3, #12]
 800d598:	899b      	ldrh	r3, [r3, #12]
 800d59a:	b29b      	uxth	r3, r3
 800d59c:	4618      	mov	r0, r3
 800d59e:	f7f9 fce5 	bl	8006f6c <lwip_htons>
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	b2db      	uxtb	r3, r3
 800d5a6:	f003 0303 	and.w	r3, r3, #3
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d001      	beq.n	800d5b2 <tcp_rexmit_rto_prepare+0xba>
 800d5ae:	2301      	movs	r3, #1
 800d5b0:	e000      	b.n	800d5b4 <tcp_rexmit_rto_prepare+0xbc>
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	442b      	add	r3, r5
 800d5b6:	18e2      	adds	r2, r4, r3
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	2200      	movs	r2, #0
 800d5c0:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800d5c2:	2300      	movs	r3, #0
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	3710      	adds	r7, #16
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bdb0      	pop	{r4, r5, r7, pc}
 800d5cc:	080150b8 	.word	0x080150b8
 800d5d0:	080156f4 	.word	0x080156f4
 800d5d4:	0801510c 	.word	0x0801510c

0800d5d8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b082      	sub	sp, #8
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d106      	bne.n	800d5f4 <tcp_rexmit_rto_commit+0x1c>
 800d5e6:	4b0d      	ldr	r3, [pc, #52]	; (800d61c <tcp_rexmit_rto_commit+0x44>)
 800d5e8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d5ec:	490c      	ldr	r1, [pc, #48]	; (800d620 <tcp_rexmit_rto_commit+0x48>)
 800d5ee:	480d      	ldr	r0, [pc, #52]	; (800d624 <tcp_rexmit_rto_commit+0x4c>)
 800d5f0:	f004 fa12 	bl	8011a18 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d5fa:	2bff      	cmp	r3, #255	; 0xff
 800d5fc:	d007      	beq.n	800d60e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d604:	3301      	adds	r3, #1
 800d606:	b2da      	uxtb	r2, r3
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800d60e:	6878      	ldr	r0, [r7, #4]
 800d610:	f7ff fc7e 	bl	800cf10 <tcp_output>
}
 800d614:	bf00      	nop
 800d616:	3708      	adds	r7, #8
 800d618:	46bd      	mov	sp, r7
 800d61a:	bd80      	pop	{r7, pc}
 800d61c:	080150b8 	.word	0x080150b8
 800d620:	08015718 	.word	0x08015718
 800d624:	0801510c 	.word	0x0801510c

0800d628 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b082      	sub	sp, #8
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d106      	bne.n	800d644 <tcp_rexmit_rto+0x1c>
 800d636:	4b0a      	ldr	r3, [pc, #40]	; (800d660 <tcp_rexmit_rto+0x38>)
 800d638:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800d63c:	4909      	ldr	r1, [pc, #36]	; (800d664 <tcp_rexmit_rto+0x3c>)
 800d63e:	480a      	ldr	r0, [pc, #40]	; (800d668 <tcp_rexmit_rto+0x40>)
 800d640:	f004 f9ea 	bl	8011a18 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800d644:	6878      	ldr	r0, [r7, #4]
 800d646:	f7ff ff57 	bl	800d4f8 <tcp_rexmit_rto_prepare>
 800d64a:	4603      	mov	r3, r0
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d102      	bne.n	800d656 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800d650:	6878      	ldr	r0, [r7, #4]
 800d652:	f7ff ffc1 	bl	800d5d8 <tcp_rexmit_rto_commit>
  }
}
 800d656:	bf00      	nop
 800d658:	3708      	adds	r7, #8
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}
 800d65e:	bf00      	nop
 800d660:	080150b8 	.word	0x080150b8
 800d664:	0801573c 	.word	0x0801573c
 800d668:	0801510c 	.word	0x0801510c

0800d66c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800d66c:	b590      	push	{r4, r7, lr}
 800d66e:	b085      	sub	sp, #20
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d106      	bne.n	800d688 <tcp_rexmit+0x1c>
 800d67a:	4b2f      	ldr	r3, [pc, #188]	; (800d738 <tcp_rexmit+0xcc>)
 800d67c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800d680:	492e      	ldr	r1, [pc, #184]	; (800d73c <tcp_rexmit+0xd0>)
 800d682:	482f      	ldr	r0, [pc, #188]	; (800d740 <tcp_rexmit+0xd4>)
 800d684:	f004 f9c8 	bl	8011a18 <iprintf>

  if (pcb->unacked == NULL) {
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d102      	bne.n	800d696 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800d690:	f06f 0305 	mvn.w	r3, #5
 800d694:	e04c      	b.n	800d730 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d69a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800d69c:	68b8      	ldr	r0, [r7, #8]
 800d69e:	f7ff fe2b 	bl	800d2f8 <tcp_output_segment_busy>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d002      	beq.n	800d6ae <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800d6a8:	f06f 0305 	mvn.w	r3, #5
 800d6ac:	e040      	b.n	800d730 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800d6ae:	68bb      	ldr	r3, [r7, #8]
 800d6b0:	681a      	ldr	r2, [r3, #0]
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	336c      	adds	r3, #108	; 0x6c
 800d6ba:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d6bc:	e002      	b.n	800d6c4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d011      	beq.n	800d6f0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	68db      	ldr	r3, [r3, #12]
 800d6d2:	685b      	ldr	r3, [r3, #4]
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	f7f9 fc5e 	bl	8006f96 <lwip_htonl>
 800d6da:	4604      	mov	r4, r0
 800d6dc:	68bb      	ldr	r3, [r7, #8]
 800d6de:	68db      	ldr	r3, [r3, #12]
 800d6e0:	685b      	ldr	r3, [r3, #4]
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	f7f9 fc57 	bl	8006f96 <lwip_htonl>
 800d6e8:	4603      	mov	r3, r0
 800d6ea:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	dbe6      	blt.n	800d6be <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	681a      	ldr	r2, [r3, #0]
 800d6f4:	68bb      	ldr	r3, [r7, #8]
 800d6f6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	68ba      	ldr	r2, [r7, #8]
 800d6fc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d103      	bne.n	800d70e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	2200      	movs	r2, #0
 800d70a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d714:	2bff      	cmp	r3, #255	; 0xff
 800d716:	d007      	beq.n	800d728 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d71e:	3301      	adds	r3, #1
 800d720:	b2da      	uxtb	r2, r3
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	2200      	movs	r2, #0
 800d72c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800d72e:	2300      	movs	r3, #0
}
 800d730:	4618      	mov	r0, r3
 800d732:	3714      	adds	r7, #20
 800d734:	46bd      	mov	sp, r7
 800d736:	bd90      	pop	{r4, r7, pc}
 800d738:	080150b8 	.word	0x080150b8
 800d73c:	08015758 	.word	0x08015758
 800d740:	0801510c 	.word	0x0801510c

0800d744 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b082      	sub	sp, #8
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d106      	bne.n	800d760 <tcp_rexmit_fast+0x1c>
 800d752:	4b2a      	ldr	r3, [pc, #168]	; (800d7fc <tcp_rexmit_fast+0xb8>)
 800d754:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800d758:	4929      	ldr	r1, [pc, #164]	; (800d800 <tcp_rexmit_fast+0xbc>)
 800d75a:	482a      	ldr	r0, [pc, #168]	; (800d804 <tcp_rexmit_fast+0xc0>)
 800d75c:	f004 f95c 	bl	8011a18 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d764:	2b00      	cmp	r3, #0
 800d766:	d045      	beq.n	800d7f4 <tcp_rexmit_fast+0xb0>
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	8b5b      	ldrh	r3, [r3, #26]
 800d76c:	f003 0304 	and.w	r3, r3, #4
 800d770:	2b00      	cmp	r3, #0
 800d772:	d13f      	bne.n	800d7f4 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800d774:	6878      	ldr	r0, [r7, #4]
 800d776:	f7ff ff79 	bl	800d66c <tcp_rexmit>
 800d77a:	4603      	mov	r3, r0
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d139      	bne.n	800d7f4 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d78c:	4293      	cmp	r3, r2
 800d78e:	bf28      	it	cs
 800d790:	4613      	movcs	r3, r2
 800d792:	b29b      	uxth	r3, r3
 800d794:	2b00      	cmp	r3, #0
 800d796:	da00      	bge.n	800d79a <tcp_rexmit_fast+0x56>
 800d798:	3301      	adds	r3, #1
 800d79a:	105b      	asrs	r3, r3, #1
 800d79c:	b29a      	uxth	r2, r3
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d7aa:	461a      	mov	r2, r3
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d7b0:	005b      	lsls	r3, r3, #1
 800d7b2:	429a      	cmp	r2, r3
 800d7b4:	d206      	bcs.n	800d7c4 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d7ba:	005b      	lsls	r3, r3, #1
 800d7bc:	b29a      	uxth	r2, r3
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d7ce:	4619      	mov	r1, r3
 800d7d0:	0049      	lsls	r1, r1, #1
 800d7d2:	440b      	add	r3, r1
 800d7d4:	b29b      	uxth	r3, r3
 800d7d6:	4413      	add	r3, r2
 800d7d8:	b29a      	uxth	r2, r3
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	8b5b      	ldrh	r3, [r3, #26]
 800d7e4:	f043 0304 	orr.w	r3, r3, #4
 800d7e8:	b29a      	uxth	r2, r3
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800d7f4:	bf00      	nop
 800d7f6:	3708      	adds	r7, #8
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd80      	pop	{r7, pc}
 800d7fc:	080150b8 	.word	0x080150b8
 800d800:	08015770 	.word	0x08015770
 800d804:	0801510c 	.word	0x0801510c

0800d808 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b086      	sub	sp, #24
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	60f8      	str	r0, [r7, #12]
 800d810:	607b      	str	r3, [r7, #4]
 800d812:	460b      	mov	r3, r1
 800d814:	817b      	strh	r3, [r7, #10]
 800d816:	4613      	mov	r3, r2
 800d818:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d81a:	897a      	ldrh	r2, [r7, #10]
 800d81c:	893b      	ldrh	r3, [r7, #8]
 800d81e:	4413      	add	r3, r2
 800d820:	b29b      	uxth	r3, r3
 800d822:	3314      	adds	r3, #20
 800d824:	b29b      	uxth	r3, r3
 800d826:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d82a:	4619      	mov	r1, r3
 800d82c:	2022      	movs	r0, #34	; 0x22
 800d82e:	f7fa fc17 	bl	8008060 <pbuf_alloc>
 800d832:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800d834:	697b      	ldr	r3, [r7, #20]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d04d      	beq.n	800d8d6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800d83a:	897b      	ldrh	r3, [r7, #10]
 800d83c:	3313      	adds	r3, #19
 800d83e:	697a      	ldr	r2, [r7, #20]
 800d840:	8952      	ldrh	r2, [r2, #10]
 800d842:	4293      	cmp	r3, r2
 800d844:	db06      	blt.n	800d854 <tcp_output_alloc_header_common+0x4c>
 800d846:	4b26      	ldr	r3, [pc, #152]	; (800d8e0 <tcp_output_alloc_header_common+0xd8>)
 800d848:	f240 7223 	movw	r2, #1827	; 0x723
 800d84c:	4925      	ldr	r1, [pc, #148]	; (800d8e4 <tcp_output_alloc_header_common+0xdc>)
 800d84e:	4826      	ldr	r0, [pc, #152]	; (800d8e8 <tcp_output_alloc_header_common+0xe0>)
 800d850:	f004 f8e2 	bl	8011a18 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800d854:	697b      	ldr	r3, [r7, #20]
 800d856:	685b      	ldr	r3, [r3, #4]
 800d858:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800d85a:	8c3b      	ldrh	r3, [r7, #32]
 800d85c:	4618      	mov	r0, r3
 800d85e:	f7f9 fb85 	bl	8006f6c <lwip_htons>
 800d862:	4603      	mov	r3, r0
 800d864:	461a      	mov	r2, r3
 800d866:	693b      	ldr	r3, [r7, #16]
 800d868:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800d86a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d86c:	4618      	mov	r0, r3
 800d86e:	f7f9 fb7d 	bl	8006f6c <lwip_htons>
 800d872:	4603      	mov	r3, r0
 800d874:	461a      	mov	r2, r3
 800d876:	693b      	ldr	r3, [r7, #16]
 800d878:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800d87a:	693b      	ldr	r3, [r7, #16]
 800d87c:	687a      	ldr	r2, [r7, #4]
 800d87e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800d880:	68f8      	ldr	r0, [r7, #12]
 800d882:	f7f9 fb88 	bl	8006f96 <lwip_htonl>
 800d886:	4602      	mov	r2, r0
 800d888:	693b      	ldr	r3, [r7, #16]
 800d88a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800d88c:	897b      	ldrh	r3, [r7, #10]
 800d88e:	089b      	lsrs	r3, r3, #2
 800d890:	b29b      	uxth	r3, r3
 800d892:	3305      	adds	r3, #5
 800d894:	b29b      	uxth	r3, r3
 800d896:	031b      	lsls	r3, r3, #12
 800d898:	b29a      	uxth	r2, r3
 800d89a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d89e:	b29b      	uxth	r3, r3
 800d8a0:	4313      	orrs	r3, r2
 800d8a2:	b29b      	uxth	r3, r3
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	f7f9 fb61 	bl	8006f6c <lwip_htons>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	461a      	mov	r2, r3
 800d8ae:	693b      	ldr	r3, [r7, #16]
 800d8b0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800d8b2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f7f9 fb59 	bl	8006f6c <lwip_htons>
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	461a      	mov	r2, r3
 800d8be:	693b      	ldr	r3, [r7, #16]
 800d8c0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800d8c2:	693b      	ldr	r3, [r7, #16]
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	741a      	strb	r2, [r3, #16]
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800d8cc:	693b      	ldr	r3, [r7, #16]
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	749a      	strb	r2, [r3, #18]
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800d8d6:	697b      	ldr	r3, [r7, #20]
}
 800d8d8:	4618      	mov	r0, r3
 800d8da:	3718      	adds	r7, #24
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd80      	pop	{r7, pc}
 800d8e0:	080150b8 	.word	0x080150b8
 800d8e4:	08015790 	.word	0x08015790
 800d8e8:	0801510c 	.word	0x0801510c

0800d8ec <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800d8ec:	b5b0      	push	{r4, r5, r7, lr}
 800d8ee:	b08a      	sub	sp, #40	; 0x28
 800d8f0:	af04      	add	r7, sp, #16
 800d8f2:	60f8      	str	r0, [r7, #12]
 800d8f4:	607b      	str	r3, [r7, #4]
 800d8f6:	460b      	mov	r3, r1
 800d8f8:	817b      	strh	r3, [r7, #10]
 800d8fa:	4613      	mov	r3, r2
 800d8fc:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d106      	bne.n	800d912 <tcp_output_alloc_header+0x26>
 800d904:	4b15      	ldr	r3, [pc, #84]	; (800d95c <tcp_output_alloc_header+0x70>)
 800d906:	f240 7242 	movw	r2, #1858	; 0x742
 800d90a:	4915      	ldr	r1, [pc, #84]	; (800d960 <tcp_output_alloc_header+0x74>)
 800d90c:	4815      	ldr	r0, [pc, #84]	; (800d964 <tcp_output_alloc_header+0x78>)
 800d90e:	f004 f883 	bl	8011a18 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	8adb      	ldrh	r3, [r3, #22]
 800d91a:	68fa      	ldr	r2, [r7, #12]
 800d91c:	8b12      	ldrh	r2, [r2, #24]
 800d91e:	68f9      	ldr	r1, [r7, #12]
 800d920:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800d922:	893d      	ldrh	r5, [r7, #8]
 800d924:	897c      	ldrh	r4, [r7, #10]
 800d926:	9103      	str	r1, [sp, #12]
 800d928:	2110      	movs	r1, #16
 800d92a:	9102      	str	r1, [sp, #8]
 800d92c:	9201      	str	r2, [sp, #4]
 800d92e:	9300      	str	r3, [sp, #0]
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	462a      	mov	r2, r5
 800d934:	4621      	mov	r1, r4
 800d936:	f7ff ff67 	bl	800d808 <tcp_output_alloc_header_common>
 800d93a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800d93c:	697b      	ldr	r3, [r7, #20]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d006      	beq.n	800d950 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d946:	68fa      	ldr	r2, [r7, #12]
 800d948:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800d94a:	441a      	add	r2, r3
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800d950:	697b      	ldr	r3, [r7, #20]
}
 800d952:	4618      	mov	r0, r3
 800d954:	3718      	adds	r7, #24
 800d956:	46bd      	mov	sp, r7
 800d958:	bdb0      	pop	{r4, r5, r7, pc}
 800d95a:	bf00      	nop
 800d95c:	080150b8 	.word	0x080150b8
 800d960:	080157c0 	.word	0x080157c0
 800d964:	0801510c 	.word	0x0801510c

0800d968 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b088      	sub	sp, #32
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	60f8      	str	r0, [r7, #12]
 800d970:	60b9      	str	r1, [r7, #8]
 800d972:	4611      	mov	r1, r2
 800d974:	461a      	mov	r2, r3
 800d976:	460b      	mov	r3, r1
 800d978:	71fb      	strb	r3, [r7, #7]
 800d97a:	4613      	mov	r3, r2
 800d97c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800d97e:	2300      	movs	r3, #0
 800d980:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800d982:	68bb      	ldr	r3, [r7, #8]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d106      	bne.n	800d996 <tcp_output_fill_options+0x2e>
 800d988:	4b12      	ldr	r3, [pc, #72]	; (800d9d4 <tcp_output_fill_options+0x6c>)
 800d98a:	f240 7256 	movw	r2, #1878	; 0x756
 800d98e:	4912      	ldr	r1, [pc, #72]	; (800d9d8 <tcp_output_fill_options+0x70>)
 800d990:	4812      	ldr	r0, [pc, #72]	; (800d9dc <tcp_output_fill_options+0x74>)
 800d992:	f004 f841 	bl	8011a18 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800d996:	68bb      	ldr	r3, [r7, #8]
 800d998:	685b      	ldr	r3, [r3, #4]
 800d99a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800d99c:	69bb      	ldr	r3, [r7, #24]
 800d99e:	3314      	adds	r3, #20
 800d9a0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800d9a2:	8bfb      	ldrh	r3, [r7, #30]
 800d9a4:	009b      	lsls	r3, r3, #2
 800d9a6:	461a      	mov	r2, r3
 800d9a8:	79fb      	ldrb	r3, [r7, #7]
 800d9aa:	009b      	lsls	r3, r3, #2
 800d9ac:	f003 0304 	and.w	r3, r3, #4
 800d9b0:	4413      	add	r3, r2
 800d9b2:	3314      	adds	r3, #20
 800d9b4:	69ba      	ldr	r2, [r7, #24]
 800d9b6:	4413      	add	r3, r2
 800d9b8:	697a      	ldr	r2, [r7, #20]
 800d9ba:	429a      	cmp	r2, r3
 800d9bc:	d006      	beq.n	800d9cc <tcp_output_fill_options+0x64>
 800d9be:	4b05      	ldr	r3, [pc, #20]	; (800d9d4 <tcp_output_fill_options+0x6c>)
 800d9c0:	f240 7275 	movw	r2, #1909	; 0x775
 800d9c4:	4906      	ldr	r1, [pc, #24]	; (800d9e0 <tcp_output_fill_options+0x78>)
 800d9c6:	4805      	ldr	r0, [pc, #20]	; (800d9dc <tcp_output_fill_options+0x74>)
 800d9c8:	f004 f826 	bl	8011a18 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800d9cc:	bf00      	nop
 800d9ce:	3720      	adds	r7, #32
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	bd80      	pop	{r7, pc}
 800d9d4:	080150b8 	.word	0x080150b8
 800d9d8:	080157e8 	.word	0x080157e8
 800d9dc:	0801510c 	.word	0x0801510c
 800d9e0:	080156e0 	.word	0x080156e0

0800d9e4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b08a      	sub	sp, #40	; 0x28
 800d9e8:	af04      	add	r7, sp, #16
 800d9ea:	60f8      	str	r0, [r7, #12]
 800d9ec:	60b9      	str	r1, [r7, #8]
 800d9ee:	607a      	str	r2, [r7, #4]
 800d9f0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800d9f2:	68bb      	ldr	r3, [r7, #8]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d106      	bne.n	800da06 <tcp_output_control_segment+0x22>
 800d9f8:	4b1c      	ldr	r3, [pc, #112]	; (800da6c <tcp_output_control_segment+0x88>)
 800d9fa:	f240 7287 	movw	r2, #1927	; 0x787
 800d9fe:	491c      	ldr	r1, [pc, #112]	; (800da70 <tcp_output_control_segment+0x8c>)
 800da00:	481c      	ldr	r0, [pc, #112]	; (800da74 <tcp_output_control_segment+0x90>)
 800da02:	f004 f809 	bl	8011a18 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800da06:	683a      	ldr	r2, [r7, #0]
 800da08:	6879      	ldr	r1, [r7, #4]
 800da0a:	68f8      	ldr	r0, [r7, #12]
 800da0c:	f7fe ff40 	bl	800c890 <tcp_route>
 800da10:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800da12:	693b      	ldr	r3, [r7, #16]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d102      	bne.n	800da1e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800da18:	23fc      	movs	r3, #252	; 0xfc
 800da1a:	75fb      	strb	r3, [r7, #23]
 800da1c:	e01c      	b.n	800da58 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d006      	beq.n	800da32 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	7adb      	ldrb	r3, [r3, #11]
 800da28:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	7a9b      	ldrb	r3, [r3, #10]
 800da2e:	757b      	strb	r3, [r7, #21]
 800da30:	e003      	b.n	800da3a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800da32:	23ff      	movs	r3, #255	; 0xff
 800da34:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800da36:	2300      	movs	r3, #0
 800da38:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800da3a:	7dba      	ldrb	r2, [r7, #22]
 800da3c:	693b      	ldr	r3, [r7, #16]
 800da3e:	9302      	str	r3, [sp, #8]
 800da40:	2306      	movs	r3, #6
 800da42:	9301      	str	r3, [sp, #4]
 800da44:	7d7b      	ldrb	r3, [r7, #21]
 800da46:	9300      	str	r3, [sp, #0]
 800da48:	4613      	mov	r3, r2
 800da4a:	683a      	ldr	r2, [r7, #0]
 800da4c:	6879      	ldr	r1, [r7, #4]
 800da4e:	68b8      	ldr	r0, [r7, #8]
 800da50:	f002 f8d6 	bl	800fc00 <ip4_output_if>
 800da54:	4603      	mov	r3, r0
 800da56:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800da58:	68b8      	ldr	r0, [r7, #8]
 800da5a:	f7fa fde5 	bl	8008628 <pbuf_free>
  return err;
 800da5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800da62:	4618      	mov	r0, r3
 800da64:	3718      	adds	r7, #24
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}
 800da6a:	bf00      	nop
 800da6c:	080150b8 	.word	0x080150b8
 800da70:	08015810 	.word	0x08015810
 800da74:	0801510c 	.word	0x0801510c

0800da78 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800da78:	b590      	push	{r4, r7, lr}
 800da7a:	b08b      	sub	sp, #44	; 0x2c
 800da7c:	af04      	add	r7, sp, #16
 800da7e:	60f8      	str	r0, [r7, #12]
 800da80:	60b9      	str	r1, [r7, #8]
 800da82:	607a      	str	r2, [r7, #4]
 800da84:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800da86:	683b      	ldr	r3, [r7, #0]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d106      	bne.n	800da9a <tcp_rst+0x22>
 800da8c:	4b1f      	ldr	r3, [pc, #124]	; (800db0c <tcp_rst+0x94>)
 800da8e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800da92:	491f      	ldr	r1, [pc, #124]	; (800db10 <tcp_rst+0x98>)
 800da94:	481f      	ldr	r0, [pc, #124]	; (800db14 <tcp_rst+0x9c>)
 800da96:	f003 ffbf 	bl	8011a18 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800da9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d106      	bne.n	800daae <tcp_rst+0x36>
 800daa0:	4b1a      	ldr	r3, [pc, #104]	; (800db0c <tcp_rst+0x94>)
 800daa2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800daa6:	491c      	ldr	r1, [pc, #112]	; (800db18 <tcp_rst+0xa0>)
 800daa8:	481a      	ldr	r0, [pc, #104]	; (800db14 <tcp_rst+0x9c>)
 800daaa:	f003 ffb5 	bl	8011a18 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800daae:	2300      	movs	r3, #0
 800dab0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800dab2:	f246 0308 	movw	r3, #24584	; 0x6008
 800dab6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800dab8:	7dfb      	ldrb	r3, [r7, #23]
 800daba:	b29c      	uxth	r4, r3
 800dabc:	68b8      	ldr	r0, [r7, #8]
 800dabe:	f7f9 fa6a 	bl	8006f96 <lwip_htonl>
 800dac2:	4602      	mov	r2, r0
 800dac4:	8abb      	ldrh	r3, [r7, #20]
 800dac6:	9303      	str	r3, [sp, #12]
 800dac8:	2314      	movs	r3, #20
 800daca:	9302      	str	r3, [sp, #8]
 800dacc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800dace:	9301      	str	r3, [sp, #4]
 800dad0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dad2:	9300      	str	r3, [sp, #0]
 800dad4:	4613      	mov	r3, r2
 800dad6:	2200      	movs	r2, #0
 800dad8:	4621      	mov	r1, r4
 800dada:	6878      	ldr	r0, [r7, #4]
 800dadc:	f7ff fe94 	bl	800d808 <tcp_output_alloc_header_common>
 800dae0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800dae2:	693b      	ldr	r3, [r7, #16]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d00c      	beq.n	800db02 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800dae8:	7dfb      	ldrb	r3, [r7, #23]
 800daea:	2200      	movs	r2, #0
 800daec:	6939      	ldr	r1, [r7, #16]
 800daee:	68f8      	ldr	r0, [r7, #12]
 800daf0:	f7ff ff3a 	bl	800d968 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800daf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daf6:	683a      	ldr	r2, [r7, #0]
 800daf8:	6939      	ldr	r1, [r7, #16]
 800dafa:	68f8      	ldr	r0, [r7, #12]
 800dafc:	f7ff ff72 	bl	800d9e4 <tcp_output_control_segment>
 800db00:	e000      	b.n	800db04 <tcp_rst+0x8c>
    return;
 800db02:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800db04:	371c      	adds	r7, #28
 800db06:	46bd      	mov	sp, r7
 800db08:	bd90      	pop	{r4, r7, pc}
 800db0a:	bf00      	nop
 800db0c:	080150b8 	.word	0x080150b8
 800db10:	0801583c 	.word	0x0801583c
 800db14:	0801510c 	.word	0x0801510c
 800db18:	08015858 	.word	0x08015858

0800db1c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800db1c:	b590      	push	{r4, r7, lr}
 800db1e:	b087      	sub	sp, #28
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800db24:	2300      	movs	r3, #0
 800db26:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800db28:	2300      	movs	r3, #0
 800db2a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d106      	bne.n	800db40 <tcp_send_empty_ack+0x24>
 800db32:	4b28      	ldr	r3, [pc, #160]	; (800dbd4 <tcp_send_empty_ack+0xb8>)
 800db34:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800db38:	4927      	ldr	r1, [pc, #156]	; (800dbd8 <tcp_send_empty_ack+0xbc>)
 800db3a:	4828      	ldr	r0, [pc, #160]	; (800dbdc <tcp_send_empty_ack+0xc0>)
 800db3c:	f003 ff6c 	bl	8011a18 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800db40:	7dfb      	ldrb	r3, [r7, #23]
 800db42:	009b      	lsls	r3, r3, #2
 800db44:	b2db      	uxtb	r3, r3
 800db46:	f003 0304 	and.w	r3, r3, #4
 800db4a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800db4c:	7d7b      	ldrb	r3, [r7, #21]
 800db4e:	b29c      	uxth	r4, r3
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db54:	4618      	mov	r0, r3
 800db56:	f7f9 fa1e 	bl	8006f96 <lwip_htonl>
 800db5a:	4603      	mov	r3, r0
 800db5c:	2200      	movs	r2, #0
 800db5e:	4621      	mov	r1, r4
 800db60:	6878      	ldr	r0, [r7, #4]
 800db62:	f7ff fec3 	bl	800d8ec <tcp_output_alloc_header>
 800db66:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800db68:	693b      	ldr	r3, [r7, #16]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d109      	bne.n	800db82 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	8b5b      	ldrh	r3, [r3, #26]
 800db72:	f043 0303 	orr.w	r3, r3, #3
 800db76:	b29a      	uxth	r2, r3
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800db7c:	f06f 0301 	mvn.w	r3, #1
 800db80:	e023      	b.n	800dbca <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800db82:	7dbb      	ldrb	r3, [r7, #22]
 800db84:	7dfa      	ldrb	r2, [r7, #23]
 800db86:	6939      	ldr	r1, [r7, #16]
 800db88:	6878      	ldr	r0, [r7, #4]
 800db8a:	f7ff feed 	bl	800d968 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800db8e:	687a      	ldr	r2, [r7, #4]
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	3304      	adds	r3, #4
 800db94:	6939      	ldr	r1, [r7, #16]
 800db96:	6878      	ldr	r0, [r7, #4]
 800db98:	f7ff ff24 	bl	800d9e4 <tcp_output_control_segment>
 800db9c:	4603      	mov	r3, r0
 800db9e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800dba0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d007      	beq.n	800dbb8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	8b5b      	ldrh	r3, [r3, #26]
 800dbac:	f043 0303 	orr.w	r3, r3, #3
 800dbb0:	b29a      	uxth	r2, r3
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	835a      	strh	r2, [r3, #26]
 800dbb6:	e006      	b.n	800dbc6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	8b5b      	ldrh	r3, [r3, #26]
 800dbbc:	f023 0303 	bic.w	r3, r3, #3
 800dbc0:	b29a      	uxth	r2, r3
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800dbc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dbca:	4618      	mov	r0, r3
 800dbcc:	371c      	adds	r7, #28
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	bd90      	pop	{r4, r7, pc}
 800dbd2:	bf00      	nop
 800dbd4:	080150b8 	.word	0x080150b8
 800dbd8:	08015874 	.word	0x08015874
 800dbdc:	0801510c 	.word	0x0801510c

0800dbe0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800dbe0:	b590      	push	{r4, r7, lr}
 800dbe2:	b087      	sub	sp, #28
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800dbe8:	2300      	movs	r3, #0
 800dbea:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d106      	bne.n	800dc00 <tcp_keepalive+0x20>
 800dbf2:	4b18      	ldr	r3, [pc, #96]	; (800dc54 <tcp_keepalive+0x74>)
 800dbf4:	f640 0224 	movw	r2, #2084	; 0x824
 800dbf8:	4917      	ldr	r1, [pc, #92]	; (800dc58 <tcp_keepalive+0x78>)
 800dbfa:	4818      	ldr	r0, [pc, #96]	; (800dc5c <tcp_keepalive+0x7c>)
 800dbfc:	f003 ff0c 	bl	8011a18 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800dc00:	7dfb      	ldrb	r3, [r7, #23]
 800dc02:	b29c      	uxth	r4, r3
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc08:	3b01      	subs	r3, #1
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	f7f9 f9c3 	bl	8006f96 <lwip_htonl>
 800dc10:	4603      	mov	r3, r0
 800dc12:	2200      	movs	r2, #0
 800dc14:	4621      	mov	r1, r4
 800dc16:	6878      	ldr	r0, [r7, #4]
 800dc18:	f7ff fe68 	bl	800d8ec <tcp_output_alloc_header>
 800dc1c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800dc1e:	693b      	ldr	r3, [r7, #16]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d102      	bne.n	800dc2a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800dc24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dc28:	e010      	b.n	800dc4c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800dc2a:	7dfb      	ldrb	r3, [r7, #23]
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	6939      	ldr	r1, [r7, #16]
 800dc30:	6878      	ldr	r0, [r7, #4]
 800dc32:	f7ff fe99 	bl	800d968 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800dc36:	687a      	ldr	r2, [r7, #4]
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	3304      	adds	r3, #4
 800dc3c:	6939      	ldr	r1, [r7, #16]
 800dc3e:	6878      	ldr	r0, [r7, #4]
 800dc40:	f7ff fed0 	bl	800d9e4 <tcp_output_control_segment>
 800dc44:	4603      	mov	r3, r0
 800dc46:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800dc48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	371c      	adds	r7, #28
 800dc50:	46bd      	mov	sp, r7
 800dc52:	bd90      	pop	{r4, r7, pc}
 800dc54:	080150b8 	.word	0x080150b8
 800dc58:	08015894 	.word	0x08015894
 800dc5c:	0801510c 	.word	0x0801510c

0800dc60 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800dc60:	b590      	push	{r4, r7, lr}
 800dc62:	b08b      	sub	sp, #44	; 0x2c
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800dc68:	2300      	movs	r3, #0
 800dc6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d106      	bne.n	800dc82 <tcp_zero_window_probe+0x22>
 800dc74:	4b4c      	ldr	r3, [pc, #304]	; (800dda8 <tcp_zero_window_probe+0x148>)
 800dc76:	f640 024f 	movw	r2, #2127	; 0x84f
 800dc7a:	494c      	ldr	r1, [pc, #304]	; (800ddac <tcp_zero_window_probe+0x14c>)
 800dc7c:	484c      	ldr	r0, [pc, #304]	; (800ddb0 <tcp_zero_window_probe+0x150>)
 800dc7e:	f003 fecb 	bl	8011a18 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc86:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800dc88:	6a3b      	ldr	r3, [r7, #32]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d101      	bne.n	800dc92 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800dc8e:	2300      	movs	r3, #0
 800dc90:	e086      	b.n	800dda0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800dc98:	2bff      	cmp	r3, #255	; 0xff
 800dc9a:	d007      	beq.n	800dcac <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800dca2:	3301      	adds	r3, #1
 800dca4:	b2da      	uxtb	r2, r3
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800dcac:	6a3b      	ldr	r3, [r7, #32]
 800dcae:	68db      	ldr	r3, [r3, #12]
 800dcb0:	899b      	ldrh	r3, [r3, #12]
 800dcb2:	b29b      	uxth	r3, r3
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	f7f9 f959 	bl	8006f6c <lwip_htons>
 800dcba:	4603      	mov	r3, r0
 800dcbc:	b2db      	uxtb	r3, r3
 800dcbe:	f003 0301 	and.w	r3, r3, #1
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d005      	beq.n	800dcd2 <tcp_zero_window_probe+0x72>
 800dcc6:	6a3b      	ldr	r3, [r7, #32]
 800dcc8:	891b      	ldrh	r3, [r3, #8]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d101      	bne.n	800dcd2 <tcp_zero_window_probe+0x72>
 800dcce:	2301      	movs	r3, #1
 800dcd0:	e000      	b.n	800dcd4 <tcp_zero_window_probe+0x74>
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800dcd6:	7ffb      	ldrb	r3, [r7, #31]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	bf0c      	ite	eq
 800dcdc:	2301      	moveq	r3, #1
 800dcde:	2300      	movne	r3, #0
 800dce0:	b2db      	uxtb	r3, r3
 800dce2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800dce4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dce8:	b299      	uxth	r1, r3
 800dcea:	6a3b      	ldr	r3, [r7, #32]
 800dcec:	68db      	ldr	r3, [r3, #12]
 800dcee:	685b      	ldr	r3, [r3, #4]
 800dcf0:	8bba      	ldrh	r2, [r7, #28]
 800dcf2:	6878      	ldr	r0, [r7, #4]
 800dcf4:	f7ff fdfa 	bl	800d8ec <tcp_output_alloc_header>
 800dcf8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800dcfa:	69bb      	ldr	r3, [r7, #24]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d102      	bne.n	800dd06 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800dd00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dd04:	e04c      	b.n	800dda0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800dd06:	69bb      	ldr	r3, [r7, #24]
 800dd08:	685b      	ldr	r3, [r3, #4]
 800dd0a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800dd0c:	7ffb      	ldrb	r3, [r7, #31]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d011      	beq.n	800dd36 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	899b      	ldrh	r3, [r3, #12]
 800dd16:	b29b      	uxth	r3, r3
 800dd18:	b21b      	sxth	r3, r3
 800dd1a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800dd1e:	b21c      	sxth	r4, r3
 800dd20:	2011      	movs	r0, #17
 800dd22:	f7f9 f923 	bl	8006f6c <lwip_htons>
 800dd26:	4603      	mov	r3, r0
 800dd28:	b21b      	sxth	r3, r3
 800dd2a:	4323      	orrs	r3, r4
 800dd2c:	b21b      	sxth	r3, r3
 800dd2e:	b29a      	uxth	r2, r3
 800dd30:	697b      	ldr	r3, [r7, #20]
 800dd32:	819a      	strh	r2, [r3, #12]
 800dd34:	e010      	b.n	800dd58 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800dd36:	69bb      	ldr	r3, [r7, #24]
 800dd38:	685b      	ldr	r3, [r3, #4]
 800dd3a:	3314      	adds	r3, #20
 800dd3c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800dd3e:	6a3b      	ldr	r3, [r7, #32]
 800dd40:	6858      	ldr	r0, [r3, #4]
 800dd42:	6a3b      	ldr	r3, [r7, #32]
 800dd44:	685b      	ldr	r3, [r3, #4]
 800dd46:	891a      	ldrh	r2, [r3, #8]
 800dd48:	6a3b      	ldr	r3, [r7, #32]
 800dd4a:	891b      	ldrh	r3, [r3, #8]
 800dd4c:	1ad3      	subs	r3, r2, r3
 800dd4e:	b29b      	uxth	r3, r3
 800dd50:	2201      	movs	r2, #1
 800dd52:	6939      	ldr	r1, [r7, #16]
 800dd54:	f7fa fe52 	bl	80089fc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800dd58:	6a3b      	ldr	r3, [r7, #32]
 800dd5a:	68db      	ldr	r3, [r3, #12]
 800dd5c:	685b      	ldr	r3, [r3, #4]
 800dd5e:	4618      	mov	r0, r3
 800dd60:	f7f9 f919 	bl	8006f96 <lwip_htonl>
 800dd64:	4603      	mov	r3, r0
 800dd66:	3301      	adds	r3, #1
 800dd68:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	1ad3      	subs	r3, r2, r3
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	da02      	bge.n	800dd7c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	68fa      	ldr	r2, [r7, #12]
 800dd7a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800dd7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd80:	2200      	movs	r2, #0
 800dd82:	69b9      	ldr	r1, [r7, #24]
 800dd84:	6878      	ldr	r0, [r7, #4]
 800dd86:	f7ff fdef 	bl	800d968 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800dd8a:	687a      	ldr	r2, [r7, #4]
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	3304      	adds	r3, #4
 800dd90:	69b9      	ldr	r1, [r7, #24]
 800dd92:	6878      	ldr	r0, [r7, #4]
 800dd94:	f7ff fe26 	bl	800d9e4 <tcp_output_control_segment>
 800dd98:	4603      	mov	r3, r0
 800dd9a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800dd9c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800dda0:	4618      	mov	r0, r3
 800dda2:	372c      	adds	r7, #44	; 0x2c
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bd90      	pop	{r4, r7, pc}
 800dda8:	080150b8 	.word	0x080150b8
 800ddac:	080158b0 	.word	0x080158b0
 800ddb0:	0801510c 	.word	0x0801510c

0800ddb4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b082      	sub	sp, #8
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800ddbc:	f7fa ff0c 	bl	8008bd8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ddc0:	4b0a      	ldr	r3, [pc, #40]	; (800ddec <tcpip_tcp_timer+0x38>)
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d103      	bne.n	800ddd0 <tcpip_tcp_timer+0x1c>
 800ddc8:	4b09      	ldr	r3, [pc, #36]	; (800ddf0 <tcpip_tcp_timer+0x3c>)
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d005      	beq.n	800dddc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ddd0:	2200      	movs	r2, #0
 800ddd2:	4908      	ldr	r1, [pc, #32]	; (800ddf4 <tcpip_tcp_timer+0x40>)
 800ddd4:	20fa      	movs	r0, #250	; 0xfa
 800ddd6:	f000 f8f3 	bl	800dfc0 <sys_timeout>
 800ddda:	e003      	b.n	800dde4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800dddc:	4b06      	ldr	r3, [pc, #24]	; (800ddf8 <tcpip_tcp_timer+0x44>)
 800ddde:	2200      	movs	r2, #0
 800dde0:	601a      	str	r2, [r3, #0]
  }
}
 800dde2:	bf00      	nop
 800dde4:	bf00      	nop
 800dde6:	3708      	adds	r7, #8
 800dde8:	46bd      	mov	sp, r7
 800ddea:	bd80      	pop	{r7, pc}
 800ddec:	2000a734 	.word	0x2000a734
 800ddf0:	2000a738 	.word	0x2000a738
 800ddf4:	0800ddb5 	.word	0x0800ddb5
 800ddf8:	2000a780 	.word	0x2000a780

0800ddfc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800de00:	4b0a      	ldr	r3, [pc, #40]	; (800de2c <tcp_timer_needed+0x30>)
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d10f      	bne.n	800de28 <tcp_timer_needed+0x2c>
 800de08:	4b09      	ldr	r3, [pc, #36]	; (800de30 <tcp_timer_needed+0x34>)
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d103      	bne.n	800de18 <tcp_timer_needed+0x1c>
 800de10:	4b08      	ldr	r3, [pc, #32]	; (800de34 <tcp_timer_needed+0x38>)
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d007      	beq.n	800de28 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800de18:	4b04      	ldr	r3, [pc, #16]	; (800de2c <tcp_timer_needed+0x30>)
 800de1a:	2201      	movs	r2, #1
 800de1c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800de1e:	2200      	movs	r2, #0
 800de20:	4905      	ldr	r1, [pc, #20]	; (800de38 <tcp_timer_needed+0x3c>)
 800de22:	20fa      	movs	r0, #250	; 0xfa
 800de24:	f000 f8cc 	bl	800dfc0 <sys_timeout>
  }
}
 800de28:	bf00      	nop
 800de2a:	bd80      	pop	{r7, pc}
 800de2c:	2000a780 	.word	0x2000a780
 800de30:	2000a734 	.word	0x2000a734
 800de34:	2000a738 	.word	0x2000a738
 800de38:	0800ddb5 	.word	0x0800ddb5

0800de3c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b086      	sub	sp, #24
 800de40:	af00      	add	r7, sp, #0
 800de42:	60f8      	str	r0, [r7, #12]
 800de44:	60b9      	str	r1, [r7, #8]
 800de46:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800de48:	2006      	movs	r0, #6
 800de4a:	f7f9 fd07 	bl	800785c <memp_malloc>
 800de4e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800de50:	693b      	ldr	r3, [r7, #16]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d109      	bne.n	800de6a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800de56:	693b      	ldr	r3, [r7, #16]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d151      	bne.n	800df00 <sys_timeout_abs+0xc4>
 800de5c:	4b2a      	ldr	r3, [pc, #168]	; (800df08 <sys_timeout_abs+0xcc>)
 800de5e:	22be      	movs	r2, #190	; 0xbe
 800de60:	492a      	ldr	r1, [pc, #168]	; (800df0c <sys_timeout_abs+0xd0>)
 800de62:	482b      	ldr	r0, [pc, #172]	; (800df10 <sys_timeout_abs+0xd4>)
 800de64:	f003 fdd8 	bl	8011a18 <iprintf>
    return;
 800de68:	e04a      	b.n	800df00 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800de6a:	693b      	ldr	r3, [r7, #16]
 800de6c:	2200      	movs	r2, #0
 800de6e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800de70:	693b      	ldr	r3, [r7, #16]
 800de72:	68ba      	ldr	r2, [r7, #8]
 800de74:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800de76:	693b      	ldr	r3, [r7, #16]
 800de78:	687a      	ldr	r2, [r7, #4]
 800de7a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800de7c:	693b      	ldr	r3, [r7, #16]
 800de7e:	68fa      	ldr	r2, [r7, #12]
 800de80:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800de82:	4b24      	ldr	r3, [pc, #144]	; (800df14 <sys_timeout_abs+0xd8>)
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d103      	bne.n	800de92 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800de8a:	4a22      	ldr	r2, [pc, #136]	; (800df14 <sys_timeout_abs+0xd8>)
 800de8c:	693b      	ldr	r3, [r7, #16]
 800de8e:	6013      	str	r3, [r2, #0]
    return;
 800de90:	e037      	b.n	800df02 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800de92:	693b      	ldr	r3, [r7, #16]
 800de94:	685a      	ldr	r2, [r3, #4]
 800de96:	4b1f      	ldr	r3, [pc, #124]	; (800df14 <sys_timeout_abs+0xd8>)
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	685b      	ldr	r3, [r3, #4]
 800de9c:	1ad3      	subs	r3, r2, r3
 800de9e:	0fdb      	lsrs	r3, r3, #31
 800dea0:	f003 0301 	and.w	r3, r3, #1
 800dea4:	b2db      	uxtb	r3, r3
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d007      	beq.n	800deba <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800deaa:	4b1a      	ldr	r3, [pc, #104]	; (800df14 <sys_timeout_abs+0xd8>)
 800deac:	681a      	ldr	r2, [r3, #0]
 800deae:	693b      	ldr	r3, [r7, #16]
 800deb0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800deb2:	4a18      	ldr	r2, [pc, #96]	; (800df14 <sys_timeout_abs+0xd8>)
 800deb4:	693b      	ldr	r3, [r7, #16]
 800deb6:	6013      	str	r3, [r2, #0]
 800deb8:	e023      	b.n	800df02 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800deba:	4b16      	ldr	r3, [pc, #88]	; (800df14 <sys_timeout_abs+0xd8>)
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	617b      	str	r3, [r7, #20]
 800dec0:	e01a      	b.n	800def8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800dec2:	697b      	ldr	r3, [r7, #20]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d00b      	beq.n	800dee2 <sys_timeout_abs+0xa6>
 800deca:	693b      	ldr	r3, [r7, #16]
 800decc:	685a      	ldr	r2, [r3, #4]
 800dece:	697b      	ldr	r3, [r7, #20]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	685b      	ldr	r3, [r3, #4]
 800ded4:	1ad3      	subs	r3, r2, r3
 800ded6:	0fdb      	lsrs	r3, r3, #31
 800ded8:	f003 0301 	and.w	r3, r3, #1
 800dedc:	b2db      	uxtb	r3, r3
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d007      	beq.n	800def2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800dee2:	697b      	ldr	r3, [r7, #20]
 800dee4:	681a      	ldr	r2, [r3, #0]
 800dee6:	693b      	ldr	r3, [r7, #16]
 800dee8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800deea:	697b      	ldr	r3, [r7, #20]
 800deec:	693a      	ldr	r2, [r7, #16]
 800deee:	601a      	str	r2, [r3, #0]
        break;
 800def0:	e007      	b.n	800df02 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800def2:	697b      	ldr	r3, [r7, #20]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	617b      	str	r3, [r7, #20]
 800def8:	697b      	ldr	r3, [r7, #20]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d1e1      	bne.n	800dec2 <sys_timeout_abs+0x86>
 800defe:	e000      	b.n	800df02 <sys_timeout_abs+0xc6>
    return;
 800df00:	bf00      	nop
      }
    }
  }
}
 800df02:	3718      	adds	r7, #24
 800df04:	46bd      	mov	sp, r7
 800df06:	bd80      	pop	{r7, pc}
 800df08:	080158d4 	.word	0x080158d4
 800df0c:	08015908 	.word	0x08015908
 800df10:	08015948 	.word	0x08015948
 800df14:	2000a778 	.word	0x2000a778

0800df18 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b086      	sub	sp, #24
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800df24:	697b      	ldr	r3, [r7, #20]
 800df26:	685b      	ldr	r3, [r3, #4]
 800df28:	4798      	blx	r3

  now = sys_now();
 800df2a:	f7f8 fe0b 	bl	8006b44 <sys_now>
 800df2e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800df30:	697b      	ldr	r3, [r7, #20]
 800df32:	681a      	ldr	r2, [r3, #0]
 800df34:	4b0f      	ldr	r3, [pc, #60]	; (800df74 <lwip_cyclic_timer+0x5c>)
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	4413      	add	r3, r2
 800df3a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800df3c:	68fa      	ldr	r2, [r7, #12]
 800df3e:	693b      	ldr	r3, [r7, #16]
 800df40:	1ad3      	subs	r3, r2, r3
 800df42:	0fdb      	lsrs	r3, r3, #31
 800df44:	f003 0301 	and.w	r3, r3, #1
 800df48:	b2db      	uxtb	r3, r3
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d009      	beq.n	800df62 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800df4e:	697b      	ldr	r3, [r7, #20]
 800df50:	681a      	ldr	r2, [r3, #0]
 800df52:	693b      	ldr	r3, [r7, #16]
 800df54:	4413      	add	r3, r2
 800df56:	687a      	ldr	r2, [r7, #4]
 800df58:	4907      	ldr	r1, [pc, #28]	; (800df78 <lwip_cyclic_timer+0x60>)
 800df5a:	4618      	mov	r0, r3
 800df5c:	f7ff ff6e 	bl	800de3c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800df60:	e004      	b.n	800df6c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800df62:	687a      	ldr	r2, [r7, #4]
 800df64:	4904      	ldr	r1, [pc, #16]	; (800df78 <lwip_cyclic_timer+0x60>)
 800df66:	68f8      	ldr	r0, [r7, #12]
 800df68:	f7ff ff68 	bl	800de3c <sys_timeout_abs>
}
 800df6c:	bf00      	nop
 800df6e:	3718      	adds	r7, #24
 800df70:	46bd      	mov	sp, r7
 800df72:	bd80      	pop	{r7, pc}
 800df74:	2000a77c 	.word	0x2000a77c
 800df78:	0800df19 	.word	0x0800df19

0800df7c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b082      	sub	sp, #8
 800df80:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800df82:	2301      	movs	r3, #1
 800df84:	607b      	str	r3, [r7, #4]
 800df86:	e00e      	b.n	800dfa6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800df88:	4a0b      	ldr	r2, [pc, #44]	; (800dfb8 <sys_timeouts_init+0x3c>)
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	00db      	lsls	r3, r3, #3
 800df94:	4a08      	ldr	r2, [pc, #32]	; (800dfb8 <sys_timeouts_init+0x3c>)
 800df96:	4413      	add	r3, r2
 800df98:	461a      	mov	r2, r3
 800df9a:	4908      	ldr	r1, [pc, #32]	; (800dfbc <sys_timeouts_init+0x40>)
 800df9c:	f000 f810 	bl	800dfc0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	3301      	adds	r3, #1
 800dfa4:	607b      	str	r3, [r7, #4]
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	2b02      	cmp	r3, #2
 800dfaa:	d9ed      	bls.n	800df88 <sys_timeouts_init+0xc>
  }
}
 800dfac:	bf00      	nop
 800dfae:	bf00      	nop
 800dfb0:	3708      	adds	r7, #8
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd80      	pop	{r7, pc}
 800dfb6:	bf00      	nop
 800dfb8:	080164c0 	.word	0x080164c0
 800dfbc:	0800df19 	.word	0x0800df19

0800dfc0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b086      	sub	sp, #24
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	60f8      	str	r0, [r7, #12]
 800dfc8:	60b9      	str	r1, [r7, #8]
 800dfca:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dfd2:	d306      	bcc.n	800dfe2 <sys_timeout+0x22>
 800dfd4:	4b0a      	ldr	r3, [pc, #40]	; (800e000 <sys_timeout+0x40>)
 800dfd6:	f240 1229 	movw	r2, #297	; 0x129
 800dfda:	490a      	ldr	r1, [pc, #40]	; (800e004 <sys_timeout+0x44>)
 800dfdc:	480a      	ldr	r0, [pc, #40]	; (800e008 <sys_timeout+0x48>)
 800dfde:	f003 fd1b 	bl	8011a18 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800dfe2:	f7f8 fdaf 	bl	8006b44 <sys_now>
 800dfe6:	4602      	mov	r2, r0
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	4413      	add	r3, r2
 800dfec:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800dfee:	687a      	ldr	r2, [r7, #4]
 800dff0:	68b9      	ldr	r1, [r7, #8]
 800dff2:	6978      	ldr	r0, [r7, #20]
 800dff4:	f7ff ff22 	bl	800de3c <sys_timeout_abs>
#endif
}
 800dff8:	bf00      	nop
 800dffa:	3718      	adds	r7, #24
 800dffc:	46bd      	mov	sp, r7
 800dffe:	bd80      	pop	{r7, pc}
 800e000:	080158d4 	.word	0x080158d4
 800e004:	08015970 	.word	0x08015970
 800e008:	08015948 	.word	0x08015948

0800e00c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b084      	sub	sp, #16
 800e010:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800e012:	f7f8 fd97 	bl	8006b44 <sys_now>
 800e016:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800e018:	4b1a      	ldr	r3, [pc, #104]	; (800e084 <sys_check_timeouts+0x78>)
 800e01a:	781b      	ldrb	r3, [r3, #0]
 800e01c:	b2db      	uxtb	r3, r3
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d001      	beq.n	800e026 <sys_check_timeouts+0x1a>
 800e022:	f7f9 ffc7 	bl	8007fb4 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800e026:	4b18      	ldr	r3, [pc, #96]	; (800e088 <sys_check_timeouts+0x7c>)
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800e02c:	68bb      	ldr	r3, [r7, #8]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d022      	beq.n	800e078 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800e032:	68bb      	ldr	r3, [r7, #8]
 800e034:	685b      	ldr	r3, [r3, #4]
 800e036:	68fa      	ldr	r2, [r7, #12]
 800e038:	1ad3      	subs	r3, r2, r3
 800e03a:	0fdb      	lsrs	r3, r3, #31
 800e03c:	f003 0301 	and.w	r3, r3, #1
 800e040:	b2db      	uxtb	r3, r3
 800e042:	2b00      	cmp	r3, #0
 800e044:	d11a      	bne.n	800e07c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800e046:	68bb      	ldr	r3, [r7, #8]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	4a0f      	ldr	r2, [pc, #60]	; (800e088 <sys_check_timeouts+0x7c>)
 800e04c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800e04e:	68bb      	ldr	r3, [r7, #8]
 800e050:	689b      	ldr	r3, [r3, #8]
 800e052:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800e054:	68bb      	ldr	r3, [r7, #8]
 800e056:	68db      	ldr	r3, [r3, #12]
 800e058:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800e05a:	68bb      	ldr	r3, [r7, #8]
 800e05c:	685b      	ldr	r3, [r3, #4]
 800e05e:	4a0b      	ldr	r2, [pc, #44]	; (800e08c <sys_check_timeouts+0x80>)
 800e060:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800e062:	68b9      	ldr	r1, [r7, #8]
 800e064:	2006      	movs	r0, #6
 800e066:	f7f9 fc69 	bl	800793c <memp_free>
    if (handler != NULL) {
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d0d3      	beq.n	800e018 <sys_check_timeouts+0xc>
      handler(arg);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	6838      	ldr	r0, [r7, #0]
 800e074:	4798      	blx	r3
  do {
 800e076:	e7cf      	b.n	800e018 <sys_check_timeouts+0xc>
      return;
 800e078:	bf00      	nop
 800e07a:	e000      	b.n	800e07e <sys_check_timeouts+0x72>
      return;
 800e07c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800e07e:	3710      	adds	r7, #16
 800e080:	46bd      	mov	sp, r7
 800e082:	bd80      	pop	{r7, pc}
 800e084:	2000a725 	.word	0x2000a725
 800e088:	2000a778 	.word	0x2000a778
 800e08c:	2000a77c 	.word	0x2000a77c

0800e090 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800e090:	b580      	push	{r7, lr}
 800e092:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e094:	f002 fde6 	bl	8010c64 <rand>
 800e098:	4603      	mov	r3, r0
 800e09a:	b29b      	uxth	r3, r3
 800e09c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e0a0:	b29b      	uxth	r3, r3
 800e0a2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e0a6:	b29a      	uxth	r2, r3
 800e0a8:	4b01      	ldr	r3, [pc, #4]	; (800e0b0 <udp_init+0x20>)
 800e0aa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e0ac:	bf00      	nop
 800e0ae:	bd80      	pop	{r7, pc}
 800e0b0:	20000028 	.word	0x20000028

0800e0b4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800e0b4:	b480      	push	{r7}
 800e0b6:	b083      	sub	sp, #12
 800e0b8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800e0be:	4b17      	ldr	r3, [pc, #92]	; (800e11c <udp_new_port+0x68>)
 800e0c0:	881b      	ldrh	r3, [r3, #0]
 800e0c2:	1c5a      	adds	r2, r3, #1
 800e0c4:	b291      	uxth	r1, r2
 800e0c6:	4a15      	ldr	r2, [pc, #84]	; (800e11c <udp_new_port+0x68>)
 800e0c8:	8011      	strh	r1, [r2, #0]
 800e0ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e0ce:	4293      	cmp	r3, r2
 800e0d0:	d103      	bne.n	800e0da <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800e0d2:	4b12      	ldr	r3, [pc, #72]	; (800e11c <udp_new_port+0x68>)
 800e0d4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800e0d8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e0da:	4b11      	ldr	r3, [pc, #68]	; (800e120 <udp_new_port+0x6c>)
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	603b      	str	r3, [r7, #0]
 800e0e0:	e011      	b.n	800e106 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800e0e2:	683b      	ldr	r3, [r7, #0]
 800e0e4:	8a5a      	ldrh	r2, [r3, #18]
 800e0e6:	4b0d      	ldr	r3, [pc, #52]	; (800e11c <udp_new_port+0x68>)
 800e0e8:	881b      	ldrh	r3, [r3, #0]
 800e0ea:	429a      	cmp	r2, r3
 800e0ec:	d108      	bne.n	800e100 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800e0ee:	88fb      	ldrh	r3, [r7, #6]
 800e0f0:	3301      	adds	r3, #1
 800e0f2:	80fb      	strh	r3, [r7, #6]
 800e0f4:	88fb      	ldrh	r3, [r7, #6]
 800e0f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e0fa:	d3e0      	bcc.n	800e0be <udp_new_port+0xa>
        return 0;
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	e007      	b.n	800e110 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e100:	683b      	ldr	r3, [r7, #0]
 800e102:	68db      	ldr	r3, [r3, #12]
 800e104:	603b      	str	r3, [r7, #0]
 800e106:	683b      	ldr	r3, [r7, #0]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d1ea      	bne.n	800e0e2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800e10c:	4b03      	ldr	r3, [pc, #12]	; (800e11c <udp_new_port+0x68>)
 800e10e:	881b      	ldrh	r3, [r3, #0]
}
 800e110:	4618      	mov	r0, r3
 800e112:	370c      	adds	r7, #12
 800e114:	46bd      	mov	sp, r7
 800e116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11a:	4770      	bx	lr
 800e11c:	20000028 	.word	0x20000028
 800e120:	2000a784 	.word	0x2000a784

0800e124 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b084      	sub	sp, #16
 800e128:	af00      	add	r7, sp, #0
 800e12a:	60f8      	str	r0, [r7, #12]
 800e12c:	60b9      	str	r1, [r7, #8]
 800e12e:	4613      	mov	r3, r2
 800e130:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d105      	bne.n	800e144 <udp_input_local_match+0x20>
 800e138:	4b27      	ldr	r3, [pc, #156]	; (800e1d8 <udp_input_local_match+0xb4>)
 800e13a:	2287      	movs	r2, #135	; 0x87
 800e13c:	4927      	ldr	r1, [pc, #156]	; (800e1dc <udp_input_local_match+0xb8>)
 800e13e:	4828      	ldr	r0, [pc, #160]	; (800e1e0 <udp_input_local_match+0xbc>)
 800e140:	f003 fc6a 	bl	8011a18 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800e144:	68bb      	ldr	r3, [r7, #8]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d105      	bne.n	800e156 <udp_input_local_match+0x32>
 800e14a:	4b23      	ldr	r3, [pc, #140]	; (800e1d8 <udp_input_local_match+0xb4>)
 800e14c:	2288      	movs	r2, #136	; 0x88
 800e14e:	4925      	ldr	r1, [pc, #148]	; (800e1e4 <udp_input_local_match+0xc0>)
 800e150:	4823      	ldr	r0, [pc, #140]	; (800e1e0 <udp_input_local_match+0xbc>)
 800e152:	f003 fc61 	bl	8011a18 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	7a1b      	ldrb	r3, [r3, #8]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d00b      	beq.n	800e176 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	7a1a      	ldrb	r2, [r3, #8]
 800e162:	4b21      	ldr	r3, [pc, #132]	; (800e1e8 <udp_input_local_match+0xc4>)
 800e164:	685b      	ldr	r3, [r3, #4]
 800e166:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e16a:	3301      	adds	r3, #1
 800e16c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e16e:	429a      	cmp	r2, r3
 800e170:	d001      	beq.n	800e176 <udp_input_local_match+0x52>
    return 0;
 800e172:	2300      	movs	r3, #0
 800e174:	e02b      	b.n	800e1ce <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800e176:	79fb      	ldrb	r3, [r7, #7]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d018      	beq.n	800e1ae <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d013      	beq.n	800e1aa <udp_input_local_match+0x86>
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d00f      	beq.n	800e1aa <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e18a:	4b17      	ldr	r3, [pc, #92]	; (800e1e8 <udp_input_local_match+0xc4>)
 800e18c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e18e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e192:	d00a      	beq.n	800e1aa <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	681a      	ldr	r2, [r3, #0]
 800e198:	4b13      	ldr	r3, [pc, #76]	; (800e1e8 <udp_input_local_match+0xc4>)
 800e19a:	695b      	ldr	r3, [r3, #20]
 800e19c:	405a      	eors	r2, r3
 800e19e:	68bb      	ldr	r3, [r7, #8]
 800e1a0:	3308      	adds	r3, #8
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d110      	bne.n	800e1cc <udp_input_local_match+0xa8>
          return 1;
 800e1aa:	2301      	movs	r3, #1
 800e1ac:	e00f      	b.n	800e1ce <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d009      	beq.n	800e1c8 <udp_input_local_match+0xa4>
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d005      	beq.n	800e1c8 <udp_input_local_match+0xa4>
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	681a      	ldr	r2, [r3, #0]
 800e1c0:	4b09      	ldr	r3, [pc, #36]	; (800e1e8 <udp_input_local_match+0xc4>)
 800e1c2:	695b      	ldr	r3, [r3, #20]
 800e1c4:	429a      	cmp	r2, r3
 800e1c6:	d101      	bne.n	800e1cc <udp_input_local_match+0xa8>
        return 1;
 800e1c8:	2301      	movs	r3, #1
 800e1ca:	e000      	b.n	800e1ce <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800e1cc:	2300      	movs	r3, #0
}
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	3710      	adds	r7, #16
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bd80      	pop	{r7, pc}
 800e1d6:	bf00      	nop
 800e1d8:	080159bc 	.word	0x080159bc
 800e1dc:	080159ec 	.word	0x080159ec
 800e1e0:	08015a10 	.word	0x08015a10
 800e1e4:	08015a38 	.word	0x08015a38
 800e1e8:	20004ff8 	.word	0x20004ff8

0800e1ec <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800e1ec:	b590      	push	{r4, r7, lr}
 800e1ee:	b08d      	sub	sp, #52	; 0x34
 800e1f0:	af02      	add	r7, sp, #8
 800e1f2:	6078      	str	r0, [r7, #4]
 800e1f4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d105      	bne.n	800e20c <udp_input+0x20>
 800e200:	4b7c      	ldr	r3, [pc, #496]	; (800e3f4 <udp_input+0x208>)
 800e202:	22cf      	movs	r2, #207	; 0xcf
 800e204:	497c      	ldr	r1, [pc, #496]	; (800e3f8 <udp_input+0x20c>)
 800e206:	487d      	ldr	r0, [pc, #500]	; (800e3fc <udp_input+0x210>)
 800e208:	f003 fc06 	bl	8011a18 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800e20c:	683b      	ldr	r3, [r7, #0]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d105      	bne.n	800e21e <udp_input+0x32>
 800e212:	4b78      	ldr	r3, [pc, #480]	; (800e3f4 <udp_input+0x208>)
 800e214:	22d0      	movs	r2, #208	; 0xd0
 800e216:	497a      	ldr	r1, [pc, #488]	; (800e400 <udp_input+0x214>)
 800e218:	4878      	ldr	r0, [pc, #480]	; (800e3fc <udp_input+0x210>)
 800e21a:	f003 fbfd 	bl	8011a18 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	895b      	ldrh	r3, [r3, #10]
 800e222:	2b07      	cmp	r3, #7
 800e224:	d803      	bhi.n	800e22e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800e226:	6878      	ldr	r0, [r7, #4]
 800e228:	f7fa f9fe 	bl	8008628 <pbuf_free>
    goto end;
 800e22c:	e0de      	b.n	800e3ec <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	685b      	ldr	r3, [r3, #4]
 800e232:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800e234:	4b73      	ldr	r3, [pc, #460]	; (800e404 <udp_input+0x218>)
 800e236:	695b      	ldr	r3, [r3, #20]
 800e238:	4a72      	ldr	r2, [pc, #456]	; (800e404 <udp_input+0x218>)
 800e23a:	6812      	ldr	r2, [r2, #0]
 800e23c:	4611      	mov	r1, r2
 800e23e:	4618      	mov	r0, r3
 800e240:	f001 fdb6 	bl	800fdb0 <ip4_addr_isbroadcast_u32>
 800e244:	4603      	mov	r3, r0
 800e246:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800e248:	697b      	ldr	r3, [r7, #20]
 800e24a:	881b      	ldrh	r3, [r3, #0]
 800e24c:	b29b      	uxth	r3, r3
 800e24e:	4618      	mov	r0, r3
 800e250:	f7f8 fe8c 	bl	8006f6c <lwip_htons>
 800e254:	4603      	mov	r3, r0
 800e256:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800e258:	697b      	ldr	r3, [r7, #20]
 800e25a:	885b      	ldrh	r3, [r3, #2]
 800e25c:	b29b      	uxth	r3, r3
 800e25e:	4618      	mov	r0, r3
 800e260:	f7f8 fe84 	bl	8006f6c <lwip_htons>
 800e264:	4603      	mov	r3, r0
 800e266:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800e268:	2300      	movs	r3, #0
 800e26a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800e26c:	2300      	movs	r3, #0
 800e26e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800e270:	2300      	movs	r3, #0
 800e272:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e274:	4b64      	ldr	r3, [pc, #400]	; (800e408 <udp_input+0x21c>)
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	627b      	str	r3, [r7, #36]	; 0x24
 800e27a:	e054      	b.n	800e326 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800e27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e27e:	8a5b      	ldrh	r3, [r3, #18]
 800e280:	89fa      	ldrh	r2, [r7, #14]
 800e282:	429a      	cmp	r2, r3
 800e284:	d14a      	bne.n	800e31c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800e286:	7cfb      	ldrb	r3, [r7, #19]
 800e288:	461a      	mov	r2, r3
 800e28a:	6839      	ldr	r1, [r7, #0]
 800e28c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e28e:	f7ff ff49 	bl	800e124 <udp_input_local_match>
 800e292:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800e294:	2b00      	cmp	r3, #0
 800e296:	d041      	beq.n	800e31c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800e298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e29a:	7c1b      	ldrb	r3, [r3, #16]
 800e29c:	f003 0304 	and.w	r3, r3, #4
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d11d      	bne.n	800e2e0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800e2a4:	69fb      	ldr	r3, [r7, #28]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d102      	bne.n	800e2b0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800e2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ac:	61fb      	str	r3, [r7, #28]
 800e2ae:	e017      	b.n	800e2e0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800e2b0:	7cfb      	ldrb	r3, [r7, #19]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d014      	beq.n	800e2e0 <udp_input+0xf4>
 800e2b6:	4b53      	ldr	r3, [pc, #332]	; (800e404 <udp_input+0x218>)
 800e2b8:	695b      	ldr	r3, [r3, #20]
 800e2ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e2be:	d10f      	bne.n	800e2e0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800e2c0:	69fb      	ldr	r3, [r7, #28]
 800e2c2:	681a      	ldr	r2, [r3, #0]
 800e2c4:	683b      	ldr	r3, [r7, #0]
 800e2c6:	3304      	adds	r3, #4
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	429a      	cmp	r2, r3
 800e2cc:	d008      	beq.n	800e2e0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800e2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2d0:	681a      	ldr	r2, [r3, #0]
 800e2d2:	683b      	ldr	r3, [r7, #0]
 800e2d4:	3304      	adds	r3, #4
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	429a      	cmp	r2, r3
 800e2da:	d101      	bne.n	800e2e0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800e2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2de:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800e2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2e2:	8a9b      	ldrh	r3, [r3, #20]
 800e2e4:	8a3a      	ldrh	r2, [r7, #16]
 800e2e6:	429a      	cmp	r2, r3
 800e2e8:	d118      	bne.n	800e31c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ec:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d005      	beq.n	800e2fe <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800e2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2f4:	685a      	ldr	r2, [r3, #4]
 800e2f6:	4b43      	ldr	r3, [pc, #268]	; (800e404 <udp_input+0x218>)
 800e2f8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e2fa:	429a      	cmp	r2, r3
 800e2fc:	d10e      	bne.n	800e31c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800e2fe:	6a3b      	ldr	r3, [r7, #32]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d014      	beq.n	800e32e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800e304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e306:	68da      	ldr	r2, [r3, #12]
 800e308:	6a3b      	ldr	r3, [r7, #32]
 800e30a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800e30c:	4b3e      	ldr	r3, [pc, #248]	; (800e408 <udp_input+0x21c>)
 800e30e:	681a      	ldr	r2, [r3, #0]
 800e310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e312:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800e314:	4a3c      	ldr	r2, [pc, #240]	; (800e408 <udp_input+0x21c>)
 800e316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e318:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800e31a:	e008      	b.n	800e32e <udp_input+0x142>
      }
    }

    prev = pcb;
 800e31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e31e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e322:	68db      	ldr	r3, [r3, #12]
 800e324:	627b      	str	r3, [r7, #36]	; 0x24
 800e326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d1a7      	bne.n	800e27c <udp_input+0x90>
 800e32c:	e000      	b.n	800e330 <udp_input+0x144>
        break;
 800e32e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800e330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e332:	2b00      	cmp	r3, #0
 800e334:	d101      	bne.n	800e33a <udp_input+0x14e>
    pcb = uncon_pcb;
 800e336:	69fb      	ldr	r3, [r7, #28]
 800e338:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800e33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d002      	beq.n	800e346 <udp_input+0x15a>
    for_us = 1;
 800e340:	2301      	movs	r3, #1
 800e342:	76fb      	strb	r3, [r7, #27]
 800e344:	e00a      	b.n	800e35c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800e346:	683b      	ldr	r3, [r7, #0]
 800e348:	3304      	adds	r3, #4
 800e34a:	681a      	ldr	r2, [r3, #0]
 800e34c:	4b2d      	ldr	r3, [pc, #180]	; (800e404 <udp_input+0x218>)
 800e34e:	695b      	ldr	r3, [r3, #20]
 800e350:	429a      	cmp	r2, r3
 800e352:	bf0c      	ite	eq
 800e354:	2301      	moveq	r3, #1
 800e356:	2300      	movne	r3, #0
 800e358:	b2db      	uxtb	r3, r3
 800e35a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800e35c:	7efb      	ldrb	r3, [r7, #27]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d041      	beq.n	800e3e6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800e362:	2108      	movs	r1, #8
 800e364:	6878      	ldr	r0, [r7, #4]
 800e366:	f7fa f8d9 	bl	800851c <pbuf_remove_header>
 800e36a:	4603      	mov	r3, r0
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d00a      	beq.n	800e386 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800e370:	4b20      	ldr	r3, [pc, #128]	; (800e3f4 <udp_input+0x208>)
 800e372:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800e376:	4925      	ldr	r1, [pc, #148]	; (800e40c <udp_input+0x220>)
 800e378:	4820      	ldr	r0, [pc, #128]	; (800e3fc <udp_input+0x210>)
 800e37a:	f003 fb4d 	bl	8011a18 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800e37e:	6878      	ldr	r0, [r7, #4]
 800e380:	f7fa f952 	bl	8008628 <pbuf_free>
      goto end;
 800e384:	e032      	b.n	800e3ec <udp_input+0x200>
    }

    if (pcb != NULL) {
 800e386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d012      	beq.n	800e3b2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800e38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e38e:	699b      	ldr	r3, [r3, #24]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d00a      	beq.n	800e3aa <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800e394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e396:	699c      	ldr	r4, [r3, #24]
 800e398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e39a:	69d8      	ldr	r0, [r3, #28]
 800e39c:	8a3b      	ldrh	r3, [r7, #16]
 800e39e:	9300      	str	r3, [sp, #0]
 800e3a0:	4b1b      	ldr	r3, [pc, #108]	; (800e410 <udp_input+0x224>)
 800e3a2:	687a      	ldr	r2, [r7, #4]
 800e3a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e3a6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800e3a8:	e021      	b.n	800e3ee <udp_input+0x202>
        pbuf_free(p);
 800e3aa:	6878      	ldr	r0, [r7, #4]
 800e3ac:	f7fa f93c 	bl	8008628 <pbuf_free>
        goto end;
 800e3b0:	e01c      	b.n	800e3ec <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800e3b2:	7cfb      	ldrb	r3, [r7, #19]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d112      	bne.n	800e3de <udp_input+0x1f2>
 800e3b8:	4b12      	ldr	r3, [pc, #72]	; (800e404 <udp_input+0x218>)
 800e3ba:	695b      	ldr	r3, [r3, #20]
 800e3bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e3c0:	2be0      	cmp	r3, #224	; 0xe0
 800e3c2:	d00c      	beq.n	800e3de <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800e3c4:	4b0f      	ldr	r3, [pc, #60]	; (800e404 <udp_input+0x218>)
 800e3c6:	899b      	ldrh	r3, [r3, #12]
 800e3c8:	3308      	adds	r3, #8
 800e3ca:	b29b      	uxth	r3, r3
 800e3cc:	b21b      	sxth	r3, r3
 800e3ce:	4619      	mov	r1, r3
 800e3d0:	6878      	ldr	r0, [r7, #4]
 800e3d2:	f7fa f916 	bl	8008602 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800e3d6:	2103      	movs	r1, #3
 800e3d8:	6878      	ldr	r0, [r7, #4]
 800e3da:	f001 f9c9 	bl	800f770 <icmp_dest_unreach>
      pbuf_free(p);
 800e3de:	6878      	ldr	r0, [r7, #4]
 800e3e0:	f7fa f922 	bl	8008628 <pbuf_free>
  return;
 800e3e4:	e003      	b.n	800e3ee <udp_input+0x202>
    pbuf_free(p);
 800e3e6:	6878      	ldr	r0, [r7, #4]
 800e3e8:	f7fa f91e 	bl	8008628 <pbuf_free>
  return;
 800e3ec:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800e3ee:	372c      	adds	r7, #44	; 0x2c
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	bd90      	pop	{r4, r7, pc}
 800e3f4:	080159bc 	.word	0x080159bc
 800e3f8:	08015a60 	.word	0x08015a60
 800e3fc:	08015a10 	.word	0x08015a10
 800e400:	08015a78 	.word	0x08015a78
 800e404:	20004ff8 	.word	0x20004ff8
 800e408:	2000a784 	.word	0x2000a784
 800e40c:	08015a94 	.word	0x08015a94
 800e410:	20005008 	.word	0x20005008

0800e414 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b086      	sub	sp, #24
 800e418:	af00      	add	r7, sp, #0
 800e41a:	60f8      	str	r0, [r7, #12]
 800e41c:	60b9      	str	r1, [r7, #8]
 800e41e:	4613      	mov	r3, r2
 800e420:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e422:	68bb      	ldr	r3, [r7, #8]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d101      	bne.n	800e42c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800e428:	4b39      	ldr	r3, [pc, #228]	; (800e510 <udp_bind+0xfc>)
 800e42a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d109      	bne.n	800e446 <udp_bind+0x32>
 800e432:	4b38      	ldr	r3, [pc, #224]	; (800e514 <udp_bind+0x100>)
 800e434:	f240 32b7 	movw	r2, #951	; 0x3b7
 800e438:	4937      	ldr	r1, [pc, #220]	; (800e518 <udp_bind+0x104>)
 800e43a:	4838      	ldr	r0, [pc, #224]	; (800e51c <udp_bind+0x108>)
 800e43c:	f003 faec 	bl	8011a18 <iprintf>
 800e440:	f06f 030f 	mvn.w	r3, #15
 800e444:	e060      	b.n	800e508 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800e446:	2300      	movs	r3, #0
 800e448:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e44a:	4b35      	ldr	r3, [pc, #212]	; (800e520 <udp_bind+0x10c>)
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	617b      	str	r3, [r7, #20]
 800e450:	e009      	b.n	800e466 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800e452:	68fa      	ldr	r2, [r7, #12]
 800e454:	697b      	ldr	r3, [r7, #20]
 800e456:	429a      	cmp	r2, r3
 800e458:	d102      	bne.n	800e460 <udp_bind+0x4c>
      rebind = 1;
 800e45a:	2301      	movs	r3, #1
 800e45c:	74fb      	strb	r3, [r7, #19]
      break;
 800e45e:	e005      	b.n	800e46c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e460:	697b      	ldr	r3, [r7, #20]
 800e462:	68db      	ldr	r3, [r3, #12]
 800e464:	617b      	str	r3, [r7, #20]
 800e466:	697b      	ldr	r3, [r7, #20]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d1f2      	bne.n	800e452 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800e46c:	88fb      	ldrh	r3, [r7, #6]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d109      	bne.n	800e486 <udp_bind+0x72>
    port = udp_new_port();
 800e472:	f7ff fe1f 	bl	800e0b4 <udp_new_port>
 800e476:	4603      	mov	r3, r0
 800e478:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800e47a:	88fb      	ldrh	r3, [r7, #6]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d12c      	bne.n	800e4da <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800e480:	f06f 0307 	mvn.w	r3, #7
 800e484:	e040      	b.n	800e508 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e486:	4b26      	ldr	r3, [pc, #152]	; (800e520 <udp_bind+0x10c>)
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	617b      	str	r3, [r7, #20]
 800e48c:	e022      	b.n	800e4d4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800e48e:	68fa      	ldr	r2, [r7, #12]
 800e490:	697b      	ldr	r3, [r7, #20]
 800e492:	429a      	cmp	r2, r3
 800e494:	d01b      	beq.n	800e4ce <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800e496:	697b      	ldr	r3, [r7, #20]
 800e498:	8a5b      	ldrh	r3, [r3, #18]
 800e49a:	88fa      	ldrh	r2, [r7, #6]
 800e49c:	429a      	cmp	r2, r3
 800e49e:	d116      	bne.n	800e4ce <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800e4a0:	697b      	ldr	r3, [r7, #20]
 800e4a2:	681a      	ldr	r2, [r3, #0]
 800e4a4:	68bb      	ldr	r3, [r7, #8]
 800e4a6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800e4a8:	429a      	cmp	r2, r3
 800e4aa:	d00d      	beq.n	800e4c8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800e4ac:	68bb      	ldr	r3, [r7, #8]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d00a      	beq.n	800e4c8 <udp_bind+0xb4>
 800e4b2:	68bb      	ldr	r3, [r7, #8]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d006      	beq.n	800e4c8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800e4ba:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d003      	beq.n	800e4c8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800e4c0:	697b      	ldr	r3, [r7, #20]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d102      	bne.n	800e4ce <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800e4c8:	f06f 0307 	mvn.w	r3, #7
 800e4cc:	e01c      	b.n	800e508 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e4ce:	697b      	ldr	r3, [r7, #20]
 800e4d0:	68db      	ldr	r3, [r3, #12]
 800e4d2:	617b      	str	r3, [r7, #20]
 800e4d4:	697b      	ldr	r3, [r7, #20]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d1d9      	bne.n	800e48e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800e4da:	68bb      	ldr	r3, [r7, #8]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d002      	beq.n	800e4e6 <udp_bind+0xd2>
 800e4e0:	68bb      	ldr	r3, [r7, #8]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	e000      	b.n	800e4e8 <udp_bind+0xd4>
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	68fa      	ldr	r2, [r7, #12]
 800e4ea:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	88fa      	ldrh	r2, [r7, #6]
 800e4f0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800e4f2:	7cfb      	ldrb	r3, [r7, #19]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d106      	bne.n	800e506 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800e4f8:	4b09      	ldr	r3, [pc, #36]	; (800e520 <udp_bind+0x10c>)
 800e4fa:	681a      	ldr	r2, [r3, #0]
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800e500:	4a07      	ldr	r2, [pc, #28]	; (800e520 <udp_bind+0x10c>)
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800e506:	2300      	movs	r3, #0
}
 800e508:	4618      	mov	r0, r3
 800e50a:	3718      	adds	r7, #24
 800e50c:	46bd      	mov	sp, r7
 800e50e:	bd80      	pop	{r7, pc}
 800e510:	080164d8 	.word	0x080164d8
 800e514:	080159bc 	.word	0x080159bc
 800e518:	08015c84 	.word	0x08015c84
 800e51c:	08015a10 	.word	0x08015a10
 800e520:	2000a784 	.word	0x2000a784

0800e524 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b086      	sub	sp, #24
 800e528:	af00      	add	r7, sp, #0
 800e52a:	60f8      	str	r0, [r7, #12]
 800e52c:	60b9      	str	r1, [r7, #8]
 800e52e:	4613      	mov	r3, r2
 800e530:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d109      	bne.n	800e54c <udp_connect+0x28>
 800e538:	4b2c      	ldr	r3, [pc, #176]	; (800e5ec <udp_connect+0xc8>)
 800e53a:	f240 4235 	movw	r2, #1077	; 0x435
 800e53e:	492c      	ldr	r1, [pc, #176]	; (800e5f0 <udp_connect+0xcc>)
 800e540:	482c      	ldr	r0, [pc, #176]	; (800e5f4 <udp_connect+0xd0>)
 800e542:	f003 fa69 	bl	8011a18 <iprintf>
 800e546:	f06f 030f 	mvn.w	r3, #15
 800e54a:	e04b      	b.n	800e5e4 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800e54c:	68bb      	ldr	r3, [r7, #8]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d109      	bne.n	800e566 <udp_connect+0x42>
 800e552:	4b26      	ldr	r3, [pc, #152]	; (800e5ec <udp_connect+0xc8>)
 800e554:	f240 4236 	movw	r2, #1078	; 0x436
 800e558:	4927      	ldr	r1, [pc, #156]	; (800e5f8 <udp_connect+0xd4>)
 800e55a:	4826      	ldr	r0, [pc, #152]	; (800e5f4 <udp_connect+0xd0>)
 800e55c:	f003 fa5c 	bl	8011a18 <iprintf>
 800e560:	f06f 030f 	mvn.w	r3, #15
 800e564:	e03e      	b.n	800e5e4 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	8a5b      	ldrh	r3, [r3, #18]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d10f      	bne.n	800e58e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800e56e:	68f9      	ldr	r1, [r7, #12]
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	8a5b      	ldrh	r3, [r3, #18]
 800e574:	461a      	mov	r2, r3
 800e576:	68f8      	ldr	r0, [r7, #12]
 800e578:	f7ff ff4c 	bl	800e414 <udp_bind>
 800e57c:	4603      	mov	r3, r0
 800e57e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800e580:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d002      	beq.n	800e58e <udp_connect+0x6a>
      return err;
 800e588:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e58c:	e02a      	b.n	800e5e4 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800e58e:	68bb      	ldr	r3, [r7, #8]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d002      	beq.n	800e59a <udp_connect+0x76>
 800e594:	68bb      	ldr	r3, [r7, #8]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	e000      	b.n	800e59c <udp_connect+0x78>
 800e59a:	2300      	movs	r3, #0
 800e59c:	68fa      	ldr	r2, [r7, #12]
 800e59e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	88fa      	ldrh	r2, [r7, #6]
 800e5a4:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	7c1b      	ldrb	r3, [r3, #16]
 800e5aa:	f043 0304 	orr.w	r3, r3, #4
 800e5ae:	b2da      	uxtb	r2, r3
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e5b4:	4b11      	ldr	r3, [pc, #68]	; (800e5fc <udp_connect+0xd8>)
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	617b      	str	r3, [r7, #20]
 800e5ba:	e008      	b.n	800e5ce <udp_connect+0xaa>
    if (pcb == ipcb) {
 800e5bc:	68fa      	ldr	r2, [r7, #12]
 800e5be:	697b      	ldr	r3, [r7, #20]
 800e5c0:	429a      	cmp	r2, r3
 800e5c2:	d101      	bne.n	800e5c8 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	e00d      	b.n	800e5e4 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e5c8:	697b      	ldr	r3, [r7, #20]
 800e5ca:	68db      	ldr	r3, [r3, #12]
 800e5cc:	617b      	str	r3, [r7, #20]
 800e5ce:	697b      	ldr	r3, [r7, #20]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d1f3      	bne.n	800e5bc <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800e5d4:	4b09      	ldr	r3, [pc, #36]	; (800e5fc <udp_connect+0xd8>)
 800e5d6:	681a      	ldr	r2, [r3, #0]
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800e5dc:	4a07      	ldr	r2, [pc, #28]	; (800e5fc <udp_connect+0xd8>)
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800e5e2:	2300      	movs	r3, #0
}
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	3718      	adds	r7, #24
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	bd80      	pop	{r7, pc}
 800e5ec:	080159bc 	.word	0x080159bc
 800e5f0:	08015c9c 	.word	0x08015c9c
 800e5f4:	08015a10 	.word	0x08015a10
 800e5f8:	08015cb8 	.word	0x08015cb8
 800e5fc:	2000a784 	.word	0x2000a784

0800e600 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b084      	sub	sp, #16
 800e604:	af00      	add	r7, sp, #0
 800e606:	60f8      	str	r0, [r7, #12]
 800e608:	60b9      	str	r1, [r7, #8]
 800e60a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d107      	bne.n	800e622 <udp_recv+0x22>
 800e612:	4b08      	ldr	r3, [pc, #32]	; (800e634 <udp_recv+0x34>)
 800e614:	f240 428a 	movw	r2, #1162	; 0x48a
 800e618:	4907      	ldr	r1, [pc, #28]	; (800e638 <udp_recv+0x38>)
 800e61a:	4808      	ldr	r0, [pc, #32]	; (800e63c <udp_recv+0x3c>)
 800e61c:	f003 f9fc 	bl	8011a18 <iprintf>
 800e620:	e005      	b.n	800e62e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	68ba      	ldr	r2, [r7, #8]
 800e626:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	687a      	ldr	r2, [r7, #4]
 800e62c:	61da      	str	r2, [r3, #28]
}
 800e62e:	3710      	adds	r7, #16
 800e630:	46bd      	mov	sp, r7
 800e632:	bd80      	pop	{r7, pc}
 800e634:	080159bc 	.word	0x080159bc
 800e638:	08015cf0 	.word	0x08015cf0
 800e63c:	08015a10 	.word	0x08015a10

0800e640 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800e640:	b580      	push	{r7, lr}
 800e642:	b082      	sub	sp, #8
 800e644:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800e646:	2000      	movs	r0, #0
 800e648:	f7f9 f908 	bl	800785c <memp_malloc>
 800e64c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d007      	beq.n	800e664 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800e654:	2220      	movs	r2, #32
 800e656:	2100      	movs	r1, #0
 800e658:	6878      	ldr	r0, [r7, #4]
 800e65a:	f003 fa42 	bl	8011ae2 <memset>
    pcb->ttl = UDP_TTL;
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	22ff      	movs	r2, #255	; 0xff
 800e662:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800e664:	687b      	ldr	r3, [r7, #4]
}
 800e666:	4618      	mov	r0, r3
 800e668:	3708      	adds	r7, #8
 800e66a:	46bd      	mov	sp, r7
 800e66c:	bd80      	pop	{r7, pc}
	...

0800e670 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e670:	b480      	push	{r7}
 800e672:	b085      	sub	sp, #20
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]
 800e678:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d01e      	beq.n	800e6be <udp_netif_ip_addr_changed+0x4e>
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d01a      	beq.n	800e6be <udp_netif_ip_addr_changed+0x4e>
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d017      	beq.n	800e6be <udp_netif_ip_addr_changed+0x4e>
 800e68e:	683b      	ldr	r3, [r7, #0]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d013      	beq.n	800e6be <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e696:	4b0d      	ldr	r3, [pc, #52]	; (800e6cc <udp_netif_ip_addr_changed+0x5c>)
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	60fb      	str	r3, [r7, #12]
 800e69c:	e00c      	b.n	800e6b8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	681a      	ldr	r2, [r3, #0]
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	429a      	cmp	r2, r3
 800e6a8:	d103      	bne.n	800e6b2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800e6aa:	683b      	ldr	r3, [r7, #0]
 800e6ac:	681a      	ldr	r2, [r3, #0]
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	68db      	ldr	r3, [r3, #12]
 800e6b6:	60fb      	str	r3, [r7, #12]
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d1ef      	bne.n	800e69e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800e6be:	bf00      	nop
 800e6c0:	3714      	adds	r7, #20
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c8:	4770      	bx	lr
 800e6ca:	bf00      	nop
 800e6cc:	2000a784 	.word	0x2000a784

0800e6d0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	b082      	sub	sp, #8
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800e6d8:	4915      	ldr	r1, [pc, #84]	; (800e730 <etharp_free_entry+0x60>)
 800e6da:	687a      	ldr	r2, [r7, #4]
 800e6dc:	4613      	mov	r3, r2
 800e6de:	005b      	lsls	r3, r3, #1
 800e6e0:	4413      	add	r3, r2
 800e6e2:	00db      	lsls	r3, r3, #3
 800e6e4:	440b      	add	r3, r1
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d013      	beq.n	800e714 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800e6ec:	4910      	ldr	r1, [pc, #64]	; (800e730 <etharp_free_entry+0x60>)
 800e6ee:	687a      	ldr	r2, [r7, #4]
 800e6f0:	4613      	mov	r3, r2
 800e6f2:	005b      	lsls	r3, r3, #1
 800e6f4:	4413      	add	r3, r2
 800e6f6:	00db      	lsls	r3, r3, #3
 800e6f8:	440b      	add	r3, r1
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f7f9 ff93 	bl	8008628 <pbuf_free>
    arp_table[i].q = NULL;
 800e702:	490b      	ldr	r1, [pc, #44]	; (800e730 <etharp_free_entry+0x60>)
 800e704:	687a      	ldr	r2, [r7, #4]
 800e706:	4613      	mov	r3, r2
 800e708:	005b      	lsls	r3, r3, #1
 800e70a:	4413      	add	r3, r2
 800e70c:	00db      	lsls	r3, r3, #3
 800e70e:	440b      	add	r3, r1
 800e710:	2200      	movs	r2, #0
 800e712:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800e714:	4906      	ldr	r1, [pc, #24]	; (800e730 <etharp_free_entry+0x60>)
 800e716:	687a      	ldr	r2, [r7, #4]
 800e718:	4613      	mov	r3, r2
 800e71a:	005b      	lsls	r3, r3, #1
 800e71c:	4413      	add	r3, r2
 800e71e:	00db      	lsls	r3, r3, #3
 800e720:	440b      	add	r3, r1
 800e722:	3314      	adds	r3, #20
 800e724:	2200      	movs	r2, #0
 800e726:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800e728:	bf00      	nop
 800e72a:	3708      	adds	r7, #8
 800e72c:	46bd      	mov	sp, r7
 800e72e:	bd80      	pop	{r7, pc}
 800e730:	2000a788 	.word	0x2000a788

0800e734 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800e734:	b580      	push	{r7, lr}
 800e736:	b082      	sub	sp, #8
 800e738:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e73a:	2300      	movs	r3, #0
 800e73c:	607b      	str	r3, [r7, #4]
 800e73e:	e096      	b.n	800e86e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800e740:	494f      	ldr	r1, [pc, #316]	; (800e880 <etharp_tmr+0x14c>)
 800e742:	687a      	ldr	r2, [r7, #4]
 800e744:	4613      	mov	r3, r2
 800e746:	005b      	lsls	r3, r3, #1
 800e748:	4413      	add	r3, r2
 800e74a:	00db      	lsls	r3, r3, #3
 800e74c:	440b      	add	r3, r1
 800e74e:	3314      	adds	r3, #20
 800e750:	781b      	ldrb	r3, [r3, #0]
 800e752:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800e754:	78fb      	ldrb	r3, [r7, #3]
 800e756:	2b00      	cmp	r3, #0
 800e758:	f000 8086 	beq.w	800e868 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800e75c:	4948      	ldr	r1, [pc, #288]	; (800e880 <etharp_tmr+0x14c>)
 800e75e:	687a      	ldr	r2, [r7, #4]
 800e760:	4613      	mov	r3, r2
 800e762:	005b      	lsls	r3, r3, #1
 800e764:	4413      	add	r3, r2
 800e766:	00db      	lsls	r3, r3, #3
 800e768:	440b      	add	r3, r1
 800e76a:	3312      	adds	r3, #18
 800e76c:	881b      	ldrh	r3, [r3, #0]
 800e76e:	3301      	adds	r3, #1
 800e770:	b298      	uxth	r0, r3
 800e772:	4943      	ldr	r1, [pc, #268]	; (800e880 <etharp_tmr+0x14c>)
 800e774:	687a      	ldr	r2, [r7, #4]
 800e776:	4613      	mov	r3, r2
 800e778:	005b      	lsls	r3, r3, #1
 800e77a:	4413      	add	r3, r2
 800e77c:	00db      	lsls	r3, r3, #3
 800e77e:	440b      	add	r3, r1
 800e780:	3312      	adds	r3, #18
 800e782:	4602      	mov	r2, r0
 800e784:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e786:	493e      	ldr	r1, [pc, #248]	; (800e880 <etharp_tmr+0x14c>)
 800e788:	687a      	ldr	r2, [r7, #4]
 800e78a:	4613      	mov	r3, r2
 800e78c:	005b      	lsls	r3, r3, #1
 800e78e:	4413      	add	r3, r2
 800e790:	00db      	lsls	r3, r3, #3
 800e792:	440b      	add	r3, r1
 800e794:	3312      	adds	r3, #18
 800e796:	881b      	ldrh	r3, [r3, #0]
 800e798:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800e79c:	d215      	bcs.n	800e7ca <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e79e:	4938      	ldr	r1, [pc, #224]	; (800e880 <etharp_tmr+0x14c>)
 800e7a0:	687a      	ldr	r2, [r7, #4]
 800e7a2:	4613      	mov	r3, r2
 800e7a4:	005b      	lsls	r3, r3, #1
 800e7a6:	4413      	add	r3, r2
 800e7a8:	00db      	lsls	r3, r3, #3
 800e7aa:	440b      	add	r3, r1
 800e7ac:	3314      	adds	r3, #20
 800e7ae:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e7b0:	2b01      	cmp	r3, #1
 800e7b2:	d10e      	bne.n	800e7d2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800e7b4:	4932      	ldr	r1, [pc, #200]	; (800e880 <etharp_tmr+0x14c>)
 800e7b6:	687a      	ldr	r2, [r7, #4]
 800e7b8:	4613      	mov	r3, r2
 800e7ba:	005b      	lsls	r3, r3, #1
 800e7bc:	4413      	add	r3, r2
 800e7be:	00db      	lsls	r3, r3, #3
 800e7c0:	440b      	add	r3, r1
 800e7c2:	3312      	adds	r3, #18
 800e7c4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e7c6:	2b04      	cmp	r3, #4
 800e7c8:	d903      	bls.n	800e7d2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800e7ca:	6878      	ldr	r0, [r7, #4]
 800e7cc:	f7ff ff80 	bl	800e6d0 <etharp_free_entry>
 800e7d0:	e04a      	b.n	800e868 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800e7d2:	492b      	ldr	r1, [pc, #172]	; (800e880 <etharp_tmr+0x14c>)
 800e7d4:	687a      	ldr	r2, [r7, #4]
 800e7d6:	4613      	mov	r3, r2
 800e7d8:	005b      	lsls	r3, r3, #1
 800e7da:	4413      	add	r3, r2
 800e7dc:	00db      	lsls	r3, r3, #3
 800e7de:	440b      	add	r3, r1
 800e7e0:	3314      	adds	r3, #20
 800e7e2:	781b      	ldrb	r3, [r3, #0]
 800e7e4:	2b03      	cmp	r3, #3
 800e7e6:	d10a      	bne.n	800e7fe <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800e7e8:	4925      	ldr	r1, [pc, #148]	; (800e880 <etharp_tmr+0x14c>)
 800e7ea:	687a      	ldr	r2, [r7, #4]
 800e7ec:	4613      	mov	r3, r2
 800e7ee:	005b      	lsls	r3, r3, #1
 800e7f0:	4413      	add	r3, r2
 800e7f2:	00db      	lsls	r3, r3, #3
 800e7f4:	440b      	add	r3, r1
 800e7f6:	3314      	adds	r3, #20
 800e7f8:	2204      	movs	r2, #4
 800e7fa:	701a      	strb	r2, [r3, #0]
 800e7fc:	e034      	b.n	800e868 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800e7fe:	4920      	ldr	r1, [pc, #128]	; (800e880 <etharp_tmr+0x14c>)
 800e800:	687a      	ldr	r2, [r7, #4]
 800e802:	4613      	mov	r3, r2
 800e804:	005b      	lsls	r3, r3, #1
 800e806:	4413      	add	r3, r2
 800e808:	00db      	lsls	r3, r3, #3
 800e80a:	440b      	add	r3, r1
 800e80c:	3314      	adds	r3, #20
 800e80e:	781b      	ldrb	r3, [r3, #0]
 800e810:	2b04      	cmp	r3, #4
 800e812:	d10a      	bne.n	800e82a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800e814:	491a      	ldr	r1, [pc, #104]	; (800e880 <etharp_tmr+0x14c>)
 800e816:	687a      	ldr	r2, [r7, #4]
 800e818:	4613      	mov	r3, r2
 800e81a:	005b      	lsls	r3, r3, #1
 800e81c:	4413      	add	r3, r2
 800e81e:	00db      	lsls	r3, r3, #3
 800e820:	440b      	add	r3, r1
 800e822:	3314      	adds	r3, #20
 800e824:	2202      	movs	r2, #2
 800e826:	701a      	strb	r2, [r3, #0]
 800e828:	e01e      	b.n	800e868 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e82a:	4915      	ldr	r1, [pc, #84]	; (800e880 <etharp_tmr+0x14c>)
 800e82c:	687a      	ldr	r2, [r7, #4]
 800e82e:	4613      	mov	r3, r2
 800e830:	005b      	lsls	r3, r3, #1
 800e832:	4413      	add	r3, r2
 800e834:	00db      	lsls	r3, r3, #3
 800e836:	440b      	add	r3, r1
 800e838:	3314      	adds	r3, #20
 800e83a:	781b      	ldrb	r3, [r3, #0]
 800e83c:	2b01      	cmp	r3, #1
 800e83e:	d113      	bne.n	800e868 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800e840:	490f      	ldr	r1, [pc, #60]	; (800e880 <etharp_tmr+0x14c>)
 800e842:	687a      	ldr	r2, [r7, #4]
 800e844:	4613      	mov	r3, r2
 800e846:	005b      	lsls	r3, r3, #1
 800e848:	4413      	add	r3, r2
 800e84a:	00db      	lsls	r3, r3, #3
 800e84c:	440b      	add	r3, r1
 800e84e:	3308      	adds	r3, #8
 800e850:	6818      	ldr	r0, [r3, #0]
 800e852:	687a      	ldr	r2, [r7, #4]
 800e854:	4613      	mov	r3, r2
 800e856:	005b      	lsls	r3, r3, #1
 800e858:	4413      	add	r3, r2
 800e85a:	00db      	lsls	r3, r3, #3
 800e85c:	4a08      	ldr	r2, [pc, #32]	; (800e880 <etharp_tmr+0x14c>)
 800e85e:	4413      	add	r3, r2
 800e860:	3304      	adds	r3, #4
 800e862:	4619      	mov	r1, r3
 800e864:	f000 fe6e 	bl	800f544 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	3301      	adds	r3, #1
 800e86c:	607b      	str	r3, [r7, #4]
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	2b09      	cmp	r3, #9
 800e872:	f77f af65 	ble.w	800e740 <etharp_tmr+0xc>
      }
    }
  }
}
 800e876:	bf00      	nop
 800e878:	bf00      	nop
 800e87a:	3708      	adds	r7, #8
 800e87c:	46bd      	mov	sp, r7
 800e87e:	bd80      	pop	{r7, pc}
 800e880:	2000a788 	.word	0x2000a788

0800e884 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b08a      	sub	sp, #40	; 0x28
 800e888:	af00      	add	r7, sp, #0
 800e88a:	60f8      	str	r0, [r7, #12]
 800e88c:	460b      	mov	r3, r1
 800e88e:	607a      	str	r2, [r7, #4]
 800e890:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800e892:	230a      	movs	r3, #10
 800e894:	84fb      	strh	r3, [r7, #38]	; 0x26
 800e896:	230a      	movs	r3, #10
 800e898:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800e89a:	230a      	movs	r3, #10
 800e89c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800e89e:	2300      	movs	r3, #0
 800e8a0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800e8a2:	230a      	movs	r3, #10
 800e8a4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	83bb      	strh	r3, [r7, #28]
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	837b      	strh	r3, [r7, #26]
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	843b      	strh	r3, [r7, #32]
 800e8b6:	e0ae      	b.n	800ea16 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800e8b8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e8bc:	49a6      	ldr	r1, [pc, #664]	; (800eb58 <etharp_find_entry+0x2d4>)
 800e8be:	4613      	mov	r3, r2
 800e8c0:	005b      	lsls	r3, r3, #1
 800e8c2:	4413      	add	r3, r2
 800e8c4:	00db      	lsls	r3, r3, #3
 800e8c6:	440b      	add	r3, r1
 800e8c8:	3314      	adds	r3, #20
 800e8ca:	781b      	ldrb	r3, [r3, #0]
 800e8cc:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800e8ce:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e8d2:	2b0a      	cmp	r3, #10
 800e8d4:	d105      	bne.n	800e8e2 <etharp_find_entry+0x5e>
 800e8d6:	7dfb      	ldrb	r3, [r7, #23]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d102      	bne.n	800e8e2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800e8dc:	8c3b      	ldrh	r3, [r7, #32]
 800e8de:	847b      	strh	r3, [r7, #34]	; 0x22
 800e8e0:	e095      	b.n	800ea0e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800e8e2:	7dfb      	ldrb	r3, [r7, #23]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	f000 8092 	beq.w	800ea0e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800e8ea:	7dfb      	ldrb	r3, [r7, #23]
 800e8ec:	2b01      	cmp	r3, #1
 800e8ee:	d009      	beq.n	800e904 <etharp_find_entry+0x80>
 800e8f0:	7dfb      	ldrb	r3, [r7, #23]
 800e8f2:	2b01      	cmp	r3, #1
 800e8f4:	d806      	bhi.n	800e904 <etharp_find_entry+0x80>
 800e8f6:	4b99      	ldr	r3, [pc, #612]	; (800eb5c <etharp_find_entry+0x2d8>)
 800e8f8:	f240 1223 	movw	r2, #291	; 0x123
 800e8fc:	4998      	ldr	r1, [pc, #608]	; (800eb60 <etharp_find_entry+0x2dc>)
 800e8fe:	4899      	ldr	r0, [pc, #612]	; (800eb64 <etharp_find_entry+0x2e0>)
 800e900:	f003 f88a 	bl	8011a18 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d020      	beq.n	800e94c <etharp_find_entry+0xc8>
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	6819      	ldr	r1, [r3, #0]
 800e90e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e912:	4891      	ldr	r0, [pc, #580]	; (800eb58 <etharp_find_entry+0x2d4>)
 800e914:	4613      	mov	r3, r2
 800e916:	005b      	lsls	r3, r3, #1
 800e918:	4413      	add	r3, r2
 800e91a:	00db      	lsls	r3, r3, #3
 800e91c:	4403      	add	r3, r0
 800e91e:	3304      	adds	r3, #4
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	4299      	cmp	r1, r3
 800e924:	d112      	bne.n	800e94c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d00c      	beq.n	800e946 <etharp_find_entry+0xc2>
 800e92c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e930:	4989      	ldr	r1, [pc, #548]	; (800eb58 <etharp_find_entry+0x2d4>)
 800e932:	4613      	mov	r3, r2
 800e934:	005b      	lsls	r3, r3, #1
 800e936:	4413      	add	r3, r2
 800e938:	00db      	lsls	r3, r3, #3
 800e93a:	440b      	add	r3, r1
 800e93c:	3308      	adds	r3, #8
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	687a      	ldr	r2, [r7, #4]
 800e942:	429a      	cmp	r2, r3
 800e944:	d102      	bne.n	800e94c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800e946:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e94a:	e100      	b.n	800eb4e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800e94c:	7dfb      	ldrb	r3, [r7, #23]
 800e94e:	2b01      	cmp	r3, #1
 800e950:	d140      	bne.n	800e9d4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800e952:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e956:	4980      	ldr	r1, [pc, #512]	; (800eb58 <etharp_find_entry+0x2d4>)
 800e958:	4613      	mov	r3, r2
 800e95a:	005b      	lsls	r3, r3, #1
 800e95c:	4413      	add	r3, r2
 800e95e:	00db      	lsls	r3, r3, #3
 800e960:	440b      	add	r3, r1
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d01a      	beq.n	800e99e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800e968:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e96c:	497a      	ldr	r1, [pc, #488]	; (800eb58 <etharp_find_entry+0x2d4>)
 800e96e:	4613      	mov	r3, r2
 800e970:	005b      	lsls	r3, r3, #1
 800e972:	4413      	add	r3, r2
 800e974:	00db      	lsls	r3, r3, #3
 800e976:	440b      	add	r3, r1
 800e978:	3312      	adds	r3, #18
 800e97a:	881b      	ldrh	r3, [r3, #0]
 800e97c:	8bba      	ldrh	r2, [r7, #28]
 800e97e:	429a      	cmp	r2, r3
 800e980:	d845      	bhi.n	800ea0e <etharp_find_entry+0x18a>
            old_queue = i;
 800e982:	8c3b      	ldrh	r3, [r7, #32]
 800e984:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800e986:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e98a:	4973      	ldr	r1, [pc, #460]	; (800eb58 <etharp_find_entry+0x2d4>)
 800e98c:	4613      	mov	r3, r2
 800e98e:	005b      	lsls	r3, r3, #1
 800e990:	4413      	add	r3, r2
 800e992:	00db      	lsls	r3, r3, #3
 800e994:	440b      	add	r3, r1
 800e996:	3312      	adds	r3, #18
 800e998:	881b      	ldrh	r3, [r3, #0]
 800e99a:	83bb      	strh	r3, [r7, #28]
 800e99c:	e037      	b.n	800ea0e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800e99e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e9a2:	496d      	ldr	r1, [pc, #436]	; (800eb58 <etharp_find_entry+0x2d4>)
 800e9a4:	4613      	mov	r3, r2
 800e9a6:	005b      	lsls	r3, r3, #1
 800e9a8:	4413      	add	r3, r2
 800e9aa:	00db      	lsls	r3, r3, #3
 800e9ac:	440b      	add	r3, r1
 800e9ae:	3312      	adds	r3, #18
 800e9b0:	881b      	ldrh	r3, [r3, #0]
 800e9b2:	8b7a      	ldrh	r2, [r7, #26]
 800e9b4:	429a      	cmp	r2, r3
 800e9b6:	d82a      	bhi.n	800ea0e <etharp_find_entry+0x18a>
            old_pending = i;
 800e9b8:	8c3b      	ldrh	r3, [r7, #32]
 800e9ba:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800e9bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e9c0:	4965      	ldr	r1, [pc, #404]	; (800eb58 <etharp_find_entry+0x2d4>)
 800e9c2:	4613      	mov	r3, r2
 800e9c4:	005b      	lsls	r3, r3, #1
 800e9c6:	4413      	add	r3, r2
 800e9c8:	00db      	lsls	r3, r3, #3
 800e9ca:	440b      	add	r3, r1
 800e9cc:	3312      	adds	r3, #18
 800e9ce:	881b      	ldrh	r3, [r3, #0]
 800e9d0:	837b      	strh	r3, [r7, #26]
 800e9d2:	e01c      	b.n	800ea0e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800e9d4:	7dfb      	ldrb	r3, [r7, #23]
 800e9d6:	2b01      	cmp	r3, #1
 800e9d8:	d919      	bls.n	800ea0e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800e9da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e9de:	495e      	ldr	r1, [pc, #376]	; (800eb58 <etharp_find_entry+0x2d4>)
 800e9e0:	4613      	mov	r3, r2
 800e9e2:	005b      	lsls	r3, r3, #1
 800e9e4:	4413      	add	r3, r2
 800e9e6:	00db      	lsls	r3, r3, #3
 800e9e8:	440b      	add	r3, r1
 800e9ea:	3312      	adds	r3, #18
 800e9ec:	881b      	ldrh	r3, [r3, #0]
 800e9ee:	8b3a      	ldrh	r2, [r7, #24]
 800e9f0:	429a      	cmp	r2, r3
 800e9f2:	d80c      	bhi.n	800ea0e <etharp_find_entry+0x18a>
            old_stable = i;
 800e9f4:	8c3b      	ldrh	r3, [r7, #32]
 800e9f6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800e9f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e9fc:	4956      	ldr	r1, [pc, #344]	; (800eb58 <etharp_find_entry+0x2d4>)
 800e9fe:	4613      	mov	r3, r2
 800ea00:	005b      	lsls	r3, r3, #1
 800ea02:	4413      	add	r3, r2
 800ea04:	00db      	lsls	r3, r3, #3
 800ea06:	440b      	add	r3, r1
 800ea08:	3312      	adds	r3, #18
 800ea0a:	881b      	ldrh	r3, [r3, #0]
 800ea0c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ea0e:	8c3b      	ldrh	r3, [r7, #32]
 800ea10:	3301      	adds	r3, #1
 800ea12:	b29b      	uxth	r3, r3
 800ea14:	843b      	strh	r3, [r7, #32]
 800ea16:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ea1a:	2b09      	cmp	r3, #9
 800ea1c:	f77f af4c 	ble.w	800e8b8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800ea20:	7afb      	ldrb	r3, [r7, #11]
 800ea22:	f003 0302 	and.w	r3, r3, #2
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d108      	bne.n	800ea3c <etharp_find_entry+0x1b8>
 800ea2a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ea2e:	2b0a      	cmp	r3, #10
 800ea30:	d107      	bne.n	800ea42 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800ea32:	7afb      	ldrb	r3, [r7, #11]
 800ea34:	f003 0301 	and.w	r3, r3, #1
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d102      	bne.n	800ea42 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800ea3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ea40:	e085      	b.n	800eb4e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800ea42:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ea46:	2b09      	cmp	r3, #9
 800ea48:	dc02      	bgt.n	800ea50 <etharp_find_entry+0x1cc>
    i = empty;
 800ea4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ea4c:	843b      	strh	r3, [r7, #32]
 800ea4e:	e039      	b.n	800eac4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800ea50:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800ea54:	2b09      	cmp	r3, #9
 800ea56:	dc14      	bgt.n	800ea82 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800ea58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea5a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800ea5c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ea60:	493d      	ldr	r1, [pc, #244]	; (800eb58 <etharp_find_entry+0x2d4>)
 800ea62:	4613      	mov	r3, r2
 800ea64:	005b      	lsls	r3, r3, #1
 800ea66:	4413      	add	r3, r2
 800ea68:	00db      	lsls	r3, r3, #3
 800ea6a:	440b      	add	r3, r1
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d018      	beq.n	800eaa4 <etharp_find_entry+0x220>
 800ea72:	4b3a      	ldr	r3, [pc, #232]	; (800eb5c <etharp_find_entry+0x2d8>)
 800ea74:	f240 126d 	movw	r2, #365	; 0x16d
 800ea78:	493b      	ldr	r1, [pc, #236]	; (800eb68 <etharp_find_entry+0x2e4>)
 800ea7a:	483a      	ldr	r0, [pc, #232]	; (800eb64 <etharp_find_entry+0x2e0>)
 800ea7c:	f002 ffcc 	bl	8011a18 <iprintf>
 800ea80:	e010      	b.n	800eaa4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800ea82:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ea86:	2b09      	cmp	r3, #9
 800ea88:	dc02      	bgt.n	800ea90 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800ea8a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ea8c:	843b      	strh	r3, [r7, #32]
 800ea8e:	e009      	b.n	800eaa4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800ea90:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ea94:	2b09      	cmp	r3, #9
 800ea96:	dc02      	bgt.n	800ea9e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800ea98:	8bfb      	ldrh	r3, [r7, #30]
 800ea9a:	843b      	strh	r3, [r7, #32]
 800ea9c:	e002      	b.n	800eaa4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800ea9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eaa2:	e054      	b.n	800eb4e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800eaa4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800eaa8:	2b09      	cmp	r3, #9
 800eaaa:	dd06      	ble.n	800eaba <etharp_find_entry+0x236>
 800eaac:	4b2b      	ldr	r3, [pc, #172]	; (800eb5c <etharp_find_entry+0x2d8>)
 800eaae:	f240 127f 	movw	r2, #383	; 0x17f
 800eab2:	492e      	ldr	r1, [pc, #184]	; (800eb6c <etharp_find_entry+0x2e8>)
 800eab4:	482b      	ldr	r0, [pc, #172]	; (800eb64 <etharp_find_entry+0x2e0>)
 800eab6:	f002 ffaf 	bl	8011a18 <iprintf>
    etharp_free_entry(i);
 800eaba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800eabe:	4618      	mov	r0, r3
 800eac0:	f7ff fe06 	bl	800e6d0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800eac4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800eac8:	2b09      	cmp	r3, #9
 800eaca:	dd06      	ble.n	800eada <etharp_find_entry+0x256>
 800eacc:	4b23      	ldr	r3, [pc, #140]	; (800eb5c <etharp_find_entry+0x2d8>)
 800eace:	f240 1283 	movw	r2, #387	; 0x183
 800ead2:	4926      	ldr	r1, [pc, #152]	; (800eb6c <etharp_find_entry+0x2e8>)
 800ead4:	4823      	ldr	r0, [pc, #140]	; (800eb64 <etharp_find_entry+0x2e0>)
 800ead6:	f002 ff9f 	bl	8011a18 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800eada:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eade:	491e      	ldr	r1, [pc, #120]	; (800eb58 <etharp_find_entry+0x2d4>)
 800eae0:	4613      	mov	r3, r2
 800eae2:	005b      	lsls	r3, r3, #1
 800eae4:	4413      	add	r3, r2
 800eae6:	00db      	lsls	r3, r3, #3
 800eae8:	440b      	add	r3, r1
 800eaea:	3314      	adds	r3, #20
 800eaec:	781b      	ldrb	r3, [r3, #0]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d006      	beq.n	800eb00 <etharp_find_entry+0x27c>
 800eaf2:	4b1a      	ldr	r3, [pc, #104]	; (800eb5c <etharp_find_entry+0x2d8>)
 800eaf4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800eaf8:	491d      	ldr	r1, [pc, #116]	; (800eb70 <etharp_find_entry+0x2ec>)
 800eafa:	481a      	ldr	r0, [pc, #104]	; (800eb64 <etharp_find_entry+0x2e0>)
 800eafc:	f002 ff8c 	bl	8011a18 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d00b      	beq.n	800eb1e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800eb06:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	6819      	ldr	r1, [r3, #0]
 800eb0e:	4812      	ldr	r0, [pc, #72]	; (800eb58 <etharp_find_entry+0x2d4>)
 800eb10:	4613      	mov	r3, r2
 800eb12:	005b      	lsls	r3, r3, #1
 800eb14:	4413      	add	r3, r2
 800eb16:	00db      	lsls	r3, r3, #3
 800eb18:	4403      	add	r3, r0
 800eb1a:	3304      	adds	r3, #4
 800eb1c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800eb1e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eb22:	490d      	ldr	r1, [pc, #52]	; (800eb58 <etharp_find_entry+0x2d4>)
 800eb24:	4613      	mov	r3, r2
 800eb26:	005b      	lsls	r3, r3, #1
 800eb28:	4413      	add	r3, r2
 800eb2a:	00db      	lsls	r3, r3, #3
 800eb2c:	440b      	add	r3, r1
 800eb2e:	3312      	adds	r3, #18
 800eb30:	2200      	movs	r2, #0
 800eb32:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800eb34:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eb38:	4907      	ldr	r1, [pc, #28]	; (800eb58 <etharp_find_entry+0x2d4>)
 800eb3a:	4613      	mov	r3, r2
 800eb3c:	005b      	lsls	r3, r3, #1
 800eb3e:	4413      	add	r3, r2
 800eb40:	00db      	lsls	r3, r3, #3
 800eb42:	440b      	add	r3, r1
 800eb44:	3308      	adds	r3, #8
 800eb46:	687a      	ldr	r2, [r7, #4]
 800eb48:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800eb4a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800eb4e:	4618      	mov	r0, r3
 800eb50:	3728      	adds	r7, #40	; 0x28
 800eb52:	46bd      	mov	sp, r7
 800eb54:	bd80      	pop	{r7, pc}
 800eb56:	bf00      	nop
 800eb58:	2000a788 	.word	0x2000a788
 800eb5c:	08015d20 	.word	0x08015d20
 800eb60:	08015d58 	.word	0x08015d58
 800eb64:	08015d98 	.word	0x08015d98
 800eb68:	08015dc0 	.word	0x08015dc0
 800eb6c:	08015dd8 	.word	0x08015dd8
 800eb70:	08015dec 	.word	0x08015dec

0800eb74 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b088      	sub	sp, #32
 800eb78:	af02      	add	r7, sp, #8
 800eb7a:	60f8      	str	r0, [r7, #12]
 800eb7c:	60b9      	str	r1, [r7, #8]
 800eb7e:	607a      	str	r2, [r7, #4]
 800eb80:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800eb88:	2b06      	cmp	r3, #6
 800eb8a:	d006      	beq.n	800eb9a <etharp_update_arp_entry+0x26>
 800eb8c:	4b48      	ldr	r3, [pc, #288]	; (800ecb0 <etharp_update_arp_entry+0x13c>)
 800eb8e:	f240 12a9 	movw	r2, #425	; 0x1a9
 800eb92:	4948      	ldr	r1, [pc, #288]	; (800ecb4 <etharp_update_arp_entry+0x140>)
 800eb94:	4848      	ldr	r0, [pc, #288]	; (800ecb8 <etharp_update_arp_entry+0x144>)
 800eb96:	f002 ff3f 	bl	8011a18 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800eb9a:	68bb      	ldr	r3, [r7, #8]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d012      	beq.n	800ebc6 <etharp_update_arp_entry+0x52>
 800eba0:	68bb      	ldr	r3, [r7, #8]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d00e      	beq.n	800ebc6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800eba8:	68bb      	ldr	r3, [r7, #8]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	68f9      	ldr	r1, [r7, #12]
 800ebae:	4618      	mov	r0, r3
 800ebb0:	f001 f8fe 	bl	800fdb0 <ip4_addr_isbroadcast_u32>
 800ebb4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d105      	bne.n	800ebc6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800ebba:	68bb      	ldr	r3, [r7, #8]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800ebc2:	2be0      	cmp	r3, #224	; 0xe0
 800ebc4:	d102      	bne.n	800ebcc <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800ebc6:	f06f 030f 	mvn.w	r3, #15
 800ebca:	e06c      	b.n	800eca6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800ebcc:	78fb      	ldrb	r3, [r7, #3]
 800ebce:	68fa      	ldr	r2, [r7, #12]
 800ebd0:	4619      	mov	r1, r3
 800ebd2:	68b8      	ldr	r0, [r7, #8]
 800ebd4:	f7ff fe56 	bl	800e884 <etharp_find_entry>
 800ebd8:	4603      	mov	r3, r0
 800ebda:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800ebdc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	da02      	bge.n	800ebea <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800ebe4:	8afb      	ldrh	r3, [r7, #22]
 800ebe6:	b25b      	sxtb	r3, r3
 800ebe8:	e05d      	b.n	800eca6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800ebea:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ebee:	4933      	ldr	r1, [pc, #204]	; (800ecbc <etharp_update_arp_entry+0x148>)
 800ebf0:	4613      	mov	r3, r2
 800ebf2:	005b      	lsls	r3, r3, #1
 800ebf4:	4413      	add	r3, r2
 800ebf6:	00db      	lsls	r3, r3, #3
 800ebf8:	440b      	add	r3, r1
 800ebfa:	3314      	adds	r3, #20
 800ebfc:	2202      	movs	r2, #2
 800ebfe:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800ec00:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ec04:	492d      	ldr	r1, [pc, #180]	; (800ecbc <etharp_update_arp_entry+0x148>)
 800ec06:	4613      	mov	r3, r2
 800ec08:	005b      	lsls	r3, r3, #1
 800ec0a:	4413      	add	r3, r2
 800ec0c:	00db      	lsls	r3, r3, #3
 800ec0e:	440b      	add	r3, r1
 800ec10:	3308      	adds	r3, #8
 800ec12:	68fa      	ldr	r2, [r7, #12]
 800ec14:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800ec16:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ec1a:	4613      	mov	r3, r2
 800ec1c:	005b      	lsls	r3, r3, #1
 800ec1e:	4413      	add	r3, r2
 800ec20:	00db      	lsls	r3, r3, #3
 800ec22:	3308      	adds	r3, #8
 800ec24:	4a25      	ldr	r2, [pc, #148]	; (800ecbc <etharp_update_arp_entry+0x148>)
 800ec26:	4413      	add	r3, r2
 800ec28:	3304      	adds	r3, #4
 800ec2a:	2206      	movs	r2, #6
 800ec2c:	6879      	ldr	r1, [r7, #4]
 800ec2e:	4618      	mov	r0, r3
 800ec30:	f003 f853 	bl	8011cda <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800ec34:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ec38:	4920      	ldr	r1, [pc, #128]	; (800ecbc <etharp_update_arp_entry+0x148>)
 800ec3a:	4613      	mov	r3, r2
 800ec3c:	005b      	lsls	r3, r3, #1
 800ec3e:	4413      	add	r3, r2
 800ec40:	00db      	lsls	r3, r3, #3
 800ec42:	440b      	add	r3, r1
 800ec44:	3312      	adds	r3, #18
 800ec46:	2200      	movs	r2, #0
 800ec48:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800ec4a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ec4e:	491b      	ldr	r1, [pc, #108]	; (800ecbc <etharp_update_arp_entry+0x148>)
 800ec50:	4613      	mov	r3, r2
 800ec52:	005b      	lsls	r3, r3, #1
 800ec54:	4413      	add	r3, r2
 800ec56:	00db      	lsls	r3, r3, #3
 800ec58:	440b      	add	r3, r1
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d021      	beq.n	800eca4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800ec60:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ec64:	4915      	ldr	r1, [pc, #84]	; (800ecbc <etharp_update_arp_entry+0x148>)
 800ec66:	4613      	mov	r3, r2
 800ec68:	005b      	lsls	r3, r3, #1
 800ec6a:	4413      	add	r3, r2
 800ec6c:	00db      	lsls	r3, r3, #3
 800ec6e:	440b      	add	r3, r1
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800ec74:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ec78:	4910      	ldr	r1, [pc, #64]	; (800ecbc <etharp_update_arp_entry+0x148>)
 800ec7a:	4613      	mov	r3, r2
 800ec7c:	005b      	lsls	r3, r3, #1
 800ec7e:	4413      	add	r3, r2
 800ec80:	00db      	lsls	r3, r3, #3
 800ec82:	440b      	add	r3, r1
 800ec84:	2200      	movs	r2, #0
 800ec86:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800ec8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ec92:	9300      	str	r3, [sp, #0]
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	6939      	ldr	r1, [r7, #16]
 800ec98:	68f8      	ldr	r0, [r7, #12]
 800ec9a:	f001 ff97 	bl	8010bcc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800ec9e:	6938      	ldr	r0, [r7, #16]
 800eca0:	f7f9 fcc2 	bl	8008628 <pbuf_free>
  }
  return ERR_OK;
 800eca4:	2300      	movs	r3, #0
}
 800eca6:	4618      	mov	r0, r3
 800eca8:	3718      	adds	r7, #24
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	bd80      	pop	{r7, pc}
 800ecae:	bf00      	nop
 800ecb0:	08015d20 	.word	0x08015d20
 800ecb4:	08015e18 	.word	0x08015e18
 800ecb8:	08015d98 	.word	0x08015d98
 800ecbc:	2000a788 	.word	0x2000a788

0800ecc0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	b084      	sub	sp, #16
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ecc8:	2300      	movs	r3, #0
 800ecca:	60fb      	str	r3, [r7, #12]
 800eccc:	e01e      	b.n	800ed0c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800ecce:	4913      	ldr	r1, [pc, #76]	; (800ed1c <etharp_cleanup_netif+0x5c>)
 800ecd0:	68fa      	ldr	r2, [r7, #12]
 800ecd2:	4613      	mov	r3, r2
 800ecd4:	005b      	lsls	r3, r3, #1
 800ecd6:	4413      	add	r3, r2
 800ecd8:	00db      	lsls	r3, r3, #3
 800ecda:	440b      	add	r3, r1
 800ecdc:	3314      	adds	r3, #20
 800ecde:	781b      	ldrb	r3, [r3, #0]
 800ece0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800ece2:	7afb      	ldrb	r3, [r7, #11]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d00e      	beq.n	800ed06 <etharp_cleanup_netif+0x46>
 800ece8:	490c      	ldr	r1, [pc, #48]	; (800ed1c <etharp_cleanup_netif+0x5c>)
 800ecea:	68fa      	ldr	r2, [r7, #12]
 800ecec:	4613      	mov	r3, r2
 800ecee:	005b      	lsls	r3, r3, #1
 800ecf0:	4413      	add	r3, r2
 800ecf2:	00db      	lsls	r3, r3, #3
 800ecf4:	440b      	add	r3, r1
 800ecf6:	3308      	adds	r3, #8
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	687a      	ldr	r2, [r7, #4]
 800ecfc:	429a      	cmp	r2, r3
 800ecfe:	d102      	bne.n	800ed06 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800ed00:	68f8      	ldr	r0, [r7, #12]
 800ed02:	f7ff fce5 	bl	800e6d0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	3301      	adds	r3, #1
 800ed0a:	60fb      	str	r3, [r7, #12]
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	2b09      	cmp	r3, #9
 800ed10:	dddd      	ble.n	800ecce <etharp_cleanup_netif+0xe>
    }
  }
}
 800ed12:	bf00      	nop
 800ed14:	bf00      	nop
 800ed16:	3710      	adds	r7, #16
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	bd80      	pop	{r7, pc}
 800ed1c:	2000a788 	.word	0x2000a788

0800ed20 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800ed20:	b5b0      	push	{r4, r5, r7, lr}
 800ed22:	b08a      	sub	sp, #40	; 0x28
 800ed24:	af04      	add	r7, sp, #16
 800ed26:	6078      	str	r0, [r7, #4]
 800ed28:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800ed2a:	683b      	ldr	r3, [r7, #0]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d107      	bne.n	800ed40 <etharp_input+0x20>
 800ed30:	4b3d      	ldr	r3, [pc, #244]	; (800ee28 <etharp_input+0x108>)
 800ed32:	f240 228a 	movw	r2, #650	; 0x28a
 800ed36:	493d      	ldr	r1, [pc, #244]	; (800ee2c <etharp_input+0x10c>)
 800ed38:	483d      	ldr	r0, [pc, #244]	; (800ee30 <etharp_input+0x110>)
 800ed3a:	f002 fe6d 	bl	8011a18 <iprintf>
 800ed3e:	e06f      	b.n	800ee20 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	685b      	ldr	r3, [r3, #4]
 800ed44:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800ed46:	693b      	ldr	r3, [r7, #16]
 800ed48:	881b      	ldrh	r3, [r3, #0]
 800ed4a:	b29b      	uxth	r3, r3
 800ed4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ed50:	d10c      	bne.n	800ed6c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ed52:	693b      	ldr	r3, [r7, #16]
 800ed54:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800ed56:	2b06      	cmp	r3, #6
 800ed58:	d108      	bne.n	800ed6c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ed5a:	693b      	ldr	r3, [r7, #16]
 800ed5c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ed5e:	2b04      	cmp	r3, #4
 800ed60:	d104      	bne.n	800ed6c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800ed62:	693b      	ldr	r3, [r7, #16]
 800ed64:	885b      	ldrh	r3, [r3, #2]
 800ed66:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ed68:	2b08      	cmp	r3, #8
 800ed6a:	d003      	beq.n	800ed74 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800ed6c:	6878      	ldr	r0, [r7, #4]
 800ed6e:	f7f9 fc5b 	bl	8008628 <pbuf_free>
    return;
 800ed72:	e055      	b.n	800ee20 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800ed74:	693b      	ldr	r3, [r7, #16]
 800ed76:	330e      	adds	r3, #14
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800ed7c:	693b      	ldr	r3, [r7, #16]
 800ed7e:	3318      	adds	r3, #24
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ed84:	683b      	ldr	r3, [r7, #0]
 800ed86:	3304      	adds	r3, #4
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d102      	bne.n	800ed94 <etharp_input+0x74>
    for_us = 0;
 800ed8e:	2300      	movs	r3, #0
 800ed90:	75fb      	strb	r3, [r7, #23]
 800ed92:	e009      	b.n	800eda8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800ed94:	68ba      	ldr	r2, [r7, #8]
 800ed96:	683b      	ldr	r3, [r7, #0]
 800ed98:	3304      	adds	r3, #4
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	429a      	cmp	r2, r3
 800ed9e:	bf0c      	ite	eq
 800eda0:	2301      	moveq	r3, #1
 800eda2:	2300      	movne	r3, #0
 800eda4:	b2db      	uxtb	r3, r3
 800eda6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800eda8:	693b      	ldr	r3, [r7, #16]
 800edaa:	f103 0208 	add.w	r2, r3, #8
 800edae:	7dfb      	ldrb	r3, [r7, #23]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d001      	beq.n	800edb8 <etharp_input+0x98>
 800edb4:	2301      	movs	r3, #1
 800edb6:	e000      	b.n	800edba <etharp_input+0x9a>
 800edb8:	2302      	movs	r3, #2
 800edba:	f107 010c 	add.w	r1, r7, #12
 800edbe:	6838      	ldr	r0, [r7, #0]
 800edc0:	f7ff fed8 	bl	800eb74 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800edc4:	693b      	ldr	r3, [r7, #16]
 800edc6:	88db      	ldrh	r3, [r3, #6]
 800edc8:	b29b      	uxth	r3, r3
 800edca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800edce:	d003      	beq.n	800edd8 <etharp_input+0xb8>
 800edd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800edd4:	d01e      	beq.n	800ee14 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800edd6:	e020      	b.n	800ee1a <etharp_input+0xfa>
      if (for_us) {
 800edd8:	7dfb      	ldrb	r3, [r7, #23]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d01c      	beq.n	800ee18 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800edde:	683b      	ldr	r3, [r7, #0]
 800ede0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800ede4:	693b      	ldr	r3, [r7, #16]
 800ede6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800edea:	683b      	ldr	r3, [r7, #0]
 800edec:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800edf0:	683b      	ldr	r3, [r7, #0]
 800edf2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800edf4:	693a      	ldr	r2, [r7, #16]
 800edf6:	3208      	adds	r2, #8
        etharp_raw(netif,
 800edf8:	2102      	movs	r1, #2
 800edfa:	9103      	str	r1, [sp, #12]
 800edfc:	f107 010c 	add.w	r1, r7, #12
 800ee00:	9102      	str	r1, [sp, #8]
 800ee02:	9201      	str	r2, [sp, #4]
 800ee04:	9300      	str	r3, [sp, #0]
 800ee06:	462b      	mov	r3, r5
 800ee08:	4622      	mov	r2, r4
 800ee0a:	4601      	mov	r1, r0
 800ee0c:	6838      	ldr	r0, [r7, #0]
 800ee0e:	f000 faeb 	bl	800f3e8 <etharp_raw>
      break;
 800ee12:	e001      	b.n	800ee18 <etharp_input+0xf8>
      break;
 800ee14:	bf00      	nop
 800ee16:	e000      	b.n	800ee1a <etharp_input+0xfa>
      break;
 800ee18:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800ee1a:	6878      	ldr	r0, [r7, #4]
 800ee1c:	f7f9 fc04 	bl	8008628 <pbuf_free>
}
 800ee20:	3718      	adds	r7, #24
 800ee22:	46bd      	mov	sp, r7
 800ee24:	bdb0      	pop	{r4, r5, r7, pc}
 800ee26:	bf00      	nop
 800ee28:	08015d20 	.word	0x08015d20
 800ee2c:	08015e70 	.word	0x08015e70
 800ee30:	08015d98 	.word	0x08015d98

0800ee34 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b086      	sub	sp, #24
 800ee38:	af02      	add	r7, sp, #8
 800ee3a:	60f8      	str	r0, [r7, #12]
 800ee3c:	60b9      	str	r1, [r7, #8]
 800ee3e:	4613      	mov	r3, r2
 800ee40:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800ee42:	79fa      	ldrb	r2, [r7, #7]
 800ee44:	4944      	ldr	r1, [pc, #272]	; (800ef58 <etharp_output_to_arp_index+0x124>)
 800ee46:	4613      	mov	r3, r2
 800ee48:	005b      	lsls	r3, r3, #1
 800ee4a:	4413      	add	r3, r2
 800ee4c:	00db      	lsls	r3, r3, #3
 800ee4e:	440b      	add	r3, r1
 800ee50:	3314      	adds	r3, #20
 800ee52:	781b      	ldrb	r3, [r3, #0]
 800ee54:	2b01      	cmp	r3, #1
 800ee56:	d806      	bhi.n	800ee66 <etharp_output_to_arp_index+0x32>
 800ee58:	4b40      	ldr	r3, [pc, #256]	; (800ef5c <etharp_output_to_arp_index+0x128>)
 800ee5a:	f240 22ee 	movw	r2, #750	; 0x2ee
 800ee5e:	4940      	ldr	r1, [pc, #256]	; (800ef60 <etharp_output_to_arp_index+0x12c>)
 800ee60:	4840      	ldr	r0, [pc, #256]	; (800ef64 <etharp_output_to_arp_index+0x130>)
 800ee62:	f002 fdd9 	bl	8011a18 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800ee66:	79fa      	ldrb	r2, [r7, #7]
 800ee68:	493b      	ldr	r1, [pc, #236]	; (800ef58 <etharp_output_to_arp_index+0x124>)
 800ee6a:	4613      	mov	r3, r2
 800ee6c:	005b      	lsls	r3, r3, #1
 800ee6e:	4413      	add	r3, r2
 800ee70:	00db      	lsls	r3, r3, #3
 800ee72:	440b      	add	r3, r1
 800ee74:	3314      	adds	r3, #20
 800ee76:	781b      	ldrb	r3, [r3, #0]
 800ee78:	2b02      	cmp	r3, #2
 800ee7a:	d153      	bne.n	800ef24 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800ee7c:	79fa      	ldrb	r2, [r7, #7]
 800ee7e:	4936      	ldr	r1, [pc, #216]	; (800ef58 <etharp_output_to_arp_index+0x124>)
 800ee80:	4613      	mov	r3, r2
 800ee82:	005b      	lsls	r3, r3, #1
 800ee84:	4413      	add	r3, r2
 800ee86:	00db      	lsls	r3, r3, #3
 800ee88:	440b      	add	r3, r1
 800ee8a:	3312      	adds	r3, #18
 800ee8c:	881b      	ldrh	r3, [r3, #0]
 800ee8e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800ee92:	d919      	bls.n	800eec8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800ee94:	79fa      	ldrb	r2, [r7, #7]
 800ee96:	4613      	mov	r3, r2
 800ee98:	005b      	lsls	r3, r3, #1
 800ee9a:	4413      	add	r3, r2
 800ee9c:	00db      	lsls	r3, r3, #3
 800ee9e:	4a2e      	ldr	r2, [pc, #184]	; (800ef58 <etharp_output_to_arp_index+0x124>)
 800eea0:	4413      	add	r3, r2
 800eea2:	3304      	adds	r3, #4
 800eea4:	4619      	mov	r1, r3
 800eea6:	68f8      	ldr	r0, [r7, #12]
 800eea8:	f000 fb4c 	bl	800f544 <etharp_request>
 800eeac:	4603      	mov	r3, r0
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d138      	bne.n	800ef24 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800eeb2:	79fa      	ldrb	r2, [r7, #7]
 800eeb4:	4928      	ldr	r1, [pc, #160]	; (800ef58 <etharp_output_to_arp_index+0x124>)
 800eeb6:	4613      	mov	r3, r2
 800eeb8:	005b      	lsls	r3, r3, #1
 800eeba:	4413      	add	r3, r2
 800eebc:	00db      	lsls	r3, r3, #3
 800eebe:	440b      	add	r3, r1
 800eec0:	3314      	adds	r3, #20
 800eec2:	2203      	movs	r2, #3
 800eec4:	701a      	strb	r2, [r3, #0]
 800eec6:	e02d      	b.n	800ef24 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800eec8:	79fa      	ldrb	r2, [r7, #7]
 800eeca:	4923      	ldr	r1, [pc, #140]	; (800ef58 <etharp_output_to_arp_index+0x124>)
 800eecc:	4613      	mov	r3, r2
 800eece:	005b      	lsls	r3, r3, #1
 800eed0:	4413      	add	r3, r2
 800eed2:	00db      	lsls	r3, r3, #3
 800eed4:	440b      	add	r3, r1
 800eed6:	3312      	adds	r3, #18
 800eed8:	881b      	ldrh	r3, [r3, #0]
 800eeda:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800eede:	d321      	bcc.n	800ef24 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800eee0:	79fa      	ldrb	r2, [r7, #7]
 800eee2:	4613      	mov	r3, r2
 800eee4:	005b      	lsls	r3, r3, #1
 800eee6:	4413      	add	r3, r2
 800eee8:	00db      	lsls	r3, r3, #3
 800eeea:	4a1b      	ldr	r2, [pc, #108]	; (800ef58 <etharp_output_to_arp_index+0x124>)
 800eeec:	4413      	add	r3, r2
 800eeee:	1d19      	adds	r1, r3, #4
 800eef0:	79fa      	ldrb	r2, [r7, #7]
 800eef2:	4613      	mov	r3, r2
 800eef4:	005b      	lsls	r3, r3, #1
 800eef6:	4413      	add	r3, r2
 800eef8:	00db      	lsls	r3, r3, #3
 800eefa:	3308      	adds	r3, #8
 800eefc:	4a16      	ldr	r2, [pc, #88]	; (800ef58 <etharp_output_to_arp_index+0x124>)
 800eefe:	4413      	add	r3, r2
 800ef00:	3304      	adds	r3, #4
 800ef02:	461a      	mov	r2, r3
 800ef04:	68f8      	ldr	r0, [r7, #12]
 800ef06:	f000 fafb 	bl	800f500 <etharp_request_dst>
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d109      	bne.n	800ef24 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800ef10:	79fa      	ldrb	r2, [r7, #7]
 800ef12:	4911      	ldr	r1, [pc, #68]	; (800ef58 <etharp_output_to_arp_index+0x124>)
 800ef14:	4613      	mov	r3, r2
 800ef16:	005b      	lsls	r3, r3, #1
 800ef18:	4413      	add	r3, r2
 800ef1a:	00db      	lsls	r3, r3, #3
 800ef1c:	440b      	add	r3, r1
 800ef1e:	3314      	adds	r3, #20
 800ef20:	2203      	movs	r2, #3
 800ef22:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800ef2a:	79fa      	ldrb	r2, [r7, #7]
 800ef2c:	4613      	mov	r3, r2
 800ef2e:	005b      	lsls	r3, r3, #1
 800ef30:	4413      	add	r3, r2
 800ef32:	00db      	lsls	r3, r3, #3
 800ef34:	3308      	adds	r3, #8
 800ef36:	4a08      	ldr	r2, [pc, #32]	; (800ef58 <etharp_output_to_arp_index+0x124>)
 800ef38:	4413      	add	r3, r2
 800ef3a:	3304      	adds	r3, #4
 800ef3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ef40:	9200      	str	r2, [sp, #0]
 800ef42:	460a      	mov	r2, r1
 800ef44:	68b9      	ldr	r1, [r7, #8]
 800ef46:	68f8      	ldr	r0, [r7, #12]
 800ef48:	f001 fe40 	bl	8010bcc <ethernet_output>
 800ef4c:	4603      	mov	r3, r0
}
 800ef4e:	4618      	mov	r0, r3
 800ef50:	3710      	adds	r7, #16
 800ef52:	46bd      	mov	sp, r7
 800ef54:	bd80      	pop	{r7, pc}
 800ef56:	bf00      	nop
 800ef58:	2000a788 	.word	0x2000a788
 800ef5c:	08015d20 	.word	0x08015d20
 800ef60:	08015e90 	.word	0x08015e90
 800ef64:	08015d98 	.word	0x08015d98

0800ef68 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b08a      	sub	sp, #40	; 0x28
 800ef6c:	af02      	add	r7, sp, #8
 800ef6e:	60f8      	str	r0, [r7, #12]
 800ef70:	60b9      	str	r1, [r7, #8]
 800ef72:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d106      	bne.n	800ef8c <etharp_output+0x24>
 800ef7e:	4b73      	ldr	r3, [pc, #460]	; (800f14c <etharp_output+0x1e4>)
 800ef80:	f240 321e 	movw	r2, #798	; 0x31e
 800ef84:	4972      	ldr	r1, [pc, #456]	; (800f150 <etharp_output+0x1e8>)
 800ef86:	4873      	ldr	r0, [pc, #460]	; (800f154 <etharp_output+0x1ec>)
 800ef88:	f002 fd46 	bl	8011a18 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800ef8c:	68bb      	ldr	r3, [r7, #8]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d106      	bne.n	800efa0 <etharp_output+0x38>
 800ef92:	4b6e      	ldr	r3, [pc, #440]	; (800f14c <etharp_output+0x1e4>)
 800ef94:	f240 321f 	movw	r2, #799	; 0x31f
 800ef98:	496f      	ldr	r1, [pc, #444]	; (800f158 <etharp_output+0x1f0>)
 800ef9a:	486e      	ldr	r0, [pc, #440]	; (800f154 <etharp_output+0x1ec>)
 800ef9c:	f002 fd3c 	bl	8011a18 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d106      	bne.n	800efb4 <etharp_output+0x4c>
 800efa6:	4b69      	ldr	r3, [pc, #420]	; (800f14c <etharp_output+0x1e4>)
 800efa8:	f44f 7248 	mov.w	r2, #800	; 0x320
 800efac:	496b      	ldr	r1, [pc, #428]	; (800f15c <etharp_output+0x1f4>)
 800efae:	4869      	ldr	r0, [pc, #420]	; (800f154 <etharp_output+0x1ec>)
 800efb0:	f002 fd32 	bl	8011a18 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	68f9      	ldr	r1, [r7, #12]
 800efba:	4618      	mov	r0, r3
 800efbc:	f000 fef8 	bl	800fdb0 <ip4_addr_isbroadcast_u32>
 800efc0:	4603      	mov	r3, r0
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d002      	beq.n	800efcc <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800efc6:	4b66      	ldr	r3, [pc, #408]	; (800f160 <etharp_output+0x1f8>)
 800efc8:	61fb      	str	r3, [r7, #28]
 800efca:	e0af      	b.n	800f12c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800efd4:	2be0      	cmp	r3, #224	; 0xe0
 800efd6:	d118      	bne.n	800f00a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800efd8:	2301      	movs	r3, #1
 800efda:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800efdc:	2300      	movs	r3, #0
 800efde:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800efe0:	235e      	movs	r3, #94	; 0x5e
 800efe2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	3301      	adds	r3, #1
 800efe8:	781b      	ldrb	r3, [r3, #0]
 800efea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800efee:	b2db      	uxtb	r3, r3
 800eff0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	3302      	adds	r3, #2
 800eff6:	781b      	ldrb	r3, [r3, #0]
 800eff8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	3303      	adds	r3, #3
 800effe:	781b      	ldrb	r3, [r3, #0]
 800f000:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800f002:	f107 0310 	add.w	r3, r7, #16
 800f006:	61fb      	str	r3, [r7, #28]
 800f008:	e090      	b.n	800f12c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	681a      	ldr	r2, [r3, #0]
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	3304      	adds	r3, #4
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	405a      	eors	r2, r3
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	3308      	adds	r3, #8
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	4013      	ands	r3, r2
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d012      	beq.n	800f048 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f028:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800f02c:	4293      	cmp	r3, r2
 800f02e:	d00b      	beq.n	800f048 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	330c      	adds	r3, #12
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d003      	beq.n	800f042 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	330c      	adds	r3, #12
 800f03e:	61bb      	str	r3, [r7, #24]
 800f040:	e002      	b.n	800f048 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800f042:	f06f 0303 	mvn.w	r3, #3
 800f046:	e07d      	b.n	800f144 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f048:	4b46      	ldr	r3, [pc, #280]	; (800f164 <etharp_output+0x1fc>)
 800f04a:	781b      	ldrb	r3, [r3, #0]
 800f04c:	4619      	mov	r1, r3
 800f04e:	4a46      	ldr	r2, [pc, #280]	; (800f168 <etharp_output+0x200>)
 800f050:	460b      	mov	r3, r1
 800f052:	005b      	lsls	r3, r3, #1
 800f054:	440b      	add	r3, r1
 800f056:	00db      	lsls	r3, r3, #3
 800f058:	4413      	add	r3, r2
 800f05a:	3314      	adds	r3, #20
 800f05c:	781b      	ldrb	r3, [r3, #0]
 800f05e:	2b01      	cmp	r3, #1
 800f060:	d925      	bls.n	800f0ae <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f062:	4b40      	ldr	r3, [pc, #256]	; (800f164 <etharp_output+0x1fc>)
 800f064:	781b      	ldrb	r3, [r3, #0]
 800f066:	4619      	mov	r1, r3
 800f068:	4a3f      	ldr	r2, [pc, #252]	; (800f168 <etharp_output+0x200>)
 800f06a:	460b      	mov	r3, r1
 800f06c:	005b      	lsls	r3, r3, #1
 800f06e:	440b      	add	r3, r1
 800f070:	00db      	lsls	r3, r3, #3
 800f072:	4413      	add	r3, r2
 800f074:	3308      	adds	r3, #8
 800f076:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f078:	68fa      	ldr	r2, [r7, #12]
 800f07a:	429a      	cmp	r2, r3
 800f07c:	d117      	bne.n	800f0ae <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800f07e:	69bb      	ldr	r3, [r7, #24]
 800f080:	681a      	ldr	r2, [r3, #0]
 800f082:	4b38      	ldr	r3, [pc, #224]	; (800f164 <etharp_output+0x1fc>)
 800f084:	781b      	ldrb	r3, [r3, #0]
 800f086:	4618      	mov	r0, r3
 800f088:	4937      	ldr	r1, [pc, #220]	; (800f168 <etharp_output+0x200>)
 800f08a:	4603      	mov	r3, r0
 800f08c:	005b      	lsls	r3, r3, #1
 800f08e:	4403      	add	r3, r0
 800f090:	00db      	lsls	r3, r3, #3
 800f092:	440b      	add	r3, r1
 800f094:	3304      	adds	r3, #4
 800f096:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f098:	429a      	cmp	r2, r3
 800f09a:	d108      	bne.n	800f0ae <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800f09c:	4b31      	ldr	r3, [pc, #196]	; (800f164 <etharp_output+0x1fc>)
 800f09e:	781b      	ldrb	r3, [r3, #0]
 800f0a0:	461a      	mov	r2, r3
 800f0a2:	68b9      	ldr	r1, [r7, #8]
 800f0a4:	68f8      	ldr	r0, [r7, #12]
 800f0a6:	f7ff fec5 	bl	800ee34 <etharp_output_to_arp_index>
 800f0aa:	4603      	mov	r3, r0
 800f0ac:	e04a      	b.n	800f144 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	75fb      	strb	r3, [r7, #23]
 800f0b2:	e031      	b.n	800f118 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f0b4:	7dfa      	ldrb	r2, [r7, #23]
 800f0b6:	492c      	ldr	r1, [pc, #176]	; (800f168 <etharp_output+0x200>)
 800f0b8:	4613      	mov	r3, r2
 800f0ba:	005b      	lsls	r3, r3, #1
 800f0bc:	4413      	add	r3, r2
 800f0be:	00db      	lsls	r3, r3, #3
 800f0c0:	440b      	add	r3, r1
 800f0c2:	3314      	adds	r3, #20
 800f0c4:	781b      	ldrb	r3, [r3, #0]
 800f0c6:	2b01      	cmp	r3, #1
 800f0c8:	d923      	bls.n	800f112 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800f0ca:	7dfa      	ldrb	r2, [r7, #23]
 800f0cc:	4926      	ldr	r1, [pc, #152]	; (800f168 <etharp_output+0x200>)
 800f0ce:	4613      	mov	r3, r2
 800f0d0:	005b      	lsls	r3, r3, #1
 800f0d2:	4413      	add	r3, r2
 800f0d4:	00db      	lsls	r3, r3, #3
 800f0d6:	440b      	add	r3, r1
 800f0d8:	3308      	adds	r3, #8
 800f0da:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f0dc:	68fa      	ldr	r2, [r7, #12]
 800f0de:	429a      	cmp	r2, r3
 800f0e0:	d117      	bne.n	800f112 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800f0e2:	69bb      	ldr	r3, [r7, #24]
 800f0e4:	6819      	ldr	r1, [r3, #0]
 800f0e6:	7dfa      	ldrb	r2, [r7, #23]
 800f0e8:	481f      	ldr	r0, [pc, #124]	; (800f168 <etharp_output+0x200>)
 800f0ea:	4613      	mov	r3, r2
 800f0ec:	005b      	lsls	r3, r3, #1
 800f0ee:	4413      	add	r3, r2
 800f0f0:	00db      	lsls	r3, r3, #3
 800f0f2:	4403      	add	r3, r0
 800f0f4:	3304      	adds	r3, #4
 800f0f6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800f0f8:	4299      	cmp	r1, r3
 800f0fa:	d10a      	bne.n	800f112 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800f0fc:	4a19      	ldr	r2, [pc, #100]	; (800f164 <etharp_output+0x1fc>)
 800f0fe:	7dfb      	ldrb	r3, [r7, #23]
 800f100:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800f102:	7dfb      	ldrb	r3, [r7, #23]
 800f104:	461a      	mov	r2, r3
 800f106:	68b9      	ldr	r1, [r7, #8]
 800f108:	68f8      	ldr	r0, [r7, #12]
 800f10a:	f7ff fe93 	bl	800ee34 <etharp_output_to_arp_index>
 800f10e:	4603      	mov	r3, r0
 800f110:	e018      	b.n	800f144 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f112:	7dfb      	ldrb	r3, [r7, #23]
 800f114:	3301      	adds	r3, #1
 800f116:	75fb      	strb	r3, [r7, #23]
 800f118:	7dfb      	ldrb	r3, [r7, #23]
 800f11a:	2b09      	cmp	r3, #9
 800f11c:	d9ca      	bls.n	800f0b4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800f11e:	68ba      	ldr	r2, [r7, #8]
 800f120:	69b9      	ldr	r1, [r7, #24]
 800f122:	68f8      	ldr	r0, [r7, #12]
 800f124:	f000 f822 	bl	800f16c <etharp_query>
 800f128:	4603      	mov	r3, r0
 800f12a:	e00b      	b.n	800f144 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800f132:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f136:	9300      	str	r3, [sp, #0]
 800f138:	69fb      	ldr	r3, [r7, #28]
 800f13a:	68b9      	ldr	r1, [r7, #8]
 800f13c:	68f8      	ldr	r0, [r7, #12]
 800f13e:	f001 fd45 	bl	8010bcc <ethernet_output>
 800f142:	4603      	mov	r3, r0
}
 800f144:	4618      	mov	r0, r3
 800f146:	3720      	adds	r7, #32
 800f148:	46bd      	mov	sp, r7
 800f14a:	bd80      	pop	{r7, pc}
 800f14c:	08015d20 	.word	0x08015d20
 800f150:	08015e70 	.word	0x08015e70
 800f154:	08015d98 	.word	0x08015d98
 800f158:	08015ec0 	.word	0x08015ec0
 800f15c:	08015e60 	.word	0x08015e60
 800f160:	080164dc 	.word	0x080164dc
 800f164:	2000a878 	.word	0x2000a878
 800f168:	2000a788 	.word	0x2000a788

0800f16c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b08c      	sub	sp, #48	; 0x30
 800f170:	af02      	add	r7, sp, #8
 800f172:	60f8      	str	r0, [r7, #12]
 800f174:	60b9      	str	r1, [r7, #8]
 800f176:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	3326      	adds	r3, #38	; 0x26
 800f17c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800f17e:	23ff      	movs	r3, #255	; 0xff
 800f180:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800f184:	2300      	movs	r3, #0
 800f186:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f188:	68bb      	ldr	r3, [r7, #8]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	68f9      	ldr	r1, [r7, #12]
 800f18e:	4618      	mov	r0, r3
 800f190:	f000 fe0e 	bl	800fdb0 <ip4_addr_isbroadcast_u32>
 800f194:	4603      	mov	r3, r0
 800f196:	2b00      	cmp	r3, #0
 800f198:	d10c      	bne.n	800f1b4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f19a:	68bb      	ldr	r3, [r7, #8]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f1a2:	2be0      	cmp	r3, #224	; 0xe0
 800f1a4:	d006      	beq.n	800f1b4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f1a6:	68bb      	ldr	r3, [r7, #8]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d003      	beq.n	800f1b4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800f1ac:	68bb      	ldr	r3, [r7, #8]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d102      	bne.n	800f1ba <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f1b4:	f06f 030f 	mvn.w	r3, #15
 800f1b8:	e101      	b.n	800f3be <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800f1ba:	68fa      	ldr	r2, [r7, #12]
 800f1bc:	2101      	movs	r1, #1
 800f1be:	68b8      	ldr	r0, [r7, #8]
 800f1c0:	f7ff fb60 	bl	800e884 <etharp_find_entry>
 800f1c4:	4603      	mov	r3, r0
 800f1c6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800f1c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	da02      	bge.n	800f1d6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800f1d0:	8a7b      	ldrh	r3, [r7, #18]
 800f1d2:	b25b      	sxtb	r3, r3
 800f1d4:	e0f3      	b.n	800f3be <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800f1d6:	8a7b      	ldrh	r3, [r7, #18]
 800f1d8:	2b7e      	cmp	r3, #126	; 0x7e
 800f1da:	d906      	bls.n	800f1ea <etharp_query+0x7e>
 800f1dc:	4b7a      	ldr	r3, [pc, #488]	; (800f3c8 <etharp_query+0x25c>)
 800f1de:	f240 32c1 	movw	r2, #961	; 0x3c1
 800f1e2:	497a      	ldr	r1, [pc, #488]	; (800f3cc <etharp_query+0x260>)
 800f1e4:	487a      	ldr	r0, [pc, #488]	; (800f3d0 <etharp_query+0x264>)
 800f1e6:	f002 fc17 	bl	8011a18 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800f1ea:	8a7b      	ldrh	r3, [r7, #18]
 800f1ec:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800f1ee:	7c7a      	ldrb	r2, [r7, #17]
 800f1f0:	4978      	ldr	r1, [pc, #480]	; (800f3d4 <etharp_query+0x268>)
 800f1f2:	4613      	mov	r3, r2
 800f1f4:	005b      	lsls	r3, r3, #1
 800f1f6:	4413      	add	r3, r2
 800f1f8:	00db      	lsls	r3, r3, #3
 800f1fa:	440b      	add	r3, r1
 800f1fc:	3314      	adds	r3, #20
 800f1fe:	781b      	ldrb	r3, [r3, #0]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d115      	bne.n	800f230 <etharp_query+0xc4>
    is_new_entry = 1;
 800f204:	2301      	movs	r3, #1
 800f206:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800f208:	7c7a      	ldrb	r2, [r7, #17]
 800f20a:	4972      	ldr	r1, [pc, #456]	; (800f3d4 <etharp_query+0x268>)
 800f20c:	4613      	mov	r3, r2
 800f20e:	005b      	lsls	r3, r3, #1
 800f210:	4413      	add	r3, r2
 800f212:	00db      	lsls	r3, r3, #3
 800f214:	440b      	add	r3, r1
 800f216:	3314      	adds	r3, #20
 800f218:	2201      	movs	r2, #1
 800f21a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800f21c:	7c7a      	ldrb	r2, [r7, #17]
 800f21e:	496d      	ldr	r1, [pc, #436]	; (800f3d4 <etharp_query+0x268>)
 800f220:	4613      	mov	r3, r2
 800f222:	005b      	lsls	r3, r3, #1
 800f224:	4413      	add	r3, r2
 800f226:	00db      	lsls	r3, r3, #3
 800f228:	440b      	add	r3, r1
 800f22a:	3308      	adds	r3, #8
 800f22c:	68fa      	ldr	r2, [r7, #12]
 800f22e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800f230:	7c7a      	ldrb	r2, [r7, #17]
 800f232:	4968      	ldr	r1, [pc, #416]	; (800f3d4 <etharp_query+0x268>)
 800f234:	4613      	mov	r3, r2
 800f236:	005b      	lsls	r3, r3, #1
 800f238:	4413      	add	r3, r2
 800f23a:	00db      	lsls	r3, r3, #3
 800f23c:	440b      	add	r3, r1
 800f23e:	3314      	adds	r3, #20
 800f240:	781b      	ldrb	r3, [r3, #0]
 800f242:	2b01      	cmp	r3, #1
 800f244:	d011      	beq.n	800f26a <etharp_query+0xfe>
 800f246:	7c7a      	ldrb	r2, [r7, #17]
 800f248:	4962      	ldr	r1, [pc, #392]	; (800f3d4 <etharp_query+0x268>)
 800f24a:	4613      	mov	r3, r2
 800f24c:	005b      	lsls	r3, r3, #1
 800f24e:	4413      	add	r3, r2
 800f250:	00db      	lsls	r3, r3, #3
 800f252:	440b      	add	r3, r1
 800f254:	3314      	adds	r3, #20
 800f256:	781b      	ldrb	r3, [r3, #0]
 800f258:	2b01      	cmp	r3, #1
 800f25a:	d806      	bhi.n	800f26a <etharp_query+0xfe>
 800f25c:	4b5a      	ldr	r3, [pc, #360]	; (800f3c8 <etharp_query+0x25c>)
 800f25e:	f240 32cd 	movw	r2, #973	; 0x3cd
 800f262:	495d      	ldr	r1, [pc, #372]	; (800f3d8 <etharp_query+0x26c>)
 800f264:	485a      	ldr	r0, [pc, #360]	; (800f3d0 <etharp_query+0x264>)
 800f266:	f002 fbd7 	bl	8011a18 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800f26a:	6a3b      	ldr	r3, [r7, #32]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d102      	bne.n	800f276 <etharp_query+0x10a>
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d10c      	bne.n	800f290 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800f276:	68b9      	ldr	r1, [r7, #8]
 800f278:	68f8      	ldr	r0, [r7, #12]
 800f27a:	f000 f963 	bl	800f544 <etharp_request>
 800f27e:	4603      	mov	r3, r0
 800f280:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d102      	bne.n	800f290 <etharp_query+0x124>
      return result;
 800f28a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f28e:	e096      	b.n	800f3be <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d106      	bne.n	800f2a4 <etharp_query+0x138>
 800f296:	4b4c      	ldr	r3, [pc, #304]	; (800f3c8 <etharp_query+0x25c>)
 800f298:	f240 32e1 	movw	r2, #993	; 0x3e1
 800f29c:	494f      	ldr	r1, [pc, #316]	; (800f3dc <etharp_query+0x270>)
 800f29e:	484c      	ldr	r0, [pc, #304]	; (800f3d0 <etharp_query+0x264>)
 800f2a0:	f002 fbba 	bl	8011a18 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800f2a4:	7c7a      	ldrb	r2, [r7, #17]
 800f2a6:	494b      	ldr	r1, [pc, #300]	; (800f3d4 <etharp_query+0x268>)
 800f2a8:	4613      	mov	r3, r2
 800f2aa:	005b      	lsls	r3, r3, #1
 800f2ac:	4413      	add	r3, r2
 800f2ae:	00db      	lsls	r3, r3, #3
 800f2b0:	440b      	add	r3, r1
 800f2b2:	3314      	adds	r3, #20
 800f2b4:	781b      	ldrb	r3, [r3, #0]
 800f2b6:	2b01      	cmp	r3, #1
 800f2b8:	d917      	bls.n	800f2ea <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800f2ba:	4a49      	ldr	r2, [pc, #292]	; (800f3e0 <etharp_query+0x274>)
 800f2bc:	7c7b      	ldrb	r3, [r7, #17]
 800f2be:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800f2c0:	7c7a      	ldrb	r2, [r7, #17]
 800f2c2:	4613      	mov	r3, r2
 800f2c4:	005b      	lsls	r3, r3, #1
 800f2c6:	4413      	add	r3, r2
 800f2c8:	00db      	lsls	r3, r3, #3
 800f2ca:	3308      	adds	r3, #8
 800f2cc:	4a41      	ldr	r2, [pc, #260]	; (800f3d4 <etharp_query+0x268>)
 800f2ce:	4413      	add	r3, r2
 800f2d0:	3304      	adds	r3, #4
 800f2d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f2d6:	9200      	str	r2, [sp, #0]
 800f2d8:	697a      	ldr	r2, [r7, #20]
 800f2da:	6879      	ldr	r1, [r7, #4]
 800f2dc:	68f8      	ldr	r0, [r7, #12]
 800f2de:	f001 fc75 	bl	8010bcc <ethernet_output>
 800f2e2:	4603      	mov	r3, r0
 800f2e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f2e8:	e067      	b.n	800f3ba <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f2ea:	7c7a      	ldrb	r2, [r7, #17]
 800f2ec:	4939      	ldr	r1, [pc, #228]	; (800f3d4 <etharp_query+0x268>)
 800f2ee:	4613      	mov	r3, r2
 800f2f0:	005b      	lsls	r3, r3, #1
 800f2f2:	4413      	add	r3, r2
 800f2f4:	00db      	lsls	r3, r3, #3
 800f2f6:	440b      	add	r3, r1
 800f2f8:	3314      	adds	r3, #20
 800f2fa:	781b      	ldrb	r3, [r3, #0]
 800f2fc:	2b01      	cmp	r3, #1
 800f2fe:	d15c      	bne.n	800f3ba <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800f300:	2300      	movs	r3, #0
 800f302:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f308:	e01c      	b.n	800f344 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800f30a:	69fb      	ldr	r3, [r7, #28]
 800f30c:	895a      	ldrh	r2, [r3, #10]
 800f30e:	69fb      	ldr	r3, [r7, #28]
 800f310:	891b      	ldrh	r3, [r3, #8]
 800f312:	429a      	cmp	r2, r3
 800f314:	d10a      	bne.n	800f32c <etharp_query+0x1c0>
 800f316:	69fb      	ldr	r3, [r7, #28]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d006      	beq.n	800f32c <etharp_query+0x1c0>
 800f31e:	4b2a      	ldr	r3, [pc, #168]	; (800f3c8 <etharp_query+0x25c>)
 800f320:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800f324:	492f      	ldr	r1, [pc, #188]	; (800f3e4 <etharp_query+0x278>)
 800f326:	482a      	ldr	r0, [pc, #168]	; (800f3d0 <etharp_query+0x264>)
 800f328:	f002 fb76 	bl	8011a18 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800f32c:	69fb      	ldr	r3, [r7, #28]
 800f32e:	7b1b      	ldrb	r3, [r3, #12]
 800f330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f334:	2b00      	cmp	r3, #0
 800f336:	d002      	beq.n	800f33e <etharp_query+0x1d2>
        copy_needed = 1;
 800f338:	2301      	movs	r3, #1
 800f33a:	61bb      	str	r3, [r7, #24]
        break;
 800f33c:	e005      	b.n	800f34a <etharp_query+0x1de>
      }
      p = p->next;
 800f33e:	69fb      	ldr	r3, [r7, #28]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f344:	69fb      	ldr	r3, [r7, #28]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d1df      	bne.n	800f30a <etharp_query+0x19e>
    }
    if (copy_needed) {
 800f34a:	69bb      	ldr	r3, [r7, #24]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d007      	beq.n	800f360 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800f350:	687a      	ldr	r2, [r7, #4]
 800f352:	f44f 7120 	mov.w	r1, #640	; 0x280
 800f356:	200e      	movs	r0, #14
 800f358:	f7f9 fbc2 	bl	8008ae0 <pbuf_clone>
 800f35c:	61f8      	str	r0, [r7, #28]
 800f35e:	e004      	b.n	800f36a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800f364:	69f8      	ldr	r0, [r7, #28]
 800f366:	f7f9 f9ff 	bl	8008768 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800f36a:	69fb      	ldr	r3, [r7, #28]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d021      	beq.n	800f3b4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800f370:	7c7a      	ldrb	r2, [r7, #17]
 800f372:	4918      	ldr	r1, [pc, #96]	; (800f3d4 <etharp_query+0x268>)
 800f374:	4613      	mov	r3, r2
 800f376:	005b      	lsls	r3, r3, #1
 800f378:	4413      	add	r3, r2
 800f37a:	00db      	lsls	r3, r3, #3
 800f37c:	440b      	add	r3, r1
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d00a      	beq.n	800f39a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800f384:	7c7a      	ldrb	r2, [r7, #17]
 800f386:	4913      	ldr	r1, [pc, #76]	; (800f3d4 <etharp_query+0x268>)
 800f388:	4613      	mov	r3, r2
 800f38a:	005b      	lsls	r3, r3, #1
 800f38c:	4413      	add	r3, r2
 800f38e:	00db      	lsls	r3, r3, #3
 800f390:	440b      	add	r3, r1
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	4618      	mov	r0, r3
 800f396:	f7f9 f947 	bl	8008628 <pbuf_free>
      }
      arp_table[i].q = p;
 800f39a:	7c7a      	ldrb	r2, [r7, #17]
 800f39c:	490d      	ldr	r1, [pc, #52]	; (800f3d4 <etharp_query+0x268>)
 800f39e:	4613      	mov	r3, r2
 800f3a0:	005b      	lsls	r3, r3, #1
 800f3a2:	4413      	add	r3, r2
 800f3a4:	00db      	lsls	r3, r3, #3
 800f3a6:	440b      	add	r3, r1
 800f3a8:	69fa      	ldr	r2, [r7, #28]
 800f3aa:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f3b2:	e002      	b.n	800f3ba <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800f3b4:	23ff      	movs	r3, #255	; 0xff
 800f3b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800f3ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f3be:	4618      	mov	r0, r3
 800f3c0:	3728      	adds	r7, #40	; 0x28
 800f3c2:	46bd      	mov	sp, r7
 800f3c4:	bd80      	pop	{r7, pc}
 800f3c6:	bf00      	nop
 800f3c8:	08015d20 	.word	0x08015d20
 800f3cc:	08015ecc 	.word	0x08015ecc
 800f3d0:	08015d98 	.word	0x08015d98
 800f3d4:	2000a788 	.word	0x2000a788
 800f3d8:	08015edc 	.word	0x08015edc
 800f3dc:	08015ec0 	.word	0x08015ec0
 800f3e0:	2000a878 	.word	0x2000a878
 800f3e4:	08015f04 	.word	0x08015f04

0800f3e8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	b08a      	sub	sp, #40	; 0x28
 800f3ec:	af02      	add	r7, sp, #8
 800f3ee:	60f8      	str	r0, [r7, #12]
 800f3f0:	60b9      	str	r1, [r7, #8]
 800f3f2:	607a      	str	r2, [r7, #4]
 800f3f4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d106      	bne.n	800f40e <etharp_raw+0x26>
 800f400:	4b3a      	ldr	r3, [pc, #232]	; (800f4ec <etharp_raw+0x104>)
 800f402:	f240 4257 	movw	r2, #1111	; 0x457
 800f406:	493a      	ldr	r1, [pc, #232]	; (800f4f0 <etharp_raw+0x108>)
 800f408:	483a      	ldr	r0, [pc, #232]	; (800f4f4 <etharp_raw+0x10c>)
 800f40a:	f002 fb05 	bl	8011a18 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800f40e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f412:	211c      	movs	r1, #28
 800f414:	200e      	movs	r0, #14
 800f416:	f7f8 fe23 	bl	8008060 <pbuf_alloc>
 800f41a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800f41c:	69bb      	ldr	r3, [r7, #24]
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d102      	bne.n	800f428 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800f422:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f426:	e05d      	b.n	800f4e4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800f428:	69bb      	ldr	r3, [r7, #24]
 800f42a:	895b      	ldrh	r3, [r3, #10]
 800f42c:	2b1b      	cmp	r3, #27
 800f42e:	d806      	bhi.n	800f43e <etharp_raw+0x56>
 800f430:	4b2e      	ldr	r3, [pc, #184]	; (800f4ec <etharp_raw+0x104>)
 800f432:	f240 4262 	movw	r2, #1122	; 0x462
 800f436:	4930      	ldr	r1, [pc, #192]	; (800f4f8 <etharp_raw+0x110>)
 800f438:	482e      	ldr	r0, [pc, #184]	; (800f4f4 <etharp_raw+0x10c>)
 800f43a:	f002 faed 	bl	8011a18 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800f43e:	69bb      	ldr	r3, [r7, #24]
 800f440:	685b      	ldr	r3, [r3, #4]
 800f442:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800f444:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f446:	4618      	mov	r0, r3
 800f448:	f7f7 fd90 	bl	8006f6c <lwip_htons>
 800f44c:	4603      	mov	r3, r0
 800f44e:	461a      	mov	r2, r3
 800f450:	697b      	ldr	r3, [r7, #20]
 800f452:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f45a:	2b06      	cmp	r3, #6
 800f45c:	d006      	beq.n	800f46c <etharp_raw+0x84>
 800f45e:	4b23      	ldr	r3, [pc, #140]	; (800f4ec <etharp_raw+0x104>)
 800f460:	f240 4269 	movw	r2, #1129	; 0x469
 800f464:	4925      	ldr	r1, [pc, #148]	; (800f4fc <etharp_raw+0x114>)
 800f466:	4823      	ldr	r0, [pc, #140]	; (800f4f4 <etharp_raw+0x10c>)
 800f468:	f002 fad6 	bl	8011a18 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800f46c:	697b      	ldr	r3, [r7, #20]
 800f46e:	3308      	adds	r3, #8
 800f470:	2206      	movs	r2, #6
 800f472:	6839      	ldr	r1, [r7, #0]
 800f474:	4618      	mov	r0, r3
 800f476:	f002 fc30 	bl	8011cda <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800f47a:	697b      	ldr	r3, [r7, #20]
 800f47c:	3312      	adds	r3, #18
 800f47e:	2206      	movs	r2, #6
 800f480:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f482:	4618      	mov	r0, r3
 800f484:	f002 fc29 	bl	8011cda <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800f488:	697b      	ldr	r3, [r7, #20]
 800f48a:	330e      	adds	r3, #14
 800f48c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f48e:	6812      	ldr	r2, [r2, #0]
 800f490:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800f492:	697b      	ldr	r3, [r7, #20]
 800f494:	3318      	adds	r3, #24
 800f496:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f498:	6812      	ldr	r2, [r2, #0]
 800f49a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800f49c:	697b      	ldr	r3, [r7, #20]
 800f49e:	2200      	movs	r2, #0
 800f4a0:	701a      	strb	r2, [r3, #0]
 800f4a2:	2200      	movs	r2, #0
 800f4a4:	f042 0201 	orr.w	r2, r2, #1
 800f4a8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800f4aa:	697b      	ldr	r3, [r7, #20]
 800f4ac:	2200      	movs	r2, #0
 800f4ae:	f042 0208 	orr.w	r2, r2, #8
 800f4b2:	709a      	strb	r2, [r3, #2]
 800f4b4:	2200      	movs	r2, #0
 800f4b6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800f4b8:	697b      	ldr	r3, [r7, #20]
 800f4ba:	2206      	movs	r2, #6
 800f4bc:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800f4be:	697b      	ldr	r3, [r7, #20]
 800f4c0:	2204      	movs	r2, #4
 800f4c2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800f4c4:	f640 0306 	movw	r3, #2054	; 0x806
 800f4c8:	9300      	str	r3, [sp, #0]
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	68ba      	ldr	r2, [r7, #8]
 800f4ce:	69b9      	ldr	r1, [r7, #24]
 800f4d0:	68f8      	ldr	r0, [r7, #12]
 800f4d2:	f001 fb7b 	bl	8010bcc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800f4d6:	69b8      	ldr	r0, [r7, #24]
 800f4d8:	f7f9 f8a6 	bl	8008628 <pbuf_free>
  p = NULL;
 800f4dc:	2300      	movs	r3, #0
 800f4de:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800f4e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	3720      	adds	r7, #32
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	bd80      	pop	{r7, pc}
 800f4ec:	08015d20 	.word	0x08015d20
 800f4f0:	08015e70 	.word	0x08015e70
 800f4f4:	08015d98 	.word	0x08015d98
 800f4f8:	08015f20 	.word	0x08015f20
 800f4fc:	08015f54 	.word	0x08015f54

0800f500 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800f500:	b580      	push	{r7, lr}
 800f502:	b088      	sub	sp, #32
 800f504:	af04      	add	r7, sp, #16
 800f506:	60f8      	str	r0, [r7, #12]
 800f508:	60b9      	str	r1, [r7, #8]
 800f50a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f51c:	2201      	movs	r2, #1
 800f51e:	9203      	str	r2, [sp, #12]
 800f520:	68ba      	ldr	r2, [r7, #8]
 800f522:	9202      	str	r2, [sp, #8]
 800f524:	4a06      	ldr	r2, [pc, #24]	; (800f540 <etharp_request_dst+0x40>)
 800f526:	9201      	str	r2, [sp, #4]
 800f528:	9300      	str	r3, [sp, #0]
 800f52a:	4603      	mov	r3, r0
 800f52c:	687a      	ldr	r2, [r7, #4]
 800f52e:	68f8      	ldr	r0, [r7, #12]
 800f530:	f7ff ff5a 	bl	800f3e8 <etharp_raw>
 800f534:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800f536:	4618      	mov	r0, r3
 800f538:	3710      	adds	r7, #16
 800f53a:	46bd      	mov	sp, r7
 800f53c:	bd80      	pop	{r7, pc}
 800f53e:	bf00      	nop
 800f540:	080164e4 	.word	0x080164e4

0800f544 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b082      	sub	sp, #8
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
 800f54c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800f54e:	4a05      	ldr	r2, [pc, #20]	; (800f564 <etharp_request+0x20>)
 800f550:	6839      	ldr	r1, [r7, #0]
 800f552:	6878      	ldr	r0, [r7, #4]
 800f554:	f7ff ffd4 	bl	800f500 <etharp_request_dst>
 800f558:	4603      	mov	r3, r0
}
 800f55a:	4618      	mov	r0, r3
 800f55c:	3708      	adds	r7, #8
 800f55e:	46bd      	mov	sp, r7
 800f560:	bd80      	pop	{r7, pc}
 800f562:	bf00      	nop
 800f564:	080164dc 	.word	0x080164dc

0800f568 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800f568:	b580      	push	{r7, lr}
 800f56a:	b08e      	sub	sp, #56	; 0x38
 800f56c:	af04      	add	r7, sp, #16
 800f56e:	6078      	str	r0, [r7, #4]
 800f570:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800f572:	4b79      	ldr	r3, [pc, #484]	; (800f758 <icmp_input+0x1f0>)
 800f574:	689b      	ldr	r3, [r3, #8]
 800f576:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800f578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f57a:	781b      	ldrb	r3, [r3, #0]
 800f57c:	f003 030f 	and.w	r3, r3, #15
 800f580:	b2db      	uxtb	r3, r3
 800f582:	009b      	lsls	r3, r3, #2
 800f584:	b2db      	uxtb	r3, r3
 800f586:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800f588:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f58a:	2b13      	cmp	r3, #19
 800f58c:	f240 80cd 	bls.w	800f72a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	895b      	ldrh	r3, [r3, #10]
 800f594:	2b03      	cmp	r3, #3
 800f596:	f240 80ca 	bls.w	800f72e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	685b      	ldr	r3, [r3, #4]
 800f59e:	781b      	ldrb	r3, [r3, #0]
 800f5a0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800f5a4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	f000 80b7 	beq.w	800f71c <icmp_input+0x1b4>
 800f5ae:	2b08      	cmp	r3, #8
 800f5b0:	f040 80b7 	bne.w	800f722 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800f5b4:	4b69      	ldr	r3, [pc, #420]	; (800f75c <icmp_input+0x1f4>)
 800f5b6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f5b8:	4b67      	ldr	r3, [pc, #412]	; (800f758 <icmp_input+0x1f0>)
 800f5ba:	695b      	ldr	r3, [r3, #20]
 800f5bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f5c0:	2be0      	cmp	r3, #224	; 0xe0
 800f5c2:	f000 80bb 	beq.w	800f73c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800f5c6:	4b64      	ldr	r3, [pc, #400]	; (800f758 <icmp_input+0x1f0>)
 800f5c8:	695b      	ldr	r3, [r3, #20]
 800f5ca:	4a63      	ldr	r2, [pc, #396]	; (800f758 <icmp_input+0x1f0>)
 800f5cc:	6812      	ldr	r2, [r2, #0]
 800f5ce:	4611      	mov	r1, r2
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	f000 fbed 	bl	800fdb0 <ip4_addr_isbroadcast_u32>
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	f040 80b1 	bne.w	800f740 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	891b      	ldrh	r3, [r3, #8]
 800f5e2:	2b07      	cmp	r3, #7
 800f5e4:	f240 80a5 	bls.w	800f732 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800f5e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f5ea:	330e      	adds	r3, #14
 800f5ec:	4619      	mov	r1, r3
 800f5ee:	6878      	ldr	r0, [r7, #4]
 800f5f0:	f7f8 ff84 	bl	80084fc <pbuf_add_header>
 800f5f4:	4603      	mov	r3, r0
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d04b      	beq.n	800f692 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	891a      	ldrh	r2, [r3, #8]
 800f5fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f600:	4413      	add	r3, r2
 800f602:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	891b      	ldrh	r3, [r3, #8]
 800f608:	8b7a      	ldrh	r2, [r7, #26]
 800f60a:	429a      	cmp	r2, r3
 800f60c:	f0c0 809a 	bcc.w	800f744 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800f610:	8b7b      	ldrh	r3, [r7, #26]
 800f612:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f616:	4619      	mov	r1, r3
 800f618:	200e      	movs	r0, #14
 800f61a:	f7f8 fd21 	bl	8008060 <pbuf_alloc>
 800f61e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800f620:	697b      	ldr	r3, [r7, #20]
 800f622:	2b00      	cmp	r3, #0
 800f624:	f000 8090 	beq.w	800f748 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800f628:	697b      	ldr	r3, [r7, #20]
 800f62a:	895b      	ldrh	r3, [r3, #10]
 800f62c:	461a      	mov	r2, r3
 800f62e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f630:	3308      	adds	r3, #8
 800f632:	429a      	cmp	r2, r3
 800f634:	d203      	bcs.n	800f63e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800f636:	6978      	ldr	r0, [r7, #20]
 800f638:	f7f8 fff6 	bl	8008628 <pbuf_free>
          goto icmperr;
 800f63c:	e085      	b.n	800f74a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800f63e:	697b      	ldr	r3, [r7, #20]
 800f640:	685b      	ldr	r3, [r3, #4]
 800f642:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f644:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f646:	4618      	mov	r0, r3
 800f648:	f002 fb47 	bl	8011cda <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800f64c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f64e:	4619      	mov	r1, r3
 800f650:	6978      	ldr	r0, [r7, #20]
 800f652:	f7f8 ff63 	bl	800851c <pbuf_remove_header>
 800f656:	4603      	mov	r3, r0
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d009      	beq.n	800f670 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800f65c:	4b40      	ldr	r3, [pc, #256]	; (800f760 <icmp_input+0x1f8>)
 800f65e:	22b6      	movs	r2, #182	; 0xb6
 800f660:	4940      	ldr	r1, [pc, #256]	; (800f764 <icmp_input+0x1fc>)
 800f662:	4841      	ldr	r0, [pc, #260]	; (800f768 <icmp_input+0x200>)
 800f664:	f002 f9d8 	bl	8011a18 <iprintf>
          pbuf_free(r);
 800f668:	6978      	ldr	r0, [r7, #20]
 800f66a:	f7f8 ffdd 	bl	8008628 <pbuf_free>
          goto icmperr;
 800f66e:	e06c      	b.n	800f74a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800f670:	6879      	ldr	r1, [r7, #4]
 800f672:	6978      	ldr	r0, [r7, #20]
 800f674:	f7f9 f8f0 	bl	8008858 <pbuf_copy>
 800f678:	4603      	mov	r3, r0
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d003      	beq.n	800f686 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800f67e:	6978      	ldr	r0, [r7, #20]
 800f680:	f7f8 ffd2 	bl	8008628 <pbuf_free>
          goto icmperr;
 800f684:	e061      	b.n	800f74a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800f686:	6878      	ldr	r0, [r7, #4]
 800f688:	f7f8 ffce 	bl	8008628 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800f68c:	697b      	ldr	r3, [r7, #20]
 800f68e:	607b      	str	r3, [r7, #4]
 800f690:	e00f      	b.n	800f6b2 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800f692:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f694:	330e      	adds	r3, #14
 800f696:	4619      	mov	r1, r3
 800f698:	6878      	ldr	r0, [r7, #4]
 800f69a:	f7f8 ff3f 	bl	800851c <pbuf_remove_header>
 800f69e:	4603      	mov	r3, r0
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d006      	beq.n	800f6b2 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800f6a4:	4b2e      	ldr	r3, [pc, #184]	; (800f760 <icmp_input+0x1f8>)
 800f6a6:	22c7      	movs	r2, #199	; 0xc7
 800f6a8:	4930      	ldr	r1, [pc, #192]	; (800f76c <icmp_input+0x204>)
 800f6aa:	482f      	ldr	r0, [pc, #188]	; (800f768 <icmp_input+0x200>)
 800f6ac:	f002 f9b4 	bl	8011a18 <iprintf>
          goto icmperr;
 800f6b0:	e04b      	b.n	800f74a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	685b      	ldr	r3, [r3, #4]
 800f6b6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800f6b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f6ba:	4619      	mov	r1, r3
 800f6bc:	6878      	ldr	r0, [r7, #4]
 800f6be:	f7f8 ff1d 	bl	80084fc <pbuf_add_header>
 800f6c2:	4603      	mov	r3, r0
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d12b      	bne.n	800f720 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	685b      	ldr	r3, [r3, #4]
 800f6cc:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800f6ce:	69fb      	ldr	r3, [r7, #28]
 800f6d0:	681a      	ldr	r2, [r3, #0]
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800f6d6:	4b20      	ldr	r3, [pc, #128]	; (800f758 <icmp_input+0x1f0>)
 800f6d8:	691a      	ldr	r2, [r3, #16]
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800f6de:	693b      	ldr	r3, [r7, #16]
 800f6e0:	2200      	movs	r2, #0
 800f6e2:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800f6e4:	693b      	ldr	r3, [r7, #16]
 800f6e6:	2200      	movs	r2, #0
 800f6e8:	709a      	strb	r2, [r3, #2]
 800f6ea:	2200      	movs	r2, #0
 800f6ec:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	22ff      	movs	r2, #255	; 0xff
 800f6f2:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	2200      	movs	r2, #0
 800f6f8:	729a      	strb	r2, [r3, #10]
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800f6fe:	683b      	ldr	r3, [r7, #0]
 800f700:	9302      	str	r3, [sp, #8]
 800f702:	2301      	movs	r3, #1
 800f704:	9301      	str	r3, [sp, #4]
 800f706:	2300      	movs	r3, #0
 800f708:	9300      	str	r3, [sp, #0]
 800f70a:	23ff      	movs	r3, #255	; 0xff
 800f70c:	2200      	movs	r2, #0
 800f70e:	69f9      	ldr	r1, [r7, #28]
 800f710:	6878      	ldr	r0, [r7, #4]
 800f712:	f000 fa75 	bl	800fc00 <ip4_output_if>
 800f716:	4603      	mov	r3, r0
 800f718:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800f71a:	e001      	b.n	800f720 <icmp_input+0x1b8>
      break;
 800f71c:	bf00      	nop
 800f71e:	e000      	b.n	800f722 <icmp_input+0x1ba>
      break;
 800f720:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800f722:	6878      	ldr	r0, [r7, #4]
 800f724:	f7f8 ff80 	bl	8008628 <pbuf_free>
  return;
 800f728:	e013      	b.n	800f752 <icmp_input+0x1ea>
    goto lenerr;
 800f72a:	bf00      	nop
 800f72c:	e002      	b.n	800f734 <icmp_input+0x1cc>
    goto lenerr;
 800f72e:	bf00      	nop
 800f730:	e000      	b.n	800f734 <icmp_input+0x1cc>
        goto lenerr;
 800f732:	bf00      	nop
lenerr:
  pbuf_free(p);
 800f734:	6878      	ldr	r0, [r7, #4]
 800f736:	f7f8 ff77 	bl	8008628 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f73a:	e00a      	b.n	800f752 <icmp_input+0x1ea>
        goto icmperr;
 800f73c:	bf00      	nop
 800f73e:	e004      	b.n	800f74a <icmp_input+0x1e2>
        goto icmperr;
 800f740:	bf00      	nop
 800f742:	e002      	b.n	800f74a <icmp_input+0x1e2>
          goto icmperr;
 800f744:	bf00      	nop
 800f746:	e000      	b.n	800f74a <icmp_input+0x1e2>
          goto icmperr;
 800f748:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800f74a:	6878      	ldr	r0, [r7, #4]
 800f74c:	f7f8 ff6c 	bl	8008628 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f750:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800f752:	3728      	adds	r7, #40	; 0x28
 800f754:	46bd      	mov	sp, r7
 800f756:	bd80      	pop	{r7, pc}
 800f758:	20004ff8 	.word	0x20004ff8
 800f75c:	2000500c 	.word	0x2000500c
 800f760:	08015f98 	.word	0x08015f98
 800f764:	08015fd0 	.word	0x08015fd0
 800f768:	08016008 	.word	0x08016008
 800f76c:	08016030 	.word	0x08016030

0800f770 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b082      	sub	sp, #8
 800f774:	af00      	add	r7, sp, #0
 800f776:	6078      	str	r0, [r7, #4]
 800f778:	460b      	mov	r3, r1
 800f77a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800f77c:	78fb      	ldrb	r3, [r7, #3]
 800f77e:	461a      	mov	r2, r3
 800f780:	2103      	movs	r1, #3
 800f782:	6878      	ldr	r0, [r7, #4]
 800f784:	f000 f814 	bl	800f7b0 <icmp_send_response>
}
 800f788:	bf00      	nop
 800f78a:	3708      	adds	r7, #8
 800f78c:	46bd      	mov	sp, r7
 800f78e:	bd80      	pop	{r7, pc}

0800f790 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b082      	sub	sp, #8
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
 800f798:	460b      	mov	r3, r1
 800f79a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800f79c:	78fb      	ldrb	r3, [r7, #3]
 800f79e:	461a      	mov	r2, r3
 800f7a0:	210b      	movs	r1, #11
 800f7a2:	6878      	ldr	r0, [r7, #4]
 800f7a4:	f000 f804 	bl	800f7b0 <icmp_send_response>
}
 800f7a8:	bf00      	nop
 800f7aa:	3708      	adds	r7, #8
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	bd80      	pop	{r7, pc}

0800f7b0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b08c      	sub	sp, #48	; 0x30
 800f7b4:	af04      	add	r7, sp, #16
 800f7b6:	6078      	str	r0, [r7, #4]
 800f7b8:	460b      	mov	r3, r1
 800f7ba:	70fb      	strb	r3, [r7, #3]
 800f7bc:	4613      	mov	r3, r2
 800f7be:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800f7c0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f7c4:	2124      	movs	r1, #36	; 0x24
 800f7c6:	2022      	movs	r0, #34	; 0x22
 800f7c8:	f7f8 fc4a 	bl	8008060 <pbuf_alloc>
 800f7cc:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800f7ce:	69fb      	ldr	r3, [r7, #28]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d04c      	beq.n	800f86e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800f7d4:	69fb      	ldr	r3, [r7, #28]
 800f7d6:	895b      	ldrh	r3, [r3, #10]
 800f7d8:	2b23      	cmp	r3, #35	; 0x23
 800f7da:	d806      	bhi.n	800f7ea <icmp_send_response+0x3a>
 800f7dc:	4b26      	ldr	r3, [pc, #152]	; (800f878 <icmp_send_response+0xc8>)
 800f7de:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800f7e2:	4926      	ldr	r1, [pc, #152]	; (800f87c <icmp_send_response+0xcc>)
 800f7e4:	4826      	ldr	r0, [pc, #152]	; (800f880 <icmp_send_response+0xd0>)
 800f7e6:	f002 f917 	bl	8011a18 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	685b      	ldr	r3, [r3, #4]
 800f7ee:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800f7f0:	69fb      	ldr	r3, [r7, #28]
 800f7f2:	685b      	ldr	r3, [r3, #4]
 800f7f4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800f7f6:	697b      	ldr	r3, [r7, #20]
 800f7f8:	78fa      	ldrb	r2, [r7, #3]
 800f7fa:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800f7fc:	697b      	ldr	r3, [r7, #20]
 800f7fe:	78ba      	ldrb	r2, [r7, #2]
 800f800:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800f802:	697b      	ldr	r3, [r7, #20]
 800f804:	2200      	movs	r2, #0
 800f806:	711a      	strb	r2, [r3, #4]
 800f808:	2200      	movs	r2, #0
 800f80a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800f80c:	697b      	ldr	r3, [r7, #20]
 800f80e:	2200      	movs	r2, #0
 800f810:	719a      	strb	r2, [r3, #6]
 800f812:	2200      	movs	r2, #0
 800f814:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800f816:	69fb      	ldr	r3, [r7, #28]
 800f818:	685b      	ldr	r3, [r3, #4]
 800f81a:	f103 0008 	add.w	r0, r3, #8
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	685b      	ldr	r3, [r3, #4]
 800f822:	221c      	movs	r2, #28
 800f824:	4619      	mov	r1, r3
 800f826:	f002 fa58 	bl	8011cda <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800f82a:	69bb      	ldr	r3, [r7, #24]
 800f82c:	68db      	ldr	r3, [r3, #12]
 800f82e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800f830:	f107 030c 	add.w	r3, r7, #12
 800f834:	4618      	mov	r0, r3
 800f836:	f000 f825 	bl	800f884 <ip4_route>
 800f83a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800f83c:	693b      	ldr	r3, [r7, #16]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d011      	beq.n	800f866 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800f842:	697b      	ldr	r3, [r7, #20]
 800f844:	2200      	movs	r2, #0
 800f846:	709a      	strb	r2, [r3, #2]
 800f848:	2200      	movs	r2, #0
 800f84a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800f84c:	f107 020c 	add.w	r2, r7, #12
 800f850:	693b      	ldr	r3, [r7, #16]
 800f852:	9302      	str	r3, [sp, #8]
 800f854:	2301      	movs	r3, #1
 800f856:	9301      	str	r3, [sp, #4]
 800f858:	2300      	movs	r3, #0
 800f85a:	9300      	str	r3, [sp, #0]
 800f85c:	23ff      	movs	r3, #255	; 0xff
 800f85e:	2100      	movs	r1, #0
 800f860:	69f8      	ldr	r0, [r7, #28]
 800f862:	f000 f9cd 	bl	800fc00 <ip4_output_if>
  }
  pbuf_free(q);
 800f866:	69f8      	ldr	r0, [r7, #28]
 800f868:	f7f8 fede 	bl	8008628 <pbuf_free>
 800f86c:	e000      	b.n	800f870 <icmp_send_response+0xc0>
    return;
 800f86e:	bf00      	nop
}
 800f870:	3720      	adds	r7, #32
 800f872:	46bd      	mov	sp, r7
 800f874:	bd80      	pop	{r7, pc}
 800f876:	bf00      	nop
 800f878:	08015f98 	.word	0x08015f98
 800f87c:	08016064 	.word	0x08016064
 800f880:	08016008 	.word	0x08016008

0800f884 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800f884:	b480      	push	{r7}
 800f886:	b085      	sub	sp, #20
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800f88c:	4b33      	ldr	r3, [pc, #204]	; (800f95c <ip4_route+0xd8>)
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	60fb      	str	r3, [r7, #12]
 800f892:	e036      	b.n	800f902 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f89a:	f003 0301 	and.w	r3, r3, #1
 800f89e:	b2db      	uxtb	r3, r3
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d02b      	beq.n	800f8fc <ip4_route+0x78>
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f8aa:	089b      	lsrs	r3, r3, #2
 800f8ac:	f003 0301 	and.w	r3, r3, #1
 800f8b0:	b2db      	uxtb	r3, r3
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d022      	beq.n	800f8fc <ip4_route+0x78>
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	3304      	adds	r3, #4
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d01d      	beq.n	800f8fc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	681a      	ldr	r2, [r3, #0]
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	3304      	adds	r3, #4
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	405a      	eors	r2, r3
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	3308      	adds	r3, #8
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	4013      	ands	r3, r2
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d101      	bne.n	800f8dc <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	e038      	b.n	800f94e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f8e2:	f003 0302 	and.w	r3, r3, #2
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d108      	bne.n	800f8fc <ip4_route+0x78>
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	681a      	ldr	r2, [r3, #0]
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	330c      	adds	r3, #12
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	429a      	cmp	r2, r3
 800f8f6:	d101      	bne.n	800f8fc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	e028      	b.n	800f94e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	60fb      	str	r3, [r7, #12]
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d1c5      	bne.n	800f894 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f908:	4b15      	ldr	r3, [pc, #84]	; (800f960 <ip4_route+0xdc>)
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d01a      	beq.n	800f946 <ip4_route+0xc2>
 800f910:	4b13      	ldr	r3, [pc, #76]	; (800f960 <ip4_route+0xdc>)
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f918:	f003 0301 	and.w	r3, r3, #1
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d012      	beq.n	800f946 <ip4_route+0xc2>
 800f920:	4b0f      	ldr	r3, [pc, #60]	; (800f960 <ip4_route+0xdc>)
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f928:	f003 0304 	and.w	r3, r3, #4
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d00a      	beq.n	800f946 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f930:	4b0b      	ldr	r3, [pc, #44]	; (800f960 <ip4_route+0xdc>)
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	3304      	adds	r3, #4
 800f936:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d004      	beq.n	800f946 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	b2db      	uxtb	r3, r3
 800f942:	2b7f      	cmp	r3, #127	; 0x7f
 800f944:	d101      	bne.n	800f94a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800f946:	2300      	movs	r3, #0
 800f948:	e001      	b.n	800f94e <ip4_route+0xca>
  }

  return netif_default;
 800f94a:	4b05      	ldr	r3, [pc, #20]	; (800f960 <ip4_route+0xdc>)
 800f94c:	681b      	ldr	r3, [r3, #0]
}
 800f94e:	4618      	mov	r0, r3
 800f950:	3714      	adds	r7, #20
 800f952:	46bd      	mov	sp, r7
 800f954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f958:	4770      	bx	lr
 800f95a:	bf00      	nop
 800f95c:	2000a71c 	.word	0x2000a71c
 800f960:	2000a720 	.word	0x2000a720

0800f964 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800f964:	b580      	push	{r7, lr}
 800f966:	b082      	sub	sp, #8
 800f968:	af00      	add	r7, sp, #0
 800f96a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f972:	f003 0301 	and.w	r3, r3, #1
 800f976:	b2db      	uxtb	r3, r3
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d016      	beq.n	800f9aa <ip4_input_accept+0x46>
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	3304      	adds	r3, #4
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	2b00      	cmp	r3, #0
 800f984:	d011      	beq.n	800f9aa <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f986:	4b0b      	ldr	r3, [pc, #44]	; (800f9b4 <ip4_input_accept+0x50>)
 800f988:	695a      	ldr	r2, [r3, #20]
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	3304      	adds	r3, #4
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	429a      	cmp	r2, r3
 800f992:	d008      	beq.n	800f9a6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800f994:	4b07      	ldr	r3, [pc, #28]	; (800f9b4 <ip4_input_accept+0x50>)
 800f996:	695b      	ldr	r3, [r3, #20]
 800f998:	6879      	ldr	r1, [r7, #4]
 800f99a:	4618      	mov	r0, r3
 800f99c:	f000 fa08 	bl	800fdb0 <ip4_addr_isbroadcast_u32>
 800f9a0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d001      	beq.n	800f9aa <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800f9a6:	2301      	movs	r3, #1
 800f9a8:	e000      	b.n	800f9ac <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800f9aa:	2300      	movs	r3, #0
}
 800f9ac:	4618      	mov	r0, r3
 800f9ae:	3708      	adds	r7, #8
 800f9b0:	46bd      	mov	sp, r7
 800f9b2:	bd80      	pop	{r7, pc}
 800f9b4:	20004ff8 	.word	0x20004ff8

0800f9b8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b086      	sub	sp, #24
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
 800f9c0:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	685b      	ldr	r3, [r3, #4]
 800f9c6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800f9c8:	697b      	ldr	r3, [r7, #20]
 800f9ca:	781b      	ldrb	r3, [r3, #0]
 800f9cc:	091b      	lsrs	r3, r3, #4
 800f9ce:	b2db      	uxtb	r3, r3
 800f9d0:	2b04      	cmp	r3, #4
 800f9d2:	d004      	beq.n	800f9de <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800f9d4:	6878      	ldr	r0, [r7, #4]
 800f9d6:	f7f8 fe27 	bl	8008628 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800f9da:	2300      	movs	r3, #0
 800f9dc:	e107      	b.n	800fbee <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800f9de:	697b      	ldr	r3, [r7, #20]
 800f9e0:	781b      	ldrb	r3, [r3, #0]
 800f9e2:	f003 030f 	and.w	r3, r3, #15
 800f9e6:	b2db      	uxtb	r3, r3
 800f9e8:	009b      	lsls	r3, r3, #2
 800f9ea:	b2db      	uxtb	r3, r3
 800f9ec:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800f9ee:	697b      	ldr	r3, [r7, #20]
 800f9f0:	885b      	ldrh	r3, [r3, #2]
 800f9f2:	b29b      	uxth	r3, r3
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	f7f7 fab9 	bl	8006f6c <lwip_htons>
 800f9fa:	4603      	mov	r3, r0
 800f9fc:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	891b      	ldrh	r3, [r3, #8]
 800fa02:	89ba      	ldrh	r2, [r7, #12]
 800fa04:	429a      	cmp	r2, r3
 800fa06:	d204      	bcs.n	800fa12 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800fa08:	89bb      	ldrh	r3, [r7, #12]
 800fa0a:	4619      	mov	r1, r3
 800fa0c:	6878      	ldr	r0, [r7, #4]
 800fa0e:	f7f8 fc85 	bl	800831c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	895b      	ldrh	r3, [r3, #10]
 800fa16:	89fa      	ldrh	r2, [r7, #14]
 800fa18:	429a      	cmp	r2, r3
 800fa1a:	d807      	bhi.n	800fa2c <ip4_input+0x74>
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	891b      	ldrh	r3, [r3, #8]
 800fa20:	89ba      	ldrh	r2, [r7, #12]
 800fa22:	429a      	cmp	r2, r3
 800fa24:	d802      	bhi.n	800fa2c <ip4_input+0x74>
 800fa26:	89fb      	ldrh	r3, [r7, #14]
 800fa28:	2b13      	cmp	r3, #19
 800fa2a:	d804      	bhi.n	800fa36 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800fa2c:	6878      	ldr	r0, [r7, #4]
 800fa2e:	f7f8 fdfb 	bl	8008628 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800fa32:	2300      	movs	r3, #0
 800fa34:	e0db      	b.n	800fbee <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800fa36:	697b      	ldr	r3, [r7, #20]
 800fa38:	691b      	ldr	r3, [r3, #16]
 800fa3a:	4a6f      	ldr	r2, [pc, #444]	; (800fbf8 <ip4_input+0x240>)
 800fa3c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800fa3e:	697b      	ldr	r3, [r7, #20]
 800fa40:	68db      	ldr	r3, [r3, #12]
 800fa42:	4a6d      	ldr	r2, [pc, #436]	; (800fbf8 <ip4_input+0x240>)
 800fa44:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fa46:	4b6c      	ldr	r3, [pc, #432]	; (800fbf8 <ip4_input+0x240>)
 800fa48:	695b      	ldr	r3, [r3, #20]
 800fa4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fa4e:	2be0      	cmp	r3, #224	; 0xe0
 800fa50:	d112      	bne.n	800fa78 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800fa52:	683b      	ldr	r3, [r7, #0]
 800fa54:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fa58:	f003 0301 	and.w	r3, r3, #1
 800fa5c:	b2db      	uxtb	r3, r3
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d007      	beq.n	800fa72 <ip4_input+0xba>
 800fa62:	683b      	ldr	r3, [r7, #0]
 800fa64:	3304      	adds	r3, #4
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d002      	beq.n	800fa72 <ip4_input+0xba>
      netif = inp;
 800fa6c:	683b      	ldr	r3, [r7, #0]
 800fa6e:	613b      	str	r3, [r7, #16]
 800fa70:	e02a      	b.n	800fac8 <ip4_input+0x110>
    } else {
      netif = NULL;
 800fa72:	2300      	movs	r3, #0
 800fa74:	613b      	str	r3, [r7, #16]
 800fa76:	e027      	b.n	800fac8 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800fa78:	6838      	ldr	r0, [r7, #0]
 800fa7a:	f7ff ff73 	bl	800f964 <ip4_input_accept>
 800fa7e:	4603      	mov	r3, r0
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d002      	beq.n	800fa8a <ip4_input+0xd2>
      netif = inp;
 800fa84:	683b      	ldr	r3, [r7, #0]
 800fa86:	613b      	str	r3, [r7, #16]
 800fa88:	e01e      	b.n	800fac8 <ip4_input+0x110>
    } else {
      netif = NULL;
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800fa8e:	4b5a      	ldr	r3, [pc, #360]	; (800fbf8 <ip4_input+0x240>)
 800fa90:	695b      	ldr	r3, [r3, #20]
 800fa92:	b2db      	uxtb	r3, r3
 800fa94:	2b7f      	cmp	r3, #127	; 0x7f
 800fa96:	d017      	beq.n	800fac8 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800fa98:	4b58      	ldr	r3, [pc, #352]	; (800fbfc <ip4_input+0x244>)
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	613b      	str	r3, [r7, #16]
 800fa9e:	e00e      	b.n	800fabe <ip4_input+0x106>
          if (netif == inp) {
 800faa0:	693a      	ldr	r2, [r7, #16]
 800faa2:	683b      	ldr	r3, [r7, #0]
 800faa4:	429a      	cmp	r2, r3
 800faa6:	d006      	beq.n	800fab6 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800faa8:	6938      	ldr	r0, [r7, #16]
 800faaa:	f7ff ff5b 	bl	800f964 <ip4_input_accept>
 800faae:	4603      	mov	r3, r0
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d108      	bne.n	800fac6 <ip4_input+0x10e>
 800fab4:	e000      	b.n	800fab8 <ip4_input+0x100>
            continue;
 800fab6:	bf00      	nop
        NETIF_FOREACH(netif) {
 800fab8:	693b      	ldr	r3, [r7, #16]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	613b      	str	r3, [r7, #16]
 800fabe:	693b      	ldr	r3, [r7, #16]
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d1ed      	bne.n	800faa0 <ip4_input+0xe8>
 800fac4:	e000      	b.n	800fac8 <ip4_input+0x110>
            break;
 800fac6:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800fac8:	4b4b      	ldr	r3, [pc, #300]	; (800fbf8 <ip4_input+0x240>)
 800faca:	691b      	ldr	r3, [r3, #16]
 800facc:	6839      	ldr	r1, [r7, #0]
 800face:	4618      	mov	r0, r3
 800fad0:	f000 f96e 	bl	800fdb0 <ip4_addr_isbroadcast_u32>
 800fad4:	4603      	mov	r3, r0
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d105      	bne.n	800fae6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800fada:	4b47      	ldr	r3, [pc, #284]	; (800fbf8 <ip4_input+0x240>)
 800fadc:	691b      	ldr	r3, [r3, #16]
 800fade:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800fae2:	2be0      	cmp	r3, #224	; 0xe0
 800fae4:	d104      	bne.n	800faf0 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800fae6:	6878      	ldr	r0, [r7, #4]
 800fae8:	f7f8 fd9e 	bl	8008628 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800faec:	2300      	movs	r3, #0
 800faee:	e07e      	b.n	800fbee <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800faf0:	693b      	ldr	r3, [r7, #16]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d104      	bne.n	800fb00 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800faf6:	6878      	ldr	r0, [r7, #4]
 800faf8:	f7f8 fd96 	bl	8008628 <pbuf_free>
    return ERR_OK;
 800fafc:	2300      	movs	r3, #0
 800fafe:	e076      	b.n	800fbee <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800fb00:	697b      	ldr	r3, [r7, #20]
 800fb02:	88db      	ldrh	r3, [r3, #6]
 800fb04:	b29b      	uxth	r3, r3
 800fb06:	461a      	mov	r2, r3
 800fb08:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800fb0c:	4013      	ands	r3, r2
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d00b      	beq.n	800fb2a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800fb12:	6878      	ldr	r0, [r7, #4]
 800fb14:	f000 fc92 	bl	801043c <ip4_reass>
 800fb18:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d101      	bne.n	800fb24 <ip4_input+0x16c>
      return ERR_OK;
 800fb20:	2300      	movs	r3, #0
 800fb22:	e064      	b.n	800fbee <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	685b      	ldr	r3, [r3, #4]
 800fb28:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800fb2a:	4a33      	ldr	r2, [pc, #204]	; (800fbf8 <ip4_input+0x240>)
 800fb2c:	693b      	ldr	r3, [r7, #16]
 800fb2e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800fb30:	4a31      	ldr	r2, [pc, #196]	; (800fbf8 <ip4_input+0x240>)
 800fb32:	683b      	ldr	r3, [r7, #0]
 800fb34:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800fb36:	4a30      	ldr	r2, [pc, #192]	; (800fbf8 <ip4_input+0x240>)
 800fb38:	697b      	ldr	r3, [r7, #20]
 800fb3a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800fb3c:	697b      	ldr	r3, [r7, #20]
 800fb3e:	781b      	ldrb	r3, [r3, #0]
 800fb40:	f003 030f 	and.w	r3, r3, #15
 800fb44:	b2db      	uxtb	r3, r3
 800fb46:	009b      	lsls	r3, r3, #2
 800fb48:	b2db      	uxtb	r3, r3
 800fb4a:	b29a      	uxth	r2, r3
 800fb4c:	4b2a      	ldr	r3, [pc, #168]	; (800fbf8 <ip4_input+0x240>)
 800fb4e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800fb50:	89fb      	ldrh	r3, [r7, #14]
 800fb52:	4619      	mov	r1, r3
 800fb54:	6878      	ldr	r0, [r7, #4]
 800fb56:	f7f8 fce1 	bl	800851c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800fb5a:	697b      	ldr	r3, [r7, #20]
 800fb5c:	7a5b      	ldrb	r3, [r3, #9]
 800fb5e:	2b11      	cmp	r3, #17
 800fb60:	d006      	beq.n	800fb70 <ip4_input+0x1b8>
 800fb62:	2b11      	cmp	r3, #17
 800fb64:	dc13      	bgt.n	800fb8e <ip4_input+0x1d6>
 800fb66:	2b01      	cmp	r3, #1
 800fb68:	d00c      	beq.n	800fb84 <ip4_input+0x1cc>
 800fb6a:	2b06      	cmp	r3, #6
 800fb6c:	d005      	beq.n	800fb7a <ip4_input+0x1c2>
 800fb6e:	e00e      	b.n	800fb8e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800fb70:	6839      	ldr	r1, [r7, #0]
 800fb72:	6878      	ldr	r0, [r7, #4]
 800fb74:	f7fe fb3a 	bl	800e1ec <udp_input>
        break;
 800fb78:	e026      	b.n	800fbc8 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800fb7a:	6839      	ldr	r1, [r7, #0]
 800fb7c:	6878      	ldr	r0, [r7, #4]
 800fb7e:	f7fa fb7b 	bl	800a278 <tcp_input>
        break;
 800fb82:	e021      	b.n	800fbc8 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800fb84:	6839      	ldr	r1, [r7, #0]
 800fb86:	6878      	ldr	r0, [r7, #4]
 800fb88:	f7ff fcee 	bl	800f568 <icmp_input>
        break;
 800fb8c:	e01c      	b.n	800fbc8 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800fb8e:	4b1a      	ldr	r3, [pc, #104]	; (800fbf8 <ip4_input+0x240>)
 800fb90:	695b      	ldr	r3, [r3, #20]
 800fb92:	6939      	ldr	r1, [r7, #16]
 800fb94:	4618      	mov	r0, r3
 800fb96:	f000 f90b 	bl	800fdb0 <ip4_addr_isbroadcast_u32>
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d10f      	bne.n	800fbc0 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fba0:	4b15      	ldr	r3, [pc, #84]	; (800fbf8 <ip4_input+0x240>)
 800fba2:	695b      	ldr	r3, [r3, #20]
 800fba4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800fba8:	2be0      	cmp	r3, #224	; 0xe0
 800fbaa:	d009      	beq.n	800fbc0 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800fbac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fbb0:	4619      	mov	r1, r3
 800fbb2:	6878      	ldr	r0, [r7, #4]
 800fbb4:	f7f8 fd25 	bl	8008602 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800fbb8:	2102      	movs	r1, #2
 800fbba:	6878      	ldr	r0, [r7, #4]
 800fbbc:	f7ff fdd8 	bl	800f770 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800fbc0:	6878      	ldr	r0, [r7, #4]
 800fbc2:	f7f8 fd31 	bl	8008628 <pbuf_free>
        break;
 800fbc6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800fbc8:	4b0b      	ldr	r3, [pc, #44]	; (800fbf8 <ip4_input+0x240>)
 800fbca:	2200      	movs	r2, #0
 800fbcc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800fbce:	4b0a      	ldr	r3, [pc, #40]	; (800fbf8 <ip4_input+0x240>)
 800fbd0:	2200      	movs	r2, #0
 800fbd2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800fbd4:	4b08      	ldr	r3, [pc, #32]	; (800fbf8 <ip4_input+0x240>)
 800fbd6:	2200      	movs	r2, #0
 800fbd8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800fbda:	4b07      	ldr	r3, [pc, #28]	; (800fbf8 <ip4_input+0x240>)
 800fbdc:	2200      	movs	r2, #0
 800fbde:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800fbe0:	4b05      	ldr	r3, [pc, #20]	; (800fbf8 <ip4_input+0x240>)
 800fbe2:	2200      	movs	r2, #0
 800fbe4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800fbe6:	4b04      	ldr	r3, [pc, #16]	; (800fbf8 <ip4_input+0x240>)
 800fbe8:	2200      	movs	r2, #0
 800fbea:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800fbec:	2300      	movs	r3, #0
}
 800fbee:	4618      	mov	r0, r3
 800fbf0:	3718      	adds	r7, #24
 800fbf2:	46bd      	mov	sp, r7
 800fbf4:	bd80      	pop	{r7, pc}
 800fbf6:	bf00      	nop
 800fbf8:	20004ff8 	.word	0x20004ff8
 800fbfc:	2000a71c 	.word	0x2000a71c

0800fc00 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800fc00:	b580      	push	{r7, lr}
 800fc02:	b08a      	sub	sp, #40	; 0x28
 800fc04:	af04      	add	r7, sp, #16
 800fc06:	60f8      	str	r0, [r7, #12]
 800fc08:	60b9      	str	r1, [r7, #8]
 800fc0a:	607a      	str	r2, [r7, #4]
 800fc0c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800fc0e:	68bb      	ldr	r3, [r7, #8]
 800fc10:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d009      	beq.n	800fc2c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800fc18:	68bb      	ldr	r3, [r7, #8]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d003      	beq.n	800fc26 <ip4_output_if+0x26>
 800fc1e:	68bb      	ldr	r3, [r7, #8]
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d102      	bne.n	800fc2c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800fc26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc28:	3304      	adds	r3, #4
 800fc2a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800fc2c:	78fa      	ldrb	r2, [r7, #3]
 800fc2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc30:	9302      	str	r3, [sp, #8]
 800fc32:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fc36:	9301      	str	r3, [sp, #4]
 800fc38:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fc3c:	9300      	str	r3, [sp, #0]
 800fc3e:	4613      	mov	r3, r2
 800fc40:	687a      	ldr	r2, [r7, #4]
 800fc42:	6979      	ldr	r1, [r7, #20]
 800fc44:	68f8      	ldr	r0, [r7, #12]
 800fc46:	f000 f805 	bl	800fc54 <ip4_output_if_src>
 800fc4a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	3718      	adds	r7, #24
 800fc50:	46bd      	mov	sp, r7
 800fc52:	bd80      	pop	{r7, pc}

0800fc54 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800fc54:	b580      	push	{r7, lr}
 800fc56:	b088      	sub	sp, #32
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	60f8      	str	r0, [r7, #12]
 800fc5c:	60b9      	str	r1, [r7, #8]
 800fc5e:	607a      	str	r2, [r7, #4]
 800fc60:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	7b9b      	ldrb	r3, [r3, #14]
 800fc66:	2b01      	cmp	r3, #1
 800fc68:	d006      	beq.n	800fc78 <ip4_output_if_src+0x24>
 800fc6a:	4b4b      	ldr	r3, [pc, #300]	; (800fd98 <ip4_output_if_src+0x144>)
 800fc6c:	f44f 7255 	mov.w	r2, #852	; 0x354
 800fc70:	494a      	ldr	r1, [pc, #296]	; (800fd9c <ip4_output_if_src+0x148>)
 800fc72:	484b      	ldr	r0, [pc, #300]	; (800fda0 <ip4_output_if_src+0x14c>)
 800fc74:	f001 fed0 	bl	8011a18 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d060      	beq.n	800fd40 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800fc7e:	2314      	movs	r3, #20
 800fc80:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800fc82:	2114      	movs	r1, #20
 800fc84:	68f8      	ldr	r0, [r7, #12]
 800fc86:	f7f8 fc39 	bl	80084fc <pbuf_add_header>
 800fc8a:	4603      	mov	r3, r0
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d002      	beq.n	800fc96 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800fc90:	f06f 0301 	mvn.w	r3, #1
 800fc94:	e07c      	b.n	800fd90 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	685b      	ldr	r3, [r3, #4]
 800fc9a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	895b      	ldrh	r3, [r3, #10]
 800fca0:	2b13      	cmp	r3, #19
 800fca2:	d806      	bhi.n	800fcb2 <ip4_output_if_src+0x5e>
 800fca4:	4b3c      	ldr	r3, [pc, #240]	; (800fd98 <ip4_output_if_src+0x144>)
 800fca6:	f44f 7262 	mov.w	r2, #904	; 0x388
 800fcaa:	493e      	ldr	r1, [pc, #248]	; (800fda4 <ip4_output_if_src+0x150>)
 800fcac:	483c      	ldr	r0, [pc, #240]	; (800fda0 <ip4_output_if_src+0x14c>)
 800fcae:	f001 feb3 	bl	8011a18 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800fcb2:	69fb      	ldr	r3, [r7, #28]
 800fcb4:	78fa      	ldrb	r2, [r7, #3]
 800fcb6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800fcb8:	69fb      	ldr	r3, [r7, #28]
 800fcba:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800fcbe:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	681a      	ldr	r2, [r3, #0]
 800fcc4:	69fb      	ldr	r3, [r7, #28]
 800fcc6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800fcc8:	8b7b      	ldrh	r3, [r7, #26]
 800fcca:	089b      	lsrs	r3, r3, #2
 800fccc:	b29b      	uxth	r3, r3
 800fcce:	b2db      	uxtb	r3, r3
 800fcd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fcd4:	b2da      	uxtb	r2, r3
 800fcd6:	69fb      	ldr	r3, [r7, #28]
 800fcd8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800fcda:	69fb      	ldr	r3, [r7, #28]
 800fcdc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800fce0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	891b      	ldrh	r3, [r3, #8]
 800fce6:	4618      	mov	r0, r3
 800fce8:	f7f7 f940 	bl	8006f6c <lwip_htons>
 800fcec:	4603      	mov	r3, r0
 800fcee:	461a      	mov	r2, r3
 800fcf0:	69fb      	ldr	r3, [r7, #28]
 800fcf2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800fcf4:	69fb      	ldr	r3, [r7, #28]
 800fcf6:	2200      	movs	r2, #0
 800fcf8:	719a      	strb	r2, [r3, #6]
 800fcfa:	2200      	movs	r2, #0
 800fcfc:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800fcfe:	4b2a      	ldr	r3, [pc, #168]	; (800fda8 <ip4_output_if_src+0x154>)
 800fd00:	881b      	ldrh	r3, [r3, #0]
 800fd02:	4618      	mov	r0, r3
 800fd04:	f7f7 f932 	bl	8006f6c <lwip_htons>
 800fd08:	4603      	mov	r3, r0
 800fd0a:	461a      	mov	r2, r3
 800fd0c:	69fb      	ldr	r3, [r7, #28]
 800fd0e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800fd10:	4b25      	ldr	r3, [pc, #148]	; (800fda8 <ip4_output_if_src+0x154>)
 800fd12:	881b      	ldrh	r3, [r3, #0]
 800fd14:	3301      	adds	r3, #1
 800fd16:	b29a      	uxth	r2, r3
 800fd18:	4b23      	ldr	r3, [pc, #140]	; (800fda8 <ip4_output_if_src+0x154>)
 800fd1a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800fd1c:	68bb      	ldr	r3, [r7, #8]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d104      	bne.n	800fd2c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800fd22:	4b22      	ldr	r3, [pc, #136]	; (800fdac <ip4_output_if_src+0x158>)
 800fd24:	681a      	ldr	r2, [r3, #0]
 800fd26:	69fb      	ldr	r3, [r7, #28]
 800fd28:	60da      	str	r2, [r3, #12]
 800fd2a:	e003      	b.n	800fd34 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800fd2c:	68bb      	ldr	r3, [r7, #8]
 800fd2e:	681a      	ldr	r2, [r3, #0]
 800fd30:	69fb      	ldr	r3, [r7, #28]
 800fd32:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800fd34:	69fb      	ldr	r3, [r7, #28]
 800fd36:	2200      	movs	r2, #0
 800fd38:	729a      	strb	r2, [r3, #10]
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	72da      	strb	r2, [r3, #11]
 800fd3e:	e00f      	b.n	800fd60 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	895b      	ldrh	r3, [r3, #10]
 800fd44:	2b13      	cmp	r3, #19
 800fd46:	d802      	bhi.n	800fd4e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800fd48:	f06f 0301 	mvn.w	r3, #1
 800fd4c:	e020      	b.n	800fd90 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	685b      	ldr	r3, [r3, #4]
 800fd52:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800fd54:	69fb      	ldr	r3, [r7, #28]
 800fd56:	691b      	ldr	r3, [r3, #16]
 800fd58:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800fd5a:	f107 0314 	add.w	r3, r7, #20
 800fd5e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800fd60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd62:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d00c      	beq.n	800fd82 <ip4_output_if_src+0x12e>
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	891a      	ldrh	r2, [r3, #8]
 800fd6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd6e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fd70:	429a      	cmp	r2, r3
 800fd72:	d906      	bls.n	800fd82 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800fd74:	687a      	ldr	r2, [r7, #4]
 800fd76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fd78:	68f8      	ldr	r0, [r7, #12]
 800fd7a:	f000 fd53 	bl	8010824 <ip4_frag>
 800fd7e:	4603      	mov	r3, r0
 800fd80:	e006      	b.n	800fd90 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800fd82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd84:	695b      	ldr	r3, [r3, #20]
 800fd86:	687a      	ldr	r2, [r7, #4]
 800fd88:	68f9      	ldr	r1, [r7, #12]
 800fd8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fd8c:	4798      	blx	r3
 800fd8e:	4603      	mov	r3, r0
}
 800fd90:	4618      	mov	r0, r3
 800fd92:	3720      	adds	r7, #32
 800fd94:	46bd      	mov	sp, r7
 800fd96:	bd80      	pop	{r7, pc}
 800fd98:	08016090 	.word	0x08016090
 800fd9c:	080160c4 	.word	0x080160c4
 800fda0:	080160d0 	.word	0x080160d0
 800fda4:	080160f8 	.word	0x080160f8
 800fda8:	2000a87a 	.word	0x2000a87a
 800fdac:	080164d8 	.word	0x080164d8

0800fdb0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800fdb0:	b480      	push	{r7}
 800fdb2:	b085      	sub	sp, #20
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	6078      	str	r0, [r7, #4]
 800fdb8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fdc4:	d002      	beq.n	800fdcc <ip4_addr_isbroadcast_u32+0x1c>
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d101      	bne.n	800fdd0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800fdcc:	2301      	movs	r3, #1
 800fdce:	e02a      	b.n	800fe26 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800fdd0:	683b      	ldr	r3, [r7, #0]
 800fdd2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fdd6:	f003 0302 	and.w	r3, r3, #2
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d101      	bne.n	800fde2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800fdde:	2300      	movs	r3, #0
 800fde0:	e021      	b.n	800fe26 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800fde2:	683b      	ldr	r3, [r7, #0]
 800fde4:	3304      	adds	r3, #4
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	687a      	ldr	r2, [r7, #4]
 800fdea:	429a      	cmp	r2, r3
 800fdec:	d101      	bne.n	800fdf2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800fdee:	2300      	movs	r3, #0
 800fdf0:	e019      	b.n	800fe26 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800fdf2:	68fa      	ldr	r2, [r7, #12]
 800fdf4:	683b      	ldr	r3, [r7, #0]
 800fdf6:	3304      	adds	r3, #4
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	405a      	eors	r2, r3
 800fdfc:	683b      	ldr	r3, [r7, #0]
 800fdfe:	3308      	adds	r3, #8
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	4013      	ands	r3, r2
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d10d      	bne.n	800fe24 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800fe08:	683b      	ldr	r3, [r7, #0]
 800fe0a:	3308      	adds	r3, #8
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	43da      	mvns	r2, r3
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800fe14:	683b      	ldr	r3, [r7, #0]
 800fe16:	3308      	adds	r3, #8
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800fe1c:	429a      	cmp	r2, r3
 800fe1e:	d101      	bne.n	800fe24 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800fe20:	2301      	movs	r3, #1
 800fe22:	e000      	b.n	800fe26 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800fe24:	2300      	movs	r3, #0
  }
}
 800fe26:	4618      	mov	r0, r3
 800fe28:	3714      	adds	r7, #20
 800fe2a:	46bd      	mov	sp, r7
 800fe2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe30:	4770      	bx	lr
	...

0800fe34 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b084      	sub	sp, #16
 800fe38:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800fe3e:	4b12      	ldr	r3, [pc, #72]	; (800fe88 <ip_reass_tmr+0x54>)
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800fe44:	e018      	b.n	800fe78 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	7fdb      	ldrb	r3, [r3, #31]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d00b      	beq.n	800fe66 <ip_reass_tmr+0x32>
      r->timer--;
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	7fdb      	ldrb	r3, [r3, #31]
 800fe52:	3b01      	subs	r3, #1
 800fe54:	b2da      	uxtb	r2, r3
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	60fb      	str	r3, [r7, #12]
 800fe64:	e008      	b.n	800fe78 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800fe70:	68b9      	ldr	r1, [r7, #8]
 800fe72:	6878      	ldr	r0, [r7, #4]
 800fe74:	f000 f80a 	bl	800fe8c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d1e3      	bne.n	800fe46 <ip_reass_tmr+0x12>
    }
  }
}
 800fe7e:	bf00      	nop
 800fe80:	bf00      	nop
 800fe82:	3710      	adds	r7, #16
 800fe84:	46bd      	mov	sp, r7
 800fe86:	bd80      	pop	{r7, pc}
 800fe88:	2000a87c 	.word	0x2000a87c

0800fe8c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	b088      	sub	sp, #32
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	6078      	str	r0, [r7, #4]
 800fe94:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800fe96:	2300      	movs	r3, #0
 800fe98:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800fe9a:	683a      	ldr	r2, [r7, #0]
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	429a      	cmp	r2, r3
 800fea0:	d105      	bne.n	800feae <ip_reass_free_complete_datagram+0x22>
 800fea2:	4b45      	ldr	r3, [pc, #276]	; (800ffb8 <ip_reass_free_complete_datagram+0x12c>)
 800fea4:	22ab      	movs	r2, #171	; 0xab
 800fea6:	4945      	ldr	r1, [pc, #276]	; (800ffbc <ip_reass_free_complete_datagram+0x130>)
 800fea8:	4845      	ldr	r0, [pc, #276]	; (800ffc0 <ip_reass_free_complete_datagram+0x134>)
 800feaa:	f001 fdb5 	bl	8011a18 <iprintf>
  if (prev != NULL) {
 800feae:	683b      	ldr	r3, [r7, #0]
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d00a      	beq.n	800feca <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800feb4:	683b      	ldr	r3, [r7, #0]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	687a      	ldr	r2, [r7, #4]
 800feba:	429a      	cmp	r2, r3
 800febc:	d005      	beq.n	800feca <ip_reass_free_complete_datagram+0x3e>
 800febe:	4b3e      	ldr	r3, [pc, #248]	; (800ffb8 <ip_reass_free_complete_datagram+0x12c>)
 800fec0:	22ad      	movs	r2, #173	; 0xad
 800fec2:	4940      	ldr	r1, [pc, #256]	; (800ffc4 <ip_reass_free_complete_datagram+0x138>)
 800fec4:	483e      	ldr	r0, [pc, #248]	; (800ffc0 <ip_reass_free_complete_datagram+0x134>)
 800fec6:	f001 fda7 	bl	8011a18 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	685b      	ldr	r3, [r3, #4]
 800fece:	685b      	ldr	r3, [r3, #4]
 800fed0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800fed2:	697b      	ldr	r3, [r7, #20]
 800fed4:	889b      	ldrh	r3, [r3, #4]
 800fed6:	b29b      	uxth	r3, r3
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d12a      	bne.n	800ff32 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	685b      	ldr	r3, [r3, #4]
 800fee0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800fee2:	697b      	ldr	r3, [r7, #20]
 800fee4:	681a      	ldr	r2, [r3, #0]
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800feea:	69bb      	ldr	r3, [r7, #24]
 800feec:	6858      	ldr	r0, [r3, #4]
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	3308      	adds	r3, #8
 800fef2:	2214      	movs	r2, #20
 800fef4:	4619      	mov	r1, r3
 800fef6:	f001 fef0 	bl	8011cda <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800fefa:	2101      	movs	r1, #1
 800fefc:	69b8      	ldr	r0, [r7, #24]
 800fefe:	f7ff fc47 	bl	800f790 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800ff02:	69b8      	ldr	r0, [r7, #24]
 800ff04:	f7f8 fc18 	bl	8008738 <pbuf_clen>
 800ff08:	4603      	mov	r3, r0
 800ff0a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ff0c:	8bfa      	ldrh	r2, [r7, #30]
 800ff0e:	8a7b      	ldrh	r3, [r7, #18]
 800ff10:	4413      	add	r3, r2
 800ff12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ff16:	db05      	blt.n	800ff24 <ip_reass_free_complete_datagram+0x98>
 800ff18:	4b27      	ldr	r3, [pc, #156]	; (800ffb8 <ip_reass_free_complete_datagram+0x12c>)
 800ff1a:	22bc      	movs	r2, #188	; 0xbc
 800ff1c:	492a      	ldr	r1, [pc, #168]	; (800ffc8 <ip_reass_free_complete_datagram+0x13c>)
 800ff1e:	4828      	ldr	r0, [pc, #160]	; (800ffc0 <ip_reass_free_complete_datagram+0x134>)
 800ff20:	f001 fd7a 	bl	8011a18 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800ff24:	8bfa      	ldrh	r2, [r7, #30]
 800ff26:	8a7b      	ldrh	r3, [r7, #18]
 800ff28:	4413      	add	r3, r2
 800ff2a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800ff2c:	69b8      	ldr	r0, [r7, #24]
 800ff2e:	f7f8 fb7b 	bl	8008628 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	685b      	ldr	r3, [r3, #4]
 800ff36:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800ff38:	e01f      	b.n	800ff7a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800ff3a:	69bb      	ldr	r3, [r7, #24]
 800ff3c:	685b      	ldr	r3, [r3, #4]
 800ff3e:	617b      	str	r3, [r7, #20]
    pcur = p;
 800ff40:	69bb      	ldr	r3, [r7, #24]
 800ff42:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800ff44:	697b      	ldr	r3, [r7, #20]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800ff4a:	68f8      	ldr	r0, [r7, #12]
 800ff4c:	f7f8 fbf4 	bl	8008738 <pbuf_clen>
 800ff50:	4603      	mov	r3, r0
 800ff52:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ff54:	8bfa      	ldrh	r2, [r7, #30]
 800ff56:	8a7b      	ldrh	r3, [r7, #18]
 800ff58:	4413      	add	r3, r2
 800ff5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ff5e:	db05      	blt.n	800ff6c <ip_reass_free_complete_datagram+0xe0>
 800ff60:	4b15      	ldr	r3, [pc, #84]	; (800ffb8 <ip_reass_free_complete_datagram+0x12c>)
 800ff62:	22cc      	movs	r2, #204	; 0xcc
 800ff64:	4918      	ldr	r1, [pc, #96]	; (800ffc8 <ip_reass_free_complete_datagram+0x13c>)
 800ff66:	4816      	ldr	r0, [pc, #88]	; (800ffc0 <ip_reass_free_complete_datagram+0x134>)
 800ff68:	f001 fd56 	bl	8011a18 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800ff6c:	8bfa      	ldrh	r2, [r7, #30]
 800ff6e:	8a7b      	ldrh	r3, [r7, #18]
 800ff70:	4413      	add	r3, r2
 800ff72:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800ff74:	68f8      	ldr	r0, [r7, #12]
 800ff76:	f7f8 fb57 	bl	8008628 <pbuf_free>
  while (p != NULL) {
 800ff7a:	69bb      	ldr	r3, [r7, #24]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d1dc      	bne.n	800ff3a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800ff80:	6839      	ldr	r1, [r7, #0]
 800ff82:	6878      	ldr	r0, [r7, #4]
 800ff84:	f000 f8c2 	bl	801010c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800ff88:	4b10      	ldr	r3, [pc, #64]	; (800ffcc <ip_reass_free_complete_datagram+0x140>)
 800ff8a:	881b      	ldrh	r3, [r3, #0]
 800ff8c:	8bfa      	ldrh	r2, [r7, #30]
 800ff8e:	429a      	cmp	r2, r3
 800ff90:	d905      	bls.n	800ff9e <ip_reass_free_complete_datagram+0x112>
 800ff92:	4b09      	ldr	r3, [pc, #36]	; (800ffb8 <ip_reass_free_complete_datagram+0x12c>)
 800ff94:	22d2      	movs	r2, #210	; 0xd2
 800ff96:	490e      	ldr	r1, [pc, #56]	; (800ffd0 <ip_reass_free_complete_datagram+0x144>)
 800ff98:	4809      	ldr	r0, [pc, #36]	; (800ffc0 <ip_reass_free_complete_datagram+0x134>)
 800ff9a:	f001 fd3d 	bl	8011a18 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800ff9e:	4b0b      	ldr	r3, [pc, #44]	; (800ffcc <ip_reass_free_complete_datagram+0x140>)
 800ffa0:	881a      	ldrh	r2, [r3, #0]
 800ffa2:	8bfb      	ldrh	r3, [r7, #30]
 800ffa4:	1ad3      	subs	r3, r2, r3
 800ffa6:	b29a      	uxth	r2, r3
 800ffa8:	4b08      	ldr	r3, [pc, #32]	; (800ffcc <ip_reass_free_complete_datagram+0x140>)
 800ffaa:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800ffac:	8bfb      	ldrh	r3, [r7, #30]
}
 800ffae:	4618      	mov	r0, r3
 800ffb0:	3720      	adds	r7, #32
 800ffb2:	46bd      	mov	sp, r7
 800ffb4:	bd80      	pop	{r7, pc}
 800ffb6:	bf00      	nop
 800ffb8:	08016128 	.word	0x08016128
 800ffbc:	08016164 	.word	0x08016164
 800ffc0:	08016170 	.word	0x08016170
 800ffc4:	08016198 	.word	0x08016198
 800ffc8:	080161ac 	.word	0x080161ac
 800ffcc:	2000a880 	.word	0x2000a880
 800ffd0:	080161cc 	.word	0x080161cc

0800ffd4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	b08a      	sub	sp, #40	; 0x28
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	6078      	str	r0, [r7, #4]
 800ffdc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800ffde:	2300      	movs	r3, #0
 800ffe0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800ffe2:	2300      	movs	r3, #0
 800ffe4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800ffe6:	2300      	movs	r3, #0
 800ffe8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800ffea:	2300      	movs	r3, #0
 800ffec:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800ffee:	2300      	movs	r3, #0
 800fff0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800fff2:	4b28      	ldr	r3, [pc, #160]	; (8010094 <ip_reass_remove_oldest_datagram+0xc0>)
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800fff8:	e030      	b.n	801005c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800fffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fffc:	695a      	ldr	r2, [r3, #20]
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	68db      	ldr	r3, [r3, #12]
 8010002:	429a      	cmp	r2, r3
 8010004:	d10c      	bne.n	8010020 <ip_reass_remove_oldest_datagram+0x4c>
 8010006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010008:	699a      	ldr	r2, [r3, #24]
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	691b      	ldr	r3, [r3, #16]
 801000e:	429a      	cmp	r2, r3
 8010010:	d106      	bne.n	8010020 <ip_reass_remove_oldest_datagram+0x4c>
 8010012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010014:	899a      	ldrh	r2, [r3, #12]
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	889b      	ldrh	r3, [r3, #4]
 801001a:	b29b      	uxth	r3, r3
 801001c:	429a      	cmp	r2, r3
 801001e:	d014      	beq.n	801004a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8010020:	693b      	ldr	r3, [r7, #16]
 8010022:	3301      	adds	r3, #1
 8010024:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8010026:	6a3b      	ldr	r3, [r7, #32]
 8010028:	2b00      	cmp	r3, #0
 801002a:	d104      	bne.n	8010036 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801002c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801002e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8010030:	69fb      	ldr	r3, [r7, #28]
 8010032:	61bb      	str	r3, [r7, #24]
 8010034:	e009      	b.n	801004a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8010036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010038:	7fda      	ldrb	r2, [r3, #31]
 801003a:	6a3b      	ldr	r3, [r7, #32]
 801003c:	7fdb      	ldrb	r3, [r3, #31]
 801003e:	429a      	cmp	r2, r3
 8010040:	d803      	bhi.n	801004a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8010042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010044:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8010046:	69fb      	ldr	r3, [r7, #28]
 8010048:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801004a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	2b00      	cmp	r3, #0
 8010050:	d001      	beq.n	8010056 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8010052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010054:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8010056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801005c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801005e:	2b00      	cmp	r3, #0
 8010060:	d1cb      	bne.n	800fffa <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8010062:	6a3b      	ldr	r3, [r7, #32]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d008      	beq.n	801007a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8010068:	69b9      	ldr	r1, [r7, #24]
 801006a:	6a38      	ldr	r0, [r7, #32]
 801006c:	f7ff ff0e 	bl	800fe8c <ip_reass_free_complete_datagram>
 8010070:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8010072:	697a      	ldr	r2, [r7, #20]
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	4413      	add	r3, r2
 8010078:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801007a:	697a      	ldr	r2, [r7, #20]
 801007c:	683b      	ldr	r3, [r7, #0]
 801007e:	429a      	cmp	r2, r3
 8010080:	da02      	bge.n	8010088 <ip_reass_remove_oldest_datagram+0xb4>
 8010082:	693b      	ldr	r3, [r7, #16]
 8010084:	2b01      	cmp	r3, #1
 8010086:	dcac      	bgt.n	800ffe2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8010088:	697b      	ldr	r3, [r7, #20]
}
 801008a:	4618      	mov	r0, r3
 801008c:	3728      	adds	r7, #40	; 0x28
 801008e:	46bd      	mov	sp, r7
 8010090:	bd80      	pop	{r7, pc}
 8010092:	bf00      	nop
 8010094:	2000a87c 	.word	0x2000a87c

08010098 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8010098:	b580      	push	{r7, lr}
 801009a:	b084      	sub	sp, #16
 801009c:	af00      	add	r7, sp, #0
 801009e:	6078      	str	r0, [r7, #4]
 80100a0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80100a2:	2004      	movs	r0, #4
 80100a4:	f7f7 fbda 	bl	800785c <memp_malloc>
 80100a8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d110      	bne.n	80100d2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80100b0:	6839      	ldr	r1, [r7, #0]
 80100b2:	6878      	ldr	r0, [r7, #4]
 80100b4:	f7ff ff8e 	bl	800ffd4 <ip_reass_remove_oldest_datagram>
 80100b8:	4602      	mov	r2, r0
 80100ba:	683b      	ldr	r3, [r7, #0]
 80100bc:	4293      	cmp	r3, r2
 80100be:	dc03      	bgt.n	80100c8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80100c0:	2004      	movs	r0, #4
 80100c2:	f7f7 fbcb 	bl	800785c <memp_malloc>
 80100c6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d101      	bne.n	80100d2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80100ce:	2300      	movs	r3, #0
 80100d0:	e016      	b.n	8010100 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80100d2:	2220      	movs	r2, #32
 80100d4:	2100      	movs	r1, #0
 80100d6:	68f8      	ldr	r0, [r7, #12]
 80100d8:	f001 fd03 	bl	8011ae2 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	220f      	movs	r2, #15
 80100e0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80100e2:	4b09      	ldr	r3, [pc, #36]	; (8010108 <ip_reass_enqueue_new_datagram+0x70>)
 80100e4:	681a      	ldr	r2, [r3, #0]
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80100ea:	4a07      	ldr	r2, [pc, #28]	; (8010108 <ip_reass_enqueue_new_datagram+0x70>)
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	3308      	adds	r3, #8
 80100f4:	2214      	movs	r2, #20
 80100f6:	6879      	ldr	r1, [r7, #4]
 80100f8:	4618      	mov	r0, r3
 80100fa:	f001 fdee 	bl	8011cda <memcpy>
  return ipr;
 80100fe:	68fb      	ldr	r3, [r7, #12]
}
 8010100:	4618      	mov	r0, r3
 8010102:	3710      	adds	r7, #16
 8010104:	46bd      	mov	sp, r7
 8010106:	bd80      	pop	{r7, pc}
 8010108:	2000a87c 	.word	0x2000a87c

0801010c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801010c:	b580      	push	{r7, lr}
 801010e:	b082      	sub	sp, #8
 8010110:	af00      	add	r7, sp, #0
 8010112:	6078      	str	r0, [r7, #4]
 8010114:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8010116:	4b10      	ldr	r3, [pc, #64]	; (8010158 <ip_reass_dequeue_datagram+0x4c>)
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	687a      	ldr	r2, [r7, #4]
 801011c:	429a      	cmp	r2, r3
 801011e:	d104      	bne.n	801012a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	4a0c      	ldr	r2, [pc, #48]	; (8010158 <ip_reass_dequeue_datagram+0x4c>)
 8010126:	6013      	str	r3, [r2, #0]
 8010128:	e00d      	b.n	8010146 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801012a:	683b      	ldr	r3, [r7, #0]
 801012c:	2b00      	cmp	r3, #0
 801012e:	d106      	bne.n	801013e <ip_reass_dequeue_datagram+0x32>
 8010130:	4b0a      	ldr	r3, [pc, #40]	; (801015c <ip_reass_dequeue_datagram+0x50>)
 8010132:	f240 1245 	movw	r2, #325	; 0x145
 8010136:	490a      	ldr	r1, [pc, #40]	; (8010160 <ip_reass_dequeue_datagram+0x54>)
 8010138:	480a      	ldr	r0, [pc, #40]	; (8010164 <ip_reass_dequeue_datagram+0x58>)
 801013a:	f001 fc6d 	bl	8011a18 <iprintf>
    prev->next = ipr->next;
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	681a      	ldr	r2, [r3, #0]
 8010142:	683b      	ldr	r3, [r7, #0]
 8010144:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8010146:	6879      	ldr	r1, [r7, #4]
 8010148:	2004      	movs	r0, #4
 801014a:	f7f7 fbf7 	bl	800793c <memp_free>
}
 801014e:	bf00      	nop
 8010150:	3708      	adds	r7, #8
 8010152:	46bd      	mov	sp, r7
 8010154:	bd80      	pop	{r7, pc}
 8010156:	bf00      	nop
 8010158:	2000a87c 	.word	0x2000a87c
 801015c:	08016128 	.word	0x08016128
 8010160:	080161f0 	.word	0x080161f0
 8010164:	08016170 	.word	0x08016170

08010168 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8010168:	b580      	push	{r7, lr}
 801016a:	b08c      	sub	sp, #48	; 0x30
 801016c:	af00      	add	r7, sp, #0
 801016e:	60f8      	str	r0, [r7, #12]
 8010170:	60b9      	str	r1, [r7, #8]
 8010172:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8010174:	2300      	movs	r3, #0
 8010176:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8010178:	2301      	movs	r3, #1
 801017a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801017c:	68bb      	ldr	r3, [r7, #8]
 801017e:	685b      	ldr	r3, [r3, #4]
 8010180:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010182:	69fb      	ldr	r3, [r7, #28]
 8010184:	885b      	ldrh	r3, [r3, #2]
 8010186:	b29b      	uxth	r3, r3
 8010188:	4618      	mov	r0, r3
 801018a:	f7f6 feef 	bl	8006f6c <lwip_htons>
 801018e:	4603      	mov	r3, r0
 8010190:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8010192:	69fb      	ldr	r3, [r7, #28]
 8010194:	781b      	ldrb	r3, [r3, #0]
 8010196:	f003 030f 	and.w	r3, r3, #15
 801019a:	b2db      	uxtb	r3, r3
 801019c:	009b      	lsls	r3, r3, #2
 801019e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80101a0:	7e7b      	ldrb	r3, [r7, #25]
 80101a2:	b29b      	uxth	r3, r3
 80101a4:	8b7a      	ldrh	r2, [r7, #26]
 80101a6:	429a      	cmp	r2, r3
 80101a8:	d202      	bcs.n	80101b0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80101aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80101ae:	e135      	b.n	801041c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80101b0:	7e7b      	ldrb	r3, [r7, #25]
 80101b2:	b29b      	uxth	r3, r3
 80101b4:	8b7a      	ldrh	r2, [r7, #26]
 80101b6:	1ad3      	subs	r3, r2, r3
 80101b8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80101ba:	69fb      	ldr	r3, [r7, #28]
 80101bc:	88db      	ldrh	r3, [r3, #6]
 80101be:	b29b      	uxth	r3, r3
 80101c0:	4618      	mov	r0, r3
 80101c2:	f7f6 fed3 	bl	8006f6c <lwip_htons>
 80101c6:	4603      	mov	r3, r0
 80101c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80101cc:	b29b      	uxth	r3, r3
 80101ce:	00db      	lsls	r3, r3, #3
 80101d0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80101d2:	68bb      	ldr	r3, [r7, #8]
 80101d4:	685b      	ldr	r3, [r3, #4]
 80101d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80101d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101da:	2200      	movs	r2, #0
 80101dc:	701a      	strb	r2, [r3, #0]
 80101de:	2200      	movs	r2, #0
 80101e0:	705a      	strb	r2, [r3, #1]
 80101e2:	2200      	movs	r2, #0
 80101e4:	709a      	strb	r2, [r3, #2]
 80101e6:	2200      	movs	r2, #0
 80101e8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80101ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101ec:	8afa      	ldrh	r2, [r7, #22]
 80101ee:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80101f0:	8afa      	ldrh	r2, [r7, #22]
 80101f2:	8b7b      	ldrh	r3, [r7, #26]
 80101f4:	4413      	add	r3, r2
 80101f6:	b29a      	uxth	r2, r3
 80101f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101fa:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80101fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101fe:	88db      	ldrh	r3, [r3, #6]
 8010200:	b29b      	uxth	r3, r3
 8010202:	8afa      	ldrh	r2, [r7, #22]
 8010204:	429a      	cmp	r2, r3
 8010206:	d902      	bls.n	801020e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010208:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801020c:	e106      	b.n	801041c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	685b      	ldr	r3, [r3, #4]
 8010212:	627b      	str	r3, [r7, #36]	; 0x24
 8010214:	e068      	b.n	80102e8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8010216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010218:	685b      	ldr	r3, [r3, #4]
 801021a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801021c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801021e:	889b      	ldrh	r3, [r3, #4]
 8010220:	b29a      	uxth	r2, r3
 8010222:	693b      	ldr	r3, [r7, #16]
 8010224:	889b      	ldrh	r3, [r3, #4]
 8010226:	b29b      	uxth	r3, r3
 8010228:	429a      	cmp	r2, r3
 801022a:	d235      	bcs.n	8010298 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801022c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801022e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010230:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8010232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010234:	2b00      	cmp	r3, #0
 8010236:	d020      	beq.n	801027a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8010238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801023a:	889b      	ldrh	r3, [r3, #4]
 801023c:	b29a      	uxth	r2, r3
 801023e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010240:	88db      	ldrh	r3, [r3, #6]
 8010242:	b29b      	uxth	r3, r3
 8010244:	429a      	cmp	r2, r3
 8010246:	d307      	bcc.n	8010258 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8010248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801024a:	88db      	ldrh	r3, [r3, #6]
 801024c:	b29a      	uxth	r2, r3
 801024e:	693b      	ldr	r3, [r7, #16]
 8010250:	889b      	ldrh	r3, [r3, #4]
 8010252:	b29b      	uxth	r3, r3
 8010254:	429a      	cmp	r2, r3
 8010256:	d902      	bls.n	801025e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010258:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801025c:	e0de      	b.n	801041c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801025e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010260:	68ba      	ldr	r2, [r7, #8]
 8010262:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8010264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010266:	88db      	ldrh	r3, [r3, #6]
 8010268:	b29a      	uxth	r2, r3
 801026a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801026c:	889b      	ldrh	r3, [r3, #4]
 801026e:	b29b      	uxth	r3, r3
 8010270:	429a      	cmp	r2, r3
 8010272:	d03d      	beq.n	80102f0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8010274:	2300      	movs	r3, #0
 8010276:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8010278:	e03a      	b.n	80102f0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801027a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801027c:	88db      	ldrh	r3, [r3, #6]
 801027e:	b29a      	uxth	r2, r3
 8010280:	693b      	ldr	r3, [r7, #16]
 8010282:	889b      	ldrh	r3, [r3, #4]
 8010284:	b29b      	uxth	r3, r3
 8010286:	429a      	cmp	r2, r3
 8010288:	d902      	bls.n	8010290 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801028a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801028e:	e0c5      	b.n	801041c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	68ba      	ldr	r2, [r7, #8]
 8010294:	605a      	str	r2, [r3, #4]
      break;
 8010296:	e02b      	b.n	80102f0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8010298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801029a:	889b      	ldrh	r3, [r3, #4]
 801029c:	b29a      	uxth	r2, r3
 801029e:	693b      	ldr	r3, [r7, #16]
 80102a0:	889b      	ldrh	r3, [r3, #4]
 80102a2:	b29b      	uxth	r3, r3
 80102a4:	429a      	cmp	r2, r3
 80102a6:	d102      	bne.n	80102ae <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80102a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80102ac:	e0b6      	b.n	801041c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80102ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102b0:	889b      	ldrh	r3, [r3, #4]
 80102b2:	b29a      	uxth	r2, r3
 80102b4:	693b      	ldr	r3, [r7, #16]
 80102b6:	88db      	ldrh	r3, [r3, #6]
 80102b8:	b29b      	uxth	r3, r3
 80102ba:	429a      	cmp	r2, r3
 80102bc:	d202      	bcs.n	80102c4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80102be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80102c2:	e0ab      	b.n	801041c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80102c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d009      	beq.n	80102de <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80102ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102cc:	88db      	ldrh	r3, [r3, #6]
 80102ce:	b29a      	uxth	r2, r3
 80102d0:	693b      	ldr	r3, [r7, #16]
 80102d2:	889b      	ldrh	r3, [r3, #4]
 80102d4:	b29b      	uxth	r3, r3
 80102d6:	429a      	cmp	r2, r3
 80102d8:	d001      	beq.n	80102de <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80102da:	2300      	movs	r3, #0
 80102dc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80102de:	693b      	ldr	r3, [r7, #16]
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80102e4:	693b      	ldr	r3, [r7, #16]
 80102e6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80102e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d193      	bne.n	8010216 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80102ee:	e000      	b.n	80102f2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80102f0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80102f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d12d      	bne.n	8010354 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80102f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d01c      	beq.n	8010338 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80102fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010300:	88db      	ldrh	r3, [r3, #6]
 8010302:	b29a      	uxth	r2, r3
 8010304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010306:	889b      	ldrh	r3, [r3, #4]
 8010308:	b29b      	uxth	r3, r3
 801030a:	429a      	cmp	r2, r3
 801030c:	d906      	bls.n	801031c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801030e:	4b45      	ldr	r3, [pc, #276]	; (8010424 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010310:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8010314:	4944      	ldr	r1, [pc, #272]	; (8010428 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8010316:	4845      	ldr	r0, [pc, #276]	; (801042c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010318:	f001 fb7e 	bl	8011a18 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801031c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801031e:	68ba      	ldr	r2, [r7, #8]
 8010320:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8010322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010324:	88db      	ldrh	r3, [r3, #6]
 8010326:	b29a      	uxth	r2, r3
 8010328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801032a:	889b      	ldrh	r3, [r3, #4]
 801032c:	b29b      	uxth	r3, r3
 801032e:	429a      	cmp	r2, r3
 8010330:	d010      	beq.n	8010354 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8010332:	2300      	movs	r3, #0
 8010334:	623b      	str	r3, [r7, #32]
 8010336:	e00d      	b.n	8010354 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	685b      	ldr	r3, [r3, #4]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d006      	beq.n	801034e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8010340:	4b38      	ldr	r3, [pc, #224]	; (8010424 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010342:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8010346:	493a      	ldr	r1, [pc, #232]	; (8010430 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8010348:	4838      	ldr	r0, [pc, #224]	; (801042c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801034a:	f001 fb65 	bl	8011a18 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	68ba      	ldr	r2, [r7, #8]
 8010352:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d105      	bne.n	8010366 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	7f9b      	ldrb	r3, [r3, #30]
 801035e:	f003 0301 	and.w	r3, r3, #1
 8010362:	2b00      	cmp	r3, #0
 8010364:	d059      	beq.n	801041a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8010366:	6a3b      	ldr	r3, [r7, #32]
 8010368:	2b00      	cmp	r3, #0
 801036a:	d04f      	beq.n	801040c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	685b      	ldr	r3, [r3, #4]
 8010370:	2b00      	cmp	r3, #0
 8010372:	d006      	beq.n	8010382 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	685b      	ldr	r3, [r3, #4]
 8010378:	685b      	ldr	r3, [r3, #4]
 801037a:	889b      	ldrh	r3, [r3, #4]
 801037c:	b29b      	uxth	r3, r3
 801037e:	2b00      	cmp	r3, #0
 8010380:	d002      	beq.n	8010388 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8010382:	2300      	movs	r3, #0
 8010384:	623b      	str	r3, [r7, #32]
 8010386:	e041      	b.n	801040c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8010388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801038a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801038c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8010392:	e012      	b.n	80103ba <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8010394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010396:	685b      	ldr	r3, [r3, #4]
 8010398:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801039a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801039c:	88db      	ldrh	r3, [r3, #6]
 801039e:	b29a      	uxth	r2, r3
 80103a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103a2:	889b      	ldrh	r3, [r3, #4]
 80103a4:	b29b      	uxth	r3, r3
 80103a6:	429a      	cmp	r2, r3
 80103a8:	d002      	beq.n	80103b0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80103aa:	2300      	movs	r3, #0
 80103ac:	623b      	str	r3, [r7, #32]
            break;
 80103ae:	e007      	b.n	80103c0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80103b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103b2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80103b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80103ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d1e9      	bne.n	8010394 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80103c0:	6a3b      	ldr	r3, [r7, #32]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d022      	beq.n	801040c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	685b      	ldr	r3, [r3, #4]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d106      	bne.n	80103dc <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80103ce:	4b15      	ldr	r3, [pc, #84]	; (8010424 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80103d0:	f240 12df 	movw	r2, #479	; 0x1df
 80103d4:	4917      	ldr	r1, [pc, #92]	; (8010434 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80103d6:	4815      	ldr	r0, [pc, #84]	; (801042c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80103d8:	f001 fb1e 	bl	8011a18 <iprintf>
          LWIP_ASSERT("sanity check",
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	685b      	ldr	r3, [r3, #4]
 80103e0:	685b      	ldr	r3, [r3, #4]
 80103e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80103e4:	429a      	cmp	r2, r3
 80103e6:	d106      	bne.n	80103f6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80103e8:	4b0e      	ldr	r3, [pc, #56]	; (8010424 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80103ea:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80103ee:	4911      	ldr	r1, [pc, #68]	; (8010434 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80103f0:	480e      	ldr	r0, [pc, #56]	; (801042c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80103f2:	f001 fb11 	bl	8011a18 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80103f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d006      	beq.n	801040c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80103fe:	4b09      	ldr	r3, [pc, #36]	; (8010424 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010400:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8010404:	490c      	ldr	r1, [pc, #48]	; (8010438 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8010406:	4809      	ldr	r0, [pc, #36]	; (801042c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010408:	f001 fb06 	bl	8011a18 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801040c:	6a3b      	ldr	r3, [r7, #32]
 801040e:	2b00      	cmp	r3, #0
 8010410:	bf14      	ite	ne
 8010412:	2301      	movne	r3, #1
 8010414:	2300      	moveq	r3, #0
 8010416:	b2db      	uxtb	r3, r3
 8010418:	e000      	b.n	801041c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801041a:	2300      	movs	r3, #0
}
 801041c:	4618      	mov	r0, r3
 801041e:	3730      	adds	r7, #48	; 0x30
 8010420:	46bd      	mov	sp, r7
 8010422:	bd80      	pop	{r7, pc}
 8010424:	08016128 	.word	0x08016128
 8010428:	0801620c 	.word	0x0801620c
 801042c:	08016170 	.word	0x08016170
 8010430:	0801622c 	.word	0x0801622c
 8010434:	08016264 	.word	0x08016264
 8010438:	08016274 	.word	0x08016274

0801043c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801043c:	b580      	push	{r7, lr}
 801043e:	b08e      	sub	sp, #56	; 0x38
 8010440:	af00      	add	r7, sp, #0
 8010442:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	685b      	ldr	r3, [r3, #4]
 8010448:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801044a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801044c:	781b      	ldrb	r3, [r3, #0]
 801044e:	f003 030f 	and.w	r3, r3, #15
 8010452:	b2db      	uxtb	r3, r3
 8010454:	009b      	lsls	r3, r3, #2
 8010456:	b2db      	uxtb	r3, r3
 8010458:	2b14      	cmp	r3, #20
 801045a:	f040 8171 	bne.w	8010740 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801045e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010460:	88db      	ldrh	r3, [r3, #6]
 8010462:	b29b      	uxth	r3, r3
 8010464:	4618      	mov	r0, r3
 8010466:	f7f6 fd81 	bl	8006f6c <lwip_htons>
 801046a:	4603      	mov	r3, r0
 801046c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010470:	b29b      	uxth	r3, r3
 8010472:	00db      	lsls	r3, r3, #3
 8010474:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010478:	885b      	ldrh	r3, [r3, #2]
 801047a:	b29b      	uxth	r3, r3
 801047c:	4618      	mov	r0, r3
 801047e:	f7f6 fd75 	bl	8006f6c <lwip_htons>
 8010482:	4603      	mov	r3, r0
 8010484:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8010486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010488:	781b      	ldrb	r3, [r3, #0]
 801048a:	f003 030f 	and.w	r3, r3, #15
 801048e:	b2db      	uxtb	r3, r3
 8010490:	009b      	lsls	r3, r3, #2
 8010492:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8010496:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801049a:	b29b      	uxth	r3, r3
 801049c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801049e:	429a      	cmp	r2, r3
 80104a0:	f0c0 8150 	bcc.w	8010744 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80104a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80104a8:	b29b      	uxth	r3, r3
 80104aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80104ac:	1ad3      	subs	r3, r2, r3
 80104ae:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80104b0:	6878      	ldr	r0, [r7, #4]
 80104b2:	f7f8 f941 	bl	8008738 <pbuf_clen>
 80104b6:	4603      	mov	r3, r0
 80104b8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80104ba:	4b8c      	ldr	r3, [pc, #560]	; (80106ec <ip4_reass+0x2b0>)
 80104bc:	881b      	ldrh	r3, [r3, #0]
 80104be:	461a      	mov	r2, r3
 80104c0:	8c3b      	ldrh	r3, [r7, #32]
 80104c2:	4413      	add	r3, r2
 80104c4:	2b0a      	cmp	r3, #10
 80104c6:	dd10      	ble.n	80104ea <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80104c8:	8c3b      	ldrh	r3, [r7, #32]
 80104ca:	4619      	mov	r1, r3
 80104cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80104ce:	f7ff fd81 	bl	800ffd4 <ip_reass_remove_oldest_datagram>
 80104d2:	4603      	mov	r3, r0
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	f000 8137 	beq.w	8010748 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80104da:	4b84      	ldr	r3, [pc, #528]	; (80106ec <ip4_reass+0x2b0>)
 80104dc:	881b      	ldrh	r3, [r3, #0]
 80104de:	461a      	mov	r2, r3
 80104e0:	8c3b      	ldrh	r3, [r7, #32]
 80104e2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80104e4:	2b0a      	cmp	r3, #10
 80104e6:	f300 812f 	bgt.w	8010748 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80104ea:	4b81      	ldr	r3, [pc, #516]	; (80106f0 <ip4_reass+0x2b4>)
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	633b      	str	r3, [r7, #48]	; 0x30
 80104f0:	e015      	b.n	801051e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80104f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104f4:	695a      	ldr	r2, [r3, #20]
 80104f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104f8:	68db      	ldr	r3, [r3, #12]
 80104fa:	429a      	cmp	r2, r3
 80104fc:	d10c      	bne.n	8010518 <ip4_reass+0xdc>
 80104fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010500:	699a      	ldr	r2, [r3, #24]
 8010502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010504:	691b      	ldr	r3, [r3, #16]
 8010506:	429a      	cmp	r2, r3
 8010508:	d106      	bne.n	8010518 <ip4_reass+0xdc>
 801050a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801050c:	899a      	ldrh	r2, [r3, #12]
 801050e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010510:	889b      	ldrh	r3, [r3, #4]
 8010512:	b29b      	uxth	r3, r3
 8010514:	429a      	cmp	r2, r3
 8010516:	d006      	beq.n	8010526 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	633b      	str	r3, [r7, #48]	; 0x30
 801051e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010520:	2b00      	cmp	r3, #0
 8010522:	d1e6      	bne.n	80104f2 <ip4_reass+0xb6>
 8010524:	e000      	b.n	8010528 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8010526:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8010528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801052a:	2b00      	cmp	r3, #0
 801052c:	d109      	bne.n	8010542 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801052e:	8c3b      	ldrh	r3, [r7, #32]
 8010530:	4619      	mov	r1, r3
 8010532:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010534:	f7ff fdb0 	bl	8010098 <ip_reass_enqueue_new_datagram>
 8010538:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801053a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801053c:	2b00      	cmp	r3, #0
 801053e:	d11c      	bne.n	801057a <ip4_reass+0x13e>
      goto nullreturn;
 8010540:	e105      	b.n	801074e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010544:	88db      	ldrh	r3, [r3, #6]
 8010546:	b29b      	uxth	r3, r3
 8010548:	4618      	mov	r0, r3
 801054a:	f7f6 fd0f 	bl	8006f6c <lwip_htons>
 801054e:	4603      	mov	r3, r0
 8010550:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010554:	2b00      	cmp	r3, #0
 8010556:	d110      	bne.n	801057a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8010558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801055a:	89db      	ldrh	r3, [r3, #14]
 801055c:	4618      	mov	r0, r3
 801055e:	f7f6 fd05 	bl	8006f6c <lwip_htons>
 8010562:	4603      	mov	r3, r0
 8010564:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010568:	2b00      	cmp	r3, #0
 801056a:	d006      	beq.n	801057a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801056c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801056e:	3308      	adds	r3, #8
 8010570:	2214      	movs	r2, #20
 8010572:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010574:	4618      	mov	r0, r3
 8010576:	f001 fbb0 	bl	8011cda <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801057a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801057c:	88db      	ldrh	r3, [r3, #6]
 801057e:	b29b      	uxth	r3, r3
 8010580:	f003 0320 	and.w	r3, r3, #32
 8010584:	2b00      	cmp	r3, #0
 8010586:	bf0c      	ite	eq
 8010588:	2301      	moveq	r3, #1
 801058a:	2300      	movne	r3, #0
 801058c:	b2db      	uxtb	r3, r3
 801058e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8010590:	69fb      	ldr	r3, [r7, #28]
 8010592:	2b00      	cmp	r3, #0
 8010594:	d00e      	beq.n	80105b4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8010596:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010598:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801059a:	4413      	add	r3, r2
 801059c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801059e:	8b7a      	ldrh	r2, [r7, #26]
 80105a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80105a2:	429a      	cmp	r2, r3
 80105a4:	f0c0 80a0 	bcc.w	80106e8 <ip4_reass+0x2ac>
 80105a8:	8b7b      	ldrh	r3, [r7, #26]
 80105aa:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80105ae:	4293      	cmp	r3, r2
 80105b0:	f200 809a 	bhi.w	80106e8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80105b4:	69fa      	ldr	r2, [r7, #28]
 80105b6:	6879      	ldr	r1, [r7, #4]
 80105b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80105ba:	f7ff fdd5 	bl	8010168 <ip_reass_chain_frag_into_datagram_and_validate>
 80105be:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80105c0:	697b      	ldr	r3, [r7, #20]
 80105c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80105c6:	f000 809b 	beq.w	8010700 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80105ca:	4b48      	ldr	r3, [pc, #288]	; (80106ec <ip4_reass+0x2b0>)
 80105cc:	881a      	ldrh	r2, [r3, #0]
 80105ce:	8c3b      	ldrh	r3, [r7, #32]
 80105d0:	4413      	add	r3, r2
 80105d2:	b29a      	uxth	r2, r3
 80105d4:	4b45      	ldr	r3, [pc, #276]	; (80106ec <ip4_reass+0x2b0>)
 80105d6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80105d8:	69fb      	ldr	r3, [r7, #28]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d00d      	beq.n	80105fa <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80105de:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80105e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80105e2:	4413      	add	r3, r2
 80105e4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80105e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105e8:	8a7a      	ldrh	r2, [r7, #18]
 80105ea:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80105ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105ee:	7f9b      	ldrb	r3, [r3, #30]
 80105f0:	f043 0301 	orr.w	r3, r3, #1
 80105f4:	b2da      	uxtb	r2, r3
 80105f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105f8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80105fa:	697b      	ldr	r3, [r7, #20]
 80105fc:	2b01      	cmp	r3, #1
 80105fe:	d171      	bne.n	80106e4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8010600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010602:	8b9b      	ldrh	r3, [r3, #28]
 8010604:	3314      	adds	r3, #20
 8010606:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8010608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801060a:	685b      	ldr	r3, [r3, #4]
 801060c:	685b      	ldr	r3, [r3, #4]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8010612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010614:	685b      	ldr	r3, [r3, #4]
 8010616:	685b      	ldr	r3, [r3, #4]
 8010618:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801061a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801061c:	3308      	adds	r3, #8
 801061e:	2214      	movs	r2, #20
 8010620:	4619      	mov	r1, r3
 8010622:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010624:	f001 fb59 	bl	8011cda <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8010628:	8a3b      	ldrh	r3, [r7, #16]
 801062a:	4618      	mov	r0, r3
 801062c:	f7f6 fc9e 	bl	8006f6c <lwip_htons>
 8010630:	4603      	mov	r3, r0
 8010632:	461a      	mov	r2, r3
 8010634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010636:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8010638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801063a:	2200      	movs	r2, #0
 801063c:	719a      	strb	r2, [r3, #6]
 801063e:	2200      	movs	r2, #0
 8010640:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8010642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010644:	2200      	movs	r2, #0
 8010646:	729a      	strb	r2, [r3, #10]
 8010648:	2200      	movs	r2, #0
 801064a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801064c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801064e:	685b      	ldr	r3, [r3, #4]
 8010650:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8010652:	e00d      	b.n	8010670 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8010654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010656:	685b      	ldr	r3, [r3, #4]
 8010658:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801065a:	2114      	movs	r1, #20
 801065c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801065e:	f7f7 ff5d 	bl	800851c <pbuf_remove_header>
      pbuf_cat(p, r);
 8010662:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010664:	6878      	ldr	r0, [r7, #4]
 8010666:	f7f8 f8a1 	bl	80087ac <pbuf_cat>
      r = iprh->next_pbuf;
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8010670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010672:	2b00      	cmp	r3, #0
 8010674:	d1ee      	bne.n	8010654 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8010676:	4b1e      	ldr	r3, [pc, #120]	; (80106f0 <ip4_reass+0x2b4>)
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801067c:	429a      	cmp	r2, r3
 801067e:	d102      	bne.n	8010686 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8010680:	2300      	movs	r3, #0
 8010682:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010684:	e010      	b.n	80106a8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010686:	4b1a      	ldr	r3, [pc, #104]	; (80106f0 <ip4_reass+0x2b4>)
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801068c:	e007      	b.n	801069e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801068e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010694:	429a      	cmp	r2, r3
 8010696:	d006      	beq.n	80106a6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801069e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d1f4      	bne.n	801068e <ip4_reass+0x252>
 80106a4:	e000      	b.n	80106a8 <ip4_reass+0x26c>
          break;
 80106a6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80106a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80106aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80106ac:	f7ff fd2e 	bl	801010c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80106b0:	6878      	ldr	r0, [r7, #4]
 80106b2:	f7f8 f841 	bl	8008738 <pbuf_clen>
 80106b6:	4603      	mov	r3, r0
 80106b8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80106ba:	4b0c      	ldr	r3, [pc, #48]	; (80106ec <ip4_reass+0x2b0>)
 80106bc:	881b      	ldrh	r3, [r3, #0]
 80106be:	8c3a      	ldrh	r2, [r7, #32]
 80106c0:	429a      	cmp	r2, r3
 80106c2:	d906      	bls.n	80106d2 <ip4_reass+0x296>
 80106c4:	4b0b      	ldr	r3, [pc, #44]	; (80106f4 <ip4_reass+0x2b8>)
 80106c6:	f240 229b 	movw	r2, #667	; 0x29b
 80106ca:	490b      	ldr	r1, [pc, #44]	; (80106f8 <ip4_reass+0x2bc>)
 80106cc:	480b      	ldr	r0, [pc, #44]	; (80106fc <ip4_reass+0x2c0>)
 80106ce:	f001 f9a3 	bl	8011a18 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80106d2:	4b06      	ldr	r3, [pc, #24]	; (80106ec <ip4_reass+0x2b0>)
 80106d4:	881a      	ldrh	r2, [r3, #0]
 80106d6:	8c3b      	ldrh	r3, [r7, #32]
 80106d8:	1ad3      	subs	r3, r2, r3
 80106da:	b29a      	uxth	r2, r3
 80106dc:	4b03      	ldr	r3, [pc, #12]	; (80106ec <ip4_reass+0x2b0>)
 80106de:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	e038      	b.n	8010756 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80106e4:	2300      	movs	r3, #0
 80106e6:	e036      	b.n	8010756 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80106e8:	bf00      	nop
 80106ea:	e00a      	b.n	8010702 <ip4_reass+0x2c6>
 80106ec:	2000a880 	.word	0x2000a880
 80106f0:	2000a87c 	.word	0x2000a87c
 80106f4:	08016128 	.word	0x08016128
 80106f8:	08016298 	.word	0x08016298
 80106fc:	08016170 	.word	0x08016170
    goto nullreturn_ipr;
 8010700:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8010702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010704:	2b00      	cmp	r3, #0
 8010706:	d106      	bne.n	8010716 <ip4_reass+0x2da>
 8010708:	4b15      	ldr	r3, [pc, #84]	; (8010760 <ip4_reass+0x324>)
 801070a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801070e:	4915      	ldr	r1, [pc, #84]	; (8010764 <ip4_reass+0x328>)
 8010710:	4815      	ldr	r0, [pc, #84]	; (8010768 <ip4_reass+0x32c>)
 8010712:	f001 f981 	bl	8011a18 <iprintf>
  if (ipr->p == NULL) {
 8010716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010718:	685b      	ldr	r3, [r3, #4]
 801071a:	2b00      	cmp	r3, #0
 801071c:	d116      	bne.n	801074c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801071e:	4b13      	ldr	r3, [pc, #76]	; (801076c <ip4_reass+0x330>)
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010724:	429a      	cmp	r2, r3
 8010726:	d006      	beq.n	8010736 <ip4_reass+0x2fa>
 8010728:	4b0d      	ldr	r3, [pc, #52]	; (8010760 <ip4_reass+0x324>)
 801072a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801072e:	4910      	ldr	r1, [pc, #64]	; (8010770 <ip4_reass+0x334>)
 8010730:	480d      	ldr	r0, [pc, #52]	; (8010768 <ip4_reass+0x32c>)
 8010732:	f001 f971 	bl	8011a18 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8010736:	2100      	movs	r1, #0
 8010738:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801073a:	f7ff fce7 	bl	801010c <ip_reass_dequeue_datagram>
 801073e:	e006      	b.n	801074e <ip4_reass+0x312>
    goto nullreturn;
 8010740:	bf00      	nop
 8010742:	e004      	b.n	801074e <ip4_reass+0x312>
    goto nullreturn;
 8010744:	bf00      	nop
 8010746:	e002      	b.n	801074e <ip4_reass+0x312>
      goto nullreturn;
 8010748:	bf00      	nop
 801074a:	e000      	b.n	801074e <ip4_reass+0x312>
  }

nullreturn:
 801074c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801074e:	6878      	ldr	r0, [r7, #4]
 8010750:	f7f7 ff6a 	bl	8008628 <pbuf_free>
  return NULL;
 8010754:	2300      	movs	r3, #0
}
 8010756:	4618      	mov	r0, r3
 8010758:	3738      	adds	r7, #56	; 0x38
 801075a:	46bd      	mov	sp, r7
 801075c:	bd80      	pop	{r7, pc}
 801075e:	bf00      	nop
 8010760:	08016128 	.word	0x08016128
 8010764:	080162b4 	.word	0x080162b4
 8010768:	08016170 	.word	0x08016170
 801076c:	2000a87c 	.word	0x2000a87c
 8010770:	080162c0 	.word	0x080162c0

08010774 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8010774:	b580      	push	{r7, lr}
 8010776:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8010778:	2005      	movs	r0, #5
 801077a:	f7f7 f86f 	bl	800785c <memp_malloc>
 801077e:	4603      	mov	r3, r0
}
 8010780:	4618      	mov	r0, r3
 8010782:	bd80      	pop	{r7, pc}

08010784 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8010784:	b580      	push	{r7, lr}
 8010786:	b082      	sub	sp, #8
 8010788:	af00      	add	r7, sp, #0
 801078a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d106      	bne.n	80107a0 <ip_frag_free_pbuf_custom_ref+0x1c>
 8010792:	4b07      	ldr	r3, [pc, #28]	; (80107b0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8010794:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8010798:	4906      	ldr	r1, [pc, #24]	; (80107b4 <ip_frag_free_pbuf_custom_ref+0x30>)
 801079a:	4807      	ldr	r0, [pc, #28]	; (80107b8 <ip_frag_free_pbuf_custom_ref+0x34>)
 801079c:	f001 f93c 	bl	8011a18 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80107a0:	6879      	ldr	r1, [r7, #4]
 80107a2:	2005      	movs	r0, #5
 80107a4:	f7f7 f8ca 	bl	800793c <memp_free>
}
 80107a8:	bf00      	nop
 80107aa:	3708      	adds	r7, #8
 80107ac:	46bd      	mov	sp, r7
 80107ae:	bd80      	pop	{r7, pc}
 80107b0:	08016128 	.word	0x08016128
 80107b4:	080162e0 	.word	0x080162e0
 80107b8:	08016170 	.word	0x08016170

080107bc <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80107bc:	b580      	push	{r7, lr}
 80107be:	b084      	sub	sp, #16
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d106      	bne.n	80107dc <ipfrag_free_pbuf_custom+0x20>
 80107ce:	4b11      	ldr	r3, [pc, #68]	; (8010814 <ipfrag_free_pbuf_custom+0x58>)
 80107d0:	f240 22ce 	movw	r2, #718	; 0x2ce
 80107d4:	4910      	ldr	r1, [pc, #64]	; (8010818 <ipfrag_free_pbuf_custom+0x5c>)
 80107d6:	4811      	ldr	r0, [pc, #68]	; (801081c <ipfrag_free_pbuf_custom+0x60>)
 80107d8:	f001 f91e 	bl	8011a18 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80107dc:	68fa      	ldr	r2, [r7, #12]
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	429a      	cmp	r2, r3
 80107e2:	d006      	beq.n	80107f2 <ipfrag_free_pbuf_custom+0x36>
 80107e4:	4b0b      	ldr	r3, [pc, #44]	; (8010814 <ipfrag_free_pbuf_custom+0x58>)
 80107e6:	f240 22cf 	movw	r2, #719	; 0x2cf
 80107ea:	490d      	ldr	r1, [pc, #52]	; (8010820 <ipfrag_free_pbuf_custom+0x64>)
 80107ec:	480b      	ldr	r0, [pc, #44]	; (801081c <ipfrag_free_pbuf_custom+0x60>)
 80107ee:	f001 f913 	bl	8011a18 <iprintf>
  if (pcr->original != NULL) {
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	695b      	ldr	r3, [r3, #20]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d004      	beq.n	8010804 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	695b      	ldr	r3, [r3, #20]
 80107fe:	4618      	mov	r0, r3
 8010800:	f7f7 ff12 	bl	8008628 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8010804:	68f8      	ldr	r0, [r7, #12]
 8010806:	f7ff ffbd 	bl	8010784 <ip_frag_free_pbuf_custom_ref>
}
 801080a:	bf00      	nop
 801080c:	3710      	adds	r7, #16
 801080e:	46bd      	mov	sp, r7
 8010810:	bd80      	pop	{r7, pc}
 8010812:	bf00      	nop
 8010814:	08016128 	.word	0x08016128
 8010818:	080162ec 	.word	0x080162ec
 801081c:	08016170 	.word	0x08016170
 8010820:	080162f8 	.word	0x080162f8

08010824 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8010824:	b580      	push	{r7, lr}
 8010826:	b094      	sub	sp, #80	; 0x50
 8010828:	af02      	add	r7, sp, #8
 801082a:	60f8      	str	r0, [r7, #12]
 801082c:	60b9      	str	r1, [r7, #8]
 801082e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8010830:	2300      	movs	r3, #0
 8010832:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8010836:	68bb      	ldr	r3, [r7, #8]
 8010838:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801083a:	3b14      	subs	r3, #20
 801083c:	2b00      	cmp	r3, #0
 801083e:	da00      	bge.n	8010842 <ip4_frag+0x1e>
 8010840:	3307      	adds	r3, #7
 8010842:	10db      	asrs	r3, r3, #3
 8010844:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8010846:	2314      	movs	r3, #20
 8010848:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	685b      	ldr	r3, [r3, #4]
 801084e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8010850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010852:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8010854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010856:	781b      	ldrb	r3, [r3, #0]
 8010858:	f003 030f 	and.w	r3, r3, #15
 801085c:	b2db      	uxtb	r3, r3
 801085e:	009b      	lsls	r3, r3, #2
 8010860:	b2db      	uxtb	r3, r3
 8010862:	2b14      	cmp	r3, #20
 8010864:	d002      	beq.n	801086c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8010866:	f06f 0305 	mvn.w	r3, #5
 801086a:	e110      	b.n	8010a8e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	895b      	ldrh	r3, [r3, #10]
 8010870:	2b13      	cmp	r3, #19
 8010872:	d809      	bhi.n	8010888 <ip4_frag+0x64>
 8010874:	4b88      	ldr	r3, [pc, #544]	; (8010a98 <ip4_frag+0x274>)
 8010876:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801087a:	4988      	ldr	r1, [pc, #544]	; (8010a9c <ip4_frag+0x278>)
 801087c:	4888      	ldr	r0, [pc, #544]	; (8010aa0 <ip4_frag+0x27c>)
 801087e:	f001 f8cb 	bl	8011a18 <iprintf>
 8010882:	f06f 0305 	mvn.w	r3, #5
 8010886:	e102      	b.n	8010a8e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8010888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801088a:	88db      	ldrh	r3, [r3, #6]
 801088c:	b29b      	uxth	r3, r3
 801088e:	4618      	mov	r0, r3
 8010890:	f7f6 fb6c 	bl	8006f6c <lwip_htons>
 8010894:	4603      	mov	r3, r0
 8010896:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8010898:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801089a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801089e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80108a2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80108a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80108a8:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	891b      	ldrh	r3, [r3, #8]
 80108ae:	3b14      	subs	r3, #20
 80108b0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80108b4:	e0e1      	b.n	8010a7a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80108b6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80108b8:	00db      	lsls	r3, r3, #3
 80108ba:	b29b      	uxth	r3, r3
 80108bc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80108c0:	4293      	cmp	r3, r2
 80108c2:	bf28      	it	cs
 80108c4:	4613      	movcs	r3, r2
 80108c6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80108c8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80108cc:	2114      	movs	r1, #20
 80108ce:	200e      	movs	r0, #14
 80108d0:	f7f7 fbc6 	bl	8008060 <pbuf_alloc>
 80108d4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80108d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108d8:	2b00      	cmp	r3, #0
 80108da:	f000 80d5 	beq.w	8010a88 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80108de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108e0:	895b      	ldrh	r3, [r3, #10]
 80108e2:	2b13      	cmp	r3, #19
 80108e4:	d806      	bhi.n	80108f4 <ip4_frag+0xd0>
 80108e6:	4b6c      	ldr	r3, [pc, #432]	; (8010a98 <ip4_frag+0x274>)
 80108e8:	f44f 7249 	mov.w	r2, #804	; 0x324
 80108ec:	496d      	ldr	r1, [pc, #436]	; (8010aa4 <ip4_frag+0x280>)
 80108ee:	486c      	ldr	r0, [pc, #432]	; (8010aa0 <ip4_frag+0x27c>)
 80108f0:	f001 f892 	bl	8011a18 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80108f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108f6:	685b      	ldr	r3, [r3, #4]
 80108f8:	2214      	movs	r2, #20
 80108fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80108fc:	4618      	mov	r0, r3
 80108fe:	f001 f9ec 	bl	8011cda <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8010902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010904:	685b      	ldr	r3, [r3, #4]
 8010906:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8010908:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801090a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801090e:	e064      	b.n	80109da <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	895a      	ldrh	r2, [r3, #10]
 8010914:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010916:	1ad3      	subs	r3, r2, r3
 8010918:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	895b      	ldrh	r3, [r3, #10]
 801091e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010920:	429a      	cmp	r2, r3
 8010922:	d906      	bls.n	8010932 <ip4_frag+0x10e>
 8010924:	4b5c      	ldr	r3, [pc, #368]	; (8010a98 <ip4_frag+0x274>)
 8010926:	f240 322d 	movw	r2, #813	; 0x32d
 801092a:	495f      	ldr	r1, [pc, #380]	; (8010aa8 <ip4_frag+0x284>)
 801092c:	485c      	ldr	r0, [pc, #368]	; (8010aa0 <ip4_frag+0x27c>)
 801092e:	f001 f873 	bl	8011a18 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8010932:	8bfa      	ldrh	r2, [r7, #30]
 8010934:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010938:	4293      	cmp	r3, r2
 801093a:	bf28      	it	cs
 801093c:	4613      	movcs	r3, r2
 801093e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8010942:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010946:	2b00      	cmp	r3, #0
 8010948:	d105      	bne.n	8010956 <ip4_frag+0x132>
        poff = 0;
 801094a:	2300      	movs	r3, #0
 801094c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	60fb      	str	r3, [r7, #12]
        continue;
 8010954:	e041      	b.n	80109da <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8010956:	f7ff ff0d 	bl	8010774 <ip_frag_alloc_pbuf_custom_ref>
 801095a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801095c:	69bb      	ldr	r3, [r7, #24]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d103      	bne.n	801096a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8010962:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010964:	f7f7 fe60 	bl	8008628 <pbuf_free>
        goto memerr;
 8010968:	e08f      	b.n	8010a8a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801096a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010970:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010972:	4413      	add	r3, r2
 8010974:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8010978:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801097c:	9201      	str	r2, [sp, #4]
 801097e:	9300      	str	r3, [sp, #0]
 8010980:	4603      	mov	r3, r0
 8010982:	2241      	movs	r2, #65	; 0x41
 8010984:	2000      	movs	r0, #0
 8010986:	f7f7 fc95 	bl	80082b4 <pbuf_alloced_custom>
 801098a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801098c:	697b      	ldr	r3, [r7, #20]
 801098e:	2b00      	cmp	r3, #0
 8010990:	d106      	bne.n	80109a0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8010992:	69b8      	ldr	r0, [r7, #24]
 8010994:	f7ff fef6 	bl	8010784 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8010998:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801099a:	f7f7 fe45 	bl	8008628 <pbuf_free>
        goto memerr;
 801099e:	e074      	b.n	8010a8a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80109a0:	68f8      	ldr	r0, [r7, #12]
 80109a2:	f7f7 fee1 	bl	8008768 <pbuf_ref>
      pcr->original = p;
 80109a6:	69bb      	ldr	r3, [r7, #24]
 80109a8:	68fa      	ldr	r2, [r7, #12]
 80109aa:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80109ac:	69bb      	ldr	r3, [r7, #24]
 80109ae:	4a3f      	ldr	r2, [pc, #252]	; (8010aac <ip4_frag+0x288>)
 80109b0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80109b2:	6979      	ldr	r1, [r7, #20]
 80109b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80109b6:	f7f7 fef9 	bl	80087ac <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80109ba:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80109be:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80109c2:	1ad3      	subs	r3, r2, r3
 80109c4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80109c8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d004      	beq.n	80109da <ip4_frag+0x1b6>
        poff = 0;
 80109d0:	2300      	movs	r3, #0
 80109d2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80109da:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d196      	bne.n	8010910 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80109e2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80109e4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80109e8:	4413      	add	r3, r2
 80109ea:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80109ec:	68bb      	ldr	r3, [r7, #8]
 80109ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80109f0:	f1a3 0213 	sub.w	r2, r3, #19
 80109f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80109f8:	429a      	cmp	r2, r3
 80109fa:	bfcc      	ite	gt
 80109fc:	2301      	movgt	r3, #1
 80109fe:	2300      	movle	r3, #0
 8010a00:	b2db      	uxtb	r3, r3
 8010a02:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8010a04:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010a08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010a0c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8010a0e:	6a3b      	ldr	r3, [r7, #32]
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d002      	beq.n	8010a1a <ip4_frag+0x1f6>
 8010a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d003      	beq.n	8010a22 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8010a1a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010a1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010a20:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8010a22:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010a24:	4618      	mov	r0, r3
 8010a26:	f7f6 faa1 	bl	8006f6c <lwip_htons>
 8010a2a:	4603      	mov	r3, r0
 8010a2c:	461a      	mov	r2, r3
 8010a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a30:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8010a32:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010a34:	3314      	adds	r3, #20
 8010a36:	b29b      	uxth	r3, r3
 8010a38:	4618      	mov	r0, r3
 8010a3a:	f7f6 fa97 	bl	8006f6c <lwip_htons>
 8010a3e:	4603      	mov	r3, r0
 8010a40:	461a      	mov	r2, r3
 8010a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a44:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8010a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a48:	2200      	movs	r2, #0
 8010a4a:	729a      	strb	r2, [r3, #10]
 8010a4c:	2200      	movs	r2, #0
 8010a4e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8010a50:	68bb      	ldr	r3, [r7, #8]
 8010a52:	695b      	ldr	r3, [r3, #20]
 8010a54:	687a      	ldr	r2, [r7, #4]
 8010a56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010a58:	68b8      	ldr	r0, [r7, #8]
 8010a5a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8010a5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010a5e:	f7f7 fde3 	bl	8008628 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8010a62:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010a66:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010a68:	1ad3      	subs	r3, r2, r3
 8010a6a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8010a6e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010a72:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010a74:	4413      	add	r3, r2
 8010a76:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8010a7a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	f47f af19 	bne.w	80108b6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8010a84:	2300      	movs	r3, #0
 8010a86:	e002      	b.n	8010a8e <ip4_frag+0x26a>
      goto memerr;
 8010a88:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8010a8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8010a8e:	4618      	mov	r0, r3
 8010a90:	3748      	adds	r7, #72	; 0x48
 8010a92:	46bd      	mov	sp, r7
 8010a94:	bd80      	pop	{r7, pc}
 8010a96:	bf00      	nop
 8010a98:	08016128 	.word	0x08016128
 8010a9c:	08016304 	.word	0x08016304
 8010aa0:	08016170 	.word	0x08016170
 8010aa4:	08016320 	.word	0x08016320
 8010aa8:	08016340 	.word	0x08016340
 8010aac:	080107bd 	.word	0x080107bd

08010ab0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	b086      	sub	sp, #24
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	6078      	str	r0, [r7, #4]
 8010ab8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8010aba:	230e      	movs	r3, #14
 8010abc:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	895b      	ldrh	r3, [r3, #10]
 8010ac2:	2b0e      	cmp	r3, #14
 8010ac4:	d96e      	bls.n	8010ba4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	7bdb      	ldrb	r3, [r3, #15]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d106      	bne.n	8010adc <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8010ace:	683b      	ldr	r3, [r7, #0]
 8010ad0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010ad4:	3301      	adds	r3, #1
 8010ad6:	b2da      	uxtb	r2, r3
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	685b      	ldr	r3, [r3, #4]
 8010ae0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8010ae2:	693b      	ldr	r3, [r7, #16]
 8010ae4:	7b1a      	ldrb	r2, [r3, #12]
 8010ae6:	7b5b      	ldrb	r3, [r3, #13]
 8010ae8:	021b      	lsls	r3, r3, #8
 8010aea:	4313      	orrs	r3, r2
 8010aec:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8010aee:	693b      	ldr	r3, [r7, #16]
 8010af0:	781b      	ldrb	r3, [r3, #0]
 8010af2:	f003 0301 	and.w	r3, r3, #1
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d023      	beq.n	8010b42 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8010afa:	693b      	ldr	r3, [r7, #16]
 8010afc:	781b      	ldrb	r3, [r3, #0]
 8010afe:	2b01      	cmp	r3, #1
 8010b00:	d10f      	bne.n	8010b22 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010b02:	693b      	ldr	r3, [r7, #16]
 8010b04:	785b      	ldrb	r3, [r3, #1]
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d11b      	bne.n	8010b42 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8010b0a:	693b      	ldr	r3, [r7, #16]
 8010b0c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010b0e:	2b5e      	cmp	r3, #94	; 0x5e
 8010b10:	d117      	bne.n	8010b42 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	7b5b      	ldrb	r3, [r3, #13]
 8010b16:	f043 0310 	orr.w	r3, r3, #16
 8010b1a:	b2da      	uxtb	r2, r3
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	735a      	strb	r2, [r3, #13]
 8010b20:	e00f      	b.n	8010b42 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8010b22:	693b      	ldr	r3, [r7, #16]
 8010b24:	2206      	movs	r2, #6
 8010b26:	4928      	ldr	r1, [pc, #160]	; (8010bc8 <ethernet_input+0x118>)
 8010b28:	4618      	mov	r0, r3
 8010b2a:	f000 ffca 	bl	8011ac2 <memcmp>
 8010b2e:	4603      	mov	r3, r0
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d106      	bne.n	8010b42 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	7b5b      	ldrb	r3, [r3, #13]
 8010b38:	f043 0308 	orr.w	r3, r3, #8
 8010b3c:	b2da      	uxtb	r2, r3
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8010b42:	89fb      	ldrh	r3, [r7, #14]
 8010b44:	2b08      	cmp	r3, #8
 8010b46:	d003      	beq.n	8010b50 <ethernet_input+0xa0>
 8010b48:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8010b4c:	d014      	beq.n	8010b78 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8010b4e:	e032      	b.n	8010bb6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010b50:	683b      	ldr	r3, [r7, #0]
 8010b52:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010b56:	f003 0308 	and.w	r3, r3, #8
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d024      	beq.n	8010ba8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010b5e:	8afb      	ldrh	r3, [r7, #22]
 8010b60:	4619      	mov	r1, r3
 8010b62:	6878      	ldr	r0, [r7, #4]
 8010b64:	f7f7 fcda 	bl	800851c <pbuf_remove_header>
 8010b68:	4603      	mov	r3, r0
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d11e      	bne.n	8010bac <ethernet_input+0xfc>
        ip4_input(p, netif);
 8010b6e:	6839      	ldr	r1, [r7, #0]
 8010b70:	6878      	ldr	r0, [r7, #4]
 8010b72:	f7fe ff21 	bl	800f9b8 <ip4_input>
      break;
 8010b76:	e013      	b.n	8010ba0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010b78:	683b      	ldr	r3, [r7, #0]
 8010b7a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010b7e:	f003 0308 	and.w	r3, r3, #8
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d014      	beq.n	8010bb0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010b86:	8afb      	ldrh	r3, [r7, #22]
 8010b88:	4619      	mov	r1, r3
 8010b8a:	6878      	ldr	r0, [r7, #4]
 8010b8c:	f7f7 fcc6 	bl	800851c <pbuf_remove_header>
 8010b90:	4603      	mov	r3, r0
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d10e      	bne.n	8010bb4 <ethernet_input+0x104>
        etharp_input(p, netif);
 8010b96:	6839      	ldr	r1, [r7, #0]
 8010b98:	6878      	ldr	r0, [r7, #4]
 8010b9a:	f7fe f8c1 	bl	800ed20 <etharp_input>
      break;
 8010b9e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8010ba0:	2300      	movs	r3, #0
 8010ba2:	e00c      	b.n	8010bbe <ethernet_input+0x10e>
    goto free_and_return;
 8010ba4:	bf00      	nop
 8010ba6:	e006      	b.n	8010bb6 <ethernet_input+0x106>
        goto free_and_return;
 8010ba8:	bf00      	nop
 8010baa:	e004      	b.n	8010bb6 <ethernet_input+0x106>
        goto free_and_return;
 8010bac:	bf00      	nop
 8010bae:	e002      	b.n	8010bb6 <ethernet_input+0x106>
        goto free_and_return;
 8010bb0:	bf00      	nop
 8010bb2:	e000      	b.n	8010bb6 <ethernet_input+0x106>
        goto free_and_return;
 8010bb4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8010bb6:	6878      	ldr	r0, [r7, #4]
 8010bb8:	f7f7 fd36 	bl	8008628 <pbuf_free>
  return ERR_OK;
 8010bbc:	2300      	movs	r3, #0
}
 8010bbe:	4618      	mov	r0, r3
 8010bc0:	3718      	adds	r7, #24
 8010bc2:	46bd      	mov	sp, r7
 8010bc4:	bd80      	pop	{r7, pc}
 8010bc6:	bf00      	nop
 8010bc8:	080164dc 	.word	0x080164dc

08010bcc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8010bcc:	b580      	push	{r7, lr}
 8010bce:	b086      	sub	sp, #24
 8010bd0:	af00      	add	r7, sp, #0
 8010bd2:	60f8      	str	r0, [r7, #12]
 8010bd4:	60b9      	str	r1, [r7, #8]
 8010bd6:	607a      	str	r2, [r7, #4]
 8010bd8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8010bda:	8c3b      	ldrh	r3, [r7, #32]
 8010bdc:	4618      	mov	r0, r3
 8010bde:	f7f6 f9c5 	bl	8006f6c <lwip_htons>
 8010be2:	4603      	mov	r3, r0
 8010be4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8010be6:	210e      	movs	r1, #14
 8010be8:	68b8      	ldr	r0, [r7, #8]
 8010bea:	f7f7 fc87 	bl	80084fc <pbuf_add_header>
 8010bee:	4603      	mov	r3, r0
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d125      	bne.n	8010c40 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8010bf4:	68bb      	ldr	r3, [r7, #8]
 8010bf6:	685b      	ldr	r3, [r3, #4]
 8010bf8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8010bfa:	693b      	ldr	r3, [r7, #16]
 8010bfc:	8afa      	ldrh	r2, [r7, #22]
 8010bfe:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8010c00:	693b      	ldr	r3, [r7, #16]
 8010c02:	2206      	movs	r2, #6
 8010c04:	6839      	ldr	r1, [r7, #0]
 8010c06:	4618      	mov	r0, r3
 8010c08:	f001 f867 	bl	8011cda <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8010c0c:	693b      	ldr	r3, [r7, #16]
 8010c0e:	3306      	adds	r3, #6
 8010c10:	2206      	movs	r2, #6
 8010c12:	6879      	ldr	r1, [r7, #4]
 8010c14:	4618      	mov	r0, r3
 8010c16:	f001 f860 	bl	8011cda <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010c20:	2b06      	cmp	r3, #6
 8010c22:	d006      	beq.n	8010c32 <ethernet_output+0x66>
 8010c24:	4b0a      	ldr	r3, [pc, #40]	; (8010c50 <ethernet_output+0x84>)
 8010c26:	f44f 7299 	mov.w	r2, #306	; 0x132
 8010c2a:	490a      	ldr	r1, [pc, #40]	; (8010c54 <ethernet_output+0x88>)
 8010c2c:	480a      	ldr	r0, [pc, #40]	; (8010c58 <ethernet_output+0x8c>)
 8010c2e:	f000 fef3 	bl	8011a18 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	699b      	ldr	r3, [r3, #24]
 8010c36:	68b9      	ldr	r1, [r7, #8]
 8010c38:	68f8      	ldr	r0, [r7, #12]
 8010c3a:	4798      	blx	r3
 8010c3c:	4603      	mov	r3, r0
 8010c3e:	e002      	b.n	8010c46 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8010c40:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8010c42:	f06f 0301 	mvn.w	r3, #1
}
 8010c46:	4618      	mov	r0, r3
 8010c48:	3718      	adds	r7, #24
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	bd80      	pop	{r7, pc}
 8010c4e:	bf00      	nop
 8010c50:	08016350 	.word	0x08016350
 8010c54:	08016388 	.word	0x08016388
 8010c58:	080163bc 	.word	0x080163bc

08010c5c <atof>:
 8010c5c:	2100      	movs	r1, #0
 8010c5e:	f000 be0d 	b.w	801187c <strtod>
	...

08010c64 <rand>:
 8010c64:	4b16      	ldr	r3, [pc, #88]	; (8010cc0 <rand+0x5c>)
 8010c66:	b510      	push	{r4, lr}
 8010c68:	681c      	ldr	r4, [r3, #0]
 8010c6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010c6c:	b9b3      	cbnz	r3, 8010c9c <rand+0x38>
 8010c6e:	2018      	movs	r0, #24
 8010c70:	f001 fc0c 	bl	801248c <malloc>
 8010c74:	4602      	mov	r2, r0
 8010c76:	6320      	str	r0, [r4, #48]	; 0x30
 8010c78:	b920      	cbnz	r0, 8010c84 <rand+0x20>
 8010c7a:	4b12      	ldr	r3, [pc, #72]	; (8010cc4 <rand+0x60>)
 8010c7c:	4812      	ldr	r0, [pc, #72]	; (8010cc8 <rand+0x64>)
 8010c7e:	2152      	movs	r1, #82	; 0x52
 8010c80:	f001 f842 	bl	8011d08 <__assert_func>
 8010c84:	4911      	ldr	r1, [pc, #68]	; (8010ccc <rand+0x68>)
 8010c86:	4b12      	ldr	r3, [pc, #72]	; (8010cd0 <rand+0x6c>)
 8010c88:	e9c0 1300 	strd	r1, r3, [r0]
 8010c8c:	4b11      	ldr	r3, [pc, #68]	; (8010cd4 <rand+0x70>)
 8010c8e:	6083      	str	r3, [r0, #8]
 8010c90:	230b      	movs	r3, #11
 8010c92:	8183      	strh	r3, [r0, #12]
 8010c94:	2100      	movs	r1, #0
 8010c96:	2001      	movs	r0, #1
 8010c98:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8010c9c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010c9e:	480e      	ldr	r0, [pc, #56]	; (8010cd8 <rand+0x74>)
 8010ca0:	690b      	ldr	r3, [r1, #16]
 8010ca2:	694c      	ldr	r4, [r1, #20]
 8010ca4:	4a0d      	ldr	r2, [pc, #52]	; (8010cdc <rand+0x78>)
 8010ca6:	4358      	muls	r0, r3
 8010ca8:	fb02 0004 	mla	r0, r2, r4, r0
 8010cac:	fba3 3202 	umull	r3, r2, r3, r2
 8010cb0:	3301      	adds	r3, #1
 8010cb2:	eb40 0002 	adc.w	r0, r0, r2
 8010cb6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8010cba:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8010cbe:	bd10      	pop	{r4, pc}
 8010cc0:	200001f0 	.word	0x200001f0
 8010cc4:	080164ea 	.word	0x080164ea
 8010cc8:	08016501 	.word	0x08016501
 8010ccc:	abcd330e 	.word	0xabcd330e
 8010cd0:	e66d1234 	.word	0xe66d1234
 8010cd4:	0005deec 	.word	0x0005deec
 8010cd8:	5851f42d 	.word	0x5851f42d
 8010cdc:	4c957f2d 	.word	0x4c957f2d

08010ce0 <sulp>:
 8010ce0:	b570      	push	{r4, r5, r6, lr}
 8010ce2:	4604      	mov	r4, r0
 8010ce4:	460d      	mov	r5, r1
 8010ce6:	4616      	mov	r6, r2
 8010ce8:	ec45 4b10 	vmov	d0, r4, r5
 8010cec:	f002 f800 	bl	8012cf0 <__ulp>
 8010cf0:	b17e      	cbz	r6, 8010d12 <sulp+0x32>
 8010cf2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010cf6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	dd09      	ble.n	8010d12 <sulp+0x32>
 8010cfe:	051b      	lsls	r3, r3, #20
 8010d00:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8010d04:	2000      	movs	r0, #0
 8010d06:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8010d0a:	ec41 0b17 	vmov	d7, r0, r1
 8010d0e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010d12:	bd70      	pop	{r4, r5, r6, pc}
 8010d14:	0000      	movs	r0, r0
	...

08010d18 <_strtod_l>:
 8010d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d1c:	ed2d 8b0e 	vpush	{d8-d14}
 8010d20:	b097      	sub	sp, #92	; 0x5c
 8010d22:	4604      	mov	r4, r0
 8010d24:	920d      	str	r2, [sp, #52]	; 0x34
 8010d26:	2200      	movs	r2, #0
 8010d28:	9212      	str	r2, [sp, #72]	; 0x48
 8010d2a:	468a      	mov	sl, r1
 8010d2c:	f04f 0800 	mov.w	r8, #0
 8010d30:	f04f 0900 	mov.w	r9, #0
 8010d34:	460a      	mov	r2, r1
 8010d36:	9211      	str	r2, [sp, #68]	; 0x44
 8010d38:	7811      	ldrb	r1, [r2, #0]
 8010d3a:	292b      	cmp	r1, #43	; 0x2b
 8010d3c:	d04c      	beq.n	8010dd8 <_strtod_l+0xc0>
 8010d3e:	d839      	bhi.n	8010db4 <_strtod_l+0x9c>
 8010d40:	290d      	cmp	r1, #13
 8010d42:	d833      	bhi.n	8010dac <_strtod_l+0x94>
 8010d44:	2908      	cmp	r1, #8
 8010d46:	d833      	bhi.n	8010db0 <_strtod_l+0x98>
 8010d48:	2900      	cmp	r1, #0
 8010d4a:	d03c      	beq.n	8010dc6 <_strtod_l+0xae>
 8010d4c:	2200      	movs	r2, #0
 8010d4e:	9208      	str	r2, [sp, #32]
 8010d50:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8010d52:	7832      	ldrb	r2, [r6, #0]
 8010d54:	2a30      	cmp	r2, #48	; 0x30
 8010d56:	f040 80b8 	bne.w	8010eca <_strtod_l+0x1b2>
 8010d5a:	7872      	ldrb	r2, [r6, #1]
 8010d5c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8010d60:	2a58      	cmp	r2, #88	; 0x58
 8010d62:	d170      	bne.n	8010e46 <_strtod_l+0x12e>
 8010d64:	9302      	str	r3, [sp, #8]
 8010d66:	9b08      	ldr	r3, [sp, #32]
 8010d68:	9301      	str	r3, [sp, #4]
 8010d6a:	ab12      	add	r3, sp, #72	; 0x48
 8010d6c:	9300      	str	r3, [sp, #0]
 8010d6e:	4a91      	ldr	r2, [pc, #580]	; (8010fb4 <_strtod_l+0x29c>)
 8010d70:	ab13      	add	r3, sp, #76	; 0x4c
 8010d72:	a911      	add	r1, sp, #68	; 0x44
 8010d74:	4620      	mov	r0, r4
 8010d76:	f001 f899 	bl	8011eac <__gethex>
 8010d7a:	f010 070f 	ands.w	r7, r0, #15
 8010d7e:	4605      	mov	r5, r0
 8010d80:	d005      	beq.n	8010d8e <_strtod_l+0x76>
 8010d82:	2f06      	cmp	r7, #6
 8010d84:	d12a      	bne.n	8010ddc <_strtod_l+0xc4>
 8010d86:	3601      	adds	r6, #1
 8010d88:	2300      	movs	r3, #0
 8010d8a:	9611      	str	r6, [sp, #68]	; 0x44
 8010d8c:	9308      	str	r3, [sp, #32]
 8010d8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	f040 8555 	bne.w	8011840 <_strtod_l+0xb28>
 8010d96:	9b08      	ldr	r3, [sp, #32]
 8010d98:	ec49 8b10 	vmov	d0, r8, r9
 8010d9c:	b1cb      	cbz	r3, 8010dd2 <_strtod_l+0xba>
 8010d9e:	eeb1 0b40 	vneg.f64	d0, d0
 8010da2:	b017      	add	sp, #92	; 0x5c
 8010da4:	ecbd 8b0e 	vpop	{d8-d14}
 8010da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010dac:	2920      	cmp	r1, #32
 8010dae:	d1cd      	bne.n	8010d4c <_strtod_l+0x34>
 8010db0:	3201      	adds	r2, #1
 8010db2:	e7c0      	b.n	8010d36 <_strtod_l+0x1e>
 8010db4:	292d      	cmp	r1, #45	; 0x2d
 8010db6:	d1c9      	bne.n	8010d4c <_strtod_l+0x34>
 8010db8:	2101      	movs	r1, #1
 8010dba:	9108      	str	r1, [sp, #32]
 8010dbc:	1c51      	adds	r1, r2, #1
 8010dbe:	9111      	str	r1, [sp, #68]	; 0x44
 8010dc0:	7852      	ldrb	r2, [r2, #1]
 8010dc2:	2a00      	cmp	r2, #0
 8010dc4:	d1c4      	bne.n	8010d50 <_strtod_l+0x38>
 8010dc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010dc8:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	f040 8535 	bne.w	801183c <_strtod_l+0xb24>
 8010dd2:	ec49 8b10 	vmov	d0, r8, r9
 8010dd6:	e7e4      	b.n	8010da2 <_strtod_l+0x8a>
 8010dd8:	2100      	movs	r1, #0
 8010dda:	e7ee      	b.n	8010dba <_strtod_l+0xa2>
 8010ddc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010dde:	b13a      	cbz	r2, 8010df0 <_strtod_l+0xd8>
 8010de0:	2135      	movs	r1, #53	; 0x35
 8010de2:	a814      	add	r0, sp, #80	; 0x50
 8010de4:	f002 f87e 	bl	8012ee4 <__copybits>
 8010de8:	9912      	ldr	r1, [sp, #72]	; 0x48
 8010dea:	4620      	mov	r0, r4
 8010dec:	f001 fc54 	bl	8012698 <_Bfree>
 8010df0:	1e7b      	subs	r3, r7, #1
 8010df2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010df4:	2b04      	cmp	r3, #4
 8010df6:	d806      	bhi.n	8010e06 <_strtod_l+0xee>
 8010df8:	e8df f003 	tbb	[pc, r3]
 8010dfc:	201d0314 	.word	0x201d0314
 8010e00:	14          	.byte	0x14
 8010e01:	00          	.byte	0x00
 8010e02:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8010e06:	05eb      	lsls	r3, r5, #23
 8010e08:	bf48      	it	mi
 8010e0a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8010e0e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010e12:	0d1b      	lsrs	r3, r3, #20
 8010e14:	051b      	lsls	r3, r3, #20
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d1b9      	bne.n	8010d8e <_strtod_l+0x76>
 8010e1a:	f000 ff31 	bl	8011c80 <__errno>
 8010e1e:	2322      	movs	r3, #34	; 0x22
 8010e20:	6003      	str	r3, [r0, #0]
 8010e22:	e7b4      	b.n	8010d8e <_strtod_l+0x76>
 8010e24:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8010e28:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010e2c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010e30:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8010e34:	e7e7      	b.n	8010e06 <_strtod_l+0xee>
 8010e36:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8010fbc <_strtod_l+0x2a4>
 8010e3a:	e7e4      	b.n	8010e06 <_strtod_l+0xee>
 8010e3c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8010e40:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8010e44:	e7df      	b.n	8010e06 <_strtod_l+0xee>
 8010e46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010e48:	1c5a      	adds	r2, r3, #1
 8010e4a:	9211      	str	r2, [sp, #68]	; 0x44
 8010e4c:	785b      	ldrb	r3, [r3, #1]
 8010e4e:	2b30      	cmp	r3, #48	; 0x30
 8010e50:	d0f9      	beq.n	8010e46 <_strtod_l+0x12e>
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d09b      	beq.n	8010d8e <_strtod_l+0x76>
 8010e56:	2301      	movs	r3, #1
 8010e58:	9306      	str	r3, [sp, #24]
 8010e5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010e5c:	9309      	str	r3, [sp, #36]	; 0x24
 8010e5e:	2300      	movs	r3, #0
 8010e60:	9305      	str	r3, [sp, #20]
 8010e62:	9307      	str	r3, [sp, #28]
 8010e64:	461e      	mov	r6, r3
 8010e66:	220a      	movs	r2, #10
 8010e68:	9811      	ldr	r0, [sp, #68]	; 0x44
 8010e6a:	7805      	ldrb	r5, [r0, #0]
 8010e6c:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8010e70:	b2d9      	uxtb	r1, r3
 8010e72:	2909      	cmp	r1, #9
 8010e74:	d92b      	bls.n	8010ece <_strtod_l+0x1b6>
 8010e76:	4950      	ldr	r1, [pc, #320]	; (8010fb8 <_strtod_l+0x2a0>)
 8010e78:	2201      	movs	r2, #1
 8010e7a:	f000 fe3a 	bl	8011af2 <strncmp>
 8010e7e:	2800      	cmp	r0, #0
 8010e80:	d035      	beq.n	8010eee <_strtod_l+0x1d6>
 8010e82:	2000      	movs	r0, #0
 8010e84:	462a      	mov	r2, r5
 8010e86:	4633      	mov	r3, r6
 8010e88:	4683      	mov	fp, r0
 8010e8a:	4601      	mov	r1, r0
 8010e8c:	2a65      	cmp	r2, #101	; 0x65
 8010e8e:	d001      	beq.n	8010e94 <_strtod_l+0x17c>
 8010e90:	2a45      	cmp	r2, #69	; 0x45
 8010e92:	d118      	bne.n	8010ec6 <_strtod_l+0x1ae>
 8010e94:	b91b      	cbnz	r3, 8010e9e <_strtod_l+0x186>
 8010e96:	9b06      	ldr	r3, [sp, #24]
 8010e98:	4303      	orrs	r3, r0
 8010e9a:	d094      	beq.n	8010dc6 <_strtod_l+0xae>
 8010e9c:	2300      	movs	r3, #0
 8010e9e:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 8010ea2:	f10a 0201 	add.w	r2, sl, #1
 8010ea6:	9211      	str	r2, [sp, #68]	; 0x44
 8010ea8:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8010eac:	2a2b      	cmp	r2, #43	; 0x2b
 8010eae:	d075      	beq.n	8010f9c <_strtod_l+0x284>
 8010eb0:	2a2d      	cmp	r2, #45	; 0x2d
 8010eb2:	d07b      	beq.n	8010fac <_strtod_l+0x294>
 8010eb4:	f04f 0e00 	mov.w	lr, #0
 8010eb8:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8010ebc:	2d09      	cmp	r5, #9
 8010ebe:	f240 8083 	bls.w	8010fc8 <_strtod_l+0x2b0>
 8010ec2:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8010ec6:	2500      	movs	r5, #0
 8010ec8:	e09e      	b.n	8011008 <_strtod_l+0x2f0>
 8010eca:	2300      	movs	r3, #0
 8010ecc:	e7c4      	b.n	8010e58 <_strtod_l+0x140>
 8010ece:	2e08      	cmp	r6, #8
 8010ed0:	bfd5      	itete	le
 8010ed2:	9907      	ldrle	r1, [sp, #28]
 8010ed4:	9905      	ldrgt	r1, [sp, #20]
 8010ed6:	fb02 3301 	mlale	r3, r2, r1, r3
 8010eda:	fb02 3301 	mlagt	r3, r2, r1, r3
 8010ede:	f100 0001 	add.w	r0, r0, #1
 8010ee2:	bfd4      	ite	le
 8010ee4:	9307      	strle	r3, [sp, #28]
 8010ee6:	9305      	strgt	r3, [sp, #20]
 8010ee8:	3601      	adds	r6, #1
 8010eea:	9011      	str	r0, [sp, #68]	; 0x44
 8010eec:	e7bc      	b.n	8010e68 <_strtod_l+0x150>
 8010eee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010ef0:	1c5a      	adds	r2, r3, #1
 8010ef2:	9211      	str	r2, [sp, #68]	; 0x44
 8010ef4:	785a      	ldrb	r2, [r3, #1]
 8010ef6:	b3ae      	cbz	r6, 8010f64 <_strtod_l+0x24c>
 8010ef8:	4683      	mov	fp, r0
 8010efa:	4633      	mov	r3, r6
 8010efc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8010f00:	2909      	cmp	r1, #9
 8010f02:	d912      	bls.n	8010f2a <_strtod_l+0x212>
 8010f04:	2101      	movs	r1, #1
 8010f06:	e7c1      	b.n	8010e8c <_strtod_l+0x174>
 8010f08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010f0a:	1c5a      	adds	r2, r3, #1
 8010f0c:	9211      	str	r2, [sp, #68]	; 0x44
 8010f0e:	785a      	ldrb	r2, [r3, #1]
 8010f10:	3001      	adds	r0, #1
 8010f12:	2a30      	cmp	r2, #48	; 0x30
 8010f14:	d0f8      	beq.n	8010f08 <_strtod_l+0x1f0>
 8010f16:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8010f1a:	2b08      	cmp	r3, #8
 8010f1c:	f200 8495 	bhi.w	801184a <_strtod_l+0xb32>
 8010f20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010f22:	9309      	str	r3, [sp, #36]	; 0x24
 8010f24:	4683      	mov	fp, r0
 8010f26:	2000      	movs	r0, #0
 8010f28:	4603      	mov	r3, r0
 8010f2a:	3a30      	subs	r2, #48	; 0x30
 8010f2c:	f100 0101 	add.w	r1, r0, #1
 8010f30:	d012      	beq.n	8010f58 <_strtod_l+0x240>
 8010f32:	448b      	add	fp, r1
 8010f34:	eb00 0c03 	add.w	ip, r0, r3
 8010f38:	4619      	mov	r1, r3
 8010f3a:	250a      	movs	r5, #10
 8010f3c:	4561      	cmp	r1, ip
 8010f3e:	d113      	bne.n	8010f68 <_strtod_l+0x250>
 8010f40:	1819      	adds	r1, r3, r0
 8010f42:	2908      	cmp	r1, #8
 8010f44:	f103 0301 	add.w	r3, r3, #1
 8010f48:	4403      	add	r3, r0
 8010f4a:	dc1b      	bgt.n	8010f84 <_strtod_l+0x26c>
 8010f4c:	9807      	ldr	r0, [sp, #28]
 8010f4e:	210a      	movs	r1, #10
 8010f50:	fb01 2200 	mla	r2, r1, r0, r2
 8010f54:	9207      	str	r2, [sp, #28]
 8010f56:	2100      	movs	r1, #0
 8010f58:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010f5a:	1c50      	adds	r0, r2, #1
 8010f5c:	9011      	str	r0, [sp, #68]	; 0x44
 8010f5e:	7852      	ldrb	r2, [r2, #1]
 8010f60:	4608      	mov	r0, r1
 8010f62:	e7cb      	b.n	8010efc <_strtod_l+0x1e4>
 8010f64:	4630      	mov	r0, r6
 8010f66:	e7d4      	b.n	8010f12 <_strtod_l+0x1fa>
 8010f68:	2908      	cmp	r1, #8
 8010f6a:	f101 0101 	add.w	r1, r1, #1
 8010f6e:	dc03      	bgt.n	8010f78 <_strtod_l+0x260>
 8010f70:	9f07      	ldr	r7, [sp, #28]
 8010f72:	436f      	muls	r7, r5
 8010f74:	9707      	str	r7, [sp, #28]
 8010f76:	e7e1      	b.n	8010f3c <_strtod_l+0x224>
 8010f78:	2910      	cmp	r1, #16
 8010f7a:	bfde      	ittt	le
 8010f7c:	9f05      	ldrle	r7, [sp, #20]
 8010f7e:	436f      	mulle	r7, r5
 8010f80:	9705      	strle	r7, [sp, #20]
 8010f82:	e7db      	b.n	8010f3c <_strtod_l+0x224>
 8010f84:	2b10      	cmp	r3, #16
 8010f86:	bfdf      	itttt	le
 8010f88:	9805      	ldrle	r0, [sp, #20]
 8010f8a:	210a      	movle	r1, #10
 8010f8c:	fb01 2200 	mlale	r2, r1, r0, r2
 8010f90:	9205      	strle	r2, [sp, #20]
 8010f92:	e7e0      	b.n	8010f56 <_strtod_l+0x23e>
 8010f94:	f04f 0b00 	mov.w	fp, #0
 8010f98:	2101      	movs	r1, #1
 8010f9a:	e77c      	b.n	8010e96 <_strtod_l+0x17e>
 8010f9c:	f04f 0e00 	mov.w	lr, #0
 8010fa0:	f10a 0202 	add.w	r2, sl, #2
 8010fa4:	9211      	str	r2, [sp, #68]	; 0x44
 8010fa6:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8010faa:	e785      	b.n	8010eb8 <_strtod_l+0x1a0>
 8010fac:	f04f 0e01 	mov.w	lr, #1
 8010fb0:	e7f6      	b.n	8010fa0 <_strtod_l+0x288>
 8010fb2:	bf00      	nop
 8010fb4:	08016568 	.word	0x08016568
 8010fb8:	08016559 	.word	0x08016559
 8010fbc:	7ff00000 	.word	0x7ff00000
 8010fc0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010fc2:	1c55      	adds	r5, r2, #1
 8010fc4:	9511      	str	r5, [sp, #68]	; 0x44
 8010fc6:	7852      	ldrb	r2, [r2, #1]
 8010fc8:	2a30      	cmp	r2, #48	; 0x30
 8010fca:	d0f9      	beq.n	8010fc0 <_strtod_l+0x2a8>
 8010fcc:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8010fd0:	2d08      	cmp	r5, #8
 8010fd2:	f63f af78 	bhi.w	8010ec6 <_strtod_l+0x1ae>
 8010fd6:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8010fda:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010fdc:	920a      	str	r2, [sp, #40]	; 0x28
 8010fde:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010fe0:	1c55      	adds	r5, r2, #1
 8010fe2:	9511      	str	r5, [sp, #68]	; 0x44
 8010fe4:	7852      	ldrb	r2, [r2, #1]
 8010fe6:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8010fea:	2f09      	cmp	r7, #9
 8010fec:	d937      	bls.n	801105e <_strtod_l+0x346>
 8010fee:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8010ff0:	1bed      	subs	r5, r5, r7
 8010ff2:	2d08      	cmp	r5, #8
 8010ff4:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8010ff8:	dc02      	bgt.n	8011000 <_strtod_l+0x2e8>
 8010ffa:	4565      	cmp	r5, ip
 8010ffc:	bfa8      	it	ge
 8010ffe:	4665      	movge	r5, ip
 8011000:	f1be 0f00 	cmp.w	lr, #0
 8011004:	d000      	beq.n	8011008 <_strtod_l+0x2f0>
 8011006:	426d      	negs	r5, r5
 8011008:	2b00      	cmp	r3, #0
 801100a:	d14d      	bne.n	80110a8 <_strtod_l+0x390>
 801100c:	9b06      	ldr	r3, [sp, #24]
 801100e:	4303      	orrs	r3, r0
 8011010:	f47f aebd 	bne.w	8010d8e <_strtod_l+0x76>
 8011014:	2900      	cmp	r1, #0
 8011016:	f47f aed6 	bne.w	8010dc6 <_strtod_l+0xae>
 801101a:	2a69      	cmp	r2, #105	; 0x69
 801101c:	d027      	beq.n	801106e <_strtod_l+0x356>
 801101e:	dc24      	bgt.n	801106a <_strtod_l+0x352>
 8011020:	2a49      	cmp	r2, #73	; 0x49
 8011022:	d024      	beq.n	801106e <_strtod_l+0x356>
 8011024:	2a4e      	cmp	r2, #78	; 0x4e
 8011026:	f47f aece 	bne.w	8010dc6 <_strtod_l+0xae>
 801102a:	4995      	ldr	r1, [pc, #596]	; (8011280 <_strtod_l+0x568>)
 801102c:	a811      	add	r0, sp, #68	; 0x44
 801102e:	f001 f97d 	bl	801232c <__match>
 8011032:	2800      	cmp	r0, #0
 8011034:	f43f aec7 	beq.w	8010dc6 <_strtod_l+0xae>
 8011038:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801103a:	781b      	ldrb	r3, [r3, #0]
 801103c:	2b28      	cmp	r3, #40	; 0x28
 801103e:	d12d      	bne.n	801109c <_strtod_l+0x384>
 8011040:	4990      	ldr	r1, [pc, #576]	; (8011284 <_strtod_l+0x56c>)
 8011042:	aa14      	add	r2, sp, #80	; 0x50
 8011044:	a811      	add	r0, sp, #68	; 0x44
 8011046:	f001 f985 	bl	8012354 <__hexnan>
 801104a:	2805      	cmp	r0, #5
 801104c:	d126      	bne.n	801109c <_strtod_l+0x384>
 801104e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011050:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8011054:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8011058:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801105c:	e697      	b.n	8010d8e <_strtod_l+0x76>
 801105e:	250a      	movs	r5, #10
 8011060:	fb05 2c0c 	mla	ip, r5, ip, r2
 8011064:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8011068:	e7b9      	b.n	8010fde <_strtod_l+0x2c6>
 801106a:	2a6e      	cmp	r2, #110	; 0x6e
 801106c:	e7db      	b.n	8011026 <_strtod_l+0x30e>
 801106e:	4986      	ldr	r1, [pc, #536]	; (8011288 <_strtod_l+0x570>)
 8011070:	a811      	add	r0, sp, #68	; 0x44
 8011072:	f001 f95b 	bl	801232c <__match>
 8011076:	2800      	cmp	r0, #0
 8011078:	f43f aea5 	beq.w	8010dc6 <_strtod_l+0xae>
 801107c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801107e:	4983      	ldr	r1, [pc, #524]	; (801128c <_strtod_l+0x574>)
 8011080:	3b01      	subs	r3, #1
 8011082:	a811      	add	r0, sp, #68	; 0x44
 8011084:	9311      	str	r3, [sp, #68]	; 0x44
 8011086:	f001 f951 	bl	801232c <__match>
 801108a:	b910      	cbnz	r0, 8011092 <_strtod_l+0x37a>
 801108c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801108e:	3301      	adds	r3, #1
 8011090:	9311      	str	r3, [sp, #68]	; 0x44
 8011092:	f8df 920c 	ldr.w	r9, [pc, #524]	; 80112a0 <_strtod_l+0x588>
 8011096:	f04f 0800 	mov.w	r8, #0
 801109a:	e678      	b.n	8010d8e <_strtod_l+0x76>
 801109c:	487c      	ldr	r0, [pc, #496]	; (8011290 <_strtod_l+0x578>)
 801109e:	f000 fe2b 	bl	8011cf8 <nan>
 80110a2:	ec59 8b10 	vmov	r8, r9, d0
 80110a6:	e672      	b.n	8010d8e <_strtod_l+0x76>
 80110a8:	eddd 7a07 	vldr	s15, [sp, #28]
 80110ac:	eba5 020b 	sub.w	r2, r5, fp
 80110b0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80110b4:	2e00      	cmp	r6, #0
 80110b6:	bf08      	it	eq
 80110b8:	461e      	moveq	r6, r3
 80110ba:	2b10      	cmp	r3, #16
 80110bc:	9206      	str	r2, [sp, #24]
 80110be:	461a      	mov	r2, r3
 80110c0:	bfa8      	it	ge
 80110c2:	2210      	movge	r2, #16
 80110c4:	2b09      	cmp	r3, #9
 80110c6:	ec59 8b17 	vmov	r8, r9, d7
 80110ca:	dd0c      	ble.n	80110e6 <_strtod_l+0x3ce>
 80110cc:	4971      	ldr	r1, [pc, #452]	; (8011294 <_strtod_l+0x57c>)
 80110ce:	eddd 6a05 	vldr	s13, [sp, #20]
 80110d2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80110d6:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 80110da:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80110de:	eea7 6b05 	vfma.f64	d6, d7, d5
 80110e2:	ec59 8b16 	vmov	r8, r9, d6
 80110e6:	2b0f      	cmp	r3, #15
 80110e8:	dc37      	bgt.n	801115a <_strtod_l+0x442>
 80110ea:	9906      	ldr	r1, [sp, #24]
 80110ec:	2900      	cmp	r1, #0
 80110ee:	f43f ae4e 	beq.w	8010d8e <_strtod_l+0x76>
 80110f2:	dd23      	ble.n	801113c <_strtod_l+0x424>
 80110f4:	2916      	cmp	r1, #22
 80110f6:	dc0b      	bgt.n	8011110 <_strtod_l+0x3f8>
 80110f8:	4b66      	ldr	r3, [pc, #408]	; (8011294 <_strtod_l+0x57c>)
 80110fa:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80110fe:	ed93 7b00 	vldr	d7, [r3]
 8011102:	ec49 8b16 	vmov	d6, r8, r9
 8011106:	ee27 7b06 	vmul.f64	d7, d7, d6
 801110a:	ec59 8b17 	vmov	r8, r9, d7
 801110e:	e63e      	b.n	8010d8e <_strtod_l+0x76>
 8011110:	9806      	ldr	r0, [sp, #24]
 8011112:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8011116:	4281      	cmp	r1, r0
 8011118:	db1f      	blt.n	801115a <_strtod_l+0x442>
 801111a:	4a5e      	ldr	r2, [pc, #376]	; (8011294 <_strtod_l+0x57c>)
 801111c:	f1c3 030f 	rsb	r3, r3, #15
 8011120:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8011124:	ed91 7b00 	vldr	d7, [r1]
 8011128:	ec49 8b16 	vmov	d6, r8, r9
 801112c:	1ac3      	subs	r3, r0, r3
 801112e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8011132:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011136:	ed92 6b00 	vldr	d6, [r2]
 801113a:	e7e4      	b.n	8011106 <_strtod_l+0x3ee>
 801113c:	9906      	ldr	r1, [sp, #24]
 801113e:	3116      	adds	r1, #22
 8011140:	db0b      	blt.n	801115a <_strtod_l+0x442>
 8011142:	4b54      	ldr	r3, [pc, #336]	; (8011294 <_strtod_l+0x57c>)
 8011144:	ebab 0505 	sub.w	r5, fp, r5
 8011148:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801114c:	ed95 7b00 	vldr	d7, [r5]
 8011150:	ec49 8b16 	vmov	d6, r8, r9
 8011154:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011158:	e7d7      	b.n	801110a <_strtod_l+0x3f2>
 801115a:	9906      	ldr	r1, [sp, #24]
 801115c:	1a9a      	subs	r2, r3, r2
 801115e:	440a      	add	r2, r1
 8011160:	2a00      	cmp	r2, #0
 8011162:	dd6e      	ble.n	8011242 <_strtod_l+0x52a>
 8011164:	f012 000f 	ands.w	r0, r2, #15
 8011168:	d00a      	beq.n	8011180 <_strtod_l+0x468>
 801116a:	494a      	ldr	r1, [pc, #296]	; (8011294 <_strtod_l+0x57c>)
 801116c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8011170:	ed91 7b00 	vldr	d7, [r1]
 8011174:	ec49 8b16 	vmov	d6, r8, r9
 8011178:	ee27 7b06 	vmul.f64	d7, d7, d6
 801117c:	ec59 8b17 	vmov	r8, r9, d7
 8011180:	f032 020f 	bics.w	r2, r2, #15
 8011184:	d04e      	beq.n	8011224 <_strtod_l+0x50c>
 8011186:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 801118a:	dd22      	ble.n	80111d2 <_strtod_l+0x4ba>
 801118c:	2500      	movs	r5, #0
 801118e:	462e      	mov	r6, r5
 8011190:	9507      	str	r5, [sp, #28]
 8011192:	462f      	mov	r7, r5
 8011194:	2322      	movs	r3, #34	; 0x22
 8011196:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80112a0 <_strtod_l+0x588>
 801119a:	6023      	str	r3, [r4, #0]
 801119c:	f04f 0800 	mov.w	r8, #0
 80111a0:	9b07      	ldr	r3, [sp, #28]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	f43f adf3 	beq.w	8010d8e <_strtod_l+0x76>
 80111a8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80111aa:	4620      	mov	r0, r4
 80111ac:	f001 fa74 	bl	8012698 <_Bfree>
 80111b0:	4639      	mov	r1, r7
 80111b2:	4620      	mov	r0, r4
 80111b4:	f001 fa70 	bl	8012698 <_Bfree>
 80111b8:	4631      	mov	r1, r6
 80111ba:	4620      	mov	r0, r4
 80111bc:	f001 fa6c 	bl	8012698 <_Bfree>
 80111c0:	9907      	ldr	r1, [sp, #28]
 80111c2:	4620      	mov	r0, r4
 80111c4:	f001 fa68 	bl	8012698 <_Bfree>
 80111c8:	4629      	mov	r1, r5
 80111ca:	4620      	mov	r0, r4
 80111cc:	f001 fa64 	bl	8012698 <_Bfree>
 80111d0:	e5dd      	b.n	8010d8e <_strtod_l+0x76>
 80111d2:	2000      	movs	r0, #0
 80111d4:	ec49 8b17 	vmov	d7, r8, r9
 80111d8:	4f2f      	ldr	r7, [pc, #188]	; (8011298 <_strtod_l+0x580>)
 80111da:	1112      	asrs	r2, r2, #4
 80111dc:	4601      	mov	r1, r0
 80111de:	2a01      	cmp	r2, #1
 80111e0:	dc23      	bgt.n	801122a <_strtod_l+0x512>
 80111e2:	b108      	cbz	r0, 80111e8 <_strtod_l+0x4d0>
 80111e4:	ec59 8b17 	vmov	r8, r9, d7
 80111e8:	4a2b      	ldr	r2, [pc, #172]	; (8011298 <_strtod_l+0x580>)
 80111ea:	482c      	ldr	r0, [pc, #176]	; (801129c <_strtod_l+0x584>)
 80111ec:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80111f0:	ed92 7b00 	vldr	d7, [r2]
 80111f4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80111f8:	ec49 8b16 	vmov	d6, r8, r9
 80111fc:	4a28      	ldr	r2, [pc, #160]	; (80112a0 <_strtod_l+0x588>)
 80111fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011202:	ee17 1a90 	vmov	r1, s15
 8011206:	400a      	ands	r2, r1
 8011208:	4282      	cmp	r2, r0
 801120a:	ec59 8b17 	vmov	r8, r9, d7
 801120e:	d8bd      	bhi.n	801118c <_strtod_l+0x474>
 8011210:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8011214:	4282      	cmp	r2, r0
 8011216:	bf86      	itte	hi
 8011218:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 80112a4 <_strtod_l+0x58c>
 801121c:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8011220:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8011224:	2200      	movs	r2, #0
 8011226:	9205      	str	r2, [sp, #20]
 8011228:	e076      	b.n	8011318 <_strtod_l+0x600>
 801122a:	f012 0f01 	tst.w	r2, #1
 801122e:	d004      	beq.n	801123a <_strtod_l+0x522>
 8011230:	ed97 6b00 	vldr	d6, [r7]
 8011234:	2001      	movs	r0, #1
 8011236:	ee27 7b06 	vmul.f64	d7, d7, d6
 801123a:	3101      	adds	r1, #1
 801123c:	1052      	asrs	r2, r2, #1
 801123e:	3708      	adds	r7, #8
 8011240:	e7cd      	b.n	80111de <_strtod_l+0x4c6>
 8011242:	d0ef      	beq.n	8011224 <_strtod_l+0x50c>
 8011244:	4252      	negs	r2, r2
 8011246:	f012 000f 	ands.w	r0, r2, #15
 801124a:	d00a      	beq.n	8011262 <_strtod_l+0x54a>
 801124c:	4911      	ldr	r1, [pc, #68]	; (8011294 <_strtod_l+0x57c>)
 801124e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8011252:	ed91 7b00 	vldr	d7, [r1]
 8011256:	ec49 8b16 	vmov	d6, r8, r9
 801125a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801125e:	ec59 8b17 	vmov	r8, r9, d7
 8011262:	1112      	asrs	r2, r2, #4
 8011264:	d0de      	beq.n	8011224 <_strtod_l+0x50c>
 8011266:	2a1f      	cmp	r2, #31
 8011268:	dd1e      	ble.n	80112a8 <_strtod_l+0x590>
 801126a:	2500      	movs	r5, #0
 801126c:	462e      	mov	r6, r5
 801126e:	9507      	str	r5, [sp, #28]
 8011270:	462f      	mov	r7, r5
 8011272:	2322      	movs	r3, #34	; 0x22
 8011274:	f04f 0800 	mov.w	r8, #0
 8011278:	f04f 0900 	mov.w	r9, #0
 801127c:	6023      	str	r3, [r4, #0]
 801127e:	e78f      	b.n	80111a0 <_strtod_l+0x488>
 8011280:	08016564 	.word	0x08016564
 8011284:	0801657c 	.word	0x0801657c
 8011288:	0801655b 	.word	0x0801655b
 801128c:	0801655e 	.word	0x0801655e
 8011290:	08016756 	.word	0x08016756
 8011294:	08016850 	.word	0x08016850
 8011298:	08016828 	.word	0x08016828
 801129c:	7ca00000 	.word	0x7ca00000
 80112a0:	7ff00000 	.word	0x7ff00000
 80112a4:	7fefffff 	.word	0x7fefffff
 80112a8:	f012 0110 	ands.w	r1, r2, #16
 80112ac:	bf18      	it	ne
 80112ae:	216a      	movne	r1, #106	; 0x6a
 80112b0:	9105      	str	r1, [sp, #20]
 80112b2:	ec49 8b17 	vmov	d7, r8, r9
 80112b6:	49be      	ldr	r1, [pc, #760]	; (80115b0 <_strtod_l+0x898>)
 80112b8:	2000      	movs	r0, #0
 80112ba:	07d7      	lsls	r7, r2, #31
 80112bc:	d504      	bpl.n	80112c8 <_strtod_l+0x5b0>
 80112be:	ed91 6b00 	vldr	d6, [r1]
 80112c2:	2001      	movs	r0, #1
 80112c4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80112c8:	1052      	asrs	r2, r2, #1
 80112ca:	f101 0108 	add.w	r1, r1, #8
 80112ce:	d1f4      	bne.n	80112ba <_strtod_l+0x5a2>
 80112d0:	b108      	cbz	r0, 80112d6 <_strtod_l+0x5be>
 80112d2:	ec59 8b17 	vmov	r8, r9, d7
 80112d6:	9a05      	ldr	r2, [sp, #20]
 80112d8:	b1ba      	cbz	r2, 801130a <_strtod_l+0x5f2>
 80112da:	f3c9 510a 	ubfx	r1, r9, #20, #11
 80112de:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 80112e2:	2a00      	cmp	r2, #0
 80112e4:	4648      	mov	r0, r9
 80112e6:	dd10      	ble.n	801130a <_strtod_l+0x5f2>
 80112e8:	2a1f      	cmp	r2, #31
 80112ea:	f340 812c 	ble.w	8011546 <_strtod_l+0x82e>
 80112ee:	2a34      	cmp	r2, #52	; 0x34
 80112f0:	bfde      	ittt	le
 80112f2:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80112f6:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 80112fa:	408a      	lslle	r2, r1
 80112fc:	f04f 0800 	mov.w	r8, #0
 8011300:	bfcc      	ite	gt
 8011302:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8011306:	ea02 0900 	andle.w	r9, r2, r0
 801130a:	ec49 8b17 	vmov	d7, r8, r9
 801130e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011316:	d0a8      	beq.n	801126a <_strtod_l+0x552>
 8011318:	9a07      	ldr	r2, [sp, #28]
 801131a:	9200      	str	r2, [sp, #0]
 801131c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801131e:	4632      	mov	r2, r6
 8011320:	4620      	mov	r0, r4
 8011322:	f001 fa21 	bl	8012768 <__s2b>
 8011326:	9007      	str	r0, [sp, #28]
 8011328:	2800      	cmp	r0, #0
 801132a:	f43f af2f 	beq.w	801118c <_strtod_l+0x474>
 801132e:	9a06      	ldr	r2, [sp, #24]
 8011330:	2a00      	cmp	r2, #0
 8011332:	ebab 0305 	sub.w	r3, fp, r5
 8011336:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8011590 <_strtod_l+0x878>
 801133a:	bfa8      	it	ge
 801133c:	2300      	movge	r3, #0
 801133e:	ed9f ab96 	vldr	d10, [pc, #600]	; 8011598 <_strtod_l+0x880>
 8011342:	ed9f bb97 	vldr	d11, [pc, #604]	; 80115a0 <_strtod_l+0x888>
 8011346:	9309      	str	r3, [sp, #36]	; 0x24
 8011348:	2500      	movs	r5, #0
 801134a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801134e:	930c      	str	r3, [sp, #48]	; 0x30
 8011350:	462e      	mov	r6, r5
 8011352:	9b07      	ldr	r3, [sp, #28]
 8011354:	4620      	mov	r0, r4
 8011356:	6859      	ldr	r1, [r3, #4]
 8011358:	f001 f95e 	bl	8012618 <_Balloc>
 801135c:	4607      	mov	r7, r0
 801135e:	2800      	cmp	r0, #0
 8011360:	f43f af18 	beq.w	8011194 <_strtod_l+0x47c>
 8011364:	9b07      	ldr	r3, [sp, #28]
 8011366:	691a      	ldr	r2, [r3, #16]
 8011368:	3202      	adds	r2, #2
 801136a:	f103 010c 	add.w	r1, r3, #12
 801136e:	0092      	lsls	r2, r2, #2
 8011370:	300c      	adds	r0, #12
 8011372:	f000 fcb2 	bl	8011cda <memcpy>
 8011376:	ec49 8b10 	vmov	d0, r8, r9
 801137a:	aa14      	add	r2, sp, #80	; 0x50
 801137c:	a913      	add	r1, sp, #76	; 0x4c
 801137e:	4620      	mov	r0, r4
 8011380:	f001 fd26 	bl	8012dd0 <__d2b>
 8011384:	ec49 8b18 	vmov	d8, r8, r9
 8011388:	9012      	str	r0, [sp, #72]	; 0x48
 801138a:	2800      	cmp	r0, #0
 801138c:	f43f af02 	beq.w	8011194 <_strtod_l+0x47c>
 8011390:	2101      	movs	r1, #1
 8011392:	4620      	mov	r0, r4
 8011394:	f001 fa80 	bl	8012898 <__i2b>
 8011398:	4606      	mov	r6, r0
 801139a:	2800      	cmp	r0, #0
 801139c:	f43f aefa 	beq.w	8011194 <_strtod_l+0x47c>
 80113a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80113a2:	9914      	ldr	r1, [sp, #80]	; 0x50
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	bfab      	itete	ge
 80113a8:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 80113aa:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 80113ac:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 80113b0:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 80113b4:	bfac      	ite	ge
 80113b6:	eb03 0b02 	addge.w	fp, r3, r2
 80113ba:	eba2 0a03 	sublt.w	sl, r2, r3
 80113be:	9a05      	ldr	r2, [sp, #20]
 80113c0:	1a9b      	subs	r3, r3, r2
 80113c2:	440b      	add	r3, r1
 80113c4:	4a7b      	ldr	r2, [pc, #492]	; (80115b4 <_strtod_l+0x89c>)
 80113c6:	3b01      	subs	r3, #1
 80113c8:	4293      	cmp	r3, r2
 80113ca:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 80113ce:	f280 80cd 	bge.w	801156c <_strtod_l+0x854>
 80113d2:	1ad2      	subs	r2, r2, r3
 80113d4:	2a1f      	cmp	r2, #31
 80113d6:	eba1 0102 	sub.w	r1, r1, r2
 80113da:	f04f 0001 	mov.w	r0, #1
 80113de:	f300 80b9 	bgt.w	8011554 <_strtod_l+0x83c>
 80113e2:	fa00 f302 	lsl.w	r3, r0, r2
 80113e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80113e8:	2300      	movs	r3, #0
 80113ea:	930a      	str	r3, [sp, #40]	; 0x28
 80113ec:	eb0b 0301 	add.w	r3, fp, r1
 80113f0:	9a05      	ldr	r2, [sp, #20]
 80113f2:	459b      	cmp	fp, r3
 80113f4:	448a      	add	sl, r1
 80113f6:	4492      	add	sl, r2
 80113f8:	465a      	mov	r2, fp
 80113fa:	bfa8      	it	ge
 80113fc:	461a      	movge	r2, r3
 80113fe:	4552      	cmp	r2, sl
 8011400:	bfa8      	it	ge
 8011402:	4652      	movge	r2, sl
 8011404:	2a00      	cmp	r2, #0
 8011406:	bfc2      	ittt	gt
 8011408:	1a9b      	subgt	r3, r3, r2
 801140a:	ebaa 0a02 	subgt.w	sl, sl, r2
 801140e:	ebab 0b02 	subgt.w	fp, fp, r2
 8011412:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011414:	2a00      	cmp	r2, #0
 8011416:	dd18      	ble.n	801144a <_strtod_l+0x732>
 8011418:	4631      	mov	r1, r6
 801141a:	4620      	mov	r0, r4
 801141c:	930f      	str	r3, [sp, #60]	; 0x3c
 801141e:	f001 fafb 	bl	8012a18 <__pow5mult>
 8011422:	4606      	mov	r6, r0
 8011424:	2800      	cmp	r0, #0
 8011426:	f43f aeb5 	beq.w	8011194 <_strtod_l+0x47c>
 801142a:	4601      	mov	r1, r0
 801142c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801142e:	4620      	mov	r0, r4
 8011430:	f001 fa48 	bl	80128c4 <__multiply>
 8011434:	900e      	str	r0, [sp, #56]	; 0x38
 8011436:	2800      	cmp	r0, #0
 8011438:	f43f aeac 	beq.w	8011194 <_strtod_l+0x47c>
 801143c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801143e:	4620      	mov	r0, r4
 8011440:	f001 f92a 	bl	8012698 <_Bfree>
 8011444:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011446:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011448:	9212      	str	r2, [sp, #72]	; 0x48
 801144a:	2b00      	cmp	r3, #0
 801144c:	f300 8093 	bgt.w	8011576 <_strtod_l+0x85e>
 8011450:	9b06      	ldr	r3, [sp, #24]
 8011452:	2b00      	cmp	r3, #0
 8011454:	dd08      	ble.n	8011468 <_strtod_l+0x750>
 8011456:	4639      	mov	r1, r7
 8011458:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801145a:	4620      	mov	r0, r4
 801145c:	f001 fadc 	bl	8012a18 <__pow5mult>
 8011460:	4607      	mov	r7, r0
 8011462:	2800      	cmp	r0, #0
 8011464:	f43f ae96 	beq.w	8011194 <_strtod_l+0x47c>
 8011468:	f1ba 0f00 	cmp.w	sl, #0
 801146c:	dd08      	ble.n	8011480 <_strtod_l+0x768>
 801146e:	4639      	mov	r1, r7
 8011470:	4652      	mov	r2, sl
 8011472:	4620      	mov	r0, r4
 8011474:	f001 fb2a 	bl	8012acc <__lshift>
 8011478:	4607      	mov	r7, r0
 801147a:	2800      	cmp	r0, #0
 801147c:	f43f ae8a 	beq.w	8011194 <_strtod_l+0x47c>
 8011480:	f1bb 0f00 	cmp.w	fp, #0
 8011484:	dd08      	ble.n	8011498 <_strtod_l+0x780>
 8011486:	4631      	mov	r1, r6
 8011488:	465a      	mov	r2, fp
 801148a:	4620      	mov	r0, r4
 801148c:	f001 fb1e 	bl	8012acc <__lshift>
 8011490:	4606      	mov	r6, r0
 8011492:	2800      	cmp	r0, #0
 8011494:	f43f ae7e 	beq.w	8011194 <_strtod_l+0x47c>
 8011498:	9912      	ldr	r1, [sp, #72]	; 0x48
 801149a:	463a      	mov	r2, r7
 801149c:	4620      	mov	r0, r4
 801149e:	f001 fb9d 	bl	8012bdc <__mdiff>
 80114a2:	4605      	mov	r5, r0
 80114a4:	2800      	cmp	r0, #0
 80114a6:	f43f ae75 	beq.w	8011194 <_strtod_l+0x47c>
 80114aa:	2300      	movs	r3, #0
 80114ac:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80114b0:	60c3      	str	r3, [r0, #12]
 80114b2:	4631      	mov	r1, r6
 80114b4:	f001 fb76 	bl	8012ba4 <__mcmp>
 80114b8:	2800      	cmp	r0, #0
 80114ba:	da7f      	bge.n	80115bc <_strtod_l+0x8a4>
 80114bc:	ea5a 0a08 	orrs.w	sl, sl, r8
 80114c0:	f040 80a5 	bne.w	801160e <_strtod_l+0x8f6>
 80114c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	f040 80a0 	bne.w	801160e <_strtod_l+0x8f6>
 80114ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80114d2:	0d1b      	lsrs	r3, r3, #20
 80114d4:	051b      	lsls	r3, r3, #20
 80114d6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80114da:	f240 8098 	bls.w	801160e <_strtod_l+0x8f6>
 80114de:	696b      	ldr	r3, [r5, #20]
 80114e0:	b91b      	cbnz	r3, 80114ea <_strtod_l+0x7d2>
 80114e2:	692b      	ldr	r3, [r5, #16]
 80114e4:	2b01      	cmp	r3, #1
 80114e6:	f340 8092 	ble.w	801160e <_strtod_l+0x8f6>
 80114ea:	4629      	mov	r1, r5
 80114ec:	2201      	movs	r2, #1
 80114ee:	4620      	mov	r0, r4
 80114f0:	f001 faec 	bl	8012acc <__lshift>
 80114f4:	4631      	mov	r1, r6
 80114f6:	4605      	mov	r5, r0
 80114f8:	f001 fb54 	bl	8012ba4 <__mcmp>
 80114fc:	2800      	cmp	r0, #0
 80114fe:	f340 8086 	ble.w	801160e <_strtod_l+0x8f6>
 8011502:	9905      	ldr	r1, [sp, #20]
 8011504:	4a2c      	ldr	r2, [pc, #176]	; (80115b8 <_strtod_l+0x8a0>)
 8011506:	464b      	mov	r3, r9
 8011508:	2900      	cmp	r1, #0
 801150a:	f000 809f 	beq.w	801164c <_strtod_l+0x934>
 801150e:	ea02 0109 	and.w	r1, r2, r9
 8011512:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8011516:	f300 8099 	bgt.w	801164c <_strtod_l+0x934>
 801151a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801151e:	f77f aea8 	ble.w	8011272 <_strtod_l+0x55a>
 8011522:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80115a8 <_strtod_l+0x890>
 8011526:	ec49 8b16 	vmov	d6, r8, r9
 801152a:	4b23      	ldr	r3, [pc, #140]	; (80115b8 <_strtod_l+0x8a0>)
 801152c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8011530:	ee17 2a90 	vmov	r2, s15
 8011534:	4013      	ands	r3, r2
 8011536:	ec59 8b17 	vmov	r8, r9, d7
 801153a:	2b00      	cmp	r3, #0
 801153c:	f47f ae34 	bne.w	80111a8 <_strtod_l+0x490>
 8011540:	2322      	movs	r3, #34	; 0x22
 8011542:	6023      	str	r3, [r4, #0]
 8011544:	e630      	b.n	80111a8 <_strtod_l+0x490>
 8011546:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801154a:	fa01 f202 	lsl.w	r2, r1, r2
 801154e:	ea02 0808 	and.w	r8, r2, r8
 8011552:	e6da      	b.n	801130a <_strtod_l+0x5f2>
 8011554:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8011558:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801155c:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8011560:	33e2      	adds	r3, #226	; 0xe2
 8011562:	fa00 f303 	lsl.w	r3, r0, r3
 8011566:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 801156a:	e73f      	b.n	80113ec <_strtod_l+0x6d4>
 801156c:	2200      	movs	r2, #0
 801156e:	2301      	movs	r3, #1
 8011570:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8011574:	e73a      	b.n	80113ec <_strtod_l+0x6d4>
 8011576:	9912      	ldr	r1, [sp, #72]	; 0x48
 8011578:	461a      	mov	r2, r3
 801157a:	4620      	mov	r0, r4
 801157c:	f001 faa6 	bl	8012acc <__lshift>
 8011580:	9012      	str	r0, [sp, #72]	; 0x48
 8011582:	2800      	cmp	r0, #0
 8011584:	f47f af64 	bne.w	8011450 <_strtod_l+0x738>
 8011588:	e604      	b.n	8011194 <_strtod_l+0x47c>
 801158a:	bf00      	nop
 801158c:	f3af 8000 	nop.w
 8011590:	94a03595 	.word	0x94a03595
 8011594:	3fcfffff 	.word	0x3fcfffff
 8011598:	94a03595 	.word	0x94a03595
 801159c:	3fdfffff 	.word	0x3fdfffff
 80115a0:	35afe535 	.word	0x35afe535
 80115a4:	3fe00000 	.word	0x3fe00000
 80115a8:	00000000 	.word	0x00000000
 80115ac:	39500000 	.word	0x39500000
 80115b0:	08016590 	.word	0x08016590
 80115b4:	fffffc02 	.word	0xfffffc02
 80115b8:	7ff00000 	.word	0x7ff00000
 80115bc:	46cb      	mov	fp, r9
 80115be:	d15f      	bne.n	8011680 <_strtod_l+0x968>
 80115c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80115c4:	f1ba 0f00 	cmp.w	sl, #0
 80115c8:	d02a      	beq.n	8011620 <_strtod_l+0x908>
 80115ca:	4aa7      	ldr	r2, [pc, #668]	; (8011868 <_strtod_l+0xb50>)
 80115cc:	4293      	cmp	r3, r2
 80115ce:	d12b      	bne.n	8011628 <_strtod_l+0x910>
 80115d0:	9b05      	ldr	r3, [sp, #20]
 80115d2:	4642      	mov	r2, r8
 80115d4:	b1fb      	cbz	r3, 8011616 <_strtod_l+0x8fe>
 80115d6:	4ba5      	ldr	r3, [pc, #660]	; (801186c <_strtod_l+0xb54>)
 80115d8:	ea09 0303 	and.w	r3, r9, r3
 80115dc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80115e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80115e4:	d81a      	bhi.n	801161c <_strtod_l+0x904>
 80115e6:	0d1b      	lsrs	r3, r3, #20
 80115e8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80115ec:	fa01 f303 	lsl.w	r3, r1, r3
 80115f0:	429a      	cmp	r2, r3
 80115f2:	d119      	bne.n	8011628 <_strtod_l+0x910>
 80115f4:	4b9e      	ldr	r3, [pc, #632]	; (8011870 <_strtod_l+0xb58>)
 80115f6:	459b      	cmp	fp, r3
 80115f8:	d102      	bne.n	8011600 <_strtod_l+0x8e8>
 80115fa:	3201      	adds	r2, #1
 80115fc:	f43f adca 	beq.w	8011194 <_strtod_l+0x47c>
 8011600:	4b9a      	ldr	r3, [pc, #616]	; (801186c <_strtod_l+0xb54>)
 8011602:	ea0b 0303 	and.w	r3, fp, r3
 8011606:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801160a:	f04f 0800 	mov.w	r8, #0
 801160e:	9b05      	ldr	r3, [sp, #20]
 8011610:	2b00      	cmp	r3, #0
 8011612:	d186      	bne.n	8011522 <_strtod_l+0x80a>
 8011614:	e5c8      	b.n	80111a8 <_strtod_l+0x490>
 8011616:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801161a:	e7e9      	b.n	80115f0 <_strtod_l+0x8d8>
 801161c:	460b      	mov	r3, r1
 801161e:	e7e7      	b.n	80115f0 <_strtod_l+0x8d8>
 8011620:	ea53 0308 	orrs.w	r3, r3, r8
 8011624:	f43f af6d 	beq.w	8011502 <_strtod_l+0x7ea>
 8011628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801162a:	b1cb      	cbz	r3, 8011660 <_strtod_l+0x948>
 801162c:	ea13 0f0b 	tst.w	r3, fp
 8011630:	d0ed      	beq.n	801160e <_strtod_l+0x8f6>
 8011632:	9a05      	ldr	r2, [sp, #20]
 8011634:	4640      	mov	r0, r8
 8011636:	4649      	mov	r1, r9
 8011638:	f1ba 0f00 	cmp.w	sl, #0
 801163c:	d014      	beq.n	8011668 <_strtod_l+0x950>
 801163e:	f7ff fb4f 	bl	8010ce0 <sulp>
 8011642:	ee38 7b00 	vadd.f64	d7, d8, d0
 8011646:	ec59 8b17 	vmov	r8, r9, d7
 801164a:	e7e0      	b.n	801160e <_strtod_l+0x8f6>
 801164c:	4013      	ands	r3, r2
 801164e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011652:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8011656:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801165a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801165e:	e7d6      	b.n	801160e <_strtod_l+0x8f6>
 8011660:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011662:	ea13 0f08 	tst.w	r3, r8
 8011666:	e7e3      	b.n	8011630 <_strtod_l+0x918>
 8011668:	f7ff fb3a 	bl	8010ce0 <sulp>
 801166c:	ee38 0b40 	vsub.f64	d0, d8, d0
 8011670:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8011674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011678:	ec59 8b10 	vmov	r8, r9, d0
 801167c:	d1c7      	bne.n	801160e <_strtod_l+0x8f6>
 801167e:	e5f8      	b.n	8011272 <_strtod_l+0x55a>
 8011680:	4631      	mov	r1, r6
 8011682:	4628      	mov	r0, r5
 8011684:	f001 fbfe 	bl	8012e84 <__ratio>
 8011688:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801168c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8011690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011694:	d85f      	bhi.n	8011756 <_strtod_l+0xa3e>
 8011696:	f1ba 0f00 	cmp.w	sl, #0
 801169a:	d166      	bne.n	801176a <_strtod_l+0xa52>
 801169c:	f1b8 0f00 	cmp.w	r8, #0
 80116a0:	d14d      	bne.n	801173e <_strtod_l+0xa26>
 80116a2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80116a6:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d162      	bne.n	8011774 <_strtod_l+0xa5c>
 80116ae:	eeb4 0bcd 	vcmpe.f64	d0, d13
 80116b2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 80116b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116ba:	d401      	bmi.n	80116c0 <_strtod_l+0x9a8>
 80116bc:	ee20 db0d 	vmul.f64	d13, d0, d13
 80116c0:	eeb1 cb4d 	vneg.f64	d12, d13
 80116c4:	4869      	ldr	r0, [pc, #420]	; (801186c <_strtod_l+0xb54>)
 80116c6:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 8011878 <_strtod_l+0xb60>
 80116ca:	ea0b 0100 	and.w	r1, fp, r0
 80116ce:	4561      	cmp	r1, ip
 80116d0:	ec53 2b1c 	vmov	r2, r3, d12
 80116d4:	d17a      	bne.n	80117cc <_strtod_l+0xab4>
 80116d6:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 80116da:	ec49 8b10 	vmov	d0, r8, r9
 80116de:	910a      	str	r1, [sp, #40]	; 0x28
 80116e0:	f001 fb06 	bl	8012cf0 <__ulp>
 80116e4:	ec49 8b1e 	vmov	d14, r8, r9
 80116e8:	4860      	ldr	r0, [pc, #384]	; (801186c <_strtod_l+0xb54>)
 80116ea:	eea0 eb0c 	vfma.f64	d14, d0, d12
 80116ee:	ee1e 3a90 	vmov	r3, s29
 80116f2:	4a60      	ldr	r2, [pc, #384]	; (8011874 <_strtod_l+0xb5c>)
 80116f4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80116f6:	4018      	ands	r0, r3
 80116f8:	4290      	cmp	r0, r2
 80116fa:	ec59 8b1e 	vmov	r8, r9, d14
 80116fe:	d93c      	bls.n	801177a <_strtod_l+0xa62>
 8011700:	ee18 2a90 	vmov	r2, s17
 8011704:	4b5a      	ldr	r3, [pc, #360]	; (8011870 <_strtod_l+0xb58>)
 8011706:	429a      	cmp	r2, r3
 8011708:	d104      	bne.n	8011714 <_strtod_l+0x9fc>
 801170a:	ee18 3a10 	vmov	r3, s16
 801170e:	3301      	adds	r3, #1
 8011710:	f43f ad40 	beq.w	8011194 <_strtod_l+0x47c>
 8011714:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8011870 <_strtod_l+0xb58>
 8011718:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801171c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801171e:	4620      	mov	r0, r4
 8011720:	f000 ffba 	bl	8012698 <_Bfree>
 8011724:	4639      	mov	r1, r7
 8011726:	4620      	mov	r0, r4
 8011728:	f000 ffb6 	bl	8012698 <_Bfree>
 801172c:	4631      	mov	r1, r6
 801172e:	4620      	mov	r0, r4
 8011730:	f000 ffb2 	bl	8012698 <_Bfree>
 8011734:	4629      	mov	r1, r5
 8011736:	4620      	mov	r0, r4
 8011738:	f000 ffae 	bl	8012698 <_Bfree>
 801173c:	e609      	b.n	8011352 <_strtod_l+0x63a>
 801173e:	f1b8 0f01 	cmp.w	r8, #1
 8011742:	d103      	bne.n	801174c <_strtod_l+0xa34>
 8011744:	f1b9 0f00 	cmp.w	r9, #0
 8011748:	f43f ad93 	beq.w	8011272 <_strtod_l+0x55a>
 801174c:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8011750:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8011754:	e7b6      	b.n	80116c4 <_strtod_l+0x9ac>
 8011756:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801175a:	ee20 db0d 	vmul.f64	d13, d0, d13
 801175e:	f1ba 0f00 	cmp.w	sl, #0
 8011762:	d0ad      	beq.n	80116c0 <_strtod_l+0x9a8>
 8011764:	eeb0 cb4d 	vmov.f64	d12, d13
 8011768:	e7ac      	b.n	80116c4 <_strtod_l+0x9ac>
 801176a:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 801176e:	eeb0 db4c 	vmov.f64	d13, d12
 8011772:	e7a7      	b.n	80116c4 <_strtod_l+0x9ac>
 8011774:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8011778:	e7a4      	b.n	80116c4 <_strtod_l+0x9ac>
 801177a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801177e:	9b05      	ldr	r3, [sp, #20]
 8011780:	46cb      	mov	fp, r9
 8011782:	2b00      	cmp	r3, #0
 8011784:	d1ca      	bne.n	801171c <_strtod_l+0xa04>
 8011786:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801178a:	0d1b      	lsrs	r3, r3, #20
 801178c:	051b      	lsls	r3, r3, #20
 801178e:	4299      	cmp	r1, r3
 8011790:	d1c4      	bne.n	801171c <_strtod_l+0xa04>
 8011792:	ec51 0b1d 	vmov	r0, r1, d13
 8011796:	f7ee ff77 	bl	8000688 <__aeabi_d2lz>
 801179a:	f7ee ff2f 	bl	80005fc <__aeabi_l2d>
 801179e:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 80117a2:	ec41 0b17 	vmov	d7, r0, r1
 80117a6:	ea4b 0b08 	orr.w	fp, fp, r8
 80117aa:	ea5b 0b0a 	orrs.w	fp, fp, sl
 80117ae:	ee3d db47 	vsub.f64	d13, d13, d7
 80117b2:	d03c      	beq.n	801182e <_strtod_l+0xb16>
 80117b4:	eeb4 dbca 	vcmpe.f64	d13, d10
 80117b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117bc:	f53f acf4 	bmi.w	80111a8 <_strtod_l+0x490>
 80117c0:	eeb4 dbcb 	vcmpe.f64	d13, d11
 80117c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117c8:	dda8      	ble.n	801171c <_strtod_l+0xa04>
 80117ca:	e4ed      	b.n	80111a8 <_strtod_l+0x490>
 80117cc:	9805      	ldr	r0, [sp, #20]
 80117ce:	b1f0      	cbz	r0, 801180e <_strtod_l+0xaf6>
 80117d0:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 80117d4:	d81b      	bhi.n	801180e <_strtod_l+0xaf6>
 80117d6:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8011860 <_strtod_l+0xb48>
 80117da:	eeb4 dbc7 	vcmpe.f64	d13, d7
 80117de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117e2:	d811      	bhi.n	8011808 <_strtod_l+0xaf0>
 80117e4:	eebc dbcd 	vcvt.u32.f64	s26, d13
 80117e8:	ee1d 3a10 	vmov	r3, s26
 80117ec:	2b01      	cmp	r3, #1
 80117ee:	bf38      	it	cc
 80117f0:	2301      	movcc	r3, #1
 80117f2:	ee0d 3a10 	vmov	s26, r3
 80117f6:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 80117fa:	f1ba 0f00 	cmp.w	sl, #0
 80117fe:	d113      	bne.n	8011828 <_strtod_l+0xb10>
 8011800:	eeb1 7b4d 	vneg.f64	d7, d13
 8011804:	ec53 2b17 	vmov	r2, r3, d7
 8011808:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 801180c:	1a43      	subs	r3, r0, r1
 801180e:	eeb0 0b48 	vmov.f64	d0, d8
 8011812:	ec43 2b1c 	vmov	d12, r2, r3
 8011816:	910a      	str	r1, [sp, #40]	; 0x28
 8011818:	f001 fa6a 	bl	8012cf0 <__ulp>
 801181c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801181e:	eeac 8b00 	vfma.f64	d8, d12, d0
 8011822:	ec59 8b18 	vmov	r8, r9, d8
 8011826:	e7aa      	b.n	801177e <_strtod_l+0xa66>
 8011828:	eeb0 7b4d 	vmov.f64	d7, d13
 801182c:	e7ea      	b.n	8011804 <_strtod_l+0xaec>
 801182e:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8011832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011836:	f57f af71 	bpl.w	801171c <_strtod_l+0xa04>
 801183a:	e4b5      	b.n	80111a8 <_strtod_l+0x490>
 801183c:	2300      	movs	r3, #0
 801183e:	9308      	str	r3, [sp, #32]
 8011840:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011842:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011844:	6013      	str	r3, [r2, #0]
 8011846:	f7ff baa6 	b.w	8010d96 <_strtod_l+0x7e>
 801184a:	2a65      	cmp	r2, #101	; 0x65
 801184c:	f43f aba2 	beq.w	8010f94 <_strtod_l+0x27c>
 8011850:	2a45      	cmp	r2, #69	; 0x45
 8011852:	f43f ab9f 	beq.w	8010f94 <_strtod_l+0x27c>
 8011856:	2101      	movs	r1, #1
 8011858:	f7ff bbd8 	b.w	801100c <_strtod_l+0x2f4>
 801185c:	f3af 8000 	nop.w
 8011860:	ffc00000 	.word	0xffc00000
 8011864:	41dfffff 	.word	0x41dfffff
 8011868:	000fffff 	.word	0x000fffff
 801186c:	7ff00000 	.word	0x7ff00000
 8011870:	7fefffff 	.word	0x7fefffff
 8011874:	7c9fffff 	.word	0x7c9fffff
 8011878:	7fe00000 	.word	0x7fe00000

0801187c <strtod>:
 801187c:	460a      	mov	r2, r1
 801187e:	4601      	mov	r1, r0
 8011880:	4802      	ldr	r0, [pc, #8]	; (801188c <strtod+0x10>)
 8011882:	4b03      	ldr	r3, [pc, #12]	; (8011890 <strtod+0x14>)
 8011884:	6800      	ldr	r0, [r0, #0]
 8011886:	f7ff ba47 	b.w	8010d18 <_strtod_l>
 801188a:	bf00      	nop
 801188c:	200001f0 	.word	0x200001f0
 8011890:	20000038 	.word	0x20000038

08011894 <std>:
 8011894:	2300      	movs	r3, #0
 8011896:	b510      	push	{r4, lr}
 8011898:	4604      	mov	r4, r0
 801189a:	e9c0 3300 	strd	r3, r3, [r0]
 801189e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80118a2:	6083      	str	r3, [r0, #8]
 80118a4:	8181      	strh	r1, [r0, #12]
 80118a6:	6643      	str	r3, [r0, #100]	; 0x64
 80118a8:	81c2      	strh	r2, [r0, #14]
 80118aa:	6183      	str	r3, [r0, #24]
 80118ac:	4619      	mov	r1, r3
 80118ae:	2208      	movs	r2, #8
 80118b0:	305c      	adds	r0, #92	; 0x5c
 80118b2:	f000 f916 	bl	8011ae2 <memset>
 80118b6:	4b0d      	ldr	r3, [pc, #52]	; (80118ec <std+0x58>)
 80118b8:	6263      	str	r3, [r4, #36]	; 0x24
 80118ba:	4b0d      	ldr	r3, [pc, #52]	; (80118f0 <std+0x5c>)
 80118bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80118be:	4b0d      	ldr	r3, [pc, #52]	; (80118f4 <std+0x60>)
 80118c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80118c2:	4b0d      	ldr	r3, [pc, #52]	; (80118f8 <std+0x64>)
 80118c4:	6323      	str	r3, [r4, #48]	; 0x30
 80118c6:	4b0d      	ldr	r3, [pc, #52]	; (80118fc <std+0x68>)
 80118c8:	6224      	str	r4, [r4, #32]
 80118ca:	429c      	cmp	r4, r3
 80118cc:	d006      	beq.n	80118dc <std+0x48>
 80118ce:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80118d2:	4294      	cmp	r4, r2
 80118d4:	d002      	beq.n	80118dc <std+0x48>
 80118d6:	33d0      	adds	r3, #208	; 0xd0
 80118d8:	429c      	cmp	r4, r3
 80118da:	d105      	bne.n	80118e8 <std+0x54>
 80118dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80118e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80118e4:	f000 b9f6 	b.w	8011cd4 <__retarget_lock_init_recursive>
 80118e8:	bd10      	pop	{r4, pc}
 80118ea:	bf00      	nop
 80118ec:	08011a3d 	.word	0x08011a3d
 80118f0:	08011a5f 	.word	0x08011a5f
 80118f4:	08011a97 	.word	0x08011a97
 80118f8:	08011abb 	.word	0x08011abb
 80118fc:	2000a884 	.word	0x2000a884

08011900 <stdio_exit_handler>:
 8011900:	4a02      	ldr	r2, [pc, #8]	; (801190c <stdio_exit_handler+0xc>)
 8011902:	4903      	ldr	r1, [pc, #12]	; (8011910 <stdio_exit_handler+0x10>)
 8011904:	4803      	ldr	r0, [pc, #12]	; (8011914 <stdio_exit_handler+0x14>)
 8011906:	f000 b869 	b.w	80119dc <_fwalk_sglue>
 801190a:	bf00      	nop
 801190c:	2000002c 	.word	0x2000002c
 8011910:	08013639 	.word	0x08013639
 8011914:	200001a4 	.word	0x200001a4

08011918 <cleanup_stdio>:
 8011918:	6841      	ldr	r1, [r0, #4]
 801191a:	4b0c      	ldr	r3, [pc, #48]	; (801194c <cleanup_stdio+0x34>)
 801191c:	4299      	cmp	r1, r3
 801191e:	b510      	push	{r4, lr}
 8011920:	4604      	mov	r4, r0
 8011922:	d001      	beq.n	8011928 <cleanup_stdio+0x10>
 8011924:	f001 fe88 	bl	8013638 <_fflush_r>
 8011928:	68a1      	ldr	r1, [r4, #8]
 801192a:	4b09      	ldr	r3, [pc, #36]	; (8011950 <cleanup_stdio+0x38>)
 801192c:	4299      	cmp	r1, r3
 801192e:	d002      	beq.n	8011936 <cleanup_stdio+0x1e>
 8011930:	4620      	mov	r0, r4
 8011932:	f001 fe81 	bl	8013638 <_fflush_r>
 8011936:	68e1      	ldr	r1, [r4, #12]
 8011938:	4b06      	ldr	r3, [pc, #24]	; (8011954 <cleanup_stdio+0x3c>)
 801193a:	4299      	cmp	r1, r3
 801193c:	d004      	beq.n	8011948 <cleanup_stdio+0x30>
 801193e:	4620      	mov	r0, r4
 8011940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011944:	f001 be78 	b.w	8013638 <_fflush_r>
 8011948:	bd10      	pop	{r4, pc}
 801194a:	bf00      	nop
 801194c:	2000a884 	.word	0x2000a884
 8011950:	2000a8ec 	.word	0x2000a8ec
 8011954:	2000a954 	.word	0x2000a954

08011958 <global_stdio_init.part.0>:
 8011958:	b510      	push	{r4, lr}
 801195a:	4b0b      	ldr	r3, [pc, #44]	; (8011988 <global_stdio_init.part.0+0x30>)
 801195c:	4c0b      	ldr	r4, [pc, #44]	; (801198c <global_stdio_init.part.0+0x34>)
 801195e:	4a0c      	ldr	r2, [pc, #48]	; (8011990 <global_stdio_init.part.0+0x38>)
 8011960:	601a      	str	r2, [r3, #0]
 8011962:	4620      	mov	r0, r4
 8011964:	2200      	movs	r2, #0
 8011966:	2104      	movs	r1, #4
 8011968:	f7ff ff94 	bl	8011894 <std>
 801196c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8011970:	2201      	movs	r2, #1
 8011972:	2109      	movs	r1, #9
 8011974:	f7ff ff8e 	bl	8011894 <std>
 8011978:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801197c:	2202      	movs	r2, #2
 801197e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011982:	2112      	movs	r1, #18
 8011984:	f7ff bf86 	b.w	8011894 <std>
 8011988:	2000a9bc 	.word	0x2000a9bc
 801198c:	2000a884 	.word	0x2000a884
 8011990:	08011901 	.word	0x08011901

08011994 <__sfp_lock_acquire>:
 8011994:	4801      	ldr	r0, [pc, #4]	; (801199c <__sfp_lock_acquire+0x8>)
 8011996:	f000 b99e 	b.w	8011cd6 <__retarget_lock_acquire_recursive>
 801199a:	bf00      	nop
 801199c:	2000a9c5 	.word	0x2000a9c5

080119a0 <__sfp_lock_release>:
 80119a0:	4801      	ldr	r0, [pc, #4]	; (80119a8 <__sfp_lock_release+0x8>)
 80119a2:	f000 b999 	b.w	8011cd8 <__retarget_lock_release_recursive>
 80119a6:	bf00      	nop
 80119a8:	2000a9c5 	.word	0x2000a9c5

080119ac <__sinit>:
 80119ac:	b510      	push	{r4, lr}
 80119ae:	4604      	mov	r4, r0
 80119b0:	f7ff fff0 	bl	8011994 <__sfp_lock_acquire>
 80119b4:	6a23      	ldr	r3, [r4, #32]
 80119b6:	b11b      	cbz	r3, 80119c0 <__sinit+0x14>
 80119b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80119bc:	f7ff bff0 	b.w	80119a0 <__sfp_lock_release>
 80119c0:	4b04      	ldr	r3, [pc, #16]	; (80119d4 <__sinit+0x28>)
 80119c2:	6223      	str	r3, [r4, #32]
 80119c4:	4b04      	ldr	r3, [pc, #16]	; (80119d8 <__sinit+0x2c>)
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d1f5      	bne.n	80119b8 <__sinit+0xc>
 80119cc:	f7ff ffc4 	bl	8011958 <global_stdio_init.part.0>
 80119d0:	e7f2      	b.n	80119b8 <__sinit+0xc>
 80119d2:	bf00      	nop
 80119d4:	08011919 	.word	0x08011919
 80119d8:	2000a9bc 	.word	0x2000a9bc

080119dc <_fwalk_sglue>:
 80119dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80119e0:	4607      	mov	r7, r0
 80119e2:	4688      	mov	r8, r1
 80119e4:	4614      	mov	r4, r2
 80119e6:	2600      	movs	r6, #0
 80119e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80119ec:	f1b9 0901 	subs.w	r9, r9, #1
 80119f0:	d505      	bpl.n	80119fe <_fwalk_sglue+0x22>
 80119f2:	6824      	ldr	r4, [r4, #0]
 80119f4:	2c00      	cmp	r4, #0
 80119f6:	d1f7      	bne.n	80119e8 <_fwalk_sglue+0xc>
 80119f8:	4630      	mov	r0, r6
 80119fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80119fe:	89ab      	ldrh	r3, [r5, #12]
 8011a00:	2b01      	cmp	r3, #1
 8011a02:	d907      	bls.n	8011a14 <_fwalk_sglue+0x38>
 8011a04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011a08:	3301      	adds	r3, #1
 8011a0a:	d003      	beq.n	8011a14 <_fwalk_sglue+0x38>
 8011a0c:	4629      	mov	r1, r5
 8011a0e:	4638      	mov	r0, r7
 8011a10:	47c0      	blx	r8
 8011a12:	4306      	orrs	r6, r0
 8011a14:	3568      	adds	r5, #104	; 0x68
 8011a16:	e7e9      	b.n	80119ec <_fwalk_sglue+0x10>

08011a18 <iprintf>:
 8011a18:	b40f      	push	{r0, r1, r2, r3}
 8011a1a:	b507      	push	{r0, r1, r2, lr}
 8011a1c:	4906      	ldr	r1, [pc, #24]	; (8011a38 <iprintf+0x20>)
 8011a1e:	ab04      	add	r3, sp, #16
 8011a20:	6808      	ldr	r0, [r1, #0]
 8011a22:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a26:	6881      	ldr	r1, [r0, #8]
 8011a28:	9301      	str	r3, [sp, #4]
 8011a2a:	f001 fad5 	bl	8012fd8 <_vfiprintf_r>
 8011a2e:	b003      	add	sp, #12
 8011a30:	f85d eb04 	ldr.w	lr, [sp], #4
 8011a34:	b004      	add	sp, #16
 8011a36:	4770      	bx	lr
 8011a38:	200001f0 	.word	0x200001f0

08011a3c <__sread>:
 8011a3c:	b510      	push	{r4, lr}
 8011a3e:	460c      	mov	r4, r1
 8011a40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a44:	f000 f8f8 	bl	8011c38 <_read_r>
 8011a48:	2800      	cmp	r0, #0
 8011a4a:	bfab      	itete	ge
 8011a4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011a4e:	89a3      	ldrhlt	r3, [r4, #12]
 8011a50:	181b      	addge	r3, r3, r0
 8011a52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011a56:	bfac      	ite	ge
 8011a58:	6563      	strge	r3, [r4, #84]	; 0x54
 8011a5a:	81a3      	strhlt	r3, [r4, #12]
 8011a5c:	bd10      	pop	{r4, pc}

08011a5e <__swrite>:
 8011a5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a62:	461f      	mov	r7, r3
 8011a64:	898b      	ldrh	r3, [r1, #12]
 8011a66:	05db      	lsls	r3, r3, #23
 8011a68:	4605      	mov	r5, r0
 8011a6a:	460c      	mov	r4, r1
 8011a6c:	4616      	mov	r6, r2
 8011a6e:	d505      	bpl.n	8011a7c <__swrite+0x1e>
 8011a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a74:	2302      	movs	r3, #2
 8011a76:	2200      	movs	r2, #0
 8011a78:	f000 f8cc 	bl	8011c14 <_lseek_r>
 8011a7c:	89a3      	ldrh	r3, [r4, #12]
 8011a7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011a82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011a86:	81a3      	strh	r3, [r4, #12]
 8011a88:	4632      	mov	r2, r6
 8011a8a:	463b      	mov	r3, r7
 8011a8c:	4628      	mov	r0, r5
 8011a8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011a92:	f000 b8e3 	b.w	8011c5c <_write_r>

08011a96 <__sseek>:
 8011a96:	b510      	push	{r4, lr}
 8011a98:	460c      	mov	r4, r1
 8011a9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a9e:	f000 f8b9 	bl	8011c14 <_lseek_r>
 8011aa2:	1c43      	adds	r3, r0, #1
 8011aa4:	89a3      	ldrh	r3, [r4, #12]
 8011aa6:	bf15      	itete	ne
 8011aa8:	6560      	strne	r0, [r4, #84]	; 0x54
 8011aaa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011aae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011ab2:	81a3      	strheq	r3, [r4, #12]
 8011ab4:	bf18      	it	ne
 8011ab6:	81a3      	strhne	r3, [r4, #12]
 8011ab8:	bd10      	pop	{r4, pc}

08011aba <__sclose>:
 8011aba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011abe:	f000 b899 	b.w	8011bf4 <_close_r>

08011ac2 <memcmp>:
 8011ac2:	b510      	push	{r4, lr}
 8011ac4:	3901      	subs	r1, #1
 8011ac6:	4402      	add	r2, r0
 8011ac8:	4290      	cmp	r0, r2
 8011aca:	d101      	bne.n	8011ad0 <memcmp+0xe>
 8011acc:	2000      	movs	r0, #0
 8011ace:	e005      	b.n	8011adc <memcmp+0x1a>
 8011ad0:	7803      	ldrb	r3, [r0, #0]
 8011ad2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011ad6:	42a3      	cmp	r3, r4
 8011ad8:	d001      	beq.n	8011ade <memcmp+0x1c>
 8011ada:	1b18      	subs	r0, r3, r4
 8011adc:	bd10      	pop	{r4, pc}
 8011ade:	3001      	adds	r0, #1
 8011ae0:	e7f2      	b.n	8011ac8 <memcmp+0x6>

08011ae2 <memset>:
 8011ae2:	4402      	add	r2, r0
 8011ae4:	4603      	mov	r3, r0
 8011ae6:	4293      	cmp	r3, r2
 8011ae8:	d100      	bne.n	8011aec <memset+0xa>
 8011aea:	4770      	bx	lr
 8011aec:	f803 1b01 	strb.w	r1, [r3], #1
 8011af0:	e7f9      	b.n	8011ae6 <memset+0x4>

08011af2 <strncmp>:
 8011af2:	b510      	push	{r4, lr}
 8011af4:	b16a      	cbz	r2, 8011b12 <strncmp+0x20>
 8011af6:	3901      	subs	r1, #1
 8011af8:	1884      	adds	r4, r0, r2
 8011afa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011afe:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011b02:	429a      	cmp	r2, r3
 8011b04:	d103      	bne.n	8011b0e <strncmp+0x1c>
 8011b06:	42a0      	cmp	r0, r4
 8011b08:	d001      	beq.n	8011b0e <strncmp+0x1c>
 8011b0a:	2a00      	cmp	r2, #0
 8011b0c:	d1f5      	bne.n	8011afa <strncmp+0x8>
 8011b0e:	1ad0      	subs	r0, r2, r3
 8011b10:	bd10      	pop	{r4, pc}
 8011b12:	4610      	mov	r0, r2
 8011b14:	e7fc      	b.n	8011b10 <strncmp+0x1e>

08011b16 <strncpy>:
 8011b16:	b510      	push	{r4, lr}
 8011b18:	3901      	subs	r1, #1
 8011b1a:	4603      	mov	r3, r0
 8011b1c:	b132      	cbz	r2, 8011b2c <strncpy+0x16>
 8011b1e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011b22:	f803 4b01 	strb.w	r4, [r3], #1
 8011b26:	3a01      	subs	r2, #1
 8011b28:	2c00      	cmp	r4, #0
 8011b2a:	d1f7      	bne.n	8011b1c <strncpy+0x6>
 8011b2c:	441a      	add	r2, r3
 8011b2e:	2100      	movs	r1, #0
 8011b30:	4293      	cmp	r3, r2
 8011b32:	d100      	bne.n	8011b36 <strncpy+0x20>
 8011b34:	bd10      	pop	{r4, pc}
 8011b36:	f803 1b01 	strb.w	r1, [r3], #1
 8011b3a:	e7f9      	b.n	8011b30 <strncpy+0x1a>

08011b3c <strtok>:
 8011b3c:	4b16      	ldr	r3, [pc, #88]	; (8011b98 <strtok+0x5c>)
 8011b3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011b40:	681e      	ldr	r6, [r3, #0]
 8011b42:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8011b44:	4605      	mov	r5, r0
 8011b46:	b9fc      	cbnz	r4, 8011b88 <strtok+0x4c>
 8011b48:	2050      	movs	r0, #80	; 0x50
 8011b4a:	9101      	str	r1, [sp, #4]
 8011b4c:	f000 fc9e 	bl	801248c <malloc>
 8011b50:	9901      	ldr	r1, [sp, #4]
 8011b52:	6470      	str	r0, [r6, #68]	; 0x44
 8011b54:	4602      	mov	r2, r0
 8011b56:	b920      	cbnz	r0, 8011b62 <strtok+0x26>
 8011b58:	4b10      	ldr	r3, [pc, #64]	; (8011b9c <strtok+0x60>)
 8011b5a:	4811      	ldr	r0, [pc, #68]	; (8011ba0 <strtok+0x64>)
 8011b5c:	215b      	movs	r1, #91	; 0x5b
 8011b5e:	f000 f8d3 	bl	8011d08 <__assert_func>
 8011b62:	e9c0 4400 	strd	r4, r4, [r0]
 8011b66:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8011b6a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8011b6e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8011b72:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8011b76:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8011b7a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8011b7e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8011b82:	6184      	str	r4, [r0, #24]
 8011b84:	7704      	strb	r4, [r0, #28]
 8011b86:	6244      	str	r4, [r0, #36]	; 0x24
 8011b88:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8011b8a:	2301      	movs	r3, #1
 8011b8c:	4628      	mov	r0, r5
 8011b8e:	b002      	add	sp, #8
 8011b90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011b94:	f000 b806 	b.w	8011ba4 <__strtok_r>
 8011b98:	200001f0 	.word	0x200001f0
 8011b9c:	080164ea 	.word	0x080164ea
 8011ba0:	080166b9 	.word	0x080166b9

08011ba4 <__strtok_r>:
 8011ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ba6:	b908      	cbnz	r0, 8011bac <__strtok_r+0x8>
 8011ba8:	6810      	ldr	r0, [r2, #0]
 8011baa:	b188      	cbz	r0, 8011bd0 <__strtok_r+0x2c>
 8011bac:	4604      	mov	r4, r0
 8011bae:	4620      	mov	r0, r4
 8011bb0:	f814 5b01 	ldrb.w	r5, [r4], #1
 8011bb4:	460f      	mov	r7, r1
 8011bb6:	f817 6b01 	ldrb.w	r6, [r7], #1
 8011bba:	b91e      	cbnz	r6, 8011bc4 <__strtok_r+0x20>
 8011bbc:	b965      	cbnz	r5, 8011bd8 <__strtok_r+0x34>
 8011bbe:	6015      	str	r5, [r2, #0]
 8011bc0:	4628      	mov	r0, r5
 8011bc2:	e005      	b.n	8011bd0 <__strtok_r+0x2c>
 8011bc4:	42b5      	cmp	r5, r6
 8011bc6:	d1f6      	bne.n	8011bb6 <__strtok_r+0x12>
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d1f0      	bne.n	8011bae <__strtok_r+0xa>
 8011bcc:	6014      	str	r4, [r2, #0]
 8011bce:	7003      	strb	r3, [r0, #0]
 8011bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011bd2:	461c      	mov	r4, r3
 8011bd4:	e00c      	b.n	8011bf0 <__strtok_r+0x4c>
 8011bd6:	b915      	cbnz	r5, 8011bde <__strtok_r+0x3a>
 8011bd8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011bdc:	460e      	mov	r6, r1
 8011bde:	f816 5b01 	ldrb.w	r5, [r6], #1
 8011be2:	42ab      	cmp	r3, r5
 8011be4:	d1f7      	bne.n	8011bd6 <__strtok_r+0x32>
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d0f3      	beq.n	8011bd2 <__strtok_r+0x2e>
 8011bea:	2300      	movs	r3, #0
 8011bec:	f804 3c01 	strb.w	r3, [r4, #-1]
 8011bf0:	6014      	str	r4, [r2, #0]
 8011bf2:	e7ed      	b.n	8011bd0 <__strtok_r+0x2c>

08011bf4 <_close_r>:
 8011bf4:	b538      	push	{r3, r4, r5, lr}
 8011bf6:	4d06      	ldr	r5, [pc, #24]	; (8011c10 <_close_r+0x1c>)
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	4604      	mov	r4, r0
 8011bfc:	4608      	mov	r0, r1
 8011bfe:	602b      	str	r3, [r5, #0]
 8011c00:	f7ef fc41 	bl	8001486 <_close>
 8011c04:	1c43      	adds	r3, r0, #1
 8011c06:	d102      	bne.n	8011c0e <_close_r+0x1a>
 8011c08:	682b      	ldr	r3, [r5, #0]
 8011c0a:	b103      	cbz	r3, 8011c0e <_close_r+0x1a>
 8011c0c:	6023      	str	r3, [r4, #0]
 8011c0e:	bd38      	pop	{r3, r4, r5, pc}
 8011c10:	2000a9c0 	.word	0x2000a9c0

08011c14 <_lseek_r>:
 8011c14:	b538      	push	{r3, r4, r5, lr}
 8011c16:	4d07      	ldr	r5, [pc, #28]	; (8011c34 <_lseek_r+0x20>)
 8011c18:	4604      	mov	r4, r0
 8011c1a:	4608      	mov	r0, r1
 8011c1c:	4611      	mov	r1, r2
 8011c1e:	2200      	movs	r2, #0
 8011c20:	602a      	str	r2, [r5, #0]
 8011c22:	461a      	mov	r2, r3
 8011c24:	f7ef fc56 	bl	80014d4 <_lseek>
 8011c28:	1c43      	adds	r3, r0, #1
 8011c2a:	d102      	bne.n	8011c32 <_lseek_r+0x1e>
 8011c2c:	682b      	ldr	r3, [r5, #0]
 8011c2e:	b103      	cbz	r3, 8011c32 <_lseek_r+0x1e>
 8011c30:	6023      	str	r3, [r4, #0]
 8011c32:	bd38      	pop	{r3, r4, r5, pc}
 8011c34:	2000a9c0 	.word	0x2000a9c0

08011c38 <_read_r>:
 8011c38:	b538      	push	{r3, r4, r5, lr}
 8011c3a:	4d07      	ldr	r5, [pc, #28]	; (8011c58 <_read_r+0x20>)
 8011c3c:	4604      	mov	r4, r0
 8011c3e:	4608      	mov	r0, r1
 8011c40:	4611      	mov	r1, r2
 8011c42:	2200      	movs	r2, #0
 8011c44:	602a      	str	r2, [r5, #0]
 8011c46:	461a      	mov	r2, r3
 8011c48:	f7ef fbe4 	bl	8001414 <_read>
 8011c4c:	1c43      	adds	r3, r0, #1
 8011c4e:	d102      	bne.n	8011c56 <_read_r+0x1e>
 8011c50:	682b      	ldr	r3, [r5, #0]
 8011c52:	b103      	cbz	r3, 8011c56 <_read_r+0x1e>
 8011c54:	6023      	str	r3, [r4, #0]
 8011c56:	bd38      	pop	{r3, r4, r5, pc}
 8011c58:	2000a9c0 	.word	0x2000a9c0

08011c5c <_write_r>:
 8011c5c:	b538      	push	{r3, r4, r5, lr}
 8011c5e:	4d07      	ldr	r5, [pc, #28]	; (8011c7c <_write_r+0x20>)
 8011c60:	4604      	mov	r4, r0
 8011c62:	4608      	mov	r0, r1
 8011c64:	4611      	mov	r1, r2
 8011c66:	2200      	movs	r2, #0
 8011c68:	602a      	str	r2, [r5, #0]
 8011c6a:	461a      	mov	r2, r3
 8011c6c:	f7ef fbef 	bl	800144e <_write>
 8011c70:	1c43      	adds	r3, r0, #1
 8011c72:	d102      	bne.n	8011c7a <_write_r+0x1e>
 8011c74:	682b      	ldr	r3, [r5, #0]
 8011c76:	b103      	cbz	r3, 8011c7a <_write_r+0x1e>
 8011c78:	6023      	str	r3, [r4, #0]
 8011c7a:	bd38      	pop	{r3, r4, r5, pc}
 8011c7c:	2000a9c0 	.word	0x2000a9c0

08011c80 <__errno>:
 8011c80:	4b01      	ldr	r3, [pc, #4]	; (8011c88 <__errno+0x8>)
 8011c82:	6818      	ldr	r0, [r3, #0]
 8011c84:	4770      	bx	lr
 8011c86:	bf00      	nop
 8011c88:	200001f0 	.word	0x200001f0

08011c8c <__libc_init_array>:
 8011c8c:	b570      	push	{r4, r5, r6, lr}
 8011c8e:	4d0d      	ldr	r5, [pc, #52]	; (8011cc4 <__libc_init_array+0x38>)
 8011c90:	4c0d      	ldr	r4, [pc, #52]	; (8011cc8 <__libc_init_array+0x3c>)
 8011c92:	1b64      	subs	r4, r4, r5
 8011c94:	10a4      	asrs	r4, r4, #2
 8011c96:	2600      	movs	r6, #0
 8011c98:	42a6      	cmp	r6, r4
 8011c9a:	d109      	bne.n	8011cb0 <__libc_init_array+0x24>
 8011c9c:	4d0b      	ldr	r5, [pc, #44]	; (8011ccc <__libc_init_array+0x40>)
 8011c9e:	4c0c      	ldr	r4, [pc, #48]	; (8011cd0 <__libc_init_array+0x44>)
 8011ca0:	f001 fe90 	bl	80139c4 <_init>
 8011ca4:	1b64      	subs	r4, r4, r5
 8011ca6:	10a4      	asrs	r4, r4, #2
 8011ca8:	2600      	movs	r6, #0
 8011caa:	42a6      	cmp	r6, r4
 8011cac:	d105      	bne.n	8011cba <__libc_init_array+0x2e>
 8011cae:	bd70      	pop	{r4, r5, r6, pc}
 8011cb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8011cb4:	4798      	blx	r3
 8011cb6:	3601      	adds	r6, #1
 8011cb8:	e7ee      	b.n	8011c98 <__libc_init_array+0xc>
 8011cba:	f855 3b04 	ldr.w	r3, [r5], #4
 8011cbe:	4798      	blx	r3
 8011cc0:	3601      	adds	r6, #1
 8011cc2:	e7f2      	b.n	8011caa <__libc_init_array+0x1e>
 8011cc4:	08016960 	.word	0x08016960
 8011cc8:	08016960 	.word	0x08016960
 8011ccc:	08016960 	.word	0x08016960
 8011cd0:	08016964 	.word	0x08016964

08011cd4 <__retarget_lock_init_recursive>:
 8011cd4:	4770      	bx	lr

08011cd6 <__retarget_lock_acquire_recursive>:
 8011cd6:	4770      	bx	lr

08011cd8 <__retarget_lock_release_recursive>:
 8011cd8:	4770      	bx	lr

08011cda <memcpy>:
 8011cda:	440a      	add	r2, r1
 8011cdc:	4291      	cmp	r1, r2
 8011cde:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011ce2:	d100      	bne.n	8011ce6 <memcpy+0xc>
 8011ce4:	4770      	bx	lr
 8011ce6:	b510      	push	{r4, lr}
 8011ce8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011cec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011cf0:	4291      	cmp	r1, r2
 8011cf2:	d1f9      	bne.n	8011ce8 <memcpy+0xe>
 8011cf4:	bd10      	pop	{r4, pc}
	...

08011cf8 <nan>:
 8011cf8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011d00 <nan+0x8>
 8011cfc:	4770      	bx	lr
 8011cfe:	bf00      	nop
 8011d00:	00000000 	.word	0x00000000
 8011d04:	7ff80000 	.word	0x7ff80000

08011d08 <__assert_func>:
 8011d08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011d0a:	4614      	mov	r4, r2
 8011d0c:	461a      	mov	r2, r3
 8011d0e:	4b09      	ldr	r3, [pc, #36]	; (8011d34 <__assert_func+0x2c>)
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	4605      	mov	r5, r0
 8011d14:	68d8      	ldr	r0, [r3, #12]
 8011d16:	b14c      	cbz	r4, 8011d2c <__assert_func+0x24>
 8011d18:	4b07      	ldr	r3, [pc, #28]	; (8011d38 <__assert_func+0x30>)
 8011d1a:	9100      	str	r1, [sp, #0]
 8011d1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011d20:	4906      	ldr	r1, [pc, #24]	; (8011d3c <__assert_func+0x34>)
 8011d22:	462b      	mov	r3, r5
 8011d24:	f001 fcb0 	bl	8013688 <fiprintf>
 8011d28:	f001 fd66 	bl	80137f8 <abort>
 8011d2c:	4b04      	ldr	r3, [pc, #16]	; (8011d40 <__assert_func+0x38>)
 8011d2e:	461c      	mov	r4, r3
 8011d30:	e7f3      	b.n	8011d1a <__assert_func+0x12>
 8011d32:	bf00      	nop
 8011d34:	200001f0 	.word	0x200001f0
 8011d38:	0801671b 	.word	0x0801671b
 8011d3c:	08016728 	.word	0x08016728
 8011d40:	08016756 	.word	0x08016756

08011d44 <_free_r>:
 8011d44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011d46:	2900      	cmp	r1, #0
 8011d48:	d044      	beq.n	8011dd4 <_free_r+0x90>
 8011d4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011d4e:	9001      	str	r0, [sp, #4]
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	f1a1 0404 	sub.w	r4, r1, #4
 8011d56:	bfb8      	it	lt
 8011d58:	18e4      	addlt	r4, r4, r3
 8011d5a:	f000 fc51 	bl	8012600 <__malloc_lock>
 8011d5e:	4a1e      	ldr	r2, [pc, #120]	; (8011dd8 <_free_r+0x94>)
 8011d60:	9801      	ldr	r0, [sp, #4]
 8011d62:	6813      	ldr	r3, [r2, #0]
 8011d64:	b933      	cbnz	r3, 8011d74 <_free_r+0x30>
 8011d66:	6063      	str	r3, [r4, #4]
 8011d68:	6014      	str	r4, [r2, #0]
 8011d6a:	b003      	add	sp, #12
 8011d6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011d70:	f000 bc4c 	b.w	801260c <__malloc_unlock>
 8011d74:	42a3      	cmp	r3, r4
 8011d76:	d908      	bls.n	8011d8a <_free_r+0x46>
 8011d78:	6825      	ldr	r5, [r4, #0]
 8011d7a:	1961      	adds	r1, r4, r5
 8011d7c:	428b      	cmp	r3, r1
 8011d7e:	bf01      	itttt	eq
 8011d80:	6819      	ldreq	r1, [r3, #0]
 8011d82:	685b      	ldreq	r3, [r3, #4]
 8011d84:	1949      	addeq	r1, r1, r5
 8011d86:	6021      	streq	r1, [r4, #0]
 8011d88:	e7ed      	b.n	8011d66 <_free_r+0x22>
 8011d8a:	461a      	mov	r2, r3
 8011d8c:	685b      	ldr	r3, [r3, #4]
 8011d8e:	b10b      	cbz	r3, 8011d94 <_free_r+0x50>
 8011d90:	42a3      	cmp	r3, r4
 8011d92:	d9fa      	bls.n	8011d8a <_free_r+0x46>
 8011d94:	6811      	ldr	r1, [r2, #0]
 8011d96:	1855      	adds	r5, r2, r1
 8011d98:	42a5      	cmp	r5, r4
 8011d9a:	d10b      	bne.n	8011db4 <_free_r+0x70>
 8011d9c:	6824      	ldr	r4, [r4, #0]
 8011d9e:	4421      	add	r1, r4
 8011da0:	1854      	adds	r4, r2, r1
 8011da2:	42a3      	cmp	r3, r4
 8011da4:	6011      	str	r1, [r2, #0]
 8011da6:	d1e0      	bne.n	8011d6a <_free_r+0x26>
 8011da8:	681c      	ldr	r4, [r3, #0]
 8011daa:	685b      	ldr	r3, [r3, #4]
 8011dac:	6053      	str	r3, [r2, #4]
 8011dae:	440c      	add	r4, r1
 8011db0:	6014      	str	r4, [r2, #0]
 8011db2:	e7da      	b.n	8011d6a <_free_r+0x26>
 8011db4:	d902      	bls.n	8011dbc <_free_r+0x78>
 8011db6:	230c      	movs	r3, #12
 8011db8:	6003      	str	r3, [r0, #0]
 8011dba:	e7d6      	b.n	8011d6a <_free_r+0x26>
 8011dbc:	6825      	ldr	r5, [r4, #0]
 8011dbe:	1961      	adds	r1, r4, r5
 8011dc0:	428b      	cmp	r3, r1
 8011dc2:	bf04      	itt	eq
 8011dc4:	6819      	ldreq	r1, [r3, #0]
 8011dc6:	685b      	ldreq	r3, [r3, #4]
 8011dc8:	6063      	str	r3, [r4, #4]
 8011dca:	bf04      	itt	eq
 8011dcc:	1949      	addeq	r1, r1, r5
 8011dce:	6021      	streq	r1, [r4, #0]
 8011dd0:	6054      	str	r4, [r2, #4]
 8011dd2:	e7ca      	b.n	8011d6a <_free_r+0x26>
 8011dd4:	b003      	add	sp, #12
 8011dd6:	bd30      	pop	{r4, r5, pc}
 8011dd8:	2000a9c8 	.word	0x2000a9c8

08011ddc <rshift>:
 8011ddc:	6903      	ldr	r3, [r0, #16]
 8011dde:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011de2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011de6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011dea:	f100 0414 	add.w	r4, r0, #20
 8011dee:	dd45      	ble.n	8011e7c <rshift+0xa0>
 8011df0:	f011 011f 	ands.w	r1, r1, #31
 8011df4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011df8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011dfc:	d10c      	bne.n	8011e18 <rshift+0x3c>
 8011dfe:	f100 0710 	add.w	r7, r0, #16
 8011e02:	4629      	mov	r1, r5
 8011e04:	42b1      	cmp	r1, r6
 8011e06:	d334      	bcc.n	8011e72 <rshift+0x96>
 8011e08:	1a9b      	subs	r3, r3, r2
 8011e0a:	009b      	lsls	r3, r3, #2
 8011e0c:	1eea      	subs	r2, r5, #3
 8011e0e:	4296      	cmp	r6, r2
 8011e10:	bf38      	it	cc
 8011e12:	2300      	movcc	r3, #0
 8011e14:	4423      	add	r3, r4
 8011e16:	e015      	b.n	8011e44 <rshift+0x68>
 8011e18:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011e1c:	f1c1 0820 	rsb	r8, r1, #32
 8011e20:	40cf      	lsrs	r7, r1
 8011e22:	f105 0e04 	add.w	lr, r5, #4
 8011e26:	46a1      	mov	r9, r4
 8011e28:	4576      	cmp	r6, lr
 8011e2a:	46f4      	mov	ip, lr
 8011e2c:	d815      	bhi.n	8011e5a <rshift+0x7e>
 8011e2e:	1a9a      	subs	r2, r3, r2
 8011e30:	0092      	lsls	r2, r2, #2
 8011e32:	3a04      	subs	r2, #4
 8011e34:	3501      	adds	r5, #1
 8011e36:	42ae      	cmp	r6, r5
 8011e38:	bf38      	it	cc
 8011e3a:	2200      	movcc	r2, #0
 8011e3c:	18a3      	adds	r3, r4, r2
 8011e3e:	50a7      	str	r7, [r4, r2]
 8011e40:	b107      	cbz	r7, 8011e44 <rshift+0x68>
 8011e42:	3304      	adds	r3, #4
 8011e44:	1b1a      	subs	r2, r3, r4
 8011e46:	42a3      	cmp	r3, r4
 8011e48:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011e4c:	bf08      	it	eq
 8011e4e:	2300      	moveq	r3, #0
 8011e50:	6102      	str	r2, [r0, #16]
 8011e52:	bf08      	it	eq
 8011e54:	6143      	streq	r3, [r0, #20]
 8011e56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011e5a:	f8dc c000 	ldr.w	ip, [ip]
 8011e5e:	fa0c fc08 	lsl.w	ip, ip, r8
 8011e62:	ea4c 0707 	orr.w	r7, ip, r7
 8011e66:	f849 7b04 	str.w	r7, [r9], #4
 8011e6a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011e6e:	40cf      	lsrs	r7, r1
 8011e70:	e7da      	b.n	8011e28 <rshift+0x4c>
 8011e72:	f851 cb04 	ldr.w	ip, [r1], #4
 8011e76:	f847 cf04 	str.w	ip, [r7, #4]!
 8011e7a:	e7c3      	b.n	8011e04 <rshift+0x28>
 8011e7c:	4623      	mov	r3, r4
 8011e7e:	e7e1      	b.n	8011e44 <rshift+0x68>

08011e80 <__hexdig_fun>:
 8011e80:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011e84:	2b09      	cmp	r3, #9
 8011e86:	d802      	bhi.n	8011e8e <__hexdig_fun+0xe>
 8011e88:	3820      	subs	r0, #32
 8011e8a:	b2c0      	uxtb	r0, r0
 8011e8c:	4770      	bx	lr
 8011e8e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011e92:	2b05      	cmp	r3, #5
 8011e94:	d801      	bhi.n	8011e9a <__hexdig_fun+0x1a>
 8011e96:	3847      	subs	r0, #71	; 0x47
 8011e98:	e7f7      	b.n	8011e8a <__hexdig_fun+0xa>
 8011e9a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8011e9e:	2b05      	cmp	r3, #5
 8011ea0:	d801      	bhi.n	8011ea6 <__hexdig_fun+0x26>
 8011ea2:	3827      	subs	r0, #39	; 0x27
 8011ea4:	e7f1      	b.n	8011e8a <__hexdig_fun+0xa>
 8011ea6:	2000      	movs	r0, #0
 8011ea8:	4770      	bx	lr
	...

08011eac <__gethex>:
 8011eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011eb0:	4617      	mov	r7, r2
 8011eb2:	680a      	ldr	r2, [r1, #0]
 8011eb4:	b085      	sub	sp, #20
 8011eb6:	f102 0b02 	add.w	fp, r2, #2
 8011eba:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8011ebe:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011ec2:	4681      	mov	r9, r0
 8011ec4:	468a      	mov	sl, r1
 8011ec6:	9302      	str	r3, [sp, #8]
 8011ec8:	32fe      	adds	r2, #254	; 0xfe
 8011eca:	eb02 030b 	add.w	r3, r2, fp
 8011ece:	46d8      	mov	r8, fp
 8011ed0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8011ed4:	9301      	str	r3, [sp, #4]
 8011ed6:	2830      	cmp	r0, #48	; 0x30
 8011ed8:	d0f7      	beq.n	8011eca <__gethex+0x1e>
 8011eda:	f7ff ffd1 	bl	8011e80 <__hexdig_fun>
 8011ede:	4604      	mov	r4, r0
 8011ee0:	2800      	cmp	r0, #0
 8011ee2:	d138      	bne.n	8011f56 <__gethex+0xaa>
 8011ee4:	49a7      	ldr	r1, [pc, #668]	; (8012184 <__gethex+0x2d8>)
 8011ee6:	2201      	movs	r2, #1
 8011ee8:	4640      	mov	r0, r8
 8011eea:	f7ff fe02 	bl	8011af2 <strncmp>
 8011eee:	4606      	mov	r6, r0
 8011ef0:	2800      	cmp	r0, #0
 8011ef2:	d169      	bne.n	8011fc8 <__gethex+0x11c>
 8011ef4:	f898 0001 	ldrb.w	r0, [r8, #1]
 8011ef8:	465d      	mov	r5, fp
 8011efa:	f7ff ffc1 	bl	8011e80 <__hexdig_fun>
 8011efe:	2800      	cmp	r0, #0
 8011f00:	d064      	beq.n	8011fcc <__gethex+0x120>
 8011f02:	465a      	mov	r2, fp
 8011f04:	7810      	ldrb	r0, [r2, #0]
 8011f06:	2830      	cmp	r0, #48	; 0x30
 8011f08:	4690      	mov	r8, r2
 8011f0a:	f102 0201 	add.w	r2, r2, #1
 8011f0e:	d0f9      	beq.n	8011f04 <__gethex+0x58>
 8011f10:	f7ff ffb6 	bl	8011e80 <__hexdig_fun>
 8011f14:	2301      	movs	r3, #1
 8011f16:	fab0 f480 	clz	r4, r0
 8011f1a:	0964      	lsrs	r4, r4, #5
 8011f1c:	465e      	mov	r6, fp
 8011f1e:	9301      	str	r3, [sp, #4]
 8011f20:	4642      	mov	r2, r8
 8011f22:	4615      	mov	r5, r2
 8011f24:	3201      	adds	r2, #1
 8011f26:	7828      	ldrb	r0, [r5, #0]
 8011f28:	f7ff ffaa 	bl	8011e80 <__hexdig_fun>
 8011f2c:	2800      	cmp	r0, #0
 8011f2e:	d1f8      	bne.n	8011f22 <__gethex+0x76>
 8011f30:	4994      	ldr	r1, [pc, #592]	; (8012184 <__gethex+0x2d8>)
 8011f32:	2201      	movs	r2, #1
 8011f34:	4628      	mov	r0, r5
 8011f36:	f7ff fddc 	bl	8011af2 <strncmp>
 8011f3a:	b978      	cbnz	r0, 8011f5c <__gethex+0xb0>
 8011f3c:	b946      	cbnz	r6, 8011f50 <__gethex+0xa4>
 8011f3e:	1c6e      	adds	r6, r5, #1
 8011f40:	4632      	mov	r2, r6
 8011f42:	4615      	mov	r5, r2
 8011f44:	3201      	adds	r2, #1
 8011f46:	7828      	ldrb	r0, [r5, #0]
 8011f48:	f7ff ff9a 	bl	8011e80 <__hexdig_fun>
 8011f4c:	2800      	cmp	r0, #0
 8011f4e:	d1f8      	bne.n	8011f42 <__gethex+0x96>
 8011f50:	1b73      	subs	r3, r6, r5
 8011f52:	009e      	lsls	r6, r3, #2
 8011f54:	e004      	b.n	8011f60 <__gethex+0xb4>
 8011f56:	2400      	movs	r4, #0
 8011f58:	4626      	mov	r6, r4
 8011f5a:	e7e1      	b.n	8011f20 <__gethex+0x74>
 8011f5c:	2e00      	cmp	r6, #0
 8011f5e:	d1f7      	bne.n	8011f50 <__gethex+0xa4>
 8011f60:	782b      	ldrb	r3, [r5, #0]
 8011f62:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011f66:	2b50      	cmp	r3, #80	; 0x50
 8011f68:	d13d      	bne.n	8011fe6 <__gethex+0x13a>
 8011f6a:	786b      	ldrb	r3, [r5, #1]
 8011f6c:	2b2b      	cmp	r3, #43	; 0x2b
 8011f6e:	d02f      	beq.n	8011fd0 <__gethex+0x124>
 8011f70:	2b2d      	cmp	r3, #45	; 0x2d
 8011f72:	d031      	beq.n	8011fd8 <__gethex+0x12c>
 8011f74:	1c69      	adds	r1, r5, #1
 8011f76:	f04f 0b00 	mov.w	fp, #0
 8011f7a:	7808      	ldrb	r0, [r1, #0]
 8011f7c:	f7ff ff80 	bl	8011e80 <__hexdig_fun>
 8011f80:	1e42      	subs	r2, r0, #1
 8011f82:	b2d2      	uxtb	r2, r2
 8011f84:	2a18      	cmp	r2, #24
 8011f86:	d82e      	bhi.n	8011fe6 <__gethex+0x13a>
 8011f88:	f1a0 0210 	sub.w	r2, r0, #16
 8011f8c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011f90:	f7ff ff76 	bl	8011e80 <__hexdig_fun>
 8011f94:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8011f98:	fa5f fc8c 	uxtb.w	ip, ip
 8011f9c:	f1bc 0f18 	cmp.w	ip, #24
 8011fa0:	d91d      	bls.n	8011fde <__gethex+0x132>
 8011fa2:	f1bb 0f00 	cmp.w	fp, #0
 8011fa6:	d000      	beq.n	8011faa <__gethex+0xfe>
 8011fa8:	4252      	negs	r2, r2
 8011faa:	4416      	add	r6, r2
 8011fac:	f8ca 1000 	str.w	r1, [sl]
 8011fb0:	b1dc      	cbz	r4, 8011fea <__gethex+0x13e>
 8011fb2:	9b01      	ldr	r3, [sp, #4]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	bf14      	ite	ne
 8011fb8:	f04f 0800 	movne.w	r8, #0
 8011fbc:	f04f 0806 	moveq.w	r8, #6
 8011fc0:	4640      	mov	r0, r8
 8011fc2:	b005      	add	sp, #20
 8011fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fc8:	4645      	mov	r5, r8
 8011fca:	4626      	mov	r6, r4
 8011fcc:	2401      	movs	r4, #1
 8011fce:	e7c7      	b.n	8011f60 <__gethex+0xb4>
 8011fd0:	f04f 0b00 	mov.w	fp, #0
 8011fd4:	1ca9      	adds	r1, r5, #2
 8011fd6:	e7d0      	b.n	8011f7a <__gethex+0xce>
 8011fd8:	f04f 0b01 	mov.w	fp, #1
 8011fdc:	e7fa      	b.n	8011fd4 <__gethex+0x128>
 8011fde:	230a      	movs	r3, #10
 8011fe0:	fb03 0002 	mla	r0, r3, r2, r0
 8011fe4:	e7d0      	b.n	8011f88 <__gethex+0xdc>
 8011fe6:	4629      	mov	r1, r5
 8011fe8:	e7e0      	b.n	8011fac <__gethex+0x100>
 8011fea:	eba5 0308 	sub.w	r3, r5, r8
 8011fee:	3b01      	subs	r3, #1
 8011ff0:	4621      	mov	r1, r4
 8011ff2:	2b07      	cmp	r3, #7
 8011ff4:	dc0a      	bgt.n	801200c <__gethex+0x160>
 8011ff6:	4648      	mov	r0, r9
 8011ff8:	f000 fb0e 	bl	8012618 <_Balloc>
 8011ffc:	4604      	mov	r4, r0
 8011ffe:	b940      	cbnz	r0, 8012012 <__gethex+0x166>
 8012000:	4b61      	ldr	r3, [pc, #388]	; (8012188 <__gethex+0x2dc>)
 8012002:	4602      	mov	r2, r0
 8012004:	21e4      	movs	r1, #228	; 0xe4
 8012006:	4861      	ldr	r0, [pc, #388]	; (801218c <__gethex+0x2e0>)
 8012008:	f7ff fe7e 	bl	8011d08 <__assert_func>
 801200c:	3101      	adds	r1, #1
 801200e:	105b      	asrs	r3, r3, #1
 8012010:	e7ef      	b.n	8011ff2 <__gethex+0x146>
 8012012:	f100 0a14 	add.w	sl, r0, #20
 8012016:	2300      	movs	r3, #0
 8012018:	495a      	ldr	r1, [pc, #360]	; (8012184 <__gethex+0x2d8>)
 801201a:	f8cd a004 	str.w	sl, [sp, #4]
 801201e:	469b      	mov	fp, r3
 8012020:	45a8      	cmp	r8, r5
 8012022:	d342      	bcc.n	80120aa <__gethex+0x1fe>
 8012024:	9801      	ldr	r0, [sp, #4]
 8012026:	f840 bb04 	str.w	fp, [r0], #4
 801202a:	eba0 000a 	sub.w	r0, r0, sl
 801202e:	1080      	asrs	r0, r0, #2
 8012030:	6120      	str	r0, [r4, #16]
 8012032:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8012036:	4658      	mov	r0, fp
 8012038:	f000 fbe0 	bl	80127fc <__hi0bits>
 801203c:	683d      	ldr	r5, [r7, #0]
 801203e:	eba8 0000 	sub.w	r0, r8, r0
 8012042:	42a8      	cmp	r0, r5
 8012044:	dd59      	ble.n	80120fa <__gethex+0x24e>
 8012046:	eba0 0805 	sub.w	r8, r0, r5
 801204a:	4641      	mov	r1, r8
 801204c:	4620      	mov	r0, r4
 801204e:	f000 ff6c 	bl	8012f2a <__any_on>
 8012052:	4683      	mov	fp, r0
 8012054:	b1b8      	cbz	r0, 8012086 <__gethex+0x1da>
 8012056:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 801205a:	1159      	asrs	r1, r3, #5
 801205c:	f003 021f 	and.w	r2, r3, #31
 8012060:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8012064:	f04f 0b01 	mov.w	fp, #1
 8012068:	fa0b f202 	lsl.w	r2, fp, r2
 801206c:	420a      	tst	r2, r1
 801206e:	d00a      	beq.n	8012086 <__gethex+0x1da>
 8012070:	455b      	cmp	r3, fp
 8012072:	dd06      	ble.n	8012082 <__gethex+0x1d6>
 8012074:	f1a8 0102 	sub.w	r1, r8, #2
 8012078:	4620      	mov	r0, r4
 801207a:	f000 ff56 	bl	8012f2a <__any_on>
 801207e:	2800      	cmp	r0, #0
 8012080:	d138      	bne.n	80120f4 <__gethex+0x248>
 8012082:	f04f 0b02 	mov.w	fp, #2
 8012086:	4641      	mov	r1, r8
 8012088:	4620      	mov	r0, r4
 801208a:	f7ff fea7 	bl	8011ddc <rshift>
 801208e:	4446      	add	r6, r8
 8012090:	68bb      	ldr	r3, [r7, #8]
 8012092:	42b3      	cmp	r3, r6
 8012094:	da41      	bge.n	801211a <__gethex+0x26e>
 8012096:	4621      	mov	r1, r4
 8012098:	4648      	mov	r0, r9
 801209a:	f000 fafd 	bl	8012698 <_Bfree>
 801209e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80120a0:	2300      	movs	r3, #0
 80120a2:	6013      	str	r3, [r2, #0]
 80120a4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80120a8:	e78a      	b.n	8011fc0 <__gethex+0x114>
 80120aa:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80120ae:	2a2e      	cmp	r2, #46	; 0x2e
 80120b0:	d014      	beq.n	80120dc <__gethex+0x230>
 80120b2:	2b20      	cmp	r3, #32
 80120b4:	d106      	bne.n	80120c4 <__gethex+0x218>
 80120b6:	9b01      	ldr	r3, [sp, #4]
 80120b8:	f843 bb04 	str.w	fp, [r3], #4
 80120bc:	f04f 0b00 	mov.w	fp, #0
 80120c0:	9301      	str	r3, [sp, #4]
 80120c2:	465b      	mov	r3, fp
 80120c4:	7828      	ldrb	r0, [r5, #0]
 80120c6:	9303      	str	r3, [sp, #12]
 80120c8:	f7ff feda 	bl	8011e80 <__hexdig_fun>
 80120cc:	9b03      	ldr	r3, [sp, #12]
 80120ce:	f000 000f 	and.w	r0, r0, #15
 80120d2:	4098      	lsls	r0, r3
 80120d4:	ea4b 0b00 	orr.w	fp, fp, r0
 80120d8:	3304      	adds	r3, #4
 80120da:	e7a1      	b.n	8012020 <__gethex+0x174>
 80120dc:	45a8      	cmp	r8, r5
 80120de:	d8e8      	bhi.n	80120b2 <__gethex+0x206>
 80120e0:	2201      	movs	r2, #1
 80120e2:	4628      	mov	r0, r5
 80120e4:	9303      	str	r3, [sp, #12]
 80120e6:	f7ff fd04 	bl	8011af2 <strncmp>
 80120ea:	4926      	ldr	r1, [pc, #152]	; (8012184 <__gethex+0x2d8>)
 80120ec:	9b03      	ldr	r3, [sp, #12]
 80120ee:	2800      	cmp	r0, #0
 80120f0:	d1df      	bne.n	80120b2 <__gethex+0x206>
 80120f2:	e795      	b.n	8012020 <__gethex+0x174>
 80120f4:	f04f 0b03 	mov.w	fp, #3
 80120f8:	e7c5      	b.n	8012086 <__gethex+0x1da>
 80120fa:	da0b      	bge.n	8012114 <__gethex+0x268>
 80120fc:	eba5 0800 	sub.w	r8, r5, r0
 8012100:	4621      	mov	r1, r4
 8012102:	4642      	mov	r2, r8
 8012104:	4648      	mov	r0, r9
 8012106:	f000 fce1 	bl	8012acc <__lshift>
 801210a:	eba6 0608 	sub.w	r6, r6, r8
 801210e:	4604      	mov	r4, r0
 8012110:	f100 0a14 	add.w	sl, r0, #20
 8012114:	f04f 0b00 	mov.w	fp, #0
 8012118:	e7ba      	b.n	8012090 <__gethex+0x1e4>
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	42b3      	cmp	r3, r6
 801211e:	dd73      	ble.n	8012208 <__gethex+0x35c>
 8012120:	1b9e      	subs	r6, r3, r6
 8012122:	42b5      	cmp	r5, r6
 8012124:	dc34      	bgt.n	8012190 <__gethex+0x2e4>
 8012126:	68fb      	ldr	r3, [r7, #12]
 8012128:	2b02      	cmp	r3, #2
 801212a:	d023      	beq.n	8012174 <__gethex+0x2c8>
 801212c:	2b03      	cmp	r3, #3
 801212e:	d025      	beq.n	801217c <__gethex+0x2d0>
 8012130:	2b01      	cmp	r3, #1
 8012132:	d115      	bne.n	8012160 <__gethex+0x2b4>
 8012134:	42b5      	cmp	r5, r6
 8012136:	d113      	bne.n	8012160 <__gethex+0x2b4>
 8012138:	2d01      	cmp	r5, #1
 801213a:	d10b      	bne.n	8012154 <__gethex+0x2a8>
 801213c:	9a02      	ldr	r2, [sp, #8]
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	6013      	str	r3, [r2, #0]
 8012142:	2301      	movs	r3, #1
 8012144:	6123      	str	r3, [r4, #16]
 8012146:	f8ca 3000 	str.w	r3, [sl]
 801214a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801214c:	f04f 0862 	mov.w	r8, #98	; 0x62
 8012150:	601c      	str	r4, [r3, #0]
 8012152:	e735      	b.n	8011fc0 <__gethex+0x114>
 8012154:	1e69      	subs	r1, r5, #1
 8012156:	4620      	mov	r0, r4
 8012158:	f000 fee7 	bl	8012f2a <__any_on>
 801215c:	2800      	cmp	r0, #0
 801215e:	d1ed      	bne.n	801213c <__gethex+0x290>
 8012160:	4621      	mov	r1, r4
 8012162:	4648      	mov	r0, r9
 8012164:	f000 fa98 	bl	8012698 <_Bfree>
 8012168:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801216a:	2300      	movs	r3, #0
 801216c:	6013      	str	r3, [r2, #0]
 801216e:	f04f 0850 	mov.w	r8, #80	; 0x50
 8012172:	e725      	b.n	8011fc0 <__gethex+0x114>
 8012174:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012176:	2b00      	cmp	r3, #0
 8012178:	d1f2      	bne.n	8012160 <__gethex+0x2b4>
 801217a:	e7df      	b.n	801213c <__gethex+0x290>
 801217c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801217e:	2b00      	cmp	r3, #0
 8012180:	d1dc      	bne.n	801213c <__gethex+0x290>
 8012182:	e7ed      	b.n	8012160 <__gethex+0x2b4>
 8012184:	08016559 	.word	0x08016559
 8012188:	08016757 	.word	0x08016757
 801218c:	08016768 	.word	0x08016768
 8012190:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8012194:	f1bb 0f00 	cmp.w	fp, #0
 8012198:	d133      	bne.n	8012202 <__gethex+0x356>
 801219a:	f1b8 0f00 	cmp.w	r8, #0
 801219e:	d004      	beq.n	80121aa <__gethex+0x2fe>
 80121a0:	4641      	mov	r1, r8
 80121a2:	4620      	mov	r0, r4
 80121a4:	f000 fec1 	bl	8012f2a <__any_on>
 80121a8:	4683      	mov	fp, r0
 80121aa:	ea4f 1268 	mov.w	r2, r8, asr #5
 80121ae:	2301      	movs	r3, #1
 80121b0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80121b4:	f008 081f 	and.w	r8, r8, #31
 80121b8:	fa03 f308 	lsl.w	r3, r3, r8
 80121bc:	4213      	tst	r3, r2
 80121be:	4631      	mov	r1, r6
 80121c0:	4620      	mov	r0, r4
 80121c2:	bf18      	it	ne
 80121c4:	f04b 0b02 	orrne.w	fp, fp, #2
 80121c8:	1bad      	subs	r5, r5, r6
 80121ca:	f7ff fe07 	bl	8011ddc <rshift>
 80121ce:	687e      	ldr	r6, [r7, #4]
 80121d0:	f04f 0802 	mov.w	r8, #2
 80121d4:	f1bb 0f00 	cmp.w	fp, #0
 80121d8:	d04a      	beq.n	8012270 <__gethex+0x3c4>
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	2b02      	cmp	r3, #2
 80121de:	d016      	beq.n	801220e <__gethex+0x362>
 80121e0:	2b03      	cmp	r3, #3
 80121e2:	d018      	beq.n	8012216 <__gethex+0x36a>
 80121e4:	2b01      	cmp	r3, #1
 80121e6:	d109      	bne.n	80121fc <__gethex+0x350>
 80121e8:	f01b 0f02 	tst.w	fp, #2
 80121ec:	d006      	beq.n	80121fc <__gethex+0x350>
 80121ee:	f8da 3000 	ldr.w	r3, [sl]
 80121f2:	ea4b 0b03 	orr.w	fp, fp, r3
 80121f6:	f01b 0f01 	tst.w	fp, #1
 80121fa:	d10f      	bne.n	801221c <__gethex+0x370>
 80121fc:	f048 0810 	orr.w	r8, r8, #16
 8012200:	e036      	b.n	8012270 <__gethex+0x3c4>
 8012202:	f04f 0b01 	mov.w	fp, #1
 8012206:	e7d0      	b.n	80121aa <__gethex+0x2fe>
 8012208:	f04f 0801 	mov.w	r8, #1
 801220c:	e7e2      	b.n	80121d4 <__gethex+0x328>
 801220e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012210:	f1c3 0301 	rsb	r3, r3, #1
 8012214:	930f      	str	r3, [sp, #60]	; 0x3c
 8012216:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012218:	2b00      	cmp	r3, #0
 801221a:	d0ef      	beq.n	80121fc <__gethex+0x350>
 801221c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012220:	f104 0214 	add.w	r2, r4, #20
 8012224:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8012228:	9301      	str	r3, [sp, #4]
 801222a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801222e:	2300      	movs	r3, #0
 8012230:	4694      	mov	ip, r2
 8012232:	f852 1b04 	ldr.w	r1, [r2], #4
 8012236:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 801223a:	d01e      	beq.n	801227a <__gethex+0x3ce>
 801223c:	3101      	adds	r1, #1
 801223e:	f8cc 1000 	str.w	r1, [ip]
 8012242:	f1b8 0f02 	cmp.w	r8, #2
 8012246:	f104 0214 	add.w	r2, r4, #20
 801224a:	d13d      	bne.n	80122c8 <__gethex+0x41c>
 801224c:	683b      	ldr	r3, [r7, #0]
 801224e:	3b01      	subs	r3, #1
 8012250:	42ab      	cmp	r3, r5
 8012252:	d10b      	bne.n	801226c <__gethex+0x3c0>
 8012254:	1169      	asrs	r1, r5, #5
 8012256:	2301      	movs	r3, #1
 8012258:	f005 051f 	and.w	r5, r5, #31
 801225c:	fa03 f505 	lsl.w	r5, r3, r5
 8012260:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012264:	421d      	tst	r5, r3
 8012266:	bf18      	it	ne
 8012268:	f04f 0801 	movne.w	r8, #1
 801226c:	f048 0820 	orr.w	r8, r8, #32
 8012270:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012272:	601c      	str	r4, [r3, #0]
 8012274:	9b02      	ldr	r3, [sp, #8]
 8012276:	601e      	str	r6, [r3, #0]
 8012278:	e6a2      	b.n	8011fc0 <__gethex+0x114>
 801227a:	4290      	cmp	r0, r2
 801227c:	f842 3c04 	str.w	r3, [r2, #-4]
 8012280:	d8d6      	bhi.n	8012230 <__gethex+0x384>
 8012282:	68a2      	ldr	r2, [r4, #8]
 8012284:	4593      	cmp	fp, r2
 8012286:	db17      	blt.n	80122b8 <__gethex+0x40c>
 8012288:	6861      	ldr	r1, [r4, #4]
 801228a:	4648      	mov	r0, r9
 801228c:	3101      	adds	r1, #1
 801228e:	f000 f9c3 	bl	8012618 <_Balloc>
 8012292:	4682      	mov	sl, r0
 8012294:	b918      	cbnz	r0, 801229e <__gethex+0x3f2>
 8012296:	4b1b      	ldr	r3, [pc, #108]	; (8012304 <__gethex+0x458>)
 8012298:	4602      	mov	r2, r0
 801229a:	2184      	movs	r1, #132	; 0x84
 801229c:	e6b3      	b.n	8012006 <__gethex+0x15a>
 801229e:	6922      	ldr	r2, [r4, #16]
 80122a0:	3202      	adds	r2, #2
 80122a2:	f104 010c 	add.w	r1, r4, #12
 80122a6:	0092      	lsls	r2, r2, #2
 80122a8:	300c      	adds	r0, #12
 80122aa:	f7ff fd16 	bl	8011cda <memcpy>
 80122ae:	4621      	mov	r1, r4
 80122b0:	4648      	mov	r0, r9
 80122b2:	f000 f9f1 	bl	8012698 <_Bfree>
 80122b6:	4654      	mov	r4, sl
 80122b8:	6922      	ldr	r2, [r4, #16]
 80122ba:	1c51      	adds	r1, r2, #1
 80122bc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80122c0:	6121      	str	r1, [r4, #16]
 80122c2:	2101      	movs	r1, #1
 80122c4:	6151      	str	r1, [r2, #20]
 80122c6:	e7bc      	b.n	8012242 <__gethex+0x396>
 80122c8:	6921      	ldr	r1, [r4, #16]
 80122ca:	4559      	cmp	r1, fp
 80122cc:	dd0b      	ble.n	80122e6 <__gethex+0x43a>
 80122ce:	2101      	movs	r1, #1
 80122d0:	4620      	mov	r0, r4
 80122d2:	f7ff fd83 	bl	8011ddc <rshift>
 80122d6:	68bb      	ldr	r3, [r7, #8]
 80122d8:	3601      	adds	r6, #1
 80122da:	42b3      	cmp	r3, r6
 80122dc:	f6ff aedb 	blt.w	8012096 <__gethex+0x1ea>
 80122e0:	f04f 0801 	mov.w	r8, #1
 80122e4:	e7c2      	b.n	801226c <__gethex+0x3c0>
 80122e6:	f015 051f 	ands.w	r5, r5, #31
 80122ea:	d0f9      	beq.n	80122e0 <__gethex+0x434>
 80122ec:	9b01      	ldr	r3, [sp, #4]
 80122ee:	441a      	add	r2, r3
 80122f0:	f1c5 0520 	rsb	r5, r5, #32
 80122f4:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80122f8:	f000 fa80 	bl	80127fc <__hi0bits>
 80122fc:	42a8      	cmp	r0, r5
 80122fe:	dbe6      	blt.n	80122ce <__gethex+0x422>
 8012300:	e7ee      	b.n	80122e0 <__gethex+0x434>
 8012302:	bf00      	nop
 8012304:	08016757 	.word	0x08016757

08012308 <L_shift>:
 8012308:	f1c2 0208 	rsb	r2, r2, #8
 801230c:	0092      	lsls	r2, r2, #2
 801230e:	b570      	push	{r4, r5, r6, lr}
 8012310:	f1c2 0620 	rsb	r6, r2, #32
 8012314:	6843      	ldr	r3, [r0, #4]
 8012316:	6804      	ldr	r4, [r0, #0]
 8012318:	fa03 f506 	lsl.w	r5, r3, r6
 801231c:	432c      	orrs	r4, r5
 801231e:	40d3      	lsrs	r3, r2
 8012320:	6004      	str	r4, [r0, #0]
 8012322:	f840 3f04 	str.w	r3, [r0, #4]!
 8012326:	4288      	cmp	r0, r1
 8012328:	d3f4      	bcc.n	8012314 <L_shift+0xc>
 801232a:	bd70      	pop	{r4, r5, r6, pc}

0801232c <__match>:
 801232c:	b530      	push	{r4, r5, lr}
 801232e:	6803      	ldr	r3, [r0, #0]
 8012330:	3301      	adds	r3, #1
 8012332:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012336:	b914      	cbnz	r4, 801233e <__match+0x12>
 8012338:	6003      	str	r3, [r0, #0]
 801233a:	2001      	movs	r0, #1
 801233c:	bd30      	pop	{r4, r5, pc}
 801233e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012342:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8012346:	2d19      	cmp	r5, #25
 8012348:	bf98      	it	ls
 801234a:	3220      	addls	r2, #32
 801234c:	42a2      	cmp	r2, r4
 801234e:	d0f0      	beq.n	8012332 <__match+0x6>
 8012350:	2000      	movs	r0, #0
 8012352:	e7f3      	b.n	801233c <__match+0x10>

08012354 <__hexnan>:
 8012354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012358:	680b      	ldr	r3, [r1, #0]
 801235a:	6801      	ldr	r1, [r0, #0]
 801235c:	115e      	asrs	r6, r3, #5
 801235e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012362:	f013 031f 	ands.w	r3, r3, #31
 8012366:	b087      	sub	sp, #28
 8012368:	bf18      	it	ne
 801236a:	3604      	addne	r6, #4
 801236c:	2500      	movs	r5, #0
 801236e:	1f37      	subs	r7, r6, #4
 8012370:	4682      	mov	sl, r0
 8012372:	4690      	mov	r8, r2
 8012374:	9301      	str	r3, [sp, #4]
 8012376:	f846 5c04 	str.w	r5, [r6, #-4]
 801237a:	46b9      	mov	r9, r7
 801237c:	463c      	mov	r4, r7
 801237e:	9502      	str	r5, [sp, #8]
 8012380:	46ab      	mov	fp, r5
 8012382:	784a      	ldrb	r2, [r1, #1]
 8012384:	1c4b      	adds	r3, r1, #1
 8012386:	9303      	str	r3, [sp, #12]
 8012388:	b342      	cbz	r2, 80123dc <__hexnan+0x88>
 801238a:	4610      	mov	r0, r2
 801238c:	9105      	str	r1, [sp, #20]
 801238e:	9204      	str	r2, [sp, #16]
 8012390:	f7ff fd76 	bl	8011e80 <__hexdig_fun>
 8012394:	2800      	cmp	r0, #0
 8012396:	d14f      	bne.n	8012438 <__hexnan+0xe4>
 8012398:	9a04      	ldr	r2, [sp, #16]
 801239a:	9905      	ldr	r1, [sp, #20]
 801239c:	2a20      	cmp	r2, #32
 801239e:	d818      	bhi.n	80123d2 <__hexnan+0x7e>
 80123a0:	9b02      	ldr	r3, [sp, #8]
 80123a2:	459b      	cmp	fp, r3
 80123a4:	dd13      	ble.n	80123ce <__hexnan+0x7a>
 80123a6:	454c      	cmp	r4, r9
 80123a8:	d206      	bcs.n	80123b8 <__hexnan+0x64>
 80123aa:	2d07      	cmp	r5, #7
 80123ac:	dc04      	bgt.n	80123b8 <__hexnan+0x64>
 80123ae:	462a      	mov	r2, r5
 80123b0:	4649      	mov	r1, r9
 80123b2:	4620      	mov	r0, r4
 80123b4:	f7ff ffa8 	bl	8012308 <L_shift>
 80123b8:	4544      	cmp	r4, r8
 80123ba:	d950      	bls.n	801245e <__hexnan+0x10a>
 80123bc:	2300      	movs	r3, #0
 80123be:	f1a4 0904 	sub.w	r9, r4, #4
 80123c2:	f844 3c04 	str.w	r3, [r4, #-4]
 80123c6:	f8cd b008 	str.w	fp, [sp, #8]
 80123ca:	464c      	mov	r4, r9
 80123cc:	461d      	mov	r5, r3
 80123ce:	9903      	ldr	r1, [sp, #12]
 80123d0:	e7d7      	b.n	8012382 <__hexnan+0x2e>
 80123d2:	2a29      	cmp	r2, #41	; 0x29
 80123d4:	d155      	bne.n	8012482 <__hexnan+0x12e>
 80123d6:	3102      	adds	r1, #2
 80123d8:	f8ca 1000 	str.w	r1, [sl]
 80123dc:	f1bb 0f00 	cmp.w	fp, #0
 80123e0:	d04f      	beq.n	8012482 <__hexnan+0x12e>
 80123e2:	454c      	cmp	r4, r9
 80123e4:	d206      	bcs.n	80123f4 <__hexnan+0xa0>
 80123e6:	2d07      	cmp	r5, #7
 80123e8:	dc04      	bgt.n	80123f4 <__hexnan+0xa0>
 80123ea:	462a      	mov	r2, r5
 80123ec:	4649      	mov	r1, r9
 80123ee:	4620      	mov	r0, r4
 80123f0:	f7ff ff8a 	bl	8012308 <L_shift>
 80123f4:	4544      	cmp	r4, r8
 80123f6:	d934      	bls.n	8012462 <__hexnan+0x10e>
 80123f8:	f1a8 0204 	sub.w	r2, r8, #4
 80123fc:	4623      	mov	r3, r4
 80123fe:	f853 1b04 	ldr.w	r1, [r3], #4
 8012402:	f842 1f04 	str.w	r1, [r2, #4]!
 8012406:	429f      	cmp	r7, r3
 8012408:	d2f9      	bcs.n	80123fe <__hexnan+0xaa>
 801240a:	1b3b      	subs	r3, r7, r4
 801240c:	f023 0303 	bic.w	r3, r3, #3
 8012410:	3304      	adds	r3, #4
 8012412:	3e03      	subs	r6, #3
 8012414:	3401      	adds	r4, #1
 8012416:	42a6      	cmp	r6, r4
 8012418:	bf38      	it	cc
 801241a:	2304      	movcc	r3, #4
 801241c:	4443      	add	r3, r8
 801241e:	2200      	movs	r2, #0
 8012420:	f843 2b04 	str.w	r2, [r3], #4
 8012424:	429f      	cmp	r7, r3
 8012426:	d2fb      	bcs.n	8012420 <__hexnan+0xcc>
 8012428:	683b      	ldr	r3, [r7, #0]
 801242a:	b91b      	cbnz	r3, 8012434 <__hexnan+0xe0>
 801242c:	4547      	cmp	r7, r8
 801242e:	d126      	bne.n	801247e <__hexnan+0x12a>
 8012430:	2301      	movs	r3, #1
 8012432:	603b      	str	r3, [r7, #0]
 8012434:	2005      	movs	r0, #5
 8012436:	e025      	b.n	8012484 <__hexnan+0x130>
 8012438:	3501      	adds	r5, #1
 801243a:	2d08      	cmp	r5, #8
 801243c:	f10b 0b01 	add.w	fp, fp, #1
 8012440:	dd06      	ble.n	8012450 <__hexnan+0xfc>
 8012442:	4544      	cmp	r4, r8
 8012444:	d9c3      	bls.n	80123ce <__hexnan+0x7a>
 8012446:	2300      	movs	r3, #0
 8012448:	f844 3c04 	str.w	r3, [r4, #-4]
 801244c:	2501      	movs	r5, #1
 801244e:	3c04      	subs	r4, #4
 8012450:	6822      	ldr	r2, [r4, #0]
 8012452:	f000 000f 	and.w	r0, r0, #15
 8012456:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801245a:	6020      	str	r0, [r4, #0]
 801245c:	e7b7      	b.n	80123ce <__hexnan+0x7a>
 801245e:	2508      	movs	r5, #8
 8012460:	e7b5      	b.n	80123ce <__hexnan+0x7a>
 8012462:	9b01      	ldr	r3, [sp, #4]
 8012464:	2b00      	cmp	r3, #0
 8012466:	d0df      	beq.n	8012428 <__hexnan+0xd4>
 8012468:	f1c3 0320 	rsb	r3, r3, #32
 801246c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012470:	40da      	lsrs	r2, r3
 8012472:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8012476:	4013      	ands	r3, r2
 8012478:	f846 3c04 	str.w	r3, [r6, #-4]
 801247c:	e7d4      	b.n	8012428 <__hexnan+0xd4>
 801247e:	3f04      	subs	r7, #4
 8012480:	e7d2      	b.n	8012428 <__hexnan+0xd4>
 8012482:	2004      	movs	r0, #4
 8012484:	b007      	add	sp, #28
 8012486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801248c <malloc>:
 801248c:	4b02      	ldr	r3, [pc, #8]	; (8012498 <malloc+0xc>)
 801248e:	4601      	mov	r1, r0
 8012490:	6818      	ldr	r0, [r3, #0]
 8012492:	f000 b823 	b.w	80124dc <_malloc_r>
 8012496:	bf00      	nop
 8012498:	200001f0 	.word	0x200001f0

0801249c <sbrk_aligned>:
 801249c:	b570      	push	{r4, r5, r6, lr}
 801249e:	4e0e      	ldr	r6, [pc, #56]	; (80124d8 <sbrk_aligned+0x3c>)
 80124a0:	460c      	mov	r4, r1
 80124a2:	6831      	ldr	r1, [r6, #0]
 80124a4:	4605      	mov	r5, r0
 80124a6:	b911      	cbnz	r1, 80124ae <sbrk_aligned+0x12>
 80124a8:	f001 f996 	bl	80137d8 <_sbrk_r>
 80124ac:	6030      	str	r0, [r6, #0]
 80124ae:	4621      	mov	r1, r4
 80124b0:	4628      	mov	r0, r5
 80124b2:	f001 f991 	bl	80137d8 <_sbrk_r>
 80124b6:	1c43      	adds	r3, r0, #1
 80124b8:	d00a      	beq.n	80124d0 <sbrk_aligned+0x34>
 80124ba:	1cc4      	adds	r4, r0, #3
 80124bc:	f024 0403 	bic.w	r4, r4, #3
 80124c0:	42a0      	cmp	r0, r4
 80124c2:	d007      	beq.n	80124d4 <sbrk_aligned+0x38>
 80124c4:	1a21      	subs	r1, r4, r0
 80124c6:	4628      	mov	r0, r5
 80124c8:	f001 f986 	bl	80137d8 <_sbrk_r>
 80124cc:	3001      	adds	r0, #1
 80124ce:	d101      	bne.n	80124d4 <sbrk_aligned+0x38>
 80124d0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80124d4:	4620      	mov	r0, r4
 80124d6:	bd70      	pop	{r4, r5, r6, pc}
 80124d8:	2000a9cc 	.word	0x2000a9cc

080124dc <_malloc_r>:
 80124dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80124e0:	1ccd      	adds	r5, r1, #3
 80124e2:	f025 0503 	bic.w	r5, r5, #3
 80124e6:	3508      	adds	r5, #8
 80124e8:	2d0c      	cmp	r5, #12
 80124ea:	bf38      	it	cc
 80124ec:	250c      	movcc	r5, #12
 80124ee:	2d00      	cmp	r5, #0
 80124f0:	4607      	mov	r7, r0
 80124f2:	db01      	blt.n	80124f8 <_malloc_r+0x1c>
 80124f4:	42a9      	cmp	r1, r5
 80124f6:	d905      	bls.n	8012504 <_malloc_r+0x28>
 80124f8:	230c      	movs	r3, #12
 80124fa:	603b      	str	r3, [r7, #0]
 80124fc:	2600      	movs	r6, #0
 80124fe:	4630      	mov	r0, r6
 8012500:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012504:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80125d8 <_malloc_r+0xfc>
 8012508:	f000 f87a 	bl	8012600 <__malloc_lock>
 801250c:	f8d8 3000 	ldr.w	r3, [r8]
 8012510:	461c      	mov	r4, r3
 8012512:	bb5c      	cbnz	r4, 801256c <_malloc_r+0x90>
 8012514:	4629      	mov	r1, r5
 8012516:	4638      	mov	r0, r7
 8012518:	f7ff ffc0 	bl	801249c <sbrk_aligned>
 801251c:	1c43      	adds	r3, r0, #1
 801251e:	4604      	mov	r4, r0
 8012520:	d155      	bne.n	80125ce <_malloc_r+0xf2>
 8012522:	f8d8 4000 	ldr.w	r4, [r8]
 8012526:	4626      	mov	r6, r4
 8012528:	2e00      	cmp	r6, #0
 801252a:	d145      	bne.n	80125b8 <_malloc_r+0xdc>
 801252c:	2c00      	cmp	r4, #0
 801252e:	d048      	beq.n	80125c2 <_malloc_r+0xe6>
 8012530:	6823      	ldr	r3, [r4, #0]
 8012532:	4631      	mov	r1, r6
 8012534:	4638      	mov	r0, r7
 8012536:	eb04 0903 	add.w	r9, r4, r3
 801253a:	f001 f94d 	bl	80137d8 <_sbrk_r>
 801253e:	4581      	cmp	r9, r0
 8012540:	d13f      	bne.n	80125c2 <_malloc_r+0xe6>
 8012542:	6821      	ldr	r1, [r4, #0]
 8012544:	1a6d      	subs	r5, r5, r1
 8012546:	4629      	mov	r1, r5
 8012548:	4638      	mov	r0, r7
 801254a:	f7ff ffa7 	bl	801249c <sbrk_aligned>
 801254e:	3001      	adds	r0, #1
 8012550:	d037      	beq.n	80125c2 <_malloc_r+0xe6>
 8012552:	6823      	ldr	r3, [r4, #0]
 8012554:	442b      	add	r3, r5
 8012556:	6023      	str	r3, [r4, #0]
 8012558:	f8d8 3000 	ldr.w	r3, [r8]
 801255c:	2b00      	cmp	r3, #0
 801255e:	d038      	beq.n	80125d2 <_malloc_r+0xf6>
 8012560:	685a      	ldr	r2, [r3, #4]
 8012562:	42a2      	cmp	r2, r4
 8012564:	d12b      	bne.n	80125be <_malloc_r+0xe2>
 8012566:	2200      	movs	r2, #0
 8012568:	605a      	str	r2, [r3, #4]
 801256a:	e00f      	b.n	801258c <_malloc_r+0xb0>
 801256c:	6822      	ldr	r2, [r4, #0]
 801256e:	1b52      	subs	r2, r2, r5
 8012570:	d41f      	bmi.n	80125b2 <_malloc_r+0xd6>
 8012572:	2a0b      	cmp	r2, #11
 8012574:	d917      	bls.n	80125a6 <_malloc_r+0xca>
 8012576:	1961      	adds	r1, r4, r5
 8012578:	42a3      	cmp	r3, r4
 801257a:	6025      	str	r5, [r4, #0]
 801257c:	bf18      	it	ne
 801257e:	6059      	strne	r1, [r3, #4]
 8012580:	6863      	ldr	r3, [r4, #4]
 8012582:	bf08      	it	eq
 8012584:	f8c8 1000 	streq.w	r1, [r8]
 8012588:	5162      	str	r2, [r4, r5]
 801258a:	604b      	str	r3, [r1, #4]
 801258c:	4638      	mov	r0, r7
 801258e:	f104 060b 	add.w	r6, r4, #11
 8012592:	f000 f83b 	bl	801260c <__malloc_unlock>
 8012596:	f026 0607 	bic.w	r6, r6, #7
 801259a:	1d23      	adds	r3, r4, #4
 801259c:	1af2      	subs	r2, r6, r3
 801259e:	d0ae      	beq.n	80124fe <_malloc_r+0x22>
 80125a0:	1b9b      	subs	r3, r3, r6
 80125a2:	50a3      	str	r3, [r4, r2]
 80125a4:	e7ab      	b.n	80124fe <_malloc_r+0x22>
 80125a6:	42a3      	cmp	r3, r4
 80125a8:	6862      	ldr	r2, [r4, #4]
 80125aa:	d1dd      	bne.n	8012568 <_malloc_r+0x8c>
 80125ac:	f8c8 2000 	str.w	r2, [r8]
 80125b0:	e7ec      	b.n	801258c <_malloc_r+0xb0>
 80125b2:	4623      	mov	r3, r4
 80125b4:	6864      	ldr	r4, [r4, #4]
 80125b6:	e7ac      	b.n	8012512 <_malloc_r+0x36>
 80125b8:	4634      	mov	r4, r6
 80125ba:	6876      	ldr	r6, [r6, #4]
 80125bc:	e7b4      	b.n	8012528 <_malloc_r+0x4c>
 80125be:	4613      	mov	r3, r2
 80125c0:	e7cc      	b.n	801255c <_malloc_r+0x80>
 80125c2:	230c      	movs	r3, #12
 80125c4:	603b      	str	r3, [r7, #0]
 80125c6:	4638      	mov	r0, r7
 80125c8:	f000 f820 	bl	801260c <__malloc_unlock>
 80125cc:	e797      	b.n	80124fe <_malloc_r+0x22>
 80125ce:	6025      	str	r5, [r4, #0]
 80125d0:	e7dc      	b.n	801258c <_malloc_r+0xb0>
 80125d2:	605b      	str	r3, [r3, #4]
 80125d4:	deff      	udf	#255	; 0xff
 80125d6:	bf00      	nop
 80125d8:	2000a9c8 	.word	0x2000a9c8

080125dc <__ascii_mbtowc>:
 80125dc:	b082      	sub	sp, #8
 80125de:	b901      	cbnz	r1, 80125e2 <__ascii_mbtowc+0x6>
 80125e0:	a901      	add	r1, sp, #4
 80125e2:	b142      	cbz	r2, 80125f6 <__ascii_mbtowc+0x1a>
 80125e4:	b14b      	cbz	r3, 80125fa <__ascii_mbtowc+0x1e>
 80125e6:	7813      	ldrb	r3, [r2, #0]
 80125e8:	600b      	str	r3, [r1, #0]
 80125ea:	7812      	ldrb	r2, [r2, #0]
 80125ec:	1e10      	subs	r0, r2, #0
 80125ee:	bf18      	it	ne
 80125f0:	2001      	movne	r0, #1
 80125f2:	b002      	add	sp, #8
 80125f4:	4770      	bx	lr
 80125f6:	4610      	mov	r0, r2
 80125f8:	e7fb      	b.n	80125f2 <__ascii_mbtowc+0x16>
 80125fa:	f06f 0001 	mvn.w	r0, #1
 80125fe:	e7f8      	b.n	80125f2 <__ascii_mbtowc+0x16>

08012600 <__malloc_lock>:
 8012600:	4801      	ldr	r0, [pc, #4]	; (8012608 <__malloc_lock+0x8>)
 8012602:	f7ff bb68 	b.w	8011cd6 <__retarget_lock_acquire_recursive>
 8012606:	bf00      	nop
 8012608:	2000a9c4 	.word	0x2000a9c4

0801260c <__malloc_unlock>:
 801260c:	4801      	ldr	r0, [pc, #4]	; (8012614 <__malloc_unlock+0x8>)
 801260e:	f7ff bb63 	b.w	8011cd8 <__retarget_lock_release_recursive>
 8012612:	bf00      	nop
 8012614:	2000a9c4 	.word	0x2000a9c4

08012618 <_Balloc>:
 8012618:	b570      	push	{r4, r5, r6, lr}
 801261a:	69c6      	ldr	r6, [r0, #28]
 801261c:	4604      	mov	r4, r0
 801261e:	460d      	mov	r5, r1
 8012620:	b976      	cbnz	r6, 8012640 <_Balloc+0x28>
 8012622:	2010      	movs	r0, #16
 8012624:	f7ff ff32 	bl	801248c <malloc>
 8012628:	4602      	mov	r2, r0
 801262a:	61e0      	str	r0, [r4, #28]
 801262c:	b920      	cbnz	r0, 8012638 <_Balloc+0x20>
 801262e:	4b18      	ldr	r3, [pc, #96]	; (8012690 <_Balloc+0x78>)
 8012630:	4818      	ldr	r0, [pc, #96]	; (8012694 <_Balloc+0x7c>)
 8012632:	216b      	movs	r1, #107	; 0x6b
 8012634:	f7ff fb68 	bl	8011d08 <__assert_func>
 8012638:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801263c:	6006      	str	r6, [r0, #0]
 801263e:	60c6      	str	r6, [r0, #12]
 8012640:	69e6      	ldr	r6, [r4, #28]
 8012642:	68f3      	ldr	r3, [r6, #12]
 8012644:	b183      	cbz	r3, 8012668 <_Balloc+0x50>
 8012646:	69e3      	ldr	r3, [r4, #28]
 8012648:	68db      	ldr	r3, [r3, #12]
 801264a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801264e:	b9b8      	cbnz	r0, 8012680 <_Balloc+0x68>
 8012650:	2101      	movs	r1, #1
 8012652:	fa01 f605 	lsl.w	r6, r1, r5
 8012656:	1d72      	adds	r2, r6, #5
 8012658:	0092      	lsls	r2, r2, #2
 801265a:	4620      	mov	r0, r4
 801265c:	f001 f8d3 	bl	8013806 <_calloc_r>
 8012660:	b160      	cbz	r0, 801267c <_Balloc+0x64>
 8012662:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012666:	e00e      	b.n	8012686 <_Balloc+0x6e>
 8012668:	2221      	movs	r2, #33	; 0x21
 801266a:	2104      	movs	r1, #4
 801266c:	4620      	mov	r0, r4
 801266e:	f001 f8ca 	bl	8013806 <_calloc_r>
 8012672:	69e3      	ldr	r3, [r4, #28]
 8012674:	60f0      	str	r0, [r6, #12]
 8012676:	68db      	ldr	r3, [r3, #12]
 8012678:	2b00      	cmp	r3, #0
 801267a:	d1e4      	bne.n	8012646 <_Balloc+0x2e>
 801267c:	2000      	movs	r0, #0
 801267e:	bd70      	pop	{r4, r5, r6, pc}
 8012680:	6802      	ldr	r2, [r0, #0]
 8012682:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012686:	2300      	movs	r3, #0
 8012688:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801268c:	e7f7      	b.n	801267e <_Balloc+0x66>
 801268e:	bf00      	nop
 8012690:	080164ea 	.word	0x080164ea
 8012694:	080167c8 	.word	0x080167c8

08012698 <_Bfree>:
 8012698:	b570      	push	{r4, r5, r6, lr}
 801269a:	69c6      	ldr	r6, [r0, #28]
 801269c:	4605      	mov	r5, r0
 801269e:	460c      	mov	r4, r1
 80126a0:	b976      	cbnz	r6, 80126c0 <_Bfree+0x28>
 80126a2:	2010      	movs	r0, #16
 80126a4:	f7ff fef2 	bl	801248c <malloc>
 80126a8:	4602      	mov	r2, r0
 80126aa:	61e8      	str	r0, [r5, #28]
 80126ac:	b920      	cbnz	r0, 80126b8 <_Bfree+0x20>
 80126ae:	4b09      	ldr	r3, [pc, #36]	; (80126d4 <_Bfree+0x3c>)
 80126b0:	4809      	ldr	r0, [pc, #36]	; (80126d8 <_Bfree+0x40>)
 80126b2:	218f      	movs	r1, #143	; 0x8f
 80126b4:	f7ff fb28 	bl	8011d08 <__assert_func>
 80126b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80126bc:	6006      	str	r6, [r0, #0]
 80126be:	60c6      	str	r6, [r0, #12]
 80126c0:	b13c      	cbz	r4, 80126d2 <_Bfree+0x3a>
 80126c2:	69eb      	ldr	r3, [r5, #28]
 80126c4:	6862      	ldr	r2, [r4, #4]
 80126c6:	68db      	ldr	r3, [r3, #12]
 80126c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80126cc:	6021      	str	r1, [r4, #0]
 80126ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80126d2:	bd70      	pop	{r4, r5, r6, pc}
 80126d4:	080164ea 	.word	0x080164ea
 80126d8:	080167c8 	.word	0x080167c8

080126dc <__multadd>:
 80126dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126e0:	690d      	ldr	r5, [r1, #16]
 80126e2:	4607      	mov	r7, r0
 80126e4:	460c      	mov	r4, r1
 80126e6:	461e      	mov	r6, r3
 80126e8:	f101 0c14 	add.w	ip, r1, #20
 80126ec:	2000      	movs	r0, #0
 80126ee:	f8dc 3000 	ldr.w	r3, [ip]
 80126f2:	b299      	uxth	r1, r3
 80126f4:	fb02 6101 	mla	r1, r2, r1, r6
 80126f8:	0c1e      	lsrs	r6, r3, #16
 80126fa:	0c0b      	lsrs	r3, r1, #16
 80126fc:	fb02 3306 	mla	r3, r2, r6, r3
 8012700:	b289      	uxth	r1, r1
 8012702:	3001      	adds	r0, #1
 8012704:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012708:	4285      	cmp	r5, r0
 801270a:	f84c 1b04 	str.w	r1, [ip], #4
 801270e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012712:	dcec      	bgt.n	80126ee <__multadd+0x12>
 8012714:	b30e      	cbz	r6, 801275a <__multadd+0x7e>
 8012716:	68a3      	ldr	r3, [r4, #8]
 8012718:	42ab      	cmp	r3, r5
 801271a:	dc19      	bgt.n	8012750 <__multadd+0x74>
 801271c:	6861      	ldr	r1, [r4, #4]
 801271e:	4638      	mov	r0, r7
 8012720:	3101      	adds	r1, #1
 8012722:	f7ff ff79 	bl	8012618 <_Balloc>
 8012726:	4680      	mov	r8, r0
 8012728:	b928      	cbnz	r0, 8012736 <__multadd+0x5a>
 801272a:	4602      	mov	r2, r0
 801272c:	4b0c      	ldr	r3, [pc, #48]	; (8012760 <__multadd+0x84>)
 801272e:	480d      	ldr	r0, [pc, #52]	; (8012764 <__multadd+0x88>)
 8012730:	21ba      	movs	r1, #186	; 0xba
 8012732:	f7ff fae9 	bl	8011d08 <__assert_func>
 8012736:	6922      	ldr	r2, [r4, #16]
 8012738:	3202      	adds	r2, #2
 801273a:	f104 010c 	add.w	r1, r4, #12
 801273e:	0092      	lsls	r2, r2, #2
 8012740:	300c      	adds	r0, #12
 8012742:	f7ff faca 	bl	8011cda <memcpy>
 8012746:	4621      	mov	r1, r4
 8012748:	4638      	mov	r0, r7
 801274a:	f7ff ffa5 	bl	8012698 <_Bfree>
 801274e:	4644      	mov	r4, r8
 8012750:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012754:	3501      	adds	r5, #1
 8012756:	615e      	str	r6, [r3, #20]
 8012758:	6125      	str	r5, [r4, #16]
 801275a:	4620      	mov	r0, r4
 801275c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012760:	08016757 	.word	0x08016757
 8012764:	080167c8 	.word	0x080167c8

08012768 <__s2b>:
 8012768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801276c:	460c      	mov	r4, r1
 801276e:	4615      	mov	r5, r2
 8012770:	461f      	mov	r7, r3
 8012772:	2209      	movs	r2, #9
 8012774:	3308      	adds	r3, #8
 8012776:	4606      	mov	r6, r0
 8012778:	fb93 f3f2 	sdiv	r3, r3, r2
 801277c:	2100      	movs	r1, #0
 801277e:	2201      	movs	r2, #1
 8012780:	429a      	cmp	r2, r3
 8012782:	db09      	blt.n	8012798 <__s2b+0x30>
 8012784:	4630      	mov	r0, r6
 8012786:	f7ff ff47 	bl	8012618 <_Balloc>
 801278a:	b940      	cbnz	r0, 801279e <__s2b+0x36>
 801278c:	4602      	mov	r2, r0
 801278e:	4b19      	ldr	r3, [pc, #100]	; (80127f4 <__s2b+0x8c>)
 8012790:	4819      	ldr	r0, [pc, #100]	; (80127f8 <__s2b+0x90>)
 8012792:	21d3      	movs	r1, #211	; 0xd3
 8012794:	f7ff fab8 	bl	8011d08 <__assert_func>
 8012798:	0052      	lsls	r2, r2, #1
 801279a:	3101      	adds	r1, #1
 801279c:	e7f0      	b.n	8012780 <__s2b+0x18>
 801279e:	9b08      	ldr	r3, [sp, #32]
 80127a0:	6143      	str	r3, [r0, #20]
 80127a2:	2d09      	cmp	r5, #9
 80127a4:	f04f 0301 	mov.w	r3, #1
 80127a8:	6103      	str	r3, [r0, #16]
 80127aa:	dd16      	ble.n	80127da <__s2b+0x72>
 80127ac:	f104 0909 	add.w	r9, r4, #9
 80127b0:	46c8      	mov	r8, r9
 80127b2:	442c      	add	r4, r5
 80127b4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80127b8:	4601      	mov	r1, r0
 80127ba:	3b30      	subs	r3, #48	; 0x30
 80127bc:	220a      	movs	r2, #10
 80127be:	4630      	mov	r0, r6
 80127c0:	f7ff ff8c 	bl	80126dc <__multadd>
 80127c4:	45a0      	cmp	r8, r4
 80127c6:	d1f5      	bne.n	80127b4 <__s2b+0x4c>
 80127c8:	f1a5 0408 	sub.w	r4, r5, #8
 80127cc:	444c      	add	r4, r9
 80127ce:	1b2d      	subs	r5, r5, r4
 80127d0:	1963      	adds	r3, r4, r5
 80127d2:	42bb      	cmp	r3, r7
 80127d4:	db04      	blt.n	80127e0 <__s2b+0x78>
 80127d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80127da:	340a      	adds	r4, #10
 80127dc:	2509      	movs	r5, #9
 80127de:	e7f6      	b.n	80127ce <__s2b+0x66>
 80127e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80127e4:	4601      	mov	r1, r0
 80127e6:	3b30      	subs	r3, #48	; 0x30
 80127e8:	220a      	movs	r2, #10
 80127ea:	4630      	mov	r0, r6
 80127ec:	f7ff ff76 	bl	80126dc <__multadd>
 80127f0:	e7ee      	b.n	80127d0 <__s2b+0x68>
 80127f2:	bf00      	nop
 80127f4:	08016757 	.word	0x08016757
 80127f8:	080167c8 	.word	0x080167c8

080127fc <__hi0bits>:
 80127fc:	0c03      	lsrs	r3, r0, #16
 80127fe:	041b      	lsls	r3, r3, #16
 8012800:	b9d3      	cbnz	r3, 8012838 <__hi0bits+0x3c>
 8012802:	0400      	lsls	r0, r0, #16
 8012804:	2310      	movs	r3, #16
 8012806:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801280a:	bf04      	itt	eq
 801280c:	0200      	lsleq	r0, r0, #8
 801280e:	3308      	addeq	r3, #8
 8012810:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012814:	bf04      	itt	eq
 8012816:	0100      	lsleq	r0, r0, #4
 8012818:	3304      	addeq	r3, #4
 801281a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801281e:	bf04      	itt	eq
 8012820:	0080      	lsleq	r0, r0, #2
 8012822:	3302      	addeq	r3, #2
 8012824:	2800      	cmp	r0, #0
 8012826:	db05      	blt.n	8012834 <__hi0bits+0x38>
 8012828:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801282c:	f103 0301 	add.w	r3, r3, #1
 8012830:	bf08      	it	eq
 8012832:	2320      	moveq	r3, #32
 8012834:	4618      	mov	r0, r3
 8012836:	4770      	bx	lr
 8012838:	2300      	movs	r3, #0
 801283a:	e7e4      	b.n	8012806 <__hi0bits+0xa>

0801283c <__lo0bits>:
 801283c:	6803      	ldr	r3, [r0, #0]
 801283e:	f013 0207 	ands.w	r2, r3, #7
 8012842:	d00c      	beq.n	801285e <__lo0bits+0x22>
 8012844:	07d9      	lsls	r1, r3, #31
 8012846:	d422      	bmi.n	801288e <__lo0bits+0x52>
 8012848:	079a      	lsls	r2, r3, #30
 801284a:	bf49      	itett	mi
 801284c:	085b      	lsrmi	r3, r3, #1
 801284e:	089b      	lsrpl	r3, r3, #2
 8012850:	6003      	strmi	r3, [r0, #0]
 8012852:	2201      	movmi	r2, #1
 8012854:	bf5c      	itt	pl
 8012856:	6003      	strpl	r3, [r0, #0]
 8012858:	2202      	movpl	r2, #2
 801285a:	4610      	mov	r0, r2
 801285c:	4770      	bx	lr
 801285e:	b299      	uxth	r1, r3
 8012860:	b909      	cbnz	r1, 8012866 <__lo0bits+0x2a>
 8012862:	0c1b      	lsrs	r3, r3, #16
 8012864:	2210      	movs	r2, #16
 8012866:	b2d9      	uxtb	r1, r3
 8012868:	b909      	cbnz	r1, 801286e <__lo0bits+0x32>
 801286a:	3208      	adds	r2, #8
 801286c:	0a1b      	lsrs	r3, r3, #8
 801286e:	0719      	lsls	r1, r3, #28
 8012870:	bf04      	itt	eq
 8012872:	091b      	lsreq	r3, r3, #4
 8012874:	3204      	addeq	r2, #4
 8012876:	0799      	lsls	r1, r3, #30
 8012878:	bf04      	itt	eq
 801287a:	089b      	lsreq	r3, r3, #2
 801287c:	3202      	addeq	r2, #2
 801287e:	07d9      	lsls	r1, r3, #31
 8012880:	d403      	bmi.n	801288a <__lo0bits+0x4e>
 8012882:	085b      	lsrs	r3, r3, #1
 8012884:	f102 0201 	add.w	r2, r2, #1
 8012888:	d003      	beq.n	8012892 <__lo0bits+0x56>
 801288a:	6003      	str	r3, [r0, #0]
 801288c:	e7e5      	b.n	801285a <__lo0bits+0x1e>
 801288e:	2200      	movs	r2, #0
 8012890:	e7e3      	b.n	801285a <__lo0bits+0x1e>
 8012892:	2220      	movs	r2, #32
 8012894:	e7e1      	b.n	801285a <__lo0bits+0x1e>
	...

08012898 <__i2b>:
 8012898:	b510      	push	{r4, lr}
 801289a:	460c      	mov	r4, r1
 801289c:	2101      	movs	r1, #1
 801289e:	f7ff febb 	bl	8012618 <_Balloc>
 80128a2:	4602      	mov	r2, r0
 80128a4:	b928      	cbnz	r0, 80128b2 <__i2b+0x1a>
 80128a6:	4b05      	ldr	r3, [pc, #20]	; (80128bc <__i2b+0x24>)
 80128a8:	4805      	ldr	r0, [pc, #20]	; (80128c0 <__i2b+0x28>)
 80128aa:	f240 1145 	movw	r1, #325	; 0x145
 80128ae:	f7ff fa2b 	bl	8011d08 <__assert_func>
 80128b2:	2301      	movs	r3, #1
 80128b4:	6144      	str	r4, [r0, #20]
 80128b6:	6103      	str	r3, [r0, #16]
 80128b8:	bd10      	pop	{r4, pc}
 80128ba:	bf00      	nop
 80128bc:	08016757 	.word	0x08016757
 80128c0:	080167c8 	.word	0x080167c8

080128c4 <__multiply>:
 80128c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128c8:	4691      	mov	r9, r2
 80128ca:	690a      	ldr	r2, [r1, #16]
 80128cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80128d0:	429a      	cmp	r2, r3
 80128d2:	bfb8      	it	lt
 80128d4:	460b      	movlt	r3, r1
 80128d6:	460c      	mov	r4, r1
 80128d8:	bfbc      	itt	lt
 80128da:	464c      	movlt	r4, r9
 80128dc:	4699      	movlt	r9, r3
 80128de:	6927      	ldr	r7, [r4, #16]
 80128e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80128e4:	68a3      	ldr	r3, [r4, #8]
 80128e6:	6861      	ldr	r1, [r4, #4]
 80128e8:	eb07 060a 	add.w	r6, r7, sl
 80128ec:	42b3      	cmp	r3, r6
 80128ee:	b085      	sub	sp, #20
 80128f0:	bfb8      	it	lt
 80128f2:	3101      	addlt	r1, #1
 80128f4:	f7ff fe90 	bl	8012618 <_Balloc>
 80128f8:	b930      	cbnz	r0, 8012908 <__multiply+0x44>
 80128fa:	4602      	mov	r2, r0
 80128fc:	4b44      	ldr	r3, [pc, #272]	; (8012a10 <__multiply+0x14c>)
 80128fe:	4845      	ldr	r0, [pc, #276]	; (8012a14 <__multiply+0x150>)
 8012900:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8012904:	f7ff fa00 	bl	8011d08 <__assert_func>
 8012908:	f100 0514 	add.w	r5, r0, #20
 801290c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012910:	462b      	mov	r3, r5
 8012912:	2200      	movs	r2, #0
 8012914:	4543      	cmp	r3, r8
 8012916:	d321      	bcc.n	801295c <__multiply+0x98>
 8012918:	f104 0314 	add.w	r3, r4, #20
 801291c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012920:	f109 0314 	add.w	r3, r9, #20
 8012924:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012928:	9202      	str	r2, [sp, #8]
 801292a:	1b3a      	subs	r2, r7, r4
 801292c:	3a15      	subs	r2, #21
 801292e:	f022 0203 	bic.w	r2, r2, #3
 8012932:	3204      	adds	r2, #4
 8012934:	f104 0115 	add.w	r1, r4, #21
 8012938:	428f      	cmp	r7, r1
 801293a:	bf38      	it	cc
 801293c:	2204      	movcc	r2, #4
 801293e:	9201      	str	r2, [sp, #4]
 8012940:	9a02      	ldr	r2, [sp, #8]
 8012942:	9303      	str	r3, [sp, #12]
 8012944:	429a      	cmp	r2, r3
 8012946:	d80c      	bhi.n	8012962 <__multiply+0x9e>
 8012948:	2e00      	cmp	r6, #0
 801294a:	dd03      	ble.n	8012954 <__multiply+0x90>
 801294c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012950:	2b00      	cmp	r3, #0
 8012952:	d05b      	beq.n	8012a0c <__multiply+0x148>
 8012954:	6106      	str	r6, [r0, #16]
 8012956:	b005      	add	sp, #20
 8012958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801295c:	f843 2b04 	str.w	r2, [r3], #4
 8012960:	e7d8      	b.n	8012914 <__multiply+0x50>
 8012962:	f8b3 a000 	ldrh.w	sl, [r3]
 8012966:	f1ba 0f00 	cmp.w	sl, #0
 801296a:	d024      	beq.n	80129b6 <__multiply+0xf2>
 801296c:	f104 0e14 	add.w	lr, r4, #20
 8012970:	46a9      	mov	r9, r5
 8012972:	f04f 0c00 	mov.w	ip, #0
 8012976:	f85e 2b04 	ldr.w	r2, [lr], #4
 801297a:	f8d9 1000 	ldr.w	r1, [r9]
 801297e:	fa1f fb82 	uxth.w	fp, r2
 8012982:	b289      	uxth	r1, r1
 8012984:	fb0a 110b 	mla	r1, sl, fp, r1
 8012988:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801298c:	f8d9 2000 	ldr.w	r2, [r9]
 8012990:	4461      	add	r1, ip
 8012992:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012996:	fb0a c20b 	mla	r2, sl, fp, ip
 801299a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801299e:	b289      	uxth	r1, r1
 80129a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80129a4:	4577      	cmp	r7, lr
 80129a6:	f849 1b04 	str.w	r1, [r9], #4
 80129aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80129ae:	d8e2      	bhi.n	8012976 <__multiply+0xb2>
 80129b0:	9a01      	ldr	r2, [sp, #4]
 80129b2:	f845 c002 	str.w	ip, [r5, r2]
 80129b6:	9a03      	ldr	r2, [sp, #12]
 80129b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80129bc:	3304      	adds	r3, #4
 80129be:	f1b9 0f00 	cmp.w	r9, #0
 80129c2:	d021      	beq.n	8012a08 <__multiply+0x144>
 80129c4:	6829      	ldr	r1, [r5, #0]
 80129c6:	f104 0c14 	add.w	ip, r4, #20
 80129ca:	46ae      	mov	lr, r5
 80129cc:	f04f 0a00 	mov.w	sl, #0
 80129d0:	f8bc b000 	ldrh.w	fp, [ip]
 80129d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80129d8:	fb09 220b 	mla	r2, r9, fp, r2
 80129dc:	4452      	add	r2, sl
 80129de:	b289      	uxth	r1, r1
 80129e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80129e4:	f84e 1b04 	str.w	r1, [lr], #4
 80129e8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80129ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80129f0:	f8be 1000 	ldrh.w	r1, [lr]
 80129f4:	fb09 110a 	mla	r1, r9, sl, r1
 80129f8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80129fc:	4567      	cmp	r7, ip
 80129fe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012a02:	d8e5      	bhi.n	80129d0 <__multiply+0x10c>
 8012a04:	9a01      	ldr	r2, [sp, #4]
 8012a06:	50a9      	str	r1, [r5, r2]
 8012a08:	3504      	adds	r5, #4
 8012a0a:	e799      	b.n	8012940 <__multiply+0x7c>
 8012a0c:	3e01      	subs	r6, #1
 8012a0e:	e79b      	b.n	8012948 <__multiply+0x84>
 8012a10:	08016757 	.word	0x08016757
 8012a14:	080167c8 	.word	0x080167c8

08012a18 <__pow5mult>:
 8012a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a1c:	4615      	mov	r5, r2
 8012a1e:	f012 0203 	ands.w	r2, r2, #3
 8012a22:	4606      	mov	r6, r0
 8012a24:	460f      	mov	r7, r1
 8012a26:	d007      	beq.n	8012a38 <__pow5mult+0x20>
 8012a28:	4c25      	ldr	r4, [pc, #148]	; (8012ac0 <__pow5mult+0xa8>)
 8012a2a:	3a01      	subs	r2, #1
 8012a2c:	2300      	movs	r3, #0
 8012a2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012a32:	f7ff fe53 	bl	80126dc <__multadd>
 8012a36:	4607      	mov	r7, r0
 8012a38:	10ad      	asrs	r5, r5, #2
 8012a3a:	d03d      	beq.n	8012ab8 <__pow5mult+0xa0>
 8012a3c:	69f4      	ldr	r4, [r6, #28]
 8012a3e:	b97c      	cbnz	r4, 8012a60 <__pow5mult+0x48>
 8012a40:	2010      	movs	r0, #16
 8012a42:	f7ff fd23 	bl	801248c <malloc>
 8012a46:	4602      	mov	r2, r0
 8012a48:	61f0      	str	r0, [r6, #28]
 8012a4a:	b928      	cbnz	r0, 8012a58 <__pow5mult+0x40>
 8012a4c:	4b1d      	ldr	r3, [pc, #116]	; (8012ac4 <__pow5mult+0xac>)
 8012a4e:	481e      	ldr	r0, [pc, #120]	; (8012ac8 <__pow5mult+0xb0>)
 8012a50:	f240 11b3 	movw	r1, #435	; 0x1b3
 8012a54:	f7ff f958 	bl	8011d08 <__assert_func>
 8012a58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012a5c:	6004      	str	r4, [r0, #0]
 8012a5e:	60c4      	str	r4, [r0, #12]
 8012a60:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8012a64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012a68:	b94c      	cbnz	r4, 8012a7e <__pow5mult+0x66>
 8012a6a:	f240 2171 	movw	r1, #625	; 0x271
 8012a6e:	4630      	mov	r0, r6
 8012a70:	f7ff ff12 	bl	8012898 <__i2b>
 8012a74:	2300      	movs	r3, #0
 8012a76:	f8c8 0008 	str.w	r0, [r8, #8]
 8012a7a:	4604      	mov	r4, r0
 8012a7c:	6003      	str	r3, [r0, #0]
 8012a7e:	f04f 0900 	mov.w	r9, #0
 8012a82:	07eb      	lsls	r3, r5, #31
 8012a84:	d50a      	bpl.n	8012a9c <__pow5mult+0x84>
 8012a86:	4639      	mov	r1, r7
 8012a88:	4622      	mov	r2, r4
 8012a8a:	4630      	mov	r0, r6
 8012a8c:	f7ff ff1a 	bl	80128c4 <__multiply>
 8012a90:	4639      	mov	r1, r7
 8012a92:	4680      	mov	r8, r0
 8012a94:	4630      	mov	r0, r6
 8012a96:	f7ff fdff 	bl	8012698 <_Bfree>
 8012a9a:	4647      	mov	r7, r8
 8012a9c:	106d      	asrs	r5, r5, #1
 8012a9e:	d00b      	beq.n	8012ab8 <__pow5mult+0xa0>
 8012aa0:	6820      	ldr	r0, [r4, #0]
 8012aa2:	b938      	cbnz	r0, 8012ab4 <__pow5mult+0x9c>
 8012aa4:	4622      	mov	r2, r4
 8012aa6:	4621      	mov	r1, r4
 8012aa8:	4630      	mov	r0, r6
 8012aaa:	f7ff ff0b 	bl	80128c4 <__multiply>
 8012aae:	6020      	str	r0, [r4, #0]
 8012ab0:	f8c0 9000 	str.w	r9, [r0]
 8012ab4:	4604      	mov	r4, r0
 8012ab6:	e7e4      	b.n	8012a82 <__pow5mult+0x6a>
 8012ab8:	4638      	mov	r0, r7
 8012aba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012abe:	bf00      	nop
 8012ac0:	08016918 	.word	0x08016918
 8012ac4:	080164ea 	.word	0x080164ea
 8012ac8:	080167c8 	.word	0x080167c8

08012acc <__lshift>:
 8012acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ad0:	460c      	mov	r4, r1
 8012ad2:	6849      	ldr	r1, [r1, #4]
 8012ad4:	6923      	ldr	r3, [r4, #16]
 8012ad6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012ada:	68a3      	ldr	r3, [r4, #8]
 8012adc:	4607      	mov	r7, r0
 8012ade:	4691      	mov	r9, r2
 8012ae0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012ae4:	f108 0601 	add.w	r6, r8, #1
 8012ae8:	42b3      	cmp	r3, r6
 8012aea:	db0b      	blt.n	8012b04 <__lshift+0x38>
 8012aec:	4638      	mov	r0, r7
 8012aee:	f7ff fd93 	bl	8012618 <_Balloc>
 8012af2:	4605      	mov	r5, r0
 8012af4:	b948      	cbnz	r0, 8012b0a <__lshift+0x3e>
 8012af6:	4602      	mov	r2, r0
 8012af8:	4b28      	ldr	r3, [pc, #160]	; (8012b9c <__lshift+0xd0>)
 8012afa:	4829      	ldr	r0, [pc, #164]	; (8012ba0 <__lshift+0xd4>)
 8012afc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8012b00:	f7ff f902 	bl	8011d08 <__assert_func>
 8012b04:	3101      	adds	r1, #1
 8012b06:	005b      	lsls	r3, r3, #1
 8012b08:	e7ee      	b.n	8012ae8 <__lshift+0x1c>
 8012b0a:	2300      	movs	r3, #0
 8012b0c:	f100 0114 	add.w	r1, r0, #20
 8012b10:	f100 0210 	add.w	r2, r0, #16
 8012b14:	4618      	mov	r0, r3
 8012b16:	4553      	cmp	r3, sl
 8012b18:	db33      	blt.n	8012b82 <__lshift+0xb6>
 8012b1a:	6920      	ldr	r0, [r4, #16]
 8012b1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012b20:	f104 0314 	add.w	r3, r4, #20
 8012b24:	f019 091f 	ands.w	r9, r9, #31
 8012b28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012b2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012b30:	d02b      	beq.n	8012b8a <__lshift+0xbe>
 8012b32:	f1c9 0e20 	rsb	lr, r9, #32
 8012b36:	468a      	mov	sl, r1
 8012b38:	2200      	movs	r2, #0
 8012b3a:	6818      	ldr	r0, [r3, #0]
 8012b3c:	fa00 f009 	lsl.w	r0, r0, r9
 8012b40:	4310      	orrs	r0, r2
 8012b42:	f84a 0b04 	str.w	r0, [sl], #4
 8012b46:	f853 2b04 	ldr.w	r2, [r3], #4
 8012b4a:	459c      	cmp	ip, r3
 8012b4c:	fa22 f20e 	lsr.w	r2, r2, lr
 8012b50:	d8f3      	bhi.n	8012b3a <__lshift+0x6e>
 8012b52:	ebac 0304 	sub.w	r3, ip, r4
 8012b56:	3b15      	subs	r3, #21
 8012b58:	f023 0303 	bic.w	r3, r3, #3
 8012b5c:	3304      	adds	r3, #4
 8012b5e:	f104 0015 	add.w	r0, r4, #21
 8012b62:	4584      	cmp	ip, r0
 8012b64:	bf38      	it	cc
 8012b66:	2304      	movcc	r3, #4
 8012b68:	50ca      	str	r2, [r1, r3]
 8012b6a:	b10a      	cbz	r2, 8012b70 <__lshift+0xa4>
 8012b6c:	f108 0602 	add.w	r6, r8, #2
 8012b70:	3e01      	subs	r6, #1
 8012b72:	4638      	mov	r0, r7
 8012b74:	612e      	str	r6, [r5, #16]
 8012b76:	4621      	mov	r1, r4
 8012b78:	f7ff fd8e 	bl	8012698 <_Bfree>
 8012b7c:	4628      	mov	r0, r5
 8012b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b82:	f842 0f04 	str.w	r0, [r2, #4]!
 8012b86:	3301      	adds	r3, #1
 8012b88:	e7c5      	b.n	8012b16 <__lshift+0x4a>
 8012b8a:	3904      	subs	r1, #4
 8012b8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012b90:	f841 2f04 	str.w	r2, [r1, #4]!
 8012b94:	459c      	cmp	ip, r3
 8012b96:	d8f9      	bhi.n	8012b8c <__lshift+0xc0>
 8012b98:	e7ea      	b.n	8012b70 <__lshift+0xa4>
 8012b9a:	bf00      	nop
 8012b9c:	08016757 	.word	0x08016757
 8012ba0:	080167c8 	.word	0x080167c8

08012ba4 <__mcmp>:
 8012ba4:	b530      	push	{r4, r5, lr}
 8012ba6:	6902      	ldr	r2, [r0, #16]
 8012ba8:	690c      	ldr	r4, [r1, #16]
 8012baa:	1b12      	subs	r2, r2, r4
 8012bac:	d10e      	bne.n	8012bcc <__mcmp+0x28>
 8012bae:	f100 0314 	add.w	r3, r0, #20
 8012bb2:	3114      	adds	r1, #20
 8012bb4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012bb8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012bbc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012bc0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012bc4:	42a5      	cmp	r5, r4
 8012bc6:	d003      	beq.n	8012bd0 <__mcmp+0x2c>
 8012bc8:	d305      	bcc.n	8012bd6 <__mcmp+0x32>
 8012bca:	2201      	movs	r2, #1
 8012bcc:	4610      	mov	r0, r2
 8012bce:	bd30      	pop	{r4, r5, pc}
 8012bd0:	4283      	cmp	r3, r0
 8012bd2:	d3f3      	bcc.n	8012bbc <__mcmp+0x18>
 8012bd4:	e7fa      	b.n	8012bcc <__mcmp+0x28>
 8012bd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012bda:	e7f7      	b.n	8012bcc <__mcmp+0x28>

08012bdc <__mdiff>:
 8012bdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012be0:	460c      	mov	r4, r1
 8012be2:	4606      	mov	r6, r0
 8012be4:	4611      	mov	r1, r2
 8012be6:	4620      	mov	r0, r4
 8012be8:	4690      	mov	r8, r2
 8012bea:	f7ff ffdb 	bl	8012ba4 <__mcmp>
 8012bee:	1e05      	subs	r5, r0, #0
 8012bf0:	d110      	bne.n	8012c14 <__mdiff+0x38>
 8012bf2:	4629      	mov	r1, r5
 8012bf4:	4630      	mov	r0, r6
 8012bf6:	f7ff fd0f 	bl	8012618 <_Balloc>
 8012bfa:	b930      	cbnz	r0, 8012c0a <__mdiff+0x2e>
 8012bfc:	4b3a      	ldr	r3, [pc, #232]	; (8012ce8 <__mdiff+0x10c>)
 8012bfe:	4602      	mov	r2, r0
 8012c00:	f240 2137 	movw	r1, #567	; 0x237
 8012c04:	4839      	ldr	r0, [pc, #228]	; (8012cec <__mdiff+0x110>)
 8012c06:	f7ff f87f 	bl	8011d08 <__assert_func>
 8012c0a:	2301      	movs	r3, #1
 8012c0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012c10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c14:	bfa4      	itt	ge
 8012c16:	4643      	movge	r3, r8
 8012c18:	46a0      	movge	r8, r4
 8012c1a:	4630      	mov	r0, r6
 8012c1c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012c20:	bfa6      	itte	ge
 8012c22:	461c      	movge	r4, r3
 8012c24:	2500      	movge	r5, #0
 8012c26:	2501      	movlt	r5, #1
 8012c28:	f7ff fcf6 	bl	8012618 <_Balloc>
 8012c2c:	b920      	cbnz	r0, 8012c38 <__mdiff+0x5c>
 8012c2e:	4b2e      	ldr	r3, [pc, #184]	; (8012ce8 <__mdiff+0x10c>)
 8012c30:	4602      	mov	r2, r0
 8012c32:	f240 2145 	movw	r1, #581	; 0x245
 8012c36:	e7e5      	b.n	8012c04 <__mdiff+0x28>
 8012c38:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012c3c:	6926      	ldr	r6, [r4, #16]
 8012c3e:	60c5      	str	r5, [r0, #12]
 8012c40:	f104 0914 	add.w	r9, r4, #20
 8012c44:	f108 0514 	add.w	r5, r8, #20
 8012c48:	f100 0e14 	add.w	lr, r0, #20
 8012c4c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012c50:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012c54:	f108 0210 	add.w	r2, r8, #16
 8012c58:	46f2      	mov	sl, lr
 8012c5a:	2100      	movs	r1, #0
 8012c5c:	f859 3b04 	ldr.w	r3, [r9], #4
 8012c60:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012c64:	fa11 f88b 	uxtah	r8, r1, fp
 8012c68:	b299      	uxth	r1, r3
 8012c6a:	0c1b      	lsrs	r3, r3, #16
 8012c6c:	eba8 0801 	sub.w	r8, r8, r1
 8012c70:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012c74:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012c78:	fa1f f888 	uxth.w	r8, r8
 8012c7c:	1419      	asrs	r1, r3, #16
 8012c7e:	454e      	cmp	r6, r9
 8012c80:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012c84:	f84a 3b04 	str.w	r3, [sl], #4
 8012c88:	d8e8      	bhi.n	8012c5c <__mdiff+0x80>
 8012c8a:	1b33      	subs	r3, r6, r4
 8012c8c:	3b15      	subs	r3, #21
 8012c8e:	f023 0303 	bic.w	r3, r3, #3
 8012c92:	3304      	adds	r3, #4
 8012c94:	3415      	adds	r4, #21
 8012c96:	42a6      	cmp	r6, r4
 8012c98:	bf38      	it	cc
 8012c9a:	2304      	movcc	r3, #4
 8012c9c:	441d      	add	r5, r3
 8012c9e:	4473      	add	r3, lr
 8012ca0:	469e      	mov	lr, r3
 8012ca2:	462e      	mov	r6, r5
 8012ca4:	4566      	cmp	r6, ip
 8012ca6:	d30e      	bcc.n	8012cc6 <__mdiff+0xea>
 8012ca8:	f10c 0203 	add.w	r2, ip, #3
 8012cac:	1b52      	subs	r2, r2, r5
 8012cae:	f022 0203 	bic.w	r2, r2, #3
 8012cb2:	3d03      	subs	r5, #3
 8012cb4:	45ac      	cmp	ip, r5
 8012cb6:	bf38      	it	cc
 8012cb8:	2200      	movcc	r2, #0
 8012cba:	4413      	add	r3, r2
 8012cbc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8012cc0:	b17a      	cbz	r2, 8012ce2 <__mdiff+0x106>
 8012cc2:	6107      	str	r7, [r0, #16]
 8012cc4:	e7a4      	b.n	8012c10 <__mdiff+0x34>
 8012cc6:	f856 8b04 	ldr.w	r8, [r6], #4
 8012cca:	fa11 f288 	uxtah	r2, r1, r8
 8012cce:	1414      	asrs	r4, r2, #16
 8012cd0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012cd4:	b292      	uxth	r2, r2
 8012cd6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012cda:	f84e 2b04 	str.w	r2, [lr], #4
 8012cde:	1421      	asrs	r1, r4, #16
 8012ce0:	e7e0      	b.n	8012ca4 <__mdiff+0xc8>
 8012ce2:	3f01      	subs	r7, #1
 8012ce4:	e7ea      	b.n	8012cbc <__mdiff+0xe0>
 8012ce6:	bf00      	nop
 8012ce8:	08016757 	.word	0x08016757
 8012cec:	080167c8 	.word	0x080167c8

08012cf0 <__ulp>:
 8012cf0:	b082      	sub	sp, #8
 8012cf2:	ed8d 0b00 	vstr	d0, [sp]
 8012cf6:	9a01      	ldr	r2, [sp, #4]
 8012cf8:	4b0f      	ldr	r3, [pc, #60]	; (8012d38 <__ulp+0x48>)
 8012cfa:	4013      	ands	r3, r2
 8012cfc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	dc08      	bgt.n	8012d16 <__ulp+0x26>
 8012d04:	425b      	negs	r3, r3
 8012d06:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8012d0a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012d0e:	da04      	bge.n	8012d1a <__ulp+0x2a>
 8012d10:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012d14:	4113      	asrs	r3, r2
 8012d16:	2200      	movs	r2, #0
 8012d18:	e008      	b.n	8012d2c <__ulp+0x3c>
 8012d1a:	f1a2 0314 	sub.w	r3, r2, #20
 8012d1e:	2b1e      	cmp	r3, #30
 8012d20:	bfda      	itte	le
 8012d22:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8012d26:	40da      	lsrle	r2, r3
 8012d28:	2201      	movgt	r2, #1
 8012d2a:	2300      	movs	r3, #0
 8012d2c:	4619      	mov	r1, r3
 8012d2e:	4610      	mov	r0, r2
 8012d30:	ec41 0b10 	vmov	d0, r0, r1
 8012d34:	b002      	add	sp, #8
 8012d36:	4770      	bx	lr
 8012d38:	7ff00000 	.word	0x7ff00000

08012d3c <__b2d>:
 8012d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d40:	6906      	ldr	r6, [r0, #16]
 8012d42:	f100 0814 	add.w	r8, r0, #20
 8012d46:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8012d4a:	1f37      	subs	r7, r6, #4
 8012d4c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012d50:	4610      	mov	r0, r2
 8012d52:	f7ff fd53 	bl	80127fc <__hi0bits>
 8012d56:	f1c0 0320 	rsb	r3, r0, #32
 8012d5a:	280a      	cmp	r0, #10
 8012d5c:	600b      	str	r3, [r1, #0]
 8012d5e:	491b      	ldr	r1, [pc, #108]	; (8012dcc <__b2d+0x90>)
 8012d60:	dc15      	bgt.n	8012d8e <__b2d+0x52>
 8012d62:	f1c0 0c0b 	rsb	ip, r0, #11
 8012d66:	fa22 f30c 	lsr.w	r3, r2, ip
 8012d6a:	45b8      	cmp	r8, r7
 8012d6c:	ea43 0501 	orr.w	r5, r3, r1
 8012d70:	bf34      	ite	cc
 8012d72:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012d76:	2300      	movcs	r3, #0
 8012d78:	3015      	adds	r0, #21
 8012d7a:	fa02 f000 	lsl.w	r0, r2, r0
 8012d7e:	fa23 f30c 	lsr.w	r3, r3, ip
 8012d82:	4303      	orrs	r3, r0
 8012d84:	461c      	mov	r4, r3
 8012d86:	ec45 4b10 	vmov	d0, r4, r5
 8012d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d8e:	45b8      	cmp	r8, r7
 8012d90:	bf3a      	itte	cc
 8012d92:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012d96:	f1a6 0708 	subcc.w	r7, r6, #8
 8012d9a:	2300      	movcs	r3, #0
 8012d9c:	380b      	subs	r0, #11
 8012d9e:	d012      	beq.n	8012dc6 <__b2d+0x8a>
 8012da0:	f1c0 0120 	rsb	r1, r0, #32
 8012da4:	fa23 f401 	lsr.w	r4, r3, r1
 8012da8:	4082      	lsls	r2, r0
 8012daa:	4322      	orrs	r2, r4
 8012dac:	4547      	cmp	r7, r8
 8012dae:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8012db2:	bf8c      	ite	hi
 8012db4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8012db8:	2200      	movls	r2, #0
 8012dba:	4083      	lsls	r3, r0
 8012dbc:	40ca      	lsrs	r2, r1
 8012dbe:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8012dc2:	4313      	orrs	r3, r2
 8012dc4:	e7de      	b.n	8012d84 <__b2d+0x48>
 8012dc6:	ea42 0501 	orr.w	r5, r2, r1
 8012dca:	e7db      	b.n	8012d84 <__b2d+0x48>
 8012dcc:	3ff00000 	.word	0x3ff00000

08012dd0 <__d2b>:
 8012dd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012dd4:	460f      	mov	r7, r1
 8012dd6:	2101      	movs	r1, #1
 8012dd8:	ec59 8b10 	vmov	r8, r9, d0
 8012ddc:	4616      	mov	r6, r2
 8012dde:	f7ff fc1b 	bl	8012618 <_Balloc>
 8012de2:	4604      	mov	r4, r0
 8012de4:	b930      	cbnz	r0, 8012df4 <__d2b+0x24>
 8012de6:	4602      	mov	r2, r0
 8012de8:	4b24      	ldr	r3, [pc, #144]	; (8012e7c <__d2b+0xac>)
 8012dea:	4825      	ldr	r0, [pc, #148]	; (8012e80 <__d2b+0xb0>)
 8012dec:	f240 310f 	movw	r1, #783	; 0x30f
 8012df0:	f7fe ff8a 	bl	8011d08 <__assert_func>
 8012df4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012df8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012dfc:	bb2d      	cbnz	r5, 8012e4a <__d2b+0x7a>
 8012dfe:	9301      	str	r3, [sp, #4]
 8012e00:	f1b8 0300 	subs.w	r3, r8, #0
 8012e04:	d026      	beq.n	8012e54 <__d2b+0x84>
 8012e06:	4668      	mov	r0, sp
 8012e08:	9300      	str	r3, [sp, #0]
 8012e0a:	f7ff fd17 	bl	801283c <__lo0bits>
 8012e0e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012e12:	b1e8      	cbz	r0, 8012e50 <__d2b+0x80>
 8012e14:	f1c0 0320 	rsb	r3, r0, #32
 8012e18:	fa02 f303 	lsl.w	r3, r2, r3
 8012e1c:	430b      	orrs	r3, r1
 8012e1e:	40c2      	lsrs	r2, r0
 8012e20:	6163      	str	r3, [r4, #20]
 8012e22:	9201      	str	r2, [sp, #4]
 8012e24:	9b01      	ldr	r3, [sp, #4]
 8012e26:	61a3      	str	r3, [r4, #24]
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	bf14      	ite	ne
 8012e2c:	2202      	movne	r2, #2
 8012e2e:	2201      	moveq	r2, #1
 8012e30:	6122      	str	r2, [r4, #16]
 8012e32:	b1bd      	cbz	r5, 8012e64 <__d2b+0x94>
 8012e34:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012e38:	4405      	add	r5, r0
 8012e3a:	603d      	str	r5, [r7, #0]
 8012e3c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012e40:	6030      	str	r0, [r6, #0]
 8012e42:	4620      	mov	r0, r4
 8012e44:	b003      	add	sp, #12
 8012e46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012e4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012e4e:	e7d6      	b.n	8012dfe <__d2b+0x2e>
 8012e50:	6161      	str	r1, [r4, #20]
 8012e52:	e7e7      	b.n	8012e24 <__d2b+0x54>
 8012e54:	a801      	add	r0, sp, #4
 8012e56:	f7ff fcf1 	bl	801283c <__lo0bits>
 8012e5a:	9b01      	ldr	r3, [sp, #4]
 8012e5c:	6163      	str	r3, [r4, #20]
 8012e5e:	3020      	adds	r0, #32
 8012e60:	2201      	movs	r2, #1
 8012e62:	e7e5      	b.n	8012e30 <__d2b+0x60>
 8012e64:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012e68:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012e6c:	6038      	str	r0, [r7, #0]
 8012e6e:	6918      	ldr	r0, [r3, #16]
 8012e70:	f7ff fcc4 	bl	80127fc <__hi0bits>
 8012e74:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012e78:	e7e2      	b.n	8012e40 <__d2b+0x70>
 8012e7a:	bf00      	nop
 8012e7c:	08016757 	.word	0x08016757
 8012e80:	080167c8 	.word	0x080167c8

08012e84 <__ratio>:
 8012e84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e88:	4688      	mov	r8, r1
 8012e8a:	4669      	mov	r1, sp
 8012e8c:	4681      	mov	r9, r0
 8012e8e:	f7ff ff55 	bl	8012d3c <__b2d>
 8012e92:	a901      	add	r1, sp, #4
 8012e94:	4640      	mov	r0, r8
 8012e96:	ec55 4b10 	vmov	r4, r5, d0
 8012e9a:	ee10 aa10 	vmov	sl, s0
 8012e9e:	f7ff ff4d 	bl	8012d3c <__b2d>
 8012ea2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8012ea6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8012eaa:	1ad2      	subs	r2, r2, r3
 8012eac:	e9dd 3100 	ldrd	r3, r1, [sp]
 8012eb0:	1a5b      	subs	r3, r3, r1
 8012eb2:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8012eb6:	ec57 6b10 	vmov	r6, r7, d0
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	bfd6      	itet	le
 8012ebe:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012ec2:	462a      	movgt	r2, r5
 8012ec4:	463a      	movle	r2, r7
 8012ec6:	46ab      	mov	fp, r5
 8012ec8:	bfd6      	itet	le
 8012eca:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8012ece:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8012ed2:	ee00 3a90 	vmovle	s1, r3
 8012ed6:	ec4b ab17 	vmov	d7, sl, fp
 8012eda:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8012ede:	b003      	add	sp, #12
 8012ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012ee4 <__copybits>:
 8012ee4:	3901      	subs	r1, #1
 8012ee6:	b570      	push	{r4, r5, r6, lr}
 8012ee8:	1149      	asrs	r1, r1, #5
 8012eea:	6914      	ldr	r4, [r2, #16]
 8012eec:	3101      	adds	r1, #1
 8012eee:	f102 0314 	add.w	r3, r2, #20
 8012ef2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012ef6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012efa:	1f05      	subs	r5, r0, #4
 8012efc:	42a3      	cmp	r3, r4
 8012efe:	d30c      	bcc.n	8012f1a <__copybits+0x36>
 8012f00:	1aa3      	subs	r3, r4, r2
 8012f02:	3b11      	subs	r3, #17
 8012f04:	f023 0303 	bic.w	r3, r3, #3
 8012f08:	3211      	adds	r2, #17
 8012f0a:	42a2      	cmp	r2, r4
 8012f0c:	bf88      	it	hi
 8012f0e:	2300      	movhi	r3, #0
 8012f10:	4418      	add	r0, r3
 8012f12:	2300      	movs	r3, #0
 8012f14:	4288      	cmp	r0, r1
 8012f16:	d305      	bcc.n	8012f24 <__copybits+0x40>
 8012f18:	bd70      	pop	{r4, r5, r6, pc}
 8012f1a:	f853 6b04 	ldr.w	r6, [r3], #4
 8012f1e:	f845 6f04 	str.w	r6, [r5, #4]!
 8012f22:	e7eb      	b.n	8012efc <__copybits+0x18>
 8012f24:	f840 3b04 	str.w	r3, [r0], #4
 8012f28:	e7f4      	b.n	8012f14 <__copybits+0x30>

08012f2a <__any_on>:
 8012f2a:	f100 0214 	add.w	r2, r0, #20
 8012f2e:	6900      	ldr	r0, [r0, #16]
 8012f30:	114b      	asrs	r3, r1, #5
 8012f32:	4298      	cmp	r0, r3
 8012f34:	b510      	push	{r4, lr}
 8012f36:	db11      	blt.n	8012f5c <__any_on+0x32>
 8012f38:	dd0a      	ble.n	8012f50 <__any_on+0x26>
 8012f3a:	f011 011f 	ands.w	r1, r1, #31
 8012f3e:	d007      	beq.n	8012f50 <__any_on+0x26>
 8012f40:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012f44:	fa24 f001 	lsr.w	r0, r4, r1
 8012f48:	fa00 f101 	lsl.w	r1, r0, r1
 8012f4c:	428c      	cmp	r4, r1
 8012f4e:	d10b      	bne.n	8012f68 <__any_on+0x3e>
 8012f50:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012f54:	4293      	cmp	r3, r2
 8012f56:	d803      	bhi.n	8012f60 <__any_on+0x36>
 8012f58:	2000      	movs	r0, #0
 8012f5a:	bd10      	pop	{r4, pc}
 8012f5c:	4603      	mov	r3, r0
 8012f5e:	e7f7      	b.n	8012f50 <__any_on+0x26>
 8012f60:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012f64:	2900      	cmp	r1, #0
 8012f66:	d0f5      	beq.n	8012f54 <__any_on+0x2a>
 8012f68:	2001      	movs	r0, #1
 8012f6a:	e7f6      	b.n	8012f5a <__any_on+0x30>

08012f6c <__ascii_wctomb>:
 8012f6c:	b149      	cbz	r1, 8012f82 <__ascii_wctomb+0x16>
 8012f6e:	2aff      	cmp	r2, #255	; 0xff
 8012f70:	bf85      	ittet	hi
 8012f72:	238a      	movhi	r3, #138	; 0x8a
 8012f74:	6003      	strhi	r3, [r0, #0]
 8012f76:	700a      	strbls	r2, [r1, #0]
 8012f78:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8012f7c:	bf98      	it	ls
 8012f7e:	2001      	movls	r0, #1
 8012f80:	4770      	bx	lr
 8012f82:	4608      	mov	r0, r1
 8012f84:	4770      	bx	lr

08012f86 <__sfputc_r>:
 8012f86:	6893      	ldr	r3, [r2, #8]
 8012f88:	3b01      	subs	r3, #1
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	b410      	push	{r4}
 8012f8e:	6093      	str	r3, [r2, #8]
 8012f90:	da08      	bge.n	8012fa4 <__sfputc_r+0x1e>
 8012f92:	6994      	ldr	r4, [r2, #24]
 8012f94:	42a3      	cmp	r3, r4
 8012f96:	db01      	blt.n	8012f9c <__sfputc_r+0x16>
 8012f98:	290a      	cmp	r1, #10
 8012f9a:	d103      	bne.n	8012fa4 <__sfputc_r+0x1e>
 8012f9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012fa0:	f000 bb84 	b.w	80136ac <__swbuf_r>
 8012fa4:	6813      	ldr	r3, [r2, #0]
 8012fa6:	1c58      	adds	r0, r3, #1
 8012fa8:	6010      	str	r0, [r2, #0]
 8012faa:	7019      	strb	r1, [r3, #0]
 8012fac:	4608      	mov	r0, r1
 8012fae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012fb2:	4770      	bx	lr

08012fb4 <__sfputs_r>:
 8012fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fb6:	4606      	mov	r6, r0
 8012fb8:	460f      	mov	r7, r1
 8012fba:	4614      	mov	r4, r2
 8012fbc:	18d5      	adds	r5, r2, r3
 8012fbe:	42ac      	cmp	r4, r5
 8012fc0:	d101      	bne.n	8012fc6 <__sfputs_r+0x12>
 8012fc2:	2000      	movs	r0, #0
 8012fc4:	e007      	b.n	8012fd6 <__sfputs_r+0x22>
 8012fc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012fca:	463a      	mov	r2, r7
 8012fcc:	4630      	mov	r0, r6
 8012fce:	f7ff ffda 	bl	8012f86 <__sfputc_r>
 8012fd2:	1c43      	adds	r3, r0, #1
 8012fd4:	d1f3      	bne.n	8012fbe <__sfputs_r+0xa>
 8012fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012fd8 <_vfiprintf_r>:
 8012fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fdc:	460d      	mov	r5, r1
 8012fde:	b09d      	sub	sp, #116	; 0x74
 8012fe0:	4614      	mov	r4, r2
 8012fe2:	4698      	mov	r8, r3
 8012fe4:	4606      	mov	r6, r0
 8012fe6:	b118      	cbz	r0, 8012ff0 <_vfiprintf_r+0x18>
 8012fe8:	6a03      	ldr	r3, [r0, #32]
 8012fea:	b90b      	cbnz	r3, 8012ff0 <_vfiprintf_r+0x18>
 8012fec:	f7fe fcde 	bl	80119ac <__sinit>
 8012ff0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012ff2:	07d9      	lsls	r1, r3, #31
 8012ff4:	d405      	bmi.n	8013002 <_vfiprintf_r+0x2a>
 8012ff6:	89ab      	ldrh	r3, [r5, #12]
 8012ff8:	059a      	lsls	r2, r3, #22
 8012ffa:	d402      	bmi.n	8013002 <_vfiprintf_r+0x2a>
 8012ffc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012ffe:	f7fe fe6a 	bl	8011cd6 <__retarget_lock_acquire_recursive>
 8013002:	89ab      	ldrh	r3, [r5, #12]
 8013004:	071b      	lsls	r3, r3, #28
 8013006:	d501      	bpl.n	801300c <_vfiprintf_r+0x34>
 8013008:	692b      	ldr	r3, [r5, #16]
 801300a:	b99b      	cbnz	r3, 8013034 <_vfiprintf_r+0x5c>
 801300c:	4629      	mov	r1, r5
 801300e:	4630      	mov	r0, r6
 8013010:	f000 fb8a 	bl	8013728 <__swsetup_r>
 8013014:	b170      	cbz	r0, 8013034 <_vfiprintf_r+0x5c>
 8013016:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013018:	07dc      	lsls	r4, r3, #31
 801301a:	d504      	bpl.n	8013026 <_vfiprintf_r+0x4e>
 801301c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013020:	b01d      	add	sp, #116	; 0x74
 8013022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013026:	89ab      	ldrh	r3, [r5, #12]
 8013028:	0598      	lsls	r0, r3, #22
 801302a:	d4f7      	bmi.n	801301c <_vfiprintf_r+0x44>
 801302c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801302e:	f7fe fe53 	bl	8011cd8 <__retarget_lock_release_recursive>
 8013032:	e7f3      	b.n	801301c <_vfiprintf_r+0x44>
 8013034:	2300      	movs	r3, #0
 8013036:	9309      	str	r3, [sp, #36]	; 0x24
 8013038:	2320      	movs	r3, #32
 801303a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801303e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013042:	2330      	movs	r3, #48	; 0x30
 8013044:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80131f8 <_vfiprintf_r+0x220>
 8013048:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801304c:	f04f 0901 	mov.w	r9, #1
 8013050:	4623      	mov	r3, r4
 8013052:	469a      	mov	sl, r3
 8013054:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013058:	b10a      	cbz	r2, 801305e <_vfiprintf_r+0x86>
 801305a:	2a25      	cmp	r2, #37	; 0x25
 801305c:	d1f9      	bne.n	8013052 <_vfiprintf_r+0x7a>
 801305e:	ebba 0b04 	subs.w	fp, sl, r4
 8013062:	d00b      	beq.n	801307c <_vfiprintf_r+0xa4>
 8013064:	465b      	mov	r3, fp
 8013066:	4622      	mov	r2, r4
 8013068:	4629      	mov	r1, r5
 801306a:	4630      	mov	r0, r6
 801306c:	f7ff ffa2 	bl	8012fb4 <__sfputs_r>
 8013070:	3001      	adds	r0, #1
 8013072:	f000 80a9 	beq.w	80131c8 <_vfiprintf_r+0x1f0>
 8013076:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013078:	445a      	add	r2, fp
 801307a:	9209      	str	r2, [sp, #36]	; 0x24
 801307c:	f89a 3000 	ldrb.w	r3, [sl]
 8013080:	2b00      	cmp	r3, #0
 8013082:	f000 80a1 	beq.w	80131c8 <_vfiprintf_r+0x1f0>
 8013086:	2300      	movs	r3, #0
 8013088:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801308c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013090:	f10a 0a01 	add.w	sl, sl, #1
 8013094:	9304      	str	r3, [sp, #16]
 8013096:	9307      	str	r3, [sp, #28]
 8013098:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801309c:	931a      	str	r3, [sp, #104]	; 0x68
 801309e:	4654      	mov	r4, sl
 80130a0:	2205      	movs	r2, #5
 80130a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80130a6:	4854      	ldr	r0, [pc, #336]	; (80131f8 <_vfiprintf_r+0x220>)
 80130a8:	f7ed f8ca 	bl	8000240 <memchr>
 80130ac:	9a04      	ldr	r2, [sp, #16]
 80130ae:	b9d8      	cbnz	r0, 80130e8 <_vfiprintf_r+0x110>
 80130b0:	06d1      	lsls	r1, r2, #27
 80130b2:	bf44      	itt	mi
 80130b4:	2320      	movmi	r3, #32
 80130b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80130ba:	0713      	lsls	r3, r2, #28
 80130bc:	bf44      	itt	mi
 80130be:	232b      	movmi	r3, #43	; 0x2b
 80130c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80130c4:	f89a 3000 	ldrb.w	r3, [sl]
 80130c8:	2b2a      	cmp	r3, #42	; 0x2a
 80130ca:	d015      	beq.n	80130f8 <_vfiprintf_r+0x120>
 80130cc:	9a07      	ldr	r2, [sp, #28]
 80130ce:	4654      	mov	r4, sl
 80130d0:	2000      	movs	r0, #0
 80130d2:	f04f 0c0a 	mov.w	ip, #10
 80130d6:	4621      	mov	r1, r4
 80130d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80130dc:	3b30      	subs	r3, #48	; 0x30
 80130de:	2b09      	cmp	r3, #9
 80130e0:	d94d      	bls.n	801317e <_vfiprintf_r+0x1a6>
 80130e2:	b1b0      	cbz	r0, 8013112 <_vfiprintf_r+0x13a>
 80130e4:	9207      	str	r2, [sp, #28]
 80130e6:	e014      	b.n	8013112 <_vfiprintf_r+0x13a>
 80130e8:	eba0 0308 	sub.w	r3, r0, r8
 80130ec:	fa09 f303 	lsl.w	r3, r9, r3
 80130f0:	4313      	orrs	r3, r2
 80130f2:	9304      	str	r3, [sp, #16]
 80130f4:	46a2      	mov	sl, r4
 80130f6:	e7d2      	b.n	801309e <_vfiprintf_r+0xc6>
 80130f8:	9b03      	ldr	r3, [sp, #12]
 80130fa:	1d19      	adds	r1, r3, #4
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	9103      	str	r1, [sp, #12]
 8013100:	2b00      	cmp	r3, #0
 8013102:	bfbb      	ittet	lt
 8013104:	425b      	neglt	r3, r3
 8013106:	f042 0202 	orrlt.w	r2, r2, #2
 801310a:	9307      	strge	r3, [sp, #28]
 801310c:	9307      	strlt	r3, [sp, #28]
 801310e:	bfb8      	it	lt
 8013110:	9204      	strlt	r2, [sp, #16]
 8013112:	7823      	ldrb	r3, [r4, #0]
 8013114:	2b2e      	cmp	r3, #46	; 0x2e
 8013116:	d10c      	bne.n	8013132 <_vfiprintf_r+0x15a>
 8013118:	7863      	ldrb	r3, [r4, #1]
 801311a:	2b2a      	cmp	r3, #42	; 0x2a
 801311c:	d134      	bne.n	8013188 <_vfiprintf_r+0x1b0>
 801311e:	9b03      	ldr	r3, [sp, #12]
 8013120:	1d1a      	adds	r2, r3, #4
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	9203      	str	r2, [sp, #12]
 8013126:	2b00      	cmp	r3, #0
 8013128:	bfb8      	it	lt
 801312a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801312e:	3402      	adds	r4, #2
 8013130:	9305      	str	r3, [sp, #20]
 8013132:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8013208 <_vfiprintf_r+0x230>
 8013136:	7821      	ldrb	r1, [r4, #0]
 8013138:	2203      	movs	r2, #3
 801313a:	4650      	mov	r0, sl
 801313c:	f7ed f880 	bl	8000240 <memchr>
 8013140:	b138      	cbz	r0, 8013152 <_vfiprintf_r+0x17a>
 8013142:	9b04      	ldr	r3, [sp, #16]
 8013144:	eba0 000a 	sub.w	r0, r0, sl
 8013148:	2240      	movs	r2, #64	; 0x40
 801314a:	4082      	lsls	r2, r0
 801314c:	4313      	orrs	r3, r2
 801314e:	3401      	adds	r4, #1
 8013150:	9304      	str	r3, [sp, #16]
 8013152:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013156:	4829      	ldr	r0, [pc, #164]	; (80131fc <_vfiprintf_r+0x224>)
 8013158:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801315c:	2206      	movs	r2, #6
 801315e:	f7ed f86f 	bl	8000240 <memchr>
 8013162:	2800      	cmp	r0, #0
 8013164:	d03f      	beq.n	80131e6 <_vfiprintf_r+0x20e>
 8013166:	4b26      	ldr	r3, [pc, #152]	; (8013200 <_vfiprintf_r+0x228>)
 8013168:	bb1b      	cbnz	r3, 80131b2 <_vfiprintf_r+0x1da>
 801316a:	9b03      	ldr	r3, [sp, #12]
 801316c:	3307      	adds	r3, #7
 801316e:	f023 0307 	bic.w	r3, r3, #7
 8013172:	3308      	adds	r3, #8
 8013174:	9303      	str	r3, [sp, #12]
 8013176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013178:	443b      	add	r3, r7
 801317a:	9309      	str	r3, [sp, #36]	; 0x24
 801317c:	e768      	b.n	8013050 <_vfiprintf_r+0x78>
 801317e:	fb0c 3202 	mla	r2, ip, r2, r3
 8013182:	460c      	mov	r4, r1
 8013184:	2001      	movs	r0, #1
 8013186:	e7a6      	b.n	80130d6 <_vfiprintf_r+0xfe>
 8013188:	2300      	movs	r3, #0
 801318a:	3401      	adds	r4, #1
 801318c:	9305      	str	r3, [sp, #20]
 801318e:	4619      	mov	r1, r3
 8013190:	f04f 0c0a 	mov.w	ip, #10
 8013194:	4620      	mov	r0, r4
 8013196:	f810 2b01 	ldrb.w	r2, [r0], #1
 801319a:	3a30      	subs	r2, #48	; 0x30
 801319c:	2a09      	cmp	r2, #9
 801319e:	d903      	bls.n	80131a8 <_vfiprintf_r+0x1d0>
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d0c6      	beq.n	8013132 <_vfiprintf_r+0x15a>
 80131a4:	9105      	str	r1, [sp, #20]
 80131a6:	e7c4      	b.n	8013132 <_vfiprintf_r+0x15a>
 80131a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80131ac:	4604      	mov	r4, r0
 80131ae:	2301      	movs	r3, #1
 80131b0:	e7f0      	b.n	8013194 <_vfiprintf_r+0x1bc>
 80131b2:	ab03      	add	r3, sp, #12
 80131b4:	9300      	str	r3, [sp, #0]
 80131b6:	462a      	mov	r2, r5
 80131b8:	4b12      	ldr	r3, [pc, #72]	; (8013204 <_vfiprintf_r+0x22c>)
 80131ba:	a904      	add	r1, sp, #16
 80131bc:	4630      	mov	r0, r6
 80131be:	f3af 8000 	nop.w
 80131c2:	4607      	mov	r7, r0
 80131c4:	1c78      	adds	r0, r7, #1
 80131c6:	d1d6      	bne.n	8013176 <_vfiprintf_r+0x19e>
 80131c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80131ca:	07d9      	lsls	r1, r3, #31
 80131cc:	d405      	bmi.n	80131da <_vfiprintf_r+0x202>
 80131ce:	89ab      	ldrh	r3, [r5, #12]
 80131d0:	059a      	lsls	r2, r3, #22
 80131d2:	d402      	bmi.n	80131da <_vfiprintf_r+0x202>
 80131d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80131d6:	f7fe fd7f 	bl	8011cd8 <__retarget_lock_release_recursive>
 80131da:	89ab      	ldrh	r3, [r5, #12]
 80131dc:	065b      	lsls	r3, r3, #25
 80131de:	f53f af1d 	bmi.w	801301c <_vfiprintf_r+0x44>
 80131e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80131e4:	e71c      	b.n	8013020 <_vfiprintf_r+0x48>
 80131e6:	ab03      	add	r3, sp, #12
 80131e8:	9300      	str	r3, [sp, #0]
 80131ea:	462a      	mov	r2, r5
 80131ec:	4b05      	ldr	r3, [pc, #20]	; (8013204 <_vfiprintf_r+0x22c>)
 80131ee:	a904      	add	r1, sp, #16
 80131f0:	4630      	mov	r0, r6
 80131f2:	f000 f879 	bl	80132e8 <_printf_i>
 80131f6:	e7e4      	b.n	80131c2 <_vfiprintf_r+0x1ea>
 80131f8:	08016924 	.word	0x08016924
 80131fc:	0801692e 	.word	0x0801692e
 8013200:	00000000 	.word	0x00000000
 8013204:	08012fb5 	.word	0x08012fb5
 8013208:	0801692a 	.word	0x0801692a

0801320c <_printf_common>:
 801320c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013210:	4616      	mov	r6, r2
 8013212:	4699      	mov	r9, r3
 8013214:	688a      	ldr	r2, [r1, #8]
 8013216:	690b      	ldr	r3, [r1, #16]
 8013218:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801321c:	4293      	cmp	r3, r2
 801321e:	bfb8      	it	lt
 8013220:	4613      	movlt	r3, r2
 8013222:	6033      	str	r3, [r6, #0]
 8013224:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013228:	4607      	mov	r7, r0
 801322a:	460c      	mov	r4, r1
 801322c:	b10a      	cbz	r2, 8013232 <_printf_common+0x26>
 801322e:	3301      	adds	r3, #1
 8013230:	6033      	str	r3, [r6, #0]
 8013232:	6823      	ldr	r3, [r4, #0]
 8013234:	0699      	lsls	r1, r3, #26
 8013236:	bf42      	ittt	mi
 8013238:	6833      	ldrmi	r3, [r6, #0]
 801323a:	3302      	addmi	r3, #2
 801323c:	6033      	strmi	r3, [r6, #0]
 801323e:	6825      	ldr	r5, [r4, #0]
 8013240:	f015 0506 	ands.w	r5, r5, #6
 8013244:	d106      	bne.n	8013254 <_printf_common+0x48>
 8013246:	f104 0a19 	add.w	sl, r4, #25
 801324a:	68e3      	ldr	r3, [r4, #12]
 801324c:	6832      	ldr	r2, [r6, #0]
 801324e:	1a9b      	subs	r3, r3, r2
 8013250:	42ab      	cmp	r3, r5
 8013252:	dc26      	bgt.n	80132a2 <_printf_common+0x96>
 8013254:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013258:	1e13      	subs	r3, r2, #0
 801325a:	6822      	ldr	r2, [r4, #0]
 801325c:	bf18      	it	ne
 801325e:	2301      	movne	r3, #1
 8013260:	0692      	lsls	r2, r2, #26
 8013262:	d42b      	bmi.n	80132bc <_printf_common+0xb0>
 8013264:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013268:	4649      	mov	r1, r9
 801326a:	4638      	mov	r0, r7
 801326c:	47c0      	blx	r8
 801326e:	3001      	adds	r0, #1
 8013270:	d01e      	beq.n	80132b0 <_printf_common+0xa4>
 8013272:	6823      	ldr	r3, [r4, #0]
 8013274:	6922      	ldr	r2, [r4, #16]
 8013276:	f003 0306 	and.w	r3, r3, #6
 801327a:	2b04      	cmp	r3, #4
 801327c:	bf02      	ittt	eq
 801327e:	68e5      	ldreq	r5, [r4, #12]
 8013280:	6833      	ldreq	r3, [r6, #0]
 8013282:	1aed      	subeq	r5, r5, r3
 8013284:	68a3      	ldr	r3, [r4, #8]
 8013286:	bf0c      	ite	eq
 8013288:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801328c:	2500      	movne	r5, #0
 801328e:	4293      	cmp	r3, r2
 8013290:	bfc4      	itt	gt
 8013292:	1a9b      	subgt	r3, r3, r2
 8013294:	18ed      	addgt	r5, r5, r3
 8013296:	2600      	movs	r6, #0
 8013298:	341a      	adds	r4, #26
 801329a:	42b5      	cmp	r5, r6
 801329c:	d11a      	bne.n	80132d4 <_printf_common+0xc8>
 801329e:	2000      	movs	r0, #0
 80132a0:	e008      	b.n	80132b4 <_printf_common+0xa8>
 80132a2:	2301      	movs	r3, #1
 80132a4:	4652      	mov	r2, sl
 80132a6:	4649      	mov	r1, r9
 80132a8:	4638      	mov	r0, r7
 80132aa:	47c0      	blx	r8
 80132ac:	3001      	adds	r0, #1
 80132ae:	d103      	bne.n	80132b8 <_printf_common+0xac>
 80132b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80132b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80132b8:	3501      	adds	r5, #1
 80132ba:	e7c6      	b.n	801324a <_printf_common+0x3e>
 80132bc:	18e1      	adds	r1, r4, r3
 80132be:	1c5a      	adds	r2, r3, #1
 80132c0:	2030      	movs	r0, #48	; 0x30
 80132c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80132c6:	4422      	add	r2, r4
 80132c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80132cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80132d0:	3302      	adds	r3, #2
 80132d2:	e7c7      	b.n	8013264 <_printf_common+0x58>
 80132d4:	2301      	movs	r3, #1
 80132d6:	4622      	mov	r2, r4
 80132d8:	4649      	mov	r1, r9
 80132da:	4638      	mov	r0, r7
 80132dc:	47c0      	blx	r8
 80132de:	3001      	adds	r0, #1
 80132e0:	d0e6      	beq.n	80132b0 <_printf_common+0xa4>
 80132e2:	3601      	adds	r6, #1
 80132e4:	e7d9      	b.n	801329a <_printf_common+0x8e>
	...

080132e8 <_printf_i>:
 80132e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80132ec:	7e0f      	ldrb	r7, [r1, #24]
 80132ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80132f0:	2f78      	cmp	r7, #120	; 0x78
 80132f2:	4691      	mov	r9, r2
 80132f4:	4680      	mov	r8, r0
 80132f6:	460c      	mov	r4, r1
 80132f8:	469a      	mov	sl, r3
 80132fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80132fe:	d807      	bhi.n	8013310 <_printf_i+0x28>
 8013300:	2f62      	cmp	r7, #98	; 0x62
 8013302:	d80a      	bhi.n	801331a <_printf_i+0x32>
 8013304:	2f00      	cmp	r7, #0
 8013306:	f000 80d4 	beq.w	80134b2 <_printf_i+0x1ca>
 801330a:	2f58      	cmp	r7, #88	; 0x58
 801330c:	f000 80c0 	beq.w	8013490 <_printf_i+0x1a8>
 8013310:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013314:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013318:	e03a      	b.n	8013390 <_printf_i+0xa8>
 801331a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801331e:	2b15      	cmp	r3, #21
 8013320:	d8f6      	bhi.n	8013310 <_printf_i+0x28>
 8013322:	a101      	add	r1, pc, #4	; (adr r1, 8013328 <_printf_i+0x40>)
 8013324:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013328:	08013381 	.word	0x08013381
 801332c:	08013395 	.word	0x08013395
 8013330:	08013311 	.word	0x08013311
 8013334:	08013311 	.word	0x08013311
 8013338:	08013311 	.word	0x08013311
 801333c:	08013311 	.word	0x08013311
 8013340:	08013395 	.word	0x08013395
 8013344:	08013311 	.word	0x08013311
 8013348:	08013311 	.word	0x08013311
 801334c:	08013311 	.word	0x08013311
 8013350:	08013311 	.word	0x08013311
 8013354:	08013499 	.word	0x08013499
 8013358:	080133c1 	.word	0x080133c1
 801335c:	08013453 	.word	0x08013453
 8013360:	08013311 	.word	0x08013311
 8013364:	08013311 	.word	0x08013311
 8013368:	080134bb 	.word	0x080134bb
 801336c:	08013311 	.word	0x08013311
 8013370:	080133c1 	.word	0x080133c1
 8013374:	08013311 	.word	0x08013311
 8013378:	08013311 	.word	0x08013311
 801337c:	0801345b 	.word	0x0801345b
 8013380:	682b      	ldr	r3, [r5, #0]
 8013382:	1d1a      	adds	r2, r3, #4
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	602a      	str	r2, [r5, #0]
 8013388:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801338c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013390:	2301      	movs	r3, #1
 8013392:	e09f      	b.n	80134d4 <_printf_i+0x1ec>
 8013394:	6820      	ldr	r0, [r4, #0]
 8013396:	682b      	ldr	r3, [r5, #0]
 8013398:	0607      	lsls	r7, r0, #24
 801339a:	f103 0104 	add.w	r1, r3, #4
 801339e:	6029      	str	r1, [r5, #0]
 80133a0:	d501      	bpl.n	80133a6 <_printf_i+0xbe>
 80133a2:	681e      	ldr	r6, [r3, #0]
 80133a4:	e003      	b.n	80133ae <_printf_i+0xc6>
 80133a6:	0646      	lsls	r6, r0, #25
 80133a8:	d5fb      	bpl.n	80133a2 <_printf_i+0xba>
 80133aa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80133ae:	2e00      	cmp	r6, #0
 80133b0:	da03      	bge.n	80133ba <_printf_i+0xd2>
 80133b2:	232d      	movs	r3, #45	; 0x2d
 80133b4:	4276      	negs	r6, r6
 80133b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80133ba:	485a      	ldr	r0, [pc, #360]	; (8013524 <_printf_i+0x23c>)
 80133bc:	230a      	movs	r3, #10
 80133be:	e012      	b.n	80133e6 <_printf_i+0xfe>
 80133c0:	682b      	ldr	r3, [r5, #0]
 80133c2:	6820      	ldr	r0, [r4, #0]
 80133c4:	1d19      	adds	r1, r3, #4
 80133c6:	6029      	str	r1, [r5, #0]
 80133c8:	0605      	lsls	r5, r0, #24
 80133ca:	d501      	bpl.n	80133d0 <_printf_i+0xe8>
 80133cc:	681e      	ldr	r6, [r3, #0]
 80133ce:	e002      	b.n	80133d6 <_printf_i+0xee>
 80133d0:	0641      	lsls	r1, r0, #25
 80133d2:	d5fb      	bpl.n	80133cc <_printf_i+0xe4>
 80133d4:	881e      	ldrh	r6, [r3, #0]
 80133d6:	4853      	ldr	r0, [pc, #332]	; (8013524 <_printf_i+0x23c>)
 80133d8:	2f6f      	cmp	r7, #111	; 0x6f
 80133da:	bf0c      	ite	eq
 80133dc:	2308      	moveq	r3, #8
 80133de:	230a      	movne	r3, #10
 80133e0:	2100      	movs	r1, #0
 80133e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80133e6:	6865      	ldr	r5, [r4, #4]
 80133e8:	60a5      	str	r5, [r4, #8]
 80133ea:	2d00      	cmp	r5, #0
 80133ec:	bfa2      	ittt	ge
 80133ee:	6821      	ldrge	r1, [r4, #0]
 80133f0:	f021 0104 	bicge.w	r1, r1, #4
 80133f4:	6021      	strge	r1, [r4, #0]
 80133f6:	b90e      	cbnz	r6, 80133fc <_printf_i+0x114>
 80133f8:	2d00      	cmp	r5, #0
 80133fa:	d04b      	beq.n	8013494 <_printf_i+0x1ac>
 80133fc:	4615      	mov	r5, r2
 80133fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8013402:	fb03 6711 	mls	r7, r3, r1, r6
 8013406:	5dc7      	ldrb	r7, [r0, r7]
 8013408:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801340c:	4637      	mov	r7, r6
 801340e:	42bb      	cmp	r3, r7
 8013410:	460e      	mov	r6, r1
 8013412:	d9f4      	bls.n	80133fe <_printf_i+0x116>
 8013414:	2b08      	cmp	r3, #8
 8013416:	d10b      	bne.n	8013430 <_printf_i+0x148>
 8013418:	6823      	ldr	r3, [r4, #0]
 801341a:	07de      	lsls	r6, r3, #31
 801341c:	d508      	bpl.n	8013430 <_printf_i+0x148>
 801341e:	6923      	ldr	r3, [r4, #16]
 8013420:	6861      	ldr	r1, [r4, #4]
 8013422:	4299      	cmp	r1, r3
 8013424:	bfde      	ittt	le
 8013426:	2330      	movle	r3, #48	; 0x30
 8013428:	f805 3c01 	strble.w	r3, [r5, #-1]
 801342c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8013430:	1b52      	subs	r2, r2, r5
 8013432:	6122      	str	r2, [r4, #16]
 8013434:	f8cd a000 	str.w	sl, [sp]
 8013438:	464b      	mov	r3, r9
 801343a:	aa03      	add	r2, sp, #12
 801343c:	4621      	mov	r1, r4
 801343e:	4640      	mov	r0, r8
 8013440:	f7ff fee4 	bl	801320c <_printf_common>
 8013444:	3001      	adds	r0, #1
 8013446:	d14a      	bne.n	80134de <_printf_i+0x1f6>
 8013448:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801344c:	b004      	add	sp, #16
 801344e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013452:	6823      	ldr	r3, [r4, #0]
 8013454:	f043 0320 	orr.w	r3, r3, #32
 8013458:	6023      	str	r3, [r4, #0]
 801345a:	4833      	ldr	r0, [pc, #204]	; (8013528 <_printf_i+0x240>)
 801345c:	2778      	movs	r7, #120	; 0x78
 801345e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013462:	6823      	ldr	r3, [r4, #0]
 8013464:	6829      	ldr	r1, [r5, #0]
 8013466:	061f      	lsls	r7, r3, #24
 8013468:	f851 6b04 	ldr.w	r6, [r1], #4
 801346c:	d402      	bmi.n	8013474 <_printf_i+0x18c>
 801346e:	065f      	lsls	r7, r3, #25
 8013470:	bf48      	it	mi
 8013472:	b2b6      	uxthmi	r6, r6
 8013474:	07df      	lsls	r7, r3, #31
 8013476:	bf48      	it	mi
 8013478:	f043 0320 	orrmi.w	r3, r3, #32
 801347c:	6029      	str	r1, [r5, #0]
 801347e:	bf48      	it	mi
 8013480:	6023      	strmi	r3, [r4, #0]
 8013482:	b91e      	cbnz	r6, 801348c <_printf_i+0x1a4>
 8013484:	6823      	ldr	r3, [r4, #0]
 8013486:	f023 0320 	bic.w	r3, r3, #32
 801348a:	6023      	str	r3, [r4, #0]
 801348c:	2310      	movs	r3, #16
 801348e:	e7a7      	b.n	80133e0 <_printf_i+0xf8>
 8013490:	4824      	ldr	r0, [pc, #144]	; (8013524 <_printf_i+0x23c>)
 8013492:	e7e4      	b.n	801345e <_printf_i+0x176>
 8013494:	4615      	mov	r5, r2
 8013496:	e7bd      	b.n	8013414 <_printf_i+0x12c>
 8013498:	682b      	ldr	r3, [r5, #0]
 801349a:	6826      	ldr	r6, [r4, #0]
 801349c:	6961      	ldr	r1, [r4, #20]
 801349e:	1d18      	adds	r0, r3, #4
 80134a0:	6028      	str	r0, [r5, #0]
 80134a2:	0635      	lsls	r5, r6, #24
 80134a4:	681b      	ldr	r3, [r3, #0]
 80134a6:	d501      	bpl.n	80134ac <_printf_i+0x1c4>
 80134a8:	6019      	str	r1, [r3, #0]
 80134aa:	e002      	b.n	80134b2 <_printf_i+0x1ca>
 80134ac:	0670      	lsls	r0, r6, #25
 80134ae:	d5fb      	bpl.n	80134a8 <_printf_i+0x1c0>
 80134b0:	8019      	strh	r1, [r3, #0]
 80134b2:	2300      	movs	r3, #0
 80134b4:	6123      	str	r3, [r4, #16]
 80134b6:	4615      	mov	r5, r2
 80134b8:	e7bc      	b.n	8013434 <_printf_i+0x14c>
 80134ba:	682b      	ldr	r3, [r5, #0]
 80134bc:	1d1a      	adds	r2, r3, #4
 80134be:	602a      	str	r2, [r5, #0]
 80134c0:	681d      	ldr	r5, [r3, #0]
 80134c2:	6862      	ldr	r2, [r4, #4]
 80134c4:	2100      	movs	r1, #0
 80134c6:	4628      	mov	r0, r5
 80134c8:	f7ec feba 	bl	8000240 <memchr>
 80134cc:	b108      	cbz	r0, 80134d2 <_printf_i+0x1ea>
 80134ce:	1b40      	subs	r0, r0, r5
 80134d0:	6060      	str	r0, [r4, #4]
 80134d2:	6863      	ldr	r3, [r4, #4]
 80134d4:	6123      	str	r3, [r4, #16]
 80134d6:	2300      	movs	r3, #0
 80134d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80134dc:	e7aa      	b.n	8013434 <_printf_i+0x14c>
 80134de:	6923      	ldr	r3, [r4, #16]
 80134e0:	462a      	mov	r2, r5
 80134e2:	4649      	mov	r1, r9
 80134e4:	4640      	mov	r0, r8
 80134e6:	47d0      	blx	sl
 80134e8:	3001      	adds	r0, #1
 80134ea:	d0ad      	beq.n	8013448 <_printf_i+0x160>
 80134ec:	6823      	ldr	r3, [r4, #0]
 80134ee:	079b      	lsls	r3, r3, #30
 80134f0:	d413      	bmi.n	801351a <_printf_i+0x232>
 80134f2:	68e0      	ldr	r0, [r4, #12]
 80134f4:	9b03      	ldr	r3, [sp, #12]
 80134f6:	4298      	cmp	r0, r3
 80134f8:	bfb8      	it	lt
 80134fa:	4618      	movlt	r0, r3
 80134fc:	e7a6      	b.n	801344c <_printf_i+0x164>
 80134fe:	2301      	movs	r3, #1
 8013500:	4632      	mov	r2, r6
 8013502:	4649      	mov	r1, r9
 8013504:	4640      	mov	r0, r8
 8013506:	47d0      	blx	sl
 8013508:	3001      	adds	r0, #1
 801350a:	d09d      	beq.n	8013448 <_printf_i+0x160>
 801350c:	3501      	adds	r5, #1
 801350e:	68e3      	ldr	r3, [r4, #12]
 8013510:	9903      	ldr	r1, [sp, #12]
 8013512:	1a5b      	subs	r3, r3, r1
 8013514:	42ab      	cmp	r3, r5
 8013516:	dcf2      	bgt.n	80134fe <_printf_i+0x216>
 8013518:	e7eb      	b.n	80134f2 <_printf_i+0x20a>
 801351a:	2500      	movs	r5, #0
 801351c:	f104 0619 	add.w	r6, r4, #25
 8013520:	e7f5      	b.n	801350e <_printf_i+0x226>
 8013522:	bf00      	nop
 8013524:	08016935 	.word	0x08016935
 8013528:	08016946 	.word	0x08016946

0801352c <__sflush_r>:
 801352c:	898a      	ldrh	r2, [r1, #12]
 801352e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013532:	4605      	mov	r5, r0
 8013534:	0710      	lsls	r0, r2, #28
 8013536:	460c      	mov	r4, r1
 8013538:	d458      	bmi.n	80135ec <__sflush_r+0xc0>
 801353a:	684b      	ldr	r3, [r1, #4]
 801353c:	2b00      	cmp	r3, #0
 801353e:	dc05      	bgt.n	801354c <__sflush_r+0x20>
 8013540:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013542:	2b00      	cmp	r3, #0
 8013544:	dc02      	bgt.n	801354c <__sflush_r+0x20>
 8013546:	2000      	movs	r0, #0
 8013548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801354c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801354e:	2e00      	cmp	r6, #0
 8013550:	d0f9      	beq.n	8013546 <__sflush_r+0x1a>
 8013552:	2300      	movs	r3, #0
 8013554:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013558:	682f      	ldr	r7, [r5, #0]
 801355a:	6a21      	ldr	r1, [r4, #32]
 801355c:	602b      	str	r3, [r5, #0]
 801355e:	d032      	beq.n	80135c6 <__sflush_r+0x9a>
 8013560:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013562:	89a3      	ldrh	r3, [r4, #12]
 8013564:	075a      	lsls	r2, r3, #29
 8013566:	d505      	bpl.n	8013574 <__sflush_r+0x48>
 8013568:	6863      	ldr	r3, [r4, #4]
 801356a:	1ac0      	subs	r0, r0, r3
 801356c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801356e:	b10b      	cbz	r3, 8013574 <__sflush_r+0x48>
 8013570:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013572:	1ac0      	subs	r0, r0, r3
 8013574:	2300      	movs	r3, #0
 8013576:	4602      	mov	r2, r0
 8013578:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801357a:	6a21      	ldr	r1, [r4, #32]
 801357c:	4628      	mov	r0, r5
 801357e:	47b0      	blx	r6
 8013580:	1c43      	adds	r3, r0, #1
 8013582:	89a3      	ldrh	r3, [r4, #12]
 8013584:	d106      	bne.n	8013594 <__sflush_r+0x68>
 8013586:	6829      	ldr	r1, [r5, #0]
 8013588:	291d      	cmp	r1, #29
 801358a:	d82b      	bhi.n	80135e4 <__sflush_r+0xb8>
 801358c:	4a29      	ldr	r2, [pc, #164]	; (8013634 <__sflush_r+0x108>)
 801358e:	410a      	asrs	r2, r1
 8013590:	07d6      	lsls	r6, r2, #31
 8013592:	d427      	bmi.n	80135e4 <__sflush_r+0xb8>
 8013594:	2200      	movs	r2, #0
 8013596:	6062      	str	r2, [r4, #4]
 8013598:	04d9      	lsls	r1, r3, #19
 801359a:	6922      	ldr	r2, [r4, #16]
 801359c:	6022      	str	r2, [r4, #0]
 801359e:	d504      	bpl.n	80135aa <__sflush_r+0x7e>
 80135a0:	1c42      	adds	r2, r0, #1
 80135a2:	d101      	bne.n	80135a8 <__sflush_r+0x7c>
 80135a4:	682b      	ldr	r3, [r5, #0]
 80135a6:	b903      	cbnz	r3, 80135aa <__sflush_r+0x7e>
 80135a8:	6560      	str	r0, [r4, #84]	; 0x54
 80135aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80135ac:	602f      	str	r7, [r5, #0]
 80135ae:	2900      	cmp	r1, #0
 80135b0:	d0c9      	beq.n	8013546 <__sflush_r+0x1a>
 80135b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80135b6:	4299      	cmp	r1, r3
 80135b8:	d002      	beq.n	80135c0 <__sflush_r+0x94>
 80135ba:	4628      	mov	r0, r5
 80135bc:	f7fe fbc2 	bl	8011d44 <_free_r>
 80135c0:	2000      	movs	r0, #0
 80135c2:	6360      	str	r0, [r4, #52]	; 0x34
 80135c4:	e7c0      	b.n	8013548 <__sflush_r+0x1c>
 80135c6:	2301      	movs	r3, #1
 80135c8:	4628      	mov	r0, r5
 80135ca:	47b0      	blx	r6
 80135cc:	1c41      	adds	r1, r0, #1
 80135ce:	d1c8      	bne.n	8013562 <__sflush_r+0x36>
 80135d0:	682b      	ldr	r3, [r5, #0]
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d0c5      	beq.n	8013562 <__sflush_r+0x36>
 80135d6:	2b1d      	cmp	r3, #29
 80135d8:	d001      	beq.n	80135de <__sflush_r+0xb2>
 80135da:	2b16      	cmp	r3, #22
 80135dc:	d101      	bne.n	80135e2 <__sflush_r+0xb6>
 80135de:	602f      	str	r7, [r5, #0]
 80135e0:	e7b1      	b.n	8013546 <__sflush_r+0x1a>
 80135e2:	89a3      	ldrh	r3, [r4, #12]
 80135e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80135e8:	81a3      	strh	r3, [r4, #12]
 80135ea:	e7ad      	b.n	8013548 <__sflush_r+0x1c>
 80135ec:	690f      	ldr	r7, [r1, #16]
 80135ee:	2f00      	cmp	r7, #0
 80135f0:	d0a9      	beq.n	8013546 <__sflush_r+0x1a>
 80135f2:	0793      	lsls	r3, r2, #30
 80135f4:	680e      	ldr	r6, [r1, #0]
 80135f6:	bf08      	it	eq
 80135f8:	694b      	ldreq	r3, [r1, #20]
 80135fa:	600f      	str	r7, [r1, #0]
 80135fc:	bf18      	it	ne
 80135fe:	2300      	movne	r3, #0
 8013600:	eba6 0807 	sub.w	r8, r6, r7
 8013604:	608b      	str	r3, [r1, #8]
 8013606:	f1b8 0f00 	cmp.w	r8, #0
 801360a:	dd9c      	ble.n	8013546 <__sflush_r+0x1a>
 801360c:	6a21      	ldr	r1, [r4, #32]
 801360e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013610:	4643      	mov	r3, r8
 8013612:	463a      	mov	r2, r7
 8013614:	4628      	mov	r0, r5
 8013616:	47b0      	blx	r6
 8013618:	2800      	cmp	r0, #0
 801361a:	dc06      	bgt.n	801362a <__sflush_r+0xfe>
 801361c:	89a3      	ldrh	r3, [r4, #12]
 801361e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013622:	81a3      	strh	r3, [r4, #12]
 8013624:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013628:	e78e      	b.n	8013548 <__sflush_r+0x1c>
 801362a:	4407      	add	r7, r0
 801362c:	eba8 0800 	sub.w	r8, r8, r0
 8013630:	e7e9      	b.n	8013606 <__sflush_r+0xda>
 8013632:	bf00      	nop
 8013634:	dfbffffe 	.word	0xdfbffffe

08013638 <_fflush_r>:
 8013638:	b538      	push	{r3, r4, r5, lr}
 801363a:	690b      	ldr	r3, [r1, #16]
 801363c:	4605      	mov	r5, r0
 801363e:	460c      	mov	r4, r1
 8013640:	b913      	cbnz	r3, 8013648 <_fflush_r+0x10>
 8013642:	2500      	movs	r5, #0
 8013644:	4628      	mov	r0, r5
 8013646:	bd38      	pop	{r3, r4, r5, pc}
 8013648:	b118      	cbz	r0, 8013652 <_fflush_r+0x1a>
 801364a:	6a03      	ldr	r3, [r0, #32]
 801364c:	b90b      	cbnz	r3, 8013652 <_fflush_r+0x1a>
 801364e:	f7fe f9ad 	bl	80119ac <__sinit>
 8013652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013656:	2b00      	cmp	r3, #0
 8013658:	d0f3      	beq.n	8013642 <_fflush_r+0xa>
 801365a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801365c:	07d0      	lsls	r0, r2, #31
 801365e:	d404      	bmi.n	801366a <_fflush_r+0x32>
 8013660:	0599      	lsls	r1, r3, #22
 8013662:	d402      	bmi.n	801366a <_fflush_r+0x32>
 8013664:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013666:	f7fe fb36 	bl	8011cd6 <__retarget_lock_acquire_recursive>
 801366a:	4628      	mov	r0, r5
 801366c:	4621      	mov	r1, r4
 801366e:	f7ff ff5d 	bl	801352c <__sflush_r>
 8013672:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013674:	07da      	lsls	r2, r3, #31
 8013676:	4605      	mov	r5, r0
 8013678:	d4e4      	bmi.n	8013644 <_fflush_r+0xc>
 801367a:	89a3      	ldrh	r3, [r4, #12]
 801367c:	059b      	lsls	r3, r3, #22
 801367e:	d4e1      	bmi.n	8013644 <_fflush_r+0xc>
 8013680:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013682:	f7fe fb29 	bl	8011cd8 <__retarget_lock_release_recursive>
 8013686:	e7dd      	b.n	8013644 <_fflush_r+0xc>

08013688 <fiprintf>:
 8013688:	b40e      	push	{r1, r2, r3}
 801368a:	b503      	push	{r0, r1, lr}
 801368c:	4601      	mov	r1, r0
 801368e:	ab03      	add	r3, sp, #12
 8013690:	4805      	ldr	r0, [pc, #20]	; (80136a8 <fiprintf+0x20>)
 8013692:	f853 2b04 	ldr.w	r2, [r3], #4
 8013696:	6800      	ldr	r0, [r0, #0]
 8013698:	9301      	str	r3, [sp, #4]
 801369a:	f7ff fc9d 	bl	8012fd8 <_vfiprintf_r>
 801369e:	b002      	add	sp, #8
 80136a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80136a4:	b003      	add	sp, #12
 80136a6:	4770      	bx	lr
 80136a8:	200001f0 	.word	0x200001f0

080136ac <__swbuf_r>:
 80136ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136ae:	460e      	mov	r6, r1
 80136b0:	4614      	mov	r4, r2
 80136b2:	4605      	mov	r5, r0
 80136b4:	b118      	cbz	r0, 80136be <__swbuf_r+0x12>
 80136b6:	6a03      	ldr	r3, [r0, #32]
 80136b8:	b90b      	cbnz	r3, 80136be <__swbuf_r+0x12>
 80136ba:	f7fe f977 	bl	80119ac <__sinit>
 80136be:	69a3      	ldr	r3, [r4, #24]
 80136c0:	60a3      	str	r3, [r4, #8]
 80136c2:	89a3      	ldrh	r3, [r4, #12]
 80136c4:	071a      	lsls	r2, r3, #28
 80136c6:	d525      	bpl.n	8013714 <__swbuf_r+0x68>
 80136c8:	6923      	ldr	r3, [r4, #16]
 80136ca:	b31b      	cbz	r3, 8013714 <__swbuf_r+0x68>
 80136cc:	6823      	ldr	r3, [r4, #0]
 80136ce:	6922      	ldr	r2, [r4, #16]
 80136d0:	1a98      	subs	r0, r3, r2
 80136d2:	6963      	ldr	r3, [r4, #20]
 80136d4:	b2f6      	uxtb	r6, r6
 80136d6:	4283      	cmp	r3, r0
 80136d8:	4637      	mov	r7, r6
 80136da:	dc04      	bgt.n	80136e6 <__swbuf_r+0x3a>
 80136dc:	4621      	mov	r1, r4
 80136de:	4628      	mov	r0, r5
 80136e0:	f7ff ffaa 	bl	8013638 <_fflush_r>
 80136e4:	b9e0      	cbnz	r0, 8013720 <__swbuf_r+0x74>
 80136e6:	68a3      	ldr	r3, [r4, #8]
 80136e8:	3b01      	subs	r3, #1
 80136ea:	60a3      	str	r3, [r4, #8]
 80136ec:	6823      	ldr	r3, [r4, #0]
 80136ee:	1c5a      	adds	r2, r3, #1
 80136f0:	6022      	str	r2, [r4, #0]
 80136f2:	701e      	strb	r6, [r3, #0]
 80136f4:	6962      	ldr	r2, [r4, #20]
 80136f6:	1c43      	adds	r3, r0, #1
 80136f8:	429a      	cmp	r2, r3
 80136fa:	d004      	beq.n	8013706 <__swbuf_r+0x5a>
 80136fc:	89a3      	ldrh	r3, [r4, #12]
 80136fe:	07db      	lsls	r3, r3, #31
 8013700:	d506      	bpl.n	8013710 <__swbuf_r+0x64>
 8013702:	2e0a      	cmp	r6, #10
 8013704:	d104      	bne.n	8013710 <__swbuf_r+0x64>
 8013706:	4621      	mov	r1, r4
 8013708:	4628      	mov	r0, r5
 801370a:	f7ff ff95 	bl	8013638 <_fflush_r>
 801370e:	b938      	cbnz	r0, 8013720 <__swbuf_r+0x74>
 8013710:	4638      	mov	r0, r7
 8013712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013714:	4621      	mov	r1, r4
 8013716:	4628      	mov	r0, r5
 8013718:	f000 f806 	bl	8013728 <__swsetup_r>
 801371c:	2800      	cmp	r0, #0
 801371e:	d0d5      	beq.n	80136cc <__swbuf_r+0x20>
 8013720:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8013724:	e7f4      	b.n	8013710 <__swbuf_r+0x64>
	...

08013728 <__swsetup_r>:
 8013728:	b538      	push	{r3, r4, r5, lr}
 801372a:	4b2a      	ldr	r3, [pc, #168]	; (80137d4 <__swsetup_r+0xac>)
 801372c:	4605      	mov	r5, r0
 801372e:	6818      	ldr	r0, [r3, #0]
 8013730:	460c      	mov	r4, r1
 8013732:	b118      	cbz	r0, 801373c <__swsetup_r+0x14>
 8013734:	6a03      	ldr	r3, [r0, #32]
 8013736:	b90b      	cbnz	r3, 801373c <__swsetup_r+0x14>
 8013738:	f7fe f938 	bl	80119ac <__sinit>
 801373c:	89a3      	ldrh	r3, [r4, #12]
 801373e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013742:	0718      	lsls	r0, r3, #28
 8013744:	d422      	bmi.n	801378c <__swsetup_r+0x64>
 8013746:	06d9      	lsls	r1, r3, #27
 8013748:	d407      	bmi.n	801375a <__swsetup_r+0x32>
 801374a:	2309      	movs	r3, #9
 801374c:	602b      	str	r3, [r5, #0]
 801374e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013752:	81a3      	strh	r3, [r4, #12]
 8013754:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013758:	e034      	b.n	80137c4 <__swsetup_r+0x9c>
 801375a:	0758      	lsls	r0, r3, #29
 801375c:	d512      	bpl.n	8013784 <__swsetup_r+0x5c>
 801375e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013760:	b141      	cbz	r1, 8013774 <__swsetup_r+0x4c>
 8013762:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013766:	4299      	cmp	r1, r3
 8013768:	d002      	beq.n	8013770 <__swsetup_r+0x48>
 801376a:	4628      	mov	r0, r5
 801376c:	f7fe faea 	bl	8011d44 <_free_r>
 8013770:	2300      	movs	r3, #0
 8013772:	6363      	str	r3, [r4, #52]	; 0x34
 8013774:	89a3      	ldrh	r3, [r4, #12]
 8013776:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801377a:	81a3      	strh	r3, [r4, #12]
 801377c:	2300      	movs	r3, #0
 801377e:	6063      	str	r3, [r4, #4]
 8013780:	6923      	ldr	r3, [r4, #16]
 8013782:	6023      	str	r3, [r4, #0]
 8013784:	89a3      	ldrh	r3, [r4, #12]
 8013786:	f043 0308 	orr.w	r3, r3, #8
 801378a:	81a3      	strh	r3, [r4, #12]
 801378c:	6923      	ldr	r3, [r4, #16]
 801378e:	b94b      	cbnz	r3, 80137a4 <__swsetup_r+0x7c>
 8013790:	89a3      	ldrh	r3, [r4, #12]
 8013792:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013796:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801379a:	d003      	beq.n	80137a4 <__swsetup_r+0x7c>
 801379c:	4621      	mov	r1, r4
 801379e:	4628      	mov	r0, r5
 80137a0:	f000 f86d 	bl	801387e <__smakebuf_r>
 80137a4:	89a0      	ldrh	r0, [r4, #12]
 80137a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80137aa:	f010 0301 	ands.w	r3, r0, #1
 80137ae:	d00a      	beq.n	80137c6 <__swsetup_r+0x9e>
 80137b0:	2300      	movs	r3, #0
 80137b2:	60a3      	str	r3, [r4, #8]
 80137b4:	6963      	ldr	r3, [r4, #20]
 80137b6:	425b      	negs	r3, r3
 80137b8:	61a3      	str	r3, [r4, #24]
 80137ba:	6923      	ldr	r3, [r4, #16]
 80137bc:	b943      	cbnz	r3, 80137d0 <__swsetup_r+0xa8>
 80137be:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80137c2:	d1c4      	bne.n	801374e <__swsetup_r+0x26>
 80137c4:	bd38      	pop	{r3, r4, r5, pc}
 80137c6:	0781      	lsls	r1, r0, #30
 80137c8:	bf58      	it	pl
 80137ca:	6963      	ldrpl	r3, [r4, #20]
 80137cc:	60a3      	str	r3, [r4, #8]
 80137ce:	e7f4      	b.n	80137ba <__swsetup_r+0x92>
 80137d0:	2000      	movs	r0, #0
 80137d2:	e7f7      	b.n	80137c4 <__swsetup_r+0x9c>
 80137d4:	200001f0 	.word	0x200001f0

080137d8 <_sbrk_r>:
 80137d8:	b538      	push	{r3, r4, r5, lr}
 80137da:	4d06      	ldr	r5, [pc, #24]	; (80137f4 <_sbrk_r+0x1c>)
 80137dc:	2300      	movs	r3, #0
 80137de:	4604      	mov	r4, r0
 80137e0:	4608      	mov	r0, r1
 80137e2:	602b      	str	r3, [r5, #0]
 80137e4:	f7ed fe84 	bl	80014f0 <_sbrk>
 80137e8:	1c43      	adds	r3, r0, #1
 80137ea:	d102      	bne.n	80137f2 <_sbrk_r+0x1a>
 80137ec:	682b      	ldr	r3, [r5, #0]
 80137ee:	b103      	cbz	r3, 80137f2 <_sbrk_r+0x1a>
 80137f0:	6023      	str	r3, [r4, #0]
 80137f2:	bd38      	pop	{r3, r4, r5, pc}
 80137f4:	2000a9c0 	.word	0x2000a9c0

080137f8 <abort>:
 80137f8:	b508      	push	{r3, lr}
 80137fa:	2006      	movs	r0, #6
 80137fc:	f000 f8a4 	bl	8013948 <raise>
 8013800:	2001      	movs	r0, #1
 8013802:	f7ed fdfd 	bl	8001400 <_exit>

08013806 <_calloc_r>:
 8013806:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013808:	fba1 2402 	umull	r2, r4, r1, r2
 801380c:	b94c      	cbnz	r4, 8013822 <_calloc_r+0x1c>
 801380e:	4611      	mov	r1, r2
 8013810:	9201      	str	r2, [sp, #4]
 8013812:	f7fe fe63 	bl	80124dc <_malloc_r>
 8013816:	9a01      	ldr	r2, [sp, #4]
 8013818:	4605      	mov	r5, r0
 801381a:	b930      	cbnz	r0, 801382a <_calloc_r+0x24>
 801381c:	4628      	mov	r0, r5
 801381e:	b003      	add	sp, #12
 8013820:	bd30      	pop	{r4, r5, pc}
 8013822:	220c      	movs	r2, #12
 8013824:	6002      	str	r2, [r0, #0]
 8013826:	2500      	movs	r5, #0
 8013828:	e7f8      	b.n	801381c <_calloc_r+0x16>
 801382a:	4621      	mov	r1, r4
 801382c:	f7fe f959 	bl	8011ae2 <memset>
 8013830:	e7f4      	b.n	801381c <_calloc_r+0x16>

08013832 <__swhatbuf_r>:
 8013832:	b570      	push	{r4, r5, r6, lr}
 8013834:	460c      	mov	r4, r1
 8013836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801383a:	2900      	cmp	r1, #0
 801383c:	b096      	sub	sp, #88	; 0x58
 801383e:	4615      	mov	r5, r2
 8013840:	461e      	mov	r6, r3
 8013842:	da0d      	bge.n	8013860 <__swhatbuf_r+0x2e>
 8013844:	89a3      	ldrh	r3, [r4, #12]
 8013846:	f013 0f80 	tst.w	r3, #128	; 0x80
 801384a:	f04f 0100 	mov.w	r1, #0
 801384e:	bf0c      	ite	eq
 8013850:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8013854:	2340      	movne	r3, #64	; 0x40
 8013856:	2000      	movs	r0, #0
 8013858:	6031      	str	r1, [r6, #0]
 801385a:	602b      	str	r3, [r5, #0]
 801385c:	b016      	add	sp, #88	; 0x58
 801385e:	bd70      	pop	{r4, r5, r6, pc}
 8013860:	466a      	mov	r2, sp
 8013862:	f000 f879 	bl	8013958 <_fstat_r>
 8013866:	2800      	cmp	r0, #0
 8013868:	dbec      	blt.n	8013844 <__swhatbuf_r+0x12>
 801386a:	9901      	ldr	r1, [sp, #4]
 801386c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8013870:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8013874:	4259      	negs	r1, r3
 8013876:	4159      	adcs	r1, r3
 8013878:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801387c:	e7eb      	b.n	8013856 <__swhatbuf_r+0x24>

0801387e <__smakebuf_r>:
 801387e:	898b      	ldrh	r3, [r1, #12]
 8013880:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013882:	079d      	lsls	r5, r3, #30
 8013884:	4606      	mov	r6, r0
 8013886:	460c      	mov	r4, r1
 8013888:	d507      	bpl.n	801389a <__smakebuf_r+0x1c>
 801388a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801388e:	6023      	str	r3, [r4, #0]
 8013890:	6123      	str	r3, [r4, #16]
 8013892:	2301      	movs	r3, #1
 8013894:	6163      	str	r3, [r4, #20]
 8013896:	b002      	add	sp, #8
 8013898:	bd70      	pop	{r4, r5, r6, pc}
 801389a:	ab01      	add	r3, sp, #4
 801389c:	466a      	mov	r2, sp
 801389e:	f7ff ffc8 	bl	8013832 <__swhatbuf_r>
 80138a2:	9900      	ldr	r1, [sp, #0]
 80138a4:	4605      	mov	r5, r0
 80138a6:	4630      	mov	r0, r6
 80138a8:	f7fe fe18 	bl	80124dc <_malloc_r>
 80138ac:	b948      	cbnz	r0, 80138c2 <__smakebuf_r+0x44>
 80138ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80138b2:	059a      	lsls	r2, r3, #22
 80138b4:	d4ef      	bmi.n	8013896 <__smakebuf_r+0x18>
 80138b6:	f023 0303 	bic.w	r3, r3, #3
 80138ba:	f043 0302 	orr.w	r3, r3, #2
 80138be:	81a3      	strh	r3, [r4, #12]
 80138c0:	e7e3      	b.n	801388a <__smakebuf_r+0xc>
 80138c2:	89a3      	ldrh	r3, [r4, #12]
 80138c4:	6020      	str	r0, [r4, #0]
 80138c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80138ca:	81a3      	strh	r3, [r4, #12]
 80138cc:	9b00      	ldr	r3, [sp, #0]
 80138ce:	6163      	str	r3, [r4, #20]
 80138d0:	9b01      	ldr	r3, [sp, #4]
 80138d2:	6120      	str	r0, [r4, #16]
 80138d4:	b15b      	cbz	r3, 80138ee <__smakebuf_r+0x70>
 80138d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80138da:	4630      	mov	r0, r6
 80138dc:	f000 f84e 	bl	801397c <_isatty_r>
 80138e0:	b128      	cbz	r0, 80138ee <__smakebuf_r+0x70>
 80138e2:	89a3      	ldrh	r3, [r4, #12]
 80138e4:	f023 0303 	bic.w	r3, r3, #3
 80138e8:	f043 0301 	orr.w	r3, r3, #1
 80138ec:	81a3      	strh	r3, [r4, #12]
 80138ee:	89a3      	ldrh	r3, [r4, #12]
 80138f0:	431d      	orrs	r5, r3
 80138f2:	81a5      	strh	r5, [r4, #12]
 80138f4:	e7cf      	b.n	8013896 <__smakebuf_r+0x18>

080138f6 <_raise_r>:
 80138f6:	291f      	cmp	r1, #31
 80138f8:	b538      	push	{r3, r4, r5, lr}
 80138fa:	4604      	mov	r4, r0
 80138fc:	460d      	mov	r5, r1
 80138fe:	d904      	bls.n	801390a <_raise_r+0x14>
 8013900:	2316      	movs	r3, #22
 8013902:	6003      	str	r3, [r0, #0]
 8013904:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013908:	bd38      	pop	{r3, r4, r5, pc}
 801390a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801390c:	b112      	cbz	r2, 8013914 <_raise_r+0x1e>
 801390e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013912:	b94b      	cbnz	r3, 8013928 <_raise_r+0x32>
 8013914:	4620      	mov	r0, r4
 8013916:	f000 f853 	bl	80139c0 <_getpid_r>
 801391a:	462a      	mov	r2, r5
 801391c:	4601      	mov	r1, r0
 801391e:	4620      	mov	r0, r4
 8013920:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013924:	f000 b83a 	b.w	801399c <_kill_r>
 8013928:	2b01      	cmp	r3, #1
 801392a:	d00a      	beq.n	8013942 <_raise_r+0x4c>
 801392c:	1c59      	adds	r1, r3, #1
 801392e:	d103      	bne.n	8013938 <_raise_r+0x42>
 8013930:	2316      	movs	r3, #22
 8013932:	6003      	str	r3, [r0, #0]
 8013934:	2001      	movs	r0, #1
 8013936:	e7e7      	b.n	8013908 <_raise_r+0x12>
 8013938:	2400      	movs	r4, #0
 801393a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801393e:	4628      	mov	r0, r5
 8013940:	4798      	blx	r3
 8013942:	2000      	movs	r0, #0
 8013944:	e7e0      	b.n	8013908 <_raise_r+0x12>
	...

08013948 <raise>:
 8013948:	4b02      	ldr	r3, [pc, #8]	; (8013954 <raise+0xc>)
 801394a:	4601      	mov	r1, r0
 801394c:	6818      	ldr	r0, [r3, #0]
 801394e:	f7ff bfd2 	b.w	80138f6 <_raise_r>
 8013952:	bf00      	nop
 8013954:	200001f0 	.word	0x200001f0

08013958 <_fstat_r>:
 8013958:	b538      	push	{r3, r4, r5, lr}
 801395a:	4d07      	ldr	r5, [pc, #28]	; (8013978 <_fstat_r+0x20>)
 801395c:	2300      	movs	r3, #0
 801395e:	4604      	mov	r4, r0
 8013960:	4608      	mov	r0, r1
 8013962:	4611      	mov	r1, r2
 8013964:	602b      	str	r3, [r5, #0]
 8013966:	f7ed fd9a 	bl	800149e <_fstat>
 801396a:	1c43      	adds	r3, r0, #1
 801396c:	d102      	bne.n	8013974 <_fstat_r+0x1c>
 801396e:	682b      	ldr	r3, [r5, #0]
 8013970:	b103      	cbz	r3, 8013974 <_fstat_r+0x1c>
 8013972:	6023      	str	r3, [r4, #0]
 8013974:	bd38      	pop	{r3, r4, r5, pc}
 8013976:	bf00      	nop
 8013978:	2000a9c0 	.word	0x2000a9c0

0801397c <_isatty_r>:
 801397c:	b538      	push	{r3, r4, r5, lr}
 801397e:	4d06      	ldr	r5, [pc, #24]	; (8013998 <_isatty_r+0x1c>)
 8013980:	2300      	movs	r3, #0
 8013982:	4604      	mov	r4, r0
 8013984:	4608      	mov	r0, r1
 8013986:	602b      	str	r3, [r5, #0]
 8013988:	f7ed fd99 	bl	80014be <_isatty>
 801398c:	1c43      	adds	r3, r0, #1
 801398e:	d102      	bne.n	8013996 <_isatty_r+0x1a>
 8013990:	682b      	ldr	r3, [r5, #0]
 8013992:	b103      	cbz	r3, 8013996 <_isatty_r+0x1a>
 8013994:	6023      	str	r3, [r4, #0]
 8013996:	bd38      	pop	{r3, r4, r5, pc}
 8013998:	2000a9c0 	.word	0x2000a9c0

0801399c <_kill_r>:
 801399c:	b538      	push	{r3, r4, r5, lr}
 801399e:	4d07      	ldr	r5, [pc, #28]	; (80139bc <_kill_r+0x20>)
 80139a0:	2300      	movs	r3, #0
 80139a2:	4604      	mov	r4, r0
 80139a4:	4608      	mov	r0, r1
 80139a6:	4611      	mov	r1, r2
 80139a8:	602b      	str	r3, [r5, #0]
 80139aa:	f7ed fd17 	bl	80013dc <_kill>
 80139ae:	1c43      	adds	r3, r0, #1
 80139b0:	d102      	bne.n	80139b8 <_kill_r+0x1c>
 80139b2:	682b      	ldr	r3, [r5, #0]
 80139b4:	b103      	cbz	r3, 80139b8 <_kill_r+0x1c>
 80139b6:	6023      	str	r3, [r4, #0]
 80139b8:	bd38      	pop	{r3, r4, r5, pc}
 80139ba:	bf00      	nop
 80139bc:	2000a9c0 	.word	0x2000a9c0

080139c0 <_getpid_r>:
 80139c0:	f7ed bd04 	b.w	80013cc <_getpid>

080139c4 <_init>:
 80139c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139c6:	bf00      	nop
 80139c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80139ca:	bc08      	pop	{r3}
 80139cc:	469e      	mov	lr, r3
 80139ce:	4770      	bx	lr

080139d0 <_fini>:
 80139d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139d2:	bf00      	nop
 80139d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80139d6:	bc08      	pop	{r3}
 80139d8:	469e      	mov	lr, r3
 80139da:	4770      	bx	lr
