
ugv_manual.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013a7c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f78  08013c80  08013c80  00023c80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016bf8  08016bf8  00030334  2**0
                  CONTENTS
  4 .ARM          00000008  08016bf8  08016bf8  00026bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016c00  08016c00  00030334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016c00  08016c00  00026c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016c04  08016c04  00026c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08016c08  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001f4  08016dfc  000301f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000294  08016e9c  00030294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000a740  20000334  08016f3c  00030334  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000aa74  08016f3c  0003aa74  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00030334  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00030362  2**0
                  CONTENTS, READONLY
 15 .debug_info   00024e10  00000000  00000000  000303a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00005bf5  00000000  00000000  000551b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001ad8  00000000  00000000  0005adb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001583  00000000  00000000  0005c888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00035038  00000000  00000000  0005de0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002aef3  00000000  00000000  00092e43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0011465c  00000000  00000000  000bdd36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00007ec4  00000000  00000000  001d2394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000066  00000000  00000000  001da258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000334 	.word	0x20000334
 800021c:	00000000 	.word	0x00000000
 8000220:	08013c64 	.word	0x08013c64

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000338 	.word	0x20000338
 800023c:	08013c64 	.word	0x08013c64

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_uldivmod>:
 8000658:	b953      	cbnz	r3, 8000670 <__aeabi_uldivmod+0x18>
 800065a:	b94a      	cbnz	r2, 8000670 <__aeabi_uldivmod+0x18>
 800065c:	2900      	cmp	r1, #0
 800065e:	bf08      	it	eq
 8000660:	2800      	cmpeq	r0, #0
 8000662:	bf1c      	itt	ne
 8000664:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000668:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800066c:	f000 b9a8 	b.w	80009c0 <__aeabi_idiv0>
 8000670:	f1ad 0c08 	sub.w	ip, sp, #8
 8000674:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000678:	f000 f83e 	bl	80006f8 <__udivmoddi4>
 800067c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000680:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000684:	b004      	add	sp, #16
 8000686:	4770      	bx	lr

08000688 <__aeabi_d2lz>:
 8000688:	b508      	push	{r3, lr}
 800068a:	4602      	mov	r2, r0
 800068c:	460b      	mov	r3, r1
 800068e:	ec43 2b17 	vmov	d7, r2, r3
 8000692:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800069a:	d403      	bmi.n	80006a4 <__aeabi_d2lz+0x1c>
 800069c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006a0:	f000 b80a 	b.w	80006b8 <__aeabi_d2ulz>
 80006a4:	eeb1 7b47 	vneg.f64	d7, d7
 80006a8:	ec51 0b17 	vmov	r0, r1, d7
 80006ac:	f000 f804 	bl	80006b8 <__aeabi_d2ulz>
 80006b0:	4240      	negs	r0, r0
 80006b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b6:	bd08      	pop	{r3, pc}

080006b8 <__aeabi_d2ulz>:
 80006b8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006e8 <__aeabi_d2ulz+0x30>
 80006bc:	ec41 0b17 	vmov	d7, r0, r1
 80006c0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80006f0 <__aeabi_d2ulz+0x38>
 80006c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006c8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006cc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006d0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006d8:	ee16 1a10 	vmov	r1, s12
 80006dc:	ee17 0a90 	vmov	r0, s15
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	f3af 8000 	nop.w
 80006e8:	00000000 	.word	0x00000000
 80006ec:	3df00000 	.word	0x3df00000
 80006f0:	00000000 	.word	0x00000000
 80006f4:	41f00000 	.word	0x41f00000

080006f8 <__udivmoddi4>:
 80006f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006fc:	9e08      	ldr	r6, [sp, #32]
 80006fe:	460d      	mov	r5, r1
 8000700:	4604      	mov	r4, r0
 8000702:	460f      	mov	r7, r1
 8000704:	2b00      	cmp	r3, #0
 8000706:	d14a      	bne.n	800079e <__udivmoddi4+0xa6>
 8000708:	428a      	cmp	r2, r1
 800070a:	4694      	mov	ip, r2
 800070c:	d965      	bls.n	80007da <__udivmoddi4+0xe2>
 800070e:	fab2 f382 	clz	r3, r2
 8000712:	b143      	cbz	r3, 8000726 <__udivmoddi4+0x2e>
 8000714:	fa02 fc03 	lsl.w	ip, r2, r3
 8000718:	f1c3 0220 	rsb	r2, r3, #32
 800071c:	409f      	lsls	r7, r3
 800071e:	fa20 f202 	lsr.w	r2, r0, r2
 8000722:	4317      	orrs	r7, r2
 8000724:	409c      	lsls	r4, r3
 8000726:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800072a:	fa1f f58c 	uxth.w	r5, ip
 800072e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000732:	0c22      	lsrs	r2, r4, #16
 8000734:	fb0e 7711 	mls	r7, lr, r1, r7
 8000738:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800073c:	fb01 f005 	mul.w	r0, r1, r5
 8000740:	4290      	cmp	r0, r2
 8000742:	d90a      	bls.n	800075a <__udivmoddi4+0x62>
 8000744:	eb1c 0202 	adds.w	r2, ip, r2
 8000748:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800074c:	f080 811c 	bcs.w	8000988 <__udivmoddi4+0x290>
 8000750:	4290      	cmp	r0, r2
 8000752:	f240 8119 	bls.w	8000988 <__udivmoddi4+0x290>
 8000756:	3902      	subs	r1, #2
 8000758:	4462      	add	r2, ip
 800075a:	1a12      	subs	r2, r2, r0
 800075c:	b2a4      	uxth	r4, r4
 800075e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000762:	fb0e 2210 	mls	r2, lr, r0, r2
 8000766:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800076a:	fb00 f505 	mul.w	r5, r0, r5
 800076e:	42a5      	cmp	r5, r4
 8000770:	d90a      	bls.n	8000788 <__udivmoddi4+0x90>
 8000772:	eb1c 0404 	adds.w	r4, ip, r4
 8000776:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800077a:	f080 8107 	bcs.w	800098c <__udivmoddi4+0x294>
 800077e:	42a5      	cmp	r5, r4
 8000780:	f240 8104 	bls.w	800098c <__udivmoddi4+0x294>
 8000784:	4464      	add	r4, ip
 8000786:	3802      	subs	r0, #2
 8000788:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800078c:	1b64      	subs	r4, r4, r5
 800078e:	2100      	movs	r1, #0
 8000790:	b11e      	cbz	r6, 800079a <__udivmoddi4+0xa2>
 8000792:	40dc      	lsrs	r4, r3
 8000794:	2300      	movs	r3, #0
 8000796:	e9c6 4300 	strd	r4, r3, [r6]
 800079a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800079e:	428b      	cmp	r3, r1
 80007a0:	d908      	bls.n	80007b4 <__udivmoddi4+0xbc>
 80007a2:	2e00      	cmp	r6, #0
 80007a4:	f000 80ed 	beq.w	8000982 <__udivmoddi4+0x28a>
 80007a8:	2100      	movs	r1, #0
 80007aa:	e9c6 0500 	strd	r0, r5, [r6]
 80007ae:	4608      	mov	r0, r1
 80007b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b4:	fab3 f183 	clz	r1, r3
 80007b8:	2900      	cmp	r1, #0
 80007ba:	d149      	bne.n	8000850 <__udivmoddi4+0x158>
 80007bc:	42ab      	cmp	r3, r5
 80007be:	d302      	bcc.n	80007c6 <__udivmoddi4+0xce>
 80007c0:	4282      	cmp	r2, r0
 80007c2:	f200 80f8 	bhi.w	80009b6 <__udivmoddi4+0x2be>
 80007c6:	1a84      	subs	r4, r0, r2
 80007c8:	eb65 0203 	sbc.w	r2, r5, r3
 80007cc:	2001      	movs	r0, #1
 80007ce:	4617      	mov	r7, r2
 80007d0:	2e00      	cmp	r6, #0
 80007d2:	d0e2      	beq.n	800079a <__udivmoddi4+0xa2>
 80007d4:	e9c6 4700 	strd	r4, r7, [r6]
 80007d8:	e7df      	b.n	800079a <__udivmoddi4+0xa2>
 80007da:	b902      	cbnz	r2, 80007de <__udivmoddi4+0xe6>
 80007dc:	deff      	udf	#255	; 0xff
 80007de:	fab2 f382 	clz	r3, r2
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	f040 8090 	bne.w	8000908 <__udivmoddi4+0x210>
 80007e8:	1a8a      	subs	r2, r1, r2
 80007ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007ee:	fa1f fe8c 	uxth.w	lr, ip
 80007f2:	2101      	movs	r1, #1
 80007f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80007f8:	fb07 2015 	mls	r0, r7, r5, r2
 80007fc:	0c22      	lsrs	r2, r4, #16
 80007fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000802:	fb0e f005 	mul.w	r0, lr, r5
 8000806:	4290      	cmp	r0, r2
 8000808:	d908      	bls.n	800081c <__udivmoddi4+0x124>
 800080a:	eb1c 0202 	adds.w	r2, ip, r2
 800080e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000812:	d202      	bcs.n	800081a <__udivmoddi4+0x122>
 8000814:	4290      	cmp	r0, r2
 8000816:	f200 80cb 	bhi.w	80009b0 <__udivmoddi4+0x2b8>
 800081a:	4645      	mov	r5, r8
 800081c:	1a12      	subs	r2, r2, r0
 800081e:	b2a4      	uxth	r4, r4
 8000820:	fbb2 f0f7 	udiv	r0, r2, r7
 8000824:	fb07 2210 	mls	r2, r7, r0, r2
 8000828:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800082c:	fb0e fe00 	mul.w	lr, lr, r0
 8000830:	45a6      	cmp	lr, r4
 8000832:	d908      	bls.n	8000846 <__udivmoddi4+0x14e>
 8000834:	eb1c 0404 	adds.w	r4, ip, r4
 8000838:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800083c:	d202      	bcs.n	8000844 <__udivmoddi4+0x14c>
 800083e:	45a6      	cmp	lr, r4
 8000840:	f200 80bb 	bhi.w	80009ba <__udivmoddi4+0x2c2>
 8000844:	4610      	mov	r0, r2
 8000846:	eba4 040e 	sub.w	r4, r4, lr
 800084a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800084e:	e79f      	b.n	8000790 <__udivmoddi4+0x98>
 8000850:	f1c1 0720 	rsb	r7, r1, #32
 8000854:	408b      	lsls	r3, r1
 8000856:	fa22 fc07 	lsr.w	ip, r2, r7
 800085a:	ea4c 0c03 	orr.w	ip, ip, r3
 800085e:	fa05 f401 	lsl.w	r4, r5, r1
 8000862:	fa20 f307 	lsr.w	r3, r0, r7
 8000866:	40fd      	lsrs	r5, r7
 8000868:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800086c:	4323      	orrs	r3, r4
 800086e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000872:	fa1f fe8c 	uxth.w	lr, ip
 8000876:	fb09 5518 	mls	r5, r9, r8, r5
 800087a:	0c1c      	lsrs	r4, r3, #16
 800087c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000880:	fb08 f50e 	mul.w	r5, r8, lr
 8000884:	42a5      	cmp	r5, r4
 8000886:	fa02 f201 	lsl.w	r2, r2, r1
 800088a:	fa00 f001 	lsl.w	r0, r0, r1
 800088e:	d90b      	bls.n	80008a8 <__udivmoddi4+0x1b0>
 8000890:	eb1c 0404 	adds.w	r4, ip, r4
 8000894:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000898:	f080 8088 	bcs.w	80009ac <__udivmoddi4+0x2b4>
 800089c:	42a5      	cmp	r5, r4
 800089e:	f240 8085 	bls.w	80009ac <__udivmoddi4+0x2b4>
 80008a2:	f1a8 0802 	sub.w	r8, r8, #2
 80008a6:	4464      	add	r4, ip
 80008a8:	1b64      	subs	r4, r4, r5
 80008aa:	b29d      	uxth	r5, r3
 80008ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80008b0:	fb09 4413 	mls	r4, r9, r3, r4
 80008b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80008b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80008bc:	45a6      	cmp	lr, r4
 80008be:	d908      	bls.n	80008d2 <__udivmoddi4+0x1da>
 80008c0:	eb1c 0404 	adds.w	r4, ip, r4
 80008c4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80008c8:	d26c      	bcs.n	80009a4 <__udivmoddi4+0x2ac>
 80008ca:	45a6      	cmp	lr, r4
 80008cc:	d96a      	bls.n	80009a4 <__udivmoddi4+0x2ac>
 80008ce:	3b02      	subs	r3, #2
 80008d0:	4464      	add	r4, ip
 80008d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008d6:	fba3 9502 	umull	r9, r5, r3, r2
 80008da:	eba4 040e 	sub.w	r4, r4, lr
 80008de:	42ac      	cmp	r4, r5
 80008e0:	46c8      	mov	r8, r9
 80008e2:	46ae      	mov	lr, r5
 80008e4:	d356      	bcc.n	8000994 <__udivmoddi4+0x29c>
 80008e6:	d053      	beq.n	8000990 <__udivmoddi4+0x298>
 80008e8:	b156      	cbz	r6, 8000900 <__udivmoddi4+0x208>
 80008ea:	ebb0 0208 	subs.w	r2, r0, r8
 80008ee:	eb64 040e 	sbc.w	r4, r4, lr
 80008f2:	fa04 f707 	lsl.w	r7, r4, r7
 80008f6:	40ca      	lsrs	r2, r1
 80008f8:	40cc      	lsrs	r4, r1
 80008fa:	4317      	orrs	r7, r2
 80008fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000900:	4618      	mov	r0, r3
 8000902:	2100      	movs	r1, #0
 8000904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000908:	f1c3 0120 	rsb	r1, r3, #32
 800090c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000910:	fa20 f201 	lsr.w	r2, r0, r1
 8000914:	fa25 f101 	lsr.w	r1, r5, r1
 8000918:	409d      	lsls	r5, r3
 800091a:	432a      	orrs	r2, r5
 800091c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000920:	fa1f fe8c 	uxth.w	lr, ip
 8000924:	fbb1 f0f7 	udiv	r0, r1, r7
 8000928:	fb07 1510 	mls	r5, r7, r0, r1
 800092c:	0c11      	lsrs	r1, r2, #16
 800092e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000932:	fb00 f50e 	mul.w	r5, r0, lr
 8000936:	428d      	cmp	r5, r1
 8000938:	fa04 f403 	lsl.w	r4, r4, r3
 800093c:	d908      	bls.n	8000950 <__udivmoddi4+0x258>
 800093e:	eb1c 0101 	adds.w	r1, ip, r1
 8000942:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000946:	d22f      	bcs.n	80009a8 <__udivmoddi4+0x2b0>
 8000948:	428d      	cmp	r5, r1
 800094a:	d92d      	bls.n	80009a8 <__udivmoddi4+0x2b0>
 800094c:	3802      	subs	r0, #2
 800094e:	4461      	add	r1, ip
 8000950:	1b49      	subs	r1, r1, r5
 8000952:	b292      	uxth	r2, r2
 8000954:	fbb1 f5f7 	udiv	r5, r1, r7
 8000958:	fb07 1115 	mls	r1, r7, r5, r1
 800095c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000960:	fb05 f10e 	mul.w	r1, r5, lr
 8000964:	4291      	cmp	r1, r2
 8000966:	d908      	bls.n	800097a <__udivmoddi4+0x282>
 8000968:	eb1c 0202 	adds.w	r2, ip, r2
 800096c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000970:	d216      	bcs.n	80009a0 <__udivmoddi4+0x2a8>
 8000972:	4291      	cmp	r1, r2
 8000974:	d914      	bls.n	80009a0 <__udivmoddi4+0x2a8>
 8000976:	3d02      	subs	r5, #2
 8000978:	4462      	add	r2, ip
 800097a:	1a52      	subs	r2, r2, r1
 800097c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000980:	e738      	b.n	80007f4 <__udivmoddi4+0xfc>
 8000982:	4631      	mov	r1, r6
 8000984:	4630      	mov	r0, r6
 8000986:	e708      	b.n	800079a <__udivmoddi4+0xa2>
 8000988:	4639      	mov	r1, r7
 800098a:	e6e6      	b.n	800075a <__udivmoddi4+0x62>
 800098c:	4610      	mov	r0, r2
 800098e:	e6fb      	b.n	8000788 <__udivmoddi4+0x90>
 8000990:	4548      	cmp	r0, r9
 8000992:	d2a9      	bcs.n	80008e8 <__udivmoddi4+0x1f0>
 8000994:	ebb9 0802 	subs.w	r8, r9, r2
 8000998:	eb65 0e0c 	sbc.w	lr, r5, ip
 800099c:	3b01      	subs	r3, #1
 800099e:	e7a3      	b.n	80008e8 <__udivmoddi4+0x1f0>
 80009a0:	4645      	mov	r5, r8
 80009a2:	e7ea      	b.n	800097a <__udivmoddi4+0x282>
 80009a4:	462b      	mov	r3, r5
 80009a6:	e794      	b.n	80008d2 <__udivmoddi4+0x1da>
 80009a8:	4640      	mov	r0, r8
 80009aa:	e7d1      	b.n	8000950 <__udivmoddi4+0x258>
 80009ac:	46d0      	mov	r8, sl
 80009ae:	e77b      	b.n	80008a8 <__udivmoddi4+0x1b0>
 80009b0:	3d02      	subs	r5, #2
 80009b2:	4462      	add	r2, ip
 80009b4:	e732      	b.n	800081c <__udivmoddi4+0x124>
 80009b6:	4608      	mov	r0, r1
 80009b8:	e70a      	b.n	80007d0 <__udivmoddi4+0xd8>
 80009ba:	4464      	add	r4, ip
 80009bc:	3802      	subs	r0, #2
 80009be:	e742      	b.n	8000846 <__udivmoddi4+0x14e>

080009c0 <__aeabi_idiv0>:
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80009c8:	f3bf 8f4f 	dsb	sy
}
 80009cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009ce:	f3bf 8f6f 	isb	sy
}
 80009d2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80009d4:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <SCB_EnableICache+0x48>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80009dc:	f3bf 8f4f 	dsb	sy
}
 80009e0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009e2:	f3bf 8f6f 	isb	sy
}
 80009e6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80009e8:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <SCB_EnableICache+0x48>)
 80009ea:	695b      	ldr	r3, [r3, #20]
 80009ec:	4a07      	ldr	r2, [pc, #28]	; (8000a0c <SCB_EnableICache+0x48>)
 80009ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80009f4:	f3bf 8f4f 	dsb	sy
}
 80009f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009fa:	f3bf 8f6f 	isb	sy
}
 80009fe:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000a16:	4b1f      	ldr	r3, [pc, #124]	; (8000a94 <SCB_EnableDCache+0x84>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000a1e:	f3bf 8f4f 	dsb	sy
}
 8000a22:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000a24:	4b1b      	ldr	r3, [pc, #108]	; (8000a94 <SCB_EnableDCache+0x84>)
 8000a26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000a2a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	0b5b      	lsrs	r3, r3, #13
 8000a30:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000a34:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	08db      	lsrs	r3, r3, #3
 8000a3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a3e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	015a      	lsls	r2, r3, #5
 8000a44:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000a48:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000a4a:	68ba      	ldr	r2, [r7, #8]
 8000a4c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a4e:	4911      	ldr	r1, [pc, #68]	; (8000a94 <SCB_EnableDCache+0x84>)
 8000a50:	4313      	orrs	r3, r2
 8000a52:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	1e5a      	subs	r2, r3, #1
 8000a5a:	60ba      	str	r2, [r7, #8]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d1ef      	bne.n	8000a40 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	1e5a      	subs	r2, r3, #1
 8000a64:	60fa      	str	r2, [r7, #12]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d1e5      	bne.n	8000a36 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000a6a:	f3bf 8f4f 	dsb	sy
}
 8000a6e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000a70:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <SCB_EnableDCache+0x84>)
 8000a72:	695b      	ldr	r3, [r3, #20]
 8000a74:	4a07      	ldr	r2, [pc, #28]	; (8000a94 <SCB_EnableDCache+0x84>)
 8000a76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a7a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a7c:	f3bf 8f4f 	dsb	sy
}
 8000a80:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a82:	f3bf 8f6f 	isb	sy
}
 8000a86:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000a88:	bf00      	nop
 8000a8a:	3714      	adds	r7, #20
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000a9c:	f000 fbd0 	bl	8001240 <MPU_Config>
/* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000aa0:	f7ff ff90 	bl	80009c4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000aa4:	f7ff ffb4 	bl	8000a10 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aa8:	f000 ffe2 	bl	8001a70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aac:	f000 f868 	bl	8000b80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ab0:	f000 fa2e 	bl	8000f10 <MX_GPIO_Init>
  MX_LWIP_Init();
 8000ab4:	f005 fea0 	bl	80067f8 <MX_LWIP_Init>
  MX_TIM1_Init();
 8000ab8:	f000 f8d0 	bl	8000c5c <MX_TIM1_Init>
  MX_TIM10_Init();
 8000abc:	f000 f986 	bl	8000dcc <MX_TIM10_Init>
  MX_USART3_UART_Init();
 8000ac0:	f000 f9f6 	bl	8000eb0 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000ac4:	f000 f91e 	bl	8000d04 <MX_TIM2_Init>
  MX_TIM13_Init();
 8000ac8:	f000 f9ce 	bl	8000e68 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  // 2022 Servo Driver
	steeringServo.timerInstance = &htim10;
 8000acc:	4b20      	ldr	r3, [pc, #128]	; (8000b50 <main+0xb8>)
 8000ace:	4a21      	ldr	r2, [pc, #132]	; (8000b54 <main+0xbc>)
 8000ad0:	601a      	str	r2, [r3, #0]
	steeringServo.timerCCRX = &TIM10->CCR1;
 8000ad2:	4b1f      	ldr	r3, [pc, #124]	; (8000b50 <main+0xb8>)
 8000ad4:	4a20      	ldr	r2, [pc, #128]	; (8000b58 <main+0xc0>)
 8000ad6:	605a      	str	r2, [r3, #4]
	steeringServo.timerCh = TIM_CHANNEL_1;
 8000ad8:	4b1d      	ldr	r3, [pc, #116]	; (8000b50 <main+0xb8>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	811a      	strh	r2, [r3, #8]
	//	steeringServo.travelOffset = 50;
	steeringServo.travelOffset = 10;
	*/

	// 2022 Servo Driver
	  steeringServo.timerInstance = &htim10;
 8000ade:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <main+0xb8>)
 8000ae0:	4a1c      	ldr	r2, [pc, #112]	; (8000b54 <main+0xbc>)
 8000ae2:	601a      	str	r2, [r3, #0]
	  steeringServo.timerCCRX = &TIM10->CCR1;
 8000ae4:	4b1a      	ldr	r3, [pc, #104]	; (8000b50 <main+0xb8>)
 8000ae6:	4a1c      	ldr	r2, [pc, #112]	; (8000b58 <main+0xc0>)
 8000ae8:	605a      	str	r2, [r3, #4]
	  steeringServo.timerCh = TIM_CHANNEL_1;
 8000aea:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <main+0xb8>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	811a      	strh	r2, [r3, #8]
	  steeringServo.timerARR = htim10.Init.Period;
 8000af0:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <main+0xbc>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	b29a      	uxth	r2, r3
 8000af6:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <main+0xb8>)
 8000af8:	815a      	strh	r2, [r3, #10]
	  steeringServo.minPulse = 500;
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <main+0xb8>)
 8000afc:	4a17      	ldr	r2, [pc, #92]	; (8000b5c <main+0xc4>)
 8000afe:	60da      	str	r2, [r3, #12]
	  steeringServo.maxPulse = 2500;
 8000b00:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <main+0xb8>)
 8000b02:	4a17      	ldr	r2, [pc, #92]	; (8000b60 <main+0xc8>)
 8000b04:	611a      	str	r2, [r3, #16]
	  steeringServo.timerPeriod = 20000;
 8000b06:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <main+0xb8>)
 8000b08:	4a16      	ldr	r2, [pc, #88]	; (8000b64 <main+0xcc>)
 8000b0a:	615a      	str	r2, [r3, #20]
	  steeringServo.travelAngle = 270.0;
 8000b0c:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <main+0xb8>)
 8000b0e:	4a16      	ldr	r2, [pc, #88]	; (8000b68 <main+0xd0>)
 8000b10:	625a      	str	r2, [r3, #36]	; 0x24

	  steeringServo.minLimit = 0.0;
 8000b12:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <main+0xb8>)
 8000b14:	f04f 0200 	mov.w	r2, #0
 8000b18:	62da      	str	r2, [r3, #44]	; 0x2c
	  steeringServo.maxLimit = 105.0;
 8000b1a:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <main+0xb8>)
 8000b1c:	4a13      	ldr	r2, [pc, #76]	; (8000b6c <main+0xd4>)
 8000b1e:	631a      	str	r2, [r3, #48]	; 0x30

	  steeringServo.travelOffset = 50;
 8000b20:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <main+0xb8>)
 8000b22:	4a13      	ldr	r2, [pc, #76]	; (8000b70 <main+0xd8>)
 8000b24:	629a      	str	r2, [r3, #40]	; 0x28

	ugv_servoInitServo(&steeringServo);
 8000b26:	480a      	ldr	r0, [pc, #40]	; (8000b50 <main+0xb8>)
 8000b28:	f005 fd80 	bl	800662c <ugv_servoInitServo>
	MotorControl_Init(&ugv_drive_mtr, &htim2, TIM_CHANNEL_1, TIM_CHANNEL_3);
 8000b2c:	2308      	movs	r3, #8
 8000b2e:	2200      	movs	r2, #0
 8000b30:	4910      	ldr	r1, [pc, #64]	; (8000b74 <main+0xdc>)
 8000b32:	4811      	ldr	r0, [pc, #68]	; (8000b78 <main+0xe0>)
 8000b34:	f005 fcf3 	bl	800651e <MotorControl_Init>

  udp_client_connect();
 8000b38:	f000 faac 	bl	8001094 <udp_client_connect>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  ethernetif_input(&gnetif);
 8000b3c:	480f      	ldr	r0, [pc, #60]	; (8000b7c <main+0xe4>)
 8000b3e:	f006 f8eb 	bl	8006d18 <ethernetif_input>
	  ethernet_link_check_state(&gnetif);
 8000b42:	480e      	ldr	r0, [pc, #56]	; (8000b7c <main+0xe4>)
 8000b44:	f006 fa66 	bl	8007014 <ethernet_link_check_state>
	  //udpClient
//	  gnetif.input()
	  //ethernet_input(p, netif)
	  sys_check_timeouts();
 8000b48:	f00d fbb2 	bl	800e2b0 <sys_check_timeouts>
	  ethernetif_input(&gnetif);
 8000b4c:	e7f6      	b.n	8000b3c <main+0xa4>
 8000b4e:	bf00      	nop
 8000b50:	20000508 	.word	0x20000508
 8000b54:	200003e8 	.word	0x200003e8
 8000b58:	40014434 	.word	0x40014434
 8000b5c:	43fa0000 	.word	0x43fa0000
 8000b60:	451c4000 	.word	0x451c4000
 8000b64:	469c4000 	.word	0x469c4000
 8000b68:	43870000 	.word	0x43870000
 8000b6c:	42d20000 	.word	0x42d20000
 8000b70:	42480000 	.word	0x42480000
 8000b74:	2000039c 	.word	0x2000039c
 8000b78:	2000053c 	.word	0x2000053c
 8000b7c:	200005bc 	.word	0x200005bc

08000b80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b094      	sub	sp, #80	; 0x50
 8000b84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b86:	f107 031c 	add.w	r3, r7, #28
 8000b8a:	2234      	movs	r2, #52	; 0x34
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f011 f8f7 	bl	8011d82 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b94:	f107 0308 	add.w	r3, r7, #8
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba4:	4b2b      	ldr	r3, [pc, #172]	; (8000c54 <SystemClock_Config+0xd4>)
 8000ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba8:	4a2a      	ldr	r2, [pc, #168]	; (8000c54 <SystemClock_Config+0xd4>)
 8000baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bae:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb0:	4b28      	ldr	r3, [pc, #160]	; (8000c54 <SystemClock_Config+0xd4>)
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bbc:	4b26      	ldr	r3, [pc, #152]	; (8000c58 <SystemClock_Config+0xd8>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a25      	ldr	r2, [pc, #148]	; (8000c58 <SystemClock_Config+0xd8>)
 8000bc2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bc6:	6013      	str	r3, [r2, #0]
 8000bc8:	4b23      	ldr	r3, [pc, #140]	; (8000c58 <SystemClock_Config+0xd8>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bd0:	603b      	str	r3, [r7, #0]
 8000bd2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bdc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bde:	2302      	movs	r3, #2
 8000be0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000be2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000be6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000be8:	2308      	movs	r3, #8
 8000bea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000bec:	23d8      	movs	r3, #216	; 0xd8
 8000bee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bfc:	f107 031c 	add.w	r3, r7, #28
 8000c00:	4618      	mov	r0, r3
 8000c02:	f002 fd8f 	bl	8003724 <HAL_RCC_OscConfig>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000c0c:	f000 fb46 	bl	800129c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c10:	f002 fd38 	bl	8003684 <HAL_PWREx_EnableOverDrive>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000c1a:	f000 fb3f 	bl	800129c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c1e:	230f      	movs	r3, #15
 8000c20:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c22:	2302      	movs	r3, #2
 8000c24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c2a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c34:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000c36:	f107 0308 	add.w	r3, r7, #8
 8000c3a:	2107      	movs	r1, #7
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f003 f81f 	bl	8003c80 <HAL_RCC_ClockConfig>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000c48:	f000 fb28 	bl	800129c <Error_Handler>
  }
}
 8000c4c:	bf00      	nop
 8000c4e:	3750      	adds	r7, #80	; 0x50
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40007000 	.word	0x40007000

08000c5c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b088      	sub	sp, #32
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c62:	f107 0310 	add.w	r3, r7, #16
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]
 8000c6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]
 8000c78:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c7a:	4b20      	ldr	r3, [pc, #128]	; (8000cfc <MX_TIM1_Init+0xa0>)
 8000c7c:	4a20      	ldr	r2, [pc, #128]	; (8000d00 <MX_TIM1_Init+0xa4>)
 8000c7e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10800;
 8000c80:	4b1e      	ldr	r3, [pc, #120]	; (8000cfc <MX_TIM1_Init+0xa0>)
 8000c82:	f642 2230 	movw	r2, #10800	; 0x2a30
 8000c86:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c88:	4b1c      	ldr	r3, [pc, #112]	; (8000cfc <MX_TIM1_Init+0xa0>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8000c8e:	4b1b      	ldr	r3, [pc, #108]	; (8000cfc <MX_TIM1_Init+0xa0>)
 8000c90:	f242 7210 	movw	r2, #10000	; 0x2710
 8000c94:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c96:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <MX_TIM1_Init+0xa0>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c9c:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <MX_TIM1_Init+0xa0>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca2:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <MX_TIM1_Init+0xa0>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ca8:	4814      	ldr	r0, [pc, #80]	; (8000cfc <MX_TIM1_Init+0xa0>)
 8000caa:	f003 fe35 	bl	8004918 <HAL_TIM_Base_Init>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000cb4:	f000 faf2 	bl	800129c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cbc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cbe:	f107 0310 	add.w	r3, r7, #16
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	480d      	ldr	r0, [pc, #52]	; (8000cfc <MX_TIM1_Init+0xa0>)
 8000cc6:	f004 f9eb 	bl	80050a0 <HAL_TIM_ConfigClockSource>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000cd0:	f000 fae4 	bl	800129c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ce0:	1d3b      	adds	r3, r7, #4
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4805      	ldr	r0, [pc, #20]	; (8000cfc <MX_TIM1_Init+0xa0>)
 8000ce6:	f004 fea1 	bl	8005a2c <HAL_TIMEx_MasterConfigSynchronization>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000cf0:	f000 fad4 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000cf4:	bf00      	nop
 8000cf6:	3720      	adds	r7, #32
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000350 	.word	0x20000350
 8000d00:	40010000 	.word	0x40010000

08000d04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08a      	sub	sp, #40	; 0x28
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d0a:	f107 031c 	add.w	r3, r7, #28
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d16:	463b      	mov	r3, r7
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]
 8000d24:	615a      	str	r2, [r3, #20]
 8000d26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d28:	4b27      	ldr	r3, [pc, #156]	; (8000dc8 <MX_TIM2_Init+0xc4>)
 8000d2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8000d30:	4b25      	ldr	r3, [pc, #148]	; (8000dc8 <MX_TIM2_Init+0xc4>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d36:	4b24      	ldr	r3, [pc, #144]	; (8000dc8 <MX_TIM2_Init+0xc4>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 32767;
 8000d3c:	4b22      	ldr	r3, [pc, #136]	; (8000dc8 <MX_TIM2_Init+0xc4>)
 8000d3e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000d42:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d44:	4b20      	ldr	r3, [pc, #128]	; (8000dc8 <MX_TIM2_Init+0xc4>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d4a:	4b1f      	ldr	r3, [pc, #124]	; (8000dc8 <MX_TIM2_Init+0xc4>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d50:	481d      	ldr	r0, [pc, #116]	; (8000dc8 <MX_TIM2_Init+0xc4>)
 8000d52:	f003 fe38 	bl	80049c6 <HAL_TIM_PWM_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000d5c:	f000 fa9e 	bl	800129c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d64:	2300      	movs	r3, #0
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d68:	f107 031c 	add.w	r3, r7, #28
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4816      	ldr	r0, [pc, #88]	; (8000dc8 <MX_TIM2_Init+0xc4>)
 8000d70:	f004 fe5c 	bl	8005a2c <HAL_TIMEx_MasterConfigSynchronization>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000d7a:	f000 fa8f 	bl	800129c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d7e:	2360      	movs	r3, #96	; 0x60
 8000d80:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d86:	2300      	movs	r3, #0
 8000d88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d8e:	463b      	mov	r3, r7
 8000d90:	2200      	movs	r2, #0
 8000d92:	4619      	mov	r1, r3
 8000d94:	480c      	ldr	r0, [pc, #48]	; (8000dc8 <MX_TIM2_Init+0xc4>)
 8000d96:	f004 f86f 	bl	8004e78 <HAL_TIM_PWM_ConfigChannel>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000da0:	f000 fa7c 	bl	800129c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000da4:	463b      	mov	r3, r7
 8000da6:	2208      	movs	r2, #8
 8000da8:	4619      	mov	r1, r3
 8000daa:	4807      	ldr	r0, [pc, #28]	; (8000dc8 <MX_TIM2_Init+0xc4>)
 8000dac:	f004 f864 	bl	8004e78 <HAL_TIM_PWM_ConfigChannel>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000db6:	f000 fa71 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000dba:	4803      	ldr	r0, [pc, #12]	; (8000dc8 <MX_TIM2_Init+0xc4>)
 8000dbc:	f000 fb1c 	bl	80013f8 <HAL_TIM_MspPostInit>

}
 8000dc0:	bf00      	nop
 8000dc2:	3728      	adds	r7, #40	; 0x28
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	2000039c 	.word	0x2000039c

08000dcc <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b088      	sub	sp, #32
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
 8000de0:	615a      	str	r2, [r3, #20]
 8000de2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000de4:	4b1e      	ldr	r3, [pc, #120]	; (8000e60 <MX_TIM10_Init+0x94>)
 8000de6:	4a1f      	ldr	r2, [pc, #124]	; (8000e64 <MX_TIM10_Init+0x98>)
 8000de8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 71;
 8000dea:	4b1d      	ldr	r3, [pc, #116]	; (8000e60 <MX_TIM10_Init+0x94>)
 8000dec:	2247      	movs	r2, #71	; 0x47
 8000dee:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df0:	4b1b      	ldr	r3, [pc, #108]	; (8000e60 <MX_TIM10_Init+0x94>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 29999;
 8000df6:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <MX_TIM10_Init+0x94>)
 8000df8:	f247 522f 	movw	r2, #29999	; 0x752f
 8000dfc:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dfe:	4b18      	ldr	r3, [pc, #96]	; (8000e60 <MX_TIM10_Init+0x94>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e04:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <MX_TIM10_Init+0x94>)
 8000e06:	2280      	movs	r2, #128	; 0x80
 8000e08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000e0a:	4815      	ldr	r0, [pc, #84]	; (8000e60 <MX_TIM10_Init+0x94>)
 8000e0c:	f003 fd84 	bl	8004918 <HAL_TIM_Base_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8000e16:	f000 fa41 	bl	800129c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8000e1a:	4811      	ldr	r0, [pc, #68]	; (8000e60 <MX_TIM10_Init+0x94>)
 8000e1c:	f003 fdd3 	bl	80049c6 <HAL_TIM_PWM_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8000e26:	f000 fa39 	bl	800129c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e2a:	2360      	movs	r3, #96	; 0x60
 8000e2c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4807      	ldr	r0, [pc, #28]	; (8000e60 <MX_TIM10_Init+0x94>)
 8000e42:	f004 f819 	bl	8004e78 <HAL_TIM_PWM_ConfigChannel>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8000e4c:	f000 fa26 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8000e50:	4803      	ldr	r0, [pc, #12]	; (8000e60 <MX_TIM10_Init+0x94>)
 8000e52:	f000 fad1 	bl	80013f8 <HAL_TIM_MspPostInit>

}
 8000e56:	bf00      	nop
 8000e58:	3720      	adds	r7, #32
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	200003e8 	.word	0x200003e8
 8000e64:	40014400 	.word	0x40014400

08000e68 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000e6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <MX_TIM13_Init+0x40>)
 8000e6e:	4a0f      	ldr	r2, [pc, #60]	; (8000eac <MX_TIM13_Init+0x44>)
 8000e70:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 2700;
 8000e72:	4b0d      	ldr	r3, [pc, #52]	; (8000ea8 <MX_TIM13_Init+0x40>)
 8000e74:	f640 228c 	movw	r2, #2700	; 0xa8c
 8000e78:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <MX_TIM13_Init+0x40>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 499;
 8000e80:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <MX_TIM13_Init+0x40>)
 8000e82:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000e86:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e88:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <MX_TIM13_Init+0x40>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e8e:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <MX_TIM13_Init+0x40>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000e94:	4804      	ldr	r0, [pc, #16]	; (8000ea8 <MX_TIM13_Init+0x40>)
 8000e96:	f003 fd3f 	bl	8004918 <HAL_TIM_Base_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8000ea0:	f000 f9fc 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20000434 	.word	0x20000434
 8000eac:	40001c00 	.word	0x40001c00

08000eb0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000eb4:	4b14      	ldr	r3, [pc, #80]	; (8000f08 <MX_USART3_UART_Init+0x58>)
 8000eb6:	4a15      	ldr	r2, [pc, #84]	; (8000f0c <MX_USART3_UART_Init+0x5c>)
 8000eb8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000eba:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <MX_USART3_UART_Init+0x58>)
 8000ebc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ec0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ec2:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <MX_USART3_UART_Init+0x58>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ec8:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <MX_USART3_UART_Init+0x58>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ece:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <MX_USART3_UART_Init+0x58>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <MX_USART3_UART_Init+0x58>)
 8000ed6:	220c      	movs	r2, #12
 8000ed8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eda:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <MX_USART3_UART_Init+0x58>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee0:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <MX_USART3_UART_Init+0x58>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ee6:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <MX_USART3_UART_Init+0x58>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <MX_USART3_UART_Init+0x58>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ef2:	4805      	ldr	r0, [pc, #20]	; (8000f08 <MX_USART3_UART_Init+0x58>)
 8000ef4:	f004 fe46 	bl	8005b84 <HAL_UART_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000efe:	f000 f9cd 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000480 	.word	0x20000480
 8000f0c:	40004800 	.word	0x40004800

08000f10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08c      	sub	sp, #48	; 0x30
 8000f14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f16:	f107 031c 	add.w	r3, r7, #28
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	60da      	str	r2, [r3, #12]
 8000f24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f26:	4b56      	ldr	r3, [pc, #344]	; (8001080 <MX_GPIO_Init+0x170>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a55      	ldr	r2, [pc, #340]	; (8001080 <MX_GPIO_Init+0x170>)
 8000f2c:	f043 0304 	orr.w	r3, r3, #4
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b53      	ldr	r3, [pc, #332]	; (8001080 <MX_GPIO_Init+0x170>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0304 	and.w	r3, r3, #4
 8000f3a:	61bb      	str	r3, [r7, #24]
 8000f3c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f3e:	4b50      	ldr	r3, [pc, #320]	; (8001080 <MX_GPIO_Init+0x170>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a4f      	ldr	r2, [pc, #316]	; (8001080 <MX_GPIO_Init+0x170>)
 8000f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b4d      	ldr	r3, [pc, #308]	; (8001080 <MX_GPIO_Init+0x170>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f52:	617b      	str	r3, [r7, #20]
 8000f54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	4b4a      	ldr	r3, [pc, #296]	; (8001080 <MX_GPIO_Init+0x170>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a49      	ldr	r2, [pc, #292]	; (8001080 <MX_GPIO_Init+0x170>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b47      	ldr	r3, [pc, #284]	; (8001080 <MX_GPIO_Init+0x170>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6e:	4b44      	ldr	r3, [pc, #272]	; (8001080 <MX_GPIO_Init+0x170>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a43      	ldr	r2, [pc, #268]	; (8001080 <MX_GPIO_Init+0x170>)
 8000f74:	f043 0302 	orr.w	r3, r3, #2
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b41      	ldr	r3, [pc, #260]	; (8001080 <MX_GPIO_Init+0x170>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f86:	4b3e      	ldr	r3, [pc, #248]	; (8001080 <MX_GPIO_Init+0x170>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	4a3d      	ldr	r2, [pc, #244]	; (8001080 <MX_GPIO_Init+0x170>)
 8000f8c:	f043 0308 	orr.w	r3, r3, #8
 8000f90:	6313      	str	r3, [r2, #48]	; 0x30
 8000f92:	4b3b      	ldr	r3, [pc, #236]	; (8001080 <MX_GPIO_Init+0x170>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	f003 0308 	and.w	r3, r3, #8
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f9e:	4b38      	ldr	r3, [pc, #224]	; (8001080 <MX_GPIO_Init+0x170>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a37      	ldr	r2, [pc, #220]	; (8001080 <MX_GPIO_Init+0x170>)
 8000fa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b35      	ldr	r3, [pc, #212]	; (8001080 <MX_GPIO_Init+0x170>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f244 2181 	movw	r1, #17025	; 0x4281
 8000fbc:	4831      	ldr	r0, [pc, #196]	; (8001084 <MX_GPIO_Init+0x174>)
 8000fbe:	f002 fb2d 	bl	800361c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2140      	movs	r1, #64	; 0x40
 8000fc6:	4830      	ldr	r0, [pc, #192]	; (8001088 <MX_GPIO_Init+0x178>)
 8000fc8:	f002 fb28 	bl	800361c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000fcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fd2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000fdc:	f107 031c 	add.w	r3, r7, #28
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	482a      	ldr	r0, [pc, #168]	; (800108c <MX_GPIO_Init+0x17c>)
 8000fe4:	f002 f96e 	bl	80032c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin PB9 */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin|GPIO_PIN_9;
 8000fe8:	f244 2381 	movw	r3, #17025	; 0x4281
 8000fec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffa:	f107 031c 	add.w	r3, r7, #28
 8000ffe:	4619      	mov	r1, r3
 8001000:	4820      	ldr	r0, [pc, #128]	; (8001084 <MX_GPIO_Init+0x174>)
 8001002:	f002 f95f 	bl	80032c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001006:	2340      	movs	r3, #64	; 0x40
 8001008:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100a:	2301      	movs	r3, #1
 800100c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001012:	2300      	movs	r3, #0
 8001014:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001016:	f107 031c 	add.w	r3, r7, #28
 800101a:	4619      	mov	r1, r3
 800101c:	481a      	ldr	r0, [pc, #104]	; (8001088 <MX_GPIO_Init+0x178>)
 800101e:	f002 f951 	bl	80032c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001022:	2380      	movs	r3, #128	; 0x80
 8001024:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001026:	2300      	movs	r3, #0
 8001028:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800102e:	f107 031c 	add.w	r3, r7, #28
 8001032:	4619      	mov	r1, r3
 8001034:	4814      	ldr	r0, [pc, #80]	; (8001088 <MX_GPIO_Init+0x178>)
 8001036:	f002 f945 	bl	80032c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800103a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800103e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001040:	2302      	movs	r3, #2
 8001042:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001048:	2303      	movs	r3, #3
 800104a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800104c:	230a      	movs	r3, #10
 800104e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001050:	f107 031c 	add.w	r3, r7, #28
 8001054:	4619      	mov	r1, r3
 8001056:	480e      	ldr	r0, [pc, #56]	; (8001090 <MX_GPIO_Init+0x180>)
 8001058:	f002 f934 	bl	80032c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800105c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001060:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001062:	2300      	movs	r3, #0
 8001064:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800106a:	f107 031c 	add.w	r3, r7, #28
 800106e:	4619      	mov	r1, r3
 8001070:	4807      	ldr	r0, [pc, #28]	; (8001090 <MX_GPIO_Init+0x180>)
 8001072:	f002 f927 	bl	80032c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001076:	bf00      	nop
 8001078:	3730      	adds	r7, #48	; 0x30
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40023800 	.word	0x40023800
 8001084:	40020400 	.word	0x40020400
 8001088:	40021800 	.word	0x40021800
 800108c:	40020800 	.word	0x40020800
 8001090:	40020000 	.word	0x40020000

08001094 <udp_client_connect>:
//
////	udp_client_send();
//}

void udp_client_connect()
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
	err_t err;

	// Create a new UDP control block
	// Need to check for null return
	upcb = udp_new();
 800109a:	f00d fc23 	bl	800e8e4 <udp_new>
 800109e:	4603      	mov	r3, r0
 80010a0:	4a15      	ldr	r2, [pc, #84]	; (80010f8 <udp_client_connect+0x64>)
 80010a2:	6013      	str	r3, [r2, #0]

	// Bind control block to module's IP address and port
	// Static IP address: 192.168.2.xxx
	ip_addr_t my_ip;
//	IP_ADDR4(&my_ip, 192, 168, 5, 21); 	//STM ip when connected to RPI 5
	IP_ADDR4(&my_ip, 192, 168, 20, 21); //STM ip when connected to Jetson Orin
 80010a4:	4b15      	ldr	r3, [pc, #84]	; (80010fc <udp_client_connect+0x68>)
 80010a6:	60bb      	str	r3, [r7, #8]
//	IP_ADDR4(&my_ip, 192, 168, 2, 21); 	// STM ip when connected to linux desktop

	// Binds udp protocol control block to a local IP address
	// Arbitrary port # selection: 8
	udp_bind(upcb, &my_ip, 8);
 80010a8:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <udp_client_connect+0x64>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f107 0108 	add.w	r1, r7, #8
 80010b0:	2208      	movs	r2, #8
 80010b2:	4618      	mov	r0, r3
 80010b4:	f00d fb00 	bl	800e6b8 <udp_bind>
	// Configure destination IP address
	// Host ip address: 192.168.2.5
	// Arbitrary port # selection: 12345
	ip_addr_t DestIPaddr;
//	IP_ADDR4(&DestIPaddr, 192, 168, 5, 5);  //RPI 5 host ip address
	IP_ADDR4(&DestIPaddr, 192, 168, 20, 5);  //Jetson Orin Nano host ip address
 80010b8:	4b11      	ldr	r3, [pc, #68]	; (8001100 <udp_client_connect+0x6c>)
 80010ba:	607b      	str	r3, [r7, #4]
//	IP_ADDR4(&DestIPaddr, 192, 168, 2, 5);  //Desktop Host ip address
	err = udp_connect(upcb, &DestIPaddr, 12345);
 80010bc:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <udp_client_connect+0x64>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	1d39      	adds	r1, r7, #4
 80010c2:	f243 0239 	movw	r2, #12345	; 0x3039
 80010c6:	4618      	mov	r0, r3
 80010c8:	f00d fb7e 	bl	800e7c8 <udp_connect>
 80010cc:	4603      	mov	r3, r0
 80010ce:	73fb      	strb	r3, [r7, #15]

	if (err == HAL_OK)
 80010d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d10a      	bne.n	80010ee <udp_client_connect+0x5a>
	{
		// Blue LED
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80010d8:	2180      	movs	r1, #128	; 0x80
 80010da:	480a      	ldr	r0, [pc, #40]	; (8001104 <udp_client_connect+0x70>)
 80010dc:	f002 fab7 	bl	800364e <HAL_GPIO_TogglePin>
		// Set a receive callback for the upcb when server sends data to client
		udp_recv(upcb, udp_receive_callback, NULL);
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <udp_client_connect+0x64>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2200      	movs	r2, #0
 80010e6:	4908      	ldr	r1, [pc, #32]	; (8001108 <udp_client_connect+0x74>)
 80010e8:	4618      	mov	r0, r3
 80010ea:	f00d fbdb 	bl	800e8a4 <udp_recv>

	}
}
 80010ee:	bf00      	nop
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	2000054c 	.word	0x2000054c
 80010fc:	1514a8c0 	.word	0x1514a8c0
 8001100:	0514a8c0 	.word	0x0514a8c0
 8001104:	40020400 	.word	0x40020400
 8001108:	08001111 	.word	0x08001111
 800110c:	00000000 	.word	0x00000000

08001110 <udp_receive_callback>:
	}
}

void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p,
		const ip_addr_t *addr, u16_t port)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b092      	sub	sp, #72	; 0x48
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
 800111c:	603b      	str	r3, [r7, #0]
	// Copy data from the pbuf
	strncpy(buffer, (char *)p->payload, p->len);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6859      	ldr	r1, [r3, #4]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	895b      	ldrh	r3, [r3, #10]
 8001126:	461a      	mov	r2, r3
 8001128:	483d      	ldr	r0, [pc, #244]	; (8001220 <udp_receive_callback+0x110>)
 800112a:	f010 fe44 	bl	8011db6 <strncpy>

	//Parse Input
	uint8_t data_index = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	float drive_vals[10] = {0};
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	2228      	movs	r2, #40	; 0x28
 800113a:	2100      	movs	r1, #0
 800113c:	4618      	mov	r0, r3
 800113e:	f010 fe20 	bl	8011d82 <memset>
	char *buffer_data = strtok(buffer, ",");
 8001142:	4938      	ldr	r1, [pc, #224]	; (8001224 <udp_receive_callback+0x114>)
 8001144:	4836      	ldr	r0, [pc, #216]	; (8001220 <udp_receive_callback+0x110>)
 8001146:	f010 fe49 	bl	8011ddc <strtok>
 800114a:	6438      	str	r0, [r7, #64]	; 0x40
	while (buffer_data != NULL && data_index < 10)
 800114c:	e026      	b.n	800119c <udp_receive_callback+0x8c>
	{
		float conv_check = atof(buffer_data);
 800114e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001150:	f00f fed6 	bl	8010f00 <atof>
 8001154:	eeb0 7b40 	vmov.f64	d7, d0
 8001158:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800115c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		//Make data was converted properly
		if (conv_check == 0)
 8001160:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001164:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800116c:	d104      	bne.n	8001178 <udp_receive_callback+0x68>
		{
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800116e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001172:	482d      	ldr	r0, [pc, #180]	; (8001228 <udp_receive_callback+0x118>)
 8001174:	f002 fa6b 	bl	800364e <HAL_GPIO_TogglePin>
		}

		drive_vals[data_index] = conv_check;
 8001178:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	3348      	adds	r3, #72	; 0x48
 8001180:	443b      	add	r3, r7
 8001182:	3b34      	subs	r3, #52	; 0x34
 8001184:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001186:	601a      	str	r2, [r3, #0]

		++data_index;
 8001188:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800118c:	3301      	adds	r3, #1
 800118e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		buffer_data = strtok(NULL, ",");
 8001192:	4924      	ldr	r1, [pc, #144]	; (8001224 <udp_receive_callback+0x114>)
 8001194:	2000      	movs	r0, #0
 8001196:	f010 fe21 	bl	8011ddc <strtok>
 800119a:	6438      	str	r0, [r7, #64]	; 0x40
	while (buffer_data != NULL && data_index < 10)
 800119c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <udp_receive_callback+0x9a>
 80011a2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80011a6:	2b09      	cmp	r3, #9
 80011a8:	d9d1      	bls.n	800114e <udp_receive_callback+0x3e>
	}



	// Free recieve pbuf;
	pbuf_free(p);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f007 fb8e 	bl	80088cc <pbuf_free>

	velocity_val = drive_vals[0];
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	4a1e      	ldr	r2, [pc, #120]	; (800122c <udp_receive_callback+0x11c>)
 80011b4:	6013      	str	r3, [r2, #0]
	steer_val = drive_vals[1];
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	4a1d      	ldr	r2, [pc, #116]	; (8001230 <udp_receive_callback+0x120>)
 80011ba:	6013      	str	r3, [r2, #0]

	//Might need to reset drive_vals to 0
	// Set Steering Angle for Servo
//	ugv_servoSetAngle(&steeringServo, steeringServo.maxLimit *steer_val + 0.224*steeringServo.maxLimit);
//	//ugv_servoSetAngle(&steeringServo, drive_vals[1]);
	MotorControl_SetSpeed(&ugv_drive_mtr, &htim2, velocity_val);
 80011bc:	4b1b      	ldr	r3, [pc, #108]	; (800122c <udp_receive_callback+0x11c>)
 80011be:	edd3 7a00 	vldr	s15, [r3]
 80011c2:	eeb0 0a67 	vmov.f32	s0, s15
 80011c6:	491b      	ldr	r1, [pc, #108]	; (8001234 <udp_receive_callback+0x124>)
 80011c8:	481b      	ldr	r0, [pc, #108]	; (8001238 <udp_receive_callback+0x128>)
 80011ca:	f005 f9d1 	bl	8006570 <MotorControl_SetSpeed>
	ugv_servoSetAngle(&steeringServo, steeringServo.maxLimit *steer_val + 0.224*steeringServo.maxLimit);
 80011ce:	4b1b      	ldr	r3, [pc, #108]	; (800123c <udp_receive_callback+0x12c>)
 80011d0:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80011d4:	4b16      	ldr	r3, [pc, #88]	; (8001230 <udp_receive_callback+0x120>)
 80011d6:	edd3 7a00 	vldr	s15, [r3]
 80011da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011de:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80011e2:	4b16      	ldr	r3, [pc, #88]	; (800123c <udp_receive_callback+0x12c>)
 80011e4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80011e8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011ec:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8001218 <udp_receive_callback+0x108>
 80011f0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80011f4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80011f8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001200:	480e      	ldr	r0, [pc, #56]	; (800123c <udp_receive_callback+0x12c>)
 8001202:	f005 fa57 	bl	80066b4 <ugv_servoSetAngle>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001206:	2101      	movs	r1, #1
 8001208:	4807      	ldr	r0, [pc, #28]	; (8001228 <udp_receive_callback+0x118>)
 800120a:	f002 fa20 	bl	800364e <HAL_GPIO_TogglePin>
}
 800120e:	bf00      	nop
 8001210:	3748      	adds	r7, #72	; 0x48
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	3126e979 	.word	0x3126e979
 800121c:	3fccac08 	.word	0x3fccac08
 8001220:	20000550 	.word	0x20000550
 8001224:	08013ca0 	.word	0x08013ca0
 8001228:	40020400 	.word	0x40020400
 800122c:	20000548 	.word	0x20000548
 8001230:	20000544 	.word	0x20000544
 8001234:	2000039c 	.word	0x2000039c
 8001238:	2000053c 	.word	0x2000053c
 800123c:	20000508 	.word	0x20000508

08001240 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001246:	463b      	mov	r3, r7
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001252:	f000 fda9 	bl	8001da8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001256:	2301      	movs	r3, #1
 8001258:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800125a:	2300      	movs	r3, #0
 800125c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x2007c000;
 800125e:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <MPU_Config+0x58>)
 8001260:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8001262:	230d      	movs	r3, #13
 8001264:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001266:	2300      	movs	r3, #0
 8001268:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800126a:	2301      	movs	r3, #1
 800126c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800126e:	2303      	movs	r3, #3
 8001270:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001272:	2301      	movs	r3, #1
 8001274:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001276:	2301      	movs	r3, #1
 8001278:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800127a:	2300      	movs	r3, #0
 800127c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800127e:	2300      	movs	r3, #0
 8001280:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001282:	463b      	mov	r3, r7
 8001284:	4618      	mov	r0, r3
 8001286:	f000 fdc7 	bl	8001e18 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800128a:	2004      	movs	r0, #4
 800128c:	f000 fda4 	bl	8001dd8 <HAL_MPU_Enable>

}
 8001290:	bf00      	nop
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	2007c000 	.word	0x2007c000

0800129c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80012a0:	b672      	cpsid	i
}
 80012a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <Error_Handler+0x8>
	...

080012a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80012ae:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <HAL_MspInit+0x44>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	4a0e      	ldr	r2, [pc, #56]	; (80012ec <HAL_MspInit+0x44>)
 80012b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ba:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <HAL_MspInit+0x44>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c6:	4b09      	ldr	r3, [pc, #36]	; (80012ec <HAL_MspInit+0x44>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	4a08      	ldr	r2, [pc, #32]	; (80012ec <HAL_MspInit+0x44>)
 80012cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d0:	6453      	str	r3, [r2, #68]	; 0x44
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_MspInit+0x44>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012da:	603b      	str	r3, [r7, #0]
 80012dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	40023800 	.word	0x40023800

080012f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a2b      	ldr	r2, [pc, #172]	; (80013ac <HAL_TIM_Base_MspInit+0xbc>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d11c      	bne.n	800133c <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001302:	4b2b      	ldr	r3, [pc, #172]	; (80013b0 <HAL_TIM_Base_MspInit+0xc0>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001306:	4a2a      	ldr	r2, [pc, #168]	; (80013b0 <HAL_TIM_Base_MspInit+0xc0>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	6453      	str	r3, [r2, #68]	; 0x44
 800130e:	4b28      	ldr	r3, [pc, #160]	; (80013b0 <HAL_TIM_Base_MspInit+0xc0>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	617b      	str	r3, [r7, #20]
 8001318:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800131a:	2200      	movs	r2, #0
 800131c:	2100      	movs	r1, #0
 800131e:	2018      	movs	r0, #24
 8001320:	f000 fd0b 	bl	8001d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001324:	2018      	movs	r0, #24
 8001326:	f000 fd24 	bl	8001d72 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800132a:	2200      	movs	r2, #0
 800132c:	2100      	movs	r1, #0
 800132e:	2019      	movs	r0, #25
 8001330:	f000 fd03 	bl	8001d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001334:	2019      	movs	r0, #25
 8001336:	f000 fd1c 	bl	8001d72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 800133a:	e032      	b.n	80013a2 <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM10)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a1c      	ldr	r2, [pc, #112]	; (80013b4 <HAL_TIM_Base_MspInit+0xc4>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d114      	bne.n	8001370 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001346:	4b1a      	ldr	r3, [pc, #104]	; (80013b0 <HAL_TIM_Base_MspInit+0xc0>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	4a19      	ldr	r2, [pc, #100]	; (80013b0 <HAL_TIM_Base_MspInit+0xc0>)
 800134c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001350:	6453      	str	r3, [r2, #68]	; 0x44
 8001352:	4b17      	ldr	r3, [pc, #92]	; (80013b0 <HAL_TIM_Base_MspInit+0xc0>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800135e:	2200      	movs	r2, #0
 8001360:	2100      	movs	r1, #0
 8001362:	2019      	movs	r0, #25
 8001364:	f000 fce9 	bl	8001d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001368:	2019      	movs	r0, #25
 800136a:	f000 fd02 	bl	8001d72 <HAL_NVIC_EnableIRQ>
}
 800136e:	e018      	b.n	80013a2 <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM13)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a10      	ldr	r2, [pc, #64]	; (80013b8 <HAL_TIM_Base_MspInit+0xc8>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d113      	bne.n	80013a2 <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800137a:	4b0d      	ldr	r3, [pc, #52]	; (80013b0 <HAL_TIM_Base_MspInit+0xc0>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	4a0c      	ldr	r2, [pc, #48]	; (80013b0 <HAL_TIM_Base_MspInit+0xc0>)
 8001380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001384:	6413      	str	r3, [r2, #64]	; 0x40
 8001386:	4b0a      	ldr	r3, [pc, #40]	; (80013b0 <HAL_TIM_Base_MspInit+0xc0>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001392:	2200      	movs	r2, #0
 8001394:	2100      	movs	r1, #0
 8001396:	202c      	movs	r0, #44	; 0x2c
 8001398:	f000 fccf 	bl	8001d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800139c:	202c      	movs	r0, #44	; 0x2c
 800139e:	f000 fce8 	bl	8001d72 <HAL_NVIC_EnableIRQ>
}
 80013a2:	bf00      	nop
 80013a4:	3718      	adds	r7, #24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40010000 	.word	0x40010000
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40014400 	.word	0x40014400
 80013b8:	40001c00 	.word	0x40001c00

080013bc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013cc:	d10b      	bne.n	80013e6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013ce:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <HAL_TIM_PWM_MspInit+0x38>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	4a08      	ldr	r2, [pc, #32]	; (80013f4 <HAL_TIM_PWM_MspInit+0x38>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	6413      	str	r3, [r2, #64]	; 0x40
 80013da:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <HAL_TIM_PWM_MspInit+0x38>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013e6:	bf00      	nop
 80013e8:	3714      	adds	r7, #20
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	40023800 	.word	0x40023800

080013f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08a      	sub	sp, #40	; 0x28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001418:	d139      	bne.n	800148e <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141a:	4b30      	ldr	r3, [pc, #192]	; (80014dc <HAL_TIM_MspPostInit+0xe4>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a2f      	ldr	r2, [pc, #188]	; (80014dc <HAL_TIM_MspPostInit+0xe4>)
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b2d      	ldr	r3, [pc, #180]	; (80014dc <HAL_TIM_MspPostInit+0xe4>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001432:	4b2a      	ldr	r3, [pc, #168]	; (80014dc <HAL_TIM_MspPostInit+0xe4>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a29      	ldr	r2, [pc, #164]	; (80014dc <HAL_TIM_MspPostInit+0xe4>)
 8001438:	f043 0302 	orr.w	r3, r3, #2
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b27      	ldr	r3, [pc, #156]	; (80014dc <HAL_TIM_MspPostInit+0xe4>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800144a:	2301      	movs	r3, #1
 800144c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144e:	2302      	movs	r3, #2
 8001450:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001456:	2300      	movs	r3, #0
 8001458:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800145a:	2301      	movs	r3, #1
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145e:	f107 0314 	add.w	r3, r7, #20
 8001462:	4619      	mov	r1, r3
 8001464:	481e      	ldr	r0, [pc, #120]	; (80014e0 <HAL_TIM_MspPostInit+0xe8>)
 8001466:	f001 ff2d 	bl	80032c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800146a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800146e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001470:	2302      	movs	r3, #2
 8001472:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001478:	2300      	movs	r3, #0
 800147a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800147c:	2301      	movs	r3, #1
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	4619      	mov	r1, r3
 8001486:	4817      	ldr	r0, [pc, #92]	; (80014e4 <HAL_TIM_MspPostInit+0xec>)
 8001488:	f001 ff1c 	bl	80032c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 800148c:	e021      	b.n	80014d2 <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM10)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a15      	ldr	r2, [pc, #84]	; (80014e8 <HAL_TIM_MspPostInit+0xf0>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d11c      	bne.n	80014d2 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001498:	4b10      	ldr	r3, [pc, #64]	; (80014dc <HAL_TIM_MspPostInit+0xe4>)
 800149a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149c:	4a0f      	ldr	r2, [pc, #60]	; (80014dc <HAL_TIM_MspPostInit+0xe4>)
 800149e:	f043 0302 	orr.w	r3, r3, #2
 80014a2:	6313      	str	r3, [r2, #48]	; 0x30
 80014a4:	4b0d      	ldr	r3, [pc, #52]	; (80014dc <HAL_TIM_MspPostInit+0xe4>)
 80014a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	2302      	movs	r3, #2
 80014b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014be:	2300      	movs	r3, #0
 80014c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80014c2:	2303      	movs	r3, #3
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	4619      	mov	r1, r3
 80014cc:	4805      	ldr	r0, [pc, #20]	; (80014e4 <HAL_TIM_MspPostInit+0xec>)
 80014ce:	f001 fef9 	bl	80032c4 <HAL_GPIO_Init>
}
 80014d2:	bf00      	nop
 80014d4:	3728      	adds	r7, #40	; 0x28
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40020000 	.word	0x40020000
 80014e4:	40020400 	.word	0x40020400
 80014e8:	40014400 	.word	0x40014400

080014ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b0ae      	sub	sp, #184	; 0xb8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	2290      	movs	r2, #144	; 0x90
 800150a:	2100      	movs	r1, #0
 800150c:	4618      	mov	r0, r3
 800150e:	f010 fc38 	bl	8011d82 <memset>
  if(huart->Instance==USART3)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a22      	ldr	r2, [pc, #136]	; (80015a0 <HAL_UART_MspInit+0xb4>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d13c      	bne.n	8001596 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800151c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001520:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001522:	2300      	movs	r3, #0
 8001524:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001526:	f107 0314 	add.w	r3, r7, #20
 800152a:	4618      	mov	r0, r3
 800152c:	f002 fdcc 	bl	80040c8 <HAL_RCCEx_PeriphCLKConfig>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001536:	f7ff feb1 	bl	800129c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800153a:	4b1a      	ldr	r3, [pc, #104]	; (80015a4 <HAL_UART_MspInit+0xb8>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	4a19      	ldr	r2, [pc, #100]	; (80015a4 <HAL_UART_MspInit+0xb8>)
 8001540:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001544:	6413      	str	r3, [r2, #64]	; 0x40
 8001546:	4b17      	ldr	r3, [pc, #92]	; (80015a4 <HAL_UART_MspInit+0xb8>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001552:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <HAL_UART_MspInit+0xb8>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	4a13      	ldr	r2, [pc, #76]	; (80015a4 <HAL_UART_MspInit+0xb8>)
 8001558:	f043 0308 	orr.w	r3, r3, #8
 800155c:	6313      	str	r3, [r2, #48]	; 0x30
 800155e:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <HAL_UART_MspInit+0xb8>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f003 0308 	and.w	r3, r3, #8
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800156a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800156e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001572:	2302      	movs	r3, #2
 8001574:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157e:	2303      	movs	r3, #3
 8001580:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001584:	2307      	movs	r3, #7
 8001586:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800158a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800158e:	4619      	mov	r1, r3
 8001590:	4805      	ldr	r0, [pc, #20]	; (80015a8 <HAL_UART_MspInit+0xbc>)
 8001592:	f001 fe97 	bl	80032c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001596:	bf00      	nop
 8001598:	37b8      	adds	r7, #184	; 0xb8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40004800 	.word	0x40004800
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40020c00 	.word	0x40020c00

080015ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015b0:	e7fe      	b.n	80015b0 <NMI_Handler+0x4>

080015b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015b6:	e7fe      	b.n	80015b6 <HardFault_Handler+0x4>

080015b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015bc:	e7fe      	b.n	80015bc <MemManage_Handler+0x4>

080015be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c2:	e7fe      	b.n	80015c2 <BusFault_Handler+0x4>

080015c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <UsageFault_Handler+0x4>

080015ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015f8:	f000 fa80 	bl	8001afc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}

08001600 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001604:	4802      	ldr	r0, [pc, #8]	; (8001610 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001606:	f003 fb2f 	bl	8004c68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20000350 	.word	0x20000350

08001614 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001618:	4803      	ldr	r0, [pc, #12]	; (8001628 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800161a:	f003 fb25 	bl	8004c68 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800161e:	4803      	ldr	r0, [pc, #12]	; (800162c <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001620:	f003 fb22 	bl	8004c68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000350 	.word	0x20000350
 800162c:	200003e8 	.word	0x200003e8

08001630 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001634:	4802      	ldr	r0, [pc, #8]	; (8001640 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001636:	f003 fb17 	bl	8004c68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000434 	.word	0x20000434

08001644 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001648:	4802      	ldr	r0, [pc, #8]	; (8001654 <ETH_IRQHandler+0x10>)
 800164a:	f000 ff4f 	bl	80024ec <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20004f94 	.word	0x20004f94

08001658 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return 1;
 800165c:	2301      	movs	r3, #1
}
 800165e:	4618      	mov	r0, r3
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <_kill>:

int _kill(int pid, int sig)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001672:	4b05      	ldr	r3, [pc, #20]	; (8001688 <_kill+0x20>)
 8001674:	2216      	movs	r2, #22
 8001676:	601a      	str	r2, [r3, #0]
  return -1;
 8001678:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800167c:	4618      	mov	r0, r3
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	2000aa64 	.word	0x2000aa64

0800168c <_exit>:

void _exit (int status)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001694:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff ffe5 	bl	8001668 <_kill>
  while (1) {}    /* Make sure we hang here */
 800169e:	e7fe      	b.n	800169e <_exit+0x12>

080016a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]
 80016b0:	e00a      	b.n	80016c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016b2:	f3af 8000 	nop.w
 80016b6:	4601      	mov	r1, r0
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	1c5a      	adds	r2, r3, #1
 80016bc:	60ba      	str	r2, [r7, #8]
 80016be:	b2ca      	uxtb	r2, r1
 80016c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	3301      	adds	r3, #1
 80016c6:	617b      	str	r3, [r7, #20]
 80016c8:	697a      	ldr	r2, [r7, #20]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	dbf0      	blt.n	80016b2 <_read+0x12>
  }

  return len;
 80016d0:	687b      	ldr	r3, [r7, #4]
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b086      	sub	sp, #24
 80016de:	af00      	add	r7, sp, #0
 80016e0:	60f8      	str	r0, [r7, #12]
 80016e2:	60b9      	str	r1, [r7, #8]
 80016e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e6:	2300      	movs	r3, #0
 80016e8:	617b      	str	r3, [r7, #20]
 80016ea:	e009      	b.n	8001700 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	1c5a      	adds	r2, r3, #1
 80016f0:	60ba      	str	r2, [r7, #8]
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	3301      	adds	r3, #1
 80016fe:	617b      	str	r3, [r7, #20]
 8001700:	697a      	ldr	r2, [r7, #20]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	429a      	cmp	r2, r3
 8001706:	dbf1      	blt.n	80016ec <_write+0x12>
  }
  return len;
 8001708:	687b      	ldr	r3, [r7, #4]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <_close>:

int _close(int file)
{
 8001712:	b480      	push	{r7}
 8001714:	b083      	sub	sp, #12
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800171a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800171e:	4618      	mov	r0, r3
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800172a:	b480      	push	{r7}
 800172c:	b083      	sub	sp, #12
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
 8001732:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800173a:	605a      	str	r2, [r3, #4]
  return 0;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <_isatty>:

int _isatty(int file)
{
 800174a:	b480      	push	{r7}
 800174c:	b083      	sub	sp, #12
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001752:	2301      	movs	r3, #1
}
 8001754:	4618      	mov	r0, r3
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3714      	adds	r7, #20
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
	...

0800177c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800177c:	b480      	push	{r7}
 800177e:	b087      	sub	sp, #28
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001784:	4a14      	ldr	r2, [pc, #80]	; (80017d8 <_sbrk+0x5c>)
 8001786:	4b15      	ldr	r3, [pc, #84]	; (80017dc <_sbrk+0x60>)
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001790:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <_sbrk+0x64>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d102      	bne.n	800179e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001798:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <_sbrk+0x64>)
 800179a:	4a12      	ldr	r2, [pc, #72]	; (80017e4 <_sbrk+0x68>)
 800179c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800179e:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <_sbrk+0x64>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4413      	add	r3, r2
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d205      	bcs.n	80017b8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80017ac:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <_sbrk+0x6c>)
 80017ae:	220c      	movs	r2, #12
 80017b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017b6:	e009      	b.n	80017cc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80017b8:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <_sbrk+0x64>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017be:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <_sbrk+0x64>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4413      	add	r3, r2
 80017c6:	4a06      	ldr	r2, [pc, #24]	; (80017e0 <_sbrk+0x64>)
 80017c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ca:	68fb      	ldr	r3, [r7, #12]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	371c      	adds	r7, #28
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	20080000 	.word	0x20080000
 80017dc:	00000400 	.word	0x00000400
 80017e0:	200005b4 	.word	0x200005b4
 80017e4:	2000aa78 	.word	0x2000aa78
 80017e8:	2000aa64 	.word	0x2000aa64

080017ec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <SystemInit+0x20>)
 80017f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017f6:	4a05      	ldr	r2, [pc, #20]	; (800180c <SystemInit+0x20>)
 80017f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001810:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001848 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001814:	f7ff ffea 	bl	80017ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001818:	480c      	ldr	r0, [pc, #48]	; (800184c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800181a:	490d      	ldr	r1, [pc, #52]	; (8001850 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800181c:	4a0d      	ldr	r2, [pc, #52]	; (8001854 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800181e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001820:	e002      	b.n	8001828 <LoopCopyDataInit>

08001822 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001822:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001824:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001826:	3304      	adds	r3, #4

08001828 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001828:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800182a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800182c:	d3f9      	bcc.n	8001822 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800182e:	4a0a      	ldr	r2, [pc, #40]	; (8001858 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001830:	4c0a      	ldr	r4, [pc, #40]	; (800185c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001832:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001834:	e001      	b.n	800183a <LoopFillZerobss>

08001836 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001836:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001838:	3204      	adds	r2, #4

0800183a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800183a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800183c:	d3fb      	bcc.n	8001836 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800183e:	f010 fb75 	bl	8011f2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001842:	f7ff f929 	bl	8000a98 <main>
  bx  lr    
 8001846:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001848:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800184c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001850:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001854:	08016c08 	.word	0x08016c08
  ldr r2, =_sbss
 8001858:	20000334 	.word	0x20000334
  ldr r4, =_ebss
 800185c:	2000aa74 	.word	0x2000aa74

08001860 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001860:	e7fe      	b.n	8001860 <ADC_IRQHandler>

08001862 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001862:	b480      	push	{r7}
 8001864:	b083      	sub	sp, #12
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d00b      	beq.n	800188a <LAN8742_RegisterBusIO+0x28>
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d007      	beq.n	800188a <LAN8742_RegisterBusIO+0x28>
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d003      	beq.n	800188a <LAN8742_RegisterBusIO+0x28>
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d102      	bne.n	8001890 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800188a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800188e:	e014      	b.n	80018ba <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685a      	ldr	r2, [r3, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	68da      	ldr	r2, [r3, #12]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	691a      	ldr	r2, [r3, #16]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b086      	sub	sp, #24
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	2300      	movs	r3, #0
 80018d4:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80018d6:	2300      	movs	r3, #0
 80018d8:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d139      	bne.n	8001956 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d002      	beq.n	80018f0 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2220      	movs	r2, #32
 80018f4:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
 80018fa:	e01c      	b.n	8001936 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	695b      	ldr	r3, [r3, #20]
 8001900:	f107 020c 	add.w	r2, r7, #12
 8001904:	2112      	movs	r1, #18
 8001906:	6978      	ldr	r0, [r7, #20]
 8001908:	4798      	blx	r3
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	da03      	bge.n	8001918 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001910:	f06f 0304 	mvn.w	r3, #4
 8001914:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001916:	e00b      	b.n	8001930 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f003 031f 	and.w	r3, r3, #31
 800191e:	697a      	ldr	r2, [r7, #20]
 8001920:	429a      	cmp	r2, r3
 8001922:	d105      	bne.n	8001930 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	697a      	ldr	r2, [r7, #20]
 8001928:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800192a:	2300      	movs	r3, #0
 800192c:	613b      	str	r3, [r7, #16]
         break;
 800192e:	e005      	b.n	800193c <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	3301      	adds	r3, #1
 8001934:	617b      	str	r3, [r7, #20]
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	2b1f      	cmp	r3, #31
 800193a:	d9df      	bls.n	80018fc <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b1f      	cmp	r3, #31
 8001942:	d902      	bls.n	800194a <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001944:	f06f 0302 	mvn.w	r3, #2
 8001948:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d102      	bne.n	8001956 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8001956:	693b      	ldr	r3, [r7, #16]
 }
 8001958:	4618      	mov	r0, r3
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001968:	2300      	movs	r3, #0
 800196a:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	695b      	ldr	r3, [r3, #20]
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	6810      	ldr	r0, [r2, #0]
 8001974:	f107 020c 	add.w	r2, r7, #12
 8001978:	2101      	movs	r1, #1
 800197a:	4798      	blx	r3
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	da02      	bge.n	8001988 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001982:	f06f 0304 	mvn.w	r3, #4
 8001986:	e06e      	b.n	8001a66 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	695b      	ldr	r3, [r3, #20]
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	6810      	ldr	r0, [r2, #0]
 8001990:	f107 020c 	add.w	r2, r7, #12
 8001994:	2101      	movs	r1, #1
 8001996:	4798      	blx	r3
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	da02      	bge.n	80019a4 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800199e:	f06f 0304 	mvn.w	r3, #4
 80019a2:	e060      	b.n	8001a66 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f003 0304 	and.w	r3, r3, #4
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e059      	b.n	8001a66 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	6810      	ldr	r0, [r2, #0]
 80019ba:	f107 020c 	add.w	r2, r7, #12
 80019be:	2100      	movs	r1, #0
 80019c0:	4798      	blx	r3
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	da02      	bge.n	80019ce <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80019c8:	f06f 0304 	mvn.w	r3, #4
 80019cc:	e04b      	b.n	8001a66 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d11b      	bne.n	8001a10 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d006      	beq.n	80019f0 <LAN8742_GetLinkState+0x90>
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80019ec:	2302      	movs	r3, #2
 80019ee:	e03a      	b.n	8001a66 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e033      	b.n	8001a66 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001a08:	2304      	movs	r3, #4
 8001a0a:	e02c      	b.n	8001a66 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001a0c:	2305      	movs	r3, #5
 8001a0e:	e02a      	b.n	8001a66 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	695b      	ldr	r3, [r3, #20]
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	6810      	ldr	r0, [r2, #0]
 8001a18:	f107 020c 	add.w	r2, r7, #12
 8001a1c:	211f      	movs	r1, #31
 8001a1e:	4798      	blx	r3
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	da02      	bge.n	8001a2c <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001a26:	f06f 0304 	mvn.w	r3, #4
 8001a2a:	e01c      	b.n	8001a66 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001a36:	2306      	movs	r3, #6
 8001a38:	e015      	b.n	8001a66 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f003 031c 	and.w	r3, r3, #28
 8001a40:	2b18      	cmp	r3, #24
 8001a42:	d101      	bne.n	8001a48 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001a44:	2302      	movs	r3, #2
 8001a46:	e00e      	b.n	8001a66 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f003 031c 	and.w	r3, r3, #28
 8001a4e:	2b08      	cmp	r3, #8
 8001a50:	d101      	bne.n	8001a56 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e007      	b.n	8001a66 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f003 031c 	and.w	r3, r3, #28
 8001a5c:	2b14      	cmp	r3, #20
 8001a5e:	d101      	bne.n	8001a64 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001a60:	2304      	movs	r3, #4
 8001a62:	e000      	b.n	8001a66 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001a64:	2305      	movs	r3, #5
    }
  }
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a74:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <HAL_Init+0x28>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a07      	ldr	r2, [pc, #28]	; (8001a98 <HAL_Init+0x28>)
 8001a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a80:	2003      	movs	r0, #3
 8001a82:	f000 f94f 	bl	8001d24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a86:	2000      	movs	r0, #0
 8001a88:	f000 f808 	bl	8001a9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a8c:	f7ff fc0c 	bl	80012a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40023c00 	.word	0x40023c00

08001a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001aa4:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <HAL_InitTick+0x54>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <HAL_InitTick+0x58>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	4619      	mov	r1, r3
 8001aae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ab2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aba:	4618      	mov	r0, r3
 8001abc:	f000 f967 	bl	8001d8e <HAL_SYSTICK_Config>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e00e      	b.n	8001ae8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2b0f      	cmp	r3, #15
 8001ace:	d80a      	bhi.n	8001ae6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	6879      	ldr	r1, [r7, #4]
 8001ad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ad8:	f000 f92f 	bl	8001d3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001adc:	4a06      	ldr	r2, [pc, #24]	; (8001af8 <HAL_InitTick+0x5c>)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	e000      	b.n	8001ae8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20000000 	.word	0x20000000
 8001af4:	20000008 	.word	0x20000008
 8001af8:	20000004 	.word	0x20000004

08001afc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b00:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <HAL_IncTick+0x20>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	461a      	mov	r2, r3
 8001b06:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <HAL_IncTick+0x24>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	4a04      	ldr	r2, [pc, #16]	; (8001b20 <HAL_IncTick+0x24>)
 8001b0e:	6013      	str	r3, [r2, #0]
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	20000008 	.word	0x20000008
 8001b20:	200005b8 	.word	0x200005b8

08001b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return uwTick;
 8001b28:	4b03      	ldr	r3, [pc, #12]	; (8001b38 <HAL_GetTick+0x14>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	200005b8 	.word	0x200005b8

08001b3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b44:	f7ff ffee 	bl	8001b24 <HAL_GetTick>
 8001b48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b54:	d005      	beq.n	8001b62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b56:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <HAL_Delay+0x44>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	4413      	add	r3, r2
 8001b60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b62:	bf00      	nop
 8001b64:	f7ff ffde 	bl	8001b24 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d8f7      	bhi.n	8001b64 <HAL_Delay+0x28>
  {
  }
}
 8001b74:	bf00      	nop
 8001b76:	bf00      	nop
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000008 	.word	0x20000008

08001b84 <__NVIC_SetPriorityGrouping>:
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b94:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <__NVIC_SetPriorityGrouping+0x40>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001bac:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bb2:	4a04      	ldr	r2, [pc, #16]	; (8001bc4 <__NVIC_SetPriorityGrouping+0x40>)
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	60d3      	str	r3, [r2, #12]
}
 8001bb8:	bf00      	nop
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	e000ed00 	.word	0xe000ed00
 8001bc8:	05fa0000 	.word	0x05fa0000

08001bcc <__NVIC_GetPriorityGrouping>:
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bd0:	4b04      	ldr	r3, [pc, #16]	; (8001be4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	0a1b      	lsrs	r3, r3, #8
 8001bd6:	f003 0307 	and.w	r3, r3, #7
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <__NVIC_EnableIRQ>:
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	db0b      	blt.n	8001c12 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	f003 021f 	and.w	r2, r3, #31
 8001c00:	4907      	ldr	r1, [pc, #28]	; (8001c20 <__NVIC_EnableIRQ+0x38>)
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	095b      	lsrs	r3, r3, #5
 8001c08:	2001      	movs	r0, #1
 8001c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	e000e100 	.word	0xe000e100

08001c24 <__NVIC_SetPriority>:
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	6039      	str	r1, [r7, #0]
 8001c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	db0a      	blt.n	8001c4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	490c      	ldr	r1, [pc, #48]	; (8001c70 <__NVIC_SetPriority+0x4c>)
 8001c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c42:	0112      	lsls	r2, r2, #4
 8001c44:	b2d2      	uxtb	r2, r2
 8001c46:	440b      	add	r3, r1
 8001c48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001c4c:	e00a      	b.n	8001c64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	4908      	ldr	r1, [pc, #32]	; (8001c74 <__NVIC_SetPriority+0x50>)
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	3b04      	subs	r3, #4
 8001c5c:	0112      	lsls	r2, r2, #4
 8001c5e:	b2d2      	uxtb	r2, r2
 8001c60:	440b      	add	r3, r1
 8001c62:	761a      	strb	r2, [r3, #24]
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	e000e100 	.word	0xe000e100
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <NVIC_EncodePriority>:
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b089      	sub	sp, #36	; 0x24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	f1c3 0307 	rsb	r3, r3, #7
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	bf28      	it	cs
 8001c96:	2304      	movcs	r3, #4
 8001c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	2b06      	cmp	r3, #6
 8001ca0:	d902      	bls.n	8001ca8 <NVIC_EncodePriority+0x30>
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	3b03      	subs	r3, #3
 8001ca6:	e000      	b.n	8001caa <NVIC_EncodePriority+0x32>
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43da      	mvns	r2, r3
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	401a      	ands	r2, r3
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cca:	43d9      	mvns	r1, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd0:	4313      	orrs	r3, r2
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3724      	adds	r7, #36	; 0x24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
	...

08001ce0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3b01      	subs	r3, #1
 8001cec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cf0:	d301      	bcc.n	8001cf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e00f      	b.n	8001d16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cf6:	4a0a      	ldr	r2, [pc, #40]	; (8001d20 <SysTick_Config+0x40>)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cfe:	210f      	movs	r1, #15
 8001d00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d04:	f7ff ff8e 	bl	8001c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d08:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <SysTick_Config+0x40>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d0e:	4b04      	ldr	r3, [pc, #16]	; (8001d20 <SysTick_Config+0x40>)
 8001d10:	2207      	movs	r2, #7
 8001d12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	e000e010 	.word	0xe000e010

08001d24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f7ff ff29 	bl	8001b84 <__NVIC_SetPriorityGrouping>
}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b086      	sub	sp, #24
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	4603      	mov	r3, r0
 8001d42:	60b9      	str	r1, [r7, #8]
 8001d44:	607a      	str	r2, [r7, #4]
 8001d46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d4c:	f7ff ff3e 	bl	8001bcc <__NVIC_GetPriorityGrouping>
 8001d50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	68b9      	ldr	r1, [r7, #8]
 8001d56:	6978      	ldr	r0, [r7, #20]
 8001d58:	f7ff ff8e 	bl	8001c78 <NVIC_EncodePriority>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d62:	4611      	mov	r1, r2
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff ff5d 	bl	8001c24 <__NVIC_SetPriority>
}
 8001d6a:	bf00      	nop
 8001d6c:	3718      	adds	r7, #24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b082      	sub	sp, #8
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	4603      	mov	r3, r0
 8001d7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff ff31 	bl	8001be8 <__NVIC_EnableIRQ>
}
 8001d86:	bf00      	nop
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7ff ffa2 	bl	8001ce0 <SysTick_Config>
 8001d9c:	4603      	mov	r3, r0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
	...

08001da8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001dac:	f3bf 8f5f 	dmb	sy
}
 8001db0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001db2:	4b07      	ldr	r3, [pc, #28]	; (8001dd0 <HAL_MPU_Disable+0x28>)
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	4a06      	ldr	r2, [pc, #24]	; (8001dd0 <HAL_MPU_Disable+0x28>)
 8001db8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dbc:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001dbe:	4b05      	ldr	r3, [pc, #20]	; (8001dd4 <HAL_MPU_Disable+0x2c>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	605a      	str	r2, [r3, #4]
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	e000ed00 	.word	0xe000ed00
 8001dd4:	e000ed90 	.word	0xe000ed90

08001dd8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001de0:	4a0b      	ldr	r2, [pc, #44]	; (8001e10 <HAL_MPU_Enable+0x38>)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001dea:	4b0a      	ldr	r3, [pc, #40]	; (8001e14 <HAL_MPU_Enable+0x3c>)
 8001dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dee:	4a09      	ldr	r2, [pc, #36]	; (8001e14 <HAL_MPU_Enable+0x3c>)
 8001df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001df4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001df6:	f3bf 8f4f 	dsb	sy
}
 8001dfa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dfc:	f3bf 8f6f 	isb	sy
}
 8001e00:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	e000ed90 	.word	0xe000ed90
 8001e14:	e000ed00 	.word	0xe000ed00

08001e18 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	785a      	ldrb	r2, [r3, #1]
 8001e24:	4b1b      	ldr	r3, [pc, #108]	; (8001e94 <HAL_MPU_ConfigRegion+0x7c>)
 8001e26:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001e28:	4b1a      	ldr	r3, [pc, #104]	; (8001e94 <HAL_MPU_ConfigRegion+0x7c>)
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	4a19      	ldr	r2, [pc, #100]	; (8001e94 <HAL_MPU_ConfigRegion+0x7c>)
 8001e2e:	f023 0301 	bic.w	r3, r3, #1
 8001e32:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001e34:	4a17      	ldr	r2, [pc, #92]	; (8001e94 <HAL_MPU_ConfigRegion+0x7c>)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	7b1b      	ldrb	r3, [r3, #12]
 8001e40:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	7adb      	ldrb	r3, [r3, #11]
 8001e46:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e48:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	7a9b      	ldrb	r3, [r3, #10]
 8001e4e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001e50:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	7b5b      	ldrb	r3, [r3, #13]
 8001e56:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001e58:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	7b9b      	ldrb	r3, [r3, #14]
 8001e5e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001e60:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	7bdb      	ldrb	r3, [r3, #15]
 8001e66:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001e68:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	7a5b      	ldrb	r3, [r3, #9]
 8001e6e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001e70:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	7a1b      	ldrb	r3, [r3, #8]
 8001e76:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001e78:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	7812      	ldrb	r2, [r2, #0]
 8001e7e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e80:	4a04      	ldr	r2, [pc, #16]	; (8001e94 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001e82:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e84:	6113      	str	r3, [r2, #16]
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	e000ed90 	.word	0xe000ed90

08001e98 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e086      	b.n	8001fb8 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d106      	bne.n	8001ec2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2223      	movs	r2, #35	; 0x23
 8001eb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f004 ff9b 	bl	8006df8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ec2:	4b3f      	ldr	r3, [pc, #252]	; (8001fc0 <HAL_ETH_Init+0x128>)
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec6:	4a3e      	ldr	r2, [pc, #248]	; (8001fc0 <HAL_ETH_Init+0x128>)
 8001ec8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ecc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ece:	4b3c      	ldr	r3, [pc, #240]	; (8001fc0 <HAL_ETH_Init+0x128>)
 8001ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ed6:	60bb      	str	r3, [r7, #8]
 8001ed8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001eda:	4b3a      	ldr	r3, [pc, #232]	; (8001fc4 <HAL_ETH_Init+0x12c>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	4a39      	ldr	r2, [pc, #228]	; (8001fc4 <HAL_ETH_Init+0x12c>)
 8001ee0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001ee4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001ee6:	4b37      	ldr	r3, [pc, #220]	; (8001fc4 <HAL_ETH_Init+0x12c>)
 8001ee8:	685a      	ldr	r2, [r3, #4]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	4935      	ldr	r1, [pc, #212]	; (8001fc4 <HAL_ETH_Init+0x12c>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001ef4:	4b33      	ldr	r3, [pc, #204]	; (8001fc4 <HAL_ETH_Init+0x12c>)
 8001ef6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	6812      	ldr	r2, [r2, #0]
 8001f06:	f043 0301 	orr.w	r3, r3, #1
 8001f0a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f0e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f10:	f7ff fe08 	bl	8001b24 <HAL_GetTick>
 8001f14:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001f16:	e011      	b.n	8001f3c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001f18:	f7ff fe04 	bl	8001b24 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f26:	d909      	bls.n	8001f3c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2204      	movs	r2, #4
 8001f2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	22e0      	movs	r2, #224	; 0xe0
 8001f34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e03d      	b.n	8001fb8 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1e4      	bne.n	8001f18 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 fefc 	bl	8002d4c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 ffa7 	bl	8002ea8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 fffd 	bl	8002f5a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	461a      	mov	r2, r3
 8001f66:	2100      	movs	r1, #0
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 ff65 	bl	8002e38 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8001f7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	4b0f      	ldr	r3, [pc, #60]	; (8001fc8 <HAL_ETH_Init+0x130>)
 8001f8c:	430b      	orrs	r3, r1
 8001f8e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8001fa2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2210      	movs	r2, #16
 8001fb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3710      	adds	r7, #16
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	40013800 	.word	0x40013800
 8001fc8:	00020060 	.word	0x00020060

08001fcc <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fda:	2b10      	cmp	r3, #16
 8001fdc:	d150      	bne.n	8002080 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2223      	movs	r2, #35	; 0x23
 8001fe2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2204      	movs	r2, #4
 8001fea:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 f9f9 	bl	80023e4 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f042 0208 	orr.w	r2, r2, #8
 8002000:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800200a:	2001      	movs	r0, #1
 800200c:	f7ff fd96 	bl	8001b3c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f042 0204 	orr.w	r2, r2, #4
 8002026:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002030:	2001      	movs	r0, #1
 8002032:	f7ff fd83 	bl	8001b3c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 fd20 	bl	8002a84 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	6812      	ldr	r2, [r2, #0]
 8002052:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002056:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800205a:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	6812      	ldr	r2, [r2, #0]
 800206a:	f043 0302 	orr.w	r3, r3, #2
 800206e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002072:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2223      	movs	r2, #35	; 0x23
 8002078:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800207c:	2300      	movs	r3, #0
 800207e:	e000      	b.n	8002082 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
  }
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b084      	sub	sp, #16
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002098:	2b23      	cmp	r3, #35	; 0x23
 800209a:	d14a      	bne.n	8002132 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2223      	movs	r2, #35	; 0x23
 80020a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	6812      	ldr	r2, [r2, #0]
 80020b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80020b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80020ba:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	6812      	ldr	r2, [r2, #0]
 80020ca:	f023 0302 	bic.w	r3, r3, #2
 80020ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80020d2:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f022 0204 	bic.w	r2, r2, #4
 80020e2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80020ec:	2001      	movs	r0, #1
 80020ee:	f7ff fd25 	bl	8001b3c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 fcc2 	bl	8002a84 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 0208 	bic.w	r2, r2, #8
 800210e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002118:	2001      	movs	r0, #1
 800211a:	f7ff fd0f 	bl	8001b3c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2210      	movs	r2, #16
 800212a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800212e:	2300      	movs	r3, #0
 8002130:	e000      	b.n	8002134 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
  }
}
 8002134:	4618      	mov	r0, r3
 8002136:	3710      	adds	r7, #16
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d109      	bne.n	8002162 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002154:	f043 0201 	orr.w	r2, r3, #1
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e07c      	b.n	800225c <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002168:	2b23      	cmp	r3, #35	; 0x23
 800216a:	d176      	bne.n	800225a <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 800216c:	2200      	movs	r2, #0
 800216e:	68b9      	ldr	r1, [r7, #8]
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f000 ff61 	bl	8003038 <ETH_Prepare_Tx_Descriptors>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d009      	beq.n	8002190 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002182:	f043 0202 	orr.w	r2, r3, #2
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e065      	b.n	800225c <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8002190:	f3bf 8f4f 	dsb	sy
}
 8002194:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	3206      	adds	r2, #6
 800219e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021a2:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a8:	1c5a      	adds	r2, r3, #1
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	629a      	str	r2, [r3, #40]	; 0x28
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b2:	2b03      	cmp	r3, #3
 80021b4:	d904      	bls.n	80021c0 <HAL_ETH_Transmit+0x84>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ba:	1f1a      	subs	r2, r3, #4
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	3106      	adds	r1, #6
 80021cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80021d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80021d4:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 80021d6:	f7ff fca5 	bl	8001b24 <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80021dc:	e037      	b.n	800224e <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021e6:	695b      	ldr	r3, [r3, #20]
 80021e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d011      	beq.n	8002214 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f6:	f043 0208 	orr.w	r2, r3, #8
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002208:	695a      	ldr	r2, [r3, #20]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e023      	b.n	800225c <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800221a:	d018      	beq.n	800224e <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800221c:	f7ff fc82 	bl	8001b24 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	429a      	cmp	r2, r3
 800222a:	d302      	bcc.n	8002232 <HAL_ETH_Transmit+0xf6>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d10d      	bne.n	800224e <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002238:	f043 0204 	orr.w	r2, r3, #4
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8002248:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e006      	b.n	800225c <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	dbc3      	blt.n	80021de <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8002256:	2300      	movs	r3, #0
 8002258:	e000      	b.n	800225c <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
  }
}
 800225c:	4618      	mov	r0, r3
 800225e:	3718      	adds	r7, #24
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b088      	sub	sp, #32
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800226e:	2300      	movs	r3, #0
 8002270:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002272:	2300      	movs	r3, #0
 8002274:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d109      	bne.n	8002290 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002282:	f043 0201 	orr.w	r2, r3, #1
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e0a4      	b.n	80023da <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002296:	2b23      	cmp	r3, #35	; 0x23
 8002298:	d001      	beq.n	800229e <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e09d      	b.n	80023da <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a2:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	69fa      	ldr	r2, [r7, #28]
 80022a8:	3212      	adds	r2, #18
 80022aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022ae:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022b4:	f1c3 0304 	rsb	r3, r3, #4
 80022b8:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80022ba:	e066      	b.n	800238a <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d007      	beq.n	80022d8 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	69da      	ldr	r2, [r3, #28]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	699a      	ldr	r2, [r3, #24]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d103      	bne.n	80022ec <HAL_ETH_ReadData+0x88>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d03c      	beq.n	8002366 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d005      	beq.n	8002304 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	0c1b      	lsrs	r3, r3, #16
 800230a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800230e:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002318:	2b00      	cmp	r3, #0
 800231a:	d005      	beq.n	8002328 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8002324:	2301      	movs	r3, #1
 8002326:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002340:	461a      	mov	r2, r3
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	b29b      	uxth	r3, r3
 8002346:	f004 ff21 	bl	800718c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800234e:	1c5a      	adds	r2, r3, #1
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	441a      	add	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	2200      	movs	r2, #0
 8002364:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	3301      	adds	r3, #1
 800236a:	61fb      	str	r3, [r7, #28]
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	2b03      	cmp	r3, #3
 8002370:	d902      	bls.n	8002378 <HAL_ETH_ReadData+0x114>
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	3b04      	subs	r3, #4
 8002376:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	69fa      	ldr	r2, [r7, #28]
 800237c:	3212      	adds	r2, #18
 800237e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002382:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	3301      	adds	r3, #1
 8002388:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800238e:	2b00      	cmp	r3, #0
 8002390:	db06      	blt.n	80023a0 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	429a      	cmp	r2, r3
 8002398:	d202      	bcs.n	80023a0 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 800239a:	7cfb      	ldrb	r3, [r7, #19]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d08d      	beq.n	80022bc <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	441a      	add	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d002      	beq.n	80023ba <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 f815 	bl	80023e4 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	69fa      	ldr	r2, [r7, #28]
 80023be:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80023c0:	7cfb      	ldrb	r3, [r7, #19]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d108      	bne.n	80023d8 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80023d4:	2300      	movs	r3, #0
 80023d6:	e000      	b.n	80023da <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3720      	adds	r7, #32
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
	...

080023e4 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b088      	sub	sp, #32
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80023ec:	2300      	movs	r3, #0
 80023ee:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80023f0:	2301      	movs	r3, #1
 80023f2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023f8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69fa      	ldr	r2, [r7, #28]
 80023fe:	3212      	adds	r2, #18
 8002400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002404:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800240a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800240c:	e042      	b.n	8002494 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d112      	bne.n	800243c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002416:	f107 0308 	add.w	r3, r7, #8
 800241a:	4618      	mov	r0, r3
 800241c:	f004 fe86 	bl	800712c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d102      	bne.n	800242c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002426:	2300      	movs	r3, #0
 8002428:	74fb      	strb	r3, [r7, #19]
 800242a:	e007      	b.n	800243c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	461a      	mov	r2, r3
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	461a      	mov	r2, r3
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 800243c:	7cfb      	ldrb	r3, [r7, #19]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d028      	beq.n	8002494 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002446:	2b00      	cmp	r3, #0
 8002448:	d106      	bne.n	8002458 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	695a      	ldr	r2, [r3, #20]
 800244e:	4b26      	ldr	r3, [pc, #152]	; (80024e8 <ETH_UpdateDescriptor+0x104>)
 8002450:	4313      	orrs	r3, r2
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	6053      	str	r3, [r2, #4]
 8002456:	e005      	b.n	8002464 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	3301      	adds	r3, #1
 8002474:	61fb      	str	r3, [r7, #28]
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	2b03      	cmp	r3, #3
 800247a:	d902      	bls.n	8002482 <ETH_UpdateDescriptor+0x9e>
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	3b04      	subs	r3, #4
 8002480:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	69fa      	ldr	r2, [r7, #28]
 8002486:	3212      	adds	r2, #18
 8002488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800248c:	617b      	str	r3, [r7, #20]
      desccount--;
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	3b01      	subs	r3, #1
 8002492:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d002      	beq.n	80024a0 <ETH_UpdateDescriptor+0xbc>
 800249a:	7cfb      	ldrb	r3, [r7, #19]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1b6      	bne.n	800240e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d01a      	beq.n	80024e0 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	3301      	adds	r3, #1
 80024ae:	f003 0303 	and.w	r3, r3, #3
 80024b2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80024b4:	f3bf 8f5f 	dmb	sy
}
 80024b8:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6919      	ldr	r1, [r3, #16]
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	4613      	mov	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	4413      	add	r3, r2
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	18ca      	adds	r2, r1, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024d2:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	69fa      	ldr	r2, [r7, #28]
 80024d8:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80024e0:	bf00      	nop
 80024e2:	3720      	adds	r7, #32
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	80004000 	.word	0x80004000

080024ec <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024fa:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8002514:	4b4b      	ldr	r3, [pc, #300]	; (8002644 <HAL_ETH_IRQHandler+0x158>)
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00e      	beq.n	8002542 <HAL_ETH_IRQHandler+0x56>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800252a:	2b00      	cmp	r3, #0
 800252c:	d009      	beq.n	8002542 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002536:	461a      	mov	r2, r3
 8002538:	4b43      	ldr	r3, [pc, #268]	; (8002648 <HAL_ETH_IRQHandler+0x15c>)
 800253a:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f000 f891 	bl	8002664 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00f      	beq.n	800256c <HAL_ETH_IRQHandler+0x80>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00a      	beq.n	800256c <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800255e:	461a      	mov	r2, r3
 8002560:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002564:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 f872 	bl	8002650 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d042      	beq.n	80025fc <HAL_ETH_IRQHandler+0x110>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d03d      	beq.n	80025fc <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002586:	f043 0208 	orr.w	r2, r3, #8
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d01a      	beq.n	80025d0 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025a2:	695a      	ldr	r2, [r3, #20]
 80025a4:	4b29      	ldr	r3, [pc, #164]	; (800264c <HAL_ETH_IRQHandler+0x160>)
 80025a6:	4013      	ands	r3, r2
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025b6:	69db      	ldr	r3, [r3, #28]
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	6812      	ldr	r2, [r2, #0]
 80025bc:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 80025c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80025c4:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	22e0      	movs	r2, #224	; 0xe0
 80025ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80025ce:	e012      	b.n	80025f6 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025d8:	695a      	ldr	r2, [r3, #20]
 80025da:	f248 6380 	movw	r3, #34432	; 0x8680
 80025de:	4013      	ands	r3, r2
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025ee:	461a      	mov	r2, r3
 80025f0:	f248 6380 	movw	r3, #34432	; 0x8680
 80025f4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 f83e 	bl	8002678 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	f003 0308 	and.w	r3, r3, #8
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00e      	beq.n	8002624 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 f838 	bl	800268c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d006      	beq.n	800263c <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800262e:	4b05      	ldr	r3, [pc, #20]	; (8002644 <HAL_ETH_IRQHandler+0x158>)
 8002630:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002634:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f832 	bl	80026a0 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 800263c:	bf00      	nop
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40013c00 	.word	0x40013c00
 8002648:	00010040 	.word	0x00010040
 800264c:	007e2000 	.word	0x007e2000

08002650 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
 80026c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	f003 031c 	and.w	r3, r3, #28
 80026d0:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	02db      	lsls	r3, r3, #11
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	4313      	orrs	r3, r2
 80026dc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	019b      	lsls	r3, r3, #6
 80026e2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	f023 0302 	bic.w	r3, r3, #2
 80026f2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	697a      	ldr	r2, [r7, #20]
 8002702:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002704:	f7ff fa0e 	bl	8001b24 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800270a:	e00d      	b.n	8002728 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 800270c:	f7ff fa0a 	bl	8001b24 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800271a:	d301      	bcc.n	8002720 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e010      	b.n	8002742 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1ec      	bne.n	800270c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	b29b      	uxth	r3, r3
 800273a:	461a      	mov	r2, r3
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3718      	adds	r7, #24
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b086      	sub	sp, #24
 800274e:	af00      	add	r7, sp, #0
 8002750:	60f8      	str	r0, [r7, #12]
 8002752:	60b9      	str	r1, [r7, #8]
 8002754:	607a      	str	r2, [r7, #4]
 8002756:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	f003 031c 	and.w	r3, r3, #28
 8002766:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	02db      	lsls	r3, r3, #11
 800276c:	b29b      	uxth	r3, r3
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	4313      	orrs	r3, r2
 8002772:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	019b      	lsls	r3, r3, #6
 8002778:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	4313      	orrs	r3, r2
 8002780:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	f043 0302 	orr.w	r3, r3, #2
 8002788:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	f043 0301 	orr.w	r3, r3, #1
 8002790:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	b29a      	uxth	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	697a      	ldr	r2, [r7, #20]
 80027a2:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027a4:	f7ff f9be 	bl	8001b24 <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80027aa:	e00d      	b.n	80027c8 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80027ac:	f7ff f9ba 	bl	8001b24 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ba:	d301      	bcc.n	80027c0 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e009      	b.n	80027d4 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1ec      	bne.n	80027ac <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3718      	adds	r7, #24
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d101      	bne.n	80027f0 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e0e6      	b.n	80029be <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0310 	and.w	r3, r3, #16
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	bf14      	ite	ne
 80027fe:	2301      	movne	r3, #1
 8002800:	2300      	moveq	r3, #0
 8002802:	b2db      	uxtb	r3, r3
 8002804:	461a      	mov	r2, r3
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002824:	2b00      	cmp	r3, #0
 8002826:	bf0c      	ite	eq
 8002828:	2301      	moveq	r3, #1
 800282a:	2300      	movne	r3, #0
 800282c:	b2db      	uxtb	r3, r3
 800282e:	461a      	mov	r2, r3
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8002840:	2b00      	cmp	r3, #0
 8002842:	bf14      	ite	ne
 8002844:	2301      	movne	r3, #1
 8002846:	2300      	moveq	r3, #0
 8002848:	b2db      	uxtb	r3, r3
 800284a:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800285a:	2b00      	cmp	r3, #0
 800285c:	bf0c      	ite	eq
 800285e:	2301      	moveq	r3, #1
 8002860:	2300      	movne	r3, #0
 8002862:	b2db      	uxtb	r3, r3
 8002864:	461a      	mov	r2, r3
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002874:	2b00      	cmp	r3, #0
 8002876:	bf14      	ite	ne
 8002878:	2301      	movne	r3, #1
 800287a:	2300      	moveq	r3, #0
 800287c:	b2db      	uxtb	r3, r3
 800287e:	461a      	mov	r2, r3
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	bf0c      	ite	eq
 80028ae:	2301      	moveq	r3, #1
 80028b0:	2300      	movne	r3, #0
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	461a      	mov	r2, r3
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	bf0c      	ite	eq
 80028c8:	2301      	moveq	r3, #1
 80028ca:	2300      	movne	r3, #0
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	461a      	mov	r2, r3
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028de:	2b00      	cmp	r3, #0
 80028e0:	bf14      	ite	ne
 80028e2:	2301      	movne	r3, #1
 80028e4:	2300      	moveq	r3, #0
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	461a      	mov	r2, r3
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002906:	2b00      	cmp	r3, #0
 8002908:	bf14      	ite	ne
 800290a:	2301      	movne	r3, #1
 800290c:	2300      	moveq	r3, #0
 800290e:	b2db      	uxtb	r3, r3
 8002910:	461a      	mov	r2, r3
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002920:	2b00      	cmp	r3, #0
 8002922:	bf14      	ite	ne
 8002924:	2301      	movne	r3, #1
 8002926:	2300      	moveq	r3, #0
 8002928:	b2db      	uxtb	r3, r3
 800292a:	461a      	mov	r2, r3
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	bf14      	ite	ne
 800293e:	2301      	movne	r3, #1
 8002940:	2300      	moveq	r3, #0
 8002942:	b2db      	uxtb	r3, r3
 8002944:	461a      	mov	r2, r3
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002956:	2b00      	cmp	r3, #0
 8002958:	bf0c      	ite	eq
 800295a:	2301      	moveq	r3, #1
 800295c:	2300      	movne	r3, #0
 800295e:	b2db      	uxtb	r3, r3
 8002960:	461a      	mov	r2, r3
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	0c1b      	lsrs	r3, r3, #16
 800297e:	b29a      	uxth	r2, r3
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	f003 0304 	and.w	r3, r3, #4
 800298e:	2b00      	cmp	r3, #0
 8002990:	bf14      	ite	ne
 8002992:	2301      	movne	r3, #1
 8002994:	2300      	moveq	r3, #0
 8002996:	b2db      	uxtb	r3, r3
 8002998:	461a      	mov	r2, r3
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	bf14      	ite	ne
 80029ae:	2301      	movne	r3, #1
 80029b0:	2300      	moveq	r3, #0
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b082      	sub	sp, #8
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
 80029d2:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e00b      	b.n	80029f6 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029e4:	2b10      	cmp	r3, #16
 80029e6:	d105      	bne.n	80029f4 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80029e8:	6839      	ldr	r1, [r7, #0]
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f870 	bl	8002ad0 <ETH_SetMACConfig>

    return HAL_OK;
 80029f0:	2300      	movs	r3, #0
 80029f2:	e000      	b.n	80029f6 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
  }
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
	...

08002a00 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f023 031c 	bic.w	r3, r3, #28
 8002a16:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002a18:	f001 fb22 	bl	8004060 <HAL_RCC_GetHCLKFreq>
 8002a1c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	4a14      	ldr	r2, [pc, #80]	; (8002a74 <HAL_ETH_SetMDIOClockRange+0x74>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d804      	bhi.n	8002a30 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f043 0308 	orr.w	r3, r3, #8
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	e019      	b.n	8002a64 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	4a11      	ldr	r2, [pc, #68]	; (8002a78 <HAL_ETH_SetMDIOClockRange+0x78>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d204      	bcs.n	8002a42 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f043 030c 	orr.w	r3, r3, #12
 8002a3e:	60fb      	str	r3, [r7, #12]
 8002a40:	e010      	b.n	8002a64 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	4a0d      	ldr	r2, [pc, #52]	; (8002a7c <HAL_ETH_SetMDIOClockRange+0x7c>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d90c      	bls.n	8002a64 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	4a0c      	ldr	r2, [pc, #48]	; (8002a80 <HAL_ETH_SetMDIOClockRange+0x80>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d804      	bhi.n	8002a5c <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f043 0304 	orr.w	r3, r3, #4
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	e003      	b.n	8002a64 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f043 0310 	orr.w	r3, r3, #16
 8002a62:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	611a      	str	r2, [r3, #16]
}
 8002a6c:	bf00      	nop
 8002a6e:	3710      	adds	r7, #16
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	02160ebf 	.word	0x02160ebf
 8002a78:	03938700 	.word	0x03938700
 8002a7c:	05f5e0ff 	.word	0x05f5e0ff
 8002a80:	08f0d17f 	.word	0x08f0d17f

08002a84 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	6812      	ldr	r2, [r2, #0]
 8002a9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002aa2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002aa6:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ab4:	2001      	movs	r0, #1
 8002ab6:	f7ff f841 	bl	8001b3c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ac4:	6193      	str	r3, [r2, #24]
}
 8002ac6:	bf00      	nop
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
	...

08002ad0 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	4b53      	ldr	r3, [pc, #332]	; (8002c34 <ETH_SetMACConfig+0x164>)
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	7b9b      	ldrb	r3, [r3, #14]
 8002aee:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	7c12      	ldrb	r2, [r2, #16]
 8002af4:	2a00      	cmp	r2, #0
 8002af6:	d102      	bne.n	8002afe <ETH_SetMACConfig+0x2e>
 8002af8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002afc:	e000      	b.n	8002b00 <ETH_SetMACConfig+0x30>
 8002afe:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002b00:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	7c52      	ldrb	r2, [r2, #17]
 8002b06:	2a00      	cmp	r2, #0
 8002b08:	d102      	bne.n	8002b10 <ETH_SetMACConfig+0x40>
 8002b0a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002b0e:	e000      	b.n	8002b12 <ETH_SetMACConfig+0x42>
 8002b10:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002b12:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002b18:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	7fdb      	ldrb	r3, [r3, #31]
 8002b1e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002b20:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002b26:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	7f92      	ldrb	r2, [r2, #30]
 8002b2c:	2a00      	cmp	r2, #0
 8002b2e:	d102      	bne.n	8002b36 <ETH_SetMACConfig+0x66>
 8002b30:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b34:	e000      	b.n	8002b38 <ETH_SetMACConfig+0x68>
 8002b36:	2200      	movs	r2, #0
                        macconf->Speed |
 8002b38:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	7f1b      	ldrb	r3, [r3, #28]
 8002b3e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002b40:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002b46:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	791b      	ldrb	r3, [r3, #4]
 8002b4c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002b4e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002b56:	2a00      	cmp	r2, #0
 8002b58:	d102      	bne.n	8002b60 <ETH_SetMACConfig+0x90>
 8002b5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b5e:	e000      	b.n	8002b62 <ETH_SetMACConfig+0x92>
 8002b60:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002b62:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	7bdb      	ldrb	r3, [r3, #15]
 8002b68:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002b6a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002b70:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b78:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b92:	2001      	movs	r0, #1
 8002b94:	f7fe ffd2 	bl	8001b3c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002bae:	4013      	ands	r3, r2
 8002bb0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bb6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002bbe:	2a00      	cmp	r2, #0
 8002bc0:	d101      	bne.n	8002bc6 <ETH_SetMACConfig+0xf6>
 8002bc2:	2280      	movs	r2, #128	; 0x80
 8002bc4:	e000      	b.n	8002bc8 <ETH_SetMACConfig+0xf8>
 8002bc6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002bc8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002bce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002bd6:	2a01      	cmp	r2, #1
 8002bd8:	d101      	bne.n	8002bde <ETH_SetMACConfig+0x10e>
 8002bda:	2208      	movs	r2, #8
 8002bdc:	e000      	b.n	8002be0 <ETH_SetMACConfig+0x110>
 8002bde:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002be0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002be8:	2a01      	cmp	r2, #1
 8002bea:	d101      	bne.n	8002bf0 <ETH_SetMACConfig+0x120>
 8002bec:	2204      	movs	r2, #4
 8002bee:	e000      	b.n	8002bf2 <ETH_SetMACConfig+0x122>
 8002bf0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002bf2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002bfa:	2a01      	cmp	r2, #1
 8002bfc:	d101      	bne.n	8002c02 <ETH_SetMACConfig+0x132>
 8002bfe:	2202      	movs	r2, #2
 8002c00:	e000      	b.n	8002c04 <ETH_SetMACConfig+0x134>
 8002c02:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002c04:	4313      	orrs	r3, r2
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c1c:	2001      	movs	r0, #1
 8002c1e:	f7fe ff8d 	bl	8001b3c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	619a      	str	r2, [r3, #24]
}
 8002c2a:	bf00      	nop
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	fd20810f 	.word	0xfd20810f

08002c38 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	4b3d      	ldr	r3, [pc, #244]	; (8002d48 <ETH_SetDMAConfig+0x110>)
 8002c52:	4013      	ands	r3, r2
 8002c54:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	7b1b      	ldrb	r3, [r3, #12]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d102      	bne.n	8002c64 <ETH_SetDMAConfig+0x2c>
 8002c5e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002c62:	e000      	b.n	8002c66 <ETH_SetDMAConfig+0x2e>
 8002c64:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	7b5b      	ldrb	r3, [r3, #13]
 8002c6a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002c6c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	7f52      	ldrb	r2, [r2, #29]
 8002c72:	2a00      	cmp	r2, #0
 8002c74:	d102      	bne.n	8002c7c <ETH_SetDMAConfig+0x44>
 8002c76:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002c7a:	e000      	b.n	8002c7e <ETH_SetDMAConfig+0x46>
 8002c7c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002c7e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	7b9b      	ldrb	r3, [r3, #14]
 8002c84:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002c86:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002c8c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	7f1b      	ldrb	r3, [r3, #28]
 8002c92:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002c94:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	7f9b      	ldrb	r3, [r3, #30]
 8002c9a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002c9c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002ca2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002caa:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002cac:	4313      	orrs	r3, r2
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002cce:	2001      	movs	r0, #1
 8002cd0:	f7fe ff34 	bl	8001b3c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cdc:	461a      	mov	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	791b      	ldrb	r3, [r3, #4]
 8002ce6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002cec:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002cf2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002cf8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d00:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002d02:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d08:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002d0a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002d10:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	6812      	ldr	r2, [r2, #0]
 8002d16:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d1a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d1e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d2c:	2001      	movs	r0, #1
 8002d2e:	f7fe ff05 	bl	8001b3c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6013      	str	r3, [r2, #0]
}
 8002d40:	bf00      	nop
 8002d42:	3710      	adds	r7, #16
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	f8de3f23 	.word	0xf8de3f23

08002d4c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b0a6      	sub	sp, #152	; 0x98
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002d54:	2301      	movs	r3, #1
 8002d56:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002d60:	2300      	movs	r3, #0
 8002d62:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002d64:	2300      	movs	r3, #0
 8002d66:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002d70:	2300      	movs	r3, #0
 8002d72:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002d76:	2301      	movs	r3, #1
 8002d78:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002d82:	2300      	movs	r3, #0
 8002d84:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002d92:	2300      	movs	r3, #0
 8002d94:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002da2:	2300      	movs	r3, #0
 8002da4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002da8:	2300      	movs	r3, #0
 8002daa:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002dae:	2300      	movs	r3, #0
 8002db0:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002db4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002db8:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002dba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002dc6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002dca:	4619      	mov	r1, r3
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f7ff fe7f 	bl	8002ad0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002de0:	2301      	movs	r3, #1
 8002de2:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002de4:	2300      	movs	r3, #0
 8002de6:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002de8:	2300      	movs	r3, #0
 8002dea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002dee:	2300      	movs	r3, #0
 8002df0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002df4:	2300      	movs	r3, #0
 8002df6:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002e02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e06:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002e08:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e0c:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002e0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e12:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002e14:	2301      	movs	r3, #1
 8002e16:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002e22:	f107 0308 	add.w	r3, r7, #8
 8002e26:	4619      	mov	r1, r3
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f7ff ff05 	bl	8002c38 <ETH_SetDMAConfig>
}
 8002e2e:	bf00      	nop
 8002e30:	3798      	adds	r7, #152	; 0x98
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
	...

08002e38 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b087      	sub	sp, #28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	3305      	adds	r3, #5
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	021b      	lsls	r3, r3, #8
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	3204      	adds	r2, #4
 8002e50:	7812      	ldrb	r2, [r2, #0]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	4b11      	ldr	r3, [pc, #68]	; (8002ea0 <ETH_MACAddressConfig+0x68>)
 8002e5a:	4413      	add	r3, r2
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	3303      	adds	r3, #3
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	061a      	lsls	r2, r3, #24
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	3302      	adds	r3, #2
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	041b      	lsls	r3, r3, #16
 8002e72:	431a      	orrs	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3301      	adds	r3, #1
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	021b      	lsls	r3, r3, #8
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	7812      	ldrb	r2, [r2, #0]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <ETH_MACAddressConfig+0x6c>)
 8002e8a:	4413      	add	r3, r2
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	6013      	str	r3, [r2, #0]
}
 8002e92:	bf00      	nop
 8002e94:	371c      	adds	r7, #28
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	40028040 	.word	0x40028040
 8002ea4:	40028044 	.word	0x40028044

08002ea8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	e03e      	b.n	8002f34 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68d9      	ldr	r1, [r3, #12]
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4413      	add	r3, r2
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	440b      	add	r3, r1
 8002ec6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	2200      	movs	r2, #0
 8002ede:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002ee0:	68b9      	ldr	r1, [r7, #8]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	3206      	adds	r2, #6
 8002ee8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d80c      	bhi.n	8002f18 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68d9      	ldr	r1, [r3, #12]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	1c5a      	adds	r2, r3, #1
 8002f06:	4613      	mov	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4413      	add	r3, r2
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	440b      	add	r3, r1
 8002f10:	461a      	mov	r2, r3
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	60da      	str	r2, [r3, #12]
 8002f16:	e004      	b.n	8002f22 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	3301      	adds	r3, #1
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2b03      	cmp	r3, #3
 8002f38:	d9bd      	bls.n	8002eb6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68da      	ldr	r2, [r3, #12]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f4c:	611a      	str	r2, [r3, #16]
}
 8002f4e:	bf00      	nop
 8002f50:	3714      	adds	r7, #20
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr

08002f5a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b085      	sub	sp, #20
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002f62:	2300      	movs	r3, #0
 8002f64:	60fb      	str	r3, [r7, #12]
 8002f66:	e048      	b.n	8002ffa <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6919      	ldr	r1, [r3, #16]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4413      	add	r3, r2
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	440b      	add	r3, r1
 8002f78:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	2200      	movs	r2, #0
 8002f84:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	2200      	movs	r2, #0
 8002f96:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002fa4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002fbe:	68b9      	ldr	r1, [r7, #8]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	3212      	adds	r2, #18
 8002fc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d80c      	bhi.n	8002fea <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6919      	ldr	r1, [r3, #16]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	1c5a      	adds	r2, r3, #1
 8002fd8:	4613      	mov	r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	4413      	add	r3, r2
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	440b      	add	r3, r1
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	60da      	str	r2, [r3, #12]
 8002fe8:	e004      	b.n	8002ff4 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	60fb      	str	r3, [r7, #12]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2b03      	cmp	r3, #3
 8002ffe:	d9b3      	bls.n	8002f68 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	691a      	ldr	r2, [r3, #16]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800302a:	60da      	str	r2, [r3, #12]
}
 800302c:	bf00      	nop
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8003038:	b480      	push	{r7}
 800303a:	b091      	sub	sp, #68	; 0x44
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	3318      	adds	r3, #24
 8003048:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8003056:	2300      	movs	r3, #0
 8003058:	637b      	str	r3, [r7, #52]	; 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800305e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003062:	633b      	str	r3, [r7, #48]	; 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t           bd_count = 0;
 800306a:	2300      	movs	r3, #0
 800306c:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800306e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003076:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800307a:	d007      	beq.n	800308c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800307c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800307e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003080:	3304      	adds	r3, #4
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4413      	add	r3, r2
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800308c:	2302      	movs	r3, #2
 800308e:	e111      	b.n	80032b4 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8003090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003092:	3301      	adds	r3, #1
 8003094:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	461a      	mov	r2, r3
 800309c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80030a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	4b86      	ldr	r3, [pc, #536]	; (80032c0 <ETH_Prepare_Tx_Descriptors+0x288>)
 80030a6:	4013      	ands	r3, r2
 80030a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030aa:	6852      	ldr	r2, [r2, #4]
 80030ac:	431a      	orrs	r2, r3
 80030ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b0:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d008      	beq.n	80030d0 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80030be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	431a      	orrs	r2, r3
 80030cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ce:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0320 	and.w	r3, r3, #32
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d008      	beq.n	80030ee <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80030dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	431a      	orrs	r2, r3
 80030ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ec:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0304 	and.w	r3, r3, #4
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d005      	beq.n	8003106 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80030fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003104:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800310e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003110:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003112:	e082      	b.n	800321a <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800311c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800311e:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d006      	beq.n	8003134 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800312e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003130:	601a      	str	r2, [r3, #0]
 8003132:	e005      	b.n	8003140 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800313c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313e:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003142:	3301      	adds	r3, #1
 8003144:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003148:	2b03      	cmp	r3, #3
 800314a:	d902      	bls.n	8003152 <ETH_Prepare_Tx_Descriptors+0x11a>
 800314c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800314e:	3b04      	subs	r3, #4
 8003150:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003154:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800315a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800315c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003164:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003168:	d007      	beq.n	800317a <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800316a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800316c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800316e:	3304      	adds	r3, #4
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	4413      	add	r3, r2
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d029      	beq.n	80031ce <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 800317a:	6a3b      	ldr	r3, [r7, #32]
 800317c:	63fb      	str	r3, [r7, #60]	; 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003180:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003186:	633b      	str	r3, [r7, #48]	; 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003188:	2300      	movs	r3, #0
 800318a:	63bb      	str	r3, [r7, #56]	; 0x38
 800318c:	e019      	b.n	80031c2 <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 800318e:	f3bf 8f5f 	dmb	sy
}
 8003192:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800319c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319e:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80031a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031a2:	3301      	adds	r3, #1
 80031a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031a8:	2b03      	cmp	r3, #3
 80031aa:	d902      	bls.n	80031b2 <ETH_Prepare_Tx_Descriptors+0x17a>
 80031ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ae:	3b04      	subs	r3, #4
 80031b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031ba:	633b      	str	r3, [r7, #48]	; 0x30
      for (idx = 0; idx < descnbr; idx ++)
 80031bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031be:	3301      	adds	r3, #1
 80031c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80031c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d3e1      	bcc.n	800318e <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 80031ca:	2302      	movs	r3, #2
 80031cc:	e072      	b.n	80032b4 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80031ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80031d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d8:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 80031da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031dc:	3301      	adds	r3, #1
 80031de:	637b      	str	r3, [r7, #52]	; 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80031e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80031e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	461a      	mov	r2, r3
 80031ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ee:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80031f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	4b32      	ldr	r3, [pc, #200]	; (80032c0 <ETH_Prepare_Tx_Descriptors+0x288>)
 80031f6:	4013      	ands	r3, r2
 80031f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031fa:	6852      	ldr	r2, [r2, #4]
 80031fc:	431a      	orrs	r2, r3
 80031fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003200:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8003202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003204:	3301      	adds	r3, #1
 8003206:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8003208:	f3bf 8f5f 	dmb	sy
}
 800320c:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800320e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003218:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800321a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	2b00      	cmp	r3, #0
 8003220:	f47f af78 	bne.w	8003114 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d006      	beq.n	8003238 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800322a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003234:	601a      	str	r2, [r3, #0]
 8003236:	e005      	b.n	8003244 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003242:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800324c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324e:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003252:	6a3a      	ldr	r2, [r7, #32]
 8003254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003258:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 800325a:	f3bf 8f5f 	dmb	sy
}
 800325e:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326a:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800326c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003270:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003274:	3304      	adds	r3, #4
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	440b      	add	r3, r1
 800327a:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800327c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003280:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003282:	f3ef 8310 	mrs	r3, PRIMASK
 8003286:	613b      	str	r3, [r7, #16]
  return(result);
 8003288:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 800328a:	61fb      	str	r3, [r7, #28]
 800328c:	2301      	movs	r3, #1
 800328e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	f383 8810 	msr	PRIMASK, r3
}
 8003296:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800329c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329e:	4413      	add	r3, r2
 80032a0:	1c5a      	adds	r2, r3, #1
 80032a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a4:	629a      	str	r2, [r3, #40]	; 0x28
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	f383 8810 	msr	PRIMASK, r3
}
 80032b0:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3744      	adds	r7, #68	; 0x44
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr
 80032c0:	ffffe000 	.word	0xffffe000

080032c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b089      	sub	sp, #36	; 0x24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80032ce:	2300      	movs	r3, #0
 80032d0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80032d2:	2300      	movs	r3, #0
 80032d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80032d6:	2300      	movs	r3, #0
 80032d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80032da:	2300      	movs	r3, #0
 80032dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80032de:	2300      	movs	r3, #0
 80032e0:	61fb      	str	r3, [r7, #28]
 80032e2:	e175      	b.n	80035d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80032e4:	2201      	movs	r2, #1
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	4013      	ands	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	f040 8164 	bne.w	80035ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f003 0303 	and.w	r3, r3, #3
 800330a:	2b01      	cmp	r3, #1
 800330c:	d005      	beq.n	800331a <HAL_GPIO_Init+0x56>
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f003 0303 	and.w	r3, r3, #3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d130      	bne.n	800337c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	2203      	movs	r2, #3
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	43db      	mvns	r3, r3
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	4013      	ands	r3, r2
 8003330:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	68da      	ldr	r2, [r3, #12]
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	fa02 f303 	lsl.w	r3, r2, r3
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	4313      	orrs	r3, r2
 8003342:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003350:	2201      	movs	r2, #1
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	43db      	mvns	r3, r3
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	4013      	ands	r3, r2
 800335e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	091b      	lsrs	r3, r3, #4
 8003366:	f003 0201 	and.w	r2, r3, #1
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	4313      	orrs	r3, r2
 8003374:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f003 0303 	and.w	r3, r3, #3
 8003384:	2b03      	cmp	r3, #3
 8003386:	d017      	beq.n	80033b8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	2203      	movs	r2, #3
 8003394:	fa02 f303 	lsl.w	r3, r2, r3
 8003398:	43db      	mvns	r3, r3
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	4013      	ands	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f003 0303 	and.w	r3, r3, #3
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d123      	bne.n	800340c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	08da      	lsrs	r2, r3, #3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	3208      	adds	r2, #8
 80033cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	f003 0307 	and.w	r3, r3, #7
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	220f      	movs	r2, #15
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	43db      	mvns	r3, r3
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	4013      	ands	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	691a      	ldr	r2, [r3, #16]
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	f003 0307 	and.w	r3, r3, #7
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	08da      	lsrs	r2, r3, #3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	3208      	adds	r2, #8
 8003406:	69b9      	ldr	r1, [r7, #24]
 8003408:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	2203      	movs	r2, #3
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	43db      	mvns	r3, r3
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	4013      	ands	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f003 0203 	and.w	r2, r3, #3
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	4313      	orrs	r3, r2
 8003438:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003448:	2b00      	cmp	r3, #0
 800344a:	f000 80be 	beq.w	80035ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800344e:	4b66      	ldr	r3, [pc, #408]	; (80035e8 <HAL_GPIO_Init+0x324>)
 8003450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003452:	4a65      	ldr	r2, [pc, #404]	; (80035e8 <HAL_GPIO_Init+0x324>)
 8003454:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003458:	6453      	str	r3, [r2, #68]	; 0x44
 800345a:	4b63      	ldr	r3, [pc, #396]	; (80035e8 <HAL_GPIO_Init+0x324>)
 800345c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003466:	4a61      	ldr	r2, [pc, #388]	; (80035ec <HAL_GPIO_Init+0x328>)
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	089b      	lsrs	r3, r3, #2
 800346c:	3302      	adds	r3, #2
 800346e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003472:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	f003 0303 	and.w	r3, r3, #3
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	220f      	movs	r2, #15
 800347e:	fa02 f303 	lsl.w	r3, r2, r3
 8003482:	43db      	mvns	r3, r3
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	4013      	ands	r3, r2
 8003488:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a58      	ldr	r2, [pc, #352]	; (80035f0 <HAL_GPIO_Init+0x32c>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d037      	beq.n	8003502 <HAL_GPIO_Init+0x23e>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a57      	ldr	r2, [pc, #348]	; (80035f4 <HAL_GPIO_Init+0x330>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d031      	beq.n	80034fe <HAL_GPIO_Init+0x23a>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a56      	ldr	r2, [pc, #344]	; (80035f8 <HAL_GPIO_Init+0x334>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d02b      	beq.n	80034fa <HAL_GPIO_Init+0x236>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a55      	ldr	r2, [pc, #340]	; (80035fc <HAL_GPIO_Init+0x338>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d025      	beq.n	80034f6 <HAL_GPIO_Init+0x232>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a54      	ldr	r2, [pc, #336]	; (8003600 <HAL_GPIO_Init+0x33c>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d01f      	beq.n	80034f2 <HAL_GPIO_Init+0x22e>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a53      	ldr	r2, [pc, #332]	; (8003604 <HAL_GPIO_Init+0x340>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d019      	beq.n	80034ee <HAL_GPIO_Init+0x22a>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a52      	ldr	r2, [pc, #328]	; (8003608 <HAL_GPIO_Init+0x344>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d013      	beq.n	80034ea <HAL_GPIO_Init+0x226>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a51      	ldr	r2, [pc, #324]	; (800360c <HAL_GPIO_Init+0x348>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d00d      	beq.n	80034e6 <HAL_GPIO_Init+0x222>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a50      	ldr	r2, [pc, #320]	; (8003610 <HAL_GPIO_Init+0x34c>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d007      	beq.n	80034e2 <HAL_GPIO_Init+0x21e>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a4f      	ldr	r2, [pc, #316]	; (8003614 <HAL_GPIO_Init+0x350>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d101      	bne.n	80034de <HAL_GPIO_Init+0x21a>
 80034da:	2309      	movs	r3, #9
 80034dc:	e012      	b.n	8003504 <HAL_GPIO_Init+0x240>
 80034de:	230a      	movs	r3, #10
 80034e0:	e010      	b.n	8003504 <HAL_GPIO_Init+0x240>
 80034e2:	2308      	movs	r3, #8
 80034e4:	e00e      	b.n	8003504 <HAL_GPIO_Init+0x240>
 80034e6:	2307      	movs	r3, #7
 80034e8:	e00c      	b.n	8003504 <HAL_GPIO_Init+0x240>
 80034ea:	2306      	movs	r3, #6
 80034ec:	e00a      	b.n	8003504 <HAL_GPIO_Init+0x240>
 80034ee:	2305      	movs	r3, #5
 80034f0:	e008      	b.n	8003504 <HAL_GPIO_Init+0x240>
 80034f2:	2304      	movs	r3, #4
 80034f4:	e006      	b.n	8003504 <HAL_GPIO_Init+0x240>
 80034f6:	2303      	movs	r3, #3
 80034f8:	e004      	b.n	8003504 <HAL_GPIO_Init+0x240>
 80034fa:	2302      	movs	r3, #2
 80034fc:	e002      	b.n	8003504 <HAL_GPIO_Init+0x240>
 80034fe:	2301      	movs	r3, #1
 8003500:	e000      	b.n	8003504 <HAL_GPIO_Init+0x240>
 8003502:	2300      	movs	r3, #0
 8003504:	69fa      	ldr	r2, [r7, #28]
 8003506:	f002 0203 	and.w	r2, r2, #3
 800350a:	0092      	lsls	r2, r2, #2
 800350c:	4093      	lsls	r3, r2
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	4313      	orrs	r3, r2
 8003512:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003514:	4935      	ldr	r1, [pc, #212]	; (80035ec <HAL_GPIO_Init+0x328>)
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	089b      	lsrs	r3, r3, #2
 800351a:	3302      	adds	r3, #2
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003522:	4b3d      	ldr	r3, [pc, #244]	; (8003618 <HAL_GPIO_Init+0x354>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	43db      	mvns	r3, r3
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	4013      	ands	r3, r2
 8003530:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d003      	beq.n	8003546 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	4313      	orrs	r3, r2
 8003544:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003546:	4a34      	ldr	r2, [pc, #208]	; (8003618 <HAL_GPIO_Init+0x354>)
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800354c:	4b32      	ldr	r3, [pc, #200]	; (8003618 <HAL_GPIO_Init+0x354>)
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	43db      	mvns	r3, r3
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	4013      	ands	r3, r2
 800355a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d003      	beq.n	8003570 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	4313      	orrs	r3, r2
 800356e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003570:	4a29      	ldr	r2, [pc, #164]	; (8003618 <HAL_GPIO_Init+0x354>)
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003576:	4b28      	ldr	r3, [pc, #160]	; (8003618 <HAL_GPIO_Init+0x354>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	43db      	mvns	r3, r3
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	4013      	ands	r3, r2
 8003584:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d003      	beq.n	800359a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003592:	69ba      	ldr	r2, [r7, #24]
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	4313      	orrs	r3, r2
 8003598:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800359a:	4a1f      	ldr	r2, [pc, #124]	; (8003618 <HAL_GPIO_Init+0x354>)
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035a0:	4b1d      	ldr	r3, [pc, #116]	; (8003618 <HAL_GPIO_Init+0x354>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	43db      	mvns	r3, r3
 80035aa:	69ba      	ldr	r2, [r7, #24]
 80035ac:	4013      	ands	r3, r2
 80035ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d003      	beq.n	80035c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035c4:	4a14      	ldr	r2, [pc, #80]	; (8003618 <HAL_GPIO_Init+0x354>)
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	3301      	adds	r3, #1
 80035ce:	61fb      	str	r3, [r7, #28]
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	2b0f      	cmp	r3, #15
 80035d4:	f67f ae86 	bls.w	80032e4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80035d8:	bf00      	nop
 80035da:	bf00      	nop
 80035dc:	3724      	adds	r7, #36	; 0x24
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	40023800 	.word	0x40023800
 80035ec:	40013800 	.word	0x40013800
 80035f0:	40020000 	.word	0x40020000
 80035f4:	40020400 	.word	0x40020400
 80035f8:	40020800 	.word	0x40020800
 80035fc:	40020c00 	.word	0x40020c00
 8003600:	40021000 	.word	0x40021000
 8003604:	40021400 	.word	0x40021400
 8003608:	40021800 	.word	0x40021800
 800360c:	40021c00 	.word	0x40021c00
 8003610:	40022000 	.word	0x40022000
 8003614:	40022400 	.word	0x40022400
 8003618:	40013c00 	.word	0x40013c00

0800361c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	460b      	mov	r3, r1
 8003626:	807b      	strh	r3, [r7, #2]
 8003628:	4613      	mov	r3, r2
 800362a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800362c:	787b      	ldrb	r3, [r7, #1]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003632:	887a      	ldrh	r2, [r7, #2]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003638:	e003      	b.n	8003642 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800363a:	887b      	ldrh	r3, [r7, #2]
 800363c:	041a      	lsls	r2, r3, #16
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	619a      	str	r2, [r3, #24]
}
 8003642:	bf00      	nop
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800364e:	b480      	push	{r7}
 8003650:	b085      	sub	sp, #20
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
 8003656:	460b      	mov	r3, r1
 8003658:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003660:	887a      	ldrh	r2, [r7, #2]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	4013      	ands	r3, r2
 8003666:	041a      	lsls	r2, r3, #16
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	43d9      	mvns	r1, r3
 800366c:	887b      	ldrh	r3, [r7, #2]
 800366e:	400b      	ands	r3, r1
 8003670:	431a      	orrs	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	619a      	str	r2, [r3, #24]
}
 8003676:	bf00      	nop
 8003678:	3714      	adds	r7, #20
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
	...

08003684 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800368a:	2300      	movs	r3, #0
 800368c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800368e:	4b23      	ldr	r3, [pc, #140]	; (800371c <HAL_PWREx_EnableOverDrive+0x98>)
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	4a22      	ldr	r2, [pc, #136]	; (800371c <HAL_PWREx_EnableOverDrive+0x98>)
 8003694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003698:	6413      	str	r3, [r2, #64]	; 0x40
 800369a:	4b20      	ldr	r3, [pc, #128]	; (800371c <HAL_PWREx_EnableOverDrive+0x98>)
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a2:	603b      	str	r3, [r7, #0]
 80036a4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80036a6:	4b1e      	ldr	r3, [pc, #120]	; (8003720 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a1d      	ldr	r2, [pc, #116]	; (8003720 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036b0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036b2:	f7fe fa37 	bl	8001b24 <HAL_GetTick>
 80036b6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80036b8:	e009      	b.n	80036ce <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80036ba:	f7fe fa33 	bl	8001b24 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036c8:	d901      	bls.n	80036ce <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e022      	b.n	8003714 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80036ce:	4b14      	ldr	r3, [pc, #80]	; (8003720 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036da:	d1ee      	bne.n	80036ba <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80036dc:	4b10      	ldr	r3, [pc, #64]	; (8003720 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a0f      	ldr	r2, [pc, #60]	; (8003720 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036e6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036e8:	f7fe fa1c 	bl	8001b24 <HAL_GetTick>
 80036ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80036ee:	e009      	b.n	8003704 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80036f0:	f7fe fa18 	bl	8001b24 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036fe:	d901      	bls.n	8003704 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e007      	b.n	8003714 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003704:	4b06      	ldr	r3, [pc, #24]	; (8003720 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800370c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003710:	d1ee      	bne.n	80036f0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3708      	adds	r7, #8
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40023800 	.word	0x40023800
 8003720:	40007000 	.word	0x40007000

08003724 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b086      	sub	sp, #24
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800372c:	2300      	movs	r3, #0
 800372e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e29b      	b.n	8003c72 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b00      	cmp	r3, #0
 8003744:	f000 8087 	beq.w	8003856 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003748:	4b96      	ldr	r3, [pc, #600]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f003 030c 	and.w	r3, r3, #12
 8003750:	2b04      	cmp	r3, #4
 8003752:	d00c      	beq.n	800376e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003754:	4b93      	ldr	r3, [pc, #588]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f003 030c 	and.w	r3, r3, #12
 800375c:	2b08      	cmp	r3, #8
 800375e:	d112      	bne.n	8003786 <HAL_RCC_OscConfig+0x62>
 8003760:	4b90      	ldr	r3, [pc, #576]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003768:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800376c:	d10b      	bne.n	8003786 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800376e:	4b8d      	ldr	r3, [pc, #564]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d06c      	beq.n	8003854 <HAL_RCC_OscConfig+0x130>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d168      	bne.n	8003854 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e275      	b.n	8003c72 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800378e:	d106      	bne.n	800379e <HAL_RCC_OscConfig+0x7a>
 8003790:	4b84      	ldr	r3, [pc, #528]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a83      	ldr	r2, [pc, #524]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 8003796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800379a:	6013      	str	r3, [r2, #0]
 800379c:	e02e      	b.n	80037fc <HAL_RCC_OscConfig+0xd8>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10c      	bne.n	80037c0 <HAL_RCC_OscConfig+0x9c>
 80037a6:	4b7f      	ldr	r3, [pc, #508]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a7e      	ldr	r2, [pc, #504]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 80037ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037b0:	6013      	str	r3, [r2, #0]
 80037b2:	4b7c      	ldr	r3, [pc, #496]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a7b      	ldr	r2, [pc, #492]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 80037b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037bc:	6013      	str	r3, [r2, #0]
 80037be:	e01d      	b.n	80037fc <HAL_RCC_OscConfig+0xd8>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037c8:	d10c      	bne.n	80037e4 <HAL_RCC_OscConfig+0xc0>
 80037ca:	4b76      	ldr	r3, [pc, #472]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a75      	ldr	r2, [pc, #468]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 80037d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037d4:	6013      	str	r3, [r2, #0]
 80037d6:	4b73      	ldr	r3, [pc, #460]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a72      	ldr	r2, [pc, #456]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 80037dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037e0:	6013      	str	r3, [r2, #0]
 80037e2:	e00b      	b.n	80037fc <HAL_RCC_OscConfig+0xd8>
 80037e4:	4b6f      	ldr	r3, [pc, #444]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a6e      	ldr	r2, [pc, #440]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 80037ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ee:	6013      	str	r3, [r2, #0]
 80037f0:	4b6c      	ldr	r3, [pc, #432]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a6b      	ldr	r2, [pc, #428]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 80037f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d013      	beq.n	800382c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003804:	f7fe f98e 	bl	8001b24 <HAL_GetTick>
 8003808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800380a:	e008      	b.n	800381e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800380c:	f7fe f98a 	bl	8001b24 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b64      	cmp	r3, #100	; 0x64
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e229      	b.n	8003c72 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800381e:	4b61      	ldr	r3, [pc, #388]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0f0      	beq.n	800380c <HAL_RCC_OscConfig+0xe8>
 800382a:	e014      	b.n	8003856 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800382c:	f7fe f97a 	bl	8001b24 <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003832:	e008      	b.n	8003846 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003834:	f7fe f976 	bl	8001b24 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b64      	cmp	r3, #100	; 0x64
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e215      	b.n	8003c72 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003846:	4b57      	ldr	r3, [pc, #348]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1f0      	bne.n	8003834 <HAL_RCC_OscConfig+0x110>
 8003852:	e000      	b.n	8003856 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003854:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d069      	beq.n	8003936 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003862:	4b50      	ldr	r3, [pc, #320]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f003 030c 	and.w	r3, r3, #12
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00b      	beq.n	8003886 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800386e:	4b4d      	ldr	r3, [pc, #308]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f003 030c 	and.w	r3, r3, #12
 8003876:	2b08      	cmp	r3, #8
 8003878:	d11c      	bne.n	80038b4 <HAL_RCC_OscConfig+0x190>
 800387a:	4b4a      	ldr	r3, [pc, #296]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d116      	bne.n	80038b4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003886:	4b47      	ldr	r3, [pc, #284]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d005      	beq.n	800389e <HAL_RCC_OscConfig+0x17a>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d001      	beq.n	800389e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e1e9      	b.n	8003c72 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800389e:	4b41      	ldr	r3, [pc, #260]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	493d      	ldr	r1, [pc, #244]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038b2:	e040      	b.n	8003936 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d023      	beq.n	8003904 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038bc:	4b39      	ldr	r3, [pc, #228]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a38      	ldr	r2, [pc, #224]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 80038c2:	f043 0301 	orr.w	r3, r3, #1
 80038c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c8:	f7fe f92c 	bl	8001b24 <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038d0:	f7fe f928 	bl	8001b24 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e1c7      	b.n	8003c72 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038e2:	4b30      	ldr	r3, [pc, #192]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d0f0      	beq.n	80038d0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ee:	4b2d      	ldr	r3, [pc, #180]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	4929      	ldr	r1, [pc, #164]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	600b      	str	r3, [r1, #0]
 8003902:	e018      	b.n	8003936 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003904:	4b27      	ldr	r3, [pc, #156]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a26      	ldr	r2, [pc, #152]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 800390a:	f023 0301 	bic.w	r3, r3, #1
 800390e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003910:	f7fe f908 	bl	8001b24 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003918:	f7fe f904 	bl	8001b24 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e1a3      	b.n	8003c72 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800392a:	4b1e      	ldr	r3, [pc, #120]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1f0      	bne.n	8003918 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0308 	and.w	r3, r3, #8
 800393e:	2b00      	cmp	r3, #0
 8003940:	d038      	beq.n	80039b4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d019      	beq.n	800397e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800394a:	4b16      	ldr	r3, [pc, #88]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 800394c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800394e:	4a15      	ldr	r2, [pc, #84]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 8003950:	f043 0301 	orr.w	r3, r3, #1
 8003954:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003956:	f7fe f8e5 	bl	8001b24 <HAL_GetTick>
 800395a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800395c:	e008      	b.n	8003970 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800395e:	f7fe f8e1 	bl	8001b24 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	2b02      	cmp	r3, #2
 800396a:	d901      	bls.n	8003970 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e180      	b.n	8003c72 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003970:	4b0c      	ldr	r3, [pc, #48]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 8003972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d0f0      	beq.n	800395e <HAL_RCC_OscConfig+0x23a>
 800397c:	e01a      	b.n	80039b4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800397e:	4b09      	ldr	r3, [pc, #36]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 8003980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003982:	4a08      	ldr	r2, [pc, #32]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 8003984:	f023 0301 	bic.w	r3, r3, #1
 8003988:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800398a:	f7fe f8cb 	bl	8001b24 <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003990:	e00a      	b.n	80039a8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003992:	f7fe f8c7 	bl	8001b24 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d903      	bls.n	80039a8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e166      	b.n	8003c72 <HAL_RCC_OscConfig+0x54e>
 80039a4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039a8:	4b92      	ldr	r3, [pc, #584]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 80039aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1ee      	bne.n	8003992 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0304 	and.w	r3, r3, #4
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f000 80a4 	beq.w	8003b0a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039c2:	4b8c      	ldr	r3, [pc, #560]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 80039c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10d      	bne.n	80039ea <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80039ce:	4b89      	ldr	r3, [pc, #548]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 80039d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d2:	4a88      	ldr	r2, [pc, #544]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 80039d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039d8:	6413      	str	r3, [r2, #64]	; 0x40
 80039da:	4b86      	ldr	r3, [pc, #536]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 80039dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e2:	60bb      	str	r3, [r7, #8]
 80039e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039e6:	2301      	movs	r3, #1
 80039e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039ea:	4b83      	ldr	r3, [pc, #524]	; (8003bf8 <HAL_RCC_OscConfig+0x4d4>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d118      	bne.n	8003a28 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80039f6:	4b80      	ldr	r3, [pc, #512]	; (8003bf8 <HAL_RCC_OscConfig+0x4d4>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a7f      	ldr	r2, [pc, #508]	; (8003bf8 <HAL_RCC_OscConfig+0x4d4>)
 80039fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a02:	f7fe f88f 	bl	8001b24 <HAL_GetTick>
 8003a06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a08:	e008      	b.n	8003a1c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a0a:	f7fe f88b 	bl	8001b24 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b64      	cmp	r3, #100	; 0x64
 8003a16:	d901      	bls.n	8003a1c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e12a      	b.n	8003c72 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a1c:	4b76      	ldr	r3, [pc, #472]	; (8003bf8 <HAL_RCC_OscConfig+0x4d4>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d0f0      	beq.n	8003a0a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d106      	bne.n	8003a3e <HAL_RCC_OscConfig+0x31a>
 8003a30:	4b70      	ldr	r3, [pc, #448]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a34:	4a6f      	ldr	r2, [pc, #444]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003a36:	f043 0301 	orr.w	r3, r3, #1
 8003a3a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a3c:	e02d      	b.n	8003a9a <HAL_RCC_OscConfig+0x376>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10c      	bne.n	8003a60 <HAL_RCC_OscConfig+0x33c>
 8003a46:	4b6b      	ldr	r3, [pc, #428]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4a:	4a6a      	ldr	r2, [pc, #424]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003a4c:	f023 0301 	bic.w	r3, r3, #1
 8003a50:	6713      	str	r3, [r2, #112]	; 0x70
 8003a52:	4b68      	ldr	r3, [pc, #416]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a56:	4a67      	ldr	r2, [pc, #412]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003a58:	f023 0304 	bic.w	r3, r3, #4
 8003a5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a5e:	e01c      	b.n	8003a9a <HAL_RCC_OscConfig+0x376>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	2b05      	cmp	r3, #5
 8003a66:	d10c      	bne.n	8003a82 <HAL_RCC_OscConfig+0x35e>
 8003a68:	4b62      	ldr	r3, [pc, #392]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a6c:	4a61      	ldr	r2, [pc, #388]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003a6e:	f043 0304 	orr.w	r3, r3, #4
 8003a72:	6713      	str	r3, [r2, #112]	; 0x70
 8003a74:	4b5f      	ldr	r3, [pc, #380]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a78:	4a5e      	ldr	r2, [pc, #376]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003a7a:	f043 0301 	orr.w	r3, r3, #1
 8003a7e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a80:	e00b      	b.n	8003a9a <HAL_RCC_OscConfig+0x376>
 8003a82:	4b5c      	ldr	r3, [pc, #368]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a86:	4a5b      	ldr	r2, [pc, #364]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003a88:	f023 0301 	bic.w	r3, r3, #1
 8003a8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a8e:	4b59      	ldr	r3, [pc, #356]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a92:	4a58      	ldr	r2, [pc, #352]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003a94:	f023 0304 	bic.w	r3, r3, #4
 8003a98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d015      	beq.n	8003ace <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa2:	f7fe f83f 	bl	8001b24 <HAL_GetTick>
 8003aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aa8:	e00a      	b.n	8003ac0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aaa:	f7fe f83b 	bl	8001b24 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d901      	bls.n	8003ac0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e0d8      	b.n	8003c72 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ac0:	4b4c      	ldr	r3, [pc, #304]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d0ee      	beq.n	8003aaa <HAL_RCC_OscConfig+0x386>
 8003acc:	e014      	b.n	8003af8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ace:	f7fe f829 	bl	8001b24 <HAL_GetTick>
 8003ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ad4:	e00a      	b.n	8003aec <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ad6:	f7fe f825 	bl	8001b24 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d901      	bls.n	8003aec <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e0c2      	b.n	8003c72 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aec:	4b41      	ldr	r3, [pc, #260]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1ee      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003af8:	7dfb      	ldrb	r3, [r7, #23]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d105      	bne.n	8003b0a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003afe:	4b3d      	ldr	r3, [pc, #244]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b02:	4a3c      	ldr	r2, [pc, #240]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003b04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 80ae 	beq.w	8003c70 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b14:	4b37      	ldr	r3, [pc, #220]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f003 030c 	and.w	r3, r3, #12
 8003b1c:	2b08      	cmp	r3, #8
 8003b1e:	d06d      	beq.n	8003bfc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d14b      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b28:	4b32      	ldr	r3, [pc, #200]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a31      	ldr	r2, [pc, #196]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003b2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b34:	f7fd fff6 	bl	8001b24 <HAL_GetTick>
 8003b38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b3a:	e008      	b.n	8003b4e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b3c:	f7fd fff2 	bl	8001b24 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e091      	b.n	8003c72 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b4e:	4b29      	ldr	r3, [pc, #164]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1f0      	bne.n	8003b3c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	69da      	ldr	r2, [r3, #28]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	431a      	orrs	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	019b      	lsls	r3, r3, #6
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b70:	085b      	lsrs	r3, r3, #1
 8003b72:	3b01      	subs	r3, #1
 8003b74:	041b      	lsls	r3, r3, #16
 8003b76:	431a      	orrs	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7c:	061b      	lsls	r3, r3, #24
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b84:	071b      	lsls	r3, r3, #28
 8003b86:	491b      	ldr	r1, [pc, #108]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b8c:	4b19      	ldr	r3, [pc, #100]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a18      	ldr	r2, [pc, #96]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003b92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b98:	f7fd ffc4 	bl	8001b24 <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ba0:	f7fd ffc0 	bl	8001b24 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e05f      	b.n	8003c72 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bb2:	4b10      	ldr	r3, [pc, #64]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0f0      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x47c>
 8003bbe:	e057      	b.n	8003c70 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc0:	4b0c      	ldr	r3, [pc, #48]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a0b      	ldr	r2, [pc, #44]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003bc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bcc:	f7fd ffaa 	bl	8001b24 <HAL_GetTick>
 8003bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bd2:	e008      	b.n	8003be6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bd4:	f7fd ffa6 	bl	8001b24 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e045      	b.n	8003c72 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003be6:	4b03      	ldr	r3, [pc, #12]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1f0      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x4b0>
 8003bf2:	e03d      	b.n	8003c70 <HAL_RCC_OscConfig+0x54c>
 8003bf4:	40023800 	.word	0x40023800
 8003bf8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003bfc:	4b1f      	ldr	r3, [pc, #124]	; (8003c7c <HAL_RCC_OscConfig+0x558>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d030      	beq.n	8003c6c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d129      	bne.n	8003c6c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d122      	bne.n	8003c6c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c32:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d119      	bne.n	8003c6c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c42:	085b      	lsrs	r3, r3, #1
 8003c44:	3b01      	subs	r3, #1
 8003c46:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d10f      	bne.n	8003c6c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c56:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d107      	bne.n	8003c6c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c66:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d001      	beq.n	8003c70 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e000      	b.n	8003c72 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3718      	adds	r7, #24
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	40023800 	.word	0x40023800

08003c80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d101      	bne.n	8003c98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e0d0      	b.n	8003e3a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c98:	4b6a      	ldr	r3, [pc, #424]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 030f 	and.w	r3, r3, #15
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d910      	bls.n	8003cc8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ca6:	4b67      	ldr	r3, [pc, #412]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f023 020f 	bic.w	r2, r3, #15
 8003cae:	4965      	ldr	r1, [pc, #404]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cb6:	4b63      	ldr	r3, [pc, #396]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 030f 	and.w	r3, r3, #15
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d001      	beq.n	8003cc8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e0b8      	b.n	8003e3a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d020      	beq.n	8003d16 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0304 	and.w	r3, r3, #4
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d005      	beq.n	8003cec <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ce0:	4b59      	ldr	r3, [pc, #356]	; (8003e48 <HAL_RCC_ClockConfig+0x1c8>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	4a58      	ldr	r2, [pc, #352]	; (8003e48 <HAL_RCC_ClockConfig+0x1c8>)
 8003ce6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0308 	and.w	r3, r3, #8
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d005      	beq.n	8003d04 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cf8:	4b53      	ldr	r3, [pc, #332]	; (8003e48 <HAL_RCC_ClockConfig+0x1c8>)
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	4a52      	ldr	r2, [pc, #328]	; (8003e48 <HAL_RCC_ClockConfig+0x1c8>)
 8003cfe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d02:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d04:	4b50      	ldr	r3, [pc, #320]	; (8003e48 <HAL_RCC_ClockConfig+0x1c8>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	494d      	ldr	r1, [pc, #308]	; (8003e48 <HAL_RCC_ClockConfig+0x1c8>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d040      	beq.n	8003da4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d107      	bne.n	8003d3a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d2a:	4b47      	ldr	r3, [pc, #284]	; (8003e48 <HAL_RCC_ClockConfig+0x1c8>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d115      	bne.n	8003d62 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e07f      	b.n	8003e3a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d107      	bne.n	8003d52 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d42:	4b41      	ldr	r3, [pc, #260]	; (8003e48 <HAL_RCC_ClockConfig+0x1c8>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d109      	bne.n	8003d62 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e073      	b.n	8003e3a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d52:	4b3d      	ldr	r3, [pc, #244]	; (8003e48 <HAL_RCC_ClockConfig+0x1c8>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e06b      	b.n	8003e3a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d62:	4b39      	ldr	r3, [pc, #228]	; (8003e48 <HAL_RCC_ClockConfig+0x1c8>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f023 0203 	bic.w	r2, r3, #3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	4936      	ldr	r1, [pc, #216]	; (8003e48 <HAL_RCC_ClockConfig+0x1c8>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d74:	f7fd fed6 	bl	8001b24 <HAL_GetTick>
 8003d78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d7a:	e00a      	b.n	8003d92 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d7c:	f7fd fed2 	bl	8001b24 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e053      	b.n	8003e3a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d92:	4b2d      	ldr	r3, [pc, #180]	; (8003e48 <HAL_RCC_ClockConfig+0x1c8>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f003 020c 	and.w	r2, r3, #12
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d1eb      	bne.n	8003d7c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003da4:	4b27      	ldr	r3, [pc, #156]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 030f 	and.w	r3, r3, #15
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d210      	bcs.n	8003dd4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003db2:	4b24      	ldr	r3, [pc, #144]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f023 020f 	bic.w	r2, r3, #15
 8003dba:	4922      	ldr	r1, [pc, #136]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dc2:	4b20      	ldr	r3, [pc, #128]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 030f 	and.w	r3, r3, #15
 8003dca:	683a      	ldr	r2, [r7, #0]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d001      	beq.n	8003dd4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e032      	b.n	8003e3a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0304 	and.w	r3, r3, #4
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d008      	beq.n	8003df2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003de0:	4b19      	ldr	r3, [pc, #100]	; (8003e48 <HAL_RCC_ClockConfig+0x1c8>)
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	4916      	ldr	r1, [pc, #88]	; (8003e48 <HAL_RCC_ClockConfig+0x1c8>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0308 	and.w	r3, r3, #8
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d009      	beq.n	8003e12 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003dfe:	4b12      	ldr	r3, [pc, #72]	; (8003e48 <HAL_RCC_ClockConfig+0x1c8>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	00db      	lsls	r3, r3, #3
 8003e0c:	490e      	ldr	r1, [pc, #56]	; (8003e48 <HAL_RCC_ClockConfig+0x1c8>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e12:	f000 f821 	bl	8003e58 <HAL_RCC_GetSysClockFreq>
 8003e16:	4602      	mov	r2, r0
 8003e18:	4b0b      	ldr	r3, [pc, #44]	; (8003e48 <HAL_RCC_ClockConfig+0x1c8>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	091b      	lsrs	r3, r3, #4
 8003e1e:	f003 030f 	and.w	r3, r3, #15
 8003e22:	490a      	ldr	r1, [pc, #40]	; (8003e4c <HAL_RCC_ClockConfig+0x1cc>)
 8003e24:	5ccb      	ldrb	r3, [r1, r3]
 8003e26:	fa22 f303 	lsr.w	r3, r2, r3
 8003e2a:	4a09      	ldr	r2, [pc, #36]	; (8003e50 <HAL_RCC_ClockConfig+0x1d0>)
 8003e2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e2e:	4b09      	ldr	r3, [pc, #36]	; (8003e54 <HAL_RCC_ClockConfig+0x1d4>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7fd fe32 	bl	8001a9c <HAL_InitTick>

  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3710      	adds	r7, #16
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	40023c00 	.word	0x40023c00
 8003e48:	40023800 	.word	0x40023800
 8003e4c:	08016684 	.word	0x08016684
 8003e50:	20000000 	.word	0x20000000
 8003e54:	20000004 	.word	0x20000004

08003e58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e5c:	b094      	sub	sp, #80	; 0x50
 8003e5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003e60:	2300      	movs	r3, #0
 8003e62:	647b      	str	r3, [r7, #68]	; 0x44
 8003e64:	2300      	movs	r3, #0
 8003e66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e68:	2300      	movs	r3, #0
 8003e6a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e70:	4b79      	ldr	r3, [pc, #484]	; (8004058 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f003 030c 	and.w	r3, r3, #12
 8003e78:	2b08      	cmp	r3, #8
 8003e7a:	d00d      	beq.n	8003e98 <HAL_RCC_GetSysClockFreq+0x40>
 8003e7c:	2b08      	cmp	r3, #8
 8003e7e:	f200 80e1 	bhi.w	8004044 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d002      	beq.n	8003e8c <HAL_RCC_GetSysClockFreq+0x34>
 8003e86:	2b04      	cmp	r3, #4
 8003e88:	d003      	beq.n	8003e92 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e8a:	e0db      	b.n	8004044 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e8c:	4b73      	ldr	r3, [pc, #460]	; (800405c <HAL_RCC_GetSysClockFreq+0x204>)
 8003e8e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e90:	e0db      	b.n	800404a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e92:	4b72      	ldr	r3, [pc, #456]	; (800405c <HAL_RCC_GetSysClockFreq+0x204>)
 8003e94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e96:	e0d8      	b.n	800404a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e98:	4b6f      	ldr	r3, [pc, #444]	; (8004058 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ea0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003ea2:	4b6d      	ldr	r3, [pc, #436]	; (8004058 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d063      	beq.n	8003f76 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eae:	4b6a      	ldr	r3, [pc, #424]	; (8004058 <HAL_RCC_GetSysClockFreq+0x200>)
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	099b      	lsrs	r3, r3, #6
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003eb8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ec0:	633b      	str	r3, [r7, #48]	; 0x30
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	637b      	str	r3, [r7, #52]	; 0x34
 8003ec6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003eca:	4622      	mov	r2, r4
 8003ecc:	462b      	mov	r3, r5
 8003ece:	f04f 0000 	mov.w	r0, #0
 8003ed2:	f04f 0100 	mov.w	r1, #0
 8003ed6:	0159      	lsls	r1, r3, #5
 8003ed8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003edc:	0150      	lsls	r0, r2, #5
 8003ede:	4602      	mov	r2, r0
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	4621      	mov	r1, r4
 8003ee4:	1a51      	subs	r1, r2, r1
 8003ee6:	6139      	str	r1, [r7, #16]
 8003ee8:	4629      	mov	r1, r5
 8003eea:	eb63 0301 	sbc.w	r3, r3, r1
 8003eee:	617b      	str	r3, [r7, #20]
 8003ef0:	f04f 0200 	mov.w	r2, #0
 8003ef4:	f04f 0300 	mov.w	r3, #0
 8003ef8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003efc:	4659      	mov	r1, fp
 8003efe:	018b      	lsls	r3, r1, #6
 8003f00:	4651      	mov	r1, sl
 8003f02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f06:	4651      	mov	r1, sl
 8003f08:	018a      	lsls	r2, r1, #6
 8003f0a:	4651      	mov	r1, sl
 8003f0c:	ebb2 0801 	subs.w	r8, r2, r1
 8003f10:	4659      	mov	r1, fp
 8003f12:	eb63 0901 	sbc.w	r9, r3, r1
 8003f16:	f04f 0200 	mov.w	r2, #0
 8003f1a:	f04f 0300 	mov.w	r3, #0
 8003f1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f2a:	4690      	mov	r8, r2
 8003f2c:	4699      	mov	r9, r3
 8003f2e:	4623      	mov	r3, r4
 8003f30:	eb18 0303 	adds.w	r3, r8, r3
 8003f34:	60bb      	str	r3, [r7, #8]
 8003f36:	462b      	mov	r3, r5
 8003f38:	eb49 0303 	adc.w	r3, r9, r3
 8003f3c:	60fb      	str	r3, [r7, #12]
 8003f3e:	f04f 0200 	mov.w	r2, #0
 8003f42:	f04f 0300 	mov.w	r3, #0
 8003f46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f4a:	4629      	mov	r1, r5
 8003f4c:	028b      	lsls	r3, r1, #10
 8003f4e:	4621      	mov	r1, r4
 8003f50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f54:	4621      	mov	r1, r4
 8003f56:	028a      	lsls	r2, r1, #10
 8003f58:	4610      	mov	r0, r2
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f5e:	2200      	movs	r2, #0
 8003f60:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f68:	f7fc fb76 	bl	8000658 <__aeabi_uldivmod>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	460b      	mov	r3, r1
 8003f70:	4613      	mov	r3, r2
 8003f72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f74:	e058      	b.n	8004028 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f76:	4b38      	ldr	r3, [pc, #224]	; (8004058 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	099b      	lsrs	r3, r3, #6
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	4618      	mov	r0, r3
 8003f80:	4611      	mov	r1, r2
 8003f82:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f86:	623b      	str	r3, [r7, #32]
 8003f88:	2300      	movs	r3, #0
 8003f8a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f90:	4642      	mov	r2, r8
 8003f92:	464b      	mov	r3, r9
 8003f94:	f04f 0000 	mov.w	r0, #0
 8003f98:	f04f 0100 	mov.w	r1, #0
 8003f9c:	0159      	lsls	r1, r3, #5
 8003f9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fa2:	0150      	lsls	r0, r2, #5
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	4641      	mov	r1, r8
 8003faa:	ebb2 0a01 	subs.w	sl, r2, r1
 8003fae:	4649      	mov	r1, r9
 8003fb0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003fb4:	f04f 0200 	mov.w	r2, #0
 8003fb8:	f04f 0300 	mov.w	r3, #0
 8003fbc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003fc0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003fc4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003fc8:	ebb2 040a 	subs.w	r4, r2, sl
 8003fcc:	eb63 050b 	sbc.w	r5, r3, fp
 8003fd0:	f04f 0200 	mov.w	r2, #0
 8003fd4:	f04f 0300 	mov.w	r3, #0
 8003fd8:	00eb      	lsls	r3, r5, #3
 8003fda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fde:	00e2      	lsls	r2, r4, #3
 8003fe0:	4614      	mov	r4, r2
 8003fe2:	461d      	mov	r5, r3
 8003fe4:	4643      	mov	r3, r8
 8003fe6:	18e3      	adds	r3, r4, r3
 8003fe8:	603b      	str	r3, [r7, #0]
 8003fea:	464b      	mov	r3, r9
 8003fec:	eb45 0303 	adc.w	r3, r5, r3
 8003ff0:	607b      	str	r3, [r7, #4]
 8003ff2:	f04f 0200 	mov.w	r2, #0
 8003ff6:	f04f 0300 	mov.w	r3, #0
 8003ffa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ffe:	4629      	mov	r1, r5
 8004000:	028b      	lsls	r3, r1, #10
 8004002:	4621      	mov	r1, r4
 8004004:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004008:	4621      	mov	r1, r4
 800400a:	028a      	lsls	r2, r1, #10
 800400c:	4610      	mov	r0, r2
 800400e:	4619      	mov	r1, r3
 8004010:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004012:	2200      	movs	r2, #0
 8004014:	61bb      	str	r3, [r7, #24]
 8004016:	61fa      	str	r2, [r7, #28]
 8004018:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800401c:	f7fc fb1c 	bl	8000658 <__aeabi_uldivmod>
 8004020:	4602      	mov	r2, r0
 8004022:	460b      	mov	r3, r1
 8004024:	4613      	mov	r3, r2
 8004026:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004028:	4b0b      	ldr	r3, [pc, #44]	; (8004058 <HAL_RCC_GetSysClockFreq+0x200>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	0c1b      	lsrs	r3, r3, #16
 800402e:	f003 0303 	and.w	r3, r3, #3
 8004032:	3301      	adds	r3, #1
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004038:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800403a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800403c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004040:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004042:	e002      	b.n	800404a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004044:	4b05      	ldr	r3, [pc, #20]	; (800405c <HAL_RCC_GetSysClockFreq+0x204>)
 8004046:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004048:	bf00      	nop
    }
  }
  return sysclockfreq;
 800404a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800404c:	4618      	mov	r0, r3
 800404e:	3750      	adds	r7, #80	; 0x50
 8004050:	46bd      	mov	sp, r7
 8004052:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004056:	bf00      	nop
 8004058:	40023800 	.word	0x40023800
 800405c:	00f42400 	.word	0x00f42400

08004060 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004060:	b480      	push	{r7}
 8004062:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004064:	4b03      	ldr	r3, [pc, #12]	; (8004074 <HAL_RCC_GetHCLKFreq+0x14>)
 8004066:	681b      	ldr	r3, [r3, #0]
}
 8004068:	4618      	mov	r0, r3
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	20000000 	.word	0x20000000

08004078 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800407c:	f7ff fff0 	bl	8004060 <HAL_RCC_GetHCLKFreq>
 8004080:	4602      	mov	r2, r0
 8004082:	4b05      	ldr	r3, [pc, #20]	; (8004098 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	0a9b      	lsrs	r3, r3, #10
 8004088:	f003 0307 	and.w	r3, r3, #7
 800408c:	4903      	ldr	r1, [pc, #12]	; (800409c <HAL_RCC_GetPCLK1Freq+0x24>)
 800408e:	5ccb      	ldrb	r3, [r1, r3]
 8004090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004094:	4618      	mov	r0, r3
 8004096:	bd80      	pop	{r7, pc}
 8004098:	40023800 	.word	0x40023800
 800409c:	08016694 	.word	0x08016694

080040a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040a4:	f7ff ffdc 	bl	8004060 <HAL_RCC_GetHCLKFreq>
 80040a8:	4602      	mov	r2, r0
 80040aa:	4b05      	ldr	r3, [pc, #20]	; (80040c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	0b5b      	lsrs	r3, r3, #13
 80040b0:	f003 0307 	and.w	r3, r3, #7
 80040b4:	4903      	ldr	r1, [pc, #12]	; (80040c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040b6:	5ccb      	ldrb	r3, [r1, r3]
 80040b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040bc:	4618      	mov	r0, r3
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	40023800 	.word	0x40023800
 80040c4:	08016694 	.word	0x08016694

080040c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b088      	sub	sp, #32
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80040d0:	2300      	movs	r3, #0
 80040d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80040d4:	2300      	movs	r3, #0
 80040d6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80040d8:	2300      	movs	r3, #0
 80040da:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80040dc:	2300      	movs	r3, #0
 80040de:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80040e0:	2300      	movs	r3, #0
 80040e2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d012      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80040f0:	4b69      	ldr	r3, [pc, #420]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	4a68      	ldr	r2, [pc, #416]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040f6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80040fa:	6093      	str	r3, [r2, #8]
 80040fc:	4b66      	ldr	r3, [pc, #408]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040fe:	689a      	ldr	r2, [r3, #8]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004104:	4964      	ldr	r1, [pc, #400]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004106:	4313      	orrs	r3, r2
 8004108:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800410e:	2b00      	cmp	r3, #0
 8004110:	d101      	bne.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004112:	2301      	movs	r3, #1
 8004114:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d017      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004122:	4b5d      	ldr	r3, [pc, #372]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004124:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004128:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004130:	4959      	ldr	r1, [pc, #356]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004132:	4313      	orrs	r3, r2
 8004134:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800413c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004140:	d101      	bne.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004142:	2301      	movs	r3, #1
 8004144:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800414e:	2301      	movs	r3, #1
 8004150:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d017      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800415e:	4b4e      	ldr	r3, [pc, #312]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004160:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004164:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416c:	494a      	ldr	r1, [pc, #296]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800416e:	4313      	orrs	r3, r2
 8004170:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004178:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800417c:	d101      	bne.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800417e:	2301      	movs	r3, #1
 8004180:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800418a:	2301      	movs	r3, #1
 800418c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800419a:	2301      	movs	r3, #1
 800419c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0320 	and.w	r3, r3, #32
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f000 808b 	beq.w	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80041ac:	4b3a      	ldr	r3, [pc, #232]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b0:	4a39      	ldr	r2, [pc, #228]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041b6:	6413      	str	r3, [r2, #64]	; 0x40
 80041b8:	4b37      	ldr	r3, [pc, #220]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c0:	60bb      	str	r3, [r7, #8]
 80041c2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80041c4:	4b35      	ldr	r3, [pc, #212]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a34      	ldr	r2, [pc, #208]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041d0:	f7fd fca8 	bl	8001b24 <HAL_GetTick>
 80041d4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80041d6:	e008      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041d8:	f7fd fca4 	bl	8001b24 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b64      	cmp	r3, #100	; 0x64
 80041e4:	d901      	bls.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e38f      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80041ea:	4b2c      	ldr	r3, [pc, #176]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d0f0      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041f6:	4b28      	ldr	r3, [pc, #160]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041fe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d035      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	429a      	cmp	r2, r3
 8004212:	d02e      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004214:	4b20      	ldr	r3, [pc, #128]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004218:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800421c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800421e:	4b1e      	ldr	r3, [pc, #120]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004222:	4a1d      	ldr	r2, [pc, #116]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004228:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800422a:	4b1b      	ldr	r3, [pc, #108]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800422c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422e:	4a1a      	ldr	r2, [pc, #104]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004230:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004234:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004236:	4a18      	ldr	r2, [pc, #96]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800423c:	4b16      	ldr	r3, [pc, #88]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800423e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b01      	cmp	r3, #1
 8004246:	d114      	bne.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004248:	f7fd fc6c 	bl	8001b24 <HAL_GetTick>
 800424c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800424e:	e00a      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004250:	f7fd fc68 	bl	8001b24 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	f241 3288 	movw	r2, #5000	; 0x1388
 800425e:	4293      	cmp	r3, r2
 8004260:	d901      	bls.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e351      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004266:	4b0c      	ldr	r3, [pc, #48]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d0ee      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800427a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800427e:	d111      	bne.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004280:	4b05      	ldr	r3, [pc, #20]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800428c:	4b04      	ldr	r3, [pc, #16]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800428e:	400b      	ands	r3, r1
 8004290:	4901      	ldr	r1, [pc, #4]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004292:	4313      	orrs	r3, r2
 8004294:	608b      	str	r3, [r1, #8]
 8004296:	e00b      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004298:	40023800 	.word	0x40023800
 800429c:	40007000 	.word	0x40007000
 80042a0:	0ffffcff 	.word	0x0ffffcff
 80042a4:	4bac      	ldr	r3, [pc, #688]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	4aab      	ldr	r2, [pc, #684]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042aa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80042ae:	6093      	str	r3, [r2, #8]
 80042b0:	4ba9      	ldr	r3, [pc, #676]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042bc:	49a6      	ldr	r1, [pc, #664]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0310 	and.w	r3, r3, #16
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d010      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80042ce:	4ba2      	ldr	r3, [pc, #648]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042d4:	4aa0      	ldr	r2, [pc, #640]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042da:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80042de:	4b9e      	ldr	r3, [pc, #632]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042e0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e8:	499b      	ldr	r1, [pc, #620]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00a      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042fc:	4b96      	ldr	r3, [pc, #600]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004302:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800430a:	4993      	ldr	r1, [pc, #588]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800430c:	4313      	orrs	r3, r2
 800430e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00a      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800431e:	4b8e      	ldr	r3, [pc, #568]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004324:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800432c:	498a      	ldr	r1, [pc, #552]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800432e:	4313      	orrs	r3, r2
 8004330:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d00a      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004340:	4b85      	ldr	r3, [pc, #532]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004346:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800434e:	4982      	ldr	r1, [pc, #520]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004350:	4313      	orrs	r3, r2
 8004352:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00a      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004362:	4b7d      	ldr	r3, [pc, #500]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004368:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004370:	4979      	ldr	r1, [pc, #484]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004372:	4313      	orrs	r3, r2
 8004374:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00a      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004384:	4b74      	ldr	r3, [pc, #464]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438a:	f023 0203 	bic.w	r2, r3, #3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004392:	4971      	ldr	r1, [pc, #452]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004394:	4313      	orrs	r3, r2
 8004396:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00a      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043a6:	4b6c      	ldr	r3, [pc, #432]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ac:	f023 020c 	bic.w	r2, r3, #12
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043b4:	4968      	ldr	r1, [pc, #416]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00a      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043c8:	4b63      	ldr	r3, [pc, #396]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ce:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043d6:	4960      	ldr	r1, [pc, #384]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00a      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043ea:	4b5b      	ldr	r3, [pc, #364]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043f8:	4957      	ldr	r1, [pc, #348]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004408:	2b00      	cmp	r3, #0
 800440a:	d00a      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800440c:	4b52      	ldr	r3, [pc, #328]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800440e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004412:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800441a:	494f      	ldr	r1, [pc, #316]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800441c:	4313      	orrs	r3, r2
 800441e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00a      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800442e:	4b4a      	ldr	r3, [pc, #296]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004434:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800443c:	4946      	ldr	r1, [pc, #280]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800443e:	4313      	orrs	r3, r2
 8004440:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00a      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004450:	4b41      	ldr	r3, [pc, #260]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004456:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800445e:	493e      	ldr	r1, [pc, #248]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004460:	4313      	orrs	r3, r2
 8004462:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00a      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004472:	4b39      	ldr	r3, [pc, #228]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004478:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004480:	4935      	ldr	r1, [pc, #212]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004482:	4313      	orrs	r3, r2
 8004484:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00a      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004494:	4b30      	ldr	r3, [pc, #192]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800449a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044a2:	492d      	ldr	r1, [pc, #180]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d011      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80044b6:	4b28      	ldr	r3, [pc, #160]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044bc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044c4:	4924      	ldr	r1, [pc, #144]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044d4:	d101      	bne.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80044d6:	2301      	movs	r3, #1
 80044d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0308 	and.w	r3, r3, #8
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d001      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80044e6:	2301      	movs	r3, #1
 80044e8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00a      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044f6:	4b18      	ldr	r3, [pc, #96]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044fc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004504:	4914      	ldr	r1, [pc, #80]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004506:	4313      	orrs	r3, r2
 8004508:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00b      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004518:	4b0f      	ldr	r3, [pc, #60]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800451a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004528:	490b      	ldr	r1, [pc, #44]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800452a:	4313      	orrs	r3, r2
 800452c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00f      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800453c:	4b06      	ldr	r3, [pc, #24]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800453e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004542:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800454c:	4902      	ldr	r1, [pc, #8]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800454e:	4313      	orrs	r3, r2
 8004550:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004554:	e002      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004556:	bf00      	nop
 8004558:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00b      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004568:	4b8a      	ldr	r3, [pc, #552]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800456a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800456e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004578:	4986      	ldr	r1, [pc, #536]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800457a:	4313      	orrs	r3, r2
 800457c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00b      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800458c:	4b81      	ldr	r3, [pc, #516]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800458e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004592:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800459c:	497d      	ldr	r1, [pc, #500]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d006      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f000 80d6 	beq.w	8004764 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80045b8:	4b76      	ldr	r3, [pc, #472]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a75      	ldr	r2, [pc, #468]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80045c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045c4:	f7fd faae 	bl	8001b24 <HAL_GetTick>
 80045c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045ca:	e008      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80045cc:	f7fd faaa 	bl	8001b24 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b64      	cmp	r3, #100	; 0x64
 80045d8:	d901      	bls.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e195      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045de:	4b6d      	ldr	r3, [pc, #436]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1f0      	bne.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d021      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x572>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d11d      	bne.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80045fe:	4b65      	ldr	r3, [pc, #404]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004600:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004604:	0c1b      	lsrs	r3, r3, #16
 8004606:	f003 0303 	and.w	r3, r3, #3
 800460a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800460c:	4b61      	ldr	r3, [pc, #388]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800460e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004612:	0e1b      	lsrs	r3, r3, #24
 8004614:	f003 030f 	and.w	r3, r3, #15
 8004618:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	019a      	lsls	r2, r3, #6
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	041b      	lsls	r3, r3, #16
 8004624:	431a      	orrs	r2, r3
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	061b      	lsls	r3, r3, #24
 800462a:	431a      	orrs	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	071b      	lsls	r3, r3, #28
 8004632:	4958      	ldr	r1, [pc, #352]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004634:	4313      	orrs	r3, r2
 8004636:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d004      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800464a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800464e:	d00a      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004658:	2b00      	cmp	r3, #0
 800465a:	d02e      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004660:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004664:	d129      	bne.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004666:	4b4b      	ldr	r3, [pc, #300]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004668:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800466c:	0c1b      	lsrs	r3, r3, #16
 800466e:	f003 0303 	and.w	r3, r3, #3
 8004672:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004674:	4b47      	ldr	r3, [pc, #284]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004676:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800467a:	0f1b      	lsrs	r3, r3, #28
 800467c:	f003 0307 	and.w	r3, r3, #7
 8004680:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	019a      	lsls	r2, r3, #6
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	041b      	lsls	r3, r3, #16
 800468c:	431a      	orrs	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	061b      	lsls	r3, r3, #24
 8004694:	431a      	orrs	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	071b      	lsls	r3, r3, #28
 800469a:	493e      	ldr	r1, [pc, #248]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800469c:	4313      	orrs	r3, r2
 800469e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80046a2:	4b3c      	ldr	r3, [pc, #240]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046a8:	f023 021f 	bic.w	r2, r3, #31
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	3b01      	subs	r3, #1
 80046b2:	4938      	ldr	r1, [pc, #224]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d01d      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80046c6:	4b33      	ldr	r3, [pc, #204]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046cc:	0e1b      	lsrs	r3, r3, #24
 80046ce:	f003 030f 	and.w	r3, r3, #15
 80046d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80046d4:	4b2f      	ldr	r3, [pc, #188]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046da:	0f1b      	lsrs	r3, r3, #28
 80046dc:	f003 0307 	and.w	r3, r3, #7
 80046e0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	019a      	lsls	r2, r3, #6
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	041b      	lsls	r3, r3, #16
 80046ee:	431a      	orrs	r2, r3
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	061b      	lsls	r3, r3, #24
 80046f4:	431a      	orrs	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	071b      	lsls	r3, r3, #28
 80046fa:	4926      	ldr	r1, [pc, #152]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d011      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	019a      	lsls	r2, r3, #6
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	041b      	lsls	r3, r3, #16
 800471a:	431a      	orrs	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	061b      	lsls	r3, r3, #24
 8004722:	431a      	orrs	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	071b      	lsls	r3, r3, #28
 800472a:	491a      	ldr	r1, [pc, #104]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800472c:	4313      	orrs	r3, r2
 800472e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004732:	4b18      	ldr	r3, [pc, #96]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a17      	ldr	r2, [pc, #92]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004738:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800473c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800473e:	f7fd f9f1 	bl	8001b24 <HAL_GetTick>
 8004742:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004744:	e008      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004746:	f7fd f9ed 	bl	8001b24 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	2b64      	cmp	r3, #100	; 0x64
 8004752:	d901      	bls.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e0d8      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004758:	4b0e      	ldr	r3, [pc, #56]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d0f0      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	2b01      	cmp	r3, #1
 8004768:	f040 80ce 	bne.w	8004908 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800476c:	4b09      	ldr	r3, [pc, #36]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a08      	ldr	r2, [pc, #32]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004772:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004776:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004778:	f7fd f9d4 	bl	8001b24 <HAL_GetTick>
 800477c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800477e:	e00b      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004780:	f7fd f9d0 	bl	8001b24 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b64      	cmp	r3, #100	; 0x64
 800478c:	d904      	bls.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e0bb      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004792:	bf00      	nop
 8004794:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004798:	4b5e      	ldr	r3, [pc, #376]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047a4:	d0ec      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d003      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d009      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d02e      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d12a      	bne.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80047ce:	4b51      	ldr	r3, [pc, #324]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d4:	0c1b      	lsrs	r3, r3, #16
 80047d6:	f003 0303 	and.w	r3, r3, #3
 80047da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80047dc:	4b4d      	ldr	r3, [pc, #308]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e2:	0f1b      	lsrs	r3, r3, #28
 80047e4:	f003 0307 	and.w	r3, r3, #7
 80047e8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	019a      	lsls	r2, r3, #6
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	041b      	lsls	r3, r3, #16
 80047f4:	431a      	orrs	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	061b      	lsls	r3, r3, #24
 80047fc:	431a      	orrs	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	071b      	lsls	r3, r3, #28
 8004802:	4944      	ldr	r1, [pc, #272]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004804:	4313      	orrs	r3, r2
 8004806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800480a:	4b42      	ldr	r3, [pc, #264]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800480c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004810:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004818:	3b01      	subs	r3, #1
 800481a:	021b      	lsls	r3, r3, #8
 800481c:	493d      	ldr	r1, [pc, #244]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800481e:	4313      	orrs	r3, r2
 8004820:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d022      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004834:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004838:	d11d      	bne.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800483a:	4b36      	ldr	r3, [pc, #216]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800483c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004840:	0e1b      	lsrs	r3, r3, #24
 8004842:	f003 030f 	and.w	r3, r3, #15
 8004846:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004848:	4b32      	ldr	r3, [pc, #200]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800484a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800484e:	0f1b      	lsrs	r3, r3, #28
 8004850:	f003 0307 	and.w	r3, r3, #7
 8004854:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	019a      	lsls	r2, r3, #6
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a1b      	ldr	r3, [r3, #32]
 8004860:	041b      	lsls	r3, r3, #16
 8004862:	431a      	orrs	r2, r3
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	061b      	lsls	r3, r3, #24
 8004868:	431a      	orrs	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	071b      	lsls	r3, r3, #28
 800486e:	4929      	ldr	r1, [pc, #164]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004870:	4313      	orrs	r3, r2
 8004872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0308 	and.w	r3, r3, #8
 800487e:	2b00      	cmp	r3, #0
 8004880:	d028      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004882:	4b24      	ldr	r3, [pc, #144]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004888:	0e1b      	lsrs	r3, r3, #24
 800488a:	f003 030f 	and.w	r3, r3, #15
 800488e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004890:	4b20      	ldr	r3, [pc, #128]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004896:	0c1b      	lsrs	r3, r3, #16
 8004898:	f003 0303 	and.w	r3, r3, #3
 800489c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	019a      	lsls	r2, r3, #6
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	041b      	lsls	r3, r3, #16
 80048a8:	431a      	orrs	r2, r3
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	061b      	lsls	r3, r3, #24
 80048ae:	431a      	orrs	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	69db      	ldr	r3, [r3, #28]
 80048b4:	071b      	lsls	r3, r3, #28
 80048b6:	4917      	ldr	r1, [pc, #92]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80048be:	4b15      	ldr	r3, [pc, #84]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048cc:	4911      	ldr	r1, [pc, #68]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80048d4:	4b0f      	ldr	r3, [pc, #60]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a0e      	ldr	r2, [pc, #56]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048e0:	f7fd f920 	bl	8001b24 <HAL_GetTick>
 80048e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80048e6:	e008      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80048e8:	f7fd f91c 	bl	8001b24 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b64      	cmp	r3, #100	; 0x64
 80048f4:	d901      	bls.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e007      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80048fa:	4b06      	ldr	r3, [pc, #24]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004902:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004906:	d1ef      	bne.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3720      	adds	r7, #32
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	40023800 	.word	0x40023800

08004918 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e049      	b.n	80049be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d106      	bne.n	8004944 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f7fc fcd6 	bl	80012f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2202      	movs	r2, #2
 8004948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	3304      	adds	r3, #4
 8004954:	4619      	mov	r1, r3
 8004956:	4610      	mov	r0, r2
 8004958:	f000 fc9e 	bl	8005298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3708      	adds	r7, #8
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b082      	sub	sp, #8
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d101      	bne.n	80049d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e049      	b.n	8004a6c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d106      	bne.n	80049f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f7fc fce5 	bl	80013bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2202      	movs	r2, #2
 80049f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	3304      	adds	r3, #4
 8004a02:	4619      	mov	r1, r3
 8004a04:	4610      	mov	r0, r2
 8004a06:	f000 fc47 	bl	8005298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3708      	adds	r7, #8
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d109      	bne.n	8004a98 <HAL_TIM_PWM_Start+0x24>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	bf14      	ite	ne
 8004a90:	2301      	movne	r3, #1
 8004a92:	2300      	moveq	r3, #0
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	e03c      	b.n	8004b12 <HAL_TIM_PWM_Start+0x9e>
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	2b04      	cmp	r3, #4
 8004a9c:	d109      	bne.n	8004ab2 <HAL_TIM_PWM_Start+0x3e>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	bf14      	ite	ne
 8004aaa:	2301      	movne	r3, #1
 8004aac:	2300      	moveq	r3, #0
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	e02f      	b.n	8004b12 <HAL_TIM_PWM_Start+0x9e>
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	2b08      	cmp	r3, #8
 8004ab6:	d109      	bne.n	8004acc <HAL_TIM_PWM_Start+0x58>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	bf14      	ite	ne
 8004ac4:	2301      	movne	r3, #1
 8004ac6:	2300      	moveq	r3, #0
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	e022      	b.n	8004b12 <HAL_TIM_PWM_Start+0x9e>
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	2b0c      	cmp	r3, #12
 8004ad0:	d109      	bne.n	8004ae6 <HAL_TIM_PWM_Start+0x72>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	bf14      	ite	ne
 8004ade:	2301      	movne	r3, #1
 8004ae0:	2300      	moveq	r3, #0
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	e015      	b.n	8004b12 <HAL_TIM_PWM_Start+0x9e>
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	2b10      	cmp	r3, #16
 8004aea:	d109      	bne.n	8004b00 <HAL_TIM_PWM_Start+0x8c>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	bf14      	ite	ne
 8004af8:	2301      	movne	r3, #1
 8004afa:	2300      	moveq	r3, #0
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	e008      	b.n	8004b12 <HAL_TIM_PWM_Start+0x9e>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	bf14      	ite	ne
 8004b0c:	2301      	movne	r3, #1
 8004b0e:	2300      	moveq	r3, #0
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e092      	b.n	8004c40 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d104      	bne.n	8004b2a <HAL_TIM_PWM_Start+0xb6>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2202      	movs	r2, #2
 8004b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b28:	e023      	b.n	8004b72 <HAL_TIM_PWM_Start+0xfe>
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	2b04      	cmp	r3, #4
 8004b2e:	d104      	bne.n	8004b3a <HAL_TIM_PWM_Start+0xc6>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2202      	movs	r2, #2
 8004b34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b38:	e01b      	b.n	8004b72 <HAL_TIM_PWM_Start+0xfe>
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	2b08      	cmp	r3, #8
 8004b3e:	d104      	bne.n	8004b4a <HAL_TIM_PWM_Start+0xd6>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2202      	movs	r2, #2
 8004b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b48:	e013      	b.n	8004b72 <HAL_TIM_PWM_Start+0xfe>
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	2b0c      	cmp	r3, #12
 8004b4e:	d104      	bne.n	8004b5a <HAL_TIM_PWM_Start+0xe6>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2202      	movs	r2, #2
 8004b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b58:	e00b      	b.n	8004b72 <HAL_TIM_PWM_Start+0xfe>
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	2b10      	cmp	r3, #16
 8004b5e:	d104      	bne.n	8004b6a <HAL_TIM_PWM_Start+0xf6>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2202      	movs	r2, #2
 8004b64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b68:	e003      	b.n	8004b72 <HAL_TIM_PWM_Start+0xfe>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2202      	movs	r2, #2
 8004b6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2201      	movs	r2, #1
 8004b78:	6839      	ldr	r1, [r7, #0]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 ff30 	bl	80059e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a30      	ldr	r2, [pc, #192]	; (8004c48 <HAL_TIM_PWM_Start+0x1d4>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d004      	beq.n	8004b94 <HAL_TIM_PWM_Start+0x120>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a2f      	ldr	r2, [pc, #188]	; (8004c4c <HAL_TIM_PWM_Start+0x1d8>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d101      	bne.n	8004b98 <HAL_TIM_PWM_Start+0x124>
 8004b94:	2301      	movs	r3, #1
 8004b96:	e000      	b.n	8004b9a <HAL_TIM_PWM_Start+0x126>
 8004b98:	2300      	movs	r3, #0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d007      	beq.n	8004bae <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a25      	ldr	r2, [pc, #148]	; (8004c48 <HAL_TIM_PWM_Start+0x1d4>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d022      	beq.n	8004bfe <HAL_TIM_PWM_Start+0x18a>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bc0:	d01d      	beq.n	8004bfe <HAL_TIM_PWM_Start+0x18a>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a22      	ldr	r2, [pc, #136]	; (8004c50 <HAL_TIM_PWM_Start+0x1dc>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d018      	beq.n	8004bfe <HAL_TIM_PWM_Start+0x18a>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a20      	ldr	r2, [pc, #128]	; (8004c54 <HAL_TIM_PWM_Start+0x1e0>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d013      	beq.n	8004bfe <HAL_TIM_PWM_Start+0x18a>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a1f      	ldr	r2, [pc, #124]	; (8004c58 <HAL_TIM_PWM_Start+0x1e4>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d00e      	beq.n	8004bfe <HAL_TIM_PWM_Start+0x18a>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a19      	ldr	r2, [pc, #100]	; (8004c4c <HAL_TIM_PWM_Start+0x1d8>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d009      	beq.n	8004bfe <HAL_TIM_PWM_Start+0x18a>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a1b      	ldr	r2, [pc, #108]	; (8004c5c <HAL_TIM_PWM_Start+0x1e8>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d004      	beq.n	8004bfe <HAL_TIM_PWM_Start+0x18a>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a19      	ldr	r2, [pc, #100]	; (8004c60 <HAL_TIM_PWM_Start+0x1ec>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d115      	bne.n	8004c2a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	689a      	ldr	r2, [r3, #8]
 8004c04:	4b17      	ldr	r3, [pc, #92]	; (8004c64 <HAL_TIM_PWM_Start+0x1f0>)
 8004c06:	4013      	ands	r3, r2
 8004c08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2b06      	cmp	r3, #6
 8004c0e:	d015      	beq.n	8004c3c <HAL_TIM_PWM_Start+0x1c8>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c16:	d011      	beq.n	8004c3c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f042 0201 	orr.w	r2, r2, #1
 8004c26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c28:	e008      	b.n	8004c3c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f042 0201 	orr.w	r2, r2, #1
 8004c38:	601a      	str	r2, [r3, #0]
 8004c3a:	e000      	b.n	8004c3e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c3c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	40010000 	.word	0x40010000
 8004c4c:	40010400 	.word	0x40010400
 8004c50:	40000400 	.word	0x40000400
 8004c54:	40000800 	.word	0x40000800
 8004c58:	40000c00 	.word	0x40000c00
 8004c5c:	40014000 	.word	0x40014000
 8004c60:	40001800 	.word	0x40001800
 8004c64:	00010007 	.word	0x00010007

08004c68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	f003 0302 	and.w	r3, r3, #2
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d020      	beq.n	8004ccc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f003 0302 	and.w	r3, r3, #2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d01b      	beq.n	8004ccc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f06f 0202 	mvn.w	r2, #2
 8004c9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	f003 0303 	and.w	r3, r3, #3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d003      	beq.n	8004cba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 fad2 	bl	800525c <HAL_TIM_IC_CaptureCallback>
 8004cb8:	e005      	b.n	8004cc6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 fac4 	bl	8005248 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 fad5 	bl	8005270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	f003 0304 	and.w	r3, r3, #4
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d020      	beq.n	8004d18 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f003 0304 	and.w	r3, r3, #4
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d01b      	beq.n	8004d18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f06f 0204 	mvn.w	r2, #4
 8004ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2202      	movs	r2, #2
 8004cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d003      	beq.n	8004d06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 faac 	bl	800525c <HAL_TIM_IC_CaptureCallback>
 8004d04:	e005      	b.n	8004d12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 fa9e 	bl	8005248 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 faaf 	bl	8005270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	f003 0308 	and.w	r3, r3, #8
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d020      	beq.n	8004d64 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f003 0308 	and.w	r3, r3, #8
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d01b      	beq.n	8004d64 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f06f 0208 	mvn.w	r2, #8
 8004d34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2204      	movs	r2, #4
 8004d3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	69db      	ldr	r3, [r3, #28]
 8004d42:	f003 0303 	and.w	r3, r3, #3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d003      	beq.n	8004d52 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 fa86 	bl	800525c <HAL_TIM_IC_CaptureCallback>
 8004d50:	e005      	b.n	8004d5e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 fa78 	bl	8005248 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 fa89 	bl	8005270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	f003 0310 	and.w	r3, r3, #16
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d020      	beq.n	8004db0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f003 0310 	and.w	r3, r3, #16
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d01b      	beq.n	8004db0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f06f 0210 	mvn.w	r2, #16
 8004d80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2208      	movs	r2, #8
 8004d86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	69db      	ldr	r3, [r3, #28]
 8004d8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d003      	beq.n	8004d9e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 fa60 	bl	800525c <HAL_TIM_IC_CaptureCallback>
 8004d9c:	e005      	b.n	8004daa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 fa52 	bl	8005248 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 fa63 	bl	8005270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	f003 0301 	and.w	r3, r3, #1
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00c      	beq.n	8004dd4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f003 0301 	and.w	r3, r3, #1
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d007      	beq.n	8004dd4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f06f 0201 	mvn.w	r2, #1
 8004dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 fa30 	bl	8005234 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d104      	bne.n	8004de8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00c      	beq.n	8004e02 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d007      	beq.n	8004e02 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8004dfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 fead 	bl	8005b5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00c      	beq.n	8004e26 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d007      	beq.n	8004e26 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004e1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f000 fea5 	bl	8005b70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d00c      	beq.n	8004e4a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d007      	beq.n	8004e4a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 fa1d 	bl	8005284 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	f003 0320 	and.w	r3, r3, #32
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00c      	beq.n	8004e6e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f003 0320 	and.w	r3, r3, #32
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d007      	beq.n	8004e6e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f06f 0220 	mvn.w	r2, #32
 8004e66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 fe6d 	bl	8005b48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e6e:	bf00      	nop
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
	...

08004e78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b086      	sub	sp, #24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e84:	2300      	movs	r3, #0
 8004e86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d101      	bne.n	8004e96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e92:	2302      	movs	r3, #2
 8004e94:	e0ff      	b.n	8005096 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2b14      	cmp	r3, #20
 8004ea2:	f200 80f0 	bhi.w	8005086 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004ea6:	a201      	add	r2, pc, #4	; (adr r2, 8004eac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eac:	08004f01 	.word	0x08004f01
 8004eb0:	08005087 	.word	0x08005087
 8004eb4:	08005087 	.word	0x08005087
 8004eb8:	08005087 	.word	0x08005087
 8004ebc:	08004f41 	.word	0x08004f41
 8004ec0:	08005087 	.word	0x08005087
 8004ec4:	08005087 	.word	0x08005087
 8004ec8:	08005087 	.word	0x08005087
 8004ecc:	08004f83 	.word	0x08004f83
 8004ed0:	08005087 	.word	0x08005087
 8004ed4:	08005087 	.word	0x08005087
 8004ed8:	08005087 	.word	0x08005087
 8004edc:	08004fc3 	.word	0x08004fc3
 8004ee0:	08005087 	.word	0x08005087
 8004ee4:	08005087 	.word	0x08005087
 8004ee8:	08005087 	.word	0x08005087
 8004eec:	08005005 	.word	0x08005005
 8004ef0:	08005087 	.word	0x08005087
 8004ef4:	08005087 	.word	0x08005087
 8004ef8:	08005087 	.word	0x08005087
 8004efc:	08005045 	.word	0x08005045
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68b9      	ldr	r1, [r7, #8]
 8004f06:	4618      	mov	r0, r3
 8004f08:	f000 fa72 	bl	80053f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	699a      	ldr	r2, [r3, #24]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f042 0208 	orr.w	r2, r2, #8
 8004f1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	699a      	ldr	r2, [r3, #24]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f022 0204 	bic.w	r2, r2, #4
 8004f2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	6999      	ldr	r1, [r3, #24]
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	691a      	ldr	r2, [r3, #16]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	619a      	str	r2, [r3, #24]
      break;
 8004f3e:	e0a5      	b.n	800508c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68b9      	ldr	r1, [r7, #8]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f000 fac4 	bl	80054d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	699a      	ldr	r2, [r3, #24]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	699a      	ldr	r2, [r3, #24]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	6999      	ldr	r1, [r3, #24]
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	021a      	lsls	r2, r3, #8
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	619a      	str	r2, [r3, #24]
      break;
 8004f80:	e084      	b.n	800508c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68b9      	ldr	r1, [r7, #8]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f000 fb1b 	bl	80055c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	69da      	ldr	r2, [r3, #28]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f042 0208 	orr.w	r2, r2, #8
 8004f9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	69da      	ldr	r2, [r3, #28]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f022 0204 	bic.w	r2, r2, #4
 8004fac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	69d9      	ldr	r1, [r3, #28]
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	691a      	ldr	r2, [r3, #16]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	61da      	str	r2, [r3, #28]
      break;
 8004fc0:	e064      	b.n	800508c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68b9      	ldr	r1, [r7, #8]
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f000 fb71 	bl	80056b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	69da      	ldr	r2, [r3, #28]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	69da      	ldr	r2, [r3, #28]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	69d9      	ldr	r1, [r3, #28]
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	021a      	lsls	r2, r3, #8
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	430a      	orrs	r2, r1
 8005000:	61da      	str	r2, [r3, #28]
      break;
 8005002:	e043      	b.n	800508c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68b9      	ldr	r1, [r7, #8]
 800500a:	4618      	mov	r0, r3
 800500c:	f000 fba8 	bl	8005760 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f042 0208 	orr.w	r2, r2, #8
 800501e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f022 0204 	bic.w	r2, r2, #4
 800502e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	691a      	ldr	r2, [r3, #16]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	430a      	orrs	r2, r1
 8005040:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005042:	e023      	b.n	800508c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68b9      	ldr	r1, [r7, #8]
 800504a:	4618      	mov	r0, r3
 800504c:	f000 fbda 	bl	8005804 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800505e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800506e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	021a      	lsls	r2, r3, #8
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	430a      	orrs	r2, r1
 8005082:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005084:	e002      	b.n	800508c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	75fb      	strb	r3, [r7, #23]
      break;
 800508a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005094:	7dfb      	ldrb	r3, [r7, #23]
}
 8005096:	4618      	mov	r0, r3
 8005098:	3718      	adds	r7, #24
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop

080050a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050aa:	2300      	movs	r3, #0
 80050ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d101      	bne.n	80050bc <HAL_TIM_ConfigClockSource+0x1c>
 80050b8:	2302      	movs	r3, #2
 80050ba:	e0b4      	b.n	8005226 <HAL_TIM_ConfigClockSource+0x186>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2202      	movs	r2, #2
 80050c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050d4:	68ba      	ldr	r2, [r7, #8]
 80050d6:	4b56      	ldr	r3, [pc, #344]	; (8005230 <HAL_TIM_ConfigClockSource+0x190>)
 80050d8:	4013      	ands	r3, r2
 80050da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050f4:	d03e      	beq.n	8005174 <HAL_TIM_ConfigClockSource+0xd4>
 80050f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050fa:	f200 8087 	bhi.w	800520c <HAL_TIM_ConfigClockSource+0x16c>
 80050fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005102:	f000 8086 	beq.w	8005212 <HAL_TIM_ConfigClockSource+0x172>
 8005106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800510a:	d87f      	bhi.n	800520c <HAL_TIM_ConfigClockSource+0x16c>
 800510c:	2b70      	cmp	r3, #112	; 0x70
 800510e:	d01a      	beq.n	8005146 <HAL_TIM_ConfigClockSource+0xa6>
 8005110:	2b70      	cmp	r3, #112	; 0x70
 8005112:	d87b      	bhi.n	800520c <HAL_TIM_ConfigClockSource+0x16c>
 8005114:	2b60      	cmp	r3, #96	; 0x60
 8005116:	d050      	beq.n	80051ba <HAL_TIM_ConfigClockSource+0x11a>
 8005118:	2b60      	cmp	r3, #96	; 0x60
 800511a:	d877      	bhi.n	800520c <HAL_TIM_ConfigClockSource+0x16c>
 800511c:	2b50      	cmp	r3, #80	; 0x50
 800511e:	d03c      	beq.n	800519a <HAL_TIM_ConfigClockSource+0xfa>
 8005120:	2b50      	cmp	r3, #80	; 0x50
 8005122:	d873      	bhi.n	800520c <HAL_TIM_ConfigClockSource+0x16c>
 8005124:	2b40      	cmp	r3, #64	; 0x40
 8005126:	d058      	beq.n	80051da <HAL_TIM_ConfigClockSource+0x13a>
 8005128:	2b40      	cmp	r3, #64	; 0x40
 800512a:	d86f      	bhi.n	800520c <HAL_TIM_ConfigClockSource+0x16c>
 800512c:	2b30      	cmp	r3, #48	; 0x30
 800512e:	d064      	beq.n	80051fa <HAL_TIM_ConfigClockSource+0x15a>
 8005130:	2b30      	cmp	r3, #48	; 0x30
 8005132:	d86b      	bhi.n	800520c <HAL_TIM_ConfigClockSource+0x16c>
 8005134:	2b20      	cmp	r3, #32
 8005136:	d060      	beq.n	80051fa <HAL_TIM_ConfigClockSource+0x15a>
 8005138:	2b20      	cmp	r3, #32
 800513a:	d867      	bhi.n	800520c <HAL_TIM_ConfigClockSource+0x16c>
 800513c:	2b00      	cmp	r3, #0
 800513e:	d05c      	beq.n	80051fa <HAL_TIM_ConfigClockSource+0x15a>
 8005140:	2b10      	cmp	r3, #16
 8005142:	d05a      	beq.n	80051fa <HAL_TIM_ConfigClockSource+0x15a>
 8005144:	e062      	b.n	800520c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005156:	f000 fc23 	bl	80059a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005168:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68ba      	ldr	r2, [r7, #8]
 8005170:	609a      	str	r2, [r3, #8]
      break;
 8005172:	e04f      	b.n	8005214 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005184:	f000 fc0c 	bl	80059a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689a      	ldr	r2, [r3, #8]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005196:	609a      	str	r2, [r3, #8]
      break;
 8005198:	e03c      	b.n	8005214 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051a6:	461a      	mov	r2, r3
 80051a8:	f000 fb80 	bl	80058ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2150      	movs	r1, #80	; 0x50
 80051b2:	4618      	mov	r0, r3
 80051b4:	f000 fbd9 	bl	800596a <TIM_ITRx_SetConfig>
      break;
 80051b8:	e02c      	b.n	8005214 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80051c6:	461a      	mov	r2, r3
 80051c8:	f000 fb9f 	bl	800590a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2160      	movs	r1, #96	; 0x60
 80051d2:	4618      	mov	r0, r3
 80051d4:	f000 fbc9 	bl	800596a <TIM_ITRx_SetConfig>
      break;
 80051d8:	e01c      	b.n	8005214 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051e6:	461a      	mov	r2, r3
 80051e8:	f000 fb60 	bl	80058ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2140      	movs	r1, #64	; 0x40
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 fbb9 	bl	800596a <TIM_ITRx_SetConfig>
      break;
 80051f8:	e00c      	b.n	8005214 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4619      	mov	r1, r3
 8005204:	4610      	mov	r0, r2
 8005206:	f000 fbb0 	bl	800596a <TIM_ITRx_SetConfig>
      break;
 800520a:	e003      	b.n	8005214 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	73fb      	strb	r3, [r7, #15]
      break;
 8005210:	e000      	b.n	8005214 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005212:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005224:	7bfb      	ldrb	r3, [r7, #15]
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	fffeff88 	.word	0xfffeff88

08005234 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800523c:	bf00      	nop
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005250:	bf00      	nop
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005278:	bf00      	nop
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800528c:	bf00      	nop
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a46      	ldr	r2, [pc, #280]	; (80053c4 <TIM_Base_SetConfig+0x12c>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d013      	beq.n	80052d8 <TIM_Base_SetConfig+0x40>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052b6:	d00f      	beq.n	80052d8 <TIM_Base_SetConfig+0x40>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a43      	ldr	r2, [pc, #268]	; (80053c8 <TIM_Base_SetConfig+0x130>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d00b      	beq.n	80052d8 <TIM_Base_SetConfig+0x40>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a42      	ldr	r2, [pc, #264]	; (80053cc <TIM_Base_SetConfig+0x134>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d007      	beq.n	80052d8 <TIM_Base_SetConfig+0x40>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a41      	ldr	r2, [pc, #260]	; (80053d0 <TIM_Base_SetConfig+0x138>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d003      	beq.n	80052d8 <TIM_Base_SetConfig+0x40>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a40      	ldr	r2, [pc, #256]	; (80053d4 <TIM_Base_SetConfig+0x13c>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d108      	bne.n	80052ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a35      	ldr	r2, [pc, #212]	; (80053c4 <TIM_Base_SetConfig+0x12c>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d02b      	beq.n	800534a <TIM_Base_SetConfig+0xb2>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052f8:	d027      	beq.n	800534a <TIM_Base_SetConfig+0xb2>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a32      	ldr	r2, [pc, #200]	; (80053c8 <TIM_Base_SetConfig+0x130>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d023      	beq.n	800534a <TIM_Base_SetConfig+0xb2>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a31      	ldr	r2, [pc, #196]	; (80053cc <TIM_Base_SetConfig+0x134>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d01f      	beq.n	800534a <TIM_Base_SetConfig+0xb2>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a30      	ldr	r2, [pc, #192]	; (80053d0 <TIM_Base_SetConfig+0x138>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d01b      	beq.n	800534a <TIM_Base_SetConfig+0xb2>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a2f      	ldr	r2, [pc, #188]	; (80053d4 <TIM_Base_SetConfig+0x13c>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d017      	beq.n	800534a <TIM_Base_SetConfig+0xb2>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a2e      	ldr	r2, [pc, #184]	; (80053d8 <TIM_Base_SetConfig+0x140>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d013      	beq.n	800534a <TIM_Base_SetConfig+0xb2>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a2d      	ldr	r2, [pc, #180]	; (80053dc <TIM_Base_SetConfig+0x144>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d00f      	beq.n	800534a <TIM_Base_SetConfig+0xb2>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a2c      	ldr	r2, [pc, #176]	; (80053e0 <TIM_Base_SetConfig+0x148>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d00b      	beq.n	800534a <TIM_Base_SetConfig+0xb2>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a2b      	ldr	r2, [pc, #172]	; (80053e4 <TIM_Base_SetConfig+0x14c>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d007      	beq.n	800534a <TIM_Base_SetConfig+0xb2>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a2a      	ldr	r2, [pc, #168]	; (80053e8 <TIM_Base_SetConfig+0x150>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d003      	beq.n	800534a <TIM_Base_SetConfig+0xb2>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a29      	ldr	r2, [pc, #164]	; (80053ec <TIM_Base_SetConfig+0x154>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d108      	bne.n	800535c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005350:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	4313      	orrs	r3, r2
 800535a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	4313      	orrs	r3, r2
 8005368:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	689a      	ldr	r2, [r3, #8]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a10      	ldr	r2, [pc, #64]	; (80053c4 <TIM_Base_SetConfig+0x12c>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d003      	beq.n	8005390 <TIM_Base_SetConfig+0xf8>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a12      	ldr	r2, [pc, #72]	; (80053d4 <TIM_Base_SetConfig+0x13c>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d103      	bne.n	8005398 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	691a      	ldr	r2, [r3, #16]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d105      	bne.n	80053b6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	f023 0201 	bic.w	r2, r3, #1
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	611a      	str	r2, [r3, #16]
  }
}
 80053b6:	bf00      	nop
 80053b8:	3714      	adds	r7, #20
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	40010000 	.word	0x40010000
 80053c8:	40000400 	.word	0x40000400
 80053cc:	40000800 	.word	0x40000800
 80053d0:	40000c00 	.word	0x40000c00
 80053d4:	40010400 	.word	0x40010400
 80053d8:	40014000 	.word	0x40014000
 80053dc:	40014400 	.word	0x40014400
 80053e0:	40014800 	.word	0x40014800
 80053e4:	40001800 	.word	0x40001800
 80053e8:	40001c00 	.word	0x40001c00
 80053ec:	40002000 	.word	0x40002000

080053f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b087      	sub	sp, #28
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6a1b      	ldr	r3, [r3, #32]
 8005404:	f023 0201 	bic.w	r2, r3, #1
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	4b2b      	ldr	r3, [pc, #172]	; (80054c8 <TIM_OC1_SetConfig+0xd8>)
 800541c:	4013      	ands	r3, r2
 800541e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f023 0303 	bic.w	r3, r3, #3
 8005426:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	4313      	orrs	r3, r2
 8005430:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	f023 0302 	bic.w	r3, r3, #2
 8005438:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	697a      	ldr	r2, [r7, #20]
 8005440:	4313      	orrs	r3, r2
 8005442:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a21      	ldr	r2, [pc, #132]	; (80054cc <TIM_OC1_SetConfig+0xdc>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d003      	beq.n	8005454 <TIM_OC1_SetConfig+0x64>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a20      	ldr	r2, [pc, #128]	; (80054d0 <TIM_OC1_SetConfig+0xe0>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d10c      	bne.n	800546e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	f023 0308 	bic.w	r3, r3, #8
 800545a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	4313      	orrs	r3, r2
 8005464:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f023 0304 	bic.w	r3, r3, #4
 800546c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a16      	ldr	r2, [pc, #88]	; (80054cc <TIM_OC1_SetConfig+0xdc>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d003      	beq.n	800547e <TIM_OC1_SetConfig+0x8e>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a15      	ldr	r2, [pc, #84]	; (80054d0 <TIM_OC1_SetConfig+0xe0>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d111      	bne.n	80054a2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005484:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800548c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	4313      	orrs	r3, r2
 8005496:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	699b      	ldr	r3, [r3, #24]
 800549c:	693a      	ldr	r2, [r7, #16]
 800549e:	4313      	orrs	r3, r2
 80054a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	685a      	ldr	r2, [r3, #4]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	697a      	ldr	r2, [r7, #20]
 80054ba:	621a      	str	r2, [r3, #32]
}
 80054bc:	bf00      	nop
 80054be:	371c      	adds	r7, #28
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr
 80054c8:	fffeff8f 	.word	0xfffeff8f
 80054cc:	40010000 	.word	0x40010000
 80054d0:	40010400 	.word	0x40010400

080054d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b087      	sub	sp, #28
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a1b      	ldr	r3, [r3, #32]
 80054e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a1b      	ldr	r3, [r3, #32]
 80054e8:	f023 0210 	bic.w	r2, r3, #16
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	4b2e      	ldr	r3, [pc, #184]	; (80055b8 <TIM_OC2_SetConfig+0xe4>)
 8005500:	4013      	ands	r3, r2
 8005502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800550a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	021b      	lsls	r3, r3, #8
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	4313      	orrs	r3, r2
 8005516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	f023 0320 	bic.w	r3, r3, #32
 800551e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	011b      	lsls	r3, r3, #4
 8005526:	697a      	ldr	r2, [r7, #20]
 8005528:	4313      	orrs	r3, r2
 800552a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a23      	ldr	r2, [pc, #140]	; (80055bc <TIM_OC2_SetConfig+0xe8>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d003      	beq.n	800553c <TIM_OC2_SetConfig+0x68>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a22      	ldr	r2, [pc, #136]	; (80055c0 <TIM_OC2_SetConfig+0xec>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d10d      	bne.n	8005558 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005542:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	011b      	lsls	r3, r3, #4
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	4313      	orrs	r3, r2
 800554e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005556:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a18      	ldr	r2, [pc, #96]	; (80055bc <TIM_OC2_SetConfig+0xe8>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d003      	beq.n	8005568 <TIM_OC2_SetConfig+0x94>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a17      	ldr	r2, [pc, #92]	; (80055c0 <TIM_OC2_SetConfig+0xec>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d113      	bne.n	8005590 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800556e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005576:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	695b      	ldr	r3, [r3, #20]
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	4313      	orrs	r3, r2
 8005582:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	4313      	orrs	r3, r2
 800558e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	685a      	ldr	r2, [r3, #4]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	621a      	str	r2, [r3, #32]
}
 80055aa:	bf00      	nop
 80055ac:	371c      	adds	r7, #28
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	feff8fff 	.word	0xfeff8fff
 80055bc:	40010000 	.word	0x40010000
 80055c0:	40010400 	.word	0x40010400

080055c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b087      	sub	sp, #28
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a1b      	ldr	r3, [r3, #32]
 80055d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	69db      	ldr	r3, [r3, #28]
 80055ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	4b2d      	ldr	r3, [pc, #180]	; (80056a4 <TIM_OC3_SetConfig+0xe0>)
 80055f0:	4013      	ands	r3, r2
 80055f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f023 0303 	bic.w	r3, r3, #3
 80055fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	4313      	orrs	r3, r2
 8005604:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800560c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	021b      	lsls	r3, r3, #8
 8005614:	697a      	ldr	r2, [r7, #20]
 8005616:	4313      	orrs	r3, r2
 8005618:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a22      	ldr	r2, [pc, #136]	; (80056a8 <TIM_OC3_SetConfig+0xe4>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d003      	beq.n	800562a <TIM_OC3_SetConfig+0x66>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a21      	ldr	r2, [pc, #132]	; (80056ac <TIM_OC3_SetConfig+0xe8>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d10d      	bne.n	8005646 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005630:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	021b      	lsls	r3, r3, #8
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	4313      	orrs	r3, r2
 800563c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005644:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a17      	ldr	r2, [pc, #92]	; (80056a8 <TIM_OC3_SetConfig+0xe4>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d003      	beq.n	8005656 <TIM_OC3_SetConfig+0x92>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a16      	ldr	r2, [pc, #88]	; (80056ac <TIM_OC3_SetConfig+0xe8>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d113      	bne.n	800567e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800565c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005664:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	011b      	lsls	r3, r3, #4
 800566c:	693a      	ldr	r2, [r7, #16]
 800566e:	4313      	orrs	r3, r2
 8005670:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	011b      	lsls	r3, r3, #4
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	4313      	orrs	r3, r2
 800567c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	685a      	ldr	r2, [r3, #4]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	697a      	ldr	r2, [r7, #20]
 8005696:	621a      	str	r2, [r3, #32]
}
 8005698:	bf00      	nop
 800569a:	371c      	adds	r7, #28
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr
 80056a4:	fffeff8f 	.word	0xfffeff8f
 80056a8:	40010000 	.word	0x40010000
 80056ac:	40010400 	.word	0x40010400

080056b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b087      	sub	sp, #28
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a1b      	ldr	r3, [r3, #32]
 80056c4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	69db      	ldr	r3, [r3, #28]
 80056d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	4b1e      	ldr	r3, [pc, #120]	; (8005754 <TIM_OC4_SetConfig+0xa4>)
 80056dc:	4013      	ands	r3, r2
 80056de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	021b      	lsls	r3, r3, #8
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	031b      	lsls	r3, r3, #12
 8005702:	693a      	ldr	r2, [r7, #16]
 8005704:	4313      	orrs	r3, r2
 8005706:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a13      	ldr	r2, [pc, #76]	; (8005758 <TIM_OC4_SetConfig+0xa8>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d003      	beq.n	8005718 <TIM_OC4_SetConfig+0x68>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a12      	ldr	r2, [pc, #72]	; (800575c <TIM_OC4_SetConfig+0xac>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d109      	bne.n	800572c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800571e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	695b      	ldr	r3, [r3, #20]
 8005724:	019b      	lsls	r3, r3, #6
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	4313      	orrs	r3, r2
 800572a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	621a      	str	r2, [r3, #32]
}
 8005746:	bf00      	nop
 8005748:	371c      	adds	r7, #28
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	feff8fff 	.word	0xfeff8fff
 8005758:	40010000 	.word	0x40010000
 800575c:	40010400 	.word	0x40010400

08005760 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005760:	b480      	push	{r7}
 8005762:	b087      	sub	sp, #28
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a1b      	ldr	r3, [r3, #32]
 8005774:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	4b1b      	ldr	r3, [pc, #108]	; (80057f8 <TIM_OC5_SetConfig+0x98>)
 800578c:	4013      	ands	r3, r2
 800578e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	4313      	orrs	r3, r2
 8005798:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80057a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	041b      	lsls	r3, r3, #16
 80057a8:	693a      	ldr	r2, [r7, #16]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a12      	ldr	r2, [pc, #72]	; (80057fc <TIM_OC5_SetConfig+0x9c>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d003      	beq.n	80057be <TIM_OC5_SetConfig+0x5e>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a11      	ldr	r2, [pc, #68]	; (8005800 <TIM_OC5_SetConfig+0xa0>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d109      	bne.n	80057d2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	695b      	ldr	r3, [r3, #20]
 80057ca:	021b      	lsls	r3, r3, #8
 80057cc:	697a      	ldr	r2, [r7, #20]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	697a      	ldr	r2, [r7, #20]
 80057d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	685a      	ldr	r2, [r3, #4]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	693a      	ldr	r2, [r7, #16]
 80057ea:	621a      	str	r2, [r3, #32]
}
 80057ec:	bf00      	nop
 80057ee:	371c      	adds	r7, #28
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr
 80057f8:	fffeff8f 	.word	0xfffeff8f
 80057fc:	40010000 	.word	0x40010000
 8005800:	40010400 	.word	0x40010400

08005804 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005804:	b480      	push	{r7}
 8005806:	b087      	sub	sp, #28
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a1b      	ldr	r3, [r3, #32]
 8005818:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800582a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	4b1c      	ldr	r3, [pc, #112]	; (80058a0 <TIM_OC6_SetConfig+0x9c>)
 8005830:	4013      	ands	r3, r2
 8005832:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	021b      	lsls	r3, r3, #8
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	4313      	orrs	r3, r2
 800583e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005846:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	051b      	lsls	r3, r3, #20
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	4313      	orrs	r3, r2
 8005852:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a13      	ldr	r2, [pc, #76]	; (80058a4 <TIM_OC6_SetConfig+0xa0>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d003      	beq.n	8005864 <TIM_OC6_SetConfig+0x60>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a12      	ldr	r2, [pc, #72]	; (80058a8 <TIM_OC6_SetConfig+0xa4>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d109      	bne.n	8005878 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800586a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	695b      	ldr	r3, [r3, #20]
 8005870:	029b      	lsls	r3, r3, #10
 8005872:	697a      	ldr	r2, [r7, #20]
 8005874:	4313      	orrs	r3, r2
 8005876:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	685a      	ldr	r2, [r3, #4]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	621a      	str	r2, [r3, #32]
}
 8005892:	bf00      	nop
 8005894:	371c      	adds	r7, #28
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	feff8fff 	.word	0xfeff8fff
 80058a4:	40010000 	.word	0x40010000
 80058a8:	40010400 	.word	0x40010400

080058ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b087      	sub	sp, #28
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6a1b      	ldr	r3, [r3, #32]
 80058bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6a1b      	ldr	r3, [r3, #32]
 80058c2:	f023 0201 	bic.w	r2, r3, #1
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	011b      	lsls	r3, r3, #4
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	4313      	orrs	r3, r2
 80058e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	f023 030a 	bic.w	r3, r3, #10
 80058e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	621a      	str	r2, [r3, #32]
}
 80058fe:	bf00      	nop
 8005900:	371c      	adds	r7, #28
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr

0800590a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800590a:	b480      	push	{r7}
 800590c:	b087      	sub	sp, #28
 800590e:	af00      	add	r7, sp, #0
 8005910:	60f8      	str	r0, [r7, #12]
 8005912:	60b9      	str	r1, [r7, #8]
 8005914:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6a1b      	ldr	r3, [r3, #32]
 8005920:	f023 0210 	bic.w	r2, r3, #16
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	699b      	ldr	r3, [r3, #24]
 800592c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005934:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	031b      	lsls	r3, r3, #12
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	4313      	orrs	r3, r2
 800593e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005946:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	011b      	lsls	r3, r3, #4
 800594c:	697a      	ldr	r2, [r7, #20]
 800594e:	4313      	orrs	r3, r2
 8005950:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	697a      	ldr	r2, [r7, #20]
 800595c:	621a      	str	r2, [r3, #32]
}
 800595e:	bf00      	nop
 8005960:	371c      	adds	r7, #28
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr

0800596a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800596a:	b480      	push	{r7}
 800596c:	b085      	sub	sp, #20
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
 8005972:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005980:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005982:	683a      	ldr	r2, [r7, #0]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	4313      	orrs	r3, r2
 8005988:	f043 0307 	orr.w	r3, r3, #7
 800598c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	609a      	str	r2, [r3, #8]
}
 8005994:	bf00      	nop
 8005996:	3714      	adds	r7, #20
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b087      	sub	sp, #28
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
 80059ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	021a      	lsls	r2, r3, #8
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	431a      	orrs	r2, r3
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	609a      	str	r2, [r3, #8]
}
 80059d4:	bf00      	nop
 80059d6:	371c      	adds	r7, #28
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b087      	sub	sp, #28
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	f003 031f 	and.w	r3, r3, #31
 80059f2:	2201      	movs	r2, #1
 80059f4:	fa02 f303 	lsl.w	r3, r2, r3
 80059f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6a1a      	ldr	r2, [r3, #32]
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	43db      	mvns	r3, r3
 8005a02:	401a      	ands	r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6a1a      	ldr	r2, [r3, #32]
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	f003 031f 	and.w	r3, r3, #31
 8005a12:	6879      	ldr	r1, [r7, #4]
 8005a14:	fa01 f303 	lsl.w	r3, r1, r3
 8005a18:	431a      	orrs	r2, r3
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	621a      	str	r2, [r3, #32]
}
 8005a1e:	bf00      	nop
 8005a20:	371c      	adds	r7, #28
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
	...

08005a2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d101      	bne.n	8005a44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a40:	2302      	movs	r3, #2
 8005a42:	e06d      	b.n	8005b20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2202      	movs	r2, #2
 8005a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a30      	ldr	r2, [pc, #192]	; (8005b2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d004      	beq.n	8005a78 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a2f      	ldr	r2, [pc, #188]	; (8005b30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d108      	bne.n	8005a8a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005a7e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a90:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a20      	ldr	r2, [pc, #128]	; (8005b2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d022      	beq.n	8005af4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ab6:	d01d      	beq.n	8005af4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a1d      	ldr	r2, [pc, #116]	; (8005b34 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d018      	beq.n	8005af4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a1c      	ldr	r2, [pc, #112]	; (8005b38 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d013      	beq.n	8005af4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a1a      	ldr	r2, [pc, #104]	; (8005b3c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d00e      	beq.n	8005af4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a15      	ldr	r2, [pc, #84]	; (8005b30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d009      	beq.n	8005af4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a16      	ldr	r2, [pc, #88]	; (8005b40 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d004      	beq.n	8005af4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a15      	ldr	r2, [pc, #84]	; (8005b44 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d10c      	bne.n	8005b0e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005afa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	68ba      	ldr	r2, [r7, #8]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68ba      	ldr	r2, [r7, #8]
 8005b0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2201      	movs	r2, #1
 8005b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3714      	adds	r7, #20
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr
 8005b2c:	40010000 	.word	0x40010000
 8005b30:	40010400 	.word	0x40010400
 8005b34:	40000400 	.word	0x40000400
 8005b38:	40000800 	.word	0x40000800
 8005b3c:	40000c00 	.word	0x40000c00
 8005b40:	40014000 	.word	0x40014000
 8005b44:	40001800 	.word	0x40001800

08005b48 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b64:	bf00      	nop
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d101      	bne.n	8005b96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e040      	b.n	8005c18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d106      	bne.n	8005bac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f7fb fca0 	bl	80014ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2224      	movs	r2, #36	; 0x24
 8005bb0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f022 0201 	bic.w	r2, r2, #1
 8005bc0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d002      	beq.n	8005bd0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 fa8c 	bl	80060e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 f825 	bl	8005c20 <UART_SetConfig>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d101      	bne.n	8005be0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e01b      	b.n	8005c18 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	685a      	ldr	r2, [r3, #4]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005bee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	689a      	ldr	r2, [r3, #8]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005bfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f042 0201 	orr.w	r2, r2, #1
 8005c0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 fb0b 	bl	800622c <UART_CheckIdleState>
 8005c16:	4603      	mov	r3, r0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3708      	adds	r7, #8
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b088      	sub	sp, #32
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	689a      	ldr	r2, [r3, #8]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	431a      	orrs	r2, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	431a      	orrs	r2, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	69db      	ldr	r3, [r3, #28]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	4ba6      	ldr	r3, [pc, #664]	; (8005ee4 <UART_SetConfig+0x2c4>)
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	6812      	ldr	r2, [r2, #0]
 8005c52:	6979      	ldr	r1, [r7, #20]
 8005c54:	430b      	orrs	r3, r1
 8005c56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	68da      	ldr	r2, [r3, #12]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a1b      	ldr	r3, [r3, #32]
 8005c78:	697a      	ldr	r2, [r7, #20]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	697a      	ldr	r2, [r7, #20]
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a94      	ldr	r2, [pc, #592]	; (8005ee8 <UART_SetConfig+0x2c8>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d120      	bne.n	8005cde <UART_SetConfig+0xbe>
 8005c9c:	4b93      	ldr	r3, [pc, #588]	; (8005eec <UART_SetConfig+0x2cc>)
 8005c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ca2:	f003 0303 	and.w	r3, r3, #3
 8005ca6:	2b03      	cmp	r3, #3
 8005ca8:	d816      	bhi.n	8005cd8 <UART_SetConfig+0xb8>
 8005caa:	a201      	add	r2, pc, #4	; (adr r2, 8005cb0 <UART_SetConfig+0x90>)
 8005cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb0:	08005cc1 	.word	0x08005cc1
 8005cb4:	08005ccd 	.word	0x08005ccd
 8005cb8:	08005cc7 	.word	0x08005cc7
 8005cbc:	08005cd3 	.word	0x08005cd3
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	77fb      	strb	r3, [r7, #31]
 8005cc4:	e150      	b.n	8005f68 <UART_SetConfig+0x348>
 8005cc6:	2302      	movs	r3, #2
 8005cc8:	77fb      	strb	r3, [r7, #31]
 8005cca:	e14d      	b.n	8005f68 <UART_SetConfig+0x348>
 8005ccc:	2304      	movs	r3, #4
 8005cce:	77fb      	strb	r3, [r7, #31]
 8005cd0:	e14a      	b.n	8005f68 <UART_SetConfig+0x348>
 8005cd2:	2308      	movs	r3, #8
 8005cd4:	77fb      	strb	r3, [r7, #31]
 8005cd6:	e147      	b.n	8005f68 <UART_SetConfig+0x348>
 8005cd8:	2310      	movs	r3, #16
 8005cda:	77fb      	strb	r3, [r7, #31]
 8005cdc:	e144      	b.n	8005f68 <UART_SetConfig+0x348>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a83      	ldr	r2, [pc, #524]	; (8005ef0 <UART_SetConfig+0x2d0>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d132      	bne.n	8005d4e <UART_SetConfig+0x12e>
 8005ce8:	4b80      	ldr	r3, [pc, #512]	; (8005eec <UART_SetConfig+0x2cc>)
 8005cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cee:	f003 030c 	and.w	r3, r3, #12
 8005cf2:	2b0c      	cmp	r3, #12
 8005cf4:	d828      	bhi.n	8005d48 <UART_SetConfig+0x128>
 8005cf6:	a201      	add	r2, pc, #4	; (adr r2, 8005cfc <UART_SetConfig+0xdc>)
 8005cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cfc:	08005d31 	.word	0x08005d31
 8005d00:	08005d49 	.word	0x08005d49
 8005d04:	08005d49 	.word	0x08005d49
 8005d08:	08005d49 	.word	0x08005d49
 8005d0c:	08005d3d 	.word	0x08005d3d
 8005d10:	08005d49 	.word	0x08005d49
 8005d14:	08005d49 	.word	0x08005d49
 8005d18:	08005d49 	.word	0x08005d49
 8005d1c:	08005d37 	.word	0x08005d37
 8005d20:	08005d49 	.word	0x08005d49
 8005d24:	08005d49 	.word	0x08005d49
 8005d28:	08005d49 	.word	0x08005d49
 8005d2c:	08005d43 	.word	0x08005d43
 8005d30:	2300      	movs	r3, #0
 8005d32:	77fb      	strb	r3, [r7, #31]
 8005d34:	e118      	b.n	8005f68 <UART_SetConfig+0x348>
 8005d36:	2302      	movs	r3, #2
 8005d38:	77fb      	strb	r3, [r7, #31]
 8005d3a:	e115      	b.n	8005f68 <UART_SetConfig+0x348>
 8005d3c:	2304      	movs	r3, #4
 8005d3e:	77fb      	strb	r3, [r7, #31]
 8005d40:	e112      	b.n	8005f68 <UART_SetConfig+0x348>
 8005d42:	2308      	movs	r3, #8
 8005d44:	77fb      	strb	r3, [r7, #31]
 8005d46:	e10f      	b.n	8005f68 <UART_SetConfig+0x348>
 8005d48:	2310      	movs	r3, #16
 8005d4a:	77fb      	strb	r3, [r7, #31]
 8005d4c:	e10c      	b.n	8005f68 <UART_SetConfig+0x348>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a68      	ldr	r2, [pc, #416]	; (8005ef4 <UART_SetConfig+0x2d4>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d120      	bne.n	8005d9a <UART_SetConfig+0x17a>
 8005d58:	4b64      	ldr	r3, [pc, #400]	; (8005eec <UART_SetConfig+0x2cc>)
 8005d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d5e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d62:	2b30      	cmp	r3, #48	; 0x30
 8005d64:	d013      	beq.n	8005d8e <UART_SetConfig+0x16e>
 8005d66:	2b30      	cmp	r3, #48	; 0x30
 8005d68:	d814      	bhi.n	8005d94 <UART_SetConfig+0x174>
 8005d6a:	2b20      	cmp	r3, #32
 8005d6c:	d009      	beq.n	8005d82 <UART_SetConfig+0x162>
 8005d6e:	2b20      	cmp	r3, #32
 8005d70:	d810      	bhi.n	8005d94 <UART_SetConfig+0x174>
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d002      	beq.n	8005d7c <UART_SetConfig+0x15c>
 8005d76:	2b10      	cmp	r3, #16
 8005d78:	d006      	beq.n	8005d88 <UART_SetConfig+0x168>
 8005d7a:	e00b      	b.n	8005d94 <UART_SetConfig+0x174>
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	77fb      	strb	r3, [r7, #31]
 8005d80:	e0f2      	b.n	8005f68 <UART_SetConfig+0x348>
 8005d82:	2302      	movs	r3, #2
 8005d84:	77fb      	strb	r3, [r7, #31]
 8005d86:	e0ef      	b.n	8005f68 <UART_SetConfig+0x348>
 8005d88:	2304      	movs	r3, #4
 8005d8a:	77fb      	strb	r3, [r7, #31]
 8005d8c:	e0ec      	b.n	8005f68 <UART_SetConfig+0x348>
 8005d8e:	2308      	movs	r3, #8
 8005d90:	77fb      	strb	r3, [r7, #31]
 8005d92:	e0e9      	b.n	8005f68 <UART_SetConfig+0x348>
 8005d94:	2310      	movs	r3, #16
 8005d96:	77fb      	strb	r3, [r7, #31]
 8005d98:	e0e6      	b.n	8005f68 <UART_SetConfig+0x348>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a56      	ldr	r2, [pc, #344]	; (8005ef8 <UART_SetConfig+0x2d8>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d120      	bne.n	8005de6 <UART_SetConfig+0x1c6>
 8005da4:	4b51      	ldr	r3, [pc, #324]	; (8005eec <UART_SetConfig+0x2cc>)
 8005da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005daa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005dae:	2bc0      	cmp	r3, #192	; 0xc0
 8005db0:	d013      	beq.n	8005dda <UART_SetConfig+0x1ba>
 8005db2:	2bc0      	cmp	r3, #192	; 0xc0
 8005db4:	d814      	bhi.n	8005de0 <UART_SetConfig+0x1c0>
 8005db6:	2b80      	cmp	r3, #128	; 0x80
 8005db8:	d009      	beq.n	8005dce <UART_SetConfig+0x1ae>
 8005dba:	2b80      	cmp	r3, #128	; 0x80
 8005dbc:	d810      	bhi.n	8005de0 <UART_SetConfig+0x1c0>
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d002      	beq.n	8005dc8 <UART_SetConfig+0x1a8>
 8005dc2:	2b40      	cmp	r3, #64	; 0x40
 8005dc4:	d006      	beq.n	8005dd4 <UART_SetConfig+0x1b4>
 8005dc6:	e00b      	b.n	8005de0 <UART_SetConfig+0x1c0>
 8005dc8:	2300      	movs	r3, #0
 8005dca:	77fb      	strb	r3, [r7, #31]
 8005dcc:	e0cc      	b.n	8005f68 <UART_SetConfig+0x348>
 8005dce:	2302      	movs	r3, #2
 8005dd0:	77fb      	strb	r3, [r7, #31]
 8005dd2:	e0c9      	b.n	8005f68 <UART_SetConfig+0x348>
 8005dd4:	2304      	movs	r3, #4
 8005dd6:	77fb      	strb	r3, [r7, #31]
 8005dd8:	e0c6      	b.n	8005f68 <UART_SetConfig+0x348>
 8005dda:	2308      	movs	r3, #8
 8005ddc:	77fb      	strb	r3, [r7, #31]
 8005dde:	e0c3      	b.n	8005f68 <UART_SetConfig+0x348>
 8005de0:	2310      	movs	r3, #16
 8005de2:	77fb      	strb	r3, [r7, #31]
 8005de4:	e0c0      	b.n	8005f68 <UART_SetConfig+0x348>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a44      	ldr	r2, [pc, #272]	; (8005efc <UART_SetConfig+0x2dc>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d125      	bne.n	8005e3c <UART_SetConfig+0x21c>
 8005df0:	4b3e      	ldr	r3, [pc, #248]	; (8005eec <UART_SetConfig+0x2cc>)
 8005df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dfe:	d017      	beq.n	8005e30 <UART_SetConfig+0x210>
 8005e00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e04:	d817      	bhi.n	8005e36 <UART_SetConfig+0x216>
 8005e06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e0a:	d00b      	beq.n	8005e24 <UART_SetConfig+0x204>
 8005e0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e10:	d811      	bhi.n	8005e36 <UART_SetConfig+0x216>
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d003      	beq.n	8005e1e <UART_SetConfig+0x1fe>
 8005e16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e1a:	d006      	beq.n	8005e2a <UART_SetConfig+0x20a>
 8005e1c:	e00b      	b.n	8005e36 <UART_SetConfig+0x216>
 8005e1e:	2300      	movs	r3, #0
 8005e20:	77fb      	strb	r3, [r7, #31]
 8005e22:	e0a1      	b.n	8005f68 <UART_SetConfig+0x348>
 8005e24:	2302      	movs	r3, #2
 8005e26:	77fb      	strb	r3, [r7, #31]
 8005e28:	e09e      	b.n	8005f68 <UART_SetConfig+0x348>
 8005e2a:	2304      	movs	r3, #4
 8005e2c:	77fb      	strb	r3, [r7, #31]
 8005e2e:	e09b      	b.n	8005f68 <UART_SetConfig+0x348>
 8005e30:	2308      	movs	r3, #8
 8005e32:	77fb      	strb	r3, [r7, #31]
 8005e34:	e098      	b.n	8005f68 <UART_SetConfig+0x348>
 8005e36:	2310      	movs	r3, #16
 8005e38:	77fb      	strb	r3, [r7, #31]
 8005e3a:	e095      	b.n	8005f68 <UART_SetConfig+0x348>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a2f      	ldr	r2, [pc, #188]	; (8005f00 <UART_SetConfig+0x2e0>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d125      	bne.n	8005e92 <UART_SetConfig+0x272>
 8005e46:	4b29      	ldr	r3, [pc, #164]	; (8005eec <UART_SetConfig+0x2cc>)
 8005e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e4c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e54:	d017      	beq.n	8005e86 <UART_SetConfig+0x266>
 8005e56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e5a:	d817      	bhi.n	8005e8c <UART_SetConfig+0x26c>
 8005e5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e60:	d00b      	beq.n	8005e7a <UART_SetConfig+0x25a>
 8005e62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e66:	d811      	bhi.n	8005e8c <UART_SetConfig+0x26c>
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d003      	beq.n	8005e74 <UART_SetConfig+0x254>
 8005e6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e70:	d006      	beq.n	8005e80 <UART_SetConfig+0x260>
 8005e72:	e00b      	b.n	8005e8c <UART_SetConfig+0x26c>
 8005e74:	2301      	movs	r3, #1
 8005e76:	77fb      	strb	r3, [r7, #31]
 8005e78:	e076      	b.n	8005f68 <UART_SetConfig+0x348>
 8005e7a:	2302      	movs	r3, #2
 8005e7c:	77fb      	strb	r3, [r7, #31]
 8005e7e:	e073      	b.n	8005f68 <UART_SetConfig+0x348>
 8005e80:	2304      	movs	r3, #4
 8005e82:	77fb      	strb	r3, [r7, #31]
 8005e84:	e070      	b.n	8005f68 <UART_SetConfig+0x348>
 8005e86:	2308      	movs	r3, #8
 8005e88:	77fb      	strb	r3, [r7, #31]
 8005e8a:	e06d      	b.n	8005f68 <UART_SetConfig+0x348>
 8005e8c:	2310      	movs	r3, #16
 8005e8e:	77fb      	strb	r3, [r7, #31]
 8005e90:	e06a      	b.n	8005f68 <UART_SetConfig+0x348>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a1b      	ldr	r2, [pc, #108]	; (8005f04 <UART_SetConfig+0x2e4>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d138      	bne.n	8005f0e <UART_SetConfig+0x2ee>
 8005e9c:	4b13      	ldr	r3, [pc, #76]	; (8005eec <UART_SetConfig+0x2cc>)
 8005e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ea2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005ea6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005eaa:	d017      	beq.n	8005edc <UART_SetConfig+0x2bc>
 8005eac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005eb0:	d82a      	bhi.n	8005f08 <UART_SetConfig+0x2e8>
 8005eb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eb6:	d00b      	beq.n	8005ed0 <UART_SetConfig+0x2b0>
 8005eb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ebc:	d824      	bhi.n	8005f08 <UART_SetConfig+0x2e8>
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d003      	beq.n	8005eca <UART_SetConfig+0x2aa>
 8005ec2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ec6:	d006      	beq.n	8005ed6 <UART_SetConfig+0x2b6>
 8005ec8:	e01e      	b.n	8005f08 <UART_SetConfig+0x2e8>
 8005eca:	2300      	movs	r3, #0
 8005ecc:	77fb      	strb	r3, [r7, #31]
 8005ece:	e04b      	b.n	8005f68 <UART_SetConfig+0x348>
 8005ed0:	2302      	movs	r3, #2
 8005ed2:	77fb      	strb	r3, [r7, #31]
 8005ed4:	e048      	b.n	8005f68 <UART_SetConfig+0x348>
 8005ed6:	2304      	movs	r3, #4
 8005ed8:	77fb      	strb	r3, [r7, #31]
 8005eda:	e045      	b.n	8005f68 <UART_SetConfig+0x348>
 8005edc:	2308      	movs	r3, #8
 8005ede:	77fb      	strb	r3, [r7, #31]
 8005ee0:	e042      	b.n	8005f68 <UART_SetConfig+0x348>
 8005ee2:	bf00      	nop
 8005ee4:	efff69f3 	.word	0xefff69f3
 8005ee8:	40011000 	.word	0x40011000
 8005eec:	40023800 	.word	0x40023800
 8005ef0:	40004400 	.word	0x40004400
 8005ef4:	40004800 	.word	0x40004800
 8005ef8:	40004c00 	.word	0x40004c00
 8005efc:	40005000 	.word	0x40005000
 8005f00:	40011400 	.word	0x40011400
 8005f04:	40007800 	.word	0x40007800
 8005f08:	2310      	movs	r3, #16
 8005f0a:	77fb      	strb	r3, [r7, #31]
 8005f0c:	e02c      	b.n	8005f68 <UART_SetConfig+0x348>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a72      	ldr	r2, [pc, #456]	; (80060dc <UART_SetConfig+0x4bc>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d125      	bne.n	8005f64 <UART_SetConfig+0x344>
 8005f18:	4b71      	ldr	r3, [pc, #452]	; (80060e0 <UART_SetConfig+0x4c0>)
 8005f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f1e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005f22:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005f26:	d017      	beq.n	8005f58 <UART_SetConfig+0x338>
 8005f28:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005f2c:	d817      	bhi.n	8005f5e <UART_SetConfig+0x33e>
 8005f2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f32:	d00b      	beq.n	8005f4c <UART_SetConfig+0x32c>
 8005f34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f38:	d811      	bhi.n	8005f5e <UART_SetConfig+0x33e>
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d003      	beq.n	8005f46 <UART_SetConfig+0x326>
 8005f3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f42:	d006      	beq.n	8005f52 <UART_SetConfig+0x332>
 8005f44:	e00b      	b.n	8005f5e <UART_SetConfig+0x33e>
 8005f46:	2300      	movs	r3, #0
 8005f48:	77fb      	strb	r3, [r7, #31]
 8005f4a:	e00d      	b.n	8005f68 <UART_SetConfig+0x348>
 8005f4c:	2302      	movs	r3, #2
 8005f4e:	77fb      	strb	r3, [r7, #31]
 8005f50:	e00a      	b.n	8005f68 <UART_SetConfig+0x348>
 8005f52:	2304      	movs	r3, #4
 8005f54:	77fb      	strb	r3, [r7, #31]
 8005f56:	e007      	b.n	8005f68 <UART_SetConfig+0x348>
 8005f58:	2308      	movs	r3, #8
 8005f5a:	77fb      	strb	r3, [r7, #31]
 8005f5c:	e004      	b.n	8005f68 <UART_SetConfig+0x348>
 8005f5e:	2310      	movs	r3, #16
 8005f60:	77fb      	strb	r3, [r7, #31]
 8005f62:	e001      	b.n	8005f68 <UART_SetConfig+0x348>
 8005f64:	2310      	movs	r3, #16
 8005f66:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	69db      	ldr	r3, [r3, #28]
 8005f6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f70:	d15b      	bne.n	800602a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005f72:	7ffb      	ldrb	r3, [r7, #31]
 8005f74:	2b08      	cmp	r3, #8
 8005f76:	d828      	bhi.n	8005fca <UART_SetConfig+0x3aa>
 8005f78:	a201      	add	r2, pc, #4	; (adr r2, 8005f80 <UART_SetConfig+0x360>)
 8005f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f7e:	bf00      	nop
 8005f80:	08005fa5 	.word	0x08005fa5
 8005f84:	08005fad 	.word	0x08005fad
 8005f88:	08005fb5 	.word	0x08005fb5
 8005f8c:	08005fcb 	.word	0x08005fcb
 8005f90:	08005fbb 	.word	0x08005fbb
 8005f94:	08005fcb 	.word	0x08005fcb
 8005f98:	08005fcb 	.word	0x08005fcb
 8005f9c:	08005fcb 	.word	0x08005fcb
 8005fa0:	08005fc3 	.word	0x08005fc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fa4:	f7fe f868 	bl	8004078 <HAL_RCC_GetPCLK1Freq>
 8005fa8:	61b8      	str	r0, [r7, #24]
        break;
 8005faa:	e013      	b.n	8005fd4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fac:	f7fe f878 	bl	80040a0 <HAL_RCC_GetPCLK2Freq>
 8005fb0:	61b8      	str	r0, [r7, #24]
        break;
 8005fb2:	e00f      	b.n	8005fd4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fb4:	4b4b      	ldr	r3, [pc, #300]	; (80060e4 <UART_SetConfig+0x4c4>)
 8005fb6:	61bb      	str	r3, [r7, #24]
        break;
 8005fb8:	e00c      	b.n	8005fd4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fba:	f7fd ff4d 	bl	8003e58 <HAL_RCC_GetSysClockFreq>
 8005fbe:	61b8      	str	r0, [r7, #24]
        break;
 8005fc0:	e008      	b.n	8005fd4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fc6:	61bb      	str	r3, [r7, #24]
        break;
 8005fc8:	e004      	b.n	8005fd4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	77bb      	strb	r3, [r7, #30]
        break;
 8005fd2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d074      	beq.n	80060c4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	005a      	lsls	r2, r3, #1
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	085b      	lsrs	r3, r3, #1
 8005fe4:	441a      	add	r2, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	2b0f      	cmp	r3, #15
 8005ff4:	d916      	bls.n	8006024 <UART_SetConfig+0x404>
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ffc:	d212      	bcs.n	8006024 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	b29b      	uxth	r3, r3
 8006002:	f023 030f 	bic.w	r3, r3, #15
 8006006:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	085b      	lsrs	r3, r3, #1
 800600c:	b29b      	uxth	r3, r3
 800600e:	f003 0307 	and.w	r3, r3, #7
 8006012:	b29a      	uxth	r2, r3
 8006014:	89fb      	ldrh	r3, [r7, #14]
 8006016:	4313      	orrs	r3, r2
 8006018:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	89fa      	ldrh	r2, [r7, #14]
 8006020:	60da      	str	r2, [r3, #12]
 8006022:	e04f      	b.n	80060c4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	77bb      	strb	r3, [r7, #30]
 8006028:	e04c      	b.n	80060c4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800602a:	7ffb      	ldrb	r3, [r7, #31]
 800602c:	2b08      	cmp	r3, #8
 800602e:	d828      	bhi.n	8006082 <UART_SetConfig+0x462>
 8006030:	a201      	add	r2, pc, #4	; (adr r2, 8006038 <UART_SetConfig+0x418>)
 8006032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006036:	bf00      	nop
 8006038:	0800605d 	.word	0x0800605d
 800603c:	08006065 	.word	0x08006065
 8006040:	0800606d 	.word	0x0800606d
 8006044:	08006083 	.word	0x08006083
 8006048:	08006073 	.word	0x08006073
 800604c:	08006083 	.word	0x08006083
 8006050:	08006083 	.word	0x08006083
 8006054:	08006083 	.word	0x08006083
 8006058:	0800607b 	.word	0x0800607b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800605c:	f7fe f80c 	bl	8004078 <HAL_RCC_GetPCLK1Freq>
 8006060:	61b8      	str	r0, [r7, #24]
        break;
 8006062:	e013      	b.n	800608c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006064:	f7fe f81c 	bl	80040a0 <HAL_RCC_GetPCLK2Freq>
 8006068:	61b8      	str	r0, [r7, #24]
        break;
 800606a:	e00f      	b.n	800608c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800606c:	4b1d      	ldr	r3, [pc, #116]	; (80060e4 <UART_SetConfig+0x4c4>)
 800606e:	61bb      	str	r3, [r7, #24]
        break;
 8006070:	e00c      	b.n	800608c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006072:	f7fd fef1 	bl	8003e58 <HAL_RCC_GetSysClockFreq>
 8006076:	61b8      	str	r0, [r7, #24]
        break;
 8006078:	e008      	b.n	800608c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800607a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800607e:	61bb      	str	r3, [r7, #24]
        break;
 8006080:	e004      	b.n	800608c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006082:	2300      	movs	r3, #0
 8006084:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	77bb      	strb	r3, [r7, #30]
        break;
 800608a:	bf00      	nop
    }

    if (pclk != 0U)
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d018      	beq.n	80060c4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	085a      	lsrs	r2, r3, #1
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	441a      	add	r2, r3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	2b0f      	cmp	r3, #15
 80060aa:	d909      	bls.n	80060c0 <UART_SetConfig+0x4a0>
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060b2:	d205      	bcs.n	80060c0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	b29a      	uxth	r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	60da      	str	r2, [r3, #12]
 80060be:	e001      	b.n	80060c4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80060d0:	7fbb      	ldrb	r3, [r7, #30]
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3720      	adds	r7, #32
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	40007c00 	.word	0x40007c00
 80060e0:	40023800 	.word	0x40023800
 80060e4:	00f42400 	.word	0x00f42400

080060e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f4:	f003 0308 	and.w	r3, r3, #8
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d00a      	beq.n	8006112 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	430a      	orrs	r2, r1
 8006110:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006116:	f003 0301 	and.w	r3, r3, #1
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00a      	beq.n	8006134 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	430a      	orrs	r2, r1
 8006132:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006138:	f003 0302 	and.w	r3, r3, #2
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00a      	beq.n	8006156 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	430a      	orrs	r2, r1
 8006154:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615a:	f003 0304 	and.w	r3, r3, #4
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00a      	beq.n	8006178 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	430a      	orrs	r2, r1
 8006176:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617c:	f003 0310 	and.w	r3, r3, #16
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00a      	beq.n	800619a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	430a      	orrs	r2, r1
 8006198:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619e:	f003 0320 	and.w	r3, r3, #32
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d00a      	beq.n	80061bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	430a      	orrs	r2, r1
 80061ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d01a      	beq.n	80061fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	430a      	orrs	r2, r1
 80061dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061e6:	d10a      	bne.n	80061fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	430a      	orrs	r2, r1
 80061fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00a      	beq.n	8006220 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	430a      	orrs	r2, r1
 800621e:	605a      	str	r2, [r3, #4]
  }
}
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b098      	sub	sp, #96	; 0x60
 8006230:	af02      	add	r7, sp, #8
 8006232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800623c:	f7fb fc72 	bl	8001b24 <HAL_GetTick>
 8006240:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0308 	and.w	r3, r3, #8
 800624c:	2b08      	cmp	r3, #8
 800624e:	d12e      	bne.n	80062ae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006250:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006254:	9300      	str	r3, [sp, #0]
 8006256:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006258:	2200      	movs	r2, #0
 800625a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f88c 	bl	800637c <UART_WaitOnFlagUntilTimeout>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d021      	beq.n	80062ae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006272:	e853 3f00 	ldrex	r3, [r3]
 8006276:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800627a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800627e:	653b      	str	r3, [r7, #80]	; 0x50
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	461a      	mov	r2, r3
 8006286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006288:	647b      	str	r3, [r7, #68]	; 0x44
 800628a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800628e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006290:	e841 2300 	strex	r3, r2, [r1]
 8006294:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006298:	2b00      	cmp	r3, #0
 800629a:	d1e6      	bne.n	800626a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2220      	movs	r2, #32
 80062a0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e062      	b.n	8006374 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0304 	and.w	r3, r3, #4
 80062b8:	2b04      	cmp	r3, #4
 80062ba:	d149      	bne.n	8006350 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062c0:	9300      	str	r3, [sp, #0]
 80062c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062c4:	2200      	movs	r2, #0
 80062c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 f856 	bl	800637c <UART_WaitOnFlagUntilTimeout>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d03c      	beq.n	8006350 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062de:	e853 3f00 	ldrex	r3, [r3]
 80062e2:	623b      	str	r3, [r7, #32]
   return(result);
 80062e4:	6a3b      	ldr	r3, [r7, #32]
 80062e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	461a      	mov	r2, r3
 80062f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062f4:	633b      	str	r3, [r7, #48]	; 0x30
 80062f6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062fc:	e841 2300 	strex	r3, r2, [r1]
 8006300:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006304:	2b00      	cmp	r3, #0
 8006306:	d1e6      	bne.n	80062d6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	3308      	adds	r3, #8
 800630e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	e853 3f00 	ldrex	r3, [r3]
 8006316:	60fb      	str	r3, [r7, #12]
   return(result);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f023 0301 	bic.w	r3, r3, #1
 800631e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	3308      	adds	r3, #8
 8006326:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006328:	61fa      	str	r2, [r7, #28]
 800632a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632c:	69b9      	ldr	r1, [r7, #24]
 800632e:	69fa      	ldr	r2, [r7, #28]
 8006330:	e841 2300 	strex	r3, r2, [r1]
 8006334:	617b      	str	r3, [r7, #20]
   return(result);
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1e5      	bne.n	8006308 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2220      	movs	r2, #32
 8006340:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800634c:	2303      	movs	r3, #3
 800634e:	e011      	b.n	8006374 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2220      	movs	r2, #32
 8006354:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2220      	movs	r2, #32
 800635a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006372:	2300      	movs	r3, #0
}
 8006374:	4618      	mov	r0, r3
 8006376:	3758      	adds	r7, #88	; 0x58
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	603b      	str	r3, [r7, #0]
 8006388:	4613      	mov	r3, r2
 800638a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800638c:	e04f      	b.n	800642e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006394:	d04b      	beq.n	800642e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006396:	f7fb fbc5 	bl	8001b24 <HAL_GetTick>
 800639a:	4602      	mov	r2, r0
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	69ba      	ldr	r2, [r7, #24]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d302      	bcc.n	80063ac <UART_WaitOnFlagUntilTimeout+0x30>
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d101      	bne.n	80063b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80063ac:	2303      	movs	r3, #3
 80063ae:	e04e      	b.n	800644e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 0304 	and.w	r3, r3, #4
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d037      	beq.n	800642e <UART_WaitOnFlagUntilTimeout+0xb2>
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	2b80      	cmp	r3, #128	; 0x80
 80063c2:	d034      	beq.n	800642e <UART_WaitOnFlagUntilTimeout+0xb2>
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	2b40      	cmp	r3, #64	; 0x40
 80063c8:	d031      	beq.n	800642e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	69db      	ldr	r3, [r3, #28]
 80063d0:	f003 0308 	and.w	r3, r3, #8
 80063d4:	2b08      	cmp	r3, #8
 80063d6:	d110      	bne.n	80063fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2208      	movs	r2, #8
 80063de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f000 f838 	bl	8006456 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2208      	movs	r2, #8
 80063ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e029      	b.n	800644e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	69db      	ldr	r3, [r3, #28]
 8006400:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006404:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006408:	d111      	bne.n	800642e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006412:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006414:	68f8      	ldr	r0, [r7, #12]
 8006416:	f000 f81e 	bl	8006456 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2220      	movs	r2, #32
 800641e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e00f      	b.n	800644e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	69da      	ldr	r2, [r3, #28]
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	4013      	ands	r3, r2
 8006438:	68ba      	ldr	r2, [r7, #8]
 800643a:	429a      	cmp	r2, r3
 800643c:	bf0c      	ite	eq
 800643e:	2301      	moveq	r3, #1
 8006440:	2300      	movne	r3, #0
 8006442:	b2db      	uxtb	r3, r3
 8006444:	461a      	mov	r2, r3
 8006446:	79fb      	ldrb	r3, [r7, #7]
 8006448:	429a      	cmp	r2, r3
 800644a:	d0a0      	beq.n	800638e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3710      	adds	r7, #16
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}

08006456 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006456:	b480      	push	{r7}
 8006458:	b095      	sub	sp, #84	; 0x54
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006466:	e853 3f00 	ldrex	r3, [r3]
 800646a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800646c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006472:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	461a      	mov	r2, r3
 800647a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800647c:	643b      	str	r3, [r7, #64]	; 0x40
 800647e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006480:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006482:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006484:	e841 2300 	strex	r3, r2, [r1]
 8006488:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800648a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800648c:	2b00      	cmp	r3, #0
 800648e:	d1e6      	bne.n	800645e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	3308      	adds	r3, #8
 8006496:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006498:	6a3b      	ldr	r3, [r7, #32]
 800649a:	e853 3f00 	ldrex	r3, [r3]
 800649e:	61fb      	str	r3, [r7, #28]
   return(result);
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	f023 0301 	bic.w	r3, r3, #1
 80064a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	3308      	adds	r3, #8
 80064ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064b8:	e841 2300 	strex	r3, r2, [r1]
 80064bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d1e5      	bne.n	8006490 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d118      	bne.n	80064fe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	e853 3f00 	ldrex	r3, [r3]
 80064d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	f023 0310 	bic.w	r3, r3, #16
 80064e0:	647b      	str	r3, [r7, #68]	; 0x44
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	461a      	mov	r2, r3
 80064e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064ea:	61bb      	str	r3, [r7, #24]
 80064ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ee:	6979      	ldr	r1, [r7, #20]
 80064f0:	69ba      	ldr	r2, [r7, #24]
 80064f2:	e841 2300 	strex	r3, r2, [r1]
 80064f6:	613b      	str	r3, [r7, #16]
   return(result);
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1e6      	bne.n	80064cc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2220      	movs	r2, #32
 8006502:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006512:	bf00      	nop
 8006514:	3754      	adds	r7, #84	; 0x54
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr

0800651e <MotorControl_Init>:
#include "motor_control.h"
#include "string.h"
#include "stdlib.h"

void MotorControl_Init(MotorControl* motor, TIM_HandleTypeDef* timer, uint8_t channel_1, uint8_t channel_2) {
 800651e:	b580      	push	{r7, lr}
 8006520:	b084      	sub	sp, #16
 8006522:	af00      	add	r7, sp, #0
 8006524:	60f8      	str	r0, [r7, #12]
 8006526:	60b9      	str	r1, [r7, #8]
 8006528:	4611      	mov	r1, r2
 800652a:	461a      	mov	r2, r3
 800652c:	460b      	mov	r3, r1
 800652e:	71fb      	strb	r3, [r7, #7]
 8006530:	4613      	mov	r3, r2
 8006532:	71bb      	strb	r3, [r7, #6]
    motor->htim = timer;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	68ba      	ldr	r2, [r7, #8]
 8006538:	601a      	str	r2, [r3, #0]
    motor->channel_1 = channel_1;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	79fa      	ldrb	r2, [r7, #7]
 800653e:	711a      	strb	r2, [r3, #4]
    motor->channel_2 = channel_2;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	79ba      	ldrb	r2, [r7, #6]
 8006544:	715a      	strb	r2, [r3, #5]
    HAL_TIM_PWM_Start(motor->htim, motor->channel_1);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	791b      	ldrb	r3, [r3, #4]
 800654e:	4619      	mov	r1, r3
 8006550:	4610      	mov	r0, r2
 8006552:	f7fe fa8f 	bl	8004a74 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(motor->htim, motor->channel_2);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	795b      	ldrb	r3, [r3, #5]
 800655e:	4619      	mov	r1, r3
 8006560:	4610      	mov	r0, r2
 8006562:	f7fe fa87 	bl	8004a74 <HAL_TIM_PWM_Start>
}
 8006566:	bf00      	nop
 8006568:	3710      	adds	r7, #16
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
	...

08006570 <MotorControl_SetSpeed>:

void MotorControl_SetSpeed(MotorControl* motor, TIM_HandleTypeDef* htim, float duty_cycle) {
 8006570:	b480      	push	{r7}
 8006572:	b087      	sub	sp, #28
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	ed87 0a01 	vstr	s0, [r7, #4]
	float speed = 32767 * duty_cycle;
 800657e:	edd7 7a01 	vldr	s15, [r7, #4]
 8006582:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8006628 <MotorControl_SetSpeed+0xb8>
 8006586:	ee67 7a87 	vmul.f32	s15, s15, s14
 800658a:	edc7 7a05 	vstr	s15, [r7, #20]
	float input_speed = abs(speed);
 800658e:	edd7 7a05 	vldr	s15, [r7, #20]
 8006592:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006596:	ee17 3a90 	vmov	r3, s15
 800659a:	2b00      	cmp	r3, #0
 800659c:	bfb8      	it	lt
 800659e:	425b      	neglt	r3, r3
 80065a0:	ee07 3a90 	vmov	s15, r3
 80065a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065a8:	edc7 7a04 	vstr	s15, [r7, #16]

	if (speed > 0)
 80065ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80065b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80065b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065b8:	dd0f      	ble.n	80065da <MotorControl_SetSpeed+0x6a>
	{
		motor->htim->Instance->CCR1 = input_speed;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80065c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065c8:	ee17 2a90 	vmov	r2, s15
 80065cc:	635a      	str	r2, [r3, #52]	; 0x34
		motor->htim->Instance->CCR3 = 0;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2200      	movs	r2, #0
 80065d6:	63da      	str	r2, [r3, #60]	; 0x3c
	else {
		motor->htim->Instance->CCR1 = 0;
		motor->htim->Instance->CCR3 = 0;
	}

}
 80065d8:	e020      	b.n	800661c <MotorControl_SetSpeed+0xac>
	else if (speed < 0)
 80065da:	edd7 7a05 	vldr	s15, [r7, #20]
 80065de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80065e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065e6:	d50f      	bpl.n	8006608 <MotorControl_SetSpeed+0x98>
		motor->htim->Instance->CCR1 = 0;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2200      	movs	r2, #0
 80065f0:	635a      	str	r2, [r3, #52]	; 0x34
		motor->htim->Instance->CCR3 = input_speed;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80065fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006600:	ee17 2a90 	vmov	r2, s15
 8006604:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006606:	e009      	b.n	800661c <MotorControl_SetSpeed+0xac>
		motor->htim->Instance->CCR1 = 0;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2200      	movs	r2, #0
 8006610:	635a      	str	r2, [r3, #52]	; 0x34
		motor->htim->Instance->CCR3 = 0;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2200      	movs	r2, #0
 800661a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800661c:	bf00      	nop
 800661e:	371c      	adds	r7, #28
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr
 8006628:	46fffe00 	.word	0x46fffe00

0800662c <ugv_servoInitServo>:
#include "ugv_servo.h"


void ugv_servoInitServo(ugvServo_t *servoM){
 800662c:	b580      	push	{r7, lr}
 800662e:	b082      	sub	sp, #8
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(servoM->timerInstance, servoM->timerCh);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	891b      	ldrh	r3, [r3, #8]
 800663c:	4619      	mov	r1, r3
 800663e:	4610      	mov	r0, r2
 8006640:	f7fe fa18 	bl	8004a74 <HAL_TIM_PWM_Start>

	servoM->maxPeriod = (int) (servoM->timerARR)*(servoM->maxPulse/servoM->timerPeriod);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	895b      	ldrh	r3, [r3, #10]
 8006648:	ee07 3a90 	vmov	s15, r3
 800664c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	ed93 6a04 	vldr	s12, [r3, #16]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	edd3 6a05 	vldr	s13, [r3, #20]
 800665c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8006660:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006664:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006668:	ee17 2a90 	vmov	r2, s15
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	61da      	str	r2, [r3, #28]
	servoM->minPeriod = (int) (servoM->timerARR)*(servoM->minPulse/servoM->timerPeriod);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	895b      	ldrh	r3, [r3, #10]
 8006674:	ee07 3a90 	vmov	s15, r3
 8006678:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	ed93 6a03 	vldr	s12, [r3, #12]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	edd3 6a05 	vldr	s13, [r3, #20]
 8006688:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800668c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006690:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006694:	ee17 2a90 	vmov	r2, s15
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	619a      	str	r2, [r3, #24]

	ugv_servoSetAngle(servoM, servoM->travelOffset);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80066a2:	eeb0 0a67 	vmov.f32	s0, s15
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 f804 	bl	80066b4 <ugv_servoSetAngle>
}
 80066ac:	bf00      	nop
 80066ae:	3708      	adds	r7, #8
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <ugv_servoSetAngle>:
/**
 *	Make the servo move to a specific angle
 * @param s
 * @param angle
 */
void ugv_servoSetAngle(ugvServo_t *servoM, float angle) {
 80066b4:	b480      	push	{r7}
 80066b6:	b085      	sub	sp, #20
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	ed87 0a00 	vstr	s0, [r7]
	float setAngle = angle + servoM->travelOffset;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80066c6:	ed97 7a00 	vldr	s14, [r7]
 80066ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066ce:	edc7 7a03 	vstr	s15, [r7, #12]

	if ((setAngle) > servoM->maxLimit) {
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80066d8:	ed97 7a03 	vldr	s14, [r7, #12]
 80066dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80066e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066e4:	dd2d      	ble.n	8006742 <ugv_servoSetAngle+0x8e>
		*servoM->timerCCRX = (long unsigned int) ((((servoM->maxLimit)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
				* (servoM->maxPeriod - servoM->minPeriod))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	69da      	ldr	r2, [r3, #28]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	ee07 3a90 	vmov	s15, r3
 80066fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80066fe:	ee67 6a27 	vmul.f32	s13, s14, s15
				/ (servoM->travelAngle)) + servoM->minPeriod);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8006708:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	699b      	ldr	r3, [r3, #24]
 8006710:	ee07 3a90 	vmov	s15, r3
 8006714:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006718:	ee77 7a27 	vadd.f32	s15, s14, s15
		*servoM->timerCCRX = (long unsigned int) ((((servoM->maxLimit)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006724:	ee17 2a90 	vmov	r2, s15
 8006728:	601a      	str	r2, [r3, #0]

		servoM->setPointAngle = servoM->maxLimit - servoM->travelOffset;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8006736:	ee77 7a67 	vsub.f32	s15, s14, s15
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	edc3 7a08 	vstr	s15, [r3, #32]
				* (servoM->maxPeriod - servoM->minPeriod))
				/ (servoM->travelAngle)) + servoM->minPeriod);
		servoM->setPointAngle = angle;
	}

}
 8006740:	e054      	b.n	80067ec <ugv_servoSetAngle+0x138>
	} else if ((setAngle) < servoM->minLimit) {
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8006748:	ed97 7a03 	vldr	s14, [r7, #12]
 800674c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006754:	d526      	bpl.n	80067a4 <ugv_servoSetAngle+0xf0>
		*servoM->timerCCRX = (long unsigned int) ((((servoM->minLimit)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
				* (servoM->maxPeriod - servoM->minPeriod))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	69da      	ldr	r2, [r3, #28]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	699b      	ldr	r3, [r3, #24]
 8006764:	1ad3      	subs	r3, r2, r3
 8006766:	ee07 3a90 	vmov	s15, r3
 800676a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800676e:	ee67 6a27 	vmul.f32	s13, s14, s15
				/ (servoM->travelAngle)) + servoM->minPeriod);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8006778:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	699b      	ldr	r3, [r3, #24]
 8006780:	ee07 3a90 	vmov	s15, r3
 8006784:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006788:	ee77 7a27 	vadd.f32	s15, s14, s15
		*servoM->timerCCRX = (long unsigned int) ((((servoM->minLimit)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006794:	ee17 2a90 	vmov	r2, s15
 8006798:	601a      	str	r2, [r3, #0]
		servoM->setPointAngle = servoM->minLimit;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	621a      	str	r2, [r3, #32]
}
 80067a2:	e023      	b.n	80067ec <ugv_servoSetAngle+0x138>
				* (servoM->maxPeriod - servoM->minPeriod))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	69da      	ldr	r2, [r3, #28]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	699b      	ldr	r3, [r3, #24]
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	ee07 3a90 	vmov	s15, r3
 80067b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80067b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80067ba:	ee67 6a27 	vmul.f32	s13, s14, s15
				/ (servoM->travelAngle)) + servoM->minPeriod);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80067c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	699b      	ldr	r3, [r3, #24]
 80067cc:	ee07 3a90 	vmov	s15, r3
 80067d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80067d4:	ee77 7a27 	vadd.f32	s15, s14, s15
		*servoM->timerCCRX = (long unsigned int) ((((setAngle)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067e0:	ee17 2a90 	vmov	r2, s15
 80067e4:	601a      	str	r2, [r3, #0]
		servoM->setPointAngle = angle;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	683a      	ldr	r2, [r7, #0]
 80067ea:	621a      	str	r2, [r3, #32]
}
 80067ec:	bf00      	nop
 80067ee:	3714      	adds	r7, #20
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80067fe:	4b87      	ldr	r3, [pc, #540]	; (8006a1c <MX_LWIP_Init+0x224>)
 8006800:	22c0      	movs	r2, #192	; 0xc0
 8006802:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8006804:	4b85      	ldr	r3, [pc, #532]	; (8006a1c <MX_LWIP_Init+0x224>)
 8006806:	22a8      	movs	r2, #168	; 0xa8
 8006808:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 20;
 800680a:	4b84      	ldr	r3, [pc, #528]	; (8006a1c <MX_LWIP_Init+0x224>)
 800680c:	2214      	movs	r2, #20
 800680e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 21;
 8006810:	4b82      	ldr	r3, [pc, #520]	; (8006a1c <MX_LWIP_Init+0x224>)
 8006812:	2215      	movs	r2, #21
 8006814:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8006816:	4b82      	ldr	r3, [pc, #520]	; (8006a20 <MX_LWIP_Init+0x228>)
 8006818:	22ff      	movs	r2, #255	; 0xff
 800681a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800681c:	4b80      	ldr	r3, [pc, #512]	; (8006a20 <MX_LWIP_Init+0x228>)
 800681e:	22ff      	movs	r2, #255	; 0xff
 8006820:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8006822:	4b7f      	ldr	r3, [pc, #508]	; (8006a20 <MX_LWIP_Init+0x228>)
 8006824:	22ff      	movs	r2, #255	; 0xff
 8006826:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8006828:	4b7d      	ldr	r3, [pc, #500]	; (8006a20 <MX_LWIP_Init+0x228>)
 800682a:	2200      	movs	r2, #0
 800682c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800682e:	4b7d      	ldr	r3, [pc, #500]	; (8006a24 <MX_LWIP_Init+0x22c>)
 8006830:	22c0      	movs	r2, #192	; 0xc0
 8006832:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8006834:	4b7b      	ldr	r3, [pc, #492]	; (8006a24 <MX_LWIP_Init+0x22c>)
 8006836:	22a8      	movs	r2, #168	; 0xa8
 8006838:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 20;
 800683a:	4b7a      	ldr	r3, [pc, #488]	; (8006a24 <MX_LWIP_Init+0x22c>)
 800683c:	2214      	movs	r2, #20
 800683e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8006840:	4b78      	ldr	r3, [pc, #480]	; (8006a24 <MX_LWIP_Init+0x22c>)
 8006842:	2201      	movs	r2, #1
 8006844:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8006846:	f000 fd11 	bl	800726c <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800684a:	4b74      	ldr	r3, [pc, #464]	; (8006a1c <MX_LWIP_Init+0x224>)
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	061a      	lsls	r2, r3, #24
 8006850:	4b72      	ldr	r3, [pc, #456]	; (8006a1c <MX_LWIP_Init+0x224>)
 8006852:	785b      	ldrb	r3, [r3, #1]
 8006854:	041b      	lsls	r3, r3, #16
 8006856:	431a      	orrs	r2, r3
 8006858:	4b70      	ldr	r3, [pc, #448]	; (8006a1c <MX_LWIP_Init+0x224>)
 800685a:	789b      	ldrb	r3, [r3, #2]
 800685c:	021b      	lsls	r3, r3, #8
 800685e:	4313      	orrs	r3, r2
 8006860:	4a6e      	ldr	r2, [pc, #440]	; (8006a1c <MX_LWIP_Init+0x224>)
 8006862:	78d2      	ldrb	r2, [r2, #3]
 8006864:	4313      	orrs	r3, r2
 8006866:	061a      	lsls	r2, r3, #24
 8006868:	4b6c      	ldr	r3, [pc, #432]	; (8006a1c <MX_LWIP_Init+0x224>)
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	0619      	lsls	r1, r3, #24
 800686e:	4b6b      	ldr	r3, [pc, #428]	; (8006a1c <MX_LWIP_Init+0x224>)
 8006870:	785b      	ldrb	r3, [r3, #1]
 8006872:	041b      	lsls	r3, r3, #16
 8006874:	4319      	orrs	r1, r3
 8006876:	4b69      	ldr	r3, [pc, #420]	; (8006a1c <MX_LWIP_Init+0x224>)
 8006878:	789b      	ldrb	r3, [r3, #2]
 800687a:	021b      	lsls	r3, r3, #8
 800687c:	430b      	orrs	r3, r1
 800687e:	4967      	ldr	r1, [pc, #412]	; (8006a1c <MX_LWIP_Init+0x224>)
 8006880:	78c9      	ldrb	r1, [r1, #3]
 8006882:	430b      	orrs	r3, r1
 8006884:	021b      	lsls	r3, r3, #8
 8006886:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800688a:	431a      	orrs	r2, r3
 800688c:	4b63      	ldr	r3, [pc, #396]	; (8006a1c <MX_LWIP_Init+0x224>)
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	0619      	lsls	r1, r3, #24
 8006892:	4b62      	ldr	r3, [pc, #392]	; (8006a1c <MX_LWIP_Init+0x224>)
 8006894:	785b      	ldrb	r3, [r3, #1]
 8006896:	041b      	lsls	r3, r3, #16
 8006898:	4319      	orrs	r1, r3
 800689a:	4b60      	ldr	r3, [pc, #384]	; (8006a1c <MX_LWIP_Init+0x224>)
 800689c:	789b      	ldrb	r3, [r3, #2]
 800689e:	021b      	lsls	r3, r3, #8
 80068a0:	430b      	orrs	r3, r1
 80068a2:	495e      	ldr	r1, [pc, #376]	; (8006a1c <MX_LWIP_Init+0x224>)
 80068a4:	78c9      	ldrb	r1, [r1, #3]
 80068a6:	430b      	orrs	r3, r1
 80068a8:	0a1b      	lsrs	r3, r3, #8
 80068aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80068ae:	431a      	orrs	r2, r3
 80068b0:	4b5a      	ldr	r3, [pc, #360]	; (8006a1c <MX_LWIP_Init+0x224>)
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	0619      	lsls	r1, r3, #24
 80068b6:	4b59      	ldr	r3, [pc, #356]	; (8006a1c <MX_LWIP_Init+0x224>)
 80068b8:	785b      	ldrb	r3, [r3, #1]
 80068ba:	041b      	lsls	r3, r3, #16
 80068bc:	4319      	orrs	r1, r3
 80068be:	4b57      	ldr	r3, [pc, #348]	; (8006a1c <MX_LWIP_Init+0x224>)
 80068c0:	789b      	ldrb	r3, [r3, #2]
 80068c2:	021b      	lsls	r3, r3, #8
 80068c4:	430b      	orrs	r3, r1
 80068c6:	4955      	ldr	r1, [pc, #340]	; (8006a1c <MX_LWIP_Init+0x224>)
 80068c8:	78c9      	ldrb	r1, [r1, #3]
 80068ca:	430b      	orrs	r3, r1
 80068cc:	0e1b      	lsrs	r3, r3, #24
 80068ce:	4313      	orrs	r3, r2
 80068d0:	4a55      	ldr	r2, [pc, #340]	; (8006a28 <MX_LWIP_Init+0x230>)
 80068d2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80068d4:	4b52      	ldr	r3, [pc, #328]	; (8006a20 <MX_LWIP_Init+0x228>)
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	061a      	lsls	r2, r3, #24
 80068da:	4b51      	ldr	r3, [pc, #324]	; (8006a20 <MX_LWIP_Init+0x228>)
 80068dc:	785b      	ldrb	r3, [r3, #1]
 80068de:	041b      	lsls	r3, r3, #16
 80068e0:	431a      	orrs	r2, r3
 80068e2:	4b4f      	ldr	r3, [pc, #316]	; (8006a20 <MX_LWIP_Init+0x228>)
 80068e4:	789b      	ldrb	r3, [r3, #2]
 80068e6:	021b      	lsls	r3, r3, #8
 80068e8:	4313      	orrs	r3, r2
 80068ea:	4a4d      	ldr	r2, [pc, #308]	; (8006a20 <MX_LWIP_Init+0x228>)
 80068ec:	78d2      	ldrb	r2, [r2, #3]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	061a      	lsls	r2, r3, #24
 80068f2:	4b4b      	ldr	r3, [pc, #300]	; (8006a20 <MX_LWIP_Init+0x228>)
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	0619      	lsls	r1, r3, #24
 80068f8:	4b49      	ldr	r3, [pc, #292]	; (8006a20 <MX_LWIP_Init+0x228>)
 80068fa:	785b      	ldrb	r3, [r3, #1]
 80068fc:	041b      	lsls	r3, r3, #16
 80068fe:	4319      	orrs	r1, r3
 8006900:	4b47      	ldr	r3, [pc, #284]	; (8006a20 <MX_LWIP_Init+0x228>)
 8006902:	789b      	ldrb	r3, [r3, #2]
 8006904:	021b      	lsls	r3, r3, #8
 8006906:	430b      	orrs	r3, r1
 8006908:	4945      	ldr	r1, [pc, #276]	; (8006a20 <MX_LWIP_Init+0x228>)
 800690a:	78c9      	ldrb	r1, [r1, #3]
 800690c:	430b      	orrs	r3, r1
 800690e:	021b      	lsls	r3, r3, #8
 8006910:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006914:	431a      	orrs	r2, r3
 8006916:	4b42      	ldr	r3, [pc, #264]	; (8006a20 <MX_LWIP_Init+0x228>)
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	0619      	lsls	r1, r3, #24
 800691c:	4b40      	ldr	r3, [pc, #256]	; (8006a20 <MX_LWIP_Init+0x228>)
 800691e:	785b      	ldrb	r3, [r3, #1]
 8006920:	041b      	lsls	r3, r3, #16
 8006922:	4319      	orrs	r1, r3
 8006924:	4b3e      	ldr	r3, [pc, #248]	; (8006a20 <MX_LWIP_Init+0x228>)
 8006926:	789b      	ldrb	r3, [r3, #2]
 8006928:	021b      	lsls	r3, r3, #8
 800692a:	430b      	orrs	r3, r1
 800692c:	493c      	ldr	r1, [pc, #240]	; (8006a20 <MX_LWIP_Init+0x228>)
 800692e:	78c9      	ldrb	r1, [r1, #3]
 8006930:	430b      	orrs	r3, r1
 8006932:	0a1b      	lsrs	r3, r3, #8
 8006934:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006938:	431a      	orrs	r2, r3
 800693a:	4b39      	ldr	r3, [pc, #228]	; (8006a20 <MX_LWIP_Init+0x228>)
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	0619      	lsls	r1, r3, #24
 8006940:	4b37      	ldr	r3, [pc, #220]	; (8006a20 <MX_LWIP_Init+0x228>)
 8006942:	785b      	ldrb	r3, [r3, #1]
 8006944:	041b      	lsls	r3, r3, #16
 8006946:	4319      	orrs	r1, r3
 8006948:	4b35      	ldr	r3, [pc, #212]	; (8006a20 <MX_LWIP_Init+0x228>)
 800694a:	789b      	ldrb	r3, [r3, #2]
 800694c:	021b      	lsls	r3, r3, #8
 800694e:	430b      	orrs	r3, r1
 8006950:	4933      	ldr	r1, [pc, #204]	; (8006a20 <MX_LWIP_Init+0x228>)
 8006952:	78c9      	ldrb	r1, [r1, #3]
 8006954:	430b      	orrs	r3, r1
 8006956:	0e1b      	lsrs	r3, r3, #24
 8006958:	4313      	orrs	r3, r2
 800695a:	4a34      	ldr	r2, [pc, #208]	; (8006a2c <MX_LWIP_Init+0x234>)
 800695c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800695e:	4b31      	ldr	r3, [pc, #196]	; (8006a24 <MX_LWIP_Init+0x22c>)
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	061a      	lsls	r2, r3, #24
 8006964:	4b2f      	ldr	r3, [pc, #188]	; (8006a24 <MX_LWIP_Init+0x22c>)
 8006966:	785b      	ldrb	r3, [r3, #1]
 8006968:	041b      	lsls	r3, r3, #16
 800696a:	431a      	orrs	r2, r3
 800696c:	4b2d      	ldr	r3, [pc, #180]	; (8006a24 <MX_LWIP_Init+0x22c>)
 800696e:	789b      	ldrb	r3, [r3, #2]
 8006970:	021b      	lsls	r3, r3, #8
 8006972:	4313      	orrs	r3, r2
 8006974:	4a2b      	ldr	r2, [pc, #172]	; (8006a24 <MX_LWIP_Init+0x22c>)
 8006976:	78d2      	ldrb	r2, [r2, #3]
 8006978:	4313      	orrs	r3, r2
 800697a:	061a      	lsls	r2, r3, #24
 800697c:	4b29      	ldr	r3, [pc, #164]	; (8006a24 <MX_LWIP_Init+0x22c>)
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	0619      	lsls	r1, r3, #24
 8006982:	4b28      	ldr	r3, [pc, #160]	; (8006a24 <MX_LWIP_Init+0x22c>)
 8006984:	785b      	ldrb	r3, [r3, #1]
 8006986:	041b      	lsls	r3, r3, #16
 8006988:	4319      	orrs	r1, r3
 800698a:	4b26      	ldr	r3, [pc, #152]	; (8006a24 <MX_LWIP_Init+0x22c>)
 800698c:	789b      	ldrb	r3, [r3, #2]
 800698e:	021b      	lsls	r3, r3, #8
 8006990:	430b      	orrs	r3, r1
 8006992:	4924      	ldr	r1, [pc, #144]	; (8006a24 <MX_LWIP_Init+0x22c>)
 8006994:	78c9      	ldrb	r1, [r1, #3]
 8006996:	430b      	orrs	r3, r1
 8006998:	021b      	lsls	r3, r3, #8
 800699a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800699e:	431a      	orrs	r2, r3
 80069a0:	4b20      	ldr	r3, [pc, #128]	; (8006a24 <MX_LWIP_Init+0x22c>)
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	0619      	lsls	r1, r3, #24
 80069a6:	4b1f      	ldr	r3, [pc, #124]	; (8006a24 <MX_LWIP_Init+0x22c>)
 80069a8:	785b      	ldrb	r3, [r3, #1]
 80069aa:	041b      	lsls	r3, r3, #16
 80069ac:	4319      	orrs	r1, r3
 80069ae:	4b1d      	ldr	r3, [pc, #116]	; (8006a24 <MX_LWIP_Init+0x22c>)
 80069b0:	789b      	ldrb	r3, [r3, #2]
 80069b2:	021b      	lsls	r3, r3, #8
 80069b4:	430b      	orrs	r3, r1
 80069b6:	491b      	ldr	r1, [pc, #108]	; (8006a24 <MX_LWIP_Init+0x22c>)
 80069b8:	78c9      	ldrb	r1, [r1, #3]
 80069ba:	430b      	orrs	r3, r1
 80069bc:	0a1b      	lsrs	r3, r3, #8
 80069be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80069c2:	431a      	orrs	r2, r3
 80069c4:	4b17      	ldr	r3, [pc, #92]	; (8006a24 <MX_LWIP_Init+0x22c>)
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	0619      	lsls	r1, r3, #24
 80069ca:	4b16      	ldr	r3, [pc, #88]	; (8006a24 <MX_LWIP_Init+0x22c>)
 80069cc:	785b      	ldrb	r3, [r3, #1]
 80069ce:	041b      	lsls	r3, r3, #16
 80069d0:	4319      	orrs	r1, r3
 80069d2:	4b14      	ldr	r3, [pc, #80]	; (8006a24 <MX_LWIP_Init+0x22c>)
 80069d4:	789b      	ldrb	r3, [r3, #2]
 80069d6:	021b      	lsls	r3, r3, #8
 80069d8:	430b      	orrs	r3, r1
 80069da:	4912      	ldr	r1, [pc, #72]	; (8006a24 <MX_LWIP_Init+0x22c>)
 80069dc:	78c9      	ldrb	r1, [r1, #3]
 80069de:	430b      	orrs	r3, r1
 80069e0:	0e1b      	lsrs	r3, r3, #24
 80069e2:	4313      	orrs	r3, r2
 80069e4:	4a12      	ldr	r2, [pc, #72]	; (8006a30 <MX_LWIP_Init+0x238>)
 80069e6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80069e8:	4b12      	ldr	r3, [pc, #72]	; (8006a34 <MX_LWIP_Init+0x23c>)
 80069ea:	9302      	str	r3, [sp, #8]
 80069ec:	4b12      	ldr	r3, [pc, #72]	; (8006a38 <MX_LWIP_Init+0x240>)
 80069ee:	9301      	str	r3, [sp, #4]
 80069f0:	2300      	movs	r3, #0
 80069f2:	9300      	str	r3, [sp, #0]
 80069f4:	4b0e      	ldr	r3, [pc, #56]	; (8006a30 <MX_LWIP_Init+0x238>)
 80069f6:	4a0d      	ldr	r2, [pc, #52]	; (8006a2c <MX_LWIP_Init+0x234>)
 80069f8:	490b      	ldr	r1, [pc, #44]	; (8006a28 <MX_LWIP_Init+0x230>)
 80069fa:	4810      	ldr	r0, [pc, #64]	; (8006a3c <MX_LWIP_Init+0x244>)
 80069fc:	f001 f922 	bl	8007c44 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8006a00:	480e      	ldr	r0, [pc, #56]	; (8006a3c <MX_LWIP_Init+0x244>)
 8006a02:	f001 fad1 	bl	8007fa8 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8006a06:	480d      	ldr	r0, [pc, #52]	; (8006a3c <MX_LWIP_Init+0x244>)
 8006a08:	f001 fade 	bl	8007fc8 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8006a0c:	490c      	ldr	r1, [pc, #48]	; (8006a40 <MX_LWIP_Init+0x248>)
 8006a0e:	480b      	ldr	r0, [pc, #44]	; (8006a3c <MX_LWIP_Init+0x244>)
 8006a10:	f001 fbdc 	bl	80081cc <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8006a14:	bf00      	nop
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	200005fc 	.word	0x200005fc
 8006a20:	20000600 	.word	0x20000600
 8006a24:	20000604 	.word	0x20000604
 8006a28:	200005f0 	.word	0x200005f0
 8006a2c:	200005f4 	.word	0x200005f4
 8006a30:	200005f8 	.word	0x200005f8
 8006a34:	08010d55 	.word	0x08010d55
 8006a38:	08006d59 	.word	0x08006d59
 8006a3c:	200005bc 	.word	0x200005bc
 8006a40:	08006a45 	.word	0x08006a45

08006a44 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8006a4c:	bf00      	nop
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <SCB_InvalidateDCache_by_Addr>:
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b087      	sub	sp, #28
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8006a6a:	2320      	movs	r3, #32
 8006a6c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8006a6e:	f3bf 8f4f 	dsb	sy
}
 8006a72:	bf00      	nop
    while (op_size > 0) {
 8006a74:	e00b      	b.n	8006a8e <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8006a76:	4a0d      	ldr	r2, [pc, #52]	; (8006aac <SCB_InvalidateDCache_by_Addr+0x54>)
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	693a      	ldr	r2, [r7, #16]
 8006a82:	4413      	add	r3, r2
 8006a84:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8006a86:	697a      	ldr	r2, [r7, #20]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	1ad3      	subs	r3, r2, r3
 8006a8c:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	dcf0      	bgt.n	8006a76 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8006a94:	f3bf 8f4f 	dsb	sy
}
 8006a98:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006a9a:	f3bf 8f6f 	isb	sy
}
 8006a9e:	bf00      	nop
}
 8006aa0:	bf00      	nop
 8006aa2:	371c      	adds	r7, #28
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr
 8006aac:	e000ed00 	.word	0xe000ed00

08006ab0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8006abc:	4b40      	ldr	r3, [pc, #256]	; (8006bc0 <low_level_init+0x110>)
 8006abe:	4a41      	ldr	r2, [pc, #260]	; (8006bc4 <low_level_init+0x114>)
 8006ac0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8006ac6:	2380      	movs	r3, #128	; 0x80
 8006ac8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8006aca:	23e1      	movs	r3, #225	; 0xe1
 8006acc:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x20;
 8006ad6:	2320      	movs	r3, #32
 8006ad8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8006ada:	4a39      	ldr	r2, [pc, #228]	; (8006bc0 <low_level_init+0x110>)
 8006adc:	f107 0308 	add.w	r3, r7, #8
 8006ae0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8006ae2:	4b37      	ldr	r3, [pc, #220]	; (8006bc0 <low_level_init+0x110>)
 8006ae4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006ae8:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8006aea:	4b35      	ldr	r3, [pc, #212]	; (8006bc0 <low_level_init+0x110>)
 8006aec:	4a36      	ldr	r2, [pc, #216]	; (8006bc8 <low_level_init+0x118>)
 8006aee:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8006af0:	4b33      	ldr	r3, [pc, #204]	; (8006bc0 <low_level_init+0x110>)
 8006af2:	4a36      	ldr	r2, [pc, #216]	; (8006bcc <low_level_init+0x11c>)
 8006af4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8006af6:	4b32      	ldr	r3, [pc, #200]	; (8006bc0 <low_level_init+0x110>)
 8006af8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8006afc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006afe:	4830      	ldr	r0, [pc, #192]	; (8006bc0 <low_level_init+0x110>)
 8006b00:	f7fb f9ca 	bl	8001e98 <HAL_ETH_Init>
 8006b04:	4603      	mov	r3, r0
 8006b06:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8006b08:	2238      	movs	r2, #56	; 0x38
 8006b0a:	2100      	movs	r1, #0
 8006b0c:	4830      	ldr	r0, [pc, #192]	; (8006bd0 <low_level_init+0x120>)
 8006b0e:	f00b f938 	bl	8011d82 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8006b12:	4b2f      	ldr	r3, [pc, #188]	; (8006bd0 <low_level_init+0x120>)
 8006b14:	2221      	movs	r2, #33	; 0x21
 8006b16:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8006b18:	4b2d      	ldr	r3, [pc, #180]	; (8006bd0 <low_level_init+0x120>)
 8006b1a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8006b1e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8006b20:	4b2b      	ldr	r3, [pc, #172]	; (8006bd0 <low_level_init+0x120>)
 8006b22:	2200      	movs	r2, #0
 8006b24:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8006b26:	482b      	ldr	r0, [pc, #172]	; (8006bd4 <low_level_init+0x124>)
 8006b28:	f000 ff54 	bl	80079d4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2206      	movs	r2, #6
 8006b30:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8006b34:	4b22      	ldr	r3, [pc, #136]	; (8006bc0 <low_level_init+0x110>)
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	781a      	ldrb	r2, [r3, #0]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8006b40:	4b1f      	ldr	r3, [pc, #124]	; (8006bc0 <low_level_init+0x110>)
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	785a      	ldrb	r2, [r3, #1]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8006b4c:	4b1c      	ldr	r3, [pc, #112]	; (8006bc0 <low_level_init+0x110>)
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	789a      	ldrb	r2, [r3, #2]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8006b58:	4b19      	ldr	r3, [pc, #100]	; (8006bc0 <low_level_init+0x110>)
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	78da      	ldrb	r2, [r3, #3]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006b64:	4b16      	ldr	r3, [pc, #88]	; (8006bc0 <low_level_init+0x110>)
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	791a      	ldrb	r2, [r3, #4]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006b70:	4b13      	ldr	r3, [pc, #76]	; (8006bc0 <low_level_init+0x110>)
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	795a      	ldrb	r2, [r3, #5]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006b82:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006b8a:	f043 030a 	orr.w	r3, r3, #10
 8006b8e:	b2da      	uxtb	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8006b96:	4910      	ldr	r1, [pc, #64]	; (8006bd8 <low_level_init+0x128>)
 8006b98:	4810      	ldr	r0, [pc, #64]	; (8006bdc <low_level_init+0x12c>)
 8006b9a:	f7fa fe62 	bl	8001862 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8006b9e:	480f      	ldr	r0, [pc, #60]	; (8006bdc <low_level_init+0x12c>)
 8006ba0:	f7fa fe91 	bl	80018c6 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8006ba4:	7bfb      	ldrb	r3, [r7, #15]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d103      	bne.n	8006bb2 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 fa32 	bl	8007014 <ethernet_link_check_state>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 8006bb0:	e001      	b.n	8006bb6 <low_level_init+0x106>
    Error_Handler();
 8006bb2:	f7fa fb73 	bl	800129c <Error_Handler>
}
 8006bb6:	bf00      	nop
 8006bb8:	3710      	adds	r7, #16
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop
 8006bc0:	20004f94 	.word	0x20004f94
 8006bc4:	40028000 	.word	0x40028000
 8006bc8:	20000294 	.word	0x20000294
 8006bcc:	200001f4 	.word	0x200001f4
 8006bd0:	20005044 	.word	0x20005044
 8006bd4:	0801669c 	.word	0x0801669c
 8006bd8:	2000000c 	.word	0x2000000c
 8006bdc:	2000507c 	.word	0x2000507c

08006be0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b092      	sub	sp, #72	; 0x48
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8006bea:	2300      	movs	r3, #0
 8006bec:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8006bf8:	f107 030c 	add.w	r3, r7, #12
 8006bfc:	2230      	movs	r2, #48	; 0x30
 8006bfe:	2100      	movs	r1, #0
 8006c00:	4618      	mov	r0, r3
 8006c02:	f00b f8be 	bl	8011d82 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8006c06:	f107 030c 	add.w	r3, r7, #12
 8006c0a:	2230      	movs	r2, #48	; 0x30
 8006c0c:	2100      	movs	r1, #0
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f00b f8b7 	bl	8011d82 <memset>

  for(q = p; q != NULL; q = q->next)
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	643b      	str	r3, [r7, #64]	; 0x40
 8006c18:	e045      	b.n	8006ca6 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8006c1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c1c:	2b03      	cmp	r3, #3
 8006c1e:	d902      	bls.n	8006c26 <low_level_output+0x46>
      return ERR_IF;
 8006c20:	f06f 030b 	mvn.w	r3, #11
 8006c24:	e055      	b.n	8006cd2 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8006c26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c28:	6859      	ldr	r1, [r3, #4]
 8006c2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c2c:	4613      	mov	r3, r2
 8006c2e:	005b      	lsls	r3, r3, #1
 8006c30:	4413      	add	r3, r2
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	3348      	adds	r3, #72	; 0x48
 8006c36:	443b      	add	r3, r7
 8006c38:	3b3c      	subs	r3, #60	; 0x3c
 8006c3a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8006c3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c3e:	895b      	ldrh	r3, [r3, #10]
 8006c40:	4619      	mov	r1, r3
 8006c42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c44:	4613      	mov	r3, r2
 8006c46:	005b      	lsls	r3, r3, #1
 8006c48:	4413      	add	r3, r2
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	3348      	adds	r3, #72	; 0x48
 8006c4e:	443b      	add	r3, r7
 8006c50:	3b38      	subs	r3, #56	; 0x38
 8006c52:	6019      	str	r1, [r3, #0]

    if(i>0)
 8006c54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d011      	beq.n	8006c7e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8006c5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c5c:	1e5a      	subs	r2, r3, #1
 8006c5e:	f107 000c 	add.w	r0, r7, #12
 8006c62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006c64:	460b      	mov	r3, r1
 8006c66:	005b      	lsls	r3, r3, #1
 8006c68:	440b      	add	r3, r1
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	18c1      	adds	r1, r0, r3
 8006c6e:	4613      	mov	r3, r2
 8006c70:	005b      	lsls	r3, r3, #1
 8006c72:	4413      	add	r3, r2
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	3348      	adds	r3, #72	; 0x48
 8006c78:	443b      	add	r3, r7
 8006c7a:	3b34      	subs	r3, #52	; 0x34
 8006c7c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8006c7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d109      	bne.n	8006c9a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8006c86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c88:	4613      	mov	r3, r2
 8006c8a:	005b      	lsls	r3, r3, #1
 8006c8c:	4413      	add	r3, r2
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	3348      	adds	r3, #72	; 0x48
 8006c92:	443b      	add	r3, r7
 8006c94:	3b34      	subs	r3, #52	; 0x34
 8006c96:	2200      	movs	r2, #0
 8006c98:	601a      	str	r2, [r3, #0]
    }

    i++;
 8006c9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8006ca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	643b      	str	r3, [r7, #64]	; 0x40
 8006ca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1b6      	bne.n	8006c1a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	891b      	ldrh	r3, [r3, #8]
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	4b0a      	ldr	r3, [pc, #40]	; (8006cdc <low_level_output+0xfc>)
 8006cb4:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8006cb6:	4a09      	ldr	r2, [pc, #36]	; (8006cdc <low_level_output+0xfc>)
 8006cb8:	f107 030c 	add.w	r3, r7, #12
 8006cbc:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8006cbe:	4a07      	ldr	r2, [pc, #28]	; (8006cdc <low_level_output+0xfc>)
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8006cc4:	2214      	movs	r2, #20
 8006cc6:	4905      	ldr	r1, [pc, #20]	; (8006cdc <low_level_output+0xfc>)
 8006cc8:	4805      	ldr	r0, [pc, #20]	; (8006ce0 <low_level_output+0x100>)
 8006cca:	f7fb fa37 	bl	800213c <HAL_ETH_Transmit>

  return errval;
 8006cce:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3748      	adds	r7, #72	; 0x48
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	20005044 	.word	0x20005044
 8006ce0:	20004f94 	.word	0x20004f94

08006ce4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006cec:	2300      	movs	r3, #0
 8006cee:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8006cf0:	4b07      	ldr	r3, [pc, #28]	; (8006d10 <low_level_input+0x2c>)
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d105      	bne.n	8006d04 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8006cf8:	f107 030c 	add.w	r3, r7, #12
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	4805      	ldr	r0, [pc, #20]	; (8006d14 <low_level_input+0x30>)
 8006d00:	f7fb fab0 	bl	8002264 <HAL_ETH_ReadData>
  }

  return p;
 8006d04:	68fb      	ldr	r3, [r7, #12]
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3710      	adds	r7, #16
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	20004f90 	.word	0x20004f90
 8006d14:	20004f94 	.word	0x20004f94

08006d18 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006d20:	2300      	movs	r3, #0
 8006d22:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f7ff ffdd 	bl	8006ce4 <low_level_input>
 8006d2a:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d00a      	beq.n	8006d48 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	691b      	ldr	r3, [r3, #16]
 8006d36:	6879      	ldr	r1, [r7, #4]
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	4798      	blx	r3
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d002      	beq.n	8006d48 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8006d42:	68f8      	ldr	r0, [r7, #12]
 8006d44:	f001 fdc2 	bl	80088cc <pbuf_free>
      }
    }
  } while(p!=NULL);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d1ea      	bne.n	8006d24 <ethernetif_input+0xc>
}
 8006d4e:	bf00      	nop
 8006d50:	bf00      	nop
 8006d52:	3710      	adds	r7, #16
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d106      	bne.n	8006d74 <ethernetif_init+0x1c>
 8006d66:	4b0e      	ldr	r3, [pc, #56]	; (8006da0 <ethernetif_init+0x48>)
 8006d68:	f240 127b 	movw	r2, #379	; 0x17b
 8006d6c:	490d      	ldr	r1, [pc, #52]	; (8006da4 <ethernetif_init+0x4c>)
 8006d6e:	480e      	ldr	r0, [pc, #56]	; (8006da8 <ethernetif_init+0x50>)
 8006d70:	f00a ffa2 	bl	8011cb8 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2273      	movs	r2, #115	; 0x73
 8006d78:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2274      	movs	r2, #116	; 0x74
 8006d80:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	4a09      	ldr	r2, [pc, #36]	; (8006dac <ethernetif_init+0x54>)
 8006d88:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4a08      	ldr	r2, [pc, #32]	; (8006db0 <ethernetif_init+0x58>)
 8006d8e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f7ff fe8d 	bl	8006ab0 <low_level_init>

  return ERR_OK;
 8006d96:	2300      	movs	r3, #0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3708      	adds	r7, #8
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}
 8006da0:	08013ca4 	.word	0x08013ca4
 8006da4:	08013cc0 	.word	0x08013cc0
 8006da8:	08013cd0 	.word	0x08013cd0
 8006dac:	0800f20d 	.word	0x0800f20d
 8006db0:	08006be1 	.word	0x08006be1

08006db4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8006dc0:	68f9      	ldr	r1, [r7, #12]
 8006dc2:	4807      	ldr	r0, [pc, #28]	; (8006de0 <pbuf_free_custom+0x2c>)
 8006dc4:	f000 fee8 	bl	8007b98 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8006dc8:	4b06      	ldr	r3, [pc, #24]	; (8006de4 <pbuf_free_custom+0x30>)
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d102      	bne.n	8006dd6 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8006dd0:	4b04      	ldr	r3, [pc, #16]	; (8006de4 <pbuf_free_custom+0x30>)
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	701a      	strb	r2, [r3, #0]
  }
}
 8006dd6:	bf00      	nop
 8006dd8:	3710      	adds	r7, #16
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	0801669c 	.word	0x0801669c
 8006de4:	20004f90 	.word	0x20004f90

08006de8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006dec:	f7fa fe9a 	bl	8001b24 <HAL_GetTick>
 8006df0:	4603      	mov	r3, r0
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	bd80      	pop	{r7, pc}
	...

08006df8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b08e      	sub	sp, #56	; 0x38
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e04:	2200      	movs	r2, #0
 8006e06:	601a      	str	r2, [r3, #0]
 8006e08:	605a      	str	r2, [r3, #4]
 8006e0a:	609a      	str	r2, [r3, #8]
 8006e0c:	60da      	str	r2, [r3, #12]
 8006e0e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a52      	ldr	r2, [pc, #328]	; (8006f60 <HAL_ETH_MspInit+0x168>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	f040 809e 	bne.w	8006f58 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8006e1c:	4b51      	ldr	r3, [pc, #324]	; (8006f64 <HAL_ETH_MspInit+0x16c>)
 8006e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e20:	4a50      	ldr	r2, [pc, #320]	; (8006f64 <HAL_ETH_MspInit+0x16c>)
 8006e22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006e26:	6313      	str	r3, [r2, #48]	; 0x30
 8006e28:	4b4e      	ldr	r3, [pc, #312]	; (8006f64 <HAL_ETH_MspInit+0x16c>)
 8006e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e30:	623b      	str	r3, [r7, #32]
 8006e32:	6a3b      	ldr	r3, [r7, #32]
 8006e34:	4b4b      	ldr	r3, [pc, #300]	; (8006f64 <HAL_ETH_MspInit+0x16c>)
 8006e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e38:	4a4a      	ldr	r2, [pc, #296]	; (8006f64 <HAL_ETH_MspInit+0x16c>)
 8006e3a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006e3e:	6313      	str	r3, [r2, #48]	; 0x30
 8006e40:	4b48      	ldr	r3, [pc, #288]	; (8006f64 <HAL_ETH_MspInit+0x16c>)
 8006e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006e48:	61fb      	str	r3, [r7, #28]
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	4b45      	ldr	r3, [pc, #276]	; (8006f64 <HAL_ETH_MspInit+0x16c>)
 8006e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e50:	4a44      	ldr	r2, [pc, #272]	; (8006f64 <HAL_ETH_MspInit+0x16c>)
 8006e52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006e56:	6313      	str	r3, [r2, #48]	; 0x30
 8006e58:	4b42      	ldr	r3, [pc, #264]	; (8006f64 <HAL_ETH_MspInit+0x16c>)
 8006e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e60:	61bb      	str	r3, [r7, #24]
 8006e62:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006e64:	4b3f      	ldr	r3, [pc, #252]	; (8006f64 <HAL_ETH_MspInit+0x16c>)
 8006e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e68:	4a3e      	ldr	r2, [pc, #248]	; (8006f64 <HAL_ETH_MspInit+0x16c>)
 8006e6a:	f043 0304 	orr.w	r3, r3, #4
 8006e6e:	6313      	str	r3, [r2, #48]	; 0x30
 8006e70:	4b3c      	ldr	r3, [pc, #240]	; (8006f64 <HAL_ETH_MspInit+0x16c>)
 8006e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e74:	f003 0304 	and.w	r3, r3, #4
 8006e78:	617b      	str	r3, [r7, #20]
 8006e7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e7c:	4b39      	ldr	r3, [pc, #228]	; (8006f64 <HAL_ETH_MspInit+0x16c>)
 8006e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e80:	4a38      	ldr	r2, [pc, #224]	; (8006f64 <HAL_ETH_MspInit+0x16c>)
 8006e82:	f043 0301 	orr.w	r3, r3, #1
 8006e86:	6313      	str	r3, [r2, #48]	; 0x30
 8006e88:	4b36      	ldr	r3, [pc, #216]	; (8006f64 <HAL_ETH_MspInit+0x16c>)
 8006e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e8c:	f003 0301 	and.w	r3, r3, #1
 8006e90:	613b      	str	r3, [r7, #16]
 8006e92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e94:	4b33      	ldr	r3, [pc, #204]	; (8006f64 <HAL_ETH_MspInit+0x16c>)
 8006e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e98:	4a32      	ldr	r2, [pc, #200]	; (8006f64 <HAL_ETH_MspInit+0x16c>)
 8006e9a:	f043 0302 	orr.w	r3, r3, #2
 8006e9e:	6313      	str	r3, [r2, #48]	; 0x30
 8006ea0:	4b30      	ldr	r3, [pc, #192]	; (8006f64 <HAL_ETH_MspInit+0x16c>)
 8006ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea4:	f003 0302 	and.w	r3, r3, #2
 8006ea8:	60fb      	str	r3, [r7, #12]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006eac:	4b2d      	ldr	r3, [pc, #180]	; (8006f64 <HAL_ETH_MspInit+0x16c>)
 8006eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb0:	4a2c      	ldr	r2, [pc, #176]	; (8006f64 <HAL_ETH_MspInit+0x16c>)
 8006eb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006eb6:	6313      	str	r3, [r2, #48]	; 0x30
 8006eb8:	4b2a      	ldr	r3, [pc, #168]	; (8006f64 <HAL_ETH_MspInit+0x16c>)
 8006eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ec0:	60bb      	str	r3, [r7, #8]
 8006ec2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8006ec4:	2332      	movs	r3, #50	; 0x32
 8006ec6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ec8:	2302      	movs	r3, #2
 8006eca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ed0:	2303      	movs	r3, #3
 8006ed2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006ed4:	230b      	movs	r3, #11
 8006ed6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006edc:	4619      	mov	r1, r3
 8006ede:	4822      	ldr	r0, [pc, #136]	; (8006f68 <HAL_ETH_MspInit+0x170>)
 8006ee0:	f7fc f9f0 	bl	80032c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8006ee4:	2386      	movs	r3, #134	; 0x86
 8006ee6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ee8:	2302      	movs	r3, #2
 8006eea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eec:	2300      	movs	r3, #0
 8006eee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ef0:	2303      	movs	r3, #3
 8006ef2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006ef4:	230b      	movs	r3, #11
 8006ef6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ef8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006efc:	4619      	mov	r1, r3
 8006efe:	481b      	ldr	r0, [pc, #108]	; (8006f6c <HAL_ETH_MspInit+0x174>)
 8006f00:	f7fc f9e0 	bl	80032c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8006f04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006f08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f0a:	2302      	movs	r3, #2
 8006f0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f12:	2303      	movs	r3, #3
 8006f14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006f16:	230b      	movs	r3, #11
 8006f18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8006f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f1e:	4619      	mov	r1, r3
 8006f20:	4813      	ldr	r0, [pc, #76]	; (8006f70 <HAL_ETH_MspInit+0x178>)
 8006f22:	f7fc f9cf 	bl	80032c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8006f26:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8006f2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f2c:	2302      	movs	r3, #2
 8006f2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f30:	2300      	movs	r3, #0
 8006f32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f34:	2303      	movs	r3, #3
 8006f36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006f38:	230b      	movs	r3, #11
 8006f3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006f3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f40:	4619      	mov	r1, r3
 8006f42:	480c      	ldr	r0, [pc, #48]	; (8006f74 <HAL_ETH_MspInit+0x17c>)
 8006f44:	f7fc f9be 	bl	80032c4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8006f48:	2200      	movs	r2, #0
 8006f4a:	2100      	movs	r1, #0
 8006f4c:	203d      	movs	r0, #61	; 0x3d
 8006f4e:	f7fa fef4 	bl	8001d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8006f52:	203d      	movs	r0, #61	; 0x3d
 8006f54:	f7fa ff0d 	bl	8001d72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006f58:	bf00      	nop
 8006f5a:	3738      	adds	r7, #56	; 0x38
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	40028000 	.word	0x40028000
 8006f64:	40023800 	.word	0x40023800
 8006f68:	40020800 	.word	0x40020800
 8006f6c:	40020000 	.word	0x40020000
 8006f70:	40020400 	.word	0x40020400
 8006f74:	40021800 	.word	0x40021800

08006f78 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8006f7c:	4802      	ldr	r0, [pc, #8]	; (8006f88 <ETH_PHY_IO_Init+0x10>)
 8006f7e:	f7fb fd3f 	bl	8002a00 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	20004f94 	.word	0x20004f94

08006f8c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	af00      	add	r7, sp, #0
  return 0;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	68ba      	ldr	r2, [r7, #8]
 8006fac:	68f9      	ldr	r1, [r7, #12]
 8006fae:	4807      	ldr	r0, [pc, #28]	; (8006fcc <ETH_PHY_IO_ReadReg+0x30>)
 8006fb0:	f7fb fb80 	bl	80026b4 <HAL_ETH_ReadPHYRegister>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d002      	beq.n	8006fc0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8006fba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006fbe:	e000      	b.n	8006fc2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3710      	adds	r7, #16
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	20004f94 	.word	0x20004f94

08006fd0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	68ba      	ldr	r2, [r7, #8]
 8006fe0:	68f9      	ldr	r1, [r7, #12]
 8006fe2:	4807      	ldr	r0, [pc, #28]	; (8007000 <ETH_PHY_IO_WriteReg+0x30>)
 8006fe4:	f7fb fbb1 	bl	800274a <HAL_ETH_WritePHYRegister>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d002      	beq.n	8006ff4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8006fee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ff2:	e000      	b.n	8006ff6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3710      	adds	r7, #16
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop
 8007000:	20004f94 	.word	0x20004f94

08007004 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007008:	f7fa fd8c 	bl	8001b24 <HAL_GetTick>
 800700c:	4603      	mov	r3, r0
}
 800700e:	4618      	mov	r0, r3
 8007010:	bd80      	pop	{r7, pc}
	...

08007014 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b0a0      	sub	sp, #128	; 0x80
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800701c:	f107 030c 	add.w	r3, r7, #12
 8007020:	2264      	movs	r2, #100	; 0x64
 8007022:	2100      	movs	r1, #0
 8007024:	4618      	mov	r0, r3
 8007026:	f00a feac 	bl	8011d82 <memset>
  int32_t PHYLinkState = 0;
 800702a:	2300      	movs	r3, #0
 800702c:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800702e:	2300      	movs	r3, #0
 8007030:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007032:	2300      	movs	r3, #0
 8007034:	67bb      	str	r3, [r7, #120]	; 0x78
 8007036:	2300      	movs	r3, #0
 8007038:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800703a:	483a      	ldr	r0, [pc, #232]	; (8007124 <ethernet_link_check_state+0x110>)
 800703c:	f7fa fc90 	bl	8001960 <LAN8742_GetLinkState>
 8007040:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007048:	089b      	lsrs	r3, r3, #2
 800704a:	f003 0301 	and.w	r3, r3, #1
 800704e:	b2db      	uxtb	r3, r3
 8007050:	2b00      	cmp	r3, #0
 8007052:	d00c      	beq.n	800706e <ethernet_link_check_state+0x5a>
 8007054:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007056:	2b01      	cmp	r3, #1
 8007058:	dc09      	bgt.n	800706e <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800705a:	4833      	ldr	r0, [pc, #204]	; (8007128 <ethernet_link_check_state+0x114>)
 800705c:	f7fb f815 	bl	800208a <HAL_ETH_Stop>
    netif_set_down(netif);
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f001 f81d 	bl	80080a0 <netif_set_down>
    netif_set_link_down(netif);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f001 f880 	bl	800816c <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800706c:	e055      	b.n	800711a <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007074:	f003 0304 	and.w	r3, r3, #4
 8007078:	2b00      	cmp	r3, #0
 800707a:	d14e      	bne.n	800711a <ethernet_link_check_state+0x106>
 800707c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800707e:	2b01      	cmp	r3, #1
 8007080:	dd4b      	ble.n	800711a <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8007082:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007084:	3b02      	subs	r3, #2
 8007086:	2b03      	cmp	r3, #3
 8007088:	d82a      	bhi.n	80070e0 <ethernet_link_check_state+0xcc>
 800708a:	a201      	add	r2, pc, #4	; (adr r2, 8007090 <ethernet_link_check_state+0x7c>)
 800708c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007090:	080070a1 	.word	0x080070a1
 8007094:	080070b3 	.word	0x080070b3
 8007098:	080070c3 	.word	0x080070c3
 800709c:	080070d3 	.word	0x080070d3
      duplex = ETH_FULLDUPLEX_MODE;
 80070a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80070a4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80070a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80070aa:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80070ac:	2301      	movs	r3, #1
 80070ae:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80070b0:	e017      	b.n	80070e2 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80070b2:	2300      	movs	r3, #0
 80070b4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80070b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80070ba:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80070bc:	2301      	movs	r3, #1
 80070be:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80070c0:	e00f      	b.n	80070e2 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 80070c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80070c6:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80070c8:	2300      	movs	r3, #0
 80070ca:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80070cc:	2301      	movs	r3, #1
 80070ce:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80070d0:	e007      	b.n	80070e2 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80070d2:	2300      	movs	r3, #0
 80070d4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80070d6:	2300      	movs	r3, #0
 80070d8:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80070da:	2301      	movs	r3, #1
 80070dc:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80070de:	e000      	b.n	80070e2 <ethernet_link_check_state+0xce>
      break;
 80070e0:	bf00      	nop
    if(linkchanged)
 80070e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d018      	beq.n	800711a <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80070e8:	f107 030c 	add.w	r3, r7, #12
 80070ec:	4619      	mov	r1, r3
 80070ee:	480e      	ldr	r0, [pc, #56]	; (8007128 <ethernet_link_check_state+0x114>)
 80070f0:	f7fb fb74 	bl	80027dc <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80070f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070f6:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 80070f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070fa:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80070fc:	f107 030c 	add.w	r3, r7, #12
 8007100:	4619      	mov	r1, r3
 8007102:	4809      	ldr	r0, [pc, #36]	; (8007128 <ethernet_link_check_state+0x114>)
 8007104:	f7fb fc61 	bl	80029ca <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8007108:	4807      	ldr	r0, [pc, #28]	; (8007128 <ethernet_link_check_state+0x114>)
 800710a:	f7fa ff5f 	bl	8001fcc <HAL_ETH_Start>
      netif_set_up(netif);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 ff5a 	bl	8007fc8 <netif_set_up>
      netif_set_link_up(netif);
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 fff5 	bl	8008104 <netif_set_link_up>
}
 800711a:	bf00      	nop
 800711c:	3780      	adds	r7, #128	; 0x80
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	2000507c 	.word	0x2000507c
 8007128:	20004f94 	.word	0x20004f94

0800712c <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b086      	sub	sp, #24
 8007130:	af02      	add	r7, sp, #8
 8007132:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8007134:	4812      	ldr	r0, [pc, #72]	; (8007180 <HAL_ETH_RxAllocateCallback+0x54>)
 8007136:	f000 fcc1 	bl	8007abc <memp_malloc_pool>
 800713a:	60f8      	str	r0, [r7, #12]
  if (p)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d014      	beq.n	800716c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f103 0220 	add.w	r2, r3, #32
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	4a0d      	ldr	r2, [pc, #52]	; (8007184 <HAL_ETH_RxAllocateCallback+0x58>)
 8007150:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800715a:	9201      	str	r2, [sp, #4]
 800715c:	9300      	str	r3, [sp, #0]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2241      	movs	r2, #65	; 0x41
 8007162:	2100      	movs	r1, #0
 8007164:	2000      	movs	r0, #0
 8007166:	f001 f9f7 	bl	8008558 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800716a:	e005      	b.n	8007178 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800716c:	4b06      	ldr	r3, [pc, #24]	; (8007188 <HAL_ETH_RxAllocateCallback+0x5c>)
 800716e:	2201      	movs	r2, #1
 8007170:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	601a      	str	r2, [r3, #0]
}
 8007178:	bf00      	nop
 800717a:	3710      	adds	r7, #16
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}
 8007180:	0801669c 	.word	0x0801669c
 8007184:	08006db5 	.word	0x08006db5
 8007188:	20004f90 	.word	0x20004f90

0800718c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b088      	sub	sp, #32
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]
 8007198:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80071a2:	2300      	movs	r3, #0
 80071a4:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	3b20      	subs	r3, #32
 80071aa:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	2200      	movs	r2, #0
 80071b0:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	2200      	movs	r2, #0
 80071b6:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80071b8:	69fb      	ldr	r3, [r7, #28]
 80071ba:	887a      	ldrh	r2, [r7, #2]
 80071bc:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d103      	bne.n	80071ce <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	69fa      	ldr	r2, [r7, #28]
 80071ca:	601a      	str	r2, [r3, #0]
 80071cc:	e003      	b.n	80071d6 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	69fa      	ldr	r2, [r7, #28]
 80071d4:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	69fa      	ldr	r2, [r7, #28]
 80071da:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80071dc:	69bb      	ldr	r3, [r7, #24]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	61fb      	str	r3, [r7, #28]
 80071e2:	e009      	b.n	80071f8 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	891a      	ldrh	r2, [r3, #8]
 80071e8:	887b      	ldrh	r3, [r7, #2]
 80071ea:	4413      	add	r3, r2
 80071ec:	b29a      	uxth	r2, r3
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	61fb      	str	r3, [r7, #28]
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d1f2      	bne.n	80071e4 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 80071fe:	887b      	ldrh	r3, [r7, #2]
 8007200:	4619      	mov	r1, r3
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f7ff fc28 	bl	8006a58 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8007208:	bf00      	nop
 800720a:	3720      	adds	r7, #32
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	4603      	mov	r3, r0
 8007218:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800721a:	88fb      	ldrh	r3, [r7, #6]
 800721c:	021b      	lsls	r3, r3, #8
 800721e:	b21a      	sxth	r2, r3
 8007220:	88fb      	ldrh	r3, [r7, #6]
 8007222:	0a1b      	lsrs	r3, r3, #8
 8007224:	b29b      	uxth	r3, r3
 8007226:	b21b      	sxth	r3, r3
 8007228:	4313      	orrs	r3, r2
 800722a:	b21b      	sxth	r3, r3
 800722c:	b29b      	uxth	r3, r3
}
 800722e:	4618      	mov	r0, r3
 8007230:	370c      	adds	r7, #12
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr

0800723a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800723a:	b480      	push	{r7}
 800723c:	b083      	sub	sp, #12
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	061a      	lsls	r2, r3, #24
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	021b      	lsls	r3, r3, #8
 800724a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800724e:	431a      	orrs	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	0a1b      	lsrs	r3, r3, #8
 8007254:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007258:	431a      	orrs	r2, r3
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	0e1b      	lsrs	r3, r3, #24
 800725e:	4313      	orrs	r3, r2
}
 8007260:	4618      	mov	r0, r3
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr

0800726c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8007272:	2300      	movs	r3, #0
 8007274:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8007276:	f000 f8d5 	bl	8007424 <mem_init>
  memp_init();
 800727a:	f000 fbdb 	bl	8007a34 <memp_init>
  pbuf_init();
  netif_init();
 800727e:	f000 fcd9 	bl	8007c34 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8007282:	f007 f857 	bl	800e334 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8007286:	f001 fdaf 	bl	8008de8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800728a:	f006 ffc9 	bl	800e220 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800728e:	bf00      	nop
 8007290:	3708      	adds	r7, #8
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
	...

08007298 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	4603      	mov	r3, r0
 80072a0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80072a2:	4b05      	ldr	r3, [pc, #20]	; (80072b8 <ptr_to_mem+0x20>)
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	88fb      	ldrh	r3, [r7, #6]
 80072a8:	4413      	add	r3, r2
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	370c      	adds	r7, #12
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	200078c8 	.word	0x200078c8

080072bc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80072c4:	4b05      	ldr	r3, [pc, #20]	; (80072dc <mem_to_ptr+0x20>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	1ad3      	subs	r3, r2, r3
 80072cc:	b29b      	uxth	r3, r3
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	370c      	adds	r7, #12
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	200078c8 	.word	0x200078c8

080072e0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80072e0:	b590      	push	{r4, r7, lr}
 80072e2:	b085      	sub	sp, #20
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80072e8:	4b45      	ldr	r3, [pc, #276]	; (8007400 <plug_holes+0x120>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d206      	bcs.n	8007300 <plug_holes+0x20>
 80072f2:	4b44      	ldr	r3, [pc, #272]	; (8007404 <plug_holes+0x124>)
 80072f4:	f240 12df 	movw	r2, #479	; 0x1df
 80072f8:	4943      	ldr	r1, [pc, #268]	; (8007408 <plug_holes+0x128>)
 80072fa:	4844      	ldr	r0, [pc, #272]	; (800740c <plug_holes+0x12c>)
 80072fc:	f00a fcdc 	bl	8011cb8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8007300:	4b43      	ldr	r3, [pc, #268]	; (8007410 <plug_holes+0x130>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	429a      	cmp	r2, r3
 8007308:	d306      	bcc.n	8007318 <plug_holes+0x38>
 800730a:	4b3e      	ldr	r3, [pc, #248]	; (8007404 <plug_holes+0x124>)
 800730c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007310:	4940      	ldr	r1, [pc, #256]	; (8007414 <plug_holes+0x134>)
 8007312:	483e      	ldr	r0, [pc, #248]	; (800740c <plug_holes+0x12c>)
 8007314:	f00a fcd0 	bl	8011cb8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	791b      	ldrb	r3, [r3, #4]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d006      	beq.n	800732e <plug_holes+0x4e>
 8007320:	4b38      	ldr	r3, [pc, #224]	; (8007404 <plug_holes+0x124>)
 8007322:	f240 12e1 	movw	r2, #481	; 0x1e1
 8007326:	493c      	ldr	r1, [pc, #240]	; (8007418 <plug_holes+0x138>)
 8007328:	4838      	ldr	r0, [pc, #224]	; (800740c <plug_holes+0x12c>)
 800732a:	f00a fcc5 	bl	8011cb8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	881b      	ldrh	r3, [r3, #0]
 8007332:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007336:	d906      	bls.n	8007346 <plug_holes+0x66>
 8007338:	4b32      	ldr	r3, [pc, #200]	; (8007404 <plug_holes+0x124>)
 800733a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800733e:	4937      	ldr	r1, [pc, #220]	; (800741c <plug_holes+0x13c>)
 8007340:	4832      	ldr	r0, [pc, #200]	; (800740c <plug_holes+0x12c>)
 8007342:	f00a fcb9 	bl	8011cb8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	881b      	ldrh	r3, [r3, #0]
 800734a:	4618      	mov	r0, r3
 800734c:	f7ff ffa4 	bl	8007298 <ptr_to_mem>
 8007350:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	429a      	cmp	r2, r3
 8007358:	d024      	beq.n	80073a4 <plug_holes+0xc4>
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	791b      	ldrb	r3, [r3, #4]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d120      	bne.n	80073a4 <plug_holes+0xc4>
 8007362:	4b2b      	ldr	r3, [pc, #172]	; (8007410 <plug_holes+0x130>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	68fa      	ldr	r2, [r7, #12]
 8007368:	429a      	cmp	r2, r3
 800736a:	d01b      	beq.n	80073a4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800736c:	4b2c      	ldr	r3, [pc, #176]	; (8007420 <plug_holes+0x140>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	68fa      	ldr	r2, [r7, #12]
 8007372:	429a      	cmp	r2, r3
 8007374:	d102      	bne.n	800737c <plug_holes+0x9c>
      lfree = mem;
 8007376:	4a2a      	ldr	r2, [pc, #168]	; (8007420 <plug_holes+0x140>)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	881a      	ldrh	r2, [r3, #0]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	881b      	ldrh	r3, [r3, #0]
 8007388:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800738c:	d00a      	beq.n	80073a4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	881b      	ldrh	r3, [r3, #0]
 8007392:	4618      	mov	r0, r3
 8007394:	f7ff ff80 	bl	8007298 <ptr_to_mem>
 8007398:	4604      	mov	r4, r0
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f7ff ff8e 	bl	80072bc <mem_to_ptr>
 80073a0:	4603      	mov	r3, r0
 80073a2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	885b      	ldrh	r3, [r3, #2]
 80073a8:	4618      	mov	r0, r3
 80073aa:	f7ff ff75 	bl	8007298 <ptr_to_mem>
 80073ae:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80073b0:	68ba      	ldr	r2, [r7, #8]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d01f      	beq.n	80073f8 <plug_holes+0x118>
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	791b      	ldrb	r3, [r3, #4]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d11b      	bne.n	80073f8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80073c0:	4b17      	ldr	r3, [pc, #92]	; (8007420 <plug_holes+0x140>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d102      	bne.n	80073d0 <plug_holes+0xf0>
      lfree = pmem;
 80073ca:	4a15      	ldr	r2, [pc, #84]	; (8007420 <plug_holes+0x140>)
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	881a      	ldrh	r2, [r3, #0]
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	881b      	ldrh	r3, [r3, #0]
 80073dc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80073e0:	d00a      	beq.n	80073f8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	881b      	ldrh	r3, [r3, #0]
 80073e6:	4618      	mov	r0, r3
 80073e8:	f7ff ff56 	bl	8007298 <ptr_to_mem>
 80073ec:	4604      	mov	r4, r0
 80073ee:	68b8      	ldr	r0, [r7, #8]
 80073f0:	f7ff ff64 	bl	80072bc <mem_to_ptr>
 80073f4:	4603      	mov	r3, r0
 80073f6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80073f8:	bf00      	nop
 80073fa:	3714      	adds	r7, #20
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd90      	pop	{r4, r7, pc}
 8007400:	200078c8 	.word	0x200078c8
 8007404:	08013cf8 	.word	0x08013cf8
 8007408:	08013d28 	.word	0x08013d28
 800740c:	08013d40 	.word	0x08013d40
 8007410:	200078cc 	.word	0x200078cc
 8007414:	08013d68 	.word	0x08013d68
 8007418:	08013d84 	.word	0x08013d84
 800741c:	08013da0 	.word	0x08013da0
 8007420:	200078d0 	.word	0x200078d0

08007424 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b082      	sub	sp, #8
 8007428:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800742a:	4b18      	ldr	r3, [pc, #96]	; (800748c <mem_init+0x68>)
 800742c:	3303      	adds	r3, #3
 800742e:	f023 0303 	bic.w	r3, r3, #3
 8007432:	461a      	mov	r2, r3
 8007434:	4b16      	ldr	r3, [pc, #88]	; (8007490 <mem_init+0x6c>)
 8007436:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8007438:	4b15      	ldr	r3, [pc, #84]	; (8007490 <mem_init+0x6c>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8007444:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8007452:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8007456:	f7ff ff1f 	bl	8007298 <ptr_to_mem>
 800745a:	4603      	mov	r3, r0
 800745c:	4a0d      	ldr	r2, [pc, #52]	; (8007494 <mem_init+0x70>)
 800745e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8007460:	4b0c      	ldr	r3, [pc, #48]	; (8007494 <mem_init+0x70>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	2201      	movs	r2, #1
 8007466:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8007468:	4b0a      	ldr	r3, [pc, #40]	; (8007494 <mem_init+0x70>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8007470:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8007472:	4b08      	ldr	r3, [pc, #32]	; (8007494 <mem_init+0x70>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800747a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800747c:	4b04      	ldr	r3, [pc, #16]	; (8007490 <mem_init+0x6c>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a05      	ldr	r2, [pc, #20]	; (8007498 <mem_init+0x74>)
 8007482:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8007484:	bf00      	nop
 8007486:	3708      	adds	r7, #8
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	200050b4 	.word	0x200050b4
 8007490:	200078c8 	.word	0x200078c8
 8007494:	200078cc 	.word	0x200078cc
 8007498:	200078d0 	.word	0x200078d0

0800749c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b086      	sub	sp, #24
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f7ff ff09 	bl	80072bc <mem_to_ptr>
 80074aa:	4603      	mov	r3, r0
 80074ac:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	881b      	ldrh	r3, [r3, #0]
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7ff fef0 	bl	8007298 <ptr_to_mem>
 80074b8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	885b      	ldrh	r3, [r3, #2]
 80074be:	4618      	mov	r0, r3
 80074c0:	f7ff feea 	bl	8007298 <ptr_to_mem>
 80074c4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	881b      	ldrh	r3, [r3, #0]
 80074ca:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80074ce:	d818      	bhi.n	8007502 <mem_link_valid+0x66>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	885b      	ldrh	r3, [r3, #2]
 80074d4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80074d8:	d813      	bhi.n	8007502 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80074de:	8afa      	ldrh	r2, [r7, #22]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d004      	beq.n	80074ee <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	881b      	ldrh	r3, [r3, #0]
 80074e8:	8afa      	ldrh	r2, [r7, #22]
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d109      	bne.n	8007502 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80074ee:	4b08      	ldr	r3, [pc, #32]	; (8007510 <mem_link_valid+0x74>)
 80074f0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80074f2:	693a      	ldr	r2, [r7, #16]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d006      	beq.n	8007506 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	885b      	ldrh	r3, [r3, #2]
 80074fc:	8afa      	ldrh	r2, [r7, #22]
 80074fe:	429a      	cmp	r2, r3
 8007500:	d001      	beq.n	8007506 <mem_link_valid+0x6a>
    return 0;
 8007502:	2300      	movs	r3, #0
 8007504:	e000      	b.n	8007508 <mem_link_valid+0x6c>
  }
  return 1;
 8007506:	2301      	movs	r3, #1
}
 8007508:	4618      	mov	r0, r3
 800750a:	3718      	adds	r7, #24
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}
 8007510:	200078cc 	.word	0x200078cc

08007514 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d04c      	beq.n	80075bc <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f003 0303 	and.w	r3, r3, #3
 8007528:	2b00      	cmp	r3, #0
 800752a:	d007      	beq.n	800753c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800752c:	4b25      	ldr	r3, [pc, #148]	; (80075c4 <mem_free+0xb0>)
 800752e:	f240 2273 	movw	r2, #627	; 0x273
 8007532:	4925      	ldr	r1, [pc, #148]	; (80075c8 <mem_free+0xb4>)
 8007534:	4825      	ldr	r0, [pc, #148]	; (80075cc <mem_free+0xb8>)
 8007536:	f00a fbbf 	bl	8011cb8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800753a:	e040      	b.n	80075be <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	3b08      	subs	r3, #8
 8007540:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8007542:	4b23      	ldr	r3, [pc, #140]	; (80075d0 <mem_free+0xbc>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	68fa      	ldr	r2, [r7, #12]
 8007548:	429a      	cmp	r2, r3
 800754a:	d306      	bcc.n	800755a <mem_free+0x46>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f103 020c 	add.w	r2, r3, #12
 8007552:	4b20      	ldr	r3, [pc, #128]	; (80075d4 <mem_free+0xc0>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	429a      	cmp	r2, r3
 8007558:	d907      	bls.n	800756a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800755a:	4b1a      	ldr	r3, [pc, #104]	; (80075c4 <mem_free+0xb0>)
 800755c:	f240 227f 	movw	r2, #639	; 0x27f
 8007560:	491d      	ldr	r1, [pc, #116]	; (80075d8 <mem_free+0xc4>)
 8007562:	481a      	ldr	r0, [pc, #104]	; (80075cc <mem_free+0xb8>)
 8007564:	f00a fba8 	bl	8011cb8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007568:	e029      	b.n	80075be <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	791b      	ldrb	r3, [r3, #4]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d107      	bne.n	8007582 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8007572:	4b14      	ldr	r3, [pc, #80]	; (80075c4 <mem_free+0xb0>)
 8007574:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8007578:	4918      	ldr	r1, [pc, #96]	; (80075dc <mem_free+0xc8>)
 800757a:	4814      	ldr	r0, [pc, #80]	; (80075cc <mem_free+0xb8>)
 800757c:	f00a fb9c 	bl	8011cb8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007580:	e01d      	b.n	80075be <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8007582:	68f8      	ldr	r0, [r7, #12]
 8007584:	f7ff ff8a 	bl	800749c <mem_link_valid>
 8007588:	4603      	mov	r3, r0
 800758a:	2b00      	cmp	r3, #0
 800758c:	d107      	bne.n	800759e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800758e:	4b0d      	ldr	r3, [pc, #52]	; (80075c4 <mem_free+0xb0>)
 8007590:	f240 2295 	movw	r2, #661	; 0x295
 8007594:	4912      	ldr	r1, [pc, #72]	; (80075e0 <mem_free+0xcc>)
 8007596:	480d      	ldr	r0, [pc, #52]	; (80075cc <mem_free+0xb8>)
 8007598:	f00a fb8e 	bl	8011cb8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800759c:	e00f      	b.n	80075be <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2200      	movs	r2, #0
 80075a2:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80075a4:	4b0f      	ldr	r3, [pc, #60]	; (80075e4 <mem_free+0xd0>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	68fa      	ldr	r2, [r7, #12]
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d202      	bcs.n	80075b4 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80075ae:	4a0d      	ldr	r2, [pc, #52]	; (80075e4 <mem_free+0xd0>)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80075b4:	68f8      	ldr	r0, [r7, #12]
 80075b6:	f7ff fe93 	bl	80072e0 <plug_holes>
 80075ba:	e000      	b.n	80075be <mem_free+0xaa>
    return;
 80075bc:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80075be:	3710      	adds	r7, #16
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}
 80075c4:	08013cf8 	.word	0x08013cf8
 80075c8:	08013dcc 	.word	0x08013dcc
 80075cc:	08013d40 	.word	0x08013d40
 80075d0:	200078c8 	.word	0x200078c8
 80075d4:	200078cc 	.word	0x200078cc
 80075d8:	08013df0 	.word	0x08013df0
 80075dc:	08013e0c 	.word	0x08013e0c
 80075e0:	08013e34 	.word	0x08013e34
 80075e4:	200078d0 	.word	0x200078d0

080075e8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b088      	sub	sp, #32
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	460b      	mov	r3, r1
 80075f2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80075f4:	887b      	ldrh	r3, [r7, #2]
 80075f6:	3303      	adds	r3, #3
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	f023 0303 	bic.w	r3, r3, #3
 80075fe:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8007600:	8bfb      	ldrh	r3, [r7, #30]
 8007602:	2b0b      	cmp	r3, #11
 8007604:	d801      	bhi.n	800760a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8007606:	230c      	movs	r3, #12
 8007608:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800760a:	8bfb      	ldrh	r3, [r7, #30]
 800760c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007610:	d803      	bhi.n	800761a <mem_trim+0x32>
 8007612:	8bfa      	ldrh	r2, [r7, #30]
 8007614:	887b      	ldrh	r3, [r7, #2]
 8007616:	429a      	cmp	r2, r3
 8007618:	d201      	bcs.n	800761e <mem_trim+0x36>
    return NULL;
 800761a:	2300      	movs	r3, #0
 800761c:	e0cc      	b.n	80077b8 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800761e:	4b68      	ldr	r3, [pc, #416]	; (80077c0 <mem_trim+0x1d8>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	429a      	cmp	r2, r3
 8007626:	d304      	bcc.n	8007632 <mem_trim+0x4a>
 8007628:	4b66      	ldr	r3, [pc, #408]	; (80077c4 <mem_trim+0x1dc>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	429a      	cmp	r2, r3
 8007630:	d306      	bcc.n	8007640 <mem_trim+0x58>
 8007632:	4b65      	ldr	r3, [pc, #404]	; (80077c8 <mem_trim+0x1e0>)
 8007634:	f240 22d1 	movw	r2, #721	; 0x2d1
 8007638:	4964      	ldr	r1, [pc, #400]	; (80077cc <mem_trim+0x1e4>)
 800763a:	4865      	ldr	r0, [pc, #404]	; (80077d0 <mem_trim+0x1e8>)
 800763c:	f00a fb3c 	bl	8011cb8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007640:	4b5f      	ldr	r3, [pc, #380]	; (80077c0 <mem_trim+0x1d8>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	429a      	cmp	r2, r3
 8007648:	d304      	bcc.n	8007654 <mem_trim+0x6c>
 800764a:	4b5e      	ldr	r3, [pc, #376]	; (80077c4 <mem_trim+0x1dc>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	429a      	cmp	r2, r3
 8007652:	d301      	bcc.n	8007658 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	e0af      	b.n	80077b8 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	3b08      	subs	r3, #8
 800765c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800765e:	69b8      	ldr	r0, [r7, #24]
 8007660:	f7ff fe2c 	bl	80072bc <mem_to_ptr>
 8007664:	4603      	mov	r3, r0
 8007666:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	881a      	ldrh	r2, [r3, #0]
 800766c:	8afb      	ldrh	r3, [r7, #22]
 800766e:	1ad3      	subs	r3, r2, r3
 8007670:	b29b      	uxth	r3, r3
 8007672:	3b08      	subs	r3, #8
 8007674:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8007676:	8bfa      	ldrh	r2, [r7, #30]
 8007678:	8abb      	ldrh	r3, [r7, #20]
 800767a:	429a      	cmp	r2, r3
 800767c:	d906      	bls.n	800768c <mem_trim+0xa4>
 800767e:	4b52      	ldr	r3, [pc, #328]	; (80077c8 <mem_trim+0x1e0>)
 8007680:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8007684:	4953      	ldr	r1, [pc, #332]	; (80077d4 <mem_trim+0x1ec>)
 8007686:	4852      	ldr	r0, [pc, #328]	; (80077d0 <mem_trim+0x1e8>)
 8007688:	f00a fb16 	bl	8011cb8 <iprintf>
  if (newsize > size) {
 800768c:	8bfa      	ldrh	r2, [r7, #30]
 800768e:	8abb      	ldrh	r3, [r7, #20]
 8007690:	429a      	cmp	r2, r3
 8007692:	d901      	bls.n	8007698 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8007694:	2300      	movs	r3, #0
 8007696:	e08f      	b.n	80077b8 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8007698:	8bfa      	ldrh	r2, [r7, #30]
 800769a:	8abb      	ldrh	r3, [r7, #20]
 800769c:	429a      	cmp	r2, r3
 800769e:	d101      	bne.n	80076a4 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	e089      	b.n	80077b8 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	881b      	ldrh	r3, [r3, #0]
 80076a8:	4618      	mov	r0, r3
 80076aa:	f7ff fdf5 	bl	8007298 <ptr_to_mem>
 80076ae:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	791b      	ldrb	r3, [r3, #4]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d13f      	bne.n	8007738 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80076b8:	69bb      	ldr	r3, [r7, #24]
 80076ba:	881b      	ldrh	r3, [r3, #0]
 80076bc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80076c0:	d106      	bne.n	80076d0 <mem_trim+0xe8>
 80076c2:	4b41      	ldr	r3, [pc, #260]	; (80077c8 <mem_trim+0x1e0>)
 80076c4:	f240 22f5 	movw	r2, #757	; 0x2f5
 80076c8:	4943      	ldr	r1, [pc, #268]	; (80077d8 <mem_trim+0x1f0>)
 80076ca:	4841      	ldr	r0, [pc, #260]	; (80077d0 <mem_trim+0x1e8>)
 80076cc:	f00a faf4 	bl	8011cb8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	881b      	ldrh	r3, [r3, #0]
 80076d4:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80076d6:	8afa      	ldrh	r2, [r7, #22]
 80076d8:	8bfb      	ldrh	r3, [r7, #30]
 80076da:	4413      	add	r3, r2
 80076dc:	b29b      	uxth	r3, r3
 80076de:	3308      	adds	r3, #8
 80076e0:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80076e2:	4b3e      	ldr	r3, [pc, #248]	; (80077dc <mem_trim+0x1f4>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	693a      	ldr	r2, [r7, #16]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d106      	bne.n	80076fa <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80076ec:	89fb      	ldrh	r3, [r7, #14]
 80076ee:	4618      	mov	r0, r3
 80076f0:	f7ff fdd2 	bl	8007298 <ptr_to_mem>
 80076f4:	4603      	mov	r3, r0
 80076f6:	4a39      	ldr	r2, [pc, #228]	; (80077dc <mem_trim+0x1f4>)
 80076f8:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80076fa:	89fb      	ldrh	r3, [r7, #14]
 80076fc:	4618      	mov	r0, r3
 80076fe:	f7ff fdcb 	bl	8007298 <ptr_to_mem>
 8007702:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	2200      	movs	r2, #0
 8007708:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	89ba      	ldrh	r2, [r7, #12]
 800770e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	8afa      	ldrh	r2, [r7, #22]
 8007714:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	89fa      	ldrh	r2, [r7, #14]
 800771a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	881b      	ldrh	r3, [r3, #0]
 8007720:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007724:	d047      	beq.n	80077b6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	881b      	ldrh	r3, [r3, #0]
 800772a:	4618      	mov	r0, r3
 800772c:	f7ff fdb4 	bl	8007298 <ptr_to_mem>
 8007730:	4602      	mov	r2, r0
 8007732:	89fb      	ldrh	r3, [r7, #14]
 8007734:	8053      	strh	r3, [r2, #2]
 8007736:	e03e      	b.n	80077b6 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8007738:	8bfb      	ldrh	r3, [r7, #30]
 800773a:	f103 0214 	add.w	r2, r3, #20
 800773e:	8abb      	ldrh	r3, [r7, #20]
 8007740:	429a      	cmp	r2, r3
 8007742:	d838      	bhi.n	80077b6 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007744:	8afa      	ldrh	r2, [r7, #22]
 8007746:	8bfb      	ldrh	r3, [r7, #30]
 8007748:	4413      	add	r3, r2
 800774a:	b29b      	uxth	r3, r3
 800774c:	3308      	adds	r3, #8
 800774e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	881b      	ldrh	r3, [r3, #0]
 8007754:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007758:	d106      	bne.n	8007768 <mem_trim+0x180>
 800775a:	4b1b      	ldr	r3, [pc, #108]	; (80077c8 <mem_trim+0x1e0>)
 800775c:	f240 3216 	movw	r2, #790	; 0x316
 8007760:	491d      	ldr	r1, [pc, #116]	; (80077d8 <mem_trim+0x1f0>)
 8007762:	481b      	ldr	r0, [pc, #108]	; (80077d0 <mem_trim+0x1e8>)
 8007764:	f00a faa8 	bl	8011cb8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8007768:	89fb      	ldrh	r3, [r7, #14]
 800776a:	4618      	mov	r0, r3
 800776c:	f7ff fd94 	bl	8007298 <ptr_to_mem>
 8007770:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8007772:	4b1a      	ldr	r3, [pc, #104]	; (80077dc <mem_trim+0x1f4>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	693a      	ldr	r2, [r7, #16]
 8007778:	429a      	cmp	r2, r3
 800777a:	d202      	bcs.n	8007782 <mem_trim+0x19a>
      lfree = mem2;
 800777c:	4a17      	ldr	r2, [pc, #92]	; (80077dc <mem_trim+0x1f4>)
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	2200      	movs	r2, #0
 8007786:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8007788:	69bb      	ldr	r3, [r7, #24]
 800778a:	881a      	ldrh	r2, [r3, #0]
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	8afa      	ldrh	r2, [r7, #22]
 8007794:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8007796:	69bb      	ldr	r3, [r7, #24]
 8007798:	89fa      	ldrh	r2, [r7, #14]
 800779a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	881b      	ldrh	r3, [r3, #0]
 80077a0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80077a4:	d007      	beq.n	80077b6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	881b      	ldrh	r3, [r3, #0]
 80077aa:	4618      	mov	r0, r3
 80077ac:	f7ff fd74 	bl	8007298 <ptr_to_mem>
 80077b0:	4602      	mov	r2, r0
 80077b2:	89fb      	ldrh	r3, [r7, #14]
 80077b4:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80077b6:	687b      	ldr	r3, [r7, #4]
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3720      	adds	r7, #32
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}
 80077c0:	200078c8 	.word	0x200078c8
 80077c4:	200078cc 	.word	0x200078cc
 80077c8:	08013cf8 	.word	0x08013cf8
 80077cc:	08013e68 	.word	0x08013e68
 80077d0:	08013d40 	.word	0x08013d40
 80077d4:	08013e80 	.word	0x08013e80
 80077d8:	08013ea0 	.word	0x08013ea0
 80077dc:	200078d0 	.word	0x200078d0

080077e0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b088      	sub	sp, #32
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	4603      	mov	r3, r0
 80077e8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80077ea:	88fb      	ldrh	r3, [r7, #6]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d101      	bne.n	80077f4 <mem_malloc+0x14>
    return NULL;
 80077f0:	2300      	movs	r3, #0
 80077f2:	e0d9      	b.n	80079a8 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80077f4:	88fb      	ldrh	r3, [r7, #6]
 80077f6:	3303      	adds	r3, #3
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	f023 0303 	bic.w	r3, r3, #3
 80077fe:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8007800:	8bbb      	ldrh	r3, [r7, #28]
 8007802:	2b0b      	cmp	r3, #11
 8007804:	d801      	bhi.n	800780a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8007806:	230c      	movs	r3, #12
 8007808:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800780a:	8bbb      	ldrh	r3, [r7, #28]
 800780c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007810:	d803      	bhi.n	800781a <mem_malloc+0x3a>
 8007812:	8bba      	ldrh	r2, [r7, #28]
 8007814:	88fb      	ldrh	r3, [r7, #6]
 8007816:	429a      	cmp	r2, r3
 8007818:	d201      	bcs.n	800781e <mem_malloc+0x3e>
    return NULL;
 800781a:	2300      	movs	r3, #0
 800781c:	e0c4      	b.n	80079a8 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800781e:	4b64      	ldr	r3, [pc, #400]	; (80079b0 <mem_malloc+0x1d0>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4618      	mov	r0, r3
 8007824:	f7ff fd4a 	bl	80072bc <mem_to_ptr>
 8007828:	4603      	mov	r3, r0
 800782a:	83fb      	strh	r3, [r7, #30]
 800782c:	e0b4      	b.n	8007998 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800782e:	8bfb      	ldrh	r3, [r7, #30]
 8007830:	4618      	mov	r0, r3
 8007832:	f7ff fd31 	bl	8007298 <ptr_to_mem>
 8007836:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	791b      	ldrb	r3, [r3, #4]
 800783c:	2b00      	cmp	r3, #0
 800783e:	f040 80a4 	bne.w	800798a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	881b      	ldrh	r3, [r3, #0]
 8007846:	461a      	mov	r2, r3
 8007848:	8bfb      	ldrh	r3, [r7, #30]
 800784a:	1ad3      	subs	r3, r2, r3
 800784c:	f1a3 0208 	sub.w	r2, r3, #8
 8007850:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8007852:	429a      	cmp	r2, r3
 8007854:	f0c0 8099 	bcc.w	800798a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	881b      	ldrh	r3, [r3, #0]
 800785c:	461a      	mov	r2, r3
 800785e:	8bfb      	ldrh	r3, [r7, #30]
 8007860:	1ad3      	subs	r3, r2, r3
 8007862:	f1a3 0208 	sub.w	r2, r3, #8
 8007866:	8bbb      	ldrh	r3, [r7, #28]
 8007868:	3314      	adds	r3, #20
 800786a:	429a      	cmp	r2, r3
 800786c:	d333      	bcc.n	80078d6 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800786e:	8bfa      	ldrh	r2, [r7, #30]
 8007870:	8bbb      	ldrh	r3, [r7, #28]
 8007872:	4413      	add	r3, r2
 8007874:	b29b      	uxth	r3, r3
 8007876:	3308      	adds	r3, #8
 8007878:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800787a:	8a7b      	ldrh	r3, [r7, #18]
 800787c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007880:	d106      	bne.n	8007890 <mem_malloc+0xb0>
 8007882:	4b4c      	ldr	r3, [pc, #304]	; (80079b4 <mem_malloc+0x1d4>)
 8007884:	f240 3287 	movw	r2, #903	; 0x387
 8007888:	494b      	ldr	r1, [pc, #300]	; (80079b8 <mem_malloc+0x1d8>)
 800788a:	484c      	ldr	r0, [pc, #304]	; (80079bc <mem_malloc+0x1dc>)
 800788c:	f00a fa14 	bl	8011cb8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8007890:	8a7b      	ldrh	r3, [r7, #18]
 8007892:	4618      	mov	r0, r3
 8007894:	f7ff fd00 	bl	8007298 <ptr_to_mem>
 8007898:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2200      	movs	r2, #0
 800789e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	881a      	ldrh	r2, [r3, #0]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	8bfa      	ldrh	r2, [r7, #30]
 80078ac:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	8a7a      	ldrh	r2, [r7, #18]
 80078b2:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	2201      	movs	r2, #1
 80078b8:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	881b      	ldrh	r3, [r3, #0]
 80078be:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80078c2:	d00b      	beq.n	80078dc <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	881b      	ldrh	r3, [r3, #0]
 80078c8:	4618      	mov	r0, r3
 80078ca:	f7ff fce5 	bl	8007298 <ptr_to_mem>
 80078ce:	4602      	mov	r2, r0
 80078d0:	8a7b      	ldrh	r3, [r7, #18]
 80078d2:	8053      	strh	r3, [r2, #2]
 80078d4:	e002      	b.n	80078dc <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	2201      	movs	r2, #1
 80078da:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80078dc:	4b34      	ldr	r3, [pc, #208]	; (80079b0 <mem_malloc+0x1d0>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	697a      	ldr	r2, [r7, #20]
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d127      	bne.n	8007936 <mem_malloc+0x156>
          struct mem *cur = lfree;
 80078e6:	4b32      	ldr	r3, [pc, #200]	; (80079b0 <mem_malloc+0x1d0>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80078ec:	e005      	b.n	80078fa <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	881b      	ldrh	r3, [r3, #0]
 80078f2:	4618      	mov	r0, r3
 80078f4:	f7ff fcd0 	bl	8007298 <ptr_to_mem>
 80078f8:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	791b      	ldrb	r3, [r3, #4]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d004      	beq.n	800790c <mem_malloc+0x12c>
 8007902:	4b2f      	ldr	r3, [pc, #188]	; (80079c0 <mem_malloc+0x1e0>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	69ba      	ldr	r2, [r7, #24]
 8007908:	429a      	cmp	r2, r3
 800790a:	d1f0      	bne.n	80078ee <mem_malloc+0x10e>
          }
          lfree = cur;
 800790c:	4a28      	ldr	r2, [pc, #160]	; (80079b0 <mem_malloc+0x1d0>)
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8007912:	4b27      	ldr	r3, [pc, #156]	; (80079b0 <mem_malloc+0x1d0>)
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	4b2a      	ldr	r3, [pc, #168]	; (80079c0 <mem_malloc+0x1e0>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	429a      	cmp	r2, r3
 800791c:	d00b      	beq.n	8007936 <mem_malloc+0x156>
 800791e:	4b24      	ldr	r3, [pc, #144]	; (80079b0 <mem_malloc+0x1d0>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	791b      	ldrb	r3, [r3, #4]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d006      	beq.n	8007936 <mem_malloc+0x156>
 8007928:	4b22      	ldr	r3, [pc, #136]	; (80079b4 <mem_malloc+0x1d4>)
 800792a:	f240 32b5 	movw	r2, #949	; 0x3b5
 800792e:	4925      	ldr	r1, [pc, #148]	; (80079c4 <mem_malloc+0x1e4>)
 8007930:	4822      	ldr	r0, [pc, #136]	; (80079bc <mem_malloc+0x1dc>)
 8007932:	f00a f9c1 	bl	8011cb8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8007936:	8bba      	ldrh	r2, [r7, #28]
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	4413      	add	r3, r2
 800793c:	3308      	adds	r3, #8
 800793e:	4a20      	ldr	r2, [pc, #128]	; (80079c0 <mem_malloc+0x1e0>)
 8007940:	6812      	ldr	r2, [r2, #0]
 8007942:	4293      	cmp	r3, r2
 8007944:	d906      	bls.n	8007954 <mem_malloc+0x174>
 8007946:	4b1b      	ldr	r3, [pc, #108]	; (80079b4 <mem_malloc+0x1d4>)
 8007948:	f240 32b9 	movw	r2, #953	; 0x3b9
 800794c:	491e      	ldr	r1, [pc, #120]	; (80079c8 <mem_malloc+0x1e8>)
 800794e:	481b      	ldr	r0, [pc, #108]	; (80079bc <mem_malloc+0x1dc>)
 8007950:	f00a f9b2 	bl	8011cb8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	f003 0303 	and.w	r3, r3, #3
 800795a:	2b00      	cmp	r3, #0
 800795c:	d006      	beq.n	800796c <mem_malloc+0x18c>
 800795e:	4b15      	ldr	r3, [pc, #84]	; (80079b4 <mem_malloc+0x1d4>)
 8007960:	f240 32bb 	movw	r2, #955	; 0x3bb
 8007964:	4919      	ldr	r1, [pc, #100]	; (80079cc <mem_malloc+0x1ec>)
 8007966:	4815      	ldr	r0, [pc, #84]	; (80079bc <mem_malloc+0x1dc>)
 8007968:	f00a f9a6 	bl	8011cb8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	f003 0303 	and.w	r3, r3, #3
 8007972:	2b00      	cmp	r3, #0
 8007974:	d006      	beq.n	8007984 <mem_malloc+0x1a4>
 8007976:	4b0f      	ldr	r3, [pc, #60]	; (80079b4 <mem_malloc+0x1d4>)
 8007978:	f240 32bd 	movw	r2, #957	; 0x3bd
 800797c:	4914      	ldr	r1, [pc, #80]	; (80079d0 <mem_malloc+0x1f0>)
 800797e:	480f      	ldr	r0, [pc, #60]	; (80079bc <mem_malloc+0x1dc>)
 8007980:	f00a f99a 	bl	8011cb8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	3308      	adds	r3, #8
 8007988:	e00e      	b.n	80079a8 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800798a:	8bfb      	ldrh	r3, [r7, #30]
 800798c:	4618      	mov	r0, r3
 800798e:	f7ff fc83 	bl	8007298 <ptr_to_mem>
 8007992:	4603      	mov	r3, r0
 8007994:	881b      	ldrh	r3, [r3, #0]
 8007996:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007998:	8bfa      	ldrh	r2, [r7, #30]
 800799a:	8bbb      	ldrh	r3, [r7, #28]
 800799c:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 80079a0:	429a      	cmp	r2, r3
 80079a2:	f4ff af44 	bcc.w	800782e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80079a6:	2300      	movs	r3, #0
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3720      	adds	r7, #32
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}
 80079b0:	200078d0 	.word	0x200078d0
 80079b4:	08013cf8 	.word	0x08013cf8
 80079b8:	08013ea0 	.word	0x08013ea0
 80079bc:	08013d40 	.word	0x08013d40
 80079c0:	200078cc 	.word	0x200078cc
 80079c4:	08013eb4 	.word	0x08013eb4
 80079c8:	08013ed0 	.word	0x08013ed0
 80079cc:	08013f00 	.word	0x08013f00
 80079d0:	08013f30 	.word	0x08013f30

080079d4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	2200      	movs	r2, #0
 80079e2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	3303      	adds	r3, #3
 80079ea:	f023 0303 	bic.w	r3, r3, #3
 80079ee:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80079f0:	2300      	movs	r3, #0
 80079f2:	60fb      	str	r3, [r7, #12]
 80079f4:	e011      	b.n	8007a1a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	68ba      	ldr	r2, [r7, #8]
 8007a06:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	881b      	ldrh	r3, [r3, #0]
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	4413      	add	r3, r2
 8007a12:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	3301      	adds	r3, #1
 8007a18:	60fb      	str	r3, [r7, #12]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	885b      	ldrh	r3, [r3, #2]
 8007a1e:	461a      	mov	r2, r3
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	4293      	cmp	r3, r2
 8007a24:	dbe7      	blt.n	80079f6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8007a26:	bf00      	nop
 8007a28:	bf00      	nop
 8007a2a:	3714      	adds	r7, #20
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b082      	sub	sp, #8
 8007a38:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	80fb      	strh	r3, [r7, #6]
 8007a3e:	e009      	b.n	8007a54 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8007a40:	88fb      	ldrh	r3, [r7, #6]
 8007a42:	4a08      	ldr	r2, [pc, #32]	; (8007a64 <memp_init+0x30>)
 8007a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f7ff ffc3 	bl	80079d4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007a4e:	88fb      	ldrh	r3, [r7, #6]
 8007a50:	3301      	adds	r3, #1
 8007a52:	80fb      	strh	r3, [r7, #6]
 8007a54:	88fb      	ldrh	r3, [r7, #6]
 8007a56:	2b08      	cmp	r3, #8
 8007a58:	d9f2      	bls.n	8007a40 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8007a5a:	bf00      	nop
 8007a5c:	bf00      	nop
 8007a5e:	3708      	adds	r7, #8
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	08016714 	.word	0x08016714

08007a68 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d012      	beq.n	8007aa4 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	68fa      	ldr	r2, [r7, #12]
 8007a84:	6812      	ldr	r2, [r2, #0]
 8007a86:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f003 0303 	and.w	r3, r3, #3
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d006      	beq.n	8007aa0 <do_memp_malloc_pool+0x38>
 8007a92:	4b07      	ldr	r3, [pc, #28]	; (8007ab0 <do_memp_malloc_pool+0x48>)
 8007a94:	f44f 728c 	mov.w	r2, #280	; 0x118
 8007a98:	4906      	ldr	r1, [pc, #24]	; (8007ab4 <do_memp_malloc_pool+0x4c>)
 8007a9a:	4807      	ldr	r0, [pc, #28]	; (8007ab8 <do_memp_malloc_pool+0x50>)
 8007a9c:	f00a f90c 	bl	8011cb8 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	e000      	b.n	8007aa6 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8007aa4:	2300      	movs	r3, #0
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3710      	adds	r7, #16
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
 8007aae:	bf00      	nop
 8007ab0:	08013f54 	.word	0x08013f54
 8007ab4:	08013f84 	.word	0x08013f84
 8007ab8:	08013fa8 	.word	0x08013fa8

08007abc <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b082      	sub	sp, #8
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d106      	bne.n	8007ad8 <memp_malloc_pool+0x1c>
 8007aca:	4b0a      	ldr	r3, [pc, #40]	; (8007af4 <memp_malloc_pool+0x38>)
 8007acc:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8007ad0:	4909      	ldr	r1, [pc, #36]	; (8007af8 <memp_malloc_pool+0x3c>)
 8007ad2:	480a      	ldr	r0, [pc, #40]	; (8007afc <memp_malloc_pool+0x40>)
 8007ad4:	f00a f8f0 	bl	8011cb8 <iprintf>
  if (desc == NULL) {
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d101      	bne.n	8007ae2 <memp_malloc_pool+0x26>
    return NULL;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	e003      	b.n	8007aea <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f7ff ffc0 	bl	8007a68 <do_memp_malloc_pool>
 8007ae8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3708      	adds	r7, #8
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	08013f54 	.word	0x08013f54
 8007af8:	08013fd0 	.word	0x08013fd0
 8007afc:	08013fa8 	.word	0x08013fa8

08007b00 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	4603      	mov	r3, r0
 8007b08:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007b0a:	79fb      	ldrb	r3, [r7, #7]
 8007b0c:	2b08      	cmp	r3, #8
 8007b0e:	d908      	bls.n	8007b22 <memp_malloc+0x22>
 8007b10:	4b0a      	ldr	r3, [pc, #40]	; (8007b3c <memp_malloc+0x3c>)
 8007b12:	f240 1257 	movw	r2, #343	; 0x157
 8007b16:	490a      	ldr	r1, [pc, #40]	; (8007b40 <memp_malloc+0x40>)
 8007b18:	480a      	ldr	r0, [pc, #40]	; (8007b44 <memp_malloc+0x44>)
 8007b1a:	f00a f8cd 	bl	8011cb8 <iprintf>
 8007b1e:	2300      	movs	r3, #0
 8007b20:	e008      	b.n	8007b34 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8007b22:	79fb      	ldrb	r3, [r7, #7]
 8007b24:	4a08      	ldr	r2, [pc, #32]	; (8007b48 <memp_malloc+0x48>)
 8007b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f7ff ff9c 	bl	8007a68 <do_memp_malloc_pool>
 8007b30:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8007b32:	68fb      	ldr	r3, [r7, #12]
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3710      	adds	r7, #16
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}
 8007b3c:	08013f54 	.word	0x08013f54
 8007b40:	08013fe4 	.word	0x08013fe4
 8007b44:	08013fa8 	.word	0x08013fa8
 8007b48:	08016714 	.word	0x08016714

08007b4c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	f003 0303 	and.w	r3, r3, #3
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d006      	beq.n	8007b6e <do_memp_free_pool+0x22>
 8007b60:	4b0a      	ldr	r3, [pc, #40]	; (8007b8c <do_memp_free_pool+0x40>)
 8007b62:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8007b66:	490a      	ldr	r1, [pc, #40]	; (8007b90 <do_memp_free_pool+0x44>)
 8007b68:	480a      	ldr	r0, [pc, #40]	; (8007b94 <do_memp_free_pool+0x48>)
 8007b6a:	f00a f8a5 	bl	8011cb8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	68fa      	ldr	r2, [r7, #12]
 8007b82:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8007b84:	bf00      	nop
 8007b86:	3710      	adds	r7, #16
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	08013f54 	.word	0x08013f54
 8007b90:	08014004 	.word	0x08014004
 8007b94:	08013fa8 	.word	0x08013fa8

08007b98 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d106      	bne.n	8007bb6 <memp_free_pool+0x1e>
 8007ba8:	4b0a      	ldr	r3, [pc, #40]	; (8007bd4 <memp_free_pool+0x3c>)
 8007baa:	f240 1295 	movw	r2, #405	; 0x195
 8007bae:	490a      	ldr	r1, [pc, #40]	; (8007bd8 <memp_free_pool+0x40>)
 8007bb0:	480a      	ldr	r0, [pc, #40]	; (8007bdc <memp_free_pool+0x44>)
 8007bb2:	f00a f881 	bl	8011cb8 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d007      	beq.n	8007bcc <memp_free_pool+0x34>
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d004      	beq.n	8007bcc <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8007bc2:	6839      	ldr	r1, [r7, #0]
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f7ff ffc1 	bl	8007b4c <do_memp_free_pool>
 8007bca:	e000      	b.n	8007bce <memp_free_pool+0x36>
    return;
 8007bcc:	bf00      	nop
}
 8007bce:	3708      	adds	r7, #8
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	08013f54 	.word	0x08013f54
 8007bd8:	08013fd0 	.word	0x08013fd0
 8007bdc:	08013fa8 	.word	0x08013fa8

08007be0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	4603      	mov	r3, r0
 8007be8:	6039      	str	r1, [r7, #0]
 8007bea:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007bec:	79fb      	ldrb	r3, [r7, #7]
 8007bee:	2b08      	cmp	r3, #8
 8007bf0:	d907      	bls.n	8007c02 <memp_free+0x22>
 8007bf2:	4b0c      	ldr	r3, [pc, #48]	; (8007c24 <memp_free+0x44>)
 8007bf4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8007bf8:	490b      	ldr	r1, [pc, #44]	; (8007c28 <memp_free+0x48>)
 8007bfa:	480c      	ldr	r0, [pc, #48]	; (8007c2c <memp_free+0x4c>)
 8007bfc:	f00a f85c 	bl	8011cb8 <iprintf>
 8007c00:	e00c      	b.n	8007c1c <memp_free+0x3c>

  if (mem == NULL) {
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d008      	beq.n	8007c1a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007c08:	79fb      	ldrb	r3, [r7, #7]
 8007c0a:	4a09      	ldr	r2, [pc, #36]	; (8007c30 <memp_free+0x50>)
 8007c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c10:	6839      	ldr	r1, [r7, #0]
 8007c12:	4618      	mov	r0, r3
 8007c14:	f7ff ff9a 	bl	8007b4c <do_memp_free_pool>
 8007c18:	e000      	b.n	8007c1c <memp_free+0x3c>
    return;
 8007c1a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8007c1c:	3708      	adds	r7, #8
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	08013f54 	.word	0x08013f54
 8007c28:	08014024 	.word	0x08014024
 8007c2c:	08013fa8 	.word	0x08013fa8
 8007c30:	08016714 	.word	0x08016714

08007c34 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8007c34:	b480      	push	{r7}
 8007c36:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8007c38:	bf00      	nop
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr
	...

08007c44 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b086      	sub	sp, #24
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	60f8      	str	r0, [r7, #12]
 8007c4c:	60b9      	str	r1, [r7, #8]
 8007c4e:	607a      	str	r2, [r7, #4]
 8007c50:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d108      	bne.n	8007c6a <netif_add+0x26>
 8007c58:	4b57      	ldr	r3, [pc, #348]	; (8007db8 <netif_add+0x174>)
 8007c5a:	f240 1227 	movw	r2, #295	; 0x127
 8007c5e:	4957      	ldr	r1, [pc, #348]	; (8007dbc <netif_add+0x178>)
 8007c60:	4857      	ldr	r0, [pc, #348]	; (8007dc0 <netif_add+0x17c>)
 8007c62:	f00a f829 	bl	8011cb8 <iprintf>
 8007c66:	2300      	movs	r3, #0
 8007c68:	e0a2      	b.n	8007db0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8007c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d108      	bne.n	8007c82 <netif_add+0x3e>
 8007c70:	4b51      	ldr	r3, [pc, #324]	; (8007db8 <netif_add+0x174>)
 8007c72:	f44f 7294 	mov.w	r2, #296	; 0x128
 8007c76:	4953      	ldr	r1, [pc, #332]	; (8007dc4 <netif_add+0x180>)
 8007c78:	4851      	ldr	r0, [pc, #324]	; (8007dc0 <netif_add+0x17c>)
 8007c7a:	f00a f81d 	bl	8011cb8 <iprintf>
 8007c7e:	2300      	movs	r3, #0
 8007c80:	e096      	b.n	8007db0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d101      	bne.n	8007c8c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8007c88:	4b4f      	ldr	r3, [pc, #316]	; (8007dc8 <netif_add+0x184>)
 8007c8a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d101      	bne.n	8007c96 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8007c92:	4b4d      	ldr	r3, [pc, #308]	; (8007dc8 <netif_add+0x184>)
 8007c94:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d101      	bne.n	8007ca0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8007c9c:	4b4a      	ldr	r3, [pc, #296]	; (8007dc8 <netif_add+0x184>)
 8007c9e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	4a45      	ldr	r2, [pc, #276]	; (8007dcc <netif_add+0x188>)
 8007cb6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6a3a      	ldr	r2, [r7, #32]
 8007cd0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8007cd2:	4b3f      	ldr	r3, [pc, #252]	; (8007dd0 <netif_add+0x18c>)
 8007cd4:	781a      	ldrb	r2, [r3, #0]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ce0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	68b9      	ldr	r1, [r7, #8]
 8007ce8:	68f8      	ldr	r0, [r7, #12]
 8007cea:	f000 f913 	bl	8007f14 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8007cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf0:	68f8      	ldr	r0, [r7, #12]
 8007cf2:	4798      	blx	r3
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d001      	beq.n	8007cfe <netif_add+0xba>
    return NULL;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	e058      	b.n	8007db0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007d04:	2bff      	cmp	r3, #255	; 0xff
 8007d06:	d103      	bne.n	8007d10 <netif_add+0xcc>
        netif->num = 0;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8007d10:	2300      	movs	r3, #0
 8007d12:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007d14:	4b2f      	ldr	r3, [pc, #188]	; (8007dd4 <netif_add+0x190>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	617b      	str	r3, [r7, #20]
 8007d1a:	e02b      	b.n	8007d74 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8007d1c:	697a      	ldr	r2, [r7, #20]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d106      	bne.n	8007d32 <netif_add+0xee>
 8007d24:	4b24      	ldr	r3, [pc, #144]	; (8007db8 <netif_add+0x174>)
 8007d26:	f240 128b 	movw	r2, #395	; 0x18b
 8007d2a:	492b      	ldr	r1, [pc, #172]	; (8007dd8 <netif_add+0x194>)
 8007d2c:	4824      	ldr	r0, [pc, #144]	; (8007dc0 <netif_add+0x17c>)
 8007d2e:	f009 ffc3 	bl	8011cb8 <iprintf>
        num_netifs++;
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	3301      	adds	r3, #1
 8007d36:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	2bff      	cmp	r3, #255	; 0xff
 8007d3c:	dd06      	ble.n	8007d4c <netif_add+0x108>
 8007d3e:	4b1e      	ldr	r3, [pc, #120]	; (8007db8 <netif_add+0x174>)
 8007d40:	f240 128d 	movw	r2, #397	; 0x18d
 8007d44:	4925      	ldr	r1, [pc, #148]	; (8007ddc <netif_add+0x198>)
 8007d46:	481e      	ldr	r0, [pc, #120]	; (8007dc0 <netif_add+0x17c>)
 8007d48:	f009 ffb6 	bl	8011cb8 <iprintf>
        if (netif2->num == netif->num) {
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d108      	bne.n	8007d6e <netif_add+0x12a>
          netif->num++;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007d62:	3301      	adds	r3, #1
 8007d64:	b2da      	uxtb	r2, r3
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8007d6c:	e005      	b.n	8007d7a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	617b      	str	r3, [r7, #20]
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d1d0      	bne.n	8007d1c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d1be      	bne.n	8007cfe <netif_add+0xba>
  }
  if (netif->num == 254) {
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007d86:	2bfe      	cmp	r3, #254	; 0xfe
 8007d88:	d103      	bne.n	8007d92 <netif_add+0x14e>
    netif_num = 0;
 8007d8a:	4b11      	ldr	r3, [pc, #68]	; (8007dd0 <netif_add+0x18c>)
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	701a      	strb	r2, [r3, #0]
 8007d90:	e006      	b.n	8007da0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007d98:	3301      	adds	r3, #1
 8007d9a:	b2da      	uxtb	r2, r3
 8007d9c:	4b0c      	ldr	r3, [pc, #48]	; (8007dd0 <netif_add+0x18c>)
 8007d9e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8007da0:	4b0c      	ldr	r3, [pc, #48]	; (8007dd4 <netif_add+0x190>)
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8007da8:	4a0a      	ldr	r2, [pc, #40]	; (8007dd4 <netif_add+0x190>)
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8007dae:	68fb      	ldr	r3, [r7, #12]
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3718      	adds	r7, #24
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	08014040 	.word	0x08014040
 8007dbc:	080140d4 	.word	0x080140d4
 8007dc0:	08014090 	.word	0x08014090
 8007dc4:	080140f0 	.word	0x080140f0
 8007dc8:	08016778 	.word	0x08016778
 8007dcc:	080081ef 	.word	0x080081ef
 8007dd0:	2000a7c8 	.word	0x2000a7c8
 8007dd4:	2000a7c0 	.word	0x2000a7c0
 8007dd8:	08014114 	.word	0x08014114
 8007ddc:	08014128 	.word	0x08014128

08007de0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8007dea:	6839      	ldr	r1, [r7, #0]
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f002 fb43 	bl	800a478 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8007df2:	6839      	ldr	r1, [r7, #0]
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f006 fd8d 	bl	800e914 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8007dfa:	bf00      	nop
 8007dfc:	3708      	adds	r7, #8
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
	...

08007e04 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b086      	sub	sp, #24
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d106      	bne.n	8007e24 <netif_do_set_ipaddr+0x20>
 8007e16:	4b1d      	ldr	r3, [pc, #116]	; (8007e8c <netif_do_set_ipaddr+0x88>)
 8007e18:	f240 12cb 	movw	r2, #459	; 0x1cb
 8007e1c:	491c      	ldr	r1, [pc, #112]	; (8007e90 <netif_do_set_ipaddr+0x8c>)
 8007e1e:	481d      	ldr	r0, [pc, #116]	; (8007e94 <netif_do_set_ipaddr+0x90>)
 8007e20:	f009 ff4a 	bl	8011cb8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d106      	bne.n	8007e38 <netif_do_set_ipaddr+0x34>
 8007e2a:	4b18      	ldr	r3, [pc, #96]	; (8007e8c <netif_do_set_ipaddr+0x88>)
 8007e2c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8007e30:	4917      	ldr	r1, [pc, #92]	; (8007e90 <netif_do_set_ipaddr+0x8c>)
 8007e32:	4818      	ldr	r0, [pc, #96]	; (8007e94 <netif_do_set_ipaddr+0x90>)
 8007e34:	f009 ff40 	bl	8011cb8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	3304      	adds	r3, #4
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d01c      	beq.n	8007e80 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	3304      	adds	r3, #4
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8007e56:	f107 0314 	add.w	r3, r7, #20
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f7ff ffbf 	bl	8007de0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d002      	beq.n	8007e6e <netif_do_set_ipaddr+0x6a>
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	e000      	b.n	8007e70 <netif_do_set_ipaddr+0x6c>
 8007e6e:	2300      	movs	r3, #0
 8007e70:	68fa      	ldr	r2, [r7, #12]
 8007e72:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8007e74:	2101      	movs	r1, #1
 8007e76:	68f8      	ldr	r0, [r7, #12]
 8007e78:	f000 f8d2 	bl	8008020 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	e000      	b.n	8007e82 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3718      	adds	r7, #24
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
 8007e8a:	bf00      	nop
 8007e8c:	08014040 	.word	0x08014040
 8007e90:	08014158 	.word	0x08014158
 8007e94:	08014090 	.word	0x08014090

08007e98 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	60b9      	str	r1, [r7, #8]
 8007ea2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	3308      	adds	r3, #8
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d00a      	beq.n	8007ec8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d002      	beq.n	8007ebe <netif_do_set_netmask+0x26>
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	e000      	b.n	8007ec0 <netif_do_set_netmask+0x28>
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	e000      	b.n	8007eca <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8007ec8:	2300      	movs	r3, #0
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3714      	adds	r7, #20
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr

08007ed6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8007ed6:	b480      	push	{r7}
 8007ed8:	b085      	sub	sp, #20
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	60f8      	str	r0, [r7, #12]
 8007ede:	60b9      	str	r1, [r7, #8]
 8007ee0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	330c      	adds	r3, #12
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d00a      	beq.n	8007f06 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d002      	beq.n	8007efc <netif_do_set_gw+0x26>
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	e000      	b.n	8007efe <netif_do_set_gw+0x28>
 8007efc:	2300      	movs	r3, #0
 8007efe:	68fa      	ldr	r2, [r7, #12]
 8007f00:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8007f02:	2301      	movs	r3, #1
 8007f04:	e000      	b.n	8007f08 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8007f06:	2300      	movs	r3, #0
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3714      	adds	r7, #20
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b088      	sub	sp, #32
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	60f8      	str	r0, [r7, #12]
 8007f1c:	60b9      	str	r1, [r7, #8]
 8007f1e:	607a      	str	r2, [r7, #4]
 8007f20:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8007f22:	2300      	movs	r3, #0
 8007f24:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8007f26:	2300      	movs	r3, #0
 8007f28:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d101      	bne.n	8007f34 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8007f30:	4b1c      	ldr	r3, [pc, #112]	; (8007fa4 <netif_set_addr+0x90>)
 8007f32:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d101      	bne.n	8007f3e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8007f3a:	4b1a      	ldr	r3, [pc, #104]	; (8007fa4 <netif_set_addr+0x90>)
 8007f3c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d101      	bne.n	8007f48 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8007f44:	4b17      	ldr	r3, [pc, #92]	; (8007fa4 <netif_set_addr+0x90>)
 8007f46:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d003      	beq.n	8007f56 <netif_set_addr+0x42>
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d101      	bne.n	8007f5a <netif_set_addr+0x46>
 8007f56:	2301      	movs	r3, #1
 8007f58:	e000      	b.n	8007f5c <netif_set_addr+0x48>
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	617b      	str	r3, [r7, #20]
  if (remove) {
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d006      	beq.n	8007f72 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007f64:	f107 0310 	add.w	r3, r7, #16
 8007f68:	461a      	mov	r2, r3
 8007f6a:	68b9      	ldr	r1, [r7, #8]
 8007f6c:	68f8      	ldr	r0, [r7, #12]
 8007f6e:	f7ff ff49 	bl	8007e04 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8007f72:	69fa      	ldr	r2, [r7, #28]
 8007f74:	6879      	ldr	r1, [r7, #4]
 8007f76:	68f8      	ldr	r0, [r7, #12]
 8007f78:	f7ff ff8e 	bl	8007e98 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8007f7c:	69ba      	ldr	r2, [r7, #24]
 8007f7e:	6839      	ldr	r1, [r7, #0]
 8007f80:	68f8      	ldr	r0, [r7, #12]
 8007f82:	f7ff ffa8 	bl	8007ed6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d106      	bne.n	8007f9a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007f8c:	f107 0310 	add.w	r3, r7, #16
 8007f90:	461a      	mov	r2, r3
 8007f92:	68b9      	ldr	r1, [r7, #8]
 8007f94:	68f8      	ldr	r0, [r7, #12]
 8007f96:	f7ff ff35 	bl	8007e04 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8007f9a:	bf00      	nop
 8007f9c:	3720      	adds	r7, #32
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	08016778 	.word	0x08016778

08007fa8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8007fb0:	4a04      	ldr	r2, [pc, #16]	; (8007fc4 <netif_set_default+0x1c>)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8007fb6:	bf00      	nop
 8007fb8:	370c      	adds	r7, #12
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr
 8007fc2:	bf00      	nop
 8007fc4:	2000a7c4 	.word	0x2000a7c4

08007fc8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d107      	bne.n	8007fe6 <netif_set_up+0x1e>
 8007fd6:	4b0f      	ldr	r3, [pc, #60]	; (8008014 <netif_set_up+0x4c>)
 8007fd8:	f44f 7254 	mov.w	r2, #848	; 0x350
 8007fdc:	490e      	ldr	r1, [pc, #56]	; (8008018 <netif_set_up+0x50>)
 8007fde:	480f      	ldr	r0, [pc, #60]	; (800801c <netif_set_up+0x54>)
 8007fe0:	f009 fe6a 	bl	8011cb8 <iprintf>
 8007fe4:	e013      	b.n	800800e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007fec:	f003 0301 	and.w	r3, r3, #1
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d10c      	bne.n	800800e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007ffa:	f043 0301 	orr.w	r3, r3, #1
 8007ffe:	b2da      	uxtb	r2, r3
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008006:	2103      	movs	r1, #3
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 f809 	bl	8008020 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800800e:	3708      	adds	r7, #8
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}
 8008014:	08014040 	.word	0x08014040
 8008018:	080141c8 	.word	0x080141c8
 800801c:	08014090 	.word	0x08014090

08008020 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b082      	sub	sp, #8
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	460b      	mov	r3, r1
 800802a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d106      	bne.n	8008040 <netif_issue_reports+0x20>
 8008032:	4b18      	ldr	r3, [pc, #96]	; (8008094 <netif_issue_reports+0x74>)
 8008034:	f240 326d 	movw	r2, #877	; 0x36d
 8008038:	4917      	ldr	r1, [pc, #92]	; (8008098 <netif_issue_reports+0x78>)
 800803a:	4818      	ldr	r0, [pc, #96]	; (800809c <netif_issue_reports+0x7c>)
 800803c:	f009 fe3c 	bl	8011cb8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008046:	f003 0304 	and.w	r3, r3, #4
 800804a:	2b00      	cmp	r3, #0
 800804c:	d01e      	beq.n	800808c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008054:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008058:	2b00      	cmp	r3, #0
 800805a:	d017      	beq.n	800808c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800805c:	78fb      	ldrb	r3, [r7, #3]
 800805e:	f003 0301 	and.w	r3, r3, #1
 8008062:	2b00      	cmp	r3, #0
 8008064:	d013      	beq.n	800808e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	3304      	adds	r3, #4
 800806a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800806c:	2b00      	cmp	r3, #0
 800806e:	d00e      	beq.n	800808e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008076:	f003 0308 	and.w	r3, r3, #8
 800807a:	2b00      	cmp	r3, #0
 800807c:	d007      	beq.n	800808e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	3304      	adds	r3, #4
 8008082:	4619      	mov	r1, r3
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f007 fbaf 	bl	800f7e8 <etharp_request>
 800808a:	e000      	b.n	800808e <netif_issue_reports+0x6e>
    return;
 800808c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800808e:	3708      	adds	r7, #8
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}
 8008094:	08014040 	.word	0x08014040
 8008098:	080141e4 	.word	0x080141e4
 800809c:	08014090 	.word	0x08014090

080080a0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b082      	sub	sp, #8
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d107      	bne.n	80080be <netif_set_down+0x1e>
 80080ae:	4b12      	ldr	r3, [pc, #72]	; (80080f8 <netif_set_down+0x58>)
 80080b0:	f240 329b 	movw	r2, #923	; 0x39b
 80080b4:	4911      	ldr	r1, [pc, #68]	; (80080fc <netif_set_down+0x5c>)
 80080b6:	4812      	ldr	r0, [pc, #72]	; (8008100 <netif_set_down+0x60>)
 80080b8:	f009 fdfe 	bl	8011cb8 <iprintf>
 80080bc:	e019      	b.n	80080f2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80080c4:	f003 0301 	and.w	r3, r3, #1
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d012      	beq.n	80080f2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80080d2:	f023 0301 	bic.w	r3, r3, #1
 80080d6:	b2da      	uxtb	r2, r3
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80080e4:	f003 0308 	and.w	r3, r3, #8
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d002      	beq.n	80080f2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f006 ff39 	bl	800ef64 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80080f2:	3708      	adds	r7, #8
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}
 80080f8:	08014040 	.word	0x08014040
 80080fc:	08014208 	.word	0x08014208
 8008100:	08014090 	.word	0x08014090

08008104 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d107      	bne.n	8008122 <netif_set_link_up+0x1e>
 8008112:	4b13      	ldr	r3, [pc, #76]	; (8008160 <netif_set_link_up+0x5c>)
 8008114:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8008118:	4912      	ldr	r1, [pc, #72]	; (8008164 <netif_set_link_up+0x60>)
 800811a:	4813      	ldr	r0, [pc, #76]	; (8008168 <netif_set_link_up+0x64>)
 800811c:	f009 fdcc 	bl	8011cb8 <iprintf>
 8008120:	e01b      	b.n	800815a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008128:	f003 0304 	and.w	r3, r3, #4
 800812c:	2b00      	cmp	r3, #0
 800812e:	d114      	bne.n	800815a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008136:	f043 0304 	orr.w	r3, r3, #4
 800813a:	b2da      	uxtb	r2, r3
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008142:	2103      	movs	r1, #3
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f7ff ff6b 	bl	8008020 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	69db      	ldr	r3, [r3, #28]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d003      	beq.n	800815a <netif_set_link_up+0x56>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	69db      	ldr	r3, [r3, #28]
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800815a:	3708      	adds	r7, #8
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}
 8008160:	08014040 	.word	0x08014040
 8008164:	08014228 	.word	0x08014228
 8008168:	08014090 	.word	0x08014090

0800816c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d107      	bne.n	800818a <netif_set_link_down+0x1e>
 800817a:	4b11      	ldr	r3, [pc, #68]	; (80081c0 <netif_set_link_down+0x54>)
 800817c:	f240 4206 	movw	r2, #1030	; 0x406
 8008180:	4910      	ldr	r1, [pc, #64]	; (80081c4 <netif_set_link_down+0x58>)
 8008182:	4811      	ldr	r0, [pc, #68]	; (80081c8 <netif_set_link_down+0x5c>)
 8008184:	f009 fd98 	bl	8011cb8 <iprintf>
 8008188:	e017      	b.n	80081ba <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008190:	f003 0304 	and.w	r3, r3, #4
 8008194:	2b00      	cmp	r3, #0
 8008196:	d010      	beq.n	80081ba <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800819e:	f023 0304 	bic.w	r3, r3, #4
 80081a2:	b2da      	uxtb	r2, r3
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	69db      	ldr	r3, [r3, #28]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d003      	beq.n	80081ba <netif_set_link_down+0x4e>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	69db      	ldr	r3, [r3, #28]
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80081ba:	3708      	adds	r7, #8
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}
 80081c0:	08014040 	.word	0x08014040
 80081c4:	0801424c 	.word	0x0801424c
 80081c8:	08014090 	.word	0x08014090

080081cc <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b083      	sub	sp, #12
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d002      	beq.n	80081e2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	683a      	ldr	r2, [r7, #0]
 80081e0:	61da      	str	r2, [r3, #28]
  }
}
 80081e2:	bf00      	nop
 80081e4:	370c      	adds	r7, #12
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr

080081ee <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80081ee:	b480      	push	{r7}
 80081f0:	b085      	sub	sp, #20
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	60f8      	str	r0, [r7, #12]
 80081f6:	60b9      	str	r1, [r7, #8]
 80081f8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80081fa:	f06f 030b 	mvn.w	r3, #11
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3714      	adds	r7, #20
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr
	...

0800820c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800820c:	b480      	push	{r7}
 800820e:	b085      	sub	sp, #20
 8008210:	af00      	add	r7, sp, #0
 8008212:	4603      	mov	r3, r0
 8008214:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8008216:	79fb      	ldrb	r3, [r7, #7]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d013      	beq.n	8008244 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800821c:	4b0d      	ldr	r3, [pc, #52]	; (8008254 <netif_get_by_index+0x48>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	60fb      	str	r3, [r7, #12]
 8008222:	e00c      	b.n	800823e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800822a:	3301      	adds	r3, #1
 800822c:	b2db      	uxtb	r3, r3
 800822e:	79fa      	ldrb	r2, [r7, #7]
 8008230:	429a      	cmp	r2, r3
 8008232:	d101      	bne.n	8008238 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	e006      	b.n	8008246 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	60fb      	str	r3, [r7, #12]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d1ef      	bne.n	8008224 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8008244:	2300      	movs	r3, #0
}
 8008246:	4618      	mov	r0, r3
 8008248:	3714      	adds	r7, #20
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr
 8008252:	bf00      	nop
 8008254:	2000a7c0 	.word	0x2000a7c0

08008258 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800825e:	4b0c      	ldr	r3, [pc, #48]	; (8008290 <pbuf_free_ooseq+0x38>)
 8008260:	2200      	movs	r2, #0
 8008262:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008264:	4b0b      	ldr	r3, [pc, #44]	; (8008294 <pbuf_free_ooseq+0x3c>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	607b      	str	r3, [r7, #4]
 800826a:	e00a      	b.n	8008282 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008270:	2b00      	cmp	r3, #0
 8008272:	d003      	beq.n	800827c <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f002 f93d 	bl	800a4f4 <tcp_free_ooseq>
      return;
 800827a:	e005      	b.n	8008288 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	607b      	str	r3, [r7, #4]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d1f1      	bne.n	800826c <pbuf_free_ooseq+0x14>
    }
  }
}
 8008288:	3708      	adds	r7, #8
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	2000a7c9 	.word	0x2000a7c9
 8008294:	2000a7d8 	.word	0x2000a7d8

08008298 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8008298:	b480      	push	{r7}
 800829a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800829c:	4b03      	ldr	r3, [pc, #12]	; (80082ac <pbuf_pool_is_empty+0x14>)
 800829e:	2201      	movs	r2, #1
 80082a0:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80082a2:	bf00      	nop
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr
 80082ac:	2000a7c9 	.word	0x2000a7c9

080082b0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b085      	sub	sp, #20
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	60b9      	str	r1, [r7, #8]
 80082ba:	4611      	mov	r1, r2
 80082bc:	461a      	mov	r2, r3
 80082be:	460b      	mov	r3, r1
 80082c0:	80fb      	strh	r3, [r7, #6]
 80082c2:	4613      	mov	r3, r2
 80082c4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2200      	movs	r2, #0
 80082ca:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	68ba      	ldr	r2, [r7, #8]
 80082d0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	88fa      	ldrh	r2, [r7, #6]
 80082d6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	88ba      	ldrh	r2, [r7, #4]
 80082dc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80082de:	8b3b      	ldrh	r3, [r7, #24]
 80082e0:	b2da      	uxtb	r2, r3
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	7f3a      	ldrb	r2, [r7, #28]
 80082ea:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2201      	movs	r2, #1
 80082f0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2200      	movs	r2, #0
 80082f6:	73da      	strb	r2, [r3, #15]
}
 80082f8:	bf00      	nop
 80082fa:	3714      	adds	r7, #20
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr

08008304 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b08c      	sub	sp, #48	; 0x30
 8008308:	af02      	add	r7, sp, #8
 800830a:	4603      	mov	r3, r0
 800830c:	71fb      	strb	r3, [r7, #7]
 800830e:	460b      	mov	r3, r1
 8008310:	80bb      	strh	r3, [r7, #4]
 8008312:	4613      	mov	r3, r2
 8008314:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8008316:	79fb      	ldrb	r3, [r7, #7]
 8008318:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800831a:	887b      	ldrh	r3, [r7, #2]
 800831c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8008320:	d07f      	beq.n	8008422 <pbuf_alloc+0x11e>
 8008322:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8008326:	f300 80c8 	bgt.w	80084ba <pbuf_alloc+0x1b6>
 800832a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800832e:	d010      	beq.n	8008352 <pbuf_alloc+0x4e>
 8008330:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8008334:	f300 80c1 	bgt.w	80084ba <pbuf_alloc+0x1b6>
 8008338:	2b01      	cmp	r3, #1
 800833a:	d002      	beq.n	8008342 <pbuf_alloc+0x3e>
 800833c:	2b41      	cmp	r3, #65	; 0x41
 800833e:	f040 80bc 	bne.w	80084ba <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8008342:	887a      	ldrh	r2, [r7, #2]
 8008344:	88bb      	ldrh	r3, [r7, #4]
 8008346:	4619      	mov	r1, r3
 8008348:	2000      	movs	r0, #0
 800834a:	f000 f8d1 	bl	80084f0 <pbuf_alloc_reference>
 800834e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8008350:	e0bd      	b.n	80084ce <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8008352:	2300      	movs	r3, #0
 8008354:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8008356:	2300      	movs	r3, #0
 8008358:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800835a:	88bb      	ldrh	r3, [r7, #4]
 800835c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800835e:	2008      	movs	r0, #8
 8008360:	f7ff fbce 	bl	8007b00 <memp_malloc>
 8008364:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d109      	bne.n	8008380 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800836c:	f7ff ff94 	bl	8008298 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8008370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008372:	2b00      	cmp	r3, #0
 8008374:	d002      	beq.n	800837c <pbuf_alloc+0x78>
            pbuf_free(p);
 8008376:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008378:	f000 faa8 	bl	80088cc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800837c:	2300      	movs	r3, #0
 800837e:	e0a7      	b.n	80084d0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008380:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008382:	3303      	adds	r3, #3
 8008384:	b29b      	uxth	r3, r3
 8008386:	f023 0303 	bic.w	r3, r3, #3
 800838a:	b29b      	uxth	r3, r3
 800838c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8008390:	b29b      	uxth	r3, r3
 8008392:	8b7a      	ldrh	r2, [r7, #26]
 8008394:	4293      	cmp	r3, r2
 8008396:	bf28      	it	cs
 8008398:	4613      	movcs	r3, r2
 800839a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800839c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800839e:	3310      	adds	r3, #16
 80083a0:	693a      	ldr	r2, [r7, #16]
 80083a2:	4413      	add	r3, r2
 80083a4:	3303      	adds	r3, #3
 80083a6:	f023 0303 	bic.w	r3, r3, #3
 80083aa:	4618      	mov	r0, r3
 80083ac:	89f9      	ldrh	r1, [r7, #14]
 80083ae:	8b7a      	ldrh	r2, [r7, #26]
 80083b0:	2300      	movs	r3, #0
 80083b2:	9301      	str	r3, [sp, #4]
 80083b4:	887b      	ldrh	r3, [r7, #2]
 80083b6:	9300      	str	r3, [sp, #0]
 80083b8:	460b      	mov	r3, r1
 80083ba:	4601      	mov	r1, r0
 80083bc:	6938      	ldr	r0, [r7, #16]
 80083be:	f7ff ff77 	bl	80082b0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	f003 0303 	and.w	r3, r3, #3
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d006      	beq.n	80083dc <pbuf_alloc+0xd8>
 80083ce:	4b42      	ldr	r3, [pc, #264]	; (80084d8 <pbuf_alloc+0x1d4>)
 80083d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80083d4:	4941      	ldr	r1, [pc, #260]	; (80084dc <pbuf_alloc+0x1d8>)
 80083d6:	4842      	ldr	r0, [pc, #264]	; (80084e0 <pbuf_alloc+0x1dc>)
 80083d8:	f009 fc6e 	bl	8011cb8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80083dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80083de:	3303      	adds	r3, #3
 80083e0:	f023 0303 	bic.w	r3, r3, #3
 80083e4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80083e8:	d106      	bne.n	80083f8 <pbuf_alloc+0xf4>
 80083ea:	4b3b      	ldr	r3, [pc, #236]	; (80084d8 <pbuf_alloc+0x1d4>)
 80083ec:	f44f 7281 	mov.w	r2, #258	; 0x102
 80083f0:	493c      	ldr	r1, [pc, #240]	; (80084e4 <pbuf_alloc+0x1e0>)
 80083f2:	483b      	ldr	r0, [pc, #236]	; (80084e0 <pbuf_alloc+0x1dc>)
 80083f4:	f009 fc60 	bl	8011cb8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80083f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d102      	bne.n	8008404 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	627b      	str	r3, [r7, #36]	; 0x24
 8008402:	e002      	b.n	800840a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8008404:	69fb      	ldr	r3, [r7, #28]
 8008406:	693a      	ldr	r2, [r7, #16]
 8008408:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800840e:	8b7a      	ldrh	r2, [r7, #26]
 8008410:	89fb      	ldrh	r3, [r7, #14]
 8008412:	1ad3      	subs	r3, r2, r3
 8008414:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8008416:	2300      	movs	r3, #0
 8008418:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800841a:	8b7b      	ldrh	r3, [r7, #26]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d19e      	bne.n	800835e <pbuf_alloc+0x5a>
      break;
 8008420:	e055      	b.n	80084ce <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8008422:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008424:	3303      	adds	r3, #3
 8008426:	b29b      	uxth	r3, r3
 8008428:	f023 0303 	bic.w	r3, r3, #3
 800842c:	b29a      	uxth	r2, r3
 800842e:	88bb      	ldrh	r3, [r7, #4]
 8008430:	3303      	adds	r3, #3
 8008432:	b29b      	uxth	r3, r3
 8008434:	f023 0303 	bic.w	r3, r3, #3
 8008438:	b29b      	uxth	r3, r3
 800843a:	4413      	add	r3, r2
 800843c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800843e:	8b3b      	ldrh	r3, [r7, #24]
 8008440:	3310      	adds	r3, #16
 8008442:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008444:	8b3a      	ldrh	r2, [r7, #24]
 8008446:	88bb      	ldrh	r3, [r7, #4]
 8008448:	3303      	adds	r3, #3
 800844a:	f023 0303 	bic.w	r3, r3, #3
 800844e:	429a      	cmp	r2, r3
 8008450:	d306      	bcc.n	8008460 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8008452:	8afa      	ldrh	r2, [r7, #22]
 8008454:	88bb      	ldrh	r3, [r7, #4]
 8008456:	3303      	adds	r3, #3
 8008458:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800845c:	429a      	cmp	r2, r3
 800845e:	d201      	bcs.n	8008464 <pbuf_alloc+0x160>
        return NULL;
 8008460:	2300      	movs	r3, #0
 8008462:	e035      	b.n	80084d0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8008464:	8afb      	ldrh	r3, [r7, #22]
 8008466:	4618      	mov	r0, r3
 8008468:	f7ff f9ba 	bl	80077e0 <mem_malloc>
 800846c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800846e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008470:	2b00      	cmp	r3, #0
 8008472:	d101      	bne.n	8008478 <pbuf_alloc+0x174>
        return NULL;
 8008474:	2300      	movs	r3, #0
 8008476:	e02b      	b.n	80084d0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8008478:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800847a:	3310      	adds	r3, #16
 800847c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800847e:	4413      	add	r3, r2
 8008480:	3303      	adds	r3, #3
 8008482:	f023 0303 	bic.w	r3, r3, #3
 8008486:	4618      	mov	r0, r3
 8008488:	88b9      	ldrh	r1, [r7, #4]
 800848a:	88ba      	ldrh	r2, [r7, #4]
 800848c:	2300      	movs	r3, #0
 800848e:	9301      	str	r3, [sp, #4]
 8008490:	887b      	ldrh	r3, [r7, #2]
 8008492:	9300      	str	r3, [sp, #0]
 8008494:	460b      	mov	r3, r1
 8008496:	4601      	mov	r1, r0
 8008498:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800849a:	f7ff ff09 	bl	80082b0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800849e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	f003 0303 	and.w	r3, r3, #3
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d010      	beq.n	80084cc <pbuf_alloc+0x1c8>
 80084aa:	4b0b      	ldr	r3, [pc, #44]	; (80084d8 <pbuf_alloc+0x1d4>)
 80084ac:	f44f 7291 	mov.w	r2, #290	; 0x122
 80084b0:	490d      	ldr	r1, [pc, #52]	; (80084e8 <pbuf_alloc+0x1e4>)
 80084b2:	480b      	ldr	r0, [pc, #44]	; (80084e0 <pbuf_alloc+0x1dc>)
 80084b4:	f009 fc00 	bl	8011cb8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80084b8:	e008      	b.n	80084cc <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80084ba:	4b07      	ldr	r3, [pc, #28]	; (80084d8 <pbuf_alloc+0x1d4>)
 80084bc:	f240 1227 	movw	r2, #295	; 0x127
 80084c0:	490a      	ldr	r1, [pc, #40]	; (80084ec <pbuf_alloc+0x1e8>)
 80084c2:	4807      	ldr	r0, [pc, #28]	; (80084e0 <pbuf_alloc+0x1dc>)
 80084c4:	f009 fbf8 	bl	8011cb8 <iprintf>
      return NULL;
 80084c8:	2300      	movs	r3, #0
 80084ca:	e001      	b.n	80084d0 <pbuf_alloc+0x1cc>
      break;
 80084cc:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80084ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3728      	adds	r7, #40	; 0x28
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}
 80084d8:	08014270 	.word	0x08014270
 80084dc:	080142a0 	.word	0x080142a0
 80084e0:	080142d0 	.word	0x080142d0
 80084e4:	080142f8 	.word	0x080142f8
 80084e8:	0801432c 	.word	0x0801432c
 80084ec:	08014358 	.word	0x08014358

080084f0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b086      	sub	sp, #24
 80084f4:	af02      	add	r7, sp, #8
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	460b      	mov	r3, r1
 80084fa:	807b      	strh	r3, [r7, #2]
 80084fc:	4613      	mov	r3, r2
 80084fe:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8008500:	883b      	ldrh	r3, [r7, #0]
 8008502:	2b41      	cmp	r3, #65	; 0x41
 8008504:	d009      	beq.n	800851a <pbuf_alloc_reference+0x2a>
 8008506:	883b      	ldrh	r3, [r7, #0]
 8008508:	2b01      	cmp	r3, #1
 800850a:	d006      	beq.n	800851a <pbuf_alloc_reference+0x2a>
 800850c:	4b0f      	ldr	r3, [pc, #60]	; (800854c <pbuf_alloc_reference+0x5c>)
 800850e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8008512:	490f      	ldr	r1, [pc, #60]	; (8008550 <pbuf_alloc_reference+0x60>)
 8008514:	480f      	ldr	r0, [pc, #60]	; (8008554 <pbuf_alloc_reference+0x64>)
 8008516:	f009 fbcf 	bl	8011cb8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800851a:	2007      	movs	r0, #7
 800851c:	f7ff faf0 	bl	8007b00 <memp_malloc>
 8008520:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d101      	bne.n	800852c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8008528:	2300      	movs	r3, #0
 800852a:	e00b      	b.n	8008544 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800852c:	8879      	ldrh	r1, [r7, #2]
 800852e:	887a      	ldrh	r2, [r7, #2]
 8008530:	2300      	movs	r3, #0
 8008532:	9301      	str	r3, [sp, #4]
 8008534:	883b      	ldrh	r3, [r7, #0]
 8008536:	9300      	str	r3, [sp, #0]
 8008538:	460b      	mov	r3, r1
 800853a:	6879      	ldr	r1, [r7, #4]
 800853c:	68f8      	ldr	r0, [r7, #12]
 800853e:	f7ff feb7 	bl	80082b0 <pbuf_init_alloced_pbuf>
  return p;
 8008542:	68fb      	ldr	r3, [r7, #12]
}
 8008544:	4618      	mov	r0, r3
 8008546:	3710      	adds	r7, #16
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}
 800854c:	08014270 	.word	0x08014270
 8008550:	08014374 	.word	0x08014374
 8008554:	080142d0 	.word	0x080142d0

08008558 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b088      	sub	sp, #32
 800855c:	af02      	add	r7, sp, #8
 800855e:	607b      	str	r3, [r7, #4]
 8008560:	4603      	mov	r3, r0
 8008562:	73fb      	strb	r3, [r7, #15]
 8008564:	460b      	mov	r3, r1
 8008566:	81bb      	strh	r3, [r7, #12]
 8008568:	4613      	mov	r3, r2
 800856a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800856c:	7bfb      	ldrb	r3, [r7, #15]
 800856e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8008570:	8a7b      	ldrh	r3, [r7, #18]
 8008572:	3303      	adds	r3, #3
 8008574:	f023 0203 	bic.w	r2, r3, #3
 8008578:	89bb      	ldrh	r3, [r7, #12]
 800857a:	441a      	add	r2, r3
 800857c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800857e:	429a      	cmp	r2, r3
 8008580:	d901      	bls.n	8008586 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8008582:	2300      	movs	r3, #0
 8008584:	e018      	b.n	80085b8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8008586:	6a3b      	ldr	r3, [r7, #32]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d007      	beq.n	800859c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800858c:	8a7b      	ldrh	r3, [r7, #18]
 800858e:	3303      	adds	r3, #3
 8008590:	f023 0303 	bic.w	r3, r3, #3
 8008594:	6a3a      	ldr	r2, [r7, #32]
 8008596:	4413      	add	r3, r2
 8008598:	617b      	str	r3, [r7, #20]
 800859a:	e001      	b.n	80085a0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800859c:	2300      	movs	r3, #0
 800859e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	89b9      	ldrh	r1, [r7, #12]
 80085a4:	89ba      	ldrh	r2, [r7, #12]
 80085a6:	2302      	movs	r3, #2
 80085a8:	9301      	str	r3, [sp, #4]
 80085aa:	897b      	ldrh	r3, [r7, #10]
 80085ac:	9300      	str	r3, [sp, #0]
 80085ae:	460b      	mov	r3, r1
 80085b0:	6979      	ldr	r1, [r7, #20]
 80085b2:	f7ff fe7d 	bl	80082b0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80085b6:	687b      	ldr	r3, [r7, #4]
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3718      	adds	r7, #24
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	460b      	mov	r3, r1
 80085ca:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d106      	bne.n	80085e0 <pbuf_realloc+0x20>
 80085d2:	4b3a      	ldr	r3, [pc, #232]	; (80086bc <pbuf_realloc+0xfc>)
 80085d4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80085d8:	4939      	ldr	r1, [pc, #228]	; (80086c0 <pbuf_realloc+0x100>)
 80085da:	483a      	ldr	r0, [pc, #232]	; (80086c4 <pbuf_realloc+0x104>)
 80085dc:	f009 fb6c 	bl	8011cb8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	891b      	ldrh	r3, [r3, #8]
 80085e4:	887a      	ldrh	r2, [r7, #2]
 80085e6:	429a      	cmp	r2, r3
 80085e8:	d263      	bcs.n	80086b2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	891a      	ldrh	r2, [r3, #8]
 80085ee:	887b      	ldrh	r3, [r7, #2]
 80085f0:	1ad3      	subs	r3, r2, r3
 80085f2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80085f4:	887b      	ldrh	r3, [r7, #2]
 80085f6:	817b      	strh	r3, [r7, #10]
  q = p;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80085fc:	e018      	b.n	8008630 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	895b      	ldrh	r3, [r3, #10]
 8008602:	897a      	ldrh	r2, [r7, #10]
 8008604:	1ad3      	subs	r3, r2, r3
 8008606:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	891a      	ldrh	r2, [r3, #8]
 800860c:	893b      	ldrh	r3, [r7, #8]
 800860e:	1ad3      	subs	r3, r2, r3
 8008610:	b29a      	uxth	r2, r3
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d106      	bne.n	8008630 <pbuf_realloc+0x70>
 8008622:	4b26      	ldr	r3, [pc, #152]	; (80086bc <pbuf_realloc+0xfc>)
 8008624:	f240 12af 	movw	r2, #431	; 0x1af
 8008628:	4927      	ldr	r1, [pc, #156]	; (80086c8 <pbuf_realloc+0x108>)
 800862a:	4826      	ldr	r0, [pc, #152]	; (80086c4 <pbuf_realloc+0x104>)
 800862c:	f009 fb44 	bl	8011cb8 <iprintf>
  while (rem_len > q->len) {
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	895b      	ldrh	r3, [r3, #10]
 8008634:	897a      	ldrh	r2, [r7, #10]
 8008636:	429a      	cmp	r2, r3
 8008638:	d8e1      	bhi.n	80085fe <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	7b1b      	ldrb	r3, [r3, #12]
 800863e:	f003 030f 	and.w	r3, r3, #15
 8008642:	2b00      	cmp	r3, #0
 8008644:	d121      	bne.n	800868a <pbuf_realloc+0xca>
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	895b      	ldrh	r3, [r3, #10]
 800864a:	897a      	ldrh	r2, [r7, #10]
 800864c:	429a      	cmp	r2, r3
 800864e:	d01c      	beq.n	800868a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	7b5b      	ldrb	r3, [r3, #13]
 8008654:	f003 0302 	and.w	r3, r3, #2
 8008658:	2b00      	cmp	r3, #0
 800865a:	d116      	bne.n	800868a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	685a      	ldr	r2, [r3, #4]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	1ad3      	subs	r3, r2, r3
 8008664:	b29a      	uxth	r2, r3
 8008666:	897b      	ldrh	r3, [r7, #10]
 8008668:	4413      	add	r3, r2
 800866a:	b29b      	uxth	r3, r3
 800866c:	4619      	mov	r1, r3
 800866e:	68f8      	ldr	r0, [r7, #12]
 8008670:	f7fe ffba 	bl	80075e8 <mem_trim>
 8008674:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d106      	bne.n	800868a <pbuf_realloc+0xca>
 800867c:	4b0f      	ldr	r3, [pc, #60]	; (80086bc <pbuf_realloc+0xfc>)
 800867e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8008682:	4912      	ldr	r1, [pc, #72]	; (80086cc <pbuf_realloc+0x10c>)
 8008684:	480f      	ldr	r0, [pc, #60]	; (80086c4 <pbuf_realloc+0x104>)
 8008686:	f009 fb17 	bl	8011cb8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	897a      	ldrh	r2, [r7, #10]
 800868e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	895a      	ldrh	r2, [r3, #10]
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d004      	beq.n	80086aa <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4618      	mov	r0, r3
 80086a6:	f000 f911 	bl	80088cc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2200      	movs	r2, #0
 80086ae:	601a      	str	r2, [r3, #0]
 80086b0:	e000      	b.n	80086b4 <pbuf_realloc+0xf4>
    return;
 80086b2:	bf00      	nop

}
 80086b4:	3710      	adds	r7, #16
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop
 80086bc:	08014270 	.word	0x08014270
 80086c0:	08014388 	.word	0x08014388
 80086c4:	080142d0 	.word	0x080142d0
 80086c8:	080143a0 	.word	0x080143a0
 80086cc:	080143b8 	.word	0x080143b8

080086d0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b086      	sub	sp, #24
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	60b9      	str	r1, [r7, #8]
 80086da:	4613      	mov	r3, r2
 80086dc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d106      	bne.n	80086f2 <pbuf_add_header_impl+0x22>
 80086e4:	4b2b      	ldr	r3, [pc, #172]	; (8008794 <pbuf_add_header_impl+0xc4>)
 80086e6:	f240 12df 	movw	r2, #479	; 0x1df
 80086ea:	492b      	ldr	r1, [pc, #172]	; (8008798 <pbuf_add_header_impl+0xc8>)
 80086ec:	482b      	ldr	r0, [pc, #172]	; (800879c <pbuf_add_header_impl+0xcc>)
 80086ee:	f009 fae3 	bl	8011cb8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d003      	beq.n	8008700 <pbuf_add_header_impl+0x30>
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086fe:	d301      	bcc.n	8008704 <pbuf_add_header_impl+0x34>
    return 1;
 8008700:	2301      	movs	r3, #1
 8008702:	e043      	b.n	800878c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d101      	bne.n	800870e <pbuf_add_header_impl+0x3e>
    return 0;
 800870a:	2300      	movs	r3, #0
 800870c:	e03e      	b.n	800878c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	891a      	ldrh	r2, [r3, #8]
 8008716:	8a7b      	ldrh	r3, [r7, #18]
 8008718:	4413      	add	r3, r2
 800871a:	b29b      	uxth	r3, r3
 800871c:	8a7a      	ldrh	r2, [r7, #18]
 800871e:	429a      	cmp	r2, r3
 8008720:	d901      	bls.n	8008726 <pbuf_add_header_impl+0x56>
    return 1;
 8008722:	2301      	movs	r3, #1
 8008724:	e032      	b.n	800878c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	7b1b      	ldrb	r3, [r3, #12]
 800872a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800872c:	8a3b      	ldrh	r3, [r7, #16]
 800872e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008732:	2b00      	cmp	r3, #0
 8008734:	d00c      	beq.n	8008750 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	685a      	ldr	r2, [r3, #4]
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	425b      	negs	r3, r3
 800873e:	4413      	add	r3, r2
 8008740:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	3310      	adds	r3, #16
 8008746:	697a      	ldr	r2, [r7, #20]
 8008748:	429a      	cmp	r2, r3
 800874a:	d20d      	bcs.n	8008768 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800874c:	2301      	movs	r3, #1
 800874e:	e01d      	b.n	800878c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8008750:	79fb      	ldrb	r3, [r7, #7]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d006      	beq.n	8008764 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	685a      	ldr	r2, [r3, #4]
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	425b      	negs	r3, r3
 800875e:	4413      	add	r3, r2
 8008760:	617b      	str	r3, [r7, #20]
 8008762:	e001      	b.n	8008768 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8008764:	2301      	movs	r3, #1
 8008766:	e011      	b.n	800878c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	697a      	ldr	r2, [r7, #20]
 800876c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	895a      	ldrh	r2, [r3, #10]
 8008772:	8a7b      	ldrh	r3, [r7, #18]
 8008774:	4413      	add	r3, r2
 8008776:	b29a      	uxth	r2, r3
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	891a      	ldrh	r2, [r3, #8]
 8008780:	8a7b      	ldrh	r3, [r7, #18]
 8008782:	4413      	add	r3, r2
 8008784:	b29a      	uxth	r2, r3
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	811a      	strh	r2, [r3, #8]


  return 0;
 800878a:	2300      	movs	r3, #0
}
 800878c:	4618      	mov	r0, r3
 800878e:	3718      	adds	r7, #24
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}
 8008794:	08014270 	.word	0x08014270
 8008798:	080143d4 	.word	0x080143d4
 800879c:	080142d0 	.word	0x080142d0

080087a0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b082      	sub	sp, #8
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80087aa:	2200      	movs	r2, #0
 80087ac:	6839      	ldr	r1, [r7, #0]
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f7ff ff8e 	bl	80086d0 <pbuf_add_header_impl>
 80087b4:	4603      	mov	r3, r0
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3708      	adds	r7, #8
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
	...

080087c0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d106      	bne.n	80087de <pbuf_remove_header+0x1e>
 80087d0:	4b20      	ldr	r3, [pc, #128]	; (8008854 <pbuf_remove_header+0x94>)
 80087d2:	f240 224b 	movw	r2, #587	; 0x24b
 80087d6:	4920      	ldr	r1, [pc, #128]	; (8008858 <pbuf_remove_header+0x98>)
 80087d8:	4820      	ldr	r0, [pc, #128]	; (800885c <pbuf_remove_header+0x9c>)
 80087da:	f009 fa6d 	bl	8011cb8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d003      	beq.n	80087ec <pbuf_remove_header+0x2c>
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087ea:	d301      	bcc.n	80087f0 <pbuf_remove_header+0x30>
    return 1;
 80087ec:	2301      	movs	r3, #1
 80087ee:	e02c      	b.n	800884a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d101      	bne.n	80087fa <pbuf_remove_header+0x3a>
    return 0;
 80087f6:	2300      	movs	r3, #0
 80087f8:	e027      	b.n	800884a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	895b      	ldrh	r3, [r3, #10]
 8008802:	89fa      	ldrh	r2, [r7, #14]
 8008804:	429a      	cmp	r2, r3
 8008806:	d908      	bls.n	800881a <pbuf_remove_header+0x5a>
 8008808:	4b12      	ldr	r3, [pc, #72]	; (8008854 <pbuf_remove_header+0x94>)
 800880a:	f240 2255 	movw	r2, #597	; 0x255
 800880e:	4914      	ldr	r1, [pc, #80]	; (8008860 <pbuf_remove_header+0xa0>)
 8008810:	4812      	ldr	r0, [pc, #72]	; (800885c <pbuf_remove_header+0x9c>)
 8008812:	f009 fa51 	bl	8011cb8 <iprintf>
 8008816:	2301      	movs	r3, #1
 8008818:	e017      	b.n	800884a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	685a      	ldr	r2, [r3, #4]
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	441a      	add	r2, r3
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	895a      	ldrh	r2, [r3, #10]
 8008830:	89fb      	ldrh	r3, [r7, #14]
 8008832:	1ad3      	subs	r3, r2, r3
 8008834:	b29a      	uxth	r2, r3
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	891a      	ldrh	r2, [r3, #8]
 800883e:	89fb      	ldrh	r3, [r7, #14]
 8008840:	1ad3      	subs	r3, r2, r3
 8008842:	b29a      	uxth	r2, r3
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8008848:	2300      	movs	r3, #0
}
 800884a:	4618      	mov	r0, r3
 800884c:	3710      	adds	r7, #16
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
 8008852:	bf00      	nop
 8008854:	08014270 	.word	0x08014270
 8008858:	080143d4 	.word	0x080143d4
 800885c:	080142d0 	.word	0x080142d0
 8008860:	080143e0 	.word	0x080143e0

08008864 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b082      	sub	sp, #8
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	460b      	mov	r3, r1
 800886e:	807b      	strh	r3, [r7, #2]
 8008870:	4613      	mov	r3, r2
 8008872:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8008874:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008878:	2b00      	cmp	r3, #0
 800887a:	da08      	bge.n	800888e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800887c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008880:	425b      	negs	r3, r3
 8008882:	4619      	mov	r1, r3
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f7ff ff9b 	bl	80087c0 <pbuf_remove_header>
 800888a:	4603      	mov	r3, r0
 800888c:	e007      	b.n	800889e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800888e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008892:	787a      	ldrb	r2, [r7, #1]
 8008894:	4619      	mov	r1, r3
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f7ff ff1a 	bl	80086d0 <pbuf_add_header_impl>
 800889c:	4603      	mov	r3, r0
  }
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3708      	adds	r7, #8
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}

080088a6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80088a6:	b580      	push	{r7, lr}
 80088a8:	b082      	sub	sp, #8
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
 80088ae:	460b      	mov	r3, r1
 80088b0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80088b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80088b6:	2201      	movs	r2, #1
 80088b8:	4619      	mov	r1, r3
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f7ff ffd2 	bl	8008864 <pbuf_header_impl>
 80088c0:	4603      	mov	r3, r0
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3708      	adds	r7, #8
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
	...

080088cc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b086      	sub	sp, #24
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d10b      	bne.n	80088f2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d106      	bne.n	80088ee <pbuf_free+0x22>
 80088e0:	4b38      	ldr	r3, [pc, #224]	; (80089c4 <pbuf_free+0xf8>)
 80088e2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80088e6:	4938      	ldr	r1, [pc, #224]	; (80089c8 <pbuf_free+0xfc>)
 80088e8:	4838      	ldr	r0, [pc, #224]	; (80089cc <pbuf_free+0x100>)
 80088ea:	f009 f9e5 	bl	8011cb8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80088ee:	2300      	movs	r3, #0
 80088f0:	e063      	b.n	80089ba <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80088f2:	2300      	movs	r3, #0
 80088f4:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80088f6:	e05c      	b.n	80089b2 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	7b9b      	ldrb	r3, [r3, #14]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d106      	bne.n	800890e <pbuf_free+0x42>
 8008900:	4b30      	ldr	r3, [pc, #192]	; (80089c4 <pbuf_free+0xf8>)
 8008902:	f240 22f1 	movw	r2, #753	; 0x2f1
 8008906:	4932      	ldr	r1, [pc, #200]	; (80089d0 <pbuf_free+0x104>)
 8008908:	4830      	ldr	r0, [pc, #192]	; (80089cc <pbuf_free+0x100>)
 800890a:	f009 f9d5 	bl	8011cb8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	7b9b      	ldrb	r3, [r3, #14]
 8008912:	3b01      	subs	r3, #1
 8008914:	b2da      	uxtb	r2, r3
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	739a      	strb	r2, [r3, #14]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	7b9b      	ldrb	r3, [r3, #14]
 800891e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8008920:	7dbb      	ldrb	r3, [r7, #22]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d143      	bne.n	80089ae <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	7b1b      	ldrb	r3, [r3, #12]
 8008930:	f003 030f 	and.w	r3, r3, #15
 8008934:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	7b5b      	ldrb	r3, [r3, #13]
 800893a:	f003 0302 	and.w	r3, r3, #2
 800893e:	2b00      	cmp	r3, #0
 8008940:	d011      	beq.n	8008966 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	691b      	ldr	r3, [r3, #16]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d106      	bne.n	800895c <pbuf_free+0x90>
 800894e:	4b1d      	ldr	r3, [pc, #116]	; (80089c4 <pbuf_free+0xf8>)
 8008950:	f240 22ff 	movw	r2, #767	; 0x2ff
 8008954:	491f      	ldr	r1, [pc, #124]	; (80089d4 <pbuf_free+0x108>)
 8008956:	481d      	ldr	r0, [pc, #116]	; (80089cc <pbuf_free+0x100>)
 8008958:	f009 f9ae 	bl	8011cb8 <iprintf>
        pc->custom_free_function(p);
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	691b      	ldr	r3, [r3, #16]
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	4798      	blx	r3
 8008964:	e01d      	b.n	80089a2 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8008966:	7bfb      	ldrb	r3, [r7, #15]
 8008968:	2b02      	cmp	r3, #2
 800896a:	d104      	bne.n	8008976 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800896c:	6879      	ldr	r1, [r7, #4]
 800896e:	2008      	movs	r0, #8
 8008970:	f7ff f936 	bl	8007be0 <memp_free>
 8008974:	e015      	b.n	80089a2 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8008976:	7bfb      	ldrb	r3, [r7, #15]
 8008978:	2b01      	cmp	r3, #1
 800897a:	d104      	bne.n	8008986 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800897c:	6879      	ldr	r1, [r7, #4]
 800897e:	2007      	movs	r0, #7
 8008980:	f7ff f92e 	bl	8007be0 <memp_free>
 8008984:	e00d      	b.n	80089a2 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8008986:	7bfb      	ldrb	r3, [r7, #15]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d103      	bne.n	8008994 <pbuf_free+0xc8>
          mem_free(p);
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f7fe fdc1 	bl	8007514 <mem_free>
 8008992:	e006      	b.n	80089a2 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8008994:	4b0b      	ldr	r3, [pc, #44]	; (80089c4 <pbuf_free+0xf8>)
 8008996:	f240 320f 	movw	r2, #783	; 0x30f
 800899a:	490f      	ldr	r1, [pc, #60]	; (80089d8 <pbuf_free+0x10c>)
 800899c:	480b      	ldr	r0, [pc, #44]	; (80089cc <pbuf_free+0x100>)
 800899e:	f009 f98b 	bl	8011cb8 <iprintf>
        }
      }
      count++;
 80089a2:	7dfb      	ldrb	r3, [r7, #23]
 80089a4:	3301      	adds	r3, #1
 80089a6:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	607b      	str	r3, [r7, #4]
 80089ac:	e001      	b.n	80089b2 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80089ae:	2300      	movs	r3, #0
 80089b0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d19f      	bne.n	80088f8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80089b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3718      	adds	r7, #24
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	08014270 	.word	0x08014270
 80089c8:	080143d4 	.word	0x080143d4
 80089cc:	080142d0 	.word	0x080142d0
 80089d0:	08014400 	.word	0x08014400
 80089d4:	08014418 	.word	0x08014418
 80089d8:	0801443c 	.word	0x0801443c

080089dc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80089dc:	b480      	push	{r7}
 80089de:	b085      	sub	sp, #20
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80089e4:	2300      	movs	r3, #0
 80089e6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80089e8:	e005      	b.n	80089f6 <pbuf_clen+0x1a>
    ++len;
 80089ea:	89fb      	ldrh	r3, [r7, #14]
 80089ec:	3301      	adds	r3, #1
 80089ee:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d1f6      	bne.n	80089ea <pbuf_clen+0xe>
  }
  return len;
 80089fc:	89fb      	ldrh	r3, [r7, #14]
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3714      	adds	r7, #20
 8008a02:	46bd      	mov	sp, r7
 8008a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a08:	4770      	bx	lr
	...

08008a0c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b082      	sub	sp, #8
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d010      	beq.n	8008a3c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	7b9b      	ldrb	r3, [r3, #14]
 8008a1e:	3301      	adds	r3, #1
 8008a20:	b2da      	uxtb	r2, r3
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	7b9b      	ldrb	r3, [r3, #14]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d106      	bne.n	8008a3c <pbuf_ref+0x30>
 8008a2e:	4b05      	ldr	r3, [pc, #20]	; (8008a44 <pbuf_ref+0x38>)
 8008a30:	f240 3242 	movw	r2, #834	; 0x342
 8008a34:	4904      	ldr	r1, [pc, #16]	; (8008a48 <pbuf_ref+0x3c>)
 8008a36:	4805      	ldr	r0, [pc, #20]	; (8008a4c <pbuf_ref+0x40>)
 8008a38:	f009 f93e 	bl	8011cb8 <iprintf>
  }
}
 8008a3c:	bf00      	nop
 8008a3e:	3708      	adds	r7, #8
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}
 8008a44:	08014270 	.word	0x08014270
 8008a48:	08014450 	.word	0x08014450
 8008a4c:	080142d0 	.word	0x080142d0

08008a50 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d002      	beq.n	8008a66 <pbuf_cat+0x16>
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d107      	bne.n	8008a76 <pbuf_cat+0x26>
 8008a66:	4b20      	ldr	r3, [pc, #128]	; (8008ae8 <pbuf_cat+0x98>)
 8008a68:	f240 3259 	movw	r2, #857	; 0x359
 8008a6c:	491f      	ldr	r1, [pc, #124]	; (8008aec <pbuf_cat+0x9c>)
 8008a6e:	4820      	ldr	r0, [pc, #128]	; (8008af0 <pbuf_cat+0xa0>)
 8008a70:	f009 f922 	bl	8011cb8 <iprintf>
 8008a74:	e034      	b.n	8008ae0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	60fb      	str	r3, [r7, #12]
 8008a7a:	e00a      	b.n	8008a92 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	891a      	ldrh	r2, [r3, #8]
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	891b      	ldrh	r3, [r3, #8]
 8008a84:	4413      	add	r3, r2
 8008a86:	b29a      	uxth	r2, r3
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	60fb      	str	r3, [r7, #12]
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d1f0      	bne.n	8008a7c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	891a      	ldrh	r2, [r3, #8]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	895b      	ldrh	r3, [r3, #10]
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d006      	beq.n	8008ab4 <pbuf_cat+0x64>
 8008aa6:	4b10      	ldr	r3, [pc, #64]	; (8008ae8 <pbuf_cat+0x98>)
 8008aa8:	f240 3262 	movw	r2, #866	; 0x362
 8008aac:	4911      	ldr	r1, [pc, #68]	; (8008af4 <pbuf_cat+0xa4>)
 8008aae:	4810      	ldr	r0, [pc, #64]	; (8008af0 <pbuf_cat+0xa0>)
 8008ab0:	f009 f902 	bl	8011cb8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d006      	beq.n	8008aca <pbuf_cat+0x7a>
 8008abc:	4b0a      	ldr	r3, [pc, #40]	; (8008ae8 <pbuf_cat+0x98>)
 8008abe:	f240 3263 	movw	r2, #867	; 0x363
 8008ac2:	490d      	ldr	r1, [pc, #52]	; (8008af8 <pbuf_cat+0xa8>)
 8008ac4:	480a      	ldr	r0, [pc, #40]	; (8008af0 <pbuf_cat+0xa0>)
 8008ac6:	f009 f8f7 	bl	8011cb8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	891a      	ldrh	r2, [r3, #8]
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	891b      	ldrh	r3, [r3, #8]
 8008ad2:	4413      	add	r3, r2
 8008ad4:	b29a      	uxth	r2, r3
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	683a      	ldr	r2, [r7, #0]
 8008ade:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8008ae0:	3710      	adds	r7, #16
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	08014270 	.word	0x08014270
 8008aec:	08014464 	.word	0x08014464
 8008af0:	080142d0 	.word	0x080142d0
 8008af4:	0801449c 	.word	0x0801449c
 8008af8:	080144cc 	.word	0x080144cc

08008afc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b086      	sub	sp, #24
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8008b06:	2300      	movs	r3, #0
 8008b08:	617b      	str	r3, [r7, #20]
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d008      	beq.n	8008b26 <pbuf_copy+0x2a>
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d005      	beq.n	8008b26 <pbuf_copy+0x2a>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	891a      	ldrh	r2, [r3, #8]
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	891b      	ldrh	r3, [r3, #8]
 8008b22:	429a      	cmp	r2, r3
 8008b24:	d209      	bcs.n	8008b3a <pbuf_copy+0x3e>
 8008b26:	4b57      	ldr	r3, [pc, #348]	; (8008c84 <pbuf_copy+0x188>)
 8008b28:	f240 32c9 	movw	r2, #969	; 0x3c9
 8008b2c:	4956      	ldr	r1, [pc, #344]	; (8008c88 <pbuf_copy+0x18c>)
 8008b2e:	4857      	ldr	r0, [pc, #348]	; (8008c8c <pbuf_copy+0x190>)
 8008b30:	f009 f8c2 	bl	8011cb8 <iprintf>
 8008b34:	f06f 030f 	mvn.w	r3, #15
 8008b38:	e09f      	b.n	8008c7a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	895b      	ldrh	r3, [r3, #10]
 8008b3e:	461a      	mov	r2, r3
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	1ad2      	subs	r2, r2, r3
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	895b      	ldrh	r3, [r3, #10]
 8008b48:	4619      	mov	r1, r3
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	1acb      	subs	r3, r1, r3
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d306      	bcc.n	8008b60 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	895b      	ldrh	r3, [r3, #10]
 8008b56:	461a      	mov	r2, r3
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	1ad3      	subs	r3, r2, r3
 8008b5c:	60fb      	str	r3, [r7, #12]
 8008b5e:	e005      	b.n	8008b6c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	895b      	ldrh	r3, [r3, #10]
 8008b64:	461a      	mov	r2, r3
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	1ad3      	subs	r3, r2, r3
 8008b6a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	685a      	ldr	r2, [r3, #4]
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	18d0      	adds	r0, r2, r3
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	685a      	ldr	r2, [r3, #4]
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	4413      	add	r3, r2
 8008b7c:	68fa      	ldr	r2, [r7, #12]
 8008b7e:	4619      	mov	r1, r3
 8008b80:	f009 f9fb 	bl	8011f7a <memcpy>
    offset_to += len;
 8008b84:	697a      	ldr	r2, [r7, #20]
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	4413      	add	r3, r2
 8008b8a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8008b8c:	693a      	ldr	r2, [r7, #16]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	4413      	add	r3, r2
 8008b92:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	895b      	ldrh	r3, [r3, #10]
 8008b98:	461a      	mov	r2, r3
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d906      	bls.n	8008bae <pbuf_copy+0xb2>
 8008ba0:	4b38      	ldr	r3, [pc, #224]	; (8008c84 <pbuf_copy+0x188>)
 8008ba2:	f240 32d9 	movw	r2, #985	; 0x3d9
 8008ba6:	493a      	ldr	r1, [pc, #232]	; (8008c90 <pbuf_copy+0x194>)
 8008ba8:	4838      	ldr	r0, [pc, #224]	; (8008c8c <pbuf_copy+0x190>)
 8008baa:	f009 f885 	bl	8011cb8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	895b      	ldrh	r3, [r3, #10]
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d906      	bls.n	8008bc8 <pbuf_copy+0xcc>
 8008bba:	4b32      	ldr	r3, [pc, #200]	; (8008c84 <pbuf_copy+0x188>)
 8008bbc:	f240 32da 	movw	r2, #986	; 0x3da
 8008bc0:	4934      	ldr	r1, [pc, #208]	; (8008c94 <pbuf_copy+0x198>)
 8008bc2:	4832      	ldr	r0, [pc, #200]	; (8008c8c <pbuf_copy+0x190>)
 8008bc4:	f009 f878 	bl	8011cb8 <iprintf>
    if (offset_from >= p_from->len) {
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	895b      	ldrh	r3, [r3, #10]
 8008bcc:	461a      	mov	r2, r3
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d304      	bcc.n	8008bde <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	895b      	ldrh	r3, [r3, #10]
 8008be2:	461a      	mov	r2, r3
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d114      	bne.n	8008c14 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8008bea:	2300      	movs	r3, #0
 8008bec:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d10c      	bne.n	8008c14 <pbuf_copy+0x118>
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d009      	beq.n	8008c14 <pbuf_copy+0x118>
 8008c00:	4b20      	ldr	r3, [pc, #128]	; (8008c84 <pbuf_copy+0x188>)
 8008c02:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8008c06:	4924      	ldr	r1, [pc, #144]	; (8008c98 <pbuf_copy+0x19c>)
 8008c08:	4820      	ldr	r0, [pc, #128]	; (8008c8c <pbuf_copy+0x190>)
 8008c0a:	f009 f855 	bl	8011cb8 <iprintf>
 8008c0e:	f06f 030f 	mvn.w	r3, #15
 8008c12:	e032      	b.n	8008c7a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d013      	beq.n	8008c42 <pbuf_copy+0x146>
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	895a      	ldrh	r2, [r3, #10]
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	891b      	ldrh	r3, [r3, #8]
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d10d      	bne.n	8008c42 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d009      	beq.n	8008c42 <pbuf_copy+0x146>
 8008c2e:	4b15      	ldr	r3, [pc, #84]	; (8008c84 <pbuf_copy+0x188>)
 8008c30:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8008c34:	4919      	ldr	r1, [pc, #100]	; (8008c9c <pbuf_copy+0x1a0>)
 8008c36:	4815      	ldr	r0, [pc, #84]	; (8008c8c <pbuf_copy+0x190>)
 8008c38:	f009 f83e 	bl	8011cb8 <iprintf>
 8008c3c:	f06f 0305 	mvn.w	r3, #5
 8008c40:	e01b      	b.n	8008c7a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d013      	beq.n	8008c70 <pbuf_copy+0x174>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	895a      	ldrh	r2, [r3, #10]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	891b      	ldrh	r3, [r3, #8]
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d10d      	bne.n	8008c70 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d009      	beq.n	8008c70 <pbuf_copy+0x174>
 8008c5c:	4b09      	ldr	r3, [pc, #36]	; (8008c84 <pbuf_copy+0x188>)
 8008c5e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8008c62:	490e      	ldr	r1, [pc, #56]	; (8008c9c <pbuf_copy+0x1a0>)
 8008c64:	4809      	ldr	r0, [pc, #36]	; (8008c8c <pbuf_copy+0x190>)
 8008c66:	f009 f827 	bl	8011cb8 <iprintf>
 8008c6a:	f06f 0305 	mvn.w	r3, #5
 8008c6e:	e004      	b.n	8008c7a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	f47f af61 	bne.w	8008b3a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8008c78:	2300      	movs	r3, #0
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3718      	adds	r7, #24
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop
 8008c84:	08014270 	.word	0x08014270
 8008c88:	08014518 	.word	0x08014518
 8008c8c:	080142d0 	.word	0x080142d0
 8008c90:	08014548 	.word	0x08014548
 8008c94:	08014560 	.word	0x08014560
 8008c98:	0801457c 	.word	0x0801457c
 8008c9c:	0801458c 	.word	0x0801458c

08008ca0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b088      	sub	sp, #32
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	60f8      	str	r0, [r7, #12]
 8008ca8:	60b9      	str	r1, [r7, #8]
 8008caa:	4611      	mov	r1, r2
 8008cac:	461a      	mov	r2, r3
 8008cae:	460b      	mov	r3, r1
 8008cb0:	80fb      	strh	r3, [r7, #6]
 8008cb2:	4613      	mov	r3, r2
 8008cb4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d108      	bne.n	8008cd6 <pbuf_copy_partial+0x36>
 8008cc4:	4b2b      	ldr	r3, [pc, #172]	; (8008d74 <pbuf_copy_partial+0xd4>)
 8008cc6:	f240 420a 	movw	r2, #1034	; 0x40a
 8008cca:	492b      	ldr	r1, [pc, #172]	; (8008d78 <pbuf_copy_partial+0xd8>)
 8008ccc:	482b      	ldr	r0, [pc, #172]	; (8008d7c <pbuf_copy_partial+0xdc>)
 8008cce:	f008 fff3 	bl	8011cb8 <iprintf>
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	e04a      	b.n	8008d6c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d108      	bne.n	8008cee <pbuf_copy_partial+0x4e>
 8008cdc:	4b25      	ldr	r3, [pc, #148]	; (8008d74 <pbuf_copy_partial+0xd4>)
 8008cde:	f240 420b 	movw	r2, #1035	; 0x40b
 8008ce2:	4927      	ldr	r1, [pc, #156]	; (8008d80 <pbuf_copy_partial+0xe0>)
 8008ce4:	4825      	ldr	r0, [pc, #148]	; (8008d7c <pbuf_copy_partial+0xdc>)
 8008ce6:	f008 ffe7 	bl	8011cb8 <iprintf>
 8008cea:	2300      	movs	r3, #0
 8008cec:	e03e      	b.n	8008d6c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	61fb      	str	r3, [r7, #28]
 8008cf2:	e034      	b.n	8008d5e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8008cf4:	88bb      	ldrh	r3, [r7, #4]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d00a      	beq.n	8008d10 <pbuf_copy_partial+0x70>
 8008cfa:	69fb      	ldr	r3, [r7, #28]
 8008cfc:	895b      	ldrh	r3, [r3, #10]
 8008cfe:	88ba      	ldrh	r2, [r7, #4]
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d305      	bcc.n	8008d10 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8008d04:	69fb      	ldr	r3, [r7, #28]
 8008d06:	895b      	ldrh	r3, [r3, #10]
 8008d08:	88ba      	ldrh	r2, [r7, #4]
 8008d0a:	1ad3      	subs	r3, r2, r3
 8008d0c:	80bb      	strh	r3, [r7, #4]
 8008d0e:	e023      	b.n	8008d58 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8008d10:	69fb      	ldr	r3, [r7, #28]
 8008d12:	895a      	ldrh	r2, [r3, #10]
 8008d14:	88bb      	ldrh	r3, [r7, #4]
 8008d16:	1ad3      	subs	r3, r2, r3
 8008d18:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8008d1a:	8b3a      	ldrh	r2, [r7, #24]
 8008d1c:	88fb      	ldrh	r3, [r7, #6]
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d901      	bls.n	8008d26 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8008d22:	88fb      	ldrh	r3, [r7, #6]
 8008d24:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8008d26:	8b7b      	ldrh	r3, [r7, #26]
 8008d28:	68ba      	ldr	r2, [r7, #8]
 8008d2a:	18d0      	adds	r0, r2, r3
 8008d2c:	69fb      	ldr	r3, [r7, #28]
 8008d2e:	685a      	ldr	r2, [r3, #4]
 8008d30:	88bb      	ldrh	r3, [r7, #4]
 8008d32:	4413      	add	r3, r2
 8008d34:	8b3a      	ldrh	r2, [r7, #24]
 8008d36:	4619      	mov	r1, r3
 8008d38:	f009 f91f 	bl	8011f7a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8008d3c:	8afa      	ldrh	r2, [r7, #22]
 8008d3e:	8b3b      	ldrh	r3, [r7, #24]
 8008d40:	4413      	add	r3, r2
 8008d42:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8008d44:	8b7a      	ldrh	r2, [r7, #26]
 8008d46:	8b3b      	ldrh	r3, [r7, #24]
 8008d48:	4413      	add	r3, r2
 8008d4a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8008d4c:	88fa      	ldrh	r2, [r7, #6]
 8008d4e:	8b3b      	ldrh	r3, [r7, #24]
 8008d50:	1ad3      	subs	r3, r2, r3
 8008d52:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8008d54:	2300      	movs	r3, #0
 8008d56:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008d58:	69fb      	ldr	r3, [r7, #28]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	61fb      	str	r3, [r7, #28]
 8008d5e:	88fb      	ldrh	r3, [r7, #6]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d002      	beq.n	8008d6a <pbuf_copy_partial+0xca>
 8008d64:	69fb      	ldr	r3, [r7, #28]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d1c4      	bne.n	8008cf4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8008d6a:	8afb      	ldrh	r3, [r7, #22]
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3720      	adds	r7, #32
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}
 8008d74:	08014270 	.word	0x08014270
 8008d78:	080145b8 	.word	0x080145b8
 8008d7c:	080142d0 	.word	0x080142d0
 8008d80:	080145d8 	.word	0x080145d8

08008d84 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b084      	sub	sp, #16
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	603a      	str	r2, [r7, #0]
 8008d8e:	71fb      	strb	r3, [r7, #7]
 8008d90:	460b      	mov	r3, r1
 8008d92:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	8919      	ldrh	r1, [r3, #8]
 8008d98:	88ba      	ldrh	r2, [r7, #4]
 8008d9a:	79fb      	ldrb	r3, [r7, #7]
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f7ff fab1 	bl	8008304 <pbuf_alloc>
 8008da2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d101      	bne.n	8008dae <pbuf_clone+0x2a>
    return NULL;
 8008daa:	2300      	movs	r3, #0
 8008dac:	e011      	b.n	8008dd2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8008dae:	6839      	ldr	r1, [r7, #0]
 8008db0:	68f8      	ldr	r0, [r7, #12]
 8008db2:	f7ff fea3 	bl	8008afc <pbuf_copy>
 8008db6:	4603      	mov	r3, r0
 8008db8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8008dba:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d006      	beq.n	8008dd0 <pbuf_clone+0x4c>
 8008dc2:	4b06      	ldr	r3, [pc, #24]	; (8008ddc <pbuf_clone+0x58>)
 8008dc4:	f240 5224 	movw	r2, #1316	; 0x524
 8008dc8:	4905      	ldr	r1, [pc, #20]	; (8008de0 <pbuf_clone+0x5c>)
 8008dca:	4806      	ldr	r0, [pc, #24]	; (8008de4 <pbuf_clone+0x60>)
 8008dcc:	f008 ff74 	bl	8011cb8 <iprintf>
  return q;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3710      	adds	r7, #16
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	bf00      	nop
 8008ddc:	08014270 	.word	0x08014270
 8008de0:	080146e4 	.word	0x080146e4
 8008de4:	080142d0 	.word	0x080142d0

08008de8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8008dec:	f008 f88c 	bl	8010f08 <rand>
 8008df0:	4603      	mov	r3, r0
 8008df2:	b29b      	uxth	r3, r3
 8008df4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8008dfe:	b29a      	uxth	r2, r3
 8008e00:	4b01      	ldr	r3, [pc, #4]	; (8008e08 <tcp_init+0x20>)
 8008e02:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8008e04:	bf00      	nop
 8008e06:	bd80      	pop	{r7, pc}
 8008e08:	20000020 	.word	0x20000020

08008e0c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b082      	sub	sp, #8
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	7d1b      	ldrb	r3, [r3, #20]
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d105      	bne.n	8008e28 <tcp_free+0x1c>
 8008e1c:	4b06      	ldr	r3, [pc, #24]	; (8008e38 <tcp_free+0x2c>)
 8008e1e:	22d4      	movs	r2, #212	; 0xd4
 8008e20:	4906      	ldr	r1, [pc, #24]	; (8008e3c <tcp_free+0x30>)
 8008e22:	4807      	ldr	r0, [pc, #28]	; (8008e40 <tcp_free+0x34>)
 8008e24:	f008 ff48 	bl	8011cb8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8008e28:	6879      	ldr	r1, [r7, #4]
 8008e2a:	2001      	movs	r0, #1
 8008e2c:	f7fe fed8 	bl	8007be0 <memp_free>
}
 8008e30:	bf00      	nop
 8008e32:	3708      	adds	r7, #8
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}
 8008e38:	08014770 	.word	0x08014770
 8008e3c:	080147a0 	.word	0x080147a0
 8008e40:	080147b4 	.word	0x080147b4

08008e44 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b082      	sub	sp, #8
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	7d1b      	ldrb	r3, [r3, #20]
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d105      	bne.n	8008e60 <tcp_free_listen+0x1c>
 8008e54:	4b06      	ldr	r3, [pc, #24]	; (8008e70 <tcp_free_listen+0x2c>)
 8008e56:	22df      	movs	r2, #223	; 0xdf
 8008e58:	4906      	ldr	r1, [pc, #24]	; (8008e74 <tcp_free_listen+0x30>)
 8008e5a:	4807      	ldr	r0, [pc, #28]	; (8008e78 <tcp_free_listen+0x34>)
 8008e5c:	f008 ff2c 	bl	8011cb8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8008e60:	6879      	ldr	r1, [r7, #4]
 8008e62:	2002      	movs	r0, #2
 8008e64:	f7fe febc 	bl	8007be0 <memp_free>
}
 8008e68:	bf00      	nop
 8008e6a:	3708      	adds	r7, #8
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}
 8008e70:	08014770 	.word	0x08014770
 8008e74:	080147dc 	.word	0x080147dc
 8008e78:	080147b4 	.word	0x080147b4

08008e7c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8008e80:	f000 fea2 	bl	8009bc8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8008e84:	4b07      	ldr	r3, [pc, #28]	; (8008ea4 <tcp_tmr+0x28>)
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	3301      	adds	r3, #1
 8008e8a:	b2da      	uxtb	r2, r3
 8008e8c:	4b05      	ldr	r3, [pc, #20]	; (8008ea4 <tcp_tmr+0x28>)
 8008e8e:	701a      	strb	r2, [r3, #0]
 8008e90:	4b04      	ldr	r3, [pc, #16]	; (8008ea4 <tcp_tmr+0x28>)
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	f003 0301 	and.w	r3, r3, #1
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d001      	beq.n	8008ea0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8008e9c:	f000 fb54 	bl	8009548 <tcp_slowtmr>
  }
}
 8008ea0:	bf00      	nop
 8008ea2:	bd80      	pop	{r7, pc}
 8008ea4:	2000a7e1 	.word	0x2000a7e1

08008ea8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b084      	sub	sp, #16
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d105      	bne.n	8008ec4 <tcp_remove_listener+0x1c>
 8008eb8:	4b0d      	ldr	r3, [pc, #52]	; (8008ef0 <tcp_remove_listener+0x48>)
 8008eba:	22ff      	movs	r2, #255	; 0xff
 8008ebc:	490d      	ldr	r1, [pc, #52]	; (8008ef4 <tcp_remove_listener+0x4c>)
 8008ebe:	480e      	ldr	r0, [pc, #56]	; (8008ef8 <tcp_remove_listener+0x50>)
 8008ec0:	f008 fefa 	bl	8011cb8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	60fb      	str	r3, [r7, #12]
 8008ec8:	e00a      	b.n	8008ee0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ece:	683a      	ldr	r2, [r7, #0]
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d102      	bne.n	8008eda <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	68db      	ldr	r3, [r3, #12]
 8008ede:	60fb      	str	r3, [r7, #12]
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d1f1      	bne.n	8008eca <tcp_remove_listener+0x22>
    }
  }
}
 8008ee6:	bf00      	nop
 8008ee8:	bf00      	nop
 8008eea:	3710      	adds	r7, #16
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}
 8008ef0:	08014770 	.word	0x08014770
 8008ef4:	080147f8 	.word	0x080147f8
 8008ef8:	080147b4 	.word	0x080147b4

08008efc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d106      	bne.n	8008f18 <tcp_listen_closed+0x1c>
 8008f0a:	4b14      	ldr	r3, [pc, #80]	; (8008f5c <tcp_listen_closed+0x60>)
 8008f0c:	f240 1211 	movw	r2, #273	; 0x111
 8008f10:	4913      	ldr	r1, [pc, #76]	; (8008f60 <tcp_listen_closed+0x64>)
 8008f12:	4814      	ldr	r0, [pc, #80]	; (8008f64 <tcp_listen_closed+0x68>)
 8008f14:	f008 fed0 	bl	8011cb8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	7d1b      	ldrb	r3, [r3, #20]
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d006      	beq.n	8008f2e <tcp_listen_closed+0x32>
 8008f20:	4b0e      	ldr	r3, [pc, #56]	; (8008f5c <tcp_listen_closed+0x60>)
 8008f22:	f44f 7289 	mov.w	r2, #274	; 0x112
 8008f26:	4910      	ldr	r1, [pc, #64]	; (8008f68 <tcp_listen_closed+0x6c>)
 8008f28:	480e      	ldr	r0, [pc, #56]	; (8008f64 <tcp_listen_closed+0x68>)
 8008f2a:	f008 fec5 	bl	8011cb8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008f2e:	2301      	movs	r3, #1
 8008f30:	60fb      	str	r3, [r7, #12]
 8008f32:	e00b      	b.n	8008f4c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8008f34:	4a0d      	ldr	r2, [pc, #52]	; (8008f6c <tcp_listen_closed+0x70>)
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	6879      	ldr	r1, [r7, #4]
 8008f40:	4618      	mov	r0, r3
 8008f42:	f7ff ffb1 	bl	8008ea8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	3301      	adds	r3, #1
 8008f4a:	60fb      	str	r3, [r7, #12]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2b03      	cmp	r3, #3
 8008f50:	d9f0      	bls.n	8008f34 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8008f52:	bf00      	nop
 8008f54:	bf00      	nop
 8008f56:	3710      	adds	r7, #16
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}
 8008f5c:	08014770 	.word	0x08014770
 8008f60:	08014820 	.word	0x08014820
 8008f64:	080147b4 	.word	0x080147b4
 8008f68:	0801482c 	.word	0x0801482c
 8008f6c:	08016750 	.word	0x08016750

08008f70 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8008f70:	b5b0      	push	{r4, r5, r7, lr}
 8008f72:	b088      	sub	sp, #32
 8008f74:	af04      	add	r7, sp, #16
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	460b      	mov	r3, r1
 8008f7a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d106      	bne.n	8008f90 <tcp_close_shutdown+0x20>
 8008f82:	4b63      	ldr	r3, [pc, #396]	; (8009110 <tcp_close_shutdown+0x1a0>)
 8008f84:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8008f88:	4962      	ldr	r1, [pc, #392]	; (8009114 <tcp_close_shutdown+0x1a4>)
 8008f8a:	4863      	ldr	r0, [pc, #396]	; (8009118 <tcp_close_shutdown+0x1a8>)
 8008f8c:	f008 fe94 	bl	8011cb8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8008f90:	78fb      	ldrb	r3, [r7, #3]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d066      	beq.n	8009064 <tcp_close_shutdown+0xf4>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	7d1b      	ldrb	r3, [r3, #20]
 8008f9a:	2b04      	cmp	r3, #4
 8008f9c:	d003      	beq.n	8008fa6 <tcp_close_shutdown+0x36>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	7d1b      	ldrb	r3, [r3, #20]
 8008fa2:	2b07      	cmp	r3, #7
 8008fa4:	d15e      	bne.n	8009064 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d104      	bne.n	8008fb8 <tcp_close_shutdown+0x48>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fb2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008fb6:	d055      	beq.n	8009064 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	8b5b      	ldrh	r3, [r3, #26]
 8008fbc:	f003 0310 	and.w	r3, r3, #16
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d106      	bne.n	8008fd2 <tcp_close_shutdown+0x62>
 8008fc4:	4b52      	ldr	r3, [pc, #328]	; (8009110 <tcp_close_shutdown+0x1a0>)
 8008fc6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8008fca:	4954      	ldr	r1, [pc, #336]	; (800911c <tcp_close_shutdown+0x1ac>)
 8008fcc:	4852      	ldr	r0, [pc, #328]	; (8009118 <tcp_close_shutdown+0x1a8>)
 8008fce:	f008 fe73 	bl	8011cb8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008fda:	687d      	ldr	r5, [r7, #4]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	3304      	adds	r3, #4
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	8ad2      	ldrh	r2, [r2, #22]
 8008fe4:	6879      	ldr	r1, [r7, #4]
 8008fe6:	8b09      	ldrh	r1, [r1, #24]
 8008fe8:	9102      	str	r1, [sp, #8]
 8008fea:	9201      	str	r2, [sp, #4]
 8008fec:	9300      	str	r3, [sp, #0]
 8008fee:	462b      	mov	r3, r5
 8008ff0:	4622      	mov	r2, r4
 8008ff2:	4601      	mov	r1, r0
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f004 fe91 	bl	800dd1c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f001 f8c6 	bl	800a18c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009000:	4b47      	ldr	r3, [pc, #284]	; (8009120 <tcp_close_shutdown+0x1b0>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	687a      	ldr	r2, [r7, #4]
 8009006:	429a      	cmp	r2, r3
 8009008:	d105      	bne.n	8009016 <tcp_close_shutdown+0xa6>
 800900a:	4b45      	ldr	r3, [pc, #276]	; (8009120 <tcp_close_shutdown+0x1b0>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	68db      	ldr	r3, [r3, #12]
 8009010:	4a43      	ldr	r2, [pc, #268]	; (8009120 <tcp_close_shutdown+0x1b0>)
 8009012:	6013      	str	r3, [r2, #0]
 8009014:	e013      	b.n	800903e <tcp_close_shutdown+0xce>
 8009016:	4b42      	ldr	r3, [pc, #264]	; (8009120 <tcp_close_shutdown+0x1b0>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	60fb      	str	r3, [r7, #12]
 800901c:	e00c      	b.n	8009038 <tcp_close_shutdown+0xc8>
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	68db      	ldr	r3, [r3, #12]
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	429a      	cmp	r2, r3
 8009026:	d104      	bne.n	8009032 <tcp_close_shutdown+0xc2>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	68da      	ldr	r2, [r3, #12]
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	60da      	str	r2, [r3, #12]
 8009030:	e005      	b.n	800903e <tcp_close_shutdown+0xce>
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	68db      	ldr	r3, [r3, #12]
 8009036:	60fb      	str	r3, [r7, #12]
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d1ef      	bne.n	800901e <tcp_close_shutdown+0xae>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	60da      	str	r2, [r3, #12]
 8009044:	4b37      	ldr	r3, [pc, #220]	; (8009124 <tcp_close_shutdown+0x1b4>)
 8009046:	2201      	movs	r2, #1
 8009048:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800904a:	4b37      	ldr	r3, [pc, #220]	; (8009128 <tcp_close_shutdown+0x1b8>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	687a      	ldr	r2, [r7, #4]
 8009050:	429a      	cmp	r2, r3
 8009052:	d102      	bne.n	800905a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8009054:	f003 fd5e 	bl	800cb14 <tcp_trigger_input_pcb_close>
 8009058:	e002      	b.n	8009060 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f7ff fed6 	bl	8008e0c <tcp_free>
      }
      return ERR_OK;
 8009060:	2300      	movs	r3, #0
 8009062:	e050      	b.n	8009106 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	7d1b      	ldrb	r3, [r3, #20]
 8009068:	2b02      	cmp	r3, #2
 800906a:	d03b      	beq.n	80090e4 <tcp_close_shutdown+0x174>
 800906c:	2b02      	cmp	r3, #2
 800906e:	dc44      	bgt.n	80090fa <tcp_close_shutdown+0x18a>
 8009070:	2b00      	cmp	r3, #0
 8009072:	d002      	beq.n	800907a <tcp_close_shutdown+0x10a>
 8009074:	2b01      	cmp	r3, #1
 8009076:	d02a      	beq.n	80090ce <tcp_close_shutdown+0x15e>
 8009078:	e03f      	b.n	80090fa <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	8adb      	ldrh	r3, [r3, #22]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d021      	beq.n	80090c6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009082:	4b2a      	ldr	r3, [pc, #168]	; (800912c <tcp_close_shutdown+0x1bc>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	687a      	ldr	r2, [r7, #4]
 8009088:	429a      	cmp	r2, r3
 800908a:	d105      	bne.n	8009098 <tcp_close_shutdown+0x128>
 800908c:	4b27      	ldr	r3, [pc, #156]	; (800912c <tcp_close_shutdown+0x1bc>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	68db      	ldr	r3, [r3, #12]
 8009092:	4a26      	ldr	r2, [pc, #152]	; (800912c <tcp_close_shutdown+0x1bc>)
 8009094:	6013      	str	r3, [r2, #0]
 8009096:	e013      	b.n	80090c0 <tcp_close_shutdown+0x150>
 8009098:	4b24      	ldr	r3, [pc, #144]	; (800912c <tcp_close_shutdown+0x1bc>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	60bb      	str	r3, [r7, #8]
 800909e:	e00c      	b.n	80090ba <tcp_close_shutdown+0x14a>
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	68db      	ldr	r3, [r3, #12]
 80090a4:	687a      	ldr	r2, [r7, #4]
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d104      	bne.n	80090b4 <tcp_close_shutdown+0x144>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	68da      	ldr	r2, [r3, #12]
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	60da      	str	r2, [r3, #12]
 80090b2:	e005      	b.n	80090c0 <tcp_close_shutdown+0x150>
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	60bb      	str	r3, [r7, #8]
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d1ef      	bne.n	80090a0 <tcp_close_shutdown+0x130>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2200      	movs	r2, #0
 80090c4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f7ff fea0 	bl	8008e0c <tcp_free>
      break;
 80090cc:	e01a      	b.n	8009104 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f7ff ff14 	bl	8008efc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80090d4:	6879      	ldr	r1, [r7, #4]
 80090d6:	4816      	ldr	r0, [pc, #88]	; (8009130 <tcp_close_shutdown+0x1c0>)
 80090d8:	f001 f8a8 	bl	800a22c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f7ff feb1 	bl	8008e44 <tcp_free_listen>
      break;
 80090e2:	e00f      	b.n	8009104 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80090e4:	6879      	ldr	r1, [r7, #4]
 80090e6:	480e      	ldr	r0, [pc, #56]	; (8009120 <tcp_close_shutdown+0x1b0>)
 80090e8:	f001 f8a0 	bl	800a22c <tcp_pcb_remove>
 80090ec:	4b0d      	ldr	r3, [pc, #52]	; (8009124 <tcp_close_shutdown+0x1b4>)
 80090ee:	2201      	movs	r2, #1
 80090f0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f7ff fe8a 	bl	8008e0c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80090f8:	e004      	b.n	8009104 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 f81a 	bl	8009134 <tcp_close_shutdown_fin>
 8009100:	4603      	mov	r3, r0
 8009102:	e000      	b.n	8009106 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8009104:	2300      	movs	r3, #0
}
 8009106:	4618      	mov	r0, r3
 8009108:	3710      	adds	r7, #16
 800910a:	46bd      	mov	sp, r7
 800910c:	bdb0      	pop	{r4, r5, r7, pc}
 800910e:	bf00      	nop
 8009110:	08014770 	.word	0x08014770
 8009114:	08014844 	.word	0x08014844
 8009118:	080147b4 	.word	0x080147b4
 800911c:	08014864 	.word	0x08014864
 8009120:	2000a7d8 	.word	0x2000a7d8
 8009124:	2000a7e0 	.word	0x2000a7e0
 8009128:	2000a818 	.word	0x2000a818
 800912c:	2000a7d0 	.word	0x2000a7d0
 8009130:	2000a7d4 	.word	0x2000a7d4

08009134 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b084      	sub	sp, #16
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d106      	bne.n	8009150 <tcp_close_shutdown_fin+0x1c>
 8009142:	4b2e      	ldr	r3, [pc, #184]	; (80091fc <tcp_close_shutdown_fin+0xc8>)
 8009144:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8009148:	492d      	ldr	r1, [pc, #180]	; (8009200 <tcp_close_shutdown_fin+0xcc>)
 800914a:	482e      	ldr	r0, [pc, #184]	; (8009204 <tcp_close_shutdown_fin+0xd0>)
 800914c:	f008 fdb4 	bl	8011cb8 <iprintf>

  switch (pcb->state) {
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	7d1b      	ldrb	r3, [r3, #20]
 8009154:	2b07      	cmp	r3, #7
 8009156:	d020      	beq.n	800919a <tcp_close_shutdown_fin+0x66>
 8009158:	2b07      	cmp	r3, #7
 800915a:	dc2b      	bgt.n	80091b4 <tcp_close_shutdown_fin+0x80>
 800915c:	2b03      	cmp	r3, #3
 800915e:	d002      	beq.n	8009166 <tcp_close_shutdown_fin+0x32>
 8009160:	2b04      	cmp	r3, #4
 8009162:	d00d      	beq.n	8009180 <tcp_close_shutdown_fin+0x4c>
 8009164:	e026      	b.n	80091b4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f003 fee6 	bl	800cf38 <tcp_send_fin>
 800916c:	4603      	mov	r3, r0
 800916e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009170:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d11f      	bne.n	80091b8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2205      	movs	r2, #5
 800917c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800917e:	e01b      	b.n	80091b8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f003 fed9 	bl	800cf38 <tcp_send_fin>
 8009186:	4603      	mov	r3, r0
 8009188:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800918a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d114      	bne.n	80091bc <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2205      	movs	r2, #5
 8009196:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009198:	e010      	b.n	80091bc <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f003 fecc 	bl	800cf38 <tcp_send_fin>
 80091a0:	4603      	mov	r3, r0
 80091a2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80091a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d109      	bne.n	80091c0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2209      	movs	r2, #9
 80091b0:	751a      	strb	r2, [r3, #20]
      }
      break;
 80091b2:	e005      	b.n	80091c0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80091b4:	2300      	movs	r3, #0
 80091b6:	e01c      	b.n	80091f2 <tcp_close_shutdown_fin+0xbe>
      break;
 80091b8:	bf00      	nop
 80091ba:	e002      	b.n	80091c2 <tcp_close_shutdown_fin+0x8e>
      break;
 80091bc:	bf00      	nop
 80091be:	e000      	b.n	80091c2 <tcp_close_shutdown_fin+0x8e>
      break;
 80091c0:	bf00      	nop
  }

  if (err == ERR_OK) {
 80091c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d103      	bne.n	80091d2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f003 fff2 	bl	800d1b4 <tcp_output>
 80091d0:	e00d      	b.n	80091ee <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80091d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091da:	d108      	bne.n	80091ee <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	8b5b      	ldrh	r3, [r3, #26]
 80091e0:	f043 0308 	orr.w	r3, r3, #8
 80091e4:	b29a      	uxth	r2, r3
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80091ea:	2300      	movs	r3, #0
 80091ec:	e001      	b.n	80091f2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80091ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3710      	adds	r7, #16
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}
 80091fa:	bf00      	nop
 80091fc:	08014770 	.word	0x08014770
 8009200:	08014820 	.word	0x08014820
 8009204:	080147b4 	.word	0x080147b4

08009208 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b082      	sub	sp, #8
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d109      	bne.n	800922a <tcp_close+0x22>
 8009216:	4b0f      	ldr	r3, [pc, #60]	; (8009254 <tcp_close+0x4c>)
 8009218:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800921c:	490e      	ldr	r1, [pc, #56]	; (8009258 <tcp_close+0x50>)
 800921e:	480f      	ldr	r0, [pc, #60]	; (800925c <tcp_close+0x54>)
 8009220:	f008 fd4a 	bl	8011cb8 <iprintf>
 8009224:	f06f 030f 	mvn.w	r3, #15
 8009228:	e00f      	b.n	800924a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	7d1b      	ldrb	r3, [r3, #20]
 800922e:	2b01      	cmp	r3, #1
 8009230:	d006      	beq.n	8009240 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	8b5b      	ldrh	r3, [r3, #26]
 8009236:	f043 0310 	orr.w	r3, r3, #16
 800923a:	b29a      	uxth	r2, r3
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8009240:	2101      	movs	r1, #1
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f7ff fe94 	bl	8008f70 <tcp_close_shutdown>
 8009248:	4603      	mov	r3, r0
}
 800924a:	4618      	mov	r0, r3
 800924c:	3708      	adds	r7, #8
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}
 8009252:	bf00      	nop
 8009254:	08014770 	.word	0x08014770
 8009258:	08014880 	.word	0x08014880
 800925c:	080147b4 	.word	0x080147b4

08009260 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b08e      	sub	sp, #56	; 0x38
 8009264:	af04      	add	r7, sp, #16
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d107      	bne.n	8009280 <tcp_abandon+0x20>
 8009270:	4b52      	ldr	r3, [pc, #328]	; (80093bc <tcp_abandon+0x15c>)
 8009272:	f240 223d 	movw	r2, #573	; 0x23d
 8009276:	4952      	ldr	r1, [pc, #328]	; (80093c0 <tcp_abandon+0x160>)
 8009278:	4852      	ldr	r0, [pc, #328]	; (80093c4 <tcp_abandon+0x164>)
 800927a:	f008 fd1d 	bl	8011cb8 <iprintf>
 800927e:	e099      	b.n	80093b4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	7d1b      	ldrb	r3, [r3, #20]
 8009284:	2b01      	cmp	r3, #1
 8009286:	d106      	bne.n	8009296 <tcp_abandon+0x36>
 8009288:	4b4c      	ldr	r3, [pc, #304]	; (80093bc <tcp_abandon+0x15c>)
 800928a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800928e:	494e      	ldr	r1, [pc, #312]	; (80093c8 <tcp_abandon+0x168>)
 8009290:	484c      	ldr	r0, [pc, #304]	; (80093c4 <tcp_abandon+0x164>)
 8009292:	f008 fd11 	bl	8011cb8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	7d1b      	ldrb	r3, [r3, #20]
 800929a:	2b0a      	cmp	r3, #10
 800929c:	d107      	bne.n	80092ae <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800929e:	6879      	ldr	r1, [r7, #4]
 80092a0:	484a      	ldr	r0, [pc, #296]	; (80093cc <tcp_abandon+0x16c>)
 80092a2:	f000 ffc3 	bl	800a22c <tcp_pcb_remove>
    tcp_free(pcb);
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f7ff fdb0 	bl	8008e0c <tcp_free>
 80092ac:	e082      	b.n	80093b4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80092ae:	2300      	movs	r3, #0
 80092b0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80092b2:	2300      	movs	r3, #0
 80092b4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092ba:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092c8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	691b      	ldr	r3, [r3, #16]
 80092ce:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	7d1b      	ldrb	r3, [r3, #20]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d126      	bne.n	8009326 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	8adb      	ldrh	r3, [r3, #22]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d02e      	beq.n	800933e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80092e0:	4b3b      	ldr	r3, [pc, #236]	; (80093d0 <tcp_abandon+0x170>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d105      	bne.n	80092f6 <tcp_abandon+0x96>
 80092ea:	4b39      	ldr	r3, [pc, #228]	; (80093d0 <tcp_abandon+0x170>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	68db      	ldr	r3, [r3, #12]
 80092f0:	4a37      	ldr	r2, [pc, #220]	; (80093d0 <tcp_abandon+0x170>)
 80092f2:	6013      	str	r3, [r2, #0]
 80092f4:	e013      	b.n	800931e <tcp_abandon+0xbe>
 80092f6:	4b36      	ldr	r3, [pc, #216]	; (80093d0 <tcp_abandon+0x170>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	61fb      	str	r3, [r7, #28]
 80092fc:	e00c      	b.n	8009318 <tcp_abandon+0xb8>
 80092fe:	69fb      	ldr	r3, [r7, #28]
 8009300:	68db      	ldr	r3, [r3, #12]
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	429a      	cmp	r2, r3
 8009306:	d104      	bne.n	8009312 <tcp_abandon+0xb2>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	68da      	ldr	r2, [r3, #12]
 800930c:	69fb      	ldr	r3, [r7, #28]
 800930e:	60da      	str	r2, [r3, #12]
 8009310:	e005      	b.n	800931e <tcp_abandon+0xbe>
 8009312:	69fb      	ldr	r3, [r7, #28]
 8009314:	68db      	ldr	r3, [r3, #12]
 8009316:	61fb      	str	r3, [r7, #28]
 8009318:	69fb      	ldr	r3, [r7, #28]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d1ef      	bne.n	80092fe <tcp_abandon+0x9e>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2200      	movs	r2, #0
 8009322:	60da      	str	r2, [r3, #12]
 8009324:	e00b      	b.n	800933e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	8adb      	ldrh	r3, [r3, #22]
 800932e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009330:	6879      	ldr	r1, [r7, #4]
 8009332:	4828      	ldr	r0, [pc, #160]	; (80093d4 <tcp_abandon+0x174>)
 8009334:	f000 ff7a 	bl	800a22c <tcp_pcb_remove>
 8009338:	4b27      	ldr	r3, [pc, #156]	; (80093d8 <tcp_abandon+0x178>)
 800933a:	2201      	movs	r2, #1
 800933c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009342:	2b00      	cmp	r3, #0
 8009344:	d004      	beq.n	8009350 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800934a:	4618      	mov	r0, r3
 800934c:	f000 fd1c 	bl	8009d88 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009354:	2b00      	cmp	r3, #0
 8009356:	d004      	beq.n	8009362 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800935c:	4618      	mov	r0, r3
 800935e:	f000 fd13 	bl	8009d88 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009366:	2b00      	cmp	r3, #0
 8009368:	d004      	beq.n	8009374 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800936e:	4618      	mov	r0, r3
 8009370:	f000 fd0a 	bl	8009d88 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8009374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009376:	2b00      	cmp	r3, #0
 8009378:	d00e      	beq.n	8009398 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800937a:	6879      	ldr	r1, [r7, #4]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	3304      	adds	r3, #4
 8009380:	687a      	ldr	r2, [r7, #4]
 8009382:	8b12      	ldrh	r2, [r2, #24]
 8009384:	9202      	str	r2, [sp, #8]
 8009386:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009388:	9201      	str	r2, [sp, #4]
 800938a:	9300      	str	r3, [sp, #0]
 800938c:	460b      	mov	r3, r1
 800938e:	697a      	ldr	r2, [r7, #20]
 8009390:	69b9      	ldr	r1, [r7, #24]
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f004 fcc2 	bl	800dd1c <tcp_rst>
    }
    last_state = pcb->state;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	7d1b      	ldrb	r3, [r3, #20]
 800939c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f7ff fd34 	bl	8008e0c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d004      	beq.n	80093b4 <tcp_abandon+0x154>
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	f06f 010c 	mvn.w	r1, #12
 80093b0:	68f8      	ldr	r0, [r7, #12]
 80093b2:	4798      	blx	r3
  }
}
 80093b4:	3728      	adds	r7, #40	; 0x28
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	08014770 	.word	0x08014770
 80093c0:	080148b4 	.word	0x080148b4
 80093c4:	080147b4 	.word	0x080147b4
 80093c8:	080148d0 	.word	0x080148d0
 80093cc:	2000a7dc 	.word	0x2000a7dc
 80093d0:	2000a7d0 	.word	0x2000a7d0
 80093d4:	2000a7d8 	.word	0x2000a7d8
 80093d8:	2000a7e0 	.word	0x2000a7e0

080093dc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b082      	sub	sp, #8
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80093e4:	2101      	movs	r1, #1
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f7ff ff3a 	bl	8009260 <tcp_abandon>
}
 80093ec:	bf00      	nop
 80093ee:	3708      	adds	r7, #8
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b084      	sub	sp, #16
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d106      	bne.n	8009410 <tcp_update_rcv_ann_wnd+0x1c>
 8009402:	4b25      	ldr	r3, [pc, #148]	; (8009498 <tcp_update_rcv_ann_wnd+0xa4>)
 8009404:	f240 32a6 	movw	r2, #934	; 0x3a6
 8009408:	4924      	ldr	r1, [pc, #144]	; (800949c <tcp_update_rcv_ann_wnd+0xa8>)
 800940a:	4825      	ldr	r0, [pc, #148]	; (80094a0 <tcp_update_rcv_ann_wnd+0xac>)
 800940c:	f008 fc54 	bl	8011cb8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009414:	687a      	ldr	r2, [r7, #4]
 8009416:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8009418:	4413      	add	r3, r2
 800941a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8009424:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8009428:	bf28      	it	cs
 800942a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800942e:	b292      	uxth	r2, r2
 8009430:	4413      	add	r3, r2
 8009432:	68fa      	ldr	r2, [r7, #12]
 8009434:	1ad3      	subs	r3, r2, r3
 8009436:	2b00      	cmp	r3, #0
 8009438:	db08      	blt.n	800944c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009446:	68fa      	ldr	r2, [r7, #12]
 8009448:	1ad3      	subs	r3, r2, r3
 800944a:	e020      	b.n	800948e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009454:	1ad3      	subs	r3, r2, r3
 8009456:	2b00      	cmp	r3, #0
 8009458:	dd03      	ble.n	8009462 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2200      	movs	r2, #0
 800945e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009460:	e014      	b.n	800948c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800946a:	1ad3      	subs	r3, r2, r3
 800946c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009474:	d306      	bcc.n	8009484 <tcp_update_rcv_ann_wnd+0x90>
 8009476:	4b08      	ldr	r3, [pc, #32]	; (8009498 <tcp_update_rcv_ann_wnd+0xa4>)
 8009478:	f240 32b6 	movw	r2, #950	; 0x3b6
 800947c:	4909      	ldr	r1, [pc, #36]	; (80094a4 <tcp_update_rcv_ann_wnd+0xb0>)
 800947e:	4808      	ldr	r0, [pc, #32]	; (80094a0 <tcp_update_rcv_ann_wnd+0xac>)
 8009480:	f008 fc1a 	bl	8011cb8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	b29a      	uxth	r2, r3
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800948c:	2300      	movs	r3, #0
  }
}
 800948e:	4618      	mov	r0, r3
 8009490:	3710      	adds	r7, #16
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}
 8009496:	bf00      	nop
 8009498:	08014770 	.word	0x08014770
 800949c:	080149cc 	.word	0x080149cc
 80094a0:	080147b4 	.word	0x080147b4
 80094a4:	080149f0 	.word	0x080149f0

080094a8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b084      	sub	sp, #16
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	460b      	mov	r3, r1
 80094b2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d107      	bne.n	80094ca <tcp_recved+0x22>
 80094ba:	4b1f      	ldr	r3, [pc, #124]	; (8009538 <tcp_recved+0x90>)
 80094bc:	f240 32cf 	movw	r2, #975	; 0x3cf
 80094c0:	491e      	ldr	r1, [pc, #120]	; (800953c <tcp_recved+0x94>)
 80094c2:	481f      	ldr	r0, [pc, #124]	; (8009540 <tcp_recved+0x98>)
 80094c4:	f008 fbf8 	bl	8011cb8 <iprintf>
 80094c8:	e032      	b.n	8009530 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	7d1b      	ldrb	r3, [r3, #20]
 80094ce:	2b01      	cmp	r3, #1
 80094d0:	d106      	bne.n	80094e0 <tcp_recved+0x38>
 80094d2:	4b19      	ldr	r3, [pc, #100]	; (8009538 <tcp_recved+0x90>)
 80094d4:	f240 32d2 	movw	r2, #978	; 0x3d2
 80094d8:	491a      	ldr	r1, [pc, #104]	; (8009544 <tcp_recved+0x9c>)
 80094da:	4819      	ldr	r0, [pc, #100]	; (8009540 <tcp_recved+0x98>)
 80094dc:	f008 fbec 	bl	8011cb8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80094e4:	887b      	ldrh	r3, [r7, #2]
 80094e6:	4413      	add	r3, r2
 80094e8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80094ea:	89fb      	ldrh	r3, [r7, #14]
 80094ec:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80094f0:	d804      	bhi.n	80094fc <tcp_recved+0x54>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094f6:	89fa      	ldrh	r2, [r7, #14]
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d204      	bcs.n	8009506 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009502:	851a      	strh	r2, [r3, #40]	; 0x28
 8009504:	e002      	b.n	800950c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	89fa      	ldrh	r2, [r7, #14]
 800950a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f7ff ff71 	bl	80093f4 <tcp_update_rcv_ann_wnd>
 8009512:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800951a:	d309      	bcc.n	8009530 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	8b5b      	ldrh	r3, [r3, #26]
 8009520:	f043 0302 	orr.w	r3, r3, #2
 8009524:	b29a      	uxth	r2, r3
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f003 fe42 	bl	800d1b4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8009530:	3710      	adds	r7, #16
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop
 8009538:	08014770 	.word	0x08014770
 800953c:	08014a0c 	.word	0x08014a0c
 8009540:	080147b4 	.word	0x080147b4
 8009544:	08014a24 	.word	0x08014a24

08009548 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8009548:	b5b0      	push	{r4, r5, r7, lr}
 800954a:	b090      	sub	sp, #64	; 0x40
 800954c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800954e:	2300      	movs	r3, #0
 8009550:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8009554:	4b94      	ldr	r3, [pc, #592]	; (80097a8 <tcp_slowtmr+0x260>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	3301      	adds	r3, #1
 800955a:	4a93      	ldr	r2, [pc, #588]	; (80097a8 <tcp_slowtmr+0x260>)
 800955c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800955e:	4b93      	ldr	r3, [pc, #588]	; (80097ac <tcp_slowtmr+0x264>)
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	3301      	adds	r3, #1
 8009564:	b2da      	uxtb	r2, r3
 8009566:	4b91      	ldr	r3, [pc, #580]	; (80097ac <tcp_slowtmr+0x264>)
 8009568:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800956a:	2300      	movs	r3, #0
 800956c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800956e:	4b90      	ldr	r3, [pc, #576]	; (80097b0 <tcp_slowtmr+0x268>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8009574:	e29d      	b.n	8009ab2 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8009576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009578:	7d1b      	ldrb	r3, [r3, #20]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d106      	bne.n	800958c <tcp_slowtmr+0x44>
 800957e:	4b8d      	ldr	r3, [pc, #564]	; (80097b4 <tcp_slowtmr+0x26c>)
 8009580:	f240 42be 	movw	r2, #1214	; 0x4be
 8009584:	498c      	ldr	r1, [pc, #560]	; (80097b8 <tcp_slowtmr+0x270>)
 8009586:	488d      	ldr	r0, [pc, #564]	; (80097bc <tcp_slowtmr+0x274>)
 8009588:	f008 fb96 	bl	8011cb8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800958c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800958e:	7d1b      	ldrb	r3, [r3, #20]
 8009590:	2b01      	cmp	r3, #1
 8009592:	d106      	bne.n	80095a2 <tcp_slowtmr+0x5a>
 8009594:	4b87      	ldr	r3, [pc, #540]	; (80097b4 <tcp_slowtmr+0x26c>)
 8009596:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800959a:	4989      	ldr	r1, [pc, #548]	; (80097c0 <tcp_slowtmr+0x278>)
 800959c:	4887      	ldr	r0, [pc, #540]	; (80097bc <tcp_slowtmr+0x274>)
 800959e:	f008 fb8b 	bl	8011cb8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80095a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a4:	7d1b      	ldrb	r3, [r3, #20]
 80095a6:	2b0a      	cmp	r3, #10
 80095a8:	d106      	bne.n	80095b8 <tcp_slowtmr+0x70>
 80095aa:	4b82      	ldr	r3, [pc, #520]	; (80097b4 <tcp_slowtmr+0x26c>)
 80095ac:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80095b0:	4984      	ldr	r1, [pc, #528]	; (80097c4 <tcp_slowtmr+0x27c>)
 80095b2:	4882      	ldr	r0, [pc, #520]	; (80097bc <tcp_slowtmr+0x274>)
 80095b4:	f008 fb80 	bl	8011cb8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80095b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ba:	7f9a      	ldrb	r2, [r3, #30]
 80095bc:	4b7b      	ldr	r3, [pc, #492]	; (80097ac <tcp_slowtmr+0x264>)
 80095be:	781b      	ldrb	r3, [r3, #0]
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d105      	bne.n	80095d0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80095c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095c6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80095c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ca:	68db      	ldr	r3, [r3, #12]
 80095cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80095ce:	e270      	b.n	8009ab2 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 80095d0:	4b76      	ldr	r3, [pc, #472]	; (80097ac <tcp_slowtmr+0x264>)
 80095d2:	781a      	ldrb	r2, [r3, #0]
 80095d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80095d8:	2300      	movs	r3, #0
 80095da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80095de:	2300      	movs	r3, #0
 80095e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80095e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095e6:	7d1b      	ldrb	r3, [r3, #20]
 80095e8:	2b02      	cmp	r3, #2
 80095ea:	d10a      	bne.n	8009602 <tcp_slowtmr+0xba>
 80095ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80095f2:	2b05      	cmp	r3, #5
 80095f4:	d905      	bls.n	8009602 <tcp_slowtmr+0xba>
      ++pcb_remove;
 80095f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095fa:	3301      	adds	r3, #1
 80095fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009600:	e11e      	b.n	8009840 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8009602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009604:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009608:	2b0b      	cmp	r3, #11
 800960a:	d905      	bls.n	8009618 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800960c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009610:	3301      	adds	r3, #1
 8009612:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009616:	e113      	b.n	8009840 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8009618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800961a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800961e:	2b00      	cmp	r3, #0
 8009620:	d075      	beq.n	800970e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8009622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009626:	2b00      	cmp	r3, #0
 8009628:	d006      	beq.n	8009638 <tcp_slowtmr+0xf0>
 800962a:	4b62      	ldr	r3, [pc, #392]	; (80097b4 <tcp_slowtmr+0x26c>)
 800962c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8009630:	4965      	ldr	r1, [pc, #404]	; (80097c8 <tcp_slowtmr+0x280>)
 8009632:	4862      	ldr	r0, [pc, #392]	; (80097bc <tcp_slowtmr+0x274>)
 8009634:	f008 fb40 	bl	8011cb8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8009638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800963a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800963c:	2b00      	cmp	r3, #0
 800963e:	d106      	bne.n	800964e <tcp_slowtmr+0x106>
 8009640:	4b5c      	ldr	r3, [pc, #368]	; (80097b4 <tcp_slowtmr+0x26c>)
 8009642:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8009646:	4961      	ldr	r1, [pc, #388]	; (80097cc <tcp_slowtmr+0x284>)
 8009648:	485c      	ldr	r0, [pc, #368]	; (80097bc <tcp_slowtmr+0x274>)
 800964a:	f008 fb35 	bl	8011cb8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800964e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009650:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8009654:	2b0b      	cmp	r3, #11
 8009656:	d905      	bls.n	8009664 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8009658:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800965c:	3301      	adds	r3, #1
 800965e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009662:	e0ed      	b.n	8009840 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8009664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009666:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800966a:	3b01      	subs	r3, #1
 800966c:	4a58      	ldr	r2, [pc, #352]	; (80097d0 <tcp_slowtmr+0x288>)
 800966e:	5cd3      	ldrb	r3, [r2, r3]
 8009670:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8009672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009674:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009678:	7c7a      	ldrb	r2, [r7, #17]
 800967a:	429a      	cmp	r2, r3
 800967c:	d907      	bls.n	800968e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800967e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009680:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009684:	3301      	adds	r3, #1
 8009686:	b2da      	uxtb	r2, r3
 8009688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800968a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800968e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009690:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009694:	7c7a      	ldrb	r2, [r7, #17]
 8009696:	429a      	cmp	r2, r3
 8009698:	f200 80d2 	bhi.w	8009840 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800969c:	2301      	movs	r3, #1
 800969e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80096a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d108      	bne.n	80096bc <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80096aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096ac:	f004 fc2a 	bl	800df04 <tcp_zero_window_probe>
 80096b0:	4603      	mov	r3, r0
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d014      	beq.n	80096e0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80096b6:	2300      	movs	r3, #0
 80096b8:	623b      	str	r3, [r7, #32]
 80096ba:	e011      	b.n	80096e0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80096bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80096c2:	4619      	mov	r1, r3
 80096c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096c6:	f003 faef 	bl	800cca8 <tcp_split_unsent_seg>
 80096ca:	4603      	mov	r3, r0
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d107      	bne.n	80096e0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80096d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096d2:	f003 fd6f 	bl	800d1b4 <tcp_output>
 80096d6:	4603      	mov	r3, r0
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d101      	bne.n	80096e0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80096dc:	2300      	movs	r3, #0
 80096de:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80096e0:	6a3b      	ldr	r3, [r7, #32]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	f000 80ac 	beq.w	8009840 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80096e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ea:	2200      	movs	r2, #0
 80096ec:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80096f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096f2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80096f6:	2b06      	cmp	r3, #6
 80096f8:	f200 80a2 	bhi.w	8009840 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80096fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096fe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009702:	3301      	adds	r3, #1
 8009704:	b2da      	uxtb	r2, r3
 8009706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009708:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800970c:	e098      	b.n	8009840 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800970e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009710:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009714:	2b00      	cmp	r3, #0
 8009716:	db0f      	blt.n	8009738 <tcp_slowtmr+0x1f0>
 8009718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800971a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800971e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8009722:	4293      	cmp	r3, r2
 8009724:	d008      	beq.n	8009738 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8009726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009728:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800972c:	b29b      	uxth	r3, r3
 800972e:	3301      	adds	r3, #1
 8009730:	b29b      	uxth	r3, r3
 8009732:	b21a      	sxth	r2, r3
 8009734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009736:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8009738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800973a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800973e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009740:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8009744:	429a      	cmp	r2, r3
 8009746:	db7b      	blt.n	8009840 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8009748:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800974a:	f004 f827 	bl	800d79c <tcp_rexmit_rto_prepare>
 800974e:	4603      	mov	r3, r0
 8009750:	2b00      	cmp	r3, #0
 8009752:	d007      	beq.n	8009764 <tcp_slowtmr+0x21c>
 8009754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009758:	2b00      	cmp	r3, #0
 800975a:	d171      	bne.n	8009840 <tcp_slowtmr+0x2f8>
 800975c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800975e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009760:	2b00      	cmp	r3, #0
 8009762:	d06d      	beq.n	8009840 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8009764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009766:	7d1b      	ldrb	r3, [r3, #20]
 8009768:	2b02      	cmp	r3, #2
 800976a:	d03a      	beq.n	80097e2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800976c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800976e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009772:	2b0c      	cmp	r3, #12
 8009774:	bf28      	it	cs
 8009776:	230c      	movcs	r3, #12
 8009778:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800977a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800977c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009780:	10db      	asrs	r3, r3, #3
 8009782:	b21b      	sxth	r3, r3
 8009784:	461a      	mov	r2, r3
 8009786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009788:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800978c:	4413      	add	r3, r2
 800978e:	7efa      	ldrb	r2, [r7, #27]
 8009790:	4910      	ldr	r1, [pc, #64]	; (80097d4 <tcp_slowtmr+0x28c>)
 8009792:	5c8a      	ldrb	r2, [r1, r2]
 8009794:	4093      	lsls	r3, r2
 8009796:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800979e:	4293      	cmp	r3, r2
 80097a0:	dc1a      	bgt.n	80097d8 <tcp_slowtmr+0x290>
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	b21a      	sxth	r2, r3
 80097a6:	e019      	b.n	80097dc <tcp_slowtmr+0x294>
 80097a8:	2000a7cc 	.word	0x2000a7cc
 80097ac:	2000a7e2 	.word	0x2000a7e2
 80097b0:	2000a7d8 	.word	0x2000a7d8
 80097b4:	08014770 	.word	0x08014770
 80097b8:	08014ab4 	.word	0x08014ab4
 80097bc:	080147b4 	.word	0x080147b4
 80097c0:	08014ae0 	.word	0x08014ae0
 80097c4:	08014b0c 	.word	0x08014b0c
 80097c8:	08014b3c 	.word	0x08014b3c
 80097cc:	08014b70 	.word	0x08014b70
 80097d0:	08016748 	.word	0x08016748
 80097d4:	08016738 	.word	0x08016738
 80097d8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80097dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80097e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097e4:	2200      	movs	r2, #0
 80097e6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80097e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80097ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097f0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80097f4:	4293      	cmp	r3, r2
 80097f6:	bf28      	it	cs
 80097f8:	4613      	movcs	r3, r2
 80097fa:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80097fc:	8a7b      	ldrh	r3, [r7, #18]
 80097fe:	085b      	lsrs	r3, r3, #1
 8009800:	b29a      	uxth	r2, r3
 8009802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009804:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800980a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800980e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009810:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009812:	005b      	lsls	r3, r3, #1
 8009814:	b29b      	uxth	r3, r3
 8009816:	429a      	cmp	r2, r3
 8009818:	d206      	bcs.n	8009828 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800981a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800981c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800981e:	005b      	lsls	r3, r3, #1
 8009820:	b29a      	uxth	r2, r3
 8009822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009824:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8009828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800982a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800982c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800982e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8009832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009834:	2200      	movs	r2, #0
 8009836:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800983a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800983c:	f004 f81e 	bl	800d87c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8009840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009842:	7d1b      	ldrb	r3, [r3, #20]
 8009844:	2b06      	cmp	r3, #6
 8009846:	d111      	bne.n	800986c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8009848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800984a:	8b5b      	ldrh	r3, [r3, #26]
 800984c:	f003 0310 	and.w	r3, r3, #16
 8009850:	2b00      	cmp	r3, #0
 8009852:	d00b      	beq.n	800986c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009854:	4b9c      	ldr	r3, [pc, #624]	; (8009ac8 <tcp_slowtmr+0x580>)
 8009856:	681a      	ldr	r2, [r3, #0]
 8009858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800985a:	6a1b      	ldr	r3, [r3, #32]
 800985c:	1ad3      	subs	r3, r2, r3
 800985e:	2b28      	cmp	r3, #40	; 0x28
 8009860:	d904      	bls.n	800986c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8009862:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009866:	3301      	adds	r3, #1
 8009868:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800986c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800986e:	7a5b      	ldrb	r3, [r3, #9]
 8009870:	f003 0308 	and.w	r3, r3, #8
 8009874:	2b00      	cmp	r3, #0
 8009876:	d04a      	beq.n	800990e <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8009878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800987a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800987c:	2b04      	cmp	r3, #4
 800987e:	d003      	beq.n	8009888 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8009880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009882:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8009884:	2b07      	cmp	r3, #7
 8009886:	d142      	bne.n	800990e <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009888:	4b8f      	ldr	r3, [pc, #572]	; (8009ac8 <tcp_slowtmr+0x580>)
 800988a:	681a      	ldr	r2, [r3, #0]
 800988c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800988e:	6a1b      	ldr	r3, [r3, #32]
 8009890:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8009892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009894:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8009898:	4b8c      	ldr	r3, [pc, #560]	; (8009acc <tcp_slowtmr+0x584>)
 800989a:	440b      	add	r3, r1
 800989c:	498c      	ldr	r1, [pc, #560]	; (8009ad0 <tcp_slowtmr+0x588>)
 800989e:	fba1 1303 	umull	r1, r3, r1, r3
 80098a2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d90a      	bls.n	80098be <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80098a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098ac:	3301      	adds	r3, #1
 80098ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80098b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80098b6:	3301      	adds	r3, #1
 80098b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80098bc:	e027      	b.n	800990e <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80098be:	4b82      	ldr	r3, [pc, #520]	; (8009ac8 <tcp_slowtmr+0x580>)
 80098c0:	681a      	ldr	r2, [r3, #0]
 80098c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098c4:	6a1b      	ldr	r3, [r3, #32]
 80098c6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80098c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ca:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80098ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80098d4:	4618      	mov	r0, r3
 80098d6:	4b7f      	ldr	r3, [pc, #508]	; (8009ad4 <tcp_slowtmr+0x58c>)
 80098d8:	fb00 f303 	mul.w	r3, r0, r3
 80098dc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80098de:	497c      	ldr	r1, [pc, #496]	; (8009ad0 <tcp_slowtmr+0x588>)
 80098e0:	fba1 1303 	umull	r1, r3, r1, r3
 80098e4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80098e6:	429a      	cmp	r2, r3
 80098e8:	d911      	bls.n	800990e <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 80098ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80098ec:	f004 faca 	bl	800de84 <tcp_keepalive>
 80098f0:	4603      	mov	r3, r0
 80098f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80098f6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d107      	bne.n	800990e <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 80098fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009900:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8009904:	3301      	adds	r3, #1
 8009906:	b2da      	uxtb	r2, r3
 8009908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800990a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800990e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009912:	2b00      	cmp	r3, #0
 8009914:	d011      	beq.n	800993a <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8009916:	4b6c      	ldr	r3, [pc, #432]	; (8009ac8 <tcp_slowtmr+0x580>)
 8009918:	681a      	ldr	r2, [r3, #0]
 800991a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800991c:	6a1b      	ldr	r3, [r3, #32]
 800991e:	1ad2      	subs	r2, r2, r3
 8009920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009922:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8009926:	4619      	mov	r1, r3
 8009928:	460b      	mov	r3, r1
 800992a:	005b      	lsls	r3, r3, #1
 800992c:	440b      	add	r3, r1
 800992e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8009930:	429a      	cmp	r2, r3
 8009932:	d302      	bcc.n	800993a <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8009934:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009936:	f000 fddd 	bl	800a4f4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800993a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800993c:	7d1b      	ldrb	r3, [r3, #20]
 800993e:	2b03      	cmp	r3, #3
 8009940:	d10b      	bne.n	800995a <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009942:	4b61      	ldr	r3, [pc, #388]	; (8009ac8 <tcp_slowtmr+0x580>)
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009948:	6a1b      	ldr	r3, [r3, #32]
 800994a:	1ad3      	subs	r3, r2, r3
 800994c:	2b28      	cmp	r3, #40	; 0x28
 800994e:	d904      	bls.n	800995a <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8009950:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009954:	3301      	adds	r3, #1
 8009956:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800995a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800995c:	7d1b      	ldrb	r3, [r3, #20]
 800995e:	2b09      	cmp	r3, #9
 8009960:	d10b      	bne.n	800997a <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009962:	4b59      	ldr	r3, [pc, #356]	; (8009ac8 <tcp_slowtmr+0x580>)
 8009964:	681a      	ldr	r2, [r3, #0]
 8009966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009968:	6a1b      	ldr	r3, [r3, #32]
 800996a:	1ad3      	subs	r3, r2, r3
 800996c:	2bf0      	cmp	r3, #240	; 0xf0
 800996e:	d904      	bls.n	800997a <tcp_slowtmr+0x432>
        ++pcb_remove;
 8009970:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009974:	3301      	adds	r3, #1
 8009976:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800997a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800997e:	2b00      	cmp	r3, #0
 8009980:	d060      	beq.n	8009a44 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8009982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009988:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800998a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800998c:	f000 fbfe 	bl	800a18c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8009990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009992:	2b00      	cmp	r3, #0
 8009994:	d010      	beq.n	80099b8 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8009996:	4b50      	ldr	r3, [pc, #320]	; (8009ad8 <tcp_slowtmr+0x590>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800999c:	429a      	cmp	r2, r3
 800999e:	d106      	bne.n	80099ae <tcp_slowtmr+0x466>
 80099a0:	4b4e      	ldr	r3, [pc, #312]	; (8009adc <tcp_slowtmr+0x594>)
 80099a2:	f240 526d 	movw	r2, #1389	; 0x56d
 80099a6:	494e      	ldr	r1, [pc, #312]	; (8009ae0 <tcp_slowtmr+0x598>)
 80099a8:	484e      	ldr	r0, [pc, #312]	; (8009ae4 <tcp_slowtmr+0x59c>)
 80099aa:	f008 f985 	bl	8011cb8 <iprintf>
        prev->next = pcb->next;
 80099ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099b0:	68da      	ldr	r2, [r3, #12]
 80099b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b4:	60da      	str	r2, [r3, #12]
 80099b6:	e00f      	b.n	80099d8 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80099b8:	4b47      	ldr	r3, [pc, #284]	; (8009ad8 <tcp_slowtmr+0x590>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099be:	429a      	cmp	r2, r3
 80099c0:	d006      	beq.n	80099d0 <tcp_slowtmr+0x488>
 80099c2:	4b46      	ldr	r3, [pc, #280]	; (8009adc <tcp_slowtmr+0x594>)
 80099c4:	f240 5271 	movw	r2, #1393	; 0x571
 80099c8:	4947      	ldr	r1, [pc, #284]	; (8009ae8 <tcp_slowtmr+0x5a0>)
 80099ca:	4846      	ldr	r0, [pc, #280]	; (8009ae4 <tcp_slowtmr+0x59c>)
 80099cc:	f008 f974 	bl	8011cb8 <iprintf>
        tcp_active_pcbs = pcb->next;
 80099d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099d2:	68db      	ldr	r3, [r3, #12]
 80099d4:	4a40      	ldr	r2, [pc, #256]	; (8009ad8 <tcp_slowtmr+0x590>)
 80099d6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80099d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d013      	beq.n	8009a08 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80099e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099e2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80099e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099e6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80099e8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80099ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ec:	3304      	adds	r3, #4
 80099ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099f0:	8ad2      	ldrh	r2, [r2, #22]
 80099f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80099f4:	8b09      	ldrh	r1, [r1, #24]
 80099f6:	9102      	str	r1, [sp, #8]
 80099f8:	9201      	str	r2, [sp, #4]
 80099fa:	9300      	str	r3, [sp, #0]
 80099fc:	462b      	mov	r3, r5
 80099fe:	4622      	mov	r2, r4
 8009a00:	4601      	mov	r1, r0
 8009a02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a04:	f004 f98a 	bl	800dd1c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8009a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a0a:	691b      	ldr	r3, [r3, #16]
 8009a0c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8009a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a10:	7d1b      	ldrb	r3, [r3, #20]
 8009a12:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8009a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a16:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8009a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a1a:	68db      	ldr	r3, [r3, #12]
 8009a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8009a1e:	6838      	ldr	r0, [r7, #0]
 8009a20:	f7ff f9f4 	bl	8008e0c <tcp_free>

      tcp_active_pcbs_changed = 0;
 8009a24:	4b31      	ldr	r3, [pc, #196]	; (8009aec <tcp_slowtmr+0x5a4>)
 8009a26:	2200      	movs	r2, #0
 8009a28:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d004      	beq.n	8009a3a <tcp_slowtmr+0x4f2>
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	f06f 010c 	mvn.w	r1, #12
 8009a36:	68b8      	ldr	r0, [r7, #8]
 8009a38:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8009a3a:	4b2c      	ldr	r3, [pc, #176]	; (8009aec <tcp_slowtmr+0x5a4>)
 8009a3c:	781b      	ldrb	r3, [r3, #0]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d037      	beq.n	8009ab2 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8009a42:	e592      	b.n	800956a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8009a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a46:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a4a:	68db      	ldr	r3, [r3, #12]
 8009a4c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8009a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a50:	7f1b      	ldrb	r3, [r3, #28]
 8009a52:	3301      	adds	r3, #1
 8009a54:	b2da      	uxtb	r2, r3
 8009a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a58:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8009a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a5c:	7f1a      	ldrb	r2, [r3, #28]
 8009a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a60:	7f5b      	ldrb	r3, [r3, #29]
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d325      	bcc.n	8009ab2 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8009a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a68:	2200      	movs	r2, #0
 8009a6a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8009a6c:	4b1f      	ldr	r3, [pc, #124]	; (8009aec <tcp_slowtmr+0x5a4>)
 8009a6e:	2200      	movs	r2, #0
 8009a70:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8009a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d00b      	beq.n	8009a94 <tcp_slowtmr+0x54c>
 8009a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a84:	6912      	ldr	r2, [r2, #16]
 8009a86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a88:	4610      	mov	r0, r2
 8009a8a:	4798      	blx	r3
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8009a92:	e002      	b.n	8009a9a <tcp_slowtmr+0x552>
 8009a94:	2300      	movs	r3, #0
 8009a96:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8009a9a:	4b14      	ldr	r3, [pc, #80]	; (8009aec <tcp_slowtmr+0x5a4>)
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d000      	beq.n	8009aa4 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8009aa2:	e562      	b.n	800956a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8009aa4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d102      	bne.n	8009ab2 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8009aac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009aae:	f003 fb81 	bl	800d1b4 <tcp_output>
  while (pcb != NULL) {
 8009ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	f47f ad5e 	bne.w	8009576 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8009aba:	2300      	movs	r3, #0
 8009abc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8009abe:	4b0c      	ldr	r3, [pc, #48]	; (8009af0 <tcp_slowtmr+0x5a8>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8009ac4:	e069      	b.n	8009b9a <tcp_slowtmr+0x652>
 8009ac6:	bf00      	nop
 8009ac8:	2000a7cc 	.word	0x2000a7cc
 8009acc:	000a4cb8 	.word	0x000a4cb8
 8009ad0:	10624dd3 	.word	0x10624dd3
 8009ad4:	000124f8 	.word	0x000124f8
 8009ad8:	2000a7d8 	.word	0x2000a7d8
 8009adc:	08014770 	.word	0x08014770
 8009ae0:	08014ba8 	.word	0x08014ba8
 8009ae4:	080147b4 	.word	0x080147b4
 8009ae8:	08014bd4 	.word	0x08014bd4
 8009aec:	2000a7e0 	.word	0x2000a7e0
 8009af0:	2000a7dc 	.word	0x2000a7dc
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009af6:	7d1b      	ldrb	r3, [r3, #20]
 8009af8:	2b0a      	cmp	r3, #10
 8009afa:	d006      	beq.n	8009b0a <tcp_slowtmr+0x5c2>
 8009afc:	4b2b      	ldr	r3, [pc, #172]	; (8009bac <tcp_slowtmr+0x664>)
 8009afe:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8009b02:	492b      	ldr	r1, [pc, #172]	; (8009bb0 <tcp_slowtmr+0x668>)
 8009b04:	482b      	ldr	r0, [pc, #172]	; (8009bb4 <tcp_slowtmr+0x66c>)
 8009b06:	f008 f8d7 	bl	8011cb8 <iprintf>
    pcb_remove = 0;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009b10:	4b29      	ldr	r3, [pc, #164]	; (8009bb8 <tcp_slowtmr+0x670>)
 8009b12:	681a      	ldr	r2, [r3, #0]
 8009b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b16:	6a1b      	ldr	r3, [r3, #32]
 8009b18:	1ad3      	subs	r3, r2, r3
 8009b1a:	2bf0      	cmp	r3, #240	; 0xf0
 8009b1c:	d904      	bls.n	8009b28 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8009b1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b22:	3301      	adds	r3, #1
 8009b24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009b28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d02f      	beq.n	8009b90 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8009b30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b32:	f000 fb2b 	bl	800a18c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8009b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d010      	beq.n	8009b5e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009b3c:	4b1f      	ldr	r3, [pc, #124]	; (8009bbc <tcp_slowtmr+0x674>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d106      	bne.n	8009b54 <tcp_slowtmr+0x60c>
 8009b46:	4b19      	ldr	r3, [pc, #100]	; (8009bac <tcp_slowtmr+0x664>)
 8009b48:	f240 52af 	movw	r2, #1455	; 0x5af
 8009b4c:	491c      	ldr	r1, [pc, #112]	; (8009bc0 <tcp_slowtmr+0x678>)
 8009b4e:	4819      	ldr	r0, [pc, #100]	; (8009bb4 <tcp_slowtmr+0x66c>)
 8009b50:	f008 f8b2 	bl	8011cb8 <iprintf>
        prev->next = pcb->next;
 8009b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b56:	68da      	ldr	r2, [r3, #12]
 8009b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b5a:	60da      	str	r2, [r3, #12]
 8009b5c:	e00f      	b.n	8009b7e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8009b5e:	4b17      	ldr	r3, [pc, #92]	; (8009bbc <tcp_slowtmr+0x674>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d006      	beq.n	8009b76 <tcp_slowtmr+0x62e>
 8009b68:	4b10      	ldr	r3, [pc, #64]	; (8009bac <tcp_slowtmr+0x664>)
 8009b6a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8009b6e:	4915      	ldr	r1, [pc, #84]	; (8009bc4 <tcp_slowtmr+0x67c>)
 8009b70:	4810      	ldr	r0, [pc, #64]	; (8009bb4 <tcp_slowtmr+0x66c>)
 8009b72:	f008 f8a1 	bl	8011cb8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8009b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b78:	68db      	ldr	r3, [r3, #12]
 8009b7a:	4a10      	ldr	r2, [pc, #64]	; (8009bbc <tcp_slowtmr+0x674>)
 8009b7c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8009b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b80:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8009b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b84:	68db      	ldr	r3, [r3, #12]
 8009b86:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8009b88:	69f8      	ldr	r0, [r7, #28]
 8009b8a:	f7ff f93f 	bl	8008e0c <tcp_free>
 8009b8e:	e004      	b.n	8009b9a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8009b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b92:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b96:	68db      	ldr	r3, [r3, #12]
 8009b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8009b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d1a9      	bne.n	8009af4 <tcp_slowtmr+0x5ac>
    }
  }
}
 8009ba0:	bf00      	nop
 8009ba2:	bf00      	nop
 8009ba4:	3730      	adds	r7, #48	; 0x30
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bdb0      	pop	{r4, r5, r7, pc}
 8009baa:	bf00      	nop
 8009bac:	08014770 	.word	0x08014770
 8009bb0:	08014c00 	.word	0x08014c00
 8009bb4:	080147b4 	.word	0x080147b4
 8009bb8:	2000a7cc 	.word	0x2000a7cc
 8009bbc:	2000a7dc 	.word	0x2000a7dc
 8009bc0:	08014c30 	.word	0x08014c30
 8009bc4:	08014c58 	.word	0x08014c58

08009bc8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b082      	sub	sp, #8
 8009bcc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8009bce:	4b2d      	ldr	r3, [pc, #180]	; (8009c84 <tcp_fasttmr+0xbc>)
 8009bd0:	781b      	ldrb	r3, [r3, #0]
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	b2da      	uxtb	r2, r3
 8009bd6:	4b2b      	ldr	r3, [pc, #172]	; (8009c84 <tcp_fasttmr+0xbc>)
 8009bd8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8009bda:	4b2b      	ldr	r3, [pc, #172]	; (8009c88 <tcp_fasttmr+0xc0>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009be0:	e048      	b.n	8009c74 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	7f9a      	ldrb	r2, [r3, #30]
 8009be6:	4b27      	ldr	r3, [pc, #156]	; (8009c84 <tcp_fasttmr+0xbc>)
 8009be8:	781b      	ldrb	r3, [r3, #0]
 8009bea:	429a      	cmp	r2, r3
 8009bec:	d03f      	beq.n	8009c6e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8009bee:	4b25      	ldr	r3, [pc, #148]	; (8009c84 <tcp_fasttmr+0xbc>)
 8009bf0:	781a      	ldrb	r2, [r3, #0]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	8b5b      	ldrh	r3, [r3, #26]
 8009bfa:	f003 0301 	and.w	r3, r3, #1
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d010      	beq.n	8009c24 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	8b5b      	ldrh	r3, [r3, #26]
 8009c06:	f043 0302 	orr.w	r3, r3, #2
 8009c0a:	b29a      	uxth	r2, r3
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f003 facf 	bl	800d1b4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	8b5b      	ldrh	r3, [r3, #26]
 8009c1a:	f023 0303 	bic.w	r3, r3, #3
 8009c1e:	b29a      	uxth	r2, r3
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	8b5b      	ldrh	r3, [r3, #26]
 8009c28:	f003 0308 	and.w	r3, r3, #8
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d009      	beq.n	8009c44 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	8b5b      	ldrh	r3, [r3, #26]
 8009c34:	f023 0308 	bic.w	r3, r3, #8
 8009c38:	b29a      	uxth	r2, r3
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f7ff fa78 	bl	8009134 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	68db      	ldr	r3, [r3, #12]
 8009c48:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d00a      	beq.n	8009c68 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8009c52:	4b0e      	ldr	r3, [pc, #56]	; (8009c8c <tcp_fasttmr+0xc4>)
 8009c54:	2200      	movs	r2, #0
 8009c56:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f000 f819 	bl	8009c90 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8009c5e:	4b0b      	ldr	r3, [pc, #44]	; (8009c8c <tcp_fasttmr+0xc4>)
 8009c60:	781b      	ldrb	r3, [r3, #0]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d000      	beq.n	8009c68 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8009c66:	e7b8      	b.n	8009bda <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	607b      	str	r3, [r7, #4]
 8009c6c:	e002      	b.n	8009c74 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	68db      	ldr	r3, [r3, #12]
 8009c72:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d1b3      	bne.n	8009be2 <tcp_fasttmr+0x1a>
    }
  }
}
 8009c7a:	bf00      	nop
 8009c7c:	bf00      	nop
 8009c7e:	3708      	adds	r7, #8
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}
 8009c84:	2000a7e2 	.word	0x2000a7e2
 8009c88:	2000a7d8 	.word	0x2000a7d8
 8009c8c:	2000a7e0 	.word	0x2000a7e0

08009c90 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8009c90:	b590      	push	{r4, r7, lr}
 8009c92:	b085      	sub	sp, #20
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d109      	bne.n	8009cb2 <tcp_process_refused_data+0x22>
 8009c9e:	4b37      	ldr	r3, [pc, #220]	; (8009d7c <tcp_process_refused_data+0xec>)
 8009ca0:	f240 6209 	movw	r2, #1545	; 0x609
 8009ca4:	4936      	ldr	r1, [pc, #216]	; (8009d80 <tcp_process_refused_data+0xf0>)
 8009ca6:	4837      	ldr	r0, [pc, #220]	; (8009d84 <tcp_process_refused_data+0xf4>)
 8009ca8:	f008 f806 	bl	8011cb8 <iprintf>
 8009cac:	f06f 030f 	mvn.w	r3, #15
 8009cb0:	e060      	b.n	8009d74 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009cb6:	7b5b      	ldrb	r3, [r3, #13]
 8009cb8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009cbe:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d00b      	beq.n	8009ce8 <tcp_process_refused_data+0x58>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6918      	ldr	r0, [r3, #16]
 8009cda:	2300      	movs	r3, #0
 8009cdc:	68ba      	ldr	r2, [r7, #8]
 8009cde:	6879      	ldr	r1, [r7, #4]
 8009ce0:	47a0      	blx	r4
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	73fb      	strb	r3, [r7, #15]
 8009ce6:	e007      	b.n	8009cf8 <tcp_process_refused_data+0x68>
 8009ce8:	2300      	movs	r3, #0
 8009cea:	68ba      	ldr	r2, [r7, #8]
 8009cec:	6879      	ldr	r1, [r7, #4]
 8009cee:	2000      	movs	r0, #0
 8009cf0:	f000 f8a4 	bl	8009e3c <tcp_recv_null>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009cf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d12a      	bne.n	8009d56 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8009d00:	7bbb      	ldrb	r3, [r7, #14]
 8009d02:	f003 0320 	and.w	r3, r3, #32
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d033      	beq.n	8009d72 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d0e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009d12:	d005      	beq.n	8009d20 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d18:	3301      	adds	r3, #1
 8009d1a:	b29a      	uxth	r2, r3
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d00b      	beq.n	8009d42 <tcp_process_refused_data+0xb2>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6918      	ldr	r0, [r3, #16]
 8009d34:	2300      	movs	r3, #0
 8009d36:	2200      	movs	r2, #0
 8009d38:	6879      	ldr	r1, [r7, #4]
 8009d3a:	47a0      	blx	r4
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	73fb      	strb	r3, [r7, #15]
 8009d40:	e001      	b.n	8009d46 <tcp_process_refused_data+0xb6>
 8009d42:	2300      	movs	r3, #0
 8009d44:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8009d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d4a:	f113 0f0d 	cmn.w	r3, #13
 8009d4e:	d110      	bne.n	8009d72 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8009d50:	f06f 030c 	mvn.w	r3, #12
 8009d54:	e00e      	b.n	8009d74 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8009d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d5a:	f113 0f0d 	cmn.w	r3, #13
 8009d5e:	d102      	bne.n	8009d66 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8009d60:	f06f 030c 	mvn.w	r3, #12
 8009d64:	e006      	b.n	8009d74 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	68ba      	ldr	r2, [r7, #8]
 8009d6a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8009d6c:	f06f 0304 	mvn.w	r3, #4
 8009d70:	e000      	b.n	8009d74 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8009d72:	2300      	movs	r3, #0
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3714      	adds	r7, #20
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd90      	pop	{r4, r7, pc}
 8009d7c:	08014770 	.word	0x08014770
 8009d80:	08014c80 	.word	0x08014c80
 8009d84:	080147b4 	.word	0x080147b4

08009d88 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8009d90:	e007      	b.n	8009da2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f000 f80a 	bl	8009db2 <tcp_seg_free>
    seg = next;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d1f4      	bne.n	8009d92 <tcp_segs_free+0xa>
  }
}
 8009da8:	bf00      	nop
 8009daa:	bf00      	nop
 8009dac:	3710      	adds	r7, #16
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}

08009db2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8009db2:	b580      	push	{r7, lr}
 8009db4:	b082      	sub	sp, #8
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d00c      	beq.n	8009dda <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d004      	beq.n	8009dd2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f7fe fd7d 	bl	80088cc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8009dd2:	6879      	ldr	r1, [r7, #4]
 8009dd4:	2003      	movs	r0, #3
 8009dd6:	f7fd ff03 	bl	8007be0 <memp_free>
  }
}
 8009dda:	bf00      	nop
 8009ddc:	3708      	adds	r7, #8
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}
	...

08009de4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b084      	sub	sp, #16
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d106      	bne.n	8009e00 <tcp_seg_copy+0x1c>
 8009df2:	4b0f      	ldr	r3, [pc, #60]	; (8009e30 <tcp_seg_copy+0x4c>)
 8009df4:	f240 6282 	movw	r2, #1666	; 0x682
 8009df8:	490e      	ldr	r1, [pc, #56]	; (8009e34 <tcp_seg_copy+0x50>)
 8009dfa:	480f      	ldr	r0, [pc, #60]	; (8009e38 <tcp_seg_copy+0x54>)
 8009dfc:	f007 ff5c 	bl	8011cb8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8009e00:	2003      	movs	r0, #3
 8009e02:	f7fd fe7d 	bl	8007b00 <memp_malloc>
 8009e06:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d101      	bne.n	8009e12 <tcp_seg_copy+0x2e>
    return NULL;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	e00a      	b.n	8009e28 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8009e12:	2210      	movs	r2, #16
 8009e14:	6879      	ldr	r1, [r7, #4]
 8009e16:	68f8      	ldr	r0, [r7, #12]
 8009e18:	f008 f8af 	bl	8011f7a <memcpy>
  pbuf_ref(cseg->p);
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	4618      	mov	r0, r3
 8009e22:	f7fe fdf3 	bl	8008a0c <pbuf_ref>
  return cseg;
 8009e26:	68fb      	ldr	r3, [r7, #12]
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3710      	adds	r7, #16
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}
 8009e30:	08014770 	.word	0x08014770
 8009e34:	08014cc4 	.word	0x08014cc4
 8009e38:	080147b4 	.word	0x080147b4

08009e3c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b084      	sub	sp, #16
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	60f8      	str	r0, [r7, #12]
 8009e44:	60b9      	str	r1, [r7, #8]
 8009e46:	607a      	str	r2, [r7, #4]
 8009e48:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d109      	bne.n	8009e64 <tcp_recv_null+0x28>
 8009e50:	4b12      	ldr	r3, [pc, #72]	; (8009e9c <tcp_recv_null+0x60>)
 8009e52:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8009e56:	4912      	ldr	r1, [pc, #72]	; (8009ea0 <tcp_recv_null+0x64>)
 8009e58:	4812      	ldr	r0, [pc, #72]	; (8009ea4 <tcp_recv_null+0x68>)
 8009e5a:	f007 ff2d 	bl	8011cb8 <iprintf>
 8009e5e:	f06f 030f 	mvn.w	r3, #15
 8009e62:	e016      	b.n	8009e92 <tcp_recv_null+0x56>

  if (p != NULL) {
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d009      	beq.n	8009e7e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	891b      	ldrh	r3, [r3, #8]
 8009e6e:	4619      	mov	r1, r3
 8009e70:	68b8      	ldr	r0, [r7, #8]
 8009e72:	f7ff fb19 	bl	80094a8 <tcp_recved>
    pbuf_free(p);
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f7fe fd28 	bl	80088cc <pbuf_free>
 8009e7c:	e008      	b.n	8009e90 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8009e7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d104      	bne.n	8009e90 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8009e86:	68b8      	ldr	r0, [r7, #8]
 8009e88:	f7ff f9be 	bl	8009208 <tcp_close>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	e000      	b.n	8009e92 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8009e90:	2300      	movs	r3, #0
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3710      	adds	r7, #16
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
 8009e9a:	bf00      	nop
 8009e9c:	08014770 	.word	0x08014770
 8009ea0:	08014ce0 	.word	0x08014ce0
 8009ea4:	080147b4 	.word	0x080147b4

08009ea8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b086      	sub	sp, #24
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	4603      	mov	r3, r0
 8009eb0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	db01      	blt.n	8009ebe <tcp_kill_prio+0x16>
 8009eba:	79fb      	ldrb	r3, [r7, #7]
 8009ebc:	e000      	b.n	8009ec0 <tcp_kill_prio+0x18>
 8009ebe:	237f      	movs	r3, #127	; 0x7f
 8009ec0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8009ec2:	7afb      	ldrb	r3, [r7, #11]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d034      	beq.n	8009f32 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8009ec8:	7afb      	ldrb	r3, [r7, #11]
 8009eca:	3b01      	subs	r3, #1
 8009ecc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009ed6:	4b19      	ldr	r3, [pc, #100]	; (8009f3c <tcp_kill_prio+0x94>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	617b      	str	r3, [r7, #20]
 8009edc:	e01f      	b.n	8009f1e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	7d5b      	ldrb	r3, [r3, #21]
 8009ee2:	7afa      	ldrb	r2, [r7, #11]
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d80c      	bhi.n	8009f02 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8009eec:	7afa      	ldrb	r2, [r7, #11]
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d112      	bne.n	8009f18 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009ef2:	4b13      	ldr	r3, [pc, #76]	; (8009f40 <tcp_kill_prio+0x98>)
 8009ef4:	681a      	ldr	r2, [r3, #0]
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	6a1b      	ldr	r3, [r3, #32]
 8009efa:	1ad3      	subs	r3, r2, r3
 8009efc:	68fa      	ldr	r2, [r7, #12]
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d80a      	bhi.n	8009f18 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8009f02:	4b0f      	ldr	r3, [pc, #60]	; (8009f40 <tcp_kill_prio+0x98>)
 8009f04:	681a      	ldr	r2, [r3, #0]
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	6a1b      	ldr	r3, [r3, #32]
 8009f0a:	1ad3      	subs	r3, r2, r3
 8009f0c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	7d5b      	ldrb	r3, [r3, #21]
 8009f16:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	68db      	ldr	r3, [r3, #12]
 8009f1c:	617b      	str	r3, [r7, #20]
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d1dc      	bne.n	8009ede <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d004      	beq.n	8009f34 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009f2a:	6938      	ldr	r0, [r7, #16]
 8009f2c:	f7ff fa56 	bl	80093dc <tcp_abort>
 8009f30:	e000      	b.n	8009f34 <tcp_kill_prio+0x8c>
    return;
 8009f32:	bf00      	nop
  }
}
 8009f34:	3718      	adds	r7, #24
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}
 8009f3a:	bf00      	nop
 8009f3c:	2000a7d8 	.word	0x2000a7d8
 8009f40:	2000a7cc 	.word	0x2000a7cc

08009f44 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b086      	sub	sp, #24
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8009f4e:	79fb      	ldrb	r3, [r7, #7]
 8009f50:	2b08      	cmp	r3, #8
 8009f52:	d009      	beq.n	8009f68 <tcp_kill_state+0x24>
 8009f54:	79fb      	ldrb	r3, [r7, #7]
 8009f56:	2b09      	cmp	r3, #9
 8009f58:	d006      	beq.n	8009f68 <tcp_kill_state+0x24>
 8009f5a:	4b1a      	ldr	r3, [pc, #104]	; (8009fc4 <tcp_kill_state+0x80>)
 8009f5c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8009f60:	4919      	ldr	r1, [pc, #100]	; (8009fc8 <tcp_kill_state+0x84>)
 8009f62:	481a      	ldr	r0, [pc, #104]	; (8009fcc <tcp_kill_state+0x88>)
 8009f64:	f007 fea8 	bl	8011cb8 <iprintf>

  inactivity = 0;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009f70:	4b17      	ldr	r3, [pc, #92]	; (8009fd0 <tcp_kill_state+0x8c>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	617b      	str	r3, [r7, #20]
 8009f76:	e017      	b.n	8009fa8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	7d1b      	ldrb	r3, [r3, #20]
 8009f7c:	79fa      	ldrb	r2, [r7, #7]
 8009f7e:	429a      	cmp	r2, r3
 8009f80:	d10f      	bne.n	8009fa2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009f82:	4b14      	ldr	r3, [pc, #80]	; (8009fd4 <tcp_kill_state+0x90>)
 8009f84:	681a      	ldr	r2, [r3, #0]
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	6a1b      	ldr	r3, [r3, #32]
 8009f8a:	1ad3      	subs	r3, r2, r3
 8009f8c:	68fa      	ldr	r2, [r7, #12]
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d807      	bhi.n	8009fa2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8009f92:	4b10      	ldr	r3, [pc, #64]	; (8009fd4 <tcp_kill_state+0x90>)
 8009f94:	681a      	ldr	r2, [r3, #0]
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	6a1b      	ldr	r3, [r3, #32]
 8009f9a:	1ad3      	subs	r3, r2, r3
 8009f9c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	68db      	ldr	r3, [r3, #12]
 8009fa6:	617b      	str	r3, [r7, #20]
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d1e4      	bne.n	8009f78 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d003      	beq.n	8009fbc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8009fb4:	2100      	movs	r1, #0
 8009fb6:	6938      	ldr	r0, [r7, #16]
 8009fb8:	f7ff f952 	bl	8009260 <tcp_abandon>
  }
}
 8009fbc:	bf00      	nop
 8009fbe:	3718      	adds	r7, #24
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}
 8009fc4:	08014770 	.word	0x08014770
 8009fc8:	08014cfc 	.word	0x08014cfc
 8009fcc:	080147b4 	.word	0x080147b4
 8009fd0:	2000a7d8 	.word	0x2000a7d8
 8009fd4:	2000a7cc 	.word	0x2000a7cc

08009fd8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b084      	sub	sp, #16
 8009fdc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009fe6:	4b12      	ldr	r3, [pc, #72]	; (800a030 <tcp_kill_timewait+0x58>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	60fb      	str	r3, [r7, #12]
 8009fec:	e012      	b.n	800a014 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009fee:	4b11      	ldr	r3, [pc, #68]	; (800a034 <tcp_kill_timewait+0x5c>)
 8009ff0:	681a      	ldr	r2, [r3, #0]
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	6a1b      	ldr	r3, [r3, #32]
 8009ff6:	1ad3      	subs	r3, r2, r3
 8009ff8:	687a      	ldr	r2, [r7, #4]
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d807      	bhi.n	800a00e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8009ffe:	4b0d      	ldr	r3, [pc, #52]	; (800a034 <tcp_kill_timewait+0x5c>)
 800a000:	681a      	ldr	r2, [r3, #0]
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	6a1b      	ldr	r3, [r3, #32]
 800a006:	1ad3      	subs	r3, r2, r3
 800a008:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	68db      	ldr	r3, [r3, #12]
 800a012:	60fb      	str	r3, [r7, #12]
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d1e9      	bne.n	8009fee <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d002      	beq.n	800a026 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a020:	68b8      	ldr	r0, [r7, #8]
 800a022:	f7ff f9db 	bl	80093dc <tcp_abort>
  }
}
 800a026:	bf00      	nop
 800a028:	3710      	adds	r7, #16
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}
 800a02e:	bf00      	nop
 800a030:	2000a7dc 	.word	0x2000a7dc
 800a034:	2000a7cc 	.word	0x2000a7cc

0800a038 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b082      	sub	sp, #8
 800a03c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800a03e:	4b10      	ldr	r3, [pc, #64]	; (800a080 <tcp_handle_closepend+0x48>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a044:	e014      	b.n	800a070 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	68db      	ldr	r3, [r3, #12]
 800a04a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	8b5b      	ldrh	r3, [r3, #26]
 800a050:	f003 0308 	and.w	r3, r3, #8
 800a054:	2b00      	cmp	r3, #0
 800a056:	d009      	beq.n	800a06c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	8b5b      	ldrh	r3, [r3, #26]
 800a05c:	f023 0308 	bic.w	r3, r3, #8
 800a060:	b29a      	uxth	r2, r3
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f7ff f864 	bl	8009134 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d1e7      	bne.n	800a046 <tcp_handle_closepend+0xe>
  }
}
 800a076:	bf00      	nop
 800a078:	bf00      	nop
 800a07a:	3708      	adds	r7, #8
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}
 800a080:	2000a7d8 	.word	0x2000a7d8

0800a084 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b084      	sub	sp, #16
 800a088:	af00      	add	r7, sp, #0
 800a08a:	4603      	mov	r3, r0
 800a08c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a08e:	2001      	movs	r0, #1
 800a090:	f7fd fd36 	bl	8007b00 <memp_malloc>
 800a094:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d126      	bne.n	800a0ea <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800a09c:	f7ff ffcc 	bl	800a038 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800a0a0:	f7ff ff9a 	bl	8009fd8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a0a4:	2001      	movs	r0, #1
 800a0a6:	f7fd fd2b 	bl	8007b00 <memp_malloc>
 800a0aa:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d11b      	bne.n	800a0ea <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800a0b2:	2009      	movs	r0, #9
 800a0b4:	f7ff ff46 	bl	8009f44 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a0b8:	2001      	movs	r0, #1
 800a0ba:	f7fd fd21 	bl	8007b00 <memp_malloc>
 800a0be:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d111      	bne.n	800a0ea <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800a0c6:	2008      	movs	r0, #8
 800a0c8:	f7ff ff3c 	bl	8009f44 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a0cc:	2001      	movs	r0, #1
 800a0ce:	f7fd fd17 	bl	8007b00 <memp_malloc>
 800a0d2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d107      	bne.n	800a0ea <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800a0da:	79fb      	ldrb	r3, [r7, #7]
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f7ff fee3 	bl	8009ea8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a0e2:	2001      	movs	r0, #1
 800a0e4:	f7fd fd0c 	bl	8007b00 <memp_malloc>
 800a0e8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d03f      	beq.n	800a170 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800a0f0:	229c      	movs	r2, #156	; 0x9c
 800a0f2:	2100      	movs	r1, #0
 800a0f4:	68f8      	ldr	r0, [r7, #12]
 800a0f6:	f007 fe44 	bl	8011d82 <memset>
    pcb->prio = prio;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	79fa      	ldrb	r2, [r7, #7]
 800a0fe:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800a106:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a110:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	22ff      	movs	r2, #255	; 0xff
 800a11e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a126:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	2206      	movs	r2, #6
 800a12c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	2206      	movs	r2, #6
 800a134:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a13c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	2201      	movs	r2, #1
 800a142:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800a146:	4b0d      	ldr	r3, [pc, #52]	; (800a17c <tcp_alloc+0xf8>)
 800a148:	681a      	ldr	r2, [r3, #0]
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800a14e:	4b0c      	ldr	r3, [pc, #48]	; (800a180 <tcp_alloc+0xfc>)
 800a150:	781a      	ldrb	r2, [r3, #0]
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800a15c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	4a08      	ldr	r2, [pc, #32]	; (800a184 <tcp_alloc+0x100>)
 800a164:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	4a07      	ldr	r2, [pc, #28]	; (800a188 <tcp_alloc+0x104>)
 800a16c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800a170:	68fb      	ldr	r3, [r7, #12]
}
 800a172:	4618      	mov	r0, r3
 800a174:	3710      	adds	r7, #16
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}
 800a17a:	bf00      	nop
 800a17c:	2000a7cc 	.word	0x2000a7cc
 800a180:	2000a7e2 	.word	0x2000a7e2
 800a184:	08009e3d 	.word	0x08009e3d
 800a188:	006ddd00 	.word	0x006ddd00

0800a18c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b082      	sub	sp, #8
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d107      	bne.n	800a1aa <tcp_pcb_purge+0x1e>
 800a19a:	4b21      	ldr	r3, [pc, #132]	; (800a220 <tcp_pcb_purge+0x94>)
 800a19c:	f640 0251 	movw	r2, #2129	; 0x851
 800a1a0:	4920      	ldr	r1, [pc, #128]	; (800a224 <tcp_pcb_purge+0x98>)
 800a1a2:	4821      	ldr	r0, [pc, #132]	; (800a228 <tcp_pcb_purge+0x9c>)
 800a1a4:	f007 fd88 	bl	8011cb8 <iprintf>
 800a1a8:	e037      	b.n	800a21a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	7d1b      	ldrb	r3, [r3, #20]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d033      	beq.n	800a21a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800a1b6:	2b0a      	cmp	r3, #10
 800a1b8:	d02f      	beq.n	800a21a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800a1be:	2b01      	cmp	r3, #1
 800a1c0:	d02b      	beq.n	800a21a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d007      	beq.n	800a1da <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f7fe fb7c 	bl	80088cc <pbuf_free>
      pcb->refused_data = NULL;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d002      	beq.n	800a1e8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f000 f986 	bl	800a4f4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a1ee:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f7ff fdc7 	bl	8009d88 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1fe:	4618      	mov	r0, r3
 800a200:	f7ff fdc2 	bl	8009d88 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2200      	movs	r2, #0
 800a208:	66da      	str	r2, [r3, #108]	; 0x6c
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2200      	movs	r2, #0
 800a216:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800a21a:	3708      	adds	r7, #8
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}
 800a220:	08014770 	.word	0x08014770
 800a224:	08014dbc 	.word	0x08014dbc
 800a228:	080147b4 	.word	0x080147b4

0800a22c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d106      	bne.n	800a24a <tcp_pcb_remove+0x1e>
 800a23c:	4b3e      	ldr	r3, [pc, #248]	; (800a338 <tcp_pcb_remove+0x10c>)
 800a23e:	f640 0283 	movw	r2, #2179	; 0x883
 800a242:	493e      	ldr	r1, [pc, #248]	; (800a33c <tcp_pcb_remove+0x110>)
 800a244:	483e      	ldr	r0, [pc, #248]	; (800a340 <tcp_pcb_remove+0x114>)
 800a246:	f007 fd37 	bl	8011cb8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d106      	bne.n	800a25e <tcp_pcb_remove+0x32>
 800a250:	4b39      	ldr	r3, [pc, #228]	; (800a338 <tcp_pcb_remove+0x10c>)
 800a252:	f640 0284 	movw	r2, #2180	; 0x884
 800a256:	493b      	ldr	r1, [pc, #236]	; (800a344 <tcp_pcb_remove+0x118>)
 800a258:	4839      	ldr	r0, [pc, #228]	; (800a340 <tcp_pcb_remove+0x114>)
 800a25a:	f007 fd2d 	bl	8011cb8 <iprintf>

  TCP_RMV(pcblist, pcb);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	683a      	ldr	r2, [r7, #0]
 800a264:	429a      	cmp	r2, r3
 800a266:	d105      	bne.n	800a274 <tcp_pcb_remove+0x48>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	68da      	ldr	r2, [r3, #12]
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	601a      	str	r2, [r3, #0]
 800a272:	e013      	b.n	800a29c <tcp_pcb_remove+0x70>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	60fb      	str	r3, [r7, #12]
 800a27a:	e00c      	b.n	800a296 <tcp_pcb_remove+0x6a>
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	68db      	ldr	r3, [r3, #12]
 800a280:	683a      	ldr	r2, [r7, #0]
 800a282:	429a      	cmp	r2, r3
 800a284:	d104      	bne.n	800a290 <tcp_pcb_remove+0x64>
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	68da      	ldr	r2, [r3, #12]
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	60da      	str	r2, [r3, #12]
 800a28e:	e005      	b.n	800a29c <tcp_pcb_remove+0x70>
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	68db      	ldr	r3, [r3, #12]
 800a294:	60fb      	str	r3, [r7, #12]
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d1ef      	bne.n	800a27c <tcp_pcb_remove+0x50>
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800a2a2:	6838      	ldr	r0, [r7, #0]
 800a2a4:	f7ff ff72 	bl	800a18c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	7d1b      	ldrb	r3, [r3, #20]
 800a2ac:	2b0a      	cmp	r3, #10
 800a2ae:	d013      	beq.n	800a2d8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800a2b4:	2b01      	cmp	r3, #1
 800a2b6:	d00f      	beq.n	800a2d8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	8b5b      	ldrh	r3, [r3, #26]
 800a2bc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d009      	beq.n	800a2d8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	8b5b      	ldrh	r3, [r3, #26]
 800a2c8:	f043 0302 	orr.w	r3, r3, #2
 800a2cc:	b29a      	uxth	r2, r3
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a2d2:	6838      	ldr	r0, [r7, #0]
 800a2d4:	f002 ff6e 	bl	800d1b4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	7d1b      	ldrb	r3, [r3, #20]
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	d020      	beq.n	800a322 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d006      	beq.n	800a2f6 <tcp_pcb_remove+0xca>
 800a2e8:	4b13      	ldr	r3, [pc, #76]	; (800a338 <tcp_pcb_remove+0x10c>)
 800a2ea:	f640 0293 	movw	r2, #2195	; 0x893
 800a2ee:	4916      	ldr	r1, [pc, #88]	; (800a348 <tcp_pcb_remove+0x11c>)
 800a2f0:	4813      	ldr	r0, [pc, #76]	; (800a340 <tcp_pcb_remove+0x114>)
 800a2f2:	f007 fce1 	bl	8011cb8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d006      	beq.n	800a30c <tcp_pcb_remove+0xe0>
 800a2fe:	4b0e      	ldr	r3, [pc, #56]	; (800a338 <tcp_pcb_remove+0x10c>)
 800a300:	f640 0294 	movw	r2, #2196	; 0x894
 800a304:	4911      	ldr	r1, [pc, #68]	; (800a34c <tcp_pcb_remove+0x120>)
 800a306:	480e      	ldr	r0, [pc, #56]	; (800a340 <tcp_pcb_remove+0x114>)
 800a308:	f007 fcd6 	bl	8011cb8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a310:	2b00      	cmp	r3, #0
 800a312:	d006      	beq.n	800a322 <tcp_pcb_remove+0xf6>
 800a314:	4b08      	ldr	r3, [pc, #32]	; (800a338 <tcp_pcb_remove+0x10c>)
 800a316:	f640 0296 	movw	r2, #2198	; 0x896
 800a31a:	490d      	ldr	r1, [pc, #52]	; (800a350 <tcp_pcb_remove+0x124>)
 800a31c:	4808      	ldr	r0, [pc, #32]	; (800a340 <tcp_pcb_remove+0x114>)
 800a31e:	f007 fccb 	bl	8011cb8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	2200      	movs	r2, #0
 800a326:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	2200      	movs	r2, #0
 800a32c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800a32e:	bf00      	nop
 800a330:	3710      	adds	r7, #16
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
 800a336:	bf00      	nop
 800a338:	08014770 	.word	0x08014770
 800a33c:	08014dd8 	.word	0x08014dd8
 800a340:	080147b4 	.word	0x080147b4
 800a344:	08014df4 	.word	0x08014df4
 800a348:	08014e14 	.word	0x08014e14
 800a34c:	08014e2c 	.word	0x08014e2c
 800a350:	08014e48 	.word	0x08014e48

0800a354 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b082      	sub	sp, #8
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d106      	bne.n	800a370 <tcp_next_iss+0x1c>
 800a362:	4b0a      	ldr	r3, [pc, #40]	; (800a38c <tcp_next_iss+0x38>)
 800a364:	f640 02af 	movw	r2, #2223	; 0x8af
 800a368:	4909      	ldr	r1, [pc, #36]	; (800a390 <tcp_next_iss+0x3c>)
 800a36a:	480a      	ldr	r0, [pc, #40]	; (800a394 <tcp_next_iss+0x40>)
 800a36c:	f007 fca4 	bl	8011cb8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800a370:	4b09      	ldr	r3, [pc, #36]	; (800a398 <tcp_next_iss+0x44>)
 800a372:	681a      	ldr	r2, [r3, #0]
 800a374:	4b09      	ldr	r3, [pc, #36]	; (800a39c <tcp_next_iss+0x48>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	4413      	add	r3, r2
 800a37a:	4a07      	ldr	r2, [pc, #28]	; (800a398 <tcp_next_iss+0x44>)
 800a37c:	6013      	str	r3, [r2, #0]
  return iss;
 800a37e:	4b06      	ldr	r3, [pc, #24]	; (800a398 <tcp_next_iss+0x44>)
 800a380:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800a382:	4618      	mov	r0, r3
 800a384:	3708      	adds	r7, #8
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}
 800a38a:	bf00      	nop
 800a38c:	08014770 	.word	0x08014770
 800a390:	08014e60 	.word	0x08014e60
 800a394:	080147b4 	.word	0x080147b4
 800a398:	20000024 	.word	0x20000024
 800a39c:	2000a7cc 	.word	0x2000a7cc

0800a3a0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b086      	sub	sp, #24
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	60b9      	str	r1, [r7, #8]
 800a3aa:	607a      	str	r2, [r7, #4]
 800a3ac:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d106      	bne.n	800a3c2 <tcp_eff_send_mss_netif+0x22>
 800a3b4:	4b14      	ldr	r3, [pc, #80]	; (800a408 <tcp_eff_send_mss_netif+0x68>)
 800a3b6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800a3ba:	4914      	ldr	r1, [pc, #80]	; (800a40c <tcp_eff_send_mss_netif+0x6c>)
 800a3bc:	4814      	ldr	r0, [pc, #80]	; (800a410 <tcp_eff_send_mss_netif+0x70>)
 800a3be:	f007 fc7b 	bl	8011cb8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d101      	bne.n	800a3cc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800a3c8:	89fb      	ldrh	r3, [r7, #14]
 800a3ca:	e019      	b.n	800a400 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a3d0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800a3d2:	8afb      	ldrh	r3, [r7, #22]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d012      	beq.n	800a3fe <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800a3d8:	2328      	movs	r3, #40	; 0x28
 800a3da:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800a3dc:	8afa      	ldrh	r2, [r7, #22]
 800a3de:	8abb      	ldrh	r3, [r7, #20]
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	d904      	bls.n	800a3ee <tcp_eff_send_mss_netif+0x4e>
 800a3e4:	8afa      	ldrh	r2, [r7, #22]
 800a3e6:	8abb      	ldrh	r3, [r7, #20]
 800a3e8:	1ad3      	subs	r3, r2, r3
 800a3ea:	b29b      	uxth	r3, r3
 800a3ec:	e000      	b.n	800a3f0 <tcp_eff_send_mss_netif+0x50>
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800a3f2:	8a7a      	ldrh	r2, [r7, #18]
 800a3f4:	89fb      	ldrh	r3, [r7, #14]
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	bf28      	it	cs
 800a3fa:	4613      	movcs	r3, r2
 800a3fc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800a3fe:	89fb      	ldrh	r3, [r7, #14]
}
 800a400:	4618      	mov	r0, r3
 800a402:	3718      	adds	r7, #24
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}
 800a408:	08014770 	.word	0x08014770
 800a40c:	08014e7c 	.word	0x08014e7c
 800a410:	080147b4 	.word	0x080147b4

0800a414 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b084      	sub	sp, #16
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
 800a41c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d119      	bne.n	800a45c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800a428:	4b10      	ldr	r3, [pc, #64]	; (800a46c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800a42a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800a42e:	4910      	ldr	r1, [pc, #64]	; (800a470 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800a430:	4810      	ldr	r0, [pc, #64]	; (800a474 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800a432:	f007 fc41 	bl	8011cb8 <iprintf>

  while (pcb != NULL) {
 800a436:	e011      	b.n	800a45c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681a      	ldr	r2, [r3, #0]
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	429a      	cmp	r2, r3
 800a442:	d108      	bne.n	800a456 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	68db      	ldr	r3, [r3, #12]
 800a448:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800a44a:	68f8      	ldr	r0, [r7, #12]
 800a44c:	f7fe ffc6 	bl	80093dc <tcp_abort>
      pcb = next;
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	60fb      	str	r3, [r7, #12]
 800a454:	e002      	b.n	800a45c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	68db      	ldr	r3, [r3, #12]
 800a45a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d1ea      	bne.n	800a438 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800a462:	bf00      	nop
 800a464:	bf00      	nop
 800a466:	3710      	adds	r7, #16
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}
 800a46c:	08014770 	.word	0x08014770
 800a470:	08014ea4 	.word	0x08014ea4
 800a474:	080147b4 	.word	0x080147b4

0800a478 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b084      	sub	sp, #16
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d02a      	beq.n	800a4de <tcp_netif_ip_addr_changed+0x66>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d026      	beq.n	800a4de <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800a490:	4b15      	ldr	r3, [pc, #84]	; (800a4e8 <tcp_netif_ip_addr_changed+0x70>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	4619      	mov	r1, r3
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f7ff ffbc 	bl	800a414 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800a49c:	4b13      	ldr	r3, [pc, #76]	; (800a4ec <tcp_netif_ip_addr_changed+0x74>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	4619      	mov	r1, r3
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f7ff ffb6 	bl	800a414 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d017      	beq.n	800a4de <tcp_netif_ip_addr_changed+0x66>
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d013      	beq.n	800a4de <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a4b6:	4b0e      	ldr	r3, [pc, #56]	; (800a4f0 <tcp_netif_ip_addr_changed+0x78>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	60fb      	str	r3, [r7, #12]
 800a4bc:	e00c      	b.n	800a4d8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681a      	ldr	r2, [r3, #0]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d103      	bne.n	800a4d2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	681a      	ldr	r2, [r3, #0]
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	68db      	ldr	r3, [r3, #12]
 800a4d6:	60fb      	str	r3, [r7, #12]
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d1ef      	bne.n	800a4be <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800a4de:	bf00      	nop
 800a4e0:	3710      	adds	r7, #16
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}
 800a4e6:	bf00      	nop
 800a4e8:	2000a7d8 	.word	0x2000a7d8
 800a4ec:	2000a7d0 	.word	0x2000a7d0
 800a4f0:	2000a7d4 	.word	0x2000a7d4

0800a4f4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b082      	sub	sp, #8
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a500:	2b00      	cmp	r3, #0
 800a502:	d007      	beq.n	800a514 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a508:	4618      	mov	r0, r3
 800a50a:	f7ff fc3d 	bl	8009d88 <tcp_segs_free>
    pcb->ooseq = NULL;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2200      	movs	r2, #0
 800a512:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800a514:	bf00      	nop
 800a516:	3708      	adds	r7, #8
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}

0800a51c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800a51c:	b590      	push	{r4, r7, lr}
 800a51e:	b08d      	sub	sp, #52	; 0x34
 800a520:	af04      	add	r7, sp, #16
 800a522:	6078      	str	r0, [r7, #4]
 800a524:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d105      	bne.n	800a538 <tcp_input+0x1c>
 800a52c:	4b9b      	ldr	r3, [pc, #620]	; (800a79c <tcp_input+0x280>)
 800a52e:	2283      	movs	r2, #131	; 0x83
 800a530:	499b      	ldr	r1, [pc, #620]	; (800a7a0 <tcp_input+0x284>)
 800a532:	489c      	ldr	r0, [pc, #624]	; (800a7a4 <tcp_input+0x288>)
 800a534:	f007 fbc0 	bl	8011cb8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	4a9a      	ldr	r2, [pc, #616]	; (800a7a8 <tcp_input+0x28c>)
 800a53e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	895b      	ldrh	r3, [r3, #10]
 800a544:	2b13      	cmp	r3, #19
 800a546:	f240 83d1 	bls.w	800acec <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a54a:	4b98      	ldr	r3, [pc, #608]	; (800a7ac <tcp_input+0x290>)
 800a54c:	695b      	ldr	r3, [r3, #20]
 800a54e:	4a97      	ldr	r2, [pc, #604]	; (800a7ac <tcp_input+0x290>)
 800a550:	6812      	ldr	r2, [r2, #0]
 800a552:	4611      	mov	r1, r2
 800a554:	4618      	mov	r0, r3
 800a556:	f005 fd7d 	bl	8010054 <ip4_addr_isbroadcast_u32>
 800a55a:	4603      	mov	r3, r0
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	f040 83c7 	bne.w	800acf0 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800a562:	4b92      	ldr	r3, [pc, #584]	; (800a7ac <tcp_input+0x290>)
 800a564:	695b      	ldr	r3, [r3, #20]
 800a566:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a56a:	2be0      	cmp	r3, #224	; 0xe0
 800a56c:	f000 83c0 	beq.w	800acf0 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800a570:	4b8d      	ldr	r3, [pc, #564]	; (800a7a8 <tcp_input+0x28c>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	899b      	ldrh	r3, [r3, #12]
 800a576:	b29b      	uxth	r3, r3
 800a578:	4618      	mov	r0, r3
 800a57a:	f7fc fe49 	bl	8007210 <lwip_htons>
 800a57e:	4603      	mov	r3, r0
 800a580:	0b1b      	lsrs	r3, r3, #12
 800a582:	b29b      	uxth	r3, r3
 800a584:	b2db      	uxtb	r3, r3
 800a586:	009b      	lsls	r3, r3, #2
 800a588:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800a58a:	7cbb      	ldrb	r3, [r7, #18]
 800a58c:	2b13      	cmp	r3, #19
 800a58e:	f240 83b1 	bls.w	800acf4 <tcp_input+0x7d8>
 800a592:	7cbb      	ldrb	r3, [r7, #18]
 800a594:	b29a      	uxth	r2, r3
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	891b      	ldrh	r3, [r3, #8]
 800a59a:	429a      	cmp	r2, r3
 800a59c:	f200 83aa 	bhi.w	800acf4 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a5a0:	7cbb      	ldrb	r3, [r7, #18]
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	3b14      	subs	r3, #20
 800a5a6:	b29a      	uxth	r2, r3
 800a5a8:	4b81      	ldr	r3, [pc, #516]	; (800a7b0 <tcp_input+0x294>)
 800a5aa:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800a5ac:	4b81      	ldr	r3, [pc, #516]	; (800a7b4 <tcp_input+0x298>)
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	895a      	ldrh	r2, [r3, #10]
 800a5b6:	7cbb      	ldrb	r3, [r7, #18]
 800a5b8:	b29b      	uxth	r3, r3
 800a5ba:	429a      	cmp	r2, r3
 800a5bc:	d309      	bcc.n	800a5d2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800a5be:	4b7c      	ldr	r3, [pc, #496]	; (800a7b0 <tcp_input+0x294>)
 800a5c0:	881a      	ldrh	r2, [r3, #0]
 800a5c2:	4b7d      	ldr	r3, [pc, #500]	; (800a7b8 <tcp_input+0x29c>)
 800a5c4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800a5c6:	7cbb      	ldrb	r3, [r7, #18]
 800a5c8:	4619      	mov	r1, r3
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f7fe f8f8 	bl	80087c0 <pbuf_remove_header>
 800a5d0:	e04e      	b.n	800a670 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d105      	bne.n	800a5e6 <tcp_input+0xca>
 800a5da:	4b70      	ldr	r3, [pc, #448]	; (800a79c <tcp_input+0x280>)
 800a5dc:	22c2      	movs	r2, #194	; 0xc2
 800a5de:	4977      	ldr	r1, [pc, #476]	; (800a7bc <tcp_input+0x2a0>)
 800a5e0:	4870      	ldr	r0, [pc, #448]	; (800a7a4 <tcp_input+0x288>)
 800a5e2:	f007 fb69 	bl	8011cb8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800a5e6:	2114      	movs	r1, #20
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f7fe f8e9 	bl	80087c0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	895a      	ldrh	r2, [r3, #10]
 800a5f2:	4b71      	ldr	r3, [pc, #452]	; (800a7b8 <tcp_input+0x29c>)
 800a5f4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a5f6:	4b6e      	ldr	r3, [pc, #440]	; (800a7b0 <tcp_input+0x294>)
 800a5f8:	881a      	ldrh	r2, [r3, #0]
 800a5fa:	4b6f      	ldr	r3, [pc, #444]	; (800a7b8 <tcp_input+0x29c>)
 800a5fc:	881b      	ldrh	r3, [r3, #0]
 800a5fe:	1ad3      	subs	r3, r2, r3
 800a600:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800a602:	4b6d      	ldr	r3, [pc, #436]	; (800a7b8 <tcp_input+0x29c>)
 800a604:	881b      	ldrh	r3, [r3, #0]
 800a606:	4619      	mov	r1, r3
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f7fe f8d9 	bl	80087c0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	895b      	ldrh	r3, [r3, #10]
 800a614:	8a3a      	ldrh	r2, [r7, #16]
 800a616:	429a      	cmp	r2, r3
 800a618:	f200 836e 	bhi.w	800acf8 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	685b      	ldr	r3, [r3, #4]
 800a622:	4a64      	ldr	r2, [pc, #400]	; (800a7b4 <tcp_input+0x298>)
 800a624:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	8a3a      	ldrh	r2, [r7, #16]
 800a62c:	4611      	mov	r1, r2
 800a62e:	4618      	mov	r0, r3
 800a630:	f7fe f8c6 	bl	80087c0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	891a      	ldrh	r2, [r3, #8]
 800a638:	8a3b      	ldrh	r3, [r7, #16]
 800a63a:	1ad3      	subs	r3, r2, r3
 800a63c:	b29a      	uxth	r2, r3
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	895b      	ldrh	r3, [r3, #10]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d005      	beq.n	800a656 <tcp_input+0x13a>
 800a64a:	4b54      	ldr	r3, [pc, #336]	; (800a79c <tcp_input+0x280>)
 800a64c:	22df      	movs	r2, #223	; 0xdf
 800a64e:	495c      	ldr	r1, [pc, #368]	; (800a7c0 <tcp_input+0x2a4>)
 800a650:	4854      	ldr	r0, [pc, #336]	; (800a7a4 <tcp_input+0x288>)
 800a652:	f007 fb31 	bl	8011cb8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	891a      	ldrh	r2, [r3, #8]
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	891b      	ldrh	r3, [r3, #8]
 800a660:	429a      	cmp	r2, r3
 800a662:	d005      	beq.n	800a670 <tcp_input+0x154>
 800a664:	4b4d      	ldr	r3, [pc, #308]	; (800a79c <tcp_input+0x280>)
 800a666:	22e0      	movs	r2, #224	; 0xe0
 800a668:	4956      	ldr	r1, [pc, #344]	; (800a7c4 <tcp_input+0x2a8>)
 800a66a:	484e      	ldr	r0, [pc, #312]	; (800a7a4 <tcp_input+0x288>)
 800a66c:	f007 fb24 	bl	8011cb8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800a670:	4b4d      	ldr	r3, [pc, #308]	; (800a7a8 <tcp_input+0x28c>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	881b      	ldrh	r3, [r3, #0]
 800a676:	b29b      	uxth	r3, r3
 800a678:	4a4b      	ldr	r2, [pc, #300]	; (800a7a8 <tcp_input+0x28c>)
 800a67a:	6814      	ldr	r4, [r2, #0]
 800a67c:	4618      	mov	r0, r3
 800a67e:	f7fc fdc7 	bl	8007210 <lwip_htons>
 800a682:	4603      	mov	r3, r0
 800a684:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800a686:	4b48      	ldr	r3, [pc, #288]	; (800a7a8 <tcp_input+0x28c>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	885b      	ldrh	r3, [r3, #2]
 800a68c:	b29b      	uxth	r3, r3
 800a68e:	4a46      	ldr	r2, [pc, #280]	; (800a7a8 <tcp_input+0x28c>)
 800a690:	6814      	ldr	r4, [r2, #0]
 800a692:	4618      	mov	r0, r3
 800a694:	f7fc fdbc 	bl	8007210 <lwip_htons>
 800a698:	4603      	mov	r3, r0
 800a69a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a69c:	4b42      	ldr	r3, [pc, #264]	; (800a7a8 <tcp_input+0x28c>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	685b      	ldr	r3, [r3, #4]
 800a6a2:	4a41      	ldr	r2, [pc, #260]	; (800a7a8 <tcp_input+0x28c>)
 800a6a4:	6814      	ldr	r4, [r2, #0]
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f7fc fdc7 	bl	800723a <lwip_htonl>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	6063      	str	r3, [r4, #4]
 800a6b0:	6863      	ldr	r3, [r4, #4]
 800a6b2:	4a45      	ldr	r2, [pc, #276]	; (800a7c8 <tcp_input+0x2ac>)
 800a6b4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a6b6:	4b3c      	ldr	r3, [pc, #240]	; (800a7a8 <tcp_input+0x28c>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	689b      	ldr	r3, [r3, #8]
 800a6bc:	4a3a      	ldr	r2, [pc, #232]	; (800a7a8 <tcp_input+0x28c>)
 800a6be:	6814      	ldr	r4, [r2, #0]
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	f7fc fdba 	bl	800723a <lwip_htonl>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	60a3      	str	r3, [r4, #8]
 800a6ca:	68a3      	ldr	r3, [r4, #8]
 800a6cc:	4a3f      	ldr	r2, [pc, #252]	; (800a7cc <tcp_input+0x2b0>)
 800a6ce:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a6d0:	4b35      	ldr	r3, [pc, #212]	; (800a7a8 <tcp_input+0x28c>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	89db      	ldrh	r3, [r3, #14]
 800a6d6:	b29b      	uxth	r3, r3
 800a6d8:	4a33      	ldr	r2, [pc, #204]	; (800a7a8 <tcp_input+0x28c>)
 800a6da:	6814      	ldr	r4, [r2, #0]
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f7fc fd97 	bl	8007210 <lwip_htons>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800a6e6:	4b30      	ldr	r3, [pc, #192]	; (800a7a8 <tcp_input+0x28c>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	899b      	ldrh	r3, [r3, #12]
 800a6ec:	b29b      	uxth	r3, r3
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f7fc fd8e 	bl	8007210 <lwip_htons>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	b2db      	uxtb	r3, r3
 800a6f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a6fc:	b2da      	uxtb	r2, r3
 800a6fe:	4b34      	ldr	r3, [pc, #208]	; (800a7d0 <tcp_input+0x2b4>)
 800a700:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	891a      	ldrh	r2, [r3, #8]
 800a706:	4b33      	ldr	r3, [pc, #204]	; (800a7d4 <tcp_input+0x2b8>)
 800a708:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800a70a:	4b31      	ldr	r3, [pc, #196]	; (800a7d0 <tcp_input+0x2b4>)
 800a70c:	781b      	ldrb	r3, [r3, #0]
 800a70e:	f003 0303 	and.w	r3, r3, #3
 800a712:	2b00      	cmp	r3, #0
 800a714:	d00c      	beq.n	800a730 <tcp_input+0x214>
    tcplen++;
 800a716:	4b2f      	ldr	r3, [pc, #188]	; (800a7d4 <tcp_input+0x2b8>)
 800a718:	881b      	ldrh	r3, [r3, #0]
 800a71a:	3301      	adds	r3, #1
 800a71c:	b29a      	uxth	r2, r3
 800a71e:	4b2d      	ldr	r3, [pc, #180]	; (800a7d4 <tcp_input+0x2b8>)
 800a720:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	891a      	ldrh	r2, [r3, #8]
 800a726:	4b2b      	ldr	r3, [pc, #172]	; (800a7d4 <tcp_input+0x2b8>)
 800a728:	881b      	ldrh	r3, [r3, #0]
 800a72a:	429a      	cmp	r2, r3
 800a72c:	f200 82e6 	bhi.w	800acfc <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800a730:	2300      	movs	r3, #0
 800a732:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a734:	4b28      	ldr	r3, [pc, #160]	; (800a7d8 <tcp_input+0x2bc>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	61fb      	str	r3, [r7, #28]
 800a73a:	e09d      	b.n	800a878 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a73c:	69fb      	ldr	r3, [r7, #28]
 800a73e:	7d1b      	ldrb	r3, [r3, #20]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d105      	bne.n	800a750 <tcp_input+0x234>
 800a744:	4b15      	ldr	r3, [pc, #84]	; (800a79c <tcp_input+0x280>)
 800a746:	22fb      	movs	r2, #251	; 0xfb
 800a748:	4924      	ldr	r1, [pc, #144]	; (800a7dc <tcp_input+0x2c0>)
 800a74a:	4816      	ldr	r0, [pc, #88]	; (800a7a4 <tcp_input+0x288>)
 800a74c:	f007 fab4 	bl	8011cb8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a750:	69fb      	ldr	r3, [r7, #28]
 800a752:	7d1b      	ldrb	r3, [r3, #20]
 800a754:	2b0a      	cmp	r3, #10
 800a756:	d105      	bne.n	800a764 <tcp_input+0x248>
 800a758:	4b10      	ldr	r3, [pc, #64]	; (800a79c <tcp_input+0x280>)
 800a75a:	22fc      	movs	r2, #252	; 0xfc
 800a75c:	4920      	ldr	r1, [pc, #128]	; (800a7e0 <tcp_input+0x2c4>)
 800a75e:	4811      	ldr	r0, [pc, #68]	; (800a7a4 <tcp_input+0x288>)
 800a760:	f007 faaa 	bl	8011cb8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a764:	69fb      	ldr	r3, [r7, #28]
 800a766:	7d1b      	ldrb	r3, [r3, #20]
 800a768:	2b01      	cmp	r3, #1
 800a76a:	d105      	bne.n	800a778 <tcp_input+0x25c>
 800a76c:	4b0b      	ldr	r3, [pc, #44]	; (800a79c <tcp_input+0x280>)
 800a76e:	22fd      	movs	r2, #253	; 0xfd
 800a770:	491c      	ldr	r1, [pc, #112]	; (800a7e4 <tcp_input+0x2c8>)
 800a772:	480c      	ldr	r0, [pc, #48]	; (800a7a4 <tcp_input+0x288>)
 800a774:	f007 faa0 	bl	8011cb8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a778:	69fb      	ldr	r3, [r7, #28]
 800a77a:	7a1b      	ldrb	r3, [r3, #8]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d033      	beq.n	800a7e8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a780:	69fb      	ldr	r3, [r7, #28]
 800a782:	7a1a      	ldrb	r2, [r3, #8]
 800a784:	4b09      	ldr	r3, [pc, #36]	; (800a7ac <tcp_input+0x290>)
 800a786:	685b      	ldr	r3, [r3, #4]
 800a788:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a78c:	3301      	adds	r3, #1
 800a78e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a790:	429a      	cmp	r2, r3
 800a792:	d029      	beq.n	800a7e8 <tcp_input+0x2cc>
      prev = pcb;
 800a794:	69fb      	ldr	r3, [r7, #28]
 800a796:	61bb      	str	r3, [r7, #24]
      continue;
 800a798:	e06b      	b.n	800a872 <tcp_input+0x356>
 800a79a:	bf00      	nop
 800a79c:	08014ed8 	.word	0x08014ed8
 800a7a0:	08014f0c 	.word	0x08014f0c
 800a7a4:	08014f24 	.word	0x08014f24
 800a7a8:	2000a7f4 	.word	0x2000a7f4
 800a7ac:	2000509c 	.word	0x2000509c
 800a7b0:	2000a7f8 	.word	0x2000a7f8
 800a7b4:	2000a7fc 	.word	0x2000a7fc
 800a7b8:	2000a7fa 	.word	0x2000a7fa
 800a7bc:	08014f4c 	.word	0x08014f4c
 800a7c0:	08014f5c 	.word	0x08014f5c
 800a7c4:	08014f68 	.word	0x08014f68
 800a7c8:	2000a804 	.word	0x2000a804
 800a7cc:	2000a808 	.word	0x2000a808
 800a7d0:	2000a810 	.word	0x2000a810
 800a7d4:	2000a80e 	.word	0x2000a80e
 800a7d8:	2000a7d8 	.word	0x2000a7d8
 800a7dc:	08014f88 	.word	0x08014f88
 800a7e0:	08014fb0 	.word	0x08014fb0
 800a7e4:	08014fdc 	.word	0x08014fdc
    }

    if (pcb->remote_port == tcphdr->src &&
 800a7e8:	69fb      	ldr	r3, [r7, #28]
 800a7ea:	8b1a      	ldrh	r2, [r3, #24]
 800a7ec:	4b72      	ldr	r3, [pc, #456]	; (800a9b8 <tcp_input+0x49c>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	881b      	ldrh	r3, [r3, #0]
 800a7f2:	b29b      	uxth	r3, r3
 800a7f4:	429a      	cmp	r2, r3
 800a7f6:	d13a      	bne.n	800a86e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800a7f8:	69fb      	ldr	r3, [r7, #28]
 800a7fa:	8ada      	ldrh	r2, [r3, #22]
 800a7fc:	4b6e      	ldr	r3, [pc, #440]	; (800a9b8 <tcp_input+0x49c>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	885b      	ldrh	r3, [r3, #2]
 800a802:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800a804:	429a      	cmp	r2, r3
 800a806:	d132      	bne.n	800a86e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a808:	69fb      	ldr	r3, [r7, #28]
 800a80a:	685a      	ldr	r2, [r3, #4]
 800a80c:	4b6b      	ldr	r3, [pc, #428]	; (800a9bc <tcp_input+0x4a0>)
 800a80e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800a810:	429a      	cmp	r2, r3
 800a812:	d12c      	bne.n	800a86e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a814:	69fb      	ldr	r3, [r7, #28]
 800a816:	681a      	ldr	r2, [r3, #0]
 800a818:	4b68      	ldr	r3, [pc, #416]	; (800a9bc <tcp_input+0x4a0>)
 800a81a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a81c:	429a      	cmp	r2, r3
 800a81e:	d126      	bne.n	800a86e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a820:	69fb      	ldr	r3, [r7, #28]
 800a822:	68db      	ldr	r3, [r3, #12]
 800a824:	69fa      	ldr	r2, [r7, #28]
 800a826:	429a      	cmp	r2, r3
 800a828:	d106      	bne.n	800a838 <tcp_input+0x31c>
 800a82a:	4b65      	ldr	r3, [pc, #404]	; (800a9c0 <tcp_input+0x4a4>)
 800a82c:	f240 120d 	movw	r2, #269	; 0x10d
 800a830:	4964      	ldr	r1, [pc, #400]	; (800a9c4 <tcp_input+0x4a8>)
 800a832:	4865      	ldr	r0, [pc, #404]	; (800a9c8 <tcp_input+0x4ac>)
 800a834:	f007 fa40 	bl	8011cb8 <iprintf>
      if (prev != NULL) {
 800a838:	69bb      	ldr	r3, [r7, #24]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d00a      	beq.n	800a854 <tcp_input+0x338>
        prev->next = pcb->next;
 800a83e:	69fb      	ldr	r3, [r7, #28]
 800a840:	68da      	ldr	r2, [r3, #12]
 800a842:	69bb      	ldr	r3, [r7, #24]
 800a844:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800a846:	4b61      	ldr	r3, [pc, #388]	; (800a9cc <tcp_input+0x4b0>)
 800a848:	681a      	ldr	r2, [r3, #0]
 800a84a:	69fb      	ldr	r3, [r7, #28]
 800a84c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800a84e:	4a5f      	ldr	r2, [pc, #380]	; (800a9cc <tcp_input+0x4b0>)
 800a850:	69fb      	ldr	r3, [r7, #28]
 800a852:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a854:	69fb      	ldr	r3, [r7, #28]
 800a856:	68db      	ldr	r3, [r3, #12]
 800a858:	69fa      	ldr	r2, [r7, #28]
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d111      	bne.n	800a882 <tcp_input+0x366>
 800a85e:	4b58      	ldr	r3, [pc, #352]	; (800a9c0 <tcp_input+0x4a4>)
 800a860:	f240 1215 	movw	r2, #277	; 0x115
 800a864:	495a      	ldr	r1, [pc, #360]	; (800a9d0 <tcp_input+0x4b4>)
 800a866:	4858      	ldr	r0, [pc, #352]	; (800a9c8 <tcp_input+0x4ac>)
 800a868:	f007 fa26 	bl	8011cb8 <iprintf>
      break;
 800a86c:	e009      	b.n	800a882 <tcp_input+0x366>
    }
    prev = pcb;
 800a86e:	69fb      	ldr	r3, [r7, #28]
 800a870:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a872:	69fb      	ldr	r3, [r7, #28]
 800a874:	68db      	ldr	r3, [r3, #12]
 800a876:	61fb      	str	r3, [r7, #28]
 800a878:	69fb      	ldr	r3, [r7, #28]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	f47f af5e 	bne.w	800a73c <tcp_input+0x220>
 800a880:	e000      	b.n	800a884 <tcp_input+0x368>
      break;
 800a882:	bf00      	nop
  }

  if (pcb == NULL) {
 800a884:	69fb      	ldr	r3, [r7, #28]
 800a886:	2b00      	cmp	r3, #0
 800a888:	f040 80aa 	bne.w	800a9e0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a88c:	4b51      	ldr	r3, [pc, #324]	; (800a9d4 <tcp_input+0x4b8>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	61fb      	str	r3, [r7, #28]
 800a892:	e03f      	b.n	800a914 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a894:	69fb      	ldr	r3, [r7, #28]
 800a896:	7d1b      	ldrb	r3, [r3, #20]
 800a898:	2b0a      	cmp	r3, #10
 800a89a:	d006      	beq.n	800a8aa <tcp_input+0x38e>
 800a89c:	4b48      	ldr	r3, [pc, #288]	; (800a9c0 <tcp_input+0x4a4>)
 800a89e:	f240 121f 	movw	r2, #287	; 0x11f
 800a8a2:	494d      	ldr	r1, [pc, #308]	; (800a9d8 <tcp_input+0x4bc>)
 800a8a4:	4848      	ldr	r0, [pc, #288]	; (800a9c8 <tcp_input+0x4ac>)
 800a8a6:	f007 fa07 	bl	8011cb8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a8aa:	69fb      	ldr	r3, [r7, #28]
 800a8ac:	7a1b      	ldrb	r3, [r3, #8]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d009      	beq.n	800a8c6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a8b2:	69fb      	ldr	r3, [r7, #28]
 800a8b4:	7a1a      	ldrb	r2, [r3, #8]
 800a8b6:	4b41      	ldr	r3, [pc, #260]	; (800a9bc <tcp_input+0x4a0>)
 800a8b8:	685b      	ldr	r3, [r3, #4]
 800a8ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a8be:	3301      	adds	r3, #1
 800a8c0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a8c2:	429a      	cmp	r2, r3
 800a8c4:	d122      	bne.n	800a90c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800a8c6:	69fb      	ldr	r3, [r7, #28]
 800a8c8:	8b1a      	ldrh	r2, [r3, #24]
 800a8ca:	4b3b      	ldr	r3, [pc, #236]	; (800a9b8 <tcp_input+0x49c>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	881b      	ldrh	r3, [r3, #0]
 800a8d0:	b29b      	uxth	r3, r3
 800a8d2:	429a      	cmp	r2, r3
 800a8d4:	d11b      	bne.n	800a90e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800a8d6:	69fb      	ldr	r3, [r7, #28]
 800a8d8:	8ada      	ldrh	r2, [r3, #22]
 800a8da:	4b37      	ldr	r3, [pc, #220]	; (800a9b8 <tcp_input+0x49c>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	885b      	ldrh	r3, [r3, #2]
 800a8e0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d113      	bne.n	800a90e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a8e6:	69fb      	ldr	r3, [r7, #28]
 800a8e8:	685a      	ldr	r2, [r3, #4]
 800a8ea:	4b34      	ldr	r3, [pc, #208]	; (800a9bc <tcp_input+0x4a0>)
 800a8ec:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800a8ee:	429a      	cmp	r2, r3
 800a8f0:	d10d      	bne.n	800a90e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a8f2:	69fb      	ldr	r3, [r7, #28]
 800a8f4:	681a      	ldr	r2, [r3, #0]
 800a8f6:	4b31      	ldr	r3, [pc, #196]	; (800a9bc <tcp_input+0x4a0>)
 800a8f8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a8fa:	429a      	cmp	r2, r3
 800a8fc:	d107      	bne.n	800a90e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800a8fe:	69f8      	ldr	r0, [r7, #28]
 800a900:	f000 fb56 	bl	800afb0 <tcp_timewait_input>
        }
        pbuf_free(p);
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f7fd ffe1 	bl	80088cc <pbuf_free>
        return;
 800a90a:	e1fd      	b.n	800ad08 <tcp_input+0x7ec>
        continue;
 800a90c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a90e:	69fb      	ldr	r3, [r7, #28]
 800a910:	68db      	ldr	r3, [r3, #12]
 800a912:	61fb      	str	r3, [r7, #28]
 800a914:	69fb      	ldr	r3, [r7, #28]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d1bc      	bne.n	800a894 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800a91a:	2300      	movs	r3, #0
 800a91c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a91e:	4b2f      	ldr	r3, [pc, #188]	; (800a9dc <tcp_input+0x4c0>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	617b      	str	r3, [r7, #20]
 800a924:	e02a      	b.n	800a97c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	7a1b      	ldrb	r3, [r3, #8]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d00c      	beq.n	800a948 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	7a1a      	ldrb	r2, [r3, #8]
 800a932:	4b22      	ldr	r3, [pc, #136]	; (800a9bc <tcp_input+0x4a0>)
 800a934:	685b      	ldr	r3, [r3, #4]
 800a936:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a93a:	3301      	adds	r3, #1
 800a93c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a93e:	429a      	cmp	r2, r3
 800a940:	d002      	beq.n	800a948 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800a942:	697b      	ldr	r3, [r7, #20]
 800a944:	61bb      	str	r3, [r7, #24]
        continue;
 800a946:	e016      	b.n	800a976 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	8ada      	ldrh	r2, [r3, #22]
 800a94c:	4b1a      	ldr	r3, [pc, #104]	; (800a9b8 <tcp_input+0x49c>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	885b      	ldrh	r3, [r3, #2]
 800a952:	b29b      	uxth	r3, r3
 800a954:	429a      	cmp	r2, r3
 800a956:	d10c      	bne.n	800a972 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a958:	697b      	ldr	r3, [r7, #20]
 800a95a:	681a      	ldr	r2, [r3, #0]
 800a95c:	4b17      	ldr	r3, [pc, #92]	; (800a9bc <tcp_input+0x4a0>)
 800a95e:	695b      	ldr	r3, [r3, #20]
 800a960:	429a      	cmp	r2, r3
 800a962:	d00f      	beq.n	800a984 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d00d      	beq.n	800a986 <tcp_input+0x46a>
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d009      	beq.n	800a986 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	68db      	ldr	r3, [r3, #12]
 800a97a:	617b      	str	r3, [r7, #20]
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d1d1      	bne.n	800a926 <tcp_input+0x40a>
 800a982:	e000      	b.n	800a986 <tcp_input+0x46a>
            break;
 800a984:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800a986:	697b      	ldr	r3, [r7, #20]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d029      	beq.n	800a9e0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800a98c:	69bb      	ldr	r3, [r7, #24]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d00a      	beq.n	800a9a8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	68da      	ldr	r2, [r3, #12]
 800a996:	69bb      	ldr	r3, [r7, #24]
 800a998:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800a99a:	4b10      	ldr	r3, [pc, #64]	; (800a9dc <tcp_input+0x4c0>)
 800a99c:	681a      	ldr	r2, [r3, #0]
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800a9a2:	4a0e      	ldr	r2, [pc, #56]	; (800a9dc <tcp_input+0x4c0>)
 800a9a4:	697b      	ldr	r3, [r7, #20]
 800a9a6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800a9a8:	6978      	ldr	r0, [r7, #20]
 800a9aa:	f000 fa03 	bl	800adb4 <tcp_listen_input>
      }
      pbuf_free(p);
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f7fd ff8c 	bl	80088cc <pbuf_free>
      return;
 800a9b4:	e1a8      	b.n	800ad08 <tcp_input+0x7ec>
 800a9b6:	bf00      	nop
 800a9b8:	2000a7f4 	.word	0x2000a7f4
 800a9bc:	2000509c 	.word	0x2000509c
 800a9c0:	08014ed8 	.word	0x08014ed8
 800a9c4:	08015004 	.word	0x08015004
 800a9c8:	08014f24 	.word	0x08014f24
 800a9cc:	2000a7d8 	.word	0x2000a7d8
 800a9d0:	08015030 	.word	0x08015030
 800a9d4:	2000a7dc 	.word	0x2000a7dc
 800a9d8:	0801505c 	.word	0x0801505c
 800a9dc:	2000a7d4 	.word	0x2000a7d4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800a9e0:	69fb      	ldr	r3, [r7, #28]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	f000 8158 	beq.w	800ac98 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800a9e8:	4b95      	ldr	r3, [pc, #596]	; (800ac40 <tcp_input+0x724>)
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	891a      	ldrh	r2, [r3, #8]
 800a9f2:	4b93      	ldr	r3, [pc, #588]	; (800ac40 <tcp_input+0x724>)
 800a9f4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800a9f6:	4a92      	ldr	r2, [pc, #584]	; (800ac40 <tcp_input+0x724>)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800a9fc:	4b91      	ldr	r3, [pc, #580]	; (800ac44 <tcp_input+0x728>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	4a8f      	ldr	r2, [pc, #572]	; (800ac40 <tcp_input+0x724>)
 800aa02:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800aa04:	4b90      	ldr	r3, [pc, #576]	; (800ac48 <tcp_input+0x72c>)
 800aa06:	2200      	movs	r2, #0
 800aa08:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800aa0a:	4b90      	ldr	r3, [pc, #576]	; (800ac4c <tcp_input+0x730>)
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800aa10:	4b8f      	ldr	r3, [pc, #572]	; (800ac50 <tcp_input+0x734>)
 800aa12:	2200      	movs	r2, #0
 800aa14:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800aa16:	4b8f      	ldr	r3, [pc, #572]	; (800ac54 <tcp_input+0x738>)
 800aa18:	781b      	ldrb	r3, [r3, #0]
 800aa1a:	f003 0308 	and.w	r3, r3, #8
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d006      	beq.n	800aa30 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	7b5b      	ldrb	r3, [r3, #13]
 800aa26:	f043 0301 	orr.w	r3, r3, #1
 800aa2a:	b2da      	uxtb	r2, r3
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800aa30:	69fb      	ldr	r3, [r7, #28]
 800aa32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d017      	beq.n	800aa68 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800aa38:	69f8      	ldr	r0, [r7, #28]
 800aa3a:	f7ff f929 	bl	8009c90 <tcp_process_refused_data>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	f113 0f0d 	cmn.w	r3, #13
 800aa44:	d007      	beq.n	800aa56 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800aa46:	69fb      	ldr	r3, [r7, #28]
 800aa48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d00c      	beq.n	800aa68 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800aa4e:	4b82      	ldr	r3, [pc, #520]	; (800ac58 <tcp_input+0x73c>)
 800aa50:	881b      	ldrh	r3, [r3, #0]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d008      	beq.n	800aa68 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800aa56:	69fb      	ldr	r3, [r7, #28]
 800aa58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	f040 80e3 	bne.w	800ac26 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800aa60:	69f8      	ldr	r0, [r7, #28]
 800aa62:	f003 f9ad 	bl	800ddc0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800aa66:	e0de      	b.n	800ac26 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800aa68:	4a7c      	ldr	r2, [pc, #496]	; (800ac5c <tcp_input+0x740>)
 800aa6a:	69fb      	ldr	r3, [r7, #28]
 800aa6c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800aa6e:	69f8      	ldr	r0, [r7, #28]
 800aa70:	f000 fb18 	bl	800b0a4 <tcp_process>
 800aa74:	4603      	mov	r3, r0
 800aa76:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800aa78:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aa7c:	f113 0f0d 	cmn.w	r3, #13
 800aa80:	f000 80d3 	beq.w	800ac2a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800aa84:	4b71      	ldr	r3, [pc, #452]	; (800ac4c <tcp_input+0x730>)
 800aa86:	781b      	ldrb	r3, [r3, #0]
 800aa88:	f003 0308 	and.w	r3, r3, #8
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d015      	beq.n	800aabc <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800aa90:	69fb      	ldr	r3, [r7, #28]
 800aa92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d008      	beq.n	800aaac <tcp_input+0x590>
 800aa9a:	69fb      	ldr	r3, [r7, #28]
 800aa9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aaa0:	69fa      	ldr	r2, [r7, #28]
 800aaa2:	6912      	ldr	r2, [r2, #16]
 800aaa4:	f06f 010d 	mvn.w	r1, #13
 800aaa8:	4610      	mov	r0, r2
 800aaaa:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800aaac:	69f9      	ldr	r1, [r7, #28]
 800aaae:	486c      	ldr	r0, [pc, #432]	; (800ac60 <tcp_input+0x744>)
 800aab0:	f7ff fbbc 	bl	800a22c <tcp_pcb_remove>
        tcp_free(pcb);
 800aab4:	69f8      	ldr	r0, [r7, #28]
 800aab6:	f7fe f9a9 	bl	8008e0c <tcp_free>
 800aaba:	e0da      	b.n	800ac72 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800aabc:	2300      	movs	r3, #0
 800aabe:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800aac0:	4b63      	ldr	r3, [pc, #396]	; (800ac50 <tcp_input+0x734>)
 800aac2:	881b      	ldrh	r3, [r3, #0]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d01d      	beq.n	800ab04 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800aac8:	4b61      	ldr	r3, [pc, #388]	; (800ac50 <tcp_input+0x734>)
 800aaca:	881b      	ldrh	r3, [r3, #0]
 800aacc:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800aace:	69fb      	ldr	r3, [r7, #28]
 800aad0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d00a      	beq.n	800aaee <tcp_input+0x5d2>
 800aad8:	69fb      	ldr	r3, [r7, #28]
 800aada:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aade:	69fa      	ldr	r2, [r7, #28]
 800aae0:	6910      	ldr	r0, [r2, #16]
 800aae2:	89fa      	ldrh	r2, [r7, #14]
 800aae4:	69f9      	ldr	r1, [r7, #28]
 800aae6:	4798      	blx	r3
 800aae8:	4603      	mov	r3, r0
 800aaea:	74fb      	strb	r3, [r7, #19]
 800aaec:	e001      	b.n	800aaf2 <tcp_input+0x5d6>
 800aaee:	2300      	movs	r3, #0
 800aaf0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800aaf2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aaf6:	f113 0f0d 	cmn.w	r3, #13
 800aafa:	f000 8098 	beq.w	800ac2e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800aafe:	4b54      	ldr	r3, [pc, #336]	; (800ac50 <tcp_input+0x734>)
 800ab00:	2200      	movs	r2, #0
 800ab02:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800ab04:	69f8      	ldr	r0, [r7, #28]
 800ab06:	f000 f915 	bl	800ad34 <tcp_input_delayed_close>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	f040 8090 	bne.w	800ac32 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800ab12:	4b4d      	ldr	r3, [pc, #308]	; (800ac48 <tcp_input+0x72c>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d041      	beq.n	800ab9e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800ab1a:	69fb      	ldr	r3, [r7, #28]
 800ab1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d006      	beq.n	800ab30 <tcp_input+0x614>
 800ab22:	4b50      	ldr	r3, [pc, #320]	; (800ac64 <tcp_input+0x748>)
 800ab24:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800ab28:	494f      	ldr	r1, [pc, #316]	; (800ac68 <tcp_input+0x74c>)
 800ab2a:	4850      	ldr	r0, [pc, #320]	; (800ac6c <tcp_input+0x750>)
 800ab2c:	f007 f8c4 	bl	8011cb8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800ab30:	69fb      	ldr	r3, [r7, #28]
 800ab32:	8b5b      	ldrh	r3, [r3, #26]
 800ab34:	f003 0310 	and.w	r3, r3, #16
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d008      	beq.n	800ab4e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800ab3c:	4b42      	ldr	r3, [pc, #264]	; (800ac48 <tcp_input+0x72c>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	4618      	mov	r0, r3
 800ab42:	f7fd fec3 	bl	80088cc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800ab46:	69f8      	ldr	r0, [r7, #28]
 800ab48:	f7fe fc48 	bl	80093dc <tcp_abort>
            goto aborted;
 800ab4c:	e091      	b.n	800ac72 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ab4e:	69fb      	ldr	r3, [r7, #28]
 800ab50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d00c      	beq.n	800ab72 <tcp_input+0x656>
 800ab58:	69fb      	ldr	r3, [r7, #28]
 800ab5a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ab5e:	69fb      	ldr	r3, [r7, #28]
 800ab60:	6918      	ldr	r0, [r3, #16]
 800ab62:	4b39      	ldr	r3, [pc, #228]	; (800ac48 <tcp_input+0x72c>)
 800ab64:	681a      	ldr	r2, [r3, #0]
 800ab66:	2300      	movs	r3, #0
 800ab68:	69f9      	ldr	r1, [r7, #28]
 800ab6a:	47a0      	blx	r4
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	74fb      	strb	r3, [r7, #19]
 800ab70:	e008      	b.n	800ab84 <tcp_input+0x668>
 800ab72:	4b35      	ldr	r3, [pc, #212]	; (800ac48 <tcp_input+0x72c>)
 800ab74:	681a      	ldr	r2, [r3, #0]
 800ab76:	2300      	movs	r3, #0
 800ab78:	69f9      	ldr	r1, [r7, #28]
 800ab7a:	2000      	movs	r0, #0
 800ab7c:	f7ff f95e 	bl	8009e3c <tcp_recv_null>
 800ab80:	4603      	mov	r3, r0
 800ab82:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800ab84:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ab88:	f113 0f0d 	cmn.w	r3, #13
 800ab8c:	d053      	beq.n	800ac36 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800ab8e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d003      	beq.n	800ab9e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800ab96:	4b2c      	ldr	r3, [pc, #176]	; (800ac48 <tcp_input+0x72c>)
 800ab98:	681a      	ldr	r2, [r3, #0]
 800ab9a:	69fb      	ldr	r3, [r7, #28]
 800ab9c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800ab9e:	4b2b      	ldr	r3, [pc, #172]	; (800ac4c <tcp_input+0x730>)
 800aba0:	781b      	ldrb	r3, [r3, #0]
 800aba2:	f003 0320 	and.w	r3, r3, #32
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d030      	beq.n	800ac0c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800abaa:	69fb      	ldr	r3, [r7, #28]
 800abac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d009      	beq.n	800abc6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800abb2:	69fb      	ldr	r3, [r7, #28]
 800abb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800abb6:	7b5a      	ldrb	r2, [r3, #13]
 800abb8:	69fb      	ldr	r3, [r7, #28]
 800abba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800abbc:	f042 0220 	orr.w	r2, r2, #32
 800abc0:	b2d2      	uxtb	r2, r2
 800abc2:	735a      	strb	r2, [r3, #13]
 800abc4:	e022      	b.n	800ac0c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800abc6:	69fb      	ldr	r3, [r7, #28]
 800abc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abca:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800abce:	d005      	beq.n	800abdc <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800abd0:	69fb      	ldr	r3, [r7, #28]
 800abd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abd4:	3301      	adds	r3, #1
 800abd6:	b29a      	uxth	r2, r3
 800abd8:	69fb      	ldr	r3, [r7, #28]
 800abda:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800abdc:	69fb      	ldr	r3, [r7, #28]
 800abde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d00b      	beq.n	800abfe <tcp_input+0x6e2>
 800abe6:	69fb      	ldr	r3, [r7, #28]
 800abe8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800abec:	69fb      	ldr	r3, [r7, #28]
 800abee:	6918      	ldr	r0, [r3, #16]
 800abf0:	2300      	movs	r3, #0
 800abf2:	2200      	movs	r2, #0
 800abf4:	69f9      	ldr	r1, [r7, #28]
 800abf6:	47a0      	blx	r4
 800abf8:	4603      	mov	r3, r0
 800abfa:	74fb      	strb	r3, [r7, #19]
 800abfc:	e001      	b.n	800ac02 <tcp_input+0x6e6>
 800abfe:	2300      	movs	r3, #0
 800ac00:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ac02:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ac06:	f113 0f0d 	cmn.w	r3, #13
 800ac0a:	d016      	beq.n	800ac3a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800ac0c:	4b13      	ldr	r3, [pc, #76]	; (800ac5c <tcp_input+0x740>)
 800ac0e:	2200      	movs	r2, #0
 800ac10:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800ac12:	69f8      	ldr	r0, [r7, #28]
 800ac14:	f000 f88e 	bl	800ad34 <tcp_input_delayed_close>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d128      	bne.n	800ac70 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800ac1e:	69f8      	ldr	r0, [r7, #28]
 800ac20:	f002 fac8 	bl	800d1b4 <tcp_output>
 800ac24:	e025      	b.n	800ac72 <tcp_input+0x756>
        goto aborted;
 800ac26:	bf00      	nop
 800ac28:	e023      	b.n	800ac72 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800ac2a:	bf00      	nop
 800ac2c:	e021      	b.n	800ac72 <tcp_input+0x756>
              goto aborted;
 800ac2e:	bf00      	nop
 800ac30:	e01f      	b.n	800ac72 <tcp_input+0x756>
          goto aborted;
 800ac32:	bf00      	nop
 800ac34:	e01d      	b.n	800ac72 <tcp_input+0x756>
            goto aborted;
 800ac36:	bf00      	nop
 800ac38:	e01b      	b.n	800ac72 <tcp_input+0x756>
              goto aborted;
 800ac3a:	bf00      	nop
 800ac3c:	e019      	b.n	800ac72 <tcp_input+0x756>
 800ac3e:	bf00      	nop
 800ac40:	2000a7e4 	.word	0x2000a7e4
 800ac44:	2000a7f4 	.word	0x2000a7f4
 800ac48:	2000a814 	.word	0x2000a814
 800ac4c:	2000a811 	.word	0x2000a811
 800ac50:	2000a80c 	.word	0x2000a80c
 800ac54:	2000a810 	.word	0x2000a810
 800ac58:	2000a80e 	.word	0x2000a80e
 800ac5c:	2000a818 	.word	0x2000a818
 800ac60:	2000a7d8 	.word	0x2000a7d8
 800ac64:	08014ed8 	.word	0x08014ed8
 800ac68:	0801508c 	.word	0x0801508c
 800ac6c:	08014f24 	.word	0x08014f24
          goto aborted;
 800ac70:	bf00      	nop
    tcp_input_pcb = NULL;
 800ac72:	4b27      	ldr	r3, [pc, #156]	; (800ad10 <tcp_input+0x7f4>)
 800ac74:	2200      	movs	r2, #0
 800ac76:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800ac78:	4b26      	ldr	r3, [pc, #152]	; (800ad14 <tcp_input+0x7f8>)
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800ac7e:	4b26      	ldr	r3, [pc, #152]	; (800ad18 <tcp_input+0x7fc>)
 800ac80:	685b      	ldr	r3, [r3, #4]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d03f      	beq.n	800ad06 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800ac86:	4b24      	ldr	r3, [pc, #144]	; (800ad18 <tcp_input+0x7fc>)
 800ac88:	685b      	ldr	r3, [r3, #4]
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f7fd fe1e 	bl	80088cc <pbuf_free>
      inseg.p = NULL;
 800ac90:	4b21      	ldr	r3, [pc, #132]	; (800ad18 <tcp_input+0x7fc>)
 800ac92:	2200      	movs	r2, #0
 800ac94:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800ac96:	e036      	b.n	800ad06 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800ac98:	4b20      	ldr	r3, [pc, #128]	; (800ad1c <tcp_input+0x800>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	899b      	ldrh	r3, [r3, #12]
 800ac9e:	b29b      	uxth	r3, r3
 800aca0:	4618      	mov	r0, r3
 800aca2:	f7fc fab5 	bl	8007210 <lwip_htons>
 800aca6:	4603      	mov	r3, r0
 800aca8:	b2db      	uxtb	r3, r3
 800acaa:	f003 0304 	and.w	r3, r3, #4
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d118      	bne.n	800ace4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800acb2:	4b1b      	ldr	r3, [pc, #108]	; (800ad20 <tcp_input+0x804>)
 800acb4:	6819      	ldr	r1, [r3, #0]
 800acb6:	4b1b      	ldr	r3, [pc, #108]	; (800ad24 <tcp_input+0x808>)
 800acb8:	881b      	ldrh	r3, [r3, #0]
 800acba:	461a      	mov	r2, r3
 800acbc:	4b1a      	ldr	r3, [pc, #104]	; (800ad28 <tcp_input+0x80c>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800acc2:	4b16      	ldr	r3, [pc, #88]	; (800ad1c <tcp_input+0x800>)
 800acc4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800acc6:	885b      	ldrh	r3, [r3, #2]
 800acc8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800acca:	4a14      	ldr	r2, [pc, #80]	; (800ad1c <tcp_input+0x800>)
 800accc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800acce:	8812      	ldrh	r2, [r2, #0]
 800acd0:	b292      	uxth	r2, r2
 800acd2:	9202      	str	r2, [sp, #8]
 800acd4:	9301      	str	r3, [sp, #4]
 800acd6:	4b15      	ldr	r3, [pc, #84]	; (800ad2c <tcp_input+0x810>)
 800acd8:	9300      	str	r3, [sp, #0]
 800acda:	4b15      	ldr	r3, [pc, #84]	; (800ad30 <tcp_input+0x814>)
 800acdc:	4602      	mov	r2, r0
 800acde:	2000      	movs	r0, #0
 800ace0:	f003 f81c 	bl	800dd1c <tcp_rst>
    pbuf_free(p);
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f7fd fdf1 	bl	80088cc <pbuf_free>
  return;
 800acea:	e00c      	b.n	800ad06 <tcp_input+0x7ea>
    goto dropped;
 800acec:	bf00      	nop
 800acee:	e006      	b.n	800acfe <tcp_input+0x7e2>
    goto dropped;
 800acf0:	bf00      	nop
 800acf2:	e004      	b.n	800acfe <tcp_input+0x7e2>
    goto dropped;
 800acf4:	bf00      	nop
 800acf6:	e002      	b.n	800acfe <tcp_input+0x7e2>
      goto dropped;
 800acf8:	bf00      	nop
 800acfa:	e000      	b.n	800acfe <tcp_input+0x7e2>
      goto dropped;
 800acfc:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f7fd fde4 	bl	80088cc <pbuf_free>
 800ad04:	e000      	b.n	800ad08 <tcp_input+0x7ec>
  return;
 800ad06:	bf00      	nop
}
 800ad08:	3724      	adds	r7, #36	; 0x24
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd90      	pop	{r4, r7, pc}
 800ad0e:	bf00      	nop
 800ad10:	2000a818 	.word	0x2000a818
 800ad14:	2000a814 	.word	0x2000a814
 800ad18:	2000a7e4 	.word	0x2000a7e4
 800ad1c:	2000a7f4 	.word	0x2000a7f4
 800ad20:	2000a808 	.word	0x2000a808
 800ad24:	2000a80e 	.word	0x2000a80e
 800ad28:	2000a804 	.word	0x2000a804
 800ad2c:	200050ac 	.word	0x200050ac
 800ad30:	200050b0 	.word	0x200050b0

0800ad34 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b082      	sub	sp, #8
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d106      	bne.n	800ad50 <tcp_input_delayed_close+0x1c>
 800ad42:	4b17      	ldr	r3, [pc, #92]	; (800ada0 <tcp_input_delayed_close+0x6c>)
 800ad44:	f240 225a 	movw	r2, #602	; 0x25a
 800ad48:	4916      	ldr	r1, [pc, #88]	; (800ada4 <tcp_input_delayed_close+0x70>)
 800ad4a:	4817      	ldr	r0, [pc, #92]	; (800ada8 <tcp_input_delayed_close+0x74>)
 800ad4c:	f006 ffb4 	bl	8011cb8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800ad50:	4b16      	ldr	r3, [pc, #88]	; (800adac <tcp_input_delayed_close+0x78>)
 800ad52:	781b      	ldrb	r3, [r3, #0]
 800ad54:	f003 0310 	and.w	r3, r3, #16
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d01c      	beq.n	800ad96 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	8b5b      	ldrh	r3, [r3, #26]
 800ad60:	f003 0310 	and.w	r3, r3, #16
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d10d      	bne.n	800ad84 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d008      	beq.n	800ad84 <tcp_input_delayed_close+0x50>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad78:	687a      	ldr	r2, [r7, #4]
 800ad7a:	6912      	ldr	r2, [r2, #16]
 800ad7c:	f06f 010e 	mvn.w	r1, #14
 800ad80:	4610      	mov	r0, r2
 800ad82:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ad84:	6879      	ldr	r1, [r7, #4]
 800ad86:	480a      	ldr	r0, [pc, #40]	; (800adb0 <tcp_input_delayed_close+0x7c>)
 800ad88:	f7ff fa50 	bl	800a22c <tcp_pcb_remove>
    tcp_free(pcb);
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f7fe f83d 	bl	8008e0c <tcp_free>
    return 1;
 800ad92:	2301      	movs	r3, #1
 800ad94:	e000      	b.n	800ad98 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800ad96:	2300      	movs	r3, #0
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	3708      	adds	r7, #8
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd80      	pop	{r7, pc}
 800ada0:	08014ed8 	.word	0x08014ed8
 800ada4:	080150a8 	.word	0x080150a8
 800ada8:	08014f24 	.word	0x08014f24
 800adac:	2000a811 	.word	0x2000a811
 800adb0:	2000a7d8 	.word	0x2000a7d8

0800adb4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800adb4:	b590      	push	{r4, r7, lr}
 800adb6:	b08b      	sub	sp, #44	; 0x2c
 800adb8:	af04      	add	r7, sp, #16
 800adba:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800adbc:	4b6f      	ldr	r3, [pc, #444]	; (800af7c <tcp_listen_input+0x1c8>)
 800adbe:	781b      	ldrb	r3, [r3, #0]
 800adc0:	f003 0304 	and.w	r3, r3, #4
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	f040 80d2 	bne.w	800af6e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d106      	bne.n	800adde <tcp_listen_input+0x2a>
 800add0:	4b6b      	ldr	r3, [pc, #428]	; (800af80 <tcp_listen_input+0x1cc>)
 800add2:	f240 2281 	movw	r2, #641	; 0x281
 800add6:	496b      	ldr	r1, [pc, #428]	; (800af84 <tcp_listen_input+0x1d0>)
 800add8:	486b      	ldr	r0, [pc, #428]	; (800af88 <tcp_listen_input+0x1d4>)
 800adda:	f006 ff6d 	bl	8011cb8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800adde:	4b67      	ldr	r3, [pc, #412]	; (800af7c <tcp_listen_input+0x1c8>)
 800ade0:	781b      	ldrb	r3, [r3, #0]
 800ade2:	f003 0310 	and.w	r3, r3, #16
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d019      	beq.n	800ae1e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800adea:	4b68      	ldr	r3, [pc, #416]	; (800af8c <tcp_listen_input+0x1d8>)
 800adec:	6819      	ldr	r1, [r3, #0]
 800adee:	4b68      	ldr	r3, [pc, #416]	; (800af90 <tcp_listen_input+0x1dc>)
 800adf0:	881b      	ldrh	r3, [r3, #0]
 800adf2:	461a      	mov	r2, r3
 800adf4:	4b67      	ldr	r3, [pc, #412]	; (800af94 <tcp_listen_input+0x1e0>)
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800adfa:	4b67      	ldr	r3, [pc, #412]	; (800af98 <tcp_listen_input+0x1e4>)
 800adfc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800adfe:	885b      	ldrh	r3, [r3, #2]
 800ae00:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ae02:	4a65      	ldr	r2, [pc, #404]	; (800af98 <tcp_listen_input+0x1e4>)
 800ae04:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ae06:	8812      	ldrh	r2, [r2, #0]
 800ae08:	b292      	uxth	r2, r2
 800ae0a:	9202      	str	r2, [sp, #8]
 800ae0c:	9301      	str	r3, [sp, #4]
 800ae0e:	4b63      	ldr	r3, [pc, #396]	; (800af9c <tcp_listen_input+0x1e8>)
 800ae10:	9300      	str	r3, [sp, #0]
 800ae12:	4b63      	ldr	r3, [pc, #396]	; (800afa0 <tcp_listen_input+0x1ec>)
 800ae14:	4602      	mov	r2, r0
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f002 ff80 	bl	800dd1c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800ae1c:	e0a9      	b.n	800af72 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800ae1e:	4b57      	ldr	r3, [pc, #348]	; (800af7c <tcp_listen_input+0x1c8>)
 800ae20:	781b      	ldrb	r3, [r3, #0]
 800ae22:	f003 0302 	and.w	r3, r3, #2
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	f000 80a3 	beq.w	800af72 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	7d5b      	ldrb	r3, [r3, #21]
 800ae30:	4618      	mov	r0, r3
 800ae32:	f7ff f927 	bl	800a084 <tcp_alloc>
 800ae36:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d111      	bne.n	800ae62 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	699b      	ldr	r3, [r3, #24]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d00a      	beq.n	800ae5c <tcp_listen_input+0xa8>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	699b      	ldr	r3, [r3, #24]
 800ae4a:	687a      	ldr	r2, [r7, #4]
 800ae4c:	6910      	ldr	r0, [r2, #16]
 800ae4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ae52:	2100      	movs	r1, #0
 800ae54:	4798      	blx	r3
 800ae56:	4603      	mov	r3, r0
 800ae58:	73bb      	strb	r3, [r7, #14]
      return;
 800ae5a:	e08b      	b.n	800af74 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ae5c:	23f0      	movs	r3, #240	; 0xf0
 800ae5e:	73bb      	strb	r3, [r7, #14]
      return;
 800ae60:	e088      	b.n	800af74 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ae62:	4b50      	ldr	r3, [pc, #320]	; (800afa4 <tcp_listen_input+0x1f0>)
 800ae64:	695a      	ldr	r2, [r3, #20]
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ae6a:	4b4e      	ldr	r3, [pc, #312]	; (800afa4 <tcp_listen_input+0x1f0>)
 800ae6c:	691a      	ldr	r2, [r3, #16]
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	8ada      	ldrh	r2, [r3, #22]
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ae7a:	4b47      	ldr	r3, [pc, #284]	; (800af98 <tcp_listen_input+0x1e4>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	881b      	ldrh	r3, [r3, #0]
 800ae80:	b29a      	uxth	r2, r3
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800ae86:	697b      	ldr	r3, [r7, #20]
 800ae88:	2203      	movs	r2, #3
 800ae8a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800ae8c:	4b41      	ldr	r3, [pc, #260]	; (800af94 <tcp_listen_input+0x1e0>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	1c5a      	adds	r2, r3, #1
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae9a:	697b      	ldr	r3, [r7, #20]
 800ae9c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800ae9e:	6978      	ldr	r0, [r7, #20]
 800aea0:	f7ff fa58 	bl	800a354 <tcp_next_iss>
 800aea4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	693a      	ldr	r2, [r7, #16]
 800aeaa:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	693a      	ldr	r2, [r7, #16]
 800aeb0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	693a      	ldr	r2, [r7, #16]
 800aeb6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	693a      	ldr	r2, [r7, #16]
 800aebc:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800aebe:	4b35      	ldr	r3, [pc, #212]	; (800af94 <tcp_listen_input+0x1e0>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	1e5a      	subs	r2, r3, #1
 800aec4:	697b      	ldr	r3, [r7, #20]
 800aec6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	691a      	ldr	r2, [r3, #16]
 800aecc:	697b      	ldr	r3, [r7, #20]
 800aece:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	687a      	ldr	r2, [r7, #4]
 800aed4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	7a5b      	ldrb	r3, [r3, #9]
 800aeda:	f003 030c 	and.w	r3, r3, #12
 800aede:	b2da      	uxtb	r2, r3
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	7a1a      	ldrb	r2, [r3, #8]
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800aeec:	4b2e      	ldr	r3, [pc, #184]	; (800afa8 <tcp_listen_input+0x1f4>)
 800aeee:	681a      	ldr	r2, [r3, #0]
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	60da      	str	r2, [r3, #12]
 800aef4:	4a2c      	ldr	r2, [pc, #176]	; (800afa8 <tcp_listen_input+0x1f4>)
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	6013      	str	r3, [r2, #0]
 800aefa:	f003 f8d1 	bl	800e0a0 <tcp_timer_needed>
 800aefe:	4b2b      	ldr	r3, [pc, #172]	; (800afac <tcp_listen_input+0x1f8>)
 800af00:	2201      	movs	r2, #1
 800af02:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800af04:	6978      	ldr	r0, [r7, #20]
 800af06:	f001 fd8f 	bl	800ca28 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800af0a:	4b23      	ldr	r3, [pc, #140]	; (800af98 <tcp_listen_input+0x1e4>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	89db      	ldrh	r3, [r3, #14]
 800af10:	b29a      	uxth	r2, r3
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	3304      	adds	r3, #4
 800af2c:	4618      	mov	r0, r3
 800af2e:	f004 fdfb 	bl	800fb28 <ip4_route>
 800af32:	4601      	mov	r1, r0
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	3304      	adds	r3, #4
 800af38:	461a      	mov	r2, r3
 800af3a:	4620      	mov	r0, r4
 800af3c:	f7ff fa30 	bl	800a3a0 <tcp_eff_send_mss_netif>
 800af40:	4603      	mov	r3, r0
 800af42:	461a      	mov	r2, r3
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800af48:	2112      	movs	r1, #18
 800af4a:	6978      	ldr	r0, [r7, #20]
 800af4c:	f002 f844 	bl	800cfd8 <tcp_enqueue_flags>
 800af50:	4603      	mov	r3, r0
 800af52:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800af54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d004      	beq.n	800af66 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800af5c:	2100      	movs	r1, #0
 800af5e:	6978      	ldr	r0, [r7, #20]
 800af60:	f7fe f97e 	bl	8009260 <tcp_abandon>
      return;
 800af64:	e006      	b.n	800af74 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800af66:	6978      	ldr	r0, [r7, #20]
 800af68:	f002 f924 	bl	800d1b4 <tcp_output>
  return;
 800af6c:	e001      	b.n	800af72 <tcp_listen_input+0x1be>
    return;
 800af6e:	bf00      	nop
 800af70:	e000      	b.n	800af74 <tcp_listen_input+0x1c0>
  return;
 800af72:	bf00      	nop
}
 800af74:	371c      	adds	r7, #28
 800af76:	46bd      	mov	sp, r7
 800af78:	bd90      	pop	{r4, r7, pc}
 800af7a:	bf00      	nop
 800af7c:	2000a810 	.word	0x2000a810
 800af80:	08014ed8 	.word	0x08014ed8
 800af84:	080150d0 	.word	0x080150d0
 800af88:	08014f24 	.word	0x08014f24
 800af8c:	2000a808 	.word	0x2000a808
 800af90:	2000a80e 	.word	0x2000a80e
 800af94:	2000a804 	.word	0x2000a804
 800af98:	2000a7f4 	.word	0x2000a7f4
 800af9c:	200050ac 	.word	0x200050ac
 800afa0:	200050b0 	.word	0x200050b0
 800afa4:	2000509c 	.word	0x2000509c
 800afa8:	2000a7d8 	.word	0x2000a7d8
 800afac:	2000a7e0 	.word	0x2000a7e0

0800afb0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b086      	sub	sp, #24
 800afb4:	af04      	add	r7, sp, #16
 800afb6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800afb8:	4b2f      	ldr	r3, [pc, #188]	; (800b078 <tcp_timewait_input+0xc8>)
 800afba:	781b      	ldrb	r3, [r3, #0]
 800afbc:	f003 0304 	and.w	r3, r3, #4
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d153      	bne.n	800b06c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d106      	bne.n	800afd8 <tcp_timewait_input+0x28>
 800afca:	4b2c      	ldr	r3, [pc, #176]	; (800b07c <tcp_timewait_input+0xcc>)
 800afcc:	f240 22ee 	movw	r2, #750	; 0x2ee
 800afd0:	492b      	ldr	r1, [pc, #172]	; (800b080 <tcp_timewait_input+0xd0>)
 800afd2:	482c      	ldr	r0, [pc, #176]	; (800b084 <tcp_timewait_input+0xd4>)
 800afd4:	f006 fe70 	bl	8011cb8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800afd8:	4b27      	ldr	r3, [pc, #156]	; (800b078 <tcp_timewait_input+0xc8>)
 800afda:	781b      	ldrb	r3, [r3, #0]
 800afdc:	f003 0302 	and.w	r3, r3, #2
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d02a      	beq.n	800b03a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800afe4:	4b28      	ldr	r3, [pc, #160]	; (800b088 <tcp_timewait_input+0xd8>)
 800afe6:	681a      	ldr	r2, [r3, #0]
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afec:	1ad3      	subs	r3, r2, r3
 800afee:	2b00      	cmp	r3, #0
 800aff0:	db2d      	blt.n	800b04e <tcp_timewait_input+0x9e>
 800aff2:	4b25      	ldr	r3, [pc, #148]	; (800b088 <tcp_timewait_input+0xd8>)
 800aff4:	681a      	ldr	r2, [r3, #0]
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800affa:	6879      	ldr	r1, [r7, #4]
 800affc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800affe:	440b      	add	r3, r1
 800b000:	1ad3      	subs	r3, r2, r3
 800b002:	2b00      	cmp	r3, #0
 800b004:	dc23      	bgt.n	800b04e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b006:	4b21      	ldr	r3, [pc, #132]	; (800b08c <tcp_timewait_input+0xdc>)
 800b008:	6819      	ldr	r1, [r3, #0]
 800b00a:	4b21      	ldr	r3, [pc, #132]	; (800b090 <tcp_timewait_input+0xe0>)
 800b00c:	881b      	ldrh	r3, [r3, #0]
 800b00e:	461a      	mov	r2, r3
 800b010:	4b1d      	ldr	r3, [pc, #116]	; (800b088 <tcp_timewait_input+0xd8>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b016:	4b1f      	ldr	r3, [pc, #124]	; (800b094 <tcp_timewait_input+0xe4>)
 800b018:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b01a:	885b      	ldrh	r3, [r3, #2]
 800b01c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b01e:	4a1d      	ldr	r2, [pc, #116]	; (800b094 <tcp_timewait_input+0xe4>)
 800b020:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b022:	8812      	ldrh	r2, [r2, #0]
 800b024:	b292      	uxth	r2, r2
 800b026:	9202      	str	r2, [sp, #8]
 800b028:	9301      	str	r3, [sp, #4]
 800b02a:	4b1b      	ldr	r3, [pc, #108]	; (800b098 <tcp_timewait_input+0xe8>)
 800b02c:	9300      	str	r3, [sp, #0]
 800b02e:	4b1b      	ldr	r3, [pc, #108]	; (800b09c <tcp_timewait_input+0xec>)
 800b030:	4602      	mov	r2, r0
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f002 fe72 	bl	800dd1c <tcp_rst>
      return;
 800b038:	e01b      	b.n	800b072 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800b03a:	4b0f      	ldr	r3, [pc, #60]	; (800b078 <tcp_timewait_input+0xc8>)
 800b03c:	781b      	ldrb	r3, [r3, #0]
 800b03e:	f003 0301 	and.w	r3, r3, #1
 800b042:	2b00      	cmp	r3, #0
 800b044:	d003      	beq.n	800b04e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800b046:	4b16      	ldr	r3, [pc, #88]	; (800b0a0 <tcp_timewait_input+0xf0>)
 800b048:	681a      	ldr	r2, [r3, #0]
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800b04e:	4b10      	ldr	r3, [pc, #64]	; (800b090 <tcp_timewait_input+0xe0>)
 800b050:	881b      	ldrh	r3, [r3, #0]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d00c      	beq.n	800b070 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	8b5b      	ldrh	r3, [r3, #26]
 800b05a:	f043 0302 	orr.w	r3, r3, #2
 800b05e:	b29a      	uxth	r2, r3
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f002 f8a5 	bl	800d1b4 <tcp_output>
  }
  return;
 800b06a:	e001      	b.n	800b070 <tcp_timewait_input+0xc0>
    return;
 800b06c:	bf00      	nop
 800b06e:	e000      	b.n	800b072 <tcp_timewait_input+0xc2>
  return;
 800b070:	bf00      	nop
}
 800b072:	3708      	adds	r7, #8
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}
 800b078:	2000a810 	.word	0x2000a810
 800b07c:	08014ed8 	.word	0x08014ed8
 800b080:	080150f0 	.word	0x080150f0
 800b084:	08014f24 	.word	0x08014f24
 800b088:	2000a804 	.word	0x2000a804
 800b08c:	2000a808 	.word	0x2000a808
 800b090:	2000a80e 	.word	0x2000a80e
 800b094:	2000a7f4 	.word	0x2000a7f4
 800b098:	200050ac 	.word	0x200050ac
 800b09c:	200050b0 	.word	0x200050b0
 800b0a0:	2000a7cc 	.word	0x2000a7cc

0800b0a4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800b0a4:	b590      	push	{r4, r7, lr}
 800b0a6:	b08d      	sub	sp, #52	; 0x34
 800b0a8:	af04      	add	r7, sp, #16
 800b0aa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d106      	bne.n	800b0c8 <tcp_process+0x24>
 800b0ba:	4b9d      	ldr	r3, [pc, #628]	; (800b330 <tcp_process+0x28c>)
 800b0bc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800b0c0:	499c      	ldr	r1, [pc, #624]	; (800b334 <tcp_process+0x290>)
 800b0c2:	489d      	ldr	r0, [pc, #628]	; (800b338 <tcp_process+0x294>)
 800b0c4:	f006 fdf8 	bl	8011cb8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800b0c8:	4b9c      	ldr	r3, [pc, #624]	; (800b33c <tcp_process+0x298>)
 800b0ca:	781b      	ldrb	r3, [r3, #0]
 800b0cc:	f003 0304 	and.w	r3, r3, #4
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d04e      	beq.n	800b172 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	7d1b      	ldrb	r3, [r3, #20]
 800b0d8:	2b02      	cmp	r3, #2
 800b0da:	d108      	bne.n	800b0ee <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b0e0:	4b97      	ldr	r3, [pc, #604]	; (800b340 <tcp_process+0x29c>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	d123      	bne.n	800b130 <tcp_process+0x8c>
        acceptable = 1;
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	76fb      	strb	r3, [r7, #27]
 800b0ec:	e020      	b.n	800b130 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b0f2:	4b94      	ldr	r3, [pc, #592]	; (800b344 <tcp_process+0x2a0>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	429a      	cmp	r2, r3
 800b0f8:	d102      	bne.n	800b100 <tcp_process+0x5c>
        acceptable = 1;
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	76fb      	strb	r3, [r7, #27]
 800b0fe:	e017      	b.n	800b130 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b100:	4b90      	ldr	r3, [pc, #576]	; (800b344 <tcp_process+0x2a0>)
 800b102:	681a      	ldr	r2, [r3, #0]
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b108:	1ad3      	subs	r3, r2, r3
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	db10      	blt.n	800b130 <tcp_process+0x8c>
 800b10e:	4b8d      	ldr	r3, [pc, #564]	; (800b344 <tcp_process+0x2a0>)
 800b110:	681a      	ldr	r2, [r3, #0]
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b116:	6879      	ldr	r1, [r7, #4]
 800b118:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b11a:	440b      	add	r3, r1
 800b11c:	1ad3      	subs	r3, r2, r3
 800b11e:	2b00      	cmp	r3, #0
 800b120:	dc06      	bgt.n	800b130 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	8b5b      	ldrh	r3, [r3, #26]
 800b126:	f043 0302 	orr.w	r3, r3, #2
 800b12a:	b29a      	uxth	r2, r3
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800b130:	7efb      	ldrb	r3, [r7, #27]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d01b      	beq.n	800b16e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	7d1b      	ldrb	r3, [r3, #20]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d106      	bne.n	800b14c <tcp_process+0xa8>
 800b13e:	4b7c      	ldr	r3, [pc, #496]	; (800b330 <tcp_process+0x28c>)
 800b140:	f44f 724e 	mov.w	r2, #824	; 0x338
 800b144:	4980      	ldr	r1, [pc, #512]	; (800b348 <tcp_process+0x2a4>)
 800b146:	487c      	ldr	r0, [pc, #496]	; (800b338 <tcp_process+0x294>)
 800b148:	f006 fdb6 	bl	8011cb8 <iprintf>
      recv_flags |= TF_RESET;
 800b14c:	4b7f      	ldr	r3, [pc, #508]	; (800b34c <tcp_process+0x2a8>)
 800b14e:	781b      	ldrb	r3, [r3, #0]
 800b150:	f043 0308 	orr.w	r3, r3, #8
 800b154:	b2da      	uxtb	r2, r3
 800b156:	4b7d      	ldr	r3, [pc, #500]	; (800b34c <tcp_process+0x2a8>)
 800b158:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	8b5b      	ldrh	r3, [r3, #26]
 800b15e:	f023 0301 	bic.w	r3, r3, #1
 800b162:	b29a      	uxth	r2, r3
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800b168:	f06f 030d 	mvn.w	r3, #13
 800b16c:	e37a      	b.n	800b864 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800b16e:	2300      	movs	r3, #0
 800b170:	e378      	b.n	800b864 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800b172:	4b72      	ldr	r3, [pc, #456]	; (800b33c <tcp_process+0x298>)
 800b174:	781b      	ldrb	r3, [r3, #0]
 800b176:	f003 0302 	and.w	r3, r3, #2
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d010      	beq.n	800b1a0 <tcp_process+0xfc>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	7d1b      	ldrb	r3, [r3, #20]
 800b182:	2b02      	cmp	r3, #2
 800b184:	d00c      	beq.n	800b1a0 <tcp_process+0xfc>
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	7d1b      	ldrb	r3, [r3, #20]
 800b18a:	2b03      	cmp	r3, #3
 800b18c:	d008      	beq.n	800b1a0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	8b5b      	ldrh	r3, [r3, #26]
 800b192:	f043 0302 	orr.w	r3, r3, #2
 800b196:	b29a      	uxth	r2, r3
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800b19c:	2300      	movs	r3, #0
 800b19e:	e361      	b.n	800b864 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	8b5b      	ldrh	r3, [r3, #26]
 800b1a4:	f003 0310 	and.w	r3, r3, #16
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d103      	bne.n	800b1b4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800b1ac:	4b68      	ldr	r3, [pc, #416]	; (800b350 <tcp_process+0x2ac>)
 800b1ae:	681a      	ldr	r2, [r3, #0]
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f001 fc2f 	bl	800ca28 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	7d1b      	ldrb	r3, [r3, #20]
 800b1ce:	3b02      	subs	r3, #2
 800b1d0:	2b07      	cmp	r3, #7
 800b1d2:	f200 8337 	bhi.w	800b844 <tcp_process+0x7a0>
 800b1d6:	a201      	add	r2, pc, #4	; (adr r2, 800b1dc <tcp_process+0x138>)
 800b1d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1dc:	0800b1fd 	.word	0x0800b1fd
 800b1e0:	0800b42d 	.word	0x0800b42d
 800b1e4:	0800b5a5 	.word	0x0800b5a5
 800b1e8:	0800b5cf 	.word	0x0800b5cf
 800b1ec:	0800b6f3 	.word	0x0800b6f3
 800b1f0:	0800b5a5 	.word	0x0800b5a5
 800b1f4:	0800b77f 	.word	0x0800b77f
 800b1f8:	0800b80f 	.word	0x0800b80f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800b1fc:	4b4f      	ldr	r3, [pc, #316]	; (800b33c <tcp_process+0x298>)
 800b1fe:	781b      	ldrb	r3, [r3, #0]
 800b200:	f003 0310 	and.w	r3, r3, #16
 800b204:	2b00      	cmp	r3, #0
 800b206:	f000 80e4 	beq.w	800b3d2 <tcp_process+0x32e>
 800b20a:	4b4c      	ldr	r3, [pc, #304]	; (800b33c <tcp_process+0x298>)
 800b20c:	781b      	ldrb	r3, [r3, #0]
 800b20e:	f003 0302 	and.w	r3, r3, #2
 800b212:	2b00      	cmp	r3, #0
 800b214:	f000 80dd 	beq.w	800b3d2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b21c:	1c5a      	adds	r2, r3, #1
 800b21e:	4b48      	ldr	r3, [pc, #288]	; (800b340 <tcp_process+0x29c>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	429a      	cmp	r2, r3
 800b224:	f040 80d5 	bne.w	800b3d2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800b228:	4b46      	ldr	r3, [pc, #280]	; (800b344 <tcp_process+0x2a0>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	1c5a      	adds	r2, r3, #1
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800b23a:	4b41      	ldr	r3, [pc, #260]	; (800b340 <tcp_process+0x29c>)
 800b23c:	681a      	ldr	r2, [r3, #0]
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800b242:	4b44      	ldr	r3, [pc, #272]	; (800b354 <tcp_process+0x2b0>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	89db      	ldrh	r3, [r3, #14]
 800b248:	b29a      	uxth	r2, r3
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800b25c:	4b39      	ldr	r3, [pc, #228]	; (800b344 <tcp_process+0x2a0>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	1e5a      	subs	r2, r3, #1
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2204      	movs	r2, #4
 800b26a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	3304      	adds	r3, #4
 800b274:	4618      	mov	r0, r3
 800b276:	f004 fc57 	bl	800fb28 <ip4_route>
 800b27a:	4601      	mov	r1, r0
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	3304      	adds	r3, #4
 800b280:	461a      	mov	r2, r3
 800b282:	4620      	mov	r0, r4
 800b284:	f7ff f88c 	bl	800a3a0 <tcp_eff_send_mss_netif>
 800b288:	4603      	mov	r3, r0
 800b28a:	461a      	mov	r2, r3
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b294:	009a      	lsls	r2, r3, #2
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b29a:	005b      	lsls	r3, r3, #1
 800b29c:	f241 111c 	movw	r1, #4380	; 0x111c
 800b2a0:	428b      	cmp	r3, r1
 800b2a2:	bf38      	it	cc
 800b2a4:	460b      	movcc	r3, r1
 800b2a6:	429a      	cmp	r2, r3
 800b2a8:	d204      	bcs.n	800b2b4 <tcp_process+0x210>
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b2ae:	009b      	lsls	r3, r3, #2
 800b2b0:	b29b      	uxth	r3, r3
 800b2b2:	e00d      	b.n	800b2d0 <tcp_process+0x22c>
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b2b8:	005b      	lsls	r3, r3, #1
 800b2ba:	f241 121c 	movw	r2, #4380	; 0x111c
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	d904      	bls.n	800b2cc <tcp_process+0x228>
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b2c6:	005b      	lsls	r3, r3, #1
 800b2c8:	b29b      	uxth	r3, r3
 800b2ca:	e001      	b.n	800b2d0 <tcp_process+0x22c>
 800b2cc:	f241 131c 	movw	r3, #4380	; 0x111c
 800b2d0:	687a      	ldr	r2, [r7, #4]
 800b2d2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d106      	bne.n	800b2ee <tcp_process+0x24a>
 800b2e0:	4b13      	ldr	r3, [pc, #76]	; (800b330 <tcp_process+0x28c>)
 800b2e2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800b2e6:	491c      	ldr	r1, [pc, #112]	; (800b358 <tcp_process+0x2b4>)
 800b2e8:	4813      	ldr	r0, [pc, #76]	; (800b338 <tcp_process+0x294>)
 800b2ea:	f006 fce5 	bl	8011cb8 <iprintf>
        --pcb->snd_queuelen;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b2f4:	3b01      	subs	r3, #1
 800b2f6:	b29a      	uxth	r2, r3
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b302:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800b304:	69fb      	ldr	r3, [r7, #28]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d12a      	bne.n	800b360 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b30e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800b310:	69fb      	ldr	r3, [r7, #28]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d106      	bne.n	800b324 <tcp_process+0x280>
 800b316:	4b06      	ldr	r3, [pc, #24]	; (800b330 <tcp_process+0x28c>)
 800b318:	f44f 725d 	mov.w	r2, #884	; 0x374
 800b31c:	490f      	ldr	r1, [pc, #60]	; (800b35c <tcp_process+0x2b8>)
 800b31e:	4806      	ldr	r0, [pc, #24]	; (800b338 <tcp_process+0x294>)
 800b320:	f006 fcca 	bl	8011cb8 <iprintf>
          pcb->unsent = rseg->next;
 800b324:	69fb      	ldr	r3, [r7, #28]
 800b326:	681a      	ldr	r2, [r3, #0]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	66da      	str	r2, [r3, #108]	; 0x6c
 800b32c:	e01c      	b.n	800b368 <tcp_process+0x2c4>
 800b32e:	bf00      	nop
 800b330:	08014ed8 	.word	0x08014ed8
 800b334:	08015110 	.word	0x08015110
 800b338:	08014f24 	.word	0x08014f24
 800b33c:	2000a810 	.word	0x2000a810
 800b340:	2000a808 	.word	0x2000a808
 800b344:	2000a804 	.word	0x2000a804
 800b348:	0801512c 	.word	0x0801512c
 800b34c:	2000a811 	.word	0x2000a811
 800b350:	2000a7cc 	.word	0x2000a7cc
 800b354:	2000a7f4 	.word	0x2000a7f4
 800b358:	0801514c 	.word	0x0801514c
 800b35c:	08015164 	.word	0x08015164
        } else {
          pcb->unacked = rseg->next;
 800b360:	69fb      	ldr	r3, [r7, #28]
 800b362:	681a      	ldr	r2, [r3, #0]
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800b368:	69f8      	ldr	r0, [r7, #28]
 800b36a:	f7fe fd22 	bl	8009db2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b372:	2b00      	cmp	r3, #0
 800b374:	d104      	bne.n	800b380 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b37c:	861a      	strh	r2, [r3, #48]	; 0x30
 800b37e:	e006      	b.n	800b38e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2200      	movs	r2, #0
 800b384:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2200      	movs	r2, #0
 800b38a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b394:	2b00      	cmp	r3, #0
 800b396:	d00a      	beq.n	800b3ae <tcp_process+0x30a>
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b39e:	687a      	ldr	r2, [r7, #4]
 800b3a0:	6910      	ldr	r0, [r2, #16]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	6879      	ldr	r1, [r7, #4]
 800b3a6:	4798      	blx	r3
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	76bb      	strb	r3, [r7, #26]
 800b3ac:	e001      	b.n	800b3b2 <tcp_process+0x30e>
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800b3b2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b3b6:	f113 0f0d 	cmn.w	r3, #13
 800b3ba:	d102      	bne.n	800b3c2 <tcp_process+0x31e>
          return ERR_ABRT;
 800b3bc:	f06f 030c 	mvn.w	r3, #12
 800b3c0:	e250      	b.n	800b864 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	8b5b      	ldrh	r3, [r3, #26]
 800b3c6:	f043 0302 	orr.w	r3, r3, #2
 800b3ca:	b29a      	uxth	r2, r3
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800b3d0:	e23a      	b.n	800b848 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800b3d2:	4b98      	ldr	r3, [pc, #608]	; (800b634 <tcp_process+0x590>)
 800b3d4:	781b      	ldrb	r3, [r3, #0]
 800b3d6:	f003 0310 	and.w	r3, r3, #16
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	f000 8234 	beq.w	800b848 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b3e0:	4b95      	ldr	r3, [pc, #596]	; (800b638 <tcp_process+0x594>)
 800b3e2:	6819      	ldr	r1, [r3, #0]
 800b3e4:	4b95      	ldr	r3, [pc, #596]	; (800b63c <tcp_process+0x598>)
 800b3e6:	881b      	ldrh	r3, [r3, #0]
 800b3e8:	461a      	mov	r2, r3
 800b3ea:	4b95      	ldr	r3, [pc, #596]	; (800b640 <tcp_process+0x59c>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b3f0:	4b94      	ldr	r3, [pc, #592]	; (800b644 <tcp_process+0x5a0>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b3f4:	885b      	ldrh	r3, [r3, #2]
 800b3f6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b3f8:	4a92      	ldr	r2, [pc, #584]	; (800b644 <tcp_process+0x5a0>)
 800b3fa:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b3fc:	8812      	ldrh	r2, [r2, #0]
 800b3fe:	b292      	uxth	r2, r2
 800b400:	9202      	str	r2, [sp, #8]
 800b402:	9301      	str	r3, [sp, #4]
 800b404:	4b90      	ldr	r3, [pc, #576]	; (800b648 <tcp_process+0x5a4>)
 800b406:	9300      	str	r3, [sp, #0]
 800b408:	4b90      	ldr	r3, [pc, #576]	; (800b64c <tcp_process+0x5a8>)
 800b40a:	4602      	mov	r2, r0
 800b40c:	6878      	ldr	r0, [r7, #4]
 800b40e:	f002 fc85 	bl	800dd1c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b418:	2b05      	cmp	r3, #5
 800b41a:	f200 8215 	bhi.w	800b848 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2200      	movs	r2, #0
 800b422:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f002 fa51 	bl	800d8cc <tcp_rexmit_rto>
      break;
 800b42a:	e20d      	b.n	800b848 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800b42c:	4b81      	ldr	r3, [pc, #516]	; (800b634 <tcp_process+0x590>)
 800b42e:	781b      	ldrb	r3, [r3, #0]
 800b430:	f003 0310 	and.w	r3, r3, #16
 800b434:	2b00      	cmp	r3, #0
 800b436:	f000 80a1 	beq.w	800b57c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b43a:	4b7f      	ldr	r3, [pc, #508]	; (800b638 <tcp_process+0x594>)
 800b43c:	681a      	ldr	r2, [r3, #0]
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b442:	1ad3      	subs	r3, r2, r3
 800b444:	3b01      	subs	r3, #1
 800b446:	2b00      	cmp	r3, #0
 800b448:	db7e      	blt.n	800b548 <tcp_process+0x4a4>
 800b44a:	4b7b      	ldr	r3, [pc, #492]	; (800b638 <tcp_process+0x594>)
 800b44c:	681a      	ldr	r2, [r3, #0]
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b452:	1ad3      	subs	r3, r2, r3
 800b454:	2b00      	cmp	r3, #0
 800b456:	dc77      	bgt.n	800b548 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2204      	movs	r2, #4
 800b45c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b462:	2b00      	cmp	r3, #0
 800b464:	d102      	bne.n	800b46c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800b466:	23fa      	movs	r3, #250	; 0xfa
 800b468:	76bb      	strb	r3, [r7, #26]
 800b46a:	e01d      	b.n	800b4a8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b470:	699b      	ldr	r3, [r3, #24]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d106      	bne.n	800b484 <tcp_process+0x3e0>
 800b476:	4b76      	ldr	r3, [pc, #472]	; (800b650 <tcp_process+0x5ac>)
 800b478:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800b47c:	4975      	ldr	r1, [pc, #468]	; (800b654 <tcp_process+0x5b0>)
 800b47e:	4876      	ldr	r0, [pc, #472]	; (800b658 <tcp_process+0x5b4>)
 800b480:	f006 fc1a 	bl	8011cb8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b488:	699b      	ldr	r3, [r3, #24]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d00a      	beq.n	800b4a4 <tcp_process+0x400>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b492:	699b      	ldr	r3, [r3, #24]
 800b494:	687a      	ldr	r2, [r7, #4]
 800b496:	6910      	ldr	r0, [r2, #16]
 800b498:	2200      	movs	r2, #0
 800b49a:	6879      	ldr	r1, [r7, #4]
 800b49c:	4798      	blx	r3
 800b49e:	4603      	mov	r3, r0
 800b4a0:	76bb      	strb	r3, [r7, #26]
 800b4a2:	e001      	b.n	800b4a8 <tcp_process+0x404>
 800b4a4:	23f0      	movs	r3, #240	; 0xf0
 800b4a6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800b4a8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d00a      	beq.n	800b4c6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800b4b0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b4b4:	f113 0f0d 	cmn.w	r3, #13
 800b4b8:	d002      	beq.n	800b4c0 <tcp_process+0x41c>
              tcp_abort(pcb);
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f7fd ff8e 	bl	80093dc <tcp_abort>
            }
            return ERR_ABRT;
 800b4c0:	f06f 030c 	mvn.w	r3, #12
 800b4c4:	e1ce      	b.n	800b864 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f000 fae0 	bl	800ba8c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800b4cc:	4b63      	ldr	r3, [pc, #396]	; (800b65c <tcp_process+0x5b8>)
 800b4ce:	881b      	ldrh	r3, [r3, #0]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d005      	beq.n	800b4e0 <tcp_process+0x43c>
            recv_acked--;
 800b4d4:	4b61      	ldr	r3, [pc, #388]	; (800b65c <tcp_process+0x5b8>)
 800b4d6:	881b      	ldrh	r3, [r3, #0]
 800b4d8:	3b01      	subs	r3, #1
 800b4da:	b29a      	uxth	r2, r3
 800b4dc:	4b5f      	ldr	r3, [pc, #380]	; (800b65c <tcp_process+0x5b8>)
 800b4de:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b4e4:	009a      	lsls	r2, r3, #2
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b4ea:	005b      	lsls	r3, r3, #1
 800b4ec:	f241 111c 	movw	r1, #4380	; 0x111c
 800b4f0:	428b      	cmp	r3, r1
 800b4f2:	bf38      	it	cc
 800b4f4:	460b      	movcc	r3, r1
 800b4f6:	429a      	cmp	r2, r3
 800b4f8:	d204      	bcs.n	800b504 <tcp_process+0x460>
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b4fe:	009b      	lsls	r3, r3, #2
 800b500:	b29b      	uxth	r3, r3
 800b502:	e00d      	b.n	800b520 <tcp_process+0x47c>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b508:	005b      	lsls	r3, r3, #1
 800b50a:	f241 121c 	movw	r2, #4380	; 0x111c
 800b50e:	4293      	cmp	r3, r2
 800b510:	d904      	bls.n	800b51c <tcp_process+0x478>
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b516:	005b      	lsls	r3, r3, #1
 800b518:	b29b      	uxth	r3, r3
 800b51a:	e001      	b.n	800b520 <tcp_process+0x47c>
 800b51c:	f241 131c 	movw	r3, #4380	; 0x111c
 800b520:	687a      	ldr	r2, [r7, #4]
 800b522:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800b526:	4b4e      	ldr	r3, [pc, #312]	; (800b660 <tcp_process+0x5bc>)
 800b528:	781b      	ldrb	r3, [r3, #0]
 800b52a:	f003 0320 	and.w	r3, r3, #32
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d037      	beq.n	800b5a2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	8b5b      	ldrh	r3, [r3, #26]
 800b536:	f043 0302 	orr.w	r3, r3, #2
 800b53a:	b29a      	uxth	r2, r3
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2207      	movs	r2, #7
 800b544:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800b546:	e02c      	b.n	800b5a2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b548:	4b3b      	ldr	r3, [pc, #236]	; (800b638 <tcp_process+0x594>)
 800b54a:	6819      	ldr	r1, [r3, #0]
 800b54c:	4b3b      	ldr	r3, [pc, #236]	; (800b63c <tcp_process+0x598>)
 800b54e:	881b      	ldrh	r3, [r3, #0]
 800b550:	461a      	mov	r2, r3
 800b552:	4b3b      	ldr	r3, [pc, #236]	; (800b640 <tcp_process+0x59c>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b558:	4b3a      	ldr	r3, [pc, #232]	; (800b644 <tcp_process+0x5a0>)
 800b55a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b55c:	885b      	ldrh	r3, [r3, #2]
 800b55e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b560:	4a38      	ldr	r2, [pc, #224]	; (800b644 <tcp_process+0x5a0>)
 800b562:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b564:	8812      	ldrh	r2, [r2, #0]
 800b566:	b292      	uxth	r2, r2
 800b568:	9202      	str	r2, [sp, #8]
 800b56a:	9301      	str	r3, [sp, #4]
 800b56c:	4b36      	ldr	r3, [pc, #216]	; (800b648 <tcp_process+0x5a4>)
 800b56e:	9300      	str	r3, [sp, #0]
 800b570:	4b36      	ldr	r3, [pc, #216]	; (800b64c <tcp_process+0x5a8>)
 800b572:	4602      	mov	r2, r0
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f002 fbd1 	bl	800dd1c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800b57a:	e167      	b.n	800b84c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800b57c:	4b2d      	ldr	r3, [pc, #180]	; (800b634 <tcp_process+0x590>)
 800b57e:	781b      	ldrb	r3, [r3, #0]
 800b580:	f003 0302 	and.w	r3, r3, #2
 800b584:	2b00      	cmp	r3, #0
 800b586:	f000 8161 	beq.w	800b84c <tcp_process+0x7a8>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b58e:	1e5a      	subs	r2, r3, #1
 800b590:	4b2b      	ldr	r3, [pc, #172]	; (800b640 <tcp_process+0x59c>)
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	429a      	cmp	r2, r3
 800b596:	f040 8159 	bne.w	800b84c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f002 f9b8 	bl	800d910 <tcp_rexmit>
      break;
 800b5a0:	e154      	b.n	800b84c <tcp_process+0x7a8>
 800b5a2:	e153      	b.n	800b84c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f000 fa71 	bl	800ba8c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800b5aa:	4b2d      	ldr	r3, [pc, #180]	; (800b660 <tcp_process+0x5bc>)
 800b5ac:	781b      	ldrb	r3, [r3, #0]
 800b5ae:	f003 0320 	and.w	r3, r3, #32
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	f000 814c 	beq.w	800b850 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	8b5b      	ldrh	r3, [r3, #26]
 800b5bc:	f043 0302 	orr.w	r3, r3, #2
 800b5c0:	b29a      	uxth	r2, r3
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2207      	movs	r2, #7
 800b5ca:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b5cc:	e140      	b.n	800b850 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f000 fa5c 	bl	800ba8c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b5d4:	4b22      	ldr	r3, [pc, #136]	; (800b660 <tcp_process+0x5bc>)
 800b5d6:	781b      	ldrb	r3, [r3, #0]
 800b5d8:	f003 0320 	and.w	r3, r3, #32
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d071      	beq.n	800b6c4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b5e0:	4b14      	ldr	r3, [pc, #80]	; (800b634 <tcp_process+0x590>)
 800b5e2:	781b      	ldrb	r3, [r3, #0]
 800b5e4:	f003 0310 	and.w	r3, r3, #16
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d060      	beq.n	800b6ae <tcp_process+0x60a>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b5f0:	4b11      	ldr	r3, [pc, #68]	; (800b638 <tcp_process+0x594>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	429a      	cmp	r2, r3
 800b5f6:	d15a      	bne.n	800b6ae <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d156      	bne.n	800b6ae <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	8b5b      	ldrh	r3, [r3, #26]
 800b604:	f043 0302 	orr.w	r3, r3, #2
 800b608:	b29a      	uxth	r2, r3
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f7fe fdbc 	bl	800a18c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800b614:	4b13      	ldr	r3, [pc, #76]	; (800b664 <tcp_process+0x5c0>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	687a      	ldr	r2, [r7, #4]
 800b61a:	429a      	cmp	r2, r3
 800b61c:	d105      	bne.n	800b62a <tcp_process+0x586>
 800b61e:	4b11      	ldr	r3, [pc, #68]	; (800b664 <tcp_process+0x5c0>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	68db      	ldr	r3, [r3, #12]
 800b624:	4a0f      	ldr	r2, [pc, #60]	; (800b664 <tcp_process+0x5c0>)
 800b626:	6013      	str	r3, [r2, #0]
 800b628:	e02e      	b.n	800b688 <tcp_process+0x5e4>
 800b62a:	4b0e      	ldr	r3, [pc, #56]	; (800b664 <tcp_process+0x5c0>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	617b      	str	r3, [r7, #20]
 800b630:	e027      	b.n	800b682 <tcp_process+0x5de>
 800b632:	bf00      	nop
 800b634:	2000a810 	.word	0x2000a810
 800b638:	2000a808 	.word	0x2000a808
 800b63c:	2000a80e 	.word	0x2000a80e
 800b640:	2000a804 	.word	0x2000a804
 800b644:	2000a7f4 	.word	0x2000a7f4
 800b648:	200050ac 	.word	0x200050ac
 800b64c:	200050b0 	.word	0x200050b0
 800b650:	08014ed8 	.word	0x08014ed8
 800b654:	08015178 	.word	0x08015178
 800b658:	08014f24 	.word	0x08014f24
 800b65c:	2000a80c 	.word	0x2000a80c
 800b660:	2000a811 	.word	0x2000a811
 800b664:	2000a7d8 	.word	0x2000a7d8
 800b668:	697b      	ldr	r3, [r7, #20]
 800b66a:	68db      	ldr	r3, [r3, #12]
 800b66c:	687a      	ldr	r2, [r7, #4]
 800b66e:	429a      	cmp	r2, r3
 800b670:	d104      	bne.n	800b67c <tcp_process+0x5d8>
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	68da      	ldr	r2, [r3, #12]
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	60da      	str	r2, [r3, #12]
 800b67a:	e005      	b.n	800b688 <tcp_process+0x5e4>
 800b67c:	697b      	ldr	r3, [r7, #20]
 800b67e:	68db      	ldr	r3, [r3, #12]
 800b680:	617b      	str	r3, [r7, #20]
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d1ef      	bne.n	800b668 <tcp_process+0x5c4>
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2200      	movs	r2, #0
 800b68c:	60da      	str	r2, [r3, #12]
 800b68e:	4b77      	ldr	r3, [pc, #476]	; (800b86c <tcp_process+0x7c8>)
 800b690:	2201      	movs	r2, #1
 800b692:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	220a      	movs	r2, #10
 800b698:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800b69a:	4b75      	ldr	r3, [pc, #468]	; (800b870 <tcp_process+0x7cc>)
 800b69c:	681a      	ldr	r2, [r3, #0]
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	60da      	str	r2, [r3, #12]
 800b6a2:	4a73      	ldr	r2, [pc, #460]	; (800b870 <tcp_process+0x7cc>)
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	6013      	str	r3, [r2, #0]
 800b6a8:	f002 fcfa 	bl	800e0a0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800b6ac:	e0d2      	b.n	800b854 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	8b5b      	ldrh	r3, [r3, #26]
 800b6b2:	f043 0302 	orr.w	r3, r3, #2
 800b6b6:	b29a      	uxth	r2, r3
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2208      	movs	r2, #8
 800b6c0:	751a      	strb	r2, [r3, #20]
      break;
 800b6c2:	e0c7      	b.n	800b854 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b6c4:	4b6b      	ldr	r3, [pc, #428]	; (800b874 <tcp_process+0x7d0>)
 800b6c6:	781b      	ldrb	r3, [r3, #0]
 800b6c8:	f003 0310 	and.w	r3, r3, #16
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	f000 80c1 	beq.w	800b854 <tcp_process+0x7b0>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b6d6:	4b68      	ldr	r3, [pc, #416]	; (800b878 <tcp_process+0x7d4>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	429a      	cmp	r2, r3
 800b6dc:	f040 80ba 	bne.w	800b854 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	f040 80b5 	bne.w	800b854 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2206      	movs	r2, #6
 800b6ee:	751a      	strb	r2, [r3, #20]
      break;
 800b6f0:	e0b0      	b.n	800b854 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	f000 f9ca 	bl	800ba8c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b6f8:	4b60      	ldr	r3, [pc, #384]	; (800b87c <tcp_process+0x7d8>)
 800b6fa:	781b      	ldrb	r3, [r3, #0]
 800b6fc:	f003 0320 	and.w	r3, r3, #32
 800b700:	2b00      	cmp	r3, #0
 800b702:	f000 80a9 	beq.w	800b858 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	8b5b      	ldrh	r3, [r3, #26]
 800b70a:	f043 0302 	orr.w	r3, r3, #2
 800b70e:	b29a      	uxth	r2, r3
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f7fe fd39 	bl	800a18c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b71a:	4b59      	ldr	r3, [pc, #356]	; (800b880 <tcp_process+0x7dc>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	687a      	ldr	r2, [r7, #4]
 800b720:	429a      	cmp	r2, r3
 800b722:	d105      	bne.n	800b730 <tcp_process+0x68c>
 800b724:	4b56      	ldr	r3, [pc, #344]	; (800b880 <tcp_process+0x7dc>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	68db      	ldr	r3, [r3, #12]
 800b72a:	4a55      	ldr	r2, [pc, #340]	; (800b880 <tcp_process+0x7dc>)
 800b72c:	6013      	str	r3, [r2, #0]
 800b72e:	e013      	b.n	800b758 <tcp_process+0x6b4>
 800b730:	4b53      	ldr	r3, [pc, #332]	; (800b880 <tcp_process+0x7dc>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	613b      	str	r3, [r7, #16]
 800b736:	e00c      	b.n	800b752 <tcp_process+0x6ae>
 800b738:	693b      	ldr	r3, [r7, #16]
 800b73a:	68db      	ldr	r3, [r3, #12]
 800b73c:	687a      	ldr	r2, [r7, #4]
 800b73e:	429a      	cmp	r2, r3
 800b740:	d104      	bne.n	800b74c <tcp_process+0x6a8>
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	68da      	ldr	r2, [r3, #12]
 800b746:	693b      	ldr	r3, [r7, #16]
 800b748:	60da      	str	r2, [r3, #12]
 800b74a:	e005      	b.n	800b758 <tcp_process+0x6b4>
 800b74c:	693b      	ldr	r3, [r7, #16]
 800b74e:	68db      	ldr	r3, [r3, #12]
 800b750:	613b      	str	r3, [r7, #16]
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d1ef      	bne.n	800b738 <tcp_process+0x694>
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2200      	movs	r2, #0
 800b75c:	60da      	str	r2, [r3, #12]
 800b75e:	4b43      	ldr	r3, [pc, #268]	; (800b86c <tcp_process+0x7c8>)
 800b760:	2201      	movs	r2, #1
 800b762:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	220a      	movs	r2, #10
 800b768:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b76a:	4b41      	ldr	r3, [pc, #260]	; (800b870 <tcp_process+0x7cc>)
 800b76c:	681a      	ldr	r2, [r3, #0]
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	60da      	str	r2, [r3, #12]
 800b772:	4a3f      	ldr	r2, [pc, #252]	; (800b870 <tcp_process+0x7cc>)
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	6013      	str	r3, [r2, #0]
 800b778:	f002 fc92 	bl	800e0a0 <tcp_timer_needed>
      }
      break;
 800b77c:	e06c      	b.n	800b858 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f000 f984 	bl	800ba8c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b784:	4b3b      	ldr	r3, [pc, #236]	; (800b874 <tcp_process+0x7d0>)
 800b786:	781b      	ldrb	r3, [r3, #0]
 800b788:	f003 0310 	and.w	r3, r3, #16
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d065      	beq.n	800b85c <tcp_process+0x7b8>
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b794:	4b38      	ldr	r3, [pc, #224]	; (800b878 <tcp_process+0x7d4>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	429a      	cmp	r2, r3
 800b79a:	d15f      	bne.n	800b85c <tcp_process+0x7b8>
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d15b      	bne.n	800b85c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f7fe fcf1 	bl	800a18c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b7aa:	4b35      	ldr	r3, [pc, #212]	; (800b880 <tcp_process+0x7dc>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	687a      	ldr	r2, [r7, #4]
 800b7b0:	429a      	cmp	r2, r3
 800b7b2:	d105      	bne.n	800b7c0 <tcp_process+0x71c>
 800b7b4:	4b32      	ldr	r3, [pc, #200]	; (800b880 <tcp_process+0x7dc>)
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	68db      	ldr	r3, [r3, #12]
 800b7ba:	4a31      	ldr	r2, [pc, #196]	; (800b880 <tcp_process+0x7dc>)
 800b7bc:	6013      	str	r3, [r2, #0]
 800b7be:	e013      	b.n	800b7e8 <tcp_process+0x744>
 800b7c0:	4b2f      	ldr	r3, [pc, #188]	; (800b880 <tcp_process+0x7dc>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	60fb      	str	r3, [r7, #12]
 800b7c6:	e00c      	b.n	800b7e2 <tcp_process+0x73e>
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	68db      	ldr	r3, [r3, #12]
 800b7cc:	687a      	ldr	r2, [r7, #4]
 800b7ce:	429a      	cmp	r2, r3
 800b7d0:	d104      	bne.n	800b7dc <tcp_process+0x738>
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	68da      	ldr	r2, [r3, #12]
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	60da      	str	r2, [r3, #12]
 800b7da:	e005      	b.n	800b7e8 <tcp_process+0x744>
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	68db      	ldr	r3, [r3, #12]
 800b7e0:	60fb      	str	r3, [r7, #12]
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d1ef      	bne.n	800b7c8 <tcp_process+0x724>
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	60da      	str	r2, [r3, #12]
 800b7ee:	4b1f      	ldr	r3, [pc, #124]	; (800b86c <tcp_process+0x7c8>)
 800b7f0:	2201      	movs	r2, #1
 800b7f2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	220a      	movs	r2, #10
 800b7f8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b7fa:	4b1d      	ldr	r3, [pc, #116]	; (800b870 <tcp_process+0x7cc>)
 800b7fc:	681a      	ldr	r2, [r3, #0]
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	60da      	str	r2, [r3, #12]
 800b802:	4a1b      	ldr	r2, [pc, #108]	; (800b870 <tcp_process+0x7cc>)
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6013      	str	r3, [r2, #0]
 800b808:	f002 fc4a 	bl	800e0a0 <tcp_timer_needed>
      }
      break;
 800b80c:	e026      	b.n	800b85c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f000 f93c 	bl	800ba8c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b814:	4b17      	ldr	r3, [pc, #92]	; (800b874 <tcp_process+0x7d0>)
 800b816:	781b      	ldrb	r3, [r3, #0]
 800b818:	f003 0310 	and.w	r3, r3, #16
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d01f      	beq.n	800b860 <tcp_process+0x7bc>
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b824:	4b14      	ldr	r3, [pc, #80]	; (800b878 <tcp_process+0x7d4>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	429a      	cmp	r2, r3
 800b82a:	d119      	bne.n	800b860 <tcp_process+0x7bc>
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b830:	2b00      	cmp	r3, #0
 800b832:	d115      	bne.n	800b860 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800b834:	4b11      	ldr	r3, [pc, #68]	; (800b87c <tcp_process+0x7d8>)
 800b836:	781b      	ldrb	r3, [r3, #0]
 800b838:	f043 0310 	orr.w	r3, r3, #16
 800b83c:	b2da      	uxtb	r2, r3
 800b83e:	4b0f      	ldr	r3, [pc, #60]	; (800b87c <tcp_process+0x7d8>)
 800b840:	701a      	strb	r2, [r3, #0]
      }
      break;
 800b842:	e00d      	b.n	800b860 <tcp_process+0x7bc>
    default:
      break;
 800b844:	bf00      	nop
 800b846:	e00c      	b.n	800b862 <tcp_process+0x7be>
      break;
 800b848:	bf00      	nop
 800b84a:	e00a      	b.n	800b862 <tcp_process+0x7be>
      break;
 800b84c:	bf00      	nop
 800b84e:	e008      	b.n	800b862 <tcp_process+0x7be>
      break;
 800b850:	bf00      	nop
 800b852:	e006      	b.n	800b862 <tcp_process+0x7be>
      break;
 800b854:	bf00      	nop
 800b856:	e004      	b.n	800b862 <tcp_process+0x7be>
      break;
 800b858:	bf00      	nop
 800b85a:	e002      	b.n	800b862 <tcp_process+0x7be>
      break;
 800b85c:	bf00      	nop
 800b85e:	e000      	b.n	800b862 <tcp_process+0x7be>
      break;
 800b860:	bf00      	nop
  }
  return ERR_OK;
 800b862:	2300      	movs	r3, #0
}
 800b864:	4618      	mov	r0, r3
 800b866:	3724      	adds	r7, #36	; 0x24
 800b868:	46bd      	mov	sp, r7
 800b86a:	bd90      	pop	{r4, r7, pc}
 800b86c:	2000a7e0 	.word	0x2000a7e0
 800b870:	2000a7dc 	.word	0x2000a7dc
 800b874:	2000a810 	.word	0x2000a810
 800b878:	2000a808 	.word	0x2000a808
 800b87c:	2000a811 	.word	0x2000a811
 800b880:	2000a7d8 	.word	0x2000a7d8

0800b884 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800b884:	b590      	push	{r4, r7, lr}
 800b886:	b085      	sub	sp, #20
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
 800b88c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d106      	bne.n	800b8a2 <tcp_oos_insert_segment+0x1e>
 800b894:	4b3b      	ldr	r3, [pc, #236]	; (800b984 <tcp_oos_insert_segment+0x100>)
 800b896:	f240 421f 	movw	r2, #1055	; 0x41f
 800b89a:	493b      	ldr	r1, [pc, #236]	; (800b988 <tcp_oos_insert_segment+0x104>)
 800b89c:	483b      	ldr	r0, [pc, #236]	; (800b98c <tcp_oos_insert_segment+0x108>)
 800b89e:	f006 fa0b 	bl	8011cb8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	68db      	ldr	r3, [r3, #12]
 800b8a6:	899b      	ldrh	r3, [r3, #12]
 800b8a8:	b29b      	uxth	r3, r3
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f7fb fcb0 	bl	8007210 <lwip_htons>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	b2db      	uxtb	r3, r3
 800b8b4:	f003 0301 	and.w	r3, r3, #1
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d028      	beq.n	800b90e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800b8bc:	6838      	ldr	r0, [r7, #0]
 800b8be:	f7fe fa63 	bl	8009d88 <tcp_segs_free>
    next = NULL;
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	603b      	str	r3, [r7, #0]
 800b8c6:	e056      	b.n	800b976 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	68db      	ldr	r3, [r3, #12]
 800b8cc:	899b      	ldrh	r3, [r3, #12]
 800b8ce:	b29b      	uxth	r3, r3
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f7fb fc9d 	bl	8007210 <lwip_htons>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	b2db      	uxtb	r3, r3
 800b8da:	f003 0301 	and.w	r3, r3, #1
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d00d      	beq.n	800b8fe <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	68db      	ldr	r3, [r3, #12]
 800b8e6:	899b      	ldrh	r3, [r3, #12]
 800b8e8:	b29c      	uxth	r4, r3
 800b8ea:	2001      	movs	r0, #1
 800b8ec:	f7fb fc90 	bl	8007210 <lwip_htons>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	461a      	mov	r2, r3
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	68db      	ldr	r3, [r3, #12]
 800b8f8:	4322      	orrs	r2, r4
 800b8fa:	b292      	uxth	r2, r2
 800b8fc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800b908:	68f8      	ldr	r0, [r7, #12]
 800b90a:	f7fe fa52 	bl	8009db2 <tcp_seg_free>
    while (next &&
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d00e      	beq.n	800b932 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	891b      	ldrh	r3, [r3, #8]
 800b918:	461a      	mov	r2, r3
 800b91a:	4b1d      	ldr	r3, [pc, #116]	; (800b990 <tcp_oos_insert_segment+0x10c>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	441a      	add	r2, r3
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	68db      	ldr	r3, [r3, #12]
 800b924:	685b      	ldr	r3, [r3, #4]
 800b926:	6839      	ldr	r1, [r7, #0]
 800b928:	8909      	ldrh	r1, [r1, #8]
 800b92a:	440b      	add	r3, r1
 800b92c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800b92e:	2b00      	cmp	r3, #0
 800b930:	daca      	bge.n	800b8c8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d01e      	beq.n	800b976 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	891b      	ldrh	r3, [r3, #8]
 800b93c:	461a      	mov	r2, r3
 800b93e:	4b14      	ldr	r3, [pc, #80]	; (800b990 <tcp_oos_insert_segment+0x10c>)
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	441a      	add	r2, r3
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	68db      	ldr	r3, [r3, #12]
 800b948:	685b      	ldr	r3, [r3, #4]
 800b94a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	dd12      	ble.n	800b976 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	68db      	ldr	r3, [r3, #12]
 800b954:	685b      	ldr	r3, [r3, #4]
 800b956:	b29a      	uxth	r2, r3
 800b958:	4b0d      	ldr	r3, [pc, #52]	; (800b990 <tcp_oos_insert_segment+0x10c>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	b29b      	uxth	r3, r3
 800b95e:	1ad3      	subs	r3, r2, r3
 800b960:	b29a      	uxth	r2, r3
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	685a      	ldr	r2, [r3, #4]
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	891b      	ldrh	r3, [r3, #8]
 800b96e:	4619      	mov	r1, r3
 800b970:	4610      	mov	r0, r2
 800b972:	f7fc fe25 	bl	80085c0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	683a      	ldr	r2, [r7, #0]
 800b97a:	601a      	str	r2, [r3, #0]
}
 800b97c:	bf00      	nop
 800b97e:	3714      	adds	r7, #20
 800b980:	46bd      	mov	sp, r7
 800b982:	bd90      	pop	{r4, r7, pc}
 800b984:	08014ed8 	.word	0x08014ed8
 800b988:	08015198 	.word	0x08015198
 800b98c:	08014f24 	.word	0x08014f24
 800b990:	2000a804 	.word	0x2000a804

0800b994 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800b994:	b5b0      	push	{r4, r5, r7, lr}
 800b996:	b086      	sub	sp, #24
 800b998:	af00      	add	r7, sp, #0
 800b99a:	60f8      	str	r0, [r7, #12]
 800b99c:	60b9      	str	r1, [r7, #8]
 800b99e:	607a      	str	r2, [r7, #4]
 800b9a0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800b9a2:	e03e      	b.n	800ba22 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800b9ae:	697b      	ldr	r3, [r7, #20]
 800b9b0:	685b      	ldr	r3, [r3, #4]
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f7fd f812 	bl	80089dc <pbuf_clen>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b9c2:	8a7a      	ldrh	r2, [r7, #18]
 800b9c4:	429a      	cmp	r2, r3
 800b9c6:	d906      	bls.n	800b9d6 <tcp_free_acked_segments+0x42>
 800b9c8:	4b2a      	ldr	r3, [pc, #168]	; (800ba74 <tcp_free_acked_segments+0xe0>)
 800b9ca:	f240 4257 	movw	r2, #1111	; 0x457
 800b9ce:	492a      	ldr	r1, [pc, #168]	; (800ba78 <tcp_free_acked_segments+0xe4>)
 800b9d0:	482a      	ldr	r0, [pc, #168]	; (800ba7c <tcp_free_acked_segments+0xe8>)
 800b9d2:	f006 f971 	bl	8011cb8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800b9dc:	8a7b      	ldrh	r3, [r7, #18]
 800b9de:	1ad3      	subs	r3, r2, r3
 800b9e0:	b29a      	uxth	r2, r3
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800b9e8:	697b      	ldr	r3, [r7, #20]
 800b9ea:	891a      	ldrh	r2, [r3, #8]
 800b9ec:	4b24      	ldr	r3, [pc, #144]	; (800ba80 <tcp_free_acked_segments+0xec>)
 800b9ee:	881b      	ldrh	r3, [r3, #0]
 800b9f0:	4413      	add	r3, r2
 800b9f2:	b29a      	uxth	r2, r3
 800b9f4:	4b22      	ldr	r3, [pc, #136]	; (800ba80 <tcp_free_acked_segments+0xec>)
 800b9f6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800b9f8:	6978      	ldr	r0, [r7, #20]
 800b9fa:	f7fe f9da 	bl	8009db2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d00c      	beq.n	800ba22 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d109      	bne.n	800ba22 <tcp_free_acked_segments+0x8e>
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d106      	bne.n	800ba22 <tcp_free_acked_segments+0x8e>
 800ba14:	4b17      	ldr	r3, [pc, #92]	; (800ba74 <tcp_free_acked_segments+0xe0>)
 800ba16:	f240 4261 	movw	r2, #1121	; 0x461
 800ba1a:	491a      	ldr	r1, [pc, #104]	; (800ba84 <tcp_free_acked_segments+0xf0>)
 800ba1c:	4817      	ldr	r0, [pc, #92]	; (800ba7c <tcp_free_acked_segments+0xe8>)
 800ba1e:	f006 f94b 	bl	8011cb8 <iprintf>
  while (seg_list != NULL &&
 800ba22:	68bb      	ldr	r3, [r7, #8]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d020      	beq.n	800ba6a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	68db      	ldr	r3, [r3, #12]
 800ba2c:	685b      	ldr	r3, [r3, #4]
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f7fb fc03 	bl	800723a <lwip_htonl>
 800ba34:	4604      	mov	r4, r0
 800ba36:	68bb      	ldr	r3, [r7, #8]
 800ba38:	891b      	ldrh	r3, [r3, #8]
 800ba3a:	461d      	mov	r5, r3
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	68db      	ldr	r3, [r3, #12]
 800ba40:	899b      	ldrh	r3, [r3, #12]
 800ba42:	b29b      	uxth	r3, r3
 800ba44:	4618      	mov	r0, r3
 800ba46:	f7fb fbe3 	bl	8007210 <lwip_htons>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	b2db      	uxtb	r3, r3
 800ba4e:	f003 0303 	and.w	r3, r3, #3
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d001      	beq.n	800ba5a <tcp_free_acked_segments+0xc6>
 800ba56:	2301      	movs	r3, #1
 800ba58:	e000      	b.n	800ba5c <tcp_free_acked_segments+0xc8>
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	442b      	add	r3, r5
 800ba5e:	18e2      	adds	r2, r4, r3
 800ba60:	4b09      	ldr	r3, [pc, #36]	; (800ba88 <tcp_free_acked_segments+0xf4>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	dd9c      	ble.n	800b9a4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800ba6a:	68bb      	ldr	r3, [r7, #8]
}
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	3718      	adds	r7, #24
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bdb0      	pop	{r4, r5, r7, pc}
 800ba74:	08014ed8 	.word	0x08014ed8
 800ba78:	080151c0 	.word	0x080151c0
 800ba7c:	08014f24 	.word	0x08014f24
 800ba80:	2000a80c 	.word	0x2000a80c
 800ba84:	080151e8 	.word	0x080151e8
 800ba88:	2000a808 	.word	0x2000a808

0800ba8c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800ba8c:	b5b0      	push	{r4, r5, r7, lr}
 800ba8e:	b094      	sub	sp, #80	; 0x50
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800ba94:	2300      	movs	r3, #0
 800ba96:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d106      	bne.n	800baac <tcp_receive+0x20>
 800ba9e:	4b91      	ldr	r3, [pc, #580]	; (800bce4 <tcp_receive+0x258>)
 800baa0:	f240 427b 	movw	r2, #1147	; 0x47b
 800baa4:	4990      	ldr	r1, [pc, #576]	; (800bce8 <tcp_receive+0x25c>)
 800baa6:	4891      	ldr	r0, [pc, #580]	; (800bcec <tcp_receive+0x260>)
 800baa8:	f006 f906 	bl	8011cb8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	7d1b      	ldrb	r3, [r3, #20]
 800bab0:	2b03      	cmp	r3, #3
 800bab2:	d806      	bhi.n	800bac2 <tcp_receive+0x36>
 800bab4:	4b8b      	ldr	r3, [pc, #556]	; (800bce4 <tcp_receive+0x258>)
 800bab6:	f240 427c 	movw	r2, #1148	; 0x47c
 800baba:	498d      	ldr	r1, [pc, #564]	; (800bcf0 <tcp_receive+0x264>)
 800babc:	488b      	ldr	r0, [pc, #556]	; (800bcec <tcp_receive+0x260>)
 800babe:	f006 f8fb 	bl	8011cb8 <iprintf>

  if (flags & TCP_ACK) {
 800bac2:	4b8c      	ldr	r3, [pc, #560]	; (800bcf4 <tcp_receive+0x268>)
 800bac4:	781b      	ldrb	r3, [r3, #0]
 800bac6:	f003 0310 	and.w	r3, r3, #16
 800baca:	2b00      	cmp	r3, #0
 800bacc:	f000 8264 	beq.w	800bf98 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bad6:	461a      	mov	r2, r3
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800badc:	4413      	add	r3, r2
 800bade:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bae4:	4b84      	ldr	r3, [pc, #528]	; (800bcf8 <tcp_receive+0x26c>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	1ad3      	subs	r3, r2, r3
 800baea:	2b00      	cmp	r3, #0
 800baec:	db1b      	blt.n	800bb26 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800baf2:	4b81      	ldr	r3, [pc, #516]	; (800bcf8 <tcp_receive+0x26c>)
 800baf4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800baf6:	429a      	cmp	r2, r3
 800baf8:	d106      	bne.n	800bb08 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bafe:	4b7f      	ldr	r3, [pc, #508]	; (800bcfc <tcp_receive+0x270>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	1ad3      	subs	r3, r2, r3
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	db0e      	blt.n	800bb26 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bb0c:	4b7b      	ldr	r3, [pc, #492]	; (800bcfc <tcp_receive+0x270>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bb10:	429a      	cmp	r2, r3
 800bb12:	d125      	bne.n	800bb60 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800bb14:	4b7a      	ldr	r3, [pc, #488]	; (800bd00 <tcp_receive+0x274>)
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	89db      	ldrh	r3, [r3, #14]
 800bb1a:	b29a      	uxth	r2, r3
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bb22:	429a      	cmp	r2, r3
 800bb24:	d91c      	bls.n	800bb60 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800bb26:	4b76      	ldr	r3, [pc, #472]	; (800bd00 <tcp_receive+0x274>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	89db      	ldrh	r3, [r3, #14]
 800bb2c:	b29a      	uxth	r2, r3
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d205      	bcs.n	800bb50 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800bb50:	4b69      	ldr	r3, [pc, #420]	; (800bcf8 <tcp_receive+0x26c>)
 800bb52:	681a      	ldr	r2, [r3, #0]
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800bb58:	4b68      	ldr	r3, [pc, #416]	; (800bcfc <tcp_receive+0x270>)
 800bb5a:	681a      	ldr	r2, [r3, #0]
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800bb60:	4b66      	ldr	r3, [pc, #408]	; (800bcfc <tcp_receive+0x270>)
 800bb62:	681a      	ldr	r2, [r3, #0]
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb68:	1ad3      	subs	r3, r2, r3
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	dc58      	bgt.n	800bc20 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800bb6e:	4b65      	ldr	r3, [pc, #404]	; (800bd04 <tcp_receive+0x278>)
 800bb70:	881b      	ldrh	r3, [r3, #0]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d14b      	bne.n	800bc0e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb7a:	687a      	ldr	r2, [r7, #4]
 800bb7c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800bb80:	4413      	add	r3, r2
 800bb82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb84:	429a      	cmp	r2, r3
 800bb86:	d142      	bne.n	800bc0e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	db3d      	blt.n	800bc0e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb96:	4b59      	ldr	r3, [pc, #356]	; (800bcfc <tcp_receive+0x270>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d137      	bne.n	800bc0e <tcp_receive+0x182>
              found_dupack = 1;
 800bb9e:	2301      	movs	r3, #1
 800bba0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bba8:	2bff      	cmp	r3, #255	; 0xff
 800bbaa:	d007      	beq.n	800bbbc <tcp_receive+0x130>
                ++pcb->dupacks;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bbb2:	3301      	adds	r3, #1
 800bbb4:	b2da      	uxtb	r2, r3
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bbc2:	2b03      	cmp	r3, #3
 800bbc4:	d91b      	bls.n	800bbfe <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bbd0:	4413      	add	r3, r2
 800bbd2:	b29a      	uxth	r2, r3
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	d30a      	bcc.n	800bbf4 <tcp_receive+0x168>
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bbe8:	4413      	add	r3, r2
 800bbea:	b29a      	uxth	r2, r3
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800bbf2:	e004      	b.n	800bbfe <tcp_receive+0x172>
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bbfa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bc04:	2b02      	cmp	r3, #2
 800bc06:	d902      	bls.n	800bc0e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f001 feed 	bl	800d9e8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800bc0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	f040 8161 	bne.w	800bed8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2200      	movs	r2, #0
 800bc1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bc1e:	e15b      	b.n	800bed8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bc20:	4b36      	ldr	r3, [pc, #216]	; (800bcfc <tcp_receive+0x270>)
 800bc22:	681a      	ldr	r2, [r3, #0]
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc28:	1ad3      	subs	r3, r2, r3
 800bc2a:	3b01      	subs	r3, #1
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	f2c0 814e 	blt.w	800bece <tcp_receive+0x442>
 800bc32:	4b32      	ldr	r3, [pc, #200]	; (800bcfc <tcp_receive+0x270>)
 800bc34:	681a      	ldr	r2, [r3, #0]
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc3a:	1ad3      	subs	r3, r2, r3
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	f300 8146 	bgt.w	800bece <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	8b5b      	ldrh	r3, [r3, #26]
 800bc46:	f003 0304 	and.w	r3, r3, #4
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d010      	beq.n	800bc70 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	8b5b      	ldrh	r3, [r3, #26]
 800bc52:	f023 0304 	bic.w	r3, r3, #4
 800bc56:	b29a      	uxth	r2, r3
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2200      	movs	r2, #0
 800bc74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bc7e:	10db      	asrs	r3, r3, #3
 800bc80:	b21b      	sxth	r3, r3
 800bc82:	b29a      	uxth	r2, r3
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bc8a:	b29b      	uxth	r3, r3
 800bc8c:	4413      	add	r3, r2
 800bc8e:	b29b      	uxth	r3, r3
 800bc90:	b21a      	sxth	r2, r3
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800bc98:	4b18      	ldr	r3, [pc, #96]	; (800bcfc <tcp_receive+0x270>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	b29a      	uxth	r2, r3
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bca2:	b29b      	uxth	r3, r3
 800bca4:	1ad3      	subs	r3, r2, r3
 800bca6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2200      	movs	r2, #0
 800bcac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800bcb0:	4b12      	ldr	r3, [pc, #72]	; (800bcfc <tcp_receive+0x270>)
 800bcb2:	681a      	ldr	r2, [r3, #0]
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	7d1b      	ldrb	r3, [r3, #20]
 800bcbc:	2b03      	cmp	r3, #3
 800bcbe:	f240 8097 	bls.w	800bdf0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800bcce:	429a      	cmp	r2, r3
 800bcd0:	d245      	bcs.n	800bd5e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	8b5b      	ldrh	r3, [r3, #26]
 800bcd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d014      	beq.n	800bd08 <tcp_receive+0x27c>
 800bcde:	2301      	movs	r3, #1
 800bce0:	e013      	b.n	800bd0a <tcp_receive+0x27e>
 800bce2:	bf00      	nop
 800bce4:	08014ed8 	.word	0x08014ed8
 800bce8:	08015208 	.word	0x08015208
 800bcec:	08014f24 	.word	0x08014f24
 800bcf0:	08015224 	.word	0x08015224
 800bcf4:	2000a810 	.word	0x2000a810
 800bcf8:	2000a804 	.word	0x2000a804
 800bcfc:	2000a808 	.word	0x2000a808
 800bd00:	2000a7f4 	.word	0x2000a7f4
 800bd04:	2000a80e 	.word	0x2000a80e
 800bd08:	2302      	movs	r3, #2
 800bd0a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800bd0e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800bd12:	b29a      	uxth	r2, r3
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bd18:	fb12 f303 	smulbb	r3, r2, r3
 800bd1c:	b29b      	uxth	r3, r3
 800bd1e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bd20:	4293      	cmp	r3, r2
 800bd22:	bf28      	it	cs
 800bd24:	4613      	movcs	r3, r2
 800bd26:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bd2e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800bd30:	4413      	add	r3, r2
 800bd32:	b29a      	uxth	r2, r3
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bd3a:	429a      	cmp	r2, r3
 800bd3c:	d309      	bcc.n	800bd52 <tcp_receive+0x2c6>
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bd44:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800bd46:	4413      	add	r3, r2
 800bd48:	b29a      	uxth	r2, r3
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800bd50:	e04e      	b.n	800bdf0 <tcp_receive+0x364>
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd58:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800bd5c:	e048      	b.n	800bdf0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800bd64:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bd66:	4413      	add	r3, r2
 800bd68:	b29a      	uxth	r2, r3
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bd70:	429a      	cmp	r2, r3
 800bd72:	d309      	bcc.n	800bd88 <tcp_receive+0x2fc>
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800bd7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bd7c:	4413      	add	r3, r2
 800bd7e:	b29a      	uxth	r2, r3
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bd86:	e004      	b.n	800bd92 <tcp_receive+0x306>
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd8e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bd9e:	429a      	cmp	r2, r3
 800bda0:	d326      	bcc.n	800bdf0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bdae:	1ad3      	subs	r3, r2, r3
 800bdb0:	b29a      	uxth	r2, r3
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bdc2:	4413      	add	r3, r2
 800bdc4:	b29a      	uxth	r2, r3
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bdcc:	429a      	cmp	r2, r3
 800bdce:	d30a      	bcc.n	800bde6 <tcp_receive+0x35a>
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bdda:	4413      	add	r3, r2
 800bddc:	b29a      	uxth	r2, r3
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800bde4:	e004      	b.n	800bdf0 <tcp_receive+0x364>
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bdec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdf8:	4a98      	ldr	r2, [pc, #608]	; (800c05c <tcp_receive+0x5d0>)
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f7ff fdca 	bl	800b994 <tcp_free_acked_segments>
 800be00:	4602      	mov	r2, r0
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be0e:	4a94      	ldr	r2, [pc, #592]	; (800c060 <tcp_receive+0x5d4>)
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f7ff fdbf 	bl	800b994 <tcp_free_acked_segments>
 800be16:	4602      	mov	r2, r0
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be20:	2b00      	cmp	r3, #0
 800be22:	d104      	bne.n	800be2e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be2a:	861a      	strh	r2, [r3, #48]	; 0x30
 800be2c:	e002      	b.n	800be34 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2200      	movs	r2, #0
 800be32:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2200      	movs	r2, #0
 800be38:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d103      	bne.n	800be4a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2200      	movs	r2, #0
 800be46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800be50:	4b84      	ldr	r3, [pc, #528]	; (800c064 <tcp_receive+0x5d8>)
 800be52:	881b      	ldrh	r3, [r3, #0]
 800be54:	4413      	add	r3, r2
 800be56:	b29a      	uxth	r2, r3
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	8b5b      	ldrh	r3, [r3, #26]
 800be62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800be66:	2b00      	cmp	r3, #0
 800be68:	d035      	beq.n	800bed6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d118      	bne.n	800bea4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be76:	2b00      	cmp	r3, #0
 800be78:	d00c      	beq.n	800be94 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be82:	68db      	ldr	r3, [r3, #12]
 800be84:	685b      	ldr	r3, [r3, #4]
 800be86:	4618      	mov	r0, r3
 800be88:	f7fb f9d7 	bl	800723a <lwip_htonl>
 800be8c:	4603      	mov	r3, r0
 800be8e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800be90:	2b00      	cmp	r3, #0
 800be92:	dc20      	bgt.n	800bed6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	8b5b      	ldrh	r3, [r3, #26]
 800be98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800be9c:	b29a      	uxth	r2, r3
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bea2:	e018      	b.n	800bed6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800beac:	68db      	ldr	r3, [r3, #12]
 800beae:	685b      	ldr	r3, [r3, #4]
 800beb0:	4618      	mov	r0, r3
 800beb2:	f7fb f9c2 	bl	800723a <lwip_htonl>
 800beb6:	4603      	mov	r3, r0
 800beb8:	1ae3      	subs	r3, r4, r3
 800beba:	2b00      	cmp	r3, #0
 800bebc:	dc0b      	bgt.n	800bed6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	8b5b      	ldrh	r3, [r3, #26]
 800bec2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bec6:	b29a      	uxth	r2, r3
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800becc:	e003      	b.n	800bed6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f001 ff76 	bl	800ddc0 <tcp_send_empty_ack>
 800bed4:	e000      	b.n	800bed8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bed6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d05b      	beq.n	800bf98 <tcp_receive+0x50c>
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bee4:	4b60      	ldr	r3, [pc, #384]	; (800c068 <tcp_receive+0x5dc>)
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	1ad3      	subs	r3, r2, r3
 800beea:	2b00      	cmp	r3, #0
 800beec:	da54      	bge.n	800bf98 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800beee:	4b5f      	ldr	r3, [pc, #380]	; (800c06c <tcp_receive+0x5e0>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	b29a      	uxth	r2, r3
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bef8:	b29b      	uxth	r3, r3
 800befa:	1ad3      	subs	r3, r2, r3
 800befc:	b29b      	uxth	r3, r3
 800befe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800bf02:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bf0c:	10db      	asrs	r3, r3, #3
 800bf0e:	b21b      	sxth	r3, r3
 800bf10:	b29b      	uxth	r3, r3
 800bf12:	1ad3      	subs	r3, r2, r3
 800bf14:	b29b      	uxth	r3, r3
 800bf16:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bf20:	b29a      	uxth	r2, r3
 800bf22:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bf26:	4413      	add	r3, r2
 800bf28:	b29b      	uxth	r3, r3
 800bf2a:	b21a      	sxth	r2, r3
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800bf30:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	da05      	bge.n	800bf44 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800bf38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bf3c:	425b      	negs	r3, r3
 800bf3e:	b29b      	uxth	r3, r3
 800bf40:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800bf44:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bf4e:	109b      	asrs	r3, r3, #2
 800bf50:	b21b      	sxth	r3, r3
 800bf52:	b29b      	uxth	r3, r3
 800bf54:	1ad3      	subs	r3, r2, r3
 800bf56:	b29b      	uxth	r3, r3
 800bf58:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bf62:	b29a      	uxth	r2, r3
 800bf64:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bf68:	4413      	add	r3, r2
 800bf6a:	b29b      	uxth	r3, r3
 800bf6c:	b21a      	sxth	r2, r3
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bf78:	10db      	asrs	r3, r3, #3
 800bf7a:	b21b      	sxth	r3, r3
 800bf7c:	b29a      	uxth	r2, r3
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bf84:	b29b      	uxth	r3, r3
 800bf86:	4413      	add	r3, r2
 800bf88:	b29b      	uxth	r3, r3
 800bf8a:	b21a      	sxth	r2, r3
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2200      	movs	r2, #0
 800bf96:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800bf98:	4b35      	ldr	r3, [pc, #212]	; (800c070 <tcp_receive+0x5e4>)
 800bf9a:	881b      	ldrh	r3, [r3, #0]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	f000 84e2 	beq.w	800c966 <tcp_receive+0xeda>
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	7d1b      	ldrb	r3, [r3, #20]
 800bfa6:	2b06      	cmp	r3, #6
 800bfa8:	f200 84dd 	bhi.w	800c966 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bfb0:	4b30      	ldr	r3, [pc, #192]	; (800c074 <tcp_receive+0x5e8>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	1ad3      	subs	r3, r2, r3
 800bfb6:	3b01      	subs	r3, #1
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	f2c0 808f 	blt.w	800c0dc <tcp_receive+0x650>
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bfc2:	4b2b      	ldr	r3, [pc, #172]	; (800c070 <tcp_receive+0x5e4>)
 800bfc4:	881b      	ldrh	r3, [r3, #0]
 800bfc6:	4619      	mov	r1, r3
 800bfc8:	4b2a      	ldr	r3, [pc, #168]	; (800c074 <tcp_receive+0x5e8>)
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	440b      	add	r3, r1
 800bfce:	1ad3      	subs	r3, r2, r3
 800bfd0:	3301      	adds	r3, #1
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	f300 8082 	bgt.w	800c0dc <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800bfd8:	4b27      	ldr	r3, [pc, #156]	; (800c078 <tcp_receive+0x5ec>)
 800bfda:	685b      	ldr	r3, [r3, #4]
 800bfdc:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bfe2:	4b24      	ldr	r3, [pc, #144]	; (800c074 <tcp_receive+0x5e8>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	1ad3      	subs	r3, r2, r3
 800bfe8:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800bfea:	4b23      	ldr	r3, [pc, #140]	; (800c078 <tcp_receive+0x5ec>)
 800bfec:	685b      	ldr	r3, [r3, #4]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d106      	bne.n	800c000 <tcp_receive+0x574>
 800bff2:	4b22      	ldr	r3, [pc, #136]	; (800c07c <tcp_receive+0x5f0>)
 800bff4:	f240 5294 	movw	r2, #1428	; 0x594
 800bff8:	4921      	ldr	r1, [pc, #132]	; (800c080 <tcp_receive+0x5f4>)
 800bffa:	4822      	ldr	r0, [pc, #136]	; (800c084 <tcp_receive+0x5f8>)
 800bffc:	f005 fe5c 	bl	8011cb8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800c000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c002:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c006:	4293      	cmp	r3, r2
 800c008:	d906      	bls.n	800c018 <tcp_receive+0x58c>
 800c00a:	4b1c      	ldr	r3, [pc, #112]	; (800c07c <tcp_receive+0x5f0>)
 800c00c:	f240 5295 	movw	r2, #1429	; 0x595
 800c010:	491d      	ldr	r1, [pc, #116]	; (800c088 <tcp_receive+0x5fc>)
 800c012:	481c      	ldr	r0, [pc, #112]	; (800c084 <tcp_receive+0x5f8>)
 800c014:	f005 fe50 	bl	8011cb8 <iprintf>
      off = (u16_t)off32;
 800c018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c01a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800c01e:	4b16      	ldr	r3, [pc, #88]	; (800c078 <tcp_receive+0x5ec>)
 800c020:	685b      	ldr	r3, [r3, #4]
 800c022:	891b      	ldrh	r3, [r3, #8]
 800c024:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c028:	429a      	cmp	r2, r3
 800c02a:	d906      	bls.n	800c03a <tcp_receive+0x5ae>
 800c02c:	4b13      	ldr	r3, [pc, #76]	; (800c07c <tcp_receive+0x5f0>)
 800c02e:	f240 5297 	movw	r2, #1431	; 0x597
 800c032:	4916      	ldr	r1, [pc, #88]	; (800c08c <tcp_receive+0x600>)
 800c034:	4813      	ldr	r0, [pc, #76]	; (800c084 <tcp_receive+0x5f8>)
 800c036:	f005 fe3f 	bl	8011cb8 <iprintf>
      inseg.len -= off;
 800c03a:	4b0f      	ldr	r3, [pc, #60]	; (800c078 <tcp_receive+0x5ec>)
 800c03c:	891a      	ldrh	r2, [r3, #8]
 800c03e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c042:	1ad3      	subs	r3, r2, r3
 800c044:	b29a      	uxth	r2, r3
 800c046:	4b0c      	ldr	r3, [pc, #48]	; (800c078 <tcp_receive+0x5ec>)
 800c048:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c04a:	4b0b      	ldr	r3, [pc, #44]	; (800c078 <tcp_receive+0x5ec>)
 800c04c:	685b      	ldr	r3, [r3, #4]
 800c04e:	891a      	ldrh	r2, [r3, #8]
 800c050:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c054:	1ad3      	subs	r3, r2, r3
 800c056:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800c058:	e02a      	b.n	800c0b0 <tcp_receive+0x624>
 800c05a:	bf00      	nop
 800c05c:	08015240 	.word	0x08015240
 800c060:	08015248 	.word	0x08015248
 800c064:	2000a80c 	.word	0x2000a80c
 800c068:	2000a808 	.word	0x2000a808
 800c06c:	2000a7cc 	.word	0x2000a7cc
 800c070:	2000a80e 	.word	0x2000a80e
 800c074:	2000a804 	.word	0x2000a804
 800c078:	2000a7e4 	.word	0x2000a7e4
 800c07c:	08014ed8 	.word	0x08014ed8
 800c080:	08015250 	.word	0x08015250
 800c084:	08014f24 	.word	0x08014f24
 800c088:	08015260 	.word	0x08015260
 800c08c:	08015270 	.word	0x08015270
        off -= p->len;
 800c090:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c092:	895b      	ldrh	r3, [r3, #10]
 800c094:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c098:	1ad3      	subs	r3, r2, r3
 800c09a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800c09e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0a0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c0a2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800c0a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800c0aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800c0b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0b2:	895b      	ldrh	r3, [r3, #10]
 800c0b4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c0b8:	429a      	cmp	r2, r3
 800c0ba:	d8e9      	bhi.n	800c090 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800c0bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c0c0:	4619      	mov	r1, r3
 800c0c2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c0c4:	f7fc fb7c 	bl	80087c0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0cc:	4a91      	ldr	r2, [pc, #580]	; (800c314 <tcp_receive+0x888>)
 800c0ce:	6013      	str	r3, [r2, #0]
 800c0d0:	4b91      	ldr	r3, [pc, #580]	; (800c318 <tcp_receive+0x88c>)
 800c0d2:	68db      	ldr	r3, [r3, #12]
 800c0d4:	4a8f      	ldr	r2, [pc, #572]	; (800c314 <tcp_receive+0x888>)
 800c0d6:	6812      	ldr	r2, [r2, #0]
 800c0d8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c0da:	e00d      	b.n	800c0f8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800c0dc:	4b8d      	ldr	r3, [pc, #564]	; (800c314 <tcp_receive+0x888>)
 800c0de:	681a      	ldr	r2, [r3, #0]
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0e4:	1ad3      	subs	r3, r2, r3
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	da06      	bge.n	800c0f8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	8b5b      	ldrh	r3, [r3, #26]
 800c0ee:	f043 0302 	orr.w	r3, r3, #2
 800c0f2:	b29a      	uxth	r2, r3
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c0f8:	4b86      	ldr	r3, [pc, #536]	; (800c314 <tcp_receive+0x888>)
 800c0fa:	681a      	ldr	r2, [r3, #0]
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c100:	1ad3      	subs	r3, r2, r3
 800c102:	2b00      	cmp	r3, #0
 800c104:	f2c0 842a 	blt.w	800c95c <tcp_receive+0xed0>
 800c108:	4b82      	ldr	r3, [pc, #520]	; (800c314 <tcp_receive+0x888>)
 800c10a:	681a      	ldr	r2, [r3, #0]
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c110:	6879      	ldr	r1, [r7, #4]
 800c112:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c114:	440b      	add	r3, r1
 800c116:	1ad3      	subs	r3, r2, r3
 800c118:	3301      	adds	r3, #1
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	f300 841e 	bgt.w	800c95c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c124:	4b7b      	ldr	r3, [pc, #492]	; (800c314 <tcp_receive+0x888>)
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	429a      	cmp	r2, r3
 800c12a:	f040 829a 	bne.w	800c662 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800c12e:	4b7a      	ldr	r3, [pc, #488]	; (800c318 <tcp_receive+0x88c>)
 800c130:	891c      	ldrh	r4, [r3, #8]
 800c132:	4b79      	ldr	r3, [pc, #484]	; (800c318 <tcp_receive+0x88c>)
 800c134:	68db      	ldr	r3, [r3, #12]
 800c136:	899b      	ldrh	r3, [r3, #12]
 800c138:	b29b      	uxth	r3, r3
 800c13a:	4618      	mov	r0, r3
 800c13c:	f7fb f868 	bl	8007210 <lwip_htons>
 800c140:	4603      	mov	r3, r0
 800c142:	b2db      	uxtb	r3, r3
 800c144:	f003 0303 	and.w	r3, r3, #3
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d001      	beq.n	800c150 <tcp_receive+0x6c4>
 800c14c:	2301      	movs	r3, #1
 800c14e:	e000      	b.n	800c152 <tcp_receive+0x6c6>
 800c150:	2300      	movs	r3, #0
 800c152:	4423      	add	r3, r4
 800c154:	b29a      	uxth	r2, r3
 800c156:	4b71      	ldr	r3, [pc, #452]	; (800c31c <tcp_receive+0x890>)
 800c158:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c15e:	4b6f      	ldr	r3, [pc, #444]	; (800c31c <tcp_receive+0x890>)
 800c160:	881b      	ldrh	r3, [r3, #0]
 800c162:	429a      	cmp	r2, r3
 800c164:	d275      	bcs.n	800c252 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c166:	4b6c      	ldr	r3, [pc, #432]	; (800c318 <tcp_receive+0x88c>)
 800c168:	68db      	ldr	r3, [r3, #12]
 800c16a:	899b      	ldrh	r3, [r3, #12]
 800c16c:	b29b      	uxth	r3, r3
 800c16e:	4618      	mov	r0, r3
 800c170:	f7fb f84e 	bl	8007210 <lwip_htons>
 800c174:	4603      	mov	r3, r0
 800c176:	b2db      	uxtb	r3, r3
 800c178:	f003 0301 	and.w	r3, r3, #1
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d01f      	beq.n	800c1c0 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800c180:	4b65      	ldr	r3, [pc, #404]	; (800c318 <tcp_receive+0x88c>)
 800c182:	68db      	ldr	r3, [r3, #12]
 800c184:	899b      	ldrh	r3, [r3, #12]
 800c186:	b29b      	uxth	r3, r3
 800c188:	b21b      	sxth	r3, r3
 800c18a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c18e:	b21c      	sxth	r4, r3
 800c190:	4b61      	ldr	r3, [pc, #388]	; (800c318 <tcp_receive+0x88c>)
 800c192:	68db      	ldr	r3, [r3, #12]
 800c194:	899b      	ldrh	r3, [r3, #12]
 800c196:	b29b      	uxth	r3, r3
 800c198:	4618      	mov	r0, r3
 800c19a:	f7fb f839 	bl	8007210 <lwip_htons>
 800c19e:	4603      	mov	r3, r0
 800c1a0:	b2db      	uxtb	r3, r3
 800c1a2:	b29b      	uxth	r3, r3
 800c1a4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c1a8:	b29b      	uxth	r3, r3
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f7fb f830 	bl	8007210 <lwip_htons>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	b21b      	sxth	r3, r3
 800c1b4:	4323      	orrs	r3, r4
 800c1b6:	b21a      	sxth	r2, r3
 800c1b8:	4b57      	ldr	r3, [pc, #348]	; (800c318 <tcp_receive+0x88c>)
 800c1ba:	68db      	ldr	r3, [r3, #12]
 800c1bc:	b292      	uxth	r2, r2
 800c1be:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c1c4:	4b54      	ldr	r3, [pc, #336]	; (800c318 <tcp_receive+0x88c>)
 800c1c6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c1c8:	4b53      	ldr	r3, [pc, #332]	; (800c318 <tcp_receive+0x88c>)
 800c1ca:	68db      	ldr	r3, [r3, #12]
 800c1cc:	899b      	ldrh	r3, [r3, #12]
 800c1ce:	b29b      	uxth	r3, r3
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	f7fb f81d 	bl	8007210 <lwip_htons>
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	b2db      	uxtb	r3, r3
 800c1da:	f003 0302 	and.w	r3, r3, #2
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d005      	beq.n	800c1ee <tcp_receive+0x762>
            inseg.len -= 1;
 800c1e2:	4b4d      	ldr	r3, [pc, #308]	; (800c318 <tcp_receive+0x88c>)
 800c1e4:	891b      	ldrh	r3, [r3, #8]
 800c1e6:	3b01      	subs	r3, #1
 800c1e8:	b29a      	uxth	r2, r3
 800c1ea:	4b4b      	ldr	r3, [pc, #300]	; (800c318 <tcp_receive+0x88c>)
 800c1ec:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800c1ee:	4b4a      	ldr	r3, [pc, #296]	; (800c318 <tcp_receive+0x88c>)
 800c1f0:	685b      	ldr	r3, [r3, #4]
 800c1f2:	4a49      	ldr	r2, [pc, #292]	; (800c318 <tcp_receive+0x88c>)
 800c1f4:	8912      	ldrh	r2, [r2, #8]
 800c1f6:	4611      	mov	r1, r2
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	f7fc f9e1 	bl	80085c0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800c1fe:	4b46      	ldr	r3, [pc, #280]	; (800c318 <tcp_receive+0x88c>)
 800c200:	891c      	ldrh	r4, [r3, #8]
 800c202:	4b45      	ldr	r3, [pc, #276]	; (800c318 <tcp_receive+0x88c>)
 800c204:	68db      	ldr	r3, [r3, #12]
 800c206:	899b      	ldrh	r3, [r3, #12]
 800c208:	b29b      	uxth	r3, r3
 800c20a:	4618      	mov	r0, r3
 800c20c:	f7fb f800 	bl	8007210 <lwip_htons>
 800c210:	4603      	mov	r3, r0
 800c212:	b2db      	uxtb	r3, r3
 800c214:	f003 0303 	and.w	r3, r3, #3
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d001      	beq.n	800c220 <tcp_receive+0x794>
 800c21c:	2301      	movs	r3, #1
 800c21e:	e000      	b.n	800c222 <tcp_receive+0x796>
 800c220:	2300      	movs	r3, #0
 800c222:	4423      	add	r3, r4
 800c224:	b29a      	uxth	r2, r3
 800c226:	4b3d      	ldr	r3, [pc, #244]	; (800c31c <tcp_receive+0x890>)
 800c228:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c22a:	4b3c      	ldr	r3, [pc, #240]	; (800c31c <tcp_receive+0x890>)
 800c22c:	881b      	ldrh	r3, [r3, #0]
 800c22e:	461a      	mov	r2, r3
 800c230:	4b38      	ldr	r3, [pc, #224]	; (800c314 <tcp_receive+0x888>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	441a      	add	r2, r3
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c23a:	6879      	ldr	r1, [r7, #4]
 800c23c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c23e:	440b      	add	r3, r1
 800c240:	429a      	cmp	r2, r3
 800c242:	d006      	beq.n	800c252 <tcp_receive+0x7c6>
 800c244:	4b36      	ldr	r3, [pc, #216]	; (800c320 <tcp_receive+0x894>)
 800c246:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800c24a:	4936      	ldr	r1, [pc, #216]	; (800c324 <tcp_receive+0x898>)
 800c24c:	4836      	ldr	r0, [pc, #216]	; (800c328 <tcp_receive+0x89c>)
 800c24e:	f005 fd33 	bl	8011cb8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c256:	2b00      	cmp	r3, #0
 800c258:	f000 80e7 	beq.w	800c42a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c25c:	4b2e      	ldr	r3, [pc, #184]	; (800c318 <tcp_receive+0x88c>)
 800c25e:	68db      	ldr	r3, [r3, #12]
 800c260:	899b      	ldrh	r3, [r3, #12]
 800c262:	b29b      	uxth	r3, r3
 800c264:	4618      	mov	r0, r3
 800c266:	f7fa ffd3 	bl	8007210 <lwip_htons>
 800c26a:	4603      	mov	r3, r0
 800c26c:	b2db      	uxtb	r3, r3
 800c26e:	f003 0301 	and.w	r3, r3, #1
 800c272:	2b00      	cmp	r3, #0
 800c274:	d010      	beq.n	800c298 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800c276:	e00a      	b.n	800c28e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c27c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c282:	681a      	ldr	r2, [r3, #0]
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800c288:	68f8      	ldr	r0, [r7, #12]
 800c28a:	f7fd fd92 	bl	8009db2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c292:	2b00      	cmp	r3, #0
 800c294:	d1f0      	bne.n	800c278 <tcp_receive+0x7ec>
 800c296:	e0c8      	b.n	800c42a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c29c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800c29e:	e052      	b.n	800c346 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c2a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2a2:	68db      	ldr	r3, [r3, #12]
 800c2a4:	899b      	ldrh	r3, [r3, #12]
 800c2a6:	b29b      	uxth	r3, r3
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f7fa ffb1 	bl	8007210 <lwip_htons>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	b2db      	uxtb	r3, r3
 800c2b2:	f003 0301 	and.w	r3, r3, #1
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d03d      	beq.n	800c336 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800c2ba:	4b17      	ldr	r3, [pc, #92]	; (800c318 <tcp_receive+0x88c>)
 800c2bc:	68db      	ldr	r3, [r3, #12]
 800c2be:	899b      	ldrh	r3, [r3, #12]
 800c2c0:	b29b      	uxth	r3, r3
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	f7fa ffa4 	bl	8007210 <lwip_htons>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	b2db      	uxtb	r3, r3
 800c2cc:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d130      	bne.n	800c336 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800c2d4:	4b10      	ldr	r3, [pc, #64]	; (800c318 <tcp_receive+0x88c>)
 800c2d6:	68db      	ldr	r3, [r3, #12]
 800c2d8:	899b      	ldrh	r3, [r3, #12]
 800c2da:	b29c      	uxth	r4, r3
 800c2dc:	2001      	movs	r0, #1
 800c2de:	f7fa ff97 	bl	8007210 <lwip_htons>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	461a      	mov	r2, r3
 800c2e6:	4b0c      	ldr	r3, [pc, #48]	; (800c318 <tcp_receive+0x88c>)
 800c2e8:	68db      	ldr	r3, [r3, #12]
 800c2ea:	4322      	orrs	r2, r4
 800c2ec:	b292      	uxth	r2, r2
 800c2ee:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800c2f0:	4b09      	ldr	r3, [pc, #36]	; (800c318 <tcp_receive+0x88c>)
 800c2f2:	891c      	ldrh	r4, [r3, #8]
 800c2f4:	4b08      	ldr	r3, [pc, #32]	; (800c318 <tcp_receive+0x88c>)
 800c2f6:	68db      	ldr	r3, [r3, #12]
 800c2f8:	899b      	ldrh	r3, [r3, #12]
 800c2fa:	b29b      	uxth	r3, r3
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f7fa ff87 	bl	8007210 <lwip_htons>
 800c302:	4603      	mov	r3, r0
 800c304:	b2db      	uxtb	r3, r3
 800c306:	f003 0303 	and.w	r3, r3, #3
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d00e      	beq.n	800c32c <tcp_receive+0x8a0>
 800c30e:	2301      	movs	r3, #1
 800c310:	e00d      	b.n	800c32e <tcp_receive+0x8a2>
 800c312:	bf00      	nop
 800c314:	2000a804 	.word	0x2000a804
 800c318:	2000a7e4 	.word	0x2000a7e4
 800c31c:	2000a80e 	.word	0x2000a80e
 800c320:	08014ed8 	.word	0x08014ed8
 800c324:	08015280 	.word	0x08015280
 800c328:	08014f24 	.word	0x08014f24
 800c32c:	2300      	movs	r3, #0
 800c32e:	4423      	add	r3, r4
 800c330:	b29a      	uxth	r2, r3
 800c332:	4b98      	ldr	r3, [pc, #608]	; (800c594 <tcp_receive+0xb08>)
 800c334:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800c336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c338:	613b      	str	r3, [r7, #16]
              next = next->next;
 800c33a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800c340:	6938      	ldr	r0, [r7, #16]
 800c342:	f7fd fd36 	bl	8009db2 <tcp_seg_free>
            while (next &&
 800c346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d00e      	beq.n	800c36a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800c34c:	4b91      	ldr	r3, [pc, #580]	; (800c594 <tcp_receive+0xb08>)
 800c34e:	881b      	ldrh	r3, [r3, #0]
 800c350:	461a      	mov	r2, r3
 800c352:	4b91      	ldr	r3, [pc, #580]	; (800c598 <tcp_receive+0xb0c>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	441a      	add	r2, r3
 800c358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c35a:	68db      	ldr	r3, [r3, #12]
 800c35c:	685b      	ldr	r3, [r3, #4]
 800c35e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c360:	8909      	ldrh	r1, [r1, #8]
 800c362:	440b      	add	r3, r1
 800c364:	1ad3      	subs	r3, r2, r3
            while (next &&
 800c366:	2b00      	cmp	r3, #0
 800c368:	da9a      	bge.n	800c2a0 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800c36a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d059      	beq.n	800c424 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800c370:	4b88      	ldr	r3, [pc, #544]	; (800c594 <tcp_receive+0xb08>)
 800c372:	881b      	ldrh	r3, [r3, #0]
 800c374:	461a      	mov	r2, r3
 800c376:	4b88      	ldr	r3, [pc, #544]	; (800c598 <tcp_receive+0xb0c>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	441a      	add	r2, r3
 800c37c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c37e:	68db      	ldr	r3, [r3, #12]
 800c380:	685b      	ldr	r3, [r3, #4]
 800c382:	1ad3      	subs	r3, r2, r3
            if (next &&
 800c384:	2b00      	cmp	r3, #0
 800c386:	dd4d      	ble.n	800c424 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800c388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c38a:	68db      	ldr	r3, [r3, #12]
 800c38c:	685b      	ldr	r3, [r3, #4]
 800c38e:	b29a      	uxth	r2, r3
 800c390:	4b81      	ldr	r3, [pc, #516]	; (800c598 <tcp_receive+0xb0c>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	b29b      	uxth	r3, r3
 800c396:	1ad3      	subs	r3, r2, r3
 800c398:	b29a      	uxth	r2, r3
 800c39a:	4b80      	ldr	r3, [pc, #512]	; (800c59c <tcp_receive+0xb10>)
 800c39c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c39e:	4b7f      	ldr	r3, [pc, #508]	; (800c59c <tcp_receive+0xb10>)
 800c3a0:	68db      	ldr	r3, [r3, #12]
 800c3a2:	899b      	ldrh	r3, [r3, #12]
 800c3a4:	b29b      	uxth	r3, r3
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f7fa ff32 	bl	8007210 <lwip_htons>
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	b2db      	uxtb	r3, r3
 800c3b0:	f003 0302 	and.w	r3, r3, #2
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d005      	beq.n	800c3c4 <tcp_receive+0x938>
                inseg.len -= 1;
 800c3b8:	4b78      	ldr	r3, [pc, #480]	; (800c59c <tcp_receive+0xb10>)
 800c3ba:	891b      	ldrh	r3, [r3, #8]
 800c3bc:	3b01      	subs	r3, #1
 800c3be:	b29a      	uxth	r2, r3
 800c3c0:	4b76      	ldr	r3, [pc, #472]	; (800c59c <tcp_receive+0xb10>)
 800c3c2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800c3c4:	4b75      	ldr	r3, [pc, #468]	; (800c59c <tcp_receive+0xb10>)
 800c3c6:	685b      	ldr	r3, [r3, #4]
 800c3c8:	4a74      	ldr	r2, [pc, #464]	; (800c59c <tcp_receive+0xb10>)
 800c3ca:	8912      	ldrh	r2, [r2, #8]
 800c3cc:	4611      	mov	r1, r2
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f7fc f8f6 	bl	80085c0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800c3d4:	4b71      	ldr	r3, [pc, #452]	; (800c59c <tcp_receive+0xb10>)
 800c3d6:	891c      	ldrh	r4, [r3, #8]
 800c3d8:	4b70      	ldr	r3, [pc, #448]	; (800c59c <tcp_receive+0xb10>)
 800c3da:	68db      	ldr	r3, [r3, #12]
 800c3dc:	899b      	ldrh	r3, [r3, #12]
 800c3de:	b29b      	uxth	r3, r3
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f7fa ff15 	bl	8007210 <lwip_htons>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	b2db      	uxtb	r3, r3
 800c3ea:	f003 0303 	and.w	r3, r3, #3
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d001      	beq.n	800c3f6 <tcp_receive+0x96a>
 800c3f2:	2301      	movs	r3, #1
 800c3f4:	e000      	b.n	800c3f8 <tcp_receive+0x96c>
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	4423      	add	r3, r4
 800c3fa:	b29a      	uxth	r2, r3
 800c3fc:	4b65      	ldr	r3, [pc, #404]	; (800c594 <tcp_receive+0xb08>)
 800c3fe:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800c400:	4b64      	ldr	r3, [pc, #400]	; (800c594 <tcp_receive+0xb08>)
 800c402:	881b      	ldrh	r3, [r3, #0]
 800c404:	461a      	mov	r2, r3
 800c406:	4b64      	ldr	r3, [pc, #400]	; (800c598 <tcp_receive+0xb0c>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	441a      	add	r2, r3
 800c40c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c40e:	68db      	ldr	r3, [r3, #12]
 800c410:	685b      	ldr	r3, [r3, #4]
 800c412:	429a      	cmp	r2, r3
 800c414:	d006      	beq.n	800c424 <tcp_receive+0x998>
 800c416:	4b62      	ldr	r3, [pc, #392]	; (800c5a0 <tcp_receive+0xb14>)
 800c418:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800c41c:	4961      	ldr	r1, [pc, #388]	; (800c5a4 <tcp_receive+0xb18>)
 800c41e:	4862      	ldr	r0, [pc, #392]	; (800c5a8 <tcp_receive+0xb1c>)
 800c420:	f005 fc4a 	bl	8011cb8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c428:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800c42a:	4b5a      	ldr	r3, [pc, #360]	; (800c594 <tcp_receive+0xb08>)
 800c42c:	881b      	ldrh	r3, [r3, #0]
 800c42e:	461a      	mov	r2, r3
 800c430:	4b59      	ldr	r3, [pc, #356]	; (800c598 <tcp_receive+0xb0c>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	441a      	add	r2, r3
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c43e:	4b55      	ldr	r3, [pc, #340]	; (800c594 <tcp_receive+0xb08>)
 800c440:	881b      	ldrh	r3, [r3, #0]
 800c442:	429a      	cmp	r2, r3
 800c444:	d206      	bcs.n	800c454 <tcp_receive+0x9c8>
 800c446:	4b56      	ldr	r3, [pc, #344]	; (800c5a0 <tcp_receive+0xb14>)
 800c448:	f240 6207 	movw	r2, #1543	; 0x607
 800c44c:	4957      	ldr	r1, [pc, #348]	; (800c5ac <tcp_receive+0xb20>)
 800c44e:	4856      	ldr	r0, [pc, #344]	; (800c5a8 <tcp_receive+0xb1c>)
 800c450:	f005 fc32 	bl	8011cb8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c458:	4b4e      	ldr	r3, [pc, #312]	; (800c594 <tcp_receive+0xb08>)
 800c45a:	881b      	ldrh	r3, [r3, #0]
 800c45c:	1ad3      	subs	r3, r2, r3
 800c45e:	b29a      	uxth	r2, r3
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f7fc ffc5 	bl	80093f4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800c46a:	4b4c      	ldr	r3, [pc, #304]	; (800c59c <tcp_receive+0xb10>)
 800c46c:	685b      	ldr	r3, [r3, #4]
 800c46e:	891b      	ldrh	r3, [r3, #8]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d006      	beq.n	800c482 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800c474:	4b49      	ldr	r3, [pc, #292]	; (800c59c <tcp_receive+0xb10>)
 800c476:	685b      	ldr	r3, [r3, #4]
 800c478:	4a4d      	ldr	r2, [pc, #308]	; (800c5b0 <tcp_receive+0xb24>)
 800c47a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800c47c:	4b47      	ldr	r3, [pc, #284]	; (800c59c <tcp_receive+0xb10>)
 800c47e:	2200      	movs	r2, #0
 800c480:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c482:	4b46      	ldr	r3, [pc, #280]	; (800c59c <tcp_receive+0xb10>)
 800c484:	68db      	ldr	r3, [r3, #12]
 800c486:	899b      	ldrh	r3, [r3, #12]
 800c488:	b29b      	uxth	r3, r3
 800c48a:	4618      	mov	r0, r3
 800c48c:	f7fa fec0 	bl	8007210 <lwip_htons>
 800c490:	4603      	mov	r3, r0
 800c492:	b2db      	uxtb	r3, r3
 800c494:	f003 0301 	and.w	r3, r3, #1
 800c498:	2b00      	cmp	r3, #0
 800c49a:	f000 80b8 	beq.w	800c60e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800c49e:	4b45      	ldr	r3, [pc, #276]	; (800c5b4 <tcp_receive+0xb28>)
 800c4a0:	781b      	ldrb	r3, [r3, #0]
 800c4a2:	f043 0320 	orr.w	r3, r3, #32
 800c4a6:	b2da      	uxtb	r2, r3
 800c4a8:	4b42      	ldr	r3, [pc, #264]	; (800c5b4 <tcp_receive+0xb28>)
 800c4aa:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800c4ac:	e0af      	b.n	800c60e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4b2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4b8:	68db      	ldr	r3, [r3, #12]
 800c4ba:	685b      	ldr	r3, [r3, #4]
 800c4bc:	4a36      	ldr	r2, [pc, #216]	; (800c598 <tcp_receive+0xb0c>)
 800c4be:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800c4c0:	68bb      	ldr	r3, [r7, #8]
 800c4c2:	891b      	ldrh	r3, [r3, #8]
 800c4c4:	461c      	mov	r4, r3
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	68db      	ldr	r3, [r3, #12]
 800c4ca:	899b      	ldrh	r3, [r3, #12]
 800c4cc:	b29b      	uxth	r3, r3
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	f7fa fe9e 	bl	8007210 <lwip_htons>
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	b2db      	uxtb	r3, r3
 800c4d8:	f003 0303 	and.w	r3, r3, #3
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d001      	beq.n	800c4e4 <tcp_receive+0xa58>
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	e000      	b.n	800c4e6 <tcp_receive+0xa5a>
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	191a      	adds	r2, r3, r4
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4ec:	441a      	add	r2, r3
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c4f6:	461c      	mov	r4, r3
 800c4f8:	68bb      	ldr	r3, [r7, #8]
 800c4fa:	891b      	ldrh	r3, [r3, #8]
 800c4fc:	461d      	mov	r5, r3
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	68db      	ldr	r3, [r3, #12]
 800c502:	899b      	ldrh	r3, [r3, #12]
 800c504:	b29b      	uxth	r3, r3
 800c506:	4618      	mov	r0, r3
 800c508:	f7fa fe82 	bl	8007210 <lwip_htons>
 800c50c:	4603      	mov	r3, r0
 800c50e:	b2db      	uxtb	r3, r3
 800c510:	f003 0303 	and.w	r3, r3, #3
 800c514:	2b00      	cmp	r3, #0
 800c516:	d001      	beq.n	800c51c <tcp_receive+0xa90>
 800c518:	2301      	movs	r3, #1
 800c51a:	e000      	b.n	800c51e <tcp_receive+0xa92>
 800c51c:	2300      	movs	r3, #0
 800c51e:	442b      	add	r3, r5
 800c520:	429c      	cmp	r4, r3
 800c522:	d206      	bcs.n	800c532 <tcp_receive+0xaa6>
 800c524:	4b1e      	ldr	r3, [pc, #120]	; (800c5a0 <tcp_receive+0xb14>)
 800c526:	f240 622b 	movw	r2, #1579	; 0x62b
 800c52a:	4923      	ldr	r1, [pc, #140]	; (800c5b8 <tcp_receive+0xb2c>)
 800c52c:	481e      	ldr	r0, [pc, #120]	; (800c5a8 <tcp_receive+0xb1c>)
 800c52e:	f005 fbc3 	bl	8011cb8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	891b      	ldrh	r3, [r3, #8]
 800c536:	461c      	mov	r4, r3
 800c538:	68bb      	ldr	r3, [r7, #8]
 800c53a:	68db      	ldr	r3, [r3, #12]
 800c53c:	899b      	ldrh	r3, [r3, #12]
 800c53e:	b29b      	uxth	r3, r3
 800c540:	4618      	mov	r0, r3
 800c542:	f7fa fe65 	bl	8007210 <lwip_htons>
 800c546:	4603      	mov	r3, r0
 800c548:	b2db      	uxtb	r3, r3
 800c54a:	f003 0303 	and.w	r3, r3, #3
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d001      	beq.n	800c556 <tcp_receive+0xaca>
 800c552:	2301      	movs	r3, #1
 800c554:	e000      	b.n	800c558 <tcp_receive+0xacc>
 800c556:	2300      	movs	r3, #0
 800c558:	1919      	adds	r1, r3, r4
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c55e:	b28b      	uxth	r3, r1
 800c560:	1ad3      	subs	r3, r2, r3
 800c562:	b29a      	uxth	r2, r3
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f7fc ff43 	bl	80093f4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800c56e:	68bb      	ldr	r3, [r7, #8]
 800c570:	685b      	ldr	r3, [r3, #4]
 800c572:	891b      	ldrh	r3, [r3, #8]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d028      	beq.n	800c5ca <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800c578:	4b0d      	ldr	r3, [pc, #52]	; (800c5b0 <tcp_receive+0xb24>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d01d      	beq.n	800c5bc <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800c580:	4b0b      	ldr	r3, [pc, #44]	; (800c5b0 <tcp_receive+0xb24>)
 800c582:	681a      	ldr	r2, [r3, #0]
 800c584:	68bb      	ldr	r3, [r7, #8]
 800c586:	685b      	ldr	r3, [r3, #4]
 800c588:	4619      	mov	r1, r3
 800c58a:	4610      	mov	r0, r2
 800c58c:	f7fc fa60 	bl	8008a50 <pbuf_cat>
 800c590:	e018      	b.n	800c5c4 <tcp_receive+0xb38>
 800c592:	bf00      	nop
 800c594:	2000a80e 	.word	0x2000a80e
 800c598:	2000a804 	.word	0x2000a804
 800c59c:	2000a7e4 	.word	0x2000a7e4
 800c5a0:	08014ed8 	.word	0x08014ed8
 800c5a4:	080152b8 	.word	0x080152b8
 800c5a8:	08014f24 	.word	0x08014f24
 800c5ac:	080152f4 	.word	0x080152f4
 800c5b0:	2000a814 	.word	0x2000a814
 800c5b4:	2000a811 	.word	0x2000a811
 800c5b8:	08015314 	.word	0x08015314
            } else {
              recv_data = cseg->p;
 800c5bc:	68bb      	ldr	r3, [r7, #8]
 800c5be:	685b      	ldr	r3, [r3, #4]
 800c5c0:	4a70      	ldr	r2, [pc, #448]	; (800c784 <tcp_receive+0xcf8>)
 800c5c2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c5ca:	68bb      	ldr	r3, [r7, #8]
 800c5cc:	68db      	ldr	r3, [r3, #12]
 800c5ce:	899b      	ldrh	r3, [r3, #12]
 800c5d0:	b29b      	uxth	r3, r3
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f7fa fe1c 	bl	8007210 <lwip_htons>
 800c5d8:	4603      	mov	r3, r0
 800c5da:	b2db      	uxtb	r3, r3
 800c5dc:	f003 0301 	and.w	r3, r3, #1
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d00d      	beq.n	800c600 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800c5e4:	4b68      	ldr	r3, [pc, #416]	; (800c788 <tcp_receive+0xcfc>)
 800c5e6:	781b      	ldrb	r3, [r3, #0]
 800c5e8:	f043 0320 	orr.w	r3, r3, #32
 800c5ec:	b2da      	uxtb	r2, r3
 800c5ee:	4b66      	ldr	r3, [pc, #408]	; (800c788 <tcp_receive+0xcfc>)
 800c5f0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	7d1b      	ldrb	r3, [r3, #20]
 800c5f6:	2b04      	cmp	r3, #4
 800c5f8:	d102      	bne.n	800c600 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2207      	movs	r2, #7
 800c5fe:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	681a      	ldr	r2, [r3, #0]
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800c608:	68b8      	ldr	r0, [r7, #8]
 800c60a:	f7fd fbd2 	bl	8009db2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c612:	2b00      	cmp	r3, #0
 800c614:	d008      	beq.n	800c628 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c61a:	68db      	ldr	r3, [r3, #12]
 800c61c:	685a      	ldr	r2, [r3, #4]
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800c622:	429a      	cmp	r2, r3
 800c624:	f43f af43 	beq.w	800c4ae <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	8b5b      	ldrh	r3, [r3, #26]
 800c62c:	f003 0301 	and.w	r3, r3, #1
 800c630:	2b00      	cmp	r3, #0
 800c632:	d00e      	beq.n	800c652 <tcp_receive+0xbc6>
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	8b5b      	ldrh	r3, [r3, #26]
 800c638:	f023 0301 	bic.w	r3, r3, #1
 800c63c:	b29a      	uxth	r2, r3
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	835a      	strh	r2, [r3, #26]
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	8b5b      	ldrh	r3, [r3, #26]
 800c646:	f043 0302 	orr.w	r3, r3, #2
 800c64a:	b29a      	uxth	r2, r3
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c650:	e188      	b.n	800c964 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	8b5b      	ldrh	r3, [r3, #26]
 800c656:	f043 0301 	orr.w	r3, r3, #1
 800c65a:	b29a      	uxth	r2, r3
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c660:	e180      	b.n	800c964 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c666:	2b00      	cmp	r3, #0
 800c668:	d106      	bne.n	800c678 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800c66a:	4848      	ldr	r0, [pc, #288]	; (800c78c <tcp_receive+0xd00>)
 800c66c:	f7fd fbba 	bl	8009de4 <tcp_seg_copy>
 800c670:	4602      	mov	r2, r0
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	675a      	str	r2, [r3, #116]	; 0x74
 800c676:	e16d      	b.n	800c954 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800c678:	2300      	movs	r3, #0
 800c67a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c680:	63bb      	str	r3, [r7, #56]	; 0x38
 800c682:	e157      	b.n	800c934 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800c684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c686:	68db      	ldr	r3, [r3, #12]
 800c688:	685a      	ldr	r2, [r3, #4]
 800c68a:	4b41      	ldr	r3, [pc, #260]	; (800c790 <tcp_receive+0xd04>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	429a      	cmp	r2, r3
 800c690:	d11d      	bne.n	800c6ce <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800c692:	4b3e      	ldr	r3, [pc, #248]	; (800c78c <tcp_receive+0xd00>)
 800c694:	891a      	ldrh	r2, [r3, #8]
 800c696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c698:	891b      	ldrh	r3, [r3, #8]
 800c69a:	429a      	cmp	r2, r3
 800c69c:	f240 814f 	bls.w	800c93e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c6a0:	483a      	ldr	r0, [pc, #232]	; (800c78c <tcp_receive+0xd00>)
 800c6a2:	f7fd fb9f 	bl	8009de4 <tcp_seg_copy>
 800c6a6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	f000 8149 	beq.w	800c942 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800c6b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d003      	beq.n	800c6be <tcp_receive+0xc32>
                    prev->next = cseg;
 800c6b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6b8:	697a      	ldr	r2, [r7, #20]
 800c6ba:	601a      	str	r2, [r3, #0]
 800c6bc:	e002      	b.n	800c6c4 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	697a      	ldr	r2, [r7, #20]
 800c6c2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800c6c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c6c6:	6978      	ldr	r0, [r7, #20]
 800c6c8:	f7ff f8dc 	bl	800b884 <tcp_oos_insert_segment>
                }
                break;
 800c6cc:	e139      	b.n	800c942 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800c6ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d117      	bne.n	800c704 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800c6d4:	4b2e      	ldr	r3, [pc, #184]	; (800c790 <tcp_receive+0xd04>)
 800c6d6:	681a      	ldr	r2, [r3, #0]
 800c6d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6da:	68db      	ldr	r3, [r3, #12]
 800c6dc:	685b      	ldr	r3, [r3, #4]
 800c6de:	1ad3      	subs	r3, r2, r3
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	da57      	bge.n	800c794 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c6e4:	4829      	ldr	r0, [pc, #164]	; (800c78c <tcp_receive+0xd00>)
 800c6e6:	f7fd fb7d 	bl	8009de4 <tcp_seg_copy>
 800c6ea:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800c6ec:	69bb      	ldr	r3, [r7, #24]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	f000 8129 	beq.w	800c946 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	69ba      	ldr	r2, [r7, #24]
 800c6f8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800c6fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c6fc:	69b8      	ldr	r0, [r7, #24]
 800c6fe:	f7ff f8c1 	bl	800b884 <tcp_oos_insert_segment>
                  }
                  break;
 800c702:	e120      	b.n	800c946 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800c704:	4b22      	ldr	r3, [pc, #136]	; (800c790 <tcp_receive+0xd04>)
 800c706:	681a      	ldr	r2, [r3, #0]
 800c708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c70a:	68db      	ldr	r3, [r3, #12]
 800c70c:	685b      	ldr	r3, [r3, #4]
 800c70e:	1ad3      	subs	r3, r2, r3
 800c710:	3b01      	subs	r3, #1
 800c712:	2b00      	cmp	r3, #0
 800c714:	db3e      	blt.n	800c794 <tcp_receive+0xd08>
 800c716:	4b1e      	ldr	r3, [pc, #120]	; (800c790 <tcp_receive+0xd04>)
 800c718:	681a      	ldr	r2, [r3, #0]
 800c71a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c71c:	68db      	ldr	r3, [r3, #12]
 800c71e:	685b      	ldr	r3, [r3, #4]
 800c720:	1ad3      	subs	r3, r2, r3
 800c722:	3301      	adds	r3, #1
 800c724:	2b00      	cmp	r3, #0
 800c726:	dc35      	bgt.n	800c794 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c728:	4818      	ldr	r0, [pc, #96]	; (800c78c <tcp_receive+0xd00>)
 800c72a:	f7fd fb5b 	bl	8009de4 <tcp_seg_copy>
 800c72e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800c730:	69fb      	ldr	r3, [r7, #28]
 800c732:	2b00      	cmp	r3, #0
 800c734:	f000 8109 	beq.w	800c94a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800c738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c73a:	68db      	ldr	r3, [r3, #12]
 800c73c:	685b      	ldr	r3, [r3, #4]
 800c73e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c740:	8912      	ldrh	r2, [r2, #8]
 800c742:	441a      	add	r2, r3
 800c744:	4b12      	ldr	r3, [pc, #72]	; (800c790 <tcp_receive+0xd04>)
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	1ad3      	subs	r3, r2, r3
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	dd12      	ble.n	800c774 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800c74e:	4b10      	ldr	r3, [pc, #64]	; (800c790 <tcp_receive+0xd04>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	b29a      	uxth	r2, r3
 800c754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c756:	68db      	ldr	r3, [r3, #12]
 800c758:	685b      	ldr	r3, [r3, #4]
 800c75a:	b29b      	uxth	r3, r3
 800c75c:	1ad3      	subs	r3, r2, r3
 800c75e:	b29a      	uxth	r2, r3
 800c760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c762:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800c764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c766:	685a      	ldr	r2, [r3, #4]
 800c768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c76a:	891b      	ldrh	r3, [r3, #8]
 800c76c:	4619      	mov	r1, r3
 800c76e:	4610      	mov	r0, r2
 800c770:	f7fb ff26 	bl	80085c0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800c774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c776:	69fa      	ldr	r2, [r7, #28]
 800c778:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800c77a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c77c:	69f8      	ldr	r0, [r7, #28]
 800c77e:	f7ff f881 	bl	800b884 <tcp_oos_insert_segment>
                  }
                  break;
 800c782:	e0e2      	b.n	800c94a <tcp_receive+0xebe>
 800c784:	2000a814 	.word	0x2000a814
 800c788:	2000a811 	.word	0x2000a811
 800c78c:	2000a7e4 	.word	0x2000a7e4
 800c790:	2000a804 	.word	0x2000a804
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800c794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c796:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800c798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	f040 80c6 	bne.w	800c92e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800c7a2:	4b80      	ldr	r3, [pc, #512]	; (800c9a4 <tcp_receive+0xf18>)
 800c7a4:	681a      	ldr	r2, [r3, #0]
 800c7a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7a8:	68db      	ldr	r3, [r3, #12]
 800c7aa:	685b      	ldr	r3, [r3, #4]
 800c7ac:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	f340 80bd 	ble.w	800c92e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7b6:	68db      	ldr	r3, [r3, #12]
 800c7b8:	899b      	ldrh	r3, [r3, #12]
 800c7ba:	b29b      	uxth	r3, r3
 800c7bc:	4618      	mov	r0, r3
 800c7be:	f7fa fd27 	bl	8007210 <lwip_htons>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	b2db      	uxtb	r3, r3
 800c7c6:	f003 0301 	and.w	r3, r3, #1
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	f040 80bf 	bne.w	800c94e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800c7d0:	4875      	ldr	r0, [pc, #468]	; (800c9a8 <tcp_receive+0xf1c>)
 800c7d2:	f7fd fb07 	bl	8009de4 <tcp_seg_copy>
 800c7d6:	4602      	mov	r2, r0
 800c7d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7da:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800c7dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	f000 80b6 	beq.w	800c952 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800c7e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7e8:	68db      	ldr	r3, [r3, #12]
 800c7ea:	685b      	ldr	r3, [r3, #4]
 800c7ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7ee:	8912      	ldrh	r2, [r2, #8]
 800c7f0:	441a      	add	r2, r3
 800c7f2:	4b6c      	ldr	r3, [pc, #432]	; (800c9a4 <tcp_receive+0xf18>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	1ad3      	subs	r3, r2, r3
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	dd12      	ble.n	800c822 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800c7fc:	4b69      	ldr	r3, [pc, #420]	; (800c9a4 <tcp_receive+0xf18>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	b29a      	uxth	r2, r3
 800c802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c804:	68db      	ldr	r3, [r3, #12]
 800c806:	685b      	ldr	r3, [r3, #4]
 800c808:	b29b      	uxth	r3, r3
 800c80a:	1ad3      	subs	r3, r2, r3
 800c80c:	b29a      	uxth	r2, r3
 800c80e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c810:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800c812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c814:	685a      	ldr	r2, [r3, #4]
 800c816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c818:	891b      	ldrh	r3, [r3, #8]
 800c81a:	4619      	mov	r1, r3
 800c81c:	4610      	mov	r0, r2
 800c81e:	f7fb fecf 	bl	80085c0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800c822:	4b62      	ldr	r3, [pc, #392]	; (800c9ac <tcp_receive+0xf20>)
 800c824:	881b      	ldrh	r3, [r3, #0]
 800c826:	461a      	mov	r2, r3
 800c828:	4b5e      	ldr	r3, [pc, #376]	; (800c9a4 <tcp_receive+0xf18>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	441a      	add	r2, r3
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c832:	6879      	ldr	r1, [r7, #4]
 800c834:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c836:	440b      	add	r3, r1
 800c838:	1ad3      	subs	r3, r2, r3
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	f340 8089 	ble.w	800c952 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800c840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	68db      	ldr	r3, [r3, #12]
 800c846:	899b      	ldrh	r3, [r3, #12]
 800c848:	b29b      	uxth	r3, r3
 800c84a:	4618      	mov	r0, r3
 800c84c:	f7fa fce0 	bl	8007210 <lwip_htons>
 800c850:	4603      	mov	r3, r0
 800c852:	b2db      	uxtb	r3, r3
 800c854:	f003 0301 	and.w	r3, r3, #1
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d022      	beq.n	800c8a2 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800c85c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	68db      	ldr	r3, [r3, #12]
 800c862:	899b      	ldrh	r3, [r3, #12]
 800c864:	b29b      	uxth	r3, r3
 800c866:	b21b      	sxth	r3, r3
 800c868:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c86c:	b21c      	sxth	r4, r3
 800c86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	68db      	ldr	r3, [r3, #12]
 800c874:	899b      	ldrh	r3, [r3, #12]
 800c876:	b29b      	uxth	r3, r3
 800c878:	4618      	mov	r0, r3
 800c87a:	f7fa fcc9 	bl	8007210 <lwip_htons>
 800c87e:	4603      	mov	r3, r0
 800c880:	b2db      	uxtb	r3, r3
 800c882:	b29b      	uxth	r3, r3
 800c884:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c888:	b29b      	uxth	r3, r3
 800c88a:	4618      	mov	r0, r3
 800c88c:	f7fa fcc0 	bl	8007210 <lwip_htons>
 800c890:	4603      	mov	r3, r0
 800c892:	b21b      	sxth	r3, r3
 800c894:	4323      	orrs	r3, r4
 800c896:	b21a      	sxth	r2, r3
 800c898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	68db      	ldr	r3, [r3, #12]
 800c89e:	b292      	uxth	r2, r2
 800c8a0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8a6:	b29a      	uxth	r2, r3
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c8ac:	4413      	add	r3, r2
 800c8ae:	b299      	uxth	r1, r3
 800c8b0:	4b3c      	ldr	r3, [pc, #240]	; (800c9a4 <tcp_receive+0xf18>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	b29a      	uxth	r2, r3
 800c8b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	1a8a      	subs	r2, r1, r2
 800c8bc:	b292      	uxth	r2, r2
 800c8be:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800c8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	685a      	ldr	r2, [r3, #4]
 800c8c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	891b      	ldrh	r3, [r3, #8]
 800c8cc:	4619      	mov	r1, r3
 800c8ce:	4610      	mov	r0, r2
 800c8d0:	f7fb fe76 	bl	80085c0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800c8d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	891c      	ldrh	r4, [r3, #8]
 800c8da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	68db      	ldr	r3, [r3, #12]
 800c8e0:	899b      	ldrh	r3, [r3, #12]
 800c8e2:	b29b      	uxth	r3, r3
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	f7fa fc93 	bl	8007210 <lwip_htons>
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	b2db      	uxtb	r3, r3
 800c8ee:	f003 0303 	and.w	r3, r3, #3
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d001      	beq.n	800c8fa <tcp_receive+0xe6e>
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	e000      	b.n	800c8fc <tcp_receive+0xe70>
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	4423      	add	r3, r4
 800c8fe:	b29a      	uxth	r2, r3
 800c900:	4b2a      	ldr	r3, [pc, #168]	; (800c9ac <tcp_receive+0xf20>)
 800c902:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c904:	4b29      	ldr	r3, [pc, #164]	; (800c9ac <tcp_receive+0xf20>)
 800c906:	881b      	ldrh	r3, [r3, #0]
 800c908:	461a      	mov	r2, r3
 800c90a:	4b26      	ldr	r3, [pc, #152]	; (800c9a4 <tcp_receive+0xf18>)
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	441a      	add	r2, r3
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c914:	6879      	ldr	r1, [r7, #4]
 800c916:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c918:	440b      	add	r3, r1
 800c91a:	429a      	cmp	r2, r3
 800c91c:	d019      	beq.n	800c952 <tcp_receive+0xec6>
 800c91e:	4b24      	ldr	r3, [pc, #144]	; (800c9b0 <tcp_receive+0xf24>)
 800c920:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800c924:	4923      	ldr	r1, [pc, #140]	; (800c9b4 <tcp_receive+0xf28>)
 800c926:	4824      	ldr	r0, [pc, #144]	; (800c9b8 <tcp_receive+0xf2c>)
 800c928:	f005 f9c6 	bl	8011cb8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800c92c:	e011      	b.n	800c952 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c92e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	63bb      	str	r3, [r7, #56]	; 0x38
 800c934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c936:	2b00      	cmp	r3, #0
 800c938:	f47f aea4 	bne.w	800c684 <tcp_receive+0xbf8>
 800c93c:	e00a      	b.n	800c954 <tcp_receive+0xec8>
                break;
 800c93e:	bf00      	nop
 800c940:	e008      	b.n	800c954 <tcp_receive+0xec8>
                break;
 800c942:	bf00      	nop
 800c944:	e006      	b.n	800c954 <tcp_receive+0xec8>
                  break;
 800c946:	bf00      	nop
 800c948:	e004      	b.n	800c954 <tcp_receive+0xec8>
                  break;
 800c94a:	bf00      	nop
 800c94c:	e002      	b.n	800c954 <tcp_receive+0xec8>
                  break;
 800c94e:	bf00      	nop
 800c950:	e000      	b.n	800c954 <tcp_receive+0xec8>
                break;
 800c952:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800c954:	6878      	ldr	r0, [r7, #4]
 800c956:	f001 fa33 	bl	800ddc0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800c95a:	e003      	b.n	800c964 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f001 fa2f 	bl	800ddc0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c962:	e01a      	b.n	800c99a <tcp_receive+0xf0e>
 800c964:	e019      	b.n	800c99a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800c966:	4b0f      	ldr	r3, [pc, #60]	; (800c9a4 <tcp_receive+0xf18>)
 800c968:	681a      	ldr	r2, [r3, #0]
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c96e:	1ad3      	subs	r3, r2, r3
 800c970:	2b00      	cmp	r3, #0
 800c972:	db0a      	blt.n	800c98a <tcp_receive+0xefe>
 800c974:	4b0b      	ldr	r3, [pc, #44]	; (800c9a4 <tcp_receive+0xf18>)
 800c976:	681a      	ldr	r2, [r3, #0]
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c97c:	6879      	ldr	r1, [r7, #4]
 800c97e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c980:	440b      	add	r3, r1
 800c982:	1ad3      	subs	r3, r2, r3
 800c984:	3301      	adds	r3, #1
 800c986:	2b00      	cmp	r3, #0
 800c988:	dd07      	ble.n	800c99a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	8b5b      	ldrh	r3, [r3, #26]
 800c98e:	f043 0302 	orr.w	r3, r3, #2
 800c992:	b29a      	uxth	r2, r3
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800c998:	e7ff      	b.n	800c99a <tcp_receive+0xf0e>
 800c99a:	bf00      	nop
 800c99c:	3750      	adds	r7, #80	; 0x50
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bdb0      	pop	{r4, r5, r7, pc}
 800c9a2:	bf00      	nop
 800c9a4:	2000a804 	.word	0x2000a804
 800c9a8:	2000a7e4 	.word	0x2000a7e4
 800c9ac:	2000a80e 	.word	0x2000a80e
 800c9b0:	08014ed8 	.word	0x08014ed8
 800c9b4:	08015280 	.word	0x08015280
 800c9b8:	08014f24 	.word	0x08014f24

0800c9bc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800c9bc:	b480      	push	{r7}
 800c9be:	b083      	sub	sp, #12
 800c9c0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800c9c2:	4b15      	ldr	r3, [pc, #84]	; (800ca18 <tcp_get_next_optbyte+0x5c>)
 800c9c4:	881b      	ldrh	r3, [r3, #0]
 800c9c6:	1c5a      	adds	r2, r3, #1
 800c9c8:	b291      	uxth	r1, r2
 800c9ca:	4a13      	ldr	r2, [pc, #76]	; (800ca18 <tcp_get_next_optbyte+0x5c>)
 800c9cc:	8011      	strh	r1, [r2, #0]
 800c9ce:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c9d0:	4b12      	ldr	r3, [pc, #72]	; (800ca1c <tcp_get_next_optbyte+0x60>)
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d004      	beq.n	800c9e2 <tcp_get_next_optbyte+0x26>
 800c9d8:	4b11      	ldr	r3, [pc, #68]	; (800ca20 <tcp_get_next_optbyte+0x64>)
 800c9da:	881b      	ldrh	r3, [r3, #0]
 800c9dc:	88fa      	ldrh	r2, [r7, #6]
 800c9de:	429a      	cmp	r2, r3
 800c9e0:	d208      	bcs.n	800c9f4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800c9e2:	4b10      	ldr	r3, [pc, #64]	; (800ca24 <tcp_get_next_optbyte+0x68>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	3314      	adds	r3, #20
 800c9e8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800c9ea:	88fb      	ldrh	r3, [r7, #6]
 800c9ec:	683a      	ldr	r2, [r7, #0]
 800c9ee:	4413      	add	r3, r2
 800c9f0:	781b      	ldrb	r3, [r3, #0]
 800c9f2:	e00b      	b.n	800ca0c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800c9f4:	88fb      	ldrh	r3, [r7, #6]
 800c9f6:	b2da      	uxtb	r2, r3
 800c9f8:	4b09      	ldr	r3, [pc, #36]	; (800ca20 <tcp_get_next_optbyte+0x64>)
 800c9fa:	881b      	ldrh	r3, [r3, #0]
 800c9fc:	b2db      	uxtb	r3, r3
 800c9fe:	1ad3      	subs	r3, r2, r3
 800ca00:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800ca02:	4b06      	ldr	r3, [pc, #24]	; (800ca1c <tcp_get_next_optbyte+0x60>)
 800ca04:	681a      	ldr	r2, [r3, #0]
 800ca06:	797b      	ldrb	r3, [r7, #5]
 800ca08:	4413      	add	r3, r2
 800ca0a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	370c      	adds	r7, #12
 800ca10:	46bd      	mov	sp, r7
 800ca12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca16:	4770      	bx	lr
 800ca18:	2000a800 	.word	0x2000a800
 800ca1c:	2000a7fc 	.word	0x2000a7fc
 800ca20:	2000a7fa 	.word	0x2000a7fa
 800ca24:	2000a7f4 	.word	0x2000a7f4

0800ca28 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b084      	sub	sp, #16
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d106      	bne.n	800ca44 <tcp_parseopt+0x1c>
 800ca36:	4b32      	ldr	r3, [pc, #200]	; (800cb00 <tcp_parseopt+0xd8>)
 800ca38:	f240 727d 	movw	r2, #1917	; 0x77d
 800ca3c:	4931      	ldr	r1, [pc, #196]	; (800cb04 <tcp_parseopt+0xdc>)
 800ca3e:	4832      	ldr	r0, [pc, #200]	; (800cb08 <tcp_parseopt+0xe0>)
 800ca40:	f005 f93a 	bl	8011cb8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800ca44:	4b31      	ldr	r3, [pc, #196]	; (800cb0c <tcp_parseopt+0xe4>)
 800ca46:	881b      	ldrh	r3, [r3, #0]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d055      	beq.n	800caf8 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ca4c:	4b30      	ldr	r3, [pc, #192]	; (800cb10 <tcp_parseopt+0xe8>)
 800ca4e:	2200      	movs	r2, #0
 800ca50:	801a      	strh	r2, [r3, #0]
 800ca52:	e045      	b.n	800cae0 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800ca54:	f7ff ffb2 	bl	800c9bc <tcp_get_next_optbyte>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800ca5c:	7bfb      	ldrb	r3, [r7, #15]
 800ca5e:	2b02      	cmp	r3, #2
 800ca60:	d006      	beq.n	800ca70 <tcp_parseopt+0x48>
 800ca62:	2b02      	cmp	r3, #2
 800ca64:	dc2b      	bgt.n	800cabe <tcp_parseopt+0x96>
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d041      	beq.n	800caee <tcp_parseopt+0xc6>
 800ca6a:	2b01      	cmp	r3, #1
 800ca6c:	d127      	bne.n	800cabe <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800ca6e:	e037      	b.n	800cae0 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800ca70:	f7ff ffa4 	bl	800c9bc <tcp_get_next_optbyte>
 800ca74:	4603      	mov	r3, r0
 800ca76:	2b04      	cmp	r3, #4
 800ca78:	d13b      	bne.n	800caf2 <tcp_parseopt+0xca>
 800ca7a:	4b25      	ldr	r3, [pc, #148]	; (800cb10 <tcp_parseopt+0xe8>)
 800ca7c:	881b      	ldrh	r3, [r3, #0]
 800ca7e:	3301      	adds	r3, #1
 800ca80:	4a22      	ldr	r2, [pc, #136]	; (800cb0c <tcp_parseopt+0xe4>)
 800ca82:	8812      	ldrh	r2, [r2, #0]
 800ca84:	4293      	cmp	r3, r2
 800ca86:	da34      	bge.n	800caf2 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800ca88:	f7ff ff98 	bl	800c9bc <tcp_get_next_optbyte>
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	b29b      	uxth	r3, r3
 800ca90:	021b      	lsls	r3, r3, #8
 800ca92:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800ca94:	f7ff ff92 	bl	800c9bc <tcp_get_next_optbyte>
 800ca98:	4603      	mov	r3, r0
 800ca9a:	b29a      	uxth	r2, r3
 800ca9c:	89bb      	ldrh	r3, [r7, #12]
 800ca9e:	4313      	orrs	r3, r2
 800caa0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800caa2:	89bb      	ldrh	r3, [r7, #12]
 800caa4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800caa8:	d804      	bhi.n	800cab4 <tcp_parseopt+0x8c>
 800caaa:	89bb      	ldrh	r3, [r7, #12]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d001      	beq.n	800cab4 <tcp_parseopt+0x8c>
 800cab0:	89ba      	ldrh	r2, [r7, #12]
 800cab2:	e001      	b.n	800cab8 <tcp_parseopt+0x90>
 800cab4:	f44f 7206 	mov.w	r2, #536	; 0x218
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800cabc:	e010      	b.n	800cae0 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800cabe:	f7ff ff7d 	bl	800c9bc <tcp_get_next_optbyte>
 800cac2:	4603      	mov	r3, r0
 800cac4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800cac6:	7afb      	ldrb	r3, [r7, #11]
 800cac8:	2b01      	cmp	r3, #1
 800caca:	d914      	bls.n	800caf6 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800cacc:	7afb      	ldrb	r3, [r7, #11]
 800cace:	b29a      	uxth	r2, r3
 800cad0:	4b0f      	ldr	r3, [pc, #60]	; (800cb10 <tcp_parseopt+0xe8>)
 800cad2:	881b      	ldrh	r3, [r3, #0]
 800cad4:	4413      	add	r3, r2
 800cad6:	b29b      	uxth	r3, r3
 800cad8:	3b02      	subs	r3, #2
 800cada:	b29a      	uxth	r2, r3
 800cadc:	4b0c      	ldr	r3, [pc, #48]	; (800cb10 <tcp_parseopt+0xe8>)
 800cade:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800cae0:	4b0b      	ldr	r3, [pc, #44]	; (800cb10 <tcp_parseopt+0xe8>)
 800cae2:	881a      	ldrh	r2, [r3, #0]
 800cae4:	4b09      	ldr	r3, [pc, #36]	; (800cb0c <tcp_parseopt+0xe4>)
 800cae6:	881b      	ldrh	r3, [r3, #0]
 800cae8:	429a      	cmp	r2, r3
 800caea:	d3b3      	bcc.n	800ca54 <tcp_parseopt+0x2c>
 800caec:	e004      	b.n	800caf8 <tcp_parseopt+0xd0>
          return;
 800caee:	bf00      	nop
 800caf0:	e002      	b.n	800caf8 <tcp_parseopt+0xd0>
            return;
 800caf2:	bf00      	nop
 800caf4:	e000      	b.n	800caf8 <tcp_parseopt+0xd0>
            return;
 800caf6:	bf00      	nop
      }
    }
  }
}
 800caf8:	3710      	adds	r7, #16
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd80      	pop	{r7, pc}
 800cafe:	bf00      	nop
 800cb00:	08014ed8 	.word	0x08014ed8
 800cb04:	0801533c 	.word	0x0801533c
 800cb08:	08014f24 	.word	0x08014f24
 800cb0c:	2000a7f8 	.word	0x2000a7f8
 800cb10:	2000a800 	.word	0x2000a800

0800cb14 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800cb14:	b480      	push	{r7}
 800cb16:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800cb18:	4b05      	ldr	r3, [pc, #20]	; (800cb30 <tcp_trigger_input_pcb_close+0x1c>)
 800cb1a:	781b      	ldrb	r3, [r3, #0]
 800cb1c:	f043 0310 	orr.w	r3, r3, #16
 800cb20:	b2da      	uxtb	r2, r3
 800cb22:	4b03      	ldr	r3, [pc, #12]	; (800cb30 <tcp_trigger_input_pcb_close+0x1c>)
 800cb24:	701a      	strb	r2, [r3, #0]
}
 800cb26:	bf00      	nop
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2e:	4770      	bx	lr
 800cb30:	2000a811 	.word	0x2000a811

0800cb34 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b084      	sub	sp, #16
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	60f8      	str	r0, [r7, #12]
 800cb3c:	60b9      	str	r1, [r7, #8]
 800cb3e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d00a      	beq.n	800cb5c <tcp_route+0x28>
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	7a1b      	ldrb	r3, [r3, #8]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d006      	beq.n	800cb5c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	7a1b      	ldrb	r3, [r3, #8]
 800cb52:	4618      	mov	r0, r3
 800cb54:	f7fb fb5a 	bl	800820c <netif_get_by_index>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	e003      	b.n	800cb64 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800cb5c:	6878      	ldr	r0, [r7, #4]
 800cb5e:	f002 ffe3 	bl	800fb28 <ip4_route>
 800cb62:	4603      	mov	r3, r0
  }
}
 800cb64:	4618      	mov	r0, r3
 800cb66:	3710      	adds	r7, #16
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	bd80      	pop	{r7, pc}

0800cb6c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800cb6c:	b590      	push	{r4, r7, lr}
 800cb6e:	b087      	sub	sp, #28
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	60f8      	str	r0, [r7, #12]
 800cb74:	60b9      	str	r1, [r7, #8]
 800cb76:	603b      	str	r3, [r7, #0]
 800cb78:	4613      	mov	r3, r2
 800cb7a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d105      	bne.n	800cb8e <tcp_create_segment+0x22>
 800cb82:	4b44      	ldr	r3, [pc, #272]	; (800cc94 <tcp_create_segment+0x128>)
 800cb84:	22a3      	movs	r2, #163	; 0xa3
 800cb86:	4944      	ldr	r1, [pc, #272]	; (800cc98 <tcp_create_segment+0x12c>)
 800cb88:	4844      	ldr	r0, [pc, #272]	; (800cc9c <tcp_create_segment+0x130>)
 800cb8a:	f005 f895 	bl	8011cb8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800cb8e:	68bb      	ldr	r3, [r7, #8]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d105      	bne.n	800cba0 <tcp_create_segment+0x34>
 800cb94:	4b3f      	ldr	r3, [pc, #252]	; (800cc94 <tcp_create_segment+0x128>)
 800cb96:	22a4      	movs	r2, #164	; 0xa4
 800cb98:	4941      	ldr	r1, [pc, #260]	; (800cca0 <tcp_create_segment+0x134>)
 800cb9a:	4840      	ldr	r0, [pc, #256]	; (800cc9c <tcp_create_segment+0x130>)
 800cb9c:	f005 f88c 	bl	8011cb8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cba0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cba4:	009b      	lsls	r3, r3, #2
 800cba6:	b2db      	uxtb	r3, r3
 800cba8:	f003 0304 	and.w	r3, r3, #4
 800cbac:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800cbae:	2003      	movs	r0, #3
 800cbb0:	f7fa ffa6 	bl	8007b00 <memp_malloc>
 800cbb4:	6138      	str	r0, [r7, #16]
 800cbb6:	693b      	ldr	r3, [r7, #16]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d104      	bne.n	800cbc6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800cbbc:	68b8      	ldr	r0, [r7, #8]
 800cbbe:	f7fb fe85 	bl	80088cc <pbuf_free>
    return NULL;
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	e061      	b.n	800cc8a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800cbc6:	693b      	ldr	r3, [r7, #16]
 800cbc8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800cbcc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800cbce:	693b      	ldr	r3, [r7, #16]
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800cbd4:	693b      	ldr	r3, [r7, #16]
 800cbd6:	68ba      	ldr	r2, [r7, #8]
 800cbd8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800cbda:	68bb      	ldr	r3, [r7, #8]
 800cbdc:	891a      	ldrh	r2, [r3, #8]
 800cbde:	7dfb      	ldrb	r3, [r7, #23]
 800cbe0:	b29b      	uxth	r3, r3
 800cbe2:	429a      	cmp	r2, r3
 800cbe4:	d205      	bcs.n	800cbf2 <tcp_create_segment+0x86>
 800cbe6:	4b2b      	ldr	r3, [pc, #172]	; (800cc94 <tcp_create_segment+0x128>)
 800cbe8:	22b0      	movs	r2, #176	; 0xb0
 800cbea:	492e      	ldr	r1, [pc, #184]	; (800cca4 <tcp_create_segment+0x138>)
 800cbec:	482b      	ldr	r0, [pc, #172]	; (800cc9c <tcp_create_segment+0x130>)
 800cbee:	f005 f863 	bl	8011cb8 <iprintf>
  seg->len = p->tot_len - optlen;
 800cbf2:	68bb      	ldr	r3, [r7, #8]
 800cbf4:	891a      	ldrh	r2, [r3, #8]
 800cbf6:	7dfb      	ldrb	r3, [r7, #23]
 800cbf8:	b29b      	uxth	r3, r3
 800cbfa:	1ad3      	subs	r3, r2, r3
 800cbfc:	b29a      	uxth	r2, r3
 800cbfe:	693b      	ldr	r3, [r7, #16]
 800cc00:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800cc02:	2114      	movs	r1, #20
 800cc04:	68b8      	ldr	r0, [r7, #8]
 800cc06:	f7fb fdcb 	bl	80087a0 <pbuf_add_header>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d004      	beq.n	800cc1a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800cc10:	6938      	ldr	r0, [r7, #16]
 800cc12:	f7fd f8ce 	bl	8009db2 <tcp_seg_free>
    return NULL;
 800cc16:	2300      	movs	r3, #0
 800cc18:	e037      	b.n	800cc8a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800cc1a:	693b      	ldr	r3, [r7, #16]
 800cc1c:	685b      	ldr	r3, [r3, #4]
 800cc1e:	685a      	ldr	r2, [r3, #4]
 800cc20:	693b      	ldr	r3, [r7, #16]
 800cc22:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	8ada      	ldrh	r2, [r3, #22]
 800cc28:	693b      	ldr	r3, [r7, #16]
 800cc2a:	68dc      	ldr	r4, [r3, #12]
 800cc2c:	4610      	mov	r0, r2
 800cc2e:	f7fa faef 	bl	8007210 <lwip_htons>
 800cc32:	4603      	mov	r3, r0
 800cc34:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	8b1a      	ldrh	r2, [r3, #24]
 800cc3a:	693b      	ldr	r3, [r7, #16]
 800cc3c:	68dc      	ldr	r4, [r3, #12]
 800cc3e:	4610      	mov	r0, r2
 800cc40:	f7fa fae6 	bl	8007210 <lwip_htons>
 800cc44:	4603      	mov	r3, r0
 800cc46:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800cc48:	693b      	ldr	r3, [r7, #16]
 800cc4a:	68dc      	ldr	r4, [r3, #12]
 800cc4c:	6838      	ldr	r0, [r7, #0]
 800cc4e:	f7fa faf4 	bl	800723a <lwip_htonl>
 800cc52:	4603      	mov	r3, r0
 800cc54:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800cc56:	7dfb      	ldrb	r3, [r7, #23]
 800cc58:	089b      	lsrs	r3, r3, #2
 800cc5a:	b2db      	uxtb	r3, r3
 800cc5c:	b29b      	uxth	r3, r3
 800cc5e:	3305      	adds	r3, #5
 800cc60:	b29b      	uxth	r3, r3
 800cc62:	031b      	lsls	r3, r3, #12
 800cc64:	b29a      	uxth	r2, r3
 800cc66:	79fb      	ldrb	r3, [r7, #7]
 800cc68:	b29b      	uxth	r3, r3
 800cc6a:	4313      	orrs	r3, r2
 800cc6c:	b29a      	uxth	r2, r3
 800cc6e:	693b      	ldr	r3, [r7, #16]
 800cc70:	68dc      	ldr	r4, [r3, #12]
 800cc72:	4610      	mov	r0, r2
 800cc74:	f7fa facc 	bl	8007210 <lwip_htons>
 800cc78:	4603      	mov	r3, r0
 800cc7a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800cc7c:	693b      	ldr	r3, [r7, #16]
 800cc7e:	68db      	ldr	r3, [r3, #12]
 800cc80:	2200      	movs	r2, #0
 800cc82:	749a      	strb	r2, [r3, #18]
 800cc84:	2200      	movs	r2, #0
 800cc86:	74da      	strb	r2, [r3, #19]
  return seg;
 800cc88:	693b      	ldr	r3, [r7, #16]
}
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	371c      	adds	r7, #28
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bd90      	pop	{r4, r7, pc}
 800cc92:	bf00      	nop
 800cc94:	08015358 	.word	0x08015358
 800cc98:	0801538c 	.word	0x0801538c
 800cc9c:	080153ac 	.word	0x080153ac
 800cca0:	080153d4 	.word	0x080153d4
 800cca4:	080153f8 	.word	0x080153f8

0800cca8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800cca8:	b590      	push	{r4, r7, lr}
 800ccaa:	b08b      	sub	sp, #44	; 0x2c
 800ccac:	af02      	add	r7, sp, #8
 800ccae:	6078      	str	r0, [r7, #4]
 800ccb0:	460b      	mov	r3, r1
 800ccb2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	61fb      	str	r3, [r7, #28]
 800ccb8:	2300      	movs	r3, #0
 800ccba:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d106      	bne.n	800ccd4 <tcp_split_unsent_seg+0x2c>
 800ccc6:	4b95      	ldr	r3, [pc, #596]	; (800cf1c <tcp_split_unsent_seg+0x274>)
 800ccc8:	f240 324b 	movw	r2, #843	; 0x34b
 800cccc:	4994      	ldr	r1, [pc, #592]	; (800cf20 <tcp_split_unsent_seg+0x278>)
 800ccce:	4895      	ldr	r0, [pc, #596]	; (800cf24 <tcp_split_unsent_seg+0x27c>)
 800ccd0:	f004 fff2 	bl	8011cb8 <iprintf>

  useg = pcb->unsent;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccd8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800ccda:	697b      	ldr	r3, [r7, #20]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d102      	bne.n	800cce6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800cce0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cce4:	e116      	b.n	800cf14 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800cce6:	887b      	ldrh	r3, [r7, #2]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d109      	bne.n	800cd00 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800ccec:	4b8b      	ldr	r3, [pc, #556]	; (800cf1c <tcp_split_unsent_seg+0x274>)
 800ccee:	f240 3253 	movw	r2, #851	; 0x353
 800ccf2:	498d      	ldr	r1, [pc, #564]	; (800cf28 <tcp_split_unsent_seg+0x280>)
 800ccf4:	488b      	ldr	r0, [pc, #556]	; (800cf24 <tcp_split_unsent_seg+0x27c>)
 800ccf6:	f004 ffdf 	bl	8011cb8 <iprintf>
    return ERR_VAL;
 800ccfa:	f06f 0305 	mvn.w	r3, #5
 800ccfe:	e109      	b.n	800cf14 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800cd00:	697b      	ldr	r3, [r7, #20]
 800cd02:	891b      	ldrh	r3, [r3, #8]
 800cd04:	887a      	ldrh	r2, [r7, #2]
 800cd06:	429a      	cmp	r2, r3
 800cd08:	d301      	bcc.n	800cd0e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	e102      	b.n	800cf14 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cd12:	887a      	ldrh	r2, [r7, #2]
 800cd14:	429a      	cmp	r2, r3
 800cd16:	d906      	bls.n	800cd26 <tcp_split_unsent_seg+0x7e>
 800cd18:	4b80      	ldr	r3, [pc, #512]	; (800cf1c <tcp_split_unsent_seg+0x274>)
 800cd1a:	f240 325b 	movw	r2, #859	; 0x35b
 800cd1e:	4983      	ldr	r1, [pc, #524]	; (800cf2c <tcp_split_unsent_seg+0x284>)
 800cd20:	4880      	ldr	r0, [pc, #512]	; (800cf24 <tcp_split_unsent_seg+0x27c>)
 800cd22:	f004 ffc9 	bl	8011cb8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800cd26:	697b      	ldr	r3, [r7, #20]
 800cd28:	891b      	ldrh	r3, [r3, #8]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d106      	bne.n	800cd3c <tcp_split_unsent_seg+0x94>
 800cd2e:	4b7b      	ldr	r3, [pc, #492]	; (800cf1c <tcp_split_unsent_seg+0x274>)
 800cd30:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800cd34:	497e      	ldr	r1, [pc, #504]	; (800cf30 <tcp_split_unsent_seg+0x288>)
 800cd36:	487b      	ldr	r0, [pc, #492]	; (800cf24 <tcp_split_unsent_seg+0x27c>)
 800cd38:	f004 ffbe 	bl	8011cb8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800cd3c:	697b      	ldr	r3, [r7, #20]
 800cd3e:	7a9b      	ldrb	r3, [r3, #10]
 800cd40:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800cd42:	7bfb      	ldrb	r3, [r7, #15]
 800cd44:	009b      	lsls	r3, r3, #2
 800cd46:	b2db      	uxtb	r3, r3
 800cd48:	f003 0304 	and.w	r3, r3, #4
 800cd4c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800cd4e:	697b      	ldr	r3, [r7, #20]
 800cd50:	891a      	ldrh	r2, [r3, #8]
 800cd52:	887b      	ldrh	r3, [r7, #2]
 800cd54:	1ad3      	subs	r3, r2, r3
 800cd56:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800cd58:	7bbb      	ldrb	r3, [r7, #14]
 800cd5a:	b29a      	uxth	r2, r3
 800cd5c:	89bb      	ldrh	r3, [r7, #12]
 800cd5e:	4413      	add	r3, r2
 800cd60:	b29b      	uxth	r3, r3
 800cd62:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cd66:	4619      	mov	r1, r3
 800cd68:	2036      	movs	r0, #54	; 0x36
 800cd6a:	f7fb facb 	bl	8008304 <pbuf_alloc>
 800cd6e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800cd70:	693b      	ldr	r3, [r7, #16]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	f000 80b7 	beq.w	800cee6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800cd78:	697b      	ldr	r3, [r7, #20]
 800cd7a:	685b      	ldr	r3, [r3, #4]
 800cd7c:	891a      	ldrh	r2, [r3, #8]
 800cd7e:	697b      	ldr	r3, [r7, #20]
 800cd80:	891b      	ldrh	r3, [r3, #8]
 800cd82:	1ad3      	subs	r3, r2, r3
 800cd84:	b29a      	uxth	r2, r3
 800cd86:	887b      	ldrh	r3, [r7, #2]
 800cd88:	4413      	add	r3, r2
 800cd8a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800cd8c:	697b      	ldr	r3, [r7, #20]
 800cd8e:	6858      	ldr	r0, [r3, #4]
 800cd90:	693b      	ldr	r3, [r7, #16]
 800cd92:	685a      	ldr	r2, [r3, #4]
 800cd94:	7bbb      	ldrb	r3, [r7, #14]
 800cd96:	18d1      	adds	r1, r2, r3
 800cd98:	897b      	ldrh	r3, [r7, #10]
 800cd9a:	89ba      	ldrh	r2, [r7, #12]
 800cd9c:	f7fb ff80 	bl	8008ca0 <pbuf_copy_partial>
 800cda0:	4603      	mov	r3, r0
 800cda2:	461a      	mov	r2, r3
 800cda4:	89bb      	ldrh	r3, [r7, #12]
 800cda6:	4293      	cmp	r3, r2
 800cda8:	f040 809f 	bne.w	800ceea <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800cdac:	697b      	ldr	r3, [r7, #20]
 800cdae:	68db      	ldr	r3, [r3, #12]
 800cdb0:	899b      	ldrh	r3, [r3, #12]
 800cdb2:	b29b      	uxth	r3, r3
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	f7fa fa2b 	bl	8007210 <lwip_htons>
 800cdba:	4603      	mov	r3, r0
 800cdbc:	b2db      	uxtb	r3, r3
 800cdbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cdc2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800cdc8:	7efb      	ldrb	r3, [r7, #27]
 800cdca:	f003 0308 	and.w	r3, r3, #8
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d007      	beq.n	800cde2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800cdd2:	7efb      	ldrb	r3, [r7, #27]
 800cdd4:	f023 0308 	bic.w	r3, r3, #8
 800cdd8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800cdda:	7ebb      	ldrb	r3, [r7, #26]
 800cddc:	f043 0308 	orr.w	r3, r3, #8
 800cde0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800cde2:	7efb      	ldrb	r3, [r7, #27]
 800cde4:	f003 0301 	and.w	r3, r3, #1
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d007      	beq.n	800cdfc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800cdec:	7efb      	ldrb	r3, [r7, #27]
 800cdee:	f023 0301 	bic.w	r3, r3, #1
 800cdf2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800cdf4:	7ebb      	ldrb	r3, [r7, #26]
 800cdf6:	f043 0301 	orr.w	r3, r3, #1
 800cdfa:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800cdfc:	697b      	ldr	r3, [r7, #20]
 800cdfe:	68db      	ldr	r3, [r3, #12]
 800ce00:	685b      	ldr	r3, [r3, #4]
 800ce02:	4618      	mov	r0, r3
 800ce04:	f7fa fa19 	bl	800723a <lwip_htonl>
 800ce08:	4602      	mov	r2, r0
 800ce0a:	887b      	ldrh	r3, [r7, #2]
 800ce0c:	18d1      	adds	r1, r2, r3
 800ce0e:	7eba      	ldrb	r2, [r7, #26]
 800ce10:	7bfb      	ldrb	r3, [r7, #15]
 800ce12:	9300      	str	r3, [sp, #0]
 800ce14:	460b      	mov	r3, r1
 800ce16:	6939      	ldr	r1, [r7, #16]
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	f7ff fea7 	bl	800cb6c <tcp_create_segment>
 800ce1e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800ce20:	69fb      	ldr	r3, [r7, #28]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d063      	beq.n	800ceee <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800ce26:	697b      	ldr	r3, [r7, #20]
 800ce28:	685b      	ldr	r3, [r3, #4]
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f7fb fdd6 	bl	80089dc <pbuf_clen>
 800ce30:	4603      	mov	r3, r0
 800ce32:	461a      	mov	r2, r3
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ce3a:	1a9b      	subs	r3, r3, r2
 800ce3c:	b29a      	uxth	r2, r3
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800ce44:	697b      	ldr	r3, [r7, #20]
 800ce46:	6858      	ldr	r0, [r3, #4]
 800ce48:	697b      	ldr	r3, [r7, #20]
 800ce4a:	685b      	ldr	r3, [r3, #4]
 800ce4c:	891a      	ldrh	r2, [r3, #8]
 800ce4e:	89bb      	ldrh	r3, [r7, #12]
 800ce50:	1ad3      	subs	r3, r2, r3
 800ce52:	b29b      	uxth	r3, r3
 800ce54:	4619      	mov	r1, r3
 800ce56:	f7fb fbb3 	bl	80085c0 <pbuf_realloc>
  useg->len -= remainder;
 800ce5a:	697b      	ldr	r3, [r7, #20]
 800ce5c:	891a      	ldrh	r2, [r3, #8]
 800ce5e:	89bb      	ldrh	r3, [r7, #12]
 800ce60:	1ad3      	subs	r3, r2, r3
 800ce62:	b29a      	uxth	r2, r3
 800ce64:	697b      	ldr	r3, [r7, #20]
 800ce66:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800ce68:	697b      	ldr	r3, [r7, #20]
 800ce6a:	68db      	ldr	r3, [r3, #12]
 800ce6c:	899b      	ldrh	r3, [r3, #12]
 800ce6e:	b29c      	uxth	r4, r3
 800ce70:	7efb      	ldrb	r3, [r7, #27]
 800ce72:	b29b      	uxth	r3, r3
 800ce74:	4618      	mov	r0, r3
 800ce76:	f7fa f9cb 	bl	8007210 <lwip_htons>
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	461a      	mov	r2, r3
 800ce7e:	697b      	ldr	r3, [r7, #20]
 800ce80:	68db      	ldr	r3, [r3, #12]
 800ce82:	4322      	orrs	r2, r4
 800ce84:	b292      	uxth	r2, r2
 800ce86:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800ce88:	697b      	ldr	r3, [r7, #20]
 800ce8a:	685b      	ldr	r3, [r3, #4]
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f7fb fda5 	bl	80089dc <pbuf_clen>
 800ce92:	4603      	mov	r3, r0
 800ce94:	461a      	mov	r2, r3
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ce9c:	4413      	add	r3, r2
 800ce9e:	b29a      	uxth	r2, r3
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800cea6:	69fb      	ldr	r3, [r7, #28]
 800cea8:	685b      	ldr	r3, [r3, #4]
 800ceaa:	4618      	mov	r0, r3
 800ceac:	f7fb fd96 	bl	80089dc <pbuf_clen>
 800ceb0:	4603      	mov	r3, r0
 800ceb2:	461a      	mov	r2, r3
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ceba:	4413      	add	r3, r2
 800cebc:	b29a      	uxth	r2, r3
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800cec4:	697b      	ldr	r3, [r7, #20]
 800cec6:	681a      	ldr	r2, [r3, #0]
 800cec8:	69fb      	ldr	r3, [r7, #28]
 800ceca:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800cecc:	697b      	ldr	r3, [r7, #20]
 800cece:	69fa      	ldr	r2, [r7, #28]
 800ced0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800ced2:	69fb      	ldr	r3, [r7, #28]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d103      	bne.n	800cee2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2200      	movs	r2, #0
 800cede:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800cee2:	2300      	movs	r3, #0
 800cee4:	e016      	b.n	800cf14 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800cee6:	bf00      	nop
 800cee8:	e002      	b.n	800cef0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ceea:	bf00      	nop
 800ceec:	e000      	b.n	800cef0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ceee:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800cef0:	69fb      	ldr	r3, [r7, #28]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d006      	beq.n	800cf04 <tcp_split_unsent_seg+0x25c>
 800cef6:	4b09      	ldr	r3, [pc, #36]	; (800cf1c <tcp_split_unsent_seg+0x274>)
 800cef8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800cefc:	490d      	ldr	r1, [pc, #52]	; (800cf34 <tcp_split_unsent_seg+0x28c>)
 800cefe:	4809      	ldr	r0, [pc, #36]	; (800cf24 <tcp_split_unsent_seg+0x27c>)
 800cf00:	f004 feda 	bl	8011cb8 <iprintf>
  if (p != NULL) {
 800cf04:	693b      	ldr	r3, [r7, #16]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d002      	beq.n	800cf10 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800cf0a:	6938      	ldr	r0, [r7, #16]
 800cf0c:	f7fb fcde 	bl	80088cc <pbuf_free>
  }

  return ERR_MEM;
 800cf10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800cf14:	4618      	mov	r0, r3
 800cf16:	3724      	adds	r7, #36	; 0x24
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	bd90      	pop	{r4, r7, pc}
 800cf1c:	08015358 	.word	0x08015358
 800cf20:	080156ec 	.word	0x080156ec
 800cf24:	080153ac 	.word	0x080153ac
 800cf28:	08015710 	.word	0x08015710
 800cf2c:	08015734 	.word	0x08015734
 800cf30:	08015744 	.word	0x08015744
 800cf34:	08015754 	.word	0x08015754

0800cf38 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800cf38:	b590      	push	{r4, r7, lr}
 800cf3a:	b085      	sub	sp, #20
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d106      	bne.n	800cf54 <tcp_send_fin+0x1c>
 800cf46:	4b21      	ldr	r3, [pc, #132]	; (800cfcc <tcp_send_fin+0x94>)
 800cf48:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800cf4c:	4920      	ldr	r1, [pc, #128]	; (800cfd0 <tcp_send_fin+0x98>)
 800cf4e:	4821      	ldr	r0, [pc, #132]	; (800cfd4 <tcp_send_fin+0x9c>)
 800cf50:	f004 feb2 	bl	8011cb8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d02e      	beq.n	800cfba <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf60:	60fb      	str	r3, [r7, #12]
 800cf62:	e002      	b.n	800cf6a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d1f8      	bne.n	800cf64 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	68db      	ldr	r3, [r3, #12]
 800cf76:	899b      	ldrh	r3, [r3, #12]
 800cf78:	b29b      	uxth	r3, r3
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	f7fa f948 	bl	8007210 <lwip_htons>
 800cf80:	4603      	mov	r3, r0
 800cf82:	b2db      	uxtb	r3, r3
 800cf84:	f003 0307 	and.w	r3, r3, #7
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d116      	bne.n	800cfba <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	68db      	ldr	r3, [r3, #12]
 800cf90:	899b      	ldrh	r3, [r3, #12]
 800cf92:	b29c      	uxth	r4, r3
 800cf94:	2001      	movs	r0, #1
 800cf96:	f7fa f93b 	bl	8007210 <lwip_htons>
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	461a      	mov	r2, r3
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	68db      	ldr	r3, [r3, #12]
 800cfa2:	4322      	orrs	r2, r4
 800cfa4:	b292      	uxth	r2, r2
 800cfa6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	8b5b      	ldrh	r3, [r3, #26]
 800cfac:	f043 0320 	orr.w	r3, r3, #32
 800cfb0:	b29a      	uxth	r2, r3
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	e004      	b.n	800cfc4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800cfba:	2101      	movs	r1, #1
 800cfbc:	6878      	ldr	r0, [r7, #4]
 800cfbe:	f000 f80b 	bl	800cfd8 <tcp_enqueue_flags>
 800cfc2:	4603      	mov	r3, r0
}
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	3714      	adds	r7, #20
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	bd90      	pop	{r4, r7, pc}
 800cfcc:	08015358 	.word	0x08015358
 800cfd0:	08015760 	.word	0x08015760
 800cfd4:	080153ac 	.word	0x080153ac

0800cfd8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b08a      	sub	sp, #40	; 0x28
 800cfdc:	af02      	add	r7, sp, #8
 800cfde:	6078      	str	r0, [r7, #4]
 800cfe0:	460b      	mov	r3, r1
 800cfe2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800cfe8:	2300      	movs	r3, #0
 800cfea:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800cfec:	78fb      	ldrb	r3, [r7, #3]
 800cfee:	f003 0303 	and.w	r3, r3, #3
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d106      	bne.n	800d004 <tcp_enqueue_flags+0x2c>
 800cff6:	4b67      	ldr	r3, [pc, #412]	; (800d194 <tcp_enqueue_flags+0x1bc>)
 800cff8:	f240 4211 	movw	r2, #1041	; 0x411
 800cffc:	4966      	ldr	r1, [pc, #408]	; (800d198 <tcp_enqueue_flags+0x1c0>)
 800cffe:	4867      	ldr	r0, [pc, #412]	; (800d19c <tcp_enqueue_flags+0x1c4>)
 800d000:	f004 fe5a 	bl	8011cb8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d106      	bne.n	800d018 <tcp_enqueue_flags+0x40>
 800d00a:	4b62      	ldr	r3, [pc, #392]	; (800d194 <tcp_enqueue_flags+0x1bc>)
 800d00c:	f240 4213 	movw	r2, #1043	; 0x413
 800d010:	4963      	ldr	r1, [pc, #396]	; (800d1a0 <tcp_enqueue_flags+0x1c8>)
 800d012:	4862      	ldr	r0, [pc, #392]	; (800d19c <tcp_enqueue_flags+0x1c4>)
 800d014:	f004 fe50 	bl	8011cb8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800d018:	78fb      	ldrb	r3, [r7, #3]
 800d01a:	f003 0302 	and.w	r3, r3, #2
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d001      	beq.n	800d026 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800d022:	2301      	movs	r3, #1
 800d024:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d026:	7ffb      	ldrb	r3, [r7, #31]
 800d028:	009b      	lsls	r3, r3, #2
 800d02a:	b2db      	uxtb	r3, r3
 800d02c:	f003 0304 	and.w	r3, r3, #4
 800d030:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d032:	7dfb      	ldrb	r3, [r7, #23]
 800d034:	b29b      	uxth	r3, r3
 800d036:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d03a:	4619      	mov	r1, r3
 800d03c:	2036      	movs	r0, #54	; 0x36
 800d03e:	f7fb f961 	bl	8008304 <pbuf_alloc>
 800d042:	6138      	str	r0, [r7, #16]
 800d044:	693b      	ldr	r3, [r7, #16]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d109      	bne.n	800d05e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	8b5b      	ldrh	r3, [r3, #26]
 800d04e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d052:	b29a      	uxth	r2, r3
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d058:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d05c:	e095      	b.n	800d18a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800d05e:	693b      	ldr	r3, [r7, #16]
 800d060:	895a      	ldrh	r2, [r3, #10]
 800d062:	7dfb      	ldrb	r3, [r7, #23]
 800d064:	b29b      	uxth	r3, r3
 800d066:	429a      	cmp	r2, r3
 800d068:	d206      	bcs.n	800d078 <tcp_enqueue_flags+0xa0>
 800d06a:	4b4a      	ldr	r3, [pc, #296]	; (800d194 <tcp_enqueue_flags+0x1bc>)
 800d06c:	f240 4239 	movw	r2, #1081	; 0x439
 800d070:	494c      	ldr	r1, [pc, #304]	; (800d1a4 <tcp_enqueue_flags+0x1cc>)
 800d072:	484a      	ldr	r0, [pc, #296]	; (800d19c <tcp_enqueue_flags+0x1c4>)
 800d074:	f004 fe20 	bl	8011cb8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800d07c:	78fa      	ldrb	r2, [r7, #3]
 800d07e:	7ffb      	ldrb	r3, [r7, #31]
 800d080:	9300      	str	r3, [sp, #0]
 800d082:	460b      	mov	r3, r1
 800d084:	6939      	ldr	r1, [r7, #16]
 800d086:	6878      	ldr	r0, [r7, #4]
 800d088:	f7ff fd70 	bl	800cb6c <tcp_create_segment>
 800d08c:	60f8      	str	r0, [r7, #12]
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d109      	bne.n	800d0a8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	8b5b      	ldrh	r3, [r3, #26]
 800d098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d09c:	b29a      	uxth	r2, r3
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d0a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d0a6:	e070      	b.n	800d18a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	68db      	ldr	r3, [r3, #12]
 800d0ac:	f003 0303 	and.w	r3, r3, #3
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d006      	beq.n	800d0c2 <tcp_enqueue_flags+0xea>
 800d0b4:	4b37      	ldr	r3, [pc, #220]	; (800d194 <tcp_enqueue_flags+0x1bc>)
 800d0b6:	f240 4242 	movw	r2, #1090	; 0x442
 800d0ba:	493b      	ldr	r1, [pc, #236]	; (800d1a8 <tcp_enqueue_flags+0x1d0>)
 800d0bc:	4837      	ldr	r0, [pc, #220]	; (800d19c <tcp_enqueue_flags+0x1c4>)
 800d0be:	f004 fdfb 	bl	8011cb8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	891b      	ldrh	r3, [r3, #8]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d006      	beq.n	800d0d8 <tcp_enqueue_flags+0x100>
 800d0ca:	4b32      	ldr	r3, [pc, #200]	; (800d194 <tcp_enqueue_flags+0x1bc>)
 800d0cc:	f240 4243 	movw	r2, #1091	; 0x443
 800d0d0:	4936      	ldr	r1, [pc, #216]	; (800d1ac <tcp_enqueue_flags+0x1d4>)
 800d0d2:	4832      	ldr	r0, [pc, #200]	; (800d19c <tcp_enqueue_flags+0x1c4>)
 800d0d4:	f004 fdf0 	bl	8011cb8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d103      	bne.n	800d0e8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	68fa      	ldr	r2, [r7, #12]
 800d0e4:	66da      	str	r2, [r3, #108]	; 0x6c
 800d0e6:	e00d      	b.n	800d104 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0ec:	61bb      	str	r3, [r7, #24]
 800d0ee:	e002      	b.n	800d0f6 <tcp_enqueue_flags+0x11e>
 800d0f0:	69bb      	ldr	r3, [r7, #24]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	61bb      	str	r3, [r7, #24]
 800d0f6:	69bb      	ldr	r3, [r7, #24]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d1f8      	bne.n	800d0f0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800d0fe:	69bb      	ldr	r3, [r7, #24]
 800d100:	68fa      	ldr	r2, [r7, #12]
 800d102:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2200      	movs	r2, #0
 800d108:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800d10c:	78fb      	ldrb	r3, [r7, #3]
 800d10e:	f003 0302 	and.w	r3, r3, #2
 800d112:	2b00      	cmp	r3, #0
 800d114:	d104      	bne.n	800d120 <tcp_enqueue_flags+0x148>
 800d116:	78fb      	ldrb	r3, [r7, #3]
 800d118:	f003 0301 	and.w	r3, r3, #1
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d004      	beq.n	800d12a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d124:	1c5a      	adds	r2, r3, #1
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800d12a:	78fb      	ldrb	r3, [r7, #3]
 800d12c:	f003 0301 	and.w	r3, r3, #1
 800d130:	2b00      	cmp	r3, #0
 800d132:	d006      	beq.n	800d142 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	8b5b      	ldrh	r3, [r3, #26]
 800d138:	f043 0320 	orr.w	r3, r3, #32
 800d13c:	b29a      	uxth	r2, r3
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	685b      	ldr	r3, [r3, #4]
 800d146:	4618      	mov	r0, r3
 800d148:	f7fb fc48 	bl	80089dc <pbuf_clen>
 800d14c:	4603      	mov	r3, r0
 800d14e:	461a      	mov	r2, r3
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d156:	4413      	add	r3, r2
 800d158:	b29a      	uxth	r2, r3
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d166:	2b00      	cmp	r3, #0
 800d168:	d00e      	beq.n	800d188 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d10a      	bne.n	800d188 <tcp_enqueue_flags+0x1b0>
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d176:	2b00      	cmp	r3, #0
 800d178:	d106      	bne.n	800d188 <tcp_enqueue_flags+0x1b0>
 800d17a:	4b06      	ldr	r3, [pc, #24]	; (800d194 <tcp_enqueue_flags+0x1bc>)
 800d17c:	f240 4265 	movw	r2, #1125	; 0x465
 800d180:	490b      	ldr	r1, [pc, #44]	; (800d1b0 <tcp_enqueue_flags+0x1d8>)
 800d182:	4806      	ldr	r0, [pc, #24]	; (800d19c <tcp_enqueue_flags+0x1c4>)
 800d184:	f004 fd98 	bl	8011cb8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800d188:	2300      	movs	r3, #0
}
 800d18a:	4618      	mov	r0, r3
 800d18c:	3720      	adds	r7, #32
 800d18e:	46bd      	mov	sp, r7
 800d190:	bd80      	pop	{r7, pc}
 800d192:	bf00      	nop
 800d194:	08015358 	.word	0x08015358
 800d198:	0801577c 	.word	0x0801577c
 800d19c:	080153ac 	.word	0x080153ac
 800d1a0:	080157d4 	.word	0x080157d4
 800d1a4:	080157f4 	.word	0x080157f4
 800d1a8:	08015830 	.word	0x08015830
 800d1ac:	08015848 	.word	0x08015848
 800d1b0:	08015874 	.word	0x08015874

0800d1b4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800d1b4:	b5b0      	push	{r4, r5, r7, lr}
 800d1b6:	b08a      	sub	sp, #40	; 0x28
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d106      	bne.n	800d1d0 <tcp_output+0x1c>
 800d1c2:	4b8a      	ldr	r3, [pc, #552]	; (800d3ec <tcp_output+0x238>)
 800d1c4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800d1c8:	4989      	ldr	r1, [pc, #548]	; (800d3f0 <tcp_output+0x23c>)
 800d1ca:	488a      	ldr	r0, [pc, #552]	; (800d3f4 <tcp_output+0x240>)
 800d1cc:	f004 fd74 	bl	8011cb8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	7d1b      	ldrb	r3, [r3, #20]
 800d1d4:	2b01      	cmp	r3, #1
 800d1d6:	d106      	bne.n	800d1e6 <tcp_output+0x32>
 800d1d8:	4b84      	ldr	r3, [pc, #528]	; (800d3ec <tcp_output+0x238>)
 800d1da:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800d1de:	4986      	ldr	r1, [pc, #536]	; (800d3f8 <tcp_output+0x244>)
 800d1e0:	4884      	ldr	r0, [pc, #528]	; (800d3f4 <tcp_output+0x240>)
 800d1e2:	f004 fd69 	bl	8011cb8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800d1e6:	4b85      	ldr	r3, [pc, #532]	; (800d3fc <tcp_output+0x248>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	687a      	ldr	r2, [r7, #4]
 800d1ec:	429a      	cmp	r2, r3
 800d1ee:	d101      	bne.n	800d1f4 <tcp_output+0x40>
    return ERR_OK;
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	e1ce      	b.n	800d592 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d200:	4293      	cmp	r3, r2
 800d202:	bf28      	it	cs
 800d204:	4613      	movcs	r3, r2
 800d206:	b29b      	uxth	r3, r3
 800d208:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d20e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800d210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d212:	2b00      	cmp	r3, #0
 800d214:	d10b      	bne.n	800d22e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	8b5b      	ldrh	r3, [r3, #26]
 800d21a:	f003 0302 	and.w	r3, r3, #2
 800d21e:	2b00      	cmp	r3, #0
 800d220:	f000 81aa 	beq.w	800d578 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800d224:	6878      	ldr	r0, [r7, #4]
 800d226:	f000 fdcb 	bl	800ddc0 <tcp_send_empty_ack>
 800d22a:	4603      	mov	r3, r0
 800d22c:	e1b1      	b.n	800d592 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800d22e:	6879      	ldr	r1, [r7, #4]
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	3304      	adds	r3, #4
 800d234:	461a      	mov	r2, r3
 800d236:	6878      	ldr	r0, [r7, #4]
 800d238:	f7ff fc7c 	bl	800cb34 <tcp_route>
 800d23c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800d23e:	697b      	ldr	r3, [r7, #20]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d102      	bne.n	800d24a <tcp_output+0x96>
    return ERR_RTE;
 800d244:	f06f 0303 	mvn.w	r3, #3
 800d248:	e1a3      	b.n	800d592 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d003      	beq.n	800d258 <tcp_output+0xa4>
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d111      	bne.n	800d27c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800d258:	697b      	ldr	r3, [r7, #20]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d002      	beq.n	800d264 <tcp_output+0xb0>
 800d25e:	697b      	ldr	r3, [r7, #20]
 800d260:	3304      	adds	r3, #4
 800d262:	e000      	b.n	800d266 <tcp_output+0xb2>
 800d264:	2300      	movs	r3, #0
 800d266:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800d268:	693b      	ldr	r3, [r7, #16]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d102      	bne.n	800d274 <tcp_output+0xc0>
      return ERR_RTE;
 800d26e:	f06f 0303 	mvn.w	r3, #3
 800d272:	e18e      	b.n	800d592 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d274:	693b      	ldr	r3, [r7, #16]
 800d276:	681a      	ldr	r2, [r3, #0]
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800d27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d27e:	68db      	ldr	r3, [r3, #12]
 800d280:	685b      	ldr	r3, [r3, #4]
 800d282:	4618      	mov	r0, r3
 800d284:	f7f9 ffd9 	bl	800723a <lwip_htonl>
 800d288:	4602      	mov	r2, r0
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d28e:	1ad3      	subs	r3, r2, r3
 800d290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d292:	8912      	ldrh	r2, [r2, #8]
 800d294:	4413      	add	r3, r2
 800d296:	69ba      	ldr	r2, [r7, #24]
 800d298:	429a      	cmp	r2, r3
 800d29a:	d227      	bcs.n	800d2ec <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d2a2:	461a      	mov	r2, r3
 800d2a4:	69bb      	ldr	r3, [r7, #24]
 800d2a6:	4293      	cmp	r3, r2
 800d2a8:	d114      	bne.n	800d2d4 <tcp_output+0x120>
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d110      	bne.n	800d2d4 <tcp_output+0x120>
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d10b      	bne.n	800d2d4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	2200      	movs	r2, #0
 800d2c0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	2201      	movs	r2, #1
 800d2c8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	8b5b      	ldrh	r3, [r3, #26]
 800d2d8:	f003 0302 	and.w	r3, r3, #2
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	f000 814d 	beq.w	800d57c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800d2e2:	6878      	ldr	r0, [r7, #4]
 800d2e4:	f000 fd6c 	bl	800ddc0 <tcp_send_empty_ack>
 800d2e8:	4603      	mov	r3, r0
 800d2ea:	e152      	b.n	800d592 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2f8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800d2fa:	6a3b      	ldr	r3, [r7, #32]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	f000 811c 	beq.w	800d53a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800d302:	e002      	b.n	800d30a <tcp_output+0x156>
 800d304:	6a3b      	ldr	r3, [r7, #32]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	623b      	str	r3, [r7, #32]
 800d30a:	6a3b      	ldr	r3, [r7, #32]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d1f8      	bne.n	800d304 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800d312:	e112      	b.n	800d53a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800d314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d316:	68db      	ldr	r3, [r3, #12]
 800d318:	899b      	ldrh	r3, [r3, #12]
 800d31a:	b29b      	uxth	r3, r3
 800d31c:	4618      	mov	r0, r3
 800d31e:	f7f9 ff77 	bl	8007210 <lwip_htons>
 800d322:	4603      	mov	r3, r0
 800d324:	b2db      	uxtb	r3, r3
 800d326:	f003 0304 	and.w	r3, r3, #4
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d006      	beq.n	800d33c <tcp_output+0x188>
 800d32e:	4b2f      	ldr	r3, [pc, #188]	; (800d3ec <tcp_output+0x238>)
 800d330:	f240 5236 	movw	r2, #1334	; 0x536
 800d334:	4932      	ldr	r1, [pc, #200]	; (800d400 <tcp_output+0x24c>)
 800d336:	482f      	ldr	r0, [pc, #188]	; (800d3f4 <tcp_output+0x240>)
 800d338:	f004 fcbe 	bl	8011cb8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d340:	2b00      	cmp	r3, #0
 800d342:	d01f      	beq.n	800d384 <tcp_output+0x1d0>
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	8b5b      	ldrh	r3, [r3, #26]
 800d348:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d119      	bne.n	800d384 <tcp_output+0x1d0>
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d354:	2b00      	cmp	r3, #0
 800d356:	d00b      	beq.n	800d370 <tcp_output+0x1bc>
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d110      	bne.n	800d384 <tcp_output+0x1d0>
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d366:	891a      	ldrh	r2, [r3, #8]
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d36c:	429a      	cmp	r2, r3
 800d36e:	d209      	bcs.n	800d384 <tcp_output+0x1d0>
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d376:	2b00      	cmp	r3, #0
 800d378:	d004      	beq.n	800d384 <tcp_output+0x1d0>
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d380:	2b08      	cmp	r3, #8
 800d382:	d901      	bls.n	800d388 <tcp_output+0x1d4>
 800d384:	2301      	movs	r3, #1
 800d386:	e000      	b.n	800d38a <tcp_output+0x1d6>
 800d388:	2300      	movs	r3, #0
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d106      	bne.n	800d39c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	8b5b      	ldrh	r3, [r3, #26]
 800d392:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d396:	2b00      	cmp	r3, #0
 800d398:	f000 80e4 	beq.w	800d564 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	7d1b      	ldrb	r3, [r3, #20]
 800d3a0:	2b02      	cmp	r3, #2
 800d3a2:	d00d      	beq.n	800d3c0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800d3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3a6:	68db      	ldr	r3, [r3, #12]
 800d3a8:	899b      	ldrh	r3, [r3, #12]
 800d3aa:	b29c      	uxth	r4, r3
 800d3ac:	2010      	movs	r0, #16
 800d3ae:	f7f9 ff2f 	bl	8007210 <lwip_htons>
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	461a      	mov	r2, r3
 800d3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3b8:	68db      	ldr	r3, [r3, #12]
 800d3ba:	4322      	orrs	r2, r4
 800d3bc:	b292      	uxth	r2, r2
 800d3be:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800d3c0:	697a      	ldr	r2, [r7, #20]
 800d3c2:	6879      	ldr	r1, [r7, #4]
 800d3c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d3c6:	f000 f909 	bl	800d5dc <tcp_output_segment>
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800d3ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d016      	beq.n	800d404 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	8b5b      	ldrh	r3, [r3, #26]
 800d3da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3de:	b29a      	uxth	r2, r3
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	835a      	strh	r2, [r3, #26]
      return err;
 800d3e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d3e8:	e0d3      	b.n	800d592 <tcp_output+0x3de>
 800d3ea:	bf00      	nop
 800d3ec:	08015358 	.word	0x08015358
 800d3f0:	0801589c 	.word	0x0801589c
 800d3f4:	080153ac 	.word	0x080153ac
 800d3f8:	080158b4 	.word	0x080158b4
 800d3fc:	2000a818 	.word	0x2000a818
 800d400:	080158dc 	.word	0x080158dc
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800d404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d406:	681a      	ldr	r2, [r3, #0]
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	7d1b      	ldrb	r3, [r3, #20]
 800d410:	2b02      	cmp	r3, #2
 800d412:	d006      	beq.n	800d422 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	8b5b      	ldrh	r3, [r3, #26]
 800d418:	f023 0303 	bic.w	r3, r3, #3
 800d41c:	b29a      	uxth	r2, r3
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d424:	68db      	ldr	r3, [r3, #12]
 800d426:	685b      	ldr	r3, [r3, #4]
 800d428:	4618      	mov	r0, r3
 800d42a:	f7f9 ff06 	bl	800723a <lwip_htonl>
 800d42e:	4604      	mov	r4, r0
 800d430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d432:	891b      	ldrh	r3, [r3, #8]
 800d434:	461d      	mov	r5, r3
 800d436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d438:	68db      	ldr	r3, [r3, #12]
 800d43a:	899b      	ldrh	r3, [r3, #12]
 800d43c:	b29b      	uxth	r3, r3
 800d43e:	4618      	mov	r0, r3
 800d440:	f7f9 fee6 	bl	8007210 <lwip_htons>
 800d444:	4603      	mov	r3, r0
 800d446:	b2db      	uxtb	r3, r3
 800d448:	f003 0303 	and.w	r3, r3, #3
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d001      	beq.n	800d454 <tcp_output+0x2a0>
 800d450:	2301      	movs	r3, #1
 800d452:	e000      	b.n	800d456 <tcp_output+0x2a2>
 800d454:	2300      	movs	r3, #0
 800d456:	442b      	add	r3, r5
 800d458:	4423      	add	r3, r4
 800d45a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d460:	68bb      	ldr	r3, [r7, #8]
 800d462:	1ad3      	subs	r3, r2, r3
 800d464:	2b00      	cmp	r3, #0
 800d466:	da02      	bge.n	800d46e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	68ba      	ldr	r2, [r7, #8]
 800d46c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800d46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d470:	891b      	ldrh	r3, [r3, #8]
 800d472:	461c      	mov	r4, r3
 800d474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d476:	68db      	ldr	r3, [r3, #12]
 800d478:	899b      	ldrh	r3, [r3, #12]
 800d47a:	b29b      	uxth	r3, r3
 800d47c:	4618      	mov	r0, r3
 800d47e:	f7f9 fec7 	bl	8007210 <lwip_htons>
 800d482:	4603      	mov	r3, r0
 800d484:	b2db      	uxtb	r3, r3
 800d486:	f003 0303 	and.w	r3, r3, #3
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d001      	beq.n	800d492 <tcp_output+0x2de>
 800d48e:	2301      	movs	r3, #1
 800d490:	e000      	b.n	800d494 <tcp_output+0x2e0>
 800d492:	2300      	movs	r3, #0
 800d494:	4423      	add	r3, r4
 800d496:	2b00      	cmp	r3, #0
 800d498:	d049      	beq.n	800d52e <tcp_output+0x37a>
      seg->next = NULL;
 800d49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d49c:	2200      	movs	r2, #0
 800d49e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d105      	bne.n	800d4b4 <tcp_output+0x300>
        pcb->unacked = seg;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4ac:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800d4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4b0:	623b      	str	r3, [r7, #32]
 800d4b2:	e03f      	b.n	800d534 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800d4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4b6:	68db      	ldr	r3, [r3, #12]
 800d4b8:	685b      	ldr	r3, [r3, #4]
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	f7f9 febd 	bl	800723a <lwip_htonl>
 800d4c0:	4604      	mov	r4, r0
 800d4c2:	6a3b      	ldr	r3, [r7, #32]
 800d4c4:	68db      	ldr	r3, [r3, #12]
 800d4c6:	685b      	ldr	r3, [r3, #4]
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	f7f9 feb6 	bl	800723a <lwip_htonl>
 800d4ce:	4603      	mov	r3, r0
 800d4d0:	1ae3      	subs	r3, r4, r3
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	da24      	bge.n	800d520 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	3370      	adds	r3, #112	; 0x70
 800d4da:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d4dc:	e002      	b.n	800d4e4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800d4de:	69fb      	ldr	r3, [r7, #28]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d4e4:	69fb      	ldr	r3, [r7, #28]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d011      	beq.n	800d510 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d4ec:	69fb      	ldr	r3, [r7, #28]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	68db      	ldr	r3, [r3, #12]
 800d4f2:	685b      	ldr	r3, [r3, #4]
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	f7f9 fea0 	bl	800723a <lwip_htonl>
 800d4fa:	4604      	mov	r4, r0
 800d4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4fe:	68db      	ldr	r3, [r3, #12]
 800d500:	685b      	ldr	r3, [r3, #4]
 800d502:	4618      	mov	r0, r3
 800d504:	f7f9 fe99 	bl	800723a <lwip_htonl>
 800d508:	4603      	mov	r3, r0
 800d50a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	dbe6      	blt.n	800d4de <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800d510:	69fb      	ldr	r3, [r7, #28]
 800d512:	681a      	ldr	r2, [r3, #0]
 800d514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d516:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800d518:	69fb      	ldr	r3, [r7, #28]
 800d51a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d51c:	601a      	str	r2, [r3, #0]
 800d51e:	e009      	b.n	800d534 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800d520:	6a3b      	ldr	r3, [r7, #32]
 800d522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d524:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800d526:	6a3b      	ldr	r3, [r7, #32]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	623b      	str	r3, [r7, #32]
 800d52c:	e002      	b.n	800d534 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800d52e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d530:	f7fc fc3f 	bl	8009db2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d538:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800d53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d012      	beq.n	800d566 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800d540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d542:	68db      	ldr	r3, [r3, #12]
 800d544:	685b      	ldr	r3, [r3, #4]
 800d546:	4618      	mov	r0, r3
 800d548:	f7f9 fe77 	bl	800723a <lwip_htonl>
 800d54c:	4602      	mov	r2, r0
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d552:	1ad3      	subs	r3, r2, r3
 800d554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d556:	8912      	ldrh	r2, [r2, #8]
 800d558:	4413      	add	r3, r2
  while (seg != NULL &&
 800d55a:	69ba      	ldr	r2, [r7, #24]
 800d55c:	429a      	cmp	r2, r3
 800d55e:	f4bf aed9 	bcs.w	800d314 <tcp_output+0x160>
 800d562:	e000      	b.n	800d566 <tcp_output+0x3b2>
      break;
 800d564:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d108      	bne.n	800d580 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	2200      	movs	r2, #0
 800d572:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800d576:	e004      	b.n	800d582 <tcp_output+0x3ce>
    goto output_done;
 800d578:	bf00      	nop
 800d57a:	e002      	b.n	800d582 <tcp_output+0x3ce>
    goto output_done;
 800d57c:	bf00      	nop
 800d57e:	e000      	b.n	800d582 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800d580:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	8b5b      	ldrh	r3, [r3, #26]
 800d586:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d58a:	b29a      	uxth	r2, r3
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800d590:	2300      	movs	r3, #0
}
 800d592:	4618      	mov	r0, r3
 800d594:	3728      	adds	r7, #40	; 0x28
 800d596:	46bd      	mov	sp, r7
 800d598:	bdb0      	pop	{r4, r5, r7, pc}
 800d59a:	bf00      	nop

0800d59c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b082      	sub	sp, #8
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d106      	bne.n	800d5b8 <tcp_output_segment_busy+0x1c>
 800d5aa:	4b09      	ldr	r3, [pc, #36]	; (800d5d0 <tcp_output_segment_busy+0x34>)
 800d5ac:	f240 529a 	movw	r2, #1434	; 0x59a
 800d5b0:	4908      	ldr	r1, [pc, #32]	; (800d5d4 <tcp_output_segment_busy+0x38>)
 800d5b2:	4809      	ldr	r0, [pc, #36]	; (800d5d8 <tcp_output_segment_busy+0x3c>)
 800d5b4:	f004 fb80 	bl	8011cb8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	685b      	ldr	r3, [r3, #4]
 800d5bc:	7b9b      	ldrb	r3, [r3, #14]
 800d5be:	2b01      	cmp	r3, #1
 800d5c0:	d001      	beq.n	800d5c6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800d5c2:	2301      	movs	r3, #1
 800d5c4:	e000      	b.n	800d5c8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800d5c6:	2300      	movs	r3, #0
}
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	3708      	adds	r7, #8
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	bd80      	pop	{r7, pc}
 800d5d0:	08015358 	.word	0x08015358
 800d5d4:	080158f4 	.word	0x080158f4
 800d5d8:	080153ac 	.word	0x080153ac

0800d5dc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800d5dc:	b5b0      	push	{r4, r5, r7, lr}
 800d5de:	b08c      	sub	sp, #48	; 0x30
 800d5e0:	af04      	add	r7, sp, #16
 800d5e2:	60f8      	str	r0, [r7, #12]
 800d5e4:	60b9      	str	r1, [r7, #8]
 800d5e6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d106      	bne.n	800d5fc <tcp_output_segment+0x20>
 800d5ee:	4b64      	ldr	r3, [pc, #400]	; (800d780 <tcp_output_segment+0x1a4>)
 800d5f0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800d5f4:	4963      	ldr	r1, [pc, #396]	; (800d784 <tcp_output_segment+0x1a8>)
 800d5f6:	4864      	ldr	r0, [pc, #400]	; (800d788 <tcp_output_segment+0x1ac>)
 800d5f8:	f004 fb5e 	bl	8011cb8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800d5fc:	68bb      	ldr	r3, [r7, #8]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d106      	bne.n	800d610 <tcp_output_segment+0x34>
 800d602:	4b5f      	ldr	r3, [pc, #380]	; (800d780 <tcp_output_segment+0x1a4>)
 800d604:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800d608:	4960      	ldr	r1, [pc, #384]	; (800d78c <tcp_output_segment+0x1b0>)
 800d60a:	485f      	ldr	r0, [pc, #380]	; (800d788 <tcp_output_segment+0x1ac>)
 800d60c:	f004 fb54 	bl	8011cb8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d106      	bne.n	800d624 <tcp_output_segment+0x48>
 800d616:	4b5a      	ldr	r3, [pc, #360]	; (800d780 <tcp_output_segment+0x1a4>)
 800d618:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800d61c:	495c      	ldr	r1, [pc, #368]	; (800d790 <tcp_output_segment+0x1b4>)
 800d61e:	485a      	ldr	r0, [pc, #360]	; (800d788 <tcp_output_segment+0x1ac>)
 800d620:	f004 fb4a 	bl	8011cb8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800d624:	68f8      	ldr	r0, [r7, #12]
 800d626:	f7ff ffb9 	bl	800d59c <tcp_output_segment_busy>
 800d62a:	4603      	mov	r3, r0
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d001      	beq.n	800d634 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800d630:	2300      	movs	r3, #0
 800d632:	e0a1      	b.n	800d778 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800d634:	68bb      	ldr	r3, [r7, #8]
 800d636:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	68dc      	ldr	r4, [r3, #12]
 800d63c:	4610      	mov	r0, r2
 800d63e:	f7f9 fdfc 	bl	800723a <lwip_htonl>
 800d642:	4603      	mov	r3, r0
 800d644:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d646:	68bb      	ldr	r3, [r7, #8]
 800d648:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	68dc      	ldr	r4, [r3, #12]
 800d64e:	4610      	mov	r0, r2
 800d650:	f7f9 fdde 	bl	8007210 <lwip_htons>
 800d654:	4603      	mov	r3, r0
 800d656:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d658:	68bb      	ldr	r3, [r7, #8]
 800d65a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d65c:	68ba      	ldr	r2, [r7, #8]
 800d65e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800d660:	441a      	add	r2, r3
 800d662:	68bb      	ldr	r3, [r7, #8]
 800d664:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	68db      	ldr	r3, [r3, #12]
 800d66a:	3314      	adds	r3, #20
 800d66c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	7a9b      	ldrb	r3, [r3, #10]
 800d672:	f003 0301 	and.w	r3, r3, #1
 800d676:	2b00      	cmp	r3, #0
 800d678:	d015      	beq.n	800d6a6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800d67a:	68bb      	ldr	r3, [r7, #8]
 800d67c:	3304      	adds	r3, #4
 800d67e:	461a      	mov	r2, r3
 800d680:	6879      	ldr	r1, [r7, #4]
 800d682:	f44f 7006 	mov.w	r0, #536	; 0x218
 800d686:	f7fc fe8b 	bl	800a3a0 <tcp_eff_send_mss_netif>
 800d68a:	4603      	mov	r3, r0
 800d68c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800d68e:	8b7b      	ldrh	r3, [r7, #26]
 800d690:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800d694:	4618      	mov	r0, r3
 800d696:	f7f9 fdd0 	bl	800723a <lwip_htonl>
 800d69a:	4602      	mov	r2, r0
 800d69c:	69fb      	ldr	r3, [r7, #28]
 800d69e:	601a      	str	r2, [r3, #0]
    opts += 1;
 800d6a0:	69fb      	ldr	r3, [r7, #28]
 800d6a2:	3304      	adds	r3, #4
 800d6a4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800d6a6:	68bb      	ldr	r3, [r7, #8]
 800d6a8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	da02      	bge.n	800d6b6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800d6b0:	68bb      	ldr	r3, [r7, #8]
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d10c      	bne.n	800d6d8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800d6be:	4b35      	ldr	r3, [pc, #212]	; (800d794 <tcp_output_segment+0x1b8>)
 800d6c0:	681a      	ldr	r2, [r3, #0]
 800d6c2:	68bb      	ldr	r3, [r7, #8]
 800d6c4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	68db      	ldr	r3, [r3, #12]
 800d6ca:	685b      	ldr	r3, [r3, #4]
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	f7f9 fdb4 	bl	800723a <lwip_htonl>
 800d6d2:	4602      	mov	r2, r0
 800d6d4:	68bb      	ldr	r3, [r7, #8]
 800d6d6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	68da      	ldr	r2, [r3, #12]
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	685b      	ldr	r3, [r3, #4]
 800d6e0:	685b      	ldr	r3, [r3, #4]
 800d6e2:	1ad3      	subs	r3, r2, r3
 800d6e4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	685b      	ldr	r3, [r3, #4]
 800d6ea:	8959      	ldrh	r1, [r3, #10]
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	685b      	ldr	r3, [r3, #4]
 800d6f0:	8b3a      	ldrh	r2, [r7, #24]
 800d6f2:	1a8a      	subs	r2, r1, r2
 800d6f4:	b292      	uxth	r2, r2
 800d6f6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	685b      	ldr	r3, [r3, #4]
 800d6fc:	8919      	ldrh	r1, [r3, #8]
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	685b      	ldr	r3, [r3, #4]
 800d702:	8b3a      	ldrh	r2, [r7, #24]
 800d704:	1a8a      	subs	r2, r1, r2
 800d706:	b292      	uxth	r2, r2
 800d708:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	685b      	ldr	r3, [r3, #4]
 800d70e:	68fa      	ldr	r2, [r7, #12]
 800d710:	68d2      	ldr	r2, [r2, #12]
 800d712:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	68db      	ldr	r3, [r3, #12]
 800d718:	2200      	movs	r2, #0
 800d71a:	741a      	strb	r2, [r3, #16]
 800d71c:	2200      	movs	r2, #0
 800d71e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	68da      	ldr	r2, [r3, #12]
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	7a9b      	ldrb	r3, [r3, #10]
 800d728:	f003 0301 	and.w	r3, r3, #1
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d001      	beq.n	800d734 <tcp_output_segment+0x158>
 800d730:	2318      	movs	r3, #24
 800d732:	e000      	b.n	800d736 <tcp_output_segment+0x15a>
 800d734:	2314      	movs	r3, #20
 800d736:	4413      	add	r3, r2
 800d738:	69fa      	ldr	r2, [r7, #28]
 800d73a:	429a      	cmp	r2, r3
 800d73c:	d006      	beq.n	800d74c <tcp_output_segment+0x170>
 800d73e:	4b10      	ldr	r3, [pc, #64]	; (800d780 <tcp_output_segment+0x1a4>)
 800d740:	f240 621c 	movw	r2, #1564	; 0x61c
 800d744:	4914      	ldr	r1, [pc, #80]	; (800d798 <tcp_output_segment+0x1bc>)
 800d746:	4810      	ldr	r0, [pc, #64]	; (800d788 <tcp_output_segment+0x1ac>)
 800d748:	f004 fab6 	bl	8011cb8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	6858      	ldr	r0, [r3, #4]
 800d750:	68b9      	ldr	r1, [r7, #8]
 800d752:	68bb      	ldr	r3, [r7, #8]
 800d754:	1d1c      	adds	r4, r3, #4
 800d756:	68bb      	ldr	r3, [r7, #8]
 800d758:	7add      	ldrb	r5, [r3, #11]
 800d75a:	68bb      	ldr	r3, [r7, #8]
 800d75c:	7a9b      	ldrb	r3, [r3, #10]
 800d75e:	687a      	ldr	r2, [r7, #4]
 800d760:	9202      	str	r2, [sp, #8]
 800d762:	2206      	movs	r2, #6
 800d764:	9201      	str	r2, [sp, #4]
 800d766:	9300      	str	r3, [sp, #0]
 800d768:	462b      	mov	r3, r5
 800d76a:	4622      	mov	r2, r4
 800d76c:	f002 fb9a 	bl	800fea4 <ip4_output_if>
 800d770:	4603      	mov	r3, r0
 800d772:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800d774:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d778:	4618      	mov	r0, r3
 800d77a:	3720      	adds	r7, #32
 800d77c:	46bd      	mov	sp, r7
 800d77e:	bdb0      	pop	{r4, r5, r7, pc}
 800d780:	08015358 	.word	0x08015358
 800d784:	0801591c 	.word	0x0801591c
 800d788:	080153ac 	.word	0x080153ac
 800d78c:	0801593c 	.word	0x0801593c
 800d790:	0801595c 	.word	0x0801595c
 800d794:	2000a7cc 	.word	0x2000a7cc
 800d798:	08015980 	.word	0x08015980

0800d79c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800d79c:	b5b0      	push	{r4, r5, r7, lr}
 800d79e:	b084      	sub	sp, #16
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d106      	bne.n	800d7b8 <tcp_rexmit_rto_prepare+0x1c>
 800d7aa:	4b31      	ldr	r3, [pc, #196]	; (800d870 <tcp_rexmit_rto_prepare+0xd4>)
 800d7ac:	f240 6263 	movw	r2, #1635	; 0x663
 800d7b0:	4930      	ldr	r1, [pc, #192]	; (800d874 <tcp_rexmit_rto_prepare+0xd8>)
 800d7b2:	4831      	ldr	r0, [pc, #196]	; (800d878 <tcp_rexmit_rto_prepare+0xdc>)
 800d7b4:	f004 fa80 	bl	8011cb8 <iprintf>

  if (pcb->unacked == NULL) {
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d102      	bne.n	800d7c6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800d7c0:	f06f 0305 	mvn.w	r3, #5
 800d7c4:	e050      	b.n	800d868 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7ca:	60fb      	str	r3, [r7, #12]
 800d7cc:	e00b      	b.n	800d7e6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800d7ce:	68f8      	ldr	r0, [r7, #12]
 800d7d0:	f7ff fee4 	bl	800d59c <tcp_output_segment_busy>
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d002      	beq.n	800d7e0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800d7da:	f06f 0305 	mvn.w	r3, #5
 800d7de:	e043      	b.n	800d868 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	60fb      	str	r3, [r7, #12]
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d1ef      	bne.n	800d7ce <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800d7ee:	68f8      	ldr	r0, [r7, #12]
 800d7f0:	f7ff fed4 	bl	800d59c <tcp_output_segment_busy>
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d002      	beq.n	800d800 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800d7fa:	f06f 0305 	mvn.w	r3, #5
 800d7fe:	e033      	b.n	800d868 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	2200      	movs	r2, #0
 800d814:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	8b5b      	ldrh	r3, [r3, #26]
 800d81a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d81e:	b29a      	uxth	r2, r3
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	68db      	ldr	r3, [r3, #12]
 800d828:	685b      	ldr	r3, [r3, #4]
 800d82a:	4618      	mov	r0, r3
 800d82c:	f7f9 fd05 	bl	800723a <lwip_htonl>
 800d830:	4604      	mov	r4, r0
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	891b      	ldrh	r3, [r3, #8]
 800d836:	461d      	mov	r5, r3
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	68db      	ldr	r3, [r3, #12]
 800d83c:	899b      	ldrh	r3, [r3, #12]
 800d83e:	b29b      	uxth	r3, r3
 800d840:	4618      	mov	r0, r3
 800d842:	f7f9 fce5 	bl	8007210 <lwip_htons>
 800d846:	4603      	mov	r3, r0
 800d848:	b2db      	uxtb	r3, r3
 800d84a:	f003 0303 	and.w	r3, r3, #3
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d001      	beq.n	800d856 <tcp_rexmit_rto_prepare+0xba>
 800d852:	2301      	movs	r3, #1
 800d854:	e000      	b.n	800d858 <tcp_rexmit_rto_prepare+0xbc>
 800d856:	2300      	movs	r3, #0
 800d858:	442b      	add	r3, r5
 800d85a:	18e2      	adds	r2, r4, r3
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	2200      	movs	r2, #0
 800d864:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800d866:	2300      	movs	r3, #0
}
 800d868:	4618      	mov	r0, r3
 800d86a:	3710      	adds	r7, #16
 800d86c:	46bd      	mov	sp, r7
 800d86e:	bdb0      	pop	{r4, r5, r7, pc}
 800d870:	08015358 	.word	0x08015358
 800d874:	08015994 	.word	0x08015994
 800d878:	080153ac 	.word	0x080153ac

0800d87c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b082      	sub	sp, #8
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d106      	bne.n	800d898 <tcp_rexmit_rto_commit+0x1c>
 800d88a:	4b0d      	ldr	r3, [pc, #52]	; (800d8c0 <tcp_rexmit_rto_commit+0x44>)
 800d88c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d890:	490c      	ldr	r1, [pc, #48]	; (800d8c4 <tcp_rexmit_rto_commit+0x48>)
 800d892:	480d      	ldr	r0, [pc, #52]	; (800d8c8 <tcp_rexmit_rto_commit+0x4c>)
 800d894:	f004 fa10 	bl	8011cb8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d89e:	2bff      	cmp	r3, #255	; 0xff
 800d8a0:	d007      	beq.n	800d8b2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d8a8:	3301      	adds	r3, #1
 800d8aa:	b2da      	uxtb	r2, r3
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800d8b2:	6878      	ldr	r0, [r7, #4]
 800d8b4:	f7ff fc7e 	bl	800d1b4 <tcp_output>
}
 800d8b8:	bf00      	nop
 800d8ba:	3708      	adds	r7, #8
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	bd80      	pop	{r7, pc}
 800d8c0:	08015358 	.word	0x08015358
 800d8c4:	080159b8 	.word	0x080159b8
 800d8c8:	080153ac 	.word	0x080153ac

0800d8cc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b082      	sub	sp, #8
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d106      	bne.n	800d8e8 <tcp_rexmit_rto+0x1c>
 800d8da:	4b0a      	ldr	r3, [pc, #40]	; (800d904 <tcp_rexmit_rto+0x38>)
 800d8dc:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800d8e0:	4909      	ldr	r1, [pc, #36]	; (800d908 <tcp_rexmit_rto+0x3c>)
 800d8e2:	480a      	ldr	r0, [pc, #40]	; (800d90c <tcp_rexmit_rto+0x40>)
 800d8e4:	f004 f9e8 	bl	8011cb8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800d8e8:	6878      	ldr	r0, [r7, #4]
 800d8ea:	f7ff ff57 	bl	800d79c <tcp_rexmit_rto_prepare>
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d102      	bne.n	800d8fa <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800d8f4:	6878      	ldr	r0, [r7, #4]
 800d8f6:	f7ff ffc1 	bl	800d87c <tcp_rexmit_rto_commit>
  }
}
 800d8fa:	bf00      	nop
 800d8fc:	3708      	adds	r7, #8
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bd80      	pop	{r7, pc}
 800d902:	bf00      	nop
 800d904:	08015358 	.word	0x08015358
 800d908:	080159dc 	.word	0x080159dc
 800d90c:	080153ac 	.word	0x080153ac

0800d910 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800d910:	b590      	push	{r4, r7, lr}
 800d912:	b085      	sub	sp, #20
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d106      	bne.n	800d92c <tcp_rexmit+0x1c>
 800d91e:	4b2f      	ldr	r3, [pc, #188]	; (800d9dc <tcp_rexmit+0xcc>)
 800d920:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800d924:	492e      	ldr	r1, [pc, #184]	; (800d9e0 <tcp_rexmit+0xd0>)
 800d926:	482f      	ldr	r0, [pc, #188]	; (800d9e4 <tcp_rexmit+0xd4>)
 800d928:	f004 f9c6 	bl	8011cb8 <iprintf>

  if (pcb->unacked == NULL) {
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d930:	2b00      	cmp	r3, #0
 800d932:	d102      	bne.n	800d93a <tcp_rexmit+0x2a>
    return ERR_VAL;
 800d934:	f06f 0305 	mvn.w	r3, #5
 800d938:	e04c      	b.n	800d9d4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d93e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800d940:	68b8      	ldr	r0, [r7, #8]
 800d942:	f7ff fe2b 	bl	800d59c <tcp_output_segment_busy>
 800d946:	4603      	mov	r3, r0
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d002      	beq.n	800d952 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800d94c:	f06f 0305 	mvn.w	r3, #5
 800d950:	e040      	b.n	800d9d4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800d952:	68bb      	ldr	r3, [r7, #8]
 800d954:	681a      	ldr	r2, [r3, #0]
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	336c      	adds	r3, #108	; 0x6c
 800d95e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d960:	e002      	b.n	800d968 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d011      	beq.n	800d994 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	68db      	ldr	r3, [r3, #12]
 800d976:	685b      	ldr	r3, [r3, #4]
 800d978:	4618      	mov	r0, r3
 800d97a:	f7f9 fc5e 	bl	800723a <lwip_htonl>
 800d97e:	4604      	mov	r4, r0
 800d980:	68bb      	ldr	r3, [r7, #8]
 800d982:	68db      	ldr	r3, [r3, #12]
 800d984:	685b      	ldr	r3, [r3, #4]
 800d986:	4618      	mov	r0, r3
 800d988:	f7f9 fc57 	bl	800723a <lwip_htonl>
 800d98c:	4603      	mov	r3, r0
 800d98e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800d990:	2b00      	cmp	r3, #0
 800d992:	dbe6      	blt.n	800d962 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	681a      	ldr	r2, [r3, #0]
 800d998:	68bb      	ldr	r3, [r7, #8]
 800d99a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	68ba      	ldr	r2, [r7, #8]
 800d9a0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800d9a2:	68bb      	ldr	r3, [r7, #8]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d103      	bne.n	800d9b2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d9b8:	2bff      	cmp	r3, #255	; 0xff
 800d9ba:	d007      	beq.n	800d9cc <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d9c2:	3301      	adds	r3, #1
 800d9c4:	b2da      	uxtb	r2, r3
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800d9d2:	2300      	movs	r3, #0
}
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	3714      	adds	r7, #20
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bd90      	pop	{r4, r7, pc}
 800d9dc:	08015358 	.word	0x08015358
 800d9e0:	080159f8 	.word	0x080159f8
 800d9e4:	080153ac 	.word	0x080153ac

0800d9e8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b082      	sub	sp, #8
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d106      	bne.n	800da04 <tcp_rexmit_fast+0x1c>
 800d9f6:	4b2a      	ldr	r3, [pc, #168]	; (800daa0 <tcp_rexmit_fast+0xb8>)
 800d9f8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800d9fc:	4929      	ldr	r1, [pc, #164]	; (800daa4 <tcp_rexmit_fast+0xbc>)
 800d9fe:	482a      	ldr	r0, [pc, #168]	; (800daa8 <tcp_rexmit_fast+0xc0>)
 800da00:	f004 f95a 	bl	8011cb8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d045      	beq.n	800da98 <tcp_rexmit_fast+0xb0>
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	8b5b      	ldrh	r3, [r3, #26]
 800da10:	f003 0304 	and.w	r3, r3, #4
 800da14:	2b00      	cmp	r3, #0
 800da16:	d13f      	bne.n	800da98 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800da18:	6878      	ldr	r0, [r7, #4]
 800da1a:	f7ff ff79 	bl	800d910 <tcp_rexmit>
 800da1e:	4603      	mov	r3, r0
 800da20:	2b00      	cmp	r3, #0
 800da22:	d139      	bne.n	800da98 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800da30:	4293      	cmp	r3, r2
 800da32:	bf28      	it	cs
 800da34:	4613      	movcs	r3, r2
 800da36:	b29b      	uxth	r3, r3
 800da38:	2b00      	cmp	r3, #0
 800da3a:	da00      	bge.n	800da3e <tcp_rexmit_fast+0x56>
 800da3c:	3301      	adds	r3, #1
 800da3e:	105b      	asrs	r3, r3, #1
 800da40:	b29a      	uxth	r2, r3
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800da4e:	461a      	mov	r2, r3
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800da54:	005b      	lsls	r3, r3, #1
 800da56:	429a      	cmp	r2, r3
 800da58:	d206      	bcs.n	800da68 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800da5e:	005b      	lsls	r3, r3, #1
 800da60:	b29a      	uxth	r2, r3
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800da72:	4619      	mov	r1, r3
 800da74:	0049      	lsls	r1, r1, #1
 800da76:	440b      	add	r3, r1
 800da78:	b29b      	uxth	r3, r3
 800da7a:	4413      	add	r3, r2
 800da7c:	b29a      	uxth	r2, r3
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	8b5b      	ldrh	r3, [r3, #26]
 800da88:	f043 0304 	orr.w	r3, r3, #4
 800da8c:	b29a      	uxth	r2, r3
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	2200      	movs	r2, #0
 800da96:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800da98:	bf00      	nop
 800da9a:	3708      	adds	r7, #8
 800da9c:	46bd      	mov	sp, r7
 800da9e:	bd80      	pop	{r7, pc}
 800daa0:	08015358 	.word	0x08015358
 800daa4:	08015a10 	.word	0x08015a10
 800daa8:	080153ac 	.word	0x080153ac

0800daac <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b086      	sub	sp, #24
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	60f8      	str	r0, [r7, #12]
 800dab4:	607b      	str	r3, [r7, #4]
 800dab6:	460b      	mov	r3, r1
 800dab8:	817b      	strh	r3, [r7, #10]
 800daba:	4613      	mov	r3, r2
 800dabc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800dabe:	897a      	ldrh	r2, [r7, #10]
 800dac0:	893b      	ldrh	r3, [r7, #8]
 800dac2:	4413      	add	r3, r2
 800dac4:	b29b      	uxth	r3, r3
 800dac6:	3314      	adds	r3, #20
 800dac8:	b29b      	uxth	r3, r3
 800daca:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dace:	4619      	mov	r1, r3
 800dad0:	2022      	movs	r0, #34	; 0x22
 800dad2:	f7fa fc17 	bl	8008304 <pbuf_alloc>
 800dad6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800dad8:	697b      	ldr	r3, [r7, #20]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d04d      	beq.n	800db7a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800dade:	897b      	ldrh	r3, [r7, #10]
 800dae0:	3313      	adds	r3, #19
 800dae2:	697a      	ldr	r2, [r7, #20]
 800dae4:	8952      	ldrh	r2, [r2, #10]
 800dae6:	4293      	cmp	r3, r2
 800dae8:	db06      	blt.n	800daf8 <tcp_output_alloc_header_common+0x4c>
 800daea:	4b26      	ldr	r3, [pc, #152]	; (800db84 <tcp_output_alloc_header_common+0xd8>)
 800daec:	f240 7223 	movw	r2, #1827	; 0x723
 800daf0:	4925      	ldr	r1, [pc, #148]	; (800db88 <tcp_output_alloc_header_common+0xdc>)
 800daf2:	4826      	ldr	r0, [pc, #152]	; (800db8c <tcp_output_alloc_header_common+0xe0>)
 800daf4:	f004 f8e0 	bl	8011cb8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800daf8:	697b      	ldr	r3, [r7, #20]
 800dafa:	685b      	ldr	r3, [r3, #4]
 800dafc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800dafe:	8c3b      	ldrh	r3, [r7, #32]
 800db00:	4618      	mov	r0, r3
 800db02:	f7f9 fb85 	bl	8007210 <lwip_htons>
 800db06:	4603      	mov	r3, r0
 800db08:	461a      	mov	r2, r3
 800db0a:	693b      	ldr	r3, [r7, #16]
 800db0c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800db0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db10:	4618      	mov	r0, r3
 800db12:	f7f9 fb7d 	bl	8007210 <lwip_htons>
 800db16:	4603      	mov	r3, r0
 800db18:	461a      	mov	r2, r3
 800db1a:	693b      	ldr	r3, [r7, #16]
 800db1c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800db1e:	693b      	ldr	r3, [r7, #16]
 800db20:	687a      	ldr	r2, [r7, #4]
 800db22:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800db24:	68f8      	ldr	r0, [r7, #12]
 800db26:	f7f9 fb88 	bl	800723a <lwip_htonl>
 800db2a:	4602      	mov	r2, r0
 800db2c:	693b      	ldr	r3, [r7, #16]
 800db2e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800db30:	897b      	ldrh	r3, [r7, #10]
 800db32:	089b      	lsrs	r3, r3, #2
 800db34:	b29b      	uxth	r3, r3
 800db36:	3305      	adds	r3, #5
 800db38:	b29b      	uxth	r3, r3
 800db3a:	031b      	lsls	r3, r3, #12
 800db3c:	b29a      	uxth	r2, r3
 800db3e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800db42:	b29b      	uxth	r3, r3
 800db44:	4313      	orrs	r3, r2
 800db46:	b29b      	uxth	r3, r3
 800db48:	4618      	mov	r0, r3
 800db4a:	f7f9 fb61 	bl	8007210 <lwip_htons>
 800db4e:	4603      	mov	r3, r0
 800db50:	461a      	mov	r2, r3
 800db52:	693b      	ldr	r3, [r7, #16]
 800db54:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800db56:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800db58:	4618      	mov	r0, r3
 800db5a:	f7f9 fb59 	bl	8007210 <lwip_htons>
 800db5e:	4603      	mov	r3, r0
 800db60:	461a      	mov	r2, r3
 800db62:	693b      	ldr	r3, [r7, #16]
 800db64:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800db66:	693b      	ldr	r3, [r7, #16]
 800db68:	2200      	movs	r2, #0
 800db6a:	741a      	strb	r2, [r3, #16]
 800db6c:	2200      	movs	r2, #0
 800db6e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800db70:	693b      	ldr	r3, [r7, #16]
 800db72:	2200      	movs	r2, #0
 800db74:	749a      	strb	r2, [r3, #18]
 800db76:	2200      	movs	r2, #0
 800db78:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800db7a:	697b      	ldr	r3, [r7, #20]
}
 800db7c:	4618      	mov	r0, r3
 800db7e:	3718      	adds	r7, #24
 800db80:	46bd      	mov	sp, r7
 800db82:	bd80      	pop	{r7, pc}
 800db84:	08015358 	.word	0x08015358
 800db88:	08015a30 	.word	0x08015a30
 800db8c:	080153ac 	.word	0x080153ac

0800db90 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800db90:	b5b0      	push	{r4, r5, r7, lr}
 800db92:	b08a      	sub	sp, #40	; 0x28
 800db94:	af04      	add	r7, sp, #16
 800db96:	60f8      	str	r0, [r7, #12]
 800db98:	607b      	str	r3, [r7, #4]
 800db9a:	460b      	mov	r3, r1
 800db9c:	817b      	strh	r3, [r7, #10]
 800db9e:	4613      	mov	r3, r2
 800dba0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d106      	bne.n	800dbb6 <tcp_output_alloc_header+0x26>
 800dba8:	4b15      	ldr	r3, [pc, #84]	; (800dc00 <tcp_output_alloc_header+0x70>)
 800dbaa:	f240 7242 	movw	r2, #1858	; 0x742
 800dbae:	4915      	ldr	r1, [pc, #84]	; (800dc04 <tcp_output_alloc_header+0x74>)
 800dbb0:	4815      	ldr	r0, [pc, #84]	; (800dc08 <tcp_output_alloc_header+0x78>)
 800dbb2:	f004 f881 	bl	8011cb8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	8adb      	ldrh	r3, [r3, #22]
 800dbbe:	68fa      	ldr	r2, [r7, #12]
 800dbc0:	8b12      	ldrh	r2, [r2, #24]
 800dbc2:	68f9      	ldr	r1, [r7, #12]
 800dbc4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800dbc6:	893d      	ldrh	r5, [r7, #8]
 800dbc8:	897c      	ldrh	r4, [r7, #10]
 800dbca:	9103      	str	r1, [sp, #12]
 800dbcc:	2110      	movs	r1, #16
 800dbce:	9102      	str	r1, [sp, #8]
 800dbd0:	9201      	str	r2, [sp, #4]
 800dbd2:	9300      	str	r3, [sp, #0]
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	462a      	mov	r2, r5
 800dbd8:	4621      	mov	r1, r4
 800dbda:	f7ff ff67 	bl	800daac <tcp_output_alloc_header_common>
 800dbde:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800dbe0:	697b      	ldr	r3, [r7, #20]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d006      	beq.n	800dbf4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbea:	68fa      	ldr	r2, [r7, #12]
 800dbec:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800dbee:	441a      	add	r2, r3
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800dbf4:	697b      	ldr	r3, [r7, #20]
}
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	3718      	adds	r7, #24
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	bdb0      	pop	{r4, r5, r7, pc}
 800dbfe:	bf00      	nop
 800dc00:	08015358 	.word	0x08015358
 800dc04:	08015a60 	.word	0x08015a60
 800dc08:	080153ac 	.word	0x080153ac

0800dc0c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b088      	sub	sp, #32
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	60f8      	str	r0, [r7, #12]
 800dc14:	60b9      	str	r1, [r7, #8]
 800dc16:	4611      	mov	r1, r2
 800dc18:	461a      	mov	r2, r3
 800dc1a:	460b      	mov	r3, r1
 800dc1c:	71fb      	strb	r3, [r7, #7]
 800dc1e:	4613      	mov	r3, r2
 800dc20:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800dc22:	2300      	movs	r3, #0
 800dc24:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800dc26:	68bb      	ldr	r3, [r7, #8]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d106      	bne.n	800dc3a <tcp_output_fill_options+0x2e>
 800dc2c:	4b12      	ldr	r3, [pc, #72]	; (800dc78 <tcp_output_fill_options+0x6c>)
 800dc2e:	f240 7256 	movw	r2, #1878	; 0x756
 800dc32:	4912      	ldr	r1, [pc, #72]	; (800dc7c <tcp_output_fill_options+0x70>)
 800dc34:	4812      	ldr	r0, [pc, #72]	; (800dc80 <tcp_output_fill_options+0x74>)
 800dc36:	f004 f83f 	bl	8011cb8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800dc3a:	68bb      	ldr	r3, [r7, #8]
 800dc3c:	685b      	ldr	r3, [r3, #4]
 800dc3e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800dc40:	69bb      	ldr	r3, [r7, #24]
 800dc42:	3314      	adds	r3, #20
 800dc44:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800dc46:	8bfb      	ldrh	r3, [r7, #30]
 800dc48:	009b      	lsls	r3, r3, #2
 800dc4a:	461a      	mov	r2, r3
 800dc4c:	79fb      	ldrb	r3, [r7, #7]
 800dc4e:	009b      	lsls	r3, r3, #2
 800dc50:	f003 0304 	and.w	r3, r3, #4
 800dc54:	4413      	add	r3, r2
 800dc56:	3314      	adds	r3, #20
 800dc58:	69ba      	ldr	r2, [r7, #24]
 800dc5a:	4413      	add	r3, r2
 800dc5c:	697a      	ldr	r2, [r7, #20]
 800dc5e:	429a      	cmp	r2, r3
 800dc60:	d006      	beq.n	800dc70 <tcp_output_fill_options+0x64>
 800dc62:	4b05      	ldr	r3, [pc, #20]	; (800dc78 <tcp_output_fill_options+0x6c>)
 800dc64:	f240 7275 	movw	r2, #1909	; 0x775
 800dc68:	4906      	ldr	r1, [pc, #24]	; (800dc84 <tcp_output_fill_options+0x78>)
 800dc6a:	4805      	ldr	r0, [pc, #20]	; (800dc80 <tcp_output_fill_options+0x74>)
 800dc6c:	f004 f824 	bl	8011cb8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800dc70:	bf00      	nop
 800dc72:	3720      	adds	r7, #32
 800dc74:	46bd      	mov	sp, r7
 800dc76:	bd80      	pop	{r7, pc}
 800dc78:	08015358 	.word	0x08015358
 800dc7c:	08015a88 	.word	0x08015a88
 800dc80:	080153ac 	.word	0x080153ac
 800dc84:	08015980 	.word	0x08015980

0800dc88 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b08a      	sub	sp, #40	; 0x28
 800dc8c:	af04      	add	r7, sp, #16
 800dc8e:	60f8      	str	r0, [r7, #12]
 800dc90:	60b9      	str	r1, [r7, #8]
 800dc92:	607a      	str	r2, [r7, #4]
 800dc94:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800dc96:	68bb      	ldr	r3, [r7, #8]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d106      	bne.n	800dcaa <tcp_output_control_segment+0x22>
 800dc9c:	4b1c      	ldr	r3, [pc, #112]	; (800dd10 <tcp_output_control_segment+0x88>)
 800dc9e:	f240 7287 	movw	r2, #1927	; 0x787
 800dca2:	491c      	ldr	r1, [pc, #112]	; (800dd14 <tcp_output_control_segment+0x8c>)
 800dca4:	481c      	ldr	r0, [pc, #112]	; (800dd18 <tcp_output_control_segment+0x90>)
 800dca6:	f004 f807 	bl	8011cb8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800dcaa:	683a      	ldr	r2, [r7, #0]
 800dcac:	6879      	ldr	r1, [r7, #4]
 800dcae:	68f8      	ldr	r0, [r7, #12]
 800dcb0:	f7fe ff40 	bl	800cb34 <tcp_route>
 800dcb4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800dcb6:	693b      	ldr	r3, [r7, #16]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d102      	bne.n	800dcc2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800dcbc:	23fc      	movs	r3, #252	; 0xfc
 800dcbe:	75fb      	strb	r3, [r7, #23]
 800dcc0:	e01c      	b.n	800dcfc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d006      	beq.n	800dcd6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	7adb      	ldrb	r3, [r3, #11]
 800dccc:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	7a9b      	ldrb	r3, [r3, #10]
 800dcd2:	757b      	strb	r3, [r7, #21]
 800dcd4:	e003      	b.n	800dcde <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800dcd6:	23ff      	movs	r3, #255	; 0xff
 800dcd8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800dcda:	2300      	movs	r3, #0
 800dcdc:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800dcde:	7dba      	ldrb	r2, [r7, #22]
 800dce0:	693b      	ldr	r3, [r7, #16]
 800dce2:	9302      	str	r3, [sp, #8]
 800dce4:	2306      	movs	r3, #6
 800dce6:	9301      	str	r3, [sp, #4]
 800dce8:	7d7b      	ldrb	r3, [r7, #21]
 800dcea:	9300      	str	r3, [sp, #0]
 800dcec:	4613      	mov	r3, r2
 800dcee:	683a      	ldr	r2, [r7, #0]
 800dcf0:	6879      	ldr	r1, [r7, #4]
 800dcf2:	68b8      	ldr	r0, [r7, #8]
 800dcf4:	f002 f8d6 	bl	800fea4 <ip4_output_if>
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800dcfc:	68b8      	ldr	r0, [r7, #8]
 800dcfe:	f7fa fde5 	bl	80088cc <pbuf_free>
  return err;
 800dd02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dd06:	4618      	mov	r0, r3
 800dd08:	3718      	adds	r7, #24
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	bd80      	pop	{r7, pc}
 800dd0e:	bf00      	nop
 800dd10:	08015358 	.word	0x08015358
 800dd14:	08015ab0 	.word	0x08015ab0
 800dd18:	080153ac 	.word	0x080153ac

0800dd1c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800dd1c:	b590      	push	{r4, r7, lr}
 800dd1e:	b08b      	sub	sp, #44	; 0x2c
 800dd20:	af04      	add	r7, sp, #16
 800dd22:	60f8      	str	r0, [r7, #12]
 800dd24:	60b9      	str	r1, [r7, #8]
 800dd26:	607a      	str	r2, [r7, #4]
 800dd28:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d106      	bne.n	800dd3e <tcp_rst+0x22>
 800dd30:	4b1f      	ldr	r3, [pc, #124]	; (800ddb0 <tcp_rst+0x94>)
 800dd32:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800dd36:	491f      	ldr	r1, [pc, #124]	; (800ddb4 <tcp_rst+0x98>)
 800dd38:	481f      	ldr	r0, [pc, #124]	; (800ddb8 <tcp_rst+0x9c>)
 800dd3a:	f003 ffbd 	bl	8011cb8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800dd3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d106      	bne.n	800dd52 <tcp_rst+0x36>
 800dd44:	4b1a      	ldr	r3, [pc, #104]	; (800ddb0 <tcp_rst+0x94>)
 800dd46:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800dd4a:	491c      	ldr	r1, [pc, #112]	; (800ddbc <tcp_rst+0xa0>)
 800dd4c:	481a      	ldr	r0, [pc, #104]	; (800ddb8 <tcp_rst+0x9c>)
 800dd4e:	f003 ffb3 	bl	8011cb8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800dd52:	2300      	movs	r3, #0
 800dd54:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800dd56:	f246 0308 	movw	r3, #24584	; 0x6008
 800dd5a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800dd5c:	7dfb      	ldrb	r3, [r7, #23]
 800dd5e:	b29c      	uxth	r4, r3
 800dd60:	68b8      	ldr	r0, [r7, #8]
 800dd62:	f7f9 fa6a 	bl	800723a <lwip_htonl>
 800dd66:	4602      	mov	r2, r0
 800dd68:	8abb      	ldrh	r3, [r7, #20]
 800dd6a:	9303      	str	r3, [sp, #12]
 800dd6c:	2314      	movs	r3, #20
 800dd6e:	9302      	str	r3, [sp, #8]
 800dd70:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800dd72:	9301      	str	r3, [sp, #4]
 800dd74:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dd76:	9300      	str	r3, [sp, #0]
 800dd78:	4613      	mov	r3, r2
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	4621      	mov	r1, r4
 800dd7e:	6878      	ldr	r0, [r7, #4]
 800dd80:	f7ff fe94 	bl	800daac <tcp_output_alloc_header_common>
 800dd84:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800dd86:	693b      	ldr	r3, [r7, #16]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d00c      	beq.n	800dda6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800dd8c:	7dfb      	ldrb	r3, [r7, #23]
 800dd8e:	2200      	movs	r2, #0
 800dd90:	6939      	ldr	r1, [r7, #16]
 800dd92:	68f8      	ldr	r0, [r7, #12]
 800dd94:	f7ff ff3a 	bl	800dc0c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800dd98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd9a:	683a      	ldr	r2, [r7, #0]
 800dd9c:	6939      	ldr	r1, [r7, #16]
 800dd9e:	68f8      	ldr	r0, [r7, #12]
 800dda0:	f7ff ff72 	bl	800dc88 <tcp_output_control_segment>
 800dda4:	e000      	b.n	800dda8 <tcp_rst+0x8c>
    return;
 800dda6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800dda8:	371c      	adds	r7, #28
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	bd90      	pop	{r4, r7, pc}
 800ddae:	bf00      	nop
 800ddb0:	08015358 	.word	0x08015358
 800ddb4:	08015adc 	.word	0x08015adc
 800ddb8:	080153ac 	.word	0x080153ac
 800ddbc:	08015af8 	.word	0x08015af8

0800ddc0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800ddc0:	b590      	push	{r4, r7, lr}
 800ddc2:	b087      	sub	sp, #28
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800ddc8:	2300      	movs	r3, #0
 800ddca:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800ddcc:	2300      	movs	r3, #0
 800ddce:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d106      	bne.n	800dde4 <tcp_send_empty_ack+0x24>
 800ddd6:	4b28      	ldr	r3, [pc, #160]	; (800de78 <tcp_send_empty_ack+0xb8>)
 800ddd8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800dddc:	4927      	ldr	r1, [pc, #156]	; (800de7c <tcp_send_empty_ack+0xbc>)
 800ddde:	4828      	ldr	r0, [pc, #160]	; (800de80 <tcp_send_empty_ack+0xc0>)
 800dde0:	f003 ff6a 	bl	8011cb8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800dde4:	7dfb      	ldrb	r3, [r7, #23]
 800dde6:	009b      	lsls	r3, r3, #2
 800dde8:	b2db      	uxtb	r3, r3
 800ddea:	f003 0304 	and.w	r3, r3, #4
 800ddee:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800ddf0:	7d7b      	ldrb	r3, [r7, #21]
 800ddf2:	b29c      	uxth	r4, r3
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	f7f9 fa1e 	bl	800723a <lwip_htonl>
 800ddfe:	4603      	mov	r3, r0
 800de00:	2200      	movs	r2, #0
 800de02:	4621      	mov	r1, r4
 800de04:	6878      	ldr	r0, [r7, #4]
 800de06:	f7ff fec3 	bl	800db90 <tcp_output_alloc_header>
 800de0a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800de0c:	693b      	ldr	r3, [r7, #16]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d109      	bne.n	800de26 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	8b5b      	ldrh	r3, [r3, #26]
 800de16:	f043 0303 	orr.w	r3, r3, #3
 800de1a:	b29a      	uxth	r2, r3
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800de20:	f06f 0301 	mvn.w	r3, #1
 800de24:	e023      	b.n	800de6e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800de26:	7dbb      	ldrb	r3, [r7, #22]
 800de28:	7dfa      	ldrb	r2, [r7, #23]
 800de2a:	6939      	ldr	r1, [r7, #16]
 800de2c:	6878      	ldr	r0, [r7, #4]
 800de2e:	f7ff feed 	bl	800dc0c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800de32:	687a      	ldr	r2, [r7, #4]
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	3304      	adds	r3, #4
 800de38:	6939      	ldr	r1, [r7, #16]
 800de3a:	6878      	ldr	r0, [r7, #4]
 800de3c:	f7ff ff24 	bl	800dc88 <tcp_output_control_segment>
 800de40:	4603      	mov	r3, r0
 800de42:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800de44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d007      	beq.n	800de5c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	8b5b      	ldrh	r3, [r3, #26]
 800de50:	f043 0303 	orr.w	r3, r3, #3
 800de54:	b29a      	uxth	r2, r3
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	835a      	strh	r2, [r3, #26]
 800de5a:	e006      	b.n	800de6a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	8b5b      	ldrh	r3, [r3, #26]
 800de60:	f023 0303 	bic.w	r3, r3, #3
 800de64:	b29a      	uxth	r2, r3
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800de6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800de6e:	4618      	mov	r0, r3
 800de70:	371c      	adds	r7, #28
 800de72:	46bd      	mov	sp, r7
 800de74:	bd90      	pop	{r4, r7, pc}
 800de76:	bf00      	nop
 800de78:	08015358 	.word	0x08015358
 800de7c:	08015b14 	.word	0x08015b14
 800de80:	080153ac 	.word	0x080153ac

0800de84 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800de84:	b590      	push	{r4, r7, lr}
 800de86:	b087      	sub	sp, #28
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800de8c:	2300      	movs	r3, #0
 800de8e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d106      	bne.n	800dea4 <tcp_keepalive+0x20>
 800de96:	4b18      	ldr	r3, [pc, #96]	; (800def8 <tcp_keepalive+0x74>)
 800de98:	f640 0224 	movw	r2, #2084	; 0x824
 800de9c:	4917      	ldr	r1, [pc, #92]	; (800defc <tcp_keepalive+0x78>)
 800de9e:	4818      	ldr	r0, [pc, #96]	; (800df00 <tcp_keepalive+0x7c>)
 800dea0:	f003 ff0a 	bl	8011cb8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800dea4:	7dfb      	ldrb	r3, [r7, #23]
 800dea6:	b29c      	uxth	r4, r3
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800deac:	3b01      	subs	r3, #1
 800deae:	4618      	mov	r0, r3
 800deb0:	f7f9 f9c3 	bl	800723a <lwip_htonl>
 800deb4:	4603      	mov	r3, r0
 800deb6:	2200      	movs	r2, #0
 800deb8:	4621      	mov	r1, r4
 800deba:	6878      	ldr	r0, [r7, #4]
 800debc:	f7ff fe68 	bl	800db90 <tcp_output_alloc_header>
 800dec0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800dec2:	693b      	ldr	r3, [r7, #16]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d102      	bne.n	800dece <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800dec8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800decc:	e010      	b.n	800def0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800dece:	7dfb      	ldrb	r3, [r7, #23]
 800ded0:	2200      	movs	r2, #0
 800ded2:	6939      	ldr	r1, [r7, #16]
 800ded4:	6878      	ldr	r0, [r7, #4]
 800ded6:	f7ff fe99 	bl	800dc0c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800deda:	687a      	ldr	r2, [r7, #4]
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	3304      	adds	r3, #4
 800dee0:	6939      	ldr	r1, [r7, #16]
 800dee2:	6878      	ldr	r0, [r7, #4]
 800dee4:	f7ff fed0 	bl	800dc88 <tcp_output_control_segment>
 800dee8:	4603      	mov	r3, r0
 800deea:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800deec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800def0:	4618      	mov	r0, r3
 800def2:	371c      	adds	r7, #28
 800def4:	46bd      	mov	sp, r7
 800def6:	bd90      	pop	{r4, r7, pc}
 800def8:	08015358 	.word	0x08015358
 800defc:	08015b34 	.word	0x08015b34
 800df00:	080153ac 	.word	0x080153ac

0800df04 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800df04:	b590      	push	{r4, r7, lr}
 800df06:	b08b      	sub	sp, #44	; 0x2c
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800df0c:	2300      	movs	r3, #0
 800df0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d106      	bne.n	800df26 <tcp_zero_window_probe+0x22>
 800df18:	4b4c      	ldr	r3, [pc, #304]	; (800e04c <tcp_zero_window_probe+0x148>)
 800df1a:	f640 024f 	movw	r2, #2127	; 0x84f
 800df1e:	494c      	ldr	r1, [pc, #304]	; (800e050 <tcp_zero_window_probe+0x14c>)
 800df20:	484c      	ldr	r0, [pc, #304]	; (800e054 <tcp_zero_window_probe+0x150>)
 800df22:	f003 fec9 	bl	8011cb8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df2a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800df2c:	6a3b      	ldr	r3, [r7, #32]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d101      	bne.n	800df36 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800df32:	2300      	movs	r3, #0
 800df34:	e086      	b.n	800e044 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800df3c:	2bff      	cmp	r3, #255	; 0xff
 800df3e:	d007      	beq.n	800df50 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800df46:	3301      	adds	r3, #1
 800df48:	b2da      	uxtb	r2, r3
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800df50:	6a3b      	ldr	r3, [r7, #32]
 800df52:	68db      	ldr	r3, [r3, #12]
 800df54:	899b      	ldrh	r3, [r3, #12]
 800df56:	b29b      	uxth	r3, r3
 800df58:	4618      	mov	r0, r3
 800df5a:	f7f9 f959 	bl	8007210 <lwip_htons>
 800df5e:	4603      	mov	r3, r0
 800df60:	b2db      	uxtb	r3, r3
 800df62:	f003 0301 	and.w	r3, r3, #1
 800df66:	2b00      	cmp	r3, #0
 800df68:	d005      	beq.n	800df76 <tcp_zero_window_probe+0x72>
 800df6a:	6a3b      	ldr	r3, [r7, #32]
 800df6c:	891b      	ldrh	r3, [r3, #8]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d101      	bne.n	800df76 <tcp_zero_window_probe+0x72>
 800df72:	2301      	movs	r3, #1
 800df74:	e000      	b.n	800df78 <tcp_zero_window_probe+0x74>
 800df76:	2300      	movs	r3, #0
 800df78:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800df7a:	7ffb      	ldrb	r3, [r7, #31]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	bf0c      	ite	eq
 800df80:	2301      	moveq	r3, #1
 800df82:	2300      	movne	r3, #0
 800df84:	b2db      	uxtb	r3, r3
 800df86:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800df88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df8c:	b299      	uxth	r1, r3
 800df8e:	6a3b      	ldr	r3, [r7, #32]
 800df90:	68db      	ldr	r3, [r3, #12]
 800df92:	685b      	ldr	r3, [r3, #4]
 800df94:	8bba      	ldrh	r2, [r7, #28]
 800df96:	6878      	ldr	r0, [r7, #4]
 800df98:	f7ff fdfa 	bl	800db90 <tcp_output_alloc_header>
 800df9c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800df9e:	69bb      	ldr	r3, [r7, #24]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d102      	bne.n	800dfaa <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800dfa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dfa8:	e04c      	b.n	800e044 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800dfaa:	69bb      	ldr	r3, [r7, #24]
 800dfac:	685b      	ldr	r3, [r3, #4]
 800dfae:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800dfb0:	7ffb      	ldrb	r3, [r7, #31]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d011      	beq.n	800dfda <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800dfb6:	697b      	ldr	r3, [r7, #20]
 800dfb8:	899b      	ldrh	r3, [r3, #12]
 800dfba:	b29b      	uxth	r3, r3
 800dfbc:	b21b      	sxth	r3, r3
 800dfbe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800dfc2:	b21c      	sxth	r4, r3
 800dfc4:	2011      	movs	r0, #17
 800dfc6:	f7f9 f923 	bl	8007210 <lwip_htons>
 800dfca:	4603      	mov	r3, r0
 800dfcc:	b21b      	sxth	r3, r3
 800dfce:	4323      	orrs	r3, r4
 800dfd0:	b21b      	sxth	r3, r3
 800dfd2:	b29a      	uxth	r2, r3
 800dfd4:	697b      	ldr	r3, [r7, #20]
 800dfd6:	819a      	strh	r2, [r3, #12]
 800dfd8:	e010      	b.n	800dffc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800dfda:	69bb      	ldr	r3, [r7, #24]
 800dfdc:	685b      	ldr	r3, [r3, #4]
 800dfde:	3314      	adds	r3, #20
 800dfe0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800dfe2:	6a3b      	ldr	r3, [r7, #32]
 800dfe4:	6858      	ldr	r0, [r3, #4]
 800dfe6:	6a3b      	ldr	r3, [r7, #32]
 800dfe8:	685b      	ldr	r3, [r3, #4]
 800dfea:	891a      	ldrh	r2, [r3, #8]
 800dfec:	6a3b      	ldr	r3, [r7, #32]
 800dfee:	891b      	ldrh	r3, [r3, #8]
 800dff0:	1ad3      	subs	r3, r2, r3
 800dff2:	b29b      	uxth	r3, r3
 800dff4:	2201      	movs	r2, #1
 800dff6:	6939      	ldr	r1, [r7, #16]
 800dff8:	f7fa fe52 	bl	8008ca0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800dffc:	6a3b      	ldr	r3, [r7, #32]
 800dffe:	68db      	ldr	r3, [r3, #12]
 800e000:	685b      	ldr	r3, [r3, #4]
 800e002:	4618      	mov	r0, r3
 800e004:	f7f9 f919 	bl	800723a <lwip_htonl>
 800e008:	4603      	mov	r3, r0
 800e00a:	3301      	adds	r3, #1
 800e00c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	1ad3      	subs	r3, r2, r3
 800e016:	2b00      	cmp	r3, #0
 800e018:	da02      	bge.n	800e020 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	68fa      	ldr	r2, [r7, #12]
 800e01e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e020:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e024:	2200      	movs	r2, #0
 800e026:	69b9      	ldr	r1, [r7, #24]
 800e028:	6878      	ldr	r0, [r7, #4]
 800e02a:	f7ff fdef 	bl	800dc0c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e02e:	687a      	ldr	r2, [r7, #4]
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	3304      	adds	r3, #4
 800e034:	69b9      	ldr	r1, [r7, #24]
 800e036:	6878      	ldr	r0, [r7, #4]
 800e038:	f7ff fe26 	bl	800dc88 <tcp_output_control_segment>
 800e03c:	4603      	mov	r3, r0
 800e03e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e040:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e044:	4618      	mov	r0, r3
 800e046:	372c      	adds	r7, #44	; 0x2c
 800e048:	46bd      	mov	sp, r7
 800e04a:	bd90      	pop	{r4, r7, pc}
 800e04c:	08015358 	.word	0x08015358
 800e050:	08015b50 	.word	0x08015b50
 800e054:	080153ac 	.word	0x080153ac

0800e058 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b082      	sub	sp, #8
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800e060:	f7fa ff0c 	bl	8008e7c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800e064:	4b0a      	ldr	r3, [pc, #40]	; (800e090 <tcpip_tcp_timer+0x38>)
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d103      	bne.n	800e074 <tcpip_tcp_timer+0x1c>
 800e06c:	4b09      	ldr	r3, [pc, #36]	; (800e094 <tcpip_tcp_timer+0x3c>)
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d005      	beq.n	800e080 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e074:	2200      	movs	r2, #0
 800e076:	4908      	ldr	r1, [pc, #32]	; (800e098 <tcpip_tcp_timer+0x40>)
 800e078:	20fa      	movs	r0, #250	; 0xfa
 800e07a:	f000 f8f3 	bl	800e264 <sys_timeout>
 800e07e:	e003      	b.n	800e088 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800e080:	4b06      	ldr	r3, [pc, #24]	; (800e09c <tcpip_tcp_timer+0x44>)
 800e082:	2200      	movs	r2, #0
 800e084:	601a      	str	r2, [r3, #0]
  }
}
 800e086:	bf00      	nop
 800e088:	bf00      	nop
 800e08a:	3708      	adds	r7, #8
 800e08c:	46bd      	mov	sp, r7
 800e08e:	bd80      	pop	{r7, pc}
 800e090:	2000a7d8 	.word	0x2000a7d8
 800e094:	2000a7dc 	.word	0x2000a7dc
 800e098:	0800e059 	.word	0x0800e059
 800e09c:	2000a824 	.word	0x2000a824

0800e0a0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800e0a4:	4b0a      	ldr	r3, [pc, #40]	; (800e0d0 <tcp_timer_needed+0x30>)
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d10f      	bne.n	800e0cc <tcp_timer_needed+0x2c>
 800e0ac:	4b09      	ldr	r3, [pc, #36]	; (800e0d4 <tcp_timer_needed+0x34>)
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d103      	bne.n	800e0bc <tcp_timer_needed+0x1c>
 800e0b4:	4b08      	ldr	r3, [pc, #32]	; (800e0d8 <tcp_timer_needed+0x38>)
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d007      	beq.n	800e0cc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800e0bc:	4b04      	ldr	r3, [pc, #16]	; (800e0d0 <tcp_timer_needed+0x30>)
 800e0be:	2201      	movs	r2, #1
 800e0c0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e0c2:	2200      	movs	r2, #0
 800e0c4:	4905      	ldr	r1, [pc, #20]	; (800e0dc <tcp_timer_needed+0x3c>)
 800e0c6:	20fa      	movs	r0, #250	; 0xfa
 800e0c8:	f000 f8cc 	bl	800e264 <sys_timeout>
  }
}
 800e0cc:	bf00      	nop
 800e0ce:	bd80      	pop	{r7, pc}
 800e0d0:	2000a824 	.word	0x2000a824
 800e0d4:	2000a7d8 	.word	0x2000a7d8
 800e0d8:	2000a7dc 	.word	0x2000a7dc
 800e0dc:	0800e059 	.word	0x0800e059

0800e0e0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b086      	sub	sp, #24
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	60f8      	str	r0, [r7, #12]
 800e0e8:	60b9      	str	r1, [r7, #8]
 800e0ea:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800e0ec:	2006      	movs	r0, #6
 800e0ee:	f7f9 fd07 	bl	8007b00 <memp_malloc>
 800e0f2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800e0f4:	693b      	ldr	r3, [r7, #16]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d109      	bne.n	800e10e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800e0fa:	693b      	ldr	r3, [r7, #16]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d151      	bne.n	800e1a4 <sys_timeout_abs+0xc4>
 800e100:	4b2a      	ldr	r3, [pc, #168]	; (800e1ac <sys_timeout_abs+0xcc>)
 800e102:	22be      	movs	r2, #190	; 0xbe
 800e104:	492a      	ldr	r1, [pc, #168]	; (800e1b0 <sys_timeout_abs+0xd0>)
 800e106:	482b      	ldr	r0, [pc, #172]	; (800e1b4 <sys_timeout_abs+0xd4>)
 800e108:	f003 fdd6 	bl	8011cb8 <iprintf>
    return;
 800e10c:	e04a      	b.n	800e1a4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800e10e:	693b      	ldr	r3, [r7, #16]
 800e110:	2200      	movs	r2, #0
 800e112:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800e114:	693b      	ldr	r3, [r7, #16]
 800e116:	68ba      	ldr	r2, [r7, #8]
 800e118:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800e11a:	693b      	ldr	r3, [r7, #16]
 800e11c:	687a      	ldr	r2, [r7, #4]
 800e11e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800e120:	693b      	ldr	r3, [r7, #16]
 800e122:	68fa      	ldr	r2, [r7, #12]
 800e124:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800e126:	4b24      	ldr	r3, [pc, #144]	; (800e1b8 <sys_timeout_abs+0xd8>)
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d103      	bne.n	800e136 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800e12e:	4a22      	ldr	r2, [pc, #136]	; (800e1b8 <sys_timeout_abs+0xd8>)
 800e130:	693b      	ldr	r3, [r7, #16]
 800e132:	6013      	str	r3, [r2, #0]
    return;
 800e134:	e037      	b.n	800e1a6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800e136:	693b      	ldr	r3, [r7, #16]
 800e138:	685a      	ldr	r2, [r3, #4]
 800e13a:	4b1f      	ldr	r3, [pc, #124]	; (800e1b8 <sys_timeout_abs+0xd8>)
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	685b      	ldr	r3, [r3, #4]
 800e140:	1ad3      	subs	r3, r2, r3
 800e142:	0fdb      	lsrs	r3, r3, #31
 800e144:	f003 0301 	and.w	r3, r3, #1
 800e148:	b2db      	uxtb	r3, r3
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d007      	beq.n	800e15e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800e14e:	4b1a      	ldr	r3, [pc, #104]	; (800e1b8 <sys_timeout_abs+0xd8>)
 800e150:	681a      	ldr	r2, [r3, #0]
 800e152:	693b      	ldr	r3, [r7, #16]
 800e154:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800e156:	4a18      	ldr	r2, [pc, #96]	; (800e1b8 <sys_timeout_abs+0xd8>)
 800e158:	693b      	ldr	r3, [r7, #16]
 800e15a:	6013      	str	r3, [r2, #0]
 800e15c:	e023      	b.n	800e1a6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800e15e:	4b16      	ldr	r3, [pc, #88]	; (800e1b8 <sys_timeout_abs+0xd8>)
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	617b      	str	r3, [r7, #20]
 800e164:	e01a      	b.n	800e19c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800e166:	697b      	ldr	r3, [r7, #20]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d00b      	beq.n	800e186 <sys_timeout_abs+0xa6>
 800e16e:	693b      	ldr	r3, [r7, #16]
 800e170:	685a      	ldr	r2, [r3, #4]
 800e172:	697b      	ldr	r3, [r7, #20]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	685b      	ldr	r3, [r3, #4]
 800e178:	1ad3      	subs	r3, r2, r3
 800e17a:	0fdb      	lsrs	r3, r3, #31
 800e17c:	f003 0301 	and.w	r3, r3, #1
 800e180:	b2db      	uxtb	r3, r3
 800e182:	2b00      	cmp	r3, #0
 800e184:	d007      	beq.n	800e196 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800e186:	697b      	ldr	r3, [r7, #20]
 800e188:	681a      	ldr	r2, [r3, #0]
 800e18a:	693b      	ldr	r3, [r7, #16]
 800e18c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800e18e:	697b      	ldr	r3, [r7, #20]
 800e190:	693a      	ldr	r2, [r7, #16]
 800e192:	601a      	str	r2, [r3, #0]
        break;
 800e194:	e007      	b.n	800e1a6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800e196:	697b      	ldr	r3, [r7, #20]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	617b      	str	r3, [r7, #20]
 800e19c:	697b      	ldr	r3, [r7, #20]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d1e1      	bne.n	800e166 <sys_timeout_abs+0x86>
 800e1a2:	e000      	b.n	800e1a6 <sys_timeout_abs+0xc6>
    return;
 800e1a4:	bf00      	nop
      }
    }
  }
}
 800e1a6:	3718      	adds	r7, #24
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	bd80      	pop	{r7, pc}
 800e1ac:	08015b74 	.word	0x08015b74
 800e1b0:	08015ba8 	.word	0x08015ba8
 800e1b4:	08015be8 	.word	0x08015be8
 800e1b8:	2000a81c 	.word	0x2000a81c

0800e1bc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b086      	sub	sp, #24
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800e1c8:	697b      	ldr	r3, [r7, #20]
 800e1ca:	685b      	ldr	r3, [r3, #4]
 800e1cc:	4798      	blx	r3

  now = sys_now();
 800e1ce:	f7f8 fe0b 	bl	8006de8 <sys_now>
 800e1d2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800e1d4:	697b      	ldr	r3, [r7, #20]
 800e1d6:	681a      	ldr	r2, [r3, #0]
 800e1d8:	4b0f      	ldr	r3, [pc, #60]	; (800e218 <lwip_cyclic_timer+0x5c>)
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	4413      	add	r3, r2
 800e1de:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800e1e0:	68fa      	ldr	r2, [r7, #12]
 800e1e2:	693b      	ldr	r3, [r7, #16]
 800e1e4:	1ad3      	subs	r3, r2, r3
 800e1e6:	0fdb      	lsrs	r3, r3, #31
 800e1e8:	f003 0301 	and.w	r3, r3, #1
 800e1ec:	b2db      	uxtb	r3, r3
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d009      	beq.n	800e206 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800e1f2:	697b      	ldr	r3, [r7, #20]
 800e1f4:	681a      	ldr	r2, [r3, #0]
 800e1f6:	693b      	ldr	r3, [r7, #16]
 800e1f8:	4413      	add	r3, r2
 800e1fa:	687a      	ldr	r2, [r7, #4]
 800e1fc:	4907      	ldr	r1, [pc, #28]	; (800e21c <lwip_cyclic_timer+0x60>)
 800e1fe:	4618      	mov	r0, r3
 800e200:	f7ff ff6e 	bl	800e0e0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800e204:	e004      	b.n	800e210 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800e206:	687a      	ldr	r2, [r7, #4]
 800e208:	4904      	ldr	r1, [pc, #16]	; (800e21c <lwip_cyclic_timer+0x60>)
 800e20a:	68f8      	ldr	r0, [r7, #12]
 800e20c:	f7ff ff68 	bl	800e0e0 <sys_timeout_abs>
}
 800e210:	bf00      	nop
 800e212:	3718      	adds	r7, #24
 800e214:	46bd      	mov	sp, r7
 800e216:	bd80      	pop	{r7, pc}
 800e218:	2000a820 	.word	0x2000a820
 800e21c:	0800e1bd 	.word	0x0800e1bd

0800e220 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b082      	sub	sp, #8
 800e224:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e226:	2301      	movs	r3, #1
 800e228:	607b      	str	r3, [r7, #4]
 800e22a:	e00e      	b.n	800e24a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800e22c:	4a0b      	ldr	r2, [pc, #44]	; (800e25c <sys_timeouts_init+0x3c>)
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	00db      	lsls	r3, r3, #3
 800e238:	4a08      	ldr	r2, [pc, #32]	; (800e25c <sys_timeouts_init+0x3c>)
 800e23a:	4413      	add	r3, r2
 800e23c:	461a      	mov	r2, r3
 800e23e:	4908      	ldr	r1, [pc, #32]	; (800e260 <sys_timeouts_init+0x40>)
 800e240:	f000 f810 	bl	800e264 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	3301      	adds	r3, #1
 800e248:	607b      	str	r3, [r7, #4]
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	2b02      	cmp	r3, #2
 800e24e:	d9ed      	bls.n	800e22c <sys_timeouts_init+0xc>
  }
}
 800e250:	bf00      	nop
 800e252:	bf00      	nop
 800e254:	3708      	adds	r7, #8
 800e256:	46bd      	mov	sp, r7
 800e258:	bd80      	pop	{r7, pc}
 800e25a:	bf00      	nop
 800e25c:	08016760 	.word	0x08016760
 800e260:	0800e1bd 	.word	0x0800e1bd

0800e264 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800e264:	b580      	push	{r7, lr}
 800e266:	b086      	sub	sp, #24
 800e268:	af00      	add	r7, sp, #0
 800e26a:	60f8      	str	r0, [r7, #12]
 800e26c:	60b9      	str	r1, [r7, #8]
 800e26e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e276:	d306      	bcc.n	800e286 <sys_timeout+0x22>
 800e278:	4b0a      	ldr	r3, [pc, #40]	; (800e2a4 <sys_timeout+0x40>)
 800e27a:	f240 1229 	movw	r2, #297	; 0x129
 800e27e:	490a      	ldr	r1, [pc, #40]	; (800e2a8 <sys_timeout+0x44>)
 800e280:	480a      	ldr	r0, [pc, #40]	; (800e2ac <sys_timeout+0x48>)
 800e282:	f003 fd19 	bl	8011cb8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800e286:	f7f8 fdaf 	bl	8006de8 <sys_now>
 800e28a:	4602      	mov	r2, r0
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	4413      	add	r3, r2
 800e290:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800e292:	687a      	ldr	r2, [r7, #4]
 800e294:	68b9      	ldr	r1, [r7, #8]
 800e296:	6978      	ldr	r0, [r7, #20]
 800e298:	f7ff ff22 	bl	800e0e0 <sys_timeout_abs>
#endif
}
 800e29c:	bf00      	nop
 800e29e:	3718      	adds	r7, #24
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	bd80      	pop	{r7, pc}
 800e2a4:	08015b74 	.word	0x08015b74
 800e2a8:	08015c10 	.word	0x08015c10
 800e2ac:	08015be8 	.word	0x08015be8

0800e2b0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b084      	sub	sp, #16
 800e2b4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800e2b6:	f7f8 fd97 	bl	8006de8 <sys_now>
 800e2ba:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800e2bc:	4b1a      	ldr	r3, [pc, #104]	; (800e328 <sys_check_timeouts+0x78>)
 800e2be:	781b      	ldrb	r3, [r3, #0]
 800e2c0:	b2db      	uxtb	r3, r3
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d001      	beq.n	800e2ca <sys_check_timeouts+0x1a>
 800e2c6:	f7f9 ffc7 	bl	8008258 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800e2ca:	4b18      	ldr	r3, [pc, #96]	; (800e32c <sys_check_timeouts+0x7c>)
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800e2d0:	68bb      	ldr	r3, [r7, #8]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d022      	beq.n	800e31c <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800e2d6:	68bb      	ldr	r3, [r7, #8]
 800e2d8:	685b      	ldr	r3, [r3, #4]
 800e2da:	68fa      	ldr	r2, [r7, #12]
 800e2dc:	1ad3      	subs	r3, r2, r3
 800e2de:	0fdb      	lsrs	r3, r3, #31
 800e2e0:	f003 0301 	and.w	r3, r3, #1
 800e2e4:	b2db      	uxtb	r3, r3
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d11a      	bne.n	800e320 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800e2ea:	68bb      	ldr	r3, [r7, #8]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	4a0f      	ldr	r2, [pc, #60]	; (800e32c <sys_check_timeouts+0x7c>)
 800e2f0:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800e2f2:	68bb      	ldr	r3, [r7, #8]
 800e2f4:	689b      	ldr	r3, [r3, #8]
 800e2f6:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800e2f8:	68bb      	ldr	r3, [r7, #8]
 800e2fa:	68db      	ldr	r3, [r3, #12]
 800e2fc:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800e2fe:	68bb      	ldr	r3, [r7, #8]
 800e300:	685b      	ldr	r3, [r3, #4]
 800e302:	4a0b      	ldr	r2, [pc, #44]	; (800e330 <sys_check_timeouts+0x80>)
 800e304:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800e306:	68b9      	ldr	r1, [r7, #8]
 800e308:	2006      	movs	r0, #6
 800e30a:	f7f9 fc69 	bl	8007be0 <memp_free>
    if (handler != NULL) {
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d0d3      	beq.n	800e2bc <sys_check_timeouts+0xc>
      handler(arg);
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	6838      	ldr	r0, [r7, #0]
 800e318:	4798      	blx	r3
  do {
 800e31a:	e7cf      	b.n	800e2bc <sys_check_timeouts+0xc>
      return;
 800e31c:	bf00      	nop
 800e31e:	e000      	b.n	800e322 <sys_check_timeouts+0x72>
      return;
 800e320:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800e322:	3710      	adds	r7, #16
 800e324:	46bd      	mov	sp, r7
 800e326:	bd80      	pop	{r7, pc}
 800e328:	2000a7c9 	.word	0x2000a7c9
 800e32c:	2000a81c 	.word	0x2000a81c
 800e330:	2000a820 	.word	0x2000a820

0800e334 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800e334:	b580      	push	{r7, lr}
 800e336:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e338:	f002 fde6 	bl	8010f08 <rand>
 800e33c:	4603      	mov	r3, r0
 800e33e:	b29b      	uxth	r3, r3
 800e340:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e344:	b29b      	uxth	r3, r3
 800e346:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e34a:	b29a      	uxth	r2, r3
 800e34c:	4b01      	ldr	r3, [pc, #4]	; (800e354 <udp_init+0x20>)
 800e34e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e350:	bf00      	nop
 800e352:	bd80      	pop	{r7, pc}
 800e354:	20000028 	.word	0x20000028

0800e358 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800e358:	b480      	push	{r7}
 800e35a:	b083      	sub	sp, #12
 800e35c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800e35e:	2300      	movs	r3, #0
 800e360:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800e362:	4b17      	ldr	r3, [pc, #92]	; (800e3c0 <udp_new_port+0x68>)
 800e364:	881b      	ldrh	r3, [r3, #0]
 800e366:	1c5a      	adds	r2, r3, #1
 800e368:	b291      	uxth	r1, r2
 800e36a:	4a15      	ldr	r2, [pc, #84]	; (800e3c0 <udp_new_port+0x68>)
 800e36c:	8011      	strh	r1, [r2, #0]
 800e36e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e372:	4293      	cmp	r3, r2
 800e374:	d103      	bne.n	800e37e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800e376:	4b12      	ldr	r3, [pc, #72]	; (800e3c0 <udp_new_port+0x68>)
 800e378:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800e37c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e37e:	4b11      	ldr	r3, [pc, #68]	; (800e3c4 <udp_new_port+0x6c>)
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	603b      	str	r3, [r7, #0]
 800e384:	e011      	b.n	800e3aa <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	8a5a      	ldrh	r2, [r3, #18]
 800e38a:	4b0d      	ldr	r3, [pc, #52]	; (800e3c0 <udp_new_port+0x68>)
 800e38c:	881b      	ldrh	r3, [r3, #0]
 800e38e:	429a      	cmp	r2, r3
 800e390:	d108      	bne.n	800e3a4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800e392:	88fb      	ldrh	r3, [r7, #6]
 800e394:	3301      	adds	r3, #1
 800e396:	80fb      	strh	r3, [r7, #6]
 800e398:	88fb      	ldrh	r3, [r7, #6]
 800e39a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e39e:	d3e0      	bcc.n	800e362 <udp_new_port+0xa>
        return 0;
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	e007      	b.n	800e3b4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	68db      	ldr	r3, [r3, #12]
 800e3a8:	603b      	str	r3, [r7, #0]
 800e3aa:	683b      	ldr	r3, [r7, #0]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d1ea      	bne.n	800e386 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800e3b0:	4b03      	ldr	r3, [pc, #12]	; (800e3c0 <udp_new_port+0x68>)
 800e3b2:	881b      	ldrh	r3, [r3, #0]
}
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	370c      	adds	r7, #12
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3be:	4770      	bx	lr
 800e3c0:	20000028 	.word	0x20000028
 800e3c4:	2000a828 	.word	0x2000a828

0800e3c8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b084      	sub	sp, #16
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	60f8      	str	r0, [r7, #12]
 800e3d0:	60b9      	str	r1, [r7, #8]
 800e3d2:	4613      	mov	r3, r2
 800e3d4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d105      	bne.n	800e3e8 <udp_input_local_match+0x20>
 800e3dc:	4b27      	ldr	r3, [pc, #156]	; (800e47c <udp_input_local_match+0xb4>)
 800e3de:	2287      	movs	r2, #135	; 0x87
 800e3e0:	4927      	ldr	r1, [pc, #156]	; (800e480 <udp_input_local_match+0xb8>)
 800e3e2:	4828      	ldr	r0, [pc, #160]	; (800e484 <udp_input_local_match+0xbc>)
 800e3e4:	f003 fc68 	bl	8011cb8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800e3e8:	68bb      	ldr	r3, [r7, #8]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d105      	bne.n	800e3fa <udp_input_local_match+0x32>
 800e3ee:	4b23      	ldr	r3, [pc, #140]	; (800e47c <udp_input_local_match+0xb4>)
 800e3f0:	2288      	movs	r2, #136	; 0x88
 800e3f2:	4925      	ldr	r1, [pc, #148]	; (800e488 <udp_input_local_match+0xc0>)
 800e3f4:	4823      	ldr	r0, [pc, #140]	; (800e484 <udp_input_local_match+0xbc>)
 800e3f6:	f003 fc5f 	bl	8011cb8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	7a1b      	ldrb	r3, [r3, #8]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d00b      	beq.n	800e41a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	7a1a      	ldrb	r2, [r3, #8]
 800e406:	4b21      	ldr	r3, [pc, #132]	; (800e48c <udp_input_local_match+0xc4>)
 800e408:	685b      	ldr	r3, [r3, #4]
 800e40a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e40e:	3301      	adds	r3, #1
 800e410:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e412:	429a      	cmp	r2, r3
 800e414:	d001      	beq.n	800e41a <udp_input_local_match+0x52>
    return 0;
 800e416:	2300      	movs	r3, #0
 800e418:	e02b      	b.n	800e472 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800e41a:	79fb      	ldrb	r3, [r7, #7]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d018      	beq.n	800e452 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d013      	beq.n	800e44e <udp_input_local_match+0x86>
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d00f      	beq.n	800e44e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e42e:	4b17      	ldr	r3, [pc, #92]	; (800e48c <udp_input_local_match+0xc4>)
 800e430:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e432:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e436:	d00a      	beq.n	800e44e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	681a      	ldr	r2, [r3, #0]
 800e43c:	4b13      	ldr	r3, [pc, #76]	; (800e48c <udp_input_local_match+0xc4>)
 800e43e:	695b      	ldr	r3, [r3, #20]
 800e440:	405a      	eors	r2, r3
 800e442:	68bb      	ldr	r3, [r7, #8]
 800e444:	3308      	adds	r3, #8
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d110      	bne.n	800e470 <udp_input_local_match+0xa8>
          return 1;
 800e44e:	2301      	movs	r3, #1
 800e450:	e00f      	b.n	800e472 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d009      	beq.n	800e46c <udp_input_local_match+0xa4>
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d005      	beq.n	800e46c <udp_input_local_match+0xa4>
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	681a      	ldr	r2, [r3, #0]
 800e464:	4b09      	ldr	r3, [pc, #36]	; (800e48c <udp_input_local_match+0xc4>)
 800e466:	695b      	ldr	r3, [r3, #20]
 800e468:	429a      	cmp	r2, r3
 800e46a:	d101      	bne.n	800e470 <udp_input_local_match+0xa8>
        return 1;
 800e46c:	2301      	movs	r3, #1
 800e46e:	e000      	b.n	800e472 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800e470:	2300      	movs	r3, #0
}
 800e472:	4618      	mov	r0, r3
 800e474:	3710      	adds	r7, #16
 800e476:	46bd      	mov	sp, r7
 800e478:	bd80      	pop	{r7, pc}
 800e47a:	bf00      	nop
 800e47c:	08015c5c 	.word	0x08015c5c
 800e480:	08015c8c 	.word	0x08015c8c
 800e484:	08015cb0 	.word	0x08015cb0
 800e488:	08015cd8 	.word	0x08015cd8
 800e48c:	2000509c 	.word	0x2000509c

0800e490 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800e490:	b590      	push	{r4, r7, lr}
 800e492:	b08d      	sub	sp, #52	; 0x34
 800e494:	af02      	add	r7, sp, #8
 800e496:	6078      	str	r0, [r7, #4]
 800e498:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800e49a:	2300      	movs	r3, #0
 800e49c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d105      	bne.n	800e4b0 <udp_input+0x20>
 800e4a4:	4b7c      	ldr	r3, [pc, #496]	; (800e698 <udp_input+0x208>)
 800e4a6:	22cf      	movs	r2, #207	; 0xcf
 800e4a8:	497c      	ldr	r1, [pc, #496]	; (800e69c <udp_input+0x20c>)
 800e4aa:	487d      	ldr	r0, [pc, #500]	; (800e6a0 <udp_input+0x210>)
 800e4ac:	f003 fc04 	bl	8011cb8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800e4b0:	683b      	ldr	r3, [r7, #0]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d105      	bne.n	800e4c2 <udp_input+0x32>
 800e4b6:	4b78      	ldr	r3, [pc, #480]	; (800e698 <udp_input+0x208>)
 800e4b8:	22d0      	movs	r2, #208	; 0xd0
 800e4ba:	497a      	ldr	r1, [pc, #488]	; (800e6a4 <udp_input+0x214>)
 800e4bc:	4878      	ldr	r0, [pc, #480]	; (800e6a0 <udp_input+0x210>)
 800e4be:	f003 fbfb 	bl	8011cb8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	895b      	ldrh	r3, [r3, #10]
 800e4c6:	2b07      	cmp	r3, #7
 800e4c8:	d803      	bhi.n	800e4d2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800e4ca:	6878      	ldr	r0, [r7, #4]
 800e4cc:	f7fa f9fe 	bl	80088cc <pbuf_free>
    goto end;
 800e4d0:	e0de      	b.n	800e690 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	685b      	ldr	r3, [r3, #4]
 800e4d6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800e4d8:	4b73      	ldr	r3, [pc, #460]	; (800e6a8 <udp_input+0x218>)
 800e4da:	695b      	ldr	r3, [r3, #20]
 800e4dc:	4a72      	ldr	r2, [pc, #456]	; (800e6a8 <udp_input+0x218>)
 800e4de:	6812      	ldr	r2, [r2, #0]
 800e4e0:	4611      	mov	r1, r2
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	f001 fdb6 	bl	8010054 <ip4_addr_isbroadcast_u32>
 800e4e8:	4603      	mov	r3, r0
 800e4ea:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800e4ec:	697b      	ldr	r3, [r7, #20]
 800e4ee:	881b      	ldrh	r3, [r3, #0]
 800e4f0:	b29b      	uxth	r3, r3
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	f7f8 fe8c 	bl	8007210 <lwip_htons>
 800e4f8:	4603      	mov	r3, r0
 800e4fa:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800e4fc:	697b      	ldr	r3, [r7, #20]
 800e4fe:	885b      	ldrh	r3, [r3, #2]
 800e500:	b29b      	uxth	r3, r3
 800e502:	4618      	mov	r0, r3
 800e504:	f7f8 fe84 	bl	8007210 <lwip_htons>
 800e508:	4603      	mov	r3, r0
 800e50a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800e50c:	2300      	movs	r3, #0
 800e50e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800e510:	2300      	movs	r3, #0
 800e512:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800e514:	2300      	movs	r3, #0
 800e516:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e518:	4b64      	ldr	r3, [pc, #400]	; (800e6ac <udp_input+0x21c>)
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	627b      	str	r3, [r7, #36]	; 0x24
 800e51e:	e054      	b.n	800e5ca <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800e520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e522:	8a5b      	ldrh	r3, [r3, #18]
 800e524:	89fa      	ldrh	r2, [r7, #14]
 800e526:	429a      	cmp	r2, r3
 800e528:	d14a      	bne.n	800e5c0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800e52a:	7cfb      	ldrb	r3, [r7, #19]
 800e52c:	461a      	mov	r2, r3
 800e52e:	6839      	ldr	r1, [r7, #0]
 800e530:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e532:	f7ff ff49 	bl	800e3c8 <udp_input_local_match>
 800e536:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d041      	beq.n	800e5c0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800e53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e53e:	7c1b      	ldrb	r3, [r3, #16]
 800e540:	f003 0304 	and.w	r3, r3, #4
 800e544:	2b00      	cmp	r3, #0
 800e546:	d11d      	bne.n	800e584 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800e548:	69fb      	ldr	r3, [r7, #28]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d102      	bne.n	800e554 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800e54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e550:	61fb      	str	r3, [r7, #28]
 800e552:	e017      	b.n	800e584 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800e554:	7cfb      	ldrb	r3, [r7, #19]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d014      	beq.n	800e584 <udp_input+0xf4>
 800e55a:	4b53      	ldr	r3, [pc, #332]	; (800e6a8 <udp_input+0x218>)
 800e55c:	695b      	ldr	r3, [r3, #20]
 800e55e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e562:	d10f      	bne.n	800e584 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800e564:	69fb      	ldr	r3, [r7, #28]
 800e566:	681a      	ldr	r2, [r3, #0]
 800e568:	683b      	ldr	r3, [r7, #0]
 800e56a:	3304      	adds	r3, #4
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	429a      	cmp	r2, r3
 800e570:	d008      	beq.n	800e584 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800e572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e574:	681a      	ldr	r2, [r3, #0]
 800e576:	683b      	ldr	r3, [r7, #0]
 800e578:	3304      	adds	r3, #4
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	429a      	cmp	r2, r3
 800e57e:	d101      	bne.n	800e584 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800e580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e582:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800e584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e586:	8a9b      	ldrh	r3, [r3, #20]
 800e588:	8a3a      	ldrh	r2, [r7, #16]
 800e58a:	429a      	cmp	r2, r3
 800e58c:	d118      	bne.n	800e5c0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e590:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800e592:	2b00      	cmp	r3, #0
 800e594:	d005      	beq.n	800e5a2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800e596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e598:	685a      	ldr	r2, [r3, #4]
 800e59a:	4b43      	ldr	r3, [pc, #268]	; (800e6a8 <udp_input+0x218>)
 800e59c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e59e:	429a      	cmp	r2, r3
 800e5a0:	d10e      	bne.n	800e5c0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800e5a2:	6a3b      	ldr	r3, [r7, #32]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d014      	beq.n	800e5d2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800e5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5aa:	68da      	ldr	r2, [r3, #12]
 800e5ac:	6a3b      	ldr	r3, [r7, #32]
 800e5ae:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800e5b0:	4b3e      	ldr	r3, [pc, #248]	; (800e6ac <udp_input+0x21c>)
 800e5b2:	681a      	ldr	r2, [r3, #0]
 800e5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5b6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800e5b8:	4a3c      	ldr	r2, [pc, #240]	; (800e6ac <udp_input+0x21c>)
 800e5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5bc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800e5be:	e008      	b.n	800e5d2 <udp_input+0x142>
      }
    }

    prev = pcb;
 800e5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5c2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5c6:	68db      	ldr	r3, [r3, #12]
 800e5c8:	627b      	str	r3, [r7, #36]	; 0x24
 800e5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d1a7      	bne.n	800e520 <udp_input+0x90>
 800e5d0:	e000      	b.n	800e5d4 <udp_input+0x144>
        break;
 800e5d2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800e5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d101      	bne.n	800e5de <udp_input+0x14e>
    pcb = uncon_pcb;
 800e5da:	69fb      	ldr	r3, [r7, #28]
 800e5dc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800e5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d002      	beq.n	800e5ea <udp_input+0x15a>
    for_us = 1;
 800e5e4:	2301      	movs	r3, #1
 800e5e6:	76fb      	strb	r3, [r7, #27]
 800e5e8:	e00a      	b.n	800e600 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800e5ea:	683b      	ldr	r3, [r7, #0]
 800e5ec:	3304      	adds	r3, #4
 800e5ee:	681a      	ldr	r2, [r3, #0]
 800e5f0:	4b2d      	ldr	r3, [pc, #180]	; (800e6a8 <udp_input+0x218>)
 800e5f2:	695b      	ldr	r3, [r3, #20]
 800e5f4:	429a      	cmp	r2, r3
 800e5f6:	bf0c      	ite	eq
 800e5f8:	2301      	moveq	r3, #1
 800e5fa:	2300      	movne	r3, #0
 800e5fc:	b2db      	uxtb	r3, r3
 800e5fe:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800e600:	7efb      	ldrb	r3, [r7, #27]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d041      	beq.n	800e68a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800e606:	2108      	movs	r1, #8
 800e608:	6878      	ldr	r0, [r7, #4]
 800e60a:	f7fa f8d9 	bl	80087c0 <pbuf_remove_header>
 800e60e:	4603      	mov	r3, r0
 800e610:	2b00      	cmp	r3, #0
 800e612:	d00a      	beq.n	800e62a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800e614:	4b20      	ldr	r3, [pc, #128]	; (800e698 <udp_input+0x208>)
 800e616:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800e61a:	4925      	ldr	r1, [pc, #148]	; (800e6b0 <udp_input+0x220>)
 800e61c:	4820      	ldr	r0, [pc, #128]	; (800e6a0 <udp_input+0x210>)
 800e61e:	f003 fb4b 	bl	8011cb8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800e622:	6878      	ldr	r0, [r7, #4]
 800e624:	f7fa f952 	bl	80088cc <pbuf_free>
      goto end;
 800e628:	e032      	b.n	800e690 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800e62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d012      	beq.n	800e656 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800e630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e632:	699b      	ldr	r3, [r3, #24]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d00a      	beq.n	800e64e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800e638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e63a:	699c      	ldr	r4, [r3, #24]
 800e63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e63e:	69d8      	ldr	r0, [r3, #28]
 800e640:	8a3b      	ldrh	r3, [r7, #16]
 800e642:	9300      	str	r3, [sp, #0]
 800e644:	4b1b      	ldr	r3, [pc, #108]	; (800e6b4 <udp_input+0x224>)
 800e646:	687a      	ldr	r2, [r7, #4]
 800e648:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e64a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800e64c:	e021      	b.n	800e692 <udp_input+0x202>
        pbuf_free(p);
 800e64e:	6878      	ldr	r0, [r7, #4]
 800e650:	f7fa f93c 	bl	80088cc <pbuf_free>
        goto end;
 800e654:	e01c      	b.n	800e690 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800e656:	7cfb      	ldrb	r3, [r7, #19]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d112      	bne.n	800e682 <udp_input+0x1f2>
 800e65c:	4b12      	ldr	r3, [pc, #72]	; (800e6a8 <udp_input+0x218>)
 800e65e:	695b      	ldr	r3, [r3, #20]
 800e660:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e664:	2be0      	cmp	r3, #224	; 0xe0
 800e666:	d00c      	beq.n	800e682 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800e668:	4b0f      	ldr	r3, [pc, #60]	; (800e6a8 <udp_input+0x218>)
 800e66a:	899b      	ldrh	r3, [r3, #12]
 800e66c:	3308      	adds	r3, #8
 800e66e:	b29b      	uxth	r3, r3
 800e670:	b21b      	sxth	r3, r3
 800e672:	4619      	mov	r1, r3
 800e674:	6878      	ldr	r0, [r7, #4]
 800e676:	f7fa f916 	bl	80088a6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800e67a:	2103      	movs	r1, #3
 800e67c:	6878      	ldr	r0, [r7, #4]
 800e67e:	f001 f9c9 	bl	800fa14 <icmp_dest_unreach>
      pbuf_free(p);
 800e682:	6878      	ldr	r0, [r7, #4]
 800e684:	f7fa f922 	bl	80088cc <pbuf_free>
  return;
 800e688:	e003      	b.n	800e692 <udp_input+0x202>
    pbuf_free(p);
 800e68a:	6878      	ldr	r0, [r7, #4]
 800e68c:	f7fa f91e 	bl	80088cc <pbuf_free>
  return;
 800e690:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800e692:	372c      	adds	r7, #44	; 0x2c
 800e694:	46bd      	mov	sp, r7
 800e696:	bd90      	pop	{r4, r7, pc}
 800e698:	08015c5c 	.word	0x08015c5c
 800e69c:	08015d00 	.word	0x08015d00
 800e6a0:	08015cb0 	.word	0x08015cb0
 800e6a4:	08015d18 	.word	0x08015d18
 800e6a8:	2000509c 	.word	0x2000509c
 800e6ac:	2000a828 	.word	0x2000a828
 800e6b0:	08015d34 	.word	0x08015d34
 800e6b4:	200050ac 	.word	0x200050ac

0800e6b8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b086      	sub	sp, #24
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	60f8      	str	r0, [r7, #12]
 800e6c0:	60b9      	str	r1, [r7, #8]
 800e6c2:	4613      	mov	r3, r2
 800e6c4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e6c6:	68bb      	ldr	r3, [r7, #8]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d101      	bne.n	800e6d0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800e6cc:	4b39      	ldr	r3, [pc, #228]	; (800e7b4 <udp_bind+0xfc>)
 800e6ce:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d109      	bne.n	800e6ea <udp_bind+0x32>
 800e6d6:	4b38      	ldr	r3, [pc, #224]	; (800e7b8 <udp_bind+0x100>)
 800e6d8:	f240 32b7 	movw	r2, #951	; 0x3b7
 800e6dc:	4937      	ldr	r1, [pc, #220]	; (800e7bc <udp_bind+0x104>)
 800e6de:	4838      	ldr	r0, [pc, #224]	; (800e7c0 <udp_bind+0x108>)
 800e6e0:	f003 faea 	bl	8011cb8 <iprintf>
 800e6e4:	f06f 030f 	mvn.w	r3, #15
 800e6e8:	e060      	b.n	800e7ac <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e6ee:	4b35      	ldr	r3, [pc, #212]	; (800e7c4 <udp_bind+0x10c>)
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	617b      	str	r3, [r7, #20]
 800e6f4:	e009      	b.n	800e70a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800e6f6:	68fa      	ldr	r2, [r7, #12]
 800e6f8:	697b      	ldr	r3, [r7, #20]
 800e6fa:	429a      	cmp	r2, r3
 800e6fc:	d102      	bne.n	800e704 <udp_bind+0x4c>
      rebind = 1;
 800e6fe:	2301      	movs	r3, #1
 800e700:	74fb      	strb	r3, [r7, #19]
      break;
 800e702:	e005      	b.n	800e710 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e704:	697b      	ldr	r3, [r7, #20]
 800e706:	68db      	ldr	r3, [r3, #12]
 800e708:	617b      	str	r3, [r7, #20]
 800e70a:	697b      	ldr	r3, [r7, #20]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d1f2      	bne.n	800e6f6 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800e710:	88fb      	ldrh	r3, [r7, #6]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d109      	bne.n	800e72a <udp_bind+0x72>
    port = udp_new_port();
 800e716:	f7ff fe1f 	bl	800e358 <udp_new_port>
 800e71a:	4603      	mov	r3, r0
 800e71c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800e71e:	88fb      	ldrh	r3, [r7, #6]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d12c      	bne.n	800e77e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800e724:	f06f 0307 	mvn.w	r3, #7
 800e728:	e040      	b.n	800e7ac <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e72a:	4b26      	ldr	r3, [pc, #152]	; (800e7c4 <udp_bind+0x10c>)
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	617b      	str	r3, [r7, #20]
 800e730:	e022      	b.n	800e778 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800e732:	68fa      	ldr	r2, [r7, #12]
 800e734:	697b      	ldr	r3, [r7, #20]
 800e736:	429a      	cmp	r2, r3
 800e738:	d01b      	beq.n	800e772 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800e73a:	697b      	ldr	r3, [r7, #20]
 800e73c:	8a5b      	ldrh	r3, [r3, #18]
 800e73e:	88fa      	ldrh	r2, [r7, #6]
 800e740:	429a      	cmp	r2, r3
 800e742:	d116      	bne.n	800e772 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800e744:	697b      	ldr	r3, [r7, #20]
 800e746:	681a      	ldr	r2, [r3, #0]
 800e748:	68bb      	ldr	r3, [r7, #8]
 800e74a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800e74c:	429a      	cmp	r2, r3
 800e74e:	d00d      	beq.n	800e76c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800e750:	68bb      	ldr	r3, [r7, #8]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d00a      	beq.n	800e76c <udp_bind+0xb4>
 800e756:	68bb      	ldr	r3, [r7, #8]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d006      	beq.n	800e76c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800e75e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800e760:	2b00      	cmp	r3, #0
 800e762:	d003      	beq.n	800e76c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800e764:	697b      	ldr	r3, [r7, #20]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d102      	bne.n	800e772 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800e76c:	f06f 0307 	mvn.w	r3, #7
 800e770:	e01c      	b.n	800e7ac <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e772:	697b      	ldr	r3, [r7, #20]
 800e774:	68db      	ldr	r3, [r3, #12]
 800e776:	617b      	str	r3, [r7, #20]
 800e778:	697b      	ldr	r3, [r7, #20]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d1d9      	bne.n	800e732 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800e77e:	68bb      	ldr	r3, [r7, #8]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d002      	beq.n	800e78a <udp_bind+0xd2>
 800e784:	68bb      	ldr	r3, [r7, #8]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	e000      	b.n	800e78c <udp_bind+0xd4>
 800e78a:	2300      	movs	r3, #0
 800e78c:	68fa      	ldr	r2, [r7, #12]
 800e78e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	88fa      	ldrh	r2, [r7, #6]
 800e794:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800e796:	7cfb      	ldrb	r3, [r7, #19]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d106      	bne.n	800e7aa <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800e79c:	4b09      	ldr	r3, [pc, #36]	; (800e7c4 <udp_bind+0x10c>)
 800e79e:	681a      	ldr	r2, [r3, #0]
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800e7a4:	4a07      	ldr	r2, [pc, #28]	; (800e7c4 <udp_bind+0x10c>)
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800e7aa:	2300      	movs	r3, #0
}
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	3718      	adds	r7, #24
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	bd80      	pop	{r7, pc}
 800e7b4:	08016778 	.word	0x08016778
 800e7b8:	08015c5c 	.word	0x08015c5c
 800e7bc:	08015f24 	.word	0x08015f24
 800e7c0:	08015cb0 	.word	0x08015cb0
 800e7c4:	2000a828 	.word	0x2000a828

0800e7c8 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b086      	sub	sp, #24
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	60f8      	str	r0, [r7, #12]
 800e7d0:	60b9      	str	r1, [r7, #8]
 800e7d2:	4613      	mov	r3, r2
 800e7d4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d109      	bne.n	800e7f0 <udp_connect+0x28>
 800e7dc:	4b2c      	ldr	r3, [pc, #176]	; (800e890 <udp_connect+0xc8>)
 800e7de:	f240 4235 	movw	r2, #1077	; 0x435
 800e7e2:	492c      	ldr	r1, [pc, #176]	; (800e894 <udp_connect+0xcc>)
 800e7e4:	482c      	ldr	r0, [pc, #176]	; (800e898 <udp_connect+0xd0>)
 800e7e6:	f003 fa67 	bl	8011cb8 <iprintf>
 800e7ea:	f06f 030f 	mvn.w	r3, #15
 800e7ee:	e04b      	b.n	800e888 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800e7f0:	68bb      	ldr	r3, [r7, #8]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d109      	bne.n	800e80a <udp_connect+0x42>
 800e7f6:	4b26      	ldr	r3, [pc, #152]	; (800e890 <udp_connect+0xc8>)
 800e7f8:	f240 4236 	movw	r2, #1078	; 0x436
 800e7fc:	4927      	ldr	r1, [pc, #156]	; (800e89c <udp_connect+0xd4>)
 800e7fe:	4826      	ldr	r0, [pc, #152]	; (800e898 <udp_connect+0xd0>)
 800e800:	f003 fa5a 	bl	8011cb8 <iprintf>
 800e804:	f06f 030f 	mvn.w	r3, #15
 800e808:	e03e      	b.n	800e888 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	8a5b      	ldrh	r3, [r3, #18]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d10f      	bne.n	800e832 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800e812:	68f9      	ldr	r1, [r7, #12]
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	8a5b      	ldrh	r3, [r3, #18]
 800e818:	461a      	mov	r2, r3
 800e81a:	68f8      	ldr	r0, [r7, #12]
 800e81c:	f7ff ff4c 	bl	800e6b8 <udp_bind>
 800e820:	4603      	mov	r3, r0
 800e822:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800e824:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d002      	beq.n	800e832 <udp_connect+0x6a>
      return err;
 800e82c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e830:	e02a      	b.n	800e888 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800e832:	68bb      	ldr	r3, [r7, #8]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d002      	beq.n	800e83e <udp_connect+0x76>
 800e838:	68bb      	ldr	r3, [r7, #8]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	e000      	b.n	800e840 <udp_connect+0x78>
 800e83e:	2300      	movs	r3, #0
 800e840:	68fa      	ldr	r2, [r7, #12]
 800e842:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	88fa      	ldrh	r2, [r7, #6]
 800e848:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	7c1b      	ldrb	r3, [r3, #16]
 800e84e:	f043 0304 	orr.w	r3, r3, #4
 800e852:	b2da      	uxtb	r2, r3
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e858:	4b11      	ldr	r3, [pc, #68]	; (800e8a0 <udp_connect+0xd8>)
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	617b      	str	r3, [r7, #20]
 800e85e:	e008      	b.n	800e872 <udp_connect+0xaa>
    if (pcb == ipcb) {
 800e860:	68fa      	ldr	r2, [r7, #12]
 800e862:	697b      	ldr	r3, [r7, #20]
 800e864:	429a      	cmp	r2, r3
 800e866:	d101      	bne.n	800e86c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800e868:	2300      	movs	r3, #0
 800e86a:	e00d      	b.n	800e888 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e86c:	697b      	ldr	r3, [r7, #20]
 800e86e:	68db      	ldr	r3, [r3, #12]
 800e870:	617b      	str	r3, [r7, #20]
 800e872:	697b      	ldr	r3, [r7, #20]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d1f3      	bne.n	800e860 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800e878:	4b09      	ldr	r3, [pc, #36]	; (800e8a0 <udp_connect+0xd8>)
 800e87a:	681a      	ldr	r2, [r3, #0]
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800e880:	4a07      	ldr	r2, [pc, #28]	; (800e8a0 <udp_connect+0xd8>)
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800e886:	2300      	movs	r3, #0
}
 800e888:	4618      	mov	r0, r3
 800e88a:	3718      	adds	r7, #24
 800e88c:	46bd      	mov	sp, r7
 800e88e:	bd80      	pop	{r7, pc}
 800e890:	08015c5c 	.word	0x08015c5c
 800e894:	08015f3c 	.word	0x08015f3c
 800e898:	08015cb0 	.word	0x08015cb0
 800e89c:	08015f58 	.word	0x08015f58
 800e8a0:	2000a828 	.word	0x2000a828

0800e8a4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b084      	sub	sp, #16
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	60f8      	str	r0, [r7, #12]
 800e8ac:	60b9      	str	r1, [r7, #8]
 800e8ae:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d107      	bne.n	800e8c6 <udp_recv+0x22>
 800e8b6:	4b08      	ldr	r3, [pc, #32]	; (800e8d8 <udp_recv+0x34>)
 800e8b8:	f240 428a 	movw	r2, #1162	; 0x48a
 800e8bc:	4907      	ldr	r1, [pc, #28]	; (800e8dc <udp_recv+0x38>)
 800e8be:	4808      	ldr	r0, [pc, #32]	; (800e8e0 <udp_recv+0x3c>)
 800e8c0:	f003 f9fa 	bl	8011cb8 <iprintf>
 800e8c4:	e005      	b.n	800e8d2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	68ba      	ldr	r2, [r7, #8]
 800e8ca:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	687a      	ldr	r2, [r7, #4]
 800e8d0:	61da      	str	r2, [r3, #28]
}
 800e8d2:	3710      	adds	r7, #16
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	bd80      	pop	{r7, pc}
 800e8d8:	08015c5c 	.word	0x08015c5c
 800e8dc:	08015f90 	.word	0x08015f90
 800e8e0:	08015cb0 	.word	0x08015cb0

0800e8e4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b082      	sub	sp, #8
 800e8e8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800e8ea:	2000      	movs	r0, #0
 800e8ec:	f7f9 f908 	bl	8007b00 <memp_malloc>
 800e8f0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d007      	beq.n	800e908 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800e8f8:	2220      	movs	r2, #32
 800e8fa:	2100      	movs	r1, #0
 800e8fc:	6878      	ldr	r0, [r7, #4]
 800e8fe:	f003 fa40 	bl	8011d82 <memset>
    pcb->ttl = UDP_TTL;
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	22ff      	movs	r2, #255	; 0xff
 800e906:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800e908:	687b      	ldr	r3, [r7, #4]
}
 800e90a:	4618      	mov	r0, r3
 800e90c:	3708      	adds	r7, #8
 800e90e:	46bd      	mov	sp, r7
 800e910:	bd80      	pop	{r7, pc}
	...

0800e914 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e914:	b480      	push	{r7}
 800e916:	b085      	sub	sp, #20
 800e918:	af00      	add	r7, sp, #0
 800e91a:	6078      	str	r0, [r7, #4]
 800e91c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d01e      	beq.n	800e962 <udp_netif_ip_addr_changed+0x4e>
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d01a      	beq.n	800e962 <udp_netif_ip_addr_changed+0x4e>
 800e92c:	683b      	ldr	r3, [r7, #0]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d017      	beq.n	800e962 <udp_netif_ip_addr_changed+0x4e>
 800e932:	683b      	ldr	r3, [r7, #0]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d013      	beq.n	800e962 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e93a:	4b0d      	ldr	r3, [pc, #52]	; (800e970 <udp_netif_ip_addr_changed+0x5c>)
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	60fb      	str	r3, [r7, #12]
 800e940:	e00c      	b.n	800e95c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	681a      	ldr	r2, [r3, #0]
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	429a      	cmp	r2, r3
 800e94c:	d103      	bne.n	800e956 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800e94e:	683b      	ldr	r3, [r7, #0]
 800e950:	681a      	ldr	r2, [r3, #0]
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	68db      	ldr	r3, [r3, #12]
 800e95a:	60fb      	str	r3, [r7, #12]
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d1ef      	bne.n	800e942 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800e962:	bf00      	nop
 800e964:	3714      	adds	r7, #20
 800e966:	46bd      	mov	sp, r7
 800e968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96c:	4770      	bx	lr
 800e96e:	bf00      	nop
 800e970:	2000a828 	.word	0x2000a828

0800e974 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b082      	sub	sp, #8
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800e97c:	4915      	ldr	r1, [pc, #84]	; (800e9d4 <etharp_free_entry+0x60>)
 800e97e:	687a      	ldr	r2, [r7, #4]
 800e980:	4613      	mov	r3, r2
 800e982:	005b      	lsls	r3, r3, #1
 800e984:	4413      	add	r3, r2
 800e986:	00db      	lsls	r3, r3, #3
 800e988:	440b      	add	r3, r1
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d013      	beq.n	800e9b8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800e990:	4910      	ldr	r1, [pc, #64]	; (800e9d4 <etharp_free_entry+0x60>)
 800e992:	687a      	ldr	r2, [r7, #4]
 800e994:	4613      	mov	r3, r2
 800e996:	005b      	lsls	r3, r3, #1
 800e998:	4413      	add	r3, r2
 800e99a:	00db      	lsls	r3, r3, #3
 800e99c:	440b      	add	r3, r1
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	f7f9 ff93 	bl	80088cc <pbuf_free>
    arp_table[i].q = NULL;
 800e9a6:	490b      	ldr	r1, [pc, #44]	; (800e9d4 <etharp_free_entry+0x60>)
 800e9a8:	687a      	ldr	r2, [r7, #4]
 800e9aa:	4613      	mov	r3, r2
 800e9ac:	005b      	lsls	r3, r3, #1
 800e9ae:	4413      	add	r3, r2
 800e9b0:	00db      	lsls	r3, r3, #3
 800e9b2:	440b      	add	r3, r1
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800e9b8:	4906      	ldr	r1, [pc, #24]	; (800e9d4 <etharp_free_entry+0x60>)
 800e9ba:	687a      	ldr	r2, [r7, #4]
 800e9bc:	4613      	mov	r3, r2
 800e9be:	005b      	lsls	r3, r3, #1
 800e9c0:	4413      	add	r3, r2
 800e9c2:	00db      	lsls	r3, r3, #3
 800e9c4:	440b      	add	r3, r1
 800e9c6:	3314      	adds	r3, #20
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800e9cc:	bf00      	nop
 800e9ce:	3708      	adds	r7, #8
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	bd80      	pop	{r7, pc}
 800e9d4:	2000a82c 	.word	0x2000a82c

0800e9d8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b082      	sub	sp, #8
 800e9dc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e9de:	2300      	movs	r3, #0
 800e9e0:	607b      	str	r3, [r7, #4]
 800e9e2:	e096      	b.n	800eb12 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800e9e4:	494f      	ldr	r1, [pc, #316]	; (800eb24 <etharp_tmr+0x14c>)
 800e9e6:	687a      	ldr	r2, [r7, #4]
 800e9e8:	4613      	mov	r3, r2
 800e9ea:	005b      	lsls	r3, r3, #1
 800e9ec:	4413      	add	r3, r2
 800e9ee:	00db      	lsls	r3, r3, #3
 800e9f0:	440b      	add	r3, r1
 800e9f2:	3314      	adds	r3, #20
 800e9f4:	781b      	ldrb	r3, [r3, #0]
 800e9f6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800e9f8:	78fb      	ldrb	r3, [r7, #3]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	f000 8086 	beq.w	800eb0c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800ea00:	4948      	ldr	r1, [pc, #288]	; (800eb24 <etharp_tmr+0x14c>)
 800ea02:	687a      	ldr	r2, [r7, #4]
 800ea04:	4613      	mov	r3, r2
 800ea06:	005b      	lsls	r3, r3, #1
 800ea08:	4413      	add	r3, r2
 800ea0a:	00db      	lsls	r3, r3, #3
 800ea0c:	440b      	add	r3, r1
 800ea0e:	3312      	adds	r3, #18
 800ea10:	881b      	ldrh	r3, [r3, #0]
 800ea12:	3301      	adds	r3, #1
 800ea14:	b298      	uxth	r0, r3
 800ea16:	4943      	ldr	r1, [pc, #268]	; (800eb24 <etharp_tmr+0x14c>)
 800ea18:	687a      	ldr	r2, [r7, #4]
 800ea1a:	4613      	mov	r3, r2
 800ea1c:	005b      	lsls	r3, r3, #1
 800ea1e:	4413      	add	r3, r2
 800ea20:	00db      	lsls	r3, r3, #3
 800ea22:	440b      	add	r3, r1
 800ea24:	3312      	adds	r3, #18
 800ea26:	4602      	mov	r2, r0
 800ea28:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ea2a:	493e      	ldr	r1, [pc, #248]	; (800eb24 <etharp_tmr+0x14c>)
 800ea2c:	687a      	ldr	r2, [r7, #4]
 800ea2e:	4613      	mov	r3, r2
 800ea30:	005b      	lsls	r3, r3, #1
 800ea32:	4413      	add	r3, r2
 800ea34:	00db      	lsls	r3, r3, #3
 800ea36:	440b      	add	r3, r1
 800ea38:	3312      	adds	r3, #18
 800ea3a:	881b      	ldrh	r3, [r3, #0]
 800ea3c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800ea40:	d215      	bcs.n	800ea6e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ea42:	4938      	ldr	r1, [pc, #224]	; (800eb24 <etharp_tmr+0x14c>)
 800ea44:	687a      	ldr	r2, [r7, #4]
 800ea46:	4613      	mov	r3, r2
 800ea48:	005b      	lsls	r3, r3, #1
 800ea4a:	4413      	add	r3, r2
 800ea4c:	00db      	lsls	r3, r3, #3
 800ea4e:	440b      	add	r3, r1
 800ea50:	3314      	adds	r3, #20
 800ea52:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ea54:	2b01      	cmp	r3, #1
 800ea56:	d10e      	bne.n	800ea76 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800ea58:	4932      	ldr	r1, [pc, #200]	; (800eb24 <etharp_tmr+0x14c>)
 800ea5a:	687a      	ldr	r2, [r7, #4]
 800ea5c:	4613      	mov	r3, r2
 800ea5e:	005b      	lsls	r3, r3, #1
 800ea60:	4413      	add	r3, r2
 800ea62:	00db      	lsls	r3, r3, #3
 800ea64:	440b      	add	r3, r1
 800ea66:	3312      	adds	r3, #18
 800ea68:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ea6a:	2b04      	cmp	r3, #4
 800ea6c:	d903      	bls.n	800ea76 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800ea6e:	6878      	ldr	r0, [r7, #4]
 800ea70:	f7ff ff80 	bl	800e974 <etharp_free_entry>
 800ea74:	e04a      	b.n	800eb0c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800ea76:	492b      	ldr	r1, [pc, #172]	; (800eb24 <etharp_tmr+0x14c>)
 800ea78:	687a      	ldr	r2, [r7, #4]
 800ea7a:	4613      	mov	r3, r2
 800ea7c:	005b      	lsls	r3, r3, #1
 800ea7e:	4413      	add	r3, r2
 800ea80:	00db      	lsls	r3, r3, #3
 800ea82:	440b      	add	r3, r1
 800ea84:	3314      	adds	r3, #20
 800ea86:	781b      	ldrb	r3, [r3, #0]
 800ea88:	2b03      	cmp	r3, #3
 800ea8a:	d10a      	bne.n	800eaa2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800ea8c:	4925      	ldr	r1, [pc, #148]	; (800eb24 <etharp_tmr+0x14c>)
 800ea8e:	687a      	ldr	r2, [r7, #4]
 800ea90:	4613      	mov	r3, r2
 800ea92:	005b      	lsls	r3, r3, #1
 800ea94:	4413      	add	r3, r2
 800ea96:	00db      	lsls	r3, r3, #3
 800ea98:	440b      	add	r3, r1
 800ea9a:	3314      	adds	r3, #20
 800ea9c:	2204      	movs	r2, #4
 800ea9e:	701a      	strb	r2, [r3, #0]
 800eaa0:	e034      	b.n	800eb0c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800eaa2:	4920      	ldr	r1, [pc, #128]	; (800eb24 <etharp_tmr+0x14c>)
 800eaa4:	687a      	ldr	r2, [r7, #4]
 800eaa6:	4613      	mov	r3, r2
 800eaa8:	005b      	lsls	r3, r3, #1
 800eaaa:	4413      	add	r3, r2
 800eaac:	00db      	lsls	r3, r3, #3
 800eaae:	440b      	add	r3, r1
 800eab0:	3314      	adds	r3, #20
 800eab2:	781b      	ldrb	r3, [r3, #0]
 800eab4:	2b04      	cmp	r3, #4
 800eab6:	d10a      	bne.n	800eace <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800eab8:	491a      	ldr	r1, [pc, #104]	; (800eb24 <etharp_tmr+0x14c>)
 800eaba:	687a      	ldr	r2, [r7, #4]
 800eabc:	4613      	mov	r3, r2
 800eabe:	005b      	lsls	r3, r3, #1
 800eac0:	4413      	add	r3, r2
 800eac2:	00db      	lsls	r3, r3, #3
 800eac4:	440b      	add	r3, r1
 800eac6:	3314      	adds	r3, #20
 800eac8:	2202      	movs	r2, #2
 800eaca:	701a      	strb	r2, [r3, #0]
 800eacc:	e01e      	b.n	800eb0c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800eace:	4915      	ldr	r1, [pc, #84]	; (800eb24 <etharp_tmr+0x14c>)
 800ead0:	687a      	ldr	r2, [r7, #4]
 800ead2:	4613      	mov	r3, r2
 800ead4:	005b      	lsls	r3, r3, #1
 800ead6:	4413      	add	r3, r2
 800ead8:	00db      	lsls	r3, r3, #3
 800eada:	440b      	add	r3, r1
 800eadc:	3314      	adds	r3, #20
 800eade:	781b      	ldrb	r3, [r3, #0]
 800eae0:	2b01      	cmp	r3, #1
 800eae2:	d113      	bne.n	800eb0c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800eae4:	490f      	ldr	r1, [pc, #60]	; (800eb24 <etharp_tmr+0x14c>)
 800eae6:	687a      	ldr	r2, [r7, #4]
 800eae8:	4613      	mov	r3, r2
 800eaea:	005b      	lsls	r3, r3, #1
 800eaec:	4413      	add	r3, r2
 800eaee:	00db      	lsls	r3, r3, #3
 800eaf0:	440b      	add	r3, r1
 800eaf2:	3308      	adds	r3, #8
 800eaf4:	6818      	ldr	r0, [r3, #0]
 800eaf6:	687a      	ldr	r2, [r7, #4]
 800eaf8:	4613      	mov	r3, r2
 800eafa:	005b      	lsls	r3, r3, #1
 800eafc:	4413      	add	r3, r2
 800eafe:	00db      	lsls	r3, r3, #3
 800eb00:	4a08      	ldr	r2, [pc, #32]	; (800eb24 <etharp_tmr+0x14c>)
 800eb02:	4413      	add	r3, r2
 800eb04:	3304      	adds	r3, #4
 800eb06:	4619      	mov	r1, r3
 800eb08:	f000 fe6e 	bl	800f7e8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	3301      	adds	r3, #1
 800eb10:	607b      	str	r3, [r7, #4]
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	2b09      	cmp	r3, #9
 800eb16:	f77f af65 	ble.w	800e9e4 <etharp_tmr+0xc>
      }
    }
  }
}
 800eb1a:	bf00      	nop
 800eb1c:	bf00      	nop
 800eb1e:	3708      	adds	r7, #8
 800eb20:	46bd      	mov	sp, r7
 800eb22:	bd80      	pop	{r7, pc}
 800eb24:	2000a82c 	.word	0x2000a82c

0800eb28 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b08a      	sub	sp, #40	; 0x28
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	60f8      	str	r0, [r7, #12]
 800eb30:	460b      	mov	r3, r1
 800eb32:	607a      	str	r2, [r7, #4]
 800eb34:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800eb36:	230a      	movs	r3, #10
 800eb38:	84fb      	strh	r3, [r7, #38]	; 0x26
 800eb3a:	230a      	movs	r3, #10
 800eb3c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800eb3e:	230a      	movs	r3, #10
 800eb40:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800eb42:	2300      	movs	r3, #0
 800eb44:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800eb46:	230a      	movs	r3, #10
 800eb48:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	83bb      	strh	r3, [r7, #28]
 800eb4e:	2300      	movs	r3, #0
 800eb50:	837b      	strh	r3, [r7, #26]
 800eb52:	2300      	movs	r3, #0
 800eb54:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800eb56:	2300      	movs	r3, #0
 800eb58:	843b      	strh	r3, [r7, #32]
 800eb5a:	e0ae      	b.n	800ecba <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800eb5c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eb60:	49a6      	ldr	r1, [pc, #664]	; (800edfc <etharp_find_entry+0x2d4>)
 800eb62:	4613      	mov	r3, r2
 800eb64:	005b      	lsls	r3, r3, #1
 800eb66:	4413      	add	r3, r2
 800eb68:	00db      	lsls	r3, r3, #3
 800eb6a:	440b      	add	r3, r1
 800eb6c:	3314      	adds	r3, #20
 800eb6e:	781b      	ldrb	r3, [r3, #0]
 800eb70:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800eb72:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800eb76:	2b0a      	cmp	r3, #10
 800eb78:	d105      	bne.n	800eb86 <etharp_find_entry+0x5e>
 800eb7a:	7dfb      	ldrb	r3, [r7, #23]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d102      	bne.n	800eb86 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800eb80:	8c3b      	ldrh	r3, [r7, #32]
 800eb82:	847b      	strh	r3, [r7, #34]	; 0x22
 800eb84:	e095      	b.n	800ecb2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800eb86:	7dfb      	ldrb	r3, [r7, #23]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	f000 8092 	beq.w	800ecb2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800eb8e:	7dfb      	ldrb	r3, [r7, #23]
 800eb90:	2b01      	cmp	r3, #1
 800eb92:	d009      	beq.n	800eba8 <etharp_find_entry+0x80>
 800eb94:	7dfb      	ldrb	r3, [r7, #23]
 800eb96:	2b01      	cmp	r3, #1
 800eb98:	d806      	bhi.n	800eba8 <etharp_find_entry+0x80>
 800eb9a:	4b99      	ldr	r3, [pc, #612]	; (800ee00 <etharp_find_entry+0x2d8>)
 800eb9c:	f240 1223 	movw	r2, #291	; 0x123
 800eba0:	4998      	ldr	r1, [pc, #608]	; (800ee04 <etharp_find_entry+0x2dc>)
 800eba2:	4899      	ldr	r0, [pc, #612]	; (800ee08 <etharp_find_entry+0x2e0>)
 800eba4:	f003 f888 	bl	8011cb8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d020      	beq.n	800ebf0 <etharp_find_entry+0xc8>
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	6819      	ldr	r1, [r3, #0]
 800ebb2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ebb6:	4891      	ldr	r0, [pc, #580]	; (800edfc <etharp_find_entry+0x2d4>)
 800ebb8:	4613      	mov	r3, r2
 800ebba:	005b      	lsls	r3, r3, #1
 800ebbc:	4413      	add	r3, r2
 800ebbe:	00db      	lsls	r3, r3, #3
 800ebc0:	4403      	add	r3, r0
 800ebc2:	3304      	adds	r3, #4
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	4299      	cmp	r1, r3
 800ebc8:	d112      	bne.n	800ebf0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d00c      	beq.n	800ebea <etharp_find_entry+0xc2>
 800ebd0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ebd4:	4989      	ldr	r1, [pc, #548]	; (800edfc <etharp_find_entry+0x2d4>)
 800ebd6:	4613      	mov	r3, r2
 800ebd8:	005b      	lsls	r3, r3, #1
 800ebda:	4413      	add	r3, r2
 800ebdc:	00db      	lsls	r3, r3, #3
 800ebde:	440b      	add	r3, r1
 800ebe0:	3308      	adds	r3, #8
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	687a      	ldr	r2, [r7, #4]
 800ebe6:	429a      	cmp	r2, r3
 800ebe8:	d102      	bne.n	800ebf0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800ebea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ebee:	e100      	b.n	800edf2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800ebf0:	7dfb      	ldrb	r3, [r7, #23]
 800ebf2:	2b01      	cmp	r3, #1
 800ebf4:	d140      	bne.n	800ec78 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800ebf6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ebfa:	4980      	ldr	r1, [pc, #512]	; (800edfc <etharp_find_entry+0x2d4>)
 800ebfc:	4613      	mov	r3, r2
 800ebfe:	005b      	lsls	r3, r3, #1
 800ec00:	4413      	add	r3, r2
 800ec02:	00db      	lsls	r3, r3, #3
 800ec04:	440b      	add	r3, r1
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d01a      	beq.n	800ec42 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800ec0c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ec10:	497a      	ldr	r1, [pc, #488]	; (800edfc <etharp_find_entry+0x2d4>)
 800ec12:	4613      	mov	r3, r2
 800ec14:	005b      	lsls	r3, r3, #1
 800ec16:	4413      	add	r3, r2
 800ec18:	00db      	lsls	r3, r3, #3
 800ec1a:	440b      	add	r3, r1
 800ec1c:	3312      	adds	r3, #18
 800ec1e:	881b      	ldrh	r3, [r3, #0]
 800ec20:	8bba      	ldrh	r2, [r7, #28]
 800ec22:	429a      	cmp	r2, r3
 800ec24:	d845      	bhi.n	800ecb2 <etharp_find_entry+0x18a>
            old_queue = i;
 800ec26:	8c3b      	ldrh	r3, [r7, #32]
 800ec28:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800ec2a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ec2e:	4973      	ldr	r1, [pc, #460]	; (800edfc <etharp_find_entry+0x2d4>)
 800ec30:	4613      	mov	r3, r2
 800ec32:	005b      	lsls	r3, r3, #1
 800ec34:	4413      	add	r3, r2
 800ec36:	00db      	lsls	r3, r3, #3
 800ec38:	440b      	add	r3, r1
 800ec3a:	3312      	adds	r3, #18
 800ec3c:	881b      	ldrh	r3, [r3, #0]
 800ec3e:	83bb      	strh	r3, [r7, #28]
 800ec40:	e037      	b.n	800ecb2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800ec42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ec46:	496d      	ldr	r1, [pc, #436]	; (800edfc <etharp_find_entry+0x2d4>)
 800ec48:	4613      	mov	r3, r2
 800ec4a:	005b      	lsls	r3, r3, #1
 800ec4c:	4413      	add	r3, r2
 800ec4e:	00db      	lsls	r3, r3, #3
 800ec50:	440b      	add	r3, r1
 800ec52:	3312      	adds	r3, #18
 800ec54:	881b      	ldrh	r3, [r3, #0]
 800ec56:	8b7a      	ldrh	r2, [r7, #26]
 800ec58:	429a      	cmp	r2, r3
 800ec5a:	d82a      	bhi.n	800ecb2 <etharp_find_entry+0x18a>
            old_pending = i;
 800ec5c:	8c3b      	ldrh	r3, [r7, #32]
 800ec5e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800ec60:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ec64:	4965      	ldr	r1, [pc, #404]	; (800edfc <etharp_find_entry+0x2d4>)
 800ec66:	4613      	mov	r3, r2
 800ec68:	005b      	lsls	r3, r3, #1
 800ec6a:	4413      	add	r3, r2
 800ec6c:	00db      	lsls	r3, r3, #3
 800ec6e:	440b      	add	r3, r1
 800ec70:	3312      	adds	r3, #18
 800ec72:	881b      	ldrh	r3, [r3, #0]
 800ec74:	837b      	strh	r3, [r7, #26]
 800ec76:	e01c      	b.n	800ecb2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800ec78:	7dfb      	ldrb	r3, [r7, #23]
 800ec7a:	2b01      	cmp	r3, #1
 800ec7c:	d919      	bls.n	800ecb2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800ec7e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ec82:	495e      	ldr	r1, [pc, #376]	; (800edfc <etharp_find_entry+0x2d4>)
 800ec84:	4613      	mov	r3, r2
 800ec86:	005b      	lsls	r3, r3, #1
 800ec88:	4413      	add	r3, r2
 800ec8a:	00db      	lsls	r3, r3, #3
 800ec8c:	440b      	add	r3, r1
 800ec8e:	3312      	adds	r3, #18
 800ec90:	881b      	ldrh	r3, [r3, #0]
 800ec92:	8b3a      	ldrh	r2, [r7, #24]
 800ec94:	429a      	cmp	r2, r3
 800ec96:	d80c      	bhi.n	800ecb2 <etharp_find_entry+0x18a>
            old_stable = i;
 800ec98:	8c3b      	ldrh	r3, [r7, #32]
 800ec9a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800ec9c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eca0:	4956      	ldr	r1, [pc, #344]	; (800edfc <etharp_find_entry+0x2d4>)
 800eca2:	4613      	mov	r3, r2
 800eca4:	005b      	lsls	r3, r3, #1
 800eca6:	4413      	add	r3, r2
 800eca8:	00db      	lsls	r3, r3, #3
 800ecaa:	440b      	add	r3, r1
 800ecac:	3312      	adds	r3, #18
 800ecae:	881b      	ldrh	r3, [r3, #0]
 800ecb0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ecb2:	8c3b      	ldrh	r3, [r7, #32]
 800ecb4:	3301      	adds	r3, #1
 800ecb6:	b29b      	uxth	r3, r3
 800ecb8:	843b      	strh	r3, [r7, #32]
 800ecba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ecbe:	2b09      	cmp	r3, #9
 800ecc0:	f77f af4c 	ble.w	800eb5c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800ecc4:	7afb      	ldrb	r3, [r7, #11]
 800ecc6:	f003 0302 	and.w	r3, r3, #2
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d108      	bne.n	800ece0 <etharp_find_entry+0x1b8>
 800ecce:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ecd2:	2b0a      	cmp	r3, #10
 800ecd4:	d107      	bne.n	800ece6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800ecd6:	7afb      	ldrb	r3, [r7, #11]
 800ecd8:	f003 0301 	and.w	r3, r3, #1
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d102      	bne.n	800ece6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800ece0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ece4:	e085      	b.n	800edf2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800ece6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ecea:	2b09      	cmp	r3, #9
 800ecec:	dc02      	bgt.n	800ecf4 <etharp_find_entry+0x1cc>
    i = empty;
 800ecee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ecf0:	843b      	strh	r3, [r7, #32]
 800ecf2:	e039      	b.n	800ed68 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800ecf4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800ecf8:	2b09      	cmp	r3, #9
 800ecfa:	dc14      	bgt.n	800ed26 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800ecfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ecfe:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800ed00:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ed04:	493d      	ldr	r1, [pc, #244]	; (800edfc <etharp_find_entry+0x2d4>)
 800ed06:	4613      	mov	r3, r2
 800ed08:	005b      	lsls	r3, r3, #1
 800ed0a:	4413      	add	r3, r2
 800ed0c:	00db      	lsls	r3, r3, #3
 800ed0e:	440b      	add	r3, r1
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d018      	beq.n	800ed48 <etharp_find_entry+0x220>
 800ed16:	4b3a      	ldr	r3, [pc, #232]	; (800ee00 <etharp_find_entry+0x2d8>)
 800ed18:	f240 126d 	movw	r2, #365	; 0x16d
 800ed1c:	493b      	ldr	r1, [pc, #236]	; (800ee0c <etharp_find_entry+0x2e4>)
 800ed1e:	483a      	ldr	r0, [pc, #232]	; (800ee08 <etharp_find_entry+0x2e0>)
 800ed20:	f002 ffca 	bl	8011cb8 <iprintf>
 800ed24:	e010      	b.n	800ed48 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800ed26:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ed2a:	2b09      	cmp	r3, #9
 800ed2c:	dc02      	bgt.n	800ed34 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800ed2e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ed30:	843b      	strh	r3, [r7, #32]
 800ed32:	e009      	b.n	800ed48 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800ed34:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ed38:	2b09      	cmp	r3, #9
 800ed3a:	dc02      	bgt.n	800ed42 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800ed3c:	8bfb      	ldrh	r3, [r7, #30]
 800ed3e:	843b      	strh	r3, [r7, #32]
 800ed40:	e002      	b.n	800ed48 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800ed42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ed46:	e054      	b.n	800edf2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ed48:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ed4c:	2b09      	cmp	r3, #9
 800ed4e:	dd06      	ble.n	800ed5e <etharp_find_entry+0x236>
 800ed50:	4b2b      	ldr	r3, [pc, #172]	; (800ee00 <etharp_find_entry+0x2d8>)
 800ed52:	f240 127f 	movw	r2, #383	; 0x17f
 800ed56:	492e      	ldr	r1, [pc, #184]	; (800ee10 <etharp_find_entry+0x2e8>)
 800ed58:	482b      	ldr	r0, [pc, #172]	; (800ee08 <etharp_find_entry+0x2e0>)
 800ed5a:	f002 ffad 	bl	8011cb8 <iprintf>
    etharp_free_entry(i);
 800ed5e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ed62:	4618      	mov	r0, r3
 800ed64:	f7ff fe06 	bl	800e974 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ed68:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ed6c:	2b09      	cmp	r3, #9
 800ed6e:	dd06      	ble.n	800ed7e <etharp_find_entry+0x256>
 800ed70:	4b23      	ldr	r3, [pc, #140]	; (800ee00 <etharp_find_entry+0x2d8>)
 800ed72:	f240 1283 	movw	r2, #387	; 0x183
 800ed76:	4926      	ldr	r1, [pc, #152]	; (800ee10 <etharp_find_entry+0x2e8>)
 800ed78:	4823      	ldr	r0, [pc, #140]	; (800ee08 <etharp_find_entry+0x2e0>)
 800ed7a:	f002 ff9d 	bl	8011cb8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800ed7e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ed82:	491e      	ldr	r1, [pc, #120]	; (800edfc <etharp_find_entry+0x2d4>)
 800ed84:	4613      	mov	r3, r2
 800ed86:	005b      	lsls	r3, r3, #1
 800ed88:	4413      	add	r3, r2
 800ed8a:	00db      	lsls	r3, r3, #3
 800ed8c:	440b      	add	r3, r1
 800ed8e:	3314      	adds	r3, #20
 800ed90:	781b      	ldrb	r3, [r3, #0]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d006      	beq.n	800eda4 <etharp_find_entry+0x27c>
 800ed96:	4b1a      	ldr	r3, [pc, #104]	; (800ee00 <etharp_find_entry+0x2d8>)
 800ed98:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800ed9c:	491d      	ldr	r1, [pc, #116]	; (800ee14 <etharp_find_entry+0x2ec>)
 800ed9e:	481a      	ldr	r0, [pc, #104]	; (800ee08 <etharp_find_entry+0x2e0>)
 800eda0:	f002 ff8a 	bl	8011cb8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d00b      	beq.n	800edc2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800edaa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	6819      	ldr	r1, [r3, #0]
 800edb2:	4812      	ldr	r0, [pc, #72]	; (800edfc <etharp_find_entry+0x2d4>)
 800edb4:	4613      	mov	r3, r2
 800edb6:	005b      	lsls	r3, r3, #1
 800edb8:	4413      	add	r3, r2
 800edba:	00db      	lsls	r3, r3, #3
 800edbc:	4403      	add	r3, r0
 800edbe:	3304      	adds	r3, #4
 800edc0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800edc2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800edc6:	490d      	ldr	r1, [pc, #52]	; (800edfc <etharp_find_entry+0x2d4>)
 800edc8:	4613      	mov	r3, r2
 800edca:	005b      	lsls	r3, r3, #1
 800edcc:	4413      	add	r3, r2
 800edce:	00db      	lsls	r3, r3, #3
 800edd0:	440b      	add	r3, r1
 800edd2:	3312      	adds	r3, #18
 800edd4:	2200      	movs	r2, #0
 800edd6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800edd8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eddc:	4907      	ldr	r1, [pc, #28]	; (800edfc <etharp_find_entry+0x2d4>)
 800edde:	4613      	mov	r3, r2
 800ede0:	005b      	lsls	r3, r3, #1
 800ede2:	4413      	add	r3, r2
 800ede4:	00db      	lsls	r3, r3, #3
 800ede6:	440b      	add	r3, r1
 800ede8:	3308      	adds	r3, #8
 800edea:	687a      	ldr	r2, [r7, #4]
 800edec:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800edee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800edf2:	4618      	mov	r0, r3
 800edf4:	3728      	adds	r7, #40	; 0x28
 800edf6:	46bd      	mov	sp, r7
 800edf8:	bd80      	pop	{r7, pc}
 800edfa:	bf00      	nop
 800edfc:	2000a82c 	.word	0x2000a82c
 800ee00:	08015fc0 	.word	0x08015fc0
 800ee04:	08015ff8 	.word	0x08015ff8
 800ee08:	08016038 	.word	0x08016038
 800ee0c:	08016060 	.word	0x08016060
 800ee10:	08016078 	.word	0x08016078
 800ee14:	0801608c 	.word	0x0801608c

0800ee18 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b088      	sub	sp, #32
 800ee1c:	af02      	add	r7, sp, #8
 800ee1e:	60f8      	str	r0, [r7, #12]
 800ee20:	60b9      	str	r1, [r7, #8]
 800ee22:	607a      	str	r2, [r7, #4]
 800ee24:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ee2c:	2b06      	cmp	r3, #6
 800ee2e:	d006      	beq.n	800ee3e <etharp_update_arp_entry+0x26>
 800ee30:	4b48      	ldr	r3, [pc, #288]	; (800ef54 <etharp_update_arp_entry+0x13c>)
 800ee32:	f240 12a9 	movw	r2, #425	; 0x1a9
 800ee36:	4948      	ldr	r1, [pc, #288]	; (800ef58 <etharp_update_arp_entry+0x140>)
 800ee38:	4848      	ldr	r0, [pc, #288]	; (800ef5c <etharp_update_arp_entry+0x144>)
 800ee3a:	f002 ff3d 	bl	8011cb8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800ee3e:	68bb      	ldr	r3, [r7, #8]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d012      	beq.n	800ee6a <etharp_update_arp_entry+0x52>
 800ee44:	68bb      	ldr	r3, [r7, #8]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d00e      	beq.n	800ee6a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800ee4c:	68bb      	ldr	r3, [r7, #8]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	68f9      	ldr	r1, [r7, #12]
 800ee52:	4618      	mov	r0, r3
 800ee54:	f001 f8fe 	bl	8010054 <ip4_addr_isbroadcast_u32>
 800ee58:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d105      	bne.n	800ee6a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800ee5e:	68bb      	ldr	r3, [r7, #8]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800ee66:	2be0      	cmp	r3, #224	; 0xe0
 800ee68:	d102      	bne.n	800ee70 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800ee6a:	f06f 030f 	mvn.w	r3, #15
 800ee6e:	e06c      	b.n	800ef4a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800ee70:	78fb      	ldrb	r3, [r7, #3]
 800ee72:	68fa      	ldr	r2, [r7, #12]
 800ee74:	4619      	mov	r1, r3
 800ee76:	68b8      	ldr	r0, [r7, #8]
 800ee78:	f7ff fe56 	bl	800eb28 <etharp_find_entry>
 800ee7c:	4603      	mov	r3, r0
 800ee7e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800ee80:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	da02      	bge.n	800ee8e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800ee88:	8afb      	ldrh	r3, [r7, #22]
 800ee8a:	b25b      	sxtb	r3, r3
 800ee8c:	e05d      	b.n	800ef4a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800ee8e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ee92:	4933      	ldr	r1, [pc, #204]	; (800ef60 <etharp_update_arp_entry+0x148>)
 800ee94:	4613      	mov	r3, r2
 800ee96:	005b      	lsls	r3, r3, #1
 800ee98:	4413      	add	r3, r2
 800ee9a:	00db      	lsls	r3, r3, #3
 800ee9c:	440b      	add	r3, r1
 800ee9e:	3314      	adds	r3, #20
 800eea0:	2202      	movs	r2, #2
 800eea2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800eea4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800eea8:	492d      	ldr	r1, [pc, #180]	; (800ef60 <etharp_update_arp_entry+0x148>)
 800eeaa:	4613      	mov	r3, r2
 800eeac:	005b      	lsls	r3, r3, #1
 800eeae:	4413      	add	r3, r2
 800eeb0:	00db      	lsls	r3, r3, #3
 800eeb2:	440b      	add	r3, r1
 800eeb4:	3308      	adds	r3, #8
 800eeb6:	68fa      	ldr	r2, [r7, #12]
 800eeb8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800eeba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800eebe:	4613      	mov	r3, r2
 800eec0:	005b      	lsls	r3, r3, #1
 800eec2:	4413      	add	r3, r2
 800eec4:	00db      	lsls	r3, r3, #3
 800eec6:	3308      	adds	r3, #8
 800eec8:	4a25      	ldr	r2, [pc, #148]	; (800ef60 <etharp_update_arp_entry+0x148>)
 800eeca:	4413      	add	r3, r2
 800eecc:	3304      	adds	r3, #4
 800eece:	2206      	movs	r2, #6
 800eed0:	6879      	ldr	r1, [r7, #4]
 800eed2:	4618      	mov	r0, r3
 800eed4:	f003 f851 	bl	8011f7a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800eed8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800eedc:	4920      	ldr	r1, [pc, #128]	; (800ef60 <etharp_update_arp_entry+0x148>)
 800eede:	4613      	mov	r3, r2
 800eee0:	005b      	lsls	r3, r3, #1
 800eee2:	4413      	add	r3, r2
 800eee4:	00db      	lsls	r3, r3, #3
 800eee6:	440b      	add	r3, r1
 800eee8:	3312      	adds	r3, #18
 800eeea:	2200      	movs	r2, #0
 800eeec:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800eeee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800eef2:	491b      	ldr	r1, [pc, #108]	; (800ef60 <etharp_update_arp_entry+0x148>)
 800eef4:	4613      	mov	r3, r2
 800eef6:	005b      	lsls	r3, r3, #1
 800eef8:	4413      	add	r3, r2
 800eefa:	00db      	lsls	r3, r3, #3
 800eefc:	440b      	add	r3, r1
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d021      	beq.n	800ef48 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800ef04:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ef08:	4915      	ldr	r1, [pc, #84]	; (800ef60 <etharp_update_arp_entry+0x148>)
 800ef0a:	4613      	mov	r3, r2
 800ef0c:	005b      	lsls	r3, r3, #1
 800ef0e:	4413      	add	r3, r2
 800ef10:	00db      	lsls	r3, r3, #3
 800ef12:	440b      	add	r3, r1
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800ef18:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ef1c:	4910      	ldr	r1, [pc, #64]	; (800ef60 <etharp_update_arp_entry+0x148>)
 800ef1e:	4613      	mov	r3, r2
 800ef20:	005b      	lsls	r3, r3, #1
 800ef22:	4413      	add	r3, r2
 800ef24:	00db      	lsls	r3, r3, #3
 800ef26:	440b      	add	r3, r1
 800ef28:	2200      	movs	r2, #0
 800ef2a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800ef32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ef36:	9300      	str	r3, [sp, #0]
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	6939      	ldr	r1, [r7, #16]
 800ef3c:	68f8      	ldr	r0, [r7, #12]
 800ef3e:	f001 ff97 	bl	8010e70 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800ef42:	6938      	ldr	r0, [r7, #16]
 800ef44:	f7f9 fcc2 	bl	80088cc <pbuf_free>
  }
  return ERR_OK;
 800ef48:	2300      	movs	r3, #0
}
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	3718      	adds	r7, #24
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}
 800ef52:	bf00      	nop
 800ef54:	08015fc0 	.word	0x08015fc0
 800ef58:	080160b8 	.word	0x080160b8
 800ef5c:	08016038 	.word	0x08016038
 800ef60:	2000a82c 	.word	0x2000a82c

0800ef64 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800ef64:	b580      	push	{r7, lr}
 800ef66:	b084      	sub	sp, #16
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	60fb      	str	r3, [r7, #12]
 800ef70:	e01e      	b.n	800efb0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800ef72:	4913      	ldr	r1, [pc, #76]	; (800efc0 <etharp_cleanup_netif+0x5c>)
 800ef74:	68fa      	ldr	r2, [r7, #12]
 800ef76:	4613      	mov	r3, r2
 800ef78:	005b      	lsls	r3, r3, #1
 800ef7a:	4413      	add	r3, r2
 800ef7c:	00db      	lsls	r3, r3, #3
 800ef7e:	440b      	add	r3, r1
 800ef80:	3314      	adds	r3, #20
 800ef82:	781b      	ldrb	r3, [r3, #0]
 800ef84:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800ef86:	7afb      	ldrb	r3, [r7, #11]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d00e      	beq.n	800efaa <etharp_cleanup_netif+0x46>
 800ef8c:	490c      	ldr	r1, [pc, #48]	; (800efc0 <etharp_cleanup_netif+0x5c>)
 800ef8e:	68fa      	ldr	r2, [r7, #12]
 800ef90:	4613      	mov	r3, r2
 800ef92:	005b      	lsls	r3, r3, #1
 800ef94:	4413      	add	r3, r2
 800ef96:	00db      	lsls	r3, r3, #3
 800ef98:	440b      	add	r3, r1
 800ef9a:	3308      	adds	r3, #8
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	687a      	ldr	r2, [r7, #4]
 800efa0:	429a      	cmp	r2, r3
 800efa2:	d102      	bne.n	800efaa <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800efa4:	68f8      	ldr	r0, [r7, #12]
 800efa6:	f7ff fce5 	bl	800e974 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	3301      	adds	r3, #1
 800efae:	60fb      	str	r3, [r7, #12]
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	2b09      	cmp	r3, #9
 800efb4:	dddd      	ble.n	800ef72 <etharp_cleanup_netif+0xe>
    }
  }
}
 800efb6:	bf00      	nop
 800efb8:	bf00      	nop
 800efba:	3710      	adds	r7, #16
 800efbc:	46bd      	mov	sp, r7
 800efbe:	bd80      	pop	{r7, pc}
 800efc0:	2000a82c 	.word	0x2000a82c

0800efc4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800efc4:	b5b0      	push	{r4, r5, r7, lr}
 800efc6:	b08a      	sub	sp, #40	; 0x28
 800efc8:	af04      	add	r7, sp, #16
 800efca:	6078      	str	r0, [r7, #4]
 800efcc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800efce:	683b      	ldr	r3, [r7, #0]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d107      	bne.n	800efe4 <etharp_input+0x20>
 800efd4:	4b3d      	ldr	r3, [pc, #244]	; (800f0cc <etharp_input+0x108>)
 800efd6:	f240 228a 	movw	r2, #650	; 0x28a
 800efda:	493d      	ldr	r1, [pc, #244]	; (800f0d0 <etharp_input+0x10c>)
 800efdc:	483d      	ldr	r0, [pc, #244]	; (800f0d4 <etharp_input+0x110>)
 800efde:	f002 fe6b 	bl	8011cb8 <iprintf>
 800efe2:	e06f      	b.n	800f0c4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	685b      	ldr	r3, [r3, #4]
 800efe8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800efea:	693b      	ldr	r3, [r7, #16]
 800efec:	881b      	ldrh	r3, [r3, #0]
 800efee:	b29b      	uxth	r3, r3
 800eff0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eff4:	d10c      	bne.n	800f010 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800eff6:	693b      	ldr	r3, [r7, #16]
 800eff8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800effa:	2b06      	cmp	r3, #6
 800effc:	d108      	bne.n	800f010 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800effe:	693b      	ldr	r3, [r7, #16]
 800f000:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f002:	2b04      	cmp	r3, #4
 800f004:	d104      	bne.n	800f010 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800f006:	693b      	ldr	r3, [r7, #16]
 800f008:	885b      	ldrh	r3, [r3, #2]
 800f00a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f00c:	2b08      	cmp	r3, #8
 800f00e:	d003      	beq.n	800f018 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800f010:	6878      	ldr	r0, [r7, #4]
 800f012:	f7f9 fc5b 	bl	80088cc <pbuf_free>
    return;
 800f016:	e055      	b.n	800f0c4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800f018:	693b      	ldr	r3, [r7, #16]
 800f01a:	330e      	adds	r3, #14
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800f020:	693b      	ldr	r3, [r7, #16]
 800f022:	3318      	adds	r3, #24
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f028:	683b      	ldr	r3, [r7, #0]
 800f02a:	3304      	adds	r3, #4
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d102      	bne.n	800f038 <etharp_input+0x74>
    for_us = 0;
 800f032:	2300      	movs	r3, #0
 800f034:	75fb      	strb	r3, [r7, #23]
 800f036:	e009      	b.n	800f04c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800f038:	68ba      	ldr	r2, [r7, #8]
 800f03a:	683b      	ldr	r3, [r7, #0]
 800f03c:	3304      	adds	r3, #4
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	429a      	cmp	r2, r3
 800f042:	bf0c      	ite	eq
 800f044:	2301      	moveq	r3, #1
 800f046:	2300      	movne	r3, #0
 800f048:	b2db      	uxtb	r3, r3
 800f04a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800f04c:	693b      	ldr	r3, [r7, #16]
 800f04e:	f103 0208 	add.w	r2, r3, #8
 800f052:	7dfb      	ldrb	r3, [r7, #23]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d001      	beq.n	800f05c <etharp_input+0x98>
 800f058:	2301      	movs	r3, #1
 800f05a:	e000      	b.n	800f05e <etharp_input+0x9a>
 800f05c:	2302      	movs	r3, #2
 800f05e:	f107 010c 	add.w	r1, r7, #12
 800f062:	6838      	ldr	r0, [r7, #0]
 800f064:	f7ff fed8 	bl	800ee18 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800f068:	693b      	ldr	r3, [r7, #16]
 800f06a:	88db      	ldrh	r3, [r3, #6]
 800f06c:	b29b      	uxth	r3, r3
 800f06e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f072:	d003      	beq.n	800f07c <etharp_input+0xb8>
 800f074:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f078:	d01e      	beq.n	800f0b8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800f07a:	e020      	b.n	800f0be <etharp_input+0xfa>
      if (for_us) {
 800f07c:	7dfb      	ldrb	r3, [r7, #23]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d01c      	beq.n	800f0bc <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800f082:	683b      	ldr	r3, [r7, #0]
 800f084:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800f088:	693b      	ldr	r3, [r7, #16]
 800f08a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800f08e:	683b      	ldr	r3, [r7, #0]
 800f090:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800f094:	683b      	ldr	r3, [r7, #0]
 800f096:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800f098:	693a      	ldr	r2, [r7, #16]
 800f09a:	3208      	adds	r2, #8
        etharp_raw(netif,
 800f09c:	2102      	movs	r1, #2
 800f09e:	9103      	str	r1, [sp, #12]
 800f0a0:	f107 010c 	add.w	r1, r7, #12
 800f0a4:	9102      	str	r1, [sp, #8]
 800f0a6:	9201      	str	r2, [sp, #4]
 800f0a8:	9300      	str	r3, [sp, #0]
 800f0aa:	462b      	mov	r3, r5
 800f0ac:	4622      	mov	r2, r4
 800f0ae:	4601      	mov	r1, r0
 800f0b0:	6838      	ldr	r0, [r7, #0]
 800f0b2:	f000 faeb 	bl	800f68c <etharp_raw>
      break;
 800f0b6:	e001      	b.n	800f0bc <etharp_input+0xf8>
      break;
 800f0b8:	bf00      	nop
 800f0ba:	e000      	b.n	800f0be <etharp_input+0xfa>
      break;
 800f0bc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800f0be:	6878      	ldr	r0, [r7, #4]
 800f0c0:	f7f9 fc04 	bl	80088cc <pbuf_free>
}
 800f0c4:	3718      	adds	r7, #24
 800f0c6:	46bd      	mov	sp, r7
 800f0c8:	bdb0      	pop	{r4, r5, r7, pc}
 800f0ca:	bf00      	nop
 800f0cc:	08015fc0 	.word	0x08015fc0
 800f0d0:	08016110 	.word	0x08016110
 800f0d4:	08016038 	.word	0x08016038

0800f0d8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	b086      	sub	sp, #24
 800f0dc:	af02      	add	r7, sp, #8
 800f0de:	60f8      	str	r0, [r7, #12]
 800f0e0:	60b9      	str	r1, [r7, #8]
 800f0e2:	4613      	mov	r3, r2
 800f0e4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800f0e6:	79fa      	ldrb	r2, [r7, #7]
 800f0e8:	4944      	ldr	r1, [pc, #272]	; (800f1fc <etharp_output_to_arp_index+0x124>)
 800f0ea:	4613      	mov	r3, r2
 800f0ec:	005b      	lsls	r3, r3, #1
 800f0ee:	4413      	add	r3, r2
 800f0f0:	00db      	lsls	r3, r3, #3
 800f0f2:	440b      	add	r3, r1
 800f0f4:	3314      	adds	r3, #20
 800f0f6:	781b      	ldrb	r3, [r3, #0]
 800f0f8:	2b01      	cmp	r3, #1
 800f0fa:	d806      	bhi.n	800f10a <etharp_output_to_arp_index+0x32>
 800f0fc:	4b40      	ldr	r3, [pc, #256]	; (800f200 <etharp_output_to_arp_index+0x128>)
 800f0fe:	f240 22ee 	movw	r2, #750	; 0x2ee
 800f102:	4940      	ldr	r1, [pc, #256]	; (800f204 <etharp_output_to_arp_index+0x12c>)
 800f104:	4840      	ldr	r0, [pc, #256]	; (800f208 <etharp_output_to_arp_index+0x130>)
 800f106:	f002 fdd7 	bl	8011cb8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800f10a:	79fa      	ldrb	r2, [r7, #7]
 800f10c:	493b      	ldr	r1, [pc, #236]	; (800f1fc <etharp_output_to_arp_index+0x124>)
 800f10e:	4613      	mov	r3, r2
 800f110:	005b      	lsls	r3, r3, #1
 800f112:	4413      	add	r3, r2
 800f114:	00db      	lsls	r3, r3, #3
 800f116:	440b      	add	r3, r1
 800f118:	3314      	adds	r3, #20
 800f11a:	781b      	ldrb	r3, [r3, #0]
 800f11c:	2b02      	cmp	r3, #2
 800f11e:	d153      	bne.n	800f1c8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800f120:	79fa      	ldrb	r2, [r7, #7]
 800f122:	4936      	ldr	r1, [pc, #216]	; (800f1fc <etharp_output_to_arp_index+0x124>)
 800f124:	4613      	mov	r3, r2
 800f126:	005b      	lsls	r3, r3, #1
 800f128:	4413      	add	r3, r2
 800f12a:	00db      	lsls	r3, r3, #3
 800f12c:	440b      	add	r3, r1
 800f12e:	3312      	adds	r3, #18
 800f130:	881b      	ldrh	r3, [r3, #0]
 800f132:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800f136:	d919      	bls.n	800f16c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800f138:	79fa      	ldrb	r2, [r7, #7]
 800f13a:	4613      	mov	r3, r2
 800f13c:	005b      	lsls	r3, r3, #1
 800f13e:	4413      	add	r3, r2
 800f140:	00db      	lsls	r3, r3, #3
 800f142:	4a2e      	ldr	r2, [pc, #184]	; (800f1fc <etharp_output_to_arp_index+0x124>)
 800f144:	4413      	add	r3, r2
 800f146:	3304      	adds	r3, #4
 800f148:	4619      	mov	r1, r3
 800f14a:	68f8      	ldr	r0, [r7, #12]
 800f14c:	f000 fb4c 	bl	800f7e8 <etharp_request>
 800f150:	4603      	mov	r3, r0
 800f152:	2b00      	cmp	r3, #0
 800f154:	d138      	bne.n	800f1c8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f156:	79fa      	ldrb	r2, [r7, #7]
 800f158:	4928      	ldr	r1, [pc, #160]	; (800f1fc <etharp_output_to_arp_index+0x124>)
 800f15a:	4613      	mov	r3, r2
 800f15c:	005b      	lsls	r3, r3, #1
 800f15e:	4413      	add	r3, r2
 800f160:	00db      	lsls	r3, r3, #3
 800f162:	440b      	add	r3, r1
 800f164:	3314      	adds	r3, #20
 800f166:	2203      	movs	r2, #3
 800f168:	701a      	strb	r2, [r3, #0]
 800f16a:	e02d      	b.n	800f1c8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800f16c:	79fa      	ldrb	r2, [r7, #7]
 800f16e:	4923      	ldr	r1, [pc, #140]	; (800f1fc <etharp_output_to_arp_index+0x124>)
 800f170:	4613      	mov	r3, r2
 800f172:	005b      	lsls	r3, r3, #1
 800f174:	4413      	add	r3, r2
 800f176:	00db      	lsls	r3, r3, #3
 800f178:	440b      	add	r3, r1
 800f17a:	3312      	adds	r3, #18
 800f17c:	881b      	ldrh	r3, [r3, #0]
 800f17e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800f182:	d321      	bcc.n	800f1c8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f184:	79fa      	ldrb	r2, [r7, #7]
 800f186:	4613      	mov	r3, r2
 800f188:	005b      	lsls	r3, r3, #1
 800f18a:	4413      	add	r3, r2
 800f18c:	00db      	lsls	r3, r3, #3
 800f18e:	4a1b      	ldr	r2, [pc, #108]	; (800f1fc <etharp_output_to_arp_index+0x124>)
 800f190:	4413      	add	r3, r2
 800f192:	1d19      	adds	r1, r3, #4
 800f194:	79fa      	ldrb	r2, [r7, #7]
 800f196:	4613      	mov	r3, r2
 800f198:	005b      	lsls	r3, r3, #1
 800f19a:	4413      	add	r3, r2
 800f19c:	00db      	lsls	r3, r3, #3
 800f19e:	3308      	adds	r3, #8
 800f1a0:	4a16      	ldr	r2, [pc, #88]	; (800f1fc <etharp_output_to_arp_index+0x124>)
 800f1a2:	4413      	add	r3, r2
 800f1a4:	3304      	adds	r3, #4
 800f1a6:	461a      	mov	r2, r3
 800f1a8:	68f8      	ldr	r0, [r7, #12]
 800f1aa:	f000 fafb 	bl	800f7a4 <etharp_request_dst>
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d109      	bne.n	800f1c8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f1b4:	79fa      	ldrb	r2, [r7, #7]
 800f1b6:	4911      	ldr	r1, [pc, #68]	; (800f1fc <etharp_output_to_arp_index+0x124>)
 800f1b8:	4613      	mov	r3, r2
 800f1ba:	005b      	lsls	r3, r3, #1
 800f1bc:	4413      	add	r3, r2
 800f1be:	00db      	lsls	r3, r3, #3
 800f1c0:	440b      	add	r3, r1
 800f1c2:	3314      	adds	r3, #20
 800f1c4:	2203      	movs	r2, #3
 800f1c6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800f1ce:	79fa      	ldrb	r2, [r7, #7]
 800f1d0:	4613      	mov	r3, r2
 800f1d2:	005b      	lsls	r3, r3, #1
 800f1d4:	4413      	add	r3, r2
 800f1d6:	00db      	lsls	r3, r3, #3
 800f1d8:	3308      	adds	r3, #8
 800f1da:	4a08      	ldr	r2, [pc, #32]	; (800f1fc <etharp_output_to_arp_index+0x124>)
 800f1dc:	4413      	add	r3, r2
 800f1de:	3304      	adds	r3, #4
 800f1e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f1e4:	9200      	str	r2, [sp, #0]
 800f1e6:	460a      	mov	r2, r1
 800f1e8:	68b9      	ldr	r1, [r7, #8]
 800f1ea:	68f8      	ldr	r0, [r7, #12]
 800f1ec:	f001 fe40 	bl	8010e70 <ethernet_output>
 800f1f0:	4603      	mov	r3, r0
}
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	3710      	adds	r7, #16
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	bd80      	pop	{r7, pc}
 800f1fa:	bf00      	nop
 800f1fc:	2000a82c 	.word	0x2000a82c
 800f200:	08015fc0 	.word	0x08015fc0
 800f204:	08016130 	.word	0x08016130
 800f208:	08016038 	.word	0x08016038

0800f20c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b08a      	sub	sp, #40	; 0x28
 800f210:	af02      	add	r7, sp, #8
 800f212:	60f8      	str	r0, [r7, #12]
 800f214:	60b9      	str	r1, [r7, #8]
 800f216:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d106      	bne.n	800f230 <etharp_output+0x24>
 800f222:	4b73      	ldr	r3, [pc, #460]	; (800f3f0 <etharp_output+0x1e4>)
 800f224:	f240 321e 	movw	r2, #798	; 0x31e
 800f228:	4972      	ldr	r1, [pc, #456]	; (800f3f4 <etharp_output+0x1e8>)
 800f22a:	4873      	ldr	r0, [pc, #460]	; (800f3f8 <etharp_output+0x1ec>)
 800f22c:	f002 fd44 	bl	8011cb8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800f230:	68bb      	ldr	r3, [r7, #8]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d106      	bne.n	800f244 <etharp_output+0x38>
 800f236:	4b6e      	ldr	r3, [pc, #440]	; (800f3f0 <etharp_output+0x1e4>)
 800f238:	f240 321f 	movw	r2, #799	; 0x31f
 800f23c:	496f      	ldr	r1, [pc, #444]	; (800f3fc <etharp_output+0x1f0>)
 800f23e:	486e      	ldr	r0, [pc, #440]	; (800f3f8 <etharp_output+0x1ec>)
 800f240:	f002 fd3a 	bl	8011cb8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d106      	bne.n	800f258 <etharp_output+0x4c>
 800f24a:	4b69      	ldr	r3, [pc, #420]	; (800f3f0 <etharp_output+0x1e4>)
 800f24c:	f44f 7248 	mov.w	r2, #800	; 0x320
 800f250:	496b      	ldr	r1, [pc, #428]	; (800f400 <etharp_output+0x1f4>)
 800f252:	4869      	ldr	r0, [pc, #420]	; (800f3f8 <etharp_output+0x1ec>)
 800f254:	f002 fd30 	bl	8011cb8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	68f9      	ldr	r1, [r7, #12]
 800f25e:	4618      	mov	r0, r3
 800f260:	f000 fef8 	bl	8010054 <ip4_addr_isbroadcast_u32>
 800f264:	4603      	mov	r3, r0
 800f266:	2b00      	cmp	r3, #0
 800f268:	d002      	beq.n	800f270 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800f26a:	4b66      	ldr	r3, [pc, #408]	; (800f404 <etharp_output+0x1f8>)
 800f26c:	61fb      	str	r3, [r7, #28]
 800f26e:	e0af      	b.n	800f3d0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f278:	2be0      	cmp	r3, #224	; 0xe0
 800f27a:	d118      	bne.n	800f2ae <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800f27c:	2301      	movs	r3, #1
 800f27e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800f280:	2300      	movs	r3, #0
 800f282:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800f284:	235e      	movs	r3, #94	; 0x5e
 800f286:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	3301      	adds	r3, #1
 800f28c:	781b      	ldrb	r3, [r3, #0]
 800f28e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f292:	b2db      	uxtb	r3, r3
 800f294:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	3302      	adds	r3, #2
 800f29a:	781b      	ldrb	r3, [r3, #0]
 800f29c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	3303      	adds	r3, #3
 800f2a2:	781b      	ldrb	r3, [r3, #0]
 800f2a4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800f2a6:	f107 0310 	add.w	r3, r7, #16
 800f2aa:	61fb      	str	r3, [r7, #28]
 800f2ac:	e090      	b.n	800f3d0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	681a      	ldr	r2, [r3, #0]
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	3304      	adds	r3, #4
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	405a      	eors	r2, r3
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	3308      	adds	r3, #8
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	4013      	ands	r3, r2
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d012      	beq.n	800f2ec <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f2cc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800f2d0:	4293      	cmp	r3, r2
 800f2d2:	d00b      	beq.n	800f2ec <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	330c      	adds	r3, #12
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d003      	beq.n	800f2e6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	330c      	adds	r3, #12
 800f2e2:	61bb      	str	r3, [r7, #24]
 800f2e4:	e002      	b.n	800f2ec <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800f2e6:	f06f 0303 	mvn.w	r3, #3
 800f2ea:	e07d      	b.n	800f3e8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f2ec:	4b46      	ldr	r3, [pc, #280]	; (800f408 <etharp_output+0x1fc>)
 800f2ee:	781b      	ldrb	r3, [r3, #0]
 800f2f0:	4619      	mov	r1, r3
 800f2f2:	4a46      	ldr	r2, [pc, #280]	; (800f40c <etharp_output+0x200>)
 800f2f4:	460b      	mov	r3, r1
 800f2f6:	005b      	lsls	r3, r3, #1
 800f2f8:	440b      	add	r3, r1
 800f2fa:	00db      	lsls	r3, r3, #3
 800f2fc:	4413      	add	r3, r2
 800f2fe:	3314      	adds	r3, #20
 800f300:	781b      	ldrb	r3, [r3, #0]
 800f302:	2b01      	cmp	r3, #1
 800f304:	d925      	bls.n	800f352 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f306:	4b40      	ldr	r3, [pc, #256]	; (800f408 <etharp_output+0x1fc>)
 800f308:	781b      	ldrb	r3, [r3, #0]
 800f30a:	4619      	mov	r1, r3
 800f30c:	4a3f      	ldr	r2, [pc, #252]	; (800f40c <etharp_output+0x200>)
 800f30e:	460b      	mov	r3, r1
 800f310:	005b      	lsls	r3, r3, #1
 800f312:	440b      	add	r3, r1
 800f314:	00db      	lsls	r3, r3, #3
 800f316:	4413      	add	r3, r2
 800f318:	3308      	adds	r3, #8
 800f31a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f31c:	68fa      	ldr	r2, [r7, #12]
 800f31e:	429a      	cmp	r2, r3
 800f320:	d117      	bne.n	800f352 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800f322:	69bb      	ldr	r3, [r7, #24]
 800f324:	681a      	ldr	r2, [r3, #0]
 800f326:	4b38      	ldr	r3, [pc, #224]	; (800f408 <etharp_output+0x1fc>)
 800f328:	781b      	ldrb	r3, [r3, #0]
 800f32a:	4618      	mov	r0, r3
 800f32c:	4937      	ldr	r1, [pc, #220]	; (800f40c <etharp_output+0x200>)
 800f32e:	4603      	mov	r3, r0
 800f330:	005b      	lsls	r3, r3, #1
 800f332:	4403      	add	r3, r0
 800f334:	00db      	lsls	r3, r3, #3
 800f336:	440b      	add	r3, r1
 800f338:	3304      	adds	r3, #4
 800f33a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f33c:	429a      	cmp	r2, r3
 800f33e:	d108      	bne.n	800f352 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800f340:	4b31      	ldr	r3, [pc, #196]	; (800f408 <etharp_output+0x1fc>)
 800f342:	781b      	ldrb	r3, [r3, #0]
 800f344:	461a      	mov	r2, r3
 800f346:	68b9      	ldr	r1, [r7, #8]
 800f348:	68f8      	ldr	r0, [r7, #12]
 800f34a:	f7ff fec5 	bl	800f0d8 <etharp_output_to_arp_index>
 800f34e:	4603      	mov	r3, r0
 800f350:	e04a      	b.n	800f3e8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f352:	2300      	movs	r3, #0
 800f354:	75fb      	strb	r3, [r7, #23]
 800f356:	e031      	b.n	800f3bc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f358:	7dfa      	ldrb	r2, [r7, #23]
 800f35a:	492c      	ldr	r1, [pc, #176]	; (800f40c <etharp_output+0x200>)
 800f35c:	4613      	mov	r3, r2
 800f35e:	005b      	lsls	r3, r3, #1
 800f360:	4413      	add	r3, r2
 800f362:	00db      	lsls	r3, r3, #3
 800f364:	440b      	add	r3, r1
 800f366:	3314      	adds	r3, #20
 800f368:	781b      	ldrb	r3, [r3, #0]
 800f36a:	2b01      	cmp	r3, #1
 800f36c:	d923      	bls.n	800f3b6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800f36e:	7dfa      	ldrb	r2, [r7, #23]
 800f370:	4926      	ldr	r1, [pc, #152]	; (800f40c <etharp_output+0x200>)
 800f372:	4613      	mov	r3, r2
 800f374:	005b      	lsls	r3, r3, #1
 800f376:	4413      	add	r3, r2
 800f378:	00db      	lsls	r3, r3, #3
 800f37a:	440b      	add	r3, r1
 800f37c:	3308      	adds	r3, #8
 800f37e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f380:	68fa      	ldr	r2, [r7, #12]
 800f382:	429a      	cmp	r2, r3
 800f384:	d117      	bne.n	800f3b6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800f386:	69bb      	ldr	r3, [r7, #24]
 800f388:	6819      	ldr	r1, [r3, #0]
 800f38a:	7dfa      	ldrb	r2, [r7, #23]
 800f38c:	481f      	ldr	r0, [pc, #124]	; (800f40c <etharp_output+0x200>)
 800f38e:	4613      	mov	r3, r2
 800f390:	005b      	lsls	r3, r3, #1
 800f392:	4413      	add	r3, r2
 800f394:	00db      	lsls	r3, r3, #3
 800f396:	4403      	add	r3, r0
 800f398:	3304      	adds	r3, #4
 800f39a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800f39c:	4299      	cmp	r1, r3
 800f39e:	d10a      	bne.n	800f3b6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800f3a0:	4a19      	ldr	r2, [pc, #100]	; (800f408 <etharp_output+0x1fc>)
 800f3a2:	7dfb      	ldrb	r3, [r7, #23]
 800f3a4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800f3a6:	7dfb      	ldrb	r3, [r7, #23]
 800f3a8:	461a      	mov	r2, r3
 800f3aa:	68b9      	ldr	r1, [r7, #8]
 800f3ac:	68f8      	ldr	r0, [r7, #12]
 800f3ae:	f7ff fe93 	bl	800f0d8 <etharp_output_to_arp_index>
 800f3b2:	4603      	mov	r3, r0
 800f3b4:	e018      	b.n	800f3e8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f3b6:	7dfb      	ldrb	r3, [r7, #23]
 800f3b8:	3301      	adds	r3, #1
 800f3ba:	75fb      	strb	r3, [r7, #23]
 800f3bc:	7dfb      	ldrb	r3, [r7, #23]
 800f3be:	2b09      	cmp	r3, #9
 800f3c0:	d9ca      	bls.n	800f358 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800f3c2:	68ba      	ldr	r2, [r7, #8]
 800f3c4:	69b9      	ldr	r1, [r7, #24]
 800f3c6:	68f8      	ldr	r0, [r7, #12]
 800f3c8:	f000 f822 	bl	800f410 <etharp_query>
 800f3cc:	4603      	mov	r3, r0
 800f3ce:	e00b      	b.n	800f3e8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800f3d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f3da:	9300      	str	r3, [sp, #0]
 800f3dc:	69fb      	ldr	r3, [r7, #28]
 800f3de:	68b9      	ldr	r1, [r7, #8]
 800f3e0:	68f8      	ldr	r0, [r7, #12]
 800f3e2:	f001 fd45 	bl	8010e70 <ethernet_output>
 800f3e6:	4603      	mov	r3, r0
}
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	3720      	adds	r7, #32
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	bd80      	pop	{r7, pc}
 800f3f0:	08015fc0 	.word	0x08015fc0
 800f3f4:	08016110 	.word	0x08016110
 800f3f8:	08016038 	.word	0x08016038
 800f3fc:	08016160 	.word	0x08016160
 800f400:	08016100 	.word	0x08016100
 800f404:	0801677c 	.word	0x0801677c
 800f408:	2000a91c 	.word	0x2000a91c
 800f40c:	2000a82c 	.word	0x2000a82c

0800f410 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b08c      	sub	sp, #48	; 0x30
 800f414:	af02      	add	r7, sp, #8
 800f416:	60f8      	str	r0, [r7, #12]
 800f418:	60b9      	str	r1, [r7, #8]
 800f41a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	3326      	adds	r3, #38	; 0x26
 800f420:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800f422:	23ff      	movs	r3, #255	; 0xff
 800f424:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800f428:	2300      	movs	r3, #0
 800f42a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f42c:	68bb      	ldr	r3, [r7, #8]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	68f9      	ldr	r1, [r7, #12]
 800f432:	4618      	mov	r0, r3
 800f434:	f000 fe0e 	bl	8010054 <ip4_addr_isbroadcast_u32>
 800f438:	4603      	mov	r3, r0
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d10c      	bne.n	800f458 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f43e:	68bb      	ldr	r3, [r7, #8]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f446:	2be0      	cmp	r3, #224	; 0xe0
 800f448:	d006      	beq.n	800f458 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f44a:	68bb      	ldr	r3, [r7, #8]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d003      	beq.n	800f458 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800f450:	68bb      	ldr	r3, [r7, #8]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d102      	bne.n	800f45e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f458:	f06f 030f 	mvn.w	r3, #15
 800f45c:	e101      	b.n	800f662 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800f45e:	68fa      	ldr	r2, [r7, #12]
 800f460:	2101      	movs	r1, #1
 800f462:	68b8      	ldr	r0, [r7, #8]
 800f464:	f7ff fb60 	bl	800eb28 <etharp_find_entry>
 800f468:	4603      	mov	r3, r0
 800f46a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800f46c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f470:	2b00      	cmp	r3, #0
 800f472:	da02      	bge.n	800f47a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800f474:	8a7b      	ldrh	r3, [r7, #18]
 800f476:	b25b      	sxtb	r3, r3
 800f478:	e0f3      	b.n	800f662 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800f47a:	8a7b      	ldrh	r3, [r7, #18]
 800f47c:	2b7e      	cmp	r3, #126	; 0x7e
 800f47e:	d906      	bls.n	800f48e <etharp_query+0x7e>
 800f480:	4b7a      	ldr	r3, [pc, #488]	; (800f66c <etharp_query+0x25c>)
 800f482:	f240 32c1 	movw	r2, #961	; 0x3c1
 800f486:	497a      	ldr	r1, [pc, #488]	; (800f670 <etharp_query+0x260>)
 800f488:	487a      	ldr	r0, [pc, #488]	; (800f674 <etharp_query+0x264>)
 800f48a:	f002 fc15 	bl	8011cb8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800f48e:	8a7b      	ldrh	r3, [r7, #18]
 800f490:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800f492:	7c7a      	ldrb	r2, [r7, #17]
 800f494:	4978      	ldr	r1, [pc, #480]	; (800f678 <etharp_query+0x268>)
 800f496:	4613      	mov	r3, r2
 800f498:	005b      	lsls	r3, r3, #1
 800f49a:	4413      	add	r3, r2
 800f49c:	00db      	lsls	r3, r3, #3
 800f49e:	440b      	add	r3, r1
 800f4a0:	3314      	adds	r3, #20
 800f4a2:	781b      	ldrb	r3, [r3, #0]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d115      	bne.n	800f4d4 <etharp_query+0xc4>
    is_new_entry = 1;
 800f4a8:	2301      	movs	r3, #1
 800f4aa:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800f4ac:	7c7a      	ldrb	r2, [r7, #17]
 800f4ae:	4972      	ldr	r1, [pc, #456]	; (800f678 <etharp_query+0x268>)
 800f4b0:	4613      	mov	r3, r2
 800f4b2:	005b      	lsls	r3, r3, #1
 800f4b4:	4413      	add	r3, r2
 800f4b6:	00db      	lsls	r3, r3, #3
 800f4b8:	440b      	add	r3, r1
 800f4ba:	3314      	adds	r3, #20
 800f4bc:	2201      	movs	r2, #1
 800f4be:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800f4c0:	7c7a      	ldrb	r2, [r7, #17]
 800f4c2:	496d      	ldr	r1, [pc, #436]	; (800f678 <etharp_query+0x268>)
 800f4c4:	4613      	mov	r3, r2
 800f4c6:	005b      	lsls	r3, r3, #1
 800f4c8:	4413      	add	r3, r2
 800f4ca:	00db      	lsls	r3, r3, #3
 800f4cc:	440b      	add	r3, r1
 800f4ce:	3308      	adds	r3, #8
 800f4d0:	68fa      	ldr	r2, [r7, #12]
 800f4d2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800f4d4:	7c7a      	ldrb	r2, [r7, #17]
 800f4d6:	4968      	ldr	r1, [pc, #416]	; (800f678 <etharp_query+0x268>)
 800f4d8:	4613      	mov	r3, r2
 800f4da:	005b      	lsls	r3, r3, #1
 800f4dc:	4413      	add	r3, r2
 800f4de:	00db      	lsls	r3, r3, #3
 800f4e0:	440b      	add	r3, r1
 800f4e2:	3314      	adds	r3, #20
 800f4e4:	781b      	ldrb	r3, [r3, #0]
 800f4e6:	2b01      	cmp	r3, #1
 800f4e8:	d011      	beq.n	800f50e <etharp_query+0xfe>
 800f4ea:	7c7a      	ldrb	r2, [r7, #17]
 800f4ec:	4962      	ldr	r1, [pc, #392]	; (800f678 <etharp_query+0x268>)
 800f4ee:	4613      	mov	r3, r2
 800f4f0:	005b      	lsls	r3, r3, #1
 800f4f2:	4413      	add	r3, r2
 800f4f4:	00db      	lsls	r3, r3, #3
 800f4f6:	440b      	add	r3, r1
 800f4f8:	3314      	adds	r3, #20
 800f4fa:	781b      	ldrb	r3, [r3, #0]
 800f4fc:	2b01      	cmp	r3, #1
 800f4fe:	d806      	bhi.n	800f50e <etharp_query+0xfe>
 800f500:	4b5a      	ldr	r3, [pc, #360]	; (800f66c <etharp_query+0x25c>)
 800f502:	f240 32cd 	movw	r2, #973	; 0x3cd
 800f506:	495d      	ldr	r1, [pc, #372]	; (800f67c <etharp_query+0x26c>)
 800f508:	485a      	ldr	r0, [pc, #360]	; (800f674 <etharp_query+0x264>)
 800f50a:	f002 fbd5 	bl	8011cb8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800f50e:	6a3b      	ldr	r3, [r7, #32]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d102      	bne.n	800f51a <etharp_query+0x10a>
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	2b00      	cmp	r3, #0
 800f518:	d10c      	bne.n	800f534 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800f51a:	68b9      	ldr	r1, [r7, #8]
 800f51c:	68f8      	ldr	r0, [r7, #12]
 800f51e:	f000 f963 	bl	800f7e8 <etharp_request>
 800f522:	4603      	mov	r3, r0
 800f524:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d102      	bne.n	800f534 <etharp_query+0x124>
      return result;
 800f52e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f532:	e096      	b.n	800f662 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d106      	bne.n	800f548 <etharp_query+0x138>
 800f53a:	4b4c      	ldr	r3, [pc, #304]	; (800f66c <etharp_query+0x25c>)
 800f53c:	f240 32e1 	movw	r2, #993	; 0x3e1
 800f540:	494f      	ldr	r1, [pc, #316]	; (800f680 <etharp_query+0x270>)
 800f542:	484c      	ldr	r0, [pc, #304]	; (800f674 <etharp_query+0x264>)
 800f544:	f002 fbb8 	bl	8011cb8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800f548:	7c7a      	ldrb	r2, [r7, #17]
 800f54a:	494b      	ldr	r1, [pc, #300]	; (800f678 <etharp_query+0x268>)
 800f54c:	4613      	mov	r3, r2
 800f54e:	005b      	lsls	r3, r3, #1
 800f550:	4413      	add	r3, r2
 800f552:	00db      	lsls	r3, r3, #3
 800f554:	440b      	add	r3, r1
 800f556:	3314      	adds	r3, #20
 800f558:	781b      	ldrb	r3, [r3, #0]
 800f55a:	2b01      	cmp	r3, #1
 800f55c:	d917      	bls.n	800f58e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800f55e:	4a49      	ldr	r2, [pc, #292]	; (800f684 <etharp_query+0x274>)
 800f560:	7c7b      	ldrb	r3, [r7, #17]
 800f562:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800f564:	7c7a      	ldrb	r2, [r7, #17]
 800f566:	4613      	mov	r3, r2
 800f568:	005b      	lsls	r3, r3, #1
 800f56a:	4413      	add	r3, r2
 800f56c:	00db      	lsls	r3, r3, #3
 800f56e:	3308      	adds	r3, #8
 800f570:	4a41      	ldr	r2, [pc, #260]	; (800f678 <etharp_query+0x268>)
 800f572:	4413      	add	r3, r2
 800f574:	3304      	adds	r3, #4
 800f576:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f57a:	9200      	str	r2, [sp, #0]
 800f57c:	697a      	ldr	r2, [r7, #20]
 800f57e:	6879      	ldr	r1, [r7, #4]
 800f580:	68f8      	ldr	r0, [r7, #12]
 800f582:	f001 fc75 	bl	8010e70 <ethernet_output>
 800f586:	4603      	mov	r3, r0
 800f588:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f58c:	e067      	b.n	800f65e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f58e:	7c7a      	ldrb	r2, [r7, #17]
 800f590:	4939      	ldr	r1, [pc, #228]	; (800f678 <etharp_query+0x268>)
 800f592:	4613      	mov	r3, r2
 800f594:	005b      	lsls	r3, r3, #1
 800f596:	4413      	add	r3, r2
 800f598:	00db      	lsls	r3, r3, #3
 800f59a:	440b      	add	r3, r1
 800f59c:	3314      	adds	r3, #20
 800f59e:	781b      	ldrb	r3, [r3, #0]
 800f5a0:	2b01      	cmp	r3, #1
 800f5a2:	d15c      	bne.n	800f65e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f5ac:	e01c      	b.n	800f5e8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800f5ae:	69fb      	ldr	r3, [r7, #28]
 800f5b0:	895a      	ldrh	r2, [r3, #10]
 800f5b2:	69fb      	ldr	r3, [r7, #28]
 800f5b4:	891b      	ldrh	r3, [r3, #8]
 800f5b6:	429a      	cmp	r2, r3
 800f5b8:	d10a      	bne.n	800f5d0 <etharp_query+0x1c0>
 800f5ba:	69fb      	ldr	r3, [r7, #28]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d006      	beq.n	800f5d0 <etharp_query+0x1c0>
 800f5c2:	4b2a      	ldr	r3, [pc, #168]	; (800f66c <etharp_query+0x25c>)
 800f5c4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800f5c8:	492f      	ldr	r1, [pc, #188]	; (800f688 <etharp_query+0x278>)
 800f5ca:	482a      	ldr	r0, [pc, #168]	; (800f674 <etharp_query+0x264>)
 800f5cc:	f002 fb74 	bl	8011cb8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800f5d0:	69fb      	ldr	r3, [r7, #28]
 800f5d2:	7b1b      	ldrb	r3, [r3, #12]
 800f5d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d002      	beq.n	800f5e2 <etharp_query+0x1d2>
        copy_needed = 1;
 800f5dc:	2301      	movs	r3, #1
 800f5de:	61bb      	str	r3, [r7, #24]
        break;
 800f5e0:	e005      	b.n	800f5ee <etharp_query+0x1de>
      }
      p = p->next;
 800f5e2:	69fb      	ldr	r3, [r7, #28]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f5e8:	69fb      	ldr	r3, [r7, #28]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d1df      	bne.n	800f5ae <etharp_query+0x19e>
    }
    if (copy_needed) {
 800f5ee:	69bb      	ldr	r3, [r7, #24]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d007      	beq.n	800f604 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800f5f4:	687a      	ldr	r2, [r7, #4]
 800f5f6:	f44f 7120 	mov.w	r1, #640	; 0x280
 800f5fa:	200e      	movs	r0, #14
 800f5fc:	f7f9 fbc2 	bl	8008d84 <pbuf_clone>
 800f600:	61f8      	str	r0, [r7, #28]
 800f602:	e004      	b.n	800f60e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800f608:	69f8      	ldr	r0, [r7, #28]
 800f60a:	f7f9 f9ff 	bl	8008a0c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800f60e:	69fb      	ldr	r3, [r7, #28]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d021      	beq.n	800f658 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800f614:	7c7a      	ldrb	r2, [r7, #17]
 800f616:	4918      	ldr	r1, [pc, #96]	; (800f678 <etharp_query+0x268>)
 800f618:	4613      	mov	r3, r2
 800f61a:	005b      	lsls	r3, r3, #1
 800f61c:	4413      	add	r3, r2
 800f61e:	00db      	lsls	r3, r3, #3
 800f620:	440b      	add	r3, r1
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d00a      	beq.n	800f63e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800f628:	7c7a      	ldrb	r2, [r7, #17]
 800f62a:	4913      	ldr	r1, [pc, #76]	; (800f678 <etharp_query+0x268>)
 800f62c:	4613      	mov	r3, r2
 800f62e:	005b      	lsls	r3, r3, #1
 800f630:	4413      	add	r3, r2
 800f632:	00db      	lsls	r3, r3, #3
 800f634:	440b      	add	r3, r1
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	4618      	mov	r0, r3
 800f63a:	f7f9 f947 	bl	80088cc <pbuf_free>
      }
      arp_table[i].q = p;
 800f63e:	7c7a      	ldrb	r2, [r7, #17]
 800f640:	490d      	ldr	r1, [pc, #52]	; (800f678 <etharp_query+0x268>)
 800f642:	4613      	mov	r3, r2
 800f644:	005b      	lsls	r3, r3, #1
 800f646:	4413      	add	r3, r2
 800f648:	00db      	lsls	r3, r3, #3
 800f64a:	440b      	add	r3, r1
 800f64c:	69fa      	ldr	r2, [r7, #28]
 800f64e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800f650:	2300      	movs	r3, #0
 800f652:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f656:	e002      	b.n	800f65e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800f658:	23ff      	movs	r3, #255	; 0xff
 800f65a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800f65e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f662:	4618      	mov	r0, r3
 800f664:	3728      	adds	r7, #40	; 0x28
 800f666:	46bd      	mov	sp, r7
 800f668:	bd80      	pop	{r7, pc}
 800f66a:	bf00      	nop
 800f66c:	08015fc0 	.word	0x08015fc0
 800f670:	0801616c 	.word	0x0801616c
 800f674:	08016038 	.word	0x08016038
 800f678:	2000a82c 	.word	0x2000a82c
 800f67c:	0801617c 	.word	0x0801617c
 800f680:	08016160 	.word	0x08016160
 800f684:	2000a91c 	.word	0x2000a91c
 800f688:	080161a4 	.word	0x080161a4

0800f68c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800f68c:	b580      	push	{r7, lr}
 800f68e:	b08a      	sub	sp, #40	; 0x28
 800f690:	af02      	add	r7, sp, #8
 800f692:	60f8      	str	r0, [r7, #12]
 800f694:	60b9      	str	r1, [r7, #8]
 800f696:	607a      	str	r2, [r7, #4]
 800f698:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800f69a:	2300      	movs	r3, #0
 800f69c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d106      	bne.n	800f6b2 <etharp_raw+0x26>
 800f6a4:	4b3a      	ldr	r3, [pc, #232]	; (800f790 <etharp_raw+0x104>)
 800f6a6:	f240 4257 	movw	r2, #1111	; 0x457
 800f6aa:	493a      	ldr	r1, [pc, #232]	; (800f794 <etharp_raw+0x108>)
 800f6ac:	483a      	ldr	r0, [pc, #232]	; (800f798 <etharp_raw+0x10c>)
 800f6ae:	f002 fb03 	bl	8011cb8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800f6b2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f6b6:	211c      	movs	r1, #28
 800f6b8:	200e      	movs	r0, #14
 800f6ba:	f7f8 fe23 	bl	8008304 <pbuf_alloc>
 800f6be:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800f6c0:	69bb      	ldr	r3, [r7, #24]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d102      	bne.n	800f6cc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800f6c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f6ca:	e05d      	b.n	800f788 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800f6cc:	69bb      	ldr	r3, [r7, #24]
 800f6ce:	895b      	ldrh	r3, [r3, #10]
 800f6d0:	2b1b      	cmp	r3, #27
 800f6d2:	d806      	bhi.n	800f6e2 <etharp_raw+0x56>
 800f6d4:	4b2e      	ldr	r3, [pc, #184]	; (800f790 <etharp_raw+0x104>)
 800f6d6:	f240 4262 	movw	r2, #1122	; 0x462
 800f6da:	4930      	ldr	r1, [pc, #192]	; (800f79c <etharp_raw+0x110>)
 800f6dc:	482e      	ldr	r0, [pc, #184]	; (800f798 <etharp_raw+0x10c>)
 800f6de:	f002 faeb 	bl	8011cb8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800f6e2:	69bb      	ldr	r3, [r7, #24]
 800f6e4:	685b      	ldr	r3, [r3, #4]
 800f6e6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800f6e8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	f7f7 fd90 	bl	8007210 <lwip_htons>
 800f6f0:	4603      	mov	r3, r0
 800f6f2:	461a      	mov	r2, r3
 800f6f4:	697b      	ldr	r3, [r7, #20]
 800f6f6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f6fe:	2b06      	cmp	r3, #6
 800f700:	d006      	beq.n	800f710 <etharp_raw+0x84>
 800f702:	4b23      	ldr	r3, [pc, #140]	; (800f790 <etharp_raw+0x104>)
 800f704:	f240 4269 	movw	r2, #1129	; 0x469
 800f708:	4925      	ldr	r1, [pc, #148]	; (800f7a0 <etharp_raw+0x114>)
 800f70a:	4823      	ldr	r0, [pc, #140]	; (800f798 <etharp_raw+0x10c>)
 800f70c:	f002 fad4 	bl	8011cb8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800f710:	697b      	ldr	r3, [r7, #20]
 800f712:	3308      	adds	r3, #8
 800f714:	2206      	movs	r2, #6
 800f716:	6839      	ldr	r1, [r7, #0]
 800f718:	4618      	mov	r0, r3
 800f71a:	f002 fc2e 	bl	8011f7a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800f71e:	697b      	ldr	r3, [r7, #20]
 800f720:	3312      	adds	r3, #18
 800f722:	2206      	movs	r2, #6
 800f724:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f726:	4618      	mov	r0, r3
 800f728:	f002 fc27 	bl	8011f7a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800f72c:	697b      	ldr	r3, [r7, #20]
 800f72e:	330e      	adds	r3, #14
 800f730:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f732:	6812      	ldr	r2, [r2, #0]
 800f734:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800f736:	697b      	ldr	r3, [r7, #20]
 800f738:	3318      	adds	r3, #24
 800f73a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f73c:	6812      	ldr	r2, [r2, #0]
 800f73e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800f740:	697b      	ldr	r3, [r7, #20]
 800f742:	2200      	movs	r2, #0
 800f744:	701a      	strb	r2, [r3, #0]
 800f746:	2200      	movs	r2, #0
 800f748:	f042 0201 	orr.w	r2, r2, #1
 800f74c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800f74e:	697b      	ldr	r3, [r7, #20]
 800f750:	2200      	movs	r2, #0
 800f752:	f042 0208 	orr.w	r2, r2, #8
 800f756:	709a      	strb	r2, [r3, #2]
 800f758:	2200      	movs	r2, #0
 800f75a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800f75c:	697b      	ldr	r3, [r7, #20]
 800f75e:	2206      	movs	r2, #6
 800f760:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800f762:	697b      	ldr	r3, [r7, #20]
 800f764:	2204      	movs	r2, #4
 800f766:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800f768:	f640 0306 	movw	r3, #2054	; 0x806
 800f76c:	9300      	str	r3, [sp, #0]
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	68ba      	ldr	r2, [r7, #8]
 800f772:	69b9      	ldr	r1, [r7, #24]
 800f774:	68f8      	ldr	r0, [r7, #12]
 800f776:	f001 fb7b 	bl	8010e70 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800f77a:	69b8      	ldr	r0, [r7, #24]
 800f77c:	f7f9 f8a6 	bl	80088cc <pbuf_free>
  p = NULL;
 800f780:	2300      	movs	r3, #0
 800f782:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800f784:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f788:	4618      	mov	r0, r3
 800f78a:	3720      	adds	r7, #32
 800f78c:	46bd      	mov	sp, r7
 800f78e:	bd80      	pop	{r7, pc}
 800f790:	08015fc0 	.word	0x08015fc0
 800f794:	08016110 	.word	0x08016110
 800f798:	08016038 	.word	0x08016038
 800f79c:	080161c0 	.word	0x080161c0
 800f7a0:	080161f4 	.word	0x080161f4

0800f7a4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b088      	sub	sp, #32
 800f7a8:	af04      	add	r7, sp, #16
 800f7aa:	60f8      	str	r0, [r7, #12]
 800f7ac:	60b9      	str	r1, [r7, #8]
 800f7ae:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f7c0:	2201      	movs	r2, #1
 800f7c2:	9203      	str	r2, [sp, #12]
 800f7c4:	68ba      	ldr	r2, [r7, #8]
 800f7c6:	9202      	str	r2, [sp, #8]
 800f7c8:	4a06      	ldr	r2, [pc, #24]	; (800f7e4 <etharp_request_dst+0x40>)
 800f7ca:	9201      	str	r2, [sp, #4]
 800f7cc:	9300      	str	r3, [sp, #0]
 800f7ce:	4603      	mov	r3, r0
 800f7d0:	687a      	ldr	r2, [r7, #4]
 800f7d2:	68f8      	ldr	r0, [r7, #12]
 800f7d4:	f7ff ff5a 	bl	800f68c <etharp_raw>
 800f7d8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800f7da:	4618      	mov	r0, r3
 800f7dc:	3710      	adds	r7, #16
 800f7de:	46bd      	mov	sp, r7
 800f7e0:	bd80      	pop	{r7, pc}
 800f7e2:	bf00      	nop
 800f7e4:	08016784 	.word	0x08016784

0800f7e8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b082      	sub	sp, #8
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
 800f7f0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800f7f2:	4a05      	ldr	r2, [pc, #20]	; (800f808 <etharp_request+0x20>)
 800f7f4:	6839      	ldr	r1, [r7, #0]
 800f7f6:	6878      	ldr	r0, [r7, #4]
 800f7f8:	f7ff ffd4 	bl	800f7a4 <etharp_request_dst>
 800f7fc:	4603      	mov	r3, r0
}
 800f7fe:	4618      	mov	r0, r3
 800f800:	3708      	adds	r7, #8
 800f802:	46bd      	mov	sp, r7
 800f804:	bd80      	pop	{r7, pc}
 800f806:	bf00      	nop
 800f808:	0801677c 	.word	0x0801677c

0800f80c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800f80c:	b580      	push	{r7, lr}
 800f80e:	b08e      	sub	sp, #56	; 0x38
 800f810:	af04      	add	r7, sp, #16
 800f812:	6078      	str	r0, [r7, #4]
 800f814:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800f816:	4b79      	ldr	r3, [pc, #484]	; (800f9fc <icmp_input+0x1f0>)
 800f818:	689b      	ldr	r3, [r3, #8]
 800f81a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800f81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f81e:	781b      	ldrb	r3, [r3, #0]
 800f820:	f003 030f 	and.w	r3, r3, #15
 800f824:	b2db      	uxtb	r3, r3
 800f826:	009b      	lsls	r3, r3, #2
 800f828:	b2db      	uxtb	r3, r3
 800f82a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800f82c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f82e:	2b13      	cmp	r3, #19
 800f830:	f240 80cd 	bls.w	800f9ce <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	895b      	ldrh	r3, [r3, #10]
 800f838:	2b03      	cmp	r3, #3
 800f83a:	f240 80ca 	bls.w	800f9d2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	685b      	ldr	r3, [r3, #4]
 800f842:	781b      	ldrb	r3, [r3, #0]
 800f844:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800f848:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	f000 80b7 	beq.w	800f9c0 <icmp_input+0x1b4>
 800f852:	2b08      	cmp	r3, #8
 800f854:	f040 80b7 	bne.w	800f9c6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800f858:	4b69      	ldr	r3, [pc, #420]	; (800fa00 <icmp_input+0x1f4>)
 800f85a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f85c:	4b67      	ldr	r3, [pc, #412]	; (800f9fc <icmp_input+0x1f0>)
 800f85e:	695b      	ldr	r3, [r3, #20]
 800f860:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f864:	2be0      	cmp	r3, #224	; 0xe0
 800f866:	f000 80bb 	beq.w	800f9e0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800f86a:	4b64      	ldr	r3, [pc, #400]	; (800f9fc <icmp_input+0x1f0>)
 800f86c:	695b      	ldr	r3, [r3, #20]
 800f86e:	4a63      	ldr	r2, [pc, #396]	; (800f9fc <icmp_input+0x1f0>)
 800f870:	6812      	ldr	r2, [r2, #0]
 800f872:	4611      	mov	r1, r2
 800f874:	4618      	mov	r0, r3
 800f876:	f000 fbed 	bl	8010054 <ip4_addr_isbroadcast_u32>
 800f87a:	4603      	mov	r3, r0
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	f040 80b1 	bne.w	800f9e4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	891b      	ldrh	r3, [r3, #8]
 800f886:	2b07      	cmp	r3, #7
 800f888:	f240 80a5 	bls.w	800f9d6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800f88c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f88e:	330e      	adds	r3, #14
 800f890:	4619      	mov	r1, r3
 800f892:	6878      	ldr	r0, [r7, #4]
 800f894:	f7f8 ff84 	bl	80087a0 <pbuf_add_header>
 800f898:	4603      	mov	r3, r0
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d04b      	beq.n	800f936 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	891a      	ldrh	r2, [r3, #8]
 800f8a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f8a4:	4413      	add	r3, r2
 800f8a6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	891b      	ldrh	r3, [r3, #8]
 800f8ac:	8b7a      	ldrh	r2, [r7, #26]
 800f8ae:	429a      	cmp	r2, r3
 800f8b0:	f0c0 809a 	bcc.w	800f9e8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800f8b4:	8b7b      	ldrh	r3, [r7, #26]
 800f8b6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f8ba:	4619      	mov	r1, r3
 800f8bc:	200e      	movs	r0, #14
 800f8be:	f7f8 fd21 	bl	8008304 <pbuf_alloc>
 800f8c2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800f8c4:	697b      	ldr	r3, [r7, #20]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	f000 8090 	beq.w	800f9ec <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800f8cc:	697b      	ldr	r3, [r7, #20]
 800f8ce:	895b      	ldrh	r3, [r3, #10]
 800f8d0:	461a      	mov	r2, r3
 800f8d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f8d4:	3308      	adds	r3, #8
 800f8d6:	429a      	cmp	r2, r3
 800f8d8:	d203      	bcs.n	800f8e2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800f8da:	6978      	ldr	r0, [r7, #20]
 800f8dc:	f7f8 fff6 	bl	80088cc <pbuf_free>
          goto icmperr;
 800f8e0:	e085      	b.n	800f9ee <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800f8e2:	697b      	ldr	r3, [r7, #20]
 800f8e4:	685b      	ldr	r3, [r3, #4]
 800f8e6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f8e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	f002 fb45 	bl	8011f7a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800f8f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f8f2:	4619      	mov	r1, r3
 800f8f4:	6978      	ldr	r0, [r7, #20]
 800f8f6:	f7f8 ff63 	bl	80087c0 <pbuf_remove_header>
 800f8fa:	4603      	mov	r3, r0
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d009      	beq.n	800f914 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800f900:	4b40      	ldr	r3, [pc, #256]	; (800fa04 <icmp_input+0x1f8>)
 800f902:	22b6      	movs	r2, #182	; 0xb6
 800f904:	4940      	ldr	r1, [pc, #256]	; (800fa08 <icmp_input+0x1fc>)
 800f906:	4841      	ldr	r0, [pc, #260]	; (800fa0c <icmp_input+0x200>)
 800f908:	f002 f9d6 	bl	8011cb8 <iprintf>
          pbuf_free(r);
 800f90c:	6978      	ldr	r0, [r7, #20]
 800f90e:	f7f8 ffdd 	bl	80088cc <pbuf_free>
          goto icmperr;
 800f912:	e06c      	b.n	800f9ee <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800f914:	6879      	ldr	r1, [r7, #4]
 800f916:	6978      	ldr	r0, [r7, #20]
 800f918:	f7f9 f8f0 	bl	8008afc <pbuf_copy>
 800f91c:	4603      	mov	r3, r0
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d003      	beq.n	800f92a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800f922:	6978      	ldr	r0, [r7, #20]
 800f924:	f7f8 ffd2 	bl	80088cc <pbuf_free>
          goto icmperr;
 800f928:	e061      	b.n	800f9ee <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800f92a:	6878      	ldr	r0, [r7, #4]
 800f92c:	f7f8 ffce 	bl	80088cc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800f930:	697b      	ldr	r3, [r7, #20]
 800f932:	607b      	str	r3, [r7, #4]
 800f934:	e00f      	b.n	800f956 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800f936:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f938:	330e      	adds	r3, #14
 800f93a:	4619      	mov	r1, r3
 800f93c:	6878      	ldr	r0, [r7, #4]
 800f93e:	f7f8 ff3f 	bl	80087c0 <pbuf_remove_header>
 800f942:	4603      	mov	r3, r0
 800f944:	2b00      	cmp	r3, #0
 800f946:	d006      	beq.n	800f956 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800f948:	4b2e      	ldr	r3, [pc, #184]	; (800fa04 <icmp_input+0x1f8>)
 800f94a:	22c7      	movs	r2, #199	; 0xc7
 800f94c:	4930      	ldr	r1, [pc, #192]	; (800fa10 <icmp_input+0x204>)
 800f94e:	482f      	ldr	r0, [pc, #188]	; (800fa0c <icmp_input+0x200>)
 800f950:	f002 f9b2 	bl	8011cb8 <iprintf>
          goto icmperr;
 800f954:	e04b      	b.n	800f9ee <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	685b      	ldr	r3, [r3, #4]
 800f95a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800f95c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f95e:	4619      	mov	r1, r3
 800f960:	6878      	ldr	r0, [r7, #4]
 800f962:	f7f8 ff1d 	bl	80087a0 <pbuf_add_header>
 800f966:	4603      	mov	r3, r0
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d12b      	bne.n	800f9c4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	685b      	ldr	r3, [r3, #4]
 800f970:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800f972:	69fb      	ldr	r3, [r7, #28]
 800f974:	681a      	ldr	r2, [r3, #0]
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800f97a:	4b20      	ldr	r3, [pc, #128]	; (800f9fc <icmp_input+0x1f0>)
 800f97c:	691a      	ldr	r2, [r3, #16]
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800f982:	693b      	ldr	r3, [r7, #16]
 800f984:	2200      	movs	r2, #0
 800f986:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800f988:	693b      	ldr	r3, [r7, #16]
 800f98a:	2200      	movs	r2, #0
 800f98c:	709a      	strb	r2, [r3, #2]
 800f98e:	2200      	movs	r2, #0
 800f990:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	22ff      	movs	r2, #255	; 0xff
 800f996:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	2200      	movs	r2, #0
 800f99c:	729a      	strb	r2, [r3, #10]
 800f99e:	2200      	movs	r2, #0
 800f9a0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800f9a2:	683b      	ldr	r3, [r7, #0]
 800f9a4:	9302      	str	r3, [sp, #8]
 800f9a6:	2301      	movs	r3, #1
 800f9a8:	9301      	str	r3, [sp, #4]
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	9300      	str	r3, [sp, #0]
 800f9ae:	23ff      	movs	r3, #255	; 0xff
 800f9b0:	2200      	movs	r2, #0
 800f9b2:	69f9      	ldr	r1, [r7, #28]
 800f9b4:	6878      	ldr	r0, [r7, #4]
 800f9b6:	f000 fa75 	bl	800fea4 <ip4_output_if>
 800f9ba:	4603      	mov	r3, r0
 800f9bc:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800f9be:	e001      	b.n	800f9c4 <icmp_input+0x1b8>
      break;
 800f9c0:	bf00      	nop
 800f9c2:	e000      	b.n	800f9c6 <icmp_input+0x1ba>
      break;
 800f9c4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800f9c6:	6878      	ldr	r0, [r7, #4]
 800f9c8:	f7f8 ff80 	bl	80088cc <pbuf_free>
  return;
 800f9cc:	e013      	b.n	800f9f6 <icmp_input+0x1ea>
    goto lenerr;
 800f9ce:	bf00      	nop
 800f9d0:	e002      	b.n	800f9d8 <icmp_input+0x1cc>
    goto lenerr;
 800f9d2:	bf00      	nop
 800f9d4:	e000      	b.n	800f9d8 <icmp_input+0x1cc>
        goto lenerr;
 800f9d6:	bf00      	nop
lenerr:
  pbuf_free(p);
 800f9d8:	6878      	ldr	r0, [r7, #4]
 800f9da:	f7f8 ff77 	bl	80088cc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f9de:	e00a      	b.n	800f9f6 <icmp_input+0x1ea>
        goto icmperr;
 800f9e0:	bf00      	nop
 800f9e2:	e004      	b.n	800f9ee <icmp_input+0x1e2>
        goto icmperr;
 800f9e4:	bf00      	nop
 800f9e6:	e002      	b.n	800f9ee <icmp_input+0x1e2>
          goto icmperr;
 800f9e8:	bf00      	nop
 800f9ea:	e000      	b.n	800f9ee <icmp_input+0x1e2>
          goto icmperr;
 800f9ec:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800f9ee:	6878      	ldr	r0, [r7, #4]
 800f9f0:	f7f8 ff6c 	bl	80088cc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f9f4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800f9f6:	3728      	adds	r7, #40	; 0x28
 800f9f8:	46bd      	mov	sp, r7
 800f9fa:	bd80      	pop	{r7, pc}
 800f9fc:	2000509c 	.word	0x2000509c
 800fa00:	200050b0 	.word	0x200050b0
 800fa04:	08016238 	.word	0x08016238
 800fa08:	08016270 	.word	0x08016270
 800fa0c:	080162a8 	.word	0x080162a8
 800fa10:	080162d0 	.word	0x080162d0

0800fa14 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800fa14:	b580      	push	{r7, lr}
 800fa16:	b082      	sub	sp, #8
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]
 800fa1c:	460b      	mov	r3, r1
 800fa1e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800fa20:	78fb      	ldrb	r3, [r7, #3]
 800fa22:	461a      	mov	r2, r3
 800fa24:	2103      	movs	r1, #3
 800fa26:	6878      	ldr	r0, [r7, #4]
 800fa28:	f000 f814 	bl	800fa54 <icmp_send_response>
}
 800fa2c:	bf00      	nop
 800fa2e:	3708      	adds	r7, #8
 800fa30:	46bd      	mov	sp, r7
 800fa32:	bd80      	pop	{r7, pc}

0800fa34 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b082      	sub	sp, #8
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
 800fa3c:	460b      	mov	r3, r1
 800fa3e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800fa40:	78fb      	ldrb	r3, [r7, #3]
 800fa42:	461a      	mov	r2, r3
 800fa44:	210b      	movs	r1, #11
 800fa46:	6878      	ldr	r0, [r7, #4]
 800fa48:	f000 f804 	bl	800fa54 <icmp_send_response>
}
 800fa4c:	bf00      	nop
 800fa4e:	3708      	adds	r7, #8
 800fa50:	46bd      	mov	sp, r7
 800fa52:	bd80      	pop	{r7, pc}

0800fa54 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b08c      	sub	sp, #48	; 0x30
 800fa58:	af04      	add	r7, sp, #16
 800fa5a:	6078      	str	r0, [r7, #4]
 800fa5c:	460b      	mov	r3, r1
 800fa5e:	70fb      	strb	r3, [r7, #3]
 800fa60:	4613      	mov	r3, r2
 800fa62:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800fa64:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fa68:	2124      	movs	r1, #36	; 0x24
 800fa6a:	2022      	movs	r0, #34	; 0x22
 800fa6c:	f7f8 fc4a 	bl	8008304 <pbuf_alloc>
 800fa70:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800fa72:	69fb      	ldr	r3, [r7, #28]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d04c      	beq.n	800fb12 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800fa78:	69fb      	ldr	r3, [r7, #28]
 800fa7a:	895b      	ldrh	r3, [r3, #10]
 800fa7c:	2b23      	cmp	r3, #35	; 0x23
 800fa7e:	d806      	bhi.n	800fa8e <icmp_send_response+0x3a>
 800fa80:	4b26      	ldr	r3, [pc, #152]	; (800fb1c <icmp_send_response+0xc8>)
 800fa82:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800fa86:	4926      	ldr	r1, [pc, #152]	; (800fb20 <icmp_send_response+0xcc>)
 800fa88:	4826      	ldr	r0, [pc, #152]	; (800fb24 <icmp_send_response+0xd0>)
 800fa8a:	f002 f915 	bl	8011cb8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	685b      	ldr	r3, [r3, #4]
 800fa92:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800fa94:	69fb      	ldr	r3, [r7, #28]
 800fa96:	685b      	ldr	r3, [r3, #4]
 800fa98:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800fa9a:	697b      	ldr	r3, [r7, #20]
 800fa9c:	78fa      	ldrb	r2, [r7, #3]
 800fa9e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800faa0:	697b      	ldr	r3, [r7, #20]
 800faa2:	78ba      	ldrb	r2, [r7, #2]
 800faa4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800faa6:	697b      	ldr	r3, [r7, #20]
 800faa8:	2200      	movs	r2, #0
 800faaa:	711a      	strb	r2, [r3, #4]
 800faac:	2200      	movs	r2, #0
 800faae:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800fab0:	697b      	ldr	r3, [r7, #20]
 800fab2:	2200      	movs	r2, #0
 800fab4:	719a      	strb	r2, [r3, #6]
 800fab6:	2200      	movs	r2, #0
 800fab8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800faba:	69fb      	ldr	r3, [r7, #28]
 800fabc:	685b      	ldr	r3, [r3, #4]
 800fabe:	f103 0008 	add.w	r0, r3, #8
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	685b      	ldr	r3, [r3, #4]
 800fac6:	221c      	movs	r2, #28
 800fac8:	4619      	mov	r1, r3
 800faca:	f002 fa56 	bl	8011f7a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800face:	69bb      	ldr	r3, [r7, #24]
 800fad0:	68db      	ldr	r3, [r3, #12]
 800fad2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800fad4:	f107 030c 	add.w	r3, r7, #12
 800fad8:	4618      	mov	r0, r3
 800fada:	f000 f825 	bl	800fb28 <ip4_route>
 800fade:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800fae0:	693b      	ldr	r3, [r7, #16]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d011      	beq.n	800fb0a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800fae6:	697b      	ldr	r3, [r7, #20]
 800fae8:	2200      	movs	r2, #0
 800faea:	709a      	strb	r2, [r3, #2]
 800faec:	2200      	movs	r2, #0
 800faee:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800faf0:	f107 020c 	add.w	r2, r7, #12
 800faf4:	693b      	ldr	r3, [r7, #16]
 800faf6:	9302      	str	r3, [sp, #8]
 800faf8:	2301      	movs	r3, #1
 800fafa:	9301      	str	r3, [sp, #4]
 800fafc:	2300      	movs	r3, #0
 800fafe:	9300      	str	r3, [sp, #0]
 800fb00:	23ff      	movs	r3, #255	; 0xff
 800fb02:	2100      	movs	r1, #0
 800fb04:	69f8      	ldr	r0, [r7, #28]
 800fb06:	f000 f9cd 	bl	800fea4 <ip4_output_if>
  }
  pbuf_free(q);
 800fb0a:	69f8      	ldr	r0, [r7, #28]
 800fb0c:	f7f8 fede 	bl	80088cc <pbuf_free>
 800fb10:	e000      	b.n	800fb14 <icmp_send_response+0xc0>
    return;
 800fb12:	bf00      	nop
}
 800fb14:	3720      	adds	r7, #32
 800fb16:	46bd      	mov	sp, r7
 800fb18:	bd80      	pop	{r7, pc}
 800fb1a:	bf00      	nop
 800fb1c:	08016238 	.word	0x08016238
 800fb20:	08016304 	.word	0x08016304
 800fb24:	080162a8 	.word	0x080162a8

0800fb28 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800fb28:	b480      	push	{r7}
 800fb2a:	b085      	sub	sp, #20
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800fb30:	4b33      	ldr	r3, [pc, #204]	; (800fc00 <ip4_route+0xd8>)
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	60fb      	str	r3, [r7, #12]
 800fb36:	e036      	b.n	800fba6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fb3e:	f003 0301 	and.w	r3, r3, #1
 800fb42:	b2db      	uxtb	r3, r3
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d02b      	beq.n	800fba0 <ip4_route+0x78>
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fb4e:	089b      	lsrs	r3, r3, #2
 800fb50:	f003 0301 	and.w	r3, r3, #1
 800fb54:	b2db      	uxtb	r3, r3
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d022      	beq.n	800fba0 <ip4_route+0x78>
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	3304      	adds	r3, #4
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d01d      	beq.n	800fba0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	681a      	ldr	r2, [r3, #0]
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	3304      	adds	r3, #4
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	405a      	eors	r2, r3
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	3308      	adds	r3, #8
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	4013      	ands	r3, r2
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d101      	bne.n	800fb80 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	e038      	b.n	800fbf2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fb86:	f003 0302 	and.w	r3, r3, #2
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d108      	bne.n	800fba0 <ip4_route+0x78>
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	681a      	ldr	r2, [r3, #0]
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	330c      	adds	r3, #12
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	429a      	cmp	r2, r3
 800fb9a:	d101      	bne.n	800fba0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	e028      	b.n	800fbf2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	60fb      	str	r3, [r7, #12]
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d1c5      	bne.n	800fb38 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800fbac:	4b15      	ldr	r3, [pc, #84]	; (800fc04 <ip4_route+0xdc>)
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d01a      	beq.n	800fbea <ip4_route+0xc2>
 800fbb4:	4b13      	ldr	r3, [pc, #76]	; (800fc04 <ip4_route+0xdc>)
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fbbc:	f003 0301 	and.w	r3, r3, #1
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d012      	beq.n	800fbea <ip4_route+0xc2>
 800fbc4:	4b0f      	ldr	r3, [pc, #60]	; (800fc04 <ip4_route+0xdc>)
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fbcc:	f003 0304 	and.w	r3, r3, #4
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d00a      	beq.n	800fbea <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800fbd4:	4b0b      	ldr	r3, [pc, #44]	; (800fc04 <ip4_route+0xdc>)
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	3304      	adds	r3, #4
 800fbda:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d004      	beq.n	800fbea <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	b2db      	uxtb	r3, r3
 800fbe6:	2b7f      	cmp	r3, #127	; 0x7f
 800fbe8:	d101      	bne.n	800fbee <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800fbea:	2300      	movs	r3, #0
 800fbec:	e001      	b.n	800fbf2 <ip4_route+0xca>
  }

  return netif_default;
 800fbee:	4b05      	ldr	r3, [pc, #20]	; (800fc04 <ip4_route+0xdc>)
 800fbf0:	681b      	ldr	r3, [r3, #0]
}
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	3714      	adds	r7, #20
 800fbf6:	46bd      	mov	sp, r7
 800fbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfc:	4770      	bx	lr
 800fbfe:	bf00      	nop
 800fc00:	2000a7c0 	.word	0x2000a7c0
 800fc04:	2000a7c4 	.word	0x2000a7c4

0800fc08 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b082      	sub	sp, #8
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fc16:	f003 0301 	and.w	r3, r3, #1
 800fc1a:	b2db      	uxtb	r3, r3
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d016      	beq.n	800fc4e <ip4_input_accept+0x46>
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	3304      	adds	r3, #4
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d011      	beq.n	800fc4e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800fc2a:	4b0b      	ldr	r3, [pc, #44]	; (800fc58 <ip4_input_accept+0x50>)
 800fc2c:	695a      	ldr	r2, [r3, #20]
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	3304      	adds	r3, #4
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	429a      	cmp	r2, r3
 800fc36:	d008      	beq.n	800fc4a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800fc38:	4b07      	ldr	r3, [pc, #28]	; (800fc58 <ip4_input_accept+0x50>)
 800fc3a:	695b      	ldr	r3, [r3, #20]
 800fc3c:	6879      	ldr	r1, [r7, #4]
 800fc3e:	4618      	mov	r0, r3
 800fc40:	f000 fa08 	bl	8010054 <ip4_addr_isbroadcast_u32>
 800fc44:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d001      	beq.n	800fc4e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800fc4a:	2301      	movs	r3, #1
 800fc4c:	e000      	b.n	800fc50 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800fc4e:	2300      	movs	r3, #0
}
 800fc50:	4618      	mov	r0, r3
 800fc52:	3708      	adds	r7, #8
 800fc54:	46bd      	mov	sp, r7
 800fc56:	bd80      	pop	{r7, pc}
 800fc58:	2000509c 	.word	0x2000509c

0800fc5c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800fc5c:	b580      	push	{r7, lr}
 800fc5e:	b086      	sub	sp, #24
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	6078      	str	r0, [r7, #4]
 800fc64:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	685b      	ldr	r3, [r3, #4]
 800fc6a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800fc6c:	697b      	ldr	r3, [r7, #20]
 800fc6e:	781b      	ldrb	r3, [r3, #0]
 800fc70:	091b      	lsrs	r3, r3, #4
 800fc72:	b2db      	uxtb	r3, r3
 800fc74:	2b04      	cmp	r3, #4
 800fc76:	d004      	beq.n	800fc82 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800fc78:	6878      	ldr	r0, [r7, #4]
 800fc7a:	f7f8 fe27 	bl	80088cc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800fc7e:	2300      	movs	r3, #0
 800fc80:	e107      	b.n	800fe92 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800fc82:	697b      	ldr	r3, [r7, #20]
 800fc84:	781b      	ldrb	r3, [r3, #0]
 800fc86:	f003 030f 	and.w	r3, r3, #15
 800fc8a:	b2db      	uxtb	r3, r3
 800fc8c:	009b      	lsls	r3, r3, #2
 800fc8e:	b2db      	uxtb	r3, r3
 800fc90:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800fc92:	697b      	ldr	r3, [r7, #20]
 800fc94:	885b      	ldrh	r3, [r3, #2]
 800fc96:	b29b      	uxth	r3, r3
 800fc98:	4618      	mov	r0, r3
 800fc9a:	f7f7 fab9 	bl	8007210 <lwip_htons>
 800fc9e:	4603      	mov	r3, r0
 800fca0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	891b      	ldrh	r3, [r3, #8]
 800fca6:	89ba      	ldrh	r2, [r7, #12]
 800fca8:	429a      	cmp	r2, r3
 800fcaa:	d204      	bcs.n	800fcb6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800fcac:	89bb      	ldrh	r3, [r7, #12]
 800fcae:	4619      	mov	r1, r3
 800fcb0:	6878      	ldr	r0, [r7, #4]
 800fcb2:	f7f8 fc85 	bl	80085c0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	895b      	ldrh	r3, [r3, #10]
 800fcba:	89fa      	ldrh	r2, [r7, #14]
 800fcbc:	429a      	cmp	r2, r3
 800fcbe:	d807      	bhi.n	800fcd0 <ip4_input+0x74>
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	891b      	ldrh	r3, [r3, #8]
 800fcc4:	89ba      	ldrh	r2, [r7, #12]
 800fcc6:	429a      	cmp	r2, r3
 800fcc8:	d802      	bhi.n	800fcd0 <ip4_input+0x74>
 800fcca:	89fb      	ldrh	r3, [r7, #14]
 800fccc:	2b13      	cmp	r3, #19
 800fcce:	d804      	bhi.n	800fcda <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800fcd0:	6878      	ldr	r0, [r7, #4]
 800fcd2:	f7f8 fdfb 	bl	80088cc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800fcd6:	2300      	movs	r3, #0
 800fcd8:	e0db      	b.n	800fe92 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800fcda:	697b      	ldr	r3, [r7, #20]
 800fcdc:	691b      	ldr	r3, [r3, #16]
 800fcde:	4a6f      	ldr	r2, [pc, #444]	; (800fe9c <ip4_input+0x240>)
 800fce0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800fce2:	697b      	ldr	r3, [r7, #20]
 800fce4:	68db      	ldr	r3, [r3, #12]
 800fce6:	4a6d      	ldr	r2, [pc, #436]	; (800fe9c <ip4_input+0x240>)
 800fce8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fcea:	4b6c      	ldr	r3, [pc, #432]	; (800fe9c <ip4_input+0x240>)
 800fcec:	695b      	ldr	r3, [r3, #20]
 800fcee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fcf2:	2be0      	cmp	r3, #224	; 0xe0
 800fcf4:	d112      	bne.n	800fd1c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800fcf6:	683b      	ldr	r3, [r7, #0]
 800fcf8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fcfc:	f003 0301 	and.w	r3, r3, #1
 800fd00:	b2db      	uxtb	r3, r3
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d007      	beq.n	800fd16 <ip4_input+0xba>
 800fd06:	683b      	ldr	r3, [r7, #0]
 800fd08:	3304      	adds	r3, #4
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d002      	beq.n	800fd16 <ip4_input+0xba>
      netif = inp;
 800fd10:	683b      	ldr	r3, [r7, #0]
 800fd12:	613b      	str	r3, [r7, #16]
 800fd14:	e02a      	b.n	800fd6c <ip4_input+0x110>
    } else {
      netif = NULL;
 800fd16:	2300      	movs	r3, #0
 800fd18:	613b      	str	r3, [r7, #16]
 800fd1a:	e027      	b.n	800fd6c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800fd1c:	6838      	ldr	r0, [r7, #0]
 800fd1e:	f7ff ff73 	bl	800fc08 <ip4_input_accept>
 800fd22:	4603      	mov	r3, r0
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d002      	beq.n	800fd2e <ip4_input+0xd2>
      netif = inp;
 800fd28:	683b      	ldr	r3, [r7, #0]
 800fd2a:	613b      	str	r3, [r7, #16]
 800fd2c:	e01e      	b.n	800fd6c <ip4_input+0x110>
    } else {
      netif = NULL;
 800fd2e:	2300      	movs	r3, #0
 800fd30:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800fd32:	4b5a      	ldr	r3, [pc, #360]	; (800fe9c <ip4_input+0x240>)
 800fd34:	695b      	ldr	r3, [r3, #20]
 800fd36:	b2db      	uxtb	r3, r3
 800fd38:	2b7f      	cmp	r3, #127	; 0x7f
 800fd3a:	d017      	beq.n	800fd6c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800fd3c:	4b58      	ldr	r3, [pc, #352]	; (800fea0 <ip4_input+0x244>)
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	613b      	str	r3, [r7, #16]
 800fd42:	e00e      	b.n	800fd62 <ip4_input+0x106>
          if (netif == inp) {
 800fd44:	693a      	ldr	r2, [r7, #16]
 800fd46:	683b      	ldr	r3, [r7, #0]
 800fd48:	429a      	cmp	r2, r3
 800fd4a:	d006      	beq.n	800fd5a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800fd4c:	6938      	ldr	r0, [r7, #16]
 800fd4e:	f7ff ff5b 	bl	800fc08 <ip4_input_accept>
 800fd52:	4603      	mov	r3, r0
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d108      	bne.n	800fd6a <ip4_input+0x10e>
 800fd58:	e000      	b.n	800fd5c <ip4_input+0x100>
            continue;
 800fd5a:	bf00      	nop
        NETIF_FOREACH(netif) {
 800fd5c:	693b      	ldr	r3, [r7, #16]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	613b      	str	r3, [r7, #16]
 800fd62:	693b      	ldr	r3, [r7, #16]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d1ed      	bne.n	800fd44 <ip4_input+0xe8>
 800fd68:	e000      	b.n	800fd6c <ip4_input+0x110>
            break;
 800fd6a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800fd6c:	4b4b      	ldr	r3, [pc, #300]	; (800fe9c <ip4_input+0x240>)
 800fd6e:	691b      	ldr	r3, [r3, #16]
 800fd70:	6839      	ldr	r1, [r7, #0]
 800fd72:	4618      	mov	r0, r3
 800fd74:	f000 f96e 	bl	8010054 <ip4_addr_isbroadcast_u32>
 800fd78:	4603      	mov	r3, r0
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d105      	bne.n	800fd8a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800fd7e:	4b47      	ldr	r3, [pc, #284]	; (800fe9c <ip4_input+0x240>)
 800fd80:	691b      	ldr	r3, [r3, #16]
 800fd82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800fd86:	2be0      	cmp	r3, #224	; 0xe0
 800fd88:	d104      	bne.n	800fd94 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800fd8a:	6878      	ldr	r0, [r7, #4]
 800fd8c:	f7f8 fd9e 	bl	80088cc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800fd90:	2300      	movs	r3, #0
 800fd92:	e07e      	b.n	800fe92 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800fd94:	693b      	ldr	r3, [r7, #16]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d104      	bne.n	800fda4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800fd9a:	6878      	ldr	r0, [r7, #4]
 800fd9c:	f7f8 fd96 	bl	80088cc <pbuf_free>
    return ERR_OK;
 800fda0:	2300      	movs	r3, #0
 800fda2:	e076      	b.n	800fe92 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800fda4:	697b      	ldr	r3, [r7, #20]
 800fda6:	88db      	ldrh	r3, [r3, #6]
 800fda8:	b29b      	uxth	r3, r3
 800fdaa:	461a      	mov	r2, r3
 800fdac:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800fdb0:	4013      	ands	r3, r2
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d00b      	beq.n	800fdce <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800fdb6:	6878      	ldr	r0, [r7, #4]
 800fdb8:	f000 fc92 	bl	80106e0 <ip4_reass>
 800fdbc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d101      	bne.n	800fdc8 <ip4_input+0x16c>
      return ERR_OK;
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	e064      	b.n	800fe92 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	685b      	ldr	r3, [r3, #4]
 800fdcc:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800fdce:	4a33      	ldr	r2, [pc, #204]	; (800fe9c <ip4_input+0x240>)
 800fdd0:	693b      	ldr	r3, [r7, #16]
 800fdd2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800fdd4:	4a31      	ldr	r2, [pc, #196]	; (800fe9c <ip4_input+0x240>)
 800fdd6:	683b      	ldr	r3, [r7, #0]
 800fdd8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800fdda:	4a30      	ldr	r2, [pc, #192]	; (800fe9c <ip4_input+0x240>)
 800fddc:	697b      	ldr	r3, [r7, #20]
 800fdde:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800fde0:	697b      	ldr	r3, [r7, #20]
 800fde2:	781b      	ldrb	r3, [r3, #0]
 800fde4:	f003 030f 	and.w	r3, r3, #15
 800fde8:	b2db      	uxtb	r3, r3
 800fdea:	009b      	lsls	r3, r3, #2
 800fdec:	b2db      	uxtb	r3, r3
 800fdee:	b29a      	uxth	r2, r3
 800fdf0:	4b2a      	ldr	r3, [pc, #168]	; (800fe9c <ip4_input+0x240>)
 800fdf2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800fdf4:	89fb      	ldrh	r3, [r7, #14]
 800fdf6:	4619      	mov	r1, r3
 800fdf8:	6878      	ldr	r0, [r7, #4]
 800fdfa:	f7f8 fce1 	bl	80087c0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800fdfe:	697b      	ldr	r3, [r7, #20]
 800fe00:	7a5b      	ldrb	r3, [r3, #9]
 800fe02:	2b11      	cmp	r3, #17
 800fe04:	d006      	beq.n	800fe14 <ip4_input+0x1b8>
 800fe06:	2b11      	cmp	r3, #17
 800fe08:	dc13      	bgt.n	800fe32 <ip4_input+0x1d6>
 800fe0a:	2b01      	cmp	r3, #1
 800fe0c:	d00c      	beq.n	800fe28 <ip4_input+0x1cc>
 800fe0e:	2b06      	cmp	r3, #6
 800fe10:	d005      	beq.n	800fe1e <ip4_input+0x1c2>
 800fe12:	e00e      	b.n	800fe32 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800fe14:	6839      	ldr	r1, [r7, #0]
 800fe16:	6878      	ldr	r0, [r7, #4]
 800fe18:	f7fe fb3a 	bl	800e490 <udp_input>
        break;
 800fe1c:	e026      	b.n	800fe6c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800fe1e:	6839      	ldr	r1, [r7, #0]
 800fe20:	6878      	ldr	r0, [r7, #4]
 800fe22:	f7fa fb7b 	bl	800a51c <tcp_input>
        break;
 800fe26:	e021      	b.n	800fe6c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800fe28:	6839      	ldr	r1, [r7, #0]
 800fe2a:	6878      	ldr	r0, [r7, #4]
 800fe2c:	f7ff fcee 	bl	800f80c <icmp_input>
        break;
 800fe30:	e01c      	b.n	800fe6c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800fe32:	4b1a      	ldr	r3, [pc, #104]	; (800fe9c <ip4_input+0x240>)
 800fe34:	695b      	ldr	r3, [r3, #20]
 800fe36:	6939      	ldr	r1, [r7, #16]
 800fe38:	4618      	mov	r0, r3
 800fe3a:	f000 f90b 	bl	8010054 <ip4_addr_isbroadcast_u32>
 800fe3e:	4603      	mov	r3, r0
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d10f      	bne.n	800fe64 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fe44:	4b15      	ldr	r3, [pc, #84]	; (800fe9c <ip4_input+0x240>)
 800fe46:	695b      	ldr	r3, [r3, #20]
 800fe48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800fe4c:	2be0      	cmp	r3, #224	; 0xe0
 800fe4e:	d009      	beq.n	800fe64 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800fe50:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fe54:	4619      	mov	r1, r3
 800fe56:	6878      	ldr	r0, [r7, #4]
 800fe58:	f7f8 fd25 	bl	80088a6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800fe5c:	2102      	movs	r1, #2
 800fe5e:	6878      	ldr	r0, [r7, #4]
 800fe60:	f7ff fdd8 	bl	800fa14 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800fe64:	6878      	ldr	r0, [r7, #4]
 800fe66:	f7f8 fd31 	bl	80088cc <pbuf_free>
        break;
 800fe6a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800fe6c:	4b0b      	ldr	r3, [pc, #44]	; (800fe9c <ip4_input+0x240>)
 800fe6e:	2200      	movs	r2, #0
 800fe70:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800fe72:	4b0a      	ldr	r3, [pc, #40]	; (800fe9c <ip4_input+0x240>)
 800fe74:	2200      	movs	r2, #0
 800fe76:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800fe78:	4b08      	ldr	r3, [pc, #32]	; (800fe9c <ip4_input+0x240>)
 800fe7a:	2200      	movs	r2, #0
 800fe7c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800fe7e:	4b07      	ldr	r3, [pc, #28]	; (800fe9c <ip4_input+0x240>)
 800fe80:	2200      	movs	r2, #0
 800fe82:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800fe84:	4b05      	ldr	r3, [pc, #20]	; (800fe9c <ip4_input+0x240>)
 800fe86:	2200      	movs	r2, #0
 800fe88:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800fe8a:	4b04      	ldr	r3, [pc, #16]	; (800fe9c <ip4_input+0x240>)
 800fe8c:	2200      	movs	r2, #0
 800fe8e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800fe90:	2300      	movs	r3, #0
}
 800fe92:	4618      	mov	r0, r3
 800fe94:	3718      	adds	r7, #24
 800fe96:	46bd      	mov	sp, r7
 800fe98:	bd80      	pop	{r7, pc}
 800fe9a:	bf00      	nop
 800fe9c:	2000509c 	.word	0x2000509c
 800fea0:	2000a7c0 	.word	0x2000a7c0

0800fea4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800fea4:	b580      	push	{r7, lr}
 800fea6:	b08a      	sub	sp, #40	; 0x28
 800fea8:	af04      	add	r7, sp, #16
 800feaa:	60f8      	str	r0, [r7, #12]
 800feac:	60b9      	str	r1, [r7, #8]
 800feae:	607a      	str	r2, [r7, #4]
 800feb0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800feb2:	68bb      	ldr	r3, [r7, #8]
 800feb4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d009      	beq.n	800fed0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800febc:	68bb      	ldr	r3, [r7, #8]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d003      	beq.n	800feca <ip4_output_if+0x26>
 800fec2:	68bb      	ldr	r3, [r7, #8]
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d102      	bne.n	800fed0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800feca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fecc:	3304      	adds	r3, #4
 800fece:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800fed0:	78fa      	ldrb	r2, [r7, #3]
 800fed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fed4:	9302      	str	r3, [sp, #8]
 800fed6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800feda:	9301      	str	r3, [sp, #4]
 800fedc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fee0:	9300      	str	r3, [sp, #0]
 800fee2:	4613      	mov	r3, r2
 800fee4:	687a      	ldr	r2, [r7, #4]
 800fee6:	6979      	ldr	r1, [r7, #20]
 800fee8:	68f8      	ldr	r0, [r7, #12]
 800feea:	f000 f805 	bl	800fef8 <ip4_output_if_src>
 800feee:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800fef0:	4618      	mov	r0, r3
 800fef2:	3718      	adds	r7, #24
 800fef4:	46bd      	mov	sp, r7
 800fef6:	bd80      	pop	{r7, pc}

0800fef8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800fef8:	b580      	push	{r7, lr}
 800fefa:	b088      	sub	sp, #32
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	60f8      	str	r0, [r7, #12]
 800ff00:	60b9      	str	r1, [r7, #8]
 800ff02:	607a      	str	r2, [r7, #4]
 800ff04:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	7b9b      	ldrb	r3, [r3, #14]
 800ff0a:	2b01      	cmp	r3, #1
 800ff0c:	d006      	beq.n	800ff1c <ip4_output_if_src+0x24>
 800ff0e:	4b4b      	ldr	r3, [pc, #300]	; (801003c <ip4_output_if_src+0x144>)
 800ff10:	f44f 7255 	mov.w	r2, #852	; 0x354
 800ff14:	494a      	ldr	r1, [pc, #296]	; (8010040 <ip4_output_if_src+0x148>)
 800ff16:	484b      	ldr	r0, [pc, #300]	; (8010044 <ip4_output_if_src+0x14c>)
 800ff18:	f001 fece 	bl	8011cb8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d060      	beq.n	800ffe4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800ff22:	2314      	movs	r3, #20
 800ff24:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800ff26:	2114      	movs	r1, #20
 800ff28:	68f8      	ldr	r0, [r7, #12]
 800ff2a:	f7f8 fc39 	bl	80087a0 <pbuf_add_header>
 800ff2e:	4603      	mov	r3, r0
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d002      	beq.n	800ff3a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800ff34:	f06f 0301 	mvn.w	r3, #1
 800ff38:	e07c      	b.n	8010034 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	685b      	ldr	r3, [r3, #4]
 800ff3e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	895b      	ldrh	r3, [r3, #10]
 800ff44:	2b13      	cmp	r3, #19
 800ff46:	d806      	bhi.n	800ff56 <ip4_output_if_src+0x5e>
 800ff48:	4b3c      	ldr	r3, [pc, #240]	; (801003c <ip4_output_if_src+0x144>)
 800ff4a:	f44f 7262 	mov.w	r2, #904	; 0x388
 800ff4e:	493e      	ldr	r1, [pc, #248]	; (8010048 <ip4_output_if_src+0x150>)
 800ff50:	483c      	ldr	r0, [pc, #240]	; (8010044 <ip4_output_if_src+0x14c>)
 800ff52:	f001 feb1 	bl	8011cb8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800ff56:	69fb      	ldr	r3, [r7, #28]
 800ff58:	78fa      	ldrb	r2, [r7, #3]
 800ff5a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800ff5c:	69fb      	ldr	r3, [r7, #28]
 800ff5e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800ff62:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	681a      	ldr	r2, [r3, #0]
 800ff68:	69fb      	ldr	r3, [r7, #28]
 800ff6a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800ff6c:	8b7b      	ldrh	r3, [r7, #26]
 800ff6e:	089b      	lsrs	r3, r3, #2
 800ff70:	b29b      	uxth	r3, r3
 800ff72:	b2db      	uxtb	r3, r3
 800ff74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff78:	b2da      	uxtb	r2, r3
 800ff7a:	69fb      	ldr	r3, [r7, #28]
 800ff7c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800ff7e:	69fb      	ldr	r3, [r7, #28]
 800ff80:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ff84:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	891b      	ldrh	r3, [r3, #8]
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	f7f7 f940 	bl	8007210 <lwip_htons>
 800ff90:	4603      	mov	r3, r0
 800ff92:	461a      	mov	r2, r3
 800ff94:	69fb      	ldr	r3, [r7, #28]
 800ff96:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800ff98:	69fb      	ldr	r3, [r7, #28]
 800ff9a:	2200      	movs	r2, #0
 800ff9c:	719a      	strb	r2, [r3, #6]
 800ff9e:	2200      	movs	r2, #0
 800ffa0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800ffa2:	4b2a      	ldr	r3, [pc, #168]	; (801004c <ip4_output_if_src+0x154>)
 800ffa4:	881b      	ldrh	r3, [r3, #0]
 800ffa6:	4618      	mov	r0, r3
 800ffa8:	f7f7 f932 	bl	8007210 <lwip_htons>
 800ffac:	4603      	mov	r3, r0
 800ffae:	461a      	mov	r2, r3
 800ffb0:	69fb      	ldr	r3, [r7, #28]
 800ffb2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800ffb4:	4b25      	ldr	r3, [pc, #148]	; (801004c <ip4_output_if_src+0x154>)
 800ffb6:	881b      	ldrh	r3, [r3, #0]
 800ffb8:	3301      	adds	r3, #1
 800ffba:	b29a      	uxth	r2, r3
 800ffbc:	4b23      	ldr	r3, [pc, #140]	; (801004c <ip4_output_if_src+0x154>)
 800ffbe:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800ffc0:	68bb      	ldr	r3, [r7, #8]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d104      	bne.n	800ffd0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800ffc6:	4b22      	ldr	r3, [pc, #136]	; (8010050 <ip4_output_if_src+0x158>)
 800ffc8:	681a      	ldr	r2, [r3, #0]
 800ffca:	69fb      	ldr	r3, [r7, #28]
 800ffcc:	60da      	str	r2, [r3, #12]
 800ffce:	e003      	b.n	800ffd8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800ffd0:	68bb      	ldr	r3, [r7, #8]
 800ffd2:	681a      	ldr	r2, [r3, #0]
 800ffd4:	69fb      	ldr	r3, [r7, #28]
 800ffd6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800ffd8:	69fb      	ldr	r3, [r7, #28]
 800ffda:	2200      	movs	r2, #0
 800ffdc:	729a      	strb	r2, [r3, #10]
 800ffde:	2200      	movs	r2, #0
 800ffe0:	72da      	strb	r2, [r3, #11]
 800ffe2:	e00f      	b.n	8010004 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	895b      	ldrh	r3, [r3, #10]
 800ffe8:	2b13      	cmp	r3, #19
 800ffea:	d802      	bhi.n	800fff2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800ffec:	f06f 0301 	mvn.w	r3, #1
 800fff0:	e020      	b.n	8010034 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	685b      	ldr	r3, [r3, #4]
 800fff6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800fff8:	69fb      	ldr	r3, [r7, #28]
 800fffa:	691b      	ldr	r3, [r3, #16]
 800fffc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800fffe:	f107 0314 	add.w	r3, r7, #20
 8010002:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8010004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010006:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010008:	2b00      	cmp	r3, #0
 801000a:	d00c      	beq.n	8010026 <ip4_output_if_src+0x12e>
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	891a      	ldrh	r2, [r3, #8]
 8010010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010012:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010014:	429a      	cmp	r2, r3
 8010016:	d906      	bls.n	8010026 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8010018:	687a      	ldr	r2, [r7, #4]
 801001a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801001c:	68f8      	ldr	r0, [r7, #12]
 801001e:	f000 fd53 	bl	8010ac8 <ip4_frag>
 8010022:	4603      	mov	r3, r0
 8010024:	e006      	b.n	8010034 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8010026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010028:	695b      	ldr	r3, [r3, #20]
 801002a:	687a      	ldr	r2, [r7, #4]
 801002c:	68f9      	ldr	r1, [r7, #12]
 801002e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010030:	4798      	blx	r3
 8010032:	4603      	mov	r3, r0
}
 8010034:	4618      	mov	r0, r3
 8010036:	3720      	adds	r7, #32
 8010038:	46bd      	mov	sp, r7
 801003a:	bd80      	pop	{r7, pc}
 801003c:	08016330 	.word	0x08016330
 8010040:	08016364 	.word	0x08016364
 8010044:	08016370 	.word	0x08016370
 8010048:	08016398 	.word	0x08016398
 801004c:	2000a91e 	.word	0x2000a91e
 8010050:	08016778 	.word	0x08016778

08010054 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8010054:	b480      	push	{r7}
 8010056:	b085      	sub	sp, #20
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
 801005c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010068:	d002      	beq.n	8010070 <ip4_addr_isbroadcast_u32+0x1c>
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	2b00      	cmp	r3, #0
 801006e:	d101      	bne.n	8010074 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8010070:	2301      	movs	r3, #1
 8010072:	e02a      	b.n	80100ca <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8010074:	683b      	ldr	r3, [r7, #0]
 8010076:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801007a:	f003 0302 	and.w	r3, r3, #2
 801007e:	2b00      	cmp	r3, #0
 8010080:	d101      	bne.n	8010086 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8010082:	2300      	movs	r3, #0
 8010084:	e021      	b.n	80100ca <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8010086:	683b      	ldr	r3, [r7, #0]
 8010088:	3304      	adds	r3, #4
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	687a      	ldr	r2, [r7, #4]
 801008e:	429a      	cmp	r2, r3
 8010090:	d101      	bne.n	8010096 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8010092:	2300      	movs	r3, #0
 8010094:	e019      	b.n	80100ca <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8010096:	68fa      	ldr	r2, [r7, #12]
 8010098:	683b      	ldr	r3, [r7, #0]
 801009a:	3304      	adds	r3, #4
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	405a      	eors	r2, r3
 80100a0:	683b      	ldr	r3, [r7, #0]
 80100a2:	3308      	adds	r3, #8
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	4013      	ands	r3, r2
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d10d      	bne.n	80100c8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80100ac:	683b      	ldr	r3, [r7, #0]
 80100ae:	3308      	adds	r3, #8
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	43da      	mvns	r2, r3
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80100b8:	683b      	ldr	r3, [r7, #0]
 80100ba:	3308      	adds	r3, #8
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80100c0:	429a      	cmp	r2, r3
 80100c2:	d101      	bne.n	80100c8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80100c4:	2301      	movs	r3, #1
 80100c6:	e000      	b.n	80100ca <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80100c8:	2300      	movs	r3, #0
  }
}
 80100ca:	4618      	mov	r0, r3
 80100cc:	3714      	adds	r7, #20
 80100ce:	46bd      	mov	sp, r7
 80100d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d4:	4770      	bx	lr
	...

080100d8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b084      	sub	sp, #16
 80100dc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80100de:	2300      	movs	r3, #0
 80100e0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80100e2:	4b12      	ldr	r3, [pc, #72]	; (801012c <ip_reass_tmr+0x54>)
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80100e8:	e018      	b.n	801011c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	7fdb      	ldrb	r3, [r3, #31]
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d00b      	beq.n	801010a <ip_reass_tmr+0x32>
      r->timer--;
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	7fdb      	ldrb	r3, [r3, #31]
 80100f6:	3b01      	subs	r3, #1
 80100f8:	b2da      	uxtb	r2, r3
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	60fb      	str	r3, [r7, #12]
 8010108:	e008      	b.n	801011c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8010114:	68b9      	ldr	r1, [r7, #8]
 8010116:	6878      	ldr	r0, [r7, #4]
 8010118:	f000 f80a 	bl	8010130 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	2b00      	cmp	r3, #0
 8010120:	d1e3      	bne.n	80100ea <ip_reass_tmr+0x12>
    }
  }
}
 8010122:	bf00      	nop
 8010124:	bf00      	nop
 8010126:	3710      	adds	r7, #16
 8010128:	46bd      	mov	sp, r7
 801012a:	bd80      	pop	{r7, pc}
 801012c:	2000a920 	.word	0x2000a920

08010130 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b088      	sub	sp, #32
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
 8010138:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801013a:	2300      	movs	r3, #0
 801013c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801013e:	683a      	ldr	r2, [r7, #0]
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	429a      	cmp	r2, r3
 8010144:	d105      	bne.n	8010152 <ip_reass_free_complete_datagram+0x22>
 8010146:	4b45      	ldr	r3, [pc, #276]	; (801025c <ip_reass_free_complete_datagram+0x12c>)
 8010148:	22ab      	movs	r2, #171	; 0xab
 801014a:	4945      	ldr	r1, [pc, #276]	; (8010260 <ip_reass_free_complete_datagram+0x130>)
 801014c:	4845      	ldr	r0, [pc, #276]	; (8010264 <ip_reass_free_complete_datagram+0x134>)
 801014e:	f001 fdb3 	bl	8011cb8 <iprintf>
  if (prev != NULL) {
 8010152:	683b      	ldr	r3, [r7, #0]
 8010154:	2b00      	cmp	r3, #0
 8010156:	d00a      	beq.n	801016e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8010158:	683b      	ldr	r3, [r7, #0]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	687a      	ldr	r2, [r7, #4]
 801015e:	429a      	cmp	r2, r3
 8010160:	d005      	beq.n	801016e <ip_reass_free_complete_datagram+0x3e>
 8010162:	4b3e      	ldr	r3, [pc, #248]	; (801025c <ip_reass_free_complete_datagram+0x12c>)
 8010164:	22ad      	movs	r2, #173	; 0xad
 8010166:	4940      	ldr	r1, [pc, #256]	; (8010268 <ip_reass_free_complete_datagram+0x138>)
 8010168:	483e      	ldr	r0, [pc, #248]	; (8010264 <ip_reass_free_complete_datagram+0x134>)
 801016a:	f001 fda5 	bl	8011cb8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	685b      	ldr	r3, [r3, #4]
 8010172:	685b      	ldr	r3, [r3, #4]
 8010174:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8010176:	697b      	ldr	r3, [r7, #20]
 8010178:	889b      	ldrh	r3, [r3, #4]
 801017a:	b29b      	uxth	r3, r3
 801017c:	2b00      	cmp	r3, #0
 801017e:	d12a      	bne.n	80101d6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	685b      	ldr	r3, [r3, #4]
 8010184:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8010186:	697b      	ldr	r3, [r7, #20]
 8010188:	681a      	ldr	r2, [r3, #0]
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801018e:	69bb      	ldr	r3, [r7, #24]
 8010190:	6858      	ldr	r0, [r3, #4]
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	3308      	adds	r3, #8
 8010196:	2214      	movs	r2, #20
 8010198:	4619      	mov	r1, r3
 801019a:	f001 feee 	bl	8011f7a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801019e:	2101      	movs	r1, #1
 80101a0:	69b8      	ldr	r0, [r7, #24]
 80101a2:	f7ff fc47 	bl	800fa34 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80101a6:	69b8      	ldr	r0, [r7, #24]
 80101a8:	f7f8 fc18 	bl	80089dc <pbuf_clen>
 80101ac:	4603      	mov	r3, r0
 80101ae:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80101b0:	8bfa      	ldrh	r2, [r7, #30]
 80101b2:	8a7b      	ldrh	r3, [r7, #18]
 80101b4:	4413      	add	r3, r2
 80101b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80101ba:	db05      	blt.n	80101c8 <ip_reass_free_complete_datagram+0x98>
 80101bc:	4b27      	ldr	r3, [pc, #156]	; (801025c <ip_reass_free_complete_datagram+0x12c>)
 80101be:	22bc      	movs	r2, #188	; 0xbc
 80101c0:	492a      	ldr	r1, [pc, #168]	; (801026c <ip_reass_free_complete_datagram+0x13c>)
 80101c2:	4828      	ldr	r0, [pc, #160]	; (8010264 <ip_reass_free_complete_datagram+0x134>)
 80101c4:	f001 fd78 	bl	8011cb8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80101c8:	8bfa      	ldrh	r2, [r7, #30]
 80101ca:	8a7b      	ldrh	r3, [r7, #18]
 80101cc:	4413      	add	r3, r2
 80101ce:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80101d0:	69b8      	ldr	r0, [r7, #24]
 80101d2:	f7f8 fb7b 	bl	80088cc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	685b      	ldr	r3, [r3, #4]
 80101da:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80101dc:	e01f      	b.n	801021e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80101de:	69bb      	ldr	r3, [r7, #24]
 80101e0:	685b      	ldr	r3, [r3, #4]
 80101e2:	617b      	str	r3, [r7, #20]
    pcur = p;
 80101e4:	69bb      	ldr	r3, [r7, #24]
 80101e6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80101e8:	697b      	ldr	r3, [r7, #20]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80101ee:	68f8      	ldr	r0, [r7, #12]
 80101f0:	f7f8 fbf4 	bl	80089dc <pbuf_clen>
 80101f4:	4603      	mov	r3, r0
 80101f6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80101f8:	8bfa      	ldrh	r2, [r7, #30]
 80101fa:	8a7b      	ldrh	r3, [r7, #18]
 80101fc:	4413      	add	r3, r2
 80101fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010202:	db05      	blt.n	8010210 <ip_reass_free_complete_datagram+0xe0>
 8010204:	4b15      	ldr	r3, [pc, #84]	; (801025c <ip_reass_free_complete_datagram+0x12c>)
 8010206:	22cc      	movs	r2, #204	; 0xcc
 8010208:	4918      	ldr	r1, [pc, #96]	; (801026c <ip_reass_free_complete_datagram+0x13c>)
 801020a:	4816      	ldr	r0, [pc, #88]	; (8010264 <ip_reass_free_complete_datagram+0x134>)
 801020c:	f001 fd54 	bl	8011cb8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8010210:	8bfa      	ldrh	r2, [r7, #30]
 8010212:	8a7b      	ldrh	r3, [r7, #18]
 8010214:	4413      	add	r3, r2
 8010216:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8010218:	68f8      	ldr	r0, [r7, #12]
 801021a:	f7f8 fb57 	bl	80088cc <pbuf_free>
  while (p != NULL) {
 801021e:	69bb      	ldr	r3, [r7, #24]
 8010220:	2b00      	cmp	r3, #0
 8010222:	d1dc      	bne.n	80101de <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8010224:	6839      	ldr	r1, [r7, #0]
 8010226:	6878      	ldr	r0, [r7, #4]
 8010228:	f000 f8c2 	bl	80103b0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801022c:	4b10      	ldr	r3, [pc, #64]	; (8010270 <ip_reass_free_complete_datagram+0x140>)
 801022e:	881b      	ldrh	r3, [r3, #0]
 8010230:	8bfa      	ldrh	r2, [r7, #30]
 8010232:	429a      	cmp	r2, r3
 8010234:	d905      	bls.n	8010242 <ip_reass_free_complete_datagram+0x112>
 8010236:	4b09      	ldr	r3, [pc, #36]	; (801025c <ip_reass_free_complete_datagram+0x12c>)
 8010238:	22d2      	movs	r2, #210	; 0xd2
 801023a:	490e      	ldr	r1, [pc, #56]	; (8010274 <ip_reass_free_complete_datagram+0x144>)
 801023c:	4809      	ldr	r0, [pc, #36]	; (8010264 <ip_reass_free_complete_datagram+0x134>)
 801023e:	f001 fd3b 	bl	8011cb8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8010242:	4b0b      	ldr	r3, [pc, #44]	; (8010270 <ip_reass_free_complete_datagram+0x140>)
 8010244:	881a      	ldrh	r2, [r3, #0]
 8010246:	8bfb      	ldrh	r3, [r7, #30]
 8010248:	1ad3      	subs	r3, r2, r3
 801024a:	b29a      	uxth	r2, r3
 801024c:	4b08      	ldr	r3, [pc, #32]	; (8010270 <ip_reass_free_complete_datagram+0x140>)
 801024e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8010250:	8bfb      	ldrh	r3, [r7, #30]
}
 8010252:	4618      	mov	r0, r3
 8010254:	3720      	adds	r7, #32
 8010256:	46bd      	mov	sp, r7
 8010258:	bd80      	pop	{r7, pc}
 801025a:	bf00      	nop
 801025c:	080163c8 	.word	0x080163c8
 8010260:	08016404 	.word	0x08016404
 8010264:	08016410 	.word	0x08016410
 8010268:	08016438 	.word	0x08016438
 801026c:	0801644c 	.word	0x0801644c
 8010270:	2000a924 	.word	0x2000a924
 8010274:	0801646c 	.word	0x0801646c

08010278 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b08a      	sub	sp, #40	; 0x28
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
 8010280:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8010282:	2300      	movs	r3, #0
 8010284:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8010286:	2300      	movs	r3, #0
 8010288:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801028a:	2300      	movs	r3, #0
 801028c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801028e:	2300      	movs	r3, #0
 8010290:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8010292:	2300      	movs	r3, #0
 8010294:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8010296:	4b28      	ldr	r3, [pc, #160]	; (8010338 <ip_reass_remove_oldest_datagram+0xc0>)
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801029c:	e030      	b.n	8010300 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801029e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102a0:	695a      	ldr	r2, [r3, #20]
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	68db      	ldr	r3, [r3, #12]
 80102a6:	429a      	cmp	r2, r3
 80102a8:	d10c      	bne.n	80102c4 <ip_reass_remove_oldest_datagram+0x4c>
 80102aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102ac:	699a      	ldr	r2, [r3, #24]
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	691b      	ldr	r3, [r3, #16]
 80102b2:	429a      	cmp	r2, r3
 80102b4:	d106      	bne.n	80102c4 <ip_reass_remove_oldest_datagram+0x4c>
 80102b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102b8:	899a      	ldrh	r2, [r3, #12]
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	889b      	ldrh	r3, [r3, #4]
 80102be:	b29b      	uxth	r3, r3
 80102c0:	429a      	cmp	r2, r3
 80102c2:	d014      	beq.n	80102ee <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80102c4:	693b      	ldr	r3, [r7, #16]
 80102c6:	3301      	adds	r3, #1
 80102c8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80102ca:	6a3b      	ldr	r3, [r7, #32]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d104      	bne.n	80102da <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80102d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102d2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80102d4:	69fb      	ldr	r3, [r7, #28]
 80102d6:	61bb      	str	r3, [r7, #24]
 80102d8:	e009      	b.n	80102ee <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80102da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102dc:	7fda      	ldrb	r2, [r3, #31]
 80102de:	6a3b      	ldr	r3, [r7, #32]
 80102e0:	7fdb      	ldrb	r3, [r3, #31]
 80102e2:	429a      	cmp	r2, r3
 80102e4:	d803      	bhi.n	80102ee <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80102e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102e8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80102ea:	69fb      	ldr	r3, [r7, #28]
 80102ec:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80102ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d001      	beq.n	80102fa <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80102f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102f8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80102fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8010300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010302:	2b00      	cmp	r3, #0
 8010304:	d1cb      	bne.n	801029e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8010306:	6a3b      	ldr	r3, [r7, #32]
 8010308:	2b00      	cmp	r3, #0
 801030a:	d008      	beq.n	801031e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801030c:	69b9      	ldr	r1, [r7, #24]
 801030e:	6a38      	ldr	r0, [r7, #32]
 8010310:	f7ff ff0e 	bl	8010130 <ip_reass_free_complete_datagram>
 8010314:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8010316:	697a      	ldr	r2, [r7, #20]
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	4413      	add	r3, r2
 801031c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801031e:	697a      	ldr	r2, [r7, #20]
 8010320:	683b      	ldr	r3, [r7, #0]
 8010322:	429a      	cmp	r2, r3
 8010324:	da02      	bge.n	801032c <ip_reass_remove_oldest_datagram+0xb4>
 8010326:	693b      	ldr	r3, [r7, #16]
 8010328:	2b01      	cmp	r3, #1
 801032a:	dcac      	bgt.n	8010286 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801032c:	697b      	ldr	r3, [r7, #20]
}
 801032e:	4618      	mov	r0, r3
 8010330:	3728      	adds	r7, #40	; 0x28
 8010332:	46bd      	mov	sp, r7
 8010334:	bd80      	pop	{r7, pc}
 8010336:	bf00      	nop
 8010338:	2000a920 	.word	0x2000a920

0801033c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801033c:	b580      	push	{r7, lr}
 801033e:	b084      	sub	sp, #16
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
 8010344:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010346:	2004      	movs	r0, #4
 8010348:	f7f7 fbda 	bl	8007b00 <memp_malloc>
 801034c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	2b00      	cmp	r3, #0
 8010352:	d110      	bne.n	8010376 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8010354:	6839      	ldr	r1, [r7, #0]
 8010356:	6878      	ldr	r0, [r7, #4]
 8010358:	f7ff ff8e 	bl	8010278 <ip_reass_remove_oldest_datagram>
 801035c:	4602      	mov	r2, r0
 801035e:	683b      	ldr	r3, [r7, #0]
 8010360:	4293      	cmp	r3, r2
 8010362:	dc03      	bgt.n	801036c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010364:	2004      	movs	r0, #4
 8010366:	f7f7 fbcb 	bl	8007b00 <memp_malloc>
 801036a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	2b00      	cmp	r3, #0
 8010370:	d101      	bne.n	8010376 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8010372:	2300      	movs	r3, #0
 8010374:	e016      	b.n	80103a4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8010376:	2220      	movs	r2, #32
 8010378:	2100      	movs	r1, #0
 801037a:	68f8      	ldr	r0, [r7, #12]
 801037c:	f001 fd01 	bl	8011d82 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	220f      	movs	r2, #15
 8010384:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8010386:	4b09      	ldr	r3, [pc, #36]	; (80103ac <ip_reass_enqueue_new_datagram+0x70>)
 8010388:	681a      	ldr	r2, [r3, #0]
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801038e:	4a07      	ldr	r2, [pc, #28]	; (80103ac <ip_reass_enqueue_new_datagram+0x70>)
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	3308      	adds	r3, #8
 8010398:	2214      	movs	r2, #20
 801039a:	6879      	ldr	r1, [r7, #4]
 801039c:	4618      	mov	r0, r3
 801039e:	f001 fdec 	bl	8011f7a <memcpy>
  return ipr;
 80103a2:	68fb      	ldr	r3, [r7, #12]
}
 80103a4:	4618      	mov	r0, r3
 80103a6:	3710      	adds	r7, #16
 80103a8:	46bd      	mov	sp, r7
 80103aa:	bd80      	pop	{r7, pc}
 80103ac:	2000a920 	.word	0x2000a920

080103b0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80103b0:	b580      	push	{r7, lr}
 80103b2:	b082      	sub	sp, #8
 80103b4:	af00      	add	r7, sp, #0
 80103b6:	6078      	str	r0, [r7, #4]
 80103b8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80103ba:	4b10      	ldr	r3, [pc, #64]	; (80103fc <ip_reass_dequeue_datagram+0x4c>)
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	687a      	ldr	r2, [r7, #4]
 80103c0:	429a      	cmp	r2, r3
 80103c2:	d104      	bne.n	80103ce <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	4a0c      	ldr	r2, [pc, #48]	; (80103fc <ip_reass_dequeue_datagram+0x4c>)
 80103ca:	6013      	str	r3, [r2, #0]
 80103cc:	e00d      	b.n	80103ea <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80103ce:	683b      	ldr	r3, [r7, #0]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d106      	bne.n	80103e2 <ip_reass_dequeue_datagram+0x32>
 80103d4:	4b0a      	ldr	r3, [pc, #40]	; (8010400 <ip_reass_dequeue_datagram+0x50>)
 80103d6:	f240 1245 	movw	r2, #325	; 0x145
 80103da:	490a      	ldr	r1, [pc, #40]	; (8010404 <ip_reass_dequeue_datagram+0x54>)
 80103dc:	480a      	ldr	r0, [pc, #40]	; (8010408 <ip_reass_dequeue_datagram+0x58>)
 80103de:	f001 fc6b 	bl	8011cb8 <iprintf>
    prev->next = ipr->next;
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	681a      	ldr	r2, [r3, #0]
 80103e6:	683b      	ldr	r3, [r7, #0]
 80103e8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80103ea:	6879      	ldr	r1, [r7, #4]
 80103ec:	2004      	movs	r0, #4
 80103ee:	f7f7 fbf7 	bl	8007be0 <memp_free>
}
 80103f2:	bf00      	nop
 80103f4:	3708      	adds	r7, #8
 80103f6:	46bd      	mov	sp, r7
 80103f8:	bd80      	pop	{r7, pc}
 80103fa:	bf00      	nop
 80103fc:	2000a920 	.word	0x2000a920
 8010400:	080163c8 	.word	0x080163c8
 8010404:	08016490 	.word	0x08016490
 8010408:	08016410 	.word	0x08016410

0801040c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801040c:	b580      	push	{r7, lr}
 801040e:	b08c      	sub	sp, #48	; 0x30
 8010410:	af00      	add	r7, sp, #0
 8010412:	60f8      	str	r0, [r7, #12]
 8010414:	60b9      	str	r1, [r7, #8]
 8010416:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8010418:	2300      	movs	r3, #0
 801041a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801041c:	2301      	movs	r3, #1
 801041e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8010420:	68bb      	ldr	r3, [r7, #8]
 8010422:	685b      	ldr	r3, [r3, #4]
 8010424:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010426:	69fb      	ldr	r3, [r7, #28]
 8010428:	885b      	ldrh	r3, [r3, #2]
 801042a:	b29b      	uxth	r3, r3
 801042c:	4618      	mov	r0, r3
 801042e:	f7f6 feef 	bl	8007210 <lwip_htons>
 8010432:	4603      	mov	r3, r0
 8010434:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8010436:	69fb      	ldr	r3, [r7, #28]
 8010438:	781b      	ldrb	r3, [r3, #0]
 801043a:	f003 030f 	and.w	r3, r3, #15
 801043e:	b2db      	uxtb	r3, r3
 8010440:	009b      	lsls	r3, r3, #2
 8010442:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8010444:	7e7b      	ldrb	r3, [r7, #25]
 8010446:	b29b      	uxth	r3, r3
 8010448:	8b7a      	ldrh	r2, [r7, #26]
 801044a:	429a      	cmp	r2, r3
 801044c:	d202      	bcs.n	8010454 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801044e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010452:	e135      	b.n	80106c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8010454:	7e7b      	ldrb	r3, [r7, #25]
 8010456:	b29b      	uxth	r3, r3
 8010458:	8b7a      	ldrh	r2, [r7, #26]
 801045a:	1ad3      	subs	r3, r2, r3
 801045c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801045e:	69fb      	ldr	r3, [r7, #28]
 8010460:	88db      	ldrh	r3, [r3, #6]
 8010462:	b29b      	uxth	r3, r3
 8010464:	4618      	mov	r0, r3
 8010466:	f7f6 fed3 	bl	8007210 <lwip_htons>
 801046a:	4603      	mov	r3, r0
 801046c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010470:	b29b      	uxth	r3, r3
 8010472:	00db      	lsls	r3, r3, #3
 8010474:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8010476:	68bb      	ldr	r3, [r7, #8]
 8010478:	685b      	ldr	r3, [r3, #4]
 801047a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801047c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801047e:	2200      	movs	r2, #0
 8010480:	701a      	strb	r2, [r3, #0]
 8010482:	2200      	movs	r2, #0
 8010484:	705a      	strb	r2, [r3, #1]
 8010486:	2200      	movs	r2, #0
 8010488:	709a      	strb	r2, [r3, #2]
 801048a:	2200      	movs	r2, #0
 801048c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801048e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010490:	8afa      	ldrh	r2, [r7, #22]
 8010492:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8010494:	8afa      	ldrh	r2, [r7, #22]
 8010496:	8b7b      	ldrh	r3, [r7, #26]
 8010498:	4413      	add	r3, r2
 801049a:	b29a      	uxth	r2, r3
 801049c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801049e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80104a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104a2:	88db      	ldrh	r3, [r3, #6]
 80104a4:	b29b      	uxth	r3, r3
 80104a6:	8afa      	ldrh	r2, [r7, #22]
 80104a8:	429a      	cmp	r2, r3
 80104aa:	d902      	bls.n	80104b2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80104ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80104b0:	e106      	b.n	80106c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	685b      	ldr	r3, [r3, #4]
 80104b6:	627b      	str	r3, [r7, #36]	; 0x24
 80104b8:	e068      	b.n	801058c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80104ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104bc:	685b      	ldr	r3, [r3, #4]
 80104be:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80104c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104c2:	889b      	ldrh	r3, [r3, #4]
 80104c4:	b29a      	uxth	r2, r3
 80104c6:	693b      	ldr	r3, [r7, #16]
 80104c8:	889b      	ldrh	r3, [r3, #4]
 80104ca:	b29b      	uxth	r3, r3
 80104cc:	429a      	cmp	r2, r3
 80104ce:	d235      	bcs.n	801053c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80104d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80104d4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80104d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d020      	beq.n	801051e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80104dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104de:	889b      	ldrh	r3, [r3, #4]
 80104e0:	b29a      	uxth	r2, r3
 80104e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104e4:	88db      	ldrh	r3, [r3, #6]
 80104e6:	b29b      	uxth	r3, r3
 80104e8:	429a      	cmp	r2, r3
 80104ea:	d307      	bcc.n	80104fc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80104ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104ee:	88db      	ldrh	r3, [r3, #6]
 80104f0:	b29a      	uxth	r2, r3
 80104f2:	693b      	ldr	r3, [r7, #16]
 80104f4:	889b      	ldrh	r3, [r3, #4]
 80104f6:	b29b      	uxth	r3, r3
 80104f8:	429a      	cmp	r2, r3
 80104fa:	d902      	bls.n	8010502 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80104fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010500:	e0de      	b.n	80106c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8010502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010504:	68ba      	ldr	r2, [r7, #8]
 8010506:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8010508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801050a:	88db      	ldrh	r3, [r3, #6]
 801050c:	b29a      	uxth	r2, r3
 801050e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010510:	889b      	ldrh	r3, [r3, #4]
 8010512:	b29b      	uxth	r3, r3
 8010514:	429a      	cmp	r2, r3
 8010516:	d03d      	beq.n	8010594 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8010518:	2300      	movs	r3, #0
 801051a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801051c:	e03a      	b.n	8010594 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801051e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010520:	88db      	ldrh	r3, [r3, #6]
 8010522:	b29a      	uxth	r2, r3
 8010524:	693b      	ldr	r3, [r7, #16]
 8010526:	889b      	ldrh	r3, [r3, #4]
 8010528:	b29b      	uxth	r3, r3
 801052a:	429a      	cmp	r2, r3
 801052c:	d902      	bls.n	8010534 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801052e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010532:	e0c5      	b.n	80106c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	68ba      	ldr	r2, [r7, #8]
 8010538:	605a      	str	r2, [r3, #4]
      break;
 801053a:	e02b      	b.n	8010594 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801053c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801053e:	889b      	ldrh	r3, [r3, #4]
 8010540:	b29a      	uxth	r2, r3
 8010542:	693b      	ldr	r3, [r7, #16]
 8010544:	889b      	ldrh	r3, [r3, #4]
 8010546:	b29b      	uxth	r3, r3
 8010548:	429a      	cmp	r2, r3
 801054a:	d102      	bne.n	8010552 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801054c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010550:	e0b6      	b.n	80106c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8010552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010554:	889b      	ldrh	r3, [r3, #4]
 8010556:	b29a      	uxth	r2, r3
 8010558:	693b      	ldr	r3, [r7, #16]
 801055a:	88db      	ldrh	r3, [r3, #6]
 801055c:	b29b      	uxth	r3, r3
 801055e:	429a      	cmp	r2, r3
 8010560:	d202      	bcs.n	8010568 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010562:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010566:	e0ab      	b.n	80106c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8010568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801056a:	2b00      	cmp	r3, #0
 801056c:	d009      	beq.n	8010582 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801056e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010570:	88db      	ldrh	r3, [r3, #6]
 8010572:	b29a      	uxth	r2, r3
 8010574:	693b      	ldr	r3, [r7, #16]
 8010576:	889b      	ldrh	r3, [r3, #4]
 8010578:	b29b      	uxth	r3, r3
 801057a:	429a      	cmp	r2, r3
 801057c:	d001      	beq.n	8010582 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801057e:	2300      	movs	r3, #0
 8010580:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8010582:	693b      	ldr	r3, [r7, #16]
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8010588:	693b      	ldr	r3, [r7, #16]
 801058a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801058c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801058e:	2b00      	cmp	r3, #0
 8010590:	d193      	bne.n	80104ba <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8010592:	e000      	b.n	8010596 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8010594:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8010596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010598:	2b00      	cmp	r3, #0
 801059a:	d12d      	bne.n	80105f8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801059c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d01c      	beq.n	80105dc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80105a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105a4:	88db      	ldrh	r3, [r3, #6]
 80105a6:	b29a      	uxth	r2, r3
 80105a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105aa:	889b      	ldrh	r3, [r3, #4]
 80105ac:	b29b      	uxth	r3, r3
 80105ae:	429a      	cmp	r2, r3
 80105b0:	d906      	bls.n	80105c0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80105b2:	4b45      	ldr	r3, [pc, #276]	; (80106c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80105b4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80105b8:	4944      	ldr	r1, [pc, #272]	; (80106cc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80105ba:	4845      	ldr	r0, [pc, #276]	; (80106d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80105bc:	f001 fb7c 	bl	8011cb8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80105c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105c2:	68ba      	ldr	r2, [r7, #8]
 80105c4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80105c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105c8:	88db      	ldrh	r3, [r3, #6]
 80105ca:	b29a      	uxth	r2, r3
 80105cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105ce:	889b      	ldrh	r3, [r3, #4]
 80105d0:	b29b      	uxth	r3, r3
 80105d2:	429a      	cmp	r2, r3
 80105d4:	d010      	beq.n	80105f8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80105d6:	2300      	movs	r3, #0
 80105d8:	623b      	str	r3, [r7, #32]
 80105da:	e00d      	b.n	80105f8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	685b      	ldr	r3, [r3, #4]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d006      	beq.n	80105f2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80105e4:	4b38      	ldr	r3, [pc, #224]	; (80106c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80105e6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80105ea:	493a      	ldr	r1, [pc, #232]	; (80106d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80105ec:	4838      	ldr	r0, [pc, #224]	; (80106d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80105ee:	f001 fb63 	bl	8011cb8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	68ba      	ldr	r2, [r7, #8]
 80105f6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d105      	bne.n	801060a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	7f9b      	ldrb	r3, [r3, #30]
 8010602:	f003 0301 	and.w	r3, r3, #1
 8010606:	2b00      	cmp	r3, #0
 8010608:	d059      	beq.n	80106be <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801060a:	6a3b      	ldr	r3, [r7, #32]
 801060c:	2b00      	cmp	r3, #0
 801060e:	d04f      	beq.n	80106b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	685b      	ldr	r3, [r3, #4]
 8010614:	2b00      	cmp	r3, #0
 8010616:	d006      	beq.n	8010626 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	685b      	ldr	r3, [r3, #4]
 801061c:	685b      	ldr	r3, [r3, #4]
 801061e:	889b      	ldrh	r3, [r3, #4]
 8010620:	b29b      	uxth	r3, r3
 8010622:	2b00      	cmp	r3, #0
 8010624:	d002      	beq.n	801062c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8010626:	2300      	movs	r3, #0
 8010628:	623b      	str	r3, [r7, #32]
 801062a:	e041      	b.n	80106b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801062c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801062e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8010630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8010636:	e012      	b.n	801065e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8010638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801063a:	685b      	ldr	r3, [r3, #4]
 801063c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801063e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010640:	88db      	ldrh	r3, [r3, #6]
 8010642:	b29a      	uxth	r2, r3
 8010644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010646:	889b      	ldrh	r3, [r3, #4]
 8010648:	b29b      	uxth	r3, r3
 801064a:	429a      	cmp	r2, r3
 801064c:	d002      	beq.n	8010654 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801064e:	2300      	movs	r3, #0
 8010650:	623b      	str	r3, [r7, #32]
            break;
 8010652:	e007      	b.n	8010664 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8010654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010656:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8010658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801065e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010660:	2b00      	cmp	r3, #0
 8010662:	d1e9      	bne.n	8010638 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8010664:	6a3b      	ldr	r3, [r7, #32]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d022      	beq.n	80106b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	685b      	ldr	r3, [r3, #4]
 801066e:	2b00      	cmp	r3, #0
 8010670:	d106      	bne.n	8010680 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8010672:	4b15      	ldr	r3, [pc, #84]	; (80106c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010674:	f240 12df 	movw	r2, #479	; 0x1df
 8010678:	4917      	ldr	r1, [pc, #92]	; (80106d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801067a:	4815      	ldr	r0, [pc, #84]	; (80106d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801067c:	f001 fb1c 	bl	8011cb8 <iprintf>
          LWIP_ASSERT("sanity check",
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	685b      	ldr	r3, [r3, #4]
 8010684:	685b      	ldr	r3, [r3, #4]
 8010686:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010688:	429a      	cmp	r2, r3
 801068a:	d106      	bne.n	801069a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801068c:	4b0e      	ldr	r3, [pc, #56]	; (80106c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801068e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8010692:	4911      	ldr	r1, [pc, #68]	; (80106d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010694:	480e      	ldr	r0, [pc, #56]	; (80106d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010696:	f001 fb0f 	bl	8011cb8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801069a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d006      	beq.n	80106b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80106a2:	4b09      	ldr	r3, [pc, #36]	; (80106c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80106a4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80106a8:	490c      	ldr	r1, [pc, #48]	; (80106dc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80106aa:	4809      	ldr	r0, [pc, #36]	; (80106d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80106ac:	f001 fb04 	bl	8011cb8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80106b0:	6a3b      	ldr	r3, [r7, #32]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	bf14      	ite	ne
 80106b6:	2301      	movne	r3, #1
 80106b8:	2300      	moveq	r3, #0
 80106ba:	b2db      	uxtb	r3, r3
 80106bc:	e000      	b.n	80106c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80106be:	2300      	movs	r3, #0
}
 80106c0:	4618      	mov	r0, r3
 80106c2:	3730      	adds	r7, #48	; 0x30
 80106c4:	46bd      	mov	sp, r7
 80106c6:	bd80      	pop	{r7, pc}
 80106c8:	080163c8 	.word	0x080163c8
 80106cc:	080164ac 	.word	0x080164ac
 80106d0:	08016410 	.word	0x08016410
 80106d4:	080164cc 	.word	0x080164cc
 80106d8:	08016504 	.word	0x08016504
 80106dc:	08016514 	.word	0x08016514

080106e0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80106e0:	b580      	push	{r7, lr}
 80106e2:	b08e      	sub	sp, #56	; 0x38
 80106e4:	af00      	add	r7, sp, #0
 80106e6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	685b      	ldr	r3, [r3, #4]
 80106ec:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80106ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106f0:	781b      	ldrb	r3, [r3, #0]
 80106f2:	f003 030f 	and.w	r3, r3, #15
 80106f6:	b2db      	uxtb	r3, r3
 80106f8:	009b      	lsls	r3, r3, #2
 80106fa:	b2db      	uxtb	r3, r3
 80106fc:	2b14      	cmp	r3, #20
 80106fe:	f040 8171 	bne.w	80109e4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8010702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010704:	88db      	ldrh	r3, [r3, #6]
 8010706:	b29b      	uxth	r3, r3
 8010708:	4618      	mov	r0, r3
 801070a:	f7f6 fd81 	bl	8007210 <lwip_htons>
 801070e:	4603      	mov	r3, r0
 8010710:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010714:	b29b      	uxth	r3, r3
 8010716:	00db      	lsls	r3, r3, #3
 8010718:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801071a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801071c:	885b      	ldrh	r3, [r3, #2]
 801071e:	b29b      	uxth	r3, r3
 8010720:	4618      	mov	r0, r3
 8010722:	f7f6 fd75 	bl	8007210 <lwip_htons>
 8010726:	4603      	mov	r3, r0
 8010728:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801072a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801072c:	781b      	ldrb	r3, [r3, #0]
 801072e:	f003 030f 	and.w	r3, r3, #15
 8010732:	b2db      	uxtb	r3, r3
 8010734:	009b      	lsls	r3, r3, #2
 8010736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801073a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801073e:	b29b      	uxth	r3, r3
 8010740:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010742:	429a      	cmp	r2, r3
 8010744:	f0c0 8150 	bcc.w	80109e8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8010748:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801074c:	b29b      	uxth	r3, r3
 801074e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010750:	1ad3      	subs	r3, r2, r3
 8010752:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8010754:	6878      	ldr	r0, [r7, #4]
 8010756:	f7f8 f941 	bl	80089dc <pbuf_clen>
 801075a:	4603      	mov	r3, r0
 801075c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801075e:	4b8c      	ldr	r3, [pc, #560]	; (8010990 <ip4_reass+0x2b0>)
 8010760:	881b      	ldrh	r3, [r3, #0]
 8010762:	461a      	mov	r2, r3
 8010764:	8c3b      	ldrh	r3, [r7, #32]
 8010766:	4413      	add	r3, r2
 8010768:	2b0a      	cmp	r3, #10
 801076a:	dd10      	ble.n	801078e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801076c:	8c3b      	ldrh	r3, [r7, #32]
 801076e:	4619      	mov	r1, r3
 8010770:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010772:	f7ff fd81 	bl	8010278 <ip_reass_remove_oldest_datagram>
 8010776:	4603      	mov	r3, r0
 8010778:	2b00      	cmp	r3, #0
 801077a:	f000 8137 	beq.w	80109ec <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801077e:	4b84      	ldr	r3, [pc, #528]	; (8010990 <ip4_reass+0x2b0>)
 8010780:	881b      	ldrh	r3, [r3, #0]
 8010782:	461a      	mov	r2, r3
 8010784:	8c3b      	ldrh	r3, [r7, #32]
 8010786:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010788:	2b0a      	cmp	r3, #10
 801078a:	f300 812f 	bgt.w	80109ec <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801078e:	4b81      	ldr	r3, [pc, #516]	; (8010994 <ip4_reass+0x2b4>)
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	633b      	str	r3, [r7, #48]	; 0x30
 8010794:	e015      	b.n	80107c2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8010796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010798:	695a      	ldr	r2, [r3, #20]
 801079a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801079c:	68db      	ldr	r3, [r3, #12]
 801079e:	429a      	cmp	r2, r3
 80107a0:	d10c      	bne.n	80107bc <ip4_reass+0xdc>
 80107a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107a4:	699a      	ldr	r2, [r3, #24]
 80107a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107a8:	691b      	ldr	r3, [r3, #16]
 80107aa:	429a      	cmp	r2, r3
 80107ac:	d106      	bne.n	80107bc <ip4_reass+0xdc>
 80107ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107b0:	899a      	ldrh	r2, [r3, #12]
 80107b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107b4:	889b      	ldrh	r3, [r3, #4]
 80107b6:	b29b      	uxth	r3, r3
 80107b8:	429a      	cmp	r2, r3
 80107ba:	d006      	beq.n	80107ca <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80107bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	633b      	str	r3, [r7, #48]	; 0x30
 80107c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d1e6      	bne.n	8010796 <ip4_reass+0xb6>
 80107c8:	e000      	b.n	80107cc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80107ca:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80107cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d109      	bne.n	80107e6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80107d2:	8c3b      	ldrh	r3, [r7, #32]
 80107d4:	4619      	mov	r1, r3
 80107d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80107d8:	f7ff fdb0 	bl	801033c <ip_reass_enqueue_new_datagram>
 80107dc:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80107de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d11c      	bne.n	801081e <ip4_reass+0x13e>
      goto nullreturn;
 80107e4:	e105      	b.n	80109f2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80107e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107e8:	88db      	ldrh	r3, [r3, #6]
 80107ea:	b29b      	uxth	r3, r3
 80107ec:	4618      	mov	r0, r3
 80107ee:	f7f6 fd0f 	bl	8007210 <lwip_htons>
 80107f2:	4603      	mov	r3, r0
 80107f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d110      	bne.n	801081e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80107fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107fe:	89db      	ldrh	r3, [r3, #14]
 8010800:	4618      	mov	r0, r3
 8010802:	f7f6 fd05 	bl	8007210 <lwip_htons>
 8010806:	4603      	mov	r3, r0
 8010808:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801080c:	2b00      	cmp	r3, #0
 801080e:	d006      	beq.n	801081e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8010810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010812:	3308      	adds	r3, #8
 8010814:	2214      	movs	r2, #20
 8010816:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010818:	4618      	mov	r0, r3
 801081a:	f001 fbae 	bl	8011f7a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801081e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010820:	88db      	ldrh	r3, [r3, #6]
 8010822:	b29b      	uxth	r3, r3
 8010824:	f003 0320 	and.w	r3, r3, #32
 8010828:	2b00      	cmp	r3, #0
 801082a:	bf0c      	ite	eq
 801082c:	2301      	moveq	r3, #1
 801082e:	2300      	movne	r3, #0
 8010830:	b2db      	uxtb	r3, r3
 8010832:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8010834:	69fb      	ldr	r3, [r7, #28]
 8010836:	2b00      	cmp	r3, #0
 8010838:	d00e      	beq.n	8010858 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801083a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801083c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801083e:	4413      	add	r3, r2
 8010840:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8010842:	8b7a      	ldrh	r2, [r7, #26]
 8010844:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010846:	429a      	cmp	r2, r3
 8010848:	f0c0 80a0 	bcc.w	801098c <ip4_reass+0x2ac>
 801084c:	8b7b      	ldrh	r3, [r7, #26]
 801084e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8010852:	4293      	cmp	r3, r2
 8010854:	f200 809a 	bhi.w	801098c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8010858:	69fa      	ldr	r2, [r7, #28]
 801085a:	6879      	ldr	r1, [r7, #4]
 801085c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801085e:	f7ff fdd5 	bl	801040c <ip_reass_chain_frag_into_datagram_and_validate>
 8010862:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8010864:	697b      	ldr	r3, [r7, #20]
 8010866:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801086a:	f000 809b 	beq.w	80109a4 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801086e:	4b48      	ldr	r3, [pc, #288]	; (8010990 <ip4_reass+0x2b0>)
 8010870:	881a      	ldrh	r2, [r3, #0]
 8010872:	8c3b      	ldrh	r3, [r7, #32]
 8010874:	4413      	add	r3, r2
 8010876:	b29a      	uxth	r2, r3
 8010878:	4b45      	ldr	r3, [pc, #276]	; (8010990 <ip4_reass+0x2b0>)
 801087a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801087c:	69fb      	ldr	r3, [r7, #28]
 801087e:	2b00      	cmp	r3, #0
 8010880:	d00d      	beq.n	801089e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8010882:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010884:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010886:	4413      	add	r3, r2
 8010888:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801088a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801088c:	8a7a      	ldrh	r2, [r7, #18]
 801088e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8010890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010892:	7f9b      	ldrb	r3, [r3, #30]
 8010894:	f043 0301 	orr.w	r3, r3, #1
 8010898:	b2da      	uxtb	r2, r3
 801089a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801089c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801089e:	697b      	ldr	r3, [r7, #20]
 80108a0:	2b01      	cmp	r3, #1
 80108a2:	d171      	bne.n	8010988 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80108a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108a6:	8b9b      	ldrh	r3, [r3, #28]
 80108a8:	3314      	adds	r3, #20
 80108aa:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80108ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108ae:	685b      	ldr	r3, [r3, #4]
 80108b0:	685b      	ldr	r3, [r3, #4]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80108b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108b8:	685b      	ldr	r3, [r3, #4]
 80108ba:	685b      	ldr	r3, [r3, #4]
 80108bc:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80108be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108c0:	3308      	adds	r3, #8
 80108c2:	2214      	movs	r2, #20
 80108c4:	4619      	mov	r1, r3
 80108c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80108c8:	f001 fb57 	bl	8011f7a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80108cc:	8a3b      	ldrh	r3, [r7, #16]
 80108ce:	4618      	mov	r0, r3
 80108d0:	f7f6 fc9e 	bl	8007210 <lwip_htons>
 80108d4:	4603      	mov	r3, r0
 80108d6:	461a      	mov	r2, r3
 80108d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108da:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80108dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108de:	2200      	movs	r2, #0
 80108e0:	719a      	strb	r2, [r3, #6]
 80108e2:	2200      	movs	r2, #0
 80108e4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80108e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108e8:	2200      	movs	r2, #0
 80108ea:	729a      	strb	r2, [r3, #10]
 80108ec:	2200      	movs	r2, #0
 80108ee:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80108f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108f2:	685b      	ldr	r3, [r3, #4]
 80108f4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80108f6:	e00d      	b.n	8010914 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80108f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108fa:	685b      	ldr	r3, [r3, #4]
 80108fc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80108fe:	2114      	movs	r1, #20
 8010900:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010902:	f7f7 ff5d 	bl	80087c0 <pbuf_remove_header>
      pbuf_cat(p, r);
 8010906:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010908:	6878      	ldr	r0, [r7, #4]
 801090a:	f7f8 f8a1 	bl	8008a50 <pbuf_cat>
      r = iprh->next_pbuf;
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8010914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010916:	2b00      	cmp	r3, #0
 8010918:	d1ee      	bne.n	80108f8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801091a:	4b1e      	ldr	r3, [pc, #120]	; (8010994 <ip4_reass+0x2b4>)
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010920:	429a      	cmp	r2, r3
 8010922:	d102      	bne.n	801092a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8010924:	2300      	movs	r3, #0
 8010926:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010928:	e010      	b.n	801094c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801092a:	4b1a      	ldr	r3, [pc, #104]	; (8010994 <ip4_reass+0x2b4>)
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010930:	e007      	b.n	8010942 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8010932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010938:	429a      	cmp	r2, r3
 801093a:	d006      	beq.n	801094a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801093c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010944:	2b00      	cmp	r3, #0
 8010946:	d1f4      	bne.n	8010932 <ip4_reass+0x252>
 8010948:	e000      	b.n	801094c <ip4_reass+0x26c>
          break;
 801094a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801094c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801094e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010950:	f7ff fd2e 	bl	80103b0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8010954:	6878      	ldr	r0, [r7, #4]
 8010956:	f7f8 f841 	bl	80089dc <pbuf_clen>
 801095a:	4603      	mov	r3, r0
 801095c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801095e:	4b0c      	ldr	r3, [pc, #48]	; (8010990 <ip4_reass+0x2b0>)
 8010960:	881b      	ldrh	r3, [r3, #0]
 8010962:	8c3a      	ldrh	r2, [r7, #32]
 8010964:	429a      	cmp	r2, r3
 8010966:	d906      	bls.n	8010976 <ip4_reass+0x296>
 8010968:	4b0b      	ldr	r3, [pc, #44]	; (8010998 <ip4_reass+0x2b8>)
 801096a:	f240 229b 	movw	r2, #667	; 0x29b
 801096e:	490b      	ldr	r1, [pc, #44]	; (801099c <ip4_reass+0x2bc>)
 8010970:	480b      	ldr	r0, [pc, #44]	; (80109a0 <ip4_reass+0x2c0>)
 8010972:	f001 f9a1 	bl	8011cb8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8010976:	4b06      	ldr	r3, [pc, #24]	; (8010990 <ip4_reass+0x2b0>)
 8010978:	881a      	ldrh	r2, [r3, #0]
 801097a:	8c3b      	ldrh	r3, [r7, #32]
 801097c:	1ad3      	subs	r3, r2, r3
 801097e:	b29a      	uxth	r2, r3
 8010980:	4b03      	ldr	r3, [pc, #12]	; (8010990 <ip4_reass+0x2b0>)
 8010982:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	e038      	b.n	80109fa <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8010988:	2300      	movs	r3, #0
 801098a:	e036      	b.n	80109fa <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801098c:	bf00      	nop
 801098e:	e00a      	b.n	80109a6 <ip4_reass+0x2c6>
 8010990:	2000a924 	.word	0x2000a924
 8010994:	2000a920 	.word	0x2000a920
 8010998:	080163c8 	.word	0x080163c8
 801099c:	08016538 	.word	0x08016538
 80109a0:	08016410 	.word	0x08016410
    goto nullreturn_ipr;
 80109a4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80109a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d106      	bne.n	80109ba <ip4_reass+0x2da>
 80109ac:	4b15      	ldr	r3, [pc, #84]	; (8010a04 <ip4_reass+0x324>)
 80109ae:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80109b2:	4915      	ldr	r1, [pc, #84]	; (8010a08 <ip4_reass+0x328>)
 80109b4:	4815      	ldr	r0, [pc, #84]	; (8010a0c <ip4_reass+0x32c>)
 80109b6:	f001 f97f 	bl	8011cb8 <iprintf>
  if (ipr->p == NULL) {
 80109ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109bc:	685b      	ldr	r3, [r3, #4]
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d116      	bne.n	80109f0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80109c2:	4b13      	ldr	r3, [pc, #76]	; (8010a10 <ip4_reass+0x330>)
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80109c8:	429a      	cmp	r2, r3
 80109ca:	d006      	beq.n	80109da <ip4_reass+0x2fa>
 80109cc:	4b0d      	ldr	r3, [pc, #52]	; (8010a04 <ip4_reass+0x324>)
 80109ce:	f240 22ab 	movw	r2, #683	; 0x2ab
 80109d2:	4910      	ldr	r1, [pc, #64]	; (8010a14 <ip4_reass+0x334>)
 80109d4:	480d      	ldr	r0, [pc, #52]	; (8010a0c <ip4_reass+0x32c>)
 80109d6:	f001 f96f 	bl	8011cb8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80109da:	2100      	movs	r1, #0
 80109dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80109de:	f7ff fce7 	bl	80103b0 <ip_reass_dequeue_datagram>
 80109e2:	e006      	b.n	80109f2 <ip4_reass+0x312>
    goto nullreturn;
 80109e4:	bf00      	nop
 80109e6:	e004      	b.n	80109f2 <ip4_reass+0x312>
    goto nullreturn;
 80109e8:	bf00      	nop
 80109ea:	e002      	b.n	80109f2 <ip4_reass+0x312>
      goto nullreturn;
 80109ec:	bf00      	nop
 80109ee:	e000      	b.n	80109f2 <ip4_reass+0x312>
  }

nullreturn:
 80109f0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80109f2:	6878      	ldr	r0, [r7, #4]
 80109f4:	f7f7 ff6a 	bl	80088cc <pbuf_free>
  return NULL;
 80109f8:	2300      	movs	r3, #0
}
 80109fa:	4618      	mov	r0, r3
 80109fc:	3738      	adds	r7, #56	; 0x38
 80109fe:	46bd      	mov	sp, r7
 8010a00:	bd80      	pop	{r7, pc}
 8010a02:	bf00      	nop
 8010a04:	080163c8 	.word	0x080163c8
 8010a08:	08016554 	.word	0x08016554
 8010a0c:	08016410 	.word	0x08016410
 8010a10:	2000a920 	.word	0x2000a920
 8010a14:	08016560 	.word	0x08016560

08010a18 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8010a18:	b580      	push	{r7, lr}
 8010a1a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8010a1c:	2005      	movs	r0, #5
 8010a1e:	f7f7 f86f 	bl	8007b00 <memp_malloc>
 8010a22:	4603      	mov	r3, r0
}
 8010a24:	4618      	mov	r0, r3
 8010a26:	bd80      	pop	{r7, pc}

08010a28 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	b082      	sub	sp, #8
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d106      	bne.n	8010a44 <ip_frag_free_pbuf_custom_ref+0x1c>
 8010a36:	4b07      	ldr	r3, [pc, #28]	; (8010a54 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8010a38:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8010a3c:	4906      	ldr	r1, [pc, #24]	; (8010a58 <ip_frag_free_pbuf_custom_ref+0x30>)
 8010a3e:	4807      	ldr	r0, [pc, #28]	; (8010a5c <ip_frag_free_pbuf_custom_ref+0x34>)
 8010a40:	f001 f93a 	bl	8011cb8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8010a44:	6879      	ldr	r1, [r7, #4]
 8010a46:	2005      	movs	r0, #5
 8010a48:	f7f7 f8ca 	bl	8007be0 <memp_free>
}
 8010a4c:	bf00      	nop
 8010a4e:	3708      	adds	r7, #8
 8010a50:	46bd      	mov	sp, r7
 8010a52:	bd80      	pop	{r7, pc}
 8010a54:	080163c8 	.word	0x080163c8
 8010a58:	08016580 	.word	0x08016580
 8010a5c:	08016410 	.word	0x08016410

08010a60 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8010a60:	b580      	push	{r7, lr}
 8010a62:	b084      	sub	sp, #16
 8010a64:	af00      	add	r7, sp, #0
 8010a66:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d106      	bne.n	8010a80 <ipfrag_free_pbuf_custom+0x20>
 8010a72:	4b11      	ldr	r3, [pc, #68]	; (8010ab8 <ipfrag_free_pbuf_custom+0x58>)
 8010a74:	f240 22ce 	movw	r2, #718	; 0x2ce
 8010a78:	4910      	ldr	r1, [pc, #64]	; (8010abc <ipfrag_free_pbuf_custom+0x5c>)
 8010a7a:	4811      	ldr	r0, [pc, #68]	; (8010ac0 <ipfrag_free_pbuf_custom+0x60>)
 8010a7c:	f001 f91c 	bl	8011cb8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8010a80:	68fa      	ldr	r2, [r7, #12]
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	429a      	cmp	r2, r3
 8010a86:	d006      	beq.n	8010a96 <ipfrag_free_pbuf_custom+0x36>
 8010a88:	4b0b      	ldr	r3, [pc, #44]	; (8010ab8 <ipfrag_free_pbuf_custom+0x58>)
 8010a8a:	f240 22cf 	movw	r2, #719	; 0x2cf
 8010a8e:	490d      	ldr	r1, [pc, #52]	; (8010ac4 <ipfrag_free_pbuf_custom+0x64>)
 8010a90:	480b      	ldr	r0, [pc, #44]	; (8010ac0 <ipfrag_free_pbuf_custom+0x60>)
 8010a92:	f001 f911 	bl	8011cb8 <iprintf>
  if (pcr->original != NULL) {
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	695b      	ldr	r3, [r3, #20]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d004      	beq.n	8010aa8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	695b      	ldr	r3, [r3, #20]
 8010aa2:	4618      	mov	r0, r3
 8010aa4:	f7f7 ff12 	bl	80088cc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8010aa8:	68f8      	ldr	r0, [r7, #12]
 8010aaa:	f7ff ffbd 	bl	8010a28 <ip_frag_free_pbuf_custom_ref>
}
 8010aae:	bf00      	nop
 8010ab0:	3710      	adds	r7, #16
 8010ab2:	46bd      	mov	sp, r7
 8010ab4:	bd80      	pop	{r7, pc}
 8010ab6:	bf00      	nop
 8010ab8:	080163c8 	.word	0x080163c8
 8010abc:	0801658c 	.word	0x0801658c
 8010ac0:	08016410 	.word	0x08016410
 8010ac4:	08016598 	.word	0x08016598

08010ac8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8010ac8:	b580      	push	{r7, lr}
 8010aca:	b094      	sub	sp, #80	; 0x50
 8010acc:	af02      	add	r7, sp, #8
 8010ace:	60f8      	str	r0, [r7, #12]
 8010ad0:	60b9      	str	r1, [r7, #8]
 8010ad2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8010ada:	68bb      	ldr	r3, [r7, #8]
 8010adc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010ade:	3b14      	subs	r3, #20
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	da00      	bge.n	8010ae6 <ip4_frag+0x1e>
 8010ae4:	3307      	adds	r3, #7
 8010ae6:	10db      	asrs	r3, r3, #3
 8010ae8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8010aea:	2314      	movs	r3, #20
 8010aec:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	685b      	ldr	r3, [r3, #4]
 8010af2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8010af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010af6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8010af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010afa:	781b      	ldrb	r3, [r3, #0]
 8010afc:	f003 030f 	and.w	r3, r3, #15
 8010b00:	b2db      	uxtb	r3, r3
 8010b02:	009b      	lsls	r3, r3, #2
 8010b04:	b2db      	uxtb	r3, r3
 8010b06:	2b14      	cmp	r3, #20
 8010b08:	d002      	beq.n	8010b10 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8010b0a:	f06f 0305 	mvn.w	r3, #5
 8010b0e:	e110      	b.n	8010d32 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	895b      	ldrh	r3, [r3, #10]
 8010b14:	2b13      	cmp	r3, #19
 8010b16:	d809      	bhi.n	8010b2c <ip4_frag+0x64>
 8010b18:	4b88      	ldr	r3, [pc, #544]	; (8010d3c <ip4_frag+0x274>)
 8010b1a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8010b1e:	4988      	ldr	r1, [pc, #544]	; (8010d40 <ip4_frag+0x278>)
 8010b20:	4888      	ldr	r0, [pc, #544]	; (8010d44 <ip4_frag+0x27c>)
 8010b22:	f001 f8c9 	bl	8011cb8 <iprintf>
 8010b26:	f06f 0305 	mvn.w	r3, #5
 8010b2a:	e102      	b.n	8010d32 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8010b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b2e:	88db      	ldrh	r3, [r3, #6]
 8010b30:	b29b      	uxth	r3, r3
 8010b32:	4618      	mov	r0, r3
 8010b34:	f7f6 fb6c 	bl	8007210 <lwip_htons>
 8010b38:	4603      	mov	r3, r0
 8010b3a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8010b3c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010b3e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010b42:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8010b46:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010b48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010b4c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	891b      	ldrh	r3, [r3, #8]
 8010b52:	3b14      	subs	r3, #20
 8010b54:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8010b58:	e0e1      	b.n	8010d1e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8010b5a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010b5c:	00db      	lsls	r3, r3, #3
 8010b5e:	b29b      	uxth	r3, r3
 8010b60:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010b64:	4293      	cmp	r3, r2
 8010b66:	bf28      	it	cs
 8010b68:	4613      	movcs	r3, r2
 8010b6a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8010b6c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010b70:	2114      	movs	r1, #20
 8010b72:	200e      	movs	r0, #14
 8010b74:	f7f7 fbc6 	bl	8008304 <pbuf_alloc>
 8010b78:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8010b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	f000 80d5 	beq.w	8010d2c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8010b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b84:	895b      	ldrh	r3, [r3, #10]
 8010b86:	2b13      	cmp	r3, #19
 8010b88:	d806      	bhi.n	8010b98 <ip4_frag+0xd0>
 8010b8a:	4b6c      	ldr	r3, [pc, #432]	; (8010d3c <ip4_frag+0x274>)
 8010b8c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8010b90:	496d      	ldr	r1, [pc, #436]	; (8010d48 <ip4_frag+0x280>)
 8010b92:	486c      	ldr	r0, [pc, #432]	; (8010d44 <ip4_frag+0x27c>)
 8010b94:	f001 f890 	bl	8011cb8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8010b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b9a:	685b      	ldr	r3, [r3, #4]
 8010b9c:	2214      	movs	r2, #20
 8010b9e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010ba0:	4618      	mov	r0, r3
 8010ba2:	f001 f9ea 	bl	8011f7a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8010ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ba8:	685b      	ldr	r3, [r3, #4]
 8010baa:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8010bac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010bae:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8010bb2:	e064      	b.n	8010c7e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	895a      	ldrh	r2, [r3, #10]
 8010bb8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010bba:	1ad3      	subs	r3, r2, r3
 8010bbc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	895b      	ldrh	r3, [r3, #10]
 8010bc2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010bc4:	429a      	cmp	r2, r3
 8010bc6:	d906      	bls.n	8010bd6 <ip4_frag+0x10e>
 8010bc8:	4b5c      	ldr	r3, [pc, #368]	; (8010d3c <ip4_frag+0x274>)
 8010bca:	f240 322d 	movw	r2, #813	; 0x32d
 8010bce:	495f      	ldr	r1, [pc, #380]	; (8010d4c <ip4_frag+0x284>)
 8010bd0:	485c      	ldr	r0, [pc, #368]	; (8010d44 <ip4_frag+0x27c>)
 8010bd2:	f001 f871 	bl	8011cb8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8010bd6:	8bfa      	ldrh	r2, [r7, #30]
 8010bd8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010bdc:	4293      	cmp	r3, r2
 8010bde:	bf28      	it	cs
 8010be0:	4613      	movcs	r3, r2
 8010be2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8010be6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d105      	bne.n	8010bfa <ip4_frag+0x132>
        poff = 0;
 8010bee:	2300      	movs	r3, #0
 8010bf0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	60fb      	str	r3, [r7, #12]
        continue;
 8010bf8:	e041      	b.n	8010c7e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8010bfa:	f7ff ff0d 	bl	8010a18 <ip_frag_alloc_pbuf_custom_ref>
 8010bfe:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8010c00:	69bb      	ldr	r3, [r7, #24]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d103      	bne.n	8010c0e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8010c06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010c08:	f7f7 fe60 	bl	80088cc <pbuf_free>
        goto memerr;
 8010c0c:	e08f      	b.n	8010d2e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010c0e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010c14:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010c16:	4413      	add	r3, r2
 8010c18:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8010c1c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8010c20:	9201      	str	r2, [sp, #4]
 8010c22:	9300      	str	r3, [sp, #0]
 8010c24:	4603      	mov	r3, r0
 8010c26:	2241      	movs	r2, #65	; 0x41
 8010c28:	2000      	movs	r0, #0
 8010c2a:	f7f7 fc95 	bl	8008558 <pbuf_alloced_custom>
 8010c2e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8010c30:	697b      	ldr	r3, [r7, #20]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d106      	bne.n	8010c44 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8010c36:	69b8      	ldr	r0, [r7, #24]
 8010c38:	f7ff fef6 	bl	8010a28 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8010c3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010c3e:	f7f7 fe45 	bl	80088cc <pbuf_free>
        goto memerr;
 8010c42:	e074      	b.n	8010d2e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8010c44:	68f8      	ldr	r0, [r7, #12]
 8010c46:	f7f7 fee1 	bl	8008a0c <pbuf_ref>
      pcr->original = p;
 8010c4a:	69bb      	ldr	r3, [r7, #24]
 8010c4c:	68fa      	ldr	r2, [r7, #12]
 8010c4e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8010c50:	69bb      	ldr	r3, [r7, #24]
 8010c52:	4a3f      	ldr	r2, [pc, #252]	; (8010d50 <ip4_frag+0x288>)
 8010c54:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8010c56:	6979      	ldr	r1, [r7, #20]
 8010c58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010c5a:	f7f7 fef9 	bl	8008a50 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8010c5e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8010c62:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010c66:	1ad3      	subs	r3, r2, r3
 8010c68:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8010c6c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d004      	beq.n	8010c7e <ip4_frag+0x1b6>
        poff = 0;
 8010c74:	2300      	movs	r3, #0
 8010c76:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8010c7e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d196      	bne.n	8010bb4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8010c86:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010c88:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010c8c:	4413      	add	r3, r2
 8010c8e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8010c90:	68bb      	ldr	r3, [r7, #8]
 8010c92:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010c94:	f1a3 0213 	sub.w	r2, r3, #19
 8010c98:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010c9c:	429a      	cmp	r2, r3
 8010c9e:	bfcc      	ite	gt
 8010ca0:	2301      	movgt	r3, #1
 8010ca2:	2300      	movle	r3, #0
 8010ca4:	b2db      	uxtb	r3, r3
 8010ca6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8010ca8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010cac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010cb0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8010cb2:	6a3b      	ldr	r3, [r7, #32]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d002      	beq.n	8010cbe <ip4_frag+0x1f6>
 8010cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d003      	beq.n	8010cc6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8010cbe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010cc0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010cc4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8010cc6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010cc8:	4618      	mov	r0, r3
 8010cca:	f7f6 faa1 	bl	8007210 <lwip_htons>
 8010cce:	4603      	mov	r3, r0
 8010cd0:	461a      	mov	r2, r3
 8010cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cd4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8010cd6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010cd8:	3314      	adds	r3, #20
 8010cda:	b29b      	uxth	r3, r3
 8010cdc:	4618      	mov	r0, r3
 8010cde:	f7f6 fa97 	bl	8007210 <lwip_htons>
 8010ce2:	4603      	mov	r3, r0
 8010ce4:	461a      	mov	r2, r3
 8010ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ce8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8010cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cec:	2200      	movs	r2, #0
 8010cee:	729a      	strb	r2, [r3, #10]
 8010cf0:	2200      	movs	r2, #0
 8010cf2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8010cf4:	68bb      	ldr	r3, [r7, #8]
 8010cf6:	695b      	ldr	r3, [r3, #20]
 8010cf8:	687a      	ldr	r2, [r7, #4]
 8010cfa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010cfc:	68b8      	ldr	r0, [r7, #8]
 8010cfe:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8010d00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010d02:	f7f7 fde3 	bl	80088cc <pbuf_free>
    left = (u16_t)(left - fragsize);
 8010d06:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010d0a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010d0c:	1ad3      	subs	r3, r2, r3
 8010d0e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8010d12:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010d16:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010d18:	4413      	add	r3, r2
 8010d1a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8010d1e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	f47f af19 	bne.w	8010b5a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8010d28:	2300      	movs	r3, #0
 8010d2a:	e002      	b.n	8010d32 <ip4_frag+0x26a>
      goto memerr;
 8010d2c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8010d2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8010d32:	4618      	mov	r0, r3
 8010d34:	3748      	adds	r7, #72	; 0x48
 8010d36:	46bd      	mov	sp, r7
 8010d38:	bd80      	pop	{r7, pc}
 8010d3a:	bf00      	nop
 8010d3c:	080163c8 	.word	0x080163c8
 8010d40:	080165a4 	.word	0x080165a4
 8010d44:	08016410 	.word	0x08016410
 8010d48:	080165c0 	.word	0x080165c0
 8010d4c:	080165e0 	.word	0x080165e0
 8010d50:	08010a61 	.word	0x08010a61

08010d54 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8010d54:	b580      	push	{r7, lr}
 8010d56:	b086      	sub	sp, #24
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	6078      	str	r0, [r7, #4]
 8010d5c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8010d5e:	230e      	movs	r3, #14
 8010d60:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	895b      	ldrh	r3, [r3, #10]
 8010d66:	2b0e      	cmp	r3, #14
 8010d68:	d96e      	bls.n	8010e48 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	7bdb      	ldrb	r3, [r3, #15]
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d106      	bne.n	8010d80 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8010d72:	683b      	ldr	r3, [r7, #0]
 8010d74:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010d78:	3301      	adds	r3, #1
 8010d7a:	b2da      	uxtb	r2, r3
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	685b      	ldr	r3, [r3, #4]
 8010d84:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8010d86:	693b      	ldr	r3, [r7, #16]
 8010d88:	7b1a      	ldrb	r2, [r3, #12]
 8010d8a:	7b5b      	ldrb	r3, [r3, #13]
 8010d8c:	021b      	lsls	r3, r3, #8
 8010d8e:	4313      	orrs	r3, r2
 8010d90:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8010d92:	693b      	ldr	r3, [r7, #16]
 8010d94:	781b      	ldrb	r3, [r3, #0]
 8010d96:	f003 0301 	and.w	r3, r3, #1
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d023      	beq.n	8010de6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8010d9e:	693b      	ldr	r3, [r7, #16]
 8010da0:	781b      	ldrb	r3, [r3, #0]
 8010da2:	2b01      	cmp	r3, #1
 8010da4:	d10f      	bne.n	8010dc6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010da6:	693b      	ldr	r3, [r7, #16]
 8010da8:	785b      	ldrb	r3, [r3, #1]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d11b      	bne.n	8010de6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8010dae:	693b      	ldr	r3, [r7, #16]
 8010db0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010db2:	2b5e      	cmp	r3, #94	; 0x5e
 8010db4:	d117      	bne.n	8010de6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	7b5b      	ldrb	r3, [r3, #13]
 8010dba:	f043 0310 	orr.w	r3, r3, #16
 8010dbe:	b2da      	uxtb	r2, r3
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	735a      	strb	r2, [r3, #13]
 8010dc4:	e00f      	b.n	8010de6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8010dc6:	693b      	ldr	r3, [r7, #16]
 8010dc8:	2206      	movs	r2, #6
 8010dca:	4928      	ldr	r1, [pc, #160]	; (8010e6c <ethernet_input+0x118>)
 8010dcc:	4618      	mov	r0, r3
 8010dce:	f000 ffc8 	bl	8011d62 <memcmp>
 8010dd2:	4603      	mov	r3, r0
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d106      	bne.n	8010de6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	7b5b      	ldrb	r3, [r3, #13]
 8010ddc:	f043 0308 	orr.w	r3, r3, #8
 8010de0:	b2da      	uxtb	r2, r3
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8010de6:	89fb      	ldrh	r3, [r7, #14]
 8010de8:	2b08      	cmp	r3, #8
 8010dea:	d003      	beq.n	8010df4 <ethernet_input+0xa0>
 8010dec:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8010df0:	d014      	beq.n	8010e1c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8010df2:	e032      	b.n	8010e5a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010df4:	683b      	ldr	r3, [r7, #0]
 8010df6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010dfa:	f003 0308 	and.w	r3, r3, #8
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d024      	beq.n	8010e4c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010e02:	8afb      	ldrh	r3, [r7, #22]
 8010e04:	4619      	mov	r1, r3
 8010e06:	6878      	ldr	r0, [r7, #4]
 8010e08:	f7f7 fcda 	bl	80087c0 <pbuf_remove_header>
 8010e0c:	4603      	mov	r3, r0
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d11e      	bne.n	8010e50 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8010e12:	6839      	ldr	r1, [r7, #0]
 8010e14:	6878      	ldr	r0, [r7, #4]
 8010e16:	f7fe ff21 	bl	800fc5c <ip4_input>
      break;
 8010e1a:	e013      	b.n	8010e44 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010e1c:	683b      	ldr	r3, [r7, #0]
 8010e1e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010e22:	f003 0308 	and.w	r3, r3, #8
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d014      	beq.n	8010e54 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010e2a:	8afb      	ldrh	r3, [r7, #22]
 8010e2c:	4619      	mov	r1, r3
 8010e2e:	6878      	ldr	r0, [r7, #4]
 8010e30:	f7f7 fcc6 	bl	80087c0 <pbuf_remove_header>
 8010e34:	4603      	mov	r3, r0
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d10e      	bne.n	8010e58 <ethernet_input+0x104>
        etharp_input(p, netif);
 8010e3a:	6839      	ldr	r1, [r7, #0]
 8010e3c:	6878      	ldr	r0, [r7, #4]
 8010e3e:	f7fe f8c1 	bl	800efc4 <etharp_input>
      break;
 8010e42:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8010e44:	2300      	movs	r3, #0
 8010e46:	e00c      	b.n	8010e62 <ethernet_input+0x10e>
    goto free_and_return;
 8010e48:	bf00      	nop
 8010e4a:	e006      	b.n	8010e5a <ethernet_input+0x106>
        goto free_and_return;
 8010e4c:	bf00      	nop
 8010e4e:	e004      	b.n	8010e5a <ethernet_input+0x106>
        goto free_and_return;
 8010e50:	bf00      	nop
 8010e52:	e002      	b.n	8010e5a <ethernet_input+0x106>
        goto free_and_return;
 8010e54:	bf00      	nop
 8010e56:	e000      	b.n	8010e5a <ethernet_input+0x106>
        goto free_and_return;
 8010e58:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8010e5a:	6878      	ldr	r0, [r7, #4]
 8010e5c:	f7f7 fd36 	bl	80088cc <pbuf_free>
  return ERR_OK;
 8010e60:	2300      	movs	r3, #0
}
 8010e62:	4618      	mov	r0, r3
 8010e64:	3718      	adds	r7, #24
 8010e66:	46bd      	mov	sp, r7
 8010e68:	bd80      	pop	{r7, pc}
 8010e6a:	bf00      	nop
 8010e6c:	0801677c 	.word	0x0801677c

08010e70 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8010e70:	b580      	push	{r7, lr}
 8010e72:	b086      	sub	sp, #24
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	60f8      	str	r0, [r7, #12]
 8010e78:	60b9      	str	r1, [r7, #8]
 8010e7a:	607a      	str	r2, [r7, #4]
 8010e7c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8010e7e:	8c3b      	ldrh	r3, [r7, #32]
 8010e80:	4618      	mov	r0, r3
 8010e82:	f7f6 f9c5 	bl	8007210 <lwip_htons>
 8010e86:	4603      	mov	r3, r0
 8010e88:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8010e8a:	210e      	movs	r1, #14
 8010e8c:	68b8      	ldr	r0, [r7, #8]
 8010e8e:	f7f7 fc87 	bl	80087a0 <pbuf_add_header>
 8010e92:	4603      	mov	r3, r0
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d125      	bne.n	8010ee4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8010e98:	68bb      	ldr	r3, [r7, #8]
 8010e9a:	685b      	ldr	r3, [r3, #4]
 8010e9c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8010e9e:	693b      	ldr	r3, [r7, #16]
 8010ea0:	8afa      	ldrh	r2, [r7, #22]
 8010ea2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8010ea4:	693b      	ldr	r3, [r7, #16]
 8010ea6:	2206      	movs	r2, #6
 8010ea8:	6839      	ldr	r1, [r7, #0]
 8010eaa:	4618      	mov	r0, r3
 8010eac:	f001 f865 	bl	8011f7a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8010eb0:	693b      	ldr	r3, [r7, #16]
 8010eb2:	3306      	adds	r3, #6
 8010eb4:	2206      	movs	r2, #6
 8010eb6:	6879      	ldr	r1, [r7, #4]
 8010eb8:	4618      	mov	r0, r3
 8010eba:	f001 f85e 	bl	8011f7a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010ec4:	2b06      	cmp	r3, #6
 8010ec6:	d006      	beq.n	8010ed6 <ethernet_output+0x66>
 8010ec8:	4b0a      	ldr	r3, [pc, #40]	; (8010ef4 <ethernet_output+0x84>)
 8010eca:	f44f 7299 	mov.w	r2, #306	; 0x132
 8010ece:	490a      	ldr	r1, [pc, #40]	; (8010ef8 <ethernet_output+0x88>)
 8010ed0:	480a      	ldr	r0, [pc, #40]	; (8010efc <ethernet_output+0x8c>)
 8010ed2:	f000 fef1 	bl	8011cb8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	699b      	ldr	r3, [r3, #24]
 8010eda:	68b9      	ldr	r1, [r7, #8]
 8010edc:	68f8      	ldr	r0, [r7, #12]
 8010ede:	4798      	blx	r3
 8010ee0:	4603      	mov	r3, r0
 8010ee2:	e002      	b.n	8010eea <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8010ee4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8010ee6:	f06f 0301 	mvn.w	r3, #1
}
 8010eea:	4618      	mov	r0, r3
 8010eec:	3718      	adds	r7, #24
 8010eee:	46bd      	mov	sp, r7
 8010ef0:	bd80      	pop	{r7, pc}
 8010ef2:	bf00      	nop
 8010ef4:	080165f0 	.word	0x080165f0
 8010ef8:	08016628 	.word	0x08016628
 8010efc:	0801665c 	.word	0x0801665c

08010f00 <atof>:
 8010f00:	2100      	movs	r1, #0
 8010f02:	f000 be0b 	b.w	8011b1c <strtod>
	...

08010f08 <rand>:
 8010f08:	4b16      	ldr	r3, [pc, #88]	; (8010f64 <rand+0x5c>)
 8010f0a:	b510      	push	{r4, lr}
 8010f0c:	681c      	ldr	r4, [r3, #0]
 8010f0e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010f10:	b9b3      	cbnz	r3, 8010f40 <rand+0x38>
 8010f12:	2018      	movs	r0, #24
 8010f14:	f001 fc0a 	bl	801272c <malloc>
 8010f18:	4602      	mov	r2, r0
 8010f1a:	6320      	str	r0, [r4, #48]	; 0x30
 8010f1c:	b920      	cbnz	r0, 8010f28 <rand+0x20>
 8010f1e:	4b12      	ldr	r3, [pc, #72]	; (8010f68 <rand+0x60>)
 8010f20:	4812      	ldr	r0, [pc, #72]	; (8010f6c <rand+0x64>)
 8010f22:	2152      	movs	r1, #82	; 0x52
 8010f24:	f001 f840 	bl	8011fa8 <__assert_func>
 8010f28:	4911      	ldr	r1, [pc, #68]	; (8010f70 <rand+0x68>)
 8010f2a:	4b12      	ldr	r3, [pc, #72]	; (8010f74 <rand+0x6c>)
 8010f2c:	e9c0 1300 	strd	r1, r3, [r0]
 8010f30:	4b11      	ldr	r3, [pc, #68]	; (8010f78 <rand+0x70>)
 8010f32:	6083      	str	r3, [r0, #8]
 8010f34:	230b      	movs	r3, #11
 8010f36:	8183      	strh	r3, [r0, #12]
 8010f38:	2100      	movs	r1, #0
 8010f3a:	2001      	movs	r0, #1
 8010f3c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8010f40:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010f42:	480e      	ldr	r0, [pc, #56]	; (8010f7c <rand+0x74>)
 8010f44:	690b      	ldr	r3, [r1, #16]
 8010f46:	694c      	ldr	r4, [r1, #20]
 8010f48:	4a0d      	ldr	r2, [pc, #52]	; (8010f80 <rand+0x78>)
 8010f4a:	4358      	muls	r0, r3
 8010f4c:	fb02 0004 	mla	r0, r2, r4, r0
 8010f50:	fba3 3202 	umull	r3, r2, r3, r2
 8010f54:	3301      	adds	r3, #1
 8010f56:	eb40 0002 	adc.w	r0, r0, r2
 8010f5a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8010f5e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8010f62:	bd10      	pop	{r4, pc}
 8010f64:	200001f0 	.word	0x200001f0
 8010f68:	0801678a 	.word	0x0801678a
 8010f6c:	080167a1 	.word	0x080167a1
 8010f70:	abcd330e 	.word	0xabcd330e
 8010f74:	e66d1234 	.word	0xe66d1234
 8010f78:	0005deec 	.word	0x0005deec
 8010f7c:	5851f42d 	.word	0x5851f42d
 8010f80:	4c957f2d 	.word	0x4c957f2d

08010f84 <sulp>:
 8010f84:	b570      	push	{r4, r5, r6, lr}
 8010f86:	4604      	mov	r4, r0
 8010f88:	460d      	mov	r5, r1
 8010f8a:	4616      	mov	r6, r2
 8010f8c:	ec45 4b10 	vmov	d0, r4, r5
 8010f90:	f001 fffe 	bl	8012f90 <__ulp>
 8010f94:	b17e      	cbz	r6, 8010fb6 <sulp+0x32>
 8010f96:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010f9a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	dd09      	ble.n	8010fb6 <sulp+0x32>
 8010fa2:	051b      	lsls	r3, r3, #20
 8010fa4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8010fa8:	2000      	movs	r0, #0
 8010faa:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8010fae:	ec41 0b17 	vmov	d7, r0, r1
 8010fb2:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010fb6:	bd70      	pop	{r4, r5, r6, pc}

08010fb8 <_strtod_l>:
 8010fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fbc:	ed2d 8b0e 	vpush	{d8-d14}
 8010fc0:	b097      	sub	sp, #92	; 0x5c
 8010fc2:	4604      	mov	r4, r0
 8010fc4:	920d      	str	r2, [sp, #52]	; 0x34
 8010fc6:	2200      	movs	r2, #0
 8010fc8:	9212      	str	r2, [sp, #72]	; 0x48
 8010fca:	468a      	mov	sl, r1
 8010fcc:	f04f 0800 	mov.w	r8, #0
 8010fd0:	f04f 0900 	mov.w	r9, #0
 8010fd4:	460a      	mov	r2, r1
 8010fd6:	9211      	str	r2, [sp, #68]	; 0x44
 8010fd8:	7811      	ldrb	r1, [r2, #0]
 8010fda:	292b      	cmp	r1, #43	; 0x2b
 8010fdc:	d04c      	beq.n	8011078 <_strtod_l+0xc0>
 8010fde:	d839      	bhi.n	8011054 <_strtod_l+0x9c>
 8010fe0:	290d      	cmp	r1, #13
 8010fe2:	d833      	bhi.n	801104c <_strtod_l+0x94>
 8010fe4:	2908      	cmp	r1, #8
 8010fe6:	d833      	bhi.n	8011050 <_strtod_l+0x98>
 8010fe8:	2900      	cmp	r1, #0
 8010fea:	d03c      	beq.n	8011066 <_strtod_l+0xae>
 8010fec:	2200      	movs	r2, #0
 8010fee:	9208      	str	r2, [sp, #32]
 8010ff0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8010ff2:	7832      	ldrb	r2, [r6, #0]
 8010ff4:	2a30      	cmp	r2, #48	; 0x30
 8010ff6:	f040 80b8 	bne.w	801116a <_strtod_l+0x1b2>
 8010ffa:	7872      	ldrb	r2, [r6, #1]
 8010ffc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8011000:	2a58      	cmp	r2, #88	; 0x58
 8011002:	d170      	bne.n	80110e6 <_strtod_l+0x12e>
 8011004:	9302      	str	r3, [sp, #8]
 8011006:	9b08      	ldr	r3, [sp, #32]
 8011008:	9301      	str	r3, [sp, #4]
 801100a:	ab12      	add	r3, sp, #72	; 0x48
 801100c:	9300      	str	r3, [sp, #0]
 801100e:	4a91      	ldr	r2, [pc, #580]	; (8011254 <_strtod_l+0x29c>)
 8011010:	ab13      	add	r3, sp, #76	; 0x4c
 8011012:	a911      	add	r1, sp, #68	; 0x44
 8011014:	4620      	mov	r0, r4
 8011016:	f001 f899 	bl	801214c <__gethex>
 801101a:	f010 070f 	ands.w	r7, r0, #15
 801101e:	4605      	mov	r5, r0
 8011020:	d005      	beq.n	801102e <_strtod_l+0x76>
 8011022:	2f06      	cmp	r7, #6
 8011024:	d12a      	bne.n	801107c <_strtod_l+0xc4>
 8011026:	3601      	adds	r6, #1
 8011028:	2300      	movs	r3, #0
 801102a:	9611      	str	r6, [sp, #68]	; 0x44
 801102c:	9308      	str	r3, [sp, #32]
 801102e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011030:	2b00      	cmp	r3, #0
 8011032:	f040 8555 	bne.w	8011ae0 <_strtod_l+0xb28>
 8011036:	9b08      	ldr	r3, [sp, #32]
 8011038:	ec49 8b10 	vmov	d0, r8, r9
 801103c:	b1cb      	cbz	r3, 8011072 <_strtod_l+0xba>
 801103e:	eeb1 0b40 	vneg.f64	d0, d0
 8011042:	b017      	add	sp, #92	; 0x5c
 8011044:	ecbd 8b0e 	vpop	{d8-d14}
 8011048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801104c:	2920      	cmp	r1, #32
 801104e:	d1cd      	bne.n	8010fec <_strtod_l+0x34>
 8011050:	3201      	adds	r2, #1
 8011052:	e7c0      	b.n	8010fd6 <_strtod_l+0x1e>
 8011054:	292d      	cmp	r1, #45	; 0x2d
 8011056:	d1c9      	bne.n	8010fec <_strtod_l+0x34>
 8011058:	2101      	movs	r1, #1
 801105a:	9108      	str	r1, [sp, #32]
 801105c:	1c51      	adds	r1, r2, #1
 801105e:	9111      	str	r1, [sp, #68]	; 0x44
 8011060:	7852      	ldrb	r2, [r2, #1]
 8011062:	2a00      	cmp	r2, #0
 8011064:	d1c4      	bne.n	8010ff0 <_strtod_l+0x38>
 8011066:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011068:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 801106c:	2b00      	cmp	r3, #0
 801106e:	f040 8535 	bne.w	8011adc <_strtod_l+0xb24>
 8011072:	ec49 8b10 	vmov	d0, r8, r9
 8011076:	e7e4      	b.n	8011042 <_strtod_l+0x8a>
 8011078:	2100      	movs	r1, #0
 801107a:	e7ee      	b.n	801105a <_strtod_l+0xa2>
 801107c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801107e:	b13a      	cbz	r2, 8011090 <_strtod_l+0xd8>
 8011080:	2135      	movs	r1, #53	; 0x35
 8011082:	a814      	add	r0, sp, #80	; 0x50
 8011084:	f002 f87e 	bl	8013184 <__copybits>
 8011088:	9912      	ldr	r1, [sp, #72]	; 0x48
 801108a:	4620      	mov	r0, r4
 801108c:	f001 fc54 	bl	8012938 <_Bfree>
 8011090:	1e7b      	subs	r3, r7, #1
 8011092:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011094:	2b04      	cmp	r3, #4
 8011096:	d806      	bhi.n	80110a6 <_strtod_l+0xee>
 8011098:	e8df f003 	tbb	[pc, r3]
 801109c:	201d0314 	.word	0x201d0314
 80110a0:	14          	.byte	0x14
 80110a1:	00          	.byte	0x00
 80110a2:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 80110a6:	05eb      	lsls	r3, r5, #23
 80110a8:	bf48      	it	mi
 80110aa:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80110ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80110b2:	0d1b      	lsrs	r3, r3, #20
 80110b4:	051b      	lsls	r3, r3, #20
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d1b9      	bne.n	801102e <_strtod_l+0x76>
 80110ba:	f000 ff31 	bl	8011f20 <__errno>
 80110be:	2322      	movs	r3, #34	; 0x22
 80110c0:	6003      	str	r3, [r0, #0]
 80110c2:	e7b4      	b.n	801102e <_strtod_l+0x76>
 80110c4:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 80110c8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80110cc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80110d0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80110d4:	e7e7      	b.n	80110a6 <_strtod_l+0xee>
 80110d6:	f8df 9184 	ldr.w	r9, [pc, #388]	; 801125c <_strtod_l+0x2a4>
 80110da:	e7e4      	b.n	80110a6 <_strtod_l+0xee>
 80110dc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80110e0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80110e4:	e7df      	b.n	80110a6 <_strtod_l+0xee>
 80110e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80110e8:	1c5a      	adds	r2, r3, #1
 80110ea:	9211      	str	r2, [sp, #68]	; 0x44
 80110ec:	785b      	ldrb	r3, [r3, #1]
 80110ee:	2b30      	cmp	r3, #48	; 0x30
 80110f0:	d0f9      	beq.n	80110e6 <_strtod_l+0x12e>
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d09b      	beq.n	801102e <_strtod_l+0x76>
 80110f6:	2301      	movs	r3, #1
 80110f8:	9306      	str	r3, [sp, #24]
 80110fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80110fc:	9309      	str	r3, [sp, #36]	; 0x24
 80110fe:	2300      	movs	r3, #0
 8011100:	9305      	str	r3, [sp, #20]
 8011102:	9307      	str	r3, [sp, #28]
 8011104:	461e      	mov	r6, r3
 8011106:	220a      	movs	r2, #10
 8011108:	9811      	ldr	r0, [sp, #68]	; 0x44
 801110a:	7805      	ldrb	r5, [r0, #0]
 801110c:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8011110:	b2d9      	uxtb	r1, r3
 8011112:	2909      	cmp	r1, #9
 8011114:	d92b      	bls.n	801116e <_strtod_l+0x1b6>
 8011116:	4950      	ldr	r1, [pc, #320]	; (8011258 <_strtod_l+0x2a0>)
 8011118:	2201      	movs	r2, #1
 801111a:	f000 fe3a 	bl	8011d92 <strncmp>
 801111e:	2800      	cmp	r0, #0
 8011120:	d035      	beq.n	801118e <_strtod_l+0x1d6>
 8011122:	2000      	movs	r0, #0
 8011124:	462a      	mov	r2, r5
 8011126:	4633      	mov	r3, r6
 8011128:	4683      	mov	fp, r0
 801112a:	4601      	mov	r1, r0
 801112c:	2a65      	cmp	r2, #101	; 0x65
 801112e:	d001      	beq.n	8011134 <_strtod_l+0x17c>
 8011130:	2a45      	cmp	r2, #69	; 0x45
 8011132:	d118      	bne.n	8011166 <_strtod_l+0x1ae>
 8011134:	b91b      	cbnz	r3, 801113e <_strtod_l+0x186>
 8011136:	9b06      	ldr	r3, [sp, #24]
 8011138:	4303      	orrs	r3, r0
 801113a:	d094      	beq.n	8011066 <_strtod_l+0xae>
 801113c:	2300      	movs	r3, #0
 801113e:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 8011142:	f10a 0201 	add.w	r2, sl, #1
 8011146:	9211      	str	r2, [sp, #68]	; 0x44
 8011148:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801114c:	2a2b      	cmp	r2, #43	; 0x2b
 801114e:	d075      	beq.n	801123c <_strtod_l+0x284>
 8011150:	2a2d      	cmp	r2, #45	; 0x2d
 8011152:	d07b      	beq.n	801124c <_strtod_l+0x294>
 8011154:	f04f 0e00 	mov.w	lr, #0
 8011158:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 801115c:	2d09      	cmp	r5, #9
 801115e:	f240 8083 	bls.w	8011268 <_strtod_l+0x2b0>
 8011162:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8011166:	2500      	movs	r5, #0
 8011168:	e09e      	b.n	80112a8 <_strtod_l+0x2f0>
 801116a:	2300      	movs	r3, #0
 801116c:	e7c4      	b.n	80110f8 <_strtod_l+0x140>
 801116e:	2e08      	cmp	r6, #8
 8011170:	bfd5      	itete	le
 8011172:	9907      	ldrle	r1, [sp, #28]
 8011174:	9905      	ldrgt	r1, [sp, #20]
 8011176:	fb02 3301 	mlale	r3, r2, r1, r3
 801117a:	fb02 3301 	mlagt	r3, r2, r1, r3
 801117e:	f100 0001 	add.w	r0, r0, #1
 8011182:	bfd4      	ite	le
 8011184:	9307      	strle	r3, [sp, #28]
 8011186:	9305      	strgt	r3, [sp, #20]
 8011188:	3601      	adds	r6, #1
 801118a:	9011      	str	r0, [sp, #68]	; 0x44
 801118c:	e7bc      	b.n	8011108 <_strtod_l+0x150>
 801118e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011190:	1c5a      	adds	r2, r3, #1
 8011192:	9211      	str	r2, [sp, #68]	; 0x44
 8011194:	785a      	ldrb	r2, [r3, #1]
 8011196:	b3ae      	cbz	r6, 8011204 <_strtod_l+0x24c>
 8011198:	4683      	mov	fp, r0
 801119a:	4633      	mov	r3, r6
 801119c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80111a0:	2909      	cmp	r1, #9
 80111a2:	d912      	bls.n	80111ca <_strtod_l+0x212>
 80111a4:	2101      	movs	r1, #1
 80111a6:	e7c1      	b.n	801112c <_strtod_l+0x174>
 80111a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80111aa:	1c5a      	adds	r2, r3, #1
 80111ac:	9211      	str	r2, [sp, #68]	; 0x44
 80111ae:	785a      	ldrb	r2, [r3, #1]
 80111b0:	3001      	adds	r0, #1
 80111b2:	2a30      	cmp	r2, #48	; 0x30
 80111b4:	d0f8      	beq.n	80111a8 <_strtod_l+0x1f0>
 80111b6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80111ba:	2b08      	cmp	r3, #8
 80111bc:	f200 8495 	bhi.w	8011aea <_strtod_l+0xb32>
 80111c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80111c2:	9309      	str	r3, [sp, #36]	; 0x24
 80111c4:	4683      	mov	fp, r0
 80111c6:	2000      	movs	r0, #0
 80111c8:	4603      	mov	r3, r0
 80111ca:	3a30      	subs	r2, #48	; 0x30
 80111cc:	f100 0101 	add.w	r1, r0, #1
 80111d0:	d012      	beq.n	80111f8 <_strtod_l+0x240>
 80111d2:	448b      	add	fp, r1
 80111d4:	eb00 0c03 	add.w	ip, r0, r3
 80111d8:	4619      	mov	r1, r3
 80111da:	250a      	movs	r5, #10
 80111dc:	4561      	cmp	r1, ip
 80111de:	d113      	bne.n	8011208 <_strtod_l+0x250>
 80111e0:	1819      	adds	r1, r3, r0
 80111e2:	2908      	cmp	r1, #8
 80111e4:	f103 0301 	add.w	r3, r3, #1
 80111e8:	4403      	add	r3, r0
 80111ea:	dc1b      	bgt.n	8011224 <_strtod_l+0x26c>
 80111ec:	9807      	ldr	r0, [sp, #28]
 80111ee:	210a      	movs	r1, #10
 80111f0:	fb01 2200 	mla	r2, r1, r0, r2
 80111f4:	9207      	str	r2, [sp, #28]
 80111f6:	2100      	movs	r1, #0
 80111f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80111fa:	1c50      	adds	r0, r2, #1
 80111fc:	9011      	str	r0, [sp, #68]	; 0x44
 80111fe:	7852      	ldrb	r2, [r2, #1]
 8011200:	4608      	mov	r0, r1
 8011202:	e7cb      	b.n	801119c <_strtod_l+0x1e4>
 8011204:	4630      	mov	r0, r6
 8011206:	e7d4      	b.n	80111b2 <_strtod_l+0x1fa>
 8011208:	2908      	cmp	r1, #8
 801120a:	f101 0101 	add.w	r1, r1, #1
 801120e:	dc03      	bgt.n	8011218 <_strtod_l+0x260>
 8011210:	9f07      	ldr	r7, [sp, #28]
 8011212:	436f      	muls	r7, r5
 8011214:	9707      	str	r7, [sp, #28]
 8011216:	e7e1      	b.n	80111dc <_strtod_l+0x224>
 8011218:	2910      	cmp	r1, #16
 801121a:	bfde      	ittt	le
 801121c:	9f05      	ldrle	r7, [sp, #20]
 801121e:	436f      	mulle	r7, r5
 8011220:	9705      	strle	r7, [sp, #20]
 8011222:	e7db      	b.n	80111dc <_strtod_l+0x224>
 8011224:	2b10      	cmp	r3, #16
 8011226:	bfdf      	itttt	le
 8011228:	9805      	ldrle	r0, [sp, #20]
 801122a:	210a      	movle	r1, #10
 801122c:	fb01 2200 	mlale	r2, r1, r0, r2
 8011230:	9205      	strle	r2, [sp, #20]
 8011232:	e7e0      	b.n	80111f6 <_strtod_l+0x23e>
 8011234:	f04f 0b00 	mov.w	fp, #0
 8011238:	2101      	movs	r1, #1
 801123a:	e77c      	b.n	8011136 <_strtod_l+0x17e>
 801123c:	f04f 0e00 	mov.w	lr, #0
 8011240:	f10a 0202 	add.w	r2, sl, #2
 8011244:	9211      	str	r2, [sp, #68]	; 0x44
 8011246:	f89a 2002 	ldrb.w	r2, [sl, #2]
 801124a:	e785      	b.n	8011158 <_strtod_l+0x1a0>
 801124c:	f04f 0e01 	mov.w	lr, #1
 8011250:	e7f6      	b.n	8011240 <_strtod_l+0x288>
 8011252:	bf00      	nop
 8011254:	08016808 	.word	0x08016808
 8011258:	080167f9 	.word	0x080167f9
 801125c:	7ff00000 	.word	0x7ff00000
 8011260:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011262:	1c55      	adds	r5, r2, #1
 8011264:	9511      	str	r5, [sp, #68]	; 0x44
 8011266:	7852      	ldrb	r2, [r2, #1]
 8011268:	2a30      	cmp	r2, #48	; 0x30
 801126a:	d0f9      	beq.n	8011260 <_strtod_l+0x2a8>
 801126c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8011270:	2d08      	cmp	r5, #8
 8011272:	f63f af78 	bhi.w	8011166 <_strtod_l+0x1ae>
 8011276:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 801127a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801127c:	920a      	str	r2, [sp, #40]	; 0x28
 801127e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011280:	1c55      	adds	r5, r2, #1
 8011282:	9511      	str	r5, [sp, #68]	; 0x44
 8011284:	7852      	ldrb	r2, [r2, #1]
 8011286:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 801128a:	2f09      	cmp	r7, #9
 801128c:	d937      	bls.n	80112fe <_strtod_l+0x346>
 801128e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8011290:	1bed      	subs	r5, r5, r7
 8011292:	2d08      	cmp	r5, #8
 8011294:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8011298:	dc02      	bgt.n	80112a0 <_strtod_l+0x2e8>
 801129a:	4565      	cmp	r5, ip
 801129c:	bfa8      	it	ge
 801129e:	4665      	movge	r5, ip
 80112a0:	f1be 0f00 	cmp.w	lr, #0
 80112a4:	d000      	beq.n	80112a8 <_strtod_l+0x2f0>
 80112a6:	426d      	negs	r5, r5
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d14d      	bne.n	8011348 <_strtod_l+0x390>
 80112ac:	9b06      	ldr	r3, [sp, #24]
 80112ae:	4303      	orrs	r3, r0
 80112b0:	f47f aebd 	bne.w	801102e <_strtod_l+0x76>
 80112b4:	2900      	cmp	r1, #0
 80112b6:	f47f aed6 	bne.w	8011066 <_strtod_l+0xae>
 80112ba:	2a69      	cmp	r2, #105	; 0x69
 80112bc:	d027      	beq.n	801130e <_strtod_l+0x356>
 80112be:	dc24      	bgt.n	801130a <_strtod_l+0x352>
 80112c0:	2a49      	cmp	r2, #73	; 0x49
 80112c2:	d024      	beq.n	801130e <_strtod_l+0x356>
 80112c4:	2a4e      	cmp	r2, #78	; 0x4e
 80112c6:	f47f aece 	bne.w	8011066 <_strtod_l+0xae>
 80112ca:	4995      	ldr	r1, [pc, #596]	; (8011520 <_strtod_l+0x568>)
 80112cc:	a811      	add	r0, sp, #68	; 0x44
 80112ce:	f001 f97d 	bl	80125cc <__match>
 80112d2:	2800      	cmp	r0, #0
 80112d4:	f43f aec7 	beq.w	8011066 <_strtod_l+0xae>
 80112d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80112da:	781b      	ldrb	r3, [r3, #0]
 80112dc:	2b28      	cmp	r3, #40	; 0x28
 80112de:	d12d      	bne.n	801133c <_strtod_l+0x384>
 80112e0:	4990      	ldr	r1, [pc, #576]	; (8011524 <_strtod_l+0x56c>)
 80112e2:	aa14      	add	r2, sp, #80	; 0x50
 80112e4:	a811      	add	r0, sp, #68	; 0x44
 80112e6:	f001 f985 	bl	80125f4 <__hexnan>
 80112ea:	2805      	cmp	r0, #5
 80112ec:	d126      	bne.n	801133c <_strtod_l+0x384>
 80112ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80112f0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80112f4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80112f8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80112fc:	e697      	b.n	801102e <_strtod_l+0x76>
 80112fe:	250a      	movs	r5, #10
 8011300:	fb05 2c0c 	mla	ip, r5, ip, r2
 8011304:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8011308:	e7b9      	b.n	801127e <_strtod_l+0x2c6>
 801130a:	2a6e      	cmp	r2, #110	; 0x6e
 801130c:	e7db      	b.n	80112c6 <_strtod_l+0x30e>
 801130e:	4986      	ldr	r1, [pc, #536]	; (8011528 <_strtod_l+0x570>)
 8011310:	a811      	add	r0, sp, #68	; 0x44
 8011312:	f001 f95b 	bl	80125cc <__match>
 8011316:	2800      	cmp	r0, #0
 8011318:	f43f aea5 	beq.w	8011066 <_strtod_l+0xae>
 801131c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801131e:	4983      	ldr	r1, [pc, #524]	; (801152c <_strtod_l+0x574>)
 8011320:	3b01      	subs	r3, #1
 8011322:	a811      	add	r0, sp, #68	; 0x44
 8011324:	9311      	str	r3, [sp, #68]	; 0x44
 8011326:	f001 f951 	bl	80125cc <__match>
 801132a:	b910      	cbnz	r0, 8011332 <_strtod_l+0x37a>
 801132c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801132e:	3301      	adds	r3, #1
 8011330:	9311      	str	r3, [sp, #68]	; 0x44
 8011332:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8011540 <_strtod_l+0x588>
 8011336:	f04f 0800 	mov.w	r8, #0
 801133a:	e678      	b.n	801102e <_strtod_l+0x76>
 801133c:	487c      	ldr	r0, [pc, #496]	; (8011530 <_strtod_l+0x578>)
 801133e:	f000 fe2b 	bl	8011f98 <nan>
 8011342:	ec59 8b10 	vmov	r8, r9, d0
 8011346:	e672      	b.n	801102e <_strtod_l+0x76>
 8011348:	eddd 7a07 	vldr	s15, [sp, #28]
 801134c:	eba5 020b 	sub.w	r2, r5, fp
 8011350:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011354:	2e00      	cmp	r6, #0
 8011356:	bf08      	it	eq
 8011358:	461e      	moveq	r6, r3
 801135a:	2b10      	cmp	r3, #16
 801135c:	9206      	str	r2, [sp, #24]
 801135e:	461a      	mov	r2, r3
 8011360:	bfa8      	it	ge
 8011362:	2210      	movge	r2, #16
 8011364:	2b09      	cmp	r3, #9
 8011366:	ec59 8b17 	vmov	r8, r9, d7
 801136a:	dd0c      	ble.n	8011386 <_strtod_l+0x3ce>
 801136c:	4971      	ldr	r1, [pc, #452]	; (8011534 <_strtod_l+0x57c>)
 801136e:	eddd 6a05 	vldr	s13, [sp, #20]
 8011372:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8011376:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 801137a:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 801137e:	eea7 6b05 	vfma.f64	d6, d7, d5
 8011382:	ec59 8b16 	vmov	r8, r9, d6
 8011386:	2b0f      	cmp	r3, #15
 8011388:	dc37      	bgt.n	80113fa <_strtod_l+0x442>
 801138a:	9906      	ldr	r1, [sp, #24]
 801138c:	2900      	cmp	r1, #0
 801138e:	f43f ae4e 	beq.w	801102e <_strtod_l+0x76>
 8011392:	dd23      	ble.n	80113dc <_strtod_l+0x424>
 8011394:	2916      	cmp	r1, #22
 8011396:	dc0b      	bgt.n	80113b0 <_strtod_l+0x3f8>
 8011398:	4b66      	ldr	r3, [pc, #408]	; (8011534 <_strtod_l+0x57c>)
 801139a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801139e:	ed93 7b00 	vldr	d7, [r3]
 80113a2:	ec49 8b16 	vmov	d6, r8, r9
 80113a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80113aa:	ec59 8b17 	vmov	r8, r9, d7
 80113ae:	e63e      	b.n	801102e <_strtod_l+0x76>
 80113b0:	9806      	ldr	r0, [sp, #24]
 80113b2:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80113b6:	4281      	cmp	r1, r0
 80113b8:	db1f      	blt.n	80113fa <_strtod_l+0x442>
 80113ba:	4a5e      	ldr	r2, [pc, #376]	; (8011534 <_strtod_l+0x57c>)
 80113bc:	f1c3 030f 	rsb	r3, r3, #15
 80113c0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80113c4:	ed91 7b00 	vldr	d7, [r1]
 80113c8:	ec49 8b16 	vmov	d6, r8, r9
 80113cc:	1ac3      	subs	r3, r0, r3
 80113ce:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80113d2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80113d6:	ed92 6b00 	vldr	d6, [r2]
 80113da:	e7e4      	b.n	80113a6 <_strtod_l+0x3ee>
 80113dc:	9906      	ldr	r1, [sp, #24]
 80113de:	3116      	adds	r1, #22
 80113e0:	db0b      	blt.n	80113fa <_strtod_l+0x442>
 80113e2:	4b54      	ldr	r3, [pc, #336]	; (8011534 <_strtod_l+0x57c>)
 80113e4:	ebab 0505 	sub.w	r5, fp, r5
 80113e8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80113ec:	ed95 7b00 	vldr	d7, [r5]
 80113f0:	ec49 8b16 	vmov	d6, r8, r9
 80113f4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80113f8:	e7d7      	b.n	80113aa <_strtod_l+0x3f2>
 80113fa:	9906      	ldr	r1, [sp, #24]
 80113fc:	1a9a      	subs	r2, r3, r2
 80113fe:	440a      	add	r2, r1
 8011400:	2a00      	cmp	r2, #0
 8011402:	dd6e      	ble.n	80114e2 <_strtod_l+0x52a>
 8011404:	f012 000f 	ands.w	r0, r2, #15
 8011408:	d00a      	beq.n	8011420 <_strtod_l+0x468>
 801140a:	494a      	ldr	r1, [pc, #296]	; (8011534 <_strtod_l+0x57c>)
 801140c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8011410:	ed91 7b00 	vldr	d7, [r1]
 8011414:	ec49 8b16 	vmov	d6, r8, r9
 8011418:	ee27 7b06 	vmul.f64	d7, d7, d6
 801141c:	ec59 8b17 	vmov	r8, r9, d7
 8011420:	f032 020f 	bics.w	r2, r2, #15
 8011424:	d04e      	beq.n	80114c4 <_strtod_l+0x50c>
 8011426:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 801142a:	dd22      	ble.n	8011472 <_strtod_l+0x4ba>
 801142c:	2500      	movs	r5, #0
 801142e:	462e      	mov	r6, r5
 8011430:	9507      	str	r5, [sp, #28]
 8011432:	462f      	mov	r7, r5
 8011434:	2322      	movs	r3, #34	; 0x22
 8011436:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8011540 <_strtod_l+0x588>
 801143a:	6023      	str	r3, [r4, #0]
 801143c:	f04f 0800 	mov.w	r8, #0
 8011440:	9b07      	ldr	r3, [sp, #28]
 8011442:	2b00      	cmp	r3, #0
 8011444:	f43f adf3 	beq.w	801102e <_strtod_l+0x76>
 8011448:	9912      	ldr	r1, [sp, #72]	; 0x48
 801144a:	4620      	mov	r0, r4
 801144c:	f001 fa74 	bl	8012938 <_Bfree>
 8011450:	4639      	mov	r1, r7
 8011452:	4620      	mov	r0, r4
 8011454:	f001 fa70 	bl	8012938 <_Bfree>
 8011458:	4631      	mov	r1, r6
 801145a:	4620      	mov	r0, r4
 801145c:	f001 fa6c 	bl	8012938 <_Bfree>
 8011460:	9907      	ldr	r1, [sp, #28]
 8011462:	4620      	mov	r0, r4
 8011464:	f001 fa68 	bl	8012938 <_Bfree>
 8011468:	4629      	mov	r1, r5
 801146a:	4620      	mov	r0, r4
 801146c:	f001 fa64 	bl	8012938 <_Bfree>
 8011470:	e5dd      	b.n	801102e <_strtod_l+0x76>
 8011472:	2000      	movs	r0, #0
 8011474:	ec49 8b17 	vmov	d7, r8, r9
 8011478:	4f2f      	ldr	r7, [pc, #188]	; (8011538 <_strtod_l+0x580>)
 801147a:	1112      	asrs	r2, r2, #4
 801147c:	4601      	mov	r1, r0
 801147e:	2a01      	cmp	r2, #1
 8011480:	dc23      	bgt.n	80114ca <_strtod_l+0x512>
 8011482:	b108      	cbz	r0, 8011488 <_strtod_l+0x4d0>
 8011484:	ec59 8b17 	vmov	r8, r9, d7
 8011488:	4a2b      	ldr	r2, [pc, #172]	; (8011538 <_strtod_l+0x580>)
 801148a:	482c      	ldr	r0, [pc, #176]	; (801153c <_strtod_l+0x584>)
 801148c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8011490:	ed92 7b00 	vldr	d7, [r2]
 8011494:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8011498:	ec49 8b16 	vmov	d6, r8, r9
 801149c:	4a28      	ldr	r2, [pc, #160]	; (8011540 <_strtod_l+0x588>)
 801149e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80114a2:	ee17 1a90 	vmov	r1, s15
 80114a6:	400a      	ands	r2, r1
 80114a8:	4282      	cmp	r2, r0
 80114aa:	ec59 8b17 	vmov	r8, r9, d7
 80114ae:	d8bd      	bhi.n	801142c <_strtod_l+0x474>
 80114b0:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80114b4:	4282      	cmp	r2, r0
 80114b6:	bf86      	itte	hi
 80114b8:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 8011544 <_strtod_l+0x58c>
 80114bc:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 80114c0:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 80114c4:	2200      	movs	r2, #0
 80114c6:	9205      	str	r2, [sp, #20]
 80114c8:	e076      	b.n	80115b8 <_strtod_l+0x600>
 80114ca:	f012 0f01 	tst.w	r2, #1
 80114ce:	d004      	beq.n	80114da <_strtod_l+0x522>
 80114d0:	ed97 6b00 	vldr	d6, [r7]
 80114d4:	2001      	movs	r0, #1
 80114d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80114da:	3101      	adds	r1, #1
 80114dc:	1052      	asrs	r2, r2, #1
 80114de:	3708      	adds	r7, #8
 80114e0:	e7cd      	b.n	801147e <_strtod_l+0x4c6>
 80114e2:	d0ef      	beq.n	80114c4 <_strtod_l+0x50c>
 80114e4:	4252      	negs	r2, r2
 80114e6:	f012 000f 	ands.w	r0, r2, #15
 80114ea:	d00a      	beq.n	8011502 <_strtod_l+0x54a>
 80114ec:	4911      	ldr	r1, [pc, #68]	; (8011534 <_strtod_l+0x57c>)
 80114ee:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80114f2:	ed91 7b00 	vldr	d7, [r1]
 80114f6:	ec49 8b16 	vmov	d6, r8, r9
 80114fa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80114fe:	ec59 8b17 	vmov	r8, r9, d7
 8011502:	1112      	asrs	r2, r2, #4
 8011504:	d0de      	beq.n	80114c4 <_strtod_l+0x50c>
 8011506:	2a1f      	cmp	r2, #31
 8011508:	dd1e      	ble.n	8011548 <_strtod_l+0x590>
 801150a:	2500      	movs	r5, #0
 801150c:	462e      	mov	r6, r5
 801150e:	9507      	str	r5, [sp, #28]
 8011510:	462f      	mov	r7, r5
 8011512:	2322      	movs	r3, #34	; 0x22
 8011514:	f04f 0800 	mov.w	r8, #0
 8011518:	f04f 0900 	mov.w	r9, #0
 801151c:	6023      	str	r3, [r4, #0]
 801151e:	e78f      	b.n	8011440 <_strtod_l+0x488>
 8011520:	08016804 	.word	0x08016804
 8011524:	0801681c 	.word	0x0801681c
 8011528:	080167fb 	.word	0x080167fb
 801152c:	080167fe 	.word	0x080167fe
 8011530:	080169f6 	.word	0x080169f6
 8011534:	08016af0 	.word	0x08016af0
 8011538:	08016ac8 	.word	0x08016ac8
 801153c:	7ca00000 	.word	0x7ca00000
 8011540:	7ff00000 	.word	0x7ff00000
 8011544:	7fefffff 	.word	0x7fefffff
 8011548:	f012 0110 	ands.w	r1, r2, #16
 801154c:	bf18      	it	ne
 801154e:	216a      	movne	r1, #106	; 0x6a
 8011550:	9105      	str	r1, [sp, #20]
 8011552:	ec49 8b17 	vmov	d7, r8, r9
 8011556:	49be      	ldr	r1, [pc, #760]	; (8011850 <_strtod_l+0x898>)
 8011558:	2000      	movs	r0, #0
 801155a:	07d7      	lsls	r7, r2, #31
 801155c:	d504      	bpl.n	8011568 <_strtod_l+0x5b0>
 801155e:	ed91 6b00 	vldr	d6, [r1]
 8011562:	2001      	movs	r0, #1
 8011564:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011568:	1052      	asrs	r2, r2, #1
 801156a:	f101 0108 	add.w	r1, r1, #8
 801156e:	d1f4      	bne.n	801155a <_strtod_l+0x5a2>
 8011570:	b108      	cbz	r0, 8011576 <_strtod_l+0x5be>
 8011572:	ec59 8b17 	vmov	r8, r9, d7
 8011576:	9a05      	ldr	r2, [sp, #20]
 8011578:	b1ba      	cbz	r2, 80115aa <_strtod_l+0x5f2>
 801157a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 801157e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8011582:	2a00      	cmp	r2, #0
 8011584:	4648      	mov	r0, r9
 8011586:	dd10      	ble.n	80115aa <_strtod_l+0x5f2>
 8011588:	2a1f      	cmp	r2, #31
 801158a:	f340 812c 	ble.w	80117e6 <_strtod_l+0x82e>
 801158e:	2a34      	cmp	r2, #52	; 0x34
 8011590:	bfde      	ittt	le
 8011592:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8011596:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 801159a:	408a      	lslle	r2, r1
 801159c:	f04f 0800 	mov.w	r8, #0
 80115a0:	bfcc      	ite	gt
 80115a2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80115a6:	ea02 0900 	andle.w	r9, r2, r0
 80115aa:	ec49 8b17 	vmov	d7, r8, r9
 80115ae:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80115b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115b6:	d0a8      	beq.n	801150a <_strtod_l+0x552>
 80115b8:	9a07      	ldr	r2, [sp, #28]
 80115ba:	9200      	str	r2, [sp, #0]
 80115bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80115be:	4632      	mov	r2, r6
 80115c0:	4620      	mov	r0, r4
 80115c2:	f001 fa21 	bl	8012a08 <__s2b>
 80115c6:	9007      	str	r0, [sp, #28]
 80115c8:	2800      	cmp	r0, #0
 80115ca:	f43f af2f 	beq.w	801142c <_strtod_l+0x474>
 80115ce:	9a06      	ldr	r2, [sp, #24]
 80115d0:	2a00      	cmp	r2, #0
 80115d2:	ebab 0305 	sub.w	r3, fp, r5
 80115d6:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8011830 <_strtod_l+0x878>
 80115da:	bfa8      	it	ge
 80115dc:	2300      	movge	r3, #0
 80115de:	ed9f ab96 	vldr	d10, [pc, #600]	; 8011838 <_strtod_l+0x880>
 80115e2:	ed9f bb97 	vldr	d11, [pc, #604]	; 8011840 <_strtod_l+0x888>
 80115e6:	9309      	str	r3, [sp, #36]	; 0x24
 80115e8:	2500      	movs	r5, #0
 80115ea:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80115ee:	930c      	str	r3, [sp, #48]	; 0x30
 80115f0:	462e      	mov	r6, r5
 80115f2:	9b07      	ldr	r3, [sp, #28]
 80115f4:	4620      	mov	r0, r4
 80115f6:	6859      	ldr	r1, [r3, #4]
 80115f8:	f001 f95e 	bl	80128b8 <_Balloc>
 80115fc:	4607      	mov	r7, r0
 80115fe:	2800      	cmp	r0, #0
 8011600:	f43f af18 	beq.w	8011434 <_strtod_l+0x47c>
 8011604:	9b07      	ldr	r3, [sp, #28]
 8011606:	691a      	ldr	r2, [r3, #16]
 8011608:	3202      	adds	r2, #2
 801160a:	f103 010c 	add.w	r1, r3, #12
 801160e:	0092      	lsls	r2, r2, #2
 8011610:	300c      	adds	r0, #12
 8011612:	f000 fcb2 	bl	8011f7a <memcpy>
 8011616:	ec49 8b10 	vmov	d0, r8, r9
 801161a:	aa14      	add	r2, sp, #80	; 0x50
 801161c:	a913      	add	r1, sp, #76	; 0x4c
 801161e:	4620      	mov	r0, r4
 8011620:	f001 fd26 	bl	8013070 <__d2b>
 8011624:	ec49 8b18 	vmov	d8, r8, r9
 8011628:	9012      	str	r0, [sp, #72]	; 0x48
 801162a:	2800      	cmp	r0, #0
 801162c:	f43f af02 	beq.w	8011434 <_strtod_l+0x47c>
 8011630:	2101      	movs	r1, #1
 8011632:	4620      	mov	r0, r4
 8011634:	f001 fa80 	bl	8012b38 <__i2b>
 8011638:	4606      	mov	r6, r0
 801163a:	2800      	cmp	r0, #0
 801163c:	f43f aefa 	beq.w	8011434 <_strtod_l+0x47c>
 8011640:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011642:	9914      	ldr	r1, [sp, #80]	; 0x50
 8011644:	2b00      	cmp	r3, #0
 8011646:	bfab      	itete	ge
 8011648:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 801164a:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 801164c:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8011650:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8011654:	bfac      	ite	ge
 8011656:	eb03 0b02 	addge.w	fp, r3, r2
 801165a:	eba2 0a03 	sublt.w	sl, r2, r3
 801165e:	9a05      	ldr	r2, [sp, #20]
 8011660:	1a9b      	subs	r3, r3, r2
 8011662:	440b      	add	r3, r1
 8011664:	4a7b      	ldr	r2, [pc, #492]	; (8011854 <_strtod_l+0x89c>)
 8011666:	3b01      	subs	r3, #1
 8011668:	4293      	cmp	r3, r2
 801166a:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 801166e:	f280 80cd 	bge.w	801180c <_strtod_l+0x854>
 8011672:	1ad2      	subs	r2, r2, r3
 8011674:	2a1f      	cmp	r2, #31
 8011676:	eba1 0102 	sub.w	r1, r1, r2
 801167a:	f04f 0001 	mov.w	r0, #1
 801167e:	f300 80b9 	bgt.w	80117f4 <_strtod_l+0x83c>
 8011682:	fa00 f302 	lsl.w	r3, r0, r2
 8011686:	930b      	str	r3, [sp, #44]	; 0x2c
 8011688:	2300      	movs	r3, #0
 801168a:	930a      	str	r3, [sp, #40]	; 0x28
 801168c:	eb0b 0301 	add.w	r3, fp, r1
 8011690:	9a05      	ldr	r2, [sp, #20]
 8011692:	459b      	cmp	fp, r3
 8011694:	448a      	add	sl, r1
 8011696:	4492      	add	sl, r2
 8011698:	465a      	mov	r2, fp
 801169a:	bfa8      	it	ge
 801169c:	461a      	movge	r2, r3
 801169e:	4552      	cmp	r2, sl
 80116a0:	bfa8      	it	ge
 80116a2:	4652      	movge	r2, sl
 80116a4:	2a00      	cmp	r2, #0
 80116a6:	bfc2      	ittt	gt
 80116a8:	1a9b      	subgt	r3, r3, r2
 80116aa:	ebaa 0a02 	subgt.w	sl, sl, r2
 80116ae:	ebab 0b02 	subgt.w	fp, fp, r2
 80116b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80116b4:	2a00      	cmp	r2, #0
 80116b6:	dd18      	ble.n	80116ea <_strtod_l+0x732>
 80116b8:	4631      	mov	r1, r6
 80116ba:	4620      	mov	r0, r4
 80116bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80116be:	f001 fafb 	bl	8012cb8 <__pow5mult>
 80116c2:	4606      	mov	r6, r0
 80116c4:	2800      	cmp	r0, #0
 80116c6:	f43f aeb5 	beq.w	8011434 <_strtod_l+0x47c>
 80116ca:	4601      	mov	r1, r0
 80116cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80116ce:	4620      	mov	r0, r4
 80116d0:	f001 fa48 	bl	8012b64 <__multiply>
 80116d4:	900e      	str	r0, [sp, #56]	; 0x38
 80116d6:	2800      	cmp	r0, #0
 80116d8:	f43f aeac 	beq.w	8011434 <_strtod_l+0x47c>
 80116dc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80116de:	4620      	mov	r0, r4
 80116e0:	f001 f92a 	bl	8012938 <_Bfree>
 80116e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80116e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80116e8:	9212      	str	r2, [sp, #72]	; 0x48
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	f300 8093 	bgt.w	8011816 <_strtod_l+0x85e>
 80116f0:	9b06      	ldr	r3, [sp, #24]
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	dd08      	ble.n	8011708 <_strtod_l+0x750>
 80116f6:	4639      	mov	r1, r7
 80116f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80116fa:	4620      	mov	r0, r4
 80116fc:	f001 fadc 	bl	8012cb8 <__pow5mult>
 8011700:	4607      	mov	r7, r0
 8011702:	2800      	cmp	r0, #0
 8011704:	f43f ae96 	beq.w	8011434 <_strtod_l+0x47c>
 8011708:	f1ba 0f00 	cmp.w	sl, #0
 801170c:	dd08      	ble.n	8011720 <_strtod_l+0x768>
 801170e:	4639      	mov	r1, r7
 8011710:	4652      	mov	r2, sl
 8011712:	4620      	mov	r0, r4
 8011714:	f001 fb2a 	bl	8012d6c <__lshift>
 8011718:	4607      	mov	r7, r0
 801171a:	2800      	cmp	r0, #0
 801171c:	f43f ae8a 	beq.w	8011434 <_strtod_l+0x47c>
 8011720:	f1bb 0f00 	cmp.w	fp, #0
 8011724:	dd08      	ble.n	8011738 <_strtod_l+0x780>
 8011726:	4631      	mov	r1, r6
 8011728:	465a      	mov	r2, fp
 801172a:	4620      	mov	r0, r4
 801172c:	f001 fb1e 	bl	8012d6c <__lshift>
 8011730:	4606      	mov	r6, r0
 8011732:	2800      	cmp	r0, #0
 8011734:	f43f ae7e 	beq.w	8011434 <_strtod_l+0x47c>
 8011738:	9912      	ldr	r1, [sp, #72]	; 0x48
 801173a:	463a      	mov	r2, r7
 801173c:	4620      	mov	r0, r4
 801173e:	f001 fb9d 	bl	8012e7c <__mdiff>
 8011742:	4605      	mov	r5, r0
 8011744:	2800      	cmp	r0, #0
 8011746:	f43f ae75 	beq.w	8011434 <_strtod_l+0x47c>
 801174a:	2300      	movs	r3, #0
 801174c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8011750:	60c3      	str	r3, [r0, #12]
 8011752:	4631      	mov	r1, r6
 8011754:	f001 fb76 	bl	8012e44 <__mcmp>
 8011758:	2800      	cmp	r0, #0
 801175a:	da7f      	bge.n	801185c <_strtod_l+0x8a4>
 801175c:	ea5a 0a08 	orrs.w	sl, sl, r8
 8011760:	f040 80a5 	bne.w	80118ae <_strtod_l+0x8f6>
 8011764:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011768:	2b00      	cmp	r3, #0
 801176a:	f040 80a0 	bne.w	80118ae <_strtod_l+0x8f6>
 801176e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011772:	0d1b      	lsrs	r3, r3, #20
 8011774:	051b      	lsls	r3, r3, #20
 8011776:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801177a:	f240 8098 	bls.w	80118ae <_strtod_l+0x8f6>
 801177e:	696b      	ldr	r3, [r5, #20]
 8011780:	b91b      	cbnz	r3, 801178a <_strtod_l+0x7d2>
 8011782:	692b      	ldr	r3, [r5, #16]
 8011784:	2b01      	cmp	r3, #1
 8011786:	f340 8092 	ble.w	80118ae <_strtod_l+0x8f6>
 801178a:	4629      	mov	r1, r5
 801178c:	2201      	movs	r2, #1
 801178e:	4620      	mov	r0, r4
 8011790:	f001 faec 	bl	8012d6c <__lshift>
 8011794:	4631      	mov	r1, r6
 8011796:	4605      	mov	r5, r0
 8011798:	f001 fb54 	bl	8012e44 <__mcmp>
 801179c:	2800      	cmp	r0, #0
 801179e:	f340 8086 	ble.w	80118ae <_strtod_l+0x8f6>
 80117a2:	9905      	ldr	r1, [sp, #20]
 80117a4:	4a2c      	ldr	r2, [pc, #176]	; (8011858 <_strtod_l+0x8a0>)
 80117a6:	464b      	mov	r3, r9
 80117a8:	2900      	cmp	r1, #0
 80117aa:	f000 809f 	beq.w	80118ec <_strtod_l+0x934>
 80117ae:	ea02 0109 	and.w	r1, r2, r9
 80117b2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80117b6:	f300 8099 	bgt.w	80118ec <_strtod_l+0x934>
 80117ba:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80117be:	f77f aea8 	ble.w	8011512 <_strtod_l+0x55a>
 80117c2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8011848 <_strtod_l+0x890>
 80117c6:	ec49 8b16 	vmov	d6, r8, r9
 80117ca:	4b23      	ldr	r3, [pc, #140]	; (8011858 <_strtod_l+0x8a0>)
 80117cc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80117d0:	ee17 2a90 	vmov	r2, s15
 80117d4:	4013      	ands	r3, r2
 80117d6:	ec59 8b17 	vmov	r8, r9, d7
 80117da:	2b00      	cmp	r3, #0
 80117dc:	f47f ae34 	bne.w	8011448 <_strtod_l+0x490>
 80117e0:	2322      	movs	r3, #34	; 0x22
 80117e2:	6023      	str	r3, [r4, #0]
 80117e4:	e630      	b.n	8011448 <_strtod_l+0x490>
 80117e6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80117ea:	fa01 f202 	lsl.w	r2, r1, r2
 80117ee:	ea02 0808 	and.w	r8, r2, r8
 80117f2:	e6da      	b.n	80115aa <_strtod_l+0x5f2>
 80117f4:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 80117f8:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80117fc:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8011800:	33e2      	adds	r3, #226	; 0xe2
 8011802:	fa00 f303 	lsl.w	r3, r0, r3
 8011806:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 801180a:	e73f      	b.n	801168c <_strtod_l+0x6d4>
 801180c:	2200      	movs	r2, #0
 801180e:	2301      	movs	r3, #1
 8011810:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8011814:	e73a      	b.n	801168c <_strtod_l+0x6d4>
 8011816:	9912      	ldr	r1, [sp, #72]	; 0x48
 8011818:	461a      	mov	r2, r3
 801181a:	4620      	mov	r0, r4
 801181c:	f001 faa6 	bl	8012d6c <__lshift>
 8011820:	9012      	str	r0, [sp, #72]	; 0x48
 8011822:	2800      	cmp	r0, #0
 8011824:	f47f af64 	bne.w	80116f0 <_strtod_l+0x738>
 8011828:	e604      	b.n	8011434 <_strtod_l+0x47c>
 801182a:	bf00      	nop
 801182c:	f3af 8000 	nop.w
 8011830:	94a03595 	.word	0x94a03595
 8011834:	3fcfffff 	.word	0x3fcfffff
 8011838:	94a03595 	.word	0x94a03595
 801183c:	3fdfffff 	.word	0x3fdfffff
 8011840:	35afe535 	.word	0x35afe535
 8011844:	3fe00000 	.word	0x3fe00000
 8011848:	00000000 	.word	0x00000000
 801184c:	39500000 	.word	0x39500000
 8011850:	08016830 	.word	0x08016830
 8011854:	fffffc02 	.word	0xfffffc02
 8011858:	7ff00000 	.word	0x7ff00000
 801185c:	46cb      	mov	fp, r9
 801185e:	d15f      	bne.n	8011920 <_strtod_l+0x968>
 8011860:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011864:	f1ba 0f00 	cmp.w	sl, #0
 8011868:	d02a      	beq.n	80118c0 <_strtod_l+0x908>
 801186a:	4aa7      	ldr	r2, [pc, #668]	; (8011b08 <_strtod_l+0xb50>)
 801186c:	4293      	cmp	r3, r2
 801186e:	d12b      	bne.n	80118c8 <_strtod_l+0x910>
 8011870:	9b05      	ldr	r3, [sp, #20]
 8011872:	4642      	mov	r2, r8
 8011874:	b1fb      	cbz	r3, 80118b6 <_strtod_l+0x8fe>
 8011876:	4ba5      	ldr	r3, [pc, #660]	; (8011b0c <_strtod_l+0xb54>)
 8011878:	ea09 0303 	and.w	r3, r9, r3
 801187c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011880:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011884:	d81a      	bhi.n	80118bc <_strtod_l+0x904>
 8011886:	0d1b      	lsrs	r3, r3, #20
 8011888:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801188c:	fa01 f303 	lsl.w	r3, r1, r3
 8011890:	429a      	cmp	r2, r3
 8011892:	d119      	bne.n	80118c8 <_strtod_l+0x910>
 8011894:	4b9e      	ldr	r3, [pc, #632]	; (8011b10 <_strtod_l+0xb58>)
 8011896:	459b      	cmp	fp, r3
 8011898:	d102      	bne.n	80118a0 <_strtod_l+0x8e8>
 801189a:	3201      	adds	r2, #1
 801189c:	f43f adca 	beq.w	8011434 <_strtod_l+0x47c>
 80118a0:	4b9a      	ldr	r3, [pc, #616]	; (8011b0c <_strtod_l+0xb54>)
 80118a2:	ea0b 0303 	and.w	r3, fp, r3
 80118a6:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80118aa:	f04f 0800 	mov.w	r8, #0
 80118ae:	9b05      	ldr	r3, [sp, #20]
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d186      	bne.n	80117c2 <_strtod_l+0x80a>
 80118b4:	e5c8      	b.n	8011448 <_strtod_l+0x490>
 80118b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80118ba:	e7e9      	b.n	8011890 <_strtod_l+0x8d8>
 80118bc:	460b      	mov	r3, r1
 80118be:	e7e7      	b.n	8011890 <_strtod_l+0x8d8>
 80118c0:	ea53 0308 	orrs.w	r3, r3, r8
 80118c4:	f43f af6d 	beq.w	80117a2 <_strtod_l+0x7ea>
 80118c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80118ca:	b1cb      	cbz	r3, 8011900 <_strtod_l+0x948>
 80118cc:	ea13 0f0b 	tst.w	r3, fp
 80118d0:	d0ed      	beq.n	80118ae <_strtod_l+0x8f6>
 80118d2:	9a05      	ldr	r2, [sp, #20]
 80118d4:	4640      	mov	r0, r8
 80118d6:	4649      	mov	r1, r9
 80118d8:	f1ba 0f00 	cmp.w	sl, #0
 80118dc:	d014      	beq.n	8011908 <_strtod_l+0x950>
 80118de:	f7ff fb51 	bl	8010f84 <sulp>
 80118e2:	ee38 7b00 	vadd.f64	d7, d8, d0
 80118e6:	ec59 8b17 	vmov	r8, r9, d7
 80118ea:	e7e0      	b.n	80118ae <_strtod_l+0x8f6>
 80118ec:	4013      	ands	r3, r2
 80118ee:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80118f2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80118f6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80118fa:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80118fe:	e7d6      	b.n	80118ae <_strtod_l+0x8f6>
 8011900:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011902:	ea13 0f08 	tst.w	r3, r8
 8011906:	e7e3      	b.n	80118d0 <_strtod_l+0x918>
 8011908:	f7ff fb3c 	bl	8010f84 <sulp>
 801190c:	ee38 0b40 	vsub.f64	d0, d8, d0
 8011910:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8011914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011918:	ec59 8b10 	vmov	r8, r9, d0
 801191c:	d1c7      	bne.n	80118ae <_strtod_l+0x8f6>
 801191e:	e5f8      	b.n	8011512 <_strtod_l+0x55a>
 8011920:	4631      	mov	r1, r6
 8011922:	4628      	mov	r0, r5
 8011924:	f001 fbfe 	bl	8013124 <__ratio>
 8011928:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801192c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8011930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011934:	d85f      	bhi.n	80119f6 <_strtod_l+0xa3e>
 8011936:	f1ba 0f00 	cmp.w	sl, #0
 801193a:	d166      	bne.n	8011a0a <_strtod_l+0xa52>
 801193c:	f1b8 0f00 	cmp.w	r8, #0
 8011940:	d14d      	bne.n	80119de <_strtod_l+0xa26>
 8011942:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011946:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 801194a:	2b00      	cmp	r3, #0
 801194c:	d162      	bne.n	8011a14 <_strtod_l+0xa5c>
 801194e:	eeb4 0bcd 	vcmpe.f64	d0, d13
 8011952:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8011956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801195a:	d401      	bmi.n	8011960 <_strtod_l+0x9a8>
 801195c:	ee20 db0d 	vmul.f64	d13, d0, d13
 8011960:	eeb1 cb4d 	vneg.f64	d12, d13
 8011964:	4869      	ldr	r0, [pc, #420]	; (8011b0c <_strtod_l+0xb54>)
 8011966:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 8011b18 <_strtod_l+0xb60>
 801196a:	ea0b 0100 	and.w	r1, fp, r0
 801196e:	4561      	cmp	r1, ip
 8011970:	ec53 2b1c 	vmov	r2, r3, d12
 8011974:	d17a      	bne.n	8011a6c <_strtod_l+0xab4>
 8011976:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 801197a:	ec49 8b10 	vmov	d0, r8, r9
 801197e:	910a      	str	r1, [sp, #40]	; 0x28
 8011980:	f001 fb06 	bl	8012f90 <__ulp>
 8011984:	ec49 8b1e 	vmov	d14, r8, r9
 8011988:	4860      	ldr	r0, [pc, #384]	; (8011b0c <_strtod_l+0xb54>)
 801198a:	eea0 eb0c 	vfma.f64	d14, d0, d12
 801198e:	ee1e 3a90 	vmov	r3, s29
 8011992:	4a60      	ldr	r2, [pc, #384]	; (8011b14 <_strtod_l+0xb5c>)
 8011994:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011996:	4018      	ands	r0, r3
 8011998:	4290      	cmp	r0, r2
 801199a:	ec59 8b1e 	vmov	r8, r9, d14
 801199e:	d93c      	bls.n	8011a1a <_strtod_l+0xa62>
 80119a0:	ee18 2a90 	vmov	r2, s17
 80119a4:	4b5a      	ldr	r3, [pc, #360]	; (8011b10 <_strtod_l+0xb58>)
 80119a6:	429a      	cmp	r2, r3
 80119a8:	d104      	bne.n	80119b4 <_strtod_l+0x9fc>
 80119aa:	ee18 3a10 	vmov	r3, s16
 80119ae:	3301      	adds	r3, #1
 80119b0:	f43f ad40 	beq.w	8011434 <_strtod_l+0x47c>
 80119b4:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8011b10 <_strtod_l+0xb58>
 80119b8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80119bc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80119be:	4620      	mov	r0, r4
 80119c0:	f000 ffba 	bl	8012938 <_Bfree>
 80119c4:	4639      	mov	r1, r7
 80119c6:	4620      	mov	r0, r4
 80119c8:	f000 ffb6 	bl	8012938 <_Bfree>
 80119cc:	4631      	mov	r1, r6
 80119ce:	4620      	mov	r0, r4
 80119d0:	f000 ffb2 	bl	8012938 <_Bfree>
 80119d4:	4629      	mov	r1, r5
 80119d6:	4620      	mov	r0, r4
 80119d8:	f000 ffae 	bl	8012938 <_Bfree>
 80119dc:	e609      	b.n	80115f2 <_strtod_l+0x63a>
 80119de:	f1b8 0f01 	cmp.w	r8, #1
 80119e2:	d103      	bne.n	80119ec <_strtod_l+0xa34>
 80119e4:	f1b9 0f00 	cmp.w	r9, #0
 80119e8:	f43f ad93 	beq.w	8011512 <_strtod_l+0x55a>
 80119ec:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 80119f0:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 80119f4:	e7b6      	b.n	8011964 <_strtod_l+0x9ac>
 80119f6:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 80119fa:	ee20 db0d 	vmul.f64	d13, d0, d13
 80119fe:	f1ba 0f00 	cmp.w	sl, #0
 8011a02:	d0ad      	beq.n	8011960 <_strtod_l+0x9a8>
 8011a04:	eeb0 cb4d 	vmov.f64	d12, d13
 8011a08:	e7ac      	b.n	8011964 <_strtod_l+0x9ac>
 8011a0a:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 8011a0e:	eeb0 db4c 	vmov.f64	d13, d12
 8011a12:	e7a7      	b.n	8011964 <_strtod_l+0x9ac>
 8011a14:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8011a18:	e7a4      	b.n	8011964 <_strtod_l+0x9ac>
 8011a1a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8011a1e:	9b05      	ldr	r3, [sp, #20]
 8011a20:	46cb      	mov	fp, r9
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d1ca      	bne.n	80119bc <_strtod_l+0xa04>
 8011a26:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011a2a:	0d1b      	lsrs	r3, r3, #20
 8011a2c:	051b      	lsls	r3, r3, #20
 8011a2e:	4299      	cmp	r1, r3
 8011a30:	d1c4      	bne.n	80119bc <_strtod_l+0xa04>
 8011a32:	ec51 0b1d 	vmov	r0, r1, d13
 8011a36:	f7ee fe27 	bl	8000688 <__aeabi_d2lz>
 8011a3a:	f7ee fddf 	bl	80005fc <__aeabi_l2d>
 8011a3e:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 8011a42:	ec41 0b17 	vmov	d7, r0, r1
 8011a46:	ea4b 0b08 	orr.w	fp, fp, r8
 8011a4a:	ea5b 0b0a 	orrs.w	fp, fp, sl
 8011a4e:	ee3d db47 	vsub.f64	d13, d13, d7
 8011a52:	d03c      	beq.n	8011ace <_strtod_l+0xb16>
 8011a54:	eeb4 dbca 	vcmpe.f64	d13, d10
 8011a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a5c:	f53f acf4 	bmi.w	8011448 <_strtod_l+0x490>
 8011a60:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8011a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a68:	dda8      	ble.n	80119bc <_strtod_l+0xa04>
 8011a6a:	e4ed      	b.n	8011448 <_strtod_l+0x490>
 8011a6c:	9805      	ldr	r0, [sp, #20]
 8011a6e:	b1f0      	cbz	r0, 8011aae <_strtod_l+0xaf6>
 8011a70:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8011a74:	d81b      	bhi.n	8011aae <_strtod_l+0xaf6>
 8011a76:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8011b00 <_strtod_l+0xb48>
 8011a7a:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8011a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a82:	d811      	bhi.n	8011aa8 <_strtod_l+0xaf0>
 8011a84:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8011a88:	ee1d 3a10 	vmov	r3, s26
 8011a8c:	2b01      	cmp	r3, #1
 8011a8e:	bf38      	it	cc
 8011a90:	2301      	movcc	r3, #1
 8011a92:	ee0d 3a10 	vmov	s26, r3
 8011a96:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8011a9a:	f1ba 0f00 	cmp.w	sl, #0
 8011a9e:	d113      	bne.n	8011ac8 <_strtod_l+0xb10>
 8011aa0:	eeb1 7b4d 	vneg.f64	d7, d13
 8011aa4:	ec53 2b17 	vmov	r2, r3, d7
 8011aa8:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8011aac:	1a43      	subs	r3, r0, r1
 8011aae:	eeb0 0b48 	vmov.f64	d0, d8
 8011ab2:	ec43 2b1c 	vmov	d12, r2, r3
 8011ab6:	910a      	str	r1, [sp, #40]	; 0x28
 8011ab8:	f001 fa6a 	bl	8012f90 <__ulp>
 8011abc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011abe:	eeac 8b00 	vfma.f64	d8, d12, d0
 8011ac2:	ec59 8b18 	vmov	r8, r9, d8
 8011ac6:	e7aa      	b.n	8011a1e <_strtod_l+0xa66>
 8011ac8:	eeb0 7b4d 	vmov.f64	d7, d13
 8011acc:	e7ea      	b.n	8011aa4 <_strtod_l+0xaec>
 8011ace:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8011ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ad6:	f57f af71 	bpl.w	80119bc <_strtod_l+0xa04>
 8011ada:	e4b5      	b.n	8011448 <_strtod_l+0x490>
 8011adc:	2300      	movs	r3, #0
 8011ade:	9308      	str	r3, [sp, #32]
 8011ae0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011ae2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011ae4:	6013      	str	r3, [r2, #0]
 8011ae6:	f7ff baa6 	b.w	8011036 <_strtod_l+0x7e>
 8011aea:	2a65      	cmp	r2, #101	; 0x65
 8011aec:	f43f aba2 	beq.w	8011234 <_strtod_l+0x27c>
 8011af0:	2a45      	cmp	r2, #69	; 0x45
 8011af2:	f43f ab9f 	beq.w	8011234 <_strtod_l+0x27c>
 8011af6:	2101      	movs	r1, #1
 8011af8:	f7ff bbd8 	b.w	80112ac <_strtod_l+0x2f4>
 8011afc:	f3af 8000 	nop.w
 8011b00:	ffc00000 	.word	0xffc00000
 8011b04:	41dfffff 	.word	0x41dfffff
 8011b08:	000fffff 	.word	0x000fffff
 8011b0c:	7ff00000 	.word	0x7ff00000
 8011b10:	7fefffff 	.word	0x7fefffff
 8011b14:	7c9fffff 	.word	0x7c9fffff
 8011b18:	7fe00000 	.word	0x7fe00000

08011b1c <strtod>:
 8011b1c:	460a      	mov	r2, r1
 8011b1e:	4601      	mov	r1, r0
 8011b20:	4802      	ldr	r0, [pc, #8]	; (8011b2c <strtod+0x10>)
 8011b22:	4b03      	ldr	r3, [pc, #12]	; (8011b30 <strtod+0x14>)
 8011b24:	6800      	ldr	r0, [r0, #0]
 8011b26:	f7ff ba47 	b.w	8010fb8 <_strtod_l>
 8011b2a:	bf00      	nop
 8011b2c:	200001f0 	.word	0x200001f0
 8011b30:	20000038 	.word	0x20000038

08011b34 <std>:
 8011b34:	2300      	movs	r3, #0
 8011b36:	b510      	push	{r4, lr}
 8011b38:	4604      	mov	r4, r0
 8011b3a:	e9c0 3300 	strd	r3, r3, [r0]
 8011b3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011b42:	6083      	str	r3, [r0, #8]
 8011b44:	8181      	strh	r1, [r0, #12]
 8011b46:	6643      	str	r3, [r0, #100]	; 0x64
 8011b48:	81c2      	strh	r2, [r0, #14]
 8011b4a:	6183      	str	r3, [r0, #24]
 8011b4c:	4619      	mov	r1, r3
 8011b4e:	2208      	movs	r2, #8
 8011b50:	305c      	adds	r0, #92	; 0x5c
 8011b52:	f000 f916 	bl	8011d82 <memset>
 8011b56:	4b0d      	ldr	r3, [pc, #52]	; (8011b8c <std+0x58>)
 8011b58:	6263      	str	r3, [r4, #36]	; 0x24
 8011b5a:	4b0d      	ldr	r3, [pc, #52]	; (8011b90 <std+0x5c>)
 8011b5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8011b5e:	4b0d      	ldr	r3, [pc, #52]	; (8011b94 <std+0x60>)
 8011b60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011b62:	4b0d      	ldr	r3, [pc, #52]	; (8011b98 <std+0x64>)
 8011b64:	6323      	str	r3, [r4, #48]	; 0x30
 8011b66:	4b0d      	ldr	r3, [pc, #52]	; (8011b9c <std+0x68>)
 8011b68:	6224      	str	r4, [r4, #32]
 8011b6a:	429c      	cmp	r4, r3
 8011b6c:	d006      	beq.n	8011b7c <std+0x48>
 8011b6e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8011b72:	4294      	cmp	r4, r2
 8011b74:	d002      	beq.n	8011b7c <std+0x48>
 8011b76:	33d0      	adds	r3, #208	; 0xd0
 8011b78:	429c      	cmp	r4, r3
 8011b7a:	d105      	bne.n	8011b88 <std+0x54>
 8011b7c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b84:	f000 b9f6 	b.w	8011f74 <__retarget_lock_init_recursive>
 8011b88:	bd10      	pop	{r4, pc}
 8011b8a:	bf00      	nop
 8011b8c:	08011cdd 	.word	0x08011cdd
 8011b90:	08011cff 	.word	0x08011cff
 8011b94:	08011d37 	.word	0x08011d37
 8011b98:	08011d5b 	.word	0x08011d5b
 8011b9c:	2000a928 	.word	0x2000a928

08011ba0 <stdio_exit_handler>:
 8011ba0:	4a02      	ldr	r2, [pc, #8]	; (8011bac <stdio_exit_handler+0xc>)
 8011ba2:	4903      	ldr	r1, [pc, #12]	; (8011bb0 <stdio_exit_handler+0x10>)
 8011ba4:	4803      	ldr	r0, [pc, #12]	; (8011bb4 <stdio_exit_handler+0x14>)
 8011ba6:	f000 b869 	b.w	8011c7c <_fwalk_sglue>
 8011baa:	bf00      	nop
 8011bac:	2000002c 	.word	0x2000002c
 8011bb0:	080138d9 	.word	0x080138d9
 8011bb4:	200001a4 	.word	0x200001a4

08011bb8 <cleanup_stdio>:
 8011bb8:	6841      	ldr	r1, [r0, #4]
 8011bba:	4b0c      	ldr	r3, [pc, #48]	; (8011bec <cleanup_stdio+0x34>)
 8011bbc:	4299      	cmp	r1, r3
 8011bbe:	b510      	push	{r4, lr}
 8011bc0:	4604      	mov	r4, r0
 8011bc2:	d001      	beq.n	8011bc8 <cleanup_stdio+0x10>
 8011bc4:	f001 fe88 	bl	80138d8 <_fflush_r>
 8011bc8:	68a1      	ldr	r1, [r4, #8]
 8011bca:	4b09      	ldr	r3, [pc, #36]	; (8011bf0 <cleanup_stdio+0x38>)
 8011bcc:	4299      	cmp	r1, r3
 8011bce:	d002      	beq.n	8011bd6 <cleanup_stdio+0x1e>
 8011bd0:	4620      	mov	r0, r4
 8011bd2:	f001 fe81 	bl	80138d8 <_fflush_r>
 8011bd6:	68e1      	ldr	r1, [r4, #12]
 8011bd8:	4b06      	ldr	r3, [pc, #24]	; (8011bf4 <cleanup_stdio+0x3c>)
 8011bda:	4299      	cmp	r1, r3
 8011bdc:	d004      	beq.n	8011be8 <cleanup_stdio+0x30>
 8011bde:	4620      	mov	r0, r4
 8011be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011be4:	f001 be78 	b.w	80138d8 <_fflush_r>
 8011be8:	bd10      	pop	{r4, pc}
 8011bea:	bf00      	nop
 8011bec:	2000a928 	.word	0x2000a928
 8011bf0:	2000a990 	.word	0x2000a990
 8011bf4:	2000a9f8 	.word	0x2000a9f8

08011bf8 <global_stdio_init.part.0>:
 8011bf8:	b510      	push	{r4, lr}
 8011bfa:	4b0b      	ldr	r3, [pc, #44]	; (8011c28 <global_stdio_init.part.0+0x30>)
 8011bfc:	4c0b      	ldr	r4, [pc, #44]	; (8011c2c <global_stdio_init.part.0+0x34>)
 8011bfe:	4a0c      	ldr	r2, [pc, #48]	; (8011c30 <global_stdio_init.part.0+0x38>)
 8011c00:	601a      	str	r2, [r3, #0]
 8011c02:	4620      	mov	r0, r4
 8011c04:	2200      	movs	r2, #0
 8011c06:	2104      	movs	r1, #4
 8011c08:	f7ff ff94 	bl	8011b34 <std>
 8011c0c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8011c10:	2201      	movs	r2, #1
 8011c12:	2109      	movs	r1, #9
 8011c14:	f7ff ff8e 	bl	8011b34 <std>
 8011c18:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8011c1c:	2202      	movs	r2, #2
 8011c1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c22:	2112      	movs	r1, #18
 8011c24:	f7ff bf86 	b.w	8011b34 <std>
 8011c28:	2000aa60 	.word	0x2000aa60
 8011c2c:	2000a928 	.word	0x2000a928
 8011c30:	08011ba1 	.word	0x08011ba1

08011c34 <__sfp_lock_acquire>:
 8011c34:	4801      	ldr	r0, [pc, #4]	; (8011c3c <__sfp_lock_acquire+0x8>)
 8011c36:	f000 b99e 	b.w	8011f76 <__retarget_lock_acquire_recursive>
 8011c3a:	bf00      	nop
 8011c3c:	2000aa69 	.word	0x2000aa69

08011c40 <__sfp_lock_release>:
 8011c40:	4801      	ldr	r0, [pc, #4]	; (8011c48 <__sfp_lock_release+0x8>)
 8011c42:	f000 b999 	b.w	8011f78 <__retarget_lock_release_recursive>
 8011c46:	bf00      	nop
 8011c48:	2000aa69 	.word	0x2000aa69

08011c4c <__sinit>:
 8011c4c:	b510      	push	{r4, lr}
 8011c4e:	4604      	mov	r4, r0
 8011c50:	f7ff fff0 	bl	8011c34 <__sfp_lock_acquire>
 8011c54:	6a23      	ldr	r3, [r4, #32]
 8011c56:	b11b      	cbz	r3, 8011c60 <__sinit+0x14>
 8011c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c5c:	f7ff bff0 	b.w	8011c40 <__sfp_lock_release>
 8011c60:	4b04      	ldr	r3, [pc, #16]	; (8011c74 <__sinit+0x28>)
 8011c62:	6223      	str	r3, [r4, #32]
 8011c64:	4b04      	ldr	r3, [pc, #16]	; (8011c78 <__sinit+0x2c>)
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d1f5      	bne.n	8011c58 <__sinit+0xc>
 8011c6c:	f7ff ffc4 	bl	8011bf8 <global_stdio_init.part.0>
 8011c70:	e7f2      	b.n	8011c58 <__sinit+0xc>
 8011c72:	bf00      	nop
 8011c74:	08011bb9 	.word	0x08011bb9
 8011c78:	2000aa60 	.word	0x2000aa60

08011c7c <_fwalk_sglue>:
 8011c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c80:	4607      	mov	r7, r0
 8011c82:	4688      	mov	r8, r1
 8011c84:	4614      	mov	r4, r2
 8011c86:	2600      	movs	r6, #0
 8011c88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011c8c:	f1b9 0901 	subs.w	r9, r9, #1
 8011c90:	d505      	bpl.n	8011c9e <_fwalk_sglue+0x22>
 8011c92:	6824      	ldr	r4, [r4, #0]
 8011c94:	2c00      	cmp	r4, #0
 8011c96:	d1f7      	bne.n	8011c88 <_fwalk_sglue+0xc>
 8011c98:	4630      	mov	r0, r6
 8011c9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c9e:	89ab      	ldrh	r3, [r5, #12]
 8011ca0:	2b01      	cmp	r3, #1
 8011ca2:	d907      	bls.n	8011cb4 <_fwalk_sglue+0x38>
 8011ca4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011ca8:	3301      	adds	r3, #1
 8011caa:	d003      	beq.n	8011cb4 <_fwalk_sglue+0x38>
 8011cac:	4629      	mov	r1, r5
 8011cae:	4638      	mov	r0, r7
 8011cb0:	47c0      	blx	r8
 8011cb2:	4306      	orrs	r6, r0
 8011cb4:	3568      	adds	r5, #104	; 0x68
 8011cb6:	e7e9      	b.n	8011c8c <_fwalk_sglue+0x10>

08011cb8 <iprintf>:
 8011cb8:	b40f      	push	{r0, r1, r2, r3}
 8011cba:	b507      	push	{r0, r1, r2, lr}
 8011cbc:	4906      	ldr	r1, [pc, #24]	; (8011cd8 <iprintf+0x20>)
 8011cbe:	ab04      	add	r3, sp, #16
 8011cc0:	6808      	ldr	r0, [r1, #0]
 8011cc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8011cc6:	6881      	ldr	r1, [r0, #8]
 8011cc8:	9301      	str	r3, [sp, #4]
 8011cca:	f001 fad5 	bl	8013278 <_vfiprintf_r>
 8011cce:	b003      	add	sp, #12
 8011cd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8011cd4:	b004      	add	sp, #16
 8011cd6:	4770      	bx	lr
 8011cd8:	200001f0 	.word	0x200001f0

08011cdc <__sread>:
 8011cdc:	b510      	push	{r4, lr}
 8011cde:	460c      	mov	r4, r1
 8011ce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ce4:	f000 f8f8 	bl	8011ed8 <_read_r>
 8011ce8:	2800      	cmp	r0, #0
 8011cea:	bfab      	itete	ge
 8011cec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011cee:	89a3      	ldrhlt	r3, [r4, #12]
 8011cf0:	181b      	addge	r3, r3, r0
 8011cf2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011cf6:	bfac      	ite	ge
 8011cf8:	6563      	strge	r3, [r4, #84]	; 0x54
 8011cfa:	81a3      	strhlt	r3, [r4, #12]
 8011cfc:	bd10      	pop	{r4, pc}

08011cfe <__swrite>:
 8011cfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d02:	461f      	mov	r7, r3
 8011d04:	898b      	ldrh	r3, [r1, #12]
 8011d06:	05db      	lsls	r3, r3, #23
 8011d08:	4605      	mov	r5, r0
 8011d0a:	460c      	mov	r4, r1
 8011d0c:	4616      	mov	r6, r2
 8011d0e:	d505      	bpl.n	8011d1c <__swrite+0x1e>
 8011d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d14:	2302      	movs	r3, #2
 8011d16:	2200      	movs	r2, #0
 8011d18:	f000 f8cc 	bl	8011eb4 <_lseek_r>
 8011d1c:	89a3      	ldrh	r3, [r4, #12]
 8011d1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011d22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011d26:	81a3      	strh	r3, [r4, #12]
 8011d28:	4632      	mov	r2, r6
 8011d2a:	463b      	mov	r3, r7
 8011d2c:	4628      	mov	r0, r5
 8011d2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011d32:	f000 b8e3 	b.w	8011efc <_write_r>

08011d36 <__sseek>:
 8011d36:	b510      	push	{r4, lr}
 8011d38:	460c      	mov	r4, r1
 8011d3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d3e:	f000 f8b9 	bl	8011eb4 <_lseek_r>
 8011d42:	1c43      	adds	r3, r0, #1
 8011d44:	89a3      	ldrh	r3, [r4, #12]
 8011d46:	bf15      	itete	ne
 8011d48:	6560      	strne	r0, [r4, #84]	; 0x54
 8011d4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011d4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011d52:	81a3      	strheq	r3, [r4, #12]
 8011d54:	bf18      	it	ne
 8011d56:	81a3      	strhne	r3, [r4, #12]
 8011d58:	bd10      	pop	{r4, pc}

08011d5a <__sclose>:
 8011d5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d5e:	f000 b899 	b.w	8011e94 <_close_r>

08011d62 <memcmp>:
 8011d62:	b510      	push	{r4, lr}
 8011d64:	3901      	subs	r1, #1
 8011d66:	4402      	add	r2, r0
 8011d68:	4290      	cmp	r0, r2
 8011d6a:	d101      	bne.n	8011d70 <memcmp+0xe>
 8011d6c:	2000      	movs	r0, #0
 8011d6e:	e005      	b.n	8011d7c <memcmp+0x1a>
 8011d70:	7803      	ldrb	r3, [r0, #0]
 8011d72:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011d76:	42a3      	cmp	r3, r4
 8011d78:	d001      	beq.n	8011d7e <memcmp+0x1c>
 8011d7a:	1b18      	subs	r0, r3, r4
 8011d7c:	bd10      	pop	{r4, pc}
 8011d7e:	3001      	adds	r0, #1
 8011d80:	e7f2      	b.n	8011d68 <memcmp+0x6>

08011d82 <memset>:
 8011d82:	4402      	add	r2, r0
 8011d84:	4603      	mov	r3, r0
 8011d86:	4293      	cmp	r3, r2
 8011d88:	d100      	bne.n	8011d8c <memset+0xa>
 8011d8a:	4770      	bx	lr
 8011d8c:	f803 1b01 	strb.w	r1, [r3], #1
 8011d90:	e7f9      	b.n	8011d86 <memset+0x4>

08011d92 <strncmp>:
 8011d92:	b510      	push	{r4, lr}
 8011d94:	b16a      	cbz	r2, 8011db2 <strncmp+0x20>
 8011d96:	3901      	subs	r1, #1
 8011d98:	1884      	adds	r4, r0, r2
 8011d9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011d9e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011da2:	429a      	cmp	r2, r3
 8011da4:	d103      	bne.n	8011dae <strncmp+0x1c>
 8011da6:	42a0      	cmp	r0, r4
 8011da8:	d001      	beq.n	8011dae <strncmp+0x1c>
 8011daa:	2a00      	cmp	r2, #0
 8011dac:	d1f5      	bne.n	8011d9a <strncmp+0x8>
 8011dae:	1ad0      	subs	r0, r2, r3
 8011db0:	bd10      	pop	{r4, pc}
 8011db2:	4610      	mov	r0, r2
 8011db4:	e7fc      	b.n	8011db0 <strncmp+0x1e>

08011db6 <strncpy>:
 8011db6:	b510      	push	{r4, lr}
 8011db8:	3901      	subs	r1, #1
 8011dba:	4603      	mov	r3, r0
 8011dbc:	b132      	cbz	r2, 8011dcc <strncpy+0x16>
 8011dbe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011dc2:	f803 4b01 	strb.w	r4, [r3], #1
 8011dc6:	3a01      	subs	r2, #1
 8011dc8:	2c00      	cmp	r4, #0
 8011dca:	d1f7      	bne.n	8011dbc <strncpy+0x6>
 8011dcc:	441a      	add	r2, r3
 8011dce:	2100      	movs	r1, #0
 8011dd0:	4293      	cmp	r3, r2
 8011dd2:	d100      	bne.n	8011dd6 <strncpy+0x20>
 8011dd4:	bd10      	pop	{r4, pc}
 8011dd6:	f803 1b01 	strb.w	r1, [r3], #1
 8011dda:	e7f9      	b.n	8011dd0 <strncpy+0x1a>

08011ddc <strtok>:
 8011ddc:	4b16      	ldr	r3, [pc, #88]	; (8011e38 <strtok+0x5c>)
 8011dde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011de0:	681e      	ldr	r6, [r3, #0]
 8011de2:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8011de4:	4605      	mov	r5, r0
 8011de6:	b9fc      	cbnz	r4, 8011e28 <strtok+0x4c>
 8011de8:	2050      	movs	r0, #80	; 0x50
 8011dea:	9101      	str	r1, [sp, #4]
 8011dec:	f000 fc9e 	bl	801272c <malloc>
 8011df0:	9901      	ldr	r1, [sp, #4]
 8011df2:	6470      	str	r0, [r6, #68]	; 0x44
 8011df4:	4602      	mov	r2, r0
 8011df6:	b920      	cbnz	r0, 8011e02 <strtok+0x26>
 8011df8:	4b10      	ldr	r3, [pc, #64]	; (8011e3c <strtok+0x60>)
 8011dfa:	4811      	ldr	r0, [pc, #68]	; (8011e40 <strtok+0x64>)
 8011dfc:	215b      	movs	r1, #91	; 0x5b
 8011dfe:	f000 f8d3 	bl	8011fa8 <__assert_func>
 8011e02:	e9c0 4400 	strd	r4, r4, [r0]
 8011e06:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8011e0a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8011e0e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8011e12:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8011e16:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8011e1a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8011e1e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8011e22:	6184      	str	r4, [r0, #24]
 8011e24:	7704      	strb	r4, [r0, #28]
 8011e26:	6244      	str	r4, [r0, #36]	; 0x24
 8011e28:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8011e2a:	2301      	movs	r3, #1
 8011e2c:	4628      	mov	r0, r5
 8011e2e:	b002      	add	sp, #8
 8011e30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011e34:	f000 b806 	b.w	8011e44 <__strtok_r>
 8011e38:	200001f0 	.word	0x200001f0
 8011e3c:	0801678a 	.word	0x0801678a
 8011e40:	08016959 	.word	0x08016959

08011e44 <__strtok_r>:
 8011e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e46:	b908      	cbnz	r0, 8011e4c <__strtok_r+0x8>
 8011e48:	6810      	ldr	r0, [r2, #0]
 8011e4a:	b188      	cbz	r0, 8011e70 <__strtok_r+0x2c>
 8011e4c:	4604      	mov	r4, r0
 8011e4e:	4620      	mov	r0, r4
 8011e50:	f814 5b01 	ldrb.w	r5, [r4], #1
 8011e54:	460f      	mov	r7, r1
 8011e56:	f817 6b01 	ldrb.w	r6, [r7], #1
 8011e5a:	b91e      	cbnz	r6, 8011e64 <__strtok_r+0x20>
 8011e5c:	b965      	cbnz	r5, 8011e78 <__strtok_r+0x34>
 8011e5e:	6015      	str	r5, [r2, #0]
 8011e60:	4628      	mov	r0, r5
 8011e62:	e005      	b.n	8011e70 <__strtok_r+0x2c>
 8011e64:	42b5      	cmp	r5, r6
 8011e66:	d1f6      	bne.n	8011e56 <__strtok_r+0x12>
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d1f0      	bne.n	8011e4e <__strtok_r+0xa>
 8011e6c:	6014      	str	r4, [r2, #0]
 8011e6e:	7003      	strb	r3, [r0, #0]
 8011e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e72:	461c      	mov	r4, r3
 8011e74:	e00c      	b.n	8011e90 <__strtok_r+0x4c>
 8011e76:	b915      	cbnz	r5, 8011e7e <__strtok_r+0x3a>
 8011e78:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011e7c:	460e      	mov	r6, r1
 8011e7e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8011e82:	42ab      	cmp	r3, r5
 8011e84:	d1f7      	bne.n	8011e76 <__strtok_r+0x32>
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d0f3      	beq.n	8011e72 <__strtok_r+0x2e>
 8011e8a:	2300      	movs	r3, #0
 8011e8c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8011e90:	6014      	str	r4, [r2, #0]
 8011e92:	e7ed      	b.n	8011e70 <__strtok_r+0x2c>

08011e94 <_close_r>:
 8011e94:	b538      	push	{r3, r4, r5, lr}
 8011e96:	4d06      	ldr	r5, [pc, #24]	; (8011eb0 <_close_r+0x1c>)
 8011e98:	2300      	movs	r3, #0
 8011e9a:	4604      	mov	r4, r0
 8011e9c:	4608      	mov	r0, r1
 8011e9e:	602b      	str	r3, [r5, #0]
 8011ea0:	f7ef fc37 	bl	8001712 <_close>
 8011ea4:	1c43      	adds	r3, r0, #1
 8011ea6:	d102      	bne.n	8011eae <_close_r+0x1a>
 8011ea8:	682b      	ldr	r3, [r5, #0]
 8011eaa:	b103      	cbz	r3, 8011eae <_close_r+0x1a>
 8011eac:	6023      	str	r3, [r4, #0]
 8011eae:	bd38      	pop	{r3, r4, r5, pc}
 8011eb0:	2000aa64 	.word	0x2000aa64

08011eb4 <_lseek_r>:
 8011eb4:	b538      	push	{r3, r4, r5, lr}
 8011eb6:	4d07      	ldr	r5, [pc, #28]	; (8011ed4 <_lseek_r+0x20>)
 8011eb8:	4604      	mov	r4, r0
 8011eba:	4608      	mov	r0, r1
 8011ebc:	4611      	mov	r1, r2
 8011ebe:	2200      	movs	r2, #0
 8011ec0:	602a      	str	r2, [r5, #0]
 8011ec2:	461a      	mov	r2, r3
 8011ec4:	f7ef fc4c 	bl	8001760 <_lseek>
 8011ec8:	1c43      	adds	r3, r0, #1
 8011eca:	d102      	bne.n	8011ed2 <_lseek_r+0x1e>
 8011ecc:	682b      	ldr	r3, [r5, #0]
 8011ece:	b103      	cbz	r3, 8011ed2 <_lseek_r+0x1e>
 8011ed0:	6023      	str	r3, [r4, #0]
 8011ed2:	bd38      	pop	{r3, r4, r5, pc}
 8011ed4:	2000aa64 	.word	0x2000aa64

08011ed8 <_read_r>:
 8011ed8:	b538      	push	{r3, r4, r5, lr}
 8011eda:	4d07      	ldr	r5, [pc, #28]	; (8011ef8 <_read_r+0x20>)
 8011edc:	4604      	mov	r4, r0
 8011ede:	4608      	mov	r0, r1
 8011ee0:	4611      	mov	r1, r2
 8011ee2:	2200      	movs	r2, #0
 8011ee4:	602a      	str	r2, [r5, #0]
 8011ee6:	461a      	mov	r2, r3
 8011ee8:	f7ef fbda 	bl	80016a0 <_read>
 8011eec:	1c43      	adds	r3, r0, #1
 8011eee:	d102      	bne.n	8011ef6 <_read_r+0x1e>
 8011ef0:	682b      	ldr	r3, [r5, #0]
 8011ef2:	b103      	cbz	r3, 8011ef6 <_read_r+0x1e>
 8011ef4:	6023      	str	r3, [r4, #0]
 8011ef6:	bd38      	pop	{r3, r4, r5, pc}
 8011ef8:	2000aa64 	.word	0x2000aa64

08011efc <_write_r>:
 8011efc:	b538      	push	{r3, r4, r5, lr}
 8011efe:	4d07      	ldr	r5, [pc, #28]	; (8011f1c <_write_r+0x20>)
 8011f00:	4604      	mov	r4, r0
 8011f02:	4608      	mov	r0, r1
 8011f04:	4611      	mov	r1, r2
 8011f06:	2200      	movs	r2, #0
 8011f08:	602a      	str	r2, [r5, #0]
 8011f0a:	461a      	mov	r2, r3
 8011f0c:	f7ef fbe5 	bl	80016da <_write>
 8011f10:	1c43      	adds	r3, r0, #1
 8011f12:	d102      	bne.n	8011f1a <_write_r+0x1e>
 8011f14:	682b      	ldr	r3, [r5, #0]
 8011f16:	b103      	cbz	r3, 8011f1a <_write_r+0x1e>
 8011f18:	6023      	str	r3, [r4, #0]
 8011f1a:	bd38      	pop	{r3, r4, r5, pc}
 8011f1c:	2000aa64 	.word	0x2000aa64

08011f20 <__errno>:
 8011f20:	4b01      	ldr	r3, [pc, #4]	; (8011f28 <__errno+0x8>)
 8011f22:	6818      	ldr	r0, [r3, #0]
 8011f24:	4770      	bx	lr
 8011f26:	bf00      	nop
 8011f28:	200001f0 	.word	0x200001f0

08011f2c <__libc_init_array>:
 8011f2c:	b570      	push	{r4, r5, r6, lr}
 8011f2e:	4d0d      	ldr	r5, [pc, #52]	; (8011f64 <__libc_init_array+0x38>)
 8011f30:	4c0d      	ldr	r4, [pc, #52]	; (8011f68 <__libc_init_array+0x3c>)
 8011f32:	1b64      	subs	r4, r4, r5
 8011f34:	10a4      	asrs	r4, r4, #2
 8011f36:	2600      	movs	r6, #0
 8011f38:	42a6      	cmp	r6, r4
 8011f3a:	d109      	bne.n	8011f50 <__libc_init_array+0x24>
 8011f3c:	4d0b      	ldr	r5, [pc, #44]	; (8011f6c <__libc_init_array+0x40>)
 8011f3e:	4c0c      	ldr	r4, [pc, #48]	; (8011f70 <__libc_init_array+0x44>)
 8011f40:	f001 fe90 	bl	8013c64 <_init>
 8011f44:	1b64      	subs	r4, r4, r5
 8011f46:	10a4      	asrs	r4, r4, #2
 8011f48:	2600      	movs	r6, #0
 8011f4a:	42a6      	cmp	r6, r4
 8011f4c:	d105      	bne.n	8011f5a <__libc_init_array+0x2e>
 8011f4e:	bd70      	pop	{r4, r5, r6, pc}
 8011f50:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f54:	4798      	blx	r3
 8011f56:	3601      	adds	r6, #1
 8011f58:	e7ee      	b.n	8011f38 <__libc_init_array+0xc>
 8011f5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f5e:	4798      	blx	r3
 8011f60:	3601      	adds	r6, #1
 8011f62:	e7f2      	b.n	8011f4a <__libc_init_array+0x1e>
 8011f64:	08016c00 	.word	0x08016c00
 8011f68:	08016c00 	.word	0x08016c00
 8011f6c:	08016c00 	.word	0x08016c00
 8011f70:	08016c04 	.word	0x08016c04

08011f74 <__retarget_lock_init_recursive>:
 8011f74:	4770      	bx	lr

08011f76 <__retarget_lock_acquire_recursive>:
 8011f76:	4770      	bx	lr

08011f78 <__retarget_lock_release_recursive>:
 8011f78:	4770      	bx	lr

08011f7a <memcpy>:
 8011f7a:	440a      	add	r2, r1
 8011f7c:	4291      	cmp	r1, r2
 8011f7e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011f82:	d100      	bne.n	8011f86 <memcpy+0xc>
 8011f84:	4770      	bx	lr
 8011f86:	b510      	push	{r4, lr}
 8011f88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011f8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011f90:	4291      	cmp	r1, r2
 8011f92:	d1f9      	bne.n	8011f88 <memcpy+0xe>
 8011f94:	bd10      	pop	{r4, pc}
	...

08011f98 <nan>:
 8011f98:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011fa0 <nan+0x8>
 8011f9c:	4770      	bx	lr
 8011f9e:	bf00      	nop
 8011fa0:	00000000 	.word	0x00000000
 8011fa4:	7ff80000 	.word	0x7ff80000

08011fa8 <__assert_func>:
 8011fa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011faa:	4614      	mov	r4, r2
 8011fac:	461a      	mov	r2, r3
 8011fae:	4b09      	ldr	r3, [pc, #36]	; (8011fd4 <__assert_func+0x2c>)
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	4605      	mov	r5, r0
 8011fb4:	68d8      	ldr	r0, [r3, #12]
 8011fb6:	b14c      	cbz	r4, 8011fcc <__assert_func+0x24>
 8011fb8:	4b07      	ldr	r3, [pc, #28]	; (8011fd8 <__assert_func+0x30>)
 8011fba:	9100      	str	r1, [sp, #0]
 8011fbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011fc0:	4906      	ldr	r1, [pc, #24]	; (8011fdc <__assert_func+0x34>)
 8011fc2:	462b      	mov	r3, r5
 8011fc4:	f001 fcb0 	bl	8013928 <fiprintf>
 8011fc8:	f001 fd66 	bl	8013a98 <abort>
 8011fcc:	4b04      	ldr	r3, [pc, #16]	; (8011fe0 <__assert_func+0x38>)
 8011fce:	461c      	mov	r4, r3
 8011fd0:	e7f3      	b.n	8011fba <__assert_func+0x12>
 8011fd2:	bf00      	nop
 8011fd4:	200001f0 	.word	0x200001f0
 8011fd8:	080169bb 	.word	0x080169bb
 8011fdc:	080169c8 	.word	0x080169c8
 8011fe0:	080169f6 	.word	0x080169f6

08011fe4 <_free_r>:
 8011fe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011fe6:	2900      	cmp	r1, #0
 8011fe8:	d044      	beq.n	8012074 <_free_r+0x90>
 8011fea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011fee:	9001      	str	r0, [sp, #4]
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	f1a1 0404 	sub.w	r4, r1, #4
 8011ff6:	bfb8      	it	lt
 8011ff8:	18e4      	addlt	r4, r4, r3
 8011ffa:	f000 fc51 	bl	80128a0 <__malloc_lock>
 8011ffe:	4a1e      	ldr	r2, [pc, #120]	; (8012078 <_free_r+0x94>)
 8012000:	9801      	ldr	r0, [sp, #4]
 8012002:	6813      	ldr	r3, [r2, #0]
 8012004:	b933      	cbnz	r3, 8012014 <_free_r+0x30>
 8012006:	6063      	str	r3, [r4, #4]
 8012008:	6014      	str	r4, [r2, #0]
 801200a:	b003      	add	sp, #12
 801200c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012010:	f000 bc4c 	b.w	80128ac <__malloc_unlock>
 8012014:	42a3      	cmp	r3, r4
 8012016:	d908      	bls.n	801202a <_free_r+0x46>
 8012018:	6825      	ldr	r5, [r4, #0]
 801201a:	1961      	adds	r1, r4, r5
 801201c:	428b      	cmp	r3, r1
 801201e:	bf01      	itttt	eq
 8012020:	6819      	ldreq	r1, [r3, #0]
 8012022:	685b      	ldreq	r3, [r3, #4]
 8012024:	1949      	addeq	r1, r1, r5
 8012026:	6021      	streq	r1, [r4, #0]
 8012028:	e7ed      	b.n	8012006 <_free_r+0x22>
 801202a:	461a      	mov	r2, r3
 801202c:	685b      	ldr	r3, [r3, #4]
 801202e:	b10b      	cbz	r3, 8012034 <_free_r+0x50>
 8012030:	42a3      	cmp	r3, r4
 8012032:	d9fa      	bls.n	801202a <_free_r+0x46>
 8012034:	6811      	ldr	r1, [r2, #0]
 8012036:	1855      	adds	r5, r2, r1
 8012038:	42a5      	cmp	r5, r4
 801203a:	d10b      	bne.n	8012054 <_free_r+0x70>
 801203c:	6824      	ldr	r4, [r4, #0]
 801203e:	4421      	add	r1, r4
 8012040:	1854      	adds	r4, r2, r1
 8012042:	42a3      	cmp	r3, r4
 8012044:	6011      	str	r1, [r2, #0]
 8012046:	d1e0      	bne.n	801200a <_free_r+0x26>
 8012048:	681c      	ldr	r4, [r3, #0]
 801204a:	685b      	ldr	r3, [r3, #4]
 801204c:	6053      	str	r3, [r2, #4]
 801204e:	440c      	add	r4, r1
 8012050:	6014      	str	r4, [r2, #0]
 8012052:	e7da      	b.n	801200a <_free_r+0x26>
 8012054:	d902      	bls.n	801205c <_free_r+0x78>
 8012056:	230c      	movs	r3, #12
 8012058:	6003      	str	r3, [r0, #0]
 801205a:	e7d6      	b.n	801200a <_free_r+0x26>
 801205c:	6825      	ldr	r5, [r4, #0]
 801205e:	1961      	adds	r1, r4, r5
 8012060:	428b      	cmp	r3, r1
 8012062:	bf04      	itt	eq
 8012064:	6819      	ldreq	r1, [r3, #0]
 8012066:	685b      	ldreq	r3, [r3, #4]
 8012068:	6063      	str	r3, [r4, #4]
 801206a:	bf04      	itt	eq
 801206c:	1949      	addeq	r1, r1, r5
 801206e:	6021      	streq	r1, [r4, #0]
 8012070:	6054      	str	r4, [r2, #4]
 8012072:	e7ca      	b.n	801200a <_free_r+0x26>
 8012074:	b003      	add	sp, #12
 8012076:	bd30      	pop	{r4, r5, pc}
 8012078:	2000aa6c 	.word	0x2000aa6c

0801207c <rshift>:
 801207c:	6903      	ldr	r3, [r0, #16]
 801207e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012082:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012086:	ea4f 1261 	mov.w	r2, r1, asr #5
 801208a:	f100 0414 	add.w	r4, r0, #20
 801208e:	dd45      	ble.n	801211c <rshift+0xa0>
 8012090:	f011 011f 	ands.w	r1, r1, #31
 8012094:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012098:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801209c:	d10c      	bne.n	80120b8 <rshift+0x3c>
 801209e:	f100 0710 	add.w	r7, r0, #16
 80120a2:	4629      	mov	r1, r5
 80120a4:	42b1      	cmp	r1, r6
 80120a6:	d334      	bcc.n	8012112 <rshift+0x96>
 80120a8:	1a9b      	subs	r3, r3, r2
 80120aa:	009b      	lsls	r3, r3, #2
 80120ac:	1eea      	subs	r2, r5, #3
 80120ae:	4296      	cmp	r6, r2
 80120b0:	bf38      	it	cc
 80120b2:	2300      	movcc	r3, #0
 80120b4:	4423      	add	r3, r4
 80120b6:	e015      	b.n	80120e4 <rshift+0x68>
 80120b8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80120bc:	f1c1 0820 	rsb	r8, r1, #32
 80120c0:	40cf      	lsrs	r7, r1
 80120c2:	f105 0e04 	add.w	lr, r5, #4
 80120c6:	46a1      	mov	r9, r4
 80120c8:	4576      	cmp	r6, lr
 80120ca:	46f4      	mov	ip, lr
 80120cc:	d815      	bhi.n	80120fa <rshift+0x7e>
 80120ce:	1a9a      	subs	r2, r3, r2
 80120d0:	0092      	lsls	r2, r2, #2
 80120d2:	3a04      	subs	r2, #4
 80120d4:	3501      	adds	r5, #1
 80120d6:	42ae      	cmp	r6, r5
 80120d8:	bf38      	it	cc
 80120da:	2200      	movcc	r2, #0
 80120dc:	18a3      	adds	r3, r4, r2
 80120de:	50a7      	str	r7, [r4, r2]
 80120e0:	b107      	cbz	r7, 80120e4 <rshift+0x68>
 80120e2:	3304      	adds	r3, #4
 80120e4:	1b1a      	subs	r2, r3, r4
 80120e6:	42a3      	cmp	r3, r4
 80120e8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80120ec:	bf08      	it	eq
 80120ee:	2300      	moveq	r3, #0
 80120f0:	6102      	str	r2, [r0, #16]
 80120f2:	bf08      	it	eq
 80120f4:	6143      	streq	r3, [r0, #20]
 80120f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80120fa:	f8dc c000 	ldr.w	ip, [ip]
 80120fe:	fa0c fc08 	lsl.w	ip, ip, r8
 8012102:	ea4c 0707 	orr.w	r7, ip, r7
 8012106:	f849 7b04 	str.w	r7, [r9], #4
 801210a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801210e:	40cf      	lsrs	r7, r1
 8012110:	e7da      	b.n	80120c8 <rshift+0x4c>
 8012112:	f851 cb04 	ldr.w	ip, [r1], #4
 8012116:	f847 cf04 	str.w	ip, [r7, #4]!
 801211a:	e7c3      	b.n	80120a4 <rshift+0x28>
 801211c:	4623      	mov	r3, r4
 801211e:	e7e1      	b.n	80120e4 <rshift+0x68>

08012120 <__hexdig_fun>:
 8012120:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012124:	2b09      	cmp	r3, #9
 8012126:	d802      	bhi.n	801212e <__hexdig_fun+0xe>
 8012128:	3820      	subs	r0, #32
 801212a:	b2c0      	uxtb	r0, r0
 801212c:	4770      	bx	lr
 801212e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8012132:	2b05      	cmp	r3, #5
 8012134:	d801      	bhi.n	801213a <__hexdig_fun+0x1a>
 8012136:	3847      	subs	r0, #71	; 0x47
 8012138:	e7f7      	b.n	801212a <__hexdig_fun+0xa>
 801213a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801213e:	2b05      	cmp	r3, #5
 8012140:	d801      	bhi.n	8012146 <__hexdig_fun+0x26>
 8012142:	3827      	subs	r0, #39	; 0x27
 8012144:	e7f1      	b.n	801212a <__hexdig_fun+0xa>
 8012146:	2000      	movs	r0, #0
 8012148:	4770      	bx	lr
	...

0801214c <__gethex>:
 801214c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012150:	4617      	mov	r7, r2
 8012152:	680a      	ldr	r2, [r1, #0]
 8012154:	b085      	sub	sp, #20
 8012156:	f102 0b02 	add.w	fp, r2, #2
 801215a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801215e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8012162:	4681      	mov	r9, r0
 8012164:	468a      	mov	sl, r1
 8012166:	9302      	str	r3, [sp, #8]
 8012168:	32fe      	adds	r2, #254	; 0xfe
 801216a:	eb02 030b 	add.w	r3, r2, fp
 801216e:	46d8      	mov	r8, fp
 8012170:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8012174:	9301      	str	r3, [sp, #4]
 8012176:	2830      	cmp	r0, #48	; 0x30
 8012178:	d0f7      	beq.n	801216a <__gethex+0x1e>
 801217a:	f7ff ffd1 	bl	8012120 <__hexdig_fun>
 801217e:	4604      	mov	r4, r0
 8012180:	2800      	cmp	r0, #0
 8012182:	d138      	bne.n	80121f6 <__gethex+0xaa>
 8012184:	49a7      	ldr	r1, [pc, #668]	; (8012424 <__gethex+0x2d8>)
 8012186:	2201      	movs	r2, #1
 8012188:	4640      	mov	r0, r8
 801218a:	f7ff fe02 	bl	8011d92 <strncmp>
 801218e:	4606      	mov	r6, r0
 8012190:	2800      	cmp	r0, #0
 8012192:	d169      	bne.n	8012268 <__gethex+0x11c>
 8012194:	f898 0001 	ldrb.w	r0, [r8, #1]
 8012198:	465d      	mov	r5, fp
 801219a:	f7ff ffc1 	bl	8012120 <__hexdig_fun>
 801219e:	2800      	cmp	r0, #0
 80121a0:	d064      	beq.n	801226c <__gethex+0x120>
 80121a2:	465a      	mov	r2, fp
 80121a4:	7810      	ldrb	r0, [r2, #0]
 80121a6:	2830      	cmp	r0, #48	; 0x30
 80121a8:	4690      	mov	r8, r2
 80121aa:	f102 0201 	add.w	r2, r2, #1
 80121ae:	d0f9      	beq.n	80121a4 <__gethex+0x58>
 80121b0:	f7ff ffb6 	bl	8012120 <__hexdig_fun>
 80121b4:	2301      	movs	r3, #1
 80121b6:	fab0 f480 	clz	r4, r0
 80121ba:	0964      	lsrs	r4, r4, #5
 80121bc:	465e      	mov	r6, fp
 80121be:	9301      	str	r3, [sp, #4]
 80121c0:	4642      	mov	r2, r8
 80121c2:	4615      	mov	r5, r2
 80121c4:	3201      	adds	r2, #1
 80121c6:	7828      	ldrb	r0, [r5, #0]
 80121c8:	f7ff ffaa 	bl	8012120 <__hexdig_fun>
 80121cc:	2800      	cmp	r0, #0
 80121ce:	d1f8      	bne.n	80121c2 <__gethex+0x76>
 80121d0:	4994      	ldr	r1, [pc, #592]	; (8012424 <__gethex+0x2d8>)
 80121d2:	2201      	movs	r2, #1
 80121d4:	4628      	mov	r0, r5
 80121d6:	f7ff fddc 	bl	8011d92 <strncmp>
 80121da:	b978      	cbnz	r0, 80121fc <__gethex+0xb0>
 80121dc:	b946      	cbnz	r6, 80121f0 <__gethex+0xa4>
 80121de:	1c6e      	adds	r6, r5, #1
 80121e0:	4632      	mov	r2, r6
 80121e2:	4615      	mov	r5, r2
 80121e4:	3201      	adds	r2, #1
 80121e6:	7828      	ldrb	r0, [r5, #0]
 80121e8:	f7ff ff9a 	bl	8012120 <__hexdig_fun>
 80121ec:	2800      	cmp	r0, #0
 80121ee:	d1f8      	bne.n	80121e2 <__gethex+0x96>
 80121f0:	1b73      	subs	r3, r6, r5
 80121f2:	009e      	lsls	r6, r3, #2
 80121f4:	e004      	b.n	8012200 <__gethex+0xb4>
 80121f6:	2400      	movs	r4, #0
 80121f8:	4626      	mov	r6, r4
 80121fa:	e7e1      	b.n	80121c0 <__gethex+0x74>
 80121fc:	2e00      	cmp	r6, #0
 80121fe:	d1f7      	bne.n	80121f0 <__gethex+0xa4>
 8012200:	782b      	ldrb	r3, [r5, #0]
 8012202:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012206:	2b50      	cmp	r3, #80	; 0x50
 8012208:	d13d      	bne.n	8012286 <__gethex+0x13a>
 801220a:	786b      	ldrb	r3, [r5, #1]
 801220c:	2b2b      	cmp	r3, #43	; 0x2b
 801220e:	d02f      	beq.n	8012270 <__gethex+0x124>
 8012210:	2b2d      	cmp	r3, #45	; 0x2d
 8012212:	d031      	beq.n	8012278 <__gethex+0x12c>
 8012214:	1c69      	adds	r1, r5, #1
 8012216:	f04f 0b00 	mov.w	fp, #0
 801221a:	7808      	ldrb	r0, [r1, #0]
 801221c:	f7ff ff80 	bl	8012120 <__hexdig_fun>
 8012220:	1e42      	subs	r2, r0, #1
 8012222:	b2d2      	uxtb	r2, r2
 8012224:	2a18      	cmp	r2, #24
 8012226:	d82e      	bhi.n	8012286 <__gethex+0x13a>
 8012228:	f1a0 0210 	sub.w	r2, r0, #16
 801222c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012230:	f7ff ff76 	bl	8012120 <__hexdig_fun>
 8012234:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8012238:	fa5f fc8c 	uxtb.w	ip, ip
 801223c:	f1bc 0f18 	cmp.w	ip, #24
 8012240:	d91d      	bls.n	801227e <__gethex+0x132>
 8012242:	f1bb 0f00 	cmp.w	fp, #0
 8012246:	d000      	beq.n	801224a <__gethex+0xfe>
 8012248:	4252      	negs	r2, r2
 801224a:	4416      	add	r6, r2
 801224c:	f8ca 1000 	str.w	r1, [sl]
 8012250:	b1dc      	cbz	r4, 801228a <__gethex+0x13e>
 8012252:	9b01      	ldr	r3, [sp, #4]
 8012254:	2b00      	cmp	r3, #0
 8012256:	bf14      	ite	ne
 8012258:	f04f 0800 	movne.w	r8, #0
 801225c:	f04f 0806 	moveq.w	r8, #6
 8012260:	4640      	mov	r0, r8
 8012262:	b005      	add	sp, #20
 8012264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012268:	4645      	mov	r5, r8
 801226a:	4626      	mov	r6, r4
 801226c:	2401      	movs	r4, #1
 801226e:	e7c7      	b.n	8012200 <__gethex+0xb4>
 8012270:	f04f 0b00 	mov.w	fp, #0
 8012274:	1ca9      	adds	r1, r5, #2
 8012276:	e7d0      	b.n	801221a <__gethex+0xce>
 8012278:	f04f 0b01 	mov.w	fp, #1
 801227c:	e7fa      	b.n	8012274 <__gethex+0x128>
 801227e:	230a      	movs	r3, #10
 8012280:	fb03 0002 	mla	r0, r3, r2, r0
 8012284:	e7d0      	b.n	8012228 <__gethex+0xdc>
 8012286:	4629      	mov	r1, r5
 8012288:	e7e0      	b.n	801224c <__gethex+0x100>
 801228a:	eba5 0308 	sub.w	r3, r5, r8
 801228e:	3b01      	subs	r3, #1
 8012290:	4621      	mov	r1, r4
 8012292:	2b07      	cmp	r3, #7
 8012294:	dc0a      	bgt.n	80122ac <__gethex+0x160>
 8012296:	4648      	mov	r0, r9
 8012298:	f000 fb0e 	bl	80128b8 <_Balloc>
 801229c:	4604      	mov	r4, r0
 801229e:	b940      	cbnz	r0, 80122b2 <__gethex+0x166>
 80122a0:	4b61      	ldr	r3, [pc, #388]	; (8012428 <__gethex+0x2dc>)
 80122a2:	4602      	mov	r2, r0
 80122a4:	21e4      	movs	r1, #228	; 0xe4
 80122a6:	4861      	ldr	r0, [pc, #388]	; (801242c <__gethex+0x2e0>)
 80122a8:	f7ff fe7e 	bl	8011fa8 <__assert_func>
 80122ac:	3101      	adds	r1, #1
 80122ae:	105b      	asrs	r3, r3, #1
 80122b0:	e7ef      	b.n	8012292 <__gethex+0x146>
 80122b2:	f100 0a14 	add.w	sl, r0, #20
 80122b6:	2300      	movs	r3, #0
 80122b8:	495a      	ldr	r1, [pc, #360]	; (8012424 <__gethex+0x2d8>)
 80122ba:	f8cd a004 	str.w	sl, [sp, #4]
 80122be:	469b      	mov	fp, r3
 80122c0:	45a8      	cmp	r8, r5
 80122c2:	d342      	bcc.n	801234a <__gethex+0x1fe>
 80122c4:	9801      	ldr	r0, [sp, #4]
 80122c6:	f840 bb04 	str.w	fp, [r0], #4
 80122ca:	eba0 000a 	sub.w	r0, r0, sl
 80122ce:	1080      	asrs	r0, r0, #2
 80122d0:	6120      	str	r0, [r4, #16]
 80122d2:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80122d6:	4658      	mov	r0, fp
 80122d8:	f000 fbe0 	bl	8012a9c <__hi0bits>
 80122dc:	683d      	ldr	r5, [r7, #0]
 80122de:	eba8 0000 	sub.w	r0, r8, r0
 80122e2:	42a8      	cmp	r0, r5
 80122e4:	dd59      	ble.n	801239a <__gethex+0x24e>
 80122e6:	eba0 0805 	sub.w	r8, r0, r5
 80122ea:	4641      	mov	r1, r8
 80122ec:	4620      	mov	r0, r4
 80122ee:	f000 ff6c 	bl	80131ca <__any_on>
 80122f2:	4683      	mov	fp, r0
 80122f4:	b1b8      	cbz	r0, 8012326 <__gethex+0x1da>
 80122f6:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 80122fa:	1159      	asrs	r1, r3, #5
 80122fc:	f003 021f 	and.w	r2, r3, #31
 8012300:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8012304:	f04f 0b01 	mov.w	fp, #1
 8012308:	fa0b f202 	lsl.w	r2, fp, r2
 801230c:	420a      	tst	r2, r1
 801230e:	d00a      	beq.n	8012326 <__gethex+0x1da>
 8012310:	455b      	cmp	r3, fp
 8012312:	dd06      	ble.n	8012322 <__gethex+0x1d6>
 8012314:	f1a8 0102 	sub.w	r1, r8, #2
 8012318:	4620      	mov	r0, r4
 801231a:	f000 ff56 	bl	80131ca <__any_on>
 801231e:	2800      	cmp	r0, #0
 8012320:	d138      	bne.n	8012394 <__gethex+0x248>
 8012322:	f04f 0b02 	mov.w	fp, #2
 8012326:	4641      	mov	r1, r8
 8012328:	4620      	mov	r0, r4
 801232a:	f7ff fea7 	bl	801207c <rshift>
 801232e:	4446      	add	r6, r8
 8012330:	68bb      	ldr	r3, [r7, #8]
 8012332:	42b3      	cmp	r3, r6
 8012334:	da41      	bge.n	80123ba <__gethex+0x26e>
 8012336:	4621      	mov	r1, r4
 8012338:	4648      	mov	r0, r9
 801233a:	f000 fafd 	bl	8012938 <_Bfree>
 801233e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012340:	2300      	movs	r3, #0
 8012342:	6013      	str	r3, [r2, #0]
 8012344:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8012348:	e78a      	b.n	8012260 <__gethex+0x114>
 801234a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801234e:	2a2e      	cmp	r2, #46	; 0x2e
 8012350:	d014      	beq.n	801237c <__gethex+0x230>
 8012352:	2b20      	cmp	r3, #32
 8012354:	d106      	bne.n	8012364 <__gethex+0x218>
 8012356:	9b01      	ldr	r3, [sp, #4]
 8012358:	f843 bb04 	str.w	fp, [r3], #4
 801235c:	f04f 0b00 	mov.w	fp, #0
 8012360:	9301      	str	r3, [sp, #4]
 8012362:	465b      	mov	r3, fp
 8012364:	7828      	ldrb	r0, [r5, #0]
 8012366:	9303      	str	r3, [sp, #12]
 8012368:	f7ff feda 	bl	8012120 <__hexdig_fun>
 801236c:	9b03      	ldr	r3, [sp, #12]
 801236e:	f000 000f 	and.w	r0, r0, #15
 8012372:	4098      	lsls	r0, r3
 8012374:	ea4b 0b00 	orr.w	fp, fp, r0
 8012378:	3304      	adds	r3, #4
 801237a:	e7a1      	b.n	80122c0 <__gethex+0x174>
 801237c:	45a8      	cmp	r8, r5
 801237e:	d8e8      	bhi.n	8012352 <__gethex+0x206>
 8012380:	2201      	movs	r2, #1
 8012382:	4628      	mov	r0, r5
 8012384:	9303      	str	r3, [sp, #12]
 8012386:	f7ff fd04 	bl	8011d92 <strncmp>
 801238a:	4926      	ldr	r1, [pc, #152]	; (8012424 <__gethex+0x2d8>)
 801238c:	9b03      	ldr	r3, [sp, #12]
 801238e:	2800      	cmp	r0, #0
 8012390:	d1df      	bne.n	8012352 <__gethex+0x206>
 8012392:	e795      	b.n	80122c0 <__gethex+0x174>
 8012394:	f04f 0b03 	mov.w	fp, #3
 8012398:	e7c5      	b.n	8012326 <__gethex+0x1da>
 801239a:	da0b      	bge.n	80123b4 <__gethex+0x268>
 801239c:	eba5 0800 	sub.w	r8, r5, r0
 80123a0:	4621      	mov	r1, r4
 80123a2:	4642      	mov	r2, r8
 80123a4:	4648      	mov	r0, r9
 80123a6:	f000 fce1 	bl	8012d6c <__lshift>
 80123aa:	eba6 0608 	sub.w	r6, r6, r8
 80123ae:	4604      	mov	r4, r0
 80123b0:	f100 0a14 	add.w	sl, r0, #20
 80123b4:	f04f 0b00 	mov.w	fp, #0
 80123b8:	e7ba      	b.n	8012330 <__gethex+0x1e4>
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	42b3      	cmp	r3, r6
 80123be:	dd73      	ble.n	80124a8 <__gethex+0x35c>
 80123c0:	1b9e      	subs	r6, r3, r6
 80123c2:	42b5      	cmp	r5, r6
 80123c4:	dc34      	bgt.n	8012430 <__gethex+0x2e4>
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	2b02      	cmp	r3, #2
 80123ca:	d023      	beq.n	8012414 <__gethex+0x2c8>
 80123cc:	2b03      	cmp	r3, #3
 80123ce:	d025      	beq.n	801241c <__gethex+0x2d0>
 80123d0:	2b01      	cmp	r3, #1
 80123d2:	d115      	bne.n	8012400 <__gethex+0x2b4>
 80123d4:	42b5      	cmp	r5, r6
 80123d6:	d113      	bne.n	8012400 <__gethex+0x2b4>
 80123d8:	2d01      	cmp	r5, #1
 80123da:	d10b      	bne.n	80123f4 <__gethex+0x2a8>
 80123dc:	9a02      	ldr	r2, [sp, #8]
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	6013      	str	r3, [r2, #0]
 80123e2:	2301      	movs	r3, #1
 80123e4:	6123      	str	r3, [r4, #16]
 80123e6:	f8ca 3000 	str.w	r3, [sl]
 80123ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80123ec:	f04f 0862 	mov.w	r8, #98	; 0x62
 80123f0:	601c      	str	r4, [r3, #0]
 80123f2:	e735      	b.n	8012260 <__gethex+0x114>
 80123f4:	1e69      	subs	r1, r5, #1
 80123f6:	4620      	mov	r0, r4
 80123f8:	f000 fee7 	bl	80131ca <__any_on>
 80123fc:	2800      	cmp	r0, #0
 80123fe:	d1ed      	bne.n	80123dc <__gethex+0x290>
 8012400:	4621      	mov	r1, r4
 8012402:	4648      	mov	r0, r9
 8012404:	f000 fa98 	bl	8012938 <_Bfree>
 8012408:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801240a:	2300      	movs	r3, #0
 801240c:	6013      	str	r3, [r2, #0]
 801240e:	f04f 0850 	mov.w	r8, #80	; 0x50
 8012412:	e725      	b.n	8012260 <__gethex+0x114>
 8012414:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012416:	2b00      	cmp	r3, #0
 8012418:	d1f2      	bne.n	8012400 <__gethex+0x2b4>
 801241a:	e7df      	b.n	80123dc <__gethex+0x290>
 801241c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801241e:	2b00      	cmp	r3, #0
 8012420:	d1dc      	bne.n	80123dc <__gethex+0x290>
 8012422:	e7ed      	b.n	8012400 <__gethex+0x2b4>
 8012424:	080167f9 	.word	0x080167f9
 8012428:	080169f7 	.word	0x080169f7
 801242c:	08016a08 	.word	0x08016a08
 8012430:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8012434:	f1bb 0f00 	cmp.w	fp, #0
 8012438:	d133      	bne.n	80124a2 <__gethex+0x356>
 801243a:	f1b8 0f00 	cmp.w	r8, #0
 801243e:	d004      	beq.n	801244a <__gethex+0x2fe>
 8012440:	4641      	mov	r1, r8
 8012442:	4620      	mov	r0, r4
 8012444:	f000 fec1 	bl	80131ca <__any_on>
 8012448:	4683      	mov	fp, r0
 801244a:	ea4f 1268 	mov.w	r2, r8, asr #5
 801244e:	2301      	movs	r3, #1
 8012450:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8012454:	f008 081f 	and.w	r8, r8, #31
 8012458:	fa03 f308 	lsl.w	r3, r3, r8
 801245c:	4213      	tst	r3, r2
 801245e:	4631      	mov	r1, r6
 8012460:	4620      	mov	r0, r4
 8012462:	bf18      	it	ne
 8012464:	f04b 0b02 	orrne.w	fp, fp, #2
 8012468:	1bad      	subs	r5, r5, r6
 801246a:	f7ff fe07 	bl	801207c <rshift>
 801246e:	687e      	ldr	r6, [r7, #4]
 8012470:	f04f 0802 	mov.w	r8, #2
 8012474:	f1bb 0f00 	cmp.w	fp, #0
 8012478:	d04a      	beq.n	8012510 <__gethex+0x3c4>
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	2b02      	cmp	r3, #2
 801247e:	d016      	beq.n	80124ae <__gethex+0x362>
 8012480:	2b03      	cmp	r3, #3
 8012482:	d018      	beq.n	80124b6 <__gethex+0x36a>
 8012484:	2b01      	cmp	r3, #1
 8012486:	d109      	bne.n	801249c <__gethex+0x350>
 8012488:	f01b 0f02 	tst.w	fp, #2
 801248c:	d006      	beq.n	801249c <__gethex+0x350>
 801248e:	f8da 3000 	ldr.w	r3, [sl]
 8012492:	ea4b 0b03 	orr.w	fp, fp, r3
 8012496:	f01b 0f01 	tst.w	fp, #1
 801249a:	d10f      	bne.n	80124bc <__gethex+0x370>
 801249c:	f048 0810 	orr.w	r8, r8, #16
 80124a0:	e036      	b.n	8012510 <__gethex+0x3c4>
 80124a2:	f04f 0b01 	mov.w	fp, #1
 80124a6:	e7d0      	b.n	801244a <__gethex+0x2fe>
 80124a8:	f04f 0801 	mov.w	r8, #1
 80124ac:	e7e2      	b.n	8012474 <__gethex+0x328>
 80124ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80124b0:	f1c3 0301 	rsb	r3, r3, #1
 80124b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80124b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d0ef      	beq.n	801249c <__gethex+0x350>
 80124bc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80124c0:	f104 0214 	add.w	r2, r4, #20
 80124c4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80124c8:	9301      	str	r3, [sp, #4]
 80124ca:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80124ce:	2300      	movs	r3, #0
 80124d0:	4694      	mov	ip, r2
 80124d2:	f852 1b04 	ldr.w	r1, [r2], #4
 80124d6:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 80124da:	d01e      	beq.n	801251a <__gethex+0x3ce>
 80124dc:	3101      	adds	r1, #1
 80124de:	f8cc 1000 	str.w	r1, [ip]
 80124e2:	f1b8 0f02 	cmp.w	r8, #2
 80124e6:	f104 0214 	add.w	r2, r4, #20
 80124ea:	d13d      	bne.n	8012568 <__gethex+0x41c>
 80124ec:	683b      	ldr	r3, [r7, #0]
 80124ee:	3b01      	subs	r3, #1
 80124f0:	42ab      	cmp	r3, r5
 80124f2:	d10b      	bne.n	801250c <__gethex+0x3c0>
 80124f4:	1169      	asrs	r1, r5, #5
 80124f6:	2301      	movs	r3, #1
 80124f8:	f005 051f 	and.w	r5, r5, #31
 80124fc:	fa03 f505 	lsl.w	r5, r3, r5
 8012500:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012504:	421d      	tst	r5, r3
 8012506:	bf18      	it	ne
 8012508:	f04f 0801 	movne.w	r8, #1
 801250c:	f048 0820 	orr.w	r8, r8, #32
 8012510:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012512:	601c      	str	r4, [r3, #0]
 8012514:	9b02      	ldr	r3, [sp, #8]
 8012516:	601e      	str	r6, [r3, #0]
 8012518:	e6a2      	b.n	8012260 <__gethex+0x114>
 801251a:	4290      	cmp	r0, r2
 801251c:	f842 3c04 	str.w	r3, [r2, #-4]
 8012520:	d8d6      	bhi.n	80124d0 <__gethex+0x384>
 8012522:	68a2      	ldr	r2, [r4, #8]
 8012524:	4593      	cmp	fp, r2
 8012526:	db17      	blt.n	8012558 <__gethex+0x40c>
 8012528:	6861      	ldr	r1, [r4, #4]
 801252a:	4648      	mov	r0, r9
 801252c:	3101      	adds	r1, #1
 801252e:	f000 f9c3 	bl	80128b8 <_Balloc>
 8012532:	4682      	mov	sl, r0
 8012534:	b918      	cbnz	r0, 801253e <__gethex+0x3f2>
 8012536:	4b1b      	ldr	r3, [pc, #108]	; (80125a4 <__gethex+0x458>)
 8012538:	4602      	mov	r2, r0
 801253a:	2184      	movs	r1, #132	; 0x84
 801253c:	e6b3      	b.n	80122a6 <__gethex+0x15a>
 801253e:	6922      	ldr	r2, [r4, #16]
 8012540:	3202      	adds	r2, #2
 8012542:	f104 010c 	add.w	r1, r4, #12
 8012546:	0092      	lsls	r2, r2, #2
 8012548:	300c      	adds	r0, #12
 801254a:	f7ff fd16 	bl	8011f7a <memcpy>
 801254e:	4621      	mov	r1, r4
 8012550:	4648      	mov	r0, r9
 8012552:	f000 f9f1 	bl	8012938 <_Bfree>
 8012556:	4654      	mov	r4, sl
 8012558:	6922      	ldr	r2, [r4, #16]
 801255a:	1c51      	adds	r1, r2, #1
 801255c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8012560:	6121      	str	r1, [r4, #16]
 8012562:	2101      	movs	r1, #1
 8012564:	6151      	str	r1, [r2, #20]
 8012566:	e7bc      	b.n	80124e2 <__gethex+0x396>
 8012568:	6921      	ldr	r1, [r4, #16]
 801256a:	4559      	cmp	r1, fp
 801256c:	dd0b      	ble.n	8012586 <__gethex+0x43a>
 801256e:	2101      	movs	r1, #1
 8012570:	4620      	mov	r0, r4
 8012572:	f7ff fd83 	bl	801207c <rshift>
 8012576:	68bb      	ldr	r3, [r7, #8]
 8012578:	3601      	adds	r6, #1
 801257a:	42b3      	cmp	r3, r6
 801257c:	f6ff aedb 	blt.w	8012336 <__gethex+0x1ea>
 8012580:	f04f 0801 	mov.w	r8, #1
 8012584:	e7c2      	b.n	801250c <__gethex+0x3c0>
 8012586:	f015 051f 	ands.w	r5, r5, #31
 801258a:	d0f9      	beq.n	8012580 <__gethex+0x434>
 801258c:	9b01      	ldr	r3, [sp, #4]
 801258e:	441a      	add	r2, r3
 8012590:	f1c5 0520 	rsb	r5, r5, #32
 8012594:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8012598:	f000 fa80 	bl	8012a9c <__hi0bits>
 801259c:	42a8      	cmp	r0, r5
 801259e:	dbe6      	blt.n	801256e <__gethex+0x422>
 80125a0:	e7ee      	b.n	8012580 <__gethex+0x434>
 80125a2:	bf00      	nop
 80125a4:	080169f7 	.word	0x080169f7

080125a8 <L_shift>:
 80125a8:	f1c2 0208 	rsb	r2, r2, #8
 80125ac:	0092      	lsls	r2, r2, #2
 80125ae:	b570      	push	{r4, r5, r6, lr}
 80125b0:	f1c2 0620 	rsb	r6, r2, #32
 80125b4:	6843      	ldr	r3, [r0, #4]
 80125b6:	6804      	ldr	r4, [r0, #0]
 80125b8:	fa03 f506 	lsl.w	r5, r3, r6
 80125bc:	432c      	orrs	r4, r5
 80125be:	40d3      	lsrs	r3, r2
 80125c0:	6004      	str	r4, [r0, #0]
 80125c2:	f840 3f04 	str.w	r3, [r0, #4]!
 80125c6:	4288      	cmp	r0, r1
 80125c8:	d3f4      	bcc.n	80125b4 <L_shift+0xc>
 80125ca:	bd70      	pop	{r4, r5, r6, pc}

080125cc <__match>:
 80125cc:	b530      	push	{r4, r5, lr}
 80125ce:	6803      	ldr	r3, [r0, #0]
 80125d0:	3301      	adds	r3, #1
 80125d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80125d6:	b914      	cbnz	r4, 80125de <__match+0x12>
 80125d8:	6003      	str	r3, [r0, #0]
 80125da:	2001      	movs	r0, #1
 80125dc:	bd30      	pop	{r4, r5, pc}
 80125de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80125e2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80125e6:	2d19      	cmp	r5, #25
 80125e8:	bf98      	it	ls
 80125ea:	3220      	addls	r2, #32
 80125ec:	42a2      	cmp	r2, r4
 80125ee:	d0f0      	beq.n	80125d2 <__match+0x6>
 80125f0:	2000      	movs	r0, #0
 80125f2:	e7f3      	b.n	80125dc <__match+0x10>

080125f4 <__hexnan>:
 80125f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125f8:	680b      	ldr	r3, [r1, #0]
 80125fa:	6801      	ldr	r1, [r0, #0]
 80125fc:	115e      	asrs	r6, r3, #5
 80125fe:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012602:	f013 031f 	ands.w	r3, r3, #31
 8012606:	b087      	sub	sp, #28
 8012608:	bf18      	it	ne
 801260a:	3604      	addne	r6, #4
 801260c:	2500      	movs	r5, #0
 801260e:	1f37      	subs	r7, r6, #4
 8012610:	4682      	mov	sl, r0
 8012612:	4690      	mov	r8, r2
 8012614:	9301      	str	r3, [sp, #4]
 8012616:	f846 5c04 	str.w	r5, [r6, #-4]
 801261a:	46b9      	mov	r9, r7
 801261c:	463c      	mov	r4, r7
 801261e:	9502      	str	r5, [sp, #8]
 8012620:	46ab      	mov	fp, r5
 8012622:	784a      	ldrb	r2, [r1, #1]
 8012624:	1c4b      	adds	r3, r1, #1
 8012626:	9303      	str	r3, [sp, #12]
 8012628:	b342      	cbz	r2, 801267c <__hexnan+0x88>
 801262a:	4610      	mov	r0, r2
 801262c:	9105      	str	r1, [sp, #20]
 801262e:	9204      	str	r2, [sp, #16]
 8012630:	f7ff fd76 	bl	8012120 <__hexdig_fun>
 8012634:	2800      	cmp	r0, #0
 8012636:	d14f      	bne.n	80126d8 <__hexnan+0xe4>
 8012638:	9a04      	ldr	r2, [sp, #16]
 801263a:	9905      	ldr	r1, [sp, #20]
 801263c:	2a20      	cmp	r2, #32
 801263e:	d818      	bhi.n	8012672 <__hexnan+0x7e>
 8012640:	9b02      	ldr	r3, [sp, #8]
 8012642:	459b      	cmp	fp, r3
 8012644:	dd13      	ble.n	801266e <__hexnan+0x7a>
 8012646:	454c      	cmp	r4, r9
 8012648:	d206      	bcs.n	8012658 <__hexnan+0x64>
 801264a:	2d07      	cmp	r5, #7
 801264c:	dc04      	bgt.n	8012658 <__hexnan+0x64>
 801264e:	462a      	mov	r2, r5
 8012650:	4649      	mov	r1, r9
 8012652:	4620      	mov	r0, r4
 8012654:	f7ff ffa8 	bl	80125a8 <L_shift>
 8012658:	4544      	cmp	r4, r8
 801265a:	d950      	bls.n	80126fe <__hexnan+0x10a>
 801265c:	2300      	movs	r3, #0
 801265e:	f1a4 0904 	sub.w	r9, r4, #4
 8012662:	f844 3c04 	str.w	r3, [r4, #-4]
 8012666:	f8cd b008 	str.w	fp, [sp, #8]
 801266a:	464c      	mov	r4, r9
 801266c:	461d      	mov	r5, r3
 801266e:	9903      	ldr	r1, [sp, #12]
 8012670:	e7d7      	b.n	8012622 <__hexnan+0x2e>
 8012672:	2a29      	cmp	r2, #41	; 0x29
 8012674:	d155      	bne.n	8012722 <__hexnan+0x12e>
 8012676:	3102      	adds	r1, #2
 8012678:	f8ca 1000 	str.w	r1, [sl]
 801267c:	f1bb 0f00 	cmp.w	fp, #0
 8012680:	d04f      	beq.n	8012722 <__hexnan+0x12e>
 8012682:	454c      	cmp	r4, r9
 8012684:	d206      	bcs.n	8012694 <__hexnan+0xa0>
 8012686:	2d07      	cmp	r5, #7
 8012688:	dc04      	bgt.n	8012694 <__hexnan+0xa0>
 801268a:	462a      	mov	r2, r5
 801268c:	4649      	mov	r1, r9
 801268e:	4620      	mov	r0, r4
 8012690:	f7ff ff8a 	bl	80125a8 <L_shift>
 8012694:	4544      	cmp	r4, r8
 8012696:	d934      	bls.n	8012702 <__hexnan+0x10e>
 8012698:	f1a8 0204 	sub.w	r2, r8, #4
 801269c:	4623      	mov	r3, r4
 801269e:	f853 1b04 	ldr.w	r1, [r3], #4
 80126a2:	f842 1f04 	str.w	r1, [r2, #4]!
 80126a6:	429f      	cmp	r7, r3
 80126a8:	d2f9      	bcs.n	801269e <__hexnan+0xaa>
 80126aa:	1b3b      	subs	r3, r7, r4
 80126ac:	f023 0303 	bic.w	r3, r3, #3
 80126b0:	3304      	adds	r3, #4
 80126b2:	3e03      	subs	r6, #3
 80126b4:	3401      	adds	r4, #1
 80126b6:	42a6      	cmp	r6, r4
 80126b8:	bf38      	it	cc
 80126ba:	2304      	movcc	r3, #4
 80126bc:	4443      	add	r3, r8
 80126be:	2200      	movs	r2, #0
 80126c0:	f843 2b04 	str.w	r2, [r3], #4
 80126c4:	429f      	cmp	r7, r3
 80126c6:	d2fb      	bcs.n	80126c0 <__hexnan+0xcc>
 80126c8:	683b      	ldr	r3, [r7, #0]
 80126ca:	b91b      	cbnz	r3, 80126d4 <__hexnan+0xe0>
 80126cc:	4547      	cmp	r7, r8
 80126ce:	d126      	bne.n	801271e <__hexnan+0x12a>
 80126d0:	2301      	movs	r3, #1
 80126d2:	603b      	str	r3, [r7, #0]
 80126d4:	2005      	movs	r0, #5
 80126d6:	e025      	b.n	8012724 <__hexnan+0x130>
 80126d8:	3501      	adds	r5, #1
 80126da:	2d08      	cmp	r5, #8
 80126dc:	f10b 0b01 	add.w	fp, fp, #1
 80126e0:	dd06      	ble.n	80126f0 <__hexnan+0xfc>
 80126e2:	4544      	cmp	r4, r8
 80126e4:	d9c3      	bls.n	801266e <__hexnan+0x7a>
 80126e6:	2300      	movs	r3, #0
 80126e8:	f844 3c04 	str.w	r3, [r4, #-4]
 80126ec:	2501      	movs	r5, #1
 80126ee:	3c04      	subs	r4, #4
 80126f0:	6822      	ldr	r2, [r4, #0]
 80126f2:	f000 000f 	and.w	r0, r0, #15
 80126f6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80126fa:	6020      	str	r0, [r4, #0]
 80126fc:	e7b7      	b.n	801266e <__hexnan+0x7a>
 80126fe:	2508      	movs	r5, #8
 8012700:	e7b5      	b.n	801266e <__hexnan+0x7a>
 8012702:	9b01      	ldr	r3, [sp, #4]
 8012704:	2b00      	cmp	r3, #0
 8012706:	d0df      	beq.n	80126c8 <__hexnan+0xd4>
 8012708:	f1c3 0320 	rsb	r3, r3, #32
 801270c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012710:	40da      	lsrs	r2, r3
 8012712:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8012716:	4013      	ands	r3, r2
 8012718:	f846 3c04 	str.w	r3, [r6, #-4]
 801271c:	e7d4      	b.n	80126c8 <__hexnan+0xd4>
 801271e:	3f04      	subs	r7, #4
 8012720:	e7d2      	b.n	80126c8 <__hexnan+0xd4>
 8012722:	2004      	movs	r0, #4
 8012724:	b007      	add	sp, #28
 8012726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801272c <malloc>:
 801272c:	4b02      	ldr	r3, [pc, #8]	; (8012738 <malloc+0xc>)
 801272e:	4601      	mov	r1, r0
 8012730:	6818      	ldr	r0, [r3, #0]
 8012732:	f000 b823 	b.w	801277c <_malloc_r>
 8012736:	bf00      	nop
 8012738:	200001f0 	.word	0x200001f0

0801273c <sbrk_aligned>:
 801273c:	b570      	push	{r4, r5, r6, lr}
 801273e:	4e0e      	ldr	r6, [pc, #56]	; (8012778 <sbrk_aligned+0x3c>)
 8012740:	460c      	mov	r4, r1
 8012742:	6831      	ldr	r1, [r6, #0]
 8012744:	4605      	mov	r5, r0
 8012746:	b911      	cbnz	r1, 801274e <sbrk_aligned+0x12>
 8012748:	f001 f996 	bl	8013a78 <_sbrk_r>
 801274c:	6030      	str	r0, [r6, #0]
 801274e:	4621      	mov	r1, r4
 8012750:	4628      	mov	r0, r5
 8012752:	f001 f991 	bl	8013a78 <_sbrk_r>
 8012756:	1c43      	adds	r3, r0, #1
 8012758:	d00a      	beq.n	8012770 <sbrk_aligned+0x34>
 801275a:	1cc4      	adds	r4, r0, #3
 801275c:	f024 0403 	bic.w	r4, r4, #3
 8012760:	42a0      	cmp	r0, r4
 8012762:	d007      	beq.n	8012774 <sbrk_aligned+0x38>
 8012764:	1a21      	subs	r1, r4, r0
 8012766:	4628      	mov	r0, r5
 8012768:	f001 f986 	bl	8013a78 <_sbrk_r>
 801276c:	3001      	adds	r0, #1
 801276e:	d101      	bne.n	8012774 <sbrk_aligned+0x38>
 8012770:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8012774:	4620      	mov	r0, r4
 8012776:	bd70      	pop	{r4, r5, r6, pc}
 8012778:	2000aa70 	.word	0x2000aa70

0801277c <_malloc_r>:
 801277c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012780:	1ccd      	adds	r5, r1, #3
 8012782:	f025 0503 	bic.w	r5, r5, #3
 8012786:	3508      	adds	r5, #8
 8012788:	2d0c      	cmp	r5, #12
 801278a:	bf38      	it	cc
 801278c:	250c      	movcc	r5, #12
 801278e:	2d00      	cmp	r5, #0
 8012790:	4607      	mov	r7, r0
 8012792:	db01      	blt.n	8012798 <_malloc_r+0x1c>
 8012794:	42a9      	cmp	r1, r5
 8012796:	d905      	bls.n	80127a4 <_malloc_r+0x28>
 8012798:	230c      	movs	r3, #12
 801279a:	603b      	str	r3, [r7, #0]
 801279c:	2600      	movs	r6, #0
 801279e:	4630      	mov	r0, r6
 80127a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80127a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8012878 <_malloc_r+0xfc>
 80127a8:	f000 f87a 	bl	80128a0 <__malloc_lock>
 80127ac:	f8d8 3000 	ldr.w	r3, [r8]
 80127b0:	461c      	mov	r4, r3
 80127b2:	bb5c      	cbnz	r4, 801280c <_malloc_r+0x90>
 80127b4:	4629      	mov	r1, r5
 80127b6:	4638      	mov	r0, r7
 80127b8:	f7ff ffc0 	bl	801273c <sbrk_aligned>
 80127bc:	1c43      	adds	r3, r0, #1
 80127be:	4604      	mov	r4, r0
 80127c0:	d155      	bne.n	801286e <_malloc_r+0xf2>
 80127c2:	f8d8 4000 	ldr.w	r4, [r8]
 80127c6:	4626      	mov	r6, r4
 80127c8:	2e00      	cmp	r6, #0
 80127ca:	d145      	bne.n	8012858 <_malloc_r+0xdc>
 80127cc:	2c00      	cmp	r4, #0
 80127ce:	d048      	beq.n	8012862 <_malloc_r+0xe6>
 80127d0:	6823      	ldr	r3, [r4, #0]
 80127d2:	4631      	mov	r1, r6
 80127d4:	4638      	mov	r0, r7
 80127d6:	eb04 0903 	add.w	r9, r4, r3
 80127da:	f001 f94d 	bl	8013a78 <_sbrk_r>
 80127de:	4581      	cmp	r9, r0
 80127e0:	d13f      	bne.n	8012862 <_malloc_r+0xe6>
 80127e2:	6821      	ldr	r1, [r4, #0]
 80127e4:	1a6d      	subs	r5, r5, r1
 80127e6:	4629      	mov	r1, r5
 80127e8:	4638      	mov	r0, r7
 80127ea:	f7ff ffa7 	bl	801273c <sbrk_aligned>
 80127ee:	3001      	adds	r0, #1
 80127f0:	d037      	beq.n	8012862 <_malloc_r+0xe6>
 80127f2:	6823      	ldr	r3, [r4, #0]
 80127f4:	442b      	add	r3, r5
 80127f6:	6023      	str	r3, [r4, #0]
 80127f8:	f8d8 3000 	ldr.w	r3, [r8]
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d038      	beq.n	8012872 <_malloc_r+0xf6>
 8012800:	685a      	ldr	r2, [r3, #4]
 8012802:	42a2      	cmp	r2, r4
 8012804:	d12b      	bne.n	801285e <_malloc_r+0xe2>
 8012806:	2200      	movs	r2, #0
 8012808:	605a      	str	r2, [r3, #4]
 801280a:	e00f      	b.n	801282c <_malloc_r+0xb0>
 801280c:	6822      	ldr	r2, [r4, #0]
 801280e:	1b52      	subs	r2, r2, r5
 8012810:	d41f      	bmi.n	8012852 <_malloc_r+0xd6>
 8012812:	2a0b      	cmp	r2, #11
 8012814:	d917      	bls.n	8012846 <_malloc_r+0xca>
 8012816:	1961      	adds	r1, r4, r5
 8012818:	42a3      	cmp	r3, r4
 801281a:	6025      	str	r5, [r4, #0]
 801281c:	bf18      	it	ne
 801281e:	6059      	strne	r1, [r3, #4]
 8012820:	6863      	ldr	r3, [r4, #4]
 8012822:	bf08      	it	eq
 8012824:	f8c8 1000 	streq.w	r1, [r8]
 8012828:	5162      	str	r2, [r4, r5]
 801282a:	604b      	str	r3, [r1, #4]
 801282c:	4638      	mov	r0, r7
 801282e:	f104 060b 	add.w	r6, r4, #11
 8012832:	f000 f83b 	bl	80128ac <__malloc_unlock>
 8012836:	f026 0607 	bic.w	r6, r6, #7
 801283a:	1d23      	adds	r3, r4, #4
 801283c:	1af2      	subs	r2, r6, r3
 801283e:	d0ae      	beq.n	801279e <_malloc_r+0x22>
 8012840:	1b9b      	subs	r3, r3, r6
 8012842:	50a3      	str	r3, [r4, r2]
 8012844:	e7ab      	b.n	801279e <_malloc_r+0x22>
 8012846:	42a3      	cmp	r3, r4
 8012848:	6862      	ldr	r2, [r4, #4]
 801284a:	d1dd      	bne.n	8012808 <_malloc_r+0x8c>
 801284c:	f8c8 2000 	str.w	r2, [r8]
 8012850:	e7ec      	b.n	801282c <_malloc_r+0xb0>
 8012852:	4623      	mov	r3, r4
 8012854:	6864      	ldr	r4, [r4, #4]
 8012856:	e7ac      	b.n	80127b2 <_malloc_r+0x36>
 8012858:	4634      	mov	r4, r6
 801285a:	6876      	ldr	r6, [r6, #4]
 801285c:	e7b4      	b.n	80127c8 <_malloc_r+0x4c>
 801285e:	4613      	mov	r3, r2
 8012860:	e7cc      	b.n	80127fc <_malloc_r+0x80>
 8012862:	230c      	movs	r3, #12
 8012864:	603b      	str	r3, [r7, #0]
 8012866:	4638      	mov	r0, r7
 8012868:	f000 f820 	bl	80128ac <__malloc_unlock>
 801286c:	e797      	b.n	801279e <_malloc_r+0x22>
 801286e:	6025      	str	r5, [r4, #0]
 8012870:	e7dc      	b.n	801282c <_malloc_r+0xb0>
 8012872:	605b      	str	r3, [r3, #4]
 8012874:	deff      	udf	#255	; 0xff
 8012876:	bf00      	nop
 8012878:	2000aa6c 	.word	0x2000aa6c

0801287c <__ascii_mbtowc>:
 801287c:	b082      	sub	sp, #8
 801287e:	b901      	cbnz	r1, 8012882 <__ascii_mbtowc+0x6>
 8012880:	a901      	add	r1, sp, #4
 8012882:	b142      	cbz	r2, 8012896 <__ascii_mbtowc+0x1a>
 8012884:	b14b      	cbz	r3, 801289a <__ascii_mbtowc+0x1e>
 8012886:	7813      	ldrb	r3, [r2, #0]
 8012888:	600b      	str	r3, [r1, #0]
 801288a:	7812      	ldrb	r2, [r2, #0]
 801288c:	1e10      	subs	r0, r2, #0
 801288e:	bf18      	it	ne
 8012890:	2001      	movne	r0, #1
 8012892:	b002      	add	sp, #8
 8012894:	4770      	bx	lr
 8012896:	4610      	mov	r0, r2
 8012898:	e7fb      	b.n	8012892 <__ascii_mbtowc+0x16>
 801289a:	f06f 0001 	mvn.w	r0, #1
 801289e:	e7f8      	b.n	8012892 <__ascii_mbtowc+0x16>

080128a0 <__malloc_lock>:
 80128a0:	4801      	ldr	r0, [pc, #4]	; (80128a8 <__malloc_lock+0x8>)
 80128a2:	f7ff bb68 	b.w	8011f76 <__retarget_lock_acquire_recursive>
 80128a6:	bf00      	nop
 80128a8:	2000aa68 	.word	0x2000aa68

080128ac <__malloc_unlock>:
 80128ac:	4801      	ldr	r0, [pc, #4]	; (80128b4 <__malloc_unlock+0x8>)
 80128ae:	f7ff bb63 	b.w	8011f78 <__retarget_lock_release_recursive>
 80128b2:	bf00      	nop
 80128b4:	2000aa68 	.word	0x2000aa68

080128b8 <_Balloc>:
 80128b8:	b570      	push	{r4, r5, r6, lr}
 80128ba:	69c6      	ldr	r6, [r0, #28]
 80128bc:	4604      	mov	r4, r0
 80128be:	460d      	mov	r5, r1
 80128c0:	b976      	cbnz	r6, 80128e0 <_Balloc+0x28>
 80128c2:	2010      	movs	r0, #16
 80128c4:	f7ff ff32 	bl	801272c <malloc>
 80128c8:	4602      	mov	r2, r0
 80128ca:	61e0      	str	r0, [r4, #28]
 80128cc:	b920      	cbnz	r0, 80128d8 <_Balloc+0x20>
 80128ce:	4b18      	ldr	r3, [pc, #96]	; (8012930 <_Balloc+0x78>)
 80128d0:	4818      	ldr	r0, [pc, #96]	; (8012934 <_Balloc+0x7c>)
 80128d2:	216b      	movs	r1, #107	; 0x6b
 80128d4:	f7ff fb68 	bl	8011fa8 <__assert_func>
 80128d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80128dc:	6006      	str	r6, [r0, #0]
 80128de:	60c6      	str	r6, [r0, #12]
 80128e0:	69e6      	ldr	r6, [r4, #28]
 80128e2:	68f3      	ldr	r3, [r6, #12]
 80128e4:	b183      	cbz	r3, 8012908 <_Balloc+0x50>
 80128e6:	69e3      	ldr	r3, [r4, #28]
 80128e8:	68db      	ldr	r3, [r3, #12]
 80128ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80128ee:	b9b8      	cbnz	r0, 8012920 <_Balloc+0x68>
 80128f0:	2101      	movs	r1, #1
 80128f2:	fa01 f605 	lsl.w	r6, r1, r5
 80128f6:	1d72      	adds	r2, r6, #5
 80128f8:	0092      	lsls	r2, r2, #2
 80128fa:	4620      	mov	r0, r4
 80128fc:	f001 f8d3 	bl	8013aa6 <_calloc_r>
 8012900:	b160      	cbz	r0, 801291c <_Balloc+0x64>
 8012902:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012906:	e00e      	b.n	8012926 <_Balloc+0x6e>
 8012908:	2221      	movs	r2, #33	; 0x21
 801290a:	2104      	movs	r1, #4
 801290c:	4620      	mov	r0, r4
 801290e:	f001 f8ca 	bl	8013aa6 <_calloc_r>
 8012912:	69e3      	ldr	r3, [r4, #28]
 8012914:	60f0      	str	r0, [r6, #12]
 8012916:	68db      	ldr	r3, [r3, #12]
 8012918:	2b00      	cmp	r3, #0
 801291a:	d1e4      	bne.n	80128e6 <_Balloc+0x2e>
 801291c:	2000      	movs	r0, #0
 801291e:	bd70      	pop	{r4, r5, r6, pc}
 8012920:	6802      	ldr	r2, [r0, #0]
 8012922:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012926:	2300      	movs	r3, #0
 8012928:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801292c:	e7f7      	b.n	801291e <_Balloc+0x66>
 801292e:	bf00      	nop
 8012930:	0801678a 	.word	0x0801678a
 8012934:	08016a68 	.word	0x08016a68

08012938 <_Bfree>:
 8012938:	b570      	push	{r4, r5, r6, lr}
 801293a:	69c6      	ldr	r6, [r0, #28]
 801293c:	4605      	mov	r5, r0
 801293e:	460c      	mov	r4, r1
 8012940:	b976      	cbnz	r6, 8012960 <_Bfree+0x28>
 8012942:	2010      	movs	r0, #16
 8012944:	f7ff fef2 	bl	801272c <malloc>
 8012948:	4602      	mov	r2, r0
 801294a:	61e8      	str	r0, [r5, #28]
 801294c:	b920      	cbnz	r0, 8012958 <_Bfree+0x20>
 801294e:	4b09      	ldr	r3, [pc, #36]	; (8012974 <_Bfree+0x3c>)
 8012950:	4809      	ldr	r0, [pc, #36]	; (8012978 <_Bfree+0x40>)
 8012952:	218f      	movs	r1, #143	; 0x8f
 8012954:	f7ff fb28 	bl	8011fa8 <__assert_func>
 8012958:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801295c:	6006      	str	r6, [r0, #0]
 801295e:	60c6      	str	r6, [r0, #12]
 8012960:	b13c      	cbz	r4, 8012972 <_Bfree+0x3a>
 8012962:	69eb      	ldr	r3, [r5, #28]
 8012964:	6862      	ldr	r2, [r4, #4]
 8012966:	68db      	ldr	r3, [r3, #12]
 8012968:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801296c:	6021      	str	r1, [r4, #0]
 801296e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012972:	bd70      	pop	{r4, r5, r6, pc}
 8012974:	0801678a 	.word	0x0801678a
 8012978:	08016a68 	.word	0x08016a68

0801297c <__multadd>:
 801297c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012980:	690d      	ldr	r5, [r1, #16]
 8012982:	4607      	mov	r7, r0
 8012984:	460c      	mov	r4, r1
 8012986:	461e      	mov	r6, r3
 8012988:	f101 0c14 	add.w	ip, r1, #20
 801298c:	2000      	movs	r0, #0
 801298e:	f8dc 3000 	ldr.w	r3, [ip]
 8012992:	b299      	uxth	r1, r3
 8012994:	fb02 6101 	mla	r1, r2, r1, r6
 8012998:	0c1e      	lsrs	r6, r3, #16
 801299a:	0c0b      	lsrs	r3, r1, #16
 801299c:	fb02 3306 	mla	r3, r2, r6, r3
 80129a0:	b289      	uxth	r1, r1
 80129a2:	3001      	adds	r0, #1
 80129a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80129a8:	4285      	cmp	r5, r0
 80129aa:	f84c 1b04 	str.w	r1, [ip], #4
 80129ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80129b2:	dcec      	bgt.n	801298e <__multadd+0x12>
 80129b4:	b30e      	cbz	r6, 80129fa <__multadd+0x7e>
 80129b6:	68a3      	ldr	r3, [r4, #8]
 80129b8:	42ab      	cmp	r3, r5
 80129ba:	dc19      	bgt.n	80129f0 <__multadd+0x74>
 80129bc:	6861      	ldr	r1, [r4, #4]
 80129be:	4638      	mov	r0, r7
 80129c0:	3101      	adds	r1, #1
 80129c2:	f7ff ff79 	bl	80128b8 <_Balloc>
 80129c6:	4680      	mov	r8, r0
 80129c8:	b928      	cbnz	r0, 80129d6 <__multadd+0x5a>
 80129ca:	4602      	mov	r2, r0
 80129cc:	4b0c      	ldr	r3, [pc, #48]	; (8012a00 <__multadd+0x84>)
 80129ce:	480d      	ldr	r0, [pc, #52]	; (8012a04 <__multadd+0x88>)
 80129d0:	21ba      	movs	r1, #186	; 0xba
 80129d2:	f7ff fae9 	bl	8011fa8 <__assert_func>
 80129d6:	6922      	ldr	r2, [r4, #16]
 80129d8:	3202      	adds	r2, #2
 80129da:	f104 010c 	add.w	r1, r4, #12
 80129de:	0092      	lsls	r2, r2, #2
 80129e0:	300c      	adds	r0, #12
 80129e2:	f7ff faca 	bl	8011f7a <memcpy>
 80129e6:	4621      	mov	r1, r4
 80129e8:	4638      	mov	r0, r7
 80129ea:	f7ff ffa5 	bl	8012938 <_Bfree>
 80129ee:	4644      	mov	r4, r8
 80129f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80129f4:	3501      	adds	r5, #1
 80129f6:	615e      	str	r6, [r3, #20]
 80129f8:	6125      	str	r5, [r4, #16]
 80129fa:	4620      	mov	r0, r4
 80129fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a00:	080169f7 	.word	0x080169f7
 8012a04:	08016a68 	.word	0x08016a68

08012a08 <__s2b>:
 8012a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a0c:	460c      	mov	r4, r1
 8012a0e:	4615      	mov	r5, r2
 8012a10:	461f      	mov	r7, r3
 8012a12:	2209      	movs	r2, #9
 8012a14:	3308      	adds	r3, #8
 8012a16:	4606      	mov	r6, r0
 8012a18:	fb93 f3f2 	sdiv	r3, r3, r2
 8012a1c:	2100      	movs	r1, #0
 8012a1e:	2201      	movs	r2, #1
 8012a20:	429a      	cmp	r2, r3
 8012a22:	db09      	blt.n	8012a38 <__s2b+0x30>
 8012a24:	4630      	mov	r0, r6
 8012a26:	f7ff ff47 	bl	80128b8 <_Balloc>
 8012a2a:	b940      	cbnz	r0, 8012a3e <__s2b+0x36>
 8012a2c:	4602      	mov	r2, r0
 8012a2e:	4b19      	ldr	r3, [pc, #100]	; (8012a94 <__s2b+0x8c>)
 8012a30:	4819      	ldr	r0, [pc, #100]	; (8012a98 <__s2b+0x90>)
 8012a32:	21d3      	movs	r1, #211	; 0xd3
 8012a34:	f7ff fab8 	bl	8011fa8 <__assert_func>
 8012a38:	0052      	lsls	r2, r2, #1
 8012a3a:	3101      	adds	r1, #1
 8012a3c:	e7f0      	b.n	8012a20 <__s2b+0x18>
 8012a3e:	9b08      	ldr	r3, [sp, #32]
 8012a40:	6143      	str	r3, [r0, #20]
 8012a42:	2d09      	cmp	r5, #9
 8012a44:	f04f 0301 	mov.w	r3, #1
 8012a48:	6103      	str	r3, [r0, #16]
 8012a4a:	dd16      	ble.n	8012a7a <__s2b+0x72>
 8012a4c:	f104 0909 	add.w	r9, r4, #9
 8012a50:	46c8      	mov	r8, r9
 8012a52:	442c      	add	r4, r5
 8012a54:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012a58:	4601      	mov	r1, r0
 8012a5a:	3b30      	subs	r3, #48	; 0x30
 8012a5c:	220a      	movs	r2, #10
 8012a5e:	4630      	mov	r0, r6
 8012a60:	f7ff ff8c 	bl	801297c <__multadd>
 8012a64:	45a0      	cmp	r8, r4
 8012a66:	d1f5      	bne.n	8012a54 <__s2b+0x4c>
 8012a68:	f1a5 0408 	sub.w	r4, r5, #8
 8012a6c:	444c      	add	r4, r9
 8012a6e:	1b2d      	subs	r5, r5, r4
 8012a70:	1963      	adds	r3, r4, r5
 8012a72:	42bb      	cmp	r3, r7
 8012a74:	db04      	blt.n	8012a80 <__s2b+0x78>
 8012a76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a7a:	340a      	adds	r4, #10
 8012a7c:	2509      	movs	r5, #9
 8012a7e:	e7f6      	b.n	8012a6e <__s2b+0x66>
 8012a80:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012a84:	4601      	mov	r1, r0
 8012a86:	3b30      	subs	r3, #48	; 0x30
 8012a88:	220a      	movs	r2, #10
 8012a8a:	4630      	mov	r0, r6
 8012a8c:	f7ff ff76 	bl	801297c <__multadd>
 8012a90:	e7ee      	b.n	8012a70 <__s2b+0x68>
 8012a92:	bf00      	nop
 8012a94:	080169f7 	.word	0x080169f7
 8012a98:	08016a68 	.word	0x08016a68

08012a9c <__hi0bits>:
 8012a9c:	0c03      	lsrs	r3, r0, #16
 8012a9e:	041b      	lsls	r3, r3, #16
 8012aa0:	b9d3      	cbnz	r3, 8012ad8 <__hi0bits+0x3c>
 8012aa2:	0400      	lsls	r0, r0, #16
 8012aa4:	2310      	movs	r3, #16
 8012aa6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012aaa:	bf04      	itt	eq
 8012aac:	0200      	lsleq	r0, r0, #8
 8012aae:	3308      	addeq	r3, #8
 8012ab0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012ab4:	bf04      	itt	eq
 8012ab6:	0100      	lsleq	r0, r0, #4
 8012ab8:	3304      	addeq	r3, #4
 8012aba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012abe:	bf04      	itt	eq
 8012ac0:	0080      	lsleq	r0, r0, #2
 8012ac2:	3302      	addeq	r3, #2
 8012ac4:	2800      	cmp	r0, #0
 8012ac6:	db05      	blt.n	8012ad4 <__hi0bits+0x38>
 8012ac8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012acc:	f103 0301 	add.w	r3, r3, #1
 8012ad0:	bf08      	it	eq
 8012ad2:	2320      	moveq	r3, #32
 8012ad4:	4618      	mov	r0, r3
 8012ad6:	4770      	bx	lr
 8012ad8:	2300      	movs	r3, #0
 8012ada:	e7e4      	b.n	8012aa6 <__hi0bits+0xa>

08012adc <__lo0bits>:
 8012adc:	6803      	ldr	r3, [r0, #0]
 8012ade:	f013 0207 	ands.w	r2, r3, #7
 8012ae2:	d00c      	beq.n	8012afe <__lo0bits+0x22>
 8012ae4:	07d9      	lsls	r1, r3, #31
 8012ae6:	d422      	bmi.n	8012b2e <__lo0bits+0x52>
 8012ae8:	079a      	lsls	r2, r3, #30
 8012aea:	bf49      	itett	mi
 8012aec:	085b      	lsrmi	r3, r3, #1
 8012aee:	089b      	lsrpl	r3, r3, #2
 8012af0:	6003      	strmi	r3, [r0, #0]
 8012af2:	2201      	movmi	r2, #1
 8012af4:	bf5c      	itt	pl
 8012af6:	6003      	strpl	r3, [r0, #0]
 8012af8:	2202      	movpl	r2, #2
 8012afa:	4610      	mov	r0, r2
 8012afc:	4770      	bx	lr
 8012afe:	b299      	uxth	r1, r3
 8012b00:	b909      	cbnz	r1, 8012b06 <__lo0bits+0x2a>
 8012b02:	0c1b      	lsrs	r3, r3, #16
 8012b04:	2210      	movs	r2, #16
 8012b06:	b2d9      	uxtb	r1, r3
 8012b08:	b909      	cbnz	r1, 8012b0e <__lo0bits+0x32>
 8012b0a:	3208      	adds	r2, #8
 8012b0c:	0a1b      	lsrs	r3, r3, #8
 8012b0e:	0719      	lsls	r1, r3, #28
 8012b10:	bf04      	itt	eq
 8012b12:	091b      	lsreq	r3, r3, #4
 8012b14:	3204      	addeq	r2, #4
 8012b16:	0799      	lsls	r1, r3, #30
 8012b18:	bf04      	itt	eq
 8012b1a:	089b      	lsreq	r3, r3, #2
 8012b1c:	3202      	addeq	r2, #2
 8012b1e:	07d9      	lsls	r1, r3, #31
 8012b20:	d403      	bmi.n	8012b2a <__lo0bits+0x4e>
 8012b22:	085b      	lsrs	r3, r3, #1
 8012b24:	f102 0201 	add.w	r2, r2, #1
 8012b28:	d003      	beq.n	8012b32 <__lo0bits+0x56>
 8012b2a:	6003      	str	r3, [r0, #0]
 8012b2c:	e7e5      	b.n	8012afa <__lo0bits+0x1e>
 8012b2e:	2200      	movs	r2, #0
 8012b30:	e7e3      	b.n	8012afa <__lo0bits+0x1e>
 8012b32:	2220      	movs	r2, #32
 8012b34:	e7e1      	b.n	8012afa <__lo0bits+0x1e>
	...

08012b38 <__i2b>:
 8012b38:	b510      	push	{r4, lr}
 8012b3a:	460c      	mov	r4, r1
 8012b3c:	2101      	movs	r1, #1
 8012b3e:	f7ff febb 	bl	80128b8 <_Balloc>
 8012b42:	4602      	mov	r2, r0
 8012b44:	b928      	cbnz	r0, 8012b52 <__i2b+0x1a>
 8012b46:	4b05      	ldr	r3, [pc, #20]	; (8012b5c <__i2b+0x24>)
 8012b48:	4805      	ldr	r0, [pc, #20]	; (8012b60 <__i2b+0x28>)
 8012b4a:	f240 1145 	movw	r1, #325	; 0x145
 8012b4e:	f7ff fa2b 	bl	8011fa8 <__assert_func>
 8012b52:	2301      	movs	r3, #1
 8012b54:	6144      	str	r4, [r0, #20]
 8012b56:	6103      	str	r3, [r0, #16]
 8012b58:	bd10      	pop	{r4, pc}
 8012b5a:	bf00      	nop
 8012b5c:	080169f7 	.word	0x080169f7
 8012b60:	08016a68 	.word	0x08016a68

08012b64 <__multiply>:
 8012b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b68:	4691      	mov	r9, r2
 8012b6a:	690a      	ldr	r2, [r1, #16]
 8012b6c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012b70:	429a      	cmp	r2, r3
 8012b72:	bfb8      	it	lt
 8012b74:	460b      	movlt	r3, r1
 8012b76:	460c      	mov	r4, r1
 8012b78:	bfbc      	itt	lt
 8012b7a:	464c      	movlt	r4, r9
 8012b7c:	4699      	movlt	r9, r3
 8012b7e:	6927      	ldr	r7, [r4, #16]
 8012b80:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012b84:	68a3      	ldr	r3, [r4, #8]
 8012b86:	6861      	ldr	r1, [r4, #4]
 8012b88:	eb07 060a 	add.w	r6, r7, sl
 8012b8c:	42b3      	cmp	r3, r6
 8012b8e:	b085      	sub	sp, #20
 8012b90:	bfb8      	it	lt
 8012b92:	3101      	addlt	r1, #1
 8012b94:	f7ff fe90 	bl	80128b8 <_Balloc>
 8012b98:	b930      	cbnz	r0, 8012ba8 <__multiply+0x44>
 8012b9a:	4602      	mov	r2, r0
 8012b9c:	4b44      	ldr	r3, [pc, #272]	; (8012cb0 <__multiply+0x14c>)
 8012b9e:	4845      	ldr	r0, [pc, #276]	; (8012cb4 <__multiply+0x150>)
 8012ba0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8012ba4:	f7ff fa00 	bl	8011fa8 <__assert_func>
 8012ba8:	f100 0514 	add.w	r5, r0, #20
 8012bac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012bb0:	462b      	mov	r3, r5
 8012bb2:	2200      	movs	r2, #0
 8012bb4:	4543      	cmp	r3, r8
 8012bb6:	d321      	bcc.n	8012bfc <__multiply+0x98>
 8012bb8:	f104 0314 	add.w	r3, r4, #20
 8012bbc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012bc0:	f109 0314 	add.w	r3, r9, #20
 8012bc4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012bc8:	9202      	str	r2, [sp, #8]
 8012bca:	1b3a      	subs	r2, r7, r4
 8012bcc:	3a15      	subs	r2, #21
 8012bce:	f022 0203 	bic.w	r2, r2, #3
 8012bd2:	3204      	adds	r2, #4
 8012bd4:	f104 0115 	add.w	r1, r4, #21
 8012bd8:	428f      	cmp	r7, r1
 8012bda:	bf38      	it	cc
 8012bdc:	2204      	movcc	r2, #4
 8012bde:	9201      	str	r2, [sp, #4]
 8012be0:	9a02      	ldr	r2, [sp, #8]
 8012be2:	9303      	str	r3, [sp, #12]
 8012be4:	429a      	cmp	r2, r3
 8012be6:	d80c      	bhi.n	8012c02 <__multiply+0x9e>
 8012be8:	2e00      	cmp	r6, #0
 8012bea:	dd03      	ble.n	8012bf4 <__multiply+0x90>
 8012bec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d05b      	beq.n	8012cac <__multiply+0x148>
 8012bf4:	6106      	str	r6, [r0, #16]
 8012bf6:	b005      	add	sp, #20
 8012bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bfc:	f843 2b04 	str.w	r2, [r3], #4
 8012c00:	e7d8      	b.n	8012bb4 <__multiply+0x50>
 8012c02:	f8b3 a000 	ldrh.w	sl, [r3]
 8012c06:	f1ba 0f00 	cmp.w	sl, #0
 8012c0a:	d024      	beq.n	8012c56 <__multiply+0xf2>
 8012c0c:	f104 0e14 	add.w	lr, r4, #20
 8012c10:	46a9      	mov	r9, r5
 8012c12:	f04f 0c00 	mov.w	ip, #0
 8012c16:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012c1a:	f8d9 1000 	ldr.w	r1, [r9]
 8012c1e:	fa1f fb82 	uxth.w	fp, r2
 8012c22:	b289      	uxth	r1, r1
 8012c24:	fb0a 110b 	mla	r1, sl, fp, r1
 8012c28:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012c2c:	f8d9 2000 	ldr.w	r2, [r9]
 8012c30:	4461      	add	r1, ip
 8012c32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012c36:	fb0a c20b 	mla	r2, sl, fp, ip
 8012c3a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012c3e:	b289      	uxth	r1, r1
 8012c40:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012c44:	4577      	cmp	r7, lr
 8012c46:	f849 1b04 	str.w	r1, [r9], #4
 8012c4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012c4e:	d8e2      	bhi.n	8012c16 <__multiply+0xb2>
 8012c50:	9a01      	ldr	r2, [sp, #4]
 8012c52:	f845 c002 	str.w	ip, [r5, r2]
 8012c56:	9a03      	ldr	r2, [sp, #12]
 8012c58:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012c5c:	3304      	adds	r3, #4
 8012c5e:	f1b9 0f00 	cmp.w	r9, #0
 8012c62:	d021      	beq.n	8012ca8 <__multiply+0x144>
 8012c64:	6829      	ldr	r1, [r5, #0]
 8012c66:	f104 0c14 	add.w	ip, r4, #20
 8012c6a:	46ae      	mov	lr, r5
 8012c6c:	f04f 0a00 	mov.w	sl, #0
 8012c70:	f8bc b000 	ldrh.w	fp, [ip]
 8012c74:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012c78:	fb09 220b 	mla	r2, r9, fp, r2
 8012c7c:	4452      	add	r2, sl
 8012c7e:	b289      	uxth	r1, r1
 8012c80:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012c84:	f84e 1b04 	str.w	r1, [lr], #4
 8012c88:	f85c 1b04 	ldr.w	r1, [ip], #4
 8012c8c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012c90:	f8be 1000 	ldrh.w	r1, [lr]
 8012c94:	fb09 110a 	mla	r1, r9, sl, r1
 8012c98:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8012c9c:	4567      	cmp	r7, ip
 8012c9e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012ca2:	d8e5      	bhi.n	8012c70 <__multiply+0x10c>
 8012ca4:	9a01      	ldr	r2, [sp, #4]
 8012ca6:	50a9      	str	r1, [r5, r2]
 8012ca8:	3504      	adds	r5, #4
 8012caa:	e799      	b.n	8012be0 <__multiply+0x7c>
 8012cac:	3e01      	subs	r6, #1
 8012cae:	e79b      	b.n	8012be8 <__multiply+0x84>
 8012cb0:	080169f7 	.word	0x080169f7
 8012cb4:	08016a68 	.word	0x08016a68

08012cb8 <__pow5mult>:
 8012cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012cbc:	4615      	mov	r5, r2
 8012cbe:	f012 0203 	ands.w	r2, r2, #3
 8012cc2:	4606      	mov	r6, r0
 8012cc4:	460f      	mov	r7, r1
 8012cc6:	d007      	beq.n	8012cd8 <__pow5mult+0x20>
 8012cc8:	4c25      	ldr	r4, [pc, #148]	; (8012d60 <__pow5mult+0xa8>)
 8012cca:	3a01      	subs	r2, #1
 8012ccc:	2300      	movs	r3, #0
 8012cce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012cd2:	f7ff fe53 	bl	801297c <__multadd>
 8012cd6:	4607      	mov	r7, r0
 8012cd8:	10ad      	asrs	r5, r5, #2
 8012cda:	d03d      	beq.n	8012d58 <__pow5mult+0xa0>
 8012cdc:	69f4      	ldr	r4, [r6, #28]
 8012cde:	b97c      	cbnz	r4, 8012d00 <__pow5mult+0x48>
 8012ce0:	2010      	movs	r0, #16
 8012ce2:	f7ff fd23 	bl	801272c <malloc>
 8012ce6:	4602      	mov	r2, r0
 8012ce8:	61f0      	str	r0, [r6, #28]
 8012cea:	b928      	cbnz	r0, 8012cf8 <__pow5mult+0x40>
 8012cec:	4b1d      	ldr	r3, [pc, #116]	; (8012d64 <__pow5mult+0xac>)
 8012cee:	481e      	ldr	r0, [pc, #120]	; (8012d68 <__pow5mult+0xb0>)
 8012cf0:	f240 11b3 	movw	r1, #435	; 0x1b3
 8012cf4:	f7ff f958 	bl	8011fa8 <__assert_func>
 8012cf8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012cfc:	6004      	str	r4, [r0, #0]
 8012cfe:	60c4      	str	r4, [r0, #12]
 8012d00:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8012d04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012d08:	b94c      	cbnz	r4, 8012d1e <__pow5mult+0x66>
 8012d0a:	f240 2171 	movw	r1, #625	; 0x271
 8012d0e:	4630      	mov	r0, r6
 8012d10:	f7ff ff12 	bl	8012b38 <__i2b>
 8012d14:	2300      	movs	r3, #0
 8012d16:	f8c8 0008 	str.w	r0, [r8, #8]
 8012d1a:	4604      	mov	r4, r0
 8012d1c:	6003      	str	r3, [r0, #0]
 8012d1e:	f04f 0900 	mov.w	r9, #0
 8012d22:	07eb      	lsls	r3, r5, #31
 8012d24:	d50a      	bpl.n	8012d3c <__pow5mult+0x84>
 8012d26:	4639      	mov	r1, r7
 8012d28:	4622      	mov	r2, r4
 8012d2a:	4630      	mov	r0, r6
 8012d2c:	f7ff ff1a 	bl	8012b64 <__multiply>
 8012d30:	4639      	mov	r1, r7
 8012d32:	4680      	mov	r8, r0
 8012d34:	4630      	mov	r0, r6
 8012d36:	f7ff fdff 	bl	8012938 <_Bfree>
 8012d3a:	4647      	mov	r7, r8
 8012d3c:	106d      	asrs	r5, r5, #1
 8012d3e:	d00b      	beq.n	8012d58 <__pow5mult+0xa0>
 8012d40:	6820      	ldr	r0, [r4, #0]
 8012d42:	b938      	cbnz	r0, 8012d54 <__pow5mult+0x9c>
 8012d44:	4622      	mov	r2, r4
 8012d46:	4621      	mov	r1, r4
 8012d48:	4630      	mov	r0, r6
 8012d4a:	f7ff ff0b 	bl	8012b64 <__multiply>
 8012d4e:	6020      	str	r0, [r4, #0]
 8012d50:	f8c0 9000 	str.w	r9, [r0]
 8012d54:	4604      	mov	r4, r0
 8012d56:	e7e4      	b.n	8012d22 <__pow5mult+0x6a>
 8012d58:	4638      	mov	r0, r7
 8012d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d5e:	bf00      	nop
 8012d60:	08016bb8 	.word	0x08016bb8
 8012d64:	0801678a 	.word	0x0801678a
 8012d68:	08016a68 	.word	0x08016a68

08012d6c <__lshift>:
 8012d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d70:	460c      	mov	r4, r1
 8012d72:	6849      	ldr	r1, [r1, #4]
 8012d74:	6923      	ldr	r3, [r4, #16]
 8012d76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012d7a:	68a3      	ldr	r3, [r4, #8]
 8012d7c:	4607      	mov	r7, r0
 8012d7e:	4691      	mov	r9, r2
 8012d80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012d84:	f108 0601 	add.w	r6, r8, #1
 8012d88:	42b3      	cmp	r3, r6
 8012d8a:	db0b      	blt.n	8012da4 <__lshift+0x38>
 8012d8c:	4638      	mov	r0, r7
 8012d8e:	f7ff fd93 	bl	80128b8 <_Balloc>
 8012d92:	4605      	mov	r5, r0
 8012d94:	b948      	cbnz	r0, 8012daa <__lshift+0x3e>
 8012d96:	4602      	mov	r2, r0
 8012d98:	4b28      	ldr	r3, [pc, #160]	; (8012e3c <__lshift+0xd0>)
 8012d9a:	4829      	ldr	r0, [pc, #164]	; (8012e40 <__lshift+0xd4>)
 8012d9c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8012da0:	f7ff f902 	bl	8011fa8 <__assert_func>
 8012da4:	3101      	adds	r1, #1
 8012da6:	005b      	lsls	r3, r3, #1
 8012da8:	e7ee      	b.n	8012d88 <__lshift+0x1c>
 8012daa:	2300      	movs	r3, #0
 8012dac:	f100 0114 	add.w	r1, r0, #20
 8012db0:	f100 0210 	add.w	r2, r0, #16
 8012db4:	4618      	mov	r0, r3
 8012db6:	4553      	cmp	r3, sl
 8012db8:	db33      	blt.n	8012e22 <__lshift+0xb6>
 8012dba:	6920      	ldr	r0, [r4, #16]
 8012dbc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012dc0:	f104 0314 	add.w	r3, r4, #20
 8012dc4:	f019 091f 	ands.w	r9, r9, #31
 8012dc8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012dcc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012dd0:	d02b      	beq.n	8012e2a <__lshift+0xbe>
 8012dd2:	f1c9 0e20 	rsb	lr, r9, #32
 8012dd6:	468a      	mov	sl, r1
 8012dd8:	2200      	movs	r2, #0
 8012dda:	6818      	ldr	r0, [r3, #0]
 8012ddc:	fa00 f009 	lsl.w	r0, r0, r9
 8012de0:	4310      	orrs	r0, r2
 8012de2:	f84a 0b04 	str.w	r0, [sl], #4
 8012de6:	f853 2b04 	ldr.w	r2, [r3], #4
 8012dea:	459c      	cmp	ip, r3
 8012dec:	fa22 f20e 	lsr.w	r2, r2, lr
 8012df0:	d8f3      	bhi.n	8012dda <__lshift+0x6e>
 8012df2:	ebac 0304 	sub.w	r3, ip, r4
 8012df6:	3b15      	subs	r3, #21
 8012df8:	f023 0303 	bic.w	r3, r3, #3
 8012dfc:	3304      	adds	r3, #4
 8012dfe:	f104 0015 	add.w	r0, r4, #21
 8012e02:	4584      	cmp	ip, r0
 8012e04:	bf38      	it	cc
 8012e06:	2304      	movcc	r3, #4
 8012e08:	50ca      	str	r2, [r1, r3]
 8012e0a:	b10a      	cbz	r2, 8012e10 <__lshift+0xa4>
 8012e0c:	f108 0602 	add.w	r6, r8, #2
 8012e10:	3e01      	subs	r6, #1
 8012e12:	4638      	mov	r0, r7
 8012e14:	612e      	str	r6, [r5, #16]
 8012e16:	4621      	mov	r1, r4
 8012e18:	f7ff fd8e 	bl	8012938 <_Bfree>
 8012e1c:	4628      	mov	r0, r5
 8012e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e22:	f842 0f04 	str.w	r0, [r2, #4]!
 8012e26:	3301      	adds	r3, #1
 8012e28:	e7c5      	b.n	8012db6 <__lshift+0x4a>
 8012e2a:	3904      	subs	r1, #4
 8012e2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012e30:	f841 2f04 	str.w	r2, [r1, #4]!
 8012e34:	459c      	cmp	ip, r3
 8012e36:	d8f9      	bhi.n	8012e2c <__lshift+0xc0>
 8012e38:	e7ea      	b.n	8012e10 <__lshift+0xa4>
 8012e3a:	bf00      	nop
 8012e3c:	080169f7 	.word	0x080169f7
 8012e40:	08016a68 	.word	0x08016a68

08012e44 <__mcmp>:
 8012e44:	b530      	push	{r4, r5, lr}
 8012e46:	6902      	ldr	r2, [r0, #16]
 8012e48:	690c      	ldr	r4, [r1, #16]
 8012e4a:	1b12      	subs	r2, r2, r4
 8012e4c:	d10e      	bne.n	8012e6c <__mcmp+0x28>
 8012e4e:	f100 0314 	add.w	r3, r0, #20
 8012e52:	3114      	adds	r1, #20
 8012e54:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012e58:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012e5c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012e60:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012e64:	42a5      	cmp	r5, r4
 8012e66:	d003      	beq.n	8012e70 <__mcmp+0x2c>
 8012e68:	d305      	bcc.n	8012e76 <__mcmp+0x32>
 8012e6a:	2201      	movs	r2, #1
 8012e6c:	4610      	mov	r0, r2
 8012e6e:	bd30      	pop	{r4, r5, pc}
 8012e70:	4283      	cmp	r3, r0
 8012e72:	d3f3      	bcc.n	8012e5c <__mcmp+0x18>
 8012e74:	e7fa      	b.n	8012e6c <__mcmp+0x28>
 8012e76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012e7a:	e7f7      	b.n	8012e6c <__mcmp+0x28>

08012e7c <__mdiff>:
 8012e7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e80:	460c      	mov	r4, r1
 8012e82:	4606      	mov	r6, r0
 8012e84:	4611      	mov	r1, r2
 8012e86:	4620      	mov	r0, r4
 8012e88:	4690      	mov	r8, r2
 8012e8a:	f7ff ffdb 	bl	8012e44 <__mcmp>
 8012e8e:	1e05      	subs	r5, r0, #0
 8012e90:	d110      	bne.n	8012eb4 <__mdiff+0x38>
 8012e92:	4629      	mov	r1, r5
 8012e94:	4630      	mov	r0, r6
 8012e96:	f7ff fd0f 	bl	80128b8 <_Balloc>
 8012e9a:	b930      	cbnz	r0, 8012eaa <__mdiff+0x2e>
 8012e9c:	4b3a      	ldr	r3, [pc, #232]	; (8012f88 <__mdiff+0x10c>)
 8012e9e:	4602      	mov	r2, r0
 8012ea0:	f240 2137 	movw	r1, #567	; 0x237
 8012ea4:	4839      	ldr	r0, [pc, #228]	; (8012f8c <__mdiff+0x110>)
 8012ea6:	f7ff f87f 	bl	8011fa8 <__assert_func>
 8012eaa:	2301      	movs	r3, #1
 8012eac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012eb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012eb4:	bfa4      	itt	ge
 8012eb6:	4643      	movge	r3, r8
 8012eb8:	46a0      	movge	r8, r4
 8012eba:	4630      	mov	r0, r6
 8012ebc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012ec0:	bfa6      	itte	ge
 8012ec2:	461c      	movge	r4, r3
 8012ec4:	2500      	movge	r5, #0
 8012ec6:	2501      	movlt	r5, #1
 8012ec8:	f7ff fcf6 	bl	80128b8 <_Balloc>
 8012ecc:	b920      	cbnz	r0, 8012ed8 <__mdiff+0x5c>
 8012ece:	4b2e      	ldr	r3, [pc, #184]	; (8012f88 <__mdiff+0x10c>)
 8012ed0:	4602      	mov	r2, r0
 8012ed2:	f240 2145 	movw	r1, #581	; 0x245
 8012ed6:	e7e5      	b.n	8012ea4 <__mdiff+0x28>
 8012ed8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012edc:	6926      	ldr	r6, [r4, #16]
 8012ede:	60c5      	str	r5, [r0, #12]
 8012ee0:	f104 0914 	add.w	r9, r4, #20
 8012ee4:	f108 0514 	add.w	r5, r8, #20
 8012ee8:	f100 0e14 	add.w	lr, r0, #20
 8012eec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012ef0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012ef4:	f108 0210 	add.w	r2, r8, #16
 8012ef8:	46f2      	mov	sl, lr
 8012efa:	2100      	movs	r1, #0
 8012efc:	f859 3b04 	ldr.w	r3, [r9], #4
 8012f00:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012f04:	fa11 f88b 	uxtah	r8, r1, fp
 8012f08:	b299      	uxth	r1, r3
 8012f0a:	0c1b      	lsrs	r3, r3, #16
 8012f0c:	eba8 0801 	sub.w	r8, r8, r1
 8012f10:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012f14:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012f18:	fa1f f888 	uxth.w	r8, r8
 8012f1c:	1419      	asrs	r1, r3, #16
 8012f1e:	454e      	cmp	r6, r9
 8012f20:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012f24:	f84a 3b04 	str.w	r3, [sl], #4
 8012f28:	d8e8      	bhi.n	8012efc <__mdiff+0x80>
 8012f2a:	1b33      	subs	r3, r6, r4
 8012f2c:	3b15      	subs	r3, #21
 8012f2e:	f023 0303 	bic.w	r3, r3, #3
 8012f32:	3304      	adds	r3, #4
 8012f34:	3415      	adds	r4, #21
 8012f36:	42a6      	cmp	r6, r4
 8012f38:	bf38      	it	cc
 8012f3a:	2304      	movcc	r3, #4
 8012f3c:	441d      	add	r5, r3
 8012f3e:	4473      	add	r3, lr
 8012f40:	469e      	mov	lr, r3
 8012f42:	462e      	mov	r6, r5
 8012f44:	4566      	cmp	r6, ip
 8012f46:	d30e      	bcc.n	8012f66 <__mdiff+0xea>
 8012f48:	f10c 0203 	add.w	r2, ip, #3
 8012f4c:	1b52      	subs	r2, r2, r5
 8012f4e:	f022 0203 	bic.w	r2, r2, #3
 8012f52:	3d03      	subs	r5, #3
 8012f54:	45ac      	cmp	ip, r5
 8012f56:	bf38      	it	cc
 8012f58:	2200      	movcc	r2, #0
 8012f5a:	4413      	add	r3, r2
 8012f5c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8012f60:	b17a      	cbz	r2, 8012f82 <__mdiff+0x106>
 8012f62:	6107      	str	r7, [r0, #16]
 8012f64:	e7a4      	b.n	8012eb0 <__mdiff+0x34>
 8012f66:	f856 8b04 	ldr.w	r8, [r6], #4
 8012f6a:	fa11 f288 	uxtah	r2, r1, r8
 8012f6e:	1414      	asrs	r4, r2, #16
 8012f70:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012f74:	b292      	uxth	r2, r2
 8012f76:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012f7a:	f84e 2b04 	str.w	r2, [lr], #4
 8012f7e:	1421      	asrs	r1, r4, #16
 8012f80:	e7e0      	b.n	8012f44 <__mdiff+0xc8>
 8012f82:	3f01      	subs	r7, #1
 8012f84:	e7ea      	b.n	8012f5c <__mdiff+0xe0>
 8012f86:	bf00      	nop
 8012f88:	080169f7 	.word	0x080169f7
 8012f8c:	08016a68 	.word	0x08016a68

08012f90 <__ulp>:
 8012f90:	b082      	sub	sp, #8
 8012f92:	ed8d 0b00 	vstr	d0, [sp]
 8012f96:	9a01      	ldr	r2, [sp, #4]
 8012f98:	4b0f      	ldr	r3, [pc, #60]	; (8012fd8 <__ulp+0x48>)
 8012f9a:	4013      	ands	r3, r2
 8012f9c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	dc08      	bgt.n	8012fb6 <__ulp+0x26>
 8012fa4:	425b      	negs	r3, r3
 8012fa6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8012faa:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012fae:	da04      	bge.n	8012fba <__ulp+0x2a>
 8012fb0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012fb4:	4113      	asrs	r3, r2
 8012fb6:	2200      	movs	r2, #0
 8012fb8:	e008      	b.n	8012fcc <__ulp+0x3c>
 8012fba:	f1a2 0314 	sub.w	r3, r2, #20
 8012fbe:	2b1e      	cmp	r3, #30
 8012fc0:	bfda      	itte	le
 8012fc2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8012fc6:	40da      	lsrle	r2, r3
 8012fc8:	2201      	movgt	r2, #1
 8012fca:	2300      	movs	r3, #0
 8012fcc:	4619      	mov	r1, r3
 8012fce:	4610      	mov	r0, r2
 8012fd0:	ec41 0b10 	vmov	d0, r0, r1
 8012fd4:	b002      	add	sp, #8
 8012fd6:	4770      	bx	lr
 8012fd8:	7ff00000 	.word	0x7ff00000

08012fdc <__b2d>:
 8012fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fe0:	6906      	ldr	r6, [r0, #16]
 8012fe2:	f100 0814 	add.w	r8, r0, #20
 8012fe6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8012fea:	1f37      	subs	r7, r6, #4
 8012fec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012ff0:	4610      	mov	r0, r2
 8012ff2:	f7ff fd53 	bl	8012a9c <__hi0bits>
 8012ff6:	f1c0 0320 	rsb	r3, r0, #32
 8012ffa:	280a      	cmp	r0, #10
 8012ffc:	600b      	str	r3, [r1, #0]
 8012ffe:	491b      	ldr	r1, [pc, #108]	; (801306c <__b2d+0x90>)
 8013000:	dc15      	bgt.n	801302e <__b2d+0x52>
 8013002:	f1c0 0c0b 	rsb	ip, r0, #11
 8013006:	fa22 f30c 	lsr.w	r3, r2, ip
 801300a:	45b8      	cmp	r8, r7
 801300c:	ea43 0501 	orr.w	r5, r3, r1
 8013010:	bf34      	ite	cc
 8013012:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013016:	2300      	movcs	r3, #0
 8013018:	3015      	adds	r0, #21
 801301a:	fa02 f000 	lsl.w	r0, r2, r0
 801301e:	fa23 f30c 	lsr.w	r3, r3, ip
 8013022:	4303      	orrs	r3, r0
 8013024:	461c      	mov	r4, r3
 8013026:	ec45 4b10 	vmov	d0, r4, r5
 801302a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801302e:	45b8      	cmp	r8, r7
 8013030:	bf3a      	itte	cc
 8013032:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013036:	f1a6 0708 	subcc.w	r7, r6, #8
 801303a:	2300      	movcs	r3, #0
 801303c:	380b      	subs	r0, #11
 801303e:	d012      	beq.n	8013066 <__b2d+0x8a>
 8013040:	f1c0 0120 	rsb	r1, r0, #32
 8013044:	fa23 f401 	lsr.w	r4, r3, r1
 8013048:	4082      	lsls	r2, r0
 801304a:	4322      	orrs	r2, r4
 801304c:	4547      	cmp	r7, r8
 801304e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8013052:	bf8c      	ite	hi
 8013054:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8013058:	2200      	movls	r2, #0
 801305a:	4083      	lsls	r3, r0
 801305c:	40ca      	lsrs	r2, r1
 801305e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8013062:	4313      	orrs	r3, r2
 8013064:	e7de      	b.n	8013024 <__b2d+0x48>
 8013066:	ea42 0501 	orr.w	r5, r2, r1
 801306a:	e7db      	b.n	8013024 <__b2d+0x48>
 801306c:	3ff00000 	.word	0x3ff00000

08013070 <__d2b>:
 8013070:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013074:	460f      	mov	r7, r1
 8013076:	2101      	movs	r1, #1
 8013078:	ec59 8b10 	vmov	r8, r9, d0
 801307c:	4616      	mov	r6, r2
 801307e:	f7ff fc1b 	bl	80128b8 <_Balloc>
 8013082:	4604      	mov	r4, r0
 8013084:	b930      	cbnz	r0, 8013094 <__d2b+0x24>
 8013086:	4602      	mov	r2, r0
 8013088:	4b24      	ldr	r3, [pc, #144]	; (801311c <__d2b+0xac>)
 801308a:	4825      	ldr	r0, [pc, #148]	; (8013120 <__d2b+0xb0>)
 801308c:	f240 310f 	movw	r1, #783	; 0x30f
 8013090:	f7fe ff8a 	bl	8011fa8 <__assert_func>
 8013094:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013098:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801309c:	bb2d      	cbnz	r5, 80130ea <__d2b+0x7a>
 801309e:	9301      	str	r3, [sp, #4]
 80130a0:	f1b8 0300 	subs.w	r3, r8, #0
 80130a4:	d026      	beq.n	80130f4 <__d2b+0x84>
 80130a6:	4668      	mov	r0, sp
 80130a8:	9300      	str	r3, [sp, #0]
 80130aa:	f7ff fd17 	bl	8012adc <__lo0bits>
 80130ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 80130b2:	b1e8      	cbz	r0, 80130f0 <__d2b+0x80>
 80130b4:	f1c0 0320 	rsb	r3, r0, #32
 80130b8:	fa02 f303 	lsl.w	r3, r2, r3
 80130bc:	430b      	orrs	r3, r1
 80130be:	40c2      	lsrs	r2, r0
 80130c0:	6163      	str	r3, [r4, #20]
 80130c2:	9201      	str	r2, [sp, #4]
 80130c4:	9b01      	ldr	r3, [sp, #4]
 80130c6:	61a3      	str	r3, [r4, #24]
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	bf14      	ite	ne
 80130cc:	2202      	movne	r2, #2
 80130ce:	2201      	moveq	r2, #1
 80130d0:	6122      	str	r2, [r4, #16]
 80130d2:	b1bd      	cbz	r5, 8013104 <__d2b+0x94>
 80130d4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80130d8:	4405      	add	r5, r0
 80130da:	603d      	str	r5, [r7, #0]
 80130dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80130e0:	6030      	str	r0, [r6, #0]
 80130e2:	4620      	mov	r0, r4
 80130e4:	b003      	add	sp, #12
 80130e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80130ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80130ee:	e7d6      	b.n	801309e <__d2b+0x2e>
 80130f0:	6161      	str	r1, [r4, #20]
 80130f2:	e7e7      	b.n	80130c4 <__d2b+0x54>
 80130f4:	a801      	add	r0, sp, #4
 80130f6:	f7ff fcf1 	bl	8012adc <__lo0bits>
 80130fa:	9b01      	ldr	r3, [sp, #4]
 80130fc:	6163      	str	r3, [r4, #20]
 80130fe:	3020      	adds	r0, #32
 8013100:	2201      	movs	r2, #1
 8013102:	e7e5      	b.n	80130d0 <__d2b+0x60>
 8013104:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013108:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801310c:	6038      	str	r0, [r7, #0]
 801310e:	6918      	ldr	r0, [r3, #16]
 8013110:	f7ff fcc4 	bl	8012a9c <__hi0bits>
 8013114:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013118:	e7e2      	b.n	80130e0 <__d2b+0x70>
 801311a:	bf00      	nop
 801311c:	080169f7 	.word	0x080169f7
 8013120:	08016a68 	.word	0x08016a68

08013124 <__ratio>:
 8013124:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013128:	4688      	mov	r8, r1
 801312a:	4669      	mov	r1, sp
 801312c:	4681      	mov	r9, r0
 801312e:	f7ff ff55 	bl	8012fdc <__b2d>
 8013132:	a901      	add	r1, sp, #4
 8013134:	4640      	mov	r0, r8
 8013136:	ec55 4b10 	vmov	r4, r5, d0
 801313a:	ee10 aa10 	vmov	sl, s0
 801313e:	f7ff ff4d 	bl	8012fdc <__b2d>
 8013142:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8013146:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801314a:	1ad2      	subs	r2, r2, r3
 801314c:	e9dd 3100 	ldrd	r3, r1, [sp]
 8013150:	1a5b      	subs	r3, r3, r1
 8013152:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8013156:	ec57 6b10 	vmov	r6, r7, d0
 801315a:	2b00      	cmp	r3, #0
 801315c:	bfd6      	itet	le
 801315e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013162:	462a      	movgt	r2, r5
 8013164:	463a      	movle	r2, r7
 8013166:	46ab      	mov	fp, r5
 8013168:	bfd6      	itet	le
 801316a:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801316e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8013172:	ee00 3a90 	vmovle	s1, r3
 8013176:	ec4b ab17 	vmov	d7, sl, fp
 801317a:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801317e:	b003      	add	sp, #12
 8013180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013184 <__copybits>:
 8013184:	3901      	subs	r1, #1
 8013186:	b570      	push	{r4, r5, r6, lr}
 8013188:	1149      	asrs	r1, r1, #5
 801318a:	6914      	ldr	r4, [r2, #16]
 801318c:	3101      	adds	r1, #1
 801318e:	f102 0314 	add.w	r3, r2, #20
 8013192:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013196:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801319a:	1f05      	subs	r5, r0, #4
 801319c:	42a3      	cmp	r3, r4
 801319e:	d30c      	bcc.n	80131ba <__copybits+0x36>
 80131a0:	1aa3      	subs	r3, r4, r2
 80131a2:	3b11      	subs	r3, #17
 80131a4:	f023 0303 	bic.w	r3, r3, #3
 80131a8:	3211      	adds	r2, #17
 80131aa:	42a2      	cmp	r2, r4
 80131ac:	bf88      	it	hi
 80131ae:	2300      	movhi	r3, #0
 80131b0:	4418      	add	r0, r3
 80131b2:	2300      	movs	r3, #0
 80131b4:	4288      	cmp	r0, r1
 80131b6:	d305      	bcc.n	80131c4 <__copybits+0x40>
 80131b8:	bd70      	pop	{r4, r5, r6, pc}
 80131ba:	f853 6b04 	ldr.w	r6, [r3], #4
 80131be:	f845 6f04 	str.w	r6, [r5, #4]!
 80131c2:	e7eb      	b.n	801319c <__copybits+0x18>
 80131c4:	f840 3b04 	str.w	r3, [r0], #4
 80131c8:	e7f4      	b.n	80131b4 <__copybits+0x30>

080131ca <__any_on>:
 80131ca:	f100 0214 	add.w	r2, r0, #20
 80131ce:	6900      	ldr	r0, [r0, #16]
 80131d0:	114b      	asrs	r3, r1, #5
 80131d2:	4298      	cmp	r0, r3
 80131d4:	b510      	push	{r4, lr}
 80131d6:	db11      	blt.n	80131fc <__any_on+0x32>
 80131d8:	dd0a      	ble.n	80131f0 <__any_on+0x26>
 80131da:	f011 011f 	ands.w	r1, r1, #31
 80131de:	d007      	beq.n	80131f0 <__any_on+0x26>
 80131e0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80131e4:	fa24 f001 	lsr.w	r0, r4, r1
 80131e8:	fa00 f101 	lsl.w	r1, r0, r1
 80131ec:	428c      	cmp	r4, r1
 80131ee:	d10b      	bne.n	8013208 <__any_on+0x3e>
 80131f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80131f4:	4293      	cmp	r3, r2
 80131f6:	d803      	bhi.n	8013200 <__any_on+0x36>
 80131f8:	2000      	movs	r0, #0
 80131fa:	bd10      	pop	{r4, pc}
 80131fc:	4603      	mov	r3, r0
 80131fe:	e7f7      	b.n	80131f0 <__any_on+0x26>
 8013200:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013204:	2900      	cmp	r1, #0
 8013206:	d0f5      	beq.n	80131f4 <__any_on+0x2a>
 8013208:	2001      	movs	r0, #1
 801320a:	e7f6      	b.n	80131fa <__any_on+0x30>

0801320c <__ascii_wctomb>:
 801320c:	b149      	cbz	r1, 8013222 <__ascii_wctomb+0x16>
 801320e:	2aff      	cmp	r2, #255	; 0xff
 8013210:	bf85      	ittet	hi
 8013212:	238a      	movhi	r3, #138	; 0x8a
 8013214:	6003      	strhi	r3, [r0, #0]
 8013216:	700a      	strbls	r2, [r1, #0]
 8013218:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801321c:	bf98      	it	ls
 801321e:	2001      	movls	r0, #1
 8013220:	4770      	bx	lr
 8013222:	4608      	mov	r0, r1
 8013224:	4770      	bx	lr

08013226 <__sfputc_r>:
 8013226:	6893      	ldr	r3, [r2, #8]
 8013228:	3b01      	subs	r3, #1
 801322a:	2b00      	cmp	r3, #0
 801322c:	b410      	push	{r4}
 801322e:	6093      	str	r3, [r2, #8]
 8013230:	da08      	bge.n	8013244 <__sfputc_r+0x1e>
 8013232:	6994      	ldr	r4, [r2, #24]
 8013234:	42a3      	cmp	r3, r4
 8013236:	db01      	blt.n	801323c <__sfputc_r+0x16>
 8013238:	290a      	cmp	r1, #10
 801323a:	d103      	bne.n	8013244 <__sfputc_r+0x1e>
 801323c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013240:	f000 bb84 	b.w	801394c <__swbuf_r>
 8013244:	6813      	ldr	r3, [r2, #0]
 8013246:	1c58      	adds	r0, r3, #1
 8013248:	6010      	str	r0, [r2, #0]
 801324a:	7019      	strb	r1, [r3, #0]
 801324c:	4608      	mov	r0, r1
 801324e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013252:	4770      	bx	lr

08013254 <__sfputs_r>:
 8013254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013256:	4606      	mov	r6, r0
 8013258:	460f      	mov	r7, r1
 801325a:	4614      	mov	r4, r2
 801325c:	18d5      	adds	r5, r2, r3
 801325e:	42ac      	cmp	r4, r5
 8013260:	d101      	bne.n	8013266 <__sfputs_r+0x12>
 8013262:	2000      	movs	r0, #0
 8013264:	e007      	b.n	8013276 <__sfputs_r+0x22>
 8013266:	f814 1b01 	ldrb.w	r1, [r4], #1
 801326a:	463a      	mov	r2, r7
 801326c:	4630      	mov	r0, r6
 801326e:	f7ff ffda 	bl	8013226 <__sfputc_r>
 8013272:	1c43      	adds	r3, r0, #1
 8013274:	d1f3      	bne.n	801325e <__sfputs_r+0xa>
 8013276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013278 <_vfiprintf_r>:
 8013278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801327c:	460d      	mov	r5, r1
 801327e:	b09d      	sub	sp, #116	; 0x74
 8013280:	4614      	mov	r4, r2
 8013282:	4698      	mov	r8, r3
 8013284:	4606      	mov	r6, r0
 8013286:	b118      	cbz	r0, 8013290 <_vfiprintf_r+0x18>
 8013288:	6a03      	ldr	r3, [r0, #32]
 801328a:	b90b      	cbnz	r3, 8013290 <_vfiprintf_r+0x18>
 801328c:	f7fe fcde 	bl	8011c4c <__sinit>
 8013290:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013292:	07d9      	lsls	r1, r3, #31
 8013294:	d405      	bmi.n	80132a2 <_vfiprintf_r+0x2a>
 8013296:	89ab      	ldrh	r3, [r5, #12]
 8013298:	059a      	lsls	r2, r3, #22
 801329a:	d402      	bmi.n	80132a2 <_vfiprintf_r+0x2a>
 801329c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801329e:	f7fe fe6a 	bl	8011f76 <__retarget_lock_acquire_recursive>
 80132a2:	89ab      	ldrh	r3, [r5, #12]
 80132a4:	071b      	lsls	r3, r3, #28
 80132a6:	d501      	bpl.n	80132ac <_vfiprintf_r+0x34>
 80132a8:	692b      	ldr	r3, [r5, #16]
 80132aa:	b99b      	cbnz	r3, 80132d4 <_vfiprintf_r+0x5c>
 80132ac:	4629      	mov	r1, r5
 80132ae:	4630      	mov	r0, r6
 80132b0:	f000 fb8a 	bl	80139c8 <__swsetup_r>
 80132b4:	b170      	cbz	r0, 80132d4 <_vfiprintf_r+0x5c>
 80132b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80132b8:	07dc      	lsls	r4, r3, #31
 80132ba:	d504      	bpl.n	80132c6 <_vfiprintf_r+0x4e>
 80132bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80132c0:	b01d      	add	sp, #116	; 0x74
 80132c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132c6:	89ab      	ldrh	r3, [r5, #12]
 80132c8:	0598      	lsls	r0, r3, #22
 80132ca:	d4f7      	bmi.n	80132bc <_vfiprintf_r+0x44>
 80132cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80132ce:	f7fe fe53 	bl	8011f78 <__retarget_lock_release_recursive>
 80132d2:	e7f3      	b.n	80132bc <_vfiprintf_r+0x44>
 80132d4:	2300      	movs	r3, #0
 80132d6:	9309      	str	r3, [sp, #36]	; 0x24
 80132d8:	2320      	movs	r3, #32
 80132da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80132de:	f8cd 800c 	str.w	r8, [sp, #12]
 80132e2:	2330      	movs	r3, #48	; 0x30
 80132e4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8013498 <_vfiprintf_r+0x220>
 80132e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80132ec:	f04f 0901 	mov.w	r9, #1
 80132f0:	4623      	mov	r3, r4
 80132f2:	469a      	mov	sl, r3
 80132f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80132f8:	b10a      	cbz	r2, 80132fe <_vfiprintf_r+0x86>
 80132fa:	2a25      	cmp	r2, #37	; 0x25
 80132fc:	d1f9      	bne.n	80132f2 <_vfiprintf_r+0x7a>
 80132fe:	ebba 0b04 	subs.w	fp, sl, r4
 8013302:	d00b      	beq.n	801331c <_vfiprintf_r+0xa4>
 8013304:	465b      	mov	r3, fp
 8013306:	4622      	mov	r2, r4
 8013308:	4629      	mov	r1, r5
 801330a:	4630      	mov	r0, r6
 801330c:	f7ff ffa2 	bl	8013254 <__sfputs_r>
 8013310:	3001      	adds	r0, #1
 8013312:	f000 80a9 	beq.w	8013468 <_vfiprintf_r+0x1f0>
 8013316:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013318:	445a      	add	r2, fp
 801331a:	9209      	str	r2, [sp, #36]	; 0x24
 801331c:	f89a 3000 	ldrb.w	r3, [sl]
 8013320:	2b00      	cmp	r3, #0
 8013322:	f000 80a1 	beq.w	8013468 <_vfiprintf_r+0x1f0>
 8013326:	2300      	movs	r3, #0
 8013328:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801332c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013330:	f10a 0a01 	add.w	sl, sl, #1
 8013334:	9304      	str	r3, [sp, #16]
 8013336:	9307      	str	r3, [sp, #28]
 8013338:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801333c:	931a      	str	r3, [sp, #104]	; 0x68
 801333e:	4654      	mov	r4, sl
 8013340:	2205      	movs	r2, #5
 8013342:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013346:	4854      	ldr	r0, [pc, #336]	; (8013498 <_vfiprintf_r+0x220>)
 8013348:	f7ec ff7a 	bl	8000240 <memchr>
 801334c:	9a04      	ldr	r2, [sp, #16]
 801334e:	b9d8      	cbnz	r0, 8013388 <_vfiprintf_r+0x110>
 8013350:	06d1      	lsls	r1, r2, #27
 8013352:	bf44      	itt	mi
 8013354:	2320      	movmi	r3, #32
 8013356:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801335a:	0713      	lsls	r3, r2, #28
 801335c:	bf44      	itt	mi
 801335e:	232b      	movmi	r3, #43	; 0x2b
 8013360:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013364:	f89a 3000 	ldrb.w	r3, [sl]
 8013368:	2b2a      	cmp	r3, #42	; 0x2a
 801336a:	d015      	beq.n	8013398 <_vfiprintf_r+0x120>
 801336c:	9a07      	ldr	r2, [sp, #28]
 801336e:	4654      	mov	r4, sl
 8013370:	2000      	movs	r0, #0
 8013372:	f04f 0c0a 	mov.w	ip, #10
 8013376:	4621      	mov	r1, r4
 8013378:	f811 3b01 	ldrb.w	r3, [r1], #1
 801337c:	3b30      	subs	r3, #48	; 0x30
 801337e:	2b09      	cmp	r3, #9
 8013380:	d94d      	bls.n	801341e <_vfiprintf_r+0x1a6>
 8013382:	b1b0      	cbz	r0, 80133b2 <_vfiprintf_r+0x13a>
 8013384:	9207      	str	r2, [sp, #28]
 8013386:	e014      	b.n	80133b2 <_vfiprintf_r+0x13a>
 8013388:	eba0 0308 	sub.w	r3, r0, r8
 801338c:	fa09 f303 	lsl.w	r3, r9, r3
 8013390:	4313      	orrs	r3, r2
 8013392:	9304      	str	r3, [sp, #16]
 8013394:	46a2      	mov	sl, r4
 8013396:	e7d2      	b.n	801333e <_vfiprintf_r+0xc6>
 8013398:	9b03      	ldr	r3, [sp, #12]
 801339a:	1d19      	adds	r1, r3, #4
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	9103      	str	r1, [sp, #12]
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	bfbb      	ittet	lt
 80133a4:	425b      	neglt	r3, r3
 80133a6:	f042 0202 	orrlt.w	r2, r2, #2
 80133aa:	9307      	strge	r3, [sp, #28]
 80133ac:	9307      	strlt	r3, [sp, #28]
 80133ae:	bfb8      	it	lt
 80133b0:	9204      	strlt	r2, [sp, #16]
 80133b2:	7823      	ldrb	r3, [r4, #0]
 80133b4:	2b2e      	cmp	r3, #46	; 0x2e
 80133b6:	d10c      	bne.n	80133d2 <_vfiprintf_r+0x15a>
 80133b8:	7863      	ldrb	r3, [r4, #1]
 80133ba:	2b2a      	cmp	r3, #42	; 0x2a
 80133bc:	d134      	bne.n	8013428 <_vfiprintf_r+0x1b0>
 80133be:	9b03      	ldr	r3, [sp, #12]
 80133c0:	1d1a      	adds	r2, r3, #4
 80133c2:	681b      	ldr	r3, [r3, #0]
 80133c4:	9203      	str	r2, [sp, #12]
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	bfb8      	it	lt
 80133ca:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80133ce:	3402      	adds	r4, #2
 80133d0:	9305      	str	r3, [sp, #20]
 80133d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80134a8 <_vfiprintf_r+0x230>
 80133d6:	7821      	ldrb	r1, [r4, #0]
 80133d8:	2203      	movs	r2, #3
 80133da:	4650      	mov	r0, sl
 80133dc:	f7ec ff30 	bl	8000240 <memchr>
 80133e0:	b138      	cbz	r0, 80133f2 <_vfiprintf_r+0x17a>
 80133e2:	9b04      	ldr	r3, [sp, #16]
 80133e4:	eba0 000a 	sub.w	r0, r0, sl
 80133e8:	2240      	movs	r2, #64	; 0x40
 80133ea:	4082      	lsls	r2, r0
 80133ec:	4313      	orrs	r3, r2
 80133ee:	3401      	adds	r4, #1
 80133f0:	9304      	str	r3, [sp, #16]
 80133f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80133f6:	4829      	ldr	r0, [pc, #164]	; (801349c <_vfiprintf_r+0x224>)
 80133f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80133fc:	2206      	movs	r2, #6
 80133fe:	f7ec ff1f 	bl	8000240 <memchr>
 8013402:	2800      	cmp	r0, #0
 8013404:	d03f      	beq.n	8013486 <_vfiprintf_r+0x20e>
 8013406:	4b26      	ldr	r3, [pc, #152]	; (80134a0 <_vfiprintf_r+0x228>)
 8013408:	bb1b      	cbnz	r3, 8013452 <_vfiprintf_r+0x1da>
 801340a:	9b03      	ldr	r3, [sp, #12]
 801340c:	3307      	adds	r3, #7
 801340e:	f023 0307 	bic.w	r3, r3, #7
 8013412:	3308      	adds	r3, #8
 8013414:	9303      	str	r3, [sp, #12]
 8013416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013418:	443b      	add	r3, r7
 801341a:	9309      	str	r3, [sp, #36]	; 0x24
 801341c:	e768      	b.n	80132f0 <_vfiprintf_r+0x78>
 801341e:	fb0c 3202 	mla	r2, ip, r2, r3
 8013422:	460c      	mov	r4, r1
 8013424:	2001      	movs	r0, #1
 8013426:	e7a6      	b.n	8013376 <_vfiprintf_r+0xfe>
 8013428:	2300      	movs	r3, #0
 801342a:	3401      	adds	r4, #1
 801342c:	9305      	str	r3, [sp, #20]
 801342e:	4619      	mov	r1, r3
 8013430:	f04f 0c0a 	mov.w	ip, #10
 8013434:	4620      	mov	r0, r4
 8013436:	f810 2b01 	ldrb.w	r2, [r0], #1
 801343a:	3a30      	subs	r2, #48	; 0x30
 801343c:	2a09      	cmp	r2, #9
 801343e:	d903      	bls.n	8013448 <_vfiprintf_r+0x1d0>
 8013440:	2b00      	cmp	r3, #0
 8013442:	d0c6      	beq.n	80133d2 <_vfiprintf_r+0x15a>
 8013444:	9105      	str	r1, [sp, #20]
 8013446:	e7c4      	b.n	80133d2 <_vfiprintf_r+0x15a>
 8013448:	fb0c 2101 	mla	r1, ip, r1, r2
 801344c:	4604      	mov	r4, r0
 801344e:	2301      	movs	r3, #1
 8013450:	e7f0      	b.n	8013434 <_vfiprintf_r+0x1bc>
 8013452:	ab03      	add	r3, sp, #12
 8013454:	9300      	str	r3, [sp, #0]
 8013456:	462a      	mov	r2, r5
 8013458:	4b12      	ldr	r3, [pc, #72]	; (80134a4 <_vfiprintf_r+0x22c>)
 801345a:	a904      	add	r1, sp, #16
 801345c:	4630      	mov	r0, r6
 801345e:	f3af 8000 	nop.w
 8013462:	4607      	mov	r7, r0
 8013464:	1c78      	adds	r0, r7, #1
 8013466:	d1d6      	bne.n	8013416 <_vfiprintf_r+0x19e>
 8013468:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801346a:	07d9      	lsls	r1, r3, #31
 801346c:	d405      	bmi.n	801347a <_vfiprintf_r+0x202>
 801346e:	89ab      	ldrh	r3, [r5, #12]
 8013470:	059a      	lsls	r2, r3, #22
 8013472:	d402      	bmi.n	801347a <_vfiprintf_r+0x202>
 8013474:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013476:	f7fe fd7f 	bl	8011f78 <__retarget_lock_release_recursive>
 801347a:	89ab      	ldrh	r3, [r5, #12]
 801347c:	065b      	lsls	r3, r3, #25
 801347e:	f53f af1d 	bmi.w	80132bc <_vfiprintf_r+0x44>
 8013482:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013484:	e71c      	b.n	80132c0 <_vfiprintf_r+0x48>
 8013486:	ab03      	add	r3, sp, #12
 8013488:	9300      	str	r3, [sp, #0]
 801348a:	462a      	mov	r2, r5
 801348c:	4b05      	ldr	r3, [pc, #20]	; (80134a4 <_vfiprintf_r+0x22c>)
 801348e:	a904      	add	r1, sp, #16
 8013490:	4630      	mov	r0, r6
 8013492:	f000 f879 	bl	8013588 <_printf_i>
 8013496:	e7e4      	b.n	8013462 <_vfiprintf_r+0x1ea>
 8013498:	08016bc4 	.word	0x08016bc4
 801349c:	08016bce 	.word	0x08016bce
 80134a0:	00000000 	.word	0x00000000
 80134a4:	08013255 	.word	0x08013255
 80134a8:	08016bca 	.word	0x08016bca

080134ac <_printf_common>:
 80134ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80134b0:	4616      	mov	r6, r2
 80134b2:	4699      	mov	r9, r3
 80134b4:	688a      	ldr	r2, [r1, #8]
 80134b6:	690b      	ldr	r3, [r1, #16]
 80134b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80134bc:	4293      	cmp	r3, r2
 80134be:	bfb8      	it	lt
 80134c0:	4613      	movlt	r3, r2
 80134c2:	6033      	str	r3, [r6, #0]
 80134c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80134c8:	4607      	mov	r7, r0
 80134ca:	460c      	mov	r4, r1
 80134cc:	b10a      	cbz	r2, 80134d2 <_printf_common+0x26>
 80134ce:	3301      	adds	r3, #1
 80134d0:	6033      	str	r3, [r6, #0]
 80134d2:	6823      	ldr	r3, [r4, #0]
 80134d4:	0699      	lsls	r1, r3, #26
 80134d6:	bf42      	ittt	mi
 80134d8:	6833      	ldrmi	r3, [r6, #0]
 80134da:	3302      	addmi	r3, #2
 80134dc:	6033      	strmi	r3, [r6, #0]
 80134de:	6825      	ldr	r5, [r4, #0]
 80134e0:	f015 0506 	ands.w	r5, r5, #6
 80134e4:	d106      	bne.n	80134f4 <_printf_common+0x48>
 80134e6:	f104 0a19 	add.w	sl, r4, #25
 80134ea:	68e3      	ldr	r3, [r4, #12]
 80134ec:	6832      	ldr	r2, [r6, #0]
 80134ee:	1a9b      	subs	r3, r3, r2
 80134f0:	42ab      	cmp	r3, r5
 80134f2:	dc26      	bgt.n	8013542 <_printf_common+0x96>
 80134f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80134f8:	1e13      	subs	r3, r2, #0
 80134fa:	6822      	ldr	r2, [r4, #0]
 80134fc:	bf18      	it	ne
 80134fe:	2301      	movne	r3, #1
 8013500:	0692      	lsls	r2, r2, #26
 8013502:	d42b      	bmi.n	801355c <_printf_common+0xb0>
 8013504:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013508:	4649      	mov	r1, r9
 801350a:	4638      	mov	r0, r7
 801350c:	47c0      	blx	r8
 801350e:	3001      	adds	r0, #1
 8013510:	d01e      	beq.n	8013550 <_printf_common+0xa4>
 8013512:	6823      	ldr	r3, [r4, #0]
 8013514:	6922      	ldr	r2, [r4, #16]
 8013516:	f003 0306 	and.w	r3, r3, #6
 801351a:	2b04      	cmp	r3, #4
 801351c:	bf02      	ittt	eq
 801351e:	68e5      	ldreq	r5, [r4, #12]
 8013520:	6833      	ldreq	r3, [r6, #0]
 8013522:	1aed      	subeq	r5, r5, r3
 8013524:	68a3      	ldr	r3, [r4, #8]
 8013526:	bf0c      	ite	eq
 8013528:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801352c:	2500      	movne	r5, #0
 801352e:	4293      	cmp	r3, r2
 8013530:	bfc4      	itt	gt
 8013532:	1a9b      	subgt	r3, r3, r2
 8013534:	18ed      	addgt	r5, r5, r3
 8013536:	2600      	movs	r6, #0
 8013538:	341a      	adds	r4, #26
 801353a:	42b5      	cmp	r5, r6
 801353c:	d11a      	bne.n	8013574 <_printf_common+0xc8>
 801353e:	2000      	movs	r0, #0
 8013540:	e008      	b.n	8013554 <_printf_common+0xa8>
 8013542:	2301      	movs	r3, #1
 8013544:	4652      	mov	r2, sl
 8013546:	4649      	mov	r1, r9
 8013548:	4638      	mov	r0, r7
 801354a:	47c0      	blx	r8
 801354c:	3001      	adds	r0, #1
 801354e:	d103      	bne.n	8013558 <_printf_common+0xac>
 8013550:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013558:	3501      	adds	r5, #1
 801355a:	e7c6      	b.n	80134ea <_printf_common+0x3e>
 801355c:	18e1      	adds	r1, r4, r3
 801355e:	1c5a      	adds	r2, r3, #1
 8013560:	2030      	movs	r0, #48	; 0x30
 8013562:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013566:	4422      	add	r2, r4
 8013568:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801356c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013570:	3302      	adds	r3, #2
 8013572:	e7c7      	b.n	8013504 <_printf_common+0x58>
 8013574:	2301      	movs	r3, #1
 8013576:	4622      	mov	r2, r4
 8013578:	4649      	mov	r1, r9
 801357a:	4638      	mov	r0, r7
 801357c:	47c0      	blx	r8
 801357e:	3001      	adds	r0, #1
 8013580:	d0e6      	beq.n	8013550 <_printf_common+0xa4>
 8013582:	3601      	adds	r6, #1
 8013584:	e7d9      	b.n	801353a <_printf_common+0x8e>
	...

08013588 <_printf_i>:
 8013588:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801358c:	7e0f      	ldrb	r7, [r1, #24]
 801358e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013590:	2f78      	cmp	r7, #120	; 0x78
 8013592:	4691      	mov	r9, r2
 8013594:	4680      	mov	r8, r0
 8013596:	460c      	mov	r4, r1
 8013598:	469a      	mov	sl, r3
 801359a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801359e:	d807      	bhi.n	80135b0 <_printf_i+0x28>
 80135a0:	2f62      	cmp	r7, #98	; 0x62
 80135a2:	d80a      	bhi.n	80135ba <_printf_i+0x32>
 80135a4:	2f00      	cmp	r7, #0
 80135a6:	f000 80d4 	beq.w	8013752 <_printf_i+0x1ca>
 80135aa:	2f58      	cmp	r7, #88	; 0x58
 80135ac:	f000 80c0 	beq.w	8013730 <_printf_i+0x1a8>
 80135b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80135b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80135b8:	e03a      	b.n	8013630 <_printf_i+0xa8>
 80135ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80135be:	2b15      	cmp	r3, #21
 80135c0:	d8f6      	bhi.n	80135b0 <_printf_i+0x28>
 80135c2:	a101      	add	r1, pc, #4	; (adr r1, 80135c8 <_printf_i+0x40>)
 80135c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80135c8:	08013621 	.word	0x08013621
 80135cc:	08013635 	.word	0x08013635
 80135d0:	080135b1 	.word	0x080135b1
 80135d4:	080135b1 	.word	0x080135b1
 80135d8:	080135b1 	.word	0x080135b1
 80135dc:	080135b1 	.word	0x080135b1
 80135e0:	08013635 	.word	0x08013635
 80135e4:	080135b1 	.word	0x080135b1
 80135e8:	080135b1 	.word	0x080135b1
 80135ec:	080135b1 	.word	0x080135b1
 80135f0:	080135b1 	.word	0x080135b1
 80135f4:	08013739 	.word	0x08013739
 80135f8:	08013661 	.word	0x08013661
 80135fc:	080136f3 	.word	0x080136f3
 8013600:	080135b1 	.word	0x080135b1
 8013604:	080135b1 	.word	0x080135b1
 8013608:	0801375b 	.word	0x0801375b
 801360c:	080135b1 	.word	0x080135b1
 8013610:	08013661 	.word	0x08013661
 8013614:	080135b1 	.word	0x080135b1
 8013618:	080135b1 	.word	0x080135b1
 801361c:	080136fb 	.word	0x080136fb
 8013620:	682b      	ldr	r3, [r5, #0]
 8013622:	1d1a      	adds	r2, r3, #4
 8013624:	681b      	ldr	r3, [r3, #0]
 8013626:	602a      	str	r2, [r5, #0]
 8013628:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801362c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013630:	2301      	movs	r3, #1
 8013632:	e09f      	b.n	8013774 <_printf_i+0x1ec>
 8013634:	6820      	ldr	r0, [r4, #0]
 8013636:	682b      	ldr	r3, [r5, #0]
 8013638:	0607      	lsls	r7, r0, #24
 801363a:	f103 0104 	add.w	r1, r3, #4
 801363e:	6029      	str	r1, [r5, #0]
 8013640:	d501      	bpl.n	8013646 <_printf_i+0xbe>
 8013642:	681e      	ldr	r6, [r3, #0]
 8013644:	e003      	b.n	801364e <_printf_i+0xc6>
 8013646:	0646      	lsls	r6, r0, #25
 8013648:	d5fb      	bpl.n	8013642 <_printf_i+0xba>
 801364a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801364e:	2e00      	cmp	r6, #0
 8013650:	da03      	bge.n	801365a <_printf_i+0xd2>
 8013652:	232d      	movs	r3, #45	; 0x2d
 8013654:	4276      	negs	r6, r6
 8013656:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801365a:	485a      	ldr	r0, [pc, #360]	; (80137c4 <_printf_i+0x23c>)
 801365c:	230a      	movs	r3, #10
 801365e:	e012      	b.n	8013686 <_printf_i+0xfe>
 8013660:	682b      	ldr	r3, [r5, #0]
 8013662:	6820      	ldr	r0, [r4, #0]
 8013664:	1d19      	adds	r1, r3, #4
 8013666:	6029      	str	r1, [r5, #0]
 8013668:	0605      	lsls	r5, r0, #24
 801366a:	d501      	bpl.n	8013670 <_printf_i+0xe8>
 801366c:	681e      	ldr	r6, [r3, #0]
 801366e:	e002      	b.n	8013676 <_printf_i+0xee>
 8013670:	0641      	lsls	r1, r0, #25
 8013672:	d5fb      	bpl.n	801366c <_printf_i+0xe4>
 8013674:	881e      	ldrh	r6, [r3, #0]
 8013676:	4853      	ldr	r0, [pc, #332]	; (80137c4 <_printf_i+0x23c>)
 8013678:	2f6f      	cmp	r7, #111	; 0x6f
 801367a:	bf0c      	ite	eq
 801367c:	2308      	moveq	r3, #8
 801367e:	230a      	movne	r3, #10
 8013680:	2100      	movs	r1, #0
 8013682:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013686:	6865      	ldr	r5, [r4, #4]
 8013688:	60a5      	str	r5, [r4, #8]
 801368a:	2d00      	cmp	r5, #0
 801368c:	bfa2      	ittt	ge
 801368e:	6821      	ldrge	r1, [r4, #0]
 8013690:	f021 0104 	bicge.w	r1, r1, #4
 8013694:	6021      	strge	r1, [r4, #0]
 8013696:	b90e      	cbnz	r6, 801369c <_printf_i+0x114>
 8013698:	2d00      	cmp	r5, #0
 801369a:	d04b      	beq.n	8013734 <_printf_i+0x1ac>
 801369c:	4615      	mov	r5, r2
 801369e:	fbb6 f1f3 	udiv	r1, r6, r3
 80136a2:	fb03 6711 	mls	r7, r3, r1, r6
 80136a6:	5dc7      	ldrb	r7, [r0, r7]
 80136a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80136ac:	4637      	mov	r7, r6
 80136ae:	42bb      	cmp	r3, r7
 80136b0:	460e      	mov	r6, r1
 80136b2:	d9f4      	bls.n	801369e <_printf_i+0x116>
 80136b4:	2b08      	cmp	r3, #8
 80136b6:	d10b      	bne.n	80136d0 <_printf_i+0x148>
 80136b8:	6823      	ldr	r3, [r4, #0]
 80136ba:	07de      	lsls	r6, r3, #31
 80136bc:	d508      	bpl.n	80136d0 <_printf_i+0x148>
 80136be:	6923      	ldr	r3, [r4, #16]
 80136c0:	6861      	ldr	r1, [r4, #4]
 80136c2:	4299      	cmp	r1, r3
 80136c4:	bfde      	ittt	le
 80136c6:	2330      	movle	r3, #48	; 0x30
 80136c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80136cc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80136d0:	1b52      	subs	r2, r2, r5
 80136d2:	6122      	str	r2, [r4, #16]
 80136d4:	f8cd a000 	str.w	sl, [sp]
 80136d8:	464b      	mov	r3, r9
 80136da:	aa03      	add	r2, sp, #12
 80136dc:	4621      	mov	r1, r4
 80136de:	4640      	mov	r0, r8
 80136e0:	f7ff fee4 	bl	80134ac <_printf_common>
 80136e4:	3001      	adds	r0, #1
 80136e6:	d14a      	bne.n	801377e <_printf_i+0x1f6>
 80136e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80136ec:	b004      	add	sp, #16
 80136ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80136f2:	6823      	ldr	r3, [r4, #0]
 80136f4:	f043 0320 	orr.w	r3, r3, #32
 80136f8:	6023      	str	r3, [r4, #0]
 80136fa:	4833      	ldr	r0, [pc, #204]	; (80137c8 <_printf_i+0x240>)
 80136fc:	2778      	movs	r7, #120	; 0x78
 80136fe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013702:	6823      	ldr	r3, [r4, #0]
 8013704:	6829      	ldr	r1, [r5, #0]
 8013706:	061f      	lsls	r7, r3, #24
 8013708:	f851 6b04 	ldr.w	r6, [r1], #4
 801370c:	d402      	bmi.n	8013714 <_printf_i+0x18c>
 801370e:	065f      	lsls	r7, r3, #25
 8013710:	bf48      	it	mi
 8013712:	b2b6      	uxthmi	r6, r6
 8013714:	07df      	lsls	r7, r3, #31
 8013716:	bf48      	it	mi
 8013718:	f043 0320 	orrmi.w	r3, r3, #32
 801371c:	6029      	str	r1, [r5, #0]
 801371e:	bf48      	it	mi
 8013720:	6023      	strmi	r3, [r4, #0]
 8013722:	b91e      	cbnz	r6, 801372c <_printf_i+0x1a4>
 8013724:	6823      	ldr	r3, [r4, #0]
 8013726:	f023 0320 	bic.w	r3, r3, #32
 801372a:	6023      	str	r3, [r4, #0]
 801372c:	2310      	movs	r3, #16
 801372e:	e7a7      	b.n	8013680 <_printf_i+0xf8>
 8013730:	4824      	ldr	r0, [pc, #144]	; (80137c4 <_printf_i+0x23c>)
 8013732:	e7e4      	b.n	80136fe <_printf_i+0x176>
 8013734:	4615      	mov	r5, r2
 8013736:	e7bd      	b.n	80136b4 <_printf_i+0x12c>
 8013738:	682b      	ldr	r3, [r5, #0]
 801373a:	6826      	ldr	r6, [r4, #0]
 801373c:	6961      	ldr	r1, [r4, #20]
 801373e:	1d18      	adds	r0, r3, #4
 8013740:	6028      	str	r0, [r5, #0]
 8013742:	0635      	lsls	r5, r6, #24
 8013744:	681b      	ldr	r3, [r3, #0]
 8013746:	d501      	bpl.n	801374c <_printf_i+0x1c4>
 8013748:	6019      	str	r1, [r3, #0]
 801374a:	e002      	b.n	8013752 <_printf_i+0x1ca>
 801374c:	0670      	lsls	r0, r6, #25
 801374e:	d5fb      	bpl.n	8013748 <_printf_i+0x1c0>
 8013750:	8019      	strh	r1, [r3, #0]
 8013752:	2300      	movs	r3, #0
 8013754:	6123      	str	r3, [r4, #16]
 8013756:	4615      	mov	r5, r2
 8013758:	e7bc      	b.n	80136d4 <_printf_i+0x14c>
 801375a:	682b      	ldr	r3, [r5, #0]
 801375c:	1d1a      	adds	r2, r3, #4
 801375e:	602a      	str	r2, [r5, #0]
 8013760:	681d      	ldr	r5, [r3, #0]
 8013762:	6862      	ldr	r2, [r4, #4]
 8013764:	2100      	movs	r1, #0
 8013766:	4628      	mov	r0, r5
 8013768:	f7ec fd6a 	bl	8000240 <memchr>
 801376c:	b108      	cbz	r0, 8013772 <_printf_i+0x1ea>
 801376e:	1b40      	subs	r0, r0, r5
 8013770:	6060      	str	r0, [r4, #4]
 8013772:	6863      	ldr	r3, [r4, #4]
 8013774:	6123      	str	r3, [r4, #16]
 8013776:	2300      	movs	r3, #0
 8013778:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801377c:	e7aa      	b.n	80136d4 <_printf_i+0x14c>
 801377e:	6923      	ldr	r3, [r4, #16]
 8013780:	462a      	mov	r2, r5
 8013782:	4649      	mov	r1, r9
 8013784:	4640      	mov	r0, r8
 8013786:	47d0      	blx	sl
 8013788:	3001      	adds	r0, #1
 801378a:	d0ad      	beq.n	80136e8 <_printf_i+0x160>
 801378c:	6823      	ldr	r3, [r4, #0]
 801378e:	079b      	lsls	r3, r3, #30
 8013790:	d413      	bmi.n	80137ba <_printf_i+0x232>
 8013792:	68e0      	ldr	r0, [r4, #12]
 8013794:	9b03      	ldr	r3, [sp, #12]
 8013796:	4298      	cmp	r0, r3
 8013798:	bfb8      	it	lt
 801379a:	4618      	movlt	r0, r3
 801379c:	e7a6      	b.n	80136ec <_printf_i+0x164>
 801379e:	2301      	movs	r3, #1
 80137a0:	4632      	mov	r2, r6
 80137a2:	4649      	mov	r1, r9
 80137a4:	4640      	mov	r0, r8
 80137a6:	47d0      	blx	sl
 80137a8:	3001      	adds	r0, #1
 80137aa:	d09d      	beq.n	80136e8 <_printf_i+0x160>
 80137ac:	3501      	adds	r5, #1
 80137ae:	68e3      	ldr	r3, [r4, #12]
 80137b0:	9903      	ldr	r1, [sp, #12]
 80137b2:	1a5b      	subs	r3, r3, r1
 80137b4:	42ab      	cmp	r3, r5
 80137b6:	dcf2      	bgt.n	801379e <_printf_i+0x216>
 80137b8:	e7eb      	b.n	8013792 <_printf_i+0x20a>
 80137ba:	2500      	movs	r5, #0
 80137bc:	f104 0619 	add.w	r6, r4, #25
 80137c0:	e7f5      	b.n	80137ae <_printf_i+0x226>
 80137c2:	bf00      	nop
 80137c4:	08016bd5 	.word	0x08016bd5
 80137c8:	08016be6 	.word	0x08016be6

080137cc <__sflush_r>:
 80137cc:	898a      	ldrh	r2, [r1, #12]
 80137ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137d2:	4605      	mov	r5, r0
 80137d4:	0710      	lsls	r0, r2, #28
 80137d6:	460c      	mov	r4, r1
 80137d8:	d458      	bmi.n	801388c <__sflush_r+0xc0>
 80137da:	684b      	ldr	r3, [r1, #4]
 80137dc:	2b00      	cmp	r3, #0
 80137de:	dc05      	bgt.n	80137ec <__sflush_r+0x20>
 80137e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	dc02      	bgt.n	80137ec <__sflush_r+0x20>
 80137e6:	2000      	movs	r0, #0
 80137e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80137ee:	2e00      	cmp	r6, #0
 80137f0:	d0f9      	beq.n	80137e6 <__sflush_r+0x1a>
 80137f2:	2300      	movs	r3, #0
 80137f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80137f8:	682f      	ldr	r7, [r5, #0]
 80137fa:	6a21      	ldr	r1, [r4, #32]
 80137fc:	602b      	str	r3, [r5, #0]
 80137fe:	d032      	beq.n	8013866 <__sflush_r+0x9a>
 8013800:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013802:	89a3      	ldrh	r3, [r4, #12]
 8013804:	075a      	lsls	r2, r3, #29
 8013806:	d505      	bpl.n	8013814 <__sflush_r+0x48>
 8013808:	6863      	ldr	r3, [r4, #4]
 801380a:	1ac0      	subs	r0, r0, r3
 801380c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801380e:	b10b      	cbz	r3, 8013814 <__sflush_r+0x48>
 8013810:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013812:	1ac0      	subs	r0, r0, r3
 8013814:	2300      	movs	r3, #0
 8013816:	4602      	mov	r2, r0
 8013818:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801381a:	6a21      	ldr	r1, [r4, #32]
 801381c:	4628      	mov	r0, r5
 801381e:	47b0      	blx	r6
 8013820:	1c43      	adds	r3, r0, #1
 8013822:	89a3      	ldrh	r3, [r4, #12]
 8013824:	d106      	bne.n	8013834 <__sflush_r+0x68>
 8013826:	6829      	ldr	r1, [r5, #0]
 8013828:	291d      	cmp	r1, #29
 801382a:	d82b      	bhi.n	8013884 <__sflush_r+0xb8>
 801382c:	4a29      	ldr	r2, [pc, #164]	; (80138d4 <__sflush_r+0x108>)
 801382e:	410a      	asrs	r2, r1
 8013830:	07d6      	lsls	r6, r2, #31
 8013832:	d427      	bmi.n	8013884 <__sflush_r+0xb8>
 8013834:	2200      	movs	r2, #0
 8013836:	6062      	str	r2, [r4, #4]
 8013838:	04d9      	lsls	r1, r3, #19
 801383a:	6922      	ldr	r2, [r4, #16]
 801383c:	6022      	str	r2, [r4, #0]
 801383e:	d504      	bpl.n	801384a <__sflush_r+0x7e>
 8013840:	1c42      	adds	r2, r0, #1
 8013842:	d101      	bne.n	8013848 <__sflush_r+0x7c>
 8013844:	682b      	ldr	r3, [r5, #0]
 8013846:	b903      	cbnz	r3, 801384a <__sflush_r+0x7e>
 8013848:	6560      	str	r0, [r4, #84]	; 0x54
 801384a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801384c:	602f      	str	r7, [r5, #0]
 801384e:	2900      	cmp	r1, #0
 8013850:	d0c9      	beq.n	80137e6 <__sflush_r+0x1a>
 8013852:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013856:	4299      	cmp	r1, r3
 8013858:	d002      	beq.n	8013860 <__sflush_r+0x94>
 801385a:	4628      	mov	r0, r5
 801385c:	f7fe fbc2 	bl	8011fe4 <_free_r>
 8013860:	2000      	movs	r0, #0
 8013862:	6360      	str	r0, [r4, #52]	; 0x34
 8013864:	e7c0      	b.n	80137e8 <__sflush_r+0x1c>
 8013866:	2301      	movs	r3, #1
 8013868:	4628      	mov	r0, r5
 801386a:	47b0      	blx	r6
 801386c:	1c41      	adds	r1, r0, #1
 801386e:	d1c8      	bne.n	8013802 <__sflush_r+0x36>
 8013870:	682b      	ldr	r3, [r5, #0]
 8013872:	2b00      	cmp	r3, #0
 8013874:	d0c5      	beq.n	8013802 <__sflush_r+0x36>
 8013876:	2b1d      	cmp	r3, #29
 8013878:	d001      	beq.n	801387e <__sflush_r+0xb2>
 801387a:	2b16      	cmp	r3, #22
 801387c:	d101      	bne.n	8013882 <__sflush_r+0xb6>
 801387e:	602f      	str	r7, [r5, #0]
 8013880:	e7b1      	b.n	80137e6 <__sflush_r+0x1a>
 8013882:	89a3      	ldrh	r3, [r4, #12]
 8013884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013888:	81a3      	strh	r3, [r4, #12]
 801388a:	e7ad      	b.n	80137e8 <__sflush_r+0x1c>
 801388c:	690f      	ldr	r7, [r1, #16]
 801388e:	2f00      	cmp	r7, #0
 8013890:	d0a9      	beq.n	80137e6 <__sflush_r+0x1a>
 8013892:	0793      	lsls	r3, r2, #30
 8013894:	680e      	ldr	r6, [r1, #0]
 8013896:	bf08      	it	eq
 8013898:	694b      	ldreq	r3, [r1, #20]
 801389a:	600f      	str	r7, [r1, #0]
 801389c:	bf18      	it	ne
 801389e:	2300      	movne	r3, #0
 80138a0:	eba6 0807 	sub.w	r8, r6, r7
 80138a4:	608b      	str	r3, [r1, #8]
 80138a6:	f1b8 0f00 	cmp.w	r8, #0
 80138aa:	dd9c      	ble.n	80137e6 <__sflush_r+0x1a>
 80138ac:	6a21      	ldr	r1, [r4, #32]
 80138ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80138b0:	4643      	mov	r3, r8
 80138b2:	463a      	mov	r2, r7
 80138b4:	4628      	mov	r0, r5
 80138b6:	47b0      	blx	r6
 80138b8:	2800      	cmp	r0, #0
 80138ba:	dc06      	bgt.n	80138ca <__sflush_r+0xfe>
 80138bc:	89a3      	ldrh	r3, [r4, #12]
 80138be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80138c2:	81a3      	strh	r3, [r4, #12]
 80138c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80138c8:	e78e      	b.n	80137e8 <__sflush_r+0x1c>
 80138ca:	4407      	add	r7, r0
 80138cc:	eba8 0800 	sub.w	r8, r8, r0
 80138d0:	e7e9      	b.n	80138a6 <__sflush_r+0xda>
 80138d2:	bf00      	nop
 80138d4:	dfbffffe 	.word	0xdfbffffe

080138d8 <_fflush_r>:
 80138d8:	b538      	push	{r3, r4, r5, lr}
 80138da:	690b      	ldr	r3, [r1, #16]
 80138dc:	4605      	mov	r5, r0
 80138de:	460c      	mov	r4, r1
 80138e0:	b913      	cbnz	r3, 80138e8 <_fflush_r+0x10>
 80138e2:	2500      	movs	r5, #0
 80138e4:	4628      	mov	r0, r5
 80138e6:	bd38      	pop	{r3, r4, r5, pc}
 80138e8:	b118      	cbz	r0, 80138f2 <_fflush_r+0x1a>
 80138ea:	6a03      	ldr	r3, [r0, #32]
 80138ec:	b90b      	cbnz	r3, 80138f2 <_fflush_r+0x1a>
 80138ee:	f7fe f9ad 	bl	8011c4c <__sinit>
 80138f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d0f3      	beq.n	80138e2 <_fflush_r+0xa>
 80138fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80138fc:	07d0      	lsls	r0, r2, #31
 80138fe:	d404      	bmi.n	801390a <_fflush_r+0x32>
 8013900:	0599      	lsls	r1, r3, #22
 8013902:	d402      	bmi.n	801390a <_fflush_r+0x32>
 8013904:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013906:	f7fe fb36 	bl	8011f76 <__retarget_lock_acquire_recursive>
 801390a:	4628      	mov	r0, r5
 801390c:	4621      	mov	r1, r4
 801390e:	f7ff ff5d 	bl	80137cc <__sflush_r>
 8013912:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013914:	07da      	lsls	r2, r3, #31
 8013916:	4605      	mov	r5, r0
 8013918:	d4e4      	bmi.n	80138e4 <_fflush_r+0xc>
 801391a:	89a3      	ldrh	r3, [r4, #12]
 801391c:	059b      	lsls	r3, r3, #22
 801391e:	d4e1      	bmi.n	80138e4 <_fflush_r+0xc>
 8013920:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013922:	f7fe fb29 	bl	8011f78 <__retarget_lock_release_recursive>
 8013926:	e7dd      	b.n	80138e4 <_fflush_r+0xc>

08013928 <fiprintf>:
 8013928:	b40e      	push	{r1, r2, r3}
 801392a:	b503      	push	{r0, r1, lr}
 801392c:	4601      	mov	r1, r0
 801392e:	ab03      	add	r3, sp, #12
 8013930:	4805      	ldr	r0, [pc, #20]	; (8013948 <fiprintf+0x20>)
 8013932:	f853 2b04 	ldr.w	r2, [r3], #4
 8013936:	6800      	ldr	r0, [r0, #0]
 8013938:	9301      	str	r3, [sp, #4]
 801393a:	f7ff fc9d 	bl	8013278 <_vfiprintf_r>
 801393e:	b002      	add	sp, #8
 8013940:	f85d eb04 	ldr.w	lr, [sp], #4
 8013944:	b003      	add	sp, #12
 8013946:	4770      	bx	lr
 8013948:	200001f0 	.word	0x200001f0

0801394c <__swbuf_r>:
 801394c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801394e:	460e      	mov	r6, r1
 8013950:	4614      	mov	r4, r2
 8013952:	4605      	mov	r5, r0
 8013954:	b118      	cbz	r0, 801395e <__swbuf_r+0x12>
 8013956:	6a03      	ldr	r3, [r0, #32]
 8013958:	b90b      	cbnz	r3, 801395e <__swbuf_r+0x12>
 801395a:	f7fe f977 	bl	8011c4c <__sinit>
 801395e:	69a3      	ldr	r3, [r4, #24]
 8013960:	60a3      	str	r3, [r4, #8]
 8013962:	89a3      	ldrh	r3, [r4, #12]
 8013964:	071a      	lsls	r2, r3, #28
 8013966:	d525      	bpl.n	80139b4 <__swbuf_r+0x68>
 8013968:	6923      	ldr	r3, [r4, #16]
 801396a:	b31b      	cbz	r3, 80139b4 <__swbuf_r+0x68>
 801396c:	6823      	ldr	r3, [r4, #0]
 801396e:	6922      	ldr	r2, [r4, #16]
 8013970:	1a98      	subs	r0, r3, r2
 8013972:	6963      	ldr	r3, [r4, #20]
 8013974:	b2f6      	uxtb	r6, r6
 8013976:	4283      	cmp	r3, r0
 8013978:	4637      	mov	r7, r6
 801397a:	dc04      	bgt.n	8013986 <__swbuf_r+0x3a>
 801397c:	4621      	mov	r1, r4
 801397e:	4628      	mov	r0, r5
 8013980:	f7ff ffaa 	bl	80138d8 <_fflush_r>
 8013984:	b9e0      	cbnz	r0, 80139c0 <__swbuf_r+0x74>
 8013986:	68a3      	ldr	r3, [r4, #8]
 8013988:	3b01      	subs	r3, #1
 801398a:	60a3      	str	r3, [r4, #8]
 801398c:	6823      	ldr	r3, [r4, #0]
 801398e:	1c5a      	adds	r2, r3, #1
 8013990:	6022      	str	r2, [r4, #0]
 8013992:	701e      	strb	r6, [r3, #0]
 8013994:	6962      	ldr	r2, [r4, #20]
 8013996:	1c43      	adds	r3, r0, #1
 8013998:	429a      	cmp	r2, r3
 801399a:	d004      	beq.n	80139a6 <__swbuf_r+0x5a>
 801399c:	89a3      	ldrh	r3, [r4, #12]
 801399e:	07db      	lsls	r3, r3, #31
 80139a0:	d506      	bpl.n	80139b0 <__swbuf_r+0x64>
 80139a2:	2e0a      	cmp	r6, #10
 80139a4:	d104      	bne.n	80139b0 <__swbuf_r+0x64>
 80139a6:	4621      	mov	r1, r4
 80139a8:	4628      	mov	r0, r5
 80139aa:	f7ff ff95 	bl	80138d8 <_fflush_r>
 80139ae:	b938      	cbnz	r0, 80139c0 <__swbuf_r+0x74>
 80139b0:	4638      	mov	r0, r7
 80139b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80139b4:	4621      	mov	r1, r4
 80139b6:	4628      	mov	r0, r5
 80139b8:	f000 f806 	bl	80139c8 <__swsetup_r>
 80139bc:	2800      	cmp	r0, #0
 80139be:	d0d5      	beq.n	801396c <__swbuf_r+0x20>
 80139c0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80139c4:	e7f4      	b.n	80139b0 <__swbuf_r+0x64>
	...

080139c8 <__swsetup_r>:
 80139c8:	b538      	push	{r3, r4, r5, lr}
 80139ca:	4b2a      	ldr	r3, [pc, #168]	; (8013a74 <__swsetup_r+0xac>)
 80139cc:	4605      	mov	r5, r0
 80139ce:	6818      	ldr	r0, [r3, #0]
 80139d0:	460c      	mov	r4, r1
 80139d2:	b118      	cbz	r0, 80139dc <__swsetup_r+0x14>
 80139d4:	6a03      	ldr	r3, [r0, #32]
 80139d6:	b90b      	cbnz	r3, 80139dc <__swsetup_r+0x14>
 80139d8:	f7fe f938 	bl	8011c4c <__sinit>
 80139dc:	89a3      	ldrh	r3, [r4, #12]
 80139de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80139e2:	0718      	lsls	r0, r3, #28
 80139e4:	d422      	bmi.n	8013a2c <__swsetup_r+0x64>
 80139e6:	06d9      	lsls	r1, r3, #27
 80139e8:	d407      	bmi.n	80139fa <__swsetup_r+0x32>
 80139ea:	2309      	movs	r3, #9
 80139ec:	602b      	str	r3, [r5, #0]
 80139ee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80139f2:	81a3      	strh	r3, [r4, #12]
 80139f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80139f8:	e034      	b.n	8013a64 <__swsetup_r+0x9c>
 80139fa:	0758      	lsls	r0, r3, #29
 80139fc:	d512      	bpl.n	8013a24 <__swsetup_r+0x5c>
 80139fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013a00:	b141      	cbz	r1, 8013a14 <__swsetup_r+0x4c>
 8013a02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013a06:	4299      	cmp	r1, r3
 8013a08:	d002      	beq.n	8013a10 <__swsetup_r+0x48>
 8013a0a:	4628      	mov	r0, r5
 8013a0c:	f7fe faea 	bl	8011fe4 <_free_r>
 8013a10:	2300      	movs	r3, #0
 8013a12:	6363      	str	r3, [r4, #52]	; 0x34
 8013a14:	89a3      	ldrh	r3, [r4, #12]
 8013a16:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013a1a:	81a3      	strh	r3, [r4, #12]
 8013a1c:	2300      	movs	r3, #0
 8013a1e:	6063      	str	r3, [r4, #4]
 8013a20:	6923      	ldr	r3, [r4, #16]
 8013a22:	6023      	str	r3, [r4, #0]
 8013a24:	89a3      	ldrh	r3, [r4, #12]
 8013a26:	f043 0308 	orr.w	r3, r3, #8
 8013a2a:	81a3      	strh	r3, [r4, #12]
 8013a2c:	6923      	ldr	r3, [r4, #16]
 8013a2e:	b94b      	cbnz	r3, 8013a44 <__swsetup_r+0x7c>
 8013a30:	89a3      	ldrh	r3, [r4, #12]
 8013a32:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013a36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013a3a:	d003      	beq.n	8013a44 <__swsetup_r+0x7c>
 8013a3c:	4621      	mov	r1, r4
 8013a3e:	4628      	mov	r0, r5
 8013a40:	f000 f86d 	bl	8013b1e <__smakebuf_r>
 8013a44:	89a0      	ldrh	r0, [r4, #12]
 8013a46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013a4a:	f010 0301 	ands.w	r3, r0, #1
 8013a4e:	d00a      	beq.n	8013a66 <__swsetup_r+0x9e>
 8013a50:	2300      	movs	r3, #0
 8013a52:	60a3      	str	r3, [r4, #8]
 8013a54:	6963      	ldr	r3, [r4, #20]
 8013a56:	425b      	negs	r3, r3
 8013a58:	61a3      	str	r3, [r4, #24]
 8013a5a:	6923      	ldr	r3, [r4, #16]
 8013a5c:	b943      	cbnz	r3, 8013a70 <__swsetup_r+0xa8>
 8013a5e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013a62:	d1c4      	bne.n	80139ee <__swsetup_r+0x26>
 8013a64:	bd38      	pop	{r3, r4, r5, pc}
 8013a66:	0781      	lsls	r1, r0, #30
 8013a68:	bf58      	it	pl
 8013a6a:	6963      	ldrpl	r3, [r4, #20]
 8013a6c:	60a3      	str	r3, [r4, #8]
 8013a6e:	e7f4      	b.n	8013a5a <__swsetup_r+0x92>
 8013a70:	2000      	movs	r0, #0
 8013a72:	e7f7      	b.n	8013a64 <__swsetup_r+0x9c>
 8013a74:	200001f0 	.word	0x200001f0

08013a78 <_sbrk_r>:
 8013a78:	b538      	push	{r3, r4, r5, lr}
 8013a7a:	4d06      	ldr	r5, [pc, #24]	; (8013a94 <_sbrk_r+0x1c>)
 8013a7c:	2300      	movs	r3, #0
 8013a7e:	4604      	mov	r4, r0
 8013a80:	4608      	mov	r0, r1
 8013a82:	602b      	str	r3, [r5, #0]
 8013a84:	f7ed fe7a 	bl	800177c <_sbrk>
 8013a88:	1c43      	adds	r3, r0, #1
 8013a8a:	d102      	bne.n	8013a92 <_sbrk_r+0x1a>
 8013a8c:	682b      	ldr	r3, [r5, #0]
 8013a8e:	b103      	cbz	r3, 8013a92 <_sbrk_r+0x1a>
 8013a90:	6023      	str	r3, [r4, #0]
 8013a92:	bd38      	pop	{r3, r4, r5, pc}
 8013a94:	2000aa64 	.word	0x2000aa64

08013a98 <abort>:
 8013a98:	b508      	push	{r3, lr}
 8013a9a:	2006      	movs	r0, #6
 8013a9c:	f000 f8a4 	bl	8013be8 <raise>
 8013aa0:	2001      	movs	r0, #1
 8013aa2:	f7ed fdf3 	bl	800168c <_exit>

08013aa6 <_calloc_r>:
 8013aa6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013aa8:	fba1 2402 	umull	r2, r4, r1, r2
 8013aac:	b94c      	cbnz	r4, 8013ac2 <_calloc_r+0x1c>
 8013aae:	4611      	mov	r1, r2
 8013ab0:	9201      	str	r2, [sp, #4]
 8013ab2:	f7fe fe63 	bl	801277c <_malloc_r>
 8013ab6:	9a01      	ldr	r2, [sp, #4]
 8013ab8:	4605      	mov	r5, r0
 8013aba:	b930      	cbnz	r0, 8013aca <_calloc_r+0x24>
 8013abc:	4628      	mov	r0, r5
 8013abe:	b003      	add	sp, #12
 8013ac0:	bd30      	pop	{r4, r5, pc}
 8013ac2:	220c      	movs	r2, #12
 8013ac4:	6002      	str	r2, [r0, #0]
 8013ac6:	2500      	movs	r5, #0
 8013ac8:	e7f8      	b.n	8013abc <_calloc_r+0x16>
 8013aca:	4621      	mov	r1, r4
 8013acc:	f7fe f959 	bl	8011d82 <memset>
 8013ad0:	e7f4      	b.n	8013abc <_calloc_r+0x16>

08013ad2 <__swhatbuf_r>:
 8013ad2:	b570      	push	{r4, r5, r6, lr}
 8013ad4:	460c      	mov	r4, r1
 8013ad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ada:	2900      	cmp	r1, #0
 8013adc:	b096      	sub	sp, #88	; 0x58
 8013ade:	4615      	mov	r5, r2
 8013ae0:	461e      	mov	r6, r3
 8013ae2:	da0d      	bge.n	8013b00 <__swhatbuf_r+0x2e>
 8013ae4:	89a3      	ldrh	r3, [r4, #12]
 8013ae6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8013aea:	f04f 0100 	mov.w	r1, #0
 8013aee:	bf0c      	ite	eq
 8013af0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8013af4:	2340      	movne	r3, #64	; 0x40
 8013af6:	2000      	movs	r0, #0
 8013af8:	6031      	str	r1, [r6, #0]
 8013afa:	602b      	str	r3, [r5, #0]
 8013afc:	b016      	add	sp, #88	; 0x58
 8013afe:	bd70      	pop	{r4, r5, r6, pc}
 8013b00:	466a      	mov	r2, sp
 8013b02:	f000 f879 	bl	8013bf8 <_fstat_r>
 8013b06:	2800      	cmp	r0, #0
 8013b08:	dbec      	blt.n	8013ae4 <__swhatbuf_r+0x12>
 8013b0a:	9901      	ldr	r1, [sp, #4]
 8013b0c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8013b10:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8013b14:	4259      	negs	r1, r3
 8013b16:	4159      	adcs	r1, r3
 8013b18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013b1c:	e7eb      	b.n	8013af6 <__swhatbuf_r+0x24>

08013b1e <__smakebuf_r>:
 8013b1e:	898b      	ldrh	r3, [r1, #12]
 8013b20:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013b22:	079d      	lsls	r5, r3, #30
 8013b24:	4606      	mov	r6, r0
 8013b26:	460c      	mov	r4, r1
 8013b28:	d507      	bpl.n	8013b3a <__smakebuf_r+0x1c>
 8013b2a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013b2e:	6023      	str	r3, [r4, #0]
 8013b30:	6123      	str	r3, [r4, #16]
 8013b32:	2301      	movs	r3, #1
 8013b34:	6163      	str	r3, [r4, #20]
 8013b36:	b002      	add	sp, #8
 8013b38:	bd70      	pop	{r4, r5, r6, pc}
 8013b3a:	ab01      	add	r3, sp, #4
 8013b3c:	466a      	mov	r2, sp
 8013b3e:	f7ff ffc8 	bl	8013ad2 <__swhatbuf_r>
 8013b42:	9900      	ldr	r1, [sp, #0]
 8013b44:	4605      	mov	r5, r0
 8013b46:	4630      	mov	r0, r6
 8013b48:	f7fe fe18 	bl	801277c <_malloc_r>
 8013b4c:	b948      	cbnz	r0, 8013b62 <__smakebuf_r+0x44>
 8013b4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013b52:	059a      	lsls	r2, r3, #22
 8013b54:	d4ef      	bmi.n	8013b36 <__smakebuf_r+0x18>
 8013b56:	f023 0303 	bic.w	r3, r3, #3
 8013b5a:	f043 0302 	orr.w	r3, r3, #2
 8013b5e:	81a3      	strh	r3, [r4, #12]
 8013b60:	e7e3      	b.n	8013b2a <__smakebuf_r+0xc>
 8013b62:	89a3      	ldrh	r3, [r4, #12]
 8013b64:	6020      	str	r0, [r4, #0]
 8013b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013b6a:	81a3      	strh	r3, [r4, #12]
 8013b6c:	9b00      	ldr	r3, [sp, #0]
 8013b6e:	6163      	str	r3, [r4, #20]
 8013b70:	9b01      	ldr	r3, [sp, #4]
 8013b72:	6120      	str	r0, [r4, #16]
 8013b74:	b15b      	cbz	r3, 8013b8e <__smakebuf_r+0x70>
 8013b76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013b7a:	4630      	mov	r0, r6
 8013b7c:	f000 f84e 	bl	8013c1c <_isatty_r>
 8013b80:	b128      	cbz	r0, 8013b8e <__smakebuf_r+0x70>
 8013b82:	89a3      	ldrh	r3, [r4, #12]
 8013b84:	f023 0303 	bic.w	r3, r3, #3
 8013b88:	f043 0301 	orr.w	r3, r3, #1
 8013b8c:	81a3      	strh	r3, [r4, #12]
 8013b8e:	89a3      	ldrh	r3, [r4, #12]
 8013b90:	431d      	orrs	r5, r3
 8013b92:	81a5      	strh	r5, [r4, #12]
 8013b94:	e7cf      	b.n	8013b36 <__smakebuf_r+0x18>

08013b96 <_raise_r>:
 8013b96:	291f      	cmp	r1, #31
 8013b98:	b538      	push	{r3, r4, r5, lr}
 8013b9a:	4604      	mov	r4, r0
 8013b9c:	460d      	mov	r5, r1
 8013b9e:	d904      	bls.n	8013baa <_raise_r+0x14>
 8013ba0:	2316      	movs	r3, #22
 8013ba2:	6003      	str	r3, [r0, #0]
 8013ba4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013ba8:	bd38      	pop	{r3, r4, r5, pc}
 8013baa:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8013bac:	b112      	cbz	r2, 8013bb4 <_raise_r+0x1e>
 8013bae:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013bb2:	b94b      	cbnz	r3, 8013bc8 <_raise_r+0x32>
 8013bb4:	4620      	mov	r0, r4
 8013bb6:	f000 f853 	bl	8013c60 <_getpid_r>
 8013bba:	462a      	mov	r2, r5
 8013bbc:	4601      	mov	r1, r0
 8013bbe:	4620      	mov	r0, r4
 8013bc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013bc4:	f000 b83a 	b.w	8013c3c <_kill_r>
 8013bc8:	2b01      	cmp	r3, #1
 8013bca:	d00a      	beq.n	8013be2 <_raise_r+0x4c>
 8013bcc:	1c59      	adds	r1, r3, #1
 8013bce:	d103      	bne.n	8013bd8 <_raise_r+0x42>
 8013bd0:	2316      	movs	r3, #22
 8013bd2:	6003      	str	r3, [r0, #0]
 8013bd4:	2001      	movs	r0, #1
 8013bd6:	e7e7      	b.n	8013ba8 <_raise_r+0x12>
 8013bd8:	2400      	movs	r4, #0
 8013bda:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013bde:	4628      	mov	r0, r5
 8013be0:	4798      	blx	r3
 8013be2:	2000      	movs	r0, #0
 8013be4:	e7e0      	b.n	8013ba8 <_raise_r+0x12>
	...

08013be8 <raise>:
 8013be8:	4b02      	ldr	r3, [pc, #8]	; (8013bf4 <raise+0xc>)
 8013bea:	4601      	mov	r1, r0
 8013bec:	6818      	ldr	r0, [r3, #0]
 8013bee:	f7ff bfd2 	b.w	8013b96 <_raise_r>
 8013bf2:	bf00      	nop
 8013bf4:	200001f0 	.word	0x200001f0

08013bf8 <_fstat_r>:
 8013bf8:	b538      	push	{r3, r4, r5, lr}
 8013bfa:	4d07      	ldr	r5, [pc, #28]	; (8013c18 <_fstat_r+0x20>)
 8013bfc:	2300      	movs	r3, #0
 8013bfe:	4604      	mov	r4, r0
 8013c00:	4608      	mov	r0, r1
 8013c02:	4611      	mov	r1, r2
 8013c04:	602b      	str	r3, [r5, #0]
 8013c06:	f7ed fd90 	bl	800172a <_fstat>
 8013c0a:	1c43      	adds	r3, r0, #1
 8013c0c:	d102      	bne.n	8013c14 <_fstat_r+0x1c>
 8013c0e:	682b      	ldr	r3, [r5, #0]
 8013c10:	b103      	cbz	r3, 8013c14 <_fstat_r+0x1c>
 8013c12:	6023      	str	r3, [r4, #0]
 8013c14:	bd38      	pop	{r3, r4, r5, pc}
 8013c16:	bf00      	nop
 8013c18:	2000aa64 	.word	0x2000aa64

08013c1c <_isatty_r>:
 8013c1c:	b538      	push	{r3, r4, r5, lr}
 8013c1e:	4d06      	ldr	r5, [pc, #24]	; (8013c38 <_isatty_r+0x1c>)
 8013c20:	2300      	movs	r3, #0
 8013c22:	4604      	mov	r4, r0
 8013c24:	4608      	mov	r0, r1
 8013c26:	602b      	str	r3, [r5, #0]
 8013c28:	f7ed fd8f 	bl	800174a <_isatty>
 8013c2c:	1c43      	adds	r3, r0, #1
 8013c2e:	d102      	bne.n	8013c36 <_isatty_r+0x1a>
 8013c30:	682b      	ldr	r3, [r5, #0]
 8013c32:	b103      	cbz	r3, 8013c36 <_isatty_r+0x1a>
 8013c34:	6023      	str	r3, [r4, #0]
 8013c36:	bd38      	pop	{r3, r4, r5, pc}
 8013c38:	2000aa64 	.word	0x2000aa64

08013c3c <_kill_r>:
 8013c3c:	b538      	push	{r3, r4, r5, lr}
 8013c3e:	4d07      	ldr	r5, [pc, #28]	; (8013c5c <_kill_r+0x20>)
 8013c40:	2300      	movs	r3, #0
 8013c42:	4604      	mov	r4, r0
 8013c44:	4608      	mov	r0, r1
 8013c46:	4611      	mov	r1, r2
 8013c48:	602b      	str	r3, [r5, #0]
 8013c4a:	f7ed fd0d 	bl	8001668 <_kill>
 8013c4e:	1c43      	adds	r3, r0, #1
 8013c50:	d102      	bne.n	8013c58 <_kill_r+0x1c>
 8013c52:	682b      	ldr	r3, [r5, #0]
 8013c54:	b103      	cbz	r3, 8013c58 <_kill_r+0x1c>
 8013c56:	6023      	str	r3, [r4, #0]
 8013c58:	bd38      	pop	{r3, r4, r5, pc}
 8013c5a:	bf00      	nop
 8013c5c:	2000aa64 	.word	0x2000aa64

08013c60 <_getpid_r>:
 8013c60:	f7ed bcfa 	b.w	8001658 <_getpid>

08013c64 <_init>:
 8013c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c66:	bf00      	nop
 8013c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013c6a:	bc08      	pop	{r3}
 8013c6c:	469e      	mov	lr, r3
 8013c6e:	4770      	bx	lr

08013c70 <_fini>:
 8013c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c72:	bf00      	nop
 8013c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013c76:	bc08      	pop	{r3}
 8013c78:	469e      	mov	lr, r3
 8013c7a:	4770      	bx	lr
