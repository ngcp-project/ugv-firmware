
ugv_manual.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013aec  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f80  08013cf0  08013cf0  00023cf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016c70  08016c70  00030334  2**0
                  CONTENTS
  4 .ARM          00000008  08016c70  08016c70  00026c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016c78  08016c78  00030334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016c78  08016c78  00026c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016c7c  08016c7c  00026c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08016c80  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001f4  08016e74  000301f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000294  08016f14  00030294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000a744  20000334  08016fb4  00030334  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  2000aa78  08016fb4  0003aa78  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00030334  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00030362  2**0
                  CONTENTS, READONLY
 15 .debug_info   00024e46  00000000  00000000  000303a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00005bf7  00000000  00000000  000551eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001ae0  00000000  00000000  0005ade8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000158a  00000000  00000000  0005c8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00035038  00000000  00000000  0005de52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002af19  00000000  00000000  00092e8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00114667  00000000  00000000  000bdda3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00007ee8  00000000  00000000  001d240c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000066  00000000  00000000  001da2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000334 	.word	0x20000334
 800021c:	00000000 	.word	0x00000000
 8000220:	08013cd4 	.word	0x08013cd4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000338 	.word	0x20000338
 800023c:	08013cd4 	.word	0x08013cd4

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_uldivmod>:
 8000658:	b953      	cbnz	r3, 8000670 <__aeabi_uldivmod+0x18>
 800065a:	b94a      	cbnz	r2, 8000670 <__aeabi_uldivmod+0x18>
 800065c:	2900      	cmp	r1, #0
 800065e:	bf08      	it	eq
 8000660:	2800      	cmpeq	r0, #0
 8000662:	bf1c      	itt	ne
 8000664:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000668:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800066c:	f000 b9a8 	b.w	80009c0 <__aeabi_idiv0>
 8000670:	f1ad 0c08 	sub.w	ip, sp, #8
 8000674:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000678:	f000 f83e 	bl	80006f8 <__udivmoddi4>
 800067c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000680:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000684:	b004      	add	sp, #16
 8000686:	4770      	bx	lr

08000688 <__aeabi_d2lz>:
 8000688:	b508      	push	{r3, lr}
 800068a:	4602      	mov	r2, r0
 800068c:	460b      	mov	r3, r1
 800068e:	ec43 2b17 	vmov	d7, r2, r3
 8000692:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800069a:	d403      	bmi.n	80006a4 <__aeabi_d2lz+0x1c>
 800069c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006a0:	f000 b80a 	b.w	80006b8 <__aeabi_d2ulz>
 80006a4:	eeb1 7b47 	vneg.f64	d7, d7
 80006a8:	ec51 0b17 	vmov	r0, r1, d7
 80006ac:	f000 f804 	bl	80006b8 <__aeabi_d2ulz>
 80006b0:	4240      	negs	r0, r0
 80006b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b6:	bd08      	pop	{r3, pc}

080006b8 <__aeabi_d2ulz>:
 80006b8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006e8 <__aeabi_d2ulz+0x30>
 80006bc:	ec41 0b17 	vmov	d7, r0, r1
 80006c0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80006f0 <__aeabi_d2ulz+0x38>
 80006c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006c8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006cc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006d0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006d8:	ee16 1a10 	vmov	r1, s12
 80006dc:	ee17 0a90 	vmov	r0, s15
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	f3af 8000 	nop.w
 80006e8:	00000000 	.word	0x00000000
 80006ec:	3df00000 	.word	0x3df00000
 80006f0:	00000000 	.word	0x00000000
 80006f4:	41f00000 	.word	0x41f00000

080006f8 <__udivmoddi4>:
 80006f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006fc:	9e08      	ldr	r6, [sp, #32]
 80006fe:	460d      	mov	r5, r1
 8000700:	4604      	mov	r4, r0
 8000702:	460f      	mov	r7, r1
 8000704:	2b00      	cmp	r3, #0
 8000706:	d14a      	bne.n	800079e <__udivmoddi4+0xa6>
 8000708:	428a      	cmp	r2, r1
 800070a:	4694      	mov	ip, r2
 800070c:	d965      	bls.n	80007da <__udivmoddi4+0xe2>
 800070e:	fab2 f382 	clz	r3, r2
 8000712:	b143      	cbz	r3, 8000726 <__udivmoddi4+0x2e>
 8000714:	fa02 fc03 	lsl.w	ip, r2, r3
 8000718:	f1c3 0220 	rsb	r2, r3, #32
 800071c:	409f      	lsls	r7, r3
 800071e:	fa20 f202 	lsr.w	r2, r0, r2
 8000722:	4317      	orrs	r7, r2
 8000724:	409c      	lsls	r4, r3
 8000726:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800072a:	fa1f f58c 	uxth.w	r5, ip
 800072e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000732:	0c22      	lsrs	r2, r4, #16
 8000734:	fb0e 7711 	mls	r7, lr, r1, r7
 8000738:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800073c:	fb01 f005 	mul.w	r0, r1, r5
 8000740:	4290      	cmp	r0, r2
 8000742:	d90a      	bls.n	800075a <__udivmoddi4+0x62>
 8000744:	eb1c 0202 	adds.w	r2, ip, r2
 8000748:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800074c:	f080 811c 	bcs.w	8000988 <__udivmoddi4+0x290>
 8000750:	4290      	cmp	r0, r2
 8000752:	f240 8119 	bls.w	8000988 <__udivmoddi4+0x290>
 8000756:	3902      	subs	r1, #2
 8000758:	4462      	add	r2, ip
 800075a:	1a12      	subs	r2, r2, r0
 800075c:	b2a4      	uxth	r4, r4
 800075e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000762:	fb0e 2210 	mls	r2, lr, r0, r2
 8000766:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800076a:	fb00 f505 	mul.w	r5, r0, r5
 800076e:	42a5      	cmp	r5, r4
 8000770:	d90a      	bls.n	8000788 <__udivmoddi4+0x90>
 8000772:	eb1c 0404 	adds.w	r4, ip, r4
 8000776:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800077a:	f080 8107 	bcs.w	800098c <__udivmoddi4+0x294>
 800077e:	42a5      	cmp	r5, r4
 8000780:	f240 8104 	bls.w	800098c <__udivmoddi4+0x294>
 8000784:	4464      	add	r4, ip
 8000786:	3802      	subs	r0, #2
 8000788:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800078c:	1b64      	subs	r4, r4, r5
 800078e:	2100      	movs	r1, #0
 8000790:	b11e      	cbz	r6, 800079a <__udivmoddi4+0xa2>
 8000792:	40dc      	lsrs	r4, r3
 8000794:	2300      	movs	r3, #0
 8000796:	e9c6 4300 	strd	r4, r3, [r6]
 800079a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800079e:	428b      	cmp	r3, r1
 80007a0:	d908      	bls.n	80007b4 <__udivmoddi4+0xbc>
 80007a2:	2e00      	cmp	r6, #0
 80007a4:	f000 80ed 	beq.w	8000982 <__udivmoddi4+0x28a>
 80007a8:	2100      	movs	r1, #0
 80007aa:	e9c6 0500 	strd	r0, r5, [r6]
 80007ae:	4608      	mov	r0, r1
 80007b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b4:	fab3 f183 	clz	r1, r3
 80007b8:	2900      	cmp	r1, #0
 80007ba:	d149      	bne.n	8000850 <__udivmoddi4+0x158>
 80007bc:	42ab      	cmp	r3, r5
 80007be:	d302      	bcc.n	80007c6 <__udivmoddi4+0xce>
 80007c0:	4282      	cmp	r2, r0
 80007c2:	f200 80f8 	bhi.w	80009b6 <__udivmoddi4+0x2be>
 80007c6:	1a84      	subs	r4, r0, r2
 80007c8:	eb65 0203 	sbc.w	r2, r5, r3
 80007cc:	2001      	movs	r0, #1
 80007ce:	4617      	mov	r7, r2
 80007d0:	2e00      	cmp	r6, #0
 80007d2:	d0e2      	beq.n	800079a <__udivmoddi4+0xa2>
 80007d4:	e9c6 4700 	strd	r4, r7, [r6]
 80007d8:	e7df      	b.n	800079a <__udivmoddi4+0xa2>
 80007da:	b902      	cbnz	r2, 80007de <__udivmoddi4+0xe6>
 80007dc:	deff      	udf	#255	; 0xff
 80007de:	fab2 f382 	clz	r3, r2
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	f040 8090 	bne.w	8000908 <__udivmoddi4+0x210>
 80007e8:	1a8a      	subs	r2, r1, r2
 80007ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007ee:	fa1f fe8c 	uxth.w	lr, ip
 80007f2:	2101      	movs	r1, #1
 80007f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80007f8:	fb07 2015 	mls	r0, r7, r5, r2
 80007fc:	0c22      	lsrs	r2, r4, #16
 80007fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000802:	fb0e f005 	mul.w	r0, lr, r5
 8000806:	4290      	cmp	r0, r2
 8000808:	d908      	bls.n	800081c <__udivmoddi4+0x124>
 800080a:	eb1c 0202 	adds.w	r2, ip, r2
 800080e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000812:	d202      	bcs.n	800081a <__udivmoddi4+0x122>
 8000814:	4290      	cmp	r0, r2
 8000816:	f200 80cb 	bhi.w	80009b0 <__udivmoddi4+0x2b8>
 800081a:	4645      	mov	r5, r8
 800081c:	1a12      	subs	r2, r2, r0
 800081e:	b2a4      	uxth	r4, r4
 8000820:	fbb2 f0f7 	udiv	r0, r2, r7
 8000824:	fb07 2210 	mls	r2, r7, r0, r2
 8000828:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800082c:	fb0e fe00 	mul.w	lr, lr, r0
 8000830:	45a6      	cmp	lr, r4
 8000832:	d908      	bls.n	8000846 <__udivmoddi4+0x14e>
 8000834:	eb1c 0404 	adds.w	r4, ip, r4
 8000838:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800083c:	d202      	bcs.n	8000844 <__udivmoddi4+0x14c>
 800083e:	45a6      	cmp	lr, r4
 8000840:	f200 80bb 	bhi.w	80009ba <__udivmoddi4+0x2c2>
 8000844:	4610      	mov	r0, r2
 8000846:	eba4 040e 	sub.w	r4, r4, lr
 800084a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800084e:	e79f      	b.n	8000790 <__udivmoddi4+0x98>
 8000850:	f1c1 0720 	rsb	r7, r1, #32
 8000854:	408b      	lsls	r3, r1
 8000856:	fa22 fc07 	lsr.w	ip, r2, r7
 800085a:	ea4c 0c03 	orr.w	ip, ip, r3
 800085e:	fa05 f401 	lsl.w	r4, r5, r1
 8000862:	fa20 f307 	lsr.w	r3, r0, r7
 8000866:	40fd      	lsrs	r5, r7
 8000868:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800086c:	4323      	orrs	r3, r4
 800086e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000872:	fa1f fe8c 	uxth.w	lr, ip
 8000876:	fb09 5518 	mls	r5, r9, r8, r5
 800087a:	0c1c      	lsrs	r4, r3, #16
 800087c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000880:	fb08 f50e 	mul.w	r5, r8, lr
 8000884:	42a5      	cmp	r5, r4
 8000886:	fa02 f201 	lsl.w	r2, r2, r1
 800088a:	fa00 f001 	lsl.w	r0, r0, r1
 800088e:	d90b      	bls.n	80008a8 <__udivmoddi4+0x1b0>
 8000890:	eb1c 0404 	adds.w	r4, ip, r4
 8000894:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000898:	f080 8088 	bcs.w	80009ac <__udivmoddi4+0x2b4>
 800089c:	42a5      	cmp	r5, r4
 800089e:	f240 8085 	bls.w	80009ac <__udivmoddi4+0x2b4>
 80008a2:	f1a8 0802 	sub.w	r8, r8, #2
 80008a6:	4464      	add	r4, ip
 80008a8:	1b64      	subs	r4, r4, r5
 80008aa:	b29d      	uxth	r5, r3
 80008ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80008b0:	fb09 4413 	mls	r4, r9, r3, r4
 80008b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80008b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80008bc:	45a6      	cmp	lr, r4
 80008be:	d908      	bls.n	80008d2 <__udivmoddi4+0x1da>
 80008c0:	eb1c 0404 	adds.w	r4, ip, r4
 80008c4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80008c8:	d26c      	bcs.n	80009a4 <__udivmoddi4+0x2ac>
 80008ca:	45a6      	cmp	lr, r4
 80008cc:	d96a      	bls.n	80009a4 <__udivmoddi4+0x2ac>
 80008ce:	3b02      	subs	r3, #2
 80008d0:	4464      	add	r4, ip
 80008d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008d6:	fba3 9502 	umull	r9, r5, r3, r2
 80008da:	eba4 040e 	sub.w	r4, r4, lr
 80008de:	42ac      	cmp	r4, r5
 80008e0:	46c8      	mov	r8, r9
 80008e2:	46ae      	mov	lr, r5
 80008e4:	d356      	bcc.n	8000994 <__udivmoddi4+0x29c>
 80008e6:	d053      	beq.n	8000990 <__udivmoddi4+0x298>
 80008e8:	b156      	cbz	r6, 8000900 <__udivmoddi4+0x208>
 80008ea:	ebb0 0208 	subs.w	r2, r0, r8
 80008ee:	eb64 040e 	sbc.w	r4, r4, lr
 80008f2:	fa04 f707 	lsl.w	r7, r4, r7
 80008f6:	40ca      	lsrs	r2, r1
 80008f8:	40cc      	lsrs	r4, r1
 80008fa:	4317      	orrs	r7, r2
 80008fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000900:	4618      	mov	r0, r3
 8000902:	2100      	movs	r1, #0
 8000904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000908:	f1c3 0120 	rsb	r1, r3, #32
 800090c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000910:	fa20 f201 	lsr.w	r2, r0, r1
 8000914:	fa25 f101 	lsr.w	r1, r5, r1
 8000918:	409d      	lsls	r5, r3
 800091a:	432a      	orrs	r2, r5
 800091c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000920:	fa1f fe8c 	uxth.w	lr, ip
 8000924:	fbb1 f0f7 	udiv	r0, r1, r7
 8000928:	fb07 1510 	mls	r5, r7, r0, r1
 800092c:	0c11      	lsrs	r1, r2, #16
 800092e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000932:	fb00 f50e 	mul.w	r5, r0, lr
 8000936:	428d      	cmp	r5, r1
 8000938:	fa04 f403 	lsl.w	r4, r4, r3
 800093c:	d908      	bls.n	8000950 <__udivmoddi4+0x258>
 800093e:	eb1c 0101 	adds.w	r1, ip, r1
 8000942:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000946:	d22f      	bcs.n	80009a8 <__udivmoddi4+0x2b0>
 8000948:	428d      	cmp	r5, r1
 800094a:	d92d      	bls.n	80009a8 <__udivmoddi4+0x2b0>
 800094c:	3802      	subs	r0, #2
 800094e:	4461      	add	r1, ip
 8000950:	1b49      	subs	r1, r1, r5
 8000952:	b292      	uxth	r2, r2
 8000954:	fbb1 f5f7 	udiv	r5, r1, r7
 8000958:	fb07 1115 	mls	r1, r7, r5, r1
 800095c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000960:	fb05 f10e 	mul.w	r1, r5, lr
 8000964:	4291      	cmp	r1, r2
 8000966:	d908      	bls.n	800097a <__udivmoddi4+0x282>
 8000968:	eb1c 0202 	adds.w	r2, ip, r2
 800096c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000970:	d216      	bcs.n	80009a0 <__udivmoddi4+0x2a8>
 8000972:	4291      	cmp	r1, r2
 8000974:	d914      	bls.n	80009a0 <__udivmoddi4+0x2a8>
 8000976:	3d02      	subs	r5, #2
 8000978:	4462      	add	r2, ip
 800097a:	1a52      	subs	r2, r2, r1
 800097c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000980:	e738      	b.n	80007f4 <__udivmoddi4+0xfc>
 8000982:	4631      	mov	r1, r6
 8000984:	4630      	mov	r0, r6
 8000986:	e708      	b.n	800079a <__udivmoddi4+0xa2>
 8000988:	4639      	mov	r1, r7
 800098a:	e6e6      	b.n	800075a <__udivmoddi4+0x62>
 800098c:	4610      	mov	r0, r2
 800098e:	e6fb      	b.n	8000788 <__udivmoddi4+0x90>
 8000990:	4548      	cmp	r0, r9
 8000992:	d2a9      	bcs.n	80008e8 <__udivmoddi4+0x1f0>
 8000994:	ebb9 0802 	subs.w	r8, r9, r2
 8000998:	eb65 0e0c 	sbc.w	lr, r5, ip
 800099c:	3b01      	subs	r3, #1
 800099e:	e7a3      	b.n	80008e8 <__udivmoddi4+0x1f0>
 80009a0:	4645      	mov	r5, r8
 80009a2:	e7ea      	b.n	800097a <__udivmoddi4+0x282>
 80009a4:	462b      	mov	r3, r5
 80009a6:	e794      	b.n	80008d2 <__udivmoddi4+0x1da>
 80009a8:	4640      	mov	r0, r8
 80009aa:	e7d1      	b.n	8000950 <__udivmoddi4+0x258>
 80009ac:	46d0      	mov	r8, sl
 80009ae:	e77b      	b.n	80008a8 <__udivmoddi4+0x1b0>
 80009b0:	3d02      	subs	r5, #2
 80009b2:	4462      	add	r2, ip
 80009b4:	e732      	b.n	800081c <__udivmoddi4+0x124>
 80009b6:	4608      	mov	r0, r1
 80009b8:	e70a      	b.n	80007d0 <__udivmoddi4+0xd8>
 80009ba:	4464      	add	r4, ip
 80009bc:	3802      	subs	r0, #2
 80009be:	e742      	b.n	8000846 <__udivmoddi4+0x14e>

080009c0 <__aeabi_idiv0>:
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80009c8:	f3bf 8f4f 	dsb	sy
}
 80009cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009ce:	f3bf 8f6f 	isb	sy
}
 80009d2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80009d4:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <SCB_EnableICache+0x48>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80009dc:	f3bf 8f4f 	dsb	sy
}
 80009e0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009e2:	f3bf 8f6f 	isb	sy
}
 80009e6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80009e8:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <SCB_EnableICache+0x48>)
 80009ea:	695b      	ldr	r3, [r3, #20]
 80009ec:	4a07      	ldr	r2, [pc, #28]	; (8000a0c <SCB_EnableICache+0x48>)
 80009ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80009f4:	f3bf 8f4f 	dsb	sy
}
 80009f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009fa:	f3bf 8f6f 	isb	sy
}
 80009fe:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000a16:	4b1f      	ldr	r3, [pc, #124]	; (8000a94 <SCB_EnableDCache+0x84>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000a1e:	f3bf 8f4f 	dsb	sy
}
 8000a22:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000a24:	4b1b      	ldr	r3, [pc, #108]	; (8000a94 <SCB_EnableDCache+0x84>)
 8000a26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000a2a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	0b5b      	lsrs	r3, r3, #13
 8000a30:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000a34:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	08db      	lsrs	r3, r3, #3
 8000a3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a3e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	015a      	lsls	r2, r3, #5
 8000a44:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000a48:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000a4a:	68ba      	ldr	r2, [r7, #8]
 8000a4c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a4e:	4911      	ldr	r1, [pc, #68]	; (8000a94 <SCB_EnableDCache+0x84>)
 8000a50:	4313      	orrs	r3, r2
 8000a52:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	1e5a      	subs	r2, r3, #1
 8000a5a:	60ba      	str	r2, [r7, #8]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d1ef      	bne.n	8000a40 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	1e5a      	subs	r2, r3, #1
 8000a64:	60fa      	str	r2, [r7, #12]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d1e5      	bne.n	8000a36 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000a6a:	f3bf 8f4f 	dsb	sy
}
 8000a6e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000a70:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <SCB_EnableDCache+0x84>)
 8000a72:	695b      	ldr	r3, [r3, #20]
 8000a74:	4a07      	ldr	r2, [pc, #28]	; (8000a94 <SCB_EnableDCache+0x84>)
 8000a76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a7a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a7c:	f3bf 8f4f 	dsb	sy
}
 8000a80:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a82:	f3bf 8f6f 	isb	sy
}
 8000a86:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000a88:	bf00      	nop
 8000a8a:	3714      	adds	r7, #20
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000a9c:	f000 fbf4 	bl	8001288 <MPU_Config>
/* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000aa0:	f7ff ff90 	bl	80009c4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000aa4:	f7ff ffb4 	bl	8000a10 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aa8:	f001 f806 	bl	8001ab8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aac:	f000 f86c 	bl	8000b88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ab0:	f000 fa32 	bl	8000f18 <MX_GPIO_Init>
  MX_LWIP_Init();
 8000ab4:	f005 fed6 	bl	8006864 <MX_LWIP_Init>
  MX_TIM1_Init();
 8000ab8:	f000 f8d4 	bl	8000c64 <MX_TIM1_Init>
  MX_TIM10_Init();
 8000abc:	f000 f98a 	bl	8000dd4 <MX_TIM10_Init>
  MX_USART3_UART_Init();
 8000ac0:	f000 f9fa 	bl	8000eb8 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000ac4:	f000 f922 	bl	8000d0c <MX_TIM2_Init>
  MX_TIM13_Init();
 8000ac8:	f000 f9d2 	bl	8000e70 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  // 2022 Servo Driver
	steeringServo.timerInstance = &htim10;
 8000acc:	4b21      	ldr	r3, [pc, #132]	; (8000b54 <main+0xbc>)
 8000ace:	4a22      	ldr	r2, [pc, #136]	; (8000b58 <main+0xc0>)
 8000ad0:	601a      	str	r2, [r3, #0]
	steeringServo.timerCCRX = &TIM10->CCR1;
 8000ad2:	4b20      	ldr	r3, [pc, #128]	; (8000b54 <main+0xbc>)
 8000ad4:	4a21      	ldr	r2, [pc, #132]	; (8000b5c <main+0xc4>)
 8000ad6:	605a      	str	r2, [r3, #4]
	steeringServo.timerCh = TIM_CHANNEL_1;
 8000ad8:	4b1e      	ldr	r3, [pc, #120]	; (8000b54 <main+0xbc>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	811a      	strh	r2, [r3, #8]
	//	steeringServo.travelOffset = 50;
	steeringServo.travelOffset = 10;
	*/

	// 2022 Servo Driver
	  steeringServo.timerInstance = &htim10;
 8000ade:	4b1d      	ldr	r3, [pc, #116]	; (8000b54 <main+0xbc>)
 8000ae0:	4a1d      	ldr	r2, [pc, #116]	; (8000b58 <main+0xc0>)
 8000ae2:	601a      	str	r2, [r3, #0]
	  steeringServo.timerCCRX = &TIM10->CCR1;
 8000ae4:	4b1b      	ldr	r3, [pc, #108]	; (8000b54 <main+0xbc>)
 8000ae6:	4a1d      	ldr	r2, [pc, #116]	; (8000b5c <main+0xc4>)
 8000ae8:	605a      	str	r2, [r3, #4]
	  steeringServo.timerCh = TIM_CHANNEL_1;
 8000aea:	4b1a      	ldr	r3, [pc, #104]	; (8000b54 <main+0xbc>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	811a      	strh	r2, [r3, #8]
	  steeringServo.timerARR = htim10.Init.Period;
 8000af0:	4b19      	ldr	r3, [pc, #100]	; (8000b58 <main+0xc0>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	b29a      	uxth	r2, r3
 8000af6:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <main+0xbc>)
 8000af8:	815a      	strh	r2, [r3, #10]
	  steeringServo.minPulse = 500;
 8000afa:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <main+0xbc>)
 8000afc:	4a18      	ldr	r2, [pc, #96]	; (8000b60 <main+0xc8>)
 8000afe:	60da      	str	r2, [r3, #12]
	  steeringServo.maxPulse = 2500;
 8000b00:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <main+0xbc>)
 8000b02:	4a18      	ldr	r2, [pc, #96]	; (8000b64 <main+0xcc>)
 8000b04:	611a      	str	r2, [r3, #16]
	  steeringServo.timerPeriod = 20000;
 8000b06:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <main+0xbc>)
 8000b08:	4a17      	ldr	r2, [pc, #92]	; (8000b68 <main+0xd0>)
 8000b0a:	615a      	str	r2, [r3, #20]
	  steeringServo.travelAngle = 270.0;
 8000b0c:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <main+0xbc>)
 8000b0e:	4a17      	ldr	r2, [pc, #92]	; (8000b6c <main+0xd4>)
 8000b10:	625a      	str	r2, [r3, #36]	; 0x24

	  steeringServo.minLimit = 0.0;
 8000b12:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <main+0xbc>)
 8000b14:	f04f 0200 	mov.w	r2, #0
 8000b18:	62da      	str	r2, [r3, #44]	; 0x2c
	  steeringServo.maxLimit = 105.0;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <main+0xbc>)
 8000b1c:	4a14      	ldr	r2, [pc, #80]	; (8000b70 <main+0xd8>)
 8000b1e:	631a      	str	r2, [r3, #48]	; 0x30

	  steeringServo.travelOffset = 50;
 8000b20:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <main+0xbc>)
 8000b22:	4a14      	ldr	r2, [pc, #80]	; (8000b74 <main+0xdc>)
 8000b24:	629a      	str	r2, [r3, #40]	; 0x28

	ugv_servoInitServo(&steeringServo);
 8000b26:	480b      	ldr	r0, [pc, #44]	; (8000b54 <main+0xbc>)
 8000b28:	f005 fdb5 	bl	8006696 <ugv_servoInitServo>
	MotorControl_Init(&ugv_drive_mtr, &htim2, TIM_CHANNEL_1, TIM_CHANNEL_3);
 8000b2c:	2308      	movs	r3, #8
 8000b2e:	2200      	movs	r2, #0
 8000b30:	4911      	ldr	r1, [pc, #68]	; (8000b78 <main+0xe0>)
 8000b32:	4812      	ldr	r0, [pc, #72]	; (8000b7c <main+0xe4>)
 8000b34:	f005 fd87 	bl	8006646 <MotorControl_Init>

  udp_client_connect();
 8000b38:	f000 fafc 	bl	8001134 <udp_client_connect>

  /* Start HAL timer interrupt
  /  Interrupt occurs once every 50ms
  */
  HAL_TIM_Base_Start_IT(&htim13);
 8000b3c:	4810      	ldr	r0, [pc, #64]	; (8000b80 <main+0xe8>)
 8000b3e:	f003 ff67 	bl	8004a10 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  ethernetif_input(&gnetif);
 8000b42:	4810      	ldr	r0, [pc, #64]	; (8000b84 <main+0xec>)
 8000b44:	f006 f91e 	bl	8006d84 <ethernetif_input>
	  ethernet_link_check_state(&gnetif);
 8000b48:	480e      	ldr	r0, [pc, #56]	; (8000b84 <main+0xec>)
 8000b4a:	f006 fa99 	bl	8007080 <ethernet_link_check_state>
	  //udpClient
//	  gnetif.input()
	  //ethernet_input(p, netif)
	  sys_check_timeouts();
 8000b4e:	f00d fbe5 	bl	800e31c <sys_check_timeouts>
	  ethernetif_input(&gnetif);
 8000b52:	e7f6      	b.n	8000b42 <main+0xaa>
 8000b54:	20000508 	.word	0x20000508
 8000b58:	200003e8 	.word	0x200003e8
 8000b5c:	40014434 	.word	0x40014434
 8000b60:	43fa0000 	.word	0x43fa0000
 8000b64:	451c4000 	.word	0x451c4000
 8000b68:	469c4000 	.word	0x469c4000
 8000b6c:	43870000 	.word	0x43870000
 8000b70:	42d20000 	.word	0x42d20000
 8000b74:	42480000 	.word	0x42480000
 8000b78:	2000039c 	.word	0x2000039c
 8000b7c:	2000053c 	.word	0x2000053c
 8000b80:	20000434 	.word	0x20000434
 8000b84:	200005c0 	.word	0x200005c0

08000b88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b094      	sub	sp, #80	; 0x50
 8000b8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b8e:	f107 031c 	add.w	r3, r7, #28
 8000b92:	2234      	movs	r2, #52	; 0x34
 8000b94:	2100      	movs	r1, #0
 8000b96:	4618      	mov	r0, r3
 8000b98:	f011 f92b 	bl	8011df2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b9c:	f107 0308 	add.w	r3, r7, #8
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bac:	4b2b      	ldr	r3, [pc, #172]	; (8000c5c <SystemClock_Config+0xd4>)
 8000bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb0:	4a2a      	ldr	r2, [pc, #168]	; (8000c5c <SystemClock_Config+0xd4>)
 8000bb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb8:	4b28      	ldr	r3, [pc, #160]	; (8000c5c <SystemClock_Config+0xd4>)
 8000bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bc4:	4b26      	ldr	r3, [pc, #152]	; (8000c60 <SystemClock_Config+0xd8>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a25      	ldr	r2, [pc, #148]	; (8000c60 <SystemClock_Config+0xd8>)
 8000bca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bce:	6013      	str	r3, [r2, #0]
 8000bd0:	4b23      	ldr	r3, [pc, #140]	; (8000c60 <SystemClock_Config+0xd8>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bd8:	603b      	str	r3, [r7, #0]
 8000bda:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000be0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000be4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be6:	2302      	movs	r3, #2
 8000be8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bf0:	2308      	movs	r3, #8
 8000bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000bf4:	23d8      	movs	r3, #216	; 0xd8
 8000bf6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c00:	2302      	movs	r3, #2
 8000c02:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c04:	f107 031c 	add.w	r3, r7, #28
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f002 fdaf 	bl	800376c <HAL_RCC_OscConfig>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000c14:	f000 fb66 	bl	80012e4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c18:	f002 fd58 	bl	80036cc <HAL_PWREx_EnableOverDrive>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000c22:	f000 fb5f 	bl	80012e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c26:	230f      	movs	r3, #15
 8000c28:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c32:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c3c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000c3e:	f107 0308 	add.w	r3, r7, #8
 8000c42:	2107      	movs	r1, #7
 8000c44:	4618      	mov	r0, r3
 8000c46:	f003 f83f 	bl	8003cc8 <HAL_RCC_ClockConfig>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000c50:	f000 fb48 	bl	80012e4 <Error_Handler>
  }
}
 8000c54:	bf00      	nop
 8000c56:	3750      	adds	r7, #80	; 0x50
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40007000 	.word	0x40007000

08000c64 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b088      	sub	sp, #32
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c6a:	f107 0310 	add.w	r3, r7, #16
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]
 8000c76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c82:	4b20      	ldr	r3, [pc, #128]	; (8000d04 <MX_TIM1_Init+0xa0>)
 8000c84:	4a20      	ldr	r2, [pc, #128]	; (8000d08 <MX_TIM1_Init+0xa4>)
 8000c86:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10800;
 8000c88:	4b1e      	ldr	r3, [pc, #120]	; (8000d04 <MX_TIM1_Init+0xa0>)
 8000c8a:	f642 2230 	movw	r2, #10800	; 0x2a30
 8000c8e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c90:	4b1c      	ldr	r3, [pc, #112]	; (8000d04 <MX_TIM1_Init+0xa0>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8000c96:	4b1b      	ldr	r3, [pc, #108]	; (8000d04 <MX_TIM1_Init+0xa0>)
 8000c98:	f242 7210 	movw	r2, #10000	; 0x2710
 8000c9c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c9e:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <MX_TIM1_Init+0xa0>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ca4:	4b17      	ldr	r3, [pc, #92]	; (8000d04 <MX_TIM1_Init+0xa0>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000caa:	4b16      	ldr	r3, [pc, #88]	; (8000d04 <MX_TIM1_Init+0xa0>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000cb0:	4814      	ldr	r0, [pc, #80]	; (8000d04 <MX_TIM1_Init+0xa0>)
 8000cb2:	f003 fe55 	bl	8004960 <HAL_TIM_Base_Init>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000cbc:	f000 fb12 	bl	80012e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cc6:	f107 0310 	add.w	r3, r7, #16
 8000cca:	4619      	mov	r1, r3
 8000ccc:	480d      	ldr	r0, [pc, #52]	; (8000d04 <MX_TIM1_Init+0xa0>)
 8000cce:	f004 fa85 	bl	80051dc <HAL_TIM_ConfigClockSource>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000cd8:	f000 fb04 	bl	80012e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ce8:	1d3b      	adds	r3, r7, #4
 8000cea:	4619      	mov	r1, r3
 8000cec:	4805      	ldr	r0, [pc, #20]	; (8000d04 <MX_TIM1_Init+0xa0>)
 8000cee:	f004 ff31 	bl	8005b54 <HAL_TIMEx_MasterConfigSynchronization>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000cf8:	f000 faf4 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000cfc:	bf00      	nop
 8000cfe:	3720      	adds	r7, #32
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000350 	.word	0x20000350
 8000d08:	40010000 	.word	0x40010000

08000d0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08a      	sub	sp, #40	; 0x28
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d12:	f107 031c 	add.w	r3, r7, #28
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d1e:	463b      	mov	r3, r7
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
 8000d2c:	615a      	str	r2, [r3, #20]
 8000d2e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d30:	4b27      	ldr	r3, [pc, #156]	; (8000dd0 <MX_TIM2_Init+0xc4>)
 8000d32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8000d38:	4b25      	ldr	r3, [pc, #148]	; (8000dd0 <MX_TIM2_Init+0xc4>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d3e:	4b24      	ldr	r3, [pc, #144]	; (8000dd0 <MX_TIM2_Init+0xc4>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 32767;
 8000d44:	4b22      	ldr	r3, [pc, #136]	; (8000dd0 <MX_TIM2_Init+0xc4>)
 8000d46:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000d4a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d4c:	4b20      	ldr	r3, [pc, #128]	; (8000dd0 <MX_TIM2_Init+0xc4>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d52:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <MX_TIM2_Init+0xc4>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d58:	481d      	ldr	r0, [pc, #116]	; (8000dd0 <MX_TIM2_Init+0xc4>)
 8000d5a:	f003 fed1 	bl	8004b00 <HAL_TIM_PWM_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000d64:	f000 fabe 	bl	80012e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d70:	f107 031c 	add.w	r3, r7, #28
 8000d74:	4619      	mov	r1, r3
 8000d76:	4816      	ldr	r0, [pc, #88]	; (8000dd0 <MX_TIM2_Init+0xc4>)
 8000d78:	f004 feec 	bl	8005b54 <HAL_TIMEx_MasterConfigSynchronization>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000d82:	f000 faaf 	bl	80012e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d86:	2360      	movs	r3, #96	; 0x60
 8000d88:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d96:	463b      	mov	r3, r7
 8000d98:	2200      	movs	r2, #0
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	480c      	ldr	r0, [pc, #48]	; (8000dd0 <MX_TIM2_Init+0xc4>)
 8000d9e:	f004 f909 	bl	8004fb4 <HAL_TIM_PWM_ConfigChannel>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000da8:	f000 fa9c 	bl	80012e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000dac:	463b      	mov	r3, r7
 8000dae:	2208      	movs	r2, #8
 8000db0:	4619      	mov	r1, r3
 8000db2:	4807      	ldr	r0, [pc, #28]	; (8000dd0 <MX_TIM2_Init+0xc4>)
 8000db4:	f004 f8fe 	bl	8004fb4 <HAL_TIM_PWM_ConfigChannel>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000dbe:	f000 fa91 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000dc2:	4803      	ldr	r0, [pc, #12]	; (8000dd0 <MX_TIM2_Init+0xc4>)
 8000dc4:	f000 fb3c 	bl	8001440 <HAL_TIM_MspPostInit>

}
 8000dc8:	bf00      	nop
 8000dca:	3728      	adds	r7, #40	; 0x28
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	2000039c 	.word	0x2000039c

08000dd4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b088      	sub	sp, #32
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
 8000de8:	615a      	str	r2, [r3, #20]
 8000dea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000dec:	4b1e      	ldr	r3, [pc, #120]	; (8000e68 <MX_TIM10_Init+0x94>)
 8000dee:	4a1f      	ldr	r2, [pc, #124]	; (8000e6c <MX_TIM10_Init+0x98>)
 8000df0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 71;
 8000df2:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <MX_TIM10_Init+0x94>)
 8000df4:	2247      	movs	r2, #71	; 0x47
 8000df6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df8:	4b1b      	ldr	r3, [pc, #108]	; (8000e68 <MX_TIM10_Init+0x94>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 29999;
 8000dfe:	4b1a      	ldr	r3, [pc, #104]	; (8000e68 <MX_TIM10_Init+0x94>)
 8000e00:	f247 522f 	movw	r2, #29999	; 0x752f
 8000e04:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e06:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <MX_TIM10_Init+0x94>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e0c:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <MX_TIM10_Init+0x94>)
 8000e0e:	2280      	movs	r2, #128	; 0x80
 8000e10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000e12:	4815      	ldr	r0, [pc, #84]	; (8000e68 <MX_TIM10_Init+0x94>)
 8000e14:	f003 fda4 	bl	8004960 <HAL_TIM_Base_Init>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8000e1e:	f000 fa61 	bl	80012e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8000e22:	4811      	ldr	r0, [pc, #68]	; (8000e68 <MX_TIM10_Init+0x94>)
 8000e24:	f003 fe6c 	bl	8004b00 <HAL_TIM_PWM_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8000e2e:	f000 fa59 	bl	80012e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e32:	2360      	movs	r3, #96	; 0x60
 8000e34:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e42:	1d3b      	adds	r3, r7, #4
 8000e44:	2200      	movs	r2, #0
 8000e46:	4619      	mov	r1, r3
 8000e48:	4807      	ldr	r0, [pc, #28]	; (8000e68 <MX_TIM10_Init+0x94>)
 8000e4a:	f004 f8b3 	bl	8004fb4 <HAL_TIM_PWM_ConfigChannel>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8000e54:	f000 fa46 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8000e58:	4803      	ldr	r0, [pc, #12]	; (8000e68 <MX_TIM10_Init+0x94>)
 8000e5a:	f000 faf1 	bl	8001440 <HAL_TIM_MspPostInit>

}
 8000e5e:	bf00      	nop
 8000e60:	3720      	adds	r7, #32
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	200003e8 	.word	0x200003e8
 8000e6c:	40014400 	.word	0x40014400

08000e70 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000e74:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <MX_TIM13_Init+0x40>)
 8000e76:	4a0f      	ldr	r2, [pc, #60]	; (8000eb4 <MX_TIM13_Init+0x44>)
 8000e78:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 2700;
 8000e7a:	4b0d      	ldr	r3, [pc, #52]	; (8000eb0 <MX_TIM13_Init+0x40>)
 8000e7c:	f640 228c 	movw	r2, #2700	; 0xa8c
 8000e80:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e82:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <MX_TIM13_Init+0x40>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 499;
 8000e88:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <MX_TIM13_Init+0x40>)
 8000e8a:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000e8e:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e90:	4b07      	ldr	r3, [pc, #28]	; (8000eb0 <MX_TIM13_Init+0x40>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <MX_TIM13_Init+0x40>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000e9c:	4804      	ldr	r0, [pc, #16]	; (8000eb0 <MX_TIM13_Init+0x40>)
 8000e9e:	f003 fd5f 	bl	8004960 <HAL_TIM_Base_Init>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8000ea8:	f000 fa1c 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000434 	.word	0x20000434
 8000eb4:	40001c00 	.word	0x40001c00

08000eb8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ebc:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <MX_USART3_UART_Init+0x58>)
 8000ebe:	4a15      	ldr	r2, [pc, #84]	; (8000f14 <MX_USART3_UART_Init+0x5c>)
 8000ec0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ec2:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <MX_USART3_UART_Init+0x58>)
 8000ec4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ec8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000eca:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <MX_USART3_UART_Init+0x58>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <MX_USART3_UART_Init+0x58>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <MX_USART3_UART_Init+0x58>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000edc:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <MX_USART3_UART_Init+0x58>)
 8000ede:	220c      	movs	r2, #12
 8000ee0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ee2:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <MX_USART3_UART_Init+0x58>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee8:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <MX_USART3_UART_Init+0x58>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eee:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <MX_USART3_UART_Init+0x58>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <MX_USART3_UART_Init+0x58>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000efa:	4805      	ldr	r0, [pc, #20]	; (8000f10 <MX_USART3_UART_Init+0x58>)
 8000efc:	f004 fed6 	bl	8005cac <HAL_UART_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000f06:	f000 f9ed 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000480 	.word	0x20000480
 8000f14:	40004800 	.word	0x40004800

08000f18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08c      	sub	sp, #48	; 0x30
 8000f1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1e:	f107 031c 	add.w	r3, r7, #28
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]
 8000f2a:	60da      	str	r2, [r3, #12]
 8000f2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f2e:	4b56      	ldr	r3, [pc, #344]	; (8001088 <MX_GPIO_Init+0x170>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a55      	ldr	r2, [pc, #340]	; (8001088 <MX_GPIO_Init+0x170>)
 8000f34:	f043 0304 	orr.w	r3, r3, #4
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b53      	ldr	r3, [pc, #332]	; (8001088 <MX_GPIO_Init+0x170>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f003 0304 	and.w	r3, r3, #4
 8000f42:	61bb      	str	r3, [r7, #24]
 8000f44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f46:	4b50      	ldr	r3, [pc, #320]	; (8001088 <MX_GPIO_Init+0x170>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a4f      	ldr	r2, [pc, #316]	; (8001088 <MX_GPIO_Init+0x170>)
 8000f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b4d      	ldr	r3, [pc, #308]	; (8001088 <MX_GPIO_Init+0x170>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f5a:	617b      	str	r3, [r7, #20]
 8000f5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5e:	4b4a      	ldr	r3, [pc, #296]	; (8001088 <MX_GPIO_Init+0x170>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a49      	ldr	r2, [pc, #292]	; (8001088 <MX_GPIO_Init+0x170>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b47      	ldr	r3, [pc, #284]	; (8001088 <MX_GPIO_Init+0x170>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	613b      	str	r3, [r7, #16]
 8000f74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f76:	4b44      	ldr	r3, [pc, #272]	; (8001088 <MX_GPIO_Init+0x170>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a43      	ldr	r2, [pc, #268]	; (8001088 <MX_GPIO_Init+0x170>)
 8000f7c:	f043 0302 	orr.w	r3, r3, #2
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b41      	ldr	r3, [pc, #260]	; (8001088 <MX_GPIO_Init+0x170>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0302 	and.w	r3, r3, #2
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f8e:	4b3e      	ldr	r3, [pc, #248]	; (8001088 <MX_GPIO_Init+0x170>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a3d      	ldr	r2, [pc, #244]	; (8001088 <MX_GPIO_Init+0x170>)
 8000f94:	f043 0308 	orr.w	r3, r3, #8
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b3b      	ldr	r3, [pc, #236]	; (8001088 <MX_GPIO_Init+0x170>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0308 	and.w	r3, r3, #8
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fa6:	4b38      	ldr	r3, [pc, #224]	; (8001088 <MX_GPIO_Init+0x170>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a37      	ldr	r2, [pc, #220]	; (8001088 <MX_GPIO_Init+0x170>)
 8000fac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b35      	ldr	r3, [pc, #212]	; (8001088 <MX_GPIO_Init+0x170>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f244 2181 	movw	r1, #17025	; 0x4281
 8000fc4:	4831      	ldr	r0, [pc, #196]	; (800108c <MX_GPIO_Init+0x174>)
 8000fc6:	f002 fb4d 	bl	8003664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2140      	movs	r1, #64	; 0x40
 8000fce:	4830      	ldr	r0, [pc, #192]	; (8001090 <MX_GPIO_Init+0x178>)
 8000fd0:	f002 fb48 	bl	8003664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000fd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fda:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000fe4:	f107 031c 	add.w	r3, r7, #28
 8000fe8:	4619      	mov	r1, r3
 8000fea:	482a      	ldr	r0, [pc, #168]	; (8001094 <MX_GPIO_Init+0x17c>)
 8000fec:	f002 f98e 	bl	800330c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin PB9 */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin|GPIO_PIN_9;
 8000ff0:	f244 2381 	movw	r3, #17025	; 0x4281
 8000ff4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffe:	2300      	movs	r3, #0
 8001000:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001002:	f107 031c 	add.w	r3, r7, #28
 8001006:	4619      	mov	r1, r3
 8001008:	4820      	ldr	r0, [pc, #128]	; (800108c <MX_GPIO_Init+0x174>)
 800100a:	f002 f97f 	bl	800330c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800100e:	2340      	movs	r3, #64	; 0x40
 8001010:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001012:	2301      	movs	r3, #1
 8001014:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2300      	movs	r3, #0
 800101c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800101e:	f107 031c 	add.w	r3, r7, #28
 8001022:	4619      	mov	r1, r3
 8001024:	481a      	ldr	r0, [pc, #104]	; (8001090 <MX_GPIO_Init+0x178>)
 8001026:	f002 f971 	bl	800330c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800102a:	2380      	movs	r3, #128	; 0x80
 800102c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800102e:	2300      	movs	r3, #0
 8001030:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001036:	f107 031c 	add.w	r3, r7, #28
 800103a:	4619      	mov	r1, r3
 800103c:	4814      	ldr	r0, [pc, #80]	; (8001090 <MX_GPIO_Init+0x178>)
 800103e:	f002 f965 	bl	800330c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001042:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001046:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001048:	2302      	movs	r3, #2
 800104a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001050:	2303      	movs	r3, #3
 8001052:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001054:	230a      	movs	r3, #10
 8001056:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001058:	f107 031c 	add.w	r3, r7, #28
 800105c:	4619      	mov	r1, r3
 800105e:	480e      	ldr	r0, [pc, #56]	; (8001098 <MX_GPIO_Init+0x180>)
 8001060:	f002 f954 	bl	800330c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001064:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001068:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800106a:	2300      	movs	r3, #0
 800106c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001072:	f107 031c 	add.w	r3, r7, #28
 8001076:	4619      	mov	r1, r3
 8001078:	4807      	ldr	r0, [pc, #28]	; (8001098 <MX_GPIO_Init+0x180>)
 800107a:	f002 f947 	bl	800330c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800107e:	bf00      	nop
 8001080:	3730      	adds	r7, #48	; 0x30
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40023800 	.word	0x40023800
 800108c:	40020400 	.word	0x40020400
 8001090:	40021800 	.word	0x40021800
 8001094:	40020800 	.word	0x40020800
 8001098:	40020000 	.word	0x40020000
 800109c:	00000000 	.word	0x00000000

080010a0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80010a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010ac:	481c      	ldr	r0, [pc, #112]	; (8001120 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80010ae:	f002 faf2 	bl	8003696 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 80010b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010b6:	481a      	ldr	r0, [pc, #104]	; (8001120 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80010b8:	f002 faed 	bl	8003696 <HAL_GPIO_TogglePin>
	static const float Kp_heading = 2.0;  //Kp value for heading controller


	steer_val =  Kp_heading * heading_error;
 80010bc:	4b19      	ldr	r3, [pc, #100]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80010be:	ed93 7a00 	vldr	s14, [r3]
 80010c2:	4b19      	ldr	r3, [pc, #100]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80010c4:	edd3 7a00 	vldr	s15, [r3]
 80010c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010cc:	4b17      	ldr	r3, [pc, #92]	; (800112c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80010ce:	edc3 7a00 	vstr	s15, [r3]

	ugv_servoSetAngle(&steeringServo, steeringServo.maxLimit *steer_val + 0.224*steeringServo.maxLimit);
 80010d2:	4b17      	ldr	r3, [pc, #92]	; (8001130 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80010d4:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80010d8:	4b14      	ldr	r3, [pc, #80]	; (800112c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80010da:	edd3 7a00 	vldr	s15, [r3]
 80010de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010e2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80010e6:	4b12      	ldr	r3, [pc, #72]	; (8001130 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80010e8:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80010ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010f0:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8001118 <HAL_TIM_PeriodElapsedCallback+0x78>
 80010f4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80010f8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80010fc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001100:	eeb0 0a67 	vmov.f32	s0, s15
 8001104:	480a      	ldr	r0, [pc, #40]	; (8001130 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001106:	f005 fb0a 	bl	800671e <ugv_servoSetAngle>

	// Timer callback meant to send data from stm -> Rpi in a periodic manner

//	udp_client_send();
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	f3af 8000 	nop.w
 8001118:	3126e979 	.word	0x3126e979
 800111c:	3fccac08 	.word	0x3fccac08
 8001120:	40020400 	.word	0x40020400
 8001124:	080166f4 	.word	0x080166f4
 8001128:	2000054c 	.word	0x2000054c
 800112c:	20000544 	.word	0x20000544
 8001130:	20000508 	.word	0x20000508

08001134 <udp_client_connect>:

void udp_client_connect()
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
	err_t err;

	// Create a new UDP control block
	// Need to check for null return
	upcb = udp_new();
 800113a:	f00d fc09 	bl	800e950 <udp_new>
 800113e:	4603      	mov	r3, r0
 8001140:	4a15      	ldr	r2, [pc, #84]	; (8001198 <udp_client_connect+0x64>)
 8001142:	6013      	str	r3, [r2, #0]

	// Bind control block to module's IP address and port
	// Static IP address: 192.168.2.xxx
	ip_addr_t my_ip;
//	IP_ADDR4(&my_ip, 192, 168, 5, 21); 	//STM ip when connected to RPI 5
	IP_ADDR4(&my_ip, 192, 168, 20, 21); //STM ip when connected to Jetson Orin
 8001144:	4b15      	ldr	r3, [pc, #84]	; (800119c <udp_client_connect+0x68>)
 8001146:	60bb      	str	r3, [r7, #8]
//	IP_ADDR4(&my_ip, 192, 168, 2, 21); 	// STM ip when connected to linux desktop

	// Binds udp protocol control block to a local IP address
	// Arbitrary port # selection: 8
	udp_bind(upcb, &my_ip, 8);
 8001148:	4b13      	ldr	r3, [pc, #76]	; (8001198 <udp_client_connect+0x64>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f107 0108 	add.w	r1, r7, #8
 8001150:	2208      	movs	r2, #8
 8001152:	4618      	mov	r0, r3
 8001154:	f00d fae6 	bl	800e724 <udp_bind>
	// Configure destination IP address
	// Host ip address: 192.168.2.5
	// Arbitrary port # selection: 12345
	ip_addr_t DestIPaddr;
//	IP_ADDR4(&DestIPaddr, 192, 168, 5, 5);  //RPI 5 host ip address
	IP_ADDR4(&DestIPaddr, 192, 168, 20, 5);  //Jetson Orin Nano host ip address
 8001158:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <udp_client_connect+0x6c>)
 800115a:	607b      	str	r3, [r7, #4]
//	IP_ADDR4(&DestIPaddr, 192, 168, 2, 5);  //Desktop Host ip address
	err = udp_connect(upcb, &DestIPaddr, 12345);
 800115c:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <udp_client_connect+0x64>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	1d39      	adds	r1, r7, #4
 8001162:	f243 0239 	movw	r2, #12345	; 0x3039
 8001166:	4618      	mov	r0, r3
 8001168:	f00d fb64 	bl	800e834 <udp_connect>
 800116c:	4603      	mov	r3, r0
 800116e:	73fb      	strb	r3, [r7, #15]

	if (err == HAL_OK)
 8001170:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d10a      	bne.n	800118e <udp_client_connect+0x5a>
	{
		// Blue LED
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8001178:	2180      	movs	r1, #128	; 0x80
 800117a:	480a      	ldr	r0, [pc, #40]	; (80011a4 <udp_client_connect+0x70>)
 800117c:	f002 fa8b 	bl	8003696 <HAL_GPIO_TogglePin>
		// Set a receive callback for the upcb when server sends data to client
		udp_recv(upcb, udp_receive_callback, NULL);
 8001180:	4b05      	ldr	r3, [pc, #20]	; (8001198 <udp_client_connect+0x64>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2200      	movs	r2, #0
 8001186:	4908      	ldr	r1, [pc, #32]	; (80011a8 <udp_client_connect+0x74>)
 8001188:	4618      	mov	r0, r3
 800118a:	f00d fbc1 	bl	800e910 <udp_recv>

	}
}
 800118e:	bf00      	nop
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000550 	.word	0x20000550
 800119c:	1514a8c0 	.word	0x1514a8c0
 80011a0:	0514a8c0 	.word	0x0514a8c0
 80011a4:	40020400 	.word	0x40020400
 80011a8:	080011ad 	.word	0x080011ad

080011ac <udp_receive_callback>:
	}
}

void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p,
		const ip_addr_t *addr, u16_t port)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b092      	sub	sp, #72	; 0x48
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
 80011b8:	603b      	str	r3, [r7, #0]
	// Copy data from the pbuf
	strncpy(buffer, (char *)p->payload, p->len);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6859      	ldr	r1, [r3, #4]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	895b      	ldrh	r3, [r3, #10]
 80011c2:	461a      	mov	r2, r3
 80011c4:	482a      	ldr	r0, [pc, #168]	; (8001270 <udp_receive_callback+0xc4>)
 80011c6:	f010 fe2e 	bl	8011e26 <strncpy>

	//Parse Input
	uint8_t data_index = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	float drive_vals[10] = {0};
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	2228      	movs	r2, #40	; 0x28
 80011d6:	2100      	movs	r1, #0
 80011d8:	4618      	mov	r0, r3
 80011da:	f010 fe0a 	bl	8011df2 <memset>
	char *buffer_data = strtok(buffer, ",");
 80011de:	4925      	ldr	r1, [pc, #148]	; (8001274 <udp_receive_callback+0xc8>)
 80011e0:	4823      	ldr	r0, [pc, #140]	; (8001270 <udp_receive_callback+0xc4>)
 80011e2:	f010 fe33 	bl	8011e4c <strtok>
 80011e6:	6438      	str	r0, [r7, #64]	; 0x40
	while (buffer_data != NULL && data_index < 10)
 80011e8:	e026      	b.n	8001238 <udp_receive_callback+0x8c>
	{
		float conv_check = atof(buffer_data);
 80011ea:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80011ec:	f00f febe 	bl	8010f6c <atof>
 80011f0:	eeb0 7b40 	vmov.f64	d7, d0
 80011f4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011f8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		//Make data was converted properly
		if (conv_check == 0)
 80011fc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001200:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001208:	d104      	bne.n	8001214 <udp_receive_callback+0x68>
		{
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800120a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800120e:	481a      	ldr	r0, [pc, #104]	; (8001278 <udp_receive_callback+0xcc>)
 8001210:	f002 fa41 	bl	8003696 <HAL_GPIO_TogglePin>
		}

		drive_vals[data_index] = conv_check;
 8001214:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	3348      	adds	r3, #72	; 0x48
 800121c:	443b      	add	r3, r7
 800121e:	3b34      	subs	r3, #52	; 0x34
 8001220:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001222:	601a      	str	r2, [r3, #0]

		++data_index;
 8001224:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001228:	3301      	adds	r3, #1
 800122a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		buffer_data = strtok(NULL, ",");
 800122e:	4911      	ldr	r1, [pc, #68]	; (8001274 <udp_receive_callback+0xc8>)
 8001230:	2000      	movs	r0, #0
 8001232:	f010 fe0b 	bl	8011e4c <strtok>
 8001236:	6438      	str	r0, [r7, #64]	; 0x40
	while (buffer_data != NULL && data_index < 10)
 8001238:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800123a:	2b00      	cmp	r3, #0
 800123c:	d003      	beq.n	8001246 <udp_receive_callback+0x9a>
 800123e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001242:	2b09      	cmp	r3, #9
 8001244:	d9d1      	bls.n	80011ea <udp_receive_callback+0x3e>
	}



	// Free recieve pbuf;
	pbuf_free(p);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f007 fb76 	bl	8008938 <pbuf_free>

	velocity_val = drive_vals[0];
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	4a0b      	ldr	r2, [pc, #44]	; (800127c <udp_receive_callback+0xd0>)
 8001250:	6013      	str	r3, [r2, #0]
	steer_val = drive_vals[1];
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	4a0a      	ldr	r2, [pc, #40]	; (8001280 <udp_receive_callback+0xd4>)
 8001256:	6013      	str	r3, [r2, #0]
	heading_error = drive_vals[2]; //Receive Heading Error
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	4a0a      	ldr	r2, [pc, #40]	; (8001284 <udp_receive_callback+0xd8>)
 800125c:	6013      	str	r3, [r2, #0]
	// Set Steering Angle for Servo
//	ugv_servoSetAngle(&steeringServo, steeringServo.maxLimit *steer_val + 0.224*steeringServo.maxLimit);
	//ugv_servoSetAngle(&steeringServo, drive_vals[1]);
//	MotorControl_SetSpeed(&ugv_drive_mtr, &htim2, velocity_val);

	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800125e:	2101      	movs	r1, #1
 8001260:	4805      	ldr	r0, [pc, #20]	; (8001278 <udp_receive_callback+0xcc>)
 8001262:	f002 fa18 	bl	8003696 <HAL_GPIO_TogglePin>
}
 8001266:	bf00      	nop
 8001268:	3748      	adds	r7, #72	; 0x48
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000554 	.word	0x20000554
 8001274:	08013d10 	.word	0x08013d10
 8001278:	40020400 	.word	0x40020400
 800127c:	20000548 	.word	0x20000548
 8001280:	20000544 	.word	0x20000544
 8001284:	2000054c 	.word	0x2000054c

08001288 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800128e:	463b      	mov	r3, r7
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800129a:	f000 fda9 	bl	8001df0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800129e:	2301      	movs	r3, #1
 80012a0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x2007c000;
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <MPU_Config+0x58>)
 80012a8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 80012aa:	230d      	movs	r3, #13
 80012ac:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80012b2:	2301      	movs	r3, #1
 80012b4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80012b6:	2303      	movs	r3, #3
 80012b8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80012ba:	2301      	movs	r3, #1
 80012bc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80012be:	2301      	movs	r3, #1
 80012c0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80012ca:	463b      	mov	r3, r7
 80012cc:	4618      	mov	r0, r3
 80012ce:	f000 fdc7 	bl	8001e60 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80012d2:	2004      	movs	r0, #4
 80012d4:	f000 fda4 	bl	8001e20 <HAL_MPU_Enable>

}
 80012d8:	bf00      	nop
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	2007c000 	.word	0x2007c000

080012e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80012e8:	b672      	cpsid	i
}
 80012ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012ec:	e7fe      	b.n	80012ec <Error_Handler+0x8>
	...

080012f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80012f6:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <HAL_MspInit+0x44>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	4a0e      	ldr	r2, [pc, #56]	; (8001334 <HAL_MspInit+0x44>)
 80012fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001300:	6413      	str	r3, [r2, #64]	; 0x40
 8001302:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <HAL_MspInit+0x44>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130e:	4b09      	ldr	r3, [pc, #36]	; (8001334 <HAL_MspInit+0x44>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001312:	4a08      	ldr	r2, [pc, #32]	; (8001334 <HAL_MspInit+0x44>)
 8001314:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001318:	6453      	str	r3, [r2, #68]	; 0x44
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <HAL_MspInit+0x44>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001322:	603b      	str	r3, [r7, #0]
 8001324:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	40023800 	.word	0x40023800

08001338 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a2b      	ldr	r2, [pc, #172]	; (80013f4 <HAL_TIM_Base_MspInit+0xbc>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d11c      	bne.n	8001384 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800134a:	4b2b      	ldr	r3, [pc, #172]	; (80013f8 <HAL_TIM_Base_MspInit+0xc0>)
 800134c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134e:	4a2a      	ldr	r2, [pc, #168]	; (80013f8 <HAL_TIM_Base_MspInit+0xc0>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	6453      	str	r3, [r2, #68]	; 0x44
 8001356:	4b28      	ldr	r3, [pc, #160]	; (80013f8 <HAL_TIM_Base_MspInit+0xc0>)
 8001358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	617b      	str	r3, [r7, #20]
 8001360:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001362:	2200      	movs	r2, #0
 8001364:	2100      	movs	r1, #0
 8001366:	2018      	movs	r0, #24
 8001368:	f000 fd0b 	bl	8001d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800136c:	2018      	movs	r0, #24
 800136e:	f000 fd24 	bl	8001dba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	2100      	movs	r1, #0
 8001376:	2019      	movs	r0, #25
 8001378:	f000 fd03 	bl	8001d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800137c:	2019      	movs	r0, #25
 800137e:	f000 fd1c 	bl	8001dba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8001382:	e032      	b.n	80013ea <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM10)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a1c      	ldr	r2, [pc, #112]	; (80013fc <HAL_TIM_Base_MspInit+0xc4>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d114      	bne.n	80013b8 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800138e:	4b1a      	ldr	r3, [pc, #104]	; (80013f8 <HAL_TIM_Base_MspInit+0xc0>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001392:	4a19      	ldr	r2, [pc, #100]	; (80013f8 <HAL_TIM_Base_MspInit+0xc0>)
 8001394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001398:	6453      	str	r3, [r2, #68]	; 0x44
 800139a:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <HAL_TIM_Base_MspInit+0xc0>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a2:	613b      	str	r3, [r7, #16]
 80013a4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2100      	movs	r1, #0
 80013aa:	2019      	movs	r0, #25
 80013ac:	f000 fce9 	bl	8001d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80013b0:	2019      	movs	r0, #25
 80013b2:	f000 fd02 	bl	8001dba <HAL_NVIC_EnableIRQ>
}
 80013b6:	e018      	b.n	80013ea <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM13)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a10      	ldr	r2, [pc, #64]	; (8001400 <HAL_TIM_Base_MspInit+0xc8>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d113      	bne.n	80013ea <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80013c2:	4b0d      	ldr	r3, [pc, #52]	; (80013f8 <HAL_TIM_Base_MspInit+0xc0>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	4a0c      	ldr	r2, [pc, #48]	; (80013f8 <HAL_TIM_Base_MspInit+0xc0>)
 80013c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013cc:	6413      	str	r3, [r2, #64]	; 0x40
 80013ce:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <HAL_TIM_Base_MspInit+0xc0>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80013da:	2200      	movs	r2, #0
 80013dc:	2100      	movs	r1, #0
 80013de:	202c      	movs	r0, #44	; 0x2c
 80013e0:	f000 fccf 	bl	8001d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80013e4:	202c      	movs	r0, #44	; 0x2c
 80013e6:	f000 fce8 	bl	8001dba <HAL_NVIC_EnableIRQ>
}
 80013ea:	bf00      	nop
 80013ec:	3718      	adds	r7, #24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40010000 	.word	0x40010000
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40014400 	.word	0x40014400
 8001400:	40001c00 	.word	0x40001c00

08001404 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001414:	d10b      	bne.n	800142e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001416:	4b09      	ldr	r3, [pc, #36]	; (800143c <HAL_TIM_PWM_MspInit+0x38>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	4a08      	ldr	r2, [pc, #32]	; (800143c <HAL_TIM_PWM_MspInit+0x38>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6413      	str	r3, [r2, #64]	; 0x40
 8001422:	4b06      	ldr	r3, [pc, #24]	; (800143c <HAL_TIM_PWM_MspInit+0x38>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800142e:	bf00      	nop
 8001430:	3714      	adds	r7, #20
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40023800 	.word	0x40023800

08001440 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08a      	sub	sp, #40	; 0x28
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001460:	d139      	bne.n	80014d6 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001462:	4b30      	ldr	r3, [pc, #192]	; (8001524 <HAL_TIM_MspPostInit+0xe4>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a2f      	ldr	r2, [pc, #188]	; (8001524 <HAL_TIM_MspPostInit+0xe4>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b2d      	ldr	r3, [pc, #180]	; (8001524 <HAL_TIM_MspPostInit+0xe4>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	613b      	str	r3, [r7, #16]
 8001478:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800147a:	4b2a      	ldr	r3, [pc, #168]	; (8001524 <HAL_TIM_MspPostInit+0xe4>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a29      	ldr	r2, [pc, #164]	; (8001524 <HAL_TIM_MspPostInit+0xe4>)
 8001480:	f043 0302 	orr.w	r3, r3, #2
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b27      	ldr	r3, [pc, #156]	; (8001524 <HAL_TIM_MspPostInit+0xe4>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001492:	2301      	movs	r3, #1
 8001494:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001496:	2302      	movs	r3, #2
 8001498:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149e:	2300      	movs	r3, #0
 80014a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014a2:	2301      	movs	r3, #1
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a6:	f107 0314 	add.w	r3, r7, #20
 80014aa:	4619      	mov	r1, r3
 80014ac:	481e      	ldr	r0, [pc, #120]	; (8001528 <HAL_TIM_MspPostInit+0xe8>)
 80014ae:	f001 ff2d 	bl	800330c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b8:	2302      	movs	r3, #2
 80014ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c0:	2300      	movs	r3, #0
 80014c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014c4:	2301      	movs	r3, #1
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	4619      	mov	r1, r3
 80014ce:	4817      	ldr	r0, [pc, #92]	; (800152c <HAL_TIM_MspPostInit+0xec>)
 80014d0:	f001 ff1c 	bl	800330c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 80014d4:	e021      	b.n	800151a <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM10)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a15      	ldr	r2, [pc, #84]	; (8001530 <HAL_TIM_MspPostInit+0xf0>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d11c      	bne.n	800151a <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e0:	4b10      	ldr	r3, [pc, #64]	; (8001524 <HAL_TIM_MspPostInit+0xe4>)
 80014e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e4:	4a0f      	ldr	r2, [pc, #60]	; (8001524 <HAL_TIM_MspPostInit+0xe4>)
 80014e6:	f043 0302 	orr.w	r3, r3, #2
 80014ea:	6313      	str	r3, [r2, #48]	; 0x30
 80014ec:	4b0d      	ldr	r3, [pc, #52]	; (8001524 <HAL_TIM_MspPostInit+0xe4>)
 80014ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fe:	2302      	movs	r3, #2
 8001500:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001506:	2300      	movs	r3, #0
 8001508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800150a:	2303      	movs	r3, #3
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	4619      	mov	r1, r3
 8001514:	4805      	ldr	r0, [pc, #20]	; (800152c <HAL_TIM_MspPostInit+0xec>)
 8001516:	f001 fef9 	bl	800330c <HAL_GPIO_Init>
}
 800151a:	bf00      	nop
 800151c:	3728      	adds	r7, #40	; 0x28
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40023800 	.word	0x40023800
 8001528:	40020000 	.word	0x40020000
 800152c:	40020400 	.word	0x40020400
 8001530:	40014400 	.word	0x40014400

08001534 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b0ae      	sub	sp, #184	; 0xb8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	2290      	movs	r2, #144	; 0x90
 8001552:	2100      	movs	r1, #0
 8001554:	4618      	mov	r0, r3
 8001556:	f010 fc4c 	bl	8011df2 <memset>
  if(huart->Instance==USART3)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a22      	ldr	r2, [pc, #136]	; (80015e8 <HAL_UART_MspInit+0xb4>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d13c      	bne.n	80015de <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001564:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001568:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800156a:	2300      	movs	r3, #0
 800156c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800156e:	f107 0314 	add.w	r3, r7, #20
 8001572:	4618      	mov	r0, r3
 8001574:	f002 fdcc 	bl	8004110 <HAL_RCCEx_PeriphCLKConfig>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800157e:	f7ff feb1 	bl	80012e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001582:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <HAL_UART_MspInit+0xb8>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	4a19      	ldr	r2, [pc, #100]	; (80015ec <HAL_UART_MspInit+0xb8>)
 8001588:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800158c:	6413      	str	r3, [r2, #64]	; 0x40
 800158e:	4b17      	ldr	r3, [pc, #92]	; (80015ec <HAL_UART_MspInit+0xb8>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800159a:	4b14      	ldr	r3, [pc, #80]	; (80015ec <HAL_UART_MspInit+0xb8>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a13      	ldr	r2, [pc, #76]	; (80015ec <HAL_UART_MspInit+0xb8>)
 80015a0:	f043 0308 	orr.w	r3, r3, #8
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4b11      	ldr	r3, [pc, #68]	; (80015ec <HAL_UART_MspInit+0xb8>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f003 0308 	and.w	r3, r3, #8
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80015b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ba:	2302      	movs	r3, #2
 80015bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c6:	2303      	movs	r3, #3
 80015c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015cc:	2307      	movs	r3, #7
 80015ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015d2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015d6:	4619      	mov	r1, r3
 80015d8:	4805      	ldr	r0, [pc, #20]	; (80015f0 <HAL_UART_MspInit+0xbc>)
 80015da:	f001 fe97 	bl	800330c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015de:	bf00      	nop
 80015e0:	37b8      	adds	r7, #184	; 0xb8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40004800 	.word	0x40004800
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40020c00 	.word	0x40020c00

080015f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015f8:	e7fe      	b.n	80015f8 <NMI_Handler+0x4>

080015fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015fe:	e7fe      	b.n	80015fe <HardFault_Handler+0x4>

08001600 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001604:	e7fe      	b.n	8001604 <MemManage_Handler+0x4>

08001606 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800160a:	e7fe      	b.n	800160a <BusFault_Handler+0x4>

0800160c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001610:	e7fe      	b.n	8001610 <UsageFault_Handler+0x4>

08001612 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001640:	f000 fa80 	bl	8001b44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}

08001648 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800164c:	4802      	ldr	r0, [pc, #8]	; (8001658 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800164e:	f003 fba9 	bl	8004da4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000350 	.word	0x20000350

0800165c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001660:	4803      	ldr	r0, [pc, #12]	; (8001670 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8001662:	f003 fb9f 	bl	8004da4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8001666:	4803      	ldr	r0, [pc, #12]	; (8001674 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001668:	f003 fb9c 	bl	8004da4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20000350 	.word	0x20000350
 8001674:	200003e8 	.word	0x200003e8

08001678 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 800167c:	4802      	ldr	r0, [pc, #8]	; (8001688 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800167e:	f003 fb91 	bl	8004da4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000434 	.word	0x20000434

0800168c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001690:	4802      	ldr	r0, [pc, #8]	; (800169c <ETH_IRQHandler+0x10>)
 8001692:	f000 ff4f 	bl	8002534 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20004f98 	.word	0x20004f98

080016a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  return 1;
 80016a4:	2301      	movs	r3, #1
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <_kill>:

int _kill(int pid, int sig)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016ba:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <_kill+0x20>)
 80016bc:	2216      	movs	r2, #22
 80016be:	601a      	str	r2, [r3, #0]
  return -1;
 80016c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	2000aa68 	.word	0x2000aa68

080016d4 <_exit>:

void _exit (int status)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7ff ffe5 	bl	80016b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016e6:	e7fe      	b.n	80016e6 <_exit+0x12>

080016e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
 80016f8:	e00a      	b.n	8001710 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016fa:	f3af 8000 	nop.w
 80016fe:	4601      	mov	r1, r0
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	1c5a      	adds	r2, r3, #1
 8001704:	60ba      	str	r2, [r7, #8]
 8001706:	b2ca      	uxtb	r2, r1
 8001708:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	3301      	adds	r3, #1
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	429a      	cmp	r2, r3
 8001716:	dbf0      	blt.n	80016fa <_read+0x12>
  }

  return len;
 8001718:	687b      	ldr	r3, [r7, #4]
}
 800171a:	4618      	mov	r0, r3
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b086      	sub	sp, #24
 8001726:	af00      	add	r7, sp, #0
 8001728:	60f8      	str	r0, [r7, #12]
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]
 8001732:	e009      	b.n	8001748 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	1c5a      	adds	r2, r3, #1
 8001738:	60ba      	str	r2, [r7, #8]
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	3301      	adds	r3, #1
 8001746:	617b      	str	r3, [r7, #20]
 8001748:	697a      	ldr	r2, [r7, #20]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	429a      	cmp	r2, r3
 800174e:	dbf1      	blt.n	8001734 <_write+0x12>
  }
  return len;
 8001750:	687b      	ldr	r3, [r7, #4]
}
 8001752:	4618      	mov	r0, r3
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <_close>:

int _close(int file)
{
 800175a:	b480      	push	{r7}
 800175c:	b083      	sub	sp, #12
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001762:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001766:	4618      	mov	r0, r3
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001772:	b480      	push	{r7}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
 800177a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001782:	605a      	str	r2, [r3, #4]
  return 0;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <_isatty>:

int _isatty(int file)
{
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800179a:	2301      	movs	r3, #1
}
 800179c:	4618      	mov	r0, r3
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3714      	adds	r7, #20
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
	...

080017c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b087      	sub	sp, #28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017cc:	4a14      	ldr	r2, [pc, #80]	; (8001820 <_sbrk+0x5c>)
 80017ce:	4b15      	ldr	r3, [pc, #84]	; (8001824 <_sbrk+0x60>)
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017d8:	4b13      	ldr	r3, [pc, #76]	; (8001828 <_sbrk+0x64>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d102      	bne.n	80017e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017e0:	4b11      	ldr	r3, [pc, #68]	; (8001828 <_sbrk+0x64>)
 80017e2:	4a12      	ldr	r2, [pc, #72]	; (800182c <_sbrk+0x68>)
 80017e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017e6:	4b10      	ldr	r3, [pc, #64]	; (8001828 <_sbrk+0x64>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d205      	bcs.n	8001800 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80017f4:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <_sbrk+0x6c>)
 80017f6:	220c      	movs	r2, #12
 80017f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017fe:	e009      	b.n	8001814 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001800:	4b09      	ldr	r3, [pc, #36]	; (8001828 <_sbrk+0x64>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001806:	4b08      	ldr	r3, [pc, #32]	; (8001828 <_sbrk+0x64>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4413      	add	r3, r2
 800180e:	4a06      	ldr	r2, [pc, #24]	; (8001828 <_sbrk+0x64>)
 8001810:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001812:	68fb      	ldr	r3, [r7, #12]
}
 8001814:	4618      	mov	r0, r3
 8001816:	371c      	adds	r7, #28
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	20080000 	.word	0x20080000
 8001824:	00000400 	.word	0x00000400
 8001828:	200005b8 	.word	0x200005b8
 800182c:	2000aa78 	.word	0x2000aa78
 8001830:	2000aa68 	.word	0x2000aa68

08001834 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001838:	4b06      	ldr	r3, [pc, #24]	; (8001854 <SystemInit+0x20>)
 800183a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800183e:	4a05      	ldr	r2, [pc, #20]	; (8001854 <SystemInit+0x20>)
 8001840:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001844:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001858:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001890 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800185c:	f7ff ffea 	bl	8001834 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001860:	480c      	ldr	r0, [pc, #48]	; (8001894 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001862:	490d      	ldr	r1, [pc, #52]	; (8001898 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001864:	4a0d      	ldr	r2, [pc, #52]	; (800189c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001868:	e002      	b.n	8001870 <LoopCopyDataInit>

0800186a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800186a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800186c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800186e:	3304      	adds	r3, #4

08001870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001874:	d3f9      	bcc.n	800186a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001876:	4a0a      	ldr	r2, [pc, #40]	; (80018a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001878:	4c0a      	ldr	r4, [pc, #40]	; (80018a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800187a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800187c:	e001      	b.n	8001882 <LoopFillZerobss>

0800187e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800187e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001880:	3204      	adds	r2, #4

08001882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001884:	d3fb      	bcc.n	800187e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001886:	f010 fb89 	bl	8011f9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800188a:	f7ff f905 	bl	8000a98 <main>
  bx  lr    
 800188e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001890:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001894:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001898:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 800189c:	08016c80 	.word	0x08016c80
  ldr r2, =_sbss
 80018a0:	20000334 	.word	0x20000334
  ldr r4, =_ebss
 80018a4:	2000aa78 	.word	0x2000aa78

080018a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018a8:	e7fe      	b.n	80018a8 <ADC_IRQHandler>

080018aa <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80018aa:	b480      	push	{r7}
 80018ac:	b083      	sub	sp, #12
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
 80018b2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d00b      	beq.n	80018d2 <LAN8742_RegisterBusIO+0x28>
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d007      	beq.n	80018d2 <LAN8742_RegisterBusIO+0x28>
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d003      	beq.n	80018d2 <LAN8742_RegisterBusIO+0x28>
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d102      	bne.n	80018d8 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80018d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018d6:	e014      	b.n	8001902 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685a      	ldr	r2, [r3, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	68da      	ldr	r2, [r3, #12]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	691a      	ldr	r2, [r3, #16]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800190e:	b580      	push	{r7, lr}
 8001910:	b086      	sub	sp, #24
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	2300      	movs	r3, #0
 800191c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800191e:	2300      	movs	r3, #0
 8001920:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d139      	bne.n	800199e <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d002      	beq.n	8001938 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2220      	movs	r2, #32
 800193c:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800193e:	2300      	movs	r3, #0
 8001940:	617b      	str	r3, [r7, #20]
 8001942:	e01c      	b.n	800197e <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	695b      	ldr	r3, [r3, #20]
 8001948:	f107 020c 	add.w	r2, r7, #12
 800194c:	2112      	movs	r1, #18
 800194e:	6978      	ldr	r0, [r7, #20]
 8001950:	4798      	blx	r3
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	da03      	bge.n	8001960 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001958:	f06f 0304 	mvn.w	r3, #4
 800195c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 800195e:	e00b      	b.n	8001978 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f003 031f 	and.w	r3, r3, #31
 8001966:	697a      	ldr	r2, [r7, #20]
 8001968:	429a      	cmp	r2, r3
 800196a:	d105      	bne.n	8001978 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	697a      	ldr	r2, [r7, #20]
 8001970:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001972:	2300      	movs	r3, #0
 8001974:	613b      	str	r3, [r7, #16]
         break;
 8001976:	e005      	b.n	8001984 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	3301      	adds	r3, #1
 800197c:	617b      	str	r3, [r7, #20]
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	2b1f      	cmp	r3, #31
 8001982:	d9df      	bls.n	8001944 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2b1f      	cmp	r3, #31
 800198a:	d902      	bls.n	8001992 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 800198c:	f06f 0302 	mvn.w	r3, #2
 8001990:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d102      	bne.n	800199e <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2201      	movs	r2, #1
 800199c:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 800199e:	693b      	ldr	r3, [r7, #16]
 }
 80019a0:	4618      	mov	r0, r3
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	695b      	ldr	r3, [r3, #20]
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	6810      	ldr	r0, [r2, #0]
 80019bc:	f107 020c 	add.w	r2, r7, #12
 80019c0:	2101      	movs	r1, #1
 80019c2:	4798      	blx	r3
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	da02      	bge.n	80019d0 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80019ca:	f06f 0304 	mvn.w	r3, #4
 80019ce:	e06e      	b.n	8001aae <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	695b      	ldr	r3, [r3, #20]
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	6810      	ldr	r0, [r2, #0]
 80019d8:	f107 020c 	add.w	r2, r7, #12
 80019dc:	2101      	movs	r1, #1
 80019de:	4798      	blx	r3
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	da02      	bge.n	80019ec <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80019e6:	f06f 0304 	mvn.w	r3, #4
 80019ea:	e060      	b.n	8001aae <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f003 0304 	and.w	r3, r3, #4
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e059      	b.n	8001aae <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	6810      	ldr	r0, [r2, #0]
 8001a02:	f107 020c 	add.w	r2, r7, #12
 8001a06:	2100      	movs	r1, #0
 8001a08:	4798      	blx	r3
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	da02      	bge.n	8001a16 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001a10:	f06f 0304 	mvn.w	r3, #4
 8001a14:	e04b      	b.n	8001aae <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d11b      	bne.n	8001a58 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d006      	beq.n	8001a38 <LAN8742_GetLinkState+0x90>
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001a34:	2302      	movs	r3, #2
 8001a36:	e03a      	b.n	8001aae <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e033      	b.n	8001aae <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001a50:	2304      	movs	r3, #4
 8001a52:	e02c      	b.n	8001aae <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001a54:	2305      	movs	r3, #5
 8001a56:	e02a      	b.n	8001aae <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	695b      	ldr	r3, [r3, #20]
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	6810      	ldr	r0, [r2, #0]
 8001a60:	f107 020c 	add.w	r2, r7, #12
 8001a64:	211f      	movs	r1, #31
 8001a66:	4798      	blx	r3
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	da02      	bge.n	8001a74 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001a6e:	f06f 0304 	mvn.w	r3, #4
 8001a72:	e01c      	b.n	8001aae <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001a7e:	2306      	movs	r3, #6
 8001a80:	e015      	b.n	8001aae <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f003 031c 	and.w	r3, r3, #28
 8001a88:	2b18      	cmp	r3, #24
 8001a8a:	d101      	bne.n	8001a90 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	e00e      	b.n	8001aae <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f003 031c 	and.w	r3, r3, #28
 8001a96:	2b08      	cmp	r3, #8
 8001a98:	d101      	bne.n	8001a9e <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e007      	b.n	8001aae <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f003 031c 	and.w	r3, r3, #28
 8001aa4:	2b14      	cmp	r3, #20
 8001aa6:	d101      	bne.n	8001aac <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001aa8:	2304      	movs	r3, #4
 8001aaa:	e000      	b.n	8001aae <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001aac:	2305      	movs	r3, #5
    }
  }
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
	...

08001ab8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001abc:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <HAL_Init+0x28>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a07      	ldr	r2, [pc, #28]	; (8001ae0 <HAL_Init+0x28>)
 8001ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ac8:	2003      	movs	r0, #3
 8001aca:	f000 f94f 	bl	8001d6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ace:	2000      	movs	r0, #0
 8001ad0:	f000 f808 	bl	8001ae4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ad4:	f7ff fc0c 	bl	80012f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40023c00 	.word	0x40023c00

08001ae4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001aec:	4b12      	ldr	r3, [pc, #72]	; (8001b38 <HAL_InitTick+0x54>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <HAL_InitTick+0x58>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	4619      	mov	r1, r3
 8001af6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001afa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b02:	4618      	mov	r0, r3
 8001b04:	f000 f967 	bl	8001dd6 <HAL_SYSTICK_Config>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e00e      	b.n	8001b30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2b0f      	cmp	r3, #15
 8001b16:	d80a      	bhi.n	8001b2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	6879      	ldr	r1, [r7, #4]
 8001b1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b20:	f000 f92f 	bl	8001d82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b24:	4a06      	ldr	r2, [pc, #24]	; (8001b40 <HAL_InitTick+0x5c>)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	e000      	b.n	8001b30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20000000 	.word	0x20000000
 8001b3c:	20000008 	.word	0x20000008
 8001b40:	20000004 	.word	0x20000004

08001b44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b48:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <HAL_IncTick+0x20>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <HAL_IncTick+0x24>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4413      	add	r3, r2
 8001b54:	4a04      	ldr	r2, [pc, #16]	; (8001b68 <HAL_IncTick+0x24>)
 8001b56:	6013      	str	r3, [r2, #0]
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	20000008 	.word	0x20000008
 8001b68:	200005bc 	.word	0x200005bc

08001b6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b70:	4b03      	ldr	r3, [pc, #12]	; (8001b80 <HAL_GetTick+0x14>)
 8001b72:	681b      	ldr	r3, [r3, #0]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	200005bc 	.word	0x200005bc

08001b84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b8c:	f7ff ffee 	bl	8001b6c <HAL_GetTick>
 8001b90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b9c:	d005      	beq.n	8001baa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b9e:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <HAL_Delay+0x44>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001baa:	bf00      	nop
 8001bac:	f7ff ffde 	bl	8001b6c <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d8f7      	bhi.n	8001bac <HAL_Delay+0x28>
  {
  }
}
 8001bbc:	bf00      	nop
 8001bbe:	bf00      	nop
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20000008 	.word	0x20000008

08001bcc <__NVIC_SetPriorityGrouping>:
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bdc:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <__NVIC_SetPriorityGrouping+0x40>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001be2:	68ba      	ldr	r2, [r7, #8]
 8001be4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001be8:	4013      	ands	r3, r2
 8001bea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001bf4:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bfa:	4a04      	ldr	r2, [pc, #16]	; (8001c0c <__NVIC_SetPriorityGrouping+0x40>)
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	60d3      	str	r3, [r2, #12]
}
 8001c00:	bf00      	nop
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	e000ed00 	.word	0xe000ed00
 8001c10:	05fa0000 	.word	0x05fa0000

08001c14 <__NVIC_GetPriorityGrouping>:
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c18:	4b04      	ldr	r3, [pc, #16]	; (8001c2c <__NVIC_GetPriorityGrouping+0x18>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	0a1b      	lsrs	r3, r3, #8
 8001c1e:	f003 0307 	and.w	r3, r3, #7
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <__NVIC_EnableIRQ>:
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	db0b      	blt.n	8001c5a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	f003 021f 	and.w	r2, r3, #31
 8001c48:	4907      	ldr	r1, [pc, #28]	; (8001c68 <__NVIC_EnableIRQ+0x38>)
 8001c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4e:	095b      	lsrs	r3, r3, #5
 8001c50:	2001      	movs	r0, #1
 8001c52:	fa00 f202 	lsl.w	r2, r0, r2
 8001c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	e000e100 	.word	0xe000e100

08001c6c <__NVIC_SetPriority>:
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	6039      	str	r1, [r7, #0]
 8001c76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	db0a      	blt.n	8001c96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	490c      	ldr	r1, [pc, #48]	; (8001cb8 <__NVIC_SetPriority+0x4c>)
 8001c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8a:	0112      	lsls	r2, r2, #4
 8001c8c:	b2d2      	uxtb	r2, r2
 8001c8e:	440b      	add	r3, r1
 8001c90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001c94:	e00a      	b.n	8001cac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	b2da      	uxtb	r2, r3
 8001c9a:	4908      	ldr	r1, [pc, #32]	; (8001cbc <__NVIC_SetPriority+0x50>)
 8001c9c:	79fb      	ldrb	r3, [r7, #7]
 8001c9e:	f003 030f 	and.w	r3, r3, #15
 8001ca2:	3b04      	subs	r3, #4
 8001ca4:	0112      	lsls	r2, r2, #4
 8001ca6:	b2d2      	uxtb	r2, r2
 8001ca8:	440b      	add	r3, r1
 8001caa:	761a      	strb	r2, [r3, #24]
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	e000e100 	.word	0xe000e100
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <NVIC_EncodePriority>:
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b089      	sub	sp, #36	; 0x24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	f1c3 0307 	rsb	r3, r3, #7
 8001cda:	2b04      	cmp	r3, #4
 8001cdc:	bf28      	it	cs
 8001cde:	2304      	movcs	r3, #4
 8001ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	2b06      	cmp	r3, #6
 8001ce8:	d902      	bls.n	8001cf0 <NVIC_EncodePriority+0x30>
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	3b03      	subs	r3, #3
 8001cee:	e000      	b.n	8001cf2 <NVIC_EncodePriority+0x32>
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43da      	mvns	r2, r3
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	401a      	ands	r2, r3
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d12:	43d9      	mvns	r1, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d18:	4313      	orrs	r3, r2
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3724      	adds	r7, #36	; 0x24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
	...

08001d28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3b01      	subs	r3, #1
 8001d34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d38:	d301      	bcc.n	8001d3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e00f      	b.n	8001d5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d3e:	4a0a      	ldr	r2, [pc, #40]	; (8001d68 <SysTick_Config+0x40>)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3b01      	subs	r3, #1
 8001d44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d46:	210f      	movs	r1, #15
 8001d48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d4c:	f7ff ff8e 	bl	8001c6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d50:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <SysTick_Config+0x40>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d56:	4b04      	ldr	r3, [pc, #16]	; (8001d68 <SysTick_Config+0x40>)
 8001d58:	2207      	movs	r2, #7
 8001d5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	e000e010 	.word	0xe000e010

08001d6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f7ff ff29 	bl	8001bcc <__NVIC_SetPriorityGrouping>
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b086      	sub	sp, #24
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	4603      	mov	r3, r0
 8001d8a:	60b9      	str	r1, [r7, #8]
 8001d8c:	607a      	str	r2, [r7, #4]
 8001d8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d94:	f7ff ff3e 	bl	8001c14 <__NVIC_GetPriorityGrouping>
 8001d98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	68b9      	ldr	r1, [r7, #8]
 8001d9e:	6978      	ldr	r0, [r7, #20]
 8001da0:	f7ff ff8e 	bl	8001cc0 <NVIC_EncodePriority>
 8001da4:	4602      	mov	r2, r0
 8001da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001daa:	4611      	mov	r1, r2
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff ff5d 	bl	8001c6c <__NVIC_SetPriority>
}
 8001db2:	bf00      	nop
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b082      	sub	sp, #8
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff ff31 	bl	8001c30 <__NVIC_EnableIRQ>
}
 8001dce:	bf00      	nop
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b082      	sub	sp, #8
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7ff ffa2 	bl	8001d28 <SysTick_Config>
 8001de4:	4603      	mov	r3, r0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
	...

08001df0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001df4:	f3bf 8f5f 	dmb	sy
}
 8001df8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001dfa:	4b07      	ldr	r3, [pc, #28]	; (8001e18 <HAL_MPU_Disable+0x28>)
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfe:	4a06      	ldr	r2, [pc, #24]	; (8001e18 <HAL_MPU_Disable+0x28>)
 8001e00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e04:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001e06:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <HAL_MPU_Disable+0x2c>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	605a      	str	r2, [r3, #4]
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	e000ed00 	.word	0xe000ed00
 8001e1c:	e000ed90 	.word	0xe000ed90

08001e20 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001e28:	4a0b      	ldr	r2, [pc, #44]	; (8001e58 <HAL_MPU_Enable+0x38>)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001e32:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <HAL_MPU_Enable+0x3c>)
 8001e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e36:	4a09      	ldr	r2, [pc, #36]	; (8001e5c <HAL_MPU_Enable+0x3c>)
 8001e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e3c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001e3e:	f3bf 8f4f 	dsb	sy
}
 8001e42:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e44:	f3bf 8f6f 	isb	sy
}
 8001e48:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	e000ed90 	.word	0xe000ed90
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	785a      	ldrb	r2, [r3, #1]
 8001e6c:	4b1b      	ldr	r3, [pc, #108]	; (8001edc <HAL_MPU_ConfigRegion+0x7c>)
 8001e6e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001e70:	4b1a      	ldr	r3, [pc, #104]	; (8001edc <HAL_MPU_ConfigRegion+0x7c>)
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	4a19      	ldr	r2, [pc, #100]	; (8001edc <HAL_MPU_ConfigRegion+0x7c>)
 8001e76:	f023 0301 	bic.w	r3, r3, #1
 8001e7a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001e7c:	4a17      	ldr	r2, [pc, #92]	; (8001edc <HAL_MPU_ConfigRegion+0x7c>)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	7b1b      	ldrb	r3, [r3, #12]
 8001e88:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	7adb      	ldrb	r3, [r3, #11]
 8001e8e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e90:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	7a9b      	ldrb	r3, [r3, #10]
 8001e96:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001e98:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	7b5b      	ldrb	r3, [r3, #13]
 8001e9e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001ea0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	7b9b      	ldrb	r3, [r3, #14]
 8001ea6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001ea8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	7bdb      	ldrb	r3, [r3, #15]
 8001eae:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001eb0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	7a5b      	ldrb	r3, [r3, #9]
 8001eb6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001eb8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	7a1b      	ldrb	r3, [r3, #8]
 8001ebe:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001ec0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	7812      	ldrb	r2, [r2, #0]
 8001ec6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ec8:	4a04      	ldr	r2, [pc, #16]	; (8001edc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001eca:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ecc:	6113      	str	r3, [r2, #16]
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	e000ed90 	.word	0xe000ed90

08001ee0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e086      	b.n	8002000 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d106      	bne.n	8001f0a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2223      	movs	r2, #35	; 0x23
 8001f00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f004 ffad 	bl	8006e64 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f0a:	4b3f      	ldr	r3, [pc, #252]	; (8002008 <HAL_ETH_Init+0x128>)
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0e:	4a3e      	ldr	r2, [pc, #248]	; (8002008 <HAL_ETH_Init+0x128>)
 8001f10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f14:	6453      	str	r3, [r2, #68]	; 0x44
 8001f16:	4b3c      	ldr	r3, [pc, #240]	; (8002008 <HAL_ETH_Init+0x128>)
 8001f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f1e:	60bb      	str	r3, [r7, #8]
 8001f20:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001f22:	4b3a      	ldr	r3, [pc, #232]	; (800200c <HAL_ETH_Init+0x12c>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	4a39      	ldr	r2, [pc, #228]	; (800200c <HAL_ETH_Init+0x12c>)
 8001f28:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f2c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001f2e:	4b37      	ldr	r3, [pc, #220]	; (800200c <HAL_ETH_Init+0x12c>)
 8001f30:	685a      	ldr	r2, [r3, #4]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	4935      	ldr	r1, [pc, #212]	; (800200c <HAL_ETH_Init+0x12c>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001f3c:	4b33      	ldr	r3, [pc, #204]	; (800200c <HAL_ETH_Init+0x12c>)
 8001f3e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	6812      	ldr	r2, [r2, #0]
 8001f4e:	f043 0301 	orr.w	r3, r3, #1
 8001f52:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f56:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f58:	f7ff fe08 	bl	8001b6c <HAL_GetTick>
 8001f5c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001f5e:	e011      	b.n	8001f84 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001f60:	f7ff fe04 	bl	8001b6c <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f6e:	d909      	bls.n	8001f84 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2204      	movs	r2, #4
 8001f74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	22e0      	movs	r2, #224	; 0xe0
 8001f7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e03d      	b.n	8002000 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1e4      	bne.n	8001f60 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 fefc 	bl	8002d94 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 ffa7 	bl	8002ef0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 fffd 	bl	8002fa2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	461a      	mov	r2, r3
 8001fae:	2100      	movs	r1, #0
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f000 ff65 	bl	8002e80 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8001fc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	4b0f      	ldr	r3, [pc, #60]	; (8002010 <HAL_ETH_Init+0x130>)
 8001fd4:	430b      	orrs	r3, r1
 8001fd6:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8001fea:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2210      	movs	r2, #16
 8001ffa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	3710      	adds	r7, #16
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40023800 	.word	0x40023800
 800200c:	40013800 	.word	0x40013800
 8002010:	00020060 	.word	0x00020060

08002014 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002022:	2b10      	cmp	r3, #16
 8002024:	d150      	bne.n	80020c8 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2223      	movs	r2, #35	; 0x23
 800202a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2204      	movs	r2, #4
 8002032:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 f9f9 	bl	800242c <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f042 0208 	orr.w	r2, r2, #8
 8002048:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002052:	2001      	movs	r0, #1
 8002054:	f7ff fd96 	bl	8001b84 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f042 0204 	orr.w	r2, r2, #4
 800206e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002078:	2001      	movs	r0, #1
 800207a:	f7ff fd83 	bl	8001b84 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 fd20 	bl	8002acc <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	6812      	ldr	r2, [r2, #0]
 800209a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800209e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80020a2:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	6812      	ldr	r2, [r2, #0]
 80020b2:	f043 0302 	orr.w	r3, r3, #2
 80020b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80020ba:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2223      	movs	r2, #35	; 0x23
 80020c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80020c4:	2300      	movs	r3, #0
 80020c6:	e000      	b.n	80020ca <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
  }
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b084      	sub	sp, #16
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020e0:	2b23      	cmp	r3, #35	; 0x23
 80020e2:	d14a      	bne.n	800217a <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2223      	movs	r2, #35	; 0x23
 80020e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6812      	ldr	r2, [r2, #0]
 80020fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80020fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002102:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	6812      	ldr	r2, [r2, #0]
 8002112:	f023 0302 	bic.w	r3, r3, #2
 8002116:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800211a:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f022 0204 	bic.w	r2, r2, #4
 800212a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002134:	2001      	movs	r0, #1
 8002136:	f7ff fd25 	bl	8001b84 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 fcc2 	bl	8002acc <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 0208 	bic.w	r2, r2, #8
 8002156:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002160:	2001      	movs	r0, #1
 8002162:	f7ff fd0f 	bl	8001b84 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2210      	movs	r2, #16
 8002172:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8002176:	2300      	movs	r3, #0
 8002178:	e000      	b.n	800217c <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
  }
}
 800217c:	4618      	mov	r0, r3
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d109      	bne.n	80021aa <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800219c:	f043 0201 	orr.w	r2, r3, #1
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e07c      	b.n	80022a4 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021b0:	2b23      	cmp	r3, #35	; 0x23
 80021b2:	d176      	bne.n	80022a2 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80021b4:	2200      	movs	r2, #0
 80021b6:	68b9      	ldr	r1, [r7, #8]
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f000 ff61 	bl	8003080 <ETH_Prepare_Tx_Descriptors>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d009      	beq.n	80021d8 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ca:	f043 0202 	orr.w	r2, r3, #2
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e065      	b.n	80022a4 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 80021d8:	f3bf 8f4f 	dsb	sy
}
 80021dc:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	3206      	adds	r2, #6
 80021e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021ea:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f0:	1c5a      	adds	r2, r3, #1
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	629a      	str	r2, [r3, #40]	; 0x28
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fa:	2b03      	cmp	r3, #3
 80021fc:	d904      	bls.n	8002208 <HAL_ETH_Transmit+0x84>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002202:	1f1a      	subs	r2, r3, #4
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	3106      	adds	r1, #6
 8002214:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002218:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800221c:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 800221e:	f7ff fca5 	bl	8001b6c <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002224:	e037      	b.n	8002296 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d011      	beq.n	800225c <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800223e:	f043 0208 	orr.w	r2, r3, #8
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002250:	695a      	ldr	r2, [r3, #20]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e023      	b.n	80022a4 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002262:	d018      	beq.n	8002296 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002264:	f7ff fc82 	bl	8001b6c <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	429a      	cmp	r2, r3
 8002272:	d302      	bcc.n	800227a <HAL_ETH_Transmit+0xf6>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d10d      	bne.n	8002296 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002280:	f043 0204 	orr.w	r2, r3, #4
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8002290:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e006      	b.n	80022a4 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	dbc3      	blt.n	8002226 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800229e:	2300      	movs	r3, #0
 80022a0:	e000      	b.n	80022a4 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
  }
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3718      	adds	r7, #24
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b088      	sub	sp, #32
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80022ba:	2300      	movs	r3, #0
 80022bc:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d109      	bne.n	80022d8 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ca:	f043 0201 	orr.w	r2, r3, #1
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e0a4      	b.n	8002422 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022de:	2b23      	cmp	r3, #35	; 0x23
 80022e0:	d001      	beq.n	80022e6 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e09d      	b.n	8002422 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ea:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	69fa      	ldr	r2, [r7, #28]
 80022f0:	3212      	adds	r2, #18
 80022f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022f6:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022fc:	f1c3 0304 	rsb	r3, r3, #4
 8002300:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002302:	e066      	b.n	80023d2 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800230c:	2b00      	cmp	r3, #0
 800230e:	d007      	beq.n	8002320 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	69da      	ldr	r2, [r3, #28]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	699a      	ldr	r2, [r3, #24]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002328:	2b00      	cmp	r3, #0
 800232a:	d103      	bne.n	8002334 <HAL_ETH_ReadData+0x88>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002330:	2b00      	cmp	r3, #0
 8002332:	d03c      	beq.n	80023ae <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800233c:	2b00      	cmp	r3, #0
 800233e:	d005      	beq.n	800234c <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	0c1b      	lsrs	r3, r3, #16
 8002352:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002356:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002360:	2b00      	cmp	r3, #0
 8002362:	d005      	beq.n	8002370 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 800236c:	2301      	movs	r3, #1
 800236e:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002388:	461a      	mov	r2, r3
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	b29b      	uxth	r3, r3
 800238e:	f004 ff33 	bl	80071f8 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002396:	1c5a      	adds	r2, r3, #1
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	441a      	add	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	2200      	movs	r2, #0
 80023ac:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	3301      	adds	r3, #1
 80023b2:	61fb      	str	r3, [r7, #28]
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	2b03      	cmp	r3, #3
 80023b8:	d902      	bls.n	80023c0 <HAL_ETH_ReadData+0x114>
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	3b04      	subs	r3, #4
 80023be:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	69fa      	ldr	r2, [r7, #28]
 80023c4:	3212      	adds	r2, #18
 80023c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ca:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	3301      	adds	r3, #1
 80023d0:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	db06      	blt.n	80023e8 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d202      	bcs.n	80023e8 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 80023e2:	7cfb      	ldrb	r3, [r7, #19]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d08d      	beq.n	8002304 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	441a      	add	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d002      	beq.n	8002402 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 f815 	bl	800242c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	69fa      	ldr	r2, [r7, #28]
 8002406:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8002408:	7cfb      	ldrb	r3, [r7, #19]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d108      	bne.n	8002420 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800241c:	2300      	movs	r3, #0
 800241e:	e000      	b.n	8002422 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
}
 8002422:	4618      	mov	r0, r3
 8002424:	3720      	adds	r7, #32
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
	...

0800242c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b088      	sub	sp, #32
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002434:	2300      	movs	r3, #0
 8002436:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8002438:	2301      	movs	r3, #1
 800243a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002440:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69fa      	ldr	r2, [r7, #28]
 8002446:	3212      	adds	r2, #18
 8002448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800244c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002452:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002454:	e042      	b.n	80024dc <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d112      	bne.n	8002484 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800245e:	f107 0308 	add.w	r3, r7, #8
 8002462:	4618      	mov	r0, r3
 8002464:	f004 fe98 	bl	8007198 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d102      	bne.n	8002474 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800246e:	2300      	movs	r3, #0
 8002470:	74fb      	strb	r3, [r7, #19]
 8002472:	e007      	b.n	8002484 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	461a      	mov	r2, r3
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	461a      	mov	r2, r3
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002484:	7cfb      	ldrb	r3, [r7, #19]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d028      	beq.n	80024dc <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248e:	2b00      	cmp	r3, #0
 8002490:	d106      	bne.n	80024a0 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	695a      	ldr	r2, [r3, #20]
 8002496:	4b26      	ldr	r3, [pc, #152]	; (8002530 <ETH_UpdateDescriptor+0x104>)
 8002498:	4313      	orrs	r3, r2
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	6053      	str	r3, [r2, #4]
 800249e:	e005      	b.n	80024ac <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	3301      	adds	r3, #1
 80024bc:	61fb      	str	r3, [r7, #28]
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	2b03      	cmp	r3, #3
 80024c2:	d902      	bls.n	80024ca <ETH_UpdateDescriptor+0x9e>
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	3b04      	subs	r3, #4
 80024c8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69fa      	ldr	r2, [r7, #28]
 80024ce:	3212      	adds	r2, #18
 80024d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024d4:	617b      	str	r3, [r7, #20]
      desccount--;
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	3b01      	subs	r3, #1
 80024da:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d002      	beq.n	80024e8 <ETH_UpdateDescriptor+0xbc>
 80024e2:	7cfb      	ldrb	r3, [r7, #19]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1b6      	bne.n	8002456 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d01a      	beq.n	8002528 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	3301      	adds	r3, #1
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80024fc:	f3bf 8f5f 	dmb	sy
}
 8002500:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6919      	ldr	r1, [r3, #16]
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	4613      	mov	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4413      	add	r3, r2
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	18ca      	adds	r2, r1, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800251a:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	69fa      	ldr	r2, [r7, #28]
 8002520:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8002528:	bf00      	nop
 800252a:	3720      	adds	r7, #32
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	80004000 	.word	0x80004000

08002534 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002542:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 800255c:	4b4b      	ldr	r3, [pc, #300]	; (800268c <HAL_ETH_IRQHandler+0x158>)
 800255e:	695b      	ldr	r3, [r3, #20]
 8002560:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00e      	beq.n	800258a <HAL_ETH_IRQHandler+0x56>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002572:	2b00      	cmp	r3, #0
 8002574:	d009      	beq.n	800258a <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800257e:	461a      	mov	r2, r3
 8002580:	4b43      	ldr	r3, [pc, #268]	; (8002690 <HAL_ETH_IRQHandler+0x15c>)
 8002582:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 f891 	bl	80026ac <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	2b00      	cmp	r3, #0
 8002592:	d00f      	beq.n	80025b4 <HAL_ETH_IRQHandler+0x80>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00a      	beq.n	80025b4 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025a6:	461a      	mov	r2, r3
 80025a8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80025ac:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f872 	bl	8002698 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d042      	beq.n	8002644 <HAL_ETH_IRQHandler+0x110>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d03d      	beq.n	8002644 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ce:	f043 0208 	orr.w	r2, r3, #8
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d01a      	beq.n	8002618 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025ea:	695a      	ldr	r2, [r3, #20]
 80025ec:	4b29      	ldr	r3, [pc, #164]	; (8002694 <HAL_ETH_IRQHandler+0x160>)
 80025ee:	4013      	ands	r3, r2
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025fe:	69db      	ldr	r3, [r3, #28]
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	6812      	ldr	r2, [r2, #0]
 8002604:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8002608:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800260c:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	22e0      	movs	r2, #224	; 0xe0
 8002612:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002616:	e012      	b.n	800263e <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002620:	695a      	ldr	r2, [r3, #20]
 8002622:	f248 6380 	movw	r3, #34432	; 0x8680
 8002626:	4013      	ands	r3, r2
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002636:	461a      	mov	r2, r3
 8002638:	f248 6380 	movw	r3, #34432	; 0x8680
 800263c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 f83e 	bl	80026c0 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	f003 0308 	and.w	r3, r3, #8
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00e      	beq.n	800266c <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002654:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f838 	bl	80026d4 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d006      	beq.n	8002684 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002676:	4b05      	ldr	r3, [pc, #20]	; (800268c <HAL_ETH_IRQHandler+0x158>)
 8002678:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800267c:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 f832 	bl	80026e8 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002684:	bf00      	nop
 8002686:	3718      	adds	r7, #24
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40013c00 	.word	0x40013c00
 8002690:	00010040 	.word	0x00010040
 8002694:	007e2000 	.word	0x007e2000

08002698 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
 8002708:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	f003 031c 	and.w	r3, r3, #28
 8002718:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	02db      	lsls	r3, r3, #11
 800271e:	b29b      	uxth	r3, r3
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	4313      	orrs	r3, r2
 8002724:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	019b      	lsls	r3, r3, #6
 800272a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	4313      	orrs	r3, r2
 8002732:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	f023 0302 	bic.w	r3, r3, #2
 800273a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	f043 0301 	orr.w	r3, r3, #1
 8002742:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 800274c:	f7ff fa0e 	bl	8001b6c <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002752:	e00d      	b.n	8002770 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002754:	f7ff fa0a 	bl	8001b6c <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002762:	d301      	bcc.n	8002768 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e010      	b.n	800278a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1ec      	bne.n	8002754 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	b29b      	uxth	r3, r3
 8002782:	461a      	mov	r2, r3
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3718      	adds	r7, #24
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b086      	sub	sp, #24
 8002796:	af00      	add	r7, sp, #0
 8002798:	60f8      	str	r0, [r7, #12]
 800279a:	60b9      	str	r1, [r7, #8]
 800279c:	607a      	str	r2, [r7, #4]
 800279e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	f003 031c 	and.w	r3, r3, #28
 80027ae:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	02db      	lsls	r3, r3, #11
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	019b      	lsls	r3, r3, #6
 80027c0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	f043 0302 	orr.w	r3, r3, #2
 80027d0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f043 0301 	orr.w	r3, r3, #1
 80027d8:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	b29a      	uxth	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027ec:	f7ff f9be 	bl	8001b6c <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80027f2:	e00d      	b.n	8002810 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80027f4:	f7ff f9ba 	bl	8001b6c <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002802:	d301      	bcc.n	8002808 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e009      	b.n	800281c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1ec      	bne.n	80027f4 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3718      	adds	r7, #24
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e0e6      	b.n	8002a06 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0310 	and.w	r3, r3, #16
 8002842:	2b00      	cmp	r3, #0
 8002844:	bf14      	ite	ne
 8002846:	2301      	movne	r3, #1
 8002848:	2300      	moveq	r3, #0
 800284a:	b2db      	uxtb	r3, r3
 800284c:	461a      	mov	r2, r3
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800286c:	2b00      	cmp	r3, #0
 800286e:	bf0c      	ite	eq
 8002870:	2301      	moveq	r3, #1
 8002872:	2300      	movne	r3, #0
 8002874:	b2db      	uxtb	r3, r3
 8002876:	461a      	mov	r2, r3
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8002888:	2b00      	cmp	r3, #0
 800288a:	bf14      	ite	ne
 800288c:	2301      	movne	r3, #1
 800288e:	2300      	moveq	r3, #0
 8002890:	b2db      	uxtb	r3, r3
 8002892:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	bf0c      	ite	eq
 80028a6:	2301      	moveq	r3, #1
 80028a8:	2300      	movne	r3, #0
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	461a      	mov	r2, r3
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	bf14      	ite	ne
 80028c0:	2301      	movne	r3, #1
 80028c2:	2300      	moveq	r3, #0
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	461a      	mov	r2, r3
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	bf0c      	ite	eq
 80028f6:	2301      	moveq	r3, #1
 80028f8:	2300      	movne	r3, #0
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	461a      	mov	r2, r3
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800290c:	2b00      	cmp	r3, #0
 800290e:	bf0c      	ite	eq
 8002910:	2301      	moveq	r3, #1
 8002912:	2300      	movne	r3, #0
 8002914:	b2db      	uxtb	r3, r3
 8002916:	461a      	mov	r2, r3
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002926:	2b00      	cmp	r3, #0
 8002928:	bf14      	ite	ne
 800292a:	2301      	movne	r3, #1
 800292c:	2300      	moveq	r3, #0
 800292e:	b2db      	uxtb	r3, r3
 8002930:	461a      	mov	r2, r3
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800294e:	2b00      	cmp	r3, #0
 8002950:	bf14      	ite	ne
 8002952:	2301      	movne	r3, #1
 8002954:	2300      	moveq	r3, #0
 8002956:	b2db      	uxtb	r3, r3
 8002958:	461a      	mov	r2, r3
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002968:	2b00      	cmp	r3, #0
 800296a:	bf14      	ite	ne
 800296c:	2301      	movne	r3, #1
 800296e:	2300      	moveq	r3, #0
 8002970:	b2db      	uxtb	r3, r3
 8002972:	461a      	mov	r2, r3
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	bf14      	ite	ne
 8002986:	2301      	movne	r3, #1
 8002988:	2300      	moveq	r3, #0
 800298a:	b2db      	uxtb	r3, r3
 800298c:	461a      	mov	r2, r3
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800299e:	2b00      	cmp	r3, #0
 80029a0:	bf0c      	ite	eq
 80029a2:	2301      	moveq	r3, #1
 80029a4:	2300      	movne	r3, #0
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	461a      	mov	r2, r3
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	0c1b      	lsrs	r3, r3, #16
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	f003 0304 	and.w	r3, r3, #4
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	bf14      	ite	ne
 80029da:	2301      	movne	r3, #1
 80029dc:	2300      	moveq	r3, #0
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	461a      	mov	r2, r3
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	bf14      	ite	ne
 80029f6:	2301      	movne	r3, #1
 80029f8:	2300      	moveq	r3, #0
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b082      	sub	sp, #8
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
 8002a1a:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e00b      	b.n	8002a3e <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a2c:	2b10      	cmp	r3, #16
 8002a2e:	d105      	bne.n	8002a3c <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002a30:	6839      	ldr	r1, [r7, #0]
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f870 	bl	8002b18 <ETH_SetMACConfig>

    return HAL_OK;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	e000      	b.n	8002a3e <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
  }
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
	...

08002a48 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f023 031c 	bic.w	r3, r3, #28
 8002a5e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002a60:	f001 fb22 	bl	80040a8 <HAL_RCC_GetHCLKFreq>
 8002a64:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	4a14      	ldr	r2, [pc, #80]	; (8002abc <HAL_ETH_SetMDIOClockRange+0x74>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d804      	bhi.n	8002a78 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f043 0308 	orr.w	r3, r3, #8
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	e019      	b.n	8002aac <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	4a11      	ldr	r2, [pc, #68]	; (8002ac0 <HAL_ETH_SetMDIOClockRange+0x78>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d204      	bcs.n	8002a8a <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f043 030c 	orr.w	r3, r3, #12
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	e010      	b.n	8002aac <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	4a0d      	ldr	r2, [pc, #52]	; (8002ac4 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d90c      	bls.n	8002aac <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	4a0c      	ldr	r2, [pc, #48]	; (8002ac8 <HAL_ETH_SetMDIOClockRange+0x80>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d804      	bhi.n	8002aa4 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f043 0304 	orr.w	r3, r3, #4
 8002aa0:	60fb      	str	r3, [r7, #12]
 8002aa2:	e003      	b.n	8002aac <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f043 0310 	orr.w	r3, r3, #16
 8002aaa:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	611a      	str	r2, [r3, #16]
}
 8002ab4:	bf00      	nop
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	02160ebf 	.word	0x02160ebf
 8002ac0:	03938700 	.word	0x03938700
 8002ac4:	05f5e0ff 	.word	0x05f5e0ff
 8002ac8:	08f0d17f 	.word	0x08f0d17f

08002acc <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	6812      	ldr	r2, [r2, #0]
 8002ae6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002aea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002aee:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002afc:	2001      	movs	r0, #1
 8002afe:	f7ff f841 	bl	8001b84 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002b0c:	6193      	str	r3, [r2, #24]
}
 8002b0e:	bf00      	nop
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
	...

08002b18 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	4b53      	ldr	r3, [pc, #332]	; (8002c7c <ETH_SetMACConfig+0x164>)
 8002b2e:	4013      	ands	r3, r2
 8002b30:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	7b9b      	ldrb	r3, [r3, #14]
 8002b36:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	7c12      	ldrb	r2, [r2, #16]
 8002b3c:	2a00      	cmp	r2, #0
 8002b3e:	d102      	bne.n	8002b46 <ETH_SetMACConfig+0x2e>
 8002b40:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002b44:	e000      	b.n	8002b48 <ETH_SetMACConfig+0x30>
 8002b46:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002b48:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	7c52      	ldrb	r2, [r2, #17]
 8002b4e:	2a00      	cmp	r2, #0
 8002b50:	d102      	bne.n	8002b58 <ETH_SetMACConfig+0x40>
 8002b52:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002b56:	e000      	b.n	8002b5a <ETH_SetMACConfig+0x42>
 8002b58:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002b5a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002b60:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	7fdb      	ldrb	r3, [r3, #31]
 8002b66:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002b68:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002b6e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	7f92      	ldrb	r2, [r2, #30]
 8002b74:	2a00      	cmp	r2, #0
 8002b76:	d102      	bne.n	8002b7e <ETH_SetMACConfig+0x66>
 8002b78:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b7c:	e000      	b.n	8002b80 <ETH_SetMACConfig+0x68>
 8002b7e:	2200      	movs	r2, #0
                        macconf->Speed |
 8002b80:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	7f1b      	ldrb	r3, [r3, #28]
 8002b86:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002b88:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002b8e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	791b      	ldrb	r3, [r3, #4]
 8002b94:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002b96:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002b9e:	2a00      	cmp	r2, #0
 8002ba0:	d102      	bne.n	8002ba8 <ETH_SetMACConfig+0x90>
 8002ba2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ba6:	e000      	b.n	8002baa <ETH_SetMACConfig+0x92>
 8002ba8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002baa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	7bdb      	ldrb	r3, [r3, #15]
 8002bb0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002bb2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002bb8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002bc0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bda:	2001      	movs	r0, #1
 8002bdc:	f7fe ffd2 	bl	8001b84 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bfe:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002c06:	2a00      	cmp	r2, #0
 8002c08:	d101      	bne.n	8002c0e <ETH_SetMACConfig+0xf6>
 8002c0a:	2280      	movs	r2, #128	; 0x80
 8002c0c:	e000      	b.n	8002c10 <ETH_SetMACConfig+0xf8>
 8002c0e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002c10:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002c16:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002c1e:	2a01      	cmp	r2, #1
 8002c20:	d101      	bne.n	8002c26 <ETH_SetMACConfig+0x10e>
 8002c22:	2208      	movs	r2, #8
 8002c24:	e000      	b.n	8002c28 <ETH_SetMACConfig+0x110>
 8002c26:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002c28:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002c30:	2a01      	cmp	r2, #1
 8002c32:	d101      	bne.n	8002c38 <ETH_SetMACConfig+0x120>
 8002c34:	2204      	movs	r2, #4
 8002c36:	e000      	b.n	8002c3a <ETH_SetMACConfig+0x122>
 8002c38:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002c3a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002c42:	2a01      	cmp	r2, #1
 8002c44:	d101      	bne.n	8002c4a <ETH_SetMACConfig+0x132>
 8002c46:	2202      	movs	r2, #2
 8002c48:	e000      	b.n	8002c4c <ETH_SetMACConfig+0x134>
 8002c4a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c64:	2001      	movs	r0, #1
 8002c66:	f7fe ff8d 	bl	8001b84 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	619a      	str	r2, [r3, #24]
}
 8002c72:	bf00      	nop
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	fd20810f 	.word	0xfd20810f

08002c80 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	4b3d      	ldr	r3, [pc, #244]	; (8002d90 <ETH_SetDMAConfig+0x110>)
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	7b1b      	ldrb	r3, [r3, #12]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d102      	bne.n	8002cac <ETH_SetDMAConfig+0x2c>
 8002ca6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002caa:	e000      	b.n	8002cae <ETH_SetDMAConfig+0x2e>
 8002cac:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	7b5b      	ldrb	r3, [r3, #13]
 8002cb2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002cb4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	7f52      	ldrb	r2, [r2, #29]
 8002cba:	2a00      	cmp	r2, #0
 8002cbc:	d102      	bne.n	8002cc4 <ETH_SetDMAConfig+0x44>
 8002cbe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002cc2:	e000      	b.n	8002cc6 <ETH_SetDMAConfig+0x46>
 8002cc4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002cc6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	7b9b      	ldrb	r3, [r3, #14]
 8002ccc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002cce:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002cd4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	7f1b      	ldrb	r3, [r3, #28]
 8002cda:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002cdc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	7f9b      	ldrb	r3, [r3, #30]
 8002ce2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002ce4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002cea:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cf2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d04:	461a      	mov	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d16:	2001      	movs	r0, #1
 8002d18:	f7fe ff34 	bl	8001b84 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d24:	461a      	mov	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	791b      	ldrb	r3, [r3, #4]
 8002d2e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002d34:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002d3a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002d40:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d48:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002d4a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d50:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002d52:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002d58:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	6812      	ldr	r2, [r2, #0]
 8002d5e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d62:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d66:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d74:	2001      	movs	r0, #1
 8002d76:	f7fe ff05 	bl	8001b84 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d82:	461a      	mov	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6013      	str	r3, [r2, #0]
}
 8002d88:	bf00      	nop
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	f8de3f23 	.word	0xf8de3f23

08002d94 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b0a6      	sub	sp, #152	; 0x98
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002da2:	2301      	movs	r3, #1
 8002da4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002da8:	2300      	movs	r3, #0
 8002daa:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002dac:	2300      	movs	r3, #0
 8002dae:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002db2:	2301      	movs	r3, #1
 8002db4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002db8:	2300      	movs	r3, #0
 8002dba:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002de0:	2300      	movs	r3, #0
 8002de2:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002de4:	2300      	movs	r3, #0
 8002de6:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002dea:	2300      	movs	r3, #0
 8002dec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002df0:	2300      	movs	r3, #0
 8002df2:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002df6:	2300      	movs	r3, #0
 8002df8:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002dfc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e00:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002e02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e06:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002e0e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e12:	4619      	mov	r1, r3
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f7ff fe7f 	bl	8002b18 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002e22:	2301      	movs	r3, #1
 8002e24:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002e30:	2300      	movs	r3, #0
 8002e32:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002e36:	2300      	movs	r3, #0
 8002e38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002e40:	2301      	movs	r3, #1
 8002e42:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002e46:	2301      	movs	r3, #1
 8002e48:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002e4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e4e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002e50:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e54:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002e56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e5a:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002e62:	2300      	movs	r3, #0
 8002e64:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002e66:	2300      	movs	r3, #0
 8002e68:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002e6a:	f107 0308 	add.w	r3, r7, #8
 8002e6e:	4619      	mov	r1, r3
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f7ff ff05 	bl	8002c80 <ETH_SetDMAConfig>
}
 8002e76:	bf00      	nop
 8002e78:	3798      	adds	r7, #152	; 0x98
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
	...

08002e80 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b087      	sub	sp, #28
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3305      	adds	r3, #5
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	021b      	lsls	r3, r3, #8
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	3204      	adds	r2, #4
 8002e98:	7812      	ldrb	r2, [r2, #0]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002e9e:	68ba      	ldr	r2, [r7, #8]
 8002ea0:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <ETH_MACAddressConfig+0x68>)
 8002ea2:	4413      	add	r3, r2
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	3303      	adds	r3, #3
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	061a      	lsls	r2, r3, #24
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	3302      	adds	r3, #2
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	041b      	lsls	r3, r3, #16
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	021b      	lsls	r3, r3, #8
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	7812      	ldrb	r2, [r2, #0]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002ece:	68ba      	ldr	r2, [r7, #8]
 8002ed0:	4b06      	ldr	r3, [pc, #24]	; (8002eec <ETH_MACAddressConfig+0x6c>)
 8002ed2:	4413      	add	r3, r2
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	6013      	str	r3, [r2, #0]
}
 8002eda:	bf00      	nop
 8002edc:	371c      	adds	r7, #28
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	40028040 	.word	0x40028040
 8002eec:	40028044 	.word	0x40028044

08002ef0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002ef8:	2300      	movs	r3, #0
 8002efa:	60fb      	str	r3, [r7, #12]
 8002efc:	e03e      	b.n	8002f7c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68d9      	ldr	r1, [r3, #12]
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	4613      	mov	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	4413      	add	r3, r2
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	440b      	add	r3, r1
 8002f0e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	2200      	movs	r2, #0
 8002f14:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	2200      	movs	r2, #0
 8002f26:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002f28:	68b9      	ldr	r1, [r7, #8]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	3206      	adds	r2, #6
 8002f30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d80c      	bhi.n	8002f60 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68d9      	ldr	r1, [r3, #12]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	1c5a      	adds	r2, r3, #1
 8002f4e:	4613      	mov	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	4413      	add	r3, r2
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	440b      	add	r3, r1
 8002f58:	461a      	mov	r2, r3
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	60da      	str	r2, [r3, #12]
 8002f5e:	e004      	b.n	8002f6a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	461a      	mov	r2, r3
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2b03      	cmp	r3, #3
 8002f80:	d9bd      	bls.n	8002efe <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	68da      	ldr	r2, [r3, #12]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f94:	611a      	str	r2, [r3, #16]
}
 8002f96:	bf00      	nop
 8002f98:	3714      	adds	r7, #20
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b085      	sub	sp, #20
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002faa:	2300      	movs	r3, #0
 8002fac:	60fb      	str	r3, [r7, #12]
 8002fae:	e048      	b.n	8003042 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6919      	ldr	r1, [r3, #16]
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4413      	add	r3, r2
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	440b      	add	r3, r1
 8002fc0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002fec:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003006:	68b9      	ldr	r1, [r7, #8]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	3212      	adds	r2, #18
 800300e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2b02      	cmp	r3, #2
 8003016:	d80c      	bhi.n	8003032 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6919      	ldr	r1, [r3, #16]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	1c5a      	adds	r2, r3, #1
 8003020:	4613      	mov	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4413      	add	r3, r2
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	440b      	add	r3, r1
 800302a:	461a      	mov	r2, r3
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	60da      	str	r2, [r3, #12]
 8003030:	e004      	b.n	800303c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	461a      	mov	r2, r3
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	3301      	adds	r3, #1
 8003040:	60fb      	str	r3, [r7, #12]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2b03      	cmp	r3, #3
 8003046:	d9b3      	bls.n	8002fb0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	691a      	ldr	r2, [r3, #16]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003072:	60da      	str	r2, [r3, #12]
}
 8003074:	bf00      	nop
 8003076:	3714      	adds	r7, #20
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8003080:	b480      	push	{r7}
 8003082:	b091      	sub	sp, #68	; 0x44
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	3318      	adds	r3, #24
 8003090:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 800309e:	2300      	movs	r3, #0
 80030a0:	637b      	str	r3, [r7, #52]	; 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030aa:	633b      	str	r3, [r7, #48]	; 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t           bd_count = 0;
 80030b2:	2300      	movs	r3, #0
 80030b4:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80030b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030c2:	d007      	beq.n	80030d4 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80030c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030c8:	3304      	adds	r3, #4
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	4413      	add	r3, r2
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80030d4:	2302      	movs	r3, #2
 80030d6:	e111      	b.n	80032fc <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 80030d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030da:	3301      	adds	r3, #1
 80030dc:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80030de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	461a      	mov	r2, r3
 80030e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e6:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80030e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	4b86      	ldr	r3, [pc, #536]	; (8003308 <ETH_Prepare_Tx_Descriptors+0x288>)
 80030ee:	4013      	ands	r3, r2
 80030f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030f2:	6852      	ldr	r2, [r2, #4]
 80030f4:	431a      	orrs	r2, r3
 80030f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f8:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b00      	cmp	r3, #0
 8003104:	d008      	beq.n	8003118 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8003106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	431a      	orrs	r2, r3
 8003114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003116:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0320 	and.w	r3, r3, #32
 8003120:	2b00      	cmp	r3, #0
 8003122:	d008      	beq.n	8003136 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	431a      	orrs	r2, r3
 8003132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003134:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0304 	and.w	r3, r3, #4
 800313e:	2b00      	cmp	r3, #0
 8003140:	d005      	beq.n	800314e <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8003142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800314a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800314e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003158:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800315a:	e082      	b.n	8003262 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800315c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003166:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d006      	beq.n	800317c <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800316e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	e005      	b.n	8003188 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800317c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003186:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800318a:	3301      	adds	r3, #1
 800318c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800318e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003190:	2b03      	cmp	r3, #3
 8003192:	d902      	bls.n	800319a <ETH_Prepare_Tx_Descriptors+0x11a>
 8003194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003196:	3b04      	subs	r3, #4
 8003198:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800319a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800319e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031a2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80031a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031b0:	d007      	beq.n	80031c2 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80031b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031b6:	3304      	adds	r3, #4
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	4413      	add	r3, r2
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d029      	beq.n	8003216 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 80031c2:	6a3b      	ldr	r3, [r7, #32]
 80031c4:	63fb      	str	r3, [r7, #60]	; 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031ce:	633b      	str	r3, [r7, #48]	; 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80031d0:	2300      	movs	r3, #0
 80031d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80031d4:	e019      	b.n	800320a <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 80031d6:	f3bf 8f5f 	dmb	sy
}
 80031da:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80031dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e6:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80031e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ea:	3301      	adds	r3, #1
 80031ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031f0:	2b03      	cmp	r3, #3
 80031f2:	d902      	bls.n	80031fa <ETH_Prepare_Tx_Descriptors+0x17a>
 80031f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031f6:	3b04      	subs	r3, #4
 80031f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003202:	633b      	str	r3, [r7, #48]	; 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8003204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003206:	3301      	adds	r3, #1
 8003208:	63bb      	str	r3, [r7, #56]	; 0x38
 800320a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800320c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800320e:	429a      	cmp	r2, r3
 8003210:	d3e1      	bcc.n	80031d6 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8003212:	2302      	movs	r3, #2
 8003214:	e072      	b.n	80032fc <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800321e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003220:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8003222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003224:	3301      	adds	r3, #1
 8003226:	637b      	str	r3, [r7, #52]	; 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800322e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	461a      	mov	r2, r3
 8003234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003236:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323a:	685a      	ldr	r2, [r3, #4]
 800323c:	4b32      	ldr	r3, [pc, #200]	; (8003308 <ETH_Prepare_Tx_Descriptors+0x288>)
 800323e:	4013      	ands	r3, r2
 8003240:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003242:	6852      	ldr	r2, [r2, #4]
 8003244:	431a      	orrs	r2, r3
 8003246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003248:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800324a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324c:	3301      	adds	r3, #1
 800324e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8003250:	f3bf 8f5f 	dmb	sy
}
 8003254:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800325e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003260:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8003262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	2b00      	cmp	r3, #0
 8003268:	f47f af78 	bne.w	800315c <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d006      	beq.n	8003280 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800327a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	e005      	b.n	800328c <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328a:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800328c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003296:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329a:	6a3a      	ldr	r2, [r7, #32]
 800329c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032a0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80032a2:	f3bf 8f5f 	dmb	sy
}
 80032a6:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80032a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80032b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b2:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80032b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032bc:	3304      	adds	r3, #4
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	440b      	add	r3, r1
 80032c2:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80032c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032c8:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032ca:	f3ef 8310 	mrs	r3, PRIMASK
 80032ce:	613b      	str	r3, [r7, #16]
  return(result);
 80032d0:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80032d2:	61fb      	str	r3, [r7, #28]
 80032d4:	2301      	movs	r3, #1
 80032d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	f383 8810 	msr	PRIMASK, r3
}
 80032de:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80032e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e6:	4413      	add	r3, r2
 80032e8:	1c5a      	adds	r2, r3, #1
 80032ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ec:	629a      	str	r2, [r3, #40]	; 0x28
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	f383 8810 	msr	PRIMASK, r3
}
 80032f8:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3744      	adds	r7, #68	; 0x44
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	ffffe000 	.word	0xffffe000

0800330c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800330c:	b480      	push	{r7}
 800330e:	b089      	sub	sp, #36	; 0x24
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003316:	2300      	movs	r3, #0
 8003318:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800331a:	2300      	movs	r3, #0
 800331c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800331e:	2300      	movs	r3, #0
 8003320:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003322:	2300      	movs	r3, #0
 8003324:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003326:	2300      	movs	r3, #0
 8003328:	61fb      	str	r3, [r7, #28]
 800332a:	e175      	b.n	8003618 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800332c:	2201      	movs	r2, #1
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	4013      	ands	r3, r2
 800333e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	429a      	cmp	r2, r3
 8003346:	f040 8164 	bne.w	8003612 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f003 0303 	and.w	r3, r3, #3
 8003352:	2b01      	cmp	r3, #1
 8003354:	d005      	beq.n	8003362 <HAL_GPIO_Init+0x56>
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f003 0303 	and.w	r3, r3, #3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d130      	bne.n	80033c4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	2203      	movs	r2, #3
 800336e:	fa02 f303 	lsl.w	r3, r2, r3
 8003372:	43db      	mvns	r3, r3
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	4013      	ands	r3, r2
 8003378:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	68da      	ldr	r2, [r3, #12]
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	fa02 f303 	lsl.w	r3, r2, r3
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	4313      	orrs	r3, r2
 800338a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	69ba      	ldr	r2, [r7, #24]
 8003390:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003398:	2201      	movs	r2, #1
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	43db      	mvns	r3, r3
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	4013      	ands	r3, r2
 80033a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	091b      	lsrs	r3, r3, #4
 80033ae:	f003 0201 	and.w	r2, r3, #1
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f003 0303 	and.w	r3, r3, #3
 80033cc:	2b03      	cmp	r3, #3
 80033ce:	d017      	beq.n	8003400 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	2203      	movs	r2, #3
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	43db      	mvns	r3, r3
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	4013      	ands	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f003 0303 	and.w	r3, r3, #3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d123      	bne.n	8003454 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	08da      	lsrs	r2, r3, #3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	3208      	adds	r2, #8
 8003414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003418:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	f003 0307 	and.w	r3, r3, #7
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	220f      	movs	r2, #15
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	43db      	mvns	r3, r3
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	4013      	ands	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	691a      	ldr	r2, [r3, #16]
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	f003 0307 	and.w	r3, r3, #7
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	4313      	orrs	r3, r2
 8003444:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	08da      	lsrs	r2, r3, #3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	3208      	adds	r2, #8
 800344e:	69b9      	ldr	r1, [r7, #24]
 8003450:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	2203      	movs	r2, #3
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	43db      	mvns	r3, r3
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	4013      	ands	r3, r2
 800346a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f003 0203 	and.w	r2, r3, #3
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	4313      	orrs	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003490:	2b00      	cmp	r3, #0
 8003492:	f000 80be 	beq.w	8003612 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003496:	4b66      	ldr	r3, [pc, #408]	; (8003630 <HAL_GPIO_Init+0x324>)
 8003498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349a:	4a65      	ldr	r2, [pc, #404]	; (8003630 <HAL_GPIO_Init+0x324>)
 800349c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034a0:	6453      	str	r3, [r2, #68]	; 0x44
 80034a2:	4b63      	ldr	r3, [pc, #396]	; (8003630 <HAL_GPIO_Init+0x324>)
 80034a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034aa:	60fb      	str	r3, [r7, #12]
 80034ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80034ae:	4a61      	ldr	r2, [pc, #388]	; (8003634 <HAL_GPIO_Init+0x328>)
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	089b      	lsrs	r3, r3, #2
 80034b4:	3302      	adds	r3, #2
 80034b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	f003 0303 	and.w	r3, r3, #3
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	220f      	movs	r2, #15
 80034c6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ca:	43db      	mvns	r3, r3
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	4013      	ands	r3, r2
 80034d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a58      	ldr	r2, [pc, #352]	; (8003638 <HAL_GPIO_Init+0x32c>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d037      	beq.n	800354a <HAL_GPIO_Init+0x23e>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a57      	ldr	r2, [pc, #348]	; (800363c <HAL_GPIO_Init+0x330>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d031      	beq.n	8003546 <HAL_GPIO_Init+0x23a>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a56      	ldr	r2, [pc, #344]	; (8003640 <HAL_GPIO_Init+0x334>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d02b      	beq.n	8003542 <HAL_GPIO_Init+0x236>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a55      	ldr	r2, [pc, #340]	; (8003644 <HAL_GPIO_Init+0x338>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d025      	beq.n	800353e <HAL_GPIO_Init+0x232>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a54      	ldr	r2, [pc, #336]	; (8003648 <HAL_GPIO_Init+0x33c>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d01f      	beq.n	800353a <HAL_GPIO_Init+0x22e>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a53      	ldr	r2, [pc, #332]	; (800364c <HAL_GPIO_Init+0x340>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d019      	beq.n	8003536 <HAL_GPIO_Init+0x22a>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a52      	ldr	r2, [pc, #328]	; (8003650 <HAL_GPIO_Init+0x344>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d013      	beq.n	8003532 <HAL_GPIO_Init+0x226>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a51      	ldr	r2, [pc, #324]	; (8003654 <HAL_GPIO_Init+0x348>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d00d      	beq.n	800352e <HAL_GPIO_Init+0x222>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a50      	ldr	r2, [pc, #320]	; (8003658 <HAL_GPIO_Init+0x34c>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d007      	beq.n	800352a <HAL_GPIO_Init+0x21e>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a4f      	ldr	r2, [pc, #316]	; (800365c <HAL_GPIO_Init+0x350>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d101      	bne.n	8003526 <HAL_GPIO_Init+0x21a>
 8003522:	2309      	movs	r3, #9
 8003524:	e012      	b.n	800354c <HAL_GPIO_Init+0x240>
 8003526:	230a      	movs	r3, #10
 8003528:	e010      	b.n	800354c <HAL_GPIO_Init+0x240>
 800352a:	2308      	movs	r3, #8
 800352c:	e00e      	b.n	800354c <HAL_GPIO_Init+0x240>
 800352e:	2307      	movs	r3, #7
 8003530:	e00c      	b.n	800354c <HAL_GPIO_Init+0x240>
 8003532:	2306      	movs	r3, #6
 8003534:	e00a      	b.n	800354c <HAL_GPIO_Init+0x240>
 8003536:	2305      	movs	r3, #5
 8003538:	e008      	b.n	800354c <HAL_GPIO_Init+0x240>
 800353a:	2304      	movs	r3, #4
 800353c:	e006      	b.n	800354c <HAL_GPIO_Init+0x240>
 800353e:	2303      	movs	r3, #3
 8003540:	e004      	b.n	800354c <HAL_GPIO_Init+0x240>
 8003542:	2302      	movs	r3, #2
 8003544:	e002      	b.n	800354c <HAL_GPIO_Init+0x240>
 8003546:	2301      	movs	r3, #1
 8003548:	e000      	b.n	800354c <HAL_GPIO_Init+0x240>
 800354a:	2300      	movs	r3, #0
 800354c:	69fa      	ldr	r2, [r7, #28]
 800354e:	f002 0203 	and.w	r2, r2, #3
 8003552:	0092      	lsls	r2, r2, #2
 8003554:	4093      	lsls	r3, r2
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	4313      	orrs	r3, r2
 800355a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800355c:	4935      	ldr	r1, [pc, #212]	; (8003634 <HAL_GPIO_Init+0x328>)
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	089b      	lsrs	r3, r3, #2
 8003562:	3302      	adds	r3, #2
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800356a:	4b3d      	ldr	r3, [pc, #244]	; (8003660 <HAL_GPIO_Init+0x354>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	43db      	mvns	r3, r3
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	4013      	ands	r3, r2
 8003578:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d003      	beq.n	800358e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	4313      	orrs	r3, r2
 800358c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800358e:	4a34      	ldr	r2, [pc, #208]	; (8003660 <HAL_GPIO_Init+0x354>)
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003594:	4b32      	ldr	r3, [pc, #200]	; (8003660 <HAL_GPIO_Init+0x354>)
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	43db      	mvns	r3, r3
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	4013      	ands	r3, r2
 80035a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d003      	beq.n	80035b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035b8:	4a29      	ldr	r2, [pc, #164]	; (8003660 <HAL_GPIO_Init+0x354>)
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035be:	4b28      	ldr	r3, [pc, #160]	; (8003660 <HAL_GPIO_Init+0x354>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	43db      	mvns	r3, r3
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	4013      	ands	r3, r2
 80035cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	4313      	orrs	r3, r2
 80035e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035e2:	4a1f      	ldr	r2, [pc, #124]	; (8003660 <HAL_GPIO_Init+0x354>)
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035e8:	4b1d      	ldr	r3, [pc, #116]	; (8003660 <HAL_GPIO_Init+0x354>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	43db      	mvns	r3, r3
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	4013      	ands	r3, r2
 80035f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d003      	beq.n	800360c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	4313      	orrs	r3, r2
 800360a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800360c:	4a14      	ldr	r2, [pc, #80]	; (8003660 <HAL_GPIO_Init+0x354>)
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	3301      	adds	r3, #1
 8003616:	61fb      	str	r3, [r7, #28]
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	2b0f      	cmp	r3, #15
 800361c:	f67f ae86 	bls.w	800332c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003620:	bf00      	nop
 8003622:	bf00      	nop
 8003624:	3724      	adds	r7, #36	; 0x24
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	40023800 	.word	0x40023800
 8003634:	40013800 	.word	0x40013800
 8003638:	40020000 	.word	0x40020000
 800363c:	40020400 	.word	0x40020400
 8003640:	40020800 	.word	0x40020800
 8003644:	40020c00 	.word	0x40020c00
 8003648:	40021000 	.word	0x40021000
 800364c:	40021400 	.word	0x40021400
 8003650:	40021800 	.word	0x40021800
 8003654:	40021c00 	.word	0x40021c00
 8003658:	40022000 	.word	0x40022000
 800365c:	40022400 	.word	0x40022400
 8003660:	40013c00 	.word	0x40013c00

08003664 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	460b      	mov	r3, r1
 800366e:	807b      	strh	r3, [r7, #2]
 8003670:	4613      	mov	r3, r2
 8003672:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003674:	787b      	ldrb	r3, [r7, #1]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800367a:	887a      	ldrh	r2, [r7, #2]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003680:	e003      	b.n	800368a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003682:	887b      	ldrh	r3, [r7, #2]
 8003684:	041a      	lsls	r2, r3, #16
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	619a      	str	r2, [r3, #24]
}
 800368a:	bf00      	nop
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr

08003696 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003696:	b480      	push	{r7}
 8003698:	b085      	sub	sp, #20
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
 800369e:	460b      	mov	r3, r1
 80036a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80036a8:	887a      	ldrh	r2, [r7, #2]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	4013      	ands	r3, r2
 80036ae:	041a      	lsls	r2, r3, #16
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	43d9      	mvns	r1, r3
 80036b4:	887b      	ldrh	r3, [r7, #2]
 80036b6:	400b      	ands	r3, r1
 80036b8:	431a      	orrs	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	619a      	str	r2, [r3, #24]
}
 80036be:	bf00      	nop
 80036c0:	3714      	adds	r7, #20
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
	...

080036cc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80036d2:	2300      	movs	r3, #0
 80036d4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80036d6:	4b23      	ldr	r3, [pc, #140]	; (8003764 <HAL_PWREx_EnableOverDrive+0x98>)
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	4a22      	ldr	r2, [pc, #136]	; (8003764 <HAL_PWREx_EnableOverDrive+0x98>)
 80036dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036e0:	6413      	str	r3, [r2, #64]	; 0x40
 80036e2:	4b20      	ldr	r3, [pc, #128]	; (8003764 <HAL_PWREx_EnableOverDrive+0x98>)
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ea:	603b      	str	r3, [r7, #0]
 80036ec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80036ee:	4b1e      	ldr	r3, [pc, #120]	; (8003768 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a1d      	ldr	r2, [pc, #116]	; (8003768 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036f8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036fa:	f7fe fa37 	bl	8001b6c <HAL_GetTick>
 80036fe:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003700:	e009      	b.n	8003716 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003702:	f7fe fa33 	bl	8001b6c <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003710:	d901      	bls.n	8003716 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e022      	b.n	800375c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003716:	4b14      	ldr	r3, [pc, #80]	; (8003768 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800371e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003722:	d1ee      	bne.n	8003702 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003724:	4b10      	ldr	r3, [pc, #64]	; (8003768 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a0f      	ldr	r2, [pc, #60]	; (8003768 <HAL_PWREx_EnableOverDrive+0x9c>)
 800372a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800372e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003730:	f7fe fa1c 	bl	8001b6c <HAL_GetTick>
 8003734:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003736:	e009      	b.n	800374c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003738:	f7fe fa18 	bl	8001b6c <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003746:	d901      	bls.n	800374c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e007      	b.n	800375c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800374c:	4b06      	ldr	r3, [pc, #24]	; (8003768 <HAL_PWREx_EnableOverDrive+0x9c>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003754:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003758:	d1ee      	bne.n	8003738 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	40023800 	.word	0x40023800
 8003768:	40007000 	.word	0x40007000

0800376c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003774:	2300      	movs	r3, #0
 8003776:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e29b      	b.n	8003cba <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b00      	cmp	r3, #0
 800378c:	f000 8087 	beq.w	800389e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003790:	4b96      	ldr	r3, [pc, #600]	; (80039ec <HAL_RCC_OscConfig+0x280>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f003 030c 	and.w	r3, r3, #12
 8003798:	2b04      	cmp	r3, #4
 800379a:	d00c      	beq.n	80037b6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800379c:	4b93      	ldr	r3, [pc, #588]	; (80039ec <HAL_RCC_OscConfig+0x280>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f003 030c 	and.w	r3, r3, #12
 80037a4:	2b08      	cmp	r3, #8
 80037a6:	d112      	bne.n	80037ce <HAL_RCC_OscConfig+0x62>
 80037a8:	4b90      	ldr	r3, [pc, #576]	; (80039ec <HAL_RCC_OscConfig+0x280>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037b4:	d10b      	bne.n	80037ce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037b6:	4b8d      	ldr	r3, [pc, #564]	; (80039ec <HAL_RCC_OscConfig+0x280>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d06c      	beq.n	800389c <HAL_RCC_OscConfig+0x130>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d168      	bne.n	800389c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e275      	b.n	8003cba <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037d6:	d106      	bne.n	80037e6 <HAL_RCC_OscConfig+0x7a>
 80037d8:	4b84      	ldr	r3, [pc, #528]	; (80039ec <HAL_RCC_OscConfig+0x280>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a83      	ldr	r2, [pc, #524]	; (80039ec <HAL_RCC_OscConfig+0x280>)
 80037de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037e2:	6013      	str	r3, [r2, #0]
 80037e4:	e02e      	b.n	8003844 <HAL_RCC_OscConfig+0xd8>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10c      	bne.n	8003808 <HAL_RCC_OscConfig+0x9c>
 80037ee:	4b7f      	ldr	r3, [pc, #508]	; (80039ec <HAL_RCC_OscConfig+0x280>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a7e      	ldr	r2, [pc, #504]	; (80039ec <HAL_RCC_OscConfig+0x280>)
 80037f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037f8:	6013      	str	r3, [r2, #0]
 80037fa:	4b7c      	ldr	r3, [pc, #496]	; (80039ec <HAL_RCC_OscConfig+0x280>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a7b      	ldr	r2, [pc, #492]	; (80039ec <HAL_RCC_OscConfig+0x280>)
 8003800:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003804:	6013      	str	r3, [r2, #0]
 8003806:	e01d      	b.n	8003844 <HAL_RCC_OscConfig+0xd8>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003810:	d10c      	bne.n	800382c <HAL_RCC_OscConfig+0xc0>
 8003812:	4b76      	ldr	r3, [pc, #472]	; (80039ec <HAL_RCC_OscConfig+0x280>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a75      	ldr	r2, [pc, #468]	; (80039ec <HAL_RCC_OscConfig+0x280>)
 8003818:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800381c:	6013      	str	r3, [r2, #0]
 800381e:	4b73      	ldr	r3, [pc, #460]	; (80039ec <HAL_RCC_OscConfig+0x280>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a72      	ldr	r2, [pc, #456]	; (80039ec <HAL_RCC_OscConfig+0x280>)
 8003824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003828:	6013      	str	r3, [r2, #0]
 800382a:	e00b      	b.n	8003844 <HAL_RCC_OscConfig+0xd8>
 800382c:	4b6f      	ldr	r3, [pc, #444]	; (80039ec <HAL_RCC_OscConfig+0x280>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a6e      	ldr	r2, [pc, #440]	; (80039ec <HAL_RCC_OscConfig+0x280>)
 8003832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003836:	6013      	str	r3, [r2, #0]
 8003838:	4b6c      	ldr	r3, [pc, #432]	; (80039ec <HAL_RCC_OscConfig+0x280>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a6b      	ldr	r2, [pc, #428]	; (80039ec <HAL_RCC_OscConfig+0x280>)
 800383e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003842:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d013      	beq.n	8003874 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800384c:	f7fe f98e 	bl	8001b6c <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003854:	f7fe f98a 	bl	8001b6c <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b64      	cmp	r3, #100	; 0x64
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e229      	b.n	8003cba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003866:	4b61      	ldr	r3, [pc, #388]	; (80039ec <HAL_RCC_OscConfig+0x280>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d0f0      	beq.n	8003854 <HAL_RCC_OscConfig+0xe8>
 8003872:	e014      	b.n	800389e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003874:	f7fe f97a 	bl	8001b6c <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800387c:	f7fe f976 	bl	8001b6c <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b64      	cmp	r3, #100	; 0x64
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e215      	b.n	8003cba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800388e:	4b57      	ldr	r3, [pc, #348]	; (80039ec <HAL_RCC_OscConfig+0x280>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1f0      	bne.n	800387c <HAL_RCC_OscConfig+0x110>
 800389a:	e000      	b.n	800389e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800389c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d069      	beq.n	800397e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038aa:	4b50      	ldr	r3, [pc, #320]	; (80039ec <HAL_RCC_OscConfig+0x280>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f003 030c 	and.w	r3, r3, #12
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00b      	beq.n	80038ce <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038b6:	4b4d      	ldr	r3, [pc, #308]	; (80039ec <HAL_RCC_OscConfig+0x280>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f003 030c 	and.w	r3, r3, #12
 80038be:	2b08      	cmp	r3, #8
 80038c0:	d11c      	bne.n	80038fc <HAL_RCC_OscConfig+0x190>
 80038c2:	4b4a      	ldr	r3, [pc, #296]	; (80039ec <HAL_RCC_OscConfig+0x280>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d116      	bne.n	80038fc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ce:	4b47      	ldr	r3, [pc, #284]	; (80039ec <HAL_RCC_OscConfig+0x280>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d005      	beq.n	80038e6 <HAL_RCC_OscConfig+0x17a>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d001      	beq.n	80038e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e1e9      	b.n	8003cba <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038e6:	4b41      	ldr	r3, [pc, #260]	; (80039ec <HAL_RCC_OscConfig+0x280>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	493d      	ldr	r1, [pc, #244]	; (80039ec <HAL_RCC_OscConfig+0x280>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038fa:	e040      	b.n	800397e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d023      	beq.n	800394c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003904:	4b39      	ldr	r3, [pc, #228]	; (80039ec <HAL_RCC_OscConfig+0x280>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a38      	ldr	r2, [pc, #224]	; (80039ec <HAL_RCC_OscConfig+0x280>)
 800390a:	f043 0301 	orr.w	r3, r3, #1
 800390e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003910:	f7fe f92c 	bl	8001b6c <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003918:	f7fe f928 	bl	8001b6c <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e1c7      	b.n	8003cba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800392a:	4b30      	ldr	r3, [pc, #192]	; (80039ec <HAL_RCC_OscConfig+0x280>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d0f0      	beq.n	8003918 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003936:	4b2d      	ldr	r3, [pc, #180]	; (80039ec <HAL_RCC_OscConfig+0x280>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	4929      	ldr	r1, [pc, #164]	; (80039ec <HAL_RCC_OscConfig+0x280>)
 8003946:	4313      	orrs	r3, r2
 8003948:	600b      	str	r3, [r1, #0]
 800394a:	e018      	b.n	800397e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800394c:	4b27      	ldr	r3, [pc, #156]	; (80039ec <HAL_RCC_OscConfig+0x280>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a26      	ldr	r2, [pc, #152]	; (80039ec <HAL_RCC_OscConfig+0x280>)
 8003952:	f023 0301 	bic.w	r3, r3, #1
 8003956:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003958:	f7fe f908 	bl	8001b6c <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003960:	f7fe f904 	bl	8001b6c <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e1a3      	b.n	8003cba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003972:	4b1e      	ldr	r3, [pc, #120]	; (80039ec <HAL_RCC_OscConfig+0x280>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1f0      	bne.n	8003960 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0308 	and.w	r3, r3, #8
 8003986:	2b00      	cmp	r3, #0
 8003988:	d038      	beq.n	80039fc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d019      	beq.n	80039c6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003992:	4b16      	ldr	r3, [pc, #88]	; (80039ec <HAL_RCC_OscConfig+0x280>)
 8003994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003996:	4a15      	ldr	r2, [pc, #84]	; (80039ec <HAL_RCC_OscConfig+0x280>)
 8003998:	f043 0301 	orr.w	r3, r3, #1
 800399c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800399e:	f7fe f8e5 	bl	8001b6c <HAL_GetTick>
 80039a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039a4:	e008      	b.n	80039b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039a6:	f7fe f8e1 	bl	8001b6c <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d901      	bls.n	80039b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e180      	b.n	8003cba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039b8:	4b0c      	ldr	r3, [pc, #48]	; (80039ec <HAL_RCC_OscConfig+0x280>)
 80039ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039bc:	f003 0302 	and.w	r3, r3, #2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d0f0      	beq.n	80039a6 <HAL_RCC_OscConfig+0x23a>
 80039c4:	e01a      	b.n	80039fc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039c6:	4b09      	ldr	r3, [pc, #36]	; (80039ec <HAL_RCC_OscConfig+0x280>)
 80039c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ca:	4a08      	ldr	r2, [pc, #32]	; (80039ec <HAL_RCC_OscConfig+0x280>)
 80039cc:	f023 0301 	bic.w	r3, r3, #1
 80039d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d2:	f7fe f8cb 	bl	8001b6c <HAL_GetTick>
 80039d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039d8:	e00a      	b.n	80039f0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039da:	f7fe f8c7 	bl	8001b6c <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d903      	bls.n	80039f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e166      	b.n	8003cba <HAL_RCC_OscConfig+0x54e>
 80039ec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039f0:	4b92      	ldr	r3, [pc, #584]	; (8003c3c <HAL_RCC_OscConfig+0x4d0>)
 80039f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039f4:	f003 0302 	and.w	r3, r3, #2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1ee      	bne.n	80039da <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 80a4 	beq.w	8003b52 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a0a:	4b8c      	ldr	r3, [pc, #560]	; (8003c3c <HAL_RCC_OscConfig+0x4d0>)
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10d      	bne.n	8003a32 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a16:	4b89      	ldr	r3, [pc, #548]	; (8003c3c <HAL_RCC_OscConfig+0x4d0>)
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	4a88      	ldr	r2, [pc, #544]	; (8003c3c <HAL_RCC_OscConfig+0x4d0>)
 8003a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a20:	6413      	str	r3, [r2, #64]	; 0x40
 8003a22:	4b86      	ldr	r3, [pc, #536]	; (8003c3c <HAL_RCC_OscConfig+0x4d0>)
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a2a:	60bb      	str	r3, [r7, #8]
 8003a2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a32:	4b83      	ldr	r3, [pc, #524]	; (8003c40 <HAL_RCC_OscConfig+0x4d4>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d118      	bne.n	8003a70 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003a3e:	4b80      	ldr	r3, [pc, #512]	; (8003c40 <HAL_RCC_OscConfig+0x4d4>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a7f      	ldr	r2, [pc, #508]	; (8003c40 <HAL_RCC_OscConfig+0x4d4>)
 8003a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a4a:	f7fe f88f 	bl	8001b6c <HAL_GetTick>
 8003a4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a50:	e008      	b.n	8003a64 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a52:	f7fe f88b 	bl	8001b6c <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b64      	cmp	r3, #100	; 0x64
 8003a5e:	d901      	bls.n	8003a64 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e12a      	b.n	8003cba <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a64:	4b76      	ldr	r3, [pc, #472]	; (8003c40 <HAL_RCC_OscConfig+0x4d4>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d0f0      	beq.n	8003a52 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d106      	bne.n	8003a86 <HAL_RCC_OscConfig+0x31a>
 8003a78:	4b70      	ldr	r3, [pc, #448]	; (8003c3c <HAL_RCC_OscConfig+0x4d0>)
 8003a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7c:	4a6f      	ldr	r2, [pc, #444]	; (8003c3c <HAL_RCC_OscConfig+0x4d0>)
 8003a7e:	f043 0301 	orr.w	r3, r3, #1
 8003a82:	6713      	str	r3, [r2, #112]	; 0x70
 8003a84:	e02d      	b.n	8003ae2 <HAL_RCC_OscConfig+0x376>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10c      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x33c>
 8003a8e:	4b6b      	ldr	r3, [pc, #428]	; (8003c3c <HAL_RCC_OscConfig+0x4d0>)
 8003a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a92:	4a6a      	ldr	r2, [pc, #424]	; (8003c3c <HAL_RCC_OscConfig+0x4d0>)
 8003a94:	f023 0301 	bic.w	r3, r3, #1
 8003a98:	6713      	str	r3, [r2, #112]	; 0x70
 8003a9a:	4b68      	ldr	r3, [pc, #416]	; (8003c3c <HAL_RCC_OscConfig+0x4d0>)
 8003a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9e:	4a67      	ldr	r2, [pc, #412]	; (8003c3c <HAL_RCC_OscConfig+0x4d0>)
 8003aa0:	f023 0304 	bic.w	r3, r3, #4
 8003aa4:	6713      	str	r3, [r2, #112]	; 0x70
 8003aa6:	e01c      	b.n	8003ae2 <HAL_RCC_OscConfig+0x376>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	2b05      	cmp	r3, #5
 8003aae:	d10c      	bne.n	8003aca <HAL_RCC_OscConfig+0x35e>
 8003ab0:	4b62      	ldr	r3, [pc, #392]	; (8003c3c <HAL_RCC_OscConfig+0x4d0>)
 8003ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab4:	4a61      	ldr	r2, [pc, #388]	; (8003c3c <HAL_RCC_OscConfig+0x4d0>)
 8003ab6:	f043 0304 	orr.w	r3, r3, #4
 8003aba:	6713      	str	r3, [r2, #112]	; 0x70
 8003abc:	4b5f      	ldr	r3, [pc, #380]	; (8003c3c <HAL_RCC_OscConfig+0x4d0>)
 8003abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac0:	4a5e      	ldr	r2, [pc, #376]	; (8003c3c <HAL_RCC_OscConfig+0x4d0>)
 8003ac2:	f043 0301 	orr.w	r3, r3, #1
 8003ac6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ac8:	e00b      	b.n	8003ae2 <HAL_RCC_OscConfig+0x376>
 8003aca:	4b5c      	ldr	r3, [pc, #368]	; (8003c3c <HAL_RCC_OscConfig+0x4d0>)
 8003acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ace:	4a5b      	ldr	r2, [pc, #364]	; (8003c3c <HAL_RCC_OscConfig+0x4d0>)
 8003ad0:	f023 0301 	bic.w	r3, r3, #1
 8003ad4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ad6:	4b59      	ldr	r3, [pc, #356]	; (8003c3c <HAL_RCC_OscConfig+0x4d0>)
 8003ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ada:	4a58      	ldr	r2, [pc, #352]	; (8003c3c <HAL_RCC_OscConfig+0x4d0>)
 8003adc:	f023 0304 	bic.w	r3, r3, #4
 8003ae0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d015      	beq.n	8003b16 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aea:	f7fe f83f 	bl	8001b6c <HAL_GetTick>
 8003aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af0:	e00a      	b.n	8003b08 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003af2:	f7fe f83b 	bl	8001b6c <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d901      	bls.n	8003b08 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e0d8      	b.n	8003cba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b08:	4b4c      	ldr	r3, [pc, #304]	; (8003c3c <HAL_RCC_OscConfig+0x4d0>)
 8003b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0ee      	beq.n	8003af2 <HAL_RCC_OscConfig+0x386>
 8003b14:	e014      	b.n	8003b40 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b16:	f7fe f829 	bl	8001b6c <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b1c:	e00a      	b.n	8003b34 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b1e:	f7fe f825 	bl	8001b6c <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d901      	bls.n	8003b34 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e0c2      	b.n	8003cba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b34:	4b41      	ldr	r3, [pc, #260]	; (8003c3c <HAL_RCC_OscConfig+0x4d0>)
 8003b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1ee      	bne.n	8003b1e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b40:	7dfb      	ldrb	r3, [r7, #23]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d105      	bne.n	8003b52 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b46:	4b3d      	ldr	r3, [pc, #244]	; (8003c3c <HAL_RCC_OscConfig+0x4d0>)
 8003b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4a:	4a3c      	ldr	r2, [pc, #240]	; (8003c3c <HAL_RCC_OscConfig+0x4d0>)
 8003b4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b50:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f000 80ae 	beq.w	8003cb8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b5c:	4b37      	ldr	r3, [pc, #220]	; (8003c3c <HAL_RCC_OscConfig+0x4d0>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f003 030c 	and.w	r3, r3, #12
 8003b64:	2b08      	cmp	r3, #8
 8003b66:	d06d      	beq.n	8003c44 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d14b      	bne.n	8003c08 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b70:	4b32      	ldr	r3, [pc, #200]	; (8003c3c <HAL_RCC_OscConfig+0x4d0>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a31      	ldr	r2, [pc, #196]	; (8003c3c <HAL_RCC_OscConfig+0x4d0>)
 8003b76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7c:	f7fd fff6 	bl	8001b6c <HAL_GetTick>
 8003b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b84:	f7fd fff2 	bl	8001b6c <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e091      	b.n	8003cba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b96:	4b29      	ldr	r3, [pc, #164]	; (8003c3c <HAL_RCC_OscConfig+0x4d0>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1f0      	bne.n	8003b84 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	69da      	ldr	r2, [r3, #28]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	431a      	orrs	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb0:	019b      	lsls	r3, r3, #6
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb8:	085b      	lsrs	r3, r3, #1
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	041b      	lsls	r3, r3, #16
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc4:	061b      	lsls	r3, r3, #24
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bcc:	071b      	lsls	r3, r3, #28
 8003bce:	491b      	ldr	r1, [pc, #108]	; (8003c3c <HAL_RCC_OscConfig+0x4d0>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bd4:	4b19      	ldr	r3, [pc, #100]	; (8003c3c <HAL_RCC_OscConfig+0x4d0>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a18      	ldr	r2, [pc, #96]	; (8003c3c <HAL_RCC_OscConfig+0x4d0>)
 8003bda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be0:	f7fd ffc4 	bl	8001b6c <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003be6:	e008      	b.n	8003bfa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003be8:	f7fd ffc0 	bl	8001b6c <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e05f      	b.n	8003cba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bfa:	4b10      	ldr	r3, [pc, #64]	; (8003c3c <HAL_RCC_OscConfig+0x4d0>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d0f0      	beq.n	8003be8 <HAL_RCC_OscConfig+0x47c>
 8003c06:	e057      	b.n	8003cb8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c08:	4b0c      	ldr	r3, [pc, #48]	; (8003c3c <HAL_RCC_OscConfig+0x4d0>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a0b      	ldr	r2, [pc, #44]	; (8003c3c <HAL_RCC_OscConfig+0x4d0>)
 8003c0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c14:	f7fd ffaa 	bl	8001b6c <HAL_GetTick>
 8003c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c1a:	e008      	b.n	8003c2e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c1c:	f7fd ffa6 	bl	8001b6c <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e045      	b.n	8003cba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c2e:	4b03      	ldr	r3, [pc, #12]	; (8003c3c <HAL_RCC_OscConfig+0x4d0>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1f0      	bne.n	8003c1c <HAL_RCC_OscConfig+0x4b0>
 8003c3a:	e03d      	b.n	8003cb8 <HAL_RCC_OscConfig+0x54c>
 8003c3c:	40023800 	.word	0x40023800
 8003c40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003c44:	4b1f      	ldr	r3, [pc, #124]	; (8003cc4 <HAL_RCC_OscConfig+0x558>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d030      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d129      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d122      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c74:	4013      	ands	r3, r2
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c7a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d119      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8a:	085b      	lsrs	r3, r3, #1
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d10f      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d107      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cae:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d001      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e000      	b.n	8003cba <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3718      	adds	r7, #24
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	40023800 	.word	0x40023800

08003cc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d101      	bne.n	8003ce0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e0d0      	b.n	8003e82 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ce0:	4b6a      	ldr	r3, [pc, #424]	; (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 030f 	and.w	r3, r3, #15
 8003ce8:	683a      	ldr	r2, [r7, #0]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d910      	bls.n	8003d10 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cee:	4b67      	ldr	r3, [pc, #412]	; (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f023 020f 	bic.w	r2, r3, #15
 8003cf6:	4965      	ldr	r1, [pc, #404]	; (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cfe:	4b63      	ldr	r3, [pc, #396]	; (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 030f 	and.w	r3, r3, #15
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d001      	beq.n	8003d10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e0b8      	b.n	8003e82 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d020      	beq.n	8003d5e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0304 	and.w	r3, r3, #4
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d005      	beq.n	8003d34 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d28:	4b59      	ldr	r3, [pc, #356]	; (8003e90 <HAL_RCC_ClockConfig+0x1c8>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	4a58      	ldr	r2, [pc, #352]	; (8003e90 <HAL_RCC_ClockConfig+0x1c8>)
 8003d2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0308 	and.w	r3, r3, #8
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d005      	beq.n	8003d4c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d40:	4b53      	ldr	r3, [pc, #332]	; (8003e90 <HAL_RCC_ClockConfig+0x1c8>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	4a52      	ldr	r2, [pc, #328]	; (8003e90 <HAL_RCC_ClockConfig+0x1c8>)
 8003d46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d4a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d4c:	4b50      	ldr	r3, [pc, #320]	; (8003e90 <HAL_RCC_ClockConfig+0x1c8>)
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	494d      	ldr	r1, [pc, #308]	; (8003e90 <HAL_RCC_ClockConfig+0x1c8>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d040      	beq.n	8003dec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d107      	bne.n	8003d82 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d72:	4b47      	ldr	r3, [pc, #284]	; (8003e90 <HAL_RCC_ClockConfig+0x1c8>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d115      	bne.n	8003daa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e07f      	b.n	8003e82 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d107      	bne.n	8003d9a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d8a:	4b41      	ldr	r3, [pc, #260]	; (8003e90 <HAL_RCC_ClockConfig+0x1c8>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d109      	bne.n	8003daa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e073      	b.n	8003e82 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d9a:	4b3d      	ldr	r3, [pc, #244]	; (8003e90 <HAL_RCC_ClockConfig+0x1c8>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e06b      	b.n	8003e82 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003daa:	4b39      	ldr	r3, [pc, #228]	; (8003e90 <HAL_RCC_ClockConfig+0x1c8>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f023 0203 	bic.w	r2, r3, #3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	4936      	ldr	r1, [pc, #216]	; (8003e90 <HAL_RCC_ClockConfig+0x1c8>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dbc:	f7fd fed6 	bl	8001b6c <HAL_GetTick>
 8003dc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dc2:	e00a      	b.n	8003dda <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dc4:	f7fd fed2 	bl	8001b6c <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e053      	b.n	8003e82 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dda:	4b2d      	ldr	r3, [pc, #180]	; (8003e90 <HAL_RCC_ClockConfig+0x1c8>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f003 020c 	and.w	r2, r3, #12
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d1eb      	bne.n	8003dc4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003dec:	4b27      	ldr	r3, [pc, #156]	; (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 030f 	and.w	r3, r3, #15
 8003df4:	683a      	ldr	r2, [r7, #0]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d210      	bcs.n	8003e1c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dfa:	4b24      	ldr	r3, [pc, #144]	; (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f023 020f 	bic.w	r2, r3, #15
 8003e02:	4922      	ldr	r1, [pc, #136]	; (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e0a:	4b20      	ldr	r3, [pc, #128]	; (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 030f 	and.w	r3, r3, #15
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d001      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e032      	b.n	8003e82 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0304 	and.w	r3, r3, #4
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d008      	beq.n	8003e3a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e28:	4b19      	ldr	r3, [pc, #100]	; (8003e90 <HAL_RCC_ClockConfig+0x1c8>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	4916      	ldr	r1, [pc, #88]	; (8003e90 <HAL_RCC_ClockConfig+0x1c8>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0308 	and.w	r3, r3, #8
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d009      	beq.n	8003e5a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e46:	4b12      	ldr	r3, [pc, #72]	; (8003e90 <HAL_RCC_ClockConfig+0x1c8>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	490e      	ldr	r1, [pc, #56]	; (8003e90 <HAL_RCC_ClockConfig+0x1c8>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e5a:	f000 f821 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	4b0b      	ldr	r3, [pc, #44]	; (8003e90 <HAL_RCC_ClockConfig+0x1c8>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	091b      	lsrs	r3, r3, #4
 8003e66:	f003 030f 	and.w	r3, r3, #15
 8003e6a:	490a      	ldr	r1, [pc, #40]	; (8003e94 <HAL_RCC_ClockConfig+0x1cc>)
 8003e6c:	5ccb      	ldrb	r3, [r1, r3]
 8003e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e72:	4a09      	ldr	r2, [pc, #36]	; (8003e98 <HAL_RCC_ClockConfig+0x1d0>)
 8003e74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e76:	4b09      	ldr	r3, [pc, #36]	; (8003e9c <HAL_RCC_ClockConfig+0x1d4>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7fd fe32 	bl	8001ae4 <HAL_InitTick>

  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	40023c00 	.word	0x40023c00
 8003e90:	40023800 	.word	0x40023800
 8003e94:	080166f8 	.word	0x080166f8
 8003e98:	20000000 	.word	0x20000000
 8003e9c:	20000004 	.word	0x20000004

08003ea0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ea0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ea4:	b094      	sub	sp, #80	; 0x50
 8003ea6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	647b      	str	r3, [r7, #68]	; 0x44
 8003eac:	2300      	movs	r3, #0
 8003eae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003eb8:	4b79      	ldr	r3, [pc, #484]	; (80040a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f003 030c 	and.w	r3, r3, #12
 8003ec0:	2b08      	cmp	r3, #8
 8003ec2:	d00d      	beq.n	8003ee0 <HAL_RCC_GetSysClockFreq+0x40>
 8003ec4:	2b08      	cmp	r3, #8
 8003ec6:	f200 80e1 	bhi.w	800408c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d002      	beq.n	8003ed4 <HAL_RCC_GetSysClockFreq+0x34>
 8003ece:	2b04      	cmp	r3, #4
 8003ed0:	d003      	beq.n	8003eda <HAL_RCC_GetSysClockFreq+0x3a>
 8003ed2:	e0db      	b.n	800408c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ed4:	4b73      	ldr	r3, [pc, #460]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ed6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ed8:	e0db      	b.n	8004092 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003eda:	4b72      	ldr	r3, [pc, #456]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003edc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ede:	e0d8      	b.n	8004092 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ee0:	4b6f      	ldr	r3, [pc, #444]	; (80040a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ee8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003eea:	4b6d      	ldr	r3, [pc, #436]	; (80040a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d063      	beq.n	8003fbe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ef6:	4b6a      	ldr	r3, [pc, #424]	; (80040a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	099b      	lsrs	r3, r3, #6
 8003efc:	2200      	movs	r2, #0
 8003efe:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f00:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f08:	633b      	str	r3, [r7, #48]	; 0x30
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	637b      	str	r3, [r7, #52]	; 0x34
 8003f0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f12:	4622      	mov	r2, r4
 8003f14:	462b      	mov	r3, r5
 8003f16:	f04f 0000 	mov.w	r0, #0
 8003f1a:	f04f 0100 	mov.w	r1, #0
 8003f1e:	0159      	lsls	r1, r3, #5
 8003f20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f24:	0150      	lsls	r0, r2, #5
 8003f26:	4602      	mov	r2, r0
 8003f28:	460b      	mov	r3, r1
 8003f2a:	4621      	mov	r1, r4
 8003f2c:	1a51      	subs	r1, r2, r1
 8003f2e:	6139      	str	r1, [r7, #16]
 8003f30:	4629      	mov	r1, r5
 8003f32:	eb63 0301 	sbc.w	r3, r3, r1
 8003f36:	617b      	str	r3, [r7, #20]
 8003f38:	f04f 0200 	mov.w	r2, #0
 8003f3c:	f04f 0300 	mov.w	r3, #0
 8003f40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f44:	4659      	mov	r1, fp
 8003f46:	018b      	lsls	r3, r1, #6
 8003f48:	4651      	mov	r1, sl
 8003f4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f4e:	4651      	mov	r1, sl
 8003f50:	018a      	lsls	r2, r1, #6
 8003f52:	4651      	mov	r1, sl
 8003f54:	ebb2 0801 	subs.w	r8, r2, r1
 8003f58:	4659      	mov	r1, fp
 8003f5a:	eb63 0901 	sbc.w	r9, r3, r1
 8003f5e:	f04f 0200 	mov.w	r2, #0
 8003f62:	f04f 0300 	mov.w	r3, #0
 8003f66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f72:	4690      	mov	r8, r2
 8003f74:	4699      	mov	r9, r3
 8003f76:	4623      	mov	r3, r4
 8003f78:	eb18 0303 	adds.w	r3, r8, r3
 8003f7c:	60bb      	str	r3, [r7, #8]
 8003f7e:	462b      	mov	r3, r5
 8003f80:	eb49 0303 	adc.w	r3, r9, r3
 8003f84:	60fb      	str	r3, [r7, #12]
 8003f86:	f04f 0200 	mov.w	r2, #0
 8003f8a:	f04f 0300 	mov.w	r3, #0
 8003f8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f92:	4629      	mov	r1, r5
 8003f94:	028b      	lsls	r3, r1, #10
 8003f96:	4621      	mov	r1, r4
 8003f98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f9c:	4621      	mov	r1, r4
 8003f9e:	028a      	lsls	r2, r1, #10
 8003fa0:	4610      	mov	r0, r2
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003faa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fb0:	f7fc fb52 	bl	8000658 <__aeabi_uldivmod>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	4613      	mov	r3, r2
 8003fba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fbc:	e058      	b.n	8004070 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fbe:	4b38      	ldr	r3, [pc, #224]	; (80040a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	099b      	lsrs	r3, r3, #6
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	4611      	mov	r1, r2
 8003fca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003fce:	623b      	str	r3, [r7, #32]
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	627b      	str	r3, [r7, #36]	; 0x24
 8003fd4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003fd8:	4642      	mov	r2, r8
 8003fda:	464b      	mov	r3, r9
 8003fdc:	f04f 0000 	mov.w	r0, #0
 8003fe0:	f04f 0100 	mov.w	r1, #0
 8003fe4:	0159      	lsls	r1, r3, #5
 8003fe6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fea:	0150      	lsls	r0, r2, #5
 8003fec:	4602      	mov	r2, r0
 8003fee:	460b      	mov	r3, r1
 8003ff0:	4641      	mov	r1, r8
 8003ff2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ff6:	4649      	mov	r1, r9
 8003ff8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ffc:	f04f 0200 	mov.w	r2, #0
 8004000:	f04f 0300 	mov.w	r3, #0
 8004004:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004008:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800400c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004010:	ebb2 040a 	subs.w	r4, r2, sl
 8004014:	eb63 050b 	sbc.w	r5, r3, fp
 8004018:	f04f 0200 	mov.w	r2, #0
 800401c:	f04f 0300 	mov.w	r3, #0
 8004020:	00eb      	lsls	r3, r5, #3
 8004022:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004026:	00e2      	lsls	r2, r4, #3
 8004028:	4614      	mov	r4, r2
 800402a:	461d      	mov	r5, r3
 800402c:	4643      	mov	r3, r8
 800402e:	18e3      	adds	r3, r4, r3
 8004030:	603b      	str	r3, [r7, #0]
 8004032:	464b      	mov	r3, r9
 8004034:	eb45 0303 	adc.w	r3, r5, r3
 8004038:	607b      	str	r3, [r7, #4]
 800403a:	f04f 0200 	mov.w	r2, #0
 800403e:	f04f 0300 	mov.w	r3, #0
 8004042:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004046:	4629      	mov	r1, r5
 8004048:	028b      	lsls	r3, r1, #10
 800404a:	4621      	mov	r1, r4
 800404c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004050:	4621      	mov	r1, r4
 8004052:	028a      	lsls	r2, r1, #10
 8004054:	4610      	mov	r0, r2
 8004056:	4619      	mov	r1, r3
 8004058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800405a:	2200      	movs	r2, #0
 800405c:	61bb      	str	r3, [r7, #24]
 800405e:	61fa      	str	r2, [r7, #28]
 8004060:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004064:	f7fc faf8 	bl	8000658 <__aeabi_uldivmod>
 8004068:	4602      	mov	r2, r0
 800406a:	460b      	mov	r3, r1
 800406c:	4613      	mov	r3, r2
 800406e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004070:	4b0b      	ldr	r3, [pc, #44]	; (80040a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	0c1b      	lsrs	r3, r3, #16
 8004076:	f003 0303 	and.w	r3, r3, #3
 800407a:	3301      	adds	r3, #1
 800407c:	005b      	lsls	r3, r3, #1
 800407e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004080:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004082:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004084:	fbb2 f3f3 	udiv	r3, r2, r3
 8004088:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800408a:	e002      	b.n	8004092 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800408c:	4b05      	ldr	r3, [pc, #20]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800408e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004090:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004092:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004094:	4618      	mov	r0, r3
 8004096:	3750      	adds	r7, #80	; 0x50
 8004098:	46bd      	mov	sp, r7
 800409a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800409e:	bf00      	nop
 80040a0:	40023800 	.word	0x40023800
 80040a4:	00f42400 	.word	0x00f42400

080040a8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040a8:	b480      	push	{r7}
 80040aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040ac:	4b03      	ldr	r3, [pc, #12]	; (80040bc <HAL_RCC_GetHCLKFreq+0x14>)
 80040ae:	681b      	ldr	r3, [r3, #0]
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	20000000 	.word	0x20000000

080040c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040c4:	f7ff fff0 	bl	80040a8 <HAL_RCC_GetHCLKFreq>
 80040c8:	4602      	mov	r2, r0
 80040ca:	4b05      	ldr	r3, [pc, #20]	; (80040e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	0a9b      	lsrs	r3, r3, #10
 80040d0:	f003 0307 	and.w	r3, r3, #7
 80040d4:	4903      	ldr	r1, [pc, #12]	; (80040e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040d6:	5ccb      	ldrb	r3, [r1, r3]
 80040d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040dc:	4618      	mov	r0, r3
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	40023800 	.word	0x40023800
 80040e4:	08016708 	.word	0x08016708

080040e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040ec:	f7ff ffdc 	bl	80040a8 <HAL_RCC_GetHCLKFreq>
 80040f0:	4602      	mov	r2, r0
 80040f2:	4b05      	ldr	r3, [pc, #20]	; (8004108 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	0b5b      	lsrs	r3, r3, #13
 80040f8:	f003 0307 	and.w	r3, r3, #7
 80040fc:	4903      	ldr	r1, [pc, #12]	; (800410c <HAL_RCC_GetPCLK2Freq+0x24>)
 80040fe:	5ccb      	ldrb	r3, [r1, r3]
 8004100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004104:	4618      	mov	r0, r3
 8004106:	bd80      	pop	{r7, pc}
 8004108:	40023800 	.word	0x40023800
 800410c:	08016708 	.word	0x08016708

08004110 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b088      	sub	sp, #32
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004118:	2300      	movs	r3, #0
 800411a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800411c:	2300      	movs	r3, #0
 800411e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004120:	2300      	movs	r3, #0
 8004122:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004124:	2300      	movs	r3, #0
 8004126:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004128:	2300      	movs	r3, #0
 800412a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0301 	and.w	r3, r3, #1
 8004134:	2b00      	cmp	r3, #0
 8004136:	d012      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004138:	4b69      	ldr	r3, [pc, #420]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	4a68      	ldr	r2, [pc, #416]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800413e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004142:	6093      	str	r3, [r2, #8]
 8004144:	4b66      	ldr	r3, [pc, #408]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004146:	689a      	ldr	r2, [r3, #8]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800414c:	4964      	ldr	r1, [pc, #400]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800414e:	4313      	orrs	r3, r2
 8004150:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800415a:	2301      	movs	r3, #1
 800415c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d017      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800416a:	4b5d      	ldr	r3, [pc, #372]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800416c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004170:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004178:	4959      	ldr	r1, [pc, #356]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800417a:	4313      	orrs	r3, r2
 800417c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004184:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004188:	d101      	bne.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800418a:	2301      	movs	r3, #1
 800418c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004196:	2301      	movs	r3, #1
 8004198:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d017      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80041a6:	4b4e      	ldr	r3, [pc, #312]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041ac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b4:	494a      	ldr	r1, [pc, #296]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041c4:	d101      	bne.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80041c6:	2301      	movs	r3, #1
 80041c8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80041d2:	2301      	movs	r3, #1
 80041d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80041e2:	2301      	movs	r3, #1
 80041e4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0320 	and.w	r3, r3, #32
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	f000 808b 	beq.w	800430a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80041f4:	4b3a      	ldr	r3, [pc, #232]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f8:	4a39      	ldr	r2, [pc, #228]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041fe:	6413      	str	r3, [r2, #64]	; 0x40
 8004200:	4b37      	ldr	r3, [pc, #220]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004208:	60bb      	str	r3, [r7, #8]
 800420a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800420c:	4b35      	ldr	r3, [pc, #212]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a34      	ldr	r2, [pc, #208]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004216:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004218:	f7fd fca8 	bl	8001b6c <HAL_GetTick>
 800421c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800421e:	e008      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004220:	f7fd fca4 	bl	8001b6c <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b64      	cmp	r3, #100	; 0x64
 800422c:	d901      	bls.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e38f      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004232:	4b2c      	ldr	r3, [pc, #176]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423a:	2b00      	cmp	r3, #0
 800423c:	d0f0      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800423e:	4b28      	ldr	r3, [pc, #160]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004246:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d035      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	429a      	cmp	r2, r3
 800425a:	d02e      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800425c:	4b20      	ldr	r3, [pc, #128]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800425e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004260:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004264:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004266:	4b1e      	ldr	r3, [pc, #120]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426a:	4a1d      	ldr	r2, [pc, #116]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800426c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004270:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004272:	4b1b      	ldr	r3, [pc, #108]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004276:	4a1a      	ldr	r2, [pc, #104]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004278:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800427c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800427e:	4a18      	ldr	r2, [pc, #96]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004284:	4b16      	ldr	r3, [pc, #88]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	2b01      	cmp	r3, #1
 800428e:	d114      	bne.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004290:	f7fd fc6c 	bl	8001b6c <HAL_GetTick>
 8004294:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004296:	e00a      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004298:	f7fd fc68 	bl	8001b6c <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d901      	bls.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e351      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ae:	4b0c      	ldr	r3, [pc, #48]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d0ee      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042c6:	d111      	bne.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80042c8:	4b05      	ldr	r3, [pc, #20]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80042d4:	4b04      	ldr	r3, [pc, #16]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80042d6:	400b      	ands	r3, r1
 80042d8:	4901      	ldr	r1, [pc, #4]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	608b      	str	r3, [r1, #8]
 80042de:	e00b      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80042e0:	40023800 	.word	0x40023800
 80042e4:	40007000 	.word	0x40007000
 80042e8:	0ffffcff 	.word	0x0ffffcff
 80042ec:	4bac      	ldr	r3, [pc, #688]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	4aab      	ldr	r2, [pc, #684]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042f2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80042f6:	6093      	str	r3, [r2, #8]
 80042f8:	4ba9      	ldr	r3, [pc, #676]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004304:	49a6      	ldr	r1, [pc, #664]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004306:	4313      	orrs	r3, r2
 8004308:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0310 	and.w	r3, r3, #16
 8004312:	2b00      	cmp	r3, #0
 8004314:	d010      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004316:	4ba2      	ldr	r3, [pc, #648]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004318:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800431c:	4aa0      	ldr	r2, [pc, #640]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800431e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004322:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004326:	4b9e      	ldr	r3, [pc, #632]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004328:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004330:	499b      	ldr	r1, [pc, #620]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004332:	4313      	orrs	r3, r2
 8004334:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00a      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004344:	4b96      	ldr	r3, [pc, #600]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800434a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004352:	4993      	ldr	r1, [pc, #588]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004354:	4313      	orrs	r3, r2
 8004356:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00a      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004366:	4b8e      	ldr	r3, [pc, #568]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800436c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004374:	498a      	ldr	r1, [pc, #552]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004376:	4313      	orrs	r3, r2
 8004378:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00a      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004388:	4b85      	ldr	r3, [pc, #532]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800438a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004396:	4982      	ldr	r1, [pc, #520]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004398:	4313      	orrs	r3, r2
 800439a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00a      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043aa:	4b7d      	ldr	r3, [pc, #500]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b8:	4979      	ldr	r1, [pc, #484]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00a      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043cc:	4b74      	ldr	r3, [pc, #464]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d2:	f023 0203 	bic.w	r2, r3, #3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043da:	4971      	ldr	r1, [pc, #452]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00a      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043ee:	4b6c      	ldr	r3, [pc, #432]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f4:	f023 020c 	bic.w	r2, r3, #12
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043fc:	4968      	ldr	r1, [pc, #416]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00a      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004410:	4b63      	ldr	r3, [pc, #396]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004416:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800441e:	4960      	ldr	r1, [pc, #384]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004420:	4313      	orrs	r3, r2
 8004422:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00a      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004432:	4b5b      	ldr	r3, [pc, #364]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004438:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004440:	4957      	ldr	r1, [pc, #348]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004442:	4313      	orrs	r3, r2
 8004444:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00a      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004454:	4b52      	ldr	r3, [pc, #328]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800445a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004462:	494f      	ldr	r1, [pc, #316]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004464:	4313      	orrs	r3, r2
 8004466:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00a      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004476:	4b4a      	ldr	r3, [pc, #296]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800447c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004484:	4946      	ldr	r1, [pc, #280]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004486:	4313      	orrs	r3, r2
 8004488:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00a      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004498:	4b41      	ldr	r3, [pc, #260]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800449a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800449e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044a6:	493e      	ldr	r1, [pc, #248]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00a      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80044ba:	4b39      	ldr	r3, [pc, #228]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044c8:	4935      	ldr	r1, [pc, #212]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00a      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80044dc:	4b30      	ldr	r3, [pc, #192]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044ea:	492d      	ldr	r1, [pc, #180]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d011      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80044fe:	4b28      	ldr	r3, [pc, #160]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004504:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800450c:	4924      	ldr	r1, [pc, #144]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800450e:	4313      	orrs	r3, r2
 8004510:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004518:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800451c:	d101      	bne.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800451e:	2301      	movs	r3, #1
 8004520:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0308 	and.w	r3, r3, #8
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800452e:	2301      	movs	r3, #1
 8004530:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00a      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800453e:	4b18      	ldr	r3, [pc, #96]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004544:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800454c:	4914      	ldr	r1, [pc, #80]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800454e:	4313      	orrs	r3, r2
 8004550:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00b      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004560:	4b0f      	ldr	r3, [pc, #60]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004566:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004570:	490b      	ldr	r1, [pc, #44]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004572:	4313      	orrs	r3, r2
 8004574:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00f      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004584:	4b06      	ldr	r3, [pc, #24]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800458a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004594:	4902      	ldr	r1, [pc, #8]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004596:	4313      	orrs	r3, r2
 8004598:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800459c:	e002      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800459e:	bf00      	nop
 80045a0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00b      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045b0:	4b8a      	ldr	r3, [pc, #552]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045b6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c0:	4986      	ldr	r1, [pc, #536]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00b      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80045d4:	4b81      	ldr	r3, [pc, #516]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045da:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045e4:	497d      	ldr	r1, [pc, #500]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d006      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f000 80d6 	beq.w	80047ac <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004600:	4b76      	ldr	r3, [pc, #472]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a75      	ldr	r2, [pc, #468]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004606:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800460a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800460c:	f7fd faae 	bl	8001b6c <HAL_GetTick>
 8004610:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004612:	e008      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004614:	f7fd faaa 	bl	8001b6c <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b64      	cmp	r3, #100	; 0x64
 8004620:	d901      	bls.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e195      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004626:	4b6d      	ldr	r3, [pc, #436]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1f0      	bne.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	d021      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004642:	2b00      	cmp	r3, #0
 8004644:	d11d      	bne.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004646:	4b65      	ldr	r3, [pc, #404]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004648:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800464c:	0c1b      	lsrs	r3, r3, #16
 800464e:	f003 0303 	and.w	r3, r3, #3
 8004652:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004654:	4b61      	ldr	r3, [pc, #388]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004656:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800465a:	0e1b      	lsrs	r3, r3, #24
 800465c:	f003 030f 	and.w	r3, r3, #15
 8004660:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	019a      	lsls	r2, r3, #6
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	041b      	lsls	r3, r3, #16
 800466c:	431a      	orrs	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	061b      	lsls	r3, r3, #24
 8004672:	431a      	orrs	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	071b      	lsls	r3, r3, #28
 800467a:	4958      	ldr	r1, [pc, #352]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800467c:	4313      	orrs	r3, r2
 800467e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d004      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004692:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004696:	d00a      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d02e      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046ac:	d129      	bne.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80046ae:	4b4b      	ldr	r3, [pc, #300]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046b4:	0c1b      	lsrs	r3, r3, #16
 80046b6:	f003 0303 	and.w	r3, r3, #3
 80046ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80046bc:	4b47      	ldr	r3, [pc, #284]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046c2:	0f1b      	lsrs	r3, r3, #28
 80046c4:	f003 0307 	and.w	r3, r3, #7
 80046c8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	019a      	lsls	r2, r3, #6
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	041b      	lsls	r3, r3, #16
 80046d4:	431a      	orrs	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	061b      	lsls	r3, r3, #24
 80046dc:	431a      	orrs	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	071b      	lsls	r3, r3, #28
 80046e2:	493e      	ldr	r1, [pc, #248]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80046ea:	4b3c      	ldr	r3, [pc, #240]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046f0:	f023 021f 	bic.w	r2, r3, #31
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f8:	3b01      	subs	r3, #1
 80046fa:	4938      	ldr	r1, [pc, #224]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d01d      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800470e:	4b33      	ldr	r3, [pc, #204]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004710:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004714:	0e1b      	lsrs	r3, r3, #24
 8004716:	f003 030f 	and.w	r3, r3, #15
 800471a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800471c:	4b2f      	ldr	r3, [pc, #188]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800471e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004722:	0f1b      	lsrs	r3, r3, #28
 8004724:	f003 0307 	and.w	r3, r3, #7
 8004728:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	019a      	lsls	r2, r3, #6
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	041b      	lsls	r3, r3, #16
 8004736:	431a      	orrs	r2, r3
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	061b      	lsls	r3, r3, #24
 800473c:	431a      	orrs	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	071b      	lsls	r3, r3, #28
 8004742:	4926      	ldr	r1, [pc, #152]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004744:	4313      	orrs	r3, r2
 8004746:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d011      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	019a      	lsls	r2, r3, #6
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	041b      	lsls	r3, r3, #16
 8004762:	431a      	orrs	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	061b      	lsls	r3, r3, #24
 800476a:	431a      	orrs	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	071b      	lsls	r3, r3, #28
 8004772:	491a      	ldr	r1, [pc, #104]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004774:	4313      	orrs	r3, r2
 8004776:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800477a:	4b18      	ldr	r3, [pc, #96]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a17      	ldr	r2, [pc, #92]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004780:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004784:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004786:	f7fd f9f1 	bl	8001b6c <HAL_GetTick>
 800478a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800478c:	e008      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800478e:	f7fd f9ed 	bl	8001b6c <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b64      	cmp	r3, #100	; 0x64
 800479a:	d901      	bls.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e0d8      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047a0:	4b0e      	ldr	r3, [pc, #56]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d0f0      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	f040 80ce 	bne.w	8004950 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80047b4:	4b09      	ldr	r3, [pc, #36]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a08      	ldr	r2, [pc, #32]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047c0:	f7fd f9d4 	bl	8001b6c <HAL_GetTick>
 80047c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80047c6:	e00b      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80047c8:	f7fd f9d0 	bl	8001b6c <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b64      	cmp	r3, #100	; 0x64
 80047d4:	d904      	bls.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e0bb      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80047da:	bf00      	nop
 80047dc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80047e0:	4b5e      	ldr	r3, [pc, #376]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047ec:	d0ec      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d003      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d009      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800480a:	2b00      	cmp	r3, #0
 800480c:	d02e      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004812:	2b00      	cmp	r3, #0
 8004814:	d12a      	bne.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004816:	4b51      	ldr	r3, [pc, #324]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800481c:	0c1b      	lsrs	r3, r3, #16
 800481e:	f003 0303 	and.w	r3, r3, #3
 8004822:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004824:	4b4d      	ldr	r3, [pc, #308]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800482a:	0f1b      	lsrs	r3, r3, #28
 800482c:	f003 0307 	and.w	r3, r3, #7
 8004830:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	019a      	lsls	r2, r3, #6
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	041b      	lsls	r3, r3, #16
 800483c:	431a      	orrs	r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	061b      	lsls	r3, r3, #24
 8004844:	431a      	orrs	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	071b      	lsls	r3, r3, #28
 800484a:	4944      	ldr	r1, [pc, #272]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800484c:	4313      	orrs	r3, r2
 800484e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004852:	4b42      	ldr	r3, [pc, #264]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004854:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004858:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004860:	3b01      	subs	r3, #1
 8004862:	021b      	lsls	r3, r3, #8
 8004864:	493d      	ldr	r1, [pc, #244]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004866:	4313      	orrs	r3, r2
 8004868:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d022      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800487c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004880:	d11d      	bne.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004882:	4b36      	ldr	r3, [pc, #216]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004888:	0e1b      	lsrs	r3, r3, #24
 800488a:	f003 030f 	and.w	r3, r3, #15
 800488e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004890:	4b32      	ldr	r3, [pc, #200]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004896:	0f1b      	lsrs	r3, r3, #28
 8004898:	f003 0307 	and.w	r3, r3, #7
 800489c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	019a      	lsls	r2, r3, #6
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a1b      	ldr	r3, [r3, #32]
 80048a8:	041b      	lsls	r3, r3, #16
 80048aa:	431a      	orrs	r2, r3
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	061b      	lsls	r3, r3, #24
 80048b0:	431a      	orrs	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	071b      	lsls	r3, r3, #28
 80048b6:	4929      	ldr	r1, [pc, #164]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0308 	and.w	r3, r3, #8
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d028      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80048ca:	4b24      	ldr	r3, [pc, #144]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d0:	0e1b      	lsrs	r3, r3, #24
 80048d2:	f003 030f 	and.w	r3, r3, #15
 80048d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80048d8:	4b20      	ldr	r3, [pc, #128]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048de:	0c1b      	lsrs	r3, r3, #16
 80048e0:	f003 0303 	and.w	r3, r3, #3
 80048e4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	019a      	lsls	r2, r3, #6
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	041b      	lsls	r3, r3, #16
 80048f0:	431a      	orrs	r2, r3
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	061b      	lsls	r3, r3, #24
 80048f6:	431a      	orrs	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	69db      	ldr	r3, [r3, #28]
 80048fc:	071b      	lsls	r3, r3, #28
 80048fe:	4917      	ldr	r1, [pc, #92]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004900:	4313      	orrs	r3, r2
 8004902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004906:	4b15      	ldr	r3, [pc, #84]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004908:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800490c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004914:	4911      	ldr	r1, [pc, #68]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004916:	4313      	orrs	r3, r2
 8004918:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800491c:	4b0f      	ldr	r3, [pc, #60]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a0e      	ldr	r2, [pc, #56]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004926:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004928:	f7fd f920 	bl	8001b6c <HAL_GetTick>
 800492c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800492e:	e008      	b.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004930:	f7fd f91c 	bl	8001b6c <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	2b64      	cmp	r3, #100	; 0x64
 800493c:	d901      	bls.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e007      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004942:	4b06      	ldr	r3, [pc, #24]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800494a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800494e:	d1ef      	bne.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3720      	adds	r7, #32
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	40023800 	.word	0x40023800

08004960 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e049      	b.n	8004a06 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b00      	cmp	r3, #0
 800497c:	d106      	bne.n	800498c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f7fc fcd6 	bl	8001338 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2202      	movs	r2, #2
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	3304      	adds	r3, #4
 800499c:	4619      	mov	r1, r3
 800499e:	4610      	mov	r0, r2
 80049a0:	f000 fd0e 	bl	80053c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3708      	adds	r7, #8
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
	...

08004a10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d001      	beq.n	8004a28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e054      	b.n	8004ad2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68da      	ldr	r2, [r3, #12]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f042 0201 	orr.w	r2, r2, #1
 8004a3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a26      	ldr	r2, [pc, #152]	; (8004ae0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d022      	beq.n	8004a90 <HAL_TIM_Base_Start_IT+0x80>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a52:	d01d      	beq.n	8004a90 <HAL_TIM_Base_Start_IT+0x80>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a22      	ldr	r2, [pc, #136]	; (8004ae4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d018      	beq.n	8004a90 <HAL_TIM_Base_Start_IT+0x80>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a21      	ldr	r2, [pc, #132]	; (8004ae8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d013      	beq.n	8004a90 <HAL_TIM_Base_Start_IT+0x80>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a1f      	ldr	r2, [pc, #124]	; (8004aec <HAL_TIM_Base_Start_IT+0xdc>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d00e      	beq.n	8004a90 <HAL_TIM_Base_Start_IT+0x80>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a1e      	ldr	r2, [pc, #120]	; (8004af0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d009      	beq.n	8004a90 <HAL_TIM_Base_Start_IT+0x80>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a1c      	ldr	r2, [pc, #112]	; (8004af4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d004      	beq.n	8004a90 <HAL_TIM_Base_Start_IT+0x80>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a1b      	ldr	r2, [pc, #108]	; (8004af8 <HAL_TIM_Base_Start_IT+0xe8>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d115      	bne.n	8004abc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	689a      	ldr	r2, [r3, #8]
 8004a96:	4b19      	ldr	r3, [pc, #100]	; (8004afc <HAL_TIM_Base_Start_IT+0xec>)
 8004a98:	4013      	ands	r3, r2
 8004a9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2b06      	cmp	r3, #6
 8004aa0:	d015      	beq.n	8004ace <HAL_TIM_Base_Start_IT+0xbe>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aa8:	d011      	beq.n	8004ace <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f042 0201 	orr.w	r2, r2, #1
 8004ab8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aba:	e008      	b.n	8004ace <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f042 0201 	orr.w	r2, r2, #1
 8004aca:	601a      	str	r2, [r3, #0]
 8004acc:	e000      	b.n	8004ad0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ace:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3714      	adds	r7, #20
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	40010000 	.word	0x40010000
 8004ae4:	40000400 	.word	0x40000400
 8004ae8:	40000800 	.word	0x40000800
 8004aec:	40000c00 	.word	0x40000c00
 8004af0:	40010400 	.word	0x40010400
 8004af4:	40014000 	.word	0x40014000
 8004af8:	40001800 	.word	0x40001800
 8004afc:	00010007 	.word	0x00010007

08004b00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e049      	b.n	8004ba6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d106      	bne.n	8004b2c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f7fc fc6c 	bl	8001404 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2202      	movs	r2, #2
 8004b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	3304      	adds	r3, #4
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	4610      	mov	r0, r2
 8004b40:	f000 fc3e 	bl	80053c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3708      	adds	r7, #8
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
	...

08004bb0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d109      	bne.n	8004bd4 <HAL_TIM_PWM_Start+0x24>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	bf14      	ite	ne
 8004bcc:	2301      	movne	r3, #1
 8004bce:	2300      	moveq	r3, #0
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	e03c      	b.n	8004c4e <HAL_TIM_PWM_Start+0x9e>
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	2b04      	cmp	r3, #4
 8004bd8:	d109      	bne.n	8004bee <HAL_TIM_PWM_Start+0x3e>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	bf14      	ite	ne
 8004be6:	2301      	movne	r3, #1
 8004be8:	2300      	moveq	r3, #0
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	e02f      	b.n	8004c4e <HAL_TIM_PWM_Start+0x9e>
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	2b08      	cmp	r3, #8
 8004bf2:	d109      	bne.n	8004c08 <HAL_TIM_PWM_Start+0x58>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	bf14      	ite	ne
 8004c00:	2301      	movne	r3, #1
 8004c02:	2300      	moveq	r3, #0
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	e022      	b.n	8004c4e <HAL_TIM_PWM_Start+0x9e>
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	2b0c      	cmp	r3, #12
 8004c0c:	d109      	bne.n	8004c22 <HAL_TIM_PWM_Start+0x72>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	bf14      	ite	ne
 8004c1a:	2301      	movne	r3, #1
 8004c1c:	2300      	moveq	r3, #0
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	e015      	b.n	8004c4e <HAL_TIM_PWM_Start+0x9e>
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	2b10      	cmp	r3, #16
 8004c26:	d109      	bne.n	8004c3c <HAL_TIM_PWM_Start+0x8c>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	bf14      	ite	ne
 8004c34:	2301      	movne	r3, #1
 8004c36:	2300      	moveq	r3, #0
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	e008      	b.n	8004c4e <HAL_TIM_PWM_Start+0x9e>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	bf14      	ite	ne
 8004c48:	2301      	movne	r3, #1
 8004c4a:	2300      	moveq	r3, #0
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d001      	beq.n	8004c56 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e092      	b.n	8004d7c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d104      	bne.n	8004c66 <HAL_TIM_PWM_Start+0xb6>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2202      	movs	r2, #2
 8004c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c64:	e023      	b.n	8004cae <HAL_TIM_PWM_Start+0xfe>
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	2b04      	cmp	r3, #4
 8004c6a:	d104      	bne.n	8004c76 <HAL_TIM_PWM_Start+0xc6>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2202      	movs	r2, #2
 8004c70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c74:	e01b      	b.n	8004cae <HAL_TIM_PWM_Start+0xfe>
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	2b08      	cmp	r3, #8
 8004c7a:	d104      	bne.n	8004c86 <HAL_TIM_PWM_Start+0xd6>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2202      	movs	r2, #2
 8004c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c84:	e013      	b.n	8004cae <HAL_TIM_PWM_Start+0xfe>
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	2b0c      	cmp	r3, #12
 8004c8a:	d104      	bne.n	8004c96 <HAL_TIM_PWM_Start+0xe6>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2202      	movs	r2, #2
 8004c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c94:	e00b      	b.n	8004cae <HAL_TIM_PWM_Start+0xfe>
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	2b10      	cmp	r3, #16
 8004c9a:	d104      	bne.n	8004ca6 <HAL_TIM_PWM_Start+0xf6>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ca4:	e003      	b.n	8004cae <HAL_TIM_PWM_Start+0xfe>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2202      	movs	r2, #2
 8004caa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	6839      	ldr	r1, [r7, #0]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f000 ff26 	bl	8005b08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a30      	ldr	r2, [pc, #192]	; (8004d84 <HAL_TIM_PWM_Start+0x1d4>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d004      	beq.n	8004cd0 <HAL_TIM_PWM_Start+0x120>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a2f      	ldr	r2, [pc, #188]	; (8004d88 <HAL_TIM_PWM_Start+0x1d8>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d101      	bne.n	8004cd4 <HAL_TIM_PWM_Start+0x124>
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e000      	b.n	8004cd6 <HAL_TIM_PWM_Start+0x126>
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d007      	beq.n	8004cea <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ce8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a25      	ldr	r2, [pc, #148]	; (8004d84 <HAL_TIM_PWM_Start+0x1d4>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d022      	beq.n	8004d3a <HAL_TIM_PWM_Start+0x18a>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cfc:	d01d      	beq.n	8004d3a <HAL_TIM_PWM_Start+0x18a>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a22      	ldr	r2, [pc, #136]	; (8004d8c <HAL_TIM_PWM_Start+0x1dc>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d018      	beq.n	8004d3a <HAL_TIM_PWM_Start+0x18a>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a20      	ldr	r2, [pc, #128]	; (8004d90 <HAL_TIM_PWM_Start+0x1e0>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d013      	beq.n	8004d3a <HAL_TIM_PWM_Start+0x18a>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a1f      	ldr	r2, [pc, #124]	; (8004d94 <HAL_TIM_PWM_Start+0x1e4>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d00e      	beq.n	8004d3a <HAL_TIM_PWM_Start+0x18a>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a19      	ldr	r2, [pc, #100]	; (8004d88 <HAL_TIM_PWM_Start+0x1d8>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d009      	beq.n	8004d3a <HAL_TIM_PWM_Start+0x18a>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a1b      	ldr	r2, [pc, #108]	; (8004d98 <HAL_TIM_PWM_Start+0x1e8>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d004      	beq.n	8004d3a <HAL_TIM_PWM_Start+0x18a>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a19      	ldr	r2, [pc, #100]	; (8004d9c <HAL_TIM_PWM_Start+0x1ec>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d115      	bne.n	8004d66 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	689a      	ldr	r2, [r3, #8]
 8004d40:	4b17      	ldr	r3, [pc, #92]	; (8004da0 <HAL_TIM_PWM_Start+0x1f0>)
 8004d42:	4013      	ands	r3, r2
 8004d44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2b06      	cmp	r3, #6
 8004d4a:	d015      	beq.n	8004d78 <HAL_TIM_PWM_Start+0x1c8>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d52:	d011      	beq.n	8004d78 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f042 0201 	orr.w	r2, r2, #1
 8004d62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d64:	e008      	b.n	8004d78 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f042 0201 	orr.w	r2, r2, #1
 8004d74:	601a      	str	r2, [r3, #0]
 8004d76:	e000      	b.n	8004d7a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d78:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3710      	adds	r7, #16
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	40010000 	.word	0x40010000
 8004d88:	40010400 	.word	0x40010400
 8004d8c:	40000400 	.word	0x40000400
 8004d90:	40000800 	.word	0x40000800
 8004d94:	40000c00 	.word	0x40000c00
 8004d98:	40014000 	.word	0x40014000
 8004d9c:	40001800 	.word	0x40001800
 8004da0:	00010007 	.word	0x00010007

08004da4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	f003 0302 	and.w	r3, r3, #2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d020      	beq.n	8004e08 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f003 0302 	and.w	r3, r3, #2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d01b      	beq.n	8004e08 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f06f 0202 	mvn.w	r2, #2
 8004dd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	f003 0303 	and.w	r3, r3, #3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d003      	beq.n	8004df6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 fac8 	bl	8005384 <HAL_TIM_IC_CaptureCallback>
 8004df4:	e005      	b.n	8004e02 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 faba 	bl	8005370 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 facb 	bl	8005398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	f003 0304 	and.w	r3, r3, #4
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d020      	beq.n	8004e54 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f003 0304 	and.w	r3, r3, #4
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d01b      	beq.n	8004e54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f06f 0204 	mvn.w	r2, #4
 8004e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2202      	movs	r2, #2
 8004e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d003      	beq.n	8004e42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 faa2 	bl	8005384 <HAL_TIM_IC_CaptureCallback>
 8004e40:	e005      	b.n	8004e4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 fa94 	bl	8005370 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f000 faa5 	bl	8005398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	f003 0308 	and.w	r3, r3, #8
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d020      	beq.n	8004ea0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f003 0308 	and.w	r3, r3, #8
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d01b      	beq.n	8004ea0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f06f 0208 	mvn.w	r2, #8
 8004e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2204      	movs	r2, #4
 8004e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	f003 0303 	and.w	r3, r3, #3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d003      	beq.n	8004e8e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 fa7c 	bl	8005384 <HAL_TIM_IC_CaptureCallback>
 8004e8c:	e005      	b.n	8004e9a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 fa6e 	bl	8005370 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 fa7f 	bl	8005398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	f003 0310 	and.w	r3, r3, #16
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d020      	beq.n	8004eec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f003 0310 	and.w	r3, r3, #16
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d01b      	beq.n	8004eec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f06f 0210 	mvn.w	r2, #16
 8004ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2208      	movs	r2, #8
 8004ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	69db      	ldr	r3, [r3, #28]
 8004eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 fa56 	bl	8005384 <HAL_TIM_IC_CaptureCallback>
 8004ed8:	e005      	b.n	8004ee6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 fa48 	bl	8005370 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 fa59 	bl	8005398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00c      	beq.n	8004f10 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f003 0301 	and.w	r3, r3, #1
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d007      	beq.n	8004f10 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f06f 0201 	mvn.w	r2, #1
 8004f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f7fc f8c8 	bl	80010a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d104      	bne.n	8004f24 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d00c      	beq.n	8004f3e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d007      	beq.n	8004f3e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8004f36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 fea3 	bl	8005c84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00c      	beq.n	8004f62 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d007      	beq.n	8004f62 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 fe9b 	bl	8005c98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00c      	beq.n	8004f86 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d007      	beq.n	8004f86 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 fa13 	bl	80053ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	f003 0320 	and.w	r3, r3, #32
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00c      	beq.n	8004faa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f003 0320 	and.w	r3, r3, #32
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d007      	beq.n	8004faa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f06f 0220 	mvn.w	r2, #32
 8004fa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 fe63 	bl	8005c70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004faa:	bf00      	nop
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
	...

08004fb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b086      	sub	sp, #24
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d101      	bne.n	8004fd2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004fce:	2302      	movs	r3, #2
 8004fd0:	e0ff      	b.n	80051d2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2b14      	cmp	r3, #20
 8004fde:	f200 80f0 	bhi.w	80051c2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004fe2:	a201      	add	r2, pc, #4	; (adr r2, 8004fe8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe8:	0800503d 	.word	0x0800503d
 8004fec:	080051c3 	.word	0x080051c3
 8004ff0:	080051c3 	.word	0x080051c3
 8004ff4:	080051c3 	.word	0x080051c3
 8004ff8:	0800507d 	.word	0x0800507d
 8004ffc:	080051c3 	.word	0x080051c3
 8005000:	080051c3 	.word	0x080051c3
 8005004:	080051c3 	.word	0x080051c3
 8005008:	080050bf 	.word	0x080050bf
 800500c:	080051c3 	.word	0x080051c3
 8005010:	080051c3 	.word	0x080051c3
 8005014:	080051c3 	.word	0x080051c3
 8005018:	080050ff 	.word	0x080050ff
 800501c:	080051c3 	.word	0x080051c3
 8005020:	080051c3 	.word	0x080051c3
 8005024:	080051c3 	.word	0x080051c3
 8005028:	08005141 	.word	0x08005141
 800502c:	080051c3 	.word	0x080051c3
 8005030:	080051c3 	.word	0x080051c3
 8005034:	080051c3 	.word	0x080051c3
 8005038:	08005181 	.word	0x08005181
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68b9      	ldr	r1, [r7, #8]
 8005042:	4618      	mov	r0, r3
 8005044:	f000 fa68 	bl	8005518 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	699a      	ldr	r2, [r3, #24]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f042 0208 	orr.w	r2, r2, #8
 8005056:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	699a      	ldr	r2, [r3, #24]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f022 0204 	bic.w	r2, r2, #4
 8005066:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	6999      	ldr	r1, [r3, #24]
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	691a      	ldr	r2, [r3, #16]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	430a      	orrs	r2, r1
 8005078:	619a      	str	r2, [r3, #24]
      break;
 800507a:	e0a5      	b.n	80051c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68b9      	ldr	r1, [r7, #8]
 8005082:	4618      	mov	r0, r3
 8005084:	f000 faba 	bl	80055fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	699a      	ldr	r2, [r3, #24]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005096:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	699a      	ldr	r2, [r3, #24]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6999      	ldr	r1, [r3, #24]
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	021a      	lsls	r2, r3, #8
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	430a      	orrs	r2, r1
 80050ba:	619a      	str	r2, [r3, #24]
      break;
 80050bc:	e084      	b.n	80051c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68b9      	ldr	r1, [r7, #8]
 80050c4:	4618      	mov	r0, r3
 80050c6:	f000 fb11 	bl	80056ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	69da      	ldr	r2, [r3, #28]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f042 0208 	orr.w	r2, r2, #8
 80050d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	69da      	ldr	r2, [r3, #28]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f022 0204 	bic.w	r2, r2, #4
 80050e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	69d9      	ldr	r1, [r3, #28]
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	691a      	ldr	r2, [r3, #16]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	430a      	orrs	r2, r1
 80050fa:	61da      	str	r2, [r3, #28]
      break;
 80050fc:	e064      	b.n	80051c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68b9      	ldr	r1, [r7, #8]
 8005104:	4618      	mov	r0, r3
 8005106:	f000 fb67 	bl	80057d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	69da      	ldr	r2, [r3, #28]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005118:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	69da      	ldr	r2, [r3, #28]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005128:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	69d9      	ldr	r1, [r3, #28]
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	021a      	lsls	r2, r3, #8
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	430a      	orrs	r2, r1
 800513c:	61da      	str	r2, [r3, #28]
      break;
 800513e:	e043      	b.n	80051c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68b9      	ldr	r1, [r7, #8]
 8005146:	4618      	mov	r0, r3
 8005148:	f000 fb9e 	bl	8005888 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f042 0208 	orr.w	r2, r2, #8
 800515a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f022 0204 	bic.w	r2, r2, #4
 800516a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	691a      	ldr	r2, [r3, #16]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	430a      	orrs	r2, r1
 800517c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800517e:	e023      	b.n	80051c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68b9      	ldr	r1, [r7, #8]
 8005186:	4618      	mov	r0, r3
 8005188:	f000 fbd0 	bl	800592c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800519a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	021a      	lsls	r2, r3, #8
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	430a      	orrs	r2, r1
 80051be:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80051c0:	e002      	b.n	80051c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	75fb      	strb	r3, [r7, #23]
      break;
 80051c6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3718      	adds	r7, #24
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop

080051dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051e6:	2300      	movs	r3, #0
 80051e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d101      	bne.n	80051f8 <HAL_TIM_ConfigClockSource+0x1c>
 80051f4:	2302      	movs	r3, #2
 80051f6:	e0b4      	b.n	8005362 <HAL_TIM_ConfigClockSource+0x186>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2202      	movs	r2, #2
 8005204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	4b56      	ldr	r3, [pc, #344]	; (800536c <HAL_TIM_ConfigClockSource+0x190>)
 8005214:	4013      	ands	r3, r2
 8005216:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800521e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68ba      	ldr	r2, [r7, #8]
 8005226:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005230:	d03e      	beq.n	80052b0 <HAL_TIM_ConfigClockSource+0xd4>
 8005232:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005236:	f200 8087 	bhi.w	8005348 <HAL_TIM_ConfigClockSource+0x16c>
 800523a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800523e:	f000 8086 	beq.w	800534e <HAL_TIM_ConfigClockSource+0x172>
 8005242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005246:	d87f      	bhi.n	8005348 <HAL_TIM_ConfigClockSource+0x16c>
 8005248:	2b70      	cmp	r3, #112	; 0x70
 800524a:	d01a      	beq.n	8005282 <HAL_TIM_ConfigClockSource+0xa6>
 800524c:	2b70      	cmp	r3, #112	; 0x70
 800524e:	d87b      	bhi.n	8005348 <HAL_TIM_ConfigClockSource+0x16c>
 8005250:	2b60      	cmp	r3, #96	; 0x60
 8005252:	d050      	beq.n	80052f6 <HAL_TIM_ConfigClockSource+0x11a>
 8005254:	2b60      	cmp	r3, #96	; 0x60
 8005256:	d877      	bhi.n	8005348 <HAL_TIM_ConfigClockSource+0x16c>
 8005258:	2b50      	cmp	r3, #80	; 0x50
 800525a:	d03c      	beq.n	80052d6 <HAL_TIM_ConfigClockSource+0xfa>
 800525c:	2b50      	cmp	r3, #80	; 0x50
 800525e:	d873      	bhi.n	8005348 <HAL_TIM_ConfigClockSource+0x16c>
 8005260:	2b40      	cmp	r3, #64	; 0x40
 8005262:	d058      	beq.n	8005316 <HAL_TIM_ConfigClockSource+0x13a>
 8005264:	2b40      	cmp	r3, #64	; 0x40
 8005266:	d86f      	bhi.n	8005348 <HAL_TIM_ConfigClockSource+0x16c>
 8005268:	2b30      	cmp	r3, #48	; 0x30
 800526a:	d064      	beq.n	8005336 <HAL_TIM_ConfigClockSource+0x15a>
 800526c:	2b30      	cmp	r3, #48	; 0x30
 800526e:	d86b      	bhi.n	8005348 <HAL_TIM_ConfigClockSource+0x16c>
 8005270:	2b20      	cmp	r3, #32
 8005272:	d060      	beq.n	8005336 <HAL_TIM_ConfigClockSource+0x15a>
 8005274:	2b20      	cmp	r3, #32
 8005276:	d867      	bhi.n	8005348 <HAL_TIM_ConfigClockSource+0x16c>
 8005278:	2b00      	cmp	r3, #0
 800527a:	d05c      	beq.n	8005336 <HAL_TIM_ConfigClockSource+0x15a>
 800527c:	2b10      	cmp	r3, #16
 800527e:	d05a      	beq.n	8005336 <HAL_TIM_ConfigClockSource+0x15a>
 8005280:	e062      	b.n	8005348 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005292:	f000 fc19 	bl	8005ac8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68ba      	ldr	r2, [r7, #8]
 80052ac:	609a      	str	r2, [r3, #8]
      break;
 80052ae:	e04f      	b.n	8005350 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052c0:	f000 fc02 	bl	8005ac8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	689a      	ldr	r2, [r3, #8]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052d2:	609a      	str	r2, [r3, #8]
      break;
 80052d4:	e03c      	b.n	8005350 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052e2:	461a      	mov	r2, r3
 80052e4:	f000 fb76 	bl	80059d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2150      	movs	r1, #80	; 0x50
 80052ee:	4618      	mov	r0, r3
 80052f0:	f000 fbcf 	bl	8005a92 <TIM_ITRx_SetConfig>
      break;
 80052f4:	e02c      	b.n	8005350 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005302:	461a      	mov	r2, r3
 8005304:	f000 fb95 	bl	8005a32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2160      	movs	r1, #96	; 0x60
 800530e:	4618      	mov	r0, r3
 8005310:	f000 fbbf 	bl	8005a92 <TIM_ITRx_SetConfig>
      break;
 8005314:	e01c      	b.n	8005350 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005322:	461a      	mov	r2, r3
 8005324:	f000 fb56 	bl	80059d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2140      	movs	r1, #64	; 0x40
 800532e:	4618      	mov	r0, r3
 8005330:	f000 fbaf 	bl	8005a92 <TIM_ITRx_SetConfig>
      break;
 8005334:	e00c      	b.n	8005350 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4619      	mov	r1, r3
 8005340:	4610      	mov	r0, r2
 8005342:	f000 fba6 	bl	8005a92 <TIM_ITRx_SetConfig>
      break;
 8005346:	e003      	b.n	8005350 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	73fb      	strb	r3, [r7, #15]
      break;
 800534c:	e000      	b.n	8005350 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800534e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005360:	7bfb      	ldrb	r3, [r7, #15]
}
 8005362:	4618      	mov	r0, r3
 8005364:	3710      	adds	r7, #16
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	fffeff88 	.word	0xfffeff88

08005370 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005378:	bf00      	nop
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800538c:	bf00      	nop
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a46      	ldr	r2, [pc, #280]	; (80054ec <TIM_Base_SetConfig+0x12c>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d013      	beq.n	8005400 <TIM_Base_SetConfig+0x40>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053de:	d00f      	beq.n	8005400 <TIM_Base_SetConfig+0x40>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a43      	ldr	r2, [pc, #268]	; (80054f0 <TIM_Base_SetConfig+0x130>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d00b      	beq.n	8005400 <TIM_Base_SetConfig+0x40>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a42      	ldr	r2, [pc, #264]	; (80054f4 <TIM_Base_SetConfig+0x134>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d007      	beq.n	8005400 <TIM_Base_SetConfig+0x40>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a41      	ldr	r2, [pc, #260]	; (80054f8 <TIM_Base_SetConfig+0x138>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d003      	beq.n	8005400 <TIM_Base_SetConfig+0x40>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a40      	ldr	r2, [pc, #256]	; (80054fc <TIM_Base_SetConfig+0x13c>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d108      	bne.n	8005412 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005406:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	4313      	orrs	r3, r2
 8005410:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a35      	ldr	r2, [pc, #212]	; (80054ec <TIM_Base_SetConfig+0x12c>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d02b      	beq.n	8005472 <TIM_Base_SetConfig+0xb2>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005420:	d027      	beq.n	8005472 <TIM_Base_SetConfig+0xb2>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a32      	ldr	r2, [pc, #200]	; (80054f0 <TIM_Base_SetConfig+0x130>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d023      	beq.n	8005472 <TIM_Base_SetConfig+0xb2>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a31      	ldr	r2, [pc, #196]	; (80054f4 <TIM_Base_SetConfig+0x134>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d01f      	beq.n	8005472 <TIM_Base_SetConfig+0xb2>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a30      	ldr	r2, [pc, #192]	; (80054f8 <TIM_Base_SetConfig+0x138>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d01b      	beq.n	8005472 <TIM_Base_SetConfig+0xb2>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a2f      	ldr	r2, [pc, #188]	; (80054fc <TIM_Base_SetConfig+0x13c>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d017      	beq.n	8005472 <TIM_Base_SetConfig+0xb2>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a2e      	ldr	r2, [pc, #184]	; (8005500 <TIM_Base_SetConfig+0x140>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d013      	beq.n	8005472 <TIM_Base_SetConfig+0xb2>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a2d      	ldr	r2, [pc, #180]	; (8005504 <TIM_Base_SetConfig+0x144>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d00f      	beq.n	8005472 <TIM_Base_SetConfig+0xb2>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a2c      	ldr	r2, [pc, #176]	; (8005508 <TIM_Base_SetConfig+0x148>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d00b      	beq.n	8005472 <TIM_Base_SetConfig+0xb2>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a2b      	ldr	r2, [pc, #172]	; (800550c <TIM_Base_SetConfig+0x14c>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d007      	beq.n	8005472 <TIM_Base_SetConfig+0xb2>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a2a      	ldr	r2, [pc, #168]	; (8005510 <TIM_Base_SetConfig+0x150>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d003      	beq.n	8005472 <TIM_Base_SetConfig+0xb2>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a29      	ldr	r2, [pc, #164]	; (8005514 <TIM_Base_SetConfig+0x154>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d108      	bne.n	8005484 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005478:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	4313      	orrs	r3, r2
 8005482:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	4313      	orrs	r3, r2
 8005490:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	689a      	ldr	r2, [r3, #8]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a10      	ldr	r2, [pc, #64]	; (80054ec <TIM_Base_SetConfig+0x12c>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d003      	beq.n	80054b8 <TIM_Base_SetConfig+0xf8>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a12      	ldr	r2, [pc, #72]	; (80054fc <TIM_Base_SetConfig+0x13c>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d103      	bne.n	80054c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	691a      	ldr	r2, [r3, #16]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d105      	bne.n	80054de <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	f023 0201 	bic.w	r2, r3, #1
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	611a      	str	r2, [r3, #16]
  }
}
 80054de:	bf00      	nop
 80054e0:	3714      	adds	r7, #20
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	40010000 	.word	0x40010000
 80054f0:	40000400 	.word	0x40000400
 80054f4:	40000800 	.word	0x40000800
 80054f8:	40000c00 	.word	0x40000c00
 80054fc:	40010400 	.word	0x40010400
 8005500:	40014000 	.word	0x40014000
 8005504:	40014400 	.word	0x40014400
 8005508:	40014800 	.word	0x40014800
 800550c:	40001800 	.word	0x40001800
 8005510:	40001c00 	.word	0x40001c00
 8005514:	40002000 	.word	0x40002000

08005518 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005518:	b480      	push	{r7}
 800551a:	b087      	sub	sp, #28
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a1b      	ldr	r3, [r3, #32]
 800552c:	f023 0201 	bic.w	r2, r3, #1
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	4b2b      	ldr	r3, [pc, #172]	; (80055f0 <TIM_OC1_SetConfig+0xd8>)
 8005544:	4013      	ands	r3, r2
 8005546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f023 0303 	bic.w	r3, r3, #3
 800554e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	4313      	orrs	r3, r2
 8005558:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	f023 0302 	bic.w	r3, r3, #2
 8005560:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	4313      	orrs	r3, r2
 800556a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a21      	ldr	r2, [pc, #132]	; (80055f4 <TIM_OC1_SetConfig+0xdc>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d003      	beq.n	800557c <TIM_OC1_SetConfig+0x64>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a20      	ldr	r2, [pc, #128]	; (80055f8 <TIM_OC1_SetConfig+0xe0>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d10c      	bne.n	8005596 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	f023 0308 	bic.w	r3, r3, #8
 8005582:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	697a      	ldr	r2, [r7, #20]
 800558a:	4313      	orrs	r3, r2
 800558c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	f023 0304 	bic.w	r3, r3, #4
 8005594:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a16      	ldr	r2, [pc, #88]	; (80055f4 <TIM_OC1_SetConfig+0xdc>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d003      	beq.n	80055a6 <TIM_OC1_SetConfig+0x8e>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a15      	ldr	r2, [pc, #84]	; (80055f8 <TIM_OC1_SetConfig+0xe0>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d111      	bne.n	80055ca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	4313      	orrs	r3, r2
 80055be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	693a      	ldr	r2, [r7, #16]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	685a      	ldr	r2, [r3, #4]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	697a      	ldr	r2, [r7, #20]
 80055e2:	621a      	str	r2, [r3, #32]
}
 80055e4:	bf00      	nop
 80055e6:	371c      	adds	r7, #28
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr
 80055f0:	fffeff8f 	.word	0xfffeff8f
 80055f4:	40010000 	.word	0x40010000
 80055f8:	40010400 	.word	0x40010400

080055fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b087      	sub	sp, #28
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a1b      	ldr	r3, [r3, #32]
 800560a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6a1b      	ldr	r3, [r3, #32]
 8005610:	f023 0210 	bic.w	r2, r3, #16
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	4b2e      	ldr	r3, [pc, #184]	; (80056e0 <TIM_OC2_SetConfig+0xe4>)
 8005628:	4013      	ands	r3, r2
 800562a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005632:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	021b      	lsls	r3, r3, #8
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	4313      	orrs	r3, r2
 800563e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	f023 0320 	bic.w	r3, r3, #32
 8005646:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	011b      	lsls	r3, r3, #4
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	4313      	orrs	r3, r2
 8005652:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a23      	ldr	r2, [pc, #140]	; (80056e4 <TIM_OC2_SetConfig+0xe8>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d003      	beq.n	8005664 <TIM_OC2_SetConfig+0x68>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a22      	ldr	r2, [pc, #136]	; (80056e8 <TIM_OC2_SetConfig+0xec>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d10d      	bne.n	8005680 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800566a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	011b      	lsls	r3, r3, #4
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	4313      	orrs	r3, r2
 8005676:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800567e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a18      	ldr	r2, [pc, #96]	; (80056e4 <TIM_OC2_SetConfig+0xe8>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d003      	beq.n	8005690 <TIM_OC2_SetConfig+0x94>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a17      	ldr	r2, [pc, #92]	; (80056e8 <TIM_OC2_SetConfig+0xec>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d113      	bne.n	80056b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005696:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800569e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	695b      	ldr	r3, [r3, #20]
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	685a      	ldr	r2, [r3, #4]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	621a      	str	r2, [r3, #32]
}
 80056d2:	bf00      	nop
 80056d4:	371c      	adds	r7, #28
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	feff8fff 	.word	0xfeff8fff
 80056e4:	40010000 	.word	0x40010000
 80056e8:	40010400 	.word	0x40010400

080056ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b087      	sub	sp, #28
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a1b      	ldr	r3, [r3, #32]
 8005700:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	69db      	ldr	r3, [r3, #28]
 8005712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	4b2d      	ldr	r3, [pc, #180]	; (80057cc <TIM_OC3_SetConfig+0xe0>)
 8005718:	4013      	ands	r3, r2
 800571a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f023 0303 	bic.w	r3, r3, #3
 8005722:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	4313      	orrs	r3, r2
 800572c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005734:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	021b      	lsls	r3, r3, #8
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	4313      	orrs	r3, r2
 8005740:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a22      	ldr	r2, [pc, #136]	; (80057d0 <TIM_OC3_SetConfig+0xe4>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d003      	beq.n	8005752 <TIM_OC3_SetConfig+0x66>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a21      	ldr	r2, [pc, #132]	; (80057d4 <TIM_OC3_SetConfig+0xe8>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d10d      	bne.n	800576e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005758:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	021b      	lsls	r3, r3, #8
 8005760:	697a      	ldr	r2, [r7, #20]
 8005762:	4313      	orrs	r3, r2
 8005764:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800576c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a17      	ldr	r2, [pc, #92]	; (80057d0 <TIM_OC3_SetConfig+0xe4>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d003      	beq.n	800577e <TIM_OC3_SetConfig+0x92>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a16      	ldr	r2, [pc, #88]	; (80057d4 <TIM_OC3_SetConfig+0xe8>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d113      	bne.n	80057a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005784:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800578c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	011b      	lsls	r3, r3, #4
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	4313      	orrs	r3, r2
 8005798:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	011b      	lsls	r3, r3, #4
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	693a      	ldr	r2, [r7, #16]
 80057aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	685a      	ldr	r2, [r3, #4]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	697a      	ldr	r2, [r7, #20]
 80057be:	621a      	str	r2, [r3, #32]
}
 80057c0:	bf00      	nop
 80057c2:	371c      	adds	r7, #28
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr
 80057cc:	fffeff8f 	.word	0xfffeff8f
 80057d0:	40010000 	.word	0x40010000
 80057d4:	40010400 	.word	0x40010400

080057d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057d8:	b480      	push	{r7}
 80057da:	b087      	sub	sp, #28
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a1b      	ldr	r3, [r3, #32]
 80057e6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a1b      	ldr	r3, [r3, #32]
 80057ec:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	69db      	ldr	r3, [r3, #28]
 80057fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	4b1e      	ldr	r3, [pc, #120]	; (800587c <TIM_OC4_SetConfig+0xa4>)
 8005804:	4013      	ands	r3, r2
 8005806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800580e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	021b      	lsls	r3, r3, #8
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	4313      	orrs	r3, r2
 800581a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005822:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	031b      	lsls	r3, r3, #12
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	4313      	orrs	r3, r2
 800582e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a13      	ldr	r2, [pc, #76]	; (8005880 <TIM_OC4_SetConfig+0xa8>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d003      	beq.n	8005840 <TIM_OC4_SetConfig+0x68>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a12      	ldr	r2, [pc, #72]	; (8005884 <TIM_OC4_SetConfig+0xac>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d109      	bne.n	8005854 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005846:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	695b      	ldr	r3, [r3, #20]
 800584c:	019b      	lsls	r3, r3, #6
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	4313      	orrs	r3, r2
 8005852:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	685a      	ldr	r2, [r3, #4]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	621a      	str	r2, [r3, #32]
}
 800586e:	bf00      	nop
 8005870:	371c      	adds	r7, #28
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	feff8fff 	.word	0xfeff8fff
 8005880:	40010000 	.word	0x40010000
 8005884:	40010400 	.word	0x40010400

08005888 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005888:	b480      	push	{r7}
 800588a:	b087      	sub	sp, #28
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a1b      	ldr	r3, [r3, #32]
 800589c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	4b1b      	ldr	r3, [pc, #108]	; (8005920 <TIM_OC5_SetConfig+0x98>)
 80058b4:	4013      	ands	r3, r2
 80058b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	4313      	orrs	r3, r2
 80058c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80058c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	041b      	lsls	r3, r3, #16
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a12      	ldr	r2, [pc, #72]	; (8005924 <TIM_OC5_SetConfig+0x9c>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d003      	beq.n	80058e6 <TIM_OC5_SetConfig+0x5e>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a11      	ldr	r2, [pc, #68]	; (8005928 <TIM_OC5_SetConfig+0xa0>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d109      	bne.n	80058fa <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	021b      	lsls	r3, r3, #8
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	621a      	str	r2, [r3, #32]
}
 8005914:	bf00      	nop
 8005916:	371c      	adds	r7, #28
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr
 8005920:	fffeff8f 	.word	0xfffeff8f
 8005924:	40010000 	.word	0x40010000
 8005928:	40010400 	.word	0x40010400

0800592c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800592c:	b480      	push	{r7}
 800592e:	b087      	sub	sp, #28
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	4b1c      	ldr	r3, [pc, #112]	; (80059c8 <TIM_OC6_SetConfig+0x9c>)
 8005958:	4013      	ands	r3, r2
 800595a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	021b      	lsls	r3, r3, #8
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	4313      	orrs	r3, r2
 8005966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800596e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	051b      	lsls	r3, r3, #20
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	4313      	orrs	r3, r2
 800597a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a13      	ldr	r2, [pc, #76]	; (80059cc <TIM_OC6_SetConfig+0xa0>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d003      	beq.n	800598c <TIM_OC6_SetConfig+0x60>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a12      	ldr	r2, [pc, #72]	; (80059d0 <TIM_OC6_SetConfig+0xa4>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d109      	bne.n	80059a0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005992:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	695b      	ldr	r3, [r3, #20]
 8005998:	029b      	lsls	r3, r3, #10
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	4313      	orrs	r3, r2
 800599e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	685a      	ldr	r2, [r3, #4]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	693a      	ldr	r2, [r7, #16]
 80059b8:	621a      	str	r2, [r3, #32]
}
 80059ba:	bf00      	nop
 80059bc:	371c      	adds	r7, #28
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
 80059c6:	bf00      	nop
 80059c8:	feff8fff 	.word	0xfeff8fff
 80059cc:	40010000 	.word	0x40010000
 80059d0:	40010400 	.word	0x40010400

080059d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b087      	sub	sp, #28
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6a1b      	ldr	r3, [r3, #32]
 80059e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6a1b      	ldr	r3, [r3, #32]
 80059ea:	f023 0201 	bic.w	r2, r3, #1
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	011b      	lsls	r3, r3, #4
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	f023 030a 	bic.w	r3, r3, #10
 8005a10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	693a      	ldr	r2, [r7, #16]
 8005a1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	697a      	ldr	r2, [r7, #20]
 8005a24:	621a      	str	r2, [r3, #32]
}
 8005a26:	bf00      	nop
 8005a28:	371c      	adds	r7, #28
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr

08005a32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a32:	b480      	push	{r7}
 8005a34:	b087      	sub	sp, #28
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	60f8      	str	r0, [r7, #12]
 8005a3a:	60b9      	str	r1, [r7, #8]
 8005a3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6a1b      	ldr	r3, [r3, #32]
 8005a48:	f023 0210 	bic.w	r2, r3, #16
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	699b      	ldr	r3, [r3, #24]
 8005a54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	031b      	lsls	r3, r3, #12
 8005a62:	693a      	ldr	r2, [r7, #16]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a6e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	011b      	lsls	r3, r3, #4
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	697a      	ldr	r2, [r7, #20]
 8005a84:	621a      	str	r2, [r3, #32]
}
 8005a86:	bf00      	nop
 8005a88:	371c      	adds	r7, #28
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr

08005a92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a92:	b480      	push	{r7}
 8005a94:	b085      	sub	sp, #20
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
 8005a9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aa8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005aaa:	683a      	ldr	r2, [r7, #0]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	f043 0307 	orr.w	r3, r3, #7
 8005ab4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	609a      	str	r2, [r3, #8]
}
 8005abc:	bf00      	nop
 8005abe:	3714      	adds	r7, #20
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b087      	sub	sp, #28
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	607a      	str	r2, [r7, #4]
 8005ad4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ae2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	021a      	lsls	r2, r3, #8
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	431a      	orrs	r2, r3
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	697a      	ldr	r2, [r7, #20]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	697a      	ldr	r2, [r7, #20]
 8005afa:	609a      	str	r2, [r3, #8]
}
 8005afc:	bf00      	nop
 8005afe:	371c      	adds	r7, #28
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b087      	sub	sp, #28
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	f003 031f 	and.w	r3, r3, #31
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6a1a      	ldr	r2, [r3, #32]
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	43db      	mvns	r3, r3
 8005b2a:	401a      	ands	r2, r3
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6a1a      	ldr	r2, [r3, #32]
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	f003 031f 	and.w	r3, r3, #31
 8005b3a:	6879      	ldr	r1, [r7, #4]
 8005b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b40:	431a      	orrs	r2, r3
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	621a      	str	r2, [r3, #32]
}
 8005b46:	bf00      	nop
 8005b48:	371c      	adds	r7, #28
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
	...

08005b54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d101      	bne.n	8005b6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b68:	2302      	movs	r3, #2
 8005b6a:	e06d      	b.n	8005c48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2202      	movs	r2, #2
 8005b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a30      	ldr	r2, [pc, #192]	; (8005c54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d004      	beq.n	8005ba0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a2f      	ldr	r2, [pc, #188]	; (8005c58 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d108      	bne.n	8005bb2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005ba6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a20      	ldr	r2, [pc, #128]	; (8005c54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d022      	beq.n	8005c1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bde:	d01d      	beq.n	8005c1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a1d      	ldr	r2, [pc, #116]	; (8005c5c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d018      	beq.n	8005c1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a1c      	ldr	r2, [pc, #112]	; (8005c60 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d013      	beq.n	8005c1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a1a      	ldr	r2, [pc, #104]	; (8005c64 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d00e      	beq.n	8005c1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a15      	ldr	r2, [pc, #84]	; (8005c58 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d009      	beq.n	8005c1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a16      	ldr	r2, [pc, #88]	; (8005c68 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d004      	beq.n	8005c1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a15      	ldr	r2, [pc, #84]	; (8005c6c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d10c      	bne.n	8005c36 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c22:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	68ba      	ldr	r2, [r7, #8]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68ba      	ldr	r2, [r7, #8]
 8005c34:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3714      	adds	r7, #20
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr
 8005c54:	40010000 	.word	0x40010000
 8005c58:	40010400 	.word	0x40010400
 8005c5c:	40000400 	.word	0x40000400
 8005c60:	40000800 	.word	0x40000800
 8005c64:	40000c00 	.word	0x40000c00
 8005c68:	40014000 	.word	0x40014000
 8005c6c:	40001800 	.word	0x40001800

08005c70 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c78:	bf00      	nop
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c8c:	bf00      	nop
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ca0:	bf00      	nop
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b082      	sub	sp, #8
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d101      	bne.n	8005cbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e040      	b.n	8005d40 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d106      	bne.n	8005cd4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f7fb fc30 	bl	8001534 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2224      	movs	r2, #36	; 0x24
 8005cd8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f022 0201 	bic.w	r2, r2, #1
 8005ce8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d002      	beq.n	8005cf8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 fa8c 	bl	8006210 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 f825 	bl	8005d48 <UART_SetConfig>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d101      	bne.n	8005d08 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e01b      	b.n	8005d40 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	685a      	ldr	r2, [r3, #4]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	689a      	ldr	r2, [r3, #8]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f042 0201 	orr.w	r2, r2, #1
 8005d36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 fb0b 	bl	8006354 <UART_CheckIdleState>
 8005d3e:	4603      	mov	r3, r0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3708      	adds	r7, #8
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b088      	sub	sp, #32
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d50:	2300      	movs	r3, #0
 8005d52:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	689a      	ldr	r2, [r3, #8]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	431a      	orrs	r2, r3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	431a      	orrs	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	69db      	ldr	r3, [r3, #28]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	4ba6      	ldr	r3, [pc, #664]	; (800600c <UART_SetConfig+0x2c4>)
 8005d74:	4013      	ands	r3, r2
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	6812      	ldr	r2, [r2, #0]
 8005d7a:	6979      	ldr	r1, [r7, #20]
 8005d7c:	430b      	orrs	r3, r1
 8005d7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	68da      	ldr	r2, [r3, #12]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	430a      	orrs	r2, r1
 8005d94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a1b      	ldr	r3, [r3, #32]
 8005da0:	697a      	ldr	r2, [r7, #20]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	697a      	ldr	r2, [r7, #20]
 8005db6:	430a      	orrs	r2, r1
 8005db8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a94      	ldr	r2, [pc, #592]	; (8006010 <UART_SetConfig+0x2c8>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d120      	bne.n	8005e06 <UART_SetConfig+0xbe>
 8005dc4:	4b93      	ldr	r3, [pc, #588]	; (8006014 <UART_SetConfig+0x2cc>)
 8005dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dca:	f003 0303 	and.w	r3, r3, #3
 8005dce:	2b03      	cmp	r3, #3
 8005dd0:	d816      	bhi.n	8005e00 <UART_SetConfig+0xb8>
 8005dd2:	a201      	add	r2, pc, #4	; (adr r2, 8005dd8 <UART_SetConfig+0x90>)
 8005dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd8:	08005de9 	.word	0x08005de9
 8005ddc:	08005df5 	.word	0x08005df5
 8005de0:	08005def 	.word	0x08005def
 8005de4:	08005dfb 	.word	0x08005dfb
 8005de8:	2301      	movs	r3, #1
 8005dea:	77fb      	strb	r3, [r7, #31]
 8005dec:	e150      	b.n	8006090 <UART_SetConfig+0x348>
 8005dee:	2302      	movs	r3, #2
 8005df0:	77fb      	strb	r3, [r7, #31]
 8005df2:	e14d      	b.n	8006090 <UART_SetConfig+0x348>
 8005df4:	2304      	movs	r3, #4
 8005df6:	77fb      	strb	r3, [r7, #31]
 8005df8:	e14a      	b.n	8006090 <UART_SetConfig+0x348>
 8005dfa:	2308      	movs	r3, #8
 8005dfc:	77fb      	strb	r3, [r7, #31]
 8005dfe:	e147      	b.n	8006090 <UART_SetConfig+0x348>
 8005e00:	2310      	movs	r3, #16
 8005e02:	77fb      	strb	r3, [r7, #31]
 8005e04:	e144      	b.n	8006090 <UART_SetConfig+0x348>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a83      	ldr	r2, [pc, #524]	; (8006018 <UART_SetConfig+0x2d0>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d132      	bne.n	8005e76 <UART_SetConfig+0x12e>
 8005e10:	4b80      	ldr	r3, [pc, #512]	; (8006014 <UART_SetConfig+0x2cc>)
 8005e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e16:	f003 030c 	and.w	r3, r3, #12
 8005e1a:	2b0c      	cmp	r3, #12
 8005e1c:	d828      	bhi.n	8005e70 <UART_SetConfig+0x128>
 8005e1e:	a201      	add	r2, pc, #4	; (adr r2, 8005e24 <UART_SetConfig+0xdc>)
 8005e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e24:	08005e59 	.word	0x08005e59
 8005e28:	08005e71 	.word	0x08005e71
 8005e2c:	08005e71 	.word	0x08005e71
 8005e30:	08005e71 	.word	0x08005e71
 8005e34:	08005e65 	.word	0x08005e65
 8005e38:	08005e71 	.word	0x08005e71
 8005e3c:	08005e71 	.word	0x08005e71
 8005e40:	08005e71 	.word	0x08005e71
 8005e44:	08005e5f 	.word	0x08005e5f
 8005e48:	08005e71 	.word	0x08005e71
 8005e4c:	08005e71 	.word	0x08005e71
 8005e50:	08005e71 	.word	0x08005e71
 8005e54:	08005e6b 	.word	0x08005e6b
 8005e58:	2300      	movs	r3, #0
 8005e5a:	77fb      	strb	r3, [r7, #31]
 8005e5c:	e118      	b.n	8006090 <UART_SetConfig+0x348>
 8005e5e:	2302      	movs	r3, #2
 8005e60:	77fb      	strb	r3, [r7, #31]
 8005e62:	e115      	b.n	8006090 <UART_SetConfig+0x348>
 8005e64:	2304      	movs	r3, #4
 8005e66:	77fb      	strb	r3, [r7, #31]
 8005e68:	e112      	b.n	8006090 <UART_SetConfig+0x348>
 8005e6a:	2308      	movs	r3, #8
 8005e6c:	77fb      	strb	r3, [r7, #31]
 8005e6e:	e10f      	b.n	8006090 <UART_SetConfig+0x348>
 8005e70:	2310      	movs	r3, #16
 8005e72:	77fb      	strb	r3, [r7, #31]
 8005e74:	e10c      	b.n	8006090 <UART_SetConfig+0x348>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a68      	ldr	r2, [pc, #416]	; (800601c <UART_SetConfig+0x2d4>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d120      	bne.n	8005ec2 <UART_SetConfig+0x17a>
 8005e80:	4b64      	ldr	r3, [pc, #400]	; (8006014 <UART_SetConfig+0x2cc>)
 8005e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e86:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005e8a:	2b30      	cmp	r3, #48	; 0x30
 8005e8c:	d013      	beq.n	8005eb6 <UART_SetConfig+0x16e>
 8005e8e:	2b30      	cmp	r3, #48	; 0x30
 8005e90:	d814      	bhi.n	8005ebc <UART_SetConfig+0x174>
 8005e92:	2b20      	cmp	r3, #32
 8005e94:	d009      	beq.n	8005eaa <UART_SetConfig+0x162>
 8005e96:	2b20      	cmp	r3, #32
 8005e98:	d810      	bhi.n	8005ebc <UART_SetConfig+0x174>
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d002      	beq.n	8005ea4 <UART_SetConfig+0x15c>
 8005e9e:	2b10      	cmp	r3, #16
 8005ea0:	d006      	beq.n	8005eb0 <UART_SetConfig+0x168>
 8005ea2:	e00b      	b.n	8005ebc <UART_SetConfig+0x174>
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	77fb      	strb	r3, [r7, #31]
 8005ea8:	e0f2      	b.n	8006090 <UART_SetConfig+0x348>
 8005eaa:	2302      	movs	r3, #2
 8005eac:	77fb      	strb	r3, [r7, #31]
 8005eae:	e0ef      	b.n	8006090 <UART_SetConfig+0x348>
 8005eb0:	2304      	movs	r3, #4
 8005eb2:	77fb      	strb	r3, [r7, #31]
 8005eb4:	e0ec      	b.n	8006090 <UART_SetConfig+0x348>
 8005eb6:	2308      	movs	r3, #8
 8005eb8:	77fb      	strb	r3, [r7, #31]
 8005eba:	e0e9      	b.n	8006090 <UART_SetConfig+0x348>
 8005ebc:	2310      	movs	r3, #16
 8005ebe:	77fb      	strb	r3, [r7, #31]
 8005ec0:	e0e6      	b.n	8006090 <UART_SetConfig+0x348>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a56      	ldr	r2, [pc, #344]	; (8006020 <UART_SetConfig+0x2d8>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d120      	bne.n	8005f0e <UART_SetConfig+0x1c6>
 8005ecc:	4b51      	ldr	r3, [pc, #324]	; (8006014 <UART_SetConfig+0x2cc>)
 8005ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ed2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005ed6:	2bc0      	cmp	r3, #192	; 0xc0
 8005ed8:	d013      	beq.n	8005f02 <UART_SetConfig+0x1ba>
 8005eda:	2bc0      	cmp	r3, #192	; 0xc0
 8005edc:	d814      	bhi.n	8005f08 <UART_SetConfig+0x1c0>
 8005ede:	2b80      	cmp	r3, #128	; 0x80
 8005ee0:	d009      	beq.n	8005ef6 <UART_SetConfig+0x1ae>
 8005ee2:	2b80      	cmp	r3, #128	; 0x80
 8005ee4:	d810      	bhi.n	8005f08 <UART_SetConfig+0x1c0>
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d002      	beq.n	8005ef0 <UART_SetConfig+0x1a8>
 8005eea:	2b40      	cmp	r3, #64	; 0x40
 8005eec:	d006      	beq.n	8005efc <UART_SetConfig+0x1b4>
 8005eee:	e00b      	b.n	8005f08 <UART_SetConfig+0x1c0>
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	77fb      	strb	r3, [r7, #31]
 8005ef4:	e0cc      	b.n	8006090 <UART_SetConfig+0x348>
 8005ef6:	2302      	movs	r3, #2
 8005ef8:	77fb      	strb	r3, [r7, #31]
 8005efa:	e0c9      	b.n	8006090 <UART_SetConfig+0x348>
 8005efc:	2304      	movs	r3, #4
 8005efe:	77fb      	strb	r3, [r7, #31]
 8005f00:	e0c6      	b.n	8006090 <UART_SetConfig+0x348>
 8005f02:	2308      	movs	r3, #8
 8005f04:	77fb      	strb	r3, [r7, #31]
 8005f06:	e0c3      	b.n	8006090 <UART_SetConfig+0x348>
 8005f08:	2310      	movs	r3, #16
 8005f0a:	77fb      	strb	r3, [r7, #31]
 8005f0c:	e0c0      	b.n	8006090 <UART_SetConfig+0x348>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a44      	ldr	r2, [pc, #272]	; (8006024 <UART_SetConfig+0x2dc>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d125      	bne.n	8005f64 <UART_SetConfig+0x21c>
 8005f18:	4b3e      	ldr	r3, [pc, #248]	; (8006014 <UART_SetConfig+0x2cc>)
 8005f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f26:	d017      	beq.n	8005f58 <UART_SetConfig+0x210>
 8005f28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f2c:	d817      	bhi.n	8005f5e <UART_SetConfig+0x216>
 8005f2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f32:	d00b      	beq.n	8005f4c <UART_SetConfig+0x204>
 8005f34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f38:	d811      	bhi.n	8005f5e <UART_SetConfig+0x216>
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d003      	beq.n	8005f46 <UART_SetConfig+0x1fe>
 8005f3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f42:	d006      	beq.n	8005f52 <UART_SetConfig+0x20a>
 8005f44:	e00b      	b.n	8005f5e <UART_SetConfig+0x216>
 8005f46:	2300      	movs	r3, #0
 8005f48:	77fb      	strb	r3, [r7, #31]
 8005f4a:	e0a1      	b.n	8006090 <UART_SetConfig+0x348>
 8005f4c:	2302      	movs	r3, #2
 8005f4e:	77fb      	strb	r3, [r7, #31]
 8005f50:	e09e      	b.n	8006090 <UART_SetConfig+0x348>
 8005f52:	2304      	movs	r3, #4
 8005f54:	77fb      	strb	r3, [r7, #31]
 8005f56:	e09b      	b.n	8006090 <UART_SetConfig+0x348>
 8005f58:	2308      	movs	r3, #8
 8005f5a:	77fb      	strb	r3, [r7, #31]
 8005f5c:	e098      	b.n	8006090 <UART_SetConfig+0x348>
 8005f5e:	2310      	movs	r3, #16
 8005f60:	77fb      	strb	r3, [r7, #31]
 8005f62:	e095      	b.n	8006090 <UART_SetConfig+0x348>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a2f      	ldr	r2, [pc, #188]	; (8006028 <UART_SetConfig+0x2e0>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d125      	bne.n	8005fba <UART_SetConfig+0x272>
 8005f6e:	4b29      	ldr	r3, [pc, #164]	; (8006014 <UART_SetConfig+0x2cc>)
 8005f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f74:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005f78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f7c:	d017      	beq.n	8005fae <UART_SetConfig+0x266>
 8005f7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f82:	d817      	bhi.n	8005fb4 <UART_SetConfig+0x26c>
 8005f84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f88:	d00b      	beq.n	8005fa2 <UART_SetConfig+0x25a>
 8005f8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f8e:	d811      	bhi.n	8005fb4 <UART_SetConfig+0x26c>
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d003      	beq.n	8005f9c <UART_SetConfig+0x254>
 8005f94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f98:	d006      	beq.n	8005fa8 <UART_SetConfig+0x260>
 8005f9a:	e00b      	b.n	8005fb4 <UART_SetConfig+0x26c>
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	77fb      	strb	r3, [r7, #31]
 8005fa0:	e076      	b.n	8006090 <UART_SetConfig+0x348>
 8005fa2:	2302      	movs	r3, #2
 8005fa4:	77fb      	strb	r3, [r7, #31]
 8005fa6:	e073      	b.n	8006090 <UART_SetConfig+0x348>
 8005fa8:	2304      	movs	r3, #4
 8005faa:	77fb      	strb	r3, [r7, #31]
 8005fac:	e070      	b.n	8006090 <UART_SetConfig+0x348>
 8005fae:	2308      	movs	r3, #8
 8005fb0:	77fb      	strb	r3, [r7, #31]
 8005fb2:	e06d      	b.n	8006090 <UART_SetConfig+0x348>
 8005fb4:	2310      	movs	r3, #16
 8005fb6:	77fb      	strb	r3, [r7, #31]
 8005fb8:	e06a      	b.n	8006090 <UART_SetConfig+0x348>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a1b      	ldr	r2, [pc, #108]	; (800602c <UART_SetConfig+0x2e4>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d138      	bne.n	8006036 <UART_SetConfig+0x2ee>
 8005fc4:	4b13      	ldr	r3, [pc, #76]	; (8006014 <UART_SetConfig+0x2cc>)
 8005fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fca:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005fce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005fd2:	d017      	beq.n	8006004 <UART_SetConfig+0x2bc>
 8005fd4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005fd8:	d82a      	bhi.n	8006030 <UART_SetConfig+0x2e8>
 8005fda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fde:	d00b      	beq.n	8005ff8 <UART_SetConfig+0x2b0>
 8005fe0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fe4:	d824      	bhi.n	8006030 <UART_SetConfig+0x2e8>
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d003      	beq.n	8005ff2 <UART_SetConfig+0x2aa>
 8005fea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fee:	d006      	beq.n	8005ffe <UART_SetConfig+0x2b6>
 8005ff0:	e01e      	b.n	8006030 <UART_SetConfig+0x2e8>
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	77fb      	strb	r3, [r7, #31]
 8005ff6:	e04b      	b.n	8006090 <UART_SetConfig+0x348>
 8005ff8:	2302      	movs	r3, #2
 8005ffa:	77fb      	strb	r3, [r7, #31]
 8005ffc:	e048      	b.n	8006090 <UART_SetConfig+0x348>
 8005ffe:	2304      	movs	r3, #4
 8006000:	77fb      	strb	r3, [r7, #31]
 8006002:	e045      	b.n	8006090 <UART_SetConfig+0x348>
 8006004:	2308      	movs	r3, #8
 8006006:	77fb      	strb	r3, [r7, #31]
 8006008:	e042      	b.n	8006090 <UART_SetConfig+0x348>
 800600a:	bf00      	nop
 800600c:	efff69f3 	.word	0xefff69f3
 8006010:	40011000 	.word	0x40011000
 8006014:	40023800 	.word	0x40023800
 8006018:	40004400 	.word	0x40004400
 800601c:	40004800 	.word	0x40004800
 8006020:	40004c00 	.word	0x40004c00
 8006024:	40005000 	.word	0x40005000
 8006028:	40011400 	.word	0x40011400
 800602c:	40007800 	.word	0x40007800
 8006030:	2310      	movs	r3, #16
 8006032:	77fb      	strb	r3, [r7, #31]
 8006034:	e02c      	b.n	8006090 <UART_SetConfig+0x348>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a72      	ldr	r2, [pc, #456]	; (8006204 <UART_SetConfig+0x4bc>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d125      	bne.n	800608c <UART_SetConfig+0x344>
 8006040:	4b71      	ldr	r3, [pc, #452]	; (8006208 <UART_SetConfig+0x4c0>)
 8006042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006046:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800604a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800604e:	d017      	beq.n	8006080 <UART_SetConfig+0x338>
 8006050:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006054:	d817      	bhi.n	8006086 <UART_SetConfig+0x33e>
 8006056:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800605a:	d00b      	beq.n	8006074 <UART_SetConfig+0x32c>
 800605c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006060:	d811      	bhi.n	8006086 <UART_SetConfig+0x33e>
 8006062:	2b00      	cmp	r3, #0
 8006064:	d003      	beq.n	800606e <UART_SetConfig+0x326>
 8006066:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800606a:	d006      	beq.n	800607a <UART_SetConfig+0x332>
 800606c:	e00b      	b.n	8006086 <UART_SetConfig+0x33e>
 800606e:	2300      	movs	r3, #0
 8006070:	77fb      	strb	r3, [r7, #31]
 8006072:	e00d      	b.n	8006090 <UART_SetConfig+0x348>
 8006074:	2302      	movs	r3, #2
 8006076:	77fb      	strb	r3, [r7, #31]
 8006078:	e00a      	b.n	8006090 <UART_SetConfig+0x348>
 800607a:	2304      	movs	r3, #4
 800607c:	77fb      	strb	r3, [r7, #31]
 800607e:	e007      	b.n	8006090 <UART_SetConfig+0x348>
 8006080:	2308      	movs	r3, #8
 8006082:	77fb      	strb	r3, [r7, #31]
 8006084:	e004      	b.n	8006090 <UART_SetConfig+0x348>
 8006086:	2310      	movs	r3, #16
 8006088:	77fb      	strb	r3, [r7, #31]
 800608a:	e001      	b.n	8006090 <UART_SetConfig+0x348>
 800608c:	2310      	movs	r3, #16
 800608e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	69db      	ldr	r3, [r3, #28]
 8006094:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006098:	d15b      	bne.n	8006152 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800609a:	7ffb      	ldrb	r3, [r7, #31]
 800609c:	2b08      	cmp	r3, #8
 800609e:	d828      	bhi.n	80060f2 <UART_SetConfig+0x3aa>
 80060a0:	a201      	add	r2, pc, #4	; (adr r2, 80060a8 <UART_SetConfig+0x360>)
 80060a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a6:	bf00      	nop
 80060a8:	080060cd 	.word	0x080060cd
 80060ac:	080060d5 	.word	0x080060d5
 80060b0:	080060dd 	.word	0x080060dd
 80060b4:	080060f3 	.word	0x080060f3
 80060b8:	080060e3 	.word	0x080060e3
 80060bc:	080060f3 	.word	0x080060f3
 80060c0:	080060f3 	.word	0x080060f3
 80060c4:	080060f3 	.word	0x080060f3
 80060c8:	080060eb 	.word	0x080060eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060cc:	f7fd fff8 	bl	80040c0 <HAL_RCC_GetPCLK1Freq>
 80060d0:	61b8      	str	r0, [r7, #24]
        break;
 80060d2:	e013      	b.n	80060fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060d4:	f7fe f808 	bl	80040e8 <HAL_RCC_GetPCLK2Freq>
 80060d8:	61b8      	str	r0, [r7, #24]
        break;
 80060da:	e00f      	b.n	80060fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060dc:	4b4b      	ldr	r3, [pc, #300]	; (800620c <UART_SetConfig+0x4c4>)
 80060de:	61bb      	str	r3, [r7, #24]
        break;
 80060e0:	e00c      	b.n	80060fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060e2:	f7fd fedd 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 80060e6:	61b8      	str	r0, [r7, #24]
        break;
 80060e8:	e008      	b.n	80060fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060ee:	61bb      	str	r3, [r7, #24]
        break;
 80060f0:	e004      	b.n	80060fc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80060f2:	2300      	movs	r3, #0
 80060f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	77bb      	strb	r3, [r7, #30]
        break;
 80060fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d074      	beq.n	80061ec <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	005a      	lsls	r2, r3, #1
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	085b      	lsrs	r3, r3, #1
 800610c:	441a      	add	r2, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	fbb2 f3f3 	udiv	r3, r2, r3
 8006116:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	2b0f      	cmp	r3, #15
 800611c:	d916      	bls.n	800614c <UART_SetConfig+0x404>
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006124:	d212      	bcs.n	800614c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	b29b      	uxth	r3, r3
 800612a:	f023 030f 	bic.w	r3, r3, #15
 800612e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	085b      	lsrs	r3, r3, #1
 8006134:	b29b      	uxth	r3, r3
 8006136:	f003 0307 	and.w	r3, r3, #7
 800613a:	b29a      	uxth	r2, r3
 800613c:	89fb      	ldrh	r3, [r7, #14]
 800613e:	4313      	orrs	r3, r2
 8006140:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	89fa      	ldrh	r2, [r7, #14]
 8006148:	60da      	str	r2, [r3, #12]
 800614a:	e04f      	b.n	80061ec <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	77bb      	strb	r3, [r7, #30]
 8006150:	e04c      	b.n	80061ec <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006152:	7ffb      	ldrb	r3, [r7, #31]
 8006154:	2b08      	cmp	r3, #8
 8006156:	d828      	bhi.n	80061aa <UART_SetConfig+0x462>
 8006158:	a201      	add	r2, pc, #4	; (adr r2, 8006160 <UART_SetConfig+0x418>)
 800615a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800615e:	bf00      	nop
 8006160:	08006185 	.word	0x08006185
 8006164:	0800618d 	.word	0x0800618d
 8006168:	08006195 	.word	0x08006195
 800616c:	080061ab 	.word	0x080061ab
 8006170:	0800619b 	.word	0x0800619b
 8006174:	080061ab 	.word	0x080061ab
 8006178:	080061ab 	.word	0x080061ab
 800617c:	080061ab 	.word	0x080061ab
 8006180:	080061a3 	.word	0x080061a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006184:	f7fd ff9c 	bl	80040c0 <HAL_RCC_GetPCLK1Freq>
 8006188:	61b8      	str	r0, [r7, #24]
        break;
 800618a:	e013      	b.n	80061b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800618c:	f7fd ffac 	bl	80040e8 <HAL_RCC_GetPCLK2Freq>
 8006190:	61b8      	str	r0, [r7, #24]
        break;
 8006192:	e00f      	b.n	80061b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006194:	4b1d      	ldr	r3, [pc, #116]	; (800620c <UART_SetConfig+0x4c4>)
 8006196:	61bb      	str	r3, [r7, #24]
        break;
 8006198:	e00c      	b.n	80061b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800619a:	f7fd fe81 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 800619e:	61b8      	str	r0, [r7, #24]
        break;
 80061a0:	e008      	b.n	80061b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061a6:	61bb      	str	r3, [r7, #24]
        break;
 80061a8:	e004      	b.n	80061b4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80061aa:	2300      	movs	r3, #0
 80061ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	77bb      	strb	r3, [r7, #30]
        break;
 80061b2:	bf00      	nop
    }

    if (pclk != 0U)
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d018      	beq.n	80061ec <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	085a      	lsrs	r2, r3, #1
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	441a      	add	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061cc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	2b0f      	cmp	r3, #15
 80061d2:	d909      	bls.n	80061e8 <UART_SetConfig+0x4a0>
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061da:	d205      	bcs.n	80061e8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	b29a      	uxth	r2, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	60da      	str	r2, [r3, #12]
 80061e6:	e001      	b.n	80061ec <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80061f8:	7fbb      	ldrb	r3, [r7, #30]
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3720      	adds	r7, #32
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	40007c00 	.word	0x40007c00
 8006208:	40023800 	.word	0x40023800
 800620c:	00f42400 	.word	0x00f42400

08006210 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621c:	f003 0308 	and.w	r3, r3, #8
 8006220:	2b00      	cmp	r3, #0
 8006222:	d00a      	beq.n	800623a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	430a      	orrs	r2, r1
 8006238:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623e:	f003 0301 	and.w	r3, r3, #1
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00a      	beq.n	800625c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	430a      	orrs	r2, r1
 800625a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006260:	f003 0302 	and.w	r3, r3, #2
 8006264:	2b00      	cmp	r3, #0
 8006266:	d00a      	beq.n	800627e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	430a      	orrs	r2, r1
 800627c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006282:	f003 0304 	and.w	r3, r3, #4
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00a      	beq.n	80062a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	430a      	orrs	r2, r1
 800629e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a4:	f003 0310 	and.w	r3, r3, #16
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d00a      	beq.n	80062c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	430a      	orrs	r2, r1
 80062c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c6:	f003 0320 	and.w	r3, r3, #32
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00a      	beq.n	80062e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	430a      	orrs	r2, r1
 80062e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d01a      	beq.n	8006326 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	430a      	orrs	r2, r1
 8006304:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800630e:	d10a      	bne.n	8006326 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	430a      	orrs	r2, r1
 8006324:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00a      	beq.n	8006348 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	430a      	orrs	r2, r1
 8006346:	605a      	str	r2, [r3, #4]
  }
}
 8006348:	bf00      	nop
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b098      	sub	sp, #96	; 0x60
 8006358:	af02      	add	r7, sp, #8
 800635a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006364:	f7fb fc02 	bl	8001b6c <HAL_GetTick>
 8006368:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0308 	and.w	r3, r3, #8
 8006374:	2b08      	cmp	r3, #8
 8006376:	d12e      	bne.n	80063d6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006378:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800637c:	9300      	str	r3, [sp, #0]
 800637e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006380:	2200      	movs	r2, #0
 8006382:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f88c 	bl	80064a4 <UART_WaitOnFlagUntilTimeout>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d021      	beq.n	80063d6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800639a:	e853 3f00 	ldrex	r3, [r3]
 800639e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80063a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063a6:	653b      	str	r3, [r7, #80]	; 0x50
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	461a      	mov	r2, r3
 80063ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063b0:	647b      	str	r3, [r7, #68]	; 0x44
 80063b2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80063b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063b8:	e841 2300 	strex	r3, r2, [r1]
 80063bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80063be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d1e6      	bne.n	8006392 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2220      	movs	r2, #32
 80063c8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063d2:	2303      	movs	r3, #3
 80063d4:	e062      	b.n	800649c <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 0304 	and.w	r3, r3, #4
 80063e0:	2b04      	cmp	r3, #4
 80063e2:	d149      	bne.n	8006478 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063e8:	9300      	str	r3, [sp, #0]
 80063ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063ec:	2200      	movs	r2, #0
 80063ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 f856 	bl	80064a4 <UART_WaitOnFlagUntilTimeout>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d03c      	beq.n	8006478 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006406:	e853 3f00 	ldrex	r3, [r3]
 800640a:	623b      	str	r3, [r7, #32]
   return(result);
 800640c:	6a3b      	ldr	r3, [r7, #32]
 800640e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006412:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	461a      	mov	r2, r3
 800641a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800641c:	633b      	str	r3, [r7, #48]	; 0x30
 800641e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006420:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006422:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006424:	e841 2300 	strex	r3, r2, [r1]
 8006428:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800642a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642c:	2b00      	cmp	r3, #0
 800642e:	d1e6      	bne.n	80063fe <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	3308      	adds	r3, #8
 8006436:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	e853 3f00 	ldrex	r3, [r3]
 800643e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f023 0301 	bic.w	r3, r3, #1
 8006446:	64bb      	str	r3, [r7, #72]	; 0x48
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	3308      	adds	r3, #8
 800644e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006450:	61fa      	str	r2, [r7, #28]
 8006452:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006454:	69b9      	ldr	r1, [r7, #24]
 8006456:	69fa      	ldr	r2, [r7, #28]
 8006458:	e841 2300 	strex	r3, r2, [r1]
 800645c:	617b      	str	r3, [r7, #20]
   return(result);
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d1e5      	bne.n	8006430 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2220      	movs	r2, #32
 8006468:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006474:	2303      	movs	r3, #3
 8006476:	e011      	b.n	800649c <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2220      	movs	r2, #32
 800647c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2220      	movs	r2, #32
 8006482:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3758      	adds	r7, #88	; 0x58
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	603b      	str	r3, [r7, #0]
 80064b0:	4613      	mov	r3, r2
 80064b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064b4:	e04f      	b.n	8006556 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064bc:	d04b      	beq.n	8006556 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064be:	f7fb fb55 	bl	8001b6c <HAL_GetTick>
 80064c2:	4602      	mov	r2, r0
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	1ad3      	subs	r3, r2, r3
 80064c8:	69ba      	ldr	r2, [r7, #24]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d302      	bcc.n	80064d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d101      	bne.n	80064d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80064d4:	2303      	movs	r3, #3
 80064d6:	e04e      	b.n	8006576 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 0304 	and.w	r3, r3, #4
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d037      	beq.n	8006556 <UART_WaitOnFlagUntilTimeout+0xb2>
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	2b80      	cmp	r3, #128	; 0x80
 80064ea:	d034      	beq.n	8006556 <UART_WaitOnFlagUntilTimeout+0xb2>
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	2b40      	cmp	r3, #64	; 0x40
 80064f0:	d031      	beq.n	8006556 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	69db      	ldr	r3, [r3, #28]
 80064f8:	f003 0308 	and.w	r3, r3, #8
 80064fc:	2b08      	cmp	r3, #8
 80064fe:	d110      	bne.n	8006522 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2208      	movs	r2, #8
 8006506:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006508:	68f8      	ldr	r0, [r7, #12]
 800650a:	f000 f838 	bl	800657e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2208      	movs	r2, #8
 8006512:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	e029      	b.n	8006576 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	69db      	ldr	r3, [r3, #28]
 8006528:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800652c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006530:	d111      	bne.n	8006556 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800653a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f000 f81e 	bl	800657e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2220      	movs	r2, #32
 8006546:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006552:	2303      	movs	r3, #3
 8006554:	e00f      	b.n	8006576 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	69da      	ldr	r2, [r3, #28]
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	4013      	ands	r3, r2
 8006560:	68ba      	ldr	r2, [r7, #8]
 8006562:	429a      	cmp	r2, r3
 8006564:	bf0c      	ite	eq
 8006566:	2301      	moveq	r3, #1
 8006568:	2300      	movne	r3, #0
 800656a:	b2db      	uxtb	r3, r3
 800656c:	461a      	mov	r2, r3
 800656e:	79fb      	ldrb	r3, [r7, #7]
 8006570:	429a      	cmp	r2, r3
 8006572:	d0a0      	beq.n	80064b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	3710      	adds	r7, #16
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}

0800657e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800657e:	b480      	push	{r7}
 8006580:	b095      	sub	sp, #84	; 0x54
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800658c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800658e:	e853 3f00 	ldrex	r3, [r3]
 8006592:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006596:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800659a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	461a      	mov	r2, r3
 80065a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065a4:	643b      	str	r3, [r7, #64]	; 0x40
 80065a6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80065aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80065ac:	e841 2300 	strex	r3, r2, [r1]
 80065b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d1e6      	bne.n	8006586 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	3308      	adds	r3, #8
 80065be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c0:	6a3b      	ldr	r3, [r7, #32]
 80065c2:	e853 3f00 	ldrex	r3, [r3]
 80065c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	f023 0301 	bic.w	r3, r3, #1
 80065ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	3308      	adds	r3, #8
 80065d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065e0:	e841 2300 	strex	r3, r2, [r1]
 80065e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1e5      	bne.n	80065b8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d118      	bne.n	8006626 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	e853 3f00 	ldrex	r3, [r3]
 8006600:	60bb      	str	r3, [r7, #8]
   return(result);
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	f023 0310 	bic.w	r3, r3, #16
 8006608:	647b      	str	r3, [r7, #68]	; 0x44
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	461a      	mov	r2, r3
 8006610:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006612:	61bb      	str	r3, [r7, #24]
 8006614:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006616:	6979      	ldr	r1, [r7, #20]
 8006618:	69ba      	ldr	r2, [r7, #24]
 800661a:	e841 2300 	strex	r3, r2, [r1]
 800661e:	613b      	str	r3, [r7, #16]
   return(result);
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1e6      	bne.n	80065f4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2220      	movs	r2, #32
 800662a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	669a      	str	r2, [r3, #104]	; 0x68
}
 800663a:	bf00      	nop
 800663c:	3754      	adds	r7, #84	; 0x54
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr

08006646 <MotorControl_Init>:
#include "motor_control.h"
#include "string.h"
#include "stdlib.h"

void MotorControl_Init(MotorControl* motor, TIM_HandleTypeDef* timer, uint8_t channel_1, uint8_t channel_2) {
 8006646:	b580      	push	{r7, lr}
 8006648:	b084      	sub	sp, #16
 800664a:	af00      	add	r7, sp, #0
 800664c:	60f8      	str	r0, [r7, #12]
 800664e:	60b9      	str	r1, [r7, #8]
 8006650:	4611      	mov	r1, r2
 8006652:	461a      	mov	r2, r3
 8006654:	460b      	mov	r3, r1
 8006656:	71fb      	strb	r3, [r7, #7]
 8006658:	4613      	mov	r3, r2
 800665a:	71bb      	strb	r3, [r7, #6]
    motor->htim = timer;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	68ba      	ldr	r2, [r7, #8]
 8006660:	601a      	str	r2, [r3, #0]
    motor->channel_1 = channel_1;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	79fa      	ldrb	r2, [r7, #7]
 8006666:	711a      	strb	r2, [r3, #4]
    motor->channel_2 = channel_2;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	79ba      	ldrb	r2, [r7, #6]
 800666c:	715a      	strb	r2, [r3, #5]
    HAL_TIM_PWM_Start(motor->htim, motor->channel_1);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	791b      	ldrb	r3, [r3, #4]
 8006676:	4619      	mov	r1, r3
 8006678:	4610      	mov	r0, r2
 800667a:	f7fe fa99 	bl	8004bb0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(motor->htim, motor->channel_2);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	795b      	ldrb	r3, [r3, #5]
 8006686:	4619      	mov	r1, r3
 8006688:	4610      	mov	r0, r2
 800668a:	f7fe fa91 	bl	8004bb0 <HAL_TIM_PWM_Start>
}
 800668e:	bf00      	nop
 8006690:	3710      	adds	r7, #16
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}

08006696 <ugv_servoInitServo>:
#include "ugv_servo.h"


void ugv_servoInitServo(ugvServo_t *servoM){
 8006696:	b580      	push	{r7, lr}
 8006698:	b082      	sub	sp, #8
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(servoM->timerInstance, servoM->timerCh);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	891b      	ldrh	r3, [r3, #8]
 80066a6:	4619      	mov	r1, r3
 80066a8:	4610      	mov	r0, r2
 80066aa:	f7fe fa81 	bl	8004bb0 <HAL_TIM_PWM_Start>

	servoM->maxPeriod = (int) (servoM->timerARR)*(servoM->maxPulse/servoM->timerPeriod);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	895b      	ldrh	r3, [r3, #10]
 80066b2:	ee07 3a90 	vmov	s15, r3
 80066b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	ed93 6a04 	vldr	s12, [r3, #16]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	edd3 6a05 	vldr	s13, [r3, #20]
 80066c6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80066ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80066d2:	ee17 2a90 	vmov	r2, s15
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	61da      	str	r2, [r3, #28]
	servoM->minPeriod = (int) (servoM->timerARR)*(servoM->minPulse/servoM->timerPeriod);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	895b      	ldrh	r3, [r3, #10]
 80066de:	ee07 3a90 	vmov	s15, r3
 80066e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	ed93 6a03 	vldr	s12, [r3, #12]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	edd3 6a05 	vldr	s13, [r3, #20]
 80066f2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80066f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80066fe:	ee17 2a90 	vmov	r2, s15
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	619a      	str	r2, [r3, #24]

	ugv_servoSetAngle(servoM, servoM->travelOffset);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800670c:	eeb0 0a67 	vmov.f32	s0, s15
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 f804 	bl	800671e <ugv_servoSetAngle>
}
 8006716:	bf00      	nop
 8006718:	3708      	adds	r7, #8
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}

0800671e <ugv_servoSetAngle>:
/**
 *	Make the servo move to a specific angle
 * @param s
 * @param angle
 */
void ugv_servoSetAngle(ugvServo_t *servoM, float angle) {
 800671e:	b480      	push	{r7}
 8006720:	b085      	sub	sp, #20
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
 8006726:	ed87 0a00 	vstr	s0, [r7]
	float setAngle = angle + servoM->travelOffset;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8006730:	ed97 7a00 	vldr	s14, [r7]
 8006734:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006738:	edc7 7a03 	vstr	s15, [r7, #12]

	if ((setAngle) > servoM->maxLimit) {
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8006742:	ed97 7a03 	vldr	s14, [r7, #12]
 8006746:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800674a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800674e:	dd2d      	ble.n	80067ac <ugv_servoSetAngle+0x8e>
		*servoM->timerCCRX = (long unsigned int) ((((servoM->maxLimit)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
				* (servoM->maxPeriod - servoM->minPeriod))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	69da      	ldr	r2, [r3, #28]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	699b      	ldr	r3, [r3, #24]
 800675e:	1ad3      	subs	r3, r2, r3
 8006760:	ee07 3a90 	vmov	s15, r3
 8006764:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006768:	ee67 6a27 	vmul.f32	s13, s14, s15
				/ (servoM->travelAngle)) + servoM->minPeriod);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8006772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	699b      	ldr	r3, [r3, #24]
 800677a:	ee07 3a90 	vmov	s15, r3
 800677e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006782:	ee77 7a27 	vadd.f32	s15, s14, s15
		*servoM->timerCCRX = (long unsigned int) ((((servoM->maxLimit)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800678e:	ee17 2a90 	vmov	r2, s15
 8006792:	601a      	str	r2, [r3, #0]

		servoM->setPointAngle = servoM->maxLimit - servoM->travelOffset;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80067a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	edc3 7a08 	vstr	s15, [r3, #32]
				* (servoM->maxPeriod - servoM->minPeriod))
				/ (servoM->travelAngle)) + servoM->minPeriod);
		servoM->setPointAngle = angle;
	}

}
 80067aa:	e054      	b.n	8006856 <ugv_servoSetAngle+0x138>
	} else if ((setAngle) < servoM->minLimit) {
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80067b2:	ed97 7a03 	vldr	s14, [r7, #12]
 80067b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80067ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067be:	d526      	bpl.n	800680e <ugv_servoSetAngle+0xf0>
		*servoM->timerCCRX = (long unsigned int) ((((servoM->minLimit)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
				* (servoM->maxPeriod - servoM->minPeriod))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	69da      	ldr	r2, [r3, #28]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	ee07 3a90 	vmov	s15, r3
 80067d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80067d8:	ee67 6a27 	vmul.f32	s13, s14, s15
				/ (servoM->travelAngle)) + servoM->minPeriod);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80067e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	ee07 3a90 	vmov	s15, r3
 80067ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80067f2:	ee77 7a27 	vadd.f32	s15, s14, s15
		*servoM->timerCCRX = (long unsigned int) ((((servoM->minLimit)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067fe:	ee17 2a90 	vmov	r2, s15
 8006802:	601a      	str	r2, [r3, #0]
		servoM->setPointAngle = servoM->minLimit;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	621a      	str	r2, [r3, #32]
}
 800680c:	e023      	b.n	8006856 <ugv_servoSetAngle+0x138>
				* (servoM->maxPeriod - servoM->minPeriod))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	69da      	ldr	r2, [r3, #28]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	1ad3      	subs	r3, r2, r3
 8006818:	ee07 3a90 	vmov	s15, r3
 800681c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006820:	edd7 7a03 	vldr	s15, [r7, #12]
 8006824:	ee67 6a27 	vmul.f32	s13, s14, s15
				/ (servoM->travelAngle)) + servoM->minPeriod);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800682e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	ee07 3a90 	vmov	s15, r3
 800683a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800683e:	ee77 7a27 	vadd.f32	s15, s14, s15
		*servoM->timerCCRX = (long unsigned int) ((((setAngle)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800684a:	ee17 2a90 	vmov	r2, s15
 800684e:	601a      	str	r2, [r3, #0]
		servoM->setPointAngle = angle;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	683a      	ldr	r2, [r7, #0]
 8006854:	621a      	str	r2, [r3, #32]
}
 8006856:	bf00      	nop
 8006858:	3714      	adds	r7, #20
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
	...

08006864 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800686a:	4b87      	ldr	r3, [pc, #540]	; (8006a88 <MX_LWIP_Init+0x224>)
 800686c:	22c0      	movs	r2, #192	; 0xc0
 800686e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8006870:	4b85      	ldr	r3, [pc, #532]	; (8006a88 <MX_LWIP_Init+0x224>)
 8006872:	22a8      	movs	r2, #168	; 0xa8
 8006874:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 20;
 8006876:	4b84      	ldr	r3, [pc, #528]	; (8006a88 <MX_LWIP_Init+0x224>)
 8006878:	2214      	movs	r2, #20
 800687a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 21;
 800687c:	4b82      	ldr	r3, [pc, #520]	; (8006a88 <MX_LWIP_Init+0x224>)
 800687e:	2215      	movs	r2, #21
 8006880:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8006882:	4b82      	ldr	r3, [pc, #520]	; (8006a8c <MX_LWIP_Init+0x228>)
 8006884:	22ff      	movs	r2, #255	; 0xff
 8006886:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8006888:	4b80      	ldr	r3, [pc, #512]	; (8006a8c <MX_LWIP_Init+0x228>)
 800688a:	22ff      	movs	r2, #255	; 0xff
 800688c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800688e:	4b7f      	ldr	r3, [pc, #508]	; (8006a8c <MX_LWIP_Init+0x228>)
 8006890:	22ff      	movs	r2, #255	; 0xff
 8006892:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8006894:	4b7d      	ldr	r3, [pc, #500]	; (8006a8c <MX_LWIP_Init+0x228>)
 8006896:	2200      	movs	r2, #0
 8006898:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800689a:	4b7d      	ldr	r3, [pc, #500]	; (8006a90 <MX_LWIP_Init+0x22c>)
 800689c:	22c0      	movs	r2, #192	; 0xc0
 800689e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80068a0:	4b7b      	ldr	r3, [pc, #492]	; (8006a90 <MX_LWIP_Init+0x22c>)
 80068a2:	22a8      	movs	r2, #168	; 0xa8
 80068a4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 20;
 80068a6:	4b7a      	ldr	r3, [pc, #488]	; (8006a90 <MX_LWIP_Init+0x22c>)
 80068a8:	2214      	movs	r2, #20
 80068aa:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80068ac:	4b78      	ldr	r3, [pc, #480]	; (8006a90 <MX_LWIP_Init+0x22c>)
 80068ae:	2201      	movs	r2, #1
 80068b0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80068b2:	f000 fd11 	bl	80072d8 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80068b6:	4b74      	ldr	r3, [pc, #464]	; (8006a88 <MX_LWIP_Init+0x224>)
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	061a      	lsls	r2, r3, #24
 80068bc:	4b72      	ldr	r3, [pc, #456]	; (8006a88 <MX_LWIP_Init+0x224>)
 80068be:	785b      	ldrb	r3, [r3, #1]
 80068c0:	041b      	lsls	r3, r3, #16
 80068c2:	431a      	orrs	r2, r3
 80068c4:	4b70      	ldr	r3, [pc, #448]	; (8006a88 <MX_LWIP_Init+0x224>)
 80068c6:	789b      	ldrb	r3, [r3, #2]
 80068c8:	021b      	lsls	r3, r3, #8
 80068ca:	4313      	orrs	r3, r2
 80068cc:	4a6e      	ldr	r2, [pc, #440]	; (8006a88 <MX_LWIP_Init+0x224>)
 80068ce:	78d2      	ldrb	r2, [r2, #3]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	061a      	lsls	r2, r3, #24
 80068d4:	4b6c      	ldr	r3, [pc, #432]	; (8006a88 <MX_LWIP_Init+0x224>)
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	0619      	lsls	r1, r3, #24
 80068da:	4b6b      	ldr	r3, [pc, #428]	; (8006a88 <MX_LWIP_Init+0x224>)
 80068dc:	785b      	ldrb	r3, [r3, #1]
 80068de:	041b      	lsls	r3, r3, #16
 80068e0:	4319      	orrs	r1, r3
 80068e2:	4b69      	ldr	r3, [pc, #420]	; (8006a88 <MX_LWIP_Init+0x224>)
 80068e4:	789b      	ldrb	r3, [r3, #2]
 80068e6:	021b      	lsls	r3, r3, #8
 80068e8:	430b      	orrs	r3, r1
 80068ea:	4967      	ldr	r1, [pc, #412]	; (8006a88 <MX_LWIP_Init+0x224>)
 80068ec:	78c9      	ldrb	r1, [r1, #3]
 80068ee:	430b      	orrs	r3, r1
 80068f0:	021b      	lsls	r3, r3, #8
 80068f2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80068f6:	431a      	orrs	r2, r3
 80068f8:	4b63      	ldr	r3, [pc, #396]	; (8006a88 <MX_LWIP_Init+0x224>)
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	0619      	lsls	r1, r3, #24
 80068fe:	4b62      	ldr	r3, [pc, #392]	; (8006a88 <MX_LWIP_Init+0x224>)
 8006900:	785b      	ldrb	r3, [r3, #1]
 8006902:	041b      	lsls	r3, r3, #16
 8006904:	4319      	orrs	r1, r3
 8006906:	4b60      	ldr	r3, [pc, #384]	; (8006a88 <MX_LWIP_Init+0x224>)
 8006908:	789b      	ldrb	r3, [r3, #2]
 800690a:	021b      	lsls	r3, r3, #8
 800690c:	430b      	orrs	r3, r1
 800690e:	495e      	ldr	r1, [pc, #376]	; (8006a88 <MX_LWIP_Init+0x224>)
 8006910:	78c9      	ldrb	r1, [r1, #3]
 8006912:	430b      	orrs	r3, r1
 8006914:	0a1b      	lsrs	r3, r3, #8
 8006916:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800691a:	431a      	orrs	r2, r3
 800691c:	4b5a      	ldr	r3, [pc, #360]	; (8006a88 <MX_LWIP_Init+0x224>)
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	0619      	lsls	r1, r3, #24
 8006922:	4b59      	ldr	r3, [pc, #356]	; (8006a88 <MX_LWIP_Init+0x224>)
 8006924:	785b      	ldrb	r3, [r3, #1]
 8006926:	041b      	lsls	r3, r3, #16
 8006928:	4319      	orrs	r1, r3
 800692a:	4b57      	ldr	r3, [pc, #348]	; (8006a88 <MX_LWIP_Init+0x224>)
 800692c:	789b      	ldrb	r3, [r3, #2]
 800692e:	021b      	lsls	r3, r3, #8
 8006930:	430b      	orrs	r3, r1
 8006932:	4955      	ldr	r1, [pc, #340]	; (8006a88 <MX_LWIP_Init+0x224>)
 8006934:	78c9      	ldrb	r1, [r1, #3]
 8006936:	430b      	orrs	r3, r1
 8006938:	0e1b      	lsrs	r3, r3, #24
 800693a:	4313      	orrs	r3, r2
 800693c:	4a55      	ldr	r2, [pc, #340]	; (8006a94 <MX_LWIP_Init+0x230>)
 800693e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8006940:	4b52      	ldr	r3, [pc, #328]	; (8006a8c <MX_LWIP_Init+0x228>)
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	061a      	lsls	r2, r3, #24
 8006946:	4b51      	ldr	r3, [pc, #324]	; (8006a8c <MX_LWIP_Init+0x228>)
 8006948:	785b      	ldrb	r3, [r3, #1]
 800694a:	041b      	lsls	r3, r3, #16
 800694c:	431a      	orrs	r2, r3
 800694e:	4b4f      	ldr	r3, [pc, #316]	; (8006a8c <MX_LWIP_Init+0x228>)
 8006950:	789b      	ldrb	r3, [r3, #2]
 8006952:	021b      	lsls	r3, r3, #8
 8006954:	4313      	orrs	r3, r2
 8006956:	4a4d      	ldr	r2, [pc, #308]	; (8006a8c <MX_LWIP_Init+0x228>)
 8006958:	78d2      	ldrb	r2, [r2, #3]
 800695a:	4313      	orrs	r3, r2
 800695c:	061a      	lsls	r2, r3, #24
 800695e:	4b4b      	ldr	r3, [pc, #300]	; (8006a8c <MX_LWIP_Init+0x228>)
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	0619      	lsls	r1, r3, #24
 8006964:	4b49      	ldr	r3, [pc, #292]	; (8006a8c <MX_LWIP_Init+0x228>)
 8006966:	785b      	ldrb	r3, [r3, #1]
 8006968:	041b      	lsls	r3, r3, #16
 800696a:	4319      	orrs	r1, r3
 800696c:	4b47      	ldr	r3, [pc, #284]	; (8006a8c <MX_LWIP_Init+0x228>)
 800696e:	789b      	ldrb	r3, [r3, #2]
 8006970:	021b      	lsls	r3, r3, #8
 8006972:	430b      	orrs	r3, r1
 8006974:	4945      	ldr	r1, [pc, #276]	; (8006a8c <MX_LWIP_Init+0x228>)
 8006976:	78c9      	ldrb	r1, [r1, #3]
 8006978:	430b      	orrs	r3, r1
 800697a:	021b      	lsls	r3, r3, #8
 800697c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006980:	431a      	orrs	r2, r3
 8006982:	4b42      	ldr	r3, [pc, #264]	; (8006a8c <MX_LWIP_Init+0x228>)
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	0619      	lsls	r1, r3, #24
 8006988:	4b40      	ldr	r3, [pc, #256]	; (8006a8c <MX_LWIP_Init+0x228>)
 800698a:	785b      	ldrb	r3, [r3, #1]
 800698c:	041b      	lsls	r3, r3, #16
 800698e:	4319      	orrs	r1, r3
 8006990:	4b3e      	ldr	r3, [pc, #248]	; (8006a8c <MX_LWIP_Init+0x228>)
 8006992:	789b      	ldrb	r3, [r3, #2]
 8006994:	021b      	lsls	r3, r3, #8
 8006996:	430b      	orrs	r3, r1
 8006998:	493c      	ldr	r1, [pc, #240]	; (8006a8c <MX_LWIP_Init+0x228>)
 800699a:	78c9      	ldrb	r1, [r1, #3]
 800699c:	430b      	orrs	r3, r1
 800699e:	0a1b      	lsrs	r3, r3, #8
 80069a0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80069a4:	431a      	orrs	r2, r3
 80069a6:	4b39      	ldr	r3, [pc, #228]	; (8006a8c <MX_LWIP_Init+0x228>)
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	0619      	lsls	r1, r3, #24
 80069ac:	4b37      	ldr	r3, [pc, #220]	; (8006a8c <MX_LWIP_Init+0x228>)
 80069ae:	785b      	ldrb	r3, [r3, #1]
 80069b0:	041b      	lsls	r3, r3, #16
 80069b2:	4319      	orrs	r1, r3
 80069b4:	4b35      	ldr	r3, [pc, #212]	; (8006a8c <MX_LWIP_Init+0x228>)
 80069b6:	789b      	ldrb	r3, [r3, #2]
 80069b8:	021b      	lsls	r3, r3, #8
 80069ba:	430b      	orrs	r3, r1
 80069bc:	4933      	ldr	r1, [pc, #204]	; (8006a8c <MX_LWIP_Init+0x228>)
 80069be:	78c9      	ldrb	r1, [r1, #3]
 80069c0:	430b      	orrs	r3, r1
 80069c2:	0e1b      	lsrs	r3, r3, #24
 80069c4:	4313      	orrs	r3, r2
 80069c6:	4a34      	ldr	r2, [pc, #208]	; (8006a98 <MX_LWIP_Init+0x234>)
 80069c8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80069ca:	4b31      	ldr	r3, [pc, #196]	; (8006a90 <MX_LWIP_Init+0x22c>)
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	061a      	lsls	r2, r3, #24
 80069d0:	4b2f      	ldr	r3, [pc, #188]	; (8006a90 <MX_LWIP_Init+0x22c>)
 80069d2:	785b      	ldrb	r3, [r3, #1]
 80069d4:	041b      	lsls	r3, r3, #16
 80069d6:	431a      	orrs	r2, r3
 80069d8:	4b2d      	ldr	r3, [pc, #180]	; (8006a90 <MX_LWIP_Init+0x22c>)
 80069da:	789b      	ldrb	r3, [r3, #2]
 80069dc:	021b      	lsls	r3, r3, #8
 80069de:	4313      	orrs	r3, r2
 80069e0:	4a2b      	ldr	r2, [pc, #172]	; (8006a90 <MX_LWIP_Init+0x22c>)
 80069e2:	78d2      	ldrb	r2, [r2, #3]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	061a      	lsls	r2, r3, #24
 80069e8:	4b29      	ldr	r3, [pc, #164]	; (8006a90 <MX_LWIP_Init+0x22c>)
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	0619      	lsls	r1, r3, #24
 80069ee:	4b28      	ldr	r3, [pc, #160]	; (8006a90 <MX_LWIP_Init+0x22c>)
 80069f0:	785b      	ldrb	r3, [r3, #1]
 80069f2:	041b      	lsls	r3, r3, #16
 80069f4:	4319      	orrs	r1, r3
 80069f6:	4b26      	ldr	r3, [pc, #152]	; (8006a90 <MX_LWIP_Init+0x22c>)
 80069f8:	789b      	ldrb	r3, [r3, #2]
 80069fa:	021b      	lsls	r3, r3, #8
 80069fc:	430b      	orrs	r3, r1
 80069fe:	4924      	ldr	r1, [pc, #144]	; (8006a90 <MX_LWIP_Init+0x22c>)
 8006a00:	78c9      	ldrb	r1, [r1, #3]
 8006a02:	430b      	orrs	r3, r1
 8006a04:	021b      	lsls	r3, r3, #8
 8006a06:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006a0a:	431a      	orrs	r2, r3
 8006a0c:	4b20      	ldr	r3, [pc, #128]	; (8006a90 <MX_LWIP_Init+0x22c>)
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	0619      	lsls	r1, r3, #24
 8006a12:	4b1f      	ldr	r3, [pc, #124]	; (8006a90 <MX_LWIP_Init+0x22c>)
 8006a14:	785b      	ldrb	r3, [r3, #1]
 8006a16:	041b      	lsls	r3, r3, #16
 8006a18:	4319      	orrs	r1, r3
 8006a1a:	4b1d      	ldr	r3, [pc, #116]	; (8006a90 <MX_LWIP_Init+0x22c>)
 8006a1c:	789b      	ldrb	r3, [r3, #2]
 8006a1e:	021b      	lsls	r3, r3, #8
 8006a20:	430b      	orrs	r3, r1
 8006a22:	491b      	ldr	r1, [pc, #108]	; (8006a90 <MX_LWIP_Init+0x22c>)
 8006a24:	78c9      	ldrb	r1, [r1, #3]
 8006a26:	430b      	orrs	r3, r1
 8006a28:	0a1b      	lsrs	r3, r3, #8
 8006a2a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006a2e:	431a      	orrs	r2, r3
 8006a30:	4b17      	ldr	r3, [pc, #92]	; (8006a90 <MX_LWIP_Init+0x22c>)
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	0619      	lsls	r1, r3, #24
 8006a36:	4b16      	ldr	r3, [pc, #88]	; (8006a90 <MX_LWIP_Init+0x22c>)
 8006a38:	785b      	ldrb	r3, [r3, #1]
 8006a3a:	041b      	lsls	r3, r3, #16
 8006a3c:	4319      	orrs	r1, r3
 8006a3e:	4b14      	ldr	r3, [pc, #80]	; (8006a90 <MX_LWIP_Init+0x22c>)
 8006a40:	789b      	ldrb	r3, [r3, #2]
 8006a42:	021b      	lsls	r3, r3, #8
 8006a44:	430b      	orrs	r3, r1
 8006a46:	4912      	ldr	r1, [pc, #72]	; (8006a90 <MX_LWIP_Init+0x22c>)
 8006a48:	78c9      	ldrb	r1, [r1, #3]
 8006a4a:	430b      	orrs	r3, r1
 8006a4c:	0e1b      	lsrs	r3, r3, #24
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	4a12      	ldr	r2, [pc, #72]	; (8006a9c <MX_LWIP_Init+0x238>)
 8006a52:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8006a54:	4b12      	ldr	r3, [pc, #72]	; (8006aa0 <MX_LWIP_Init+0x23c>)
 8006a56:	9302      	str	r3, [sp, #8]
 8006a58:	4b12      	ldr	r3, [pc, #72]	; (8006aa4 <MX_LWIP_Init+0x240>)
 8006a5a:	9301      	str	r3, [sp, #4]
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	9300      	str	r3, [sp, #0]
 8006a60:	4b0e      	ldr	r3, [pc, #56]	; (8006a9c <MX_LWIP_Init+0x238>)
 8006a62:	4a0d      	ldr	r2, [pc, #52]	; (8006a98 <MX_LWIP_Init+0x234>)
 8006a64:	490b      	ldr	r1, [pc, #44]	; (8006a94 <MX_LWIP_Init+0x230>)
 8006a66:	4810      	ldr	r0, [pc, #64]	; (8006aa8 <MX_LWIP_Init+0x244>)
 8006a68:	f001 f922 	bl	8007cb0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8006a6c:	480e      	ldr	r0, [pc, #56]	; (8006aa8 <MX_LWIP_Init+0x244>)
 8006a6e:	f001 fad1 	bl	8008014 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8006a72:	480d      	ldr	r0, [pc, #52]	; (8006aa8 <MX_LWIP_Init+0x244>)
 8006a74:	f001 fade 	bl	8008034 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8006a78:	490c      	ldr	r1, [pc, #48]	; (8006aac <MX_LWIP_Init+0x248>)
 8006a7a:	480b      	ldr	r0, [pc, #44]	; (8006aa8 <MX_LWIP_Init+0x244>)
 8006a7c:	f001 fbdc 	bl	8008238 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8006a80:	bf00      	nop
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	20000600 	.word	0x20000600
 8006a8c:	20000604 	.word	0x20000604
 8006a90:	20000608 	.word	0x20000608
 8006a94:	200005f4 	.word	0x200005f4
 8006a98:	200005f8 	.word	0x200005f8
 8006a9c:	200005fc 	.word	0x200005fc
 8006aa0:	08010dc1 	.word	0x08010dc1
 8006aa4:	08006dc5 	.word	0x08006dc5
 8006aa8:	200005c0 	.word	0x200005c0
 8006aac:	08006ab1 	.word	0x08006ab1

08006ab0 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <SCB_InvalidateDCache_by_Addr>:
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b087      	sub	sp, #28
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8006ad6:	2320      	movs	r3, #32
 8006ad8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8006ada:	f3bf 8f4f 	dsb	sy
}
 8006ade:	bf00      	nop
    while (op_size > 0) {
 8006ae0:	e00b      	b.n	8006afa <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8006ae2:	4a0d      	ldr	r2, [pc, #52]	; (8006b18 <SCB_InvalidateDCache_by_Addr+0x54>)
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	693a      	ldr	r2, [r7, #16]
 8006aee:	4413      	add	r3, r2
 8006af0:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8006af2:	697a      	ldr	r2, [r7, #20]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	dcf0      	bgt.n	8006ae2 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8006b00:	f3bf 8f4f 	dsb	sy
}
 8006b04:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006b06:	f3bf 8f6f 	isb	sy
}
 8006b0a:	bf00      	nop
}
 8006b0c:	bf00      	nop
 8006b0e:	371c      	adds	r7, #28
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr
 8006b18:	e000ed00 	.word	0xe000ed00

08006b1c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8006b24:	2300      	movs	r3, #0
 8006b26:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8006b28:	4b40      	ldr	r3, [pc, #256]	; (8006c2c <low_level_init+0x110>)
 8006b2a:	4a41      	ldr	r2, [pc, #260]	; (8006c30 <low_level_init+0x114>)
 8006b2c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8006b32:	2380      	movs	r3, #128	; 0x80
 8006b34:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8006b36:	23e1      	movs	r3, #225	; 0xe1
 8006b38:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x20;
 8006b42:	2320      	movs	r3, #32
 8006b44:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8006b46:	4a39      	ldr	r2, [pc, #228]	; (8006c2c <low_level_init+0x110>)
 8006b48:	f107 0308 	add.w	r3, r7, #8
 8006b4c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8006b4e:	4b37      	ldr	r3, [pc, #220]	; (8006c2c <low_level_init+0x110>)
 8006b50:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006b54:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8006b56:	4b35      	ldr	r3, [pc, #212]	; (8006c2c <low_level_init+0x110>)
 8006b58:	4a36      	ldr	r2, [pc, #216]	; (8006c34 <low_level_init+0x118>)
 8006b5a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8006b5c:	4b33      	ldr	r3, [pc, #204]	; (8006c2c <low_level_init+0x110>)
 8006b5e:	4a36      	ldr	r2, [pc, #216]	; (8006c38 <low_level_init+0x11c>)
 8006b60:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8006b62:	4b32      	ldr	r3, [pc, #200]	; (8006c2c <low_level_init+0x110>)
 8006b64:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8006b68:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006b6a:	4830      	ldr	r0, [pc, #192]	; (8006c2c <low_level_init+0x110>)
 8006b6c:	f7fb f9b8 	bl	8001ee0 <HAL_ETH_Init>
 8006b70:	4603      	mov	r3, r0
 8006b72:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8006b74:	2238      	movs	r2, #56	; 0x38
 8006b76:	2100      	movs	r1, #0
 8006b78:	4830      	ldr	r0, [pc, #192]	; (8006c3c <low_level_init+0x120>)
 8006b7a:	f00b f93a 	bl	8011df2 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8006b7e:	4b2f      	ldr	r3, [pc, #188]	; (8006c3c <low_level_init+0x120>)
 8006b80:	2221      	movs	r2, #33	; 0x21
 8006b82:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8006b84:	4b2d      	ldr	r3, [pc, #180]	; (8006c3c <low_level_init+0x120>)
 8006b86:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8006b8a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8006b8c:	4b2b      	ldr	r3, [pc, #172]	; (8006c3c <low_level_init+0x120>)
 8006b8e:	2200      	movs	r2, #0
 8006b90:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8006b92:	482b      	ldr	r0, [pc, #172]	; (8006c40 <low_level_init+0x124>)
 8006b94:	f000 ff54 	bl	8007a40 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2206      	movs	r2, #6
 8006b9c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8006ba0:	4b22      	ldr	r3, [pc, #136]	; (8006c2c <low_level_init+0x110>)
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	781a      	ldrb	r2, [r3, #0]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8006bac:	4b1f      	ldr	r3, [pc, #124]	; (8006c2c <low_level_init+0x110>)
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	785a      	ldrb	r2, [r3, #1]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8006bb8:	4b1c      	ldr	r3, [pc, #112]	; (8006c2c <low_level_init+0x110>)
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	789a      	ldrb	r2, [r3, #2]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8006bc4:	4b19      	ldr	r3, [pc, #100]	; (8006c2c <low_level_init+0x110>)
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	78da      	ldrb	r2, [r3, #3]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006bd0:	4b16      	ldr	r3, [pc, #88]	; (8006c2c <low_level_init+0x110>)
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	791a      	ldrb	r2, [r3, #4]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006bdc:	4b13      	ldr	r3, [pc, #76]	; (8006c2c <low_level_init+0x110>)
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	795a      	ldrb	r2, [r3, #5]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006bee:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006bf6:	f043 030a 	orr.w	r3, r3, #10
 8006bfa:	b2da      	uxtb	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8006c02:	4910      	ldr	r1, [pc, #64]	; (8006c44 <low_level_init+0x128>)
 8006c04:	4810      	ldr	r0, [pc, #64]	; (8006c48 <low_level_init+0x12c>)
 8006c06:	f7fa fe50 	bl	80018aa <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8006c0a:	480f      	ldr	r0, [pc, #60]	; (8006c48 <low_level_init+0x12c>)
 8006c0c:	f7fa fe7f 	bl	800190e <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8006c10:	7bfb      	ldrb	r3, [r7, #15]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d103      	bne.n	8006c1e <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 fa32 	bl	8007080 <ethernet_link_check_state>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 8006c1c:	e001      	b.n	8006c22 <low_level_init+0x106>
    Error_Handler();
 8006c1e:	f7fa fb61 	bl	80012e4 <Error_Handler>
}
 8006c22:	bf00      	nop
 8006c24:	3710      	adds	r7, #16
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	20004f98 	.word	0x20004f98
 8006c30:	40028000 	.word	0x40028000
 8006c34:	20000294 	.word	0x20000294
 8006c38:	200001f4 	.word	0x200001f4
 8006c3c:	20005048 	.word	0x20005048
 8006c40:	08016710 	.word	0x08016710
 8006c44:	2000000c 	.word	0x2000000c
 8006c48:	20005080 	.word	0x20005080

08006c4c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b092      	sub	sp, #72	; 0x48
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8006c56:	2300      	movs	r3, #0
 8006c58:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8006c64:	f107 030c 	add.w	r3, r7, #12
 8006c68:	2230      	movs	r2, #48	; 0x30
 8006c6a:	2100      	movs	r1, #0
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f00b f8c0 	bl	8011df2 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8006c72:	f107 030c 	add.w	r3, r7, #12
 8006c76:	2230      	movs	r2, #48	; 0x30
 8006c78:	2100      	movs	r1, #0
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f00b f8b9 	bl	8011df2 <memset>

  for(q = p; q != NULL; q = q->next)
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	643b      	str	r3, [r7, #64]	; 0x40
 8006c84:	e045      	b.n	8006d12 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8006c86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c88:	2b03      	cmp	r3, #3
 8006c8a:	d902      	bls.n	8006c92 <low_level_output+0x46>
      return ERR_IF;
 8006c8c:	f06f 030b 	mvn.w	r3, #11
 8006c90:	e055      	b.n	8006d3e <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8006c92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c94:	6859      	ldr	r1, [r3, #4]
 8006c96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c98:	4613      	mov	r3, r2
 8006c9a:	005b      	lsls	r3, r3, #1
 8006c9c:	4413      	add	r3, r2
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	3348      	adds	r3, #72	; 0x48
 8006ca2:	443b      	add	r3, r7
 8006ca4:	3b3c      	subs	r3, #60	; 0x3c
 8006ca6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8006ca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006caa:	895b      	ldrh	r3, [r3, #10]
 8006cac:	4619      	mov	r1, r3
 8006cae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006cb0:	4613      	mov	r3, r2
 8006cb2:	005b      	lsls	r3, r3, #1
 8006cb4:	4413      	add	r3, r2
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	3348      	adds	r3, #72	; 0x48
 8006cba:	443b      	add	r3, r7
 8006cbc:	3b38      	subs	r3, #56	; 0x38
 8006cbe:	6019      	str	r1, [r3, #0]

    if(i>0)
 8006cc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d011      	beq.n	8006cea <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8006cc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cc8:	1e5a      	subs	r2, r3, #1
 8006cca:	f107 000c 	add.w	r0, r7, #12
 8006cce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	005b      	lsls	r3, r3, #1
 8006cd4:	440b      	add	r3, r1
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	18c1      	adds	r1, r0, r3
 8006cda:	4613      	mov	r3, r2
 8006cdc:	005b      	lsls	r3, r3, #1
 8006cde:	4413      	add	r3, r2
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	3348      	adds	r3, #72	; 0x48
 8006ce4:	443b      	add	r3, r7
 8006ce6:	3b34      	subs	r3, #52	; 0x34
 8006ce8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8006cea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d109      	bne.n	8006d06 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8006cf2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006cf4:	4613      	mov	r3, r2
 8006cf6:	005b      	lsls	r3, r3, #1
 8006cf8:	4413      	add	r3, r2
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	3348      	adds	r3, #72	; 0x48
 8006cfe:	443b      	add	r3, r7
 8006d00:	3b34      	subs	r3, #52	; 0x34
 8006d02:	2200      	movs	r2, #0
 8006d04:	601a      	str	r2, [r3, #0]
    }

    i++;
 8006d06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d08:	3301      	adds	r3, #1
 8006d0a:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8006d0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	643b      	str	r3, [r7, #64]	; 0x40
 8006d12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d1b6      	bne.n	8006c86 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	891b      	ldrh	r3, [r3, #8]
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	4b0a      	ldr	r3, [pc, #40]	; (8006d48 <low_level_output+0xfc>)
 8006d20:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8006d22:	4a09      	ldr	r2, [pc, #36]	; (8006d48 <low_level_output+0xfc>)
 8006d24:	f107 030c 	add.w	r3, r7, #12
 8006d28:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8006d2a:	4a07      	ldr	r2, [pc, #28]	; (8006d48 <low_level_output+0xfc>)
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8006d30:	2214      	movs	r2, #20
 8006d32:	4905      	ldr	r1, [pc, #20]	; (8006d48 <low_level_output+0xfc>)
 8006d34:	4805      	ldr	r0, [pc, #20]	; (8006d4c <low_level_output+0x100>)
 8006d36:	f7fb fa25 	bl	8002184 <HAL_ETH_Transmit>

  return errval;
 8006d3a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3748      	adds	r7, #72	; 0x48
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	20005048 	.word	0x20005048
 8006d4c:	20004f98 	.word	0x20004f98

08006d50 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8006d5c:	4b07      	ldr	r3, [pc, #28]	; (8006d7c <low_level_input+0x2c>)
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d105      	bne.n	8006d70 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8006d64:	f107 030c 	add.w	r3, r7, #12
 8006d68:	4619      	mov	r1, r3
 8006d6a:	4805      	ldr	r0, [pc, #20]	; (8006d80 <low_level_input+0x30>)
 8006d6c:	f7fb fa9e 	bl	80022ac <HAL_ETH_ReadData>
  }

  return p;
 8006d70:	68fb      	ldr	r3, [r7, #12]
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3710      	adds	r7, #16
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	20004f94 	.word	0x20004f94
 8006d80:	20004f98 	.word	0x20004f98

08006d84 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f7ff ffdd 	bl	8006d50 <low_level_input>
 8006d96:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00a      	beq.n	8006db4 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	6879      	ldr	r1, [r7, #4]
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	4798      	blx	r3
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d002      	beq.n	8006db4 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8006dae:	68f8      	ldr	r0, [r7, #12]
 8006db0:	f001 fdc2 	bl	8008938 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d1ea      	bne.n	8006d90 <ethernetif_input+0xc>
}
 8006dba:	bf00      	nop
 8006dbc:	bf00      	nop
 8006dbe:	3710      	adds	r7, #16
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d106      	bne.n	8006de0 <ethernetif_init+0x1c>
 8006dd2:	4b0e      	ldr	r3, [pc, #56]	; (8006e0c <ethernetif_init+0x48>)
 8006dd4:	f240 127b 	movw	r2, #379	; 0x17b
 8006dd8:	490d      	ldr	r1, [pc, #52]	; (8006e10 <ethernetif_init+0x4c>)
 8006dda:	480e      	ldr	r0, [pc, #56]	; (8006e14 <ethernetif_init+0x50>)
 8006ddc:	f00a ffa4 	bl	8011d28 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2273      	movs	r2, #115	; 0x73
 8006de4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2274      	movs	r2, #116	; 0x74
 8006dec:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	4a09      	ldr	r2, [pc, #36]	; (8006e18 <ethernetif_init+0x54>)
 8006df4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a08      	ldr	r2, [pc, #32]	; (8006e1c <ethernetif_init+0x58>)
 8006dfa:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f7ff fe8d 	bl	8006b1c <low_level_init>

  return ERR_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3708      	adds	r7, #8
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	08013d14 	.word	0x08013d14
 8006e10:	08013d30 	.word	0x08013d30
 8006e14:	08013d40 	.word	0x08013d40
 8006e18:	0800f279 	.word	0x0800f279
 8006e1c:	08006c4d 	.word	0x08006c4d

08006e20 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8006e2c:	68f9      	ldr	r1, [r7, #12]
 8006e2e:	4807      	ldr	r0, [pc, #28]	; (8006e4c <pbuf_free_custom+0x2c>)
 8006e30:	f000 fee8 	bl	8007c04 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8006e34:	4b06      	ldr	r3, [pc, #24]	; (8006e50 <pbuf_free_custom+0x30>)
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d102      	bne.n	8006e42 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8006e3c:	4b04      	ldr	r3, [pc, #16]	; (8006e50 <pbuf_free_custom+0x30>)
 8006e3e:	2200      	movs	r2, #0
 8006e40:	701a      	strb	r2, [r3, #0]
  }
}
 8006e42:	bf00      	nop
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	08016710 	.word	0x08016710
 8006e50:	20004f94 	.word	0x20004f94

08006e54 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006e58:	f7fa fe88 	bl	8001b6c <HAL_GetTick>
 8006e5c:	4603      	mov	r3, r0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	bd80      	pop	{r7, pc}
	...

08006e64 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b08e      	sub	sp, #56	; 0x38
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e70:	2200      	movs	r2, #0
 8006e72:	601a      	str	r2, [r3, #0]
 8006e74:	605a      	str	r2, [r3, #4]
 8006e76:	609a      	str	r2, [r3, #8]
 8006e78:	60da      	str	r2, [r3, #12]
 8006e7a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a52      	ldr	r2, [pc, #328]	; (8006fcc <HAL_ETH_MspInit+0x168>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	f040 809e 	bne.w	8006fc4 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8006e88:	4b51      	ldr	r3, [pc, #324]	; (8006fd0 <HAL_ETH_MspInit+0x16c>)
 8006e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e8c:	4a50      	ldr	r2, [pc, #320]	; (8006fd0 <HAL_ETH_MspInit+0x16c>)
 8006e8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006e92:	6313      	str	r3, [r2, #48]	; 0x30
 8006e94:	4b4e      	ldr	r3, [pc, #312]	; (8006fd0 <HAL_ETH_MspInit+0x16c>)
 8006e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e9c:	623b      	str	r3, [r7, #32]
 8006e9e:	6a3b      	ldr	r3, [r7, #32]
 8006ea0:	4b4b      	ldr	r3, [pc, #300]	; (8006fd0 <HAL_ETH_MspInit+0x16c>)
 8006ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea4:	4a4a      	ldr	r2, [pc, #296]	; (8006fd0 <HAL_ETH_MspInit+0x16c>)
 8006ea6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006eaa:	6313      	str	r3, [r2, #48]	; 0x30
 8006eac:	4b48      	ldr	r3, [pc, #288]	; (8006fd0 <HAL_ETH_MspInit+0x16c>)
 8006eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006eb4:	61fb      	str	r3, [r7, #28]
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	4b45      	ldr	r3, [pc, #276]	; (8006fd0 <HAL_ETH_MspInit+0x16c>)
 8006eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ebc:	4a44      	ldr	r2, [pc, #272]	; (8006fd0 <HAL_ETH_MspInit+0x16c>)
 8006ebe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006ec2:	6313      	str	r3, [r2, #48]	; 0x30
 8006ec4:	4b42      	ldr	r3, [pc, #264]	; (8006fd0 <HAL_ETH_MspInit+0x16c>)
 8006ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ecc:	61bb      	str	r3, [r7, #24]
 8006ece:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006ed0:	4b3f      	ldr	r3, [pc, #252]	; (8006fd0 <HAL_ETH_MspInit+0x16c>)
 8006ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed4:	4a3e      	ldr	r2, [pc, #248]	; (8006fd0 <HAL_ETH_MspInit+0x16c>)
 8006ed6:	f043 0304 	orr.w	r3, r3, #4
 8006eda:	6313      	str	r3, [r2, #48]	; 0x30
 8006edc:	4b3c      	ldr	r3, [pc, #240]	; (8006fd0 <HAL_ETH_MspInit+0x16c>)
 8006ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee0:	f003 0304 	and.w	r3, r3, #4
 8006ee4:	617b      	str	r3, [r7, #20]
 8006ee6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ee8:	4b39      	ldr	r3, [pc, #228]	; (8006fd0 <HAL_ETH_MspInit+0x16c>)
 8006eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eec:	4a38      	ldr	r2, [pc, #224]	; (8006fd0 <HAL_ETH_MspInit+0x16c>)
 8006eee:	f043 0301 	orr.w	r3, r3, #1
 8006ef2:	6313      	str	r3, [r2, #48]	; 0x30
 8006ef4:	4b36      	ldr	r3, [pc, #216]	; (8006fd0 <HAL_ETH_MspInit+0x16c>)
 8006ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef8:	f003 0301 	and.w	r3, r3, #1
 8006efc:	613b      	str	r3, [r7, #16]
 8006efe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f00:	4b33      	ldr	r3, [pc, #204]	; (8006fd0 <HAL_ETH_MspInit+0x16c>)
 8006f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f04:	4a32      	ldr	r2, [pc, #200]	; (8006fd0 <HAL_ETH_MspInit+0x16c>)
 8006f06:	f043 0302 	orr.w	r3, r3, #2
 8006f0a:	6313      	str	r3, [r2, #48]	; 0x30
 8006f0c:	4b30      	ldr	r3, [pc, #192]	; (8006fd0 <HAL_ETH_MspInit+0x16c>)
 8006f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f10:	f003 0302 	and.w	r3, r3, #2
 8006f14:	60fb      	str	r3, [r7, #12]
 8006f16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006f18:	4b2d      	ldr	r3, [pc, #180]	; (8006fd0 <HAL_ETH_MspInit+0x16c>)
 8006f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f1c:	4a2c      	ldr	r2, [pc, #176]	; (8006fd0 <HAL_ETH_MspInit+0x16c>)
 8006f1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f22:	6313      	str	r3, [r2, #48]	; 0x30
 8006f24:	4b2a      	ldr	r3, [pc, #168]	; (8006fd0 <HAL_ETH_MspInit+0x16c>)
 8006f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f2c:	60bb      	str	r3, [r7, #8]
 8006f2e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8006f30:	2332      	movs	r3, #50	; 0x32
 8006f32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f34:	2302      	movs	r3, #2
 8006f36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f3c:	2303      	movs	r3, #3
 8006f3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006f40:	230b      	movs	r3, #11
 8006f42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006f44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f48:	4619      	mov	r1, r3
 8006f4a:	4822      	ldr	r0, [pc, #136]	; (8006fd4 <HAL_ETH_MspInit+0x170>)
 8006f4c:	f7fc f9de 	bl	800330c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8006f50:	2386      	movs	r3, #134	; 0x86
 8006f52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f54:	2302      	movs	r3, #2
 8006f56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f5c:	2303      	movs	r3, #3
 8006f5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006f60:	230b      	movs	r3, #11
 8006f62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f68:	4619      	mov	r1, r3
 8006f6a:	481b      	ldr	r0, [pc, #108]	; (8006fd8 <HAL_ETH_MspInit+0x174>)
 8006f6c:	f7fc f9ce 	bl	800330c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8006f70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006f74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f76:	2302      	movs	r3, #2
 8006f78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006f82:	230b      	movs	r3, #11
 8006f84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8006f86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	4813      	ldr	r0, [pc, #76]	; (8006fdc <HAL_ETH_MspInit+0x178>)
 8006f8e:	f7fc f9bd 	bl	800330c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8006f92:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8006f96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f98:	2302      	movs	r3, #2
 8006f9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fa0:	2303      	movs	r3, #3
 8006fa2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006fa4:	230b      	movs	r3, #11
 8006fa6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006fa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fac:	4619      	mov	r1, r3
 8006fae:	480c      	ldr	r0, [pc, #48]	; (8006fe0 <HAL_ETH_MspInit+0x17c>)
 8006fb0:	f7fc f9ac 	bl	800330c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	2100      	movs	r1, #0
 8006fb8:	203d      	movs	r0, #61	; 0x3d
 8006fba:	f7fa fee2 	bl	8001d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8006fbe:	203d      	movs	r0, #61	; 0x3d
 8006fc0:	f7fa fefb 	bl	8001dba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006fc4:	bf00      	nop
 8006fc6:	3738      	adds	r7, #56	; 0x38
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	40028000 	.word	0x40028000
 8006fd0:	40023800 	.word	0x40023800
 8006fd4:	40020800 	.word	0x40020800
 8006fd8:	40020000 	.word	0x40020000
 8006fdc:	40020400 	.word	0x40020400
 8006fe0:	40021800 	.word	0x40021800

08006fe4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8006fe8:	4802      	ldr	r0, [pc, #8]	; (8006ff4 <ETH_PHY_IO_Init+0x10>)
 8006fea:	f7fb fd2d 	bl	8002a48 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	bd80      	pop	{r7, pc}
 8006ff4:	20004f98 	.word	0x20004f98

08006ff8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	af00      	add	r7, sp, #0
  return 0;
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	60b9      	str	r1, [r7, #8]
 8007012:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	68ba      	ldr	r2, [r7, #8]
 8007018:	68f9      	ldr	r1, [r7, #12]
 800701a:	4807      	ldr	r0, [pc, #28]	; (8007038 <ETH_PHY_IO_ReadReg+0x30>)
 800701c:	f7fb fb6e 	bl	80026fc <HAL_ETH_ReadPHYRegister>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d002      	beq.n	800702c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8007026:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800702a:	e000      	b.n	800702e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800702c:	2300      	movs	r3, #0
}
 800702e:	4618      	mov	r0, r3
 8007030:	3710      	adds	r7, #16
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop
 8007038:	20004f98 	.word	0x20004f98

0800703c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	68ba      	ldr	r2, [r7, #8]
 800704c:	68f9      	ldr	r1, [r7, #12]
 800704e:	4807      	ldr	r0, [pc, #28]	; (800706c <ETH_PHY_IO_WriteReg+0x30>)
 8007050:	f7fb fb9f 	bl	8002792 <HAL_ETH_WritePHYRegister>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d002      	beq.n	8007060 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800705a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800705e:	e000      	b.n	8007062 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8007060:	2300      	movs	r3, #0
}
 8007062:	4618      	mov	r0, r3
 8007064:	3710      	adds	r7, #16
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
 800706a:	bf00      	nop
 800706c:	20004f98 	.word	0x20004f98

08007070 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007074:	f7fa fd7a 	bl	8001b6c <HAL_GetTick>
 8007078:	4603      	mov	r3, r0
}
 800707a:	4618      	mov	r0, r3
 800707c:	bd80      	pop	{r7, pc}
	...

08007080 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b0a0      	sub	sp, #128	; 0x80
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8007088:	f107 030c 	add.w	r3, r7, #12
 800708c:	2264      	movs	r2, #100	; 0x64
 800708e:	2100      	movs	r1, #0
 8007090:	4618      	mov	r0, r3
 8007092:	f00a feae 	bl	8011df2 <memset>
  int32_t PHYLinkState = 0;
 8007096:	2300      	movs	r3, #0
 8007098:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800709a:	2300      	movs	r3, #0
 800709c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800709e:	2300      	movs	r3, #0
 80070a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80070a2:	2300      	movs	r3, #0
 80070a4:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80070a6:	483a      	ldr	r0, [pc, #232]	; (8007190 <ethernet_link_check_state+0x110>)
 80070a8:	f7fa fc7e 	bl	80019a8 <LAN8742_GetLinkState>
 80070ac:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80070b4:	089b      	lsrs	r3, r3, #2
 80070b6:	f003 0301 	and.w	r3, r3, #1
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d00c      	beq.n	80070da <ethernet_link_check_state+0x5a>
 80070c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	dc09      	bgt.n	80070da <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 80070c6:	4833      	ldr	r0, [pc, #204]	; (8007194 <ethernet_link_check_state+0x114>)
 80070c8:	f7fb f803 	bl	80020d2 <HAL_ETH_Stop>
    netif_set_down(netif);
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f001 f81d 	bl	800810c <netif_set_down>
    netif_set_link_down(netif);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f001 f880 	bl	80081d8 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 80070d8:	e055      	b.n	8007186 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80070e0:	f003 0304 	and.w	r3, r3, #4
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d14e      	bne.n	8007186 <ethernet_link_check_state+0x106>
 80070e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	dd4b      	ble.n	8007186 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 80070ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80070f0:	3b02      	subs	r3, #2
 80070f2:	2b03      	cmp	r3, #3
 80070f4:	d82a      	bhi.n	800714c <ethernet_link_check_state+0xcc>
 80070f6:	a201      	add	r2, pc, #4	; (adr r2, 80070fc <ethernet_link_check_state+0x7c>)
 80070f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070fc:	0800710d 	.word	0x0800710d
 8007100:	0800711f 	.word	0x0800711f
 8007104:	0800712f 	.word	0x0800712f
 8007108:	0800713f 	.word	0x0800713f
      duplex = ETH_FULLDUPLEX_MODE;
 800710c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007110:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8007112:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007116:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007118:	2301      	movs	r3, #1
 800711a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800711c:	e017      	b.n	800714e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800711e:	2300      	movs	r3, #0
 8007120:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8007122:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007126:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007128:	2301      	movs	r3, #1
 800712a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800712c:	e00f      	b.n	800714e <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800712e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007132:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8007134:	2300      	movs	r3, #0
 8007136:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007138:	2301      	movs	r3, #1
 800713a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800713c:	e007      	b.n	800714e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800713e:	2300      	movs	r3, #0
 8007140:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8007142:	2300      	movs	r3, #0
 8007144:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007146:	2301      	movs	r3, #1
 8007148:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800714a:	e000      	b.n	800714e <ethernet_link_check_state+0xce>
      break;
 800714c:	bf00      	nop
    if(linkchanged)
 800714e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007150:	2b00      	cmp	r3, #0
 8007152:	d018      	beq.n	8007186 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8007154:	f107 030c 	add.w	r3, r7, #12
 8007158:	4619      	mov	r1, r3
 800715a:	480e      	ldr	r0, [pc, #56]	; (8007194 <ethernet_link_check_state+0x114>)
 800715c:	f7fb fb62 	bl	8002824 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8007160:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007162:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8007164:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007166:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8007168:	f107 030c 	add.w	r3, r7, #12
 800716c:	4619      	mov	r1, r3
 800716e:	4809      	ldr	r0, [pc, #36]	; (8007194 <ethernet_link_check_state+0x114>)
 8007170:	f7fb fc4f 	bl	8002a12 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8007174:	4807      	ldr	r0, [pc, #28]	; (8007194 <ethernet_link_check_state+0x114>)
 8007176:	f7fa ff4d 	bl	8002014 <HAL_ETH_Start>
      netif_set_up(netif);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 ff5a 	bl	8008034 <netif_set_up>
      netif_set_link_up(netif);
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 fff5 	bl	8008170 <netif_set_link_up>
}
 8007186:	bf00      	nop
 8007188:	3780      	adds	r7, #128	; 0x80
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	20005080 	.word	0x20005080
 8007194:	20004f98 	.word	0x20004f98

08007198 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b086      	sub	sp, #24
 800719c:	af02      	add	r7, sp, #8
 800719e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80071a0:	4812      	ldr	r0, [pc, #72]	; (80071ec <HAL_ETH_RxAllocateCallback+0x54>)
 80071a2:	f000 fcc1 	bl	8007b28 <memp_malloc_pool>
 80071a6:	60f8      	str	r0, [r7, #12]
  if (p)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d014      	beq.n	80071d8 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f103 0220 	add.w	r2, r3, #32
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	4a0d      	ldr	r2, [pc, #52]	; (80071f0 <HAL_ETH_RxAllocateCallback+0x58>)
 80071bc:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80071c6:	9201      	str	r2, [sp, #4]
 80071c8:	9300      	str	r3, [sp, #0]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2241      	movs	r2, #65	; 0x41
 80071ce:	2100      	movs	r1, #0
 80071d0:	2000      	movs	r0, #0
 80071d2:	f001 f9f7 	bl	80085c4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80071d6:	e005      	b.n	80071e4 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80071d8:	4b06      	ldr	r3, [pc, #24]	; (80071f4 <HAL_ETH_RxAllocateCallback+0x5c>)
 80071da:	2201      	movs	r2, #1
 80071dc:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	601a      	str	r2, [r3, #0]
}
 80071e4:	bf00      	nop
 80071e6:	3710      	adds	r7, #16
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}
 80071ec:	08016710 	.word	0x08016710
 80071f0:	08006e21 	.word	0x08006e21
 80071f4:	20004f94 	.word	0x20004f94

080071f8 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b088      	sub	sp, #32
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	607a      	str	r2, [r7, #4]
 8007204:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800720e:	2300      	movs	r3, #0
 8007210:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	3b20      	subs	r3, #32
 8007216:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	2200      	movs	r2, #0
 800721c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800721e:	69fb      	ldr	r3, [r7, #28]
 8007220:	2200      	movs	r2, #0
 8007222:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	887a      	ldrh	r2, [r7, #2]
 8007228:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d103      	bne.n	800723a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	69fa      	ldr	r2, [r7, #28]
 8007236:	601a      	str	r2, [r3, #0]
 8007238:	e003      	b.n	8007242 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	69fa      	ldr	r2, [r7, #28]
 8007240:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	69fa      	ldr	r2, [r7, #28]
 8007246:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	61fb      	str	r3, [r7, #28]
 800724e:	e009      	b.n	8007264 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	891a      	ldrh	r2, [r3, #8]
 8007254:	887b      	ldrh	r3, [r7, #2]
 8007256:	4413      	add	r3, r2
 8007258:	b29a      	uxth	r2, r3
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	61fb      	str	r3, [r7, #28]
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1f2      	bne.n	8007250 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800726a:	887b      	ldrh	r3, [r7, #2]
 800726c:	4619      	mov	r1, r3
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f7ff fc28 	bl	8006ac4 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8007274:	bf00      	nop
 8007276:	3720      	adds	r7, #32
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	4603      	mov	r3, r0
 8007284:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8007286:	88fb      	ldrh	r3, [r7, #6]
 8007288:	021b      	lsls	r3, r3, #8
 800728a:	b21a      	sxth	r2, r3
 800728c:	88fb      	ldrh	r3, [r7, #6]
 800728e:	0a1b      	lsrs	r3, r3, #8
 8007290:	b29b      	uxth	r3, r3
 8007292:	b21b      	sxth	r3, r3
 8007294:	4313      	orrs	r3, r2
 8007296:	b21b      	sxth	r3, r3
 8007298:	b29b      	uxth	r3, r3
}
 800729a:	4618      	mov	r0, r3
 800729c:	370c      	adds	r7, #12
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr

080072a6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80072a6:	b480      	push	{r7}
 80072a8:	b083      	sub	sp, #12
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	061a      	lsls	r2, r3, #24
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	021b      	lsls	r3, r3, #8
 80072b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80072ba:	431a      	orrs	r2, r3
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	0a1b      	lsrs	r3, r3, #8
 80072c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80072c4:	431a      	orrs	r2, r3
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	0e1b      	lsrs	r3, r3, #24
 80072ca:	4313      	orrs	r3, r2
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	370c      	adds	r7, #12
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80072de:	2300      	movs	r3, #0
 80072e0:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80072e2:	f000 f8d5 	bl	8007490 <mem_init>
  memp_init();
 80072e6:	f000 fbdb 	bl	8007aa0 <memp_init>
  pbuf_init();
  netif_init();
 80072ea:	f000 fcd9 	bl	8007ca0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80072ee:	f007 f857 	bl	800e3a0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80072f2:	f001 fdaf 	bl	8008e54 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80072f6:	f006 ffc9 	bl	800e28c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80072fa:	bf00      	nop
 80072fc:	3708      	adds	r7, #8
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
	...

08007304 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
 800730a:	4603      	mov	r3, r0
 800730c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800730e:	4b05      	ldr	r3, [pc, #20]	; (8007324 <ptr_to_mem+0x20>)
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	88fb      	ldrh	r3, [r7, #6]
 8007314:	4413      	add	r3, r2
}
 8007316:	4618      	mov	r0, r3
 8007318:	370c      	adds	r7, #12
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr
 8007322:	bf00      	nop
 8007324:	200078cc 	.word	0x200078cc

08007328 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8007330:	4b05      	ldr	r3, [pc, #20]	; (8007348 <mem_to_ptr+0x20>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	1ad3      	subs	r3, r2, r3
 8007338:	b29b      	uxth	r3, r3
}
 800733a:	4618      	mov	r0, r3
 800733c:	370c      	adds	r7, #12
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop
 8007348:	200078cc 	.word	0x200078cc

0800734c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800734c:	b590      	push	{r4, r7, lr}
 800734e:	b085      	sub	sp, #20
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007354:	4b45      	ldr	r3, [pc, #276]	; (800746c <plug_holes+0x120>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	429a      	cmp	r2, r3
 800735c:	d206      	bcs.n	800736c <plug_holes+0x20>
 800735e:	4b44      	ldr	r3, [pc, #272]	; (8007470 <plug_holes+0x124>)
 8007360:	f240 12df 	movw	r2, #479	; 0x1df
 8007364:	4943      	ldr	r1, [pc, #268]	; (8007474 <plug_holes+0x128>)
 8007366:	4844      	ldr	r0, [pc, #272]	; (8007478 <plug_holes+0x12c>)
 8007368:	f00a fcde 	bl	8011d28 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800736c:	4b43      	ldr	r3, [pc, #268]	; (800747c <plug_holes+0x130>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	429a      	cmp	r2, r3
 8007374:	d306      	bcc.n	8007384 <plug_holes+0x38>
 8007376:	4b3e      	ldr	r3, [pc, #248]	; (8007470 <plug_holes+0x124>)
 8007378:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800737c:	4940      	ldr	r1, [pc, #256]	; (8007480 <plug_holes+0x134>)
 800737e:	483e      	ldr	r0, [pc, #248]	; (8007478 <plug_holes+0x12c>)
 8007380:	f00a fcd2 	bl	8011d28 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	791b      	ldrb	r3, [r3, #4]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d006      	beq.n	800739a <plug_holes+0x4e>
 800738c:	4b38      	ldr	r3, [pc, #224]	; (8007470 <plug_holes+0x124>)
 800738e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8007392:	493c      	ldr	r1, [pc, #240]	; (8007484 <plug_holes+0x138>)
 8007394:	4838      	ldr	r0, [pc, #224]	; (8007478 <plug_holes+0x12c>)
 8007396:	f00a fcc7 	bl	8011d28 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	881b      	ldrh	r3, [r3, #0]
 800739e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80073a2:	d906      	bls.n	80073b2 <plug_holes+0x66>
 80073a4:	4b32      	ldr	r3, [pc, #200]	; (8007470 <plug_holes+0x124>)
 80073a6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80073aa:	4937      	ldr	r1, [pc, #220]	; (8007488 <plug_holes+0x13c>)
 80073ac:	4832      	ldr	r0, [pc, #200]	; (8007478 <plug_holes+0x12c>)
 80073ae:	f00a fcbb 	bl	8011d28 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	881b      	ldrh	r3, [r3, #0]
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7ff ffa4 	bl	8007304 <ptr_to_mem>
 80073bc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d024      	beq.n	8007410 <plug_holes+0xc4>
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	791b      	ldrb	r3, [r3, #4]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d120      	bne.n	8007410 <plug_holes+0xc4>
 80073ce:	4b2b      	ldr	r3, [pc, #172]	; (800747c <plug_holes+0x130>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	68fa      	ldr	r2, [r7, #12]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d01b      	beq.n	8007410 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80073d8:	4b2c      	ldr	r3, [pc, #176]	; (800748c <plug_holes+0x140>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	68fa      	ldr	r2, [r7, #12]
 80073de:	429a      	cmp	r2, r3
 80073e0:	d102      	bne.n	80073e8 <plug_holes+0x9c>
      lfree = mem;
 80073e2:	4a2a      	ldr	r2, [pc, #168]	; (800748c <plug_holes+0x140>)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	881a      	ldrh	r2, [r3, #0]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	881b      	ldrh	r3, [r3, #0]
 80073f4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80073f8:	d00a      	beq.n	8007410 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	881b      	ldrh	r3, [r3, #0]
 80073fe:	4618      	mov	r0, r3
 8007400:	f7ff ff80 	bl	8007304 <ptr_to_mem>
 8007404:	4604      	mov	r4, r0
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f7ff ff8e 	bl	8007328 <mem_to_ptr>
 800740c:	4603      	mov	r3, r0
 800740e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	885b      	ldrh	r3, [r3, #2]
 8007414:	4618      	mov	r0, r3
 8007416:	f7ff ff75 	bl	8007304 <ptr_to_mem>
 800741a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800741c:	68ba      	ldr	r2, [r7, #8]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	429a      	cmp	r2, r3
 8007422:	d01f      	beq.n	8007464 <plug_holes+0x118>
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	791b      	ldrb	r3, [r3, #4]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d11b      	bne.n	8007464 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800742c:	4b17      	ldr	r3, [pc, #92]	; (800748c <plug_holes+0x140>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	429a      	cmp	r2, r3
 8007434:	d102      	bne.n	800743c <plug_holes+0xf0>
      lfree = pmem;
 8007436:	4a15      	ldr	r2, [pc, #84]	; (800748c <plug_holes+0x140>)
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	881a      	ldrh	r2, [r3, #0]
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	881b      	ldrh	r3, [r3, #0]
 8007448:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800744c:	d00a      	beq.n	8007464 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	881b      	ldrh	r3, [r3, #0]
 8007452:	4618      	mov	r0, r3
 8007454:	f7ff ff56 	bl	8007304 <ptr_to_mem>
 8007458:	4604      	mov	r4, r0
 800745a:	68b8      	ldr	r0, [r7, #8]
 800745c:	f7ff ff64 	bl	8007328 <mem_to_ptr>
 8007460:	4603      	mov	r3, r0
 8007462:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8007464:	bf00      	nop
 8007466:	3714      	adds	r7, #20
 8007468:	46bd      	mov	sp, r7
 800746a:	bd90      	pop	{r4, r7, pc}
 800746c:	200078cc 	.word	0x200078cc
 8007470:	08013d68 	.word	0x08013d68
 8007474:	08013d98 	.word	0x08013d98
 8007478:	08013db0 	.word	0x08013db0
 800747c:	200078d0 	.word	0x200078d0
 8007480:	08013dd8 	.word	0x08013dd8
 8007484:	08013df4 	.word	0x08013df4
 8007488:	08013e10 	.word	0x08013e10
 800748c:	200078d4 	.word	0x200078d4

08007490 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b082      	sub	sp, #8
 8007494:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8007496:	4b18      	ldr	r3, [pc, #96]	; (80074f8 <mem_init+0x68>)
 8007498:	3303      	adds	r3, #3
 800749a:	f023 0303 	bic.w	r3, r3, #3
 800749e:	461a      	mov	r2, r3
 80074a0:	4b16      	ldr	r3, [pc, #88]	; (80074fc <mem_init+0x6c>)
 80074a2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80074a4:	4b15      	ldr	r3, [pc, #84]	; (80074fc <mem_init+0x6c>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80074b0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80074be:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 80074c2:	f7ff ff1f 	bl	8007304 <ptr_to_mem>
 80074c6:	4603      	mov	r3, r0
 80074c8:	4a0d      	ldr	r2, [pc, #52]	; (8007500 <mem_init+0x70>)
 80074ca:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80074cc:	4b0c      	ldr	r3, [pc, #48]	; (8007500 <mem_init+0x70>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2201      	movs	r2, #1
 80074d2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80074d4:	4b0a      	ldr	r3, [pc, #40]	; (8007500 <mem_init+0x70>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80074dc:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80074de:	4b08      	ldr	r3, [pc, #32]	; (8007500 <mem_init+0x70>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80074e6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80074e8:	4b04      	ldr	r3, [pc, #16]	; (80074fc <mem_init+0x6c>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a05      	ldr	r2, [pc, #20]	; (8007504 <mem_init+0x74>)
 80074ee:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80074f0:	bf00      	nop
 80074f2:	3708      	adds	r7, #8
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	200050b8 	.word	0x200050b8
 80074fc:	200078cc 	.word	0x200078cc
 8007500:	200078d0 	.word	0x200078d0
 8007504:	200078d4 	.word	0x200078d4

08007508 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b086      	sub	sp, #24
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f7ff ff09 	bl	8007328 <mem_to_ptr>
 8007516:	4603      	mov	r3, r0
 8007518:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	881b      	ldrh	r3, [r3, #0]
 800751e:	4618      	mov	r0, r3
 8007520:	f7ff fef0 	bl	8007304 <ptr_to_mem>
 8007524:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	885b      	ldrh	r3, [r3, #2]
 800752a:	4618      	mov	r0, r3
 800752c:	f7ff feea 	bl	8007304 <ptr_to_mem>
 8007530:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	881b      	ldrh	r3, [r3, #0]
 8007536:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800753a:	d818      	bhi.n	800756e <mem_link_valid+0x66>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	885b      	ldrh	r3, [r3, #2]
 8007540:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007544:	d813      	bhi.n	800756e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800754a:	8afa      	ldrh	r2, [r7, #22]
 800754c:	429a      	cmp	r2, r3
 800754e:	d004      	beq.n	800755a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	881b      	ldrh	r3, [r3, #0]
 8007554:	8afa      	ldrh	r2, [r7, #22]
 8007556:	429a      	cmp	r2, r3
 8007558:	d109      	bne.n	800756e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800755a:	4b08      	ldr	r3, [pc, #32]	; (800757c <mem_link_valid+0x74>)
 800755c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800755e:	693a      	ldr	r2, [r7, #16]
 8007560:	429a      	cmp	r2, r3
 8007562:	d006      	beq.n	8007572 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	885b      	ldrh	r3, [r3, #2]
 8007568:	8afa      	ldrh	r2, [r7, #22]
 800756a:	429a      	cmp	r2, r3
 800756c:	d001      	beq.n	8007572 <mem_link_valid+0x6a>
    return 0;
 800756e:	2300      	movs	r3, #0
 8007570:	e000      	b.n	8007574 <mem_link_valid+0x6c>
  }
  return 1;
 8007572:	2301      	movs	r3, #1
}
 8007574:	4618      	mov	r0, r3
 8007576:	3718      	adds	r7, #24
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}
 800757c:	200078d0 	.word	0x200078d0

08007580 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d04c      	beq.n	8007628 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f003 0303 	and.w	r3, r3, #3
 8007594:	2b00      	cmp	r3, #0
 8007596:	d007      	beq.n	80075a8 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8007598:	4b25      	ldr	r3, [pc, #148]	; (8007630 <mem_free+0xb0>)
 800759a:	f240 2273 	movw	r2, #627	; 0x273
 800759e:	4925      	ldr	r1, [pc, #148]	; (8007634 <mem_free+0xb4>)
 80075a0:	4825      	ldr	r0, [pc, #148]	; (8007638 <mem_free+0xb8>)
 80075a2:	f00a fbc1 	bl	8011d28 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80075a6:	e040      	b.n	800762a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	3b08      	subs	r3, #8
 80075ac:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80075ae:	4b23      	ldr	r3, [pc, #140]	; (800763c <mem_free+0xbc>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	68fa      	ldr	r2, [r7, #12]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d306      	bcc.n	80075c6 <mem_free+0x46>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f103 020c 	add.w	r2, r3, #12
 80075be:	4b20      	ldr	r3, [pc, #128]	; (8007640 <mem_free+0xc0>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d907      	bls.n	80075d6 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80075c6:	4b1a      	ldr	r3, [pc, #104]	; (8007630 <mem_free+0xb0>)
 80075c8:	f240 227f 	movw	r2, #639	; 0x27f
 80075cc:	491d      	ldr	r1, [pc, #116]	; (8007644 <mem_free+0xc4>)
 80075ce:	481a      	ldr	r0, [pc, #104]	; (8007638 <mem_free+0xb8>)
 80075d0:	f00a fbaa 	bl	8011d28 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80075d4:	e029      	b.n	800762a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	791b      	ldrb	r3, [r3, #4]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d107      	bne.n	80075ee <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80075de:	4b14      	ldr	r3, [pc, #80]	; (8007630 <mem_free+0xb0>)
 80075e0:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80075e4:	4918      	ldr	r1, [pc, #96]	; (8007648 <mem_free+0xc8>)
 80075e6:	4814      	ldr	r0, [pc, #80]	; (8007638 <mem_free+0xb8>)
 80075e8:	f00a fb9e 	bl	8011d28 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80075ec:	e01d      	b.n	800762a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	f7ff ff8a 	bl	8007508 <mem_link_valid>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d107      	bne.n	800760a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80075fa:	4b0d      	ldr	r3, [pc, #52]	; (8007630 <mem_free+0xb0>)
 80075fc:	f240 2295 	movw	r2, #661	; 0x295
 8007600:	4912      	ldr	r1, [pc, #72]	; (800764c <mem_free+0xcc>)
 8007602:	480d      	ldr	r0, [pc, #52]	; (8007638 <mem_free+0xb8>)
 8007604:	f00a fb90 	bl	8011d28 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007608:	e00f      	b.n	800762a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2200      	movs	r2, #0
 800760e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8007610:	4b0f      	ldr	r3, [pc, #60]	; (8007650 <mem_free+0xd0>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	68fa      	ldr	r2, [r7, #12]
 8007616:	429a      	cmp	r2, r3
 8007618:	d202      	bcs.n	8007620 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800761a:	4a0d      	ldr	r2, [pc, #52]	; (8007650 <mem_free+0xd0>)
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8007620:	68f8      	ldr	r0, [r7, #12]
 8007622:	f7ff fe93 	bl	800734c <plug_holes>
 8007626:	e000      	b.n	800762a <mem_free+0xaa>
    return;
 8007628:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800762a:	3710      	adds	r7, #16
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}
 8007630:	08013d68 	.word	0x08013d68
 8007634:	08013e3c 	.word	0x08013e3c
 8007638:	08013db0 	.word	0x08013db0
 800763c:	200078cc 	.word	0x200078cc
 8007640:	200078d0 	.word	0x200078d0
 8007644:	08013e60 	.word	0x08013e60
 8007648:	08013e7c 	.word	0x08013e7c
 800764c:	08013ea4 	.word	0x08013ea4
 8007650:	200078d4 	.word	0x200078d4

08007654 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b088      	sub	sp, #32
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	460b      	mov	r3, r1
 800765e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8007660:	887b      	ldrh	r3, [r7, #2]
 8007662:	3303      	adds	r3, #3
 8007664:	b29b      	uxth	r3, r3
 8007666:	f023 0303 	bic.w	r3, r3, #3
 800766a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800766c:	8bfb      	ldrh	r3, [r7, #30]
 800766e:	2b0b      	cmp	r3, #11
 8007670:	d801      	bhi.n	8007676 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8007672:	230c      	movs	r3, #12
 8007674:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8007676:	8bfb      	ldrh	r3, [r7, #30]
 8007678:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800767c:	d803      	bhi.n	8007686 <mem_trim+0x32>
 800767e:	8bfa      	ldrh	r2, [r7, #30]
 8007680:	887b      	ldrh	r3, [r7, #2]
 8007682:	429a      	cmp	r2, r3
 8007684:	d201      	bcs.n	800768a <mem_trim+0x36>
    return NULL;
 8007686:	2300      	movs	r3, #0
 8007688:	e0cc      	b.n	8007824 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800768a:	4b68      	ldr	r3, [pc, #416]	; (800782c <mem_trim+0x1d8>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	429a      	cmp	r2, r3
 8007692:	d304      	bcc.n	800769e <mem_trim+0x4a>
 8007694:	4b66      	ldr	r3, [pc, #408]	; (8007830 <mem_trim+0x1dc>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	429a      	cmp	r2, r3
 800769c:	d306      	bcc.n	80076ac <mem_trim+0x58>
 800769e:	4b65      	ldr	r3, [pc, #404]	; (8007834 <mem_trim+0x1e0>)
 80076a0:	f240 22d1 	movw	r2, #721	; 0x2d1
 80076a4:	4964      	ldr	r1, [pc, #400]	; (8007838 <mem_trim+0x1e4>)
 80076a6:	4865      	ldr	r0, [pc, #404]	; (800783c <mem_trim+0x1e8>)
 80076a8:	f00a fb3e 	bl	8011d28 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80076ac:	4b5f      	ldr	r3, [pc, #380]	; (800782c <mem_trim+0x1d8>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d304      	bcc.n	80076c0 <mem_trim+0x6c>
 80076b6:	4b5e      	ldr	r3, [pc, #376]	; (8007830 <mem_trim+0x1dc>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	429a      	cmp	r2, r3
 80076be:	d301      	bcc.n	80076c4 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	e0af      	b.n	8007824 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	3b08      	subs	r3, #8
 80076c8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80076ca:	69b8      	ldr	r0, [r7, #24]
 80076cc:	f7ff fe2c 	bl	8007328 <mem_to_ptr>
 80076d0:	4603      	mov	r3, r0
 80076d2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	881a      	ldrh	r2, [r3, #0]
 80076d8:	8afb      	ldrh	r3, [r7, #22]
 80076da:	1ad3      	subs	r3, r2, r3
 80076dc:	b29b      	uxth	r3, r3
 80076de:	3b08      	subs	r3, #8
 80076e0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80076e2:	8bfa      	ldrh	r2, [r7, #30]
 80076e4:	8abb      	ldrh	r3, [r7, #20]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d906      	bls.n	80076f8 <mem_trim+0xa4>
 80076ea:	4b52      	ldr	r3, [pc, #328]	; (8007834 <mem_trim+0x1e0>)
 80076ec:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80076f0:	4953      	ldr	r1, [pc, #332]	; (8007840 <mem_trim+0x1ec>)
 80076f2:	4852      	ldr	r0, [pc, #328]	; (800783c <mem_trim+0x1e8>)
 80076f4:	f00a fb18 	bl	8011d28 <iprintf>
  if (newsize > size) {
 80076f8:	8bfa      	ldrh	r2, [r7, #30]
 80076fa:	8abb      	ldrh	r3, [r7, #20]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d901      	bls.n	8007704 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8007700:	2300      	movs	r3, #0
 8007702:	e08f      	b.n	8007824 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8007704:	8bfa      	ldrh	r2, [r7, #30]
 8007706:	8abb      	ldrh	r3, [r7, #20]
 8007708:	429a      	cmp	r2, r3
 800770a:	d101      	bne.n	8007710 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	e089      	b.n	8007824 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8007710:	69bb      	ldr	r3, [r7, #24]
 8007712:	881b      	ldrh	r3, [r3, #0]
 8007714:	4618      	mov	r0, r3
 8007716:	f7ff fdf5 	bl	8007304 <ptr_to_mem>
 800771a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	791b      	ldrb	r3, [r3, #4]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d13f      	bne.n	80077a4 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007724:	69bb      	ldr	r3, [r7, #24]
 8007726:	881b      	ldrh	r3, [r3, #0]
 8007728:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800772c:	d106      	bne.n	800773c <mem_trim+0xe8>
 800772e:	4b41      	ldr	r3, [pc, #260]	; (8007834 <mem_trim+0x1e0>)
 8007730:	f240 22f5 	movw	r2, #757	; 0x2f5
 8007734:	4943      	ldr	r1, [pc, #268]	; (8007844 <mem_trim+0x1f0>)
 8007736:	4841      	ldr	r0, [pc, #260]	; (800783c <mem_trim+0x1e8>)
 8007738:	f00a faf6 	bl	8011d28 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	881b      	ldrh	r3, [r3, #0]
 8007740:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007742:	8afa      	ldrh	r2, [r7, #22]
 8007744:	8bfb      	ldrh	r3, [r7, #30]
 8007746:	4413      	add	r3, r2
 8007748:	b29b      	uxth	r3, r3
 800774a:	3308      	adds	r3, #8
 800774c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800774e:	4b3e      	ldr	r3, [pc, #248]	; (8007848 <mem_trim+0x1f4>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	693a      	ldr	r2, [r7, #16]
 8007754:	429a      	cmp	r2, r3
 8007756:	d106      	bne.n	8007766 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8007758:	89fb      	ldrh	r3, [r7, #14]
 800775a:	4618      	mov	r0, r3
 800775c:	f7ff fdd2 	bl	8007304 <ptr_to_mem>
 8007760:	4603      	mov	r3, r0
 8007762:	4a39      	ldr	r2, [pc, #228]	; (8007848 <mem_trim+0x1f4>)
 8007764:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8007766:	89fb      	ldrh	r3, [r7, #14]
 8007768:	4618      	mov	r0, r3
 800776a:	f7ff fdcb 	bl	8007304 <ptr_to_mem>
 800776e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	2200      	movs	r2, #0
 8007774:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	89ba      	ldrh	r2, [r7, #12]
 800777a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	8afa      	ldrh	r2, [r7, #22]
 8007780:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8007782:	69bb      	ldr	r3, [r7, #24]
 8007784:	89fa      	ldrh	r2, [r7, #14]
 8007786:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	881b      	ldrh	r3, [r3, #0]
 800778c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007790:	d047      	beq.n	8007822 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	881b      	ldrh	r3, [r3, #0]
 8007796:	4618      	mov	r0, r3
 8007798:	f7ff fdb4 	bl	8007304 <ptr_to_mem>
 800779c:	4602      	mov	r2, r0
 800779e:	89fb      	ldrh	r3, [r7, #14]
 80077a0:	8053      	strh	r3, [r2, #2]
 80077a2:	e03e      	b.n	8007822 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80077a4:	8bfb      	ldrh	r3, [r7, #30]
 80077a6:	f103 0214 	add.w	r2, r3, #20
 80077aa:	8abb      	ldrh	r3, [r7, #20]
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d838      	bhi.n	8007822 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80077b0:	8afa      	ldrh	r2, [r7, #22]
 80077b2:	8bfb      	ldrh	r3, [r7, #30]
 80077b4:	4413      	add	r3, r2
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	3308      	adds	r3, #8
 80077ba:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	881b      	ldrh	r3, [r3, #0]
 80077c0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80077c4:	d106      	bne.n	80077d4 <mem_trim+0x180>
 80077c6:	4b1b      	ldr	r3, [pc, #108]	; (8007834 <mem_trim+0x1e0>)
 80077c8:	f240 3216 	movw	r2, #790	; 0x316
 80077cc:	491d      	ldr	r1, [pc, #116]	; (8007844 <mem_trim+0x1f0>)
 80077ce:	481b      	ldr	r0, [pc, #108]	; (800783c <mem_trim+0x1e8>)
 80077d0:	f00a faaa 	bl	8011d28 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80077d4:	89fb      	ldrh	r3, [r7, #14]
 80077d6:	4618      	mov	r0, r3
 80077d8:	f7ff fd94 	bl	8007304 <ptr_to_mem>
 80077dc:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80077de:	4b1a      	ldr	r3, [pc, #104]	; (8007848 <mem_trim+0x1f4>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	693a      	ldr	r2, [r7, #16]
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d202      	bcs.n	80077ee <mem_trim+0x19a>
      lfree = mem2;
 80077e8:	4a17      	ldr	r2, [pc, #92]	; (8007848 <mem_trim+0x1f4>)
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	2200      	movs	r2, #0
 80077f2:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80077f4:	69bb      	ldr	r3, [r7, #24]
 80077f6:	881a      	ldrh	r2, [r3, #0]
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	8afa      	ldrh	r2, [r7, #22]
 8007800:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	89fa      	ldrh	r2, [r7, #14]
 8007806:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	881b      	ldrh	r3, [r3, #0]
 800780c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007810:	d007      	beq.n	8007822 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	881b      	ldrh	r3, [r3, #0]
 8007816:	4618      	mov	r0, r3
 8007818:	f7ff fd74 	bl	8007304 <ptr_to_mem>
 800781c:	4602      	mov	r2, r0
 800781e:	89fb      	ldrh	r3, [r7, #14]
 8007820:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8007822:	687b      	ldr	r3, [r7, #4]
}
 8007824:	4618      	mov	r0, r3
 8007826:	3720      	adds	r7, #32
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}
 800782c:	200078cc 	.word	0x200078cc
 8007830:	200078d0 	.word	0x200078d0
 8007834:	08013d68 	.word	0x08013d68
 8007838:	08013ed8 	.word	0x08013ed8
 800783c:	08013db0 	.word	0x08013db0
 8007840:	08013ef0 	.word	0x08013ef0
 8007844:	08013f10 	.word	0x08013f10
 8007848:	200078d4 	.word	0x200078d4

0800784c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b088      	sub	sp, #32
 8007850:	af00      	add	r7, sp, #0
 8007852:	4603      	mov	r3, r0
 8007854:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8007856:	88fb      	ldrh	r3, [r7, #6]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d101      	bne.n	8007860 <mem_malloc+0x14>
    return NULL;
 800785c:	2300      	movs	r3, #0
 800785e:	e0d9      	b.n	8007a14 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8007860:	88fb      	ldrh	r3, [r7, #6]
 8007862:	3303      	adds	r3, #3
 8007864:	b29b      	uxth	r3, r3
 8007866:	f023 0303 	bic.w	r3, r3, #3
 800786a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800786c:	8bbb      	ldrh	r3, [r7, #28]
 800786e:	2b0b      	cmp	r3, #11
 8007870:	d801      	bhi.n	8007876 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8007872:	230c      	movs	r3, #12
 8007874:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8007876:	8bbb      	ldrh	r3, [r7, #28]
 8007878:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800787c:	d803      	bhi.n	8007886 <mem_malloc+0x3a>
 800787e:	8bba      	ldrh	r2, [r7, #28]
 8007880:	88fb      	ldrh	r3, [r7, #6]
 8007882:	429a      	cmp	r2, r3
 8007884:	d201      	bcs.n	800788a <mem_malloc+0x3e>
    return NULL;
 8007886:	2300      	movs	r3, #0
 8007888:	e0c4      	b.n	8007a14 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800788a:	4b64      	ldr	r3, [pc, #400]	; (8007a1c <mem_malloc+0x1d0>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4618      	mov	r0, r3
 8007890:	f7ff fd4a 	bl	8007328 <mem_to_ptr>
 8007894:	4603      	mov	r3, r0
 8007896:	83fb      	strh	r3, [r7, #30]
 8007898:	e0b4      	b.n	8007a04 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800789a:	8bfb      	ldrh	r3, [r7, #30]
 800789c:	4618      	mov	r0, r3
 800789e:	f7ff fd31 	bl	8007304 <ptr_to_mem>
 80078a2:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	791b      	ldrb	r3, [r3, #4]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	f040 80a4 	bne.w	80079f6 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	881b      	ldrh	r3, [r3, #0]
 80078b2:	461a      	mov	r2, r3
 80078b4:	8bfb      	ldrh	r3, [r7, #30]
 80078b6:	1ad3      	subs	r3, r2, r3
 80078b8:	f1a3 0208 	sub.w	r2, r3, #8
 80078bc:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80078be:	429a      	cmp	r2, r3
 80078c0:	f0c0 8099 	bcc.w	80079f6 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	881b      	ldrh	r3, [r3, #0]
 80078c8:	461a      	mov	r2, r3
 80078ca:	8bfb      	ldrh	r3, [r7, #30]
 80078cc:	1ad3      	subs	r3, r2, r3
 80078ce:	f1a3 0208 	sub.w	r2, r3, #8
 80078d2:	8bbb      	ldrh	r3, [r7, #28]
 80078d4:	3314      	adds	r3, #20
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d333      	bcc.n	8007942 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80078da:	8bfa      	ldrh	r2, [r7, #30]
 80078dc:	8bbb      	ldrh	r3, [r7, #28]
 80078de:	4413      	add	r3, r2
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	3308      	adds	r3, #8
 80078e4:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80078e6:	8a7b      	ldrh	r3, [r7, #18]
 80078e8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80078ec:	d106      	bne.n	80078fc <mem_malloc+0xb0>
 80078ee:	4b4c      	ldr	r3, [pc, #304]	; (8007a20 <mem_malloc+0x1d4>)
 80078f0:	f240 3287 	movw	r2, #903	; 0x387
 80078f4:	494b      	ldr	r1, [pc, #300]	; (8007a24 <mem_malloc+0x1d8>)
 80078f6:	484c      	ldr	r0, [pc, #304]	; (8007a28 <mem_malloc+0x1dc>)
 80078f8:	f00a fa16 	bl	8011d28 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80078fc:	8a7b      	ldrh	r3, [r7, #18]
 80078fe:	4618      	mov	r0, r3
 8007900:	f7ff fd00 	bl	8007304 <ptr_to_mem>
 8007904:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2200      	movs	r2, #0
 800790a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	881a      	ldrh	r2, [r3, #0]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	8bfa      	ldrh	r2, [r7, #30]
 8007918:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	8a7a      	ldrh	r2, [r7, #18]
 800791e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	2201      	movs	r2, #1
 8007924:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	881b      	ldrh	r3, [r3, #0]
 800792a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800792e:	d00b      	beq.n	8007948 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	881b      	ldrh	r3, [r3, #0]
 8007934:	4618      	mov	r0, r3
 8007936:	f7ff fce5 	bl	8007304 <ptr_to_mem>
 800793a:	4602      	mov	r2, r0
 800793c:	8a7b      	ldrh	r3, [r7, #18]
 800793e:	8053      	strh	r3, [r2, #2]
 8007940:	e002      	b.n	8007948 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	2201      	movs	r2, #1
 8007946:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8007948:	4b34      	ldr	r3, [pc, #208]	; (8007a1c <mem_malloc+0x1d0>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	697a      	ldr	r2, [r7, #20]
 800794e:	429a      	cmp	r2, r3
 8007950:	d127      	bne.n	80079a2 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8007952:	4b32      	ldr	r3, [pc, #200]	; (8007a1c <mem_malloc+0x1d0>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8007958:	e005      	b.n	8007966 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	881b      	ldrh	r3, [r3, #0]
 800795e:	4618      	mov	r0, r3
 8007960:	f7ff fcd0 	bl	8007304 <ptr_to_mem>
 8007964:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8007966:	69bb      	ldr	r3, [r7, #24]
 8007968:	791b      	ldrb	r3, [r3, #4]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d004      	beq.n	8007978 <mem_malloc+0x12c>
 800796e:	4b2f      	ldr	r3, [pc, #188]	; (8007a2c <mem_malloc+0x1e0>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	69ba      	ldr	r2, [r7, #24]
 8007974:	429a      	cmp	r2, r3
 8007976:	d1f0      	bne.n	800795a <mem_malloc+0x10e>
          }
          lfree = cur;
 8007978:	4a28      	ldr	r2, [pc, #160]	; (8007a1c <mem_malloc+0x1d0>)
 800797a:	69bb      	ldr	r3, [r7, #24]
 800797c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800797e:	4b27      	ldr	r3, [pc, #156]	; (8007a1c <mem_malloc+0x1d0>)
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	4b2a      	ldr	r3, [pc, #168]	; (8007a2c <mem_malloc+0x1e0>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	429a      	cmp	r2, r3
 8007988:	d00b      	beq.n	80079a2 <mem_malloc+0x156>
 800798a:	4b24      	ldr	r3, [pc, #144]	; (8007a1c <mem_malloc+0x1d0>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	791b      	ldrb	r3, [r3, #4]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d006      	beq.n	80079a2 <mem_malloc+0x156>
 8007994:	4b22      	ldr	r3, [pc, #136]	; (8007a20 <mem_malloc+0x1d4>)
 8007996:	f240 32b5 	movw	r2, #949	; 0x3b5
 800799a:	4925      	ldr	r1, [pc, #148]	; (8007a30 <mem_malloc+0x1e4>)
 800799c:	4822      	ldr	r0, [pc, #136]	; (8007a28 <mem_malloc+0x1dc>)
 800799e:	f00a f9c3 	bl	8011d28 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80079a2:	8bba      	ldrh	r2, [r7, #28]
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	4413      	add	r3, r2
 80079a8:	3308      	adds	r3, #8
 80079aa:	4a20      	ldr	r2, [pc, #128]	; (8007a2c <mem_malloc+0x1e0>)
 80079ac:	6812      	ldr	r2, [r2, #0]
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d906      	bls.n	80079c0 <mem_malloc+0x174>
 80079b2:	4b1b      	ldr	r3, [pc, #108]	; (8007a20 <mem_malloc+0x1d4>)
 80079b4:	f240 32b9 	movw	r2, #953	; 0x3b9
 80079b8:	491e      	ldr	r1, [pc, #120]	; (8007a34 <mem_malloc+0x1e8>)
 80079ba:	481b      	ldr	r0, [pc, #108]	; (8007a28 <mem_malloc+0x1dc>)
 80079bc:	f00a f9b4 	bl	8011d28 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	f003 0303 	and.w	r3, r3, #3
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d006      	beq.n	80079d8 <mem_malloc+0x18c>
 80079ca:	4b15      	ldr	r3, [pc, #84]	; (8007a20 <mem_malloc+0x1d4>)
 80079cc:	f240 32bb 	movw	r2, #955	; 0x3bb
 80079d0:	4919      	ldr	r1, [pc, #100]	; (8007a38 <mem_malloc+0x1ec>)
 80079d2:	4815      	ldr	r0, [pc, #84]	; (8007a28 <mem_malloc+0x1dc>)
 80079d4:	f00a f9a8 	bl	8011d28 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	f003 0303 	and.w	r3, r3, #3
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d006      	beq.n	80079f0 <mem_malloc+0x1a4>
 80079e2:	4b0f      	ldr	r3, [pc, #60]	; (8007a20 <mem_malloc+0x1d4>)
 80079e4:	f240 32bd 	movw	r2, #957	; 0x3bd
 80079e8:	4914      	ldr	r1, [pc, #80]	; (8007a3c <mem_malloc+0x1f0>)
 80079ea:	480f      	ldr	r0, [pc, #60]	; (8007a28 <mem_malloc+0x1dc>)
 80079ec:	f00a f99c 	bl	8011d28 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	3308      	adds	r3, #8
 80079f4:	e00e      	b.n	8007a14 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80079f6:	8bfb      	ldrh	r3, [r7, #30]
 80079f8:	4618      	mov	r0, r3
 80079fa:	f7ff fc83 	bl	8007304 <ptr_to_mem>
 80079fe:	4603      	mov	r3, r0
 8007a00:	881b      	ldrh	r3, [r3, #0]
 8007a02:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007a04:	8bfa      	ldrh	r2, [r7, #30]
 8007a06:	8bbb      	ldrh	r3, [r7, #28]
 8007a08:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	f4ff af44 	bcc.w	800789a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8007a12:	2300      	movs	r3, #0
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3720      	adds	r7, #32
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	200078d4 	.word	0x200078d4
 8007a20:	08013d68 	.word	0x08013d68
 8007a24:	08013f10 	.word	0x08013f10
 8007a28:	08013db0 	.word	0x08013db0
 8007a2c:	200078d0 	.word	0x200078d0
 8007a30:	08013f24 	.word	0x08013f24
 8007a34:	08013f40 	.word	0x08013f40
 8007a38:	08013f70 	.word	0x08013f70
 8007a3c:	08013fa0 	.word	0x08013fa0

08007a40 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b085      	sub	sp, #20
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	3303      	adds	r3, #3
 8007a56:	f023 0303 	bic.w	r3, r3, #3
 8007a5a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	60fb      	str	r3, [r7, #12]
 8007a60:	e011      	b.n	8007a86 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	68ba      	ldr	r2, [r7, #8]
 8007a72:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	881b      	ldrh	r3, [r3, #0]
 8007a78:	461a      	mov	r2, r3
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	3301      	adds	r3, #1
 8007a84:	60fb      	str	r3, [r7, #12]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	885b      	ldrh	r3, [r3, #2]
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	dbe7      	blt.n	8007a62 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8007a92:	bf00      	nop
 8007a94:	bf00      	nop
 8007a96:	3714      	adds	r7, #20
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr

08007aa0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	80fb      	strh	r3, [r7, #6]
 8007aaa:	e009      	b.n	8007ac0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8007aac:	88fb      	ldrh	r3, [r7, #6]
 8007aae:	4a08      	ldr	r2, [pc, #32]	; (8007ad0 <memp_init+0x30>)
 8007ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f7ff ffc3 	bl	8007a40 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007aba:	88fb      	ldrh	r3, [r7, #6]
 8007abc:	3301      	adds	r3, #1
 8007abe:	80fb      	strh	r3, [r7, #6]
 8007ac0:	88fb      	ldrh	r3, [r7, #6]
 8007ac2:	2b08      	cmp	r3, #8
 8007ac4:	d9f2      	bls.n	8007aac <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8007ac6:	bf00      	nop
 8007ac8:	bf00      	nop
 8007aca:	3708      	adds	r7, #8
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	08016788 	.word	0x08016788

08007ad4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d012      	beq.n	8007b10 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	68fa      	ldr	r2, [r7, #12]
 8007af0:	6812      	ldr	r2, [r2, #0]
 8007af2:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f003 0303 	and.w	r3, r3, #3
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d006      	beq.n	8007b0c <do_memp_malloc_pool+0x38>
 8007afe:	4b07      	ldr	r3, [pc, #28]	; (8007b1c <do_memp_malloc_pool+0x48>)
 8007b00:	f44f 728c 	mov.w	r2, #280	; 0x118
 8007b04:	4906      	ldr	r1, [pc, #24]	; (8007b20 <do_memp_malloc_pool+0x4c>)
 8007b06:	4807      	ldr	r0, [pc, #28]	; (8007b24 <do_memp_malloc_pool+0x50>)
 8007b08:	f00a f90e 	bl	8011d28 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	e000      	b.n	8007b12 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8007b10:	2300      	movs	r3, #0
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3710      	adds	r7, #16
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	08013fc4 	.word	0x08013fc4
 8007b20:	08013ff4 	.word	0x08013ff4
 8007b24:	08014018 	.word	0x08014018

08007b28 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d106      	bne.n	8007b44 <memp_malloc_pool+0x1c>
 8007b36:	4b0a      	ldr	r3, [pc, #40]	; (8007b60 <memp_malloc_pool+0x38>)
 8007b38:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8007b3c:	4909      	ldr	r1, [pc, #36]	; (8007b64 <memp_malloc_pool+0x3c>)
 8007b3e:	480a      	ldr	r0, [pc, #40]	; (8007b68 <memp_malloc_pool+0x40>)
 8007b40:	f00a f8f2 	bl	8011d28 <iprintf>
  if (desc == NULL) {
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d101      	bne.n	8007b4e <memp_malloc_pool+0x26>
    return NULL;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	e003      	b.n	8007b56 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f7ff ffc0 	bl	8007ad4 <do_memp_malloc_pool>
 8007b54:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3708      	adds	r7, #8
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	08013fc4 	.word	0x08013fc4
 8007b64:	08014040 	.word	0x08014040
 8007b68:	08014018 	.word	0x08014018

08007b6c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	4603      	mov	r3, r0
 8007b74:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007b76:	79fb      	ldrb	r3, [r7, #7]
 8007b78:	2b08      	cmp	r3, #8
 8007b7a:	d908      	bls.n	8007b8e <memp_malloc+0x22>
 8007b7c:	4b0a      	ldr	r3, [pc, #40]	; (8007ba8 <memp_malloc+0x3c>)
 8007b7e:	f240 1257 	movw	r2, #343	; 0x157
 8007b82:	490a      	ldr	r1, [pc, #40]	; (8007bac <memp_malloc+0x40>)
 8007b84:	480a      	ldr	r0, [pc, #40]	; (8007bb0 <memp_malloc+0x44>)
 8007b86:	f00a f8cf 	bl	8011d28 <iprintf>
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	e008      	b.n	8007ba0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8007b8e:	79fb      	ldrb	r3, [r7, #7]
 8007b90:	4a08      	ldr	r2, [pc, #32]	; (8007bb4 <memp_malloc+0x48>)
 8007b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b96:	4618      	mov	r0, r3
 8007b98:	f7ff ff9c 	bl	8007ad4 <do_memp_malloc_pool>
 8007b9c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3710      	adds	r7, #16
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}
 8007ba8:	08013fc4 	.word	0x08013fc4
 8007bac:	08014054 	.word	0x08014054
 8007bb0:	08014018 	.word	0x08014018
 8007bb4:	08016788 	.word	0x08016788

08007bb8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	f003 0303 	and.w	r3, r3, #3
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d006      	beq.n	8007bda <do_memp_free_pool+0x22>
 8007bcc:	4b0a      	ldr	r3, [pc, #40]	; (8007bf8 <do_memp_free_pool+0x40>)
 8007bce:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8007bd2:	490a      	ldr	r1, [pc, #40]	; (8007bfc <do_memp_free_pool+0x44>)
 8007bd4:	480a      	ldr	r0, [pc, #40]	; (8007c00 <do_memp_free_pool+0x48>)
 8007bd6:	f00a f8a7 	bl	8011d28 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	68fa      	ldr	r2, [r7, #12]
 8007bee:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8007bf0:	bf00      	nop
 8007bf2:	3710      	adds	r7, #16
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}
 8007bf8:	08013fc4 	.word	0x08013fc4
 8007bfc:	08014074 	.word	0x08014074
 8007c00:	08014018 	.word	0x08014018

08007c04 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d106      	bne.n	8007c22 <memp_free_pool+0x1e>
 8007c14:	4b0a      	ldr	r3, [pc, #40]	; (8007c40 <memp_free_pool+0x3c>)
 8007c16:	f240 1295 	movw	r2, #405	; 0x195
 8007c1a:	490a      	ldr	r1, [pc, #40]	; (8007c44 <memp_free_pool+0x40>)
 8007c1c:	480a      	ldr	r0, [pc, #40]	; (8007c48 <memp_free_pool+0x44>)
 8007c1e:	f00a f883 	bl	8011d28 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d007      	beq.n	8007c38 <memp_free_pool+0x34>
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d004      	beq.n	8007c38 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8007c2e:	6839      	ldr	r1, [r7, #0]
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f7ff ffc1 	bl	8007bb8 <do_memp_free_pool>
 8007c36:	e000      	b.n	8007c3a <memp_free_pool+0x36>
    return;
 8007c38:	bf00      	nop
}
 8007c3a:	3708      	adds	r7, #8
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}
 8007c40:	08013fc4 	.word	0x08013fc4
 8007c44:	08014040 	.word	0x08014040
 8007c48:	08014018 	.word	0x08014018

08007c4c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b082      	sub	sp, #8
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	4603      	mov	r3, r0
 8007c54:	6039      	str	r1, [r7, #0]
 8007c56:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007c58:	79fb      	ldrb	r3, [r7, #7]
 8007c5a:	2b08      	cmp	r3, #8
 8007c5c:	d907      	bls.n	8007c6e <memp_free+0x22>
 8007c5e:	4b0c      	ldr	r3, [pc, #48]	; (8007c90 <memp_free+0x44>)
 8007c60:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8007c64:	490b      	ldr	r1, [pc, #44]	; (8007c94 <memp_free+0x48>)
 8007c66:	480c      	ldr	r0, [pc, #48]	; (8007c98 <memp_free+0x4c>)
 8007c68:	f00a f85e 	bl	8011d28 <iprintf>
 8007c6c:	e00c      	b.n	8007c88 <memp_free+0x3c>

  if (mem == NULL) {
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d008      	beq.n	8007c86 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007c74:	79fb      	ldrb	r3, [r7, #7]
 8007c76:	4a09      	ldr	r2, [pc, #36]	; (8007c9c <memp_free+0x50>)
 8007c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c7c:	6839      	ldr	r1, [r7, #0]
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7ff ff9a 	bl	8007bb8 <do_memp_free_pool>
 8007c84:	e000      	b.n	8007c88 <memp_free+0x3c>
    return;
 8007c86:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8007c88:	3708      	adds	r7, #8
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	08013fc4 	.word	0x08013fc4
 8007c94:	08014094 	.word	0x08014094
 8007c98:	08014018 	.word	0x08014018
 8007c9c:	08016788 	.word	0x08016788

08007ca0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8007ca4:	bf00      	nop
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr
	...

08007cb0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b086      	sub	sp, #24
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	60b9      	str	r1, [r7, #8]
 8007cba:	607a      	str	r2, [r7, #4]
 8007cbc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d108      	bne.n	8007cd6 <netif_add+0x26>
 8007cc4:	4b57      	ldr	r3, [pc, #348]	; (8007e24 <netif_add+0x174>)
 8007cc6:	f240 1227 	movw	r2, #295	; 0x127
 8007cca:	4957      	ldr	r1, [pc, #348]	; (8007e28 <netif_add+0x178>)
 8007ccc:	4857      	ldr	r0, [pc, #348]	; (8007e2c <netif_add+0x17c>)
 8007cce:	f00a f82b 	bl	8011d28 <iprintf>
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	e0a2      	b.n	8007e1c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8007cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d108      	bne.n	8007cee <netif_add+0x3e>
 8007cdc:	4b51      	ldr	r3, [pc, #324]	; (8007e24 <netif_add+0x174>)
 8007cde:	f44f 7294 	mov.w	r2, #296	; 0x128
 8007ce2:	4953      	ldr	r1, [pc, #332]	; (8007e30 <netif_add+0x180>)
 8007ce4:	4851      	ldr	r0, [pc, #324]	; (8007e2c <netif_add+0x17c>)
 8007ce6:	f00a f81f 	bl	8011d28 <iprintf>
 8007cea:	2300      	movs	r3, #0
 8007cec:	e096      	b.n	8007e1c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d101      	bne.n	8007cf8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8007cf4:	4b4f      	ldr	r3, [pc, #316]	; (8007e34 <netif_add+0x184>)
 8007cf6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d101      	bne.n	8007d02 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8007cfe:	4b4d      	ldr	r3, [pc, #308]	; (8007e34 <netif_add+0x184>)
 8007d00:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d101      	bne.n	8007d0c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8007d08:	4b4a      	ldr	r3, [pc, #296]	; (8007e34 <netif_add+0x184>)
 8007d0a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2200      	movs	r2, #0
 8007d16:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	4a45      	ldr	r2, [pc, #276]	; (8007e38 <netif_add+0x188>)
 8007d22:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2200      	movs	r2, #0
 8007d28:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2200      	movs	r2, #0
 8007d36:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6a3a      	ldr	r2, [r7, #32]
 8007d3c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8007d3e:	4b3f      	ldr	r3, [pc, #252]	; (8007e3c <netif_add+0x18c>)
 8007d40:	781a      	ldrb	r2, [r3, #0]
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d4c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	68b9      	ldr	r1, [r7, #8]
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f000 f913 	bl	8007f80 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8007d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	4798      	blx	r3
 8007d60:	4603      	mov	r3, r0
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d001      	beq.n	8007d6a <netif_add+0xba>
    return NULL;
 8007d66:	2300      	movs	r3, #0
 8007d68:	e058      	b.n	8007e1c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007d70:	2bff      	cmp	r3, #255	; 0xff
 8007d72:	d103      	bne.n	8007d7c <netif_add+0xcc>
        netif->num = 0;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007d80:	4b2f      	ldr	r3, [pc, #188]	; (8007e40 <netif_add+0x190>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	617b      	str	r3, [r7, #20]
 8007d86:	e02b      	b.n	8007de0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8007d88:	697a      	ldr	r2, [r7, #20]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d106      	bne.n	8007d9e <netif_add+0xee>
 8007d90:	4b24      	ldr	r3, [pc, #144]	; (8007e24 <netif_add+0x174>)
 8007d92:	f240 128b 	movw	r2, #395	; 0x18b
 8007d96:	492b      	ldr	r1, [pc, #172]	; (8007e44 <netif_add+0x194>)
 8007d98:	4824      	ldr	r0, [pc, #144]	; (8007e2c <netif_add+0x17c>)
 8007d9a:	f009 ffc5 	bl	8011d28 <iprintf>
        num_netifs++;
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	3301      	adds	r3, #1
 8007da2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	2bff      	cmp	r3, #255	; 0xff
 8007da8:	dd06      	ble.n	8007db8 <netif_add+0x108>
 8007daa:	4b1e      	ldr	r3, [pc, #120]	; (8007e24 <netif_add+0x174>)
 8007dac:	f240 128d 	movw	r2, #397	; 0x18d
 8007db0:	4925      	ldr	r1, [pc, #148]	; (8007e48 <netif_add+0x198>)
 8007db2:	481e      	ldr	r0, [pc, #120]	; (8007e2c <netif_add+0x17c>)
 8007db4:	f009 ffb8 	bl	8011d28 <iprintf>
        if (netif2->num == netif->num) {
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d108      	bne.n	8007dda <netif_add+0x12a>
          netif->num++;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007dce:	3301      	adds	r3, #1
 8007dd0:	b2da      	uxtb	r2, r3
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8007dd8:	e005      	b.n	8007de6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	617b      	str	r3, [r7, #20]
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d1d0      	bne.n	8007d88 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d1be      	bne.n	8007d6a <netif_add+0xba>
  }
  if (netif->num == 254) {
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007df2:	2bfe      	cmp	r3, #254	; 0xfe
 8007df4:	d103      	bne.n	8007dfe <netif_add+0x14e>
    netif_num = 0;
 8007df6:	4b11      	ldr	r3, [pc, #68]	; (8007e3c <netif_add+0x18c>)
 8007df8:	2200      	movs	r2, #0
 8007dfa:	701a      	strb	r2, [r3, #0]
 8007dfc:	e006      	b.n	8007e0c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007e04:	3301      	adds	r3, #1
 8007e06:	b2da      	uxtb	r2, r3
 8007e08:	4b0c      	ldr	r3, [pc, #48]	; (8007e3c <netif_add+0x18c>)
 8007e0a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8007e0c:	4b0c      	ldr	r3, [pc, #48]	; (8007e40 <netif_add+0x190>)
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8007e14:	4a0a      	ldr	r2, [pc, #40]	; (8007e40 <netif_add+0x190>)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3718      	adds	r7, #24
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}
 8007e24:	080140b0 	.word	0x080140b0
 8007e28:	08014144 	.word	0x08014144
 8007e2c:	08014100 	.word	0x08014100
 8007e30:	08014160 	.word	0x08014160
 8007e34:	080167ec 	.word	0x080167ec
 8007e38:	0800825b 	.word	0x0800825b
 8007e3c:	2000a7cc 	.word	0x2000a7cc
 8007e40:	2000a7c4 	.word	0x2000a7c4
 8007e44:	08014184 	.word	0x08014184
 8007e48:	08014198 	.word	0x08014198

08007e4c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b082      	sub	sp, #8
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8007e56:	6839      	ldr	r1, [r7, #0]
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f002 fb43 	bl	800a4e4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8007e5e:	6839      	ldr	r1, [r7, #0]
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f006 fd8d 	bl	800e980 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8007e66:	bf00      	nop
 8007e68:	3708      	adds	r7, #8
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
	...

08007e70 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b086      	sub	sp, #24
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d106      	bne.n	8007e90 <netif_do_set_ipaddr+0x20>
 8007e82:	4b1d      	ldr	r3, [pc, #116]	; (8007ef8 <netif_do_set_ipaddr+0x88>)
 8007e84:	f240 12cb 	movw	r2, #459	; 0x1cb
 8007e88:	491c      	ldr	r1, [pc, #112]	; (8007efc <netif_do_set_ipaddr+0x8c>)
 8007e8a:	481d      	ldr	r0, [pc, #116]	; (8007f00 <netif_do_set_ipaddr+0x90>)
 8007e8c:	f009 ff4c 	bl	8011d28 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d106      	bne.n	8007ea4 <netif_do_set_ipaddr+0x34>
 8007e96:	4b18      	ldr	r3, [pc, #96]	; (8007ef8 <netif_do_set_ipaddr+0x88>)
 8007e98:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8007e9c:	4917      	ldr	r1, [pc, #92]	; (8007efc <netif_do_set_ipaddr+0x8c>)
 8007e9e:	4818      	ldr	r0, [pc, #96]	; (8007f00 <netif_do_set_ipaddr+0x90>)
 8007ea0:	f009 ff42 	bl	8011d28 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	3304      	adds	r3, #4
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d01c      	beq.n	8007eec <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	3304      	adds	r3, #4
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8007ec2:	f107 0314 	add.w	r3, r7, #20
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f7ff ffbf 	bl	8007e4c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d002      	beq.n	8007eda <netif_do_set_ipaddr+0x6a>
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	e000      	b.n	8007edc <netif_do_set_ipaddr+0x6c>
 8007eda:	2300      	movs	r3, #0
 8007edc:	68fa      	ldr	r2, [r7, #12]
 8007ede:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8007ee0:	2101      	movs	r1, #1
 8007ee2:	68f8      	ldr	r0, [r7, #12]
 8007ee4:	f000 f8d2 	bl	800808c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8007ee8:	2301      	movs	r3, #1
 8007eea:	e000      	b.n	8007eee <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8007eec:	2300      	movs	r3, #0
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3718      	adds	r7, #24
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	080140b0 	.word	0x080140b0
 8007efc:	080141c8 	.word	0x080141c8
 8007f00:	08014100 	.word	0x08014100

08007f04 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b085      	sub	sp, #20
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	60b9      	str	r1, [r7, #8]
 8007f0e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	3308      	adds	r3, #8
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d00a      	beq.n	8007f34 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d002      	beq.n	8007f2a <netif_do_set_netmask+0x26>
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	e000      	b.n	8007f2c <netif_do_set_netmask+0x28>
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	68fa      	ldr	r2, [r7, #12]
 8007f2e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8007f30:	2301      	movs	r3, #1
 8007f32:	e000      	b.n	8007f36 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8007f34:	2300      	movs	r3, #0
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3714      	adds	r7, #20
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr

08007f42 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8007f42:	b480      	push	{r7}
 8007f44:	b085      	sub	sp, #20
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	60f8      	str	r0, [r7, #12]
 8007f4a:	60b9      	str	r1, [r7, #8]
 8007f4c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	330c      	adds	r3, #12
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d00a      	beq.n	8007f72 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d002      	beq.n	8007f68 <netif_do_set_gw+0x26>
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	e000      	b.n	8007f6a <netif_do_set_gw+0x28>
 8007f68:	2300      	movs	r3, #0
 8007f6a:	68fa      	ldr	r2, [r7, #12]
 8007f6c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8007f6e:	2301      	movs	r3, #1
 8007f70:	e000      	b.n	8007f74 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8007f72:	2300      	movs	r3, #0
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3714      	adds	r7, #20
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b088      	sub	sp, #32
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	60b9      	str	r1, [r7, #8]
 8007f8a:	607a      	str	r2, [r7, #4]
 8007f8c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8007f92:	2300      	movs	r3, #0
 8007f94:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d101      	bne.n	8007fa0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8007f9c:	4b1c      	ldr	r3, [pc, #112]	; (8008010 <netif_set_addr+0x90>)
 8007f9e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d101      	bne.n	8007faa <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8007fa6:	4b1a      	ldr	r3, [pc, #104]	; (8008010 <netif_set_addr+0x90>)
 8007fa8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d101      	bne.n	8007fb4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8007fb0:	4b17      	ldr	r3, [pc, #92]	; (8008010 <netif_set_addr+0x90>)
 8007fb2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d003      	beq.n	8007fc2 <netif_set_addr+0x42>
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d101      	bne.n	8007fc6 <netif_set_addr+0x46>
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e000      	b.n	8007fc8 <netif_set_addr+0x48>
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	617b      	str	r3, [r7, #20]
  if (remove) {
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d006      	beq.n	8007fde <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007fd0:	f107 0310 	add.w	r3, r7, #16
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	68b9      	ldr	r1, [r7, #8]
 8007fd8:	68f8      	ldr	r0, [r7, #12]
 8007fda:	f7ff ff49 	bl	8007e70 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8007fde:	69fa      	ldr	r2, [r7, #28]
 8007fe0:	6879      	ldr	r1, [r7, #4]
 8007fe2:	68f8      	ldr	r0, [r7, #12]
 8007fe4:	f7ff ff8e 	bl	8007f04 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8007fe8:	69ba      	ldr	r2, [r7, #24]
 8007fea:	6839      	ldr	r1, [r7, #0]
 8007fec:	68f8      	ldr	r0, [r7, #12]
 8007fee:	f7ff ffa8 	bl	8007f42 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d106      	bne.n	8008006 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007ff8:	f107 0310 	add.w	r3, r7, #16
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	68b9      	ldr	r1, [r7, #8]
 8008000:	68f8      	ldr	r0, [r7, #12]
 8008002:	f7ff ff35 	bl	8007e70 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8008006:	bf00      	nop
 8008008:	3720      	adds	r7, #32
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
 800800e:	bf00      	nop
 8008010:	080167ec 	.word	0x080167ec

08008014 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8008014:	b480      	push	{r7}
 8008016:	b083      	sub	sp, #12
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800801c:	4a04      	ldr	r2, [pc, #16]	; (8008030 <netif_set_default+0x1c>)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8008022:	bf00      	nop
 8008024:	370c      	adds	r7, #12
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	2000a7c8 	.word	0x2000a7c8

08008034 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b082      	sub	sp, #8
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d107      	bne.n	8008052 <netif_set_up+0x1e>
 8008042:	4b0f      	ldr	r3, [pc, #60]	; (8008080 <netif_set_up+0x4c>)
 8008044:	f44f 7254 	mov.w	r2, #848	; 0x350
 8008048:	490e      	ldr	r1, [pc, #56]	; (8008084 <netif_set_up+0x50>)
 800804a:	480f      	ldr	r0, [pc, #60]	; (8008088 <netif_set_up+0x54>)
 800804c:	f009 fe6c 	bl	8011d28 <iprintf>
 8008050:	e013      	b.n	800807a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008058:	f003 0301 	and.w	r3, r3, #1
 800805c:	2b00      	cmp	r3, #0
 800805e:	d10c      	bne.n	800807a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008066:	f043 0301 	orr.w	r3, r3, #1
 800806a:	b2da      	uxtb	r2, r3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008072:	2103      	movs	r1, #3
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 f809 	bl	800808c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800807a:	3708      	adds	r7, #8
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}
 8008080:	080140b0 	.word	0x080140b0
 8008084:	08014238 	.word	0x08014238
 8008088:	08014100 	.word	0x08014100

0800808c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b082      	sub	sp, #8
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	460b      	mov	r3, r1
 8008096:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d106      	bne.n	80080ac <netif_issue_reports+0x20>
 800809e:	4b18      	ldr	r3, [pc, #96]	; (8008100 <netif_issue_reports+0x74>)
 80080a0:	f240 326d 	movw	r2, #877	; 0x36d
 80080a4:	4917      	ldr	r1, [pc, #92]	; (8008104 <netif_issue_reports+0x78>)
 80080a6:	4818      	ldr	r0, [pc, #96]	; (8008108 <netif_issue_reports+0x7c>)
 80080a8:	f009 fe3e 	bl	8011d28 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80080b2:	f003 0304 	and.w	r3, r3, #4
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d01e      	beq.n	80080f8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80080c0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d017      	beq.n	80080f8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80080c8:	78fb      	ldrb	r3, [r7, #3]
 80080ca:	f003 0301 	and.w	r3, r3, #1
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d013      	beq.n	80080fa <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	3304      	adds	r3, #4
 80080d6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d00e      	beq.n	80080fa <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80080e2:	f003 0308 	and.w	r3, r3, #8
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d007      	beq.n	80080fa <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	3304      	adds	r3, #4
 80080ee:	4619      	mov	r1, r3
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f007 fbaf 	bl	800f854 <etharp_request>
 80080f6:	e000      	b.n	80080fa <netif_issue_reports+0x6e>
    return;
 80080f8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80080fa:	3708      	adds	r7, #8
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	080140b0 	.word	0x080140b0
 8008104:	08014254 	.word	0x08014254
 8008108:	08014100 	.word	0x08014100

0800810c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b082      	sub	sp, #8
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d107      	bne.n	800812a <netif_set_down+0x1e>
 800811a:	4b12      	ldr	r3, [pc, #72]	; (8008164 <netif_set_down+0x58>)
 800811c:	f240 329b 	movw	r2, #923	; 0x39b
 8008120:	4911      	ldr	r1, [pc, #68]	; (8008168 <netif_set_down+0x5c>)
 8008122:	4812      	ldr	r0, [pc, #72]	; (800816c <netif_set_down+0x60>)
 8008124:	f009 fe00 	bl	8011d28 <iprintf>
 8008128:	e019      	b.n	800815e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008130:	f003 0301 	and.w	r3, r3, #1
 8008134:	2b00      	cmp	r3, #0
 8008136:	d012      	beq.n	800815e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800813e:	f023 0301 	bic.w	r3, r3, #1
 8008142:	b2da      	uxtb	r2, r3
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008150:	f003 0308 	and.w	r3, r3, #8
 8008154:	2b00      	cmp	r3, #0
 8008156:	d002      	beq.n	800815e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f006 ff39 	bl	800efd0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800815e:	3708      	adds	r7, #8
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}
 8008164:	080140b0 	.word	0x080140b0
 8008168:	08014278 	.word	0x08014278
 800816c:	08014100 	.word	0x08014100

08008170 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d107      	bne.n	800818e <netif_set_link_up+0x1e>
 800817e:	4b13      	ldr	r3, [pc, #76]	; (80081cc <netif_set_link_up+0x5c>)
 8008180:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8008184:	4912      	ldr	r1, [pc, #72]	; (80081d0 <netif_set_link_up+0x60>)
 8008186:	4813      	ldr	r0, [pc, #76]	; (80081d4 <netif_set_link_up+0x64>)
 8008188:	f009 fdce 	bl	8011d28 <iprintf>
 800818c:	e01b      	b.n	80081c6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008194:	f003 0304 	and.w	r3, r3, #4
 8008198:	2b00      	cmp	r3, #0
 800819a:	d114      	bne.n	80081c6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80081a2:	f043 0304 	orr.w	r3, r3, #4
 80081a6:	b2da      	uxtb	r2, r3
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80081ae:	2103      	movs	r1, #3
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f7ff ff6b 	bl	800808c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	69db      	ldr	r3, [r3, #28]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d003      	beq.n	80081c6 <netif_set_link_up+0x56>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	69db      	ldr	r3, [r3, #28]
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80081c6:	3708      	adds	r7, #8
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	080140b0 	.word	0x080140b0
 80081d0:	08014298 	.word	0x08014298
 80081d4:	08014100 	.word	0x08014100

080081d8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b082      	sub	sp, #8
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d107      	bne.n	80081f6 <netif_set_link_down+0x1e>
 80081e6:	4b11      	ldr	r3, [pc, #68]	; (800822c <netif_set_link_down+0x54>)
 80081e8:	f240 4206 	movw	r2, #1030	; 0x406
 80081ec:	4910      	ldr	r1, [pc, #64]	; (8008230 <netif_set_link_down+0x58>)
 80081ee:	4811      	ldr	r0, [pc, #68]	; (8008234 <netif_set_link_down+0x5c>)
 80081f0:	f009 fd9a 	bl	8011d28 <iprintf>
 80081f4:	e017      	b.n	8008226 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80081fc:	f003 0304 	and.w	r3, r3, #4
 8008200:	2b00      	cmp	r3, #0
 8008202:	d010      	beq.n	8008226 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800820a:	f023 0304 	bic.w	r3, r3, #4
 800820e:	b2da      	uxtb	r2, r3
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	69db      	ldr	r3, [r3, #28]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d003      	beq.n	8008226 <netif_set_link_down+0x4e>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	69db      	ldr	r3, [r3, #28]
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8008226:	3708      	adds	r7, #8
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}
 800822c:	080140b0 	.word	0x080140b0
 8008230:	080142bc 	.word	0x080142bc
 8008234:	08014100 	.word	0x08014100

08008238 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d002      	beq.n	800824e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	683a      	ldr	r2, [r7, #0]
 800824c:	61da      	str	r2, [r3, #28]
  }
}
 800824e:	bf00      	nop
 8008250:	370c      	adds	r7, #12
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr

0800825a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800825a:	b480      	push	{r7}
 800825c:	b085      	sub	sp, #20
 800825e:	af00      	add	r7, sp, #0
 8008260:	60f8      	str	r0, [r7, #12]
 8008262:	60b9      	str	r1, [r7, #8]
 8008264:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8008266:	f06f 030b 	mvn.w	r3, #11
}
 800826a:	4618      	mov	r0, r3
 800826c:	3714      	adds	r7, #20
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr
	...

08008278 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8008278:	b480      	push	{r7}
 800827a:	b085      	sub	sp, #20
 800827c:	af00      	add	r7, sp, #0
 800827e:	4603      	mov	r3, r0
 8008280:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8008282:	79fb      	ldrb	r3, [r7, #7]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d013      	beq.n	80082b0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8008288:	4b0d      	ldr	r3, [pc, #52]	; (80082c0 <netif_get_by_index+0x48>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	60fb      	str	r3, [r7, #12]
 800828e:	e00c      	b.n	80082aa <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008296:	3301      	adds	r3, #1
 8008298:	b2db      	uxtb	r3, r3
 800829a:	79fa      	ldrb	r2, [r7, #7]
 800829c:	429a      	cmp	r2, r3
 800829e:	d101      	bne.n	80082a4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	e006      	b.n	80082b2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	60fb      	str	r3, [r7, #12]
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d1ef      	bne.n	8008290 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3714      	adds	r7, #20
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr
 80082be:	bf00      	nop
 80082c0:	2000a7c4 	.word	0x2000a7c4

080082c4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b082      	sub	sp, #8
 80082c8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80082ca:	4b0c      	ldr	r3, [pc, #48]	; (80082fc <pbuf_free_ooseq+0x38>)
 80082cc:	2200      	movs	r2, #0
 80082ce:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80082d0:	4b0b      	ldr	r3, [pc, #44]	; (8008300 <pbuf_free_ooseq+0x3c>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	607b      	str	r3, [r7, #4]
 80082d6:	e00a      	b.n	80082ee <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d003      	beq.n	80082e8 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f002 f93d 	bl	800a560 <tcp_free_ooseq>
      return;
 80082e6:	e005      	b.n	80082f4 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	68db      	ldr	r3, [r3, #12]
 80082ec:	607b      	str	r3, [r7, #4]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d1f1      	bne.n	80082d8 <pbuf_free_ooseq+0x14>
    }
  }
}
 80082f4:	3708      	adds	r7, #8
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	bf00      	nop
 80082fc:	2000a7cd 	.word	0x2000a7cd
 8008300:	2000a7dc 	.word	0x2000a7dc

08008304 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8008304:	b480      	push	{r7}
 8008306:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8008308:	4b03      	ldr	r3, [pc, #12]	; (8008318 <pbuf_pool_is_empty+0x14>)
 800830a:	2201      	movs	r2, #1
 800830c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800830e:	bf00      	nop
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr
 8008318:	2000a7cd 	.word	0x2000a7cd

0800831c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800831c:	b480      	push	{r7}
 800831e:	b085      	sub	sp, #20
 8008320:	af00      	add	r7, sp, #0
 8008322:	60f8      	str	r0, [r7, #12]
 8008324:	60b9      	str	r1, [r7, #8]
 8008326:	4611      	mov	r1, r2
 8008328:	461a      	mov	r2, r3
 800832a:	460b      	mov	r3, r1
 800832c:	80fb      	strh	r3, [r7, #6]
 800832e:	4613      	mov	r3, r2
 8008330:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2200      	movs	r2, #0
 8008336:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	68ba      	ldr	r2, [r7, #8]
 800833c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	88fa      	ldrh	r2, [r7, #6]
 8008342:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	88ba      	ldrh	r2, [r7, #4]
 8008348:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800834a:	8b3b      	ldrh	r3, [r7, #24]
 800834c:	b2da      	uxtb	r2, r3
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	7f3a      	ldrb	r2, [r7, #28]
 8008356:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2201      	movs	r2, #1
 800835c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2200      	movs	r2, #0
 8008362:	73da      	strb	r2, [r3, #15]
}
 8008364:	bf00      	nop
 8008366:	3714      	adds	r7, #20
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr

08008370 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b08c      	sub	sp, #48	; 0x30
 8008374:	af02      	add	r7, sp, #8
 8008376:	4603      	mov	r3, r0
 8008378:	71fb      	strb	r3, [r7, #7]
 800837a:	460b      	mov	r3, r1
 800837c:	80bb      	strh	r3, [r7, #4]
 800837e:	4613      	mov	r3, r2
 8008380:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8008382:	79fb      	ldrb	r3, [r7, #7]
 8008384:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8008386:	887b      	ldrh	r3, [r7, #2]
 8008388:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800838c:	d07f      	beq.n	800848e <pbuf_alloc+0x11e>
 800838e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8008392:	f300 80c8 	bgt.w	8008526 <pbuf_alloc+0x1b6>
 8008396:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800839a:	d010      	beq.n	80083be <pbuf_alloc+0x4e>
 800839c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80083a0:	f300 80c1 	bgt.w	8008526 <pbuf_alloc+0x1b6>
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d002      	beq.n	80083ae <pbuf_alloc+0x3e>
 80083a8:	2b41      	cmp	r3, #65	; 0x41
 80083aa:	f040 80bc 	bne.w	8008526 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80083ae:	887a      	ldrh	r2, [r7, #2]
 80083b0:	88bb      	ldrh	r3, [r7, #4]
 80083b2:	4619      	mov	r1, r3
 80083b4:	2000      	movs	r0, #0
 80083b6:	f000 f8d1 	bl	800855c <pbuf_alloc_reference>
 80083ba:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80083bc:	e0bd      	b.n	800853a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80083be:	2300      	movs	r3, #0
 80083c0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80083c2:	2300      	movs	r3, #0
 80083c4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80083c6:	88bb      	ldrh	r3, [r7, #4]
 80083c8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80083ca:	2008      	movs	r0, #8
 80083cc:	f7ff fbce 	bl	8007b6c <memp_malloc>
 80083d0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d109      	bne.n	80083ec <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80083d8:	f7ff ff94 	bl	8008304 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80083dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d002      	beq.n	80083e8 <pbuf_alloc+0x78>
            pbuf_free(p);
 80083e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80083e4:	f000 faa8 	bl	8008938 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80083e8:	2300      	movs	r3, #0
 80083ea:	e0a7      	b.n	800853c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80083ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80083ee:	3303      	adds	r3, #3
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	f023 0303 	bic.w	r3, r3, #3
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	8b7a      	ldrh	r2, [r7, #26]
 8008400:	4293      	cmp	r3, r2
 8008402:	bf28      	it	cs
 8008404:	4613      	movcs	r3, r2
 8008406:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8008408:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800840a:	3310      	adds	r3, #16
 800840c:	693a      	ldr	r2, [r7, #16]
 800840e:	4413      	add	r3, r2
 8008410:	3303      	adds	r3, #3
 8008412:	f023 0303 	bic.w	r3, r3, #3
 8008416:	4618      	mov	r0, r3
 8008418:	89f9      	ldrh	r1, [r7, #14]
 800841a:	8b7a      	ldrh	r2, [r7, #26]
 800841c:	2300      	movs	r3, #0
 800841e:	9301      	str	r3, [sp, #4]
 8008420:	887b      	ldrh	r3, [r7, #2]
 8008422:	9300      	str	r3, [sp, #0]
 8008424:	460b      	mov	r3, r1
 8008426:	4601      	mov	r1, r0
 8008428:	6938      	ldr	r0, [r7, #16]
 800842a:	f7ff ff77 	bl	800831c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	f003 0303 	and.w	r3, r3, #3
 8008436:	2b00      	cmp	r3, #0
 8008438:	d006      	beq.n	8008448 <pbuf_alloc+0xd8>
 800843a:	4b42      	ldr	r3, [pc, #264]	; (8008544 <pbuf_alloc+0x1d4>)
 800843c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008440:	4941      	ldr	r1, [pc, #260]	; (8008548 <pbuf_alloc+0x1d8>)
 8008442:	4842      	ldr	r0, [pc, #264]	; (800854c <pbuf_alloc+0x1dc>)
 8008444:	f009 fc70 	bl	8011d28 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8008448:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800844a:	3303      	adds	r3, #3
 800844c:	f023 0303 	bic.w	r3, r3, #3
 8008450:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8008454:	d106      	bne.n	8008464 <pbuf_alloc+0xf4>
 8008456:	4b3b      	ldr	r3, [pc, #236]	; (8008544 <pbuf_alloc+0x1d4>)
 8008458:	f44f 7281 	mov.w	r2, #258	; 0x102
 800845c:	493c      	ldr	r1, [pc, #240]	; (8008550 <pbuf_alloc+0x1e0>)
 800845e:	483b      	ldr	r0, [pc, #236]	; (800854c <pbuf_alloc+0x1dc>)
 8008460:	f009 fc62 	bl	8011d28 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8008464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008466:	2b00      	cmp	r3, #0
 8008468:	d102      	bne.n	8008470 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	627b      	str	r3, [r7, #36]	; 0x24
 800846e:	e002      	b.n	8008476 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8008470:	69fb      	ldr	r3, [r7, #28]
 8008472:	693a      	ldr	r2, [r7, #16]
 8008474:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800847a:	8b7a      	ldrh	r2, [r7, #26]
 800847c:	89fb      	ldrh	r3, [r7, #14]
 800847e:	1ad3      	subs	r3, r2, r3
 8008480:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8008482:	2300      	movs	r3, #0
 8008484:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8008486:	8b7b      	ldrh	r3, [r7, #26]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d19e      	bne.n	80083ca <pbuf_alloc+0x5a>
      break;
 800848c:	e055      	b.n	800853a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800848e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008490:	3303      	adds	r3, #3
 8008492:	b29b      	uxth	r3, r3
 8008494:	f023 0303 	bic.w	r3, r3, #3
 8008498:	b29a      	uxth	r2, r3
 800849a:	88bb      	ldrh	r3, [r7, #4]
 800849c:	3303      	adds	r3, #3
 800849e:	b29b      	uxth	r3, r3
 80084a0:	f023 0303 	bic.w	r3, r3, #3
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	4413      	add	r3, r2
 80084a8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80084aa:	8b3b      	ldrh	r3, [r7, #24]
 80084ac:	3310      	adds	r3, #16
 80084ae:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80084b0:	8b3a      	ldrh	r2, [r7, #24]
 80084b2:	88bb      	ldrh	r3, [r7, #4]
 80084b4:	3303      	adds	r3, #3
 80084b6:	f023 0303 	bic.w	r3, r3, #3
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d306      	bcc.n	80084cc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80084be:	8afa      	ldrh	r2, [r7, #22]
 80084c0:	88bb      	ldrh	r3, [r7, #4]
 80084c2:	3303      	adds	r3, #3
 80084c4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d201      	bcs.n	80084d0 <pbuf_alloc+0x160>
        return NULL;
 80084cc:	2300      	movs	r3, #0
 80084ce:	e035      	b.n	800853c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80084d0:	8afb      	ldrh	r3, [r7, #22]
 80084d2:	4618      	mov	r0, r3
 80084d4:	f7ff f9ba 	bl	800784c <mem_malloc>
 80084d8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80084da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d101      	bne.n	80084e4 <pbuf_alloc+0x174>
        return NULL;
 80084e0:	2300      	movs	r3, #0
 80084e2:	e02b      	b.n	800853c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80084e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80084e6:	3310      	adds	r3, #16
 80084e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084ea:	4413      	add	r3, r2
 80084ec:	3303      	adds	r3, #3
 80084ee:	f023 0303 	bic.w	r3, r3, #3
 80084f2:	4618      	mov	r0, r3
 80084f4:	88b9      	ldrh	r1, [r7, #4]
 80084f6:	88ba      	ldrh	r2, [r7, #4]
 80084f8:	2300      	movs	r3, #0
 80084fa:	9301      	str	r3, [sp, #4]
 80084fc:	887b      	ldrh	r3, [r7, #2]
 80084fe:	9300      	str	r3, [sp, #0]
 8008500:	460b      	mov	r3, r1
 8008502:	4601      	mov	r1, r0
 8008504:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008506:	f7ff ff09 	bl	800831c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800850a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	f003 0303 	and.w	r3, r3, #3
 8008512:	2b00      	cmp	r3, #0
 8008514:	d010      	beq.n	8008538 <pbuf_alloc+0x1c8>
 8008516:	4b0b      	ldr	r3, [pc, #44]	; (8008544 <pbuf_alloc+0x1d4>)
 8008518:	f44f 7291 	mov.w	r2, #290	; 0x122
 800851c:	490d      	ldr	r1, [pc, #52]	; (8008554 <pbuf_alloc+0x1e4>)
 800851e:	480b      	ldr	r0, [pc, #44]	; (800854c <pbuf_alloc+0x1dc>)
 8008520:	f009 fc02 	bl	8011d28 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8008524:	e008      	b.n	8008538 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8008526:	4b07      	ldr	r3, [pc, #28]	; (8008544 <pbuf_alloc+0x1d4>)
 8008528:	f240 1227 	movw	r2, #295	; 0x127
 800852c:	490a      	ldr	r1, [pc, #40]	; (8008558 <pbuf_alloc+0x1e8>)
 800852e:	4807      	ldr	r0, [pc, #28]	; (800854c <pbuf_alloc+0x1dc>)
 8008530:	f009 fbfa 	bl	8011d28 <iprintf>
      return NULL;
 8008534:	2300      	movs	r3, #0
 8008536:	e001      	b.n	800853c <pbuf_alloc+0x1cc>
      break;
 8008538:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800853a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800853c:	4618      	mov	r0, r3
 800853e:	3728      	adds	r7, #40	; 0x28
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}
 8008544:	080142e0 	.word	0x080142e0
 8008548:	08014310 	.word	0x08014310
 800854c:	08014340 	.word	0x08014340
 8008550:	08014368 	.word	0x08014368
 8008554:	0801439c 	.word	0x0801439c
 8008558:	080143c8 	.word	0x080143c8

0800855c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b086      	sub	sp, #24
 8008560:	af02      	add	r7, sp, #8
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	460b      	mov	r3, r1
 8008566:	807b      	strh	r3, [r7, #2]
 8008568:	4613      	mov	r3, r2
 800856a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800856c:	883b      	ldrh	r3, [r7, #0]
 800856e:	2b41      	cmp	r3, #65	; 0x41
 8008570:	d009      	beq.n	8008586 <pbuf_alloc_reference+0x2a>
 8008572:	883b      	ldrh	r3, [r7, #0]
 8008574:	2b01      	cmp	r3, #1
 8008576:	d006      	beq.n	8008586 <pbuf_alloc_reference+0x2a>
 8008578:	4b0f      	ldr	r3, [pc, #60]	; (80085b8 <pbuf_alloc_reference+0x5c>)
 800857a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800857e:	490f      	ldr	r1, [pc, #60]	; (80085bc <pbuf_alloc_reference+0x60>)
 8008580:	480f      	ldr	r0, [pc, #60]	; (80085c0 <pbuf_alloc_reference+0x64>)
 8008582:	f009 fbd1 	bl	8011d28 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8008586:	2007      	movs	r0, #7
 8008588:	f7ff faf0 	bl	8007b6c <memp_malloc>
 800858c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d101      	bne.n	8008598 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8008594:	2300      	movs	r3, #0
 8008596:	e00b      	b.n	80085b0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8008598:	8879      	ldrh	r1, [r7, #2]
 800859a:	887a      	ldrh	r2, [r7, #2]
 800859c:	2300      	movs	r3, #0
 800859e:	9301      	str	r3, [sp, #4]
 80085a0:	883b      	ldrh	r3, [r7, #0]
 80085a2:	9300      	str	r3, [sp, #0]
 80085a4:	460b      	mov	r3, r1
 80085a6:	6879      	ldr	r1, [r7, #4]
 80085a8:	68f8      	ldr	r0, [r7, #12]
 80085aa:	f7ff feb7 	bl	800831c <pbuf_init_alloced_pbuf>
  return p;
 80085ae:	68fb      	ldr	r3, [r7, #12]
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3710      	adds	r7, #16
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	080142e0 	.word	0x080142e0
 80085bc:	080143e4 	.word	0x080143e4
 80085c0:	08014340 	.word	0x08014340

080085c4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b088      	sub	sp, #32
 80085c8:	af02      	add	r7, sp, #8
 80085ca:	607b      	str	r3, [r7, #4]
 80085cc:	4603      	mov	r3, r0
 80085ce:	73fb      	strb	r3, [r7, #15]
 80085d0:	460b      	mov	r3, r1
 80085d2:	81bb      	strh	r3, [r7, #12]
 80085d4:	4613      	mov	r3, r2
 80085d6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80085d8:	7bfb      	ldrb	r3, [r7, #15]
 80085da:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80085dc:	8a7b      	ldrh	r3, [r7, #18]
 80085de:	3303      	adds	r3, #3
 80085e0:	f023 0203 	bic.w	r2, r3, #3
 80085e4:	89bb      	ldrh	r3, [r7, #12]
 80085e6:	441a      	add	r2, r3
 80085e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d901      	bls.n	80085f2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80085ee:	2300      	movs	r3, #0
 80085f0:	e018      	b.n	8008624 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80085f2:	6a3b      	ldr	r3, [r7, #32]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d007      	beq.n	8008608 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80085f8:	8a7b      	ldrh	r3, [r7, #18]
 80085fa:	3303      	adds	r3, #3
 80085fc:	f023 0303 	bic.w	r3, r3, #3
 8008600:	6a3a      	ldr	r2, [r7, #32]
 8008602:	4413      	add	r3, r2
 8008604:	617b      	str	r3, [r7, #20]
 8008606:	e001      	b.n	800860c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8008608:	2300      	movs	r3, #0
 800860a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	89b9      	ldrh	r1, [r7, #12]
 8008610:	89ba      	ldrh	r2, [r7, #12]
 8008612:	2302      	movs	r3, #2
 8008614:	9301      	str	r3, [sp, #4]
 8008616:	897b      	ldrh	r3, [r7, #10]
 8008618:	9300      	str	r3, [sp, #0]
 800861a:	460b      	mov	r3, r1
 800861c:	6979      	ldr	r1, [r7, #20]
 800861e:	f7ff fe7d 	bl	800831c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8008622:	687b      	ldr	r3, [r7, #4]
}
 8008624:	4618      	mov	r0, r3
 8008626:	3718      	adds	r7, #24
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	460b      	mov	r3, r1
 8008636:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d106      	bne.n	800864c <pbuf_realloc+0x20>
 800863e:	4b3a      	ldr	r3, [pc, #232]	; (8008728 <pbuf_realloc+0xfc>)
 8008640:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8008644:	4939      	ldr	r1, [pc, #228]	; (800872c <pbuf_realloc+0x100>)
 8008646:	483a      	ldr	r0, [pc, #232]	; (8008730 <pbuf_realloc+0x104>)
 8008648:	f009 fb6e 	bl	8011d28 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	891b      	ldrh	r3, [r3, #8]
 8008650:	887a      	ldrh	r2, [r7, #2]
 8008652:	429a      	cmp	r2, r3
 8008654:	d263      	bcs.n	800871e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	891a      	ldrh	r2, [r3, #8]
 800865a:	887b      	ldrh	r3, [r7, #2]
 800865c:	1ad3      	subs	r3, r2, r3
 800865e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8008660:	887b      	ldrh	r3, [r7, #2]
 8008662:	817b      	strh	r3, [r7, #10]
  q = p;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8008668:	e018      	b.n	800869c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	895b      	ldrh	r3, [r3, #10]
 800866e:	897a      	ldrh	r2, [r7, #10]
 8008670:	1ad3      	subs	r3, r2, r3
 8008672:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	891a      	ldrh	r2, [r3, #8]
 8008678:	893b      	ldrh	r3, [r7, #8]
 800867a:	1ad3      	subs	r3, r2, r3
 800867c:	b29a      	uxth	r2, r3
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d106      	bne.n	800869c <pbuf_realloc+0x70>
 800868e:	4b26      	ldr	r3, [pc, #152]	; (8008728 <pbuf_realloc+0xfc>)
 8008690:	f240 12af 	movw	r2, #431	; 0x1af
 8008694:	4927      	ldr	r1, [pc, #156]	; (8008734 <pbuf_realloc+0x108>)
 8008696:	4826      	ldr	r0, [pc, #152]	; (8008730 <pbuf_realloc+0x104>)
 8008698:	f009 fb46 	bl	8011d28 <iprintf>
  while (rem_len > q->len) {
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	895b      	ldrh	r3, [r3, #10]
 80086a0:	897a      	ldrh	r2, [r7, #10]
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d8e1      	bhi.n	800866a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	7b1b      	ldrb	r3, [r3, #12]
 80086aa:	f003 030f 	and.w	r3, r3, #15
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d121      	bne.n	80086f6 <pbuf_realloc+0xca>
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	895b      	ldrh	r3, [r3, #10]
 80086b6:	897a      	ldrh	r2, [r7, #10]
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d01c      	beq.n	80086f6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	7b5b      	ldrb	r3, [r3, #13]
 80086c0:	f003 0302 	and.w	r3, r3, #2
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d116      	bne.n	80086f6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	685a      	ldr	r2, [r3, #4]
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	1ad3      	subs	r3, r2, r3
 80086d0:	b29a      	uxth	r2, r3
 80086d2:	897b      	ldrh	r3, [r7, #10]
 80086d4:	4413      	add	r3, r2
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	4619      	mov	r1, r3
 80086da:	68f8      	ldr	r0, [r7, #12]
 80086dc:	f7fe ffba 	bl	8007654 <mem_trim>
 80086e0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d106      	bne.n	80086f6 <pbuf_realloc+0xca>
 80086e8:	4b0f      	ldr	r3, [pc, #60]	; (8008728 <pbuf_realloc+0xfc>)
 80086ea:	f240 12bd 	movw	r2, #445	; 0x1bd
 80086ee:	4912      	ldr	r1, [pc, #72]	; (8008738 <pbuf_realloc+0x10c>)
 80086f0:	480f      	ldr	r0, [pc, #60]	; (8008730 <pbuf_realloc+0x104>)
 80086f2:	f009 fb19 	bl	8011d28 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	897a      	ldrh	r2, [r7, #10]
 80086fa:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	895a      	ldrh	r2, [r3, #10]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d004      	beq.n	8008716 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4618      	mov	r0, r3
 8008712:	f000 f911 	bl	8008938 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2200      	movs	r2, #0
 800871a:	601a      	str	r2, [r3, #0]
 800871c:	e000      	b.n	8008720 <pbuf_realloc+0xf4>
    return;
 800871e:	bf00      	nop

}
 8008720:	3710      	adds	r7, #16
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop
 8008728:	080142e0 	.word	0x080142e0
 800872c:	080143f8 	.word	0x080143f8
 8008730:	08014340 	.word	0x08014340
 8008734:	08014410 	.word	0x08014410
 8008738:	08014428 	.word	0x08014428

0800873c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b086      	sub	sp, #24
 8008740:	af00      	add	r7, sp, #0
 8008742:	60f8      	str	r0, [r7, #12]
 8008744:	60b9      	str	r1, [r7, #8]
 8008746:	4613      	mov	r3, r2
 8008748:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d106      	bne.n	800875e <pbuf_add_header_impl+0x22>
 8008750:	4b2b      	ldr	r3, [pc, #172]	; (8008800 <pbuf_add_header_impl+0xc4>)
 8008752:	f240 12df 	movw	r2, #479	; 0x1df
 8008756:	492b      	ldr	r1, [pc, #172]	; (8008804 <pbuf_add_header_impl+0xc8>)
 8008758:	482b      	ldr	r0, [pc, #172]	; (8008808 <pbuf_add_header_impl+0xcc>)
 800875a:	f009 fae5 	bl	8011d28 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d003      	beq.n	800876c <pbuf_add_header_impl+0x30>
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800876a:	d301      	bcc.n	8008770 <pbuf_add_header_impl+0x34>
    return 1;
 800876c:	2301      	movs	r3, #1
 800876e:	e043      	b.n	80087f8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d101      	bne.n	800877a <pbuf_add_header_impl+0x3e>
    return 0;
 8008776:	2300      	movs	r3, #0
 8008778:	e03e      	b.n	80087f8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	891a      	ldrh	r2, [r3, #8]
 8008782:	8a7b      	ldrh	r3, [r7, #18]
 8008784:	4413      	add	r3, r2
 8008786:	b29b      	uxth	r3, r3
 8008788:	8a7a      	ldrh	r2, [r7, #18]
 800878a:	429a      	cmp	r2, r3
 800878c:	d901      	bls.n	8008792 <pbuf_add_header_impl+0x56>
    return 1;
 800878e:	2301      	movs	r3, #1
 8008790:	e032      	b.n	80087f8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	7b1b      	ldrb	r3, [r3, #12]
 8008796:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8008798:	8a3b      	ldrh	r3, [r7, #16]
 800879a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d00c      	beq.n	80087bc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	685a      	ldr	r2, [r3, #4]
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	425b      	negs	r3, r3
 80087aa:	4413      	add	r3, r2
 80087ac:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	3310      	adds	r3, #16
 80087b2:	697a      	ldr	r2, [r7, #20]
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d20d      	bcs.n	80087d4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80087b8:	2301      	movs	r3, #1
 80087ba:	e01d      	b.n	80087f8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80087bc:	79fb      	ldrb	r3, [r7, #7]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d006      	beq.n	80087d0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	685a      	ldr	r2, [r3, #4]
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	425b      	negs	r3, r3
 80087ca:	4413      	add	r3, r2
 80087cc:	617b      	str	r3, [r7, #20]
 80087ce:	e001      	b.n	80087d4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80087d0:	2301      	movs	r3, #1
 80087d2:	e011      	b.n	80087f8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	697a      	ldr	r2, [r7, #20]
 80087d8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	895a      	ldrh	r2, [r3, #10]
 80087de:	8a7b      	ldrh	r3, [r7, #18]
 80087e0:	4413      	add	r3, r2
 80087e2:	b29a      	uxth	r2, r3
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	891a      	ldrh	r2, [r3, #8]
 80087ec:	8a7b      	ldrh	r3, [r7, #18]
 80087ee:	4413      	add	r3, r2
 80087f0:	b29a      	uxth	r2, r3
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	811a      	strh	r2, [r3, #8]


  return 0;
 80087f6:	2300      	movs	r3, #0
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3718      	adds	r7, #24
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}
 8008800:	080142e0 	.word	0x080142e0
 8008804:	08014444 	.word	0x08014444
 8008808:	08014340 	.word	0x08014340

0800880c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b082      	sub	sp, #8
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8008816:	2200      	movs	r2, #0
 8008818:	6839      	ldr	r1, [r7, #0]
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f7ff ff8e 	bl	800873c <pbuf_add_header_impl>
 8008820:	4603      	mov	r3, r0
}
 8008822:	4618      	mov	r0, r3
 8008824:	3708      	adds	r7, #8
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
	...

0800882c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b084      	sub	sp, #16
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d106      	bne.n	800884a <pbuf_remove_header+0x1e>
 800883c:	4b20      	ldr	r3, [pc, #128]	; (80088c0 <pbuf_remove_header+0x94>)
 800883e:	f240 224b 	movw	r2, #587	; 0x24b
 8008842:	4920      	ldr	r1, [pc, #128]	; (80088c4 <pbuf_remove_header+0x98>)
 8008844:	4820      	ldr	r0, [pc, #128]	; (80088c8 <pbuf_remove_header+0x9c>)
 8008846:	f009 fa6f 	bl	8011d28 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d003      	beq.n	8008858 <pbuf_remove_header+0x2c>
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008856:	d301      	bcc.n	800885c <pbuf_remove_header+0x30>
    return 1;
 8008858:	2301      	movs	r3, #1
 800885a:	e02c      	b.n	80088b6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d101      	bne.n	8008866 <pbuf_remove_header+0x3a>
    return 0;
 8008862:	2300      	movs	r3, #0
 8008864:	e027      	b.n	80088b6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	895b      	ldrh	r3, [r3, #10]
 800886e:	89fa      	ldrh	r2, [r7, #14]
 8008870:	429a      	cmp	r2, r3
 8008872:	d908      	bls.n	8008886 <pbuf_remove_header+0x5a>
 8008874:	4b12      	ldr	r3, [pc, #72]	; (80088c0 <pbuf_remove_header+0x94>)
 8008876:	f240 2255 	movw	r2, #597	; 0x255
 800887a:	4914      	ldr	r1, [pc, #80]	; (80088cc <pbuf_remove_header+0xa0>)
 800887c:	4812      	ldr	r0, [pc, #72]	; (80088c8 <pbuf_remove_header+0x9c>)
 800887e:	f009 fa53 	bl	8011d28 <iprintf>
 8008882:	2301      	movs	r3, #1
 8008884:	e017      	b.n	80088b6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	685a      	ldr	r2, [r3, #4]
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	441a      	add	r2, r3
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	895a      	ldrh	r2, [r3, #10]
 800889c:	89fb      	ldrh	r3, [r7, #14]
 800889e:	1ad3      	subs	r3, r2, r3
 80088a0:	b29a      	uxth	r2, r3
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	891a      	ldrh	r2, [r3, #8]
 80088aa:	89fb      	ldrh	r3, [r7, #14]
 80088ac:	1ad3      	subs	r3, r2, r3
 80088ae:	b29a      	uxth	r2, r3
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80088b4:	2300      	movs	r3, #0
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3710      	adds	r7, #16
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop
 80088c0:	080142e0 	.word	0x080142e0
 80088c4:	08014444 	.word	0x08014444
 80088c8:	08014340 	.word	0x08014340
 80088cc:	08014450 	.word	0x08014450

080088d0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b082      	sub	sp, #8
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	460b      	mov	r3, r1
 80088da:	807b      	strh	r3, [r7, #2]
 80088dc:	4613      	mov	r3, r2
 80088de:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80088e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	da08      	bge.n	80088fa <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80088e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80088ec:	425b      	negs	r3, r3
 80088ee:	4619      	mov	r1, r3
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f7ff ff9b 	bl	800882c <pbuf_remove_header>
 80088f6:	4603      	mov	r3, r0
 80088f8:	e007      	b.n	800890a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80088fa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80088fe:	787a      	ldrb	r2, [r7, #1]
 8008900:	4619      	mov	r1, r3
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f7ff ff1a 	bl	800873c <pbuf_add_header_impl>
 8008908:	4603      	mov	r3, r0
  }
}
 800890a:	4618      	mov	r0, r3
 800890c:	3708      	adds	r7, #8
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}

08008912 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8008912:	b580      	push	{r7, lr}
 8008914:	b082      	sub	sp, #8
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
 800891a:	460b      	mov	r3, r1
 800891c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800891e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008922:	2201      	movs	r2, #1
 8008924:	4619      	mov	r1, r3
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f7ff ffd2 	bl	80088d0 <pbuf_header_impl>
 800892c:	4603      	mov	r3, r0
}
 800892e:	4618      	mov	r0, r3
 8008930:	3708      	adds	r7, #8
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
	...

08008938 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b086      	sub	sp, #24
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d10b      	bne.n	800895e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d106      	bne.n	800895a <pbuf_free+0x22>
 800894c:	4b38      	ldr	r3, [pc, #224]	; (8008a30 <pbuf_free+0xf8>)
 800894e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8008952:	4938      	ldr	r1, [pc, #224]	; (8008a34 <pbuf_free+0xfc>)
 8008954:	4838      	ldr	r0, [pc, #224]	; (8008a38 <pbuf_free+0x100>)
 8008956:	f009 f9e7 	bl	8011d28 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800895a:	2300      	movs	r3, #0
 800895c:	e063      	b.n	8008a26 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800895e:	2300      	movs	r3, #0
 8008960:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8008962:	e05c      	b.n	8008a1e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	7b9b      	ldrb	r3, [r3, #14]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d106      	bne.n	800897a <pbuf_free+0x42>
 800896c:	4b30      	ldr	r3, [pc, #192]	; (8008a30 <pbuf_free+0xf8>)
 800896e:	f240 22f1 	movw	r2, #753	; 0x2f1
 8008972:	4932      	ldr	r1, [pc, #200]	; (8008a3c <pbuf_free+0x104>)
 8008974:	4830      	ldr	r0, [pc, #192]	; (8008a38 <pbuf_free+0x100>)
 8008976:	f009 f9d7 	bl	8011d28 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	7b9b      	ldrb	r3, [r3, #14]
 800897e:	3b01      	subs	r3, #1
 8008980:	b2da      	uxtb	r2, r3
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	739a      	strb	r2, [r3, #14]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	7b9b      	ldrb	r3, [r3, #14]
 800898a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800898c:	7dbb      	ldrb	r3, [r7, #22]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d143      	bne.n	8008a1a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	7b1b      	ldrb	r3, [r3, #12]
 800899c:	f003 030f 	and.w	r3, r3, #15
 80089a0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	7b5b      	ldrb	r3, [r3, #13]
 80089a6:	f003 0302 	and.w	r3, r3, #2
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d011      	beq.n	80089d2 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	691b      	ldr	r3, [r3, #16]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d106      	bne.n	80089c8 <pbuf_free+0x90>
 80089ba:	4b1d      	ldr	r3, [pc, #116]	; (8008a30 <pbuf_free+0xf8>)
 80089bc:	f240 22ff 	movw	r2, #767	; 0x2ff
 80089c0:	491f      	ldr	r1, [pc, #124]	; (8008a40 <pbuf_free+0x108>)
 80089c2:	481d      	ldr	r0, [pc, #116]	; (8008a38 <pbuf_free+0x100>)
 80089c4:	f009 f9b0 	bl	8011d28 <iprintf>
        pc->custom_free_function(p);
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	691b      	ldr	r3, [r3, #16]
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	4798      	blx	r3
 80089d0:	e01d      	b.n	8008a0e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80089d2:	7bfb      	ldrb	r3, [r7, #15]
 80089d4:	2b02      	cmp	r3, #2
 80089d6:	d104      	bne.n	80089e2 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80089d8:	6879      	ldr	r1, [r7, #4]
 80089da:	2008      	movs	r0, #8
 80089dc:	f7ff f936 	bl	8007c4c <memp_free>
 80089e0:	e015      	b.n	8008a0e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80089e2:	7bfb      	ldrb	r3, [r7, #15]
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	d104      	bne.n	80089f2 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80089e8:	6879      	ldr	r1, [r7, #4]
 80089ea:	2007      	movs	r0, #7
 80089ec:	f7ff f92e 	bl	8007c4c <memp_free>
 80089f0:	e00d      	b.n	8008a0e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80089f2:	7bfb      	ldrb	r3, [r7, #15]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d103      	bne.n	8008a00 <pbuf_free+0xc8>
          mem_free(p);
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f7fe fdc1 	bl	8007580 <mem_free>
 80089fe:	e006      	b.n	8008a0e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8008a00:	4b0b      	ldr	r3, [pc, #44]	; (8008a30 <pbuf_free+0xf8>)
 8008a02:	f240 320f 	movw	r2, #783	; 0x30f
 8008a06:	490f      	ldr	r1, [pc, #60]	; (8008a44 <pbuf_free+0x10c>)
 8008a08:	480b      	ldr	r0, [pc, #44]	; (8008a38 <pbuf_free+0x100>)
 8008a0a:	f009 f98d 	bl	8011d28 <iprintf>
        }
      }
      count++;
 8008a0e:	7dfb      	ldrb	r3, [r7, #23]
 8008a10:	3301      	adds	r3, #1
 8008a12:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	607b      	str	r3, [r7, #4]
 8008a18:	e001      	b.n	8008a1e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d19f      	bne.n	8008964 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8008a24:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3718      	adds	r7, #24
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
 8008a2e:	bf00      	nop
 8008a30:	080142e0 	.word	0x080142e0
 8008a34:	08014444 	.word	0x08014444
 8008a38:	08014340 	.word	0x08014340
 8008a3c:	08014470 	.word	0x08014470
 8008a40:	08014488 	.word	0x08014488
 8008a44:	080144ac 	.word	0x080144ac

08008a48 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b085      	sub	sp, #20
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8008a50:	2300      	movs	r3, #0
 8008a52:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8008a54:	e005      	b.n	8008a62 <pbuf_clen+0x1a>
    ++len;
 8008a56:	89fb      	ldrh	r3, [r7, #14]
 8008a58:	3301      	adds	r3, #1
 8008a5a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d1f6      	bne.n	8008a56 <pbuf_clen+0xe>
  }
  return len;
 8008a68:	89fb      	ldrh	r3, [r7, #14]
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3714      	adds	r7, #20
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr
	...

08008a78 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d010      	beq.n	8008aa8 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	7b9b      	ldrb	r3, [r3, #14]
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	b2da      	uxtb	r2, r3
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	7b9b      	ldrb	r3, [r3, #14]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d106      	bne.n	8008aa8 <pbuf_ref+0x30>
 8008a9a:	4b05      	ldr	r3, [pc, #20]	; (8008ab0 <pbuf_ref+0x38>)
 8008a9c:	f240 3242 	movw	r2, #834	; 0x342
 8008aa0:	4904      	ldr	r1, [pc, #16]	; (8008ab4 <pbuf_ref+0x3c>)
 8008aa2:	4805      	ldr	r0, [pc, #20]	; (8008ab8 <pbuf_ref+0x40>)
 8008aa4:	f009 f940 	bl	8011d28 <iprintf>
  }
}
 8008aa8:	bf00      	nop
 8008aaa:	3708      	adds	r7, #8
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}
 8008ab0:	080142e0 	.word	0x080142e0
 8008ab4:	080144c0 	.word	0x080144c0
 8008ab8:	08014340 	.word	0x08014340

08008abc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d002      	beq.n	8008ad2 <pbuf_cat+0x16>
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d107      	bne.n	8008ae2 <pbuf_cat+0x26>
 8008ad2:	4b20      	ldr	r3, [pc, #128]	; (8008b54 <pbuf_cat+0x98>)
 8008ad4:	f240 3259 	movw	r2, #857	; 0x359
 8008ad8:	491f      	ldr	r1, [pc, #124]	; (8008b58 <pbuf_cat+0x9c>)
 8008ada:	4820      	ldr	r0, [pc, #128]	; (8008b5c <pbuf_cat+0xa0>)
 8008adc:	f009 f924 	bl	8011d28 <iprintf>
 8008ae0:	e034      	b.n	8008b4c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	60fb      	str	r3, [r7, #12]
 8008ae6:	e00a      	b.n	8008afe <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	891a      	ldrh	r2, [r3, #8]
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	891b      	ldrh	r3, [r3, #8]
 8008af0:	4413      	add	r3, r2
 8008af2:	b29a      	uxth	r2, r3
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	60fb      	str	r3, [r7, #12]
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d1f0      	bne.n	8008ae8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	891a      	ldrh	r2, [r3, #8]
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	895b      	ldrh	r3, [r3, #10]
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d006      	beq.n	8008b20 <pbuf_cat+0x64>
 8008b12:	4b10      	ldr	r3, [pc, #64]	; (8008b54 <pbuf_cat+0x98>)
 8008b14:	f240 3262 	movw	r2, #866	; 0x362
 8008b18:	4911      	ldr	r1, [pc, #68]	; (8008b60 <pbuf_cat+0xa4>)
 8008b1a:	4810      	ldr	r0, [pc, #64]	; (8008b5c <pbuf_cat+0xa0>)
 8008b1c:	f009 f904 	bl	8011d28 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d006      	beq.n	8008b36 <pbuf_cat+0x7a>
 8008b28:	4b0a      	ldr	r3, [pc, #40]	; (8008b54 <pbuf_cat+0x98>)
 8008b2a:	f240 3263 	movw	r2, #867	; 0x363
 8008b2e:	490d      	ldr	r1, [pc, #52]	; (8008b64 <pbuf_cat+0xa8>)
 8008b30:	480a      	ldr	r0, [pc, #40]	; (8008b5c <pbuf_cat+0xa0>)
 8008b32:	f009 f8f9 	bl	8011d28 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	891a      	ldrh	r2, [r3, #8]
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	891b      	ldrh	r3, [r3, #8]
 8008b3e:	4413      	add	r3, r2
 8008b40:	b29a      	uxth	r2, r3
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	683a      	ldr	r2, [r7, #0]
 8008b4a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8008b4c:	3710      	adds	r7, #16
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop
 8008b54:	080142e0 	.word	0x080142e0
 8008b58:	080144d4 	.word	0x080144d4
 8008b5c:	08014340 	.word	0x08014340
 8008b60:	0801450c 	.word	0x0801450c
 8008b64:	0801453c 	.word	0x0801453c

08008b68 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b086      	sub	sp, #24
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8008b72:	2300      	movs	r3, #0
 8008b74:	617b      	str	r3, [r7, #20]
 8008b76:	2300      	movs	r3, #0
 8008b78:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d008      	beq.n	8008b92 <pbuf_copy+0x2a>
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d005      	beq.n	8008b92 <pbuf_copy+0x2a>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	891a      	ldrh	r2, [r3, #8]
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	891b      	ldrh	r3, [r3, #8]
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d209      	bcs.n	8008ba6 <pbuf_copy+0x3e>
 8008b92:	4b57      	ldr	r3, [pc, #348]	; (8008cf0 <pbuf_copy+0x188>)
 8008b94:	f240 32c9 	movw	r2, #969	; 0x3c9
 8008b98:	4956      	ldr	r1, [pc, #344]	; (8008cf4 <pbuf_copy+0x18c>)
 8008b9a:	4857      	ldr	r0, [pc, #348]	; (8008cf8 <pbuf_copy+0x190>)
 8008b9c:	f009 f8c4 	bl	8011d28 <iprintf>
 8008ba0:	f06f 030f 	mvn.w	r3, #15
 8008ba4:	e09f      	b.n	8008ce6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	895b      	ldrh	r3, [r3, #10]
 8008baa:	461a      	mov	r2, r3
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	1ad2      	subs	r2, r2, r3
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	895b      	ldrh	r3, [r3, #10]
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	1acb      	subs	r3, r1, r3
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d306      	bcc.n	8008bcc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	895b      	ldrh	r3, [r3, #10]
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	1ad3      	subs	r3, r2, r3
 8008bc8:	60fb      	str	r3, [r7, #12]
 8008bca:	e005      	b.n	8008bd8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	895b      	ldrh	r3, [r3, #10]
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	1ad3      	subs	r3, r2, r3
 8008bd6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	685a      	ldr	r2, [r3, #4]
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	18d0      	adds	r0, r2, r3
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	685a      	ldr	r2, [r3, #4]
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	4413      	add	r3, r2
 8008be8:	68fa      	ldr	r2, [r7, #12]
 8008bea:	4619      	mov	r1, r3
 8008bec:	f009 f9fd 	bl	8011fea <memcpy>
    offset_to += len;
 8008bf0:	697a      	ldr	r2, [r7, #20]
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	4413      	add	r3, r2
 8008bf6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8008bf8:	693a      	ldr	r2, [r7, #16]
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	4413      	add	r3, r2
 8008bfe:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	895b      	ldrh	r3, [r3, #10]
 8008c04:	461a      	mov	r2, r3
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d906      	bls.n	8008c1a <pbuf_copy+0xb2>
 8008c0c:	4b38      	ldr	r3, [pc, #224]	; (8008cf0 <pbuf_copy+0x188>)
 8008c0e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8008c12:	493a      	ldr	r1, [pc, #232]	; (8008cfc <pbuf_copy+0x194>)
 8008c14:	4838      	ldr	r0, [pc, #224]	; (8008cf8 <pbuf_copy+0x190>)
 8008c16:	f009 f887 	bl	8011d28 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	895b      	ldrh	r3, [r3, #10]
 8008c1e:	461a      	mov	r2, r3
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d906      	bls.n	8008c34 <pbuf_copy+0xcc>
 8008c26:	4b32      	ldr	r3, [pc, #200]	; (8008cf0 <pbuf_copy+0x188>)
 8008c28:	f240 32da 	movw	r2, #986	; 0x3da
 8008c2c:	4934      	ldr	r1, [pc, #208]	; (8008d00 <pbuf_copy+0x198>)
 8008c2e:	4832      	ldr	r0, [pc, #200]	; (8008cf8 <pbuf_copy+0x190>)
 8008c30:	f009 f87a 	bl	8011d28 <iprintf>
    if (offset_from >= p_from->len) {
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	895b      	ldrh	r3, [r3, #10]
 8008c38:	461a      	mov	r2, r3
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d304      	bcc.n	8008c4a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8008c40:	2300      	movs	r3, #0
 8008c42:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	895b      	ldrh	r3, [r3, #10]
 8008c4e:	461a      	mov	r2, r3
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d114      	bne.n	8008c80 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8008c56:	2300      	movs	r3, #0
 8008c58:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d10c      	bne.n	8008c80 <pbuf_copy+0x118>
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d009      	beq.n	8008c80 <pbuf_copy+0x118>
 8008c6c:	4b20      	ldr	r3, [pc, #128]	; (8008cf0 <pbuf_copy+0x188>)
 8008c6e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8008c72:	4924      	ldr	r1, [pc, #144]	; (8008d04 <pbuf_copy+0x19c>)
 8008c74:	4820      	ldr	r0, [pc, #128]	; (8008cf8 <pbuf_copy+0x190>)
 8008c76:	f009 f857 	bl	8011d28 <iprintf>
 8008c7a:	f06f 030f 	mvn.w	r3, #15
 8008c7e:	e032      	b.n	8008ce6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d013      	beq.n	8008cae <pbuf_copy+0x146>
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	895a      	ldrh	r2, [r3, #10]
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	891b      	ldrh	r3, [r3, #8]
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d10d      	bne.n	8008cae <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d009      	beq.n	8008cae <pbuf_copy+0x146>
 8008c9a:	4b15      	ldr	r3, [pc, #84]	; (8008cf0 <pbuf_copy+0x188>)
 8008c9c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8008ca0:	4919      	ldr	r1, [pc, #100]	; (8008d08 <pbuf_copy+0x1a0>)
 8008ca2:	4815      	ldr	r0, [pc, #84]	; (8008cf8 <pbuf_copy+0x190>)
 8008ca4:	f009 f840 	bl	8011d28 <iprintf>
 8008ca8:	f06f 0305 	mvn.w	r3, #5
 8008cac:	e01b      	b.n	8008ce6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d013      	beq.n	8008cdc <pbuf_copy+0x174>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	895a      	ldrh	r2, [r3, #10]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	891b      	ldrh	r3, [r3, #8]
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d10d      	bne.n	8008cdc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d009      	beq.n	8008cdc <pbuf_copy+0x174>
 8008cc8:	4b09      	ldr	r3, [pc, #36]	; (8008cf0 <pbuf_copy+0x188>)
 8008cca:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8008cce:	490e      	ldr	r1, [pc, #56]	; (8008d08 <pbuf_copy+0x1a0>)
 8008cd0:	4809      	ldr	r0, [pc, #36]	; (8008cf8 <pbuf_copy+0x190>)
 8008cd2:	f009 f829 	bl	8011d28 <iprintf>
 8008cd6:	f06f 0305 	mvn.w	r3, #5
 8008cda:	e004      	b.n	8008ce6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	f47f af61 	bne.w	8008ba6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8008ce4:	2300      	movs	r3, #0
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3718      	adds	r7, #24
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
 8008cee:	bf00      	nop
 8008cf0:	080142e0 	.word	0x080142e0
 8008cf4:	08014588 	.word	0x08014588
 8008cf8:	08014340 	.word	0x08014340
 8008cfc:	080145b8 	.word	0x080145b8
 8008d00:	080145d0 	.word	0x080145d0
 8008d04:	080145ec 	.word	0x080145ec
 8008d08:	080145fc 	.word	0x080145fc

08008d0c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b088      	sub	sp, #32
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	60f8      	str	r0, [r7, #12]
 8008d14:	60b9      	str	r1, [r7, #8]
 8008d16:	4611      	mov	r1, r2
 8008d18:	461a      	mov	r2, r3
 8008d1a:	460b      	mov	r3, r1
 8008d1c:	80fb      	strh	r3, [r7, #6]
 8008d1e:	4613      	mov	r3, r2
 8008d20:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8008d22:	2300      	movs	r3, #0
 8008d24:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8008d26:	2300      	movs	r3, #0
 8008d28:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d108      	bne.n	8008d42 <pbuf_copy_partial+0x36>
 8008d30:	4b2b      	ldr	r3, [pc, #172]	; (8008de0 <pbuf_copy_partial+0xd4>)
 8008d32:	f240 420a 	movw	r2, #1034	; 0x40a
 8008d36:	492b      	ldr	r1, [pc, #172]	; (8008de4 <pbuf_copy_partial+0xd8>)
 8008d38:	482b      	ldr	r0, [pc, #172]	; (8008de8 <pbuf_copy_partial+0xdc>)
 8008d3a:	f008 fff5 	bl	8011d28 <iprintf>
 8008d3e:	2300      	movs	r3, #0
 8008d40:	e04a      	b.n	8008dd8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d108      	bne.n	8008d5a <pbuf_copy_partial+0x4e>
 8008d48:	4b25      	ldr	r3, [pc, #148]	; (8008de0 <pbuf_copy_partial+0xd4>)
 8008d4a:	f240 420b 	movw	r2, #1035	; 0x40b
 8008d4e:	4927      	ldr	r1, [pc, #156]	; (8008dec <pbuf_copy_partial+0xe0>)
 8008d50:	4825      	ldr	r0, [pc, #148]	; (8008de8 <pbuf_copy_partial+0xdc>)
 8008d52:	f008 ffe9 	bl	8011d28 <iprintf>
 8008d56:	2300      	movs	r3, #0
 8008d58:	e03e      	b.n	8008dd8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	61fb      	str	r3, [r7, #28]
 8008d5e:	e034      	b.n	8008dca <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8008d60:	88bb      	ldrh	r3, [r7, #4]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d00a      	beq.n	8008d7c <pbuf_copy_partial+0x70>
 8008d66:	69fb      	ldr	r3, [r7, #28]
 8008d68:	895b      	ldrh	r3, [r3, #10]
 8008d6a:	88ba      	ldrh	r2, [r7, #4]
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d305      	bcc.n	8008d7c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8008d70:	69fb      	ldr	r3, [r7, #28]
 8008d72:	895b      	ldrh	r3, [r3, #10]
 8008d74:	88ba      	ldrh	r2, [r7, #4]
 8008d76:	1ad3      	subs	r3, r2, r3
 8008d78:	80bb      	strh	r3, [r7, #4]
 8008d7a:	e023      	b.n	8008dc4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8008d7c:	69fb      	ldr	r3, [r7, #28]
 8008d7e:	895a      	ldrh	r2, [r3, #10]
 8008d80:	88bb      	ldrh	r3, [r7, #4]
 8008d82:	1ad3      	subs	r3, r2, r3
 8008d84:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8008d86:	8b3a      	ldrh	r2, [r7, #24]
 8008d88:	88fb      	ldrh	r3, [r7, #6]
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d901      	bls.n	8008d92 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8008d8e:	88fb      	ldrh	r3, [r7, #6]
 8008d90:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8008d92:	8b7b      	ldrh	r3, [r7, #26]
 8008d94:	68ba      	ldr	r2, [r7, #8]
 8008d96:	18d0      	adds	r0, r2, r3
 8008d98:	69fb      	ldr	r3, [r7, #28]
 8008d9a:	685a      	ldr	r2, [r3, #4]
 8008d9c:	88bb      	ldrh	r3, [r7, #4]
 8008d9e:	4413      	add	r3, r2
 8008da0:	8b3a      	ldrh	r2, [r7, #24]
 8008da2:	4619      	mov	r1, r3
 8008da4:	f009 f921 	bl	8011fea <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8008da8:	8afa      	ldrh	r2, [r7, #22]
 8008daa:	8b3b      	ldrh	r3, [r7, #24]
 8008dac:	4413      	add	r3, r2
 8008dae:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8008db0:	8b7a      	ldrh	r2, [r7, #26]
 8008db2:	8b3b      	ldrh	r3, [r7, #24]
 8008db4:	4413      	add	r3, r2
 8008db6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8008db8:	88fa      	ldrh	r2, [r7, #6]
 8008dba:	8b3b      	ldrh	r3, [r7, #24]
 8008dbc:	1ad3      	subs	r3, r2, r3
 8008dbe:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008dc4:	69fb      	ldr	r3, [r7, #28]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	61fb      	str	r3, [r7, #28]
 8008dca:	88fb      	ldrh	r3, [r7, #6]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d002      	beq.n	8008dd6 <pbuf_copy_partial+0xca>
 8008dd0:	69fb      	ldr	r3, [r7, #28]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d1c4      	bne.n	8008d60 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8008dd6:	8afb      	ldrh	r3, [r7, #22]
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3720      	adds	r7, #32
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}
 8008de0:	080142e0 	.word	0x080142e0
 8008de4:	08014628 	.word	0x08014628
 8008de8:	08014340 	.word	0x08014340
 8008dec:	08014648 	.word	0x08014648

08008df0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	4603      	mov	r3, r0
 8008df8:	603a      	str	r2, [r7, #0]
 8008dfa:	71fb      	strb	r3, [r7, #7]
 8008dfc:	460b      	mov	r3, r1
 8008dfe:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	8919      	ldrh	r1, [r3, #8]
 8008e04:	88ba      	ldrh	r2, [r7, #4]
 8008e06:	79fb      	ldrb	r3, [r7, #7]
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f7ff fab1 	bl	8008370 <pbuf_alloc>
 8008e0e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d101      	bne.n	8008e1a <pbuf_clone+0x2a>
    return NULL;
 8008e16:	2300      	movs	r3, #0
 8008e18:	e011      	b.n	8008e3e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8008e1a:	6839      	ldr	r1, [r7, #0]
 8008e1c:	68f8      	ldr	r0, [r7, #12]
 8008e1e:	f7ff fea3 	bl	8008b68 <pbuf_copy>
 8008e22:	4603      	mov	r3, r0
 8008e24:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8008e26:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d006      	beq.n	8008e3c <pbuf_clone+0x4c>
 8008e2e:	4b06      	ldr	r3, [pc, #24]	; (8008e48 <pbuf_clone+0x58>)
 8008e30:	f240 5224 	movw	r2, #1316	; 0x524
 8008e34:	4905      	ldr	r1, [pc, #20]	; (8008e4c <pbuf_clone+0x5c>)
 8008e36:	4806      	ldr	r0, [pc, #24]	; (8008e50 <pbuf_clone+0x60>)
 8008e38:	f008 ff76 	bl	8011d28 <iprintf>
  return q;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3710      	adds	r7, #16
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	bf00      	nop
 8008e48:	080142e0 	.word	0x080142e0
 8008e4c:	08014754 	.word	0x08014754
 8008e50:	08014340 	.word	0x08014340

08008e54 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8008e58:	f008 f88c 	bl	8010f74 <rand>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8008e6a:	b29a      	uxth	r2, r3
 8008e6c:	4b01      	ldr	r3, [pc, #4]	; (8008e74 <tcp_init+0x20>)
 8008e6e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8008e70:	bf00      	nop
 8008e72:	bd80      	pop	{r7, pc}
 8008e74:	20000020 	.word	0x20000020

08008e78 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	7d1b      	ldrb	r3, [r3, #20]
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d105      	bne.n	8008e94 <tcp_free+0x1c>
 8008e88:	4b06      	ldr	r3, [pc, #24]	; (8008ea4 <tcp_free+0x2c>)
 8008e8a:	22d4      	movs	r2, #212	; 0xd4
 8008e8c:	4906      	ldr	r1, [pc, #24]	; (8008ea8 <tcp_free+0x30>)
 8008e8e:	4807      	ldr	r0, [pc, #28]	; (8008eac <tcp_free+0x34>)
 8008e90:	f008 ff4a 	bl	8011d28 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8008e94:	6879      	ldr	r1, [r7, #4]
 8008e96:	2001      	movs	r0, #1
 8008e98:	f7fe fed8 	bl	8007c4c <memp_free>
}
 8008e9c:	bf00      	nop
 8008e9e:	3708      	adds	r7, #8
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}
 8008ea4:	080147e0 	.word	0x080147e0
 8008ea8:	08014810 	.word	0x08014810
 8008eac:	08014824 	.word	0x08014824

08008eb0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b082      	sub	sp, #8
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	7d1b      	ldrb	r3, [r3, #20]
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d105      	bne.n	8008ecc <tcp_free_listen+0x1c>
 8008ec0:	4b06      	ldr	r3, [pc, #24]	; (8008edc <tcp_free_listen+0x2c>)
 8008ec2:	22df      	movs	r2, #223	; 0xdf
 8008ec4:	4906      	ldr	r1, [pc, #24]	; (8008ee0 <tcp_free_listen+0x30>)
 8008ec6:	4807      	ldr	r0, [pc, #28]	; (8008ee4 <tcp_free_listen+0x34>)
 8008ec8:	f008 ff2e 	bl	8011d28 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8008ecc:	6879      	ldr	r1, [r7, #4]
 8008ece:	2002      	movs	r0, #2
 8008ed0:	f7fe febc 	bl	8007c4c <memp_free>
}
 8008ed4:	bf00      	nop
 8008ed6:	3708      	adds	r7, #8
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}
 8008edc:	080147e0 	.word	0x080147e0
 8008ee0:	0801484c 	.word	0x0801484c
 8008ee4:	08014824 	.word	0x08014824

08008ee8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8008eec:	f000 fea2 	bl	8009c34 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8008ef0:	4b07      	ldr	r3, [pc, #28]	; (8008f10 <tcp_tmr+0x28>)
 8008ef2:	781b      	ldrb	r3, [r3, #0]
 8008ef4:	3301      	adds	r3, #1
 8008ef6:	b2da      	uxtb	r2, r3
 8008ef8:	4b05      	ldr	r3, [pc, #20]	; (8008f10 <tcp_tmr+0x28>)
 8008efa:	701a      	strb	r2, [r3, #0]
 8008efc:	4b04      	ldr	r3, [pc, #16]	; (8008f10 <tcp_tmr+0x28>)
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	f003 0301 	and.w	r3, r3, #1
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d001      	beq.n	8008f0c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8008f08:	f000 fb54 	bl	80095b4 <tcp_slowtmr>
  }
}
 8008f0c:	bf00      	nop
 8008f0e:	bd80      	pop	{r7, pc}
 8008f10:	2000a7e5 	.word	0x2000a7e5

08008f14 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d105      	bne.n	8008f30 <tcp_remove_listener+0x1c>
 8008f24:	4b0d      	ldr	r3, [pc, #52]	; (8008f5c <tcp_remove_listener+0x48>)
 8008f26:	22ff      	movs	r2, #255	; 0xff
 8008f28:	490d      	ldr	r1, [pc, #52]	; (8008f60 <tcp_remove_listener+0x4c>)
 8008f2a:	480e      	ldr	r0, [pc, #56]	; (8008f64 <tcp_remove_listener+0x50>)
 8008f2c:	f008 fefc 	bl	8011d28 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	60fb      	str	r3, [r7, #12]
 8008f34:	e00a      	b.n	8008f4c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f3a:	683a      	ldr	r2, [r7, #0]
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d102      	bne.n	8008f46 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2200      	movs	r2, #0
 8008f44:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	68db      	ldr	r3, [r3, #12]
 8008f4a:	60fb      	str	r3, [r7, #12]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d1f1      	bne.n	8008f36 <tcp_remove_listener+0x22>
    }
  }
}
 8008f52:	bf00      	nop
 8008f54:	bf00      	nop
 8008f56:	3710      	adds	r7, #16
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}
 8008f5c:	080147e0 	.word	0x080147e0
 8008f60:	08014868 	.word	0x08014868
 8008f64:	08014824 	.word	0x08014824

08008f68 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b084      	sub	sp, #16
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d106      	bne.n	8008f84 <tcp_listen_closed+0x1c>
 8008f76:	4b14      	ldr	r3, [pc, #80]	; (8008fc8 <tcp_listen_closed+0x60>)
 8008f78:	f240 1211 	movw	r2, #273	; 0x111
 8008f7c:	4913      	ldr	r1, [pc, #76]	; (8008fcc <tcp_listen_closed+0x64>)
 8008f7e:	4814      	ldr	r0, [pc, #80]	; (8008fd0 <tcp_listen_closed+0x68>)
 8008f80:	f008 fed2 	bl	8011d28 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	7d1b      	ldrb	r3, [r3, #20]
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d006      	beq.n	8008f9a <tcp_listen_closed+0x32>
 8008f8c:	4b0e      	ldr	r3, [pc, #56]	; (8008fc8 <tcp_listen_closed+0x60>)
 8008f8e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8008f92:	4910      	ldr	r1, [pc, #64]	; (8008fd4 <tcp_listen_closed+0x6c>)
 8008f94:	480e      	ldr	r0, [pc, #56]	; (8008fd0 <tcp_listen_closed+0x68>)
 8008f96:	f008 fec7 	bl	8011d28 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	60fb      	str	r3, [r7, #12]
 8008f9e:	e00b      	b.n	8008fb8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8008fa0:	4a0d      	ldr	r2, [pc, #52]	; (8008fd8 <tcp_listen_closed+0x70>)
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	6879      	ldr	r1, [r7, #4]
 8008fac:	4618      	mov	r0, r3
 8008fae:	f7ff ffb1 	bl	8008f14 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	60fb      	str	r3, [r7, #12]
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2b03      	cmp	r3, #3
 8008fbc:	d9f0      	bls.n	8008fa0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8008fbe:	bf00      	nop
 8008fc0:	bf00      	nop
 8008fc2:	3710      	adds	r7, #16
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}
 8008fc8:	080147e0 	.word	0x080147e0
 8008fcc:	08014890 	.word	0x08014890
 8008fd0:	08014824 	.word	0x08014824
 8008fd4:	0801489c 	.word	0x0801489c
 8008fd8:	080167c4 	.word	0x080167c4

08008fdc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8008fdc:	b5b0      	push	{r4, r5, r7, lr}
 8008fde:	b088      	sub	sp, #32
 8008fe0:	af04      	add	r7, sp, #16
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d106      	bne.n	8008ffc <tcp_close_shutdown+0x20>
 8008fee:	4b63      	ldr	r3, [pc, #396]	; (800917c <tcp_close_shutdown+0x1a0>)
 8008ff0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8008ff4:	4962      	ldr	r1, [pc, #392]	; (8009180 <tcp_close_shutdown+0x1a4>)
 8008ff6:	4863      	ldr	r0, [pc, #396]	; (8009184 <tcp_close_shutdown+0x1a8>)
 8008ff8:	f008 fe96 	bl	8011d28 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8008ffc:	78fb      	ldrb	r3, [r7, #3]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d066      	beq.n	80090d0 <tcp_close_shutdown+0xf4>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	7d1b      	ldrb	r3, [r3, #20]
 8009006:	2b04      	cmp	r3, #4
 8009008:	d003      	beq.n	8009012 <tcp_close_shutdown+0x36>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	7d1b      	ldrb	r3, [r3, #20]
 800900e:	2b07      	cmp	r3, #7
 8009010:	d15e      	bne.n	80090d0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009016:	2b00      	cmp	r3, #0
 8009018:	d104      	bne.n	8009024 <tcp_close_shutdown+0x48>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800901e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009022:	d055      	beq.n	80090d0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	8b5b      	ldrh	r3, [r3, #26]
 8009028:	f003 0310 	and.w	r3, r3, #16
 800902c:	2b00      	cmp	r3, #0
 800902e:	d106      	bne.n	800903e <tcp_close_shutdown+0x62>
 8009030:	4b52      	ldr	r3, [pc, #328]	; (800917c <tcp_close_shutdown+0x1a0>)
 8009032:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8009036:	4954      	ldr	r1, [pc, #336]	; (8009188 <tcp_close_shutdown+0x1ac>)
 8009038:	4852      	ldr	r0, [pc, #328]	; (8009184 <tcp_close_shutdown+0x1a8>)
 800903a:	f008 fe75 	bl	8011d28 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009046:	687d      	ldr	r5, [r7, #4]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	3304      	adds	r3, #4
 800904c:	687a      	ldr	r2, [r7, #4]
 800904e:	8ad2      	ldrh	r2, [r2, #22]
 8009050:	6879      	ldr	r1, [r7, #4]
 8009052:	8b09      	ldrh	r1, [r1, #24]
 8009054:	9102      	str	r1, [sp, #8]
 8009056:	9201      	str	r2, [sp, #4]
 8009058:	9300      	str	r3, [sp, #0]
 800905a:	462b      	mov	r3, r5
 800905c:	4622      	mov	r2, r4
 800905e:	4601      	mov	r1, r0
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f004 fe91 	bl	800dd88 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f001 f8c6 	bl	800a1f8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800906c:	4b47      	ldr	r3, [pc, #284]	; (800918c <tcp_close_shutdown+0x1b0>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	687a      	ldr	r2, [r7, #4]
 8009072:	429a      	cmp	r2, r3
 8009074:	d105      	bne.n	8009082 <tcp_close_shutdown+0xa6>
 8009076:	4b45      	ldr	r3, [pc, #276]	; (800918c <tcp_close_shutdown+0x1b0>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	68db      	ldr	r3, [r3, #12]
 800907c:	4a43      	ldr	r2, [pc, #268]	; (800918c <tcp_close_shutdown+0x1b0>)
 800907e:	6013      	str	r3, [r2, #0]
 8009080:	e013      	b.n	80090aa <tcp_close_shutdown+0xce>
 8009082:	4b42      	ldr	r3, [pc, #264]	; (800918c <tcp_close_shutdown+0x1b0>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	60fb      	str	r3, [r7, #12]
 8009088:	e00c      	b.n	80090a4 <tcp_close_shutdown+0xc8>
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	68db      	ldr	r3, [r3, #12]
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	429a      	cmp	r2, r3
 8009092:	d104      	bne.n	800909e <tcp_close_shutdown+0xc2>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	68da      	ldr	r2, [r3, #12]
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	60da      	str	r2, [r3, #12]
 800909c:	e005      	b.n	80090aa <tcp_close_shutdown+0xce>
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	68db      	ldr	r3, [r3, #12]
 80090a2:	60fb      	str	r3, [r7, #12]
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d1ef      	bne.n	800908a <tcp_close_shutdown+0xae>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	60da      	str	r2, [r3, #12]
 80090b0:	4b37      	ldr	r3, [pc, #220]	; (8009190 <tcp_close_shutdown+0x1b4>)
 80090b2:	2201      	movs	r2, #1
 80090b4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80090b6:	4b37      	ldr	r3, [pc, #220]	; (8009194 <tcp_close_shutdown+0x1b8>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	687a      	ldr	r2, [r7, #4]
 80090bc:	429a      	cmp	r2, r3
 80090be:	d102      	bne.n	80090c6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80090c0:	f003 fd5e 	bl	800cb80 <tcp_trigger_input_pcb_close>
 80090c4:	e002      	b.n	80090cc <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f7ff fed6 	bl	8008e78 <tcp_free>
      }
      return ERR_OK;
 80090cc:	2300      	movs	r3, #0
 80090ce:	e050      	b.n	8009172 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	7d1b      	ldrb	r3, [r3, #20]
 80090d4:	2b02      	cmp	r3, #2
 80090d6:	d03b      	beq.n	8009150 <tcp_close_shutdown+0x174>
 80090d8:	2b02      	cmp	r3, #2
 80090da:	dc44      	bgt.n	8009166 <tcp_close_shutdown+0x18a>
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d002      	beq.n	80090e6 <tcp_close_shutdown+0x10a>
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d02a      	beq.n	800913a <tcp_close_shutdown+0x15e>
 80090e4:	e03f      	b.n	8009166 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	8adb      	ldrh	r3, [r3, #22]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d021      	beq.n	8009132 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80090ee:	4b2a      	ldr	r3, [pc, #168]	; (8009198 <tcp_close_shutdown+0x1bc>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d105      	bne.n	8009104 <tcp_close_shutdown+0x128>
 80090f8:	4b27      	ldr	r3, [pc, #156]	; (8009198 <tcp_close_shutdown+0x1bc>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	68db      	ldr	r3, [r3, #12]
 80090fe:	4a26      	ldr	r2, [pc, #152]	; (8009198 <tcp_close_shutdown+0x1bc>)
 8009100:	6013      	str	r3, [r2, #0]
 8009102:	e013      	b.n	800912c <tcp_close_shutdown+0x150>
 8009104:	4b24      	ldr	r3, [pc, #144]	; (8009198 <tcp_close_shutdown+0x1bc>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	60bb      	str	r3, [r7, #8]
 800910a:	e00c      	b.n	8009126 <tcp_close_shutdown+0x14a>
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	68db      	ldr	r3, [r3, #12]
 8009110:	687a      	ldr	r2, [r7, #4]
 8009112:	429a      	cmp	r2, r3
 8009114:	d104      	bne.n	8009120 <tcp_close_shutdown+0x144>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	68da      	ldr	r2, [r3, #12]
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	60da      	str	r2, [r3, #12]
 800911e:	e005      	b.n	800912c <tcp_close_shutdown+0x150>
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	68db      	ldr	r3, [r3, #12]
 8009124:	60bb      	str	r3, [r7, #8]
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d1ef      	bne.n	800910c <tcp_close_shutdown+0x130>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2200      	movs	r2, #0
 8009130:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f7ff fea0 	bl	8008e78 <tcp_free>
      break;
 8009138:	e01a      	b.n	8009170 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f7ff ff14 	bl	8008f68 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8009140:	6879      	ldr	r1, [r7, #4]
 8009142:	4816      	ldr	r0, [pc, #88]	; (800919c <tcp_close_shutdown+0x1c0>)
 8009144:	f001 f8a8 	bl	800a298 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f7ff feb1 	bl	8008eb0 <tcp_free_listen>
      break;
 800914e:	e00f      	b.n	8009170 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009150:	6879      	ldr	r1, [r7, #4]
 8009152:	480e      	ldr	r0, [pc, #56]	; (800918c <tcp_close_shutdown+0x1b0>)
 8009154:	f001 f8a0 	bl	800a298 <tcp_pcb_remove>
 8009158:	4b0d      	ldr	r3, [pc, #52]	; (8009190 <tcp_close_shutdown+0x1b4>)
 800915a:	2201      	movs	r2, #1
 800915c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f7ff fe8a 	bl	8008e78 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8009164:	e004      	b.n	8009170 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 f81a 	bl	80091a0 <tcp_close_shutdown_fin>
 800916c:	4603      	mov	r3, r0
 800916e:	e000      	b.n	8009172 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8009170:	2300      	movs	r3, #0
}
 8009172:	4618      	mov	r0, r3
 8009174:	3710      	adds	r7, #16
 8009176:	46bd      	mov	sp, r7
 8009178:	bdb0      	pop	{r4, r5, r7, pc}
 800917a:	bf00      	nop
 800917c:	080147e0 	.word	0x080147e0
 8009180:	080148b4 	.word	0x080148b4
 8009184:	08014824 	.word	0x08014824
 8009188:	080148d4 	.word	0x080148d4
 800918c:	2000a7dc 	.word	0x2000a7dc
 8009190:	2000a7e4 	.word	0x2000a7e4
 8009194:	2000a81c 	.word	0x2000a81c
 8009198:	2000a7d4 	.word	0x2000a7d4
 800919c:	2000a7d8 	.word	0x2000a7d8

080091a0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b084      	sub	sp, #16
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d106      	bne.n	80091bc <tcp_close_shutdown_fin+0x1c>
 80091ae:	4b2e      	ldr	r3, [pc, #184]	; (8009268 <tcp_close_shutdown_fin+0xc8>)
 80091b0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80091b4:	492d      	ldr	r1, [pc, #180]	; (800926c <tcp_close_shutdown_fin+0xcc>)
 80091b6:	482e      	ldr	r0, [pc, #184]	; (8009270 <tcp_close_shutdown_fin+0xd0>)
 80091b8:	f008 fdb6 	bl	8011d28 <iprintf>

  switch (pcb->state) {
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	7d1b      	ldrb	r3, [r3, #20]
 80091c0:	2b07      	cmp	r3, #7
 80091c2:	d020      	beq.n	8009206 <tcp_close_shutdown_fin+0x66>
 80091c4:	2b07      	cmp	r3, #7
 80091c6:	dc2b      	bgt.n	8009220 <tcp_close_shutdown_fin+0x80>
 80091c8:	2b03      	cmp	r3, #3
 80091ca:	d002      	beq.n	80091d2 <tcp_close_shutdown_fin+0x32>
 80091cc:	2b04      	cmp	r3, #4
 80091ce:	d00d      	beq.n	80091ec <tcp_close_shutdown_fin+0x4c>
 80091d0:	e026      	b.n	8009220 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f003 fee6 	bl	800cfa4 <tcp_send_fin>
 80091d8:	4603      	mov	r3, r0
 80091da:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80091dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d11f      	bne.n	8009224 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2205      	movs	r2, #5
 80091e8:	751a      	strb	r2, [r3, #20]
      }
      break;
 80091ea:	e01b      	b.n	8009224 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f003 fed9 	bl	800cfa4 <tcp_send_fin>
 80091f2:	4603      	mov	r3, r0
 80091f4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80091f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d114      	bne.n	8009228 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2205      	movs	r2, #5
 8009202:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009204:	e010      	b.n	8009228 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f003 fecc 	bl	800cfa4 <tcp_send_fin>
 800920c:	4603      	mov	r3, r0
 800920e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009210:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d109      	bne.n	800922c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2209      	movs	r2, #9
 800921c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800921e:	e005      	b.n	800922c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8009220:	2300      	movs	r3, #0
 8009222:	e01c      	b.n	800925e <tcp_close_shutdown_fin+0xbe>
      break;
 8009224:	bf00      	nop
 8009226:	e002      	b.n	800922e <tcp_close_shutdown_fin+0x8e>
      break;
 8009228:	bf00      	nop
 800922a:	e000      	b.n	800922e <tcp_close_shutdown_fin+0x8e>
      break;
 800922c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800922e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d103      	bne.n	800923e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f003 fff2 	bl	800d220 <tcp_output>
 800923c:	e00d      	b.n	800925a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800923e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009242:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009246:	d108      	bne.n	800925a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	8b5b      	ldrh	r3, [r3, #26]
 800924c:	f043 0308 	orr.w	r3, r3, #8
 8009250:	b29a      	uxth	r2, r3
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8009256:	2300      	movs	r3, #0
 8009258:	e001      	b.n	800925e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800925a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800925e:	4618      	mov	r0, r3
 8009260:	3710      	adds	r7, #16
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop
 8009268:	080147e0 	.word	0x080147e0
 800926c:	08014890 	.word	0x08014890
 8009270:	08014824 	.word	0x08014824

08009274 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b082      	sub	sp, #8
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d109      	bne.n	8009296 <tcp_close+0x22>
 8009282:	4b0f      	ldr	r3, [pc, #60]	; (80092c0 <tcp_close+0x4c>)
 8009284:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8009288:	490e      	ldr	r1, [pc, #56]	; (80092c4 <tcp_close+0x50>)
 800928a:	480f      	ldr	r0, [pc, #60]	; (80092c8 <tcp_close+0x54>)
 800928c:	f008 fd4c 	bl	8011d28 <iprintf>
 8009290:	f06f 030f 	mvn.w	r3, #15
 8009294:	e00f      	b.n	80092b6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	7d1b      	ldrb	r3, [r3, #20]
 800929a:	2b01      	cmp	r3, #1
 800929c:	d006      	beq.n	80092ac <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	8b5b      	ldrh	r3, [r3, #26]
 80092a2:	f043 0310 	orr.w	r3, r3, #16
 80092a6:	b29a      	uxth	r2, r3
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80092ac:	2101      	movs	r1, #1
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f7ff fe94 	bl	8008fdc <tcp_close_shutdown>
 80092b4:	4603      	mov	r3, r0
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3708      	adds	r7, #8
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
 80092be:	bf00      	nop
 80092c0:	080147e0 	.word	0x080147e0
 80092c4:	080148f0 	.word	0x080148f0
 80092c8:	08014824 	.word	0x08014824

080092cc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b08e      	sub	sp, #56	; 0x38
 80092d0:	af04      	add	r7, sp, #16
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d107      	bne.n	80092ec <tcp_abandon+0x20>
 80092dc:	4b52      	ldr	r3, [pc, #328]	; (8009428 <tcp_abandon+0x15c>)
 80092de:	f240 223d 	movw	r2, #573	; 0x23d
 80092e2:	4952      	ldr	r1, [pc, #328]	; (800942c <tcp_abandon+0x160>)
 80092e4:	4852      	ldr	r0, [pc, #328]	; (8009430 <tcp_abandon+0x164>)
 80092e6:	f008 fd1f 	bl	8011d28 <iprintf>
 80092ea:	e099      	b.n	8009420 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	7d1b      	ldrb	r3, [r3, #20]
 80092f0:	2b01      	cmp	r3, #1
 80092f2:	d106      	bne.n	8009302 <tcp_abandon+0x36>
 80092f4:	4b4c      	ldr	r3, [pc, #304]	; (8009428 <tcp_abandon+0x15c>)
 80092f6:	f44f 7210 	mov.w	r2, #576	; 0x240
 80092fa:	494e      	ldr	r1, [pc, #312]	; (8009434 <tcp_abandon+0x168>)
 80092fc:	484c      	ldr	r0, [pc, #304]	; (8009430 <tcp_abandon+0x164>)
 80092fe:	f008 fd13 	bl	8011d28 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	7d1b      	ldrb	r3, [r3, #20]
 8009306:	2b0a      	cmp	r3, #10
 8009308:	d107      	bne.n	800931a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800930a:	6879      	ldr	r1, [r7, #4]
 800930c:	484a      	ldr	r0, [pc, #296]	; (8009438 <tcp_abandon+0x16c>)
 800930e:	f000 ffc3 	bl	800a298 <tcp_pcb_remove>
    tcp_free(pcb);
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f7ff fdb0 	bl	8008e78 <tcp_free>
 8009318:	e082      	b.n	8009420 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800931a:	2300      	movs	r3, #0
 800931c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800931e:	2300      	movs	r3, #0
 8009320:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009326:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800932c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009334:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	691b      	ldr	r3, [r3, #16]
 800933a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	7d1b      	ldrb	r3, [r3, #20]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d126      	bne.n	8009392 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	8adb      	ldrh	r3, [r3, #22]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d02e      	beq.n	80093aa <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800934c:	4b3b      	ldr	r3, [pc, #236]	; (800943c <tcp_abandon+0x170>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	429a      	cmp	r2, r3
 8009354:	d105      	bne.n	8009362 <tcp_abandon+0x96>
 8009356:	4b39      	ldr	r3, [pc, #228]	; (800943c <tcp_abandon+0x170>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	68db      	ldr	r3, [r3, #12]
 800935c:	4a37      	ldr	r2, [pc, #220]	; (800943c <tcp_abandon+0x170>)
 800935e:	6013      	str	r3, [r2, #0]
 8009360:	e013      	b.n	800938a <tcp_abandon+0xbe>
 8009362:	4b36      	ldr	r3, [pc, #216]	; (800943c <tcp_abandon+0x170>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	61fb      	str	r3, [r7, #28]
 8009368:	e00c      	b.n	8009384 <tcp_abandon+0xb8>
 800936a:	69fb      	ldr	r3, [r7, #28]
 800936c:	68db      	ldr	r3, [r3, #12]
 800936e:	687a      	ldr	r2, [r7, #4]
 8009370:	429a      	cmp	r2, r3
 8009372:	d104      	bne.n	800937e <tcp_abandon+0xb2>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	68da      	ldr	r2, [r3, #12]
 8009378:	69fb      	ldr	r3, [r7, #28]
 800937a:	60da      	str	r2, [r3, #12]
 800937c:	e005      	b.n	800938a <tcp_abandon+0xbe>
 800937e:	69fb      	ldr	r3, [r7, #28]
 8009380:	68db      	ldr	r3, [r3, #12]
 8009382:	61fb      	str	r3, [r7, #28]
 8009384:	69fb      	ldr	r3, [r7, #28]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d1ef      	bne.n	800936a <tcp_abandon+0x9e>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2200      	movs	r2, #0
 800938e:	60da      	str	r2, [r3, #12]
 8009390:	e00b      	b.n	80093aa <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	8adb      	ldrh	r3, [r3, #22]
 800939a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800939c:	6879      	ldr	r1, [r7, #4]
 800939e:	4828      	ldr	r0, [pc, #160]	; (8009440 <tcp_abandon+0x174>)
 80093a0:	f000 ff7a 	bl	800a298 <tcp_pcb_remove>
 80093a4:	4b27      	ldr	r3, [pc, #156]	; (8009444 <tcp_abandon+0x178>)
 80093a6:	2201      	movs	r2, #1
 80093a8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d004      	beq.n	80093bc <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093b6:	4618      	mov	r0, r3
 80093b8:	f000 fd1c 	bl	8009df4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d004      	beq.n	80093ce <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093c8:	4618      	mov	r0, r3
 80093ca:	f000 fd13 	bl	8009df4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d004      	beq.n	80093e0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093da:	4618      	mov	r0, r3
 80093dc:	f000 fd0a 	bl	8009df4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80093e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d00e      	beq.n	8009404 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80093e6:	6879      	ldr	r1, [r7, #4]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	3304      	adds	r3, #4
 80093ec:	687a      	ldr	r2, [r7, #4]
 80093ee:	8b12      	ldrh	r2, [r2, #24]
 80093f0:	9202      	str	r2, [sp, #8]
 80093f2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80093f4:	9201      	str	r2, [sp, #4]
 80093f6:	9300      	str	r3, [sp, #0]
 80093f8:	460b      	mov	r3, r1
 80093fa:	697a      	ldr	r2, [r7, #20]
 80093fc:	69b9      	ldr	r1, [r7, #24]
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f004 fcc2 	bl	800dd88 <tcp_rst>
    }
    last_state = pcb->state;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	7d1b      	ldrb	r3, [r3, #20]
 8009408:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f7ff fd34 	bl	8008e78 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d004      	beq.n	8009420 <tcp_abandon+0x154>
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	f06f 010c 	mvn.w	r1, #12
 800941c:	68f8      	ldr	r0, [r7, #12]
 800941e:	4798      	blx	r3
  }
}
 8009420:	3728      	adds	r7, #40	; 0x28
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	080147e0 	.word	0x080147e0
 800942c:	08014924 	.word	0x08014924
 8009430:	08014824 	.word	0x08014824
 8009434:	08014940 	.word	0x08014940
 8009438:	2000a7e0 	.word	0x2000a7e0
 800943c:	2000a7d4 	.word	0x2000a7d4
 8009440:	2000a7dc 	.word	0x2000a7dc
 8009444:	2000a7e4 	.word	0x2000a7e4

08009448 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b082      	sub	sp, #8
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8009450:	2101      	movs	r1, #1
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f7ff ff3a 	bl	80092cc <tcp_abandon>
}
 8009458:	bf00      	nop
 800945a:	3708      	adds	r7, #8
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}

08009460 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b084      	sub	sp, #16
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d106      	bne.n	800947c <tcp_update_rcv_ann_wnd+0x1c>
 800946e:	4b25      	ldr	r3, [pc, #148]	; (8009504 <tcp_update_rcv_ann_wnd+0xa4>)
 8009470:	f240 32a6 	movw	r2, #934	; 0x3a6
 8009474:	4924      	ldr	r1, [pc, #144]	; (8009508 <tcp_update_rcv_ann_wnd+0xa8>)
 8009476:	4825      	ldr	r0, [pc, #148]	; (800950c <tcp_update_rcv_ann_wnd+0xac>)
 8009478:	f008 fc56 	bl	8011d28 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009480:	687a      	ldr	r2, [r7, #4]
 8009482:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8009484:	4413      	add	r3, r2
 8009486:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800948c:	687a      	ldr	r2, [r7, #4]
 800948e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8009490:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8009494:	bf28      	it	cs
 8009496:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800949a:	b292      	uxth	r2, r2
 800949c:	4413      	add	r3, r2
 800949e:	68fa      	ldr	r2, [r7, #12]
 80094a0:	1ad3      	subs	r3, r2, r3
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	db08      	blt.n	80094b8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b2:	68fa      	ldr	r2, [r7, #12]
 80094b4:	1ad3      	subs	r3, r2, r3
 80094b6:	e020      	b.n	80094fa <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c0:	1ad3      	subs	r3, r2, r3
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	dd03      	ble.n	80094ce <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2200      	movs	r2, #0
 80094ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80094cc:	e014      	b.n	80094f8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d6:	1ad3      	subs	r3, r2, r3
 80094d8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094e0:	d306      	bcc.n	80094f0 <tcp_update_rcv_ann_wnd+0x90>
 80094e2:	4b08      	ldr	r3, [pc, #32]	; (8009504 <tcp_update_rcv_ann_wnd+0xa4>)
 80094e4:	f240 32b6 	movw	r2, #950	; 0x3b6
 80094e8:	4909      	ldr	r1, [pc, #36]	; (8009510 <tcp_update_rcv_ann_wnd+0xb0>)
 80094ea:	4808      	ldr	r0, [pc, #32]	; (800950c <tcp_update_rcv_ann_wnd+0xac>)
 80094ec:	f008 fc1c 	bl	8011d28 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	b29a      	uxth	r2, r3
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80094f8:	2300      	movs	r3, #0
  }
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3710      	adds	r7, #16
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
 8009502:	bf00      	nop
 8009504:	080147e0 	.word	0x080147e0
 8009508:	08014a3c 	.word	0x08014a3c
 800950c:	08014824 	.word	0x08014824
 8009510:	08014a60 	.word	0x08014a60

08009514 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b084      	sub	sp, #16
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	460b      	mov	r3, r1
 800951e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d107      	bne.n	8009536 <tcp_recved+0x22>
 8009526:	4b1f      	ldr	r3, [pc, #124]	; (80095a4 <tcp_recved+0x90>)
 8009528:	f240 32cf 	movw	r2, #975	; 0x3cf
 800952c:	491e      	ldr	r1, [pc, #120]	; (80095a8 <tcp_recved+0x94>)
 800952e:	481f      	ldr	r0, [pc, #124]	; (80095ac <tcp_recved+0x98>)
 8009530:	f008 fbfa 	bl	8011d28 <iprintf>
 8009534:	e032      	b.n	800959c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	7d1b      	ldrb	r3, [r3, #20]
 800953a:	2b01      	cmp	r3, #1
 800953c:	d106      	bne.n	800954c <tcp_recved+0x38>
 800953e:	4b19      	ldr	r3, [pc, #100]	; (80095a4 <tcp_recved+0x90>)
 8009540:	f240 32d2 	movw	r2, #978	; 0x3d2
 8009544:	491a      	ldr	r1, [pc, #104]	; (80095b0 <tcp_recved+0x9c>)
 8009546:	4819      	ldr	r0, [pc, #100]	; (80095ac <tcp_recved+0x98>)
 8009548:	f008 fbee 	bl	8011d28 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009550:	887b      	ldrh	r3, [r7, #2]
 8009552:	4413      	add	r3, r2
 8009554:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8009556:	89fb      	ldrh	r3, [r7, #14]
 8009558:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800955c:	d804      	bhi.n	8009568 <tcp_recved+0x54>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009562:	89fa      	ldrh	r2, [r7, #14]
 8009564:	429a      	cmp	r2, r3
 8009566:	d204      	bcs.n	8009572 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800956e:	851a      	strh	r2, [r3, #40]	; 0x28
 8009570:	e002      	b.n	8009578 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	89fa      	ldrh	r2, [r7, #14]
 8009576:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f7ff ff71 	bl	8009460 <tcp_update_rcv_ann_wnd>
 800957e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009586:	d309      	bcc.n	800959c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	8b5b      	ldrh	r3, [r3, #26]
 800958c:	f043 0302 	orr.w	r3, r3, #2
 8009590:	b29a      	uxth	r2, r3
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f003 fe42 	bl	800d220 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800959c:	3710      	adds	r7, #16
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	bf00      	nop
 80095a4:	080147e0 	.word	0x080147e0
 80095a8:	08014a7c 	.word	0x08014a7c
 80095ac:	08014824 	.word	0x08014824
 80095b0:	08014a94 	.word	0x08014a94

080095b4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80095b4:	b5b0      	push	{r4, r5, r7, lr}
 80095b6:	b090      	sub	sp, #64	; 0x40
 80095b8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80095ba:	2300      	movs	r3, #0
 80095bc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80095c0:	4b94      	ldr	r3, [pc, #592]	; (8009814 <tcp_slowtmr+0x260>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	3301      	adds	r3, #1
 80095c6:	4a93      	ldr	r2, [pc, #588]	; (8009814 <tcp_slowtmr+0x260>)
 80095c8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80095ca:	4b93      	ldr	r3, [pc, #588]	; (8009818 <tcp_slowtmr+0x264>)
 80095cc:	781b      	ldrb	r3, [r3, #0]
 80095ce:	3301      	adds	r3, #1
 80095d0:	b2da      	uxtb	r2, r3
 80095d2:	4b91      	ldr	r3, [pc, #580]	; (8009818 <tcp_slowtmr+0x264>)
 80095d4:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80095d6:	2300      	movs	r3, #0
 80095d8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80095da:	4b90      	ldr	r3, [pc, #576]	; (800981c <tcp_slowtmr+0x268>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80095e0:	e29d      	b.n	8009b1e <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80095e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095e4:	7d1b      	ldrb	r3, [r3, #20]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d106      	bne.n	80095f8 <tcp_slowtmr+0x44>
 80095ea:	4b8d      	ldr	r3, [pc, #564]	; (8009820 <tcp_slowtmr+0x26c>)
 80095ec:	f240 42be 	movw	r2, #1214	; 0x4be
 80095f0:	498c      	ldr	r1, [pc, #560]	; (8009824 <tcp_slowtmr+0x270>)
 80095f2:	488d      	ldr	r0, [pc, #564]	; (8009828 <tcp_slowtmr+0x274>)
 80095f4:	f008 fb98 	bl	8011d28 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80095f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095fa:	7d1b      	ldrb	r3, [r3, #20]
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	d106      	bne.n	800960e <tcp_slowtmr+0x5a>
 8009600:	4b87      	ldr	r3, [pc, #540]	; (8009820 <tcp_slowtmr+0x26c>)
 8009602:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8009606:	4989      	ldr	r1, [pc, #548]	; (800982c <tcp_slowtmr+0x278>)
 8009608:	4887      	ldr	r0, [pc, #540]	; (8009828 <tcp_slowtmr+0x274>)
 800960a:	f008 fb8d 	bl	8011d28 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800960e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009610:	7d1b      	ldrb	r3, [r3, #20]
 8009612:	2b0a      	cmp	r3, #10
 8009614:	d106      	bne.n	8009624 <tcp_slowtmr+0x70>
 8009616:	4b82      	ldr	r3, [pc, #520]	; (8009820 <tcp_slowtmr+0x26c>)
 8009618:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800961c:	4984      	ldr	r1, [pc, #528]	; (8009830 <tcp_slowtmr+0x27c>)
 800961e:	4882      	ldr	r0, [pc, #520]	; (8009828 <tcp_slowtmr+0x274>)
 8009620:	f008 fb82 	bl	8011d28 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8009624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009626:	7f9a      	ldrb	r2, [r3, #30]
 8009628:	4b7b      	ldr	r3, [pc, #492]	; (8009818 <tcp_slowtmr+0x264>)
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	429a      	cmp	r2, r3
 800962e:	d105      	bne.n	800963c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8009630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009632:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009636:	68db      	ldr	r3, [r3, #12]
 8009638:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800963a:	e270      	b.n	8009b1e <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800963c:	4b76      	ldr	r3, [pc, #472]	; (8009818 <tcp_slowtmr+0x264>)
 800963e:	781a      	ldrb	r2, [r3, #0]
 8009640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009642:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8009644:	2300      	movs	r3, #0
 8009646:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800964a:	2300      	movs	r3, #0
 800964c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009652:	7d1b      	ldrb	r3, [r3, #20]
 8009654:	2b02      	cmp	r3, #2
 8009656:	d10a      	bne.n	800966e <tcp_slowtmr+0xba>
 8009658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800965a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800965e:	2b05      	cmp	r3, #5
 8009660:	d905      	bls.n	800966e <tcp_slowtmr+0xba>
      ++pcb_remove;
 8009662:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009666:	3301      	adds	r3, #1
 8009668:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800966c:	e11e      	b.n	80098ac <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800966e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009670:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009674:	2b0b      	cmp	r3, #11
 8009676:	d905      	bls.n	8009684 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8009678:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800967c:	3301      	adds	r3, #1
 800967e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009682:	e113      	b.n	80098ac <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8009684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009686:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800968a:	2b00      	cmp	r3, #0
 800968c:	d075      	beq.n	800977a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800968e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009692:	2b00      	cmp	r3, #0
 8009694:	d006      	beq.n	80096a4 <tcp_slowtmr+0xf0>
 8009696:	4b62      	ldr	r3, [pc, #392]	; (8009820 <tcp_slowtmr+0x26c>)
 8009698:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800969c:	4965      	ldr	r1, [pc, #404]	; (8009834 <tcp_slowtmr+0x280>)
 800969e:	4862      	ldr	r0, [pc, #392]	; (8009828 <tcp_slowtmr+0x274>)
 80096a0:	f008 fb42 	bl	8011d28 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80096a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d106      	bne.n	80096ba <tcp_slowtmr+0x106>
 80096ac:	4b5c      	ldr	r3, [pc, #368]	; (8009820 <tcp_slowtmr+0x26c>)
 80096ae:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80096b2:	4961      	ldr	r1, [pc, #388]	; (8009838 <tcp_slowtmr+0x284>)
 80096b4:	485c      	ldr	r0, [pc, #368]	; (8009828 <tcp_slowtmr+0x274>)
 80096b6:	f008 fb37 	bl	8011d28 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80096ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096bc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80096c0:	2b0b      	cmp	r3, #11
 80096c2:	d905      	bls.n	80096d0 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80096c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096c8:	3301      	adds	r3, #1
 80096ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80096ce:	e0ed      	b.n	80098ac <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80096d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096d2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80096d6:	3b01      	subs	r3, #1
 80096d8:	4a58      	ldr	r2, [pc, #352]	; (800983c <tcp_slowtmr+0x288>)
 80096da:	5cd3      	ldrb	r3, [r2, r3]
 80096dc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80096de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80096e4:	7c7a      	ldrb	r2, [r7, #17]
 80096e6:	429a      	cmp	r2, r3
 80096e8:	d907      	bls.n	80096fa <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80096ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ec:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80096f0:	3301      	adds	r3, #1
 80096f2:	b2da      	uxtb	r2, r3
 80096f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096f6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80096fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096fc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009700:	7c7a      	ldrb	r2, [r7, #17]
 8009702:	429a      	cmp	r2, r3
 8009704:	f200 80d2 	bhi.w	80098ac <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8009708:	2301      	movs	r3, #1
 800970a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800970c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800970e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009712:	2b00      	cmp	r3, #0
 8009714:	d108      	bne.n	8009728 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8009716:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009718:	f004 fc2a 	bl	800df70 <tcp_zero_window_probe>
 800971c:	4603      	mov	r3, r0
 800971e:	2b00      	cmp	r3, #0
 8009720:	d014      	beq.n	800974c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8009722:	2300      	movs	r3, #0
 8009724:	623b      	str	r3, [r7, #32]
 8009726:	e011      	b.n	800974c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8009728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800972a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800972e:	4619      	mov	r1, r3
 8009730:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009732:	f003 faef 	bl	800cd14 <tcp_split_unsent_seg>
 8009736:	4603      	mov	r3, r0
 8009738:	2b00      	cmp	r3, #0
 800973a:	d107      	bne.n	800974c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800973c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800973e:	f003 fd6f 	bl	800d220 <tcp_output>
 8009742:	4603      	mov	r3, r0
 8009744:	2b00      	cmp	r3, #0
 8009746:	d101      	bne.n	800974c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8009748:	2300      	movs	r3, #0
 800974a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800974c:	6a3b      	ldr	r3, [r7, #32]
 800974e:	2b00      	cmp	r3, #0
 8009750:	f000 80ac 	beq.w	80098ac <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8009754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009756:	2200      	movs	r2, #0
 8009758:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800975c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800975e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009762:	2b06      	cmp	r3, #6
 8009764:	f200 80a2 	bhi.w	80098ac <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8009768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800976a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800976e:	3301      	adds	r3, #1
 8009770:	b2da      	uxtb	r2, r3
 8009772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009774:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8009778:	e098      	b.n	80098ac <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800977a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800977c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009780:	2b00      	cmp	r3, #0
 8009782:	db0f      	blt.n	80097a4 <tcp_slowtmr+0x1f0>
 8009784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009786:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800978a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800978e:	4293      	cmp	r3, r2
 8009790:	d008      	beq.n	80097a4 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8009792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009794:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009798:	b29b      	uxth	r3, r3
 800979a:	3301      	adds	r3, #1
 800979c:	b29b      	uxth	r3, r3
 800979e:	b21a      	sxth	r2, r3
 80097a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097a2:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80097a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097a6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80097aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ac:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80097b0:	429a      	cmp	r2, r3
 80097b2:	db7b      	blt.n	80098ac <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80097b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80097b6:	f004 f827 	bl	800d808 <tcp_rexmit_rto_prepare>
 80097ba:	4603      	mov	r3, r0
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d007      	beq.n	80097d0 <tcp_slowtmr+0x21c>
 80097c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d171      	bne.n	80098ac <tcp_slowtmr+0x2f8>
 80097c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d06d      	beq.n	80098ac <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80097d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097d2:	7d1b      	ldrb	r3, [r3, #20]
 80097d4:	2b02      	cmp	r3, #2
 80097d6:	d03a      	beq.n	800984e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80097d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80097de:	2b0c      	cmp	r3, #12
 80097e0:	bf28      	it	cs
 80097e2:	230c      	movcs	r3, #12
 80097e4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80097e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097e8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80097ec:	10db      	asrs	r3, r3, #3
 80097ee:	b21b      	sxth	r3, r3
 80097f0:	461a      	mov	r2, r3
 80097f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097f4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80097f8:	4413      	add	r3, r2
 80097fa:	7efa      	ldrb	r2, [r7, #27]
 80097fc:	4910      	ldr	r1, [pc, #64]	; (8009840 <tcp_slowtmr+0x28c>)
 80097fe:	5c8a      	ldrb	r2, [r1, r2]
 8009800:	4093      	lsls	r3, r2
 8009802:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800980a:	4293      	cmp	r3, r2
 800980c:	dc1a      	bgt.n	8009844 <tcp_slowtmr+0x290>
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	b21a      	sxth	r2, r3
 8009812:	e019      	b.n	8009848 <tcp_slowtmr+0x294>
 8009814:	2000a7d0 	.word	0x2000a7d0
 8009818:	2000a7e6 	.word	0x2000a7e6
 800981c:	2000a7dc 	.word	0x2000a7dc
 8009820:	080147e0 	.word	0x080147e0
 8009824:	08014b24 	.word	0x08014b24
 8009828:	08014824 	.word	0x08014824
 800982c:	08014b50 	.word	0x08014b50
 8009830:	08014b7c 	.word	0x08014b7c
 8009834:	08014bac 	.word	0x08014bac
 8009838:	08014be0 	.word	0x08014be0
 800983c:	080167bc 	.word	0x080167bc
 8009840:	080167ac 	.word	0x080167ac
 8009844:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8009848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800984a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800984e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009850:	2200      	movs	r2, #0
 8009852:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8009854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009856:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800985a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800985c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009860:	4293      	cmp	r3, r2
 8009862:	bf28      	it	cs
 8009864:	4613      	movcs	r3, r2
 8009866:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8009868:	8a7b      	ldrh	r3, [r7, #18]
 800986a:	085b      	lsrs	r3, r3, #1
 800986c:	b29a      	uxth	r2, r3
 800986e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009870:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009876:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800987a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800987c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800987e:	005b      	lsls	r3, r3, #1
 8009880:	b29b      	uxth	r3, r3
 8009882:	429a      	cmp	r2, r3
 8009884:	d206      	bcs.n	8009894 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8009886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009888:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800988a:	005b      	lsls	r3, r3, #1
 800988c:	b29a      	uxth	r2, r3
 800988e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009890:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8009894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009896:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8009898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800989a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800989e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098a0:	2200      	movs	r2, #0
 80098a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80098a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80098a8:	f004 f81e 	bl	800d8e8 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80098ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ae:	7d1b      	ldrb	r3, [r3, #20]
 80098b0:	2b06      	cmp	r3, #6
 80098b2:	d111      	bne.n	80098d8 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80098b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b6:	8b5b      	ldrh	r3, [r3, #26]
 80098b8:	f003 0310 	and.w	r3, r3, #16
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d00b      	beq.n	80098d8 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80098c0:	4b9c      	ldr	r3, [pc, #624]	; (8009b34 <tcp_slowtmr+0x580>)
 80098c2:	681a      	ldr	r2, [r3, #0]
 80098c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098c6:	6a1b      	ldr	r3, [r3, #32]
 80098c8:	1ad3      	subs	r3, r2, r3
 80098ca:	2b28      	cmp	r3, #40	; 0x28
 80098cc:	d904      	bls.n	80098d8 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80098ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098d2:	3301      	adds	r3, #1
 80098d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80098d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098da:	7a5b      	ldrb	r3, [r3, #9]
 80098dc:	f003 0308 	and.w	r3, r3, #8
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d04a      	beq.n	800997a <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 80098e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098e6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80098e8:	2b04      	cmp	r3, #4
 80098ea:	d003      	beq.n	80098f4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80098ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ee:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80098f0:	2b07      	cmp	r3, #7
 80098f2:	d142      	bne.n	800997a <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80098f4:	4b8f      	ldr	r3, [pc, #572]	; (8009b34 <tcp_slowtmr+0x580>)
 80098f6:	681a      	ldr	r2, [r3, #0]
 80098f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098fa:	6a1b      	ldr	r3, [r3, #32]
 80098fc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80098fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009900:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8009904:	4b8c      	ldr	r3, [pc, #560]	; (8009b38 <tcp_slowtmr+0x584>)
 8009906:	440b      	add	r3, r1
 8009908:	498c      	ldr	r1, [pc, #560]	; (8009b3c <tcp_slowtmr+0x588>)
 800990a:	fba1 1303 	umull	r1, r3, r1, r3
 800990e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009910:	429a      	cmp	r2, r3
 8009912:	d90a      	bls.n	800992a <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8009914:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009918:	3301      	adds	r3, #1
 800991a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800991e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009922:	3301      	adds	r3, #1
 8009924:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009928:	e027      	b.n	800997a <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800992a:	4b82      	ldr	r3, [pc, #520]	; (8009b34 <tcp_slowtmr+0x580>)
 800992c:	681a      	ldr	r2, [r3, #0]
 800992e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009930:	6a1b      	ldr	r3, [r3, #32]
 8009932:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8009934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009936:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800993a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800993c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8009940:	4618      	mov	r0, r3
 8009942:	4b7f      	ldr	r3, [pc, #508]	; (8009b40 <tcp_slowtmr+0x58c>)
 8009944:	fb00 f303 	mul.w	r3, r0, r3
 8009948:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800994a:	497c      	ldr	r1, [pc, #496]	; (8009b3c <tcp_slowtmr+0x588>)
 800994c:	fba1 1303 	umull	r1, r3, r1, r3
 8009950:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009952:	429a      	cmp	r2, r3
 8009954:	d911      	bls.n	800997a <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8009956:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009958:	f004 faca 	bl	800def0 <tcp_keepalive>
 800995c:	4603      	mov	r3, r0
 800995e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8009962:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8009966:	2b00      	cmp	r3, #0
 8009968:	d107      	bne.n	800997a <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800996a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800996c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8009970:	3301      	adds	r3, #1
 8009972:	b2da      	uxtb	r2, r3
 8009974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009976:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800997a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800997c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800997e:	2b00      	cmp	r3, #0
 8009980:	d011      	beq.n	80099a6 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8009982:	4b6c      	ldr	r3, [pc, #432]	; (8009b34 <tcp_slowtmr+0x580>)
 8009984:	681a      	ldr	r2, [r3, #0]
 8009986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009988:	6a1b      	ldr	r3, [r3, #32]
 800998a:	1ad2      	subs	r2, r2, r3
 800998c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800998e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8009992:	4619      	mov	r1, r3
 8009994:	460b      	mov	r3, r1
 8009996:	005b      	lsls	r3, r3, #1
 8009998:	440b      	add	r3, r1
 800999a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800999c:	429a      	cmp	r2, r3
 800999e:	d302      	bcc.n	80099a6 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80099a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80099a2:	f000 fddd 	bl	800a560 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80099a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099a8:	7d1b      	ldrb	r3, [r3, #20]
 80099aa:	2b03      	cmp	r3, #3
 80099ac:	d10b      	bne.n	80099c6 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80099ae:	4b61      	ldr	r3, [pc, #388]	; (8009b34 <tcp_slowtmr+0x580>)
 80099b0:	681a      	ldr	r2, [r3, #0]
 80099b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099b4:	6a1b      	ldr	r3, [r3, #32]
 80099b6:	1ad3      	subs	r3, r2, r3
 80099b8:	2b28      	cmp	r3, #40	; 0x28
 80099ba:	d904      	bls.n	80099c6 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80099bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099c0:	3301      	adds	r3, #1
 80099c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80099c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099c8:	7d1b      	ldrb	r3, [r3, #20]
 80099ca:	2b09      	cmp	r3, #9
 80099cc:	d10b      	bne.n	80099e6 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80099ce:	4b59      	ldr	r3, [pc, #356]	; (8009b34 <tcp_slowtmr+0x580>)
 80099d0:	681a      	ldr	r2, [r3, #0]
 80099d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099d4:	6a1b      	ldr	r3, [r3, #32]
 80099d6:	1ad3      	subs	r3, r2, r3
 80099d8:	2bf0      	cmp	r3, #240	; 0xf0
 80099da:	d904      	bls.n	80099e6 <tcp_slowtmr+0x432>
        ++pcb_remove;
 80099dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099e0:	3301      	adds	r3, #1
 80099e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80099e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d060      	beq.n	8009ab0 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80099ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099f4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80099f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80099f8:	f000 fbfe 	bl	800a1f8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80099fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d010      	beq.n	8009a24 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8009a02:	4b50      	ldr	r3, [pc, #320]	; (8009b44 <tcp_slowtmr+0x590>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d106      	bne.n	8009a1a <tcp_slowtmr+0x466>
 8009a0c:	4b4e      	ldr	r3, [pc, #312]	; (8009b48 <tcp_slowtmr+0x594>)
 8009a0e:	f240 526d 	movw	r2, #1389	; 0x56d
 8009a12:	494e      	ldr	r1, [pc, #312]	; (8009b4c <tcp_slowtmr+0x598>)
 8009a14:	484e      	ldr	r0, [pc, #312]	; (8009b50 <tcp_slowtmr+0x59c>)
 8009a16:	f008 f987 	bl	8011d28 <iprintf>
        prev->next = pcb->next;
 8009a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a1c:	68da      	ldr	r2, [r3, #12]
 8009a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a20:	60da      	str	r2, [r3, #12]
 8009a22:	e00f      	b.n	8009a44 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8009a24:	4b47      	ldr	r3, [pc, #284]	; (8009b44 <tcp_slowtmr+0x590>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d006      	beq.n	8009a3c <tcp_slowtmr+0x488>
 8009a2e:	4b46      	ldr	r3, [pc, #280]	; (8009b48 <tcp_slowtmr+0x594>)
 8009a30:	f240 5271 	movw	r2, #1393	; 0x571
 8009a34:	4947      	ldr	r1, [pc, #284]	; (8009b54 <tcp_slowtmr+0x5a0>)
 8009a36:	4846      	ldr	r0, [pc, #280]	; (8009b50 <tcp_slowtmr+0x59c>)
 8009a38:	f008 f976 	bl	8011d28 <iprintf>
        tcp_active_pcbs = pcb->next;
 8009a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a3e:	68db      	ldr	r3, [r3, #12]
 8009a40:	4a40      	ldr	r2, [pc, #256]	; (8009b44 <tcp_slowtmr+0x590>)
 8009a42:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8009a44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d013      	beq.n	8009a74 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a4e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a52:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009a54:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8009a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a58:	3304      	adds	r3, #4
 8009a5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a5c:	8ad2      	ldrh	r2, [r2, #22]
 8009a5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009a60:	8b09      	ldrh	r1, [r1, #24]
 8009a62:	9102      	str	r1, [sp, #8]
 8009a64:	9201      	str	r2, [sp, #4]
 8009a66:	9300      	str	r3, [sp, #0]
 8009a68:	462b      	mov	r3, r5
 8009a6a:	4622      	mov	r2, r4
 8009a6c:	4601      	mov	r1, r0
 8009a6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a70:	f004 f98a 	bl	800dd88 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8009a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a76:	691b      	ldr	r3, [r3, #16]
 8009a78:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8009a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a7c:	7d1b      	ldrb	r3, [r3, #20]
 8009a7e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8009a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a82:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8009a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a86:	68db      	ldr	r3, [r3, #12]
 8009a88:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8009a8a:	6838      	ldr	r0, [r7, #0]
 8009a8c:	f7ff f9f4 	bl	8008e78 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8009a90:	4b31      	ldr	r3, [pc, #196]	; (8009b58 <tcp_slowtmr+0x5a4>)
 8009a92:	2200      	movs	r2, #0
 8009a94:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d004      	beq.n	8009aa6 <tcp_slowtmr+0x4f2>
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	f06f 010c 	mvn.w	r1, #12
 8009aa2:	68b8      	ldr	r0, [r7, #8]
 8009aa4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8009aa6:	4b2c      	ldr	r3, [pc, #176]	; (8009b58 <tcp_slowtmr+0x5a4>)
 8009aa8:	781b      	ldrb	r3, [r3, #0]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d037      	beq.n	8009b1e <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8009aae:	e592      	b.n	80095d6 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8009ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ab2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ab6:	68db      	ldr	r3, [r3, #12]
 8009ab8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8009aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009abc:	7f1b      	ldrb	r3, [r3, #28]
 8009abe:	3301      	adds	r3, #1
 8009ac0:	b2da      	uxtb	r2, r3
 8009ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8009ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac8:	7f1a      	ldrb	r2, [r3, #28]
 8009aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009acc:	7f5b      	ldrb	r3, [r3, #29]
 8009ace:	429a      	cmp	r2, r3
 8009ad0:	d325      	bcc.n	8009b1e <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8009ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8009ad8:	4b1f      	ldr	r3, [pc, #124]	; (8009b58 <tcp_slowtmr+0x5a4>)
 8009ada:	2200      	movs	r2, #0
 8009adc:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8009ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d00b      	beq.n	8009b00 <tcp_slowtmr+0x54c>
 8009ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009aee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009af0:	6912      	ldr	r2, [r2, #16]
 8009af2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009af4:	4610      	mov	r0, r2
 8009af6:	4798      	blx	r3
 8009af8:	4603      	mov	r3, r0
 8009afa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8009afe:	e002      	b.n	8009b06 <tcp_slowtmr+0x552>
 8009b00:	2300      	movs	r3, #0
 8009b02:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8009b06:	4b14      	ldr	r3, [pc, #80]	; (8009b58 <tcp_slowtmr+0x5a4>)
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d000      	beq.n	8009b10 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8009b0e:	e562      	b.n	80095d6 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8009b10:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d102      	bne.n	8009b1e <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8009b18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b1a:	f003 fb81 	bl	800d220 <tcp_output>
  while (pcb != NULL) {
 8009b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	f47f ad5e 	bne.w	80095e2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8009b26:	2300      	movs	r3, #0
 8009b28:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8009b2a:	4b0c      	ldr	r3, [pc, #48]	; (8009b5c <tcp_slowtmr+0x5a8>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8009b30:	e069      	b.n	8009c06 <tcp_slowtmr+0x652>
 8009b32:	bf00      	nop
 8009b34:	2000a7d0 	.word	0x2000a7d0
 8009b38:	000a4cb8 	.word	0x000a4cb8
 8009b3c:	10624dd3 	.word	0x10624dd3
 8009b40:	000124f8 	.word	0x000124f8
 8009b44:	2000a7dc 	.word	0x2000a7dc
 8009b48:	080147e0 	.word	0x080147e0
 8009b4c:	08014c18 	.word	0x08014c18
 8009b50:	08014824 	.word	0x08014824
 8009b54:	08014c44 	.word	0x08014c44
 8009b58:	2000a7e4 	.word	0x2000a7e4
 8009b5c:	2000a7e0 	.word	0x2000a7e0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b62:	7d1b      	ldrb	r3, [r3, #20]
 8009b64:	2b0a      	cmp	r3, #10
 8009b66:	d006      	beq.n	8009b76 <tcp_slowtmr+0x5c2>
 8009b68:	4b2b      	ldr	r3, [pc, #172]	; (8009c18 <tcp_slowtmr+0x664>)
 8009b6a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8009b6e:	492b      	ldr	r1, [pc, #172]	; (8009c1c <tcp_slowtmr+0x668>)
 8009b70:	482b      	ldr	r0, [pc, #172]	; (8009c20 <tcp_slowtmr+0x66c>)
 8009b72:	f008 f8d9 	bl	8011d28 <iprintf>
    pcb_remove = 0;
 8009b76:	2300      	movs	r3, #0
 8009b78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009b7c:	4b29      	ldr	r3, [pc, #164]	; (8009c24 <tcp_slowtmr+0x670>)
 8009b7e:	681a      	ldr	r2, [r3, #0]
 8009b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b82:	6a1b      	ldr	r3, [r3, #32]
 8009b84:	1ad3      	subs	r3, r2, r3
 8009b86:	2bf0      	cmp	r3, #240	; 0xf0
 8009b88:	d904      	bls.n	8009b94 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8009b8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b8e:	3301      	adds	r3, #1
 8009b90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009b94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d02f      	beq.n	8009bfc <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8009b9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b9e:	f000 fb2b 	bl	800a1f8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8009ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d010      	beq.n	8009bca <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009ba8:	4b1f      	ldr	r3, [pc, #124]	; (8009c28 <tcp_slowtmr+0x674>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d106      	bne.n	8009bc0 <tcp_slowtmr+0x60c>
 8009bb2:	4b19      	ldr	r3, [pc, #100]	; (8009c18 <tcp_slowtmr+0x664>)
 8009bb4:	f240 52af 	movw	r2, #1455	; 0x5af
 8009bb8:	491c      	ldr	r1, [pc, #112]	; (8009c2c <tcp_slowtmr+0x678>)
 8009bba:	4819      	ldr	r0, [pc, #100]	; (8009c20 <tcp_slowtmr+0x66c>)
 8009bbc:	f008 f8b4 	bl	8011d28 <iprintf>
        prev->next = pcb->next;
 8009bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bc2:	68da      	ldr	r2, [r3, #12]
 8009bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bc6:	60da      	str	r2, [r3, #12]
 8009bc8:	e00f      	b.n	8009bea <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8009bca:	4b17      	ldr	r3, [pc, #92]	; (8009c28 <tcp_slowtmr+0x674>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d006      	beq.n	8009be2 <tcp_slowtmr+0x62e>
 8009bd4:	4b10      	ldr	r3, [pc, #64]	; (8009c18 <tcp_slowtmr+0x664>)
 8009bd6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8009bda:	4915      	ldr	r1, [pc, #84]	; (8009c30 <tcp_slowtmr+0x67c>)
 8009bdc:	4810      	ldr	r0, [pc, #64]	; (8009c20 <tcp_slowtmr+0x66c>)
 8009bde:	f008 f8a3 	bl	8011d28 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8009be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009be4:	68db      	ldr	r3, [r3, #12]
 8009be6:	4a10      	ldr	r2, [pc, #64]	; (8009c28 <tcp_slowtmr+0x674>)
 8009be8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8009bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bec:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8009bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bf0:	68db      	ldr	r3, [r3, #12]
 8009bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8009bf4:	69f8      	ldr	r0, [r7, #28]
 8009bf6:	f7ff f93f 	bl	8008e78 <tcp_free>
 8009bfa:	e004      	b.n	8009c06 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8009bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bfe:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c02:	68db      	ldr	r3, [r3, #12]
 8009c04:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8009c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d1a9      	bne.n	8009b60 <tcp_slowtmr+0x5ac>
    }
  }
}
 8009c0c:	bf00      	nop
 8009c0e:	bf00      	nop
 8009c10:	3730      	adds	r7, #48	; 0x30
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bdb0      	pop	{r4, r5, r7, pc}
 8009c16:	bf00      	nop
 8009c18:	080147e0 	.word	0x080147e0
 8009c1c:	08014c70 	.word	0x08014c70
 8009c20:	08014824 	.word	0x08014824
 8009c24:	2000a7d0 	.word	0x2000a7d0
 8009c28:	2000a7e0 	.word	0x2000a7e0
 8009c2c:	08014ca0 	.word	0x08014ca0
 8009c30:	08014cc8 	.word	0x08014cc8

08009c34 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b082      	sub	sp, #8
 8009c38:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8009c3a:	4b2d      	ldr	r3, [pc, #180]	; (8009cf0 <tcp_fasttmr+0xbc>)
 8009c3c:	781b      	ldrb	r3, [r3, #0]
 8009c3e:	3301      	adds	r3, #1
 8009c40:	b2da      	uxtb	r2, r3
 8009c42:	4b2b      	ldr	r3, [pc, #172]	; (8009cf0 <tcp_fasttmr+0xbc>)
 8009c44:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8009c46:	4b2b      	ldr	r3, [pc, #172]	; (8009cf4 <tcp_fasttmr+0xc0>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009c4c:	e048      	b.n	8009ce0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	7f9a      	ldrb	r2, [r3, #30]
 8009c52:	4b27      	ldr	r3, [pc, #156]	; (8009cf0 <tcp_fasttmr+0xbc>)
 8009c54:	781b      	ldrb	r3, [r3, #0]
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d03f      	beq.n	8009cda <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8009c5a:	4b25      	ldr	r3, [pc, #148]	; (8009cf0 <tcp_fasttmr+0xbc>)
 8009c5c:	781a      	ldrb	r2, [r3, #0]
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	8b5b      	ldrh	r3, [r3, #26]
 8009c66:	f003 0301 	and.w	r3, r3, #1
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d010      	beq.n	8009c90 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	8b5b      	ldrh	r3, [r3, #26]
 8009c72:	f043 0302 	orr.w	r3, r3, #2
 8009c76:	b29a      	uxth	r2, r3
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f003 facf 	bl	800d220 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	8b5b      	ldrh	r3, [r3, #26]
 8009c86:	f023 0303 	bic.w	r3, r3, #3
 8009c8a:	b29a      	uxth	r2, r3
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	8b5b      	ldrh	r3, [r3, #26]
 8009c94:	f003 0308 	and.w	r3, r3, #8
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d009      	beq.n	8009cb0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	8b5b      	ldrh	r3, [r3, #26]
 8009ca0:	f023 0308 	bic.w	r3, r3, #8
 8009ca4:	b29a      	uxth	r2, r3
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f7ff fa78 	bl	80091a0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	68db      	ldr	r3, [r3, #12]
 8009cb4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d00a      	beq.n	8009cd4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8009cbe:	4b0e      	ldr	r3, [pc, #56]	; (8009cf8 <tcp_fasttmr+0xc4>)
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f000 f819 	bl	8009cfc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8009cca:	4b0b      	ldr	r3, [pc, #44]	; (8009cf8 <tcp_fasttmr+0xc4>)
 8009ccc:	781b      	ldrb	r3, [r3, #0]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d000      	beq.n	8009cd4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8009cd2:	e7b8      	b.n	8009c46 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	607b      	str	r3, [r7, #4]
 8009cd8:	e002      	b.n	8009ce0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	68db      	ldr	r3, [r3, #12]
 8009cde:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d1b3      	bne.n	8009c4e <tcp_fasttmr+0x1a>
    }
  }
}
 8009ce6:	bf00      	nop
 8009ce8:	bf00      	nop
 8009cea:	3708      	adds	r7, #8
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}
 8009cf0:	2000a7e6 	.word	0x2000a7e6
 8009cf4:	2000a7dc 	.word	0x2000a7dc
 8009cf8:	2000a7e4 	.word	0x2000a7e4

08009cfc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8009cfc:	b590      	push	{r4, r7, lr}
 8009cfe:	b085      	sub	sp, #20
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d109      	bne.n	8009d1e <tcp_process_refused_data+0x22>
 8009d0a:	4b37      	ldr	r3, [pc, #220]	; (8009de8 <tcp_process_refused_data+0xec>)
 8009d0c:	f240 6209 	movw	r2, #1545	; 0x609
 8009d10:	4936      	ldr	r1, [pc, #216]	; (8009dec <tcp_process_refused_data+0xf0>)
 8009d12:	4837      	ldr	r0, [pc, #220]	; (8009df0 <tcp_process_refused_data+0xf4>)
 8009d14:	f008 f808 	bl	8011d28 <iprintf>
 8009d18:	f06f 030f 	mvn.w	r3, #15
 8009d1c:	e060      	b.n	8009de0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d22:	7b5b      	ldrb	r3, [r3, #13]
 8009d24:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d2a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d00b      	beq.n	8009d54 <tcp_process_refused_data+0x58>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6918      	ldr	r0, [r3, #16]
 8009d46:	2300      	movs	r3, #0
 8009d48:	68ba      	ldr	r2, [r7, #8]
 8009d4a:	6879      	ldr	r1, [r7, #4]
 8009d4c:	47a0      	blx	r4
 8009d4e:	4603      	mov	r3, r0
 8009d50:	73fb      	strb	r3, [r7, #15]
 8009d52:	e007      	b.n	8009d64 <tcp_process_refused_data+0x68>
 8009d54:	2300      	movs	r3, #0
 8009d56:	68ba      	ldr	r2, [r7, #8]
 8009d58:	6879      	ldr	r1, [r7, #4]
 8009d5a:	2000      	movs	r0, #0
 8009d5c:	f000 f8a4 	bl	8009ea8 <tcp_recv_null>
 8009d60:	4603      	mov	r3, r0
 8009d62:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009d64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d12a      	bne.n	8009dc2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8009d6c:	7bbb      	ldrb	r3, [r7, #14]
 8009d6e:	f003 0320 	and.w	r3, r3, #32
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d033      	beq.n	8009dde <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d7a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009d7e:	d005      	beq.n	8009d8c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d84:	3301      	adds	r3, #1
 8009d86:	b29a      	uxth	r2, r3
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d00b      	beq.n	8009dae <tcp_process_refused_data+0xb2>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6918      	ldr	r0, [r3, #16]
 8009da0:	2300      	movs	r3, #0
 8009da2:	2200      	movs	r2, #0
 8009da4:	6879      	ldr	r1, [r7, #4]
 8009da6:	47a0      	blx	r4
 8009da8:	4603      	mov	r3, r0
 8009daa:	73fb      	strb	r3, [r7, #15]
 8009dac:	e001      	b.n	8009db2 <tcp_process_refused_data+0xb6>
 8009dae:	2300      	movs	r3, #0
 8009db0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8009db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009db6:	f113 0f0d 	cmn.w	r3, #13
 8009dba:	d110      	bne.n	8009dde <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8009dbc:	f06f 030c 	mvn.w	r3, #12
 8009dc0:	e00e      	b.n	8009de0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8009dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009dc6:	f113 0f0d 	cmn.w	r3, #13
 8009dca:	d102      	bne.n	8009dd2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8009dcc:	f06f 030c 	mvn.w	r3, #12
 8009dd0:	e006      	b.n	8009de0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	68ba      	ldr	r2, [r7, #8]
 8009dd6:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8009dd8:	f06f 0304 	mvn.w	r3, #4
 8009ddc:	e000      	b.n	8009de0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8009dde:	2300      	movs	r3, #0
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3714      	adds	r7, #20
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd90      	pop	{r4, r7, pc}
 8009de8:	080147e0 	.word	0x080147e0
 8009dec:	08014cf0 	.word	0x08014cf0
 8009df0:	08014824 	.word	0x08014824

08009df4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8009dfc:	e007      	b.n	8009e0e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f000 f80a 	bl	8009e1e <tcp_seg_free>
    seg = next;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d1f4      	bne.n	8009dfe <tcp_segs_free+0xa>
  }
}
 8009e14:	bf00      	nop
 8009e16:	bf00      	nop
 8009e18:	3710      	adds	r7, #16
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}

08009e1e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8009e1e:	b580      	push	{r7, lr}
 8009e20:	b082      	sub	sp, #8
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d00c      	beq.n	8009e46 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d004      	beq.n	8009e3e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	685b      	ldr	r3, [r3, #4]
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f7fe fd7d 	bl	8008938 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8009e3e:	6879      	ldr	r1, [r7, #4]
 8009e40:	2003      	movs	r0, #3
 8009e42:	f7fd ff03 	bl	8007c4c <memp_free>
  }
}
 8009e46:	bf00      	nop
 8009e48:	3708      	adds	r7, #8
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}
	...

08009e50 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b084      	sub	sp, #16
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d106      	bne.n	8009e6c <tcp_seg_copy+0x1c>
 8009e5e:	4b0f      	ldr	r3, [pc, #60]	; (8009e9c <tcp_seg_copy+0x4c>)
 8009e60:	f240 6282 	movw	r2, #1666	; 0x682
 8009e64:	490e      	ldr	r1, [pc, #56]	; (8009ea0 <tcp_seg_copy+0x50>)
 8009e66:	480f      	ldr	r0, [pc, #60]	; (8009ea4 <tcp_seg_copy+0x54>)
 8009e68:	f007 ff5e 	bl	8011d28 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8009e6c:	2003      	movs	r0, #3
 8009e6e:	f7fd fe7d 	bl	8007b6c <memp_malloc>
 8009e72:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d101      	bne.n	8009e7e <tcp_seg_copy+0x2e>
    return NULL;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	e00a      	b.n	8009e94 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8009e7e:	2210      	movs	r2, #16
 8009e80:	6879      	ldr	r1, [r7, #4]
 8009e82:	68f8      	ldr	r0, [r7, #12]
 8009e84:	f008 f8b1 	bl	8011fea <memcpy>
  pbuf_ref(cseg->p);
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	685b      	ldr	r3, [r3, #4]
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f7fe fdf3 	bl	8008a78 <pbuf_ref>
  return cseg;
 8009e92:	68fb      	ldr	r3, [r7, #12]
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3710      	adds	r7, #16
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}
 8009e9c:	080147e0 	.word	0x080147e0
 8009ea0:	08014d34 	.word	0x08014d34
 8009ea4:	08014824 	.word	0x08014824

08009ea8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b084      	sub	sp, #16
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	60f8      	str	r0, [r7, #12]
 8009eb0:	60b9      	str	r1, [r7, #8]
 8009eb2:	607a      	str	r2, [r7, #4]
 8009eb4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d109      	bne.n	8009ed0 <tcp_recv_null+0x28>
 8009ebc:	4b12      	ldr	r3, [pc, #72]	; (8009f08 <tcp_recv_null+0x60>)
 8009ebe:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8009ec2:	4912      	ldr	r1, [pc, #72]	; (8009f0c <tcp_recv_null+0x64>)
 8009ec4:	4812      	ldr	r0, [pc, #72]	; (8009f10 <tcp_recv_null+0x68>)
 8009ec6:	f007 ff2f 	bl	8011d28 <iprintf>
 8009eca:	f06f 030f 	mvn.w	r3, #15
 8009ece:	e016      	b.n	8009efe <tcp_recv_null+0x56>

  if (p != NULL) {
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d009      	beq.n	8009eea <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	891b      	ldrh	r3, [r3, #8]
 8009eda:	4619      	mov	r1, r3
 8009edc:	68b8      	ldr	r0, [r7, #8]
 8009ede:	f7ff fb19 	bl	8009514 <tcp_recved>
    pbuf_free(p);
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f7fe fd28 	bl	8008938 <pbuf_free>
 8009ee8:	e008      	b.n	8009efc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8009eea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d104      	bne.n	8009efc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8009ef2:	68b8      	ldr	r0, [r7, #8]
 8009ef4:	f7ff f9be 	bl	8009274 <tcp_close>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	e000      	b.n	8009efe <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8009efc:	2300      	movs	r3, #0
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3710      	adds	r7, #16
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}
 8009f06:	bf00      	nop
 8009f08:	080147e0 	.word	0x080147e0
 8009f0c:	08014d50 	.word	0x08014d50
 8009f10:	08014824 	.word	0x08014824

08009f14 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b086      	sub	sp, #24
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	db01      	blt.n	8009f2a <tcp_kill_prio+0x16>
 8009f26:	79fb      	ldrb	r3, [r7, #7]
 8009f28:	e000      	b.n	8009f2c <tcp_kill_prio+0x18>
 8009f2a:	237f      	movs	r3, #127	; 0x7f
 8009f2c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8009f2e:	7afb      	ldrb	r3, [r7, #11]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d034      	beq.n	8009f9e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8009f34:	7afb      	ldrb	r3, [r7, #11]
 8009f36:	3b01      	subs	r3, #1
 8009f38:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009f42:	4b19      	ldr	r3, [pc, #100]	; (8009fa8 <tcp_kill_prio+0x94>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	617b      	str	r3, [r7, #20]
 8009f48:	e01f      	b.n	8009f8a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	7d5b      	ldrb	r3, [r3, #21]
 8009f4e:	7afa      	ldrb	r2, [r7, #11]
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d80c      	bhi.n	8009f6e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8009f58:	7afa      	ldrb	r2, [r7, #11]
 8009f5a:	429a      	cmp	r2, r3
 8009f5c:	d112      	bne.n	8009f84 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009f5e:	4b13      	ldr	r3, [pc, #76]	; (8009fac <tcp_kill_prio+0x98>)
 8009f60:	681a      	ldr	r2, [r3, #0]
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	6a1b      	ldr	r3, [r3, #32]
 8009f66:	1ad3      	subs	r3, r2, r3
 8009f68:	68fa      	ldr	r2, [r7, #12]
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d80a      	bhi.n	8009f84 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8009f6e:	4b0f      	ldr	r3, [pc, #60]	; (8009fac <tcp_kill_prio+0x98>)
 8009f70:	681a      	ldr	r2, [r3, #0]
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	6a1b      	ldr	r3, [r3, #32]
 8009f76:	1ad3      	subs	r3, r2, r3
 8009f78:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	7d5b      	ldrb	r3, [r3, #21]
 8009f82:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	68db      	ldr	r3, [r3, #12]
 8009f88:	617b      	str	r3, [r7, #20]
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d1dc      	bne.n	8009f4a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d004      	beq.n	8009fa0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009f96:	6938      	ldr	r0, [r7, #16]
 8009f98:	f7ff fa56 	bl	8009448 <tcp_abort>
 8009f9c:	e000      	b.n	8009fa0 <tcp_kill_prio+0x8c>
    return;
 8009f9e:	bf00      	nop
  }
}
 8009fa0:	3718      	adds	r7, #24
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
 8009fa6:	bf00      	nop
 8009fa8:	2000a7dc 	.word	0x2000a7dc
 8009fac:	2000a7d0 	.word	0x2000a7d0

08009fb0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b086      	sub	sp, #24
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8009fba:	79fb      	ldrb	r3, [r7, #7]
 8009fbc:	2b08      	cmp	r3, #8
 8009fbe:	d009      	beq.n	8009fd4 <tcp_kill_state+0x24>
 8009fc0:	79fb      	ldrb	r3, [r7, #7]
 8009fc2:	2b09      	cmp	r3, #9
 8009fc4:	d006      	beq.n	8009fd4 <tcp_kill_state+0x24>
 8009fc6:	4b1a      	ldr	r3, [pc, #104]	; (800a030 <tcp_kill_state+0x80>)
 8009fc8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8009fcc:	4919      	ldr	r1, [pc, #100]	; (800a034 <tcp_kill_state+0x84>)
 8009fce:	481a      	ldr	r0, [pc, #104]	; (800a038 <tcp_kill_state+0x88>)
 8009fd0:	f007 feaa 	bl	8011d28 <iprintf>

  inactivity = 0;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009fdc:	4b17      	ldr	r3, [pc, #92]	; (800a03c <tcp_kill_state+0x8c>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	617b      	str	r3, [r7, #20]
 8009fe2:	e017      	b.n	800a014 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	7d1b      	ldrb	r3, [r3, #20]
 8009fe8:	79fa      	ldrb	r2, [r7, #7]
 8009fea:	429a      	cmp	r2, r3
 8009fec:	d10f      	bne.n	800a00e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009fee:	4b14      	ldr	r3, [pc, #80]	; (800a040 <tcp_kill_state+0x90>)
 8009ff0:	681a      	ldr	r2, [r3, #0]
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	6a1b      	ldr	r3, [r3, #32]
 8009ff6:	1ad3      	subs	r3, r2, r3
 8009ff8:	68fa      	ldr	r2, [r7, #12]
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d807      	bhi.n	800a00e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8009ffe:	4b10      	ldr	r3, [pc, #64]	; (800a040 <tcp_kill_state+0x90>)
 800a000:	681a      	ldr	r2, [r3, #0]
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	6a1b      	ldr	r3, [r3, #32]
 800a006:	1ad3      	subs	r3, r2, r3
 800a008:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	68db      	ldr	r3, [r3, #12]
 800a012:	617b      	str	r3, [r7, #20]
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d1e4      	bne.n	8009fe4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d003      	beq.n	800a028 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800a020:	2100      	movs	r1, #0
 800a022:	6938      	ldr	r0, [r7, #16]
 800a024:	f7ff f952 	bl	80092cc <tcp_abandon>
  }
}
 800a028:	bf00      	nop
 800a02a:	3718      	adds	r7, #24
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}
 800a030:	080147e0 	.word	0x080147e0
 800a034:	08014d6c 	.word	0x08014d6c
 800a038:	08014824 	.word	0x08014824
 800a03c:	2000a7dc 	.word	0x2000a7dc
 800a040:	2000a7d0 	.word	0x2000a7d0

0800a044 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b084      	sub	sp, #16
 800a048:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800a04a:	2300      	movs	r3, #0
 800a04c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800a04e:	2300      	movs	r3, #0
 800a050:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a052:	4b12      	ldr	r3, [pc, #72]	; (800a09c <tcp_kill_timewait+0x58>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	60fb      	str	r3, [r7, #12]
 800a058:	e012      	b.n	800a080 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a05a:	4b11      	ldr	r3, [pc, #68]	; (800a0a0 <tcp_kill_timewait+0x5c>)
 800a05c:	681a      	ldr	r2, [r3, #0]
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	6a1b      	ldr	r3, [r3, #32]
 800a062:	1ad3      	subs	r3, r2, r3
 800a064:	687a      	ldr	r2, [r7, #4]
 800a066:	429a      	cmp	r2, r3
 800a068:	d807      	bhi.n	800a07a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800a06a:	4b0d      	ldr	r3, [pc, #52]	; (800a0a0 <tcp_kill_timewait+0x5c>)
 800a06c:	681a      	ldr	r2, [r3, #0]
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	6a1b      	ldr	r3, [r3, #32]
 800a072:	1ad3      	subs	r3, r2, r3
 800a074:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	68db      	ldr	r3, [r3, #12]
 800a07e:	60fb      	str	r3, [r7, #12]
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d1e9      	bne.n	800a05a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d002      	beq.n	800a092 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a08c:	68b8      	ldr	r0, [r7, #8]
 800a08e:	f7ff f9db 	bl	8009448 <tcp_abort>
  }
}
 800a092:	bf00      	nop
 800a094:	3710      	adds	r7, #16
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}
 800a09a:	bf00      	nop
 800a09c:	2000a7e0 	.word	0x2000a7e0
 800a0a0:	2000a7d0 	.word	0x2000a7d0

0800a0a4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b082      	sub	sp, #8
 800a0a8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800a0aa:	4b10      	ldr	r3, [pc, #64]	; (800a0ec <tcp_handle_closepend+0x48>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a0b0:	e014      	b.n	800a0dc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	68db      	ldr	r3, [r3, #12]
 800a0b6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	8b5b      	ldrh	r3, [r3, #26]
 800a0bc:	f003 0308 	and.w	r3, r3, #8
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d009      	beq.n	800a0d8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	8b5b      	ldrh	r3, [r3, #26]
 800a0c8:	f023 0308 	bic.w	r3, r3, #8
 800a0cc:	b29a      	uxth	r2, r3
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f7ff f864 	bl	80091a0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d1e7      	bne.n	800a0b2 <tcp_handle_closepend+0xe>
  }
}
 800a0e2:	bf00      	nop
 800a0e4:	bf00      	nop
 800a0e6:	3708      	adds	r7, #8
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}
 800a0ec:	2000a7dc 	.word	0x2000a7dc

0800a0f0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b084      	sub	sp, #16
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a0fa:	2001      	movs	r0, #1
 800a0fc:	f7fd fd36 	bl	8007b6c <memp_malloc>
 800a100:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d126      	bne.n	800a156 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800a108:	f7ff ffcc 	bl	800a0a4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800a10c:	f7ff ff9a 	bl	800a044 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a110:	2001      	movs	r0, #1
 800a112:	f7fd fd2b 	bl	8007b6c <memp_malloc>
 800a116:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d11b      	bne.n	800a156 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800a11e:	2009      	movs	r0, #9
 800a120:	f7ff ff46 	bl	8009fb0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a124:	2001      	movs	r0, #1
 800a126:	f7fd fd21 	bl	8007b6c <memp_malloc>
 800a12a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d111      	bne.n	800a156 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800a132:	2008      	movs	r0, #8
 800a134:	f7ff ff3c 	bl	8009fb0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a138:	2001      	movs	r0, #1
 800a13a:	f7fd fd17 	bl	8007b6c <memp_malloc>
 800a13e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d107      	bne.n	800a156 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800a146:	79fb      	ldrb	r3, [r7, #7]
 800a148:	4618      	mov	r0, r3
 800a14a:	f7ff fee3 	bl	8009f14 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a14e:	2001      	movs	r0, #1
 800a150:	f7fd fd0c 	bl	8007b6c <memp_malloc>
 800a154:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d03f      	beq.n	800a1dc <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800a15c:	229c      	movs	r2, #156	; 0x9c
 800a15e:	2100      	movs	r1, #0
 800a160:	68f8      	ldr	r0, [r7, #12]
 800a162:	f007 fe46 	bl	8011df2 <memset>
    pcb->prio = prio;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	79fa      	ldrb	r2, [r7, #7]
 800a16a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800a172:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a17c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	22ff      	movs	r2, #255	; 0xff
 800a18a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a192:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	2206      	movs	r2, #6
 800a198:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	2206      	movs	r2, #6
 800a1a0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a1a8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	2201      	movs	r2, #1
 800a1ae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800a1b2:	4b0d      	ldr	r3, [pc, #52]	; (800a1e8 <tcp_alloc+0xf8>)
 800a1b4:	681a      	ldr	r2, [r3, #0]
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800a1ba:	4b0c      	ldr	r3, [pc, #48]	; (800a1ec <tcp_alloc+0xfc>)
 800a1bc:	781a      	ldrb	r2, [r3, #0]
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800a1c8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	4a08      	ldr	r2, [pc, #32]	; (800a1f0 <tcp_alloc+0x100>)
 800a1d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	4a07      	ldr	r2, [pc, #28]	; (800a1f4 <tcp_alloc+0x104>)
 800a1d8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3710      	adds	r7, #16
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}
 800a1e6:	bf00      	nop
 800a1e8:	2000a7d0 	.word	0x2000a7d0
 800a1ec:	2000a7e6 	.word	0x2000a7e6
 800a1f0:	08009ea9 	.word	0x08009ea9
 800a1f4:	006ddd00 	.word	0x006ddd00

0800a1f8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b082      	sub	sp, #8
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d107      	bne.n	800a216 <tcp_pcb_purge+0x1e>
 800a206:	4b21      	ldr	r3, [pc, #132]	; (800a28c <tcp_pcb_purge+0x94>)
 800a208:	f640 0251 	movw	r2, #2129	; 0x851
 800a20c:	4920      	ldr	r1, [pc, #128]	; (800a290 <tcp_pcb_purge+0x98>)
 800a20e:	4821      	ldr	r0, [pc, #132]	; (800a294 <tcp_pcb_purge+0x9c>)
 800a210:	f007 fd8a 	bl	8011d28 <iprintf>
 800a214:	e037      	b.n	800a286 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	7d1b      	ldrb	r3, [r3, #20]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d033      	beq.n	800a286 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800a222:	2b0a      	cmp	r3, #10
 800a224:	d02f      	beq.n	800a286 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800a22a:	2b01      	cmp	r3, #1
 800a22c:	d02b      	beq.n	800a286 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a232:	2b00      	cmp	r3, #0
 800a234:	d007      	beq.n	800a246 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a23a:	4618      	mov	r0, r3
 800a23c:	f7fe fb7c 	bl	8008938 <pbuf_free>
      pcb->refused_data = NULL;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2200      	movs	r2, #0
 800a244:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d002      	beq.n	800a254 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f000 f986 	bl	800a560 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a25a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a260:	4618      	mov	r0, r3
 800a262:	f7ff fdc7 	bl	8009df4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a26a:	4618      	mov	r0, r3
 800a26c:	f7ff fdc2 	bl	8009df4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2200      	movs	r2, #0
 800a274:	66da      	str	r2, [r3, #108]	; 0x6c
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2200      	movs	r2, #0
 800a282:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800a286:	3708      	adds	r7, #8
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}
 800a28c:	080147e0 	.word	0x080147e0
 800a290:	08014e2c 	.word	0x08014e2c
 800a294:	08014824 	.word	0x08014824

0800a298 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b084      	sub	sp, #16
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d106      	bne.n	800a2b6 <tcp_pcb_remove+0x1e>
 800a2a8:	4b3e      	ldr	r3, [pc, #248]	; (800a3a4 <tcp_pcb_remove+0x10c>)
 800a2aa:	f640 0283 	movw	r2, #2179	; 0x883
 800a2ae:	493e      	ldr	r1, [pc, #248]	; (800a3a8 <tcp_pcb_remove+0x110>)
 800a2b0:	483e      	ldr	r0, [pc, #248]	; (800a3ac <tcp_pcb_remove+0x114>)
 800a2b2:	f007 fd39 	bl	8011d28 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d106      	bne.n	800a2ca <tcp_pcb_remove+0x32>
 800a2bc:	4b39      	ldr	r3, [pc, #228]	; (800a3a4 <tcp_pcb_remove+0x10c>)
 800a2be:	f640 0284 	movw	r2, #2180	; 0x884
 800a2c2:	493b      	ldr	r1, [pc, #236]	; (800a3b0 <tcp_pcb_remove+0x118>)
 800a2c4:	4839      	ldr	r0, [pc, #228]	; (800a3ac <tcp_pcb_remove+0x114>)
 800a2c6:	f007 fd2f 	bl	8011d28 <iprintf>

  TCP_RMV(pcblist, pcb);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	683a      	ldr	r2, [r7, #0]
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d105      	bne.n	800a2e0 <tcp_pcb_remove+0x48>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	68da      	ldr	r2, [r3, #12]
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	601a      	str	r2, [r3, #0]
 800a2de:	e013      	b.n	800a308 <tcp_pcb_remove+0x70>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	60fb      	str	r3, [r7, #12]
 800a2e6:	e00c      	b.n	800a302 <tcp_pcb_remove+0x6a>
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	68db      	ldr	r3, [r3, #12]
 800a2ec:	683a      	ldr	r2, [r7, #0]
 800a2ee:	429a      	cmp	r2, r3
 800a2f0:	d104      	bne.n	800a2fc <tcp_pcb_remove+0x64>
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	68da      	ldr	r2, [r3, #12]
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	60da      	str	r2, [r3, #12]
 800a2fa:	e005      	b.n	800a308 <tcp_pcb_remove+0x70>
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	68db      	ldr	r3, [r3, #12]
 800a300:	60fb      	str	r3, [r7, #12]
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d1ef      	bne.n	800a2e8 <tcp_pcb_remove+0x50>
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	2200      	movs	r2, #0
 800a30c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800a30e:	6838      	ldr	r0, [r7, #0]
 800a310:	f7ff ff72 	bl	800a1f8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	7d1b      	ldrb	r3, [r3, #20]
 800a318:	2b0a      	cmp	r3, #10
 800a31a:	d013      	beq.n	800a344 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800a320:	2b01      	cmp	r3, #1
 800a322:	d00f      	beq.n	800a344 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	8b5b      	ldrh	r3, [r3, #26]
 800a328:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d009      	beq.n	800a344 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	8b5b      	ldrh	r3, [r3, #26]
 800a334:	f043 0302 	orr.w	r3, r3, #2
 800a338:	b29a      	uxth	r2, r3
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a33e:	6838      	ldr	r0, [r7, #0]
 800a340:	f002 ff6e 	bl	800d220 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	7d1b      	ldrb	r3, [r3, #20]
 800a348:	2b01      	cmp	r3, #1
 800a34a:	d020      	beq.n	800a38e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a350:	2b00      	cmp	r3, #0
 800a352:	d006      	beq.n	800a362 <tcp_pcb_remove+0xca>
 800a354:	4b13      	ldr	r3, [pc, #76]	; (800a3a4 <tcp_pcb_remove+0x10c>)
 800a356:	f640 0293 	movw	r2, #2195	; 0x893
 800a35a:	4916      	ldr	r1, [pc, #88]	; (800a3b4 <tcp_pcb_remove+0x11c>)
 800a35c:	4813      	ldr	r0, [pc, #76]	; (800a3ac <tcp_pcb_remove+0x114>)
 800a35e:	f007 fce3 	bl	8011d28 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a366:	2b00      	cmp	r3, #0
 800a368:	d006      	beq.n	800a378 <tcp_pcb_remove+0xe0>
 800a36a:	4b0e      	ldr	r3, [pc, #56]	; (800a3a4 <tcp_pcb_remove+0x10c>)
 800a36c:	f640 0294 	movw	r2, #2196	; 0x894
 800a370:	4911      	ldr	r1, [pc, #68]	; (800a3b8 <tcp_pcb_remove+0x120>)
 800a372:	480e      	ldr	r0, [pc, #56]	; (800a3ac <tcp_pcb_remove+0x114>)
 800a374:	f007 fcd8 	bl	8011d28 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d006      	beq.n	800a38e <tcp_pcb_remove+0xf6>
 800a380:	4b08      	ldr	r3, [pc, #32]	; (800a3a4 <tcp_pcb_remove+0x10c>)
 800a382:	f640 0296 	movw	r2, #2198	; 0x896
 800a386:	490d      	ldr	r1, [pc, #52]	; (800a3bc <tcp_pcb_remove+0x124>)
 800a388:	4808      	ldr	r0, [pc, #32]	; (800a3ac <tcp_pcb_remove+0x114>)
 800a38a:	f007 fccd 	bl	8011d28 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	2200      	movs	r2, #0
 800a392:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	2200      	movs	r2, #0
 800a398:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800a39a:	bf00      	nop
 800a39c:	3710      	adds	r7, #16
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}
 800a3a2:	bf00      	nop
 800a3a4:	080147e0 	.word	0x080147e0
 800a3a8:	08014e48 	.word	0x08014e48
 800a3ac:	08014824 	.word	0x08014824
 800a3b0:	08014e64 	.word	0x08014e64
 800a3b4:	08014e84 	.word	0x08014e84
 800a3b8:	08014e9c 	.word	0x08014e9c
 800a3bc:	08014eb8 	.word	0x08014eb8

0800a3c0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b082      	sub	sp, #8
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d106      	bne.n	800a3dc <tcp_next_iss+0x1c>
 800a3ce:	4b0a      	ldr	r3, [pc, #40]	; (800a3f8 <tcp_next_iss+0x38>)
 800a3d0:	f640 02af 	movw	r2, #2223	; 0x8af
 800a3d4:	4909      	ldr	r1, [pc, #36]	; (800a3fc <tcp_next_iss+0x3c>)
 800a3d6:	480a      	ldr	r0, [pc, #40]	; (800a400 <tcp_next_iss+0x40>)
 800a3d8:	f007 fca6 	bl	8011d28 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800a3dc:	4b09      	ldr	r3, [pc, #36]	; (800a404 <tcp_next_iss+0x44>)
 800a3de:	681a      	ldr	r2, [r3, #0]
 800a3e0:	4b09      	ldr	r3, [pc, #36]	; (800a408 <tcp_next_iss+0x48>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	4413      	add	r3, r2
 800a3e6:	4a07      	ldr	r2, [pc, #28]	; (800a404 <tcp_next_iss+0x44>)
 800a3e8:	6013      	str	r3, [r2, #0]
  return iss;
 800a3ea:	4b06      	ldr	r3, [pc, #24]	; (800a404 <tcp_next_iss+0x44>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	3708      	adds	r7, #8
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}
 800a3f6:	bf00      	nop
 800a3f8:	080147e0 	.word	0x080147e0
 800a3fc:	08014ed0 	.word	0x08014ed0
 800a400:	08014824 	.word	0x08014824
 800a404:	20000024 	.word	0x20000024
 800a408:	2000a7d0 	.word	0x2000a7d0

0800a40c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b086      	sub	sp, #24
 800a410:	af00      	add	r7, sp, #0
 800a412:	4603      	mov	r3, r0
 800a414:	60b9      	str	r1, [r7, #8]
 800a416:	607a      	str	r2, [r7, #4]
 800a418:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d106      	bne.n	800a42e <tcp_eff_send_mss_netif+0x22>
 800a420:	4b14      	ldr	r3, [pc, #80]	; (800a474 <tcp_eff_send_mss_netif+0x68>)
 800a422:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800a426:	4914      	ldr	r1, [pc, #80]	; (800a478 <tcp_eff_send_mss_netif+0x6c>)
 800a428:	4814      	ldr	r0, [pc, #80]	; (800a47c <tcp_eff_send_mss_netif+0x70>)
 800a42a:	f007 fc7d 	bl	8011d28 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d101      	bne.n	800a438 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800a434:	89fb      	ldrh	r3, [r7, #14]
 800a436:	e019      	b.n	800a46c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a43c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800a43e:	8afb      	ldrh	r3, [r7, #22]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d012      	beq.n	800a46a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800a444:	2328      	movs	r3, #40	; 0x28
 800a446:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800a448:	8afa      	ldrh	r2, [r7, #22]
 800a44a:	8abb      	ldrh	r3, [r7, #20]
 800a44c:	429a      	cmp	r2, r3
 800a44e:	d904      	bls.n	800a45a <tcp_eff_send_mss_netif+0x4e>
 800a450:	8afa      	ldrh	r2, [r7, #22]
 800a452:	8abb      	ldrh	r3, [r7, #20]
 800a454:	1ad3      	subs	r3, r2, r3
 800a456:	b29b      	uxth	r3, r3
 800a458:	e000      	b.n	800a45c <tcp_eff_send_mss_netif+0x50>
 800a45a:	2300      	movs	r3, #0
 800a45c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800a45e:	8a7a      	ldrh	r2, [r7, #18]
 800a460:	89fb      	ldrh	r3, [r7, #14]
 800a462:	4293      	cmp	r3, r2
 800a464:	bf28      	it	cs
 800a466:	4613      	movcs	r3, r2
 800a468:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800a46a:	89fb      	ldrh	r3, [r7, #14]
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3718      	adds	r7, #24
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}
 800a474:	080147e0 	.word	0x080147e0
 800a478:	08014eec 	.word	0x08014eec
 800a47c:	08014824 	.word	0x08014824

0800a480 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b084      	sub	sp, #16
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d119      	bne.n	800a4c8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800a494:	4b10      	ldr	r3, [pc, #64]	; (800a4d8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800a496:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800a49a:	4910      	ldr	r1, [pc, #64]	; (800a4dc <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800a49c:	4810      	ldr	r0, [pc, #64]	; (800a4e0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800a49e:	f007 fc43 	bl	8011d28 <iprintf>

  while (pcb != NULL) {
 800a4a2:	e011      	b.n	800a4c8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681a      	ldr	r2, [r3, #0]
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	429a      	cmp	r2, r3
 800a4ae:	d108      	bne.n	800a4c2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	68db      	ldr	r3, [r3, #12]
 800a4b4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800a4b6:	68f8      	ldr	r0, [r7, #12]
 800a4b8:	f7fe ffc6 	bl	8009448 <tcp_abort>
      pcb = next;
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	60fb      	str	r3, [r7, #12]
 800a4c0:	e002      	b.n	800a4c8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	68db      	ldr	r3, [r3, #12]
 800a4c6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d1ea      	bne.n	800a4a4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800a4ce:	bf00      	nop
 800a4d0:	bf00      	nop
 800a4d2:	3710      	adds	r7, #16
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}
 800a4d8:	080147e0 	.word	0x080147e0
 800a4dc:	08014f14 	.word	0x08014f14
 800a4e0:	08014824 	.word	0x08014824

0800a4e4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b084      	sub	sp, #16
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d02a      	beq.n	800a54a <tcp_netif_ip_addr_changed+0x66>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d026      	beq.n	800a54a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800a4fc:	4b15      	ldr	r3, [pc, #84]	; (800a554 <tcp_netif_ip_addr_changed+0x70>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	4619      	mov	r1, r3
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f7ff ffbc 	bl	800a480 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800a508:	4b13      	ldr	r3, [pc, #76]	; (800a558 <tcp_netif_ip_addr_changed+0x74>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	4619      	mov	r1, r3
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f7ff ffb6 	bl	800a480 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d017      	beq.n	800a54a <tcp_netif_ip_addr_changed+0x66>
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d013      	beq.n	800a54a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a522:	4b0e      	ldr	r3, [pc, #56]	; (800a55c <tcp_netif_ip_addr_changed+0x78>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	60fb      	str	r3, [r7, #12]
 800a528:	e00c      	b.n	800a544 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681a      	ldr	r2, [r3, #0]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	429a      	cmp	r2, r3
 800a534:	d103      	bne.n	800a53e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	681a      	ldr	r2, [r3, #0]
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	68db      	ldr	r3, [r3, #12]
 800a542:	60fb      	str	r3, [r7, #12]
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d1ef      	bne.n	800a52a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800a54a:	bf00      	nop
 800a54c:	3710      	adds	r7, #16
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}
 800a552:	bf00      	nop
 800a554:	2000a7dc 	.word	0x2000a7dc
 800a558:	2000a7d4 	.word	0x2000a7d4
 800a55c:	2000a7d8 	.word	0x2000a7d8

0800a560 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b082      	sub	sp, #8
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d007      	beq.n	800a580 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a574:	4618      	mov	r0, r3
 800a576:	f7ff fc3d 	bl	8009df4 <tcp_segs_free>
    pcb->ooseq = NULL;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2200      	movs	r2, #0
 800a57e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800a580:	bf00      	nop
 800a582:	3708      	adds	r7, #8
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}

0800a588 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800a588:	b590      	push	{r4, r7, lr}
 800a58a:	b08d      	sub	sp, #52	; 0x34
 800a58c:	af04      	add	r7, sp, #16
 800a58e:	6078      	str	r0, [r7, #4]
 800a590:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d105      	bne.n	800a5a4 <tcp_input+0x1c>
 800a598:	4b9b      	ldr	r3, [pc, #620]	; (800a808 <tcp_input+0x280>)
 800a59a:	2283      	movs	r2, #131	; 0x83
 800a59c:	499b      	ldr	r1, [pc, #620]	; (800a80c <tcp_input+0x284>)
 800a59e:	489c      	ldr	r0, [pc, #624]	; (800a810 <tcp_input+0x288>)
 800a5a0:	f007 fbc2 	bl	8011d28 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	685b      	ldr	r3, [r3, #4]
 800a5a8:	4a9a      	ldr	r2, [pc, #616]	; (800a814 <tcp_input+0x28c>)
 800a5aa:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	895b      	ldrh	r3, [r3, #10]
 800a5b0:	2b13      	cmp	r3, #19
 800a5b2:	f240 83d1 	bls.w	800ad58 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a5b6:	4b98      	ldr	r3, [pc, #608]	; (800a818 <tcp_input+0x290>)
 800a5b8:	695b      	ldr	r3, [r3, #20]
 800a5ba:	4a97      	ldr	r2, [pc, #604]	; (800a818 <tcp_input+0x290>)
 800a5bc:	6812      	ldr	r2, [r2, #0]
 800a5be:	4611      	mov	r1, r2
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f005 fd7d 	bl	80100c0 <ip4_addr_isbroadcast_u32>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	f040 83c7 	bne.w	800ad5c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800a5ce:	4b92      	ldr	r3, [pc, #584]	; (800a818 <tcp_input+0x290>)
 800a5d0:	695b      	ldr	r3, [r3, #20]
 800a5d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a5d6:	2be0      	cmp	r3, #224	; 0xe0
 800a5d8:	f000 83c0 	beq.w	800ad5c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800a5dc:	4b8d      	ldr	r3, [pc, #564]	; (800a814 <tcp_input+0x28c>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	899b      	ldrh	r3, [r3, #12]
 800a5e2:	b29b      	uxth	r3, r3
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f7fc fe49 	bl	800727c <lwip_htons>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	0b1b      	lsrs	r3, r3, #12
 800a5ee:	b29b      	uxth	r3, r3
 800a5f0:	b2db      	uxtb	r3, r3
 800a5f2:	009b      	lsls	r3, r3, #2
 800a5f4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800a5f6:	7cbb      	ldrb	r3, [r7, #18]
 800a5f8:	2b13      	cmp	r3, #19
 800a5fa:	f240 83b1 	bls.w	800ad60 <tcp_input+0x7d8>
 800a5fe:	7cbb      	ldrb	r3, [r7, #18]
 800a600:	b29a      	uxth	r2, r3
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	891b      	ldrh	r3, [r3, #8]
 800a606:	429a      	cmp	r2, r3
 800a608:	f200 83aa 	bhi.w	800ad60 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a60c:	7cbb      	ldrb	r3, [r7, #18]
 800a60e:	b29b      	uxth	r3, r3
 800a610:	3b14      	subs	r3, #20
 800a612:	b29a      	uxth	r2, r3
 800a614:	4b81      	ldr	r3, [pc, #516]	; (800a81c <tcp_input+0x294>)
 800a616:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800a618:	4b81      	ldr	r3, [pc, #516]	; (800a820 <tcp_input+0x298>)
 800a61a:	2200      	movs	r2, #0
 800a61c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	895a      	ldrh	r2, [r3, #10]
 800a622:	7cbb      	ldrb	r3, [r7, #18]
 800a624:	b29b      	uxth	r3, r3
 800a626:	429a      	cmp	r2, r3
 800a628:	d309      	bcc.n	800a63e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800a62a:	4b7c      	ldr	r3, [pc, #496]	; (800a81c <tcp_input+0x294>)
 800a62c:	881a      	ldrh	r2, [r3, #0]
 800a62e:	4b7d      	ldr	r3, [pc, #500]	; (800a824 <tcp_input+0x29c>)
 800a630:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800a632:	7cbb      	ldrb	r3, [r7, #18]
 800a634:	4619      	mov	r1, r3
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f7fe f8f8 	bl	800882c <pbuf_remove_header>
 800a63c:	e04e      	b.n	800a6dc <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d105      	bne.n	800a652 <tcp_input+0xca>
 800a646:	4b70      	ldr	r3, [pc, #448]	; (800a808 <tcp_input+0x280>)
 800a648:	22c2      	movs	r2, #194	; 0xc2
 800a64a:	4977      	ldr	r1, [pc, #476]	; (800a828 <tcp_input+0x2a0>)
 800a64c:	4870      	ldr	r0, [pc, #448]	; (800a810 <tcp_input+0x288>)
 800a64e:	f007 fb6b 	bl	8011d28 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800a652:	2114      	movs	r1, #20
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f7fe f8e9 	bl	800882c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	895a      	ldrh	r2, [r3, #10]
 800a65e:	4b71      	ldr	r3, [pc, #452]	; (800a824 <tcp_input+0x29c>)
 800a660:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a662:	4b6e      	ldr	r3, [pc, #440]	; (800a81c <tcp_input+0x294>)
 800a664:	881a      	ldrh	r2, [r3, #0]
 800a666:	4b6f      	ldr	r3, [pc, #444]	; (800a824 <tcp_input+0x29c>)
 800a668:	881b      	ldrh	r3, [r3, #0]
 800a66a:	1ad3      	subs	r3, r2, r3
 800a66c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800a66e:	4b6d      	ldr	r3, [pc, #436]	; (800a824 <tcp_input+0x29c>)
 800a670:	881b      	ldrh	r3, [r3, #0]
 800a672:	4619      	mov	r1, r3
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f7fe f8d9 	bl	800882c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	895b      	ldrh	r3, [r3, #10]
 800a680:	8a3a      	ldrh	r2, [r7, #16]
 800a682:	429a      	cmp	r2, r3
 800a684:	f200 836e 	bhi.w	800ad64 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	685b      	ldr	r3, [r3, #4]
 800a68e:	4a64      	ldr	r2, [pc, #400]	; (800a820 <tcp_input+0x298>)
 800a690:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	8a3a      	ldrh	r2, [r7, #16]
 800a698:	4611      	mov	r1, r2
 800a69a:	4618      	mov	r0, r3
 800a69c:	f7fe f8c6 	bl	800882c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	891a      	ldrh	r2, [r3, #8]
 800a6a4:	8a3b      	ldrh	r3, [r7, #16]
 800a6a6:	1ad3      	subs	r3, r2, r3
 800a6a8:	b29a      	uxth	r2, r3
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	895b      	ldrh	r3, [r3, #10]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d005      	beq.n	800a6c2 <tcp_input+0x13a>
 800a6b6:	4b54      	ldr	r3, [pc, #336]	; (800a808 <tcp_input+0x280>)
 800a6b8:	22df      	movs	r2, #223	; 0xdf
 800a6ba:	495c      	ldr	r1, [pc, #368]	; (800a82c <tcp_input+0x2a4>)
 800a6bc:	4854      	ldr	r0, [pc, #336]	; (800a810 <tcp_input+0x288>)
 800a6be:	f007 fb33 	bl	8011d28 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	891a      	ldrh	r2, [r3, #8]
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	891b      	ldrh	r3, [r3, #8]
 800a6cc:	429a      	cmp	r2, r3
 800a6ce:	d005      	beq.n	800a6dc <tcp_input+0x154>
 800a6d0:	4b4d      	ldr	r3, [pc, #308]	; (800a808 <tcp_input+0x280>)
 800a6d2:	22e0      	movs	r2, #224	; 0xe0
 800a6d4:	4956      	ldr	r1, [pc, #344]	; (800a830 <tcp_input+0x2a8>)
 800a6d6:	484e      	ldr	r0, [pc, #312]	; (800a810 <tcp_input+0x288>)
 800a6d8:	f007 fb26 	bl	8011d28 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800a6dc:	4b4d      	ldr	r3, [pc, #308]	; (800a814 <tcp_input+0x28c>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	881b      	ldrh	r3, [r3, #0]
 800a6e2:	b29b      	uxth	r3, r3
 800a6e4:	4a4b      	ldr	r2, [pc, #300]	; (800a814 <tcp_input+0x28c>)
 800a6e6:	6814      	ldr	r4, [r2, #0]
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f7fc fdc7 	bl	800727c <lwip_htons>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800a6f2:	4b48      	ldr	r3, [pc, #288]	; (800a814 <tcp_input+0x28c>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	885b      	ldrh	r3, [r3, #2]
 800a6f8:	b29b      	uxth	r3, r3
 800a6fa:	4a46      	ldr	r2, [pc, #280]	; (800a814 <tcp_input+0x28c>)
 800a6fc:	6814      	ldr	r4, [r2, #0]
 800a6fe:	4618      	mov	r0, r3
 800a700:	f7fc fdbc 	bl	800727c <lwip_htons>
 800a704:	4603      	mov	r3, r0
 800a706:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a708:	4b42      	ldr	r3, [pc, #264]	; (800a814 <tcp_input+0x28c>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	685b      	ldr	r3, [r3, #4]
 800a70e:	4a41      	ldr	r2, [pc, #260]	; (800a814 <tcp_input+0x28c>)
 800a710:	6814      	ldr	r4, [r2, #0]
 800a712:	4618      	mov	r0, r3
 800a714:	f7fc fdc7 	bl	80072a6 <lwip_htonl>
 800a718:	4603      	mov	r3, r0
 800a71a:	6063      	str	r3, [r4, #4]
 800a71c:	6863      	ldr	r3, [r4, #4]
 800a71e:	4a45      	ldr	r2, [pc, #276]	; (800a834 <tcp_input+0x2ac>)
 800a720:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a722:	4b3c      	ldr	r3, [pc, #240]	; (800a814 <tcp_input+0x28c>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	689b      	ldr	r3, [r3, #8]
 800a728:	4a3a      	ldr	r2, [pc, #232]	; (800a814 <tcp_input+0x28c>)
 800a72a:	6814      	ldr	r4, [r2, #0]
 800a72c:	4618      	mov	r0, r3
 800a72e:	f7fc fdba 	bl	80072a6 <lwip_htonl>
 800a732:	4603      	mov	r3, r0
 800a734:	60a3      	str	r3, [r4, #8]
 800a736:	68a3      	ldr	r3, [r4, #8]
 800a738:	4a3f      	ldr	r2, [pc, #252]	; (800a838 <tcp_input+0x2b0>)
 800a73a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a73c:	4b35      	ldr	r3, [pc, #212]	; (800a814 <tcp_input+0x28c>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	89db      	ldrh	r3, [r3, #14]
 800a742:	b29b      	uxth	r3, r3
 800a744:	4a33      	ldr	r2, [pc, #204]	; (800a814 <tcp_input+0x28c>)
 800a746:	6814      	ldr	r4, [r2, #0]
 800a748:	4618      	mov	r0, r3
 800a74a:	f7fc fd97 	bl	800727c <lwip_htons>
 800a74e:	4603      	mov	r3, r0
 800a750:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800a752:	4b30      	ldr	r3, [pc, #192]	; (800a814 <tcp_input+0x28c>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	899b      	ldrh	r3, [r3, #12]
 800a758:	b29b      	uxth	r3, r3
 800a75a:	4618      	mov	r0, r3
 800a75c:	f7fc fd8e 	bl	800727c <lwip_htons>
 800a760:	4603      	mov	r3, r0
 800a762:	b2db      	uxtb	r3, r3
 800a764:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a768:	b2da      	uxtb	r2, r3
 800a76a:	4b34      	ldr	r3, [pc, #208]	; (800a83c <tcp_input+0x2b4>)
 800a76c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	891a      	ldrh	r2, [r3, #8]
 800a772:	4b33      	ldr	r3, [pc, #204]	; (800a840 <tcp_input+0x2b8>)
 800a774:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800a776:	4b31      	ldr	r3, [pc, #196]	; (800a83c <tcp_input+0x2b4>)
 800a778:	781b      	ldrb	r3, [r3, #0]
 800a77a:	f003 0303 	and.w	r3, r3, #3
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d00c      	beq.n	800a79c <tcp_input+0x214>
    tcplen++;
 800a782:	4b2f      	ldr	r3, [pc, #188]	; (800a840 <tcp_input+0x2b8>)
 800a784:	881b      	ldrh	r3, [r3, #0]
 800a786:	3301      	adds	r3, #1
 800a788:	b29a      	uxth	r2, r3
 800a78a:	4b2d      	ldr	r3, [pc, #180]	; (800a840 <tcp_input+0x2b8>)
 800a78c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	891a      	ldrh	r2, [r3, #8]
 800a792:	4b2b      	ldr	r3, [pc, #172]	; (800a840 <tcp_input+0x2b8>)
 800a794:	881b      	ldrh	r3, [r3, #0]
 800a796:	429a      	cmp	r2, r3
 800a798:	f200 82e6 	bhi.w	800ad68 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800a79c:	2300      	movs	r3, #0
 800a79e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a7a0:	4b28      	ldr	r3, [pc, #160]	; (800a844 <tcp_input+0x2bc>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	61fb      	str	r3, [r7, #28]
 800a7a6:	e09d      	b.n	800a8e4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a7a8:	69fb      	ldr	r3, [r7, #28]
 800a7aa:	7d1b      	ldrb	r3, [r3, #20]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d105      	bne.n	800a7bc <tcp_input+0x234>
 800a7b0:	4b15      	ldr	r3, [pc, #84]	; (800a808 <tcp_input+0x280>)
 800a7b2:	22fb      	movs	r2, #251	; 0xfb
 800a7b4:	4924      	ldr	r1, [pc, #144]	; (800a848 <tcp_input+0x2c0>)
 800a7b6:	4816      	ldr	r0, [pc, #88]	; (800a810 <tcp_input+0x288>)
 800a7b8:	f007 fab6 	bl	8011d28 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a7bc:	69fb      	ldr	r3, [r7, #28]
 800a7be:	7d1b      	ldrb	r3, [r3, #20]
 800a7c0:	2b0a      	cmp	r3, #10
 800a7c2:	d105      	bne.n	800a7d0 <tcp_input+0x248>
 800a7c4:	4b10      	ldr	r3, [pc, #64]	; (800a808 <tcp_input+0x280>)
 800a7c6:	22fc      	movs	r2, #252	; 0xfc
 800a7c8:	4920      	ldr	r1, [pc, #128]	; (800a84c <tcp_input+0x2c4>)
 800a7ca:	4811      	ldr	r0, [pc, #68]	; (800a810 <tcp_input+0x288>)
 800a7cc:	f007 faac 	bl	8011d28 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a7d0:	69fb      	ldr	r3, [r7, #28]
 800a7d2:	7d1b      	ldrb	r3, [r3, #20]
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d105      	bne.n	800a7e4 <tcp_input+0x25c>
 800a7d8:	4b0b      	ldr	r3, [pc, #44]	; (800a808 <tcp_input+0x280>)
 800a7da:	22fd      	movs	r2, #253	; 0xfd
 800a7dc:	491c      	ldr	r1, [pc, #112]	; (800a850 <tcp_input+0x2c8>)
 800a7de:	480c      	ldr	r0, [pc, #48]	; (800a810 <tcp_input+0x288>)
 800a7e0:	f007 faa2 	bl	8011d28 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a7e4:	69fb      	ldr	r3, [r7, #28]
 800a7e6:	7a1b      	ldrb	r3, [r3, #8]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d033      	beq.n	800a854 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a7ec:	69fb      	ldr	r3, [r7, #28]
 800a7ee:	7a1a      	ldrb	r2, [r3, #8]
 800a7f0:	4b09      	ldr	r3, [pc, #36]	; (800a818 <tcp_input+0x290>)
 800a7f2:	685b      	ldr	r3, [r3, #4]
 800a7f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a7f8:	3301      	adds	r3, #1
 800a7fa:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	d029      	beq.n	800a854 <tcp_input+0x2cc>
      prev = pcb;
 800a800:	69fb      	ldr	r3, [r7, #28]
 800a802:	61bb      	str	r3, [r7, #24]
      continue;
 800a804:	e06b      	b.n	800a8de <tcp_input+0x356>
 800a806:	bf00      	nop
 800a808:	08014f48 	.word	0x08014f48
 800a80c:	08014f7c 	.word	0x08014f7c
 800a810:	08014f94 	.word	0x08014f94
 800a814:	2000a7f8 	.word	0x2000a7f8
 800a818:	200050a0 	.word	0x200050a0
 800a81c:	2000a7fc 	.word	0x2000a7fc
 800a820:	2000a800 	.word	0x2000a800
 800a824:	2000a7fe 	.word	0x2000a7fe
 800a828:	08014fbc 	.word	0x08014fbc
 800a82c:	08014fcc 	.word	0x08014fcc
 800a830:	08014fd8 	.word	0x08014fd8
 800a834:	2000a808 	.word	0x2000a808
 800a838:	2000a80c 	.word	0x2000a80c
 800a83c:	2000a814 	.word	0x2000a814
 800a840:	2000a812 	.word	0x2000a812
 800a844:	2000a7dc 	.word	0x2000a7dc
 800a848:	08014ff8 	.word	0x08014ff8
 800a84c:	08015020 	.word	0x08015020
 800a850:	0801504c 	.word	0x0801504c
    }

    if (pcb->remote_port == tcphdr->src &&
 800a854:	69fb      	ldr	r3, [r7, #28]
 800a856:	8b1a      	ldrh	r2, [r3, #24]
 800a858:	4b72      	ldr	r3, [pc, #456]	; (800aa24 <tcp_input+0x49c>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	881b      	ldrh	r3, [r3, #0]
 800a85e:	b29b      	uxth	r3, r3
 800a860:	429a      	cmp	r2, r3
 800a862:	d13a      	bne.n	800a8da <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800a864:	69fb      	ldr	r3, [r7, #28]
 800a866:	8ada      	ldrh	r2, [r3, #22]
 800a868:	4b6e      	ldr	r3, [pc, #440]	; (800aa24 <tcp_input+0x49c>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	885b      	ldrh	r3, [r3, #2]
 800a86e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800a870:	429a      	cmp	r2, r3
 800a872:	d132      	bne.n	800a8da <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a874:	69fb      	ldr	r3, [r7, #28]
 800a876:	685a      	ldr	r2, [r3, #4]
 800a878:	4b6b      	ldr	r3, [pc, #428]	; (800aa28 <tcp_input+0x4a0>)
 800a87a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800a87c:	429a      	cmp	r2, r3
 800a87e:	d12c      	bne.n	800a8da <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a880:	69fb      	ldr	r3, [r7, #28]
 800a882:	681a      	ldr	r2, [r3, #0]
 800a884:	4b68      	ldr	r3, [pc, #416]	; (800aa28 <tcp_input+0x4a0>)
 800a886:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a888:	429a      	cmp	r2, r3
 800a88a:	d126      	bne.n	800a8da <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a88c:	69fb      	ldr	r3, [r7, #28]
 800a88e:	68db      	ldr	r3, [r3, #12]
 800a890:	69fa      	ldr	r2, [r7, #28]
 800a892:	429a      	cmp	r2, r3
 800a894:	d106      	bne.n	800a8a4 <tcp_input+0x31c>
 800a896:	4b65      	ldr	r3, [pc, #404]	; (800aa2c <tcp_input+0x4a4>)
 800a898:	f240 120d 	movw	r2, #269	; 0x10d
 800a89c:	4964      	ldr	r1, [pc, #400]	; (800aa30 <tcp_input+0x4a8>)
 800a89e:	4865      	ldr	r0, [pc, #404]	; (800aa34 <tcp_input+0x4ac>)
 800a8a0:	f007 fa42 	bl	8011d28 <iprintf>
      if (prev != NULL) {
 800a8a4:	69bb      	ldr	r3, [r7, #24]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d00a      	beq.n	800a8c0 <tcp_input+0x338>
        prev->next = pcb->next;
 800a8aa:	69fb      	ldr	r3, [r7, #28]
 800a8ac:	68da      	ldr	r2, [r3, #12]
 800a8ae:	69bb      	ldr	r3, [r7, #24]
 800a8b0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800a8b2:	4b61      	ldr	r3, [pc, #388]	; (800aa38 <tcp_input+0x4b0>)
 800a8b4:	681a      	ldr	r2, [r3, #0]
 800a8b6:	69fb      	ldr	r3, [r7, #28]
 800a8b8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800a8ba:	4a5f      	ldr	r2, [pc, #380]	; (800aa38 <tcp_input+0x4b0>)
 800a8bc:	69fb      	ldr	r3, [r7, #28]
 800a8be:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a8c0:	69fb      	ldr	r3, [r7, #28]
 800a8c2:	68db      	ldr	r3, [r3, #12]
 800a8c4:	69fa      	ldr	r2, [r7, #28]
 800a8c6:	429a      	cmp	r2, r3
 800a8c8:	d111      	bne.n	800a8ee <tcp_input+0x366>
 800a8ca:	4b58      	ldr	r3, [pc, #352]	; (800aa2c <tcp_input+0x4a4>)
 800a8cc:	f240 1215 	movw	r2, #277	; 0x115
 800a8d0:	495a      	ldr	r1, [pc, #360]	; (800aa3c <tcp_input+0x4b4>)
 800a8d2:	4858      	ldr	r0, [pc, #352]	; (800aa34 <tcp_input+0x4ac>)
 800a8d4:	f007 fa28 	bl	8011d28 <iprintf>
      break;
 800a8d8:	e009      	b.n	800a8ee <tcp_input+0x366>
    }
    prev = pcb;
 800a8da:	69fb      	ldr	r3, [r7, #28]
 800a8dc:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a8de:	69fb      	ldr	r3, [r7, #28]
 800a8e0:	68db      	ldr	r3, [r3, #12]
 800a8e2:	61fb      	str	r3, [r7, #28]
 800a8e4:	69fb      	ldr	r3, [r7, #28]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	f47f af5e 	bne.w	800a7a8 <tcp_input+0x220>
 800a8ec:	e000      	b.n	800a8f0 <tcp_input+0x368>
      break;
 800a8ee:	bf00      	nop
  }

  if (pcb == NULL) {
 800a8f0:	69fb      	ldr	r3, [r7, #28]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	f040 80aa 	bne.w	800aa4c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a8f8:	4b51      	ldr	r3, [pc, #324]	; (800aa40 <tcp_input+0x4b8>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	61fb      	str	r3, [r7, #28]
 800a8fe:	e03f      	b.n	800a980 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a900:	69fb      	ldr	r3, [r7, #28]
 800a902:	7d1b      	ldrb	r3, [r3, #20]
 800a904:	2b0a      	cmp	r3, #10
 800a906:	d006      	beq.n	800a916 <tcp_input+0x38e>
 800a908:	4b48      	ldr	r3, [pc, #288]	; (800aa2c <tcp_input+0x4a4>)
 800a90a:	f240 121f 	movw	r2, #287	; 0x11f
 800a90e:	494d      	ldr	r1, [pc, #308]	; (800aa44 <tcp_input+0x4bc>)
 800a910:	4848      	ldr	r0, [pc, #288]	; (800aa34 <tcp_input+0x4ac>)
 800a912:	f007 fa09 	bl	8011d28 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a916:	69fb      	ldr	r3, [r7, #28]
 800a918:	7a1b      	ldrb	r3, [r3, #8]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d009      	beq.n	800a932 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a91e:	69fb      	ldr	r3, [r7, #28]
 800a920:	7a1a      	ldrb	r2, [r3, #8]
 800a922:	4b41      	ldr	r3, [pc, #260]	; (800aa28 <tcp_input+0x4a0>)
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a92a:	3301      	adds	r3, #1
 800a92c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a92e:	429a      	cmp	r2, r3
 800a930:	d122      	bne.n	800a978 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800a932:	69fb      	ldr	r3, [r7, #28]
 800a934:	8b1a      	ldrh	r2, [r3, #24]
 800a936:	4b3b      	ldr	r3, [pc, #236]	; (800aa24 <tcp_input+0x49c>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	881b      	ldrh	r3, [r3, #0]
 800a93c:	b29b      	uxth	r3, r3
 800a93e:	429a      	cmp	r2, r3
 800a940:	d11b      	bne.n	800a97a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800a942:	69fb      	ldr	r3, [r7, #28]
 800a944:	8ada      	ldrh	r2, [r3, #22]
 800a946:	4b37      	ldr	r3, [pc, #220]	; (800aa24 <tcp_input+0x49c>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	885b      	ldrh	r3, [r3, #2]
 800a94c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800a94e:	429a      	cmp	r2, r3
 800a950:	d113      	bne.n	800a97a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a952:	69fb      	ldr	r3, [r7, #28]
 800a954:	685a      	ldr	r2, [r3, #4]
 800a956:	4b34      	ldr	r3, [pc, #208]	; (800aa28 <tcp_input+0x4a0>)
 800a958:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800a95a:	429a      	cmp	r2, r3
 800a95c:	d10d      	bne.n	800a97a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a95e:	69fb      	ldr	r3, [r7, #28]
 800a960:	681a      	ldr	r2, [r3, #0]
 800a962:	4b31      	ldr	r3, [pc, #196]	; (800aa28 <tcp_input+0x4a0>)
 800a964:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a966:	429a      	cmp	r2, r3
 800a968:	d107      	bne.n	800a97a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800a96a:	69f8      	ldr	r0, [r7, #28]
 800a96c:	f000 fb56 	bl	800b01c <tcp_timewait_input>
        }
        pbuf_free(p);
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f7fd ffe1 	bl	8008938 <pbuf_free>
        return;
 800a976:	e1fd      	b.n	800ad74 <tcp_input+0x7ec>
        continue;
 800a978:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a97a:	69fb      	ldr	r3, [r7, #28]
 800a97c:	68db      	ldr	r3, [r3, #12]
 800a97e:	61fb      	str	r3, [r7, #28]
 800a980:	69fb      	ldr	r3, [r7, #28]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d1bc      	bne.n	800a900 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800a986:	2300      	movs	r3, #0
 800a988:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a98a:	4b2f      	ldr	r3, [pc, #188]	; (800aa48 <tcp_input+0x4c0>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	617b      	str	r3, [r7, #20]
 800a990:	e02a      	b.n	800a9e8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	7a1b      	ldrb	r3, [r3, #8]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d00c      	beq.n	800a9b4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	7a1a      	ldrb	r2, [r3, #8]
 800a99e:	4b22      	ldr	r3, [pc, #136]	; (800aa28 <tcp_input+0x4a0>)
 800a9a0:	685b      	ldr	r3, [r3, #4]
 800a9a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a9a6:	3301      	adds	r3, #1
 800a9a8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	d002      	beq.n	800a9b4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	61bb      	str	r3, [r7, #24]
        continue;
 800a9b2:	e016      	b.n	800a9e2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	8ada      	ldrh	r2, [r3, #22]
 800a9b8:	4b1a      	ldr	r3, [pc, #104]	; (800aa24 <tcp_input+0x49c>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	885b      	ldrh	r3, [r3, #2]
 800a9be:	b29b      	uxth	r3, r3
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d10c      	bne.n	800a9de <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a9c4:	697b      	ldr	r3, [r7, #20]
 800a9c6:	681a      	ldr	r2, [r3, #0]
 800a9c8:	4b17      	ldr	r3, [pc, #92]	; (800aa28 <tcp_input+0x4a0>)
 800a9ca:	695b      	ldr	r3, [r3, #20]
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	d00f      	beq.n	800a9f0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800a9d0:	697b      	ldr	r3, [r7, #20]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d00d      	beq.n	800a9f2 <tcp_input+0x46a>
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d009      	beq.n	800a9f2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800a9de:	697b      	ldr	r3, [r7, #20]
 800a9e0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	68db      	ldr	r3, [r3, #12]
 800a9e6:	617b      	str	r3, [r7, #20]
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d1d1      	bne.n	800a992 <tcp_input+0x40a>
 800a9ee:	e000      	b.n	800a9f2 <tcp_input+0x46a>
            break;
 800a9f0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d029      	beq.n	800aa4c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800a9f8:	69bb      	ldr	r3, [r7, #24]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d00a      	beq.n	800aa14 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	68da      	ldr	r2, [r3, #12]
 800aa02:	69bb      	ldr	r3, [r7, #24]
 800aa04:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800aa06:	4b10      	ldr	r3, [pc, #64]	; (800aa48 <tcp_input+0x4c0>)
 800aa08:	681a      	ldr	r2, [r3, #0]
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800aa0e:	4a0e      	ldr	r2, [pc, #56]	; (800aa48 <tcp_input+0x4c0>)
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800aa14:	6978      	ldr	r0, [r7, #20]
 800aa16:	f000 fa03 	bl	800ae20 <tcp_listen_input>
      }
      pbuf_free(p);
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f7fd ff8c 	bl	8008938 <pbuf_free>
      return;
 800aa20:	e1a8      	b.n	800ad74 <tcp_input+0x7ec>
 800aa22:	bf00      	nop
 800aa24:	2000a7f8 	.word	0x2000a7f8
 800aa28:	200050a0 	.word	0x200050a0
 800aa2c:	08014f48 	.word	0x08014f48
 800aa30:	08015074 	.word	0x08015074
 800aa34:	08014f94 	.word	0x08014f94
 800aa38:	2000a7dc 	.word	0x2000a7dc
 800aa3c:	080150a0 	.word	0x080150a0
 800aa40:	2000a7e0 	.word	0x2000a7e0
 800aa44:	080150cc 	.word	0x080150cc
 800aa48:	2000a7d8 	.word	0x2000a7d8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800aa4c:	69fb      	ldr	r3, [r7, #28]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	f000 8158 	beq.w	800ad04 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800aa54:	4b95      	ldr	r3, [pc, #596]	; (800acac <tcp_input+0x724>)
 800aa56:	2200      	movs	r2, #0
 800aa58:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	891a      	ldrh	r2, [r3, #8]
 800aa5e:	4b93      	ldr	r3, [pc, #588]	; (800acac <tcp_input+0x724>)
 800aa60:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800aa62:	4a92      	ldr	r2, [pc, #584]	; (800acac <tcp_input+0x724>)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800aa68:	4b91      	ldr	r3, [pc, #580]	; (800acb0 <tcp_input+0x728>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	4a8f      	ldr	r2, [pc, #572]	; (800acac <tcp_input+0x724>)
 800aa6e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800aa70:	4b90      	ldr	r3, [pc, #576]	; (800acb4 <tcp_input+0x72c>)
 800aa72:	2200      	movs	r2, #0
 800aa74:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800aa76:	4b90      	ldr	r3, [pc, #576]	; (800acb8 <tcp_input+0x730>)
 800aa78:	2200      	movs	r2, #0
 800aa7a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800aa7c:	4b8f      	ldr	r3, [pc, #572]	; (800acbc <tcp_input+0x734>)
 800aa7e:	2200      	movs	r2, #0
 800aa80:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800aa82:	4b8f      	ldr	r3, [pc, #572]	; (800acc0 <tcp_input+0x738>)
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	f003 0308 	and.w	r3, r3, #8
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d006      	beq.n	800aa9c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	7b5b      	ldrb	r3, [r3, #13]
 800aa92:	f043 0301 	orr.w	r3, r3, #1
 800aa96:	b2da      	uxtb	r2, r3
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800aa9c:	69fb      	ldr	r3, [r7, #28]
 800aa9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d017      	beq.n	800aad4 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800aaa4:	69f8      	ldr	r0, [r7, #28]
 800aaa6:	f7ff f929 	bl	8009cfc <tcp_process_refused_data>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	f113 0f0d 	cmn.w	r3, #13
 800aab0:	d007      	beq.n	800aac2 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800aab2:	69fb      	ldr	r3, [r7, #28]
 800aab4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d00c      	beq.n	800aad4 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800aaba:	4b82      	ldr	r3, [pc, #520]	; (800acc4 <tcp_input+0x73c>)
 800aabc:	881b      	ldrh	r3, [r3, #0]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d008      	beq.n	800aad4 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800aac2:	69fb      	ldr	r3, [r7, #28]
 800aac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	f040 80e3 	bne.w	800ac92 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800aacc:	69f8      	ldr	r0, [r7, #28]
 800aace:	f003 f9ad 	bl	800de2c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800aad2:	e0de      	b.n	800ac92 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800aad4:	4a7c      	ldr	r2, [pc, #496]	; (800acc8 <tcp_input+0x740>)
 800aad6:	69fb      	ldr	r3, [r7, #28]
 800aad8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800aada:	69f8      	ldr	r0, [r7, #28]
 800aadc:	f000 fb18 	bl	800b110 <tcp_process>
 800aae0:	4603      	mov	r3, r0
 800aae2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800aae4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aae8:	f113 0f0d 	cmn.w	r3, #13
 800aaec:	f000 80d3 	beq.w	800ac96 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800aaf0:	4b71      	ldr	r3, [pc, #452]	; (800acb8 <tcp_input+0x730>)
 800aaf2:	781b      	ldrb	r3, [r3, #0]
 800aaf4:	f003 0308 	and.w	r3, r3, #8
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d015      	beq.n	800ab28 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800aafc:	69fb      	ldr	r3, [r7, #28]
 800aafe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d008      	beq.n	800ab18 <tcp_input+0x590>
 800ab06:	69fb      	ldr	r3, [r7, #28]
 800ab08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab0c:	69fa      	ldr	r2, [r7, #28]
 800ab0e:	6912      	ldr	r2, [r2, #16]
 800ab10:	f06f 010d 	mvn.w	r1, #13
 800ab14:	4610      	mov	r0, r2
 800ab16:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ab18:	69f9      	ldr	r1, [r7, #28]
 800ab1a:	486c      	ldr	r0, [pc, #432]	; (800accc <tcp_input+0x744>)
 800ab1c:	f7ff fbbc 	bl	800a298 <tcp_pcb_remove>
        tcp_free(pcb);
 800ab20:	69f8      	ldr	r0, [r7, #28]
 800ab22:	f7fe f9a9 	bl	8008e78 <tcp_free>
 800ab26:	e0da      	b.n	800acde <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800ab2c:	4b63      	ldr	r3, [pc, #396]	; (800acbc <tcp_input+0x734>)
 800ab2e:	881b      	ldrh	r3, [r3, #0]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d01d      	beq.n	800ab70 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800ab34:	4b61      	ldr	r3, [pc, #388]	; (800acbc <tcp_input+0x734>)
 800ab36:	881b      	ldrh	r3, [r3, #0]
 800ab38:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800ab3a:	69fb      	ldr	r3, [r7, #28]
 800ab3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d00a      	beq.n	800ab5a <tcp_input+0x5d2>
 800ab44:	69fb      	ldr	r3, [r7, #28]
 800ab46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab4a:	69fa      	ldr	r2, [r7, #28]
 800ab4c:	6910      	ldr	r0, [r2, #16]
 800ab4e:	89fa      	ldrh	r2, [r7, #14]
 800ab50:	69f9      	ldr	r1, [r7, #28]
 800ab52:	4798      	blx	r3
 800ab54:	4603      	mov	r3, r0
 800ab56:	74fb      	strb	r3, [r7, #19]
 800ab58:	e001      	b.n	800ab5e <tcp_input+0x5d6>
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ab5e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ab62:	f113 0f0d 	cmn.w	r3, #13
 800ab66:	f000 8098 	beq.w	800ac9a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800ab6a:	4b54      	ldr	r3, [pc, #336]	; (800acbc <tcp_input+0x734>)
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800ab70:	69f8      	ldr	r0, [r7, #28]
 800ab72:	f000 f915 	bl	800ada0 <tcp_input_delayed_close>
 800ab76:	4603      	mov	r3, r0
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	f040 8090 	bne.w	800ac9e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800ab7e:	4b4d      	ldr	r3, [pc, #308]	; (800acb4 <tcp_input+0x72c>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d041      	beq.n	800ac0a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800ab86:	69fb      	ldr	r3, [r7, #28]
 800ab88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d006      	beq.n	800ab9c <tcp_input+0x614>
 800ab8e:	4b50      	ldr	r3, [pc, #320]	; (800acd0 <tcp_input+0x748>)
 800ab90:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800ab94:	494f      	ldr	r1, [pc, #316]	; (800acd4 <tcp_input+0x74c>)
 800ab96:	4850      	ldr	r0, [pc, #320]	; (800acd8 <tcp_input+0x750>)
 800ab98:	f007 f8c6 	bl	8011d28 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800ab9c:	69fb      	ldr	r3, [r7, #28]
 800ab9e:	8b5b      	ldrh	r3, [r3, #26]
 800aba0:	f003 0310 	and.w	r3, r3, #16
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d008      	beq.n	800abba <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800aba8:	4b42      	ldr	r3, [pc, #264]	; (800acb4 <tcp_input+0x72c>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	4618      	mov	r0, r3
 800abae:	f7fd fec3 	bl	8008938 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800abb2:	69f8      	ldr	r0, [r7, #28]
 800abb4:	f7fe fc48 	bl	8009448 <tcp_abort>
            goto aborted;
 800abb8:	e091      	b.n	800acde <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800abba:	69fb      	ldr	r3, [r7, #28]
 800abbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d00c      	beq.n	800abde <tcp_input+0x656>
 800abc4:	69fb      	ldr	r3, [r7, #28]
 800abc6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800abca:	69fb      	ldr	r3, [r7, #28]
 800abcc:	6918      	ldr	r0, [r3, #16]
 800abce:	4b39      	ldr	r3, [pc, #228]	; (800acb4 <tcp_input+0x72c>)
 800abd0:	681a      	ldr	r2, [r3, #0]
 800abd2:	2300      	movs	r3, #0
 800abd4:	69f9      	ldr	r1, [r7, #28]
 800abd6:	47a0      	blx	r4
 800abd8:	4603      	mov	r3, r0
 800abda:	74fb      	strb	r3, [r7, #19]
 800abdc:	e008      	b.n	800abf0 <tcp_input+0x668>
 800abde:	4b35      	ldr	r3, [pc, #212]	; (800acb4 <tcp_input+0x72c>)
 800abe0:	681a      	ldr	r2, [r3, #0]
 800abe2:	2300      	movs	r3, #0
 800abe4:	69f9      	ldr	r1, [r7, #28]
 800abe6:	2000      	movs	r0, #0
 800abe8:	f7ff f95e 	bl	8009ea8 <tcp_recv_null>
 800abec:	4603      	mov	r3, r0
 800abee:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800abf0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800abf4:	f113 0f0d 	cmn.w	r3, #13
 800abf8:	d053      	beq.n	800aca2 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800abfa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d003      	beq.n	800ac0a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800ac02:	4b2c      	ldr	r3, [pc, #176]	; (800acb4 <tcp_input+0x72c>)
 800ac04:	681a      	ldr	r2, [r3, #0]
 800ac06:	69fb      	ldr	r3, [r7, #28]
 800ac08:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800ac0a:	4b2b      	ldr	r3, [pc, #172]	; (800acb8 <tcp_input+0x730>)
 800ac0c:	781b      	ldrb	r3, [r3, #0]
 800ac0e:	f003 0320 	and.w	r3, r3, #32
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d030      	beq.n	800ac78 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800ac16:	69fb      	ldr	r3, [r7, #28]
 800ac18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d009      	beq.n	800ac32 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800ac1e:	69fb      	ldr	r3, [r7, #28]
 800ac20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac22:	7b5a      	ldrb	r2, [r3, #13]
 800ac24:	69fb      	ldr	r3, [r7, #28]
 800ac26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac28:	f042 0220 	orr.w	r2, r2, #32
 800ac2c:	b2d2      	uxtb	r2, r2
 800ac2e:	735a      	strb	r2, [r3, #13]
 800ac30:	e022      	b.n	800ac78 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ac32:	69fb      	ldr	r3, [r7, #28]
 800ac34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac36:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ac3a:	d005      	beq.n	800ac48 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800ac3c:	69fb      	ldr	r3, [r7, #28]
 800ac3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac40:	3301      	adds	r3, #1
 800ac42:	b29a      	uxth	r2, r3
 800ac44:	69fb      	ldr	r3, [r7, #28]
 800ac46:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800ac48:	69fb      	ldr	r3, [r7, #28]
 800ac4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d00b      	beq.n	800ac6a <tcp_input+0x6e2>
 800ac52:	69fb      	ldr	r3, [r7, #28]
 800ac54:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ac58:	69fb      	ldr	r3, [r7, #28]
 800ac5a:	6918      	ldr	r0, [r3, #16]
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	2200      	movs	r2, #0
 800ac60:	69f9      	ldr	r1, [r7, #28]
 800ac62:	47a0      	blx	r4
 800ac64:	4603      	mov	r3, r0
 800ac66:	74fb      	strb	r3, [r7, #19]
 800ac68:	e001      	b.n	800ac6e <tcp_input+0x6e6>
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ac6e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ac72:	f113 0f0d 	cmn.w	r3, #13
 800ac76:	d016      	beq.n	800aca6 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800ac78:	4b13      	ldr	r3, [pc, #76]	; (800acc8 <tcp_input+0x740>)
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800ac7e:	69f8      	ldr	r0, [r7, #28]
 800ac80:	f000 f88e 	bl	800ada0 <tcp_input_delayed_close>
 800ac84:	4603      	mov	r3, r0
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d128      	bne.n	800acdc <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800ac8a:	69f8      	ldr	r0, [r7, #28]
 800ac8c:	f002 fac8 	bl	800d220 <tcp_output>
 800ac90:	e025      	b.n	800acde <tcp_input+0x756>
        goto aborted;
 800ac92:	bf00      	nop
 800ac94:	e023      	b.n	800acde <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800ac96:	bf00      	nop
 800ac98:	e021      	b.n	800acde <tcp_input+0x756>
              goto aborted;
 800ac9a:	bf00      	nop
 800ac9c:	e01f      	b.n	800acde <tcp_input+0x756>
          goto aborted;
 800ac9e:	bf00      	nop
 800aca0:	e01d      	b.n	800acde <tcp_input+0x756>
            goto aborted;
 800aca2:	bf00      	nop
 800aca4:	e01b      	b.n	800acde <tcp_input+0x756>
              goto aborted;
 800aca6:	bf00      	nop
 800aca8:	e019      	b.n	800acde <tcp_input+0x756>
 800acaa:	bf00      	nop
 800acac:	2000a7e8 	.word	0x2000a7e8
 800acb0:	2000a7f8 	.word	0x2000a7f8
 800acb4:	2000a818 	.word	0x2000a818
 800acb8:	2000a815 	.word	0x2000a815
 800acbc:	2000a810 	.word	0x2000a810
 800acc0:	2000a814 	.word	0x2000a814
 800acc4:	2000a812 	.word	0x2000a812
 800acc8:	2000a81c 	.word	0x2000a81c
 800accc:	2000a7dc 	.word	0x2000a7dc
 800acd0:	08014f48 	.word	0x08014f48
 800acd4:	080150fc 	.word	0x080150fc
 800acd8:	08014f94 	.word	0x08014f94
          goto aborted;
 800acdc:	bf00      	nop
    tcp_input_pcb = NULL;
 800acde:	4b27      	ldr	r3, [pc, #156]	; (800ad7c <tcp_input+0x7f4>)
 800ace0:	2200      	movs	r2, #0
 800ace2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800ace4:	4b26      	ldr	r3, [pc, #152]	; (800ad80 <tcp_input+0x7f8>)
 800ace6:	2200      	movs	r2, #0
 800ace8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800acea:	4b26      	ldr	r3, [pc, #152]	; (800ad84 <tcp_input+0x7fc>)
 800acec:	685b      	ldr	r3, [r3, #4]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d03f      	beq.n	800ad72 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800acf2:	4b24      	ldr	r3, [pc, #144]	; (800ad84 <tcp_input+0x7fc>)
 800acf4:	685b      	ldr	r3, [r3, #4]
 800acf6:	4618      	mov	r0, r3
 800acf8:	f7fd fe1e 	bl	8008938 <pbuf_free>
      inseg.p = NULL;
 800acfc:	4b21      	ldr	r3, [pc, #132]	; (800ad84 <tcp_input+0x7fc>)
 800acfe:	2200      	movs	r2, #0
 800ad00:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800ad02:	e036      	b.n	800ad72 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800ad04:	4b20      	ldr	r3, [pc, #128]	; (800ad88 <tcp_input+0x800>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	899b      	ldrh	r3, [r3, #12]
 800ad0a:	b29b      	uxth	r3, r3
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f7fc fab5 	bl	800727c <lwip_htons>
 800ad12:	4603      	mov	r3, r0
 800ad14:	b2db      	uxtb	r3, r3
 800ad16:	f003 0304 	and.w	r3, r3, #4
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d118      	bne.n	800ad50 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ad1e:	4b1b      	ldr	r3, [pc, #108]	; (800ad8c <tcp_input+0x804>)
 800ad20:	6819      	ldr	r1, [r3, #0]
 800ad22:	4b1b      	ldr	r3, [pc, #108]	; (800ad90 <tcp_input+0x808>)
 800ad24:	881b      	ldrh	r3, [r3, #0]
 800ad26:	461a      	mov	r2, r3
 800ad28:	4b1a      	ldr	r3, [pc, #104]	; (800ad94 <tcp_input+0x80c>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ad2e:	4b16      	ldr	r3, [pc, #88]	; (800ad88 <tcp_input+0x800>)
 800ad30:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ad32:	885b      	ldrh	r3, [r3, #2]
 800ad34:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ad36:	4a14      	ldr	r2, [pc, #80]	; (800ad88 <tcp_input+0x800>)
 800ad38:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ad3a:	8812      	ldrh	r2, [r2, #0]
 800ad3c:	b292      	uxth	r2, r2
 800ad3e:	9202      	str	r2, [sp, #8]
 800ad40:	9301      	str	r3, [sp, #4]
 800ad42:	4b15      	ldr	r3, [pc, #84]	; (800ad98 <tcp_input+0x810>)
 800ad44:	9300      	str	r3, [sp, #0]
 800ad46:	4b15      	ldr	r3, [pc, #84]	; (800ad9c <tcp_input+0x814>)
 800ad48:	4602      	mov	r2, r0
 800ad4a:	2000      	movs	r0, #0
 800ad4c:	f003 f81c 	bl	800dd88 <tcp_rst>
    pbuf_free(p);
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f7fd fdf1 	bl	8008938 <pbuf_free>
  return;
 800ad56:	e00c      	b.n	800ad72 <tcp_input+0x7ea>
    goto dropped;
 800ad58:	bf00      	nop
 800ad5a:	e006      	b.n	800ad6a <tcp_input+0x7e2>
    goto dropped;
 800ad5c:	bf00      	nop
 800ad5e:	e004      	b.n	800ad6a <tcp_input+0x7e2>
    goto dropped;
 800ad60:	bf00      	nop
 800ad62:	e002      	b.n	800ad6a <tcp_input+0x7e2>
      goto dropped;
 800ad64:	bf00      	nop
 800ad66:	e000      	b.n	800ad6a <tcp_input+0x7e2>
      goto dropped;
 800ad68:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f7fd fde4 	bl	8008938 <pbuf_free>
 800ad70:	e000      	b.n	800ad74 <tcp_input+0x7ec>
  return;
 800ad72:	bf00      	nop
}
 800ad74:	3724      	adds	r7, #36	; 0x24
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd90      	pop	{r4, r7, pc}
 800ad7a:	bf00      	nop
 800ad7c:	2000a81c 	.word	0x2000a81c
 800ad80:	2000a818 	.word	0x2000a818
 800ad84:	2000a7e8 	.word	0x2000a7e8
 800ad88:	2000a7f8 	.word	0x2000a7f8
 800ad8c:	2000a80c 	.word	0x2000a80c
 800ad90:	2000a812 	.word	0x2000a812
 800ad94:	2000a808 	.word	0x2000a808
 800ad98:	200050b0 	.word	0x200050b0
 800ad9c:	200050b4 	.word	0x200050b4

0800ada0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b082      	sub	sp, #8
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d106      	bne.n	800adbc <tcp_input_delayed_close+0x1c>
 800adae:	4b17      	ldr	r3, [pc, #92]	; (800ae0c <tcp_input_delayed_close+0x6c>)
 800adb0:	f240 225a 	movw	r2, #602	; 0x25a
 800adb4:	4916      	ldr	r1, [pc, #88]	; (800ae10 <tcp_input_delayed_close+0x70>)
 800adb6:	4817      	ldr	r0, [pc, #92]	; (800ae14 <tcp_input_delayed_close+0x74>)
 800adb8:	f006 ffb6 	bl	8011d28 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800adbc:	4b16      	ldr	r3, [pc, #88]	; (800ae18 <tcp_input_delayed_close+0x78>)
 800adbe:	781b      	ldrb	r3, [r3, #0]
 800adc0:	f003 0310 	and.w	r3, r3, #16
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d01c      	beq.n	800ae02 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	8b5b      	ldrh	r3, [r3, #26]
 800adcc:	f003 0310 	and.w	r3, r3, #16
 800add0:	2b00      	cmp	r3, #0
 800add2:	d10d      	bne.n	800adf0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800adda:	2b00      	cmp	r3, #0
 800addc:	d008      	beq.n	800adf0 <tcp_input_delayed_close+0x50>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ade4:	687a      	ldr	r2, [r7, #4]
 800ade6:	6912      	ldr	r2, [r2, #16]
 800ade8:	f06f 010e 	mvn.w	r1, #14
 800adec:	4610      	mov	r0, r2
 800adee:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800adf0:	6879      	ldr	r1, [r7, #4]
 800adf2:	480a      	ldr	r0, [pc, #40]	; (800ae1c <tcp_input_delayed_close+0x7c>)
 800adf4:	f7ff fa50 	bl	800a298 <tcp_pcb_remove>
    tcp_free(pcb);
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f7fe f83d 	bl	8008e78 <tcp_free>
    return 1;
 800adfe:	2301      	movs	r3, #1
 800ae00:	e000      	b.n	800ae04 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800ae02:	2300      	movs	r3, #0
}
 800ae04:	4618      	mov	r0, r3
 800ae06:	3708      	adds	r7, #8
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bd80      	pop	{r7, pc}
 800ae0c:	08014f48 	.word	0x08014f48
 800ae10:	08015118 	.word	0x08015118
 800ae14:	08014f94 	.word	0x08014f94
 800ae18:	2000a815 	.word	0x2000a815
 800ae1c:	2000a7dc 	.word	0x2000a7dc

0800ae20 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800ae20:	b590      	push	{r4, r7, lr}
 800ae22:	b08b      	sub	sp, #44	; 0x2c
 800ae24:	af04      	add	r7, sp, #16
 800ae26:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800ae28:	4b6f      	ldr	r3, [pc, #444]	; (800afe8 <tcp_listen_input+0x1c8>)
 800ae2a:	781b      	ldrb	r3, [r3, #0]
 800ae2c:	f003 0304 	and.w	r3, r3, #4
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	f040 80d2 	bne.w	800afda <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d106      	bne.n	800ae4a <tcp_listen_input+0x2a>
 800ae3c:	4b6b      	ldr	r3, [pc, #428]	; (800afec <tcp_listen_input+0x1cc>)
 800ae3e:	f240 2281 	movw	r2, #641	; 0x281
 800ae42:	496b      	ldr	r1, [pc, #428]	; (800aff0 <tcp_listen_input+0x1d0>)
 800ae44:	486b      	ldr	r0, [pc, #428]	; (800aff4 <tcp_listen_input+0x1d4>)
 800ae46:	f006 ff6f 	bl	8011d28 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800ae4a:	4b67      	ldr	r3, [pc, #412]	; (800afe8 <tcp_listen_input+0x1c8>)
 800ae4c:	781b      	ldrb	r3, [r3, #0]
 800ae4e:	f003 0310 	and.w	r3, r3, #16
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d019      	beq.n	800ae8a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ae56:	4b68      	ldr	r3, [pc, #416]	; (800aff8 <tcp_listen_input+0x1d8>)
 800ae58:	6819      	ldr	r1, [r3, #0]
 800ae5a:	4b68      	ldr	r3, [pc, #416]	; (800affc <tcp_listen_input+0x1dc>)
 800ae5c:	881b      	ldrh	r3, [r3, #0]
 800ae5e:	461a      	mov	r2, r3
 800ae60:	4b67      	ldr	r3, [pc, #412]	; (800b000 <tcp_listen_input+0x1e0>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ae66:	4b67      	ldr	r3, [pc, #412]	; (800b004 <tcp_listen_input+0x1e4>)
 800ae68:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ae6a:	885b      	ldrh	r3, [r3, #2]
 800ae6c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ae6e:	4a65      	ldr	r2, [pc, #404]	; (800b004 <tcp_listen_input+0x1e4>)
 800ae70:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ae72:	8812      	ldrh	r2, [r2, #0]
 800ae74:	b292      	uxth	r2, r2
 800ae76:	9202      	str	r2, [sp, #8]
 800ae78:	9301      	str	r3, [sp, #4]
 800ae7a:	4b63      	ldr	r3, [pc, #396]	; (800b008 <tcp_listen_input+0x1e8>)
 800ae7c:	9300      	str	r3, [sp, #0]
 800ae7e:	4b63      	ldr	r3, [pc, #396]	; (800b00c <tcp_listen_input+0x1ec>)
 800ae80:	4602      	mov	r2, r0
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f002 ff80 	bl	800dd88 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800ae88:	e0a9      	b.n	800afde <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800ae8a:	4b57      	ldr	r3, [pc, #348]	; (800afe8 <tcp_listen_input+0x1c8>)
 800ae8c:	781b      	ldrb	r3, [r3, #0]
 800ae8e:	f003 0302 	and.w	r3, r3, #2
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	f000 80a3 	beq.w	800afde <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	7d5b      	ldrb	r3, [r3, #21]
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f7ff f927 	bl	800a0f0 <tcp_alloc>
 800aea2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d111      	bne.n	800aece <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	699b      	ldr	r3, [r3, #24]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d00a      	beq.n	800aec8 <tcp_listen_input+0xa8>
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	699b      	ldr	r3, [r3, #24]
 800aeb6:	687a      	ldr	r2, [r7, #4]
 800aeb8:	6910      	ldr	r0, [r2, #16]
 800aeba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aebe:	2100      	movs	r1, #0
 800aec0:	4798      	blx	r3
 800aec2:	4603      	mov	r3, r0
 800aec4:	73bb      	strb	r3, [r7, #14]
      return;
 800aec6:	e08b      	b.n	800afe0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800aec8:	23f0      	movs	r3, #240	; 0xf0
 800aeca:	73bb      	strb	r3, [r7, #14]
      return;
 800aecc:	e088      	b.n	800afe0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800aece:	4b50      	ldr	r3, [pc, #320]	; (800b010 <tcp_listen_input+0x1f0>)
 800aed0:	695a      	ldr	r2, [r3, #20]
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800aed6:	4b4e      	ldr	r3, [pc, #312]	; (800b010 <tcp_listen_input+0x1f0>)
 800aed8:	691a      	ldr	r2, [r3, #16]
 800aeda:	697b      	ldr	r3, [r7, #20]
 800aedc:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	8ada      	ldrh	r2, [r3, #22]
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800aee6:	4b47      	ldr	r3, [pc, #284]	; (800b004 <tcp_listen_input+0x1e4>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	881b      	ldrh	r3, [r3, #0]
 800aeec:	b29a      	uxth	r2, r3
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800aef2:	697b      	ldr	r3, [r7, #20]
 800aef4:	2203      	movs	r2, #3
 800aef6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800aef8:	4b41      	ldr	r3, [pc, #260]	; (800b000 <tcp_listen_input+0x1e0>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	1c5a      	adds	r2, r3, #1
 800aefe:	697b      	ldr	r3, [r7, #20]
 800af00:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800af0a:	6978      	ldr	r0, [r7, #20]
 800af0c:	f7ff fa58 	bl	800a3c0 <tcp_next_iss>
 800af10:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	693a      	ldr	r2, [r7, #16]
 800af16:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	693a      	ldr	r2, [r7, #16]
 800af1c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	693a      	ldr	r2, [r7, #16]
 800af22:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	693a      	ldr	r2, [r7, #16]
 800af28:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800af2a:	4b35      	ldr	r3, [pc, #212]	; (800b000 <tcp_listen_input+0x1e0>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	1e5a      	subs	r2, r3, #1
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	691a      	ldr	r2, [r3, #16]
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	687a      	ldr	r2, [r7, #4]
 800af40:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	7a5b      	ldrb	r3, [r3, #9]
 800af46:	f003 030c 	and.w	r3, r3, #12
 800af4a:	b2da      	uxtb	r2, r3
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	7a1a      	ldrb	r2, [r3, #8]
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800af58:	4b2e      	ldr	r3, [pc, #184]	; (800b014 <tcp_listen_input+0x1f4>)
 800af5a:	681a      	ldr	r2, [r3, #0]
 800af5c:	697b      	ldr	r3, [r7, #20]
 800af5e:	60da      	str	r2, [r3, #12]
 800af60:	4a2c      	ldr	r2, [pc, #176]	; (800b014 <tcp_listen_input+0x1f4>)
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	6013      	str	r3, [r2, #0]
 800af66:	f003 f8d1 	bl	800e10c <tcp_timer_needed>
 800af6a:	4b2b      	ldr	r3, [pc, #172]	; (800b018 <tcp_listen_input+0x1f8>)
 800af6c:	2201      	movs	r2, #1
 800af6e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800af70:	6978      	ldr	r0, [r7, #20]
 800af72:	f001 fd8f 	bl	800ca94 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800af76:	4b23      	ldr	r3, [pc, #140]	; (800b004 <tcp_listen_input+0x1e4>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	89db      	ldrh	r3, [r3, #14]
 800af7c:	b29a      	uxth	r2, r3
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800af84:	697b      	ldr	r3, [r7, #20]
 800af86:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	3304      	adds	r3, #4
 800af98:	4618      	mov	r0, r3
 800af9a:	f004 fdfb 	bl	800fb94 <ip4_route>
 800af9e:	4601      	mov	r1, r0
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	3304      	adds	r3, #4
 800afa4:	461a      	mov	r2, r3
 800afa6:	4620      	mov	r0, r4
 800afa8:	f7ff fa30 	bl	800a40c <tcp_eff_send_mss_netif>
 800afac:	4603      	mov	r3, r0
 800afae:	461a      	mov	r2, r3
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800afb4:	2112      	movs	r1, #18
 800afb6:	6978      	ldr	r0, [r7, #20]
 800afb8:	f002 f844 	bl	800d044 <tcp_enqueue_flags>
 800afbc:	4603      	mov	r3, r0
 800afbe:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800afc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d004      	beq.n	800afd2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800afc8:	2100      	movs	r1, #0
 800afca:	6978      	ldr	r0, [r7, #20]
 800afcc:	f7fe f97e 	bl	80092cc <tcp_abandon>
      return;
 800afd0:	e006      	b.n	800afe0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800afd2:	6978      	ldr	r0, [r7, #20]
 800afd4:	f002 f924 	bl	800d220 <tcp_output>
  return;
 800afd8:	e001      	b.n	800afde <tcp_listen_input+0x1be>
    return;
 800afda:	bf00      	nop
 800afdc:	e000      	b.n	800afe0 <tcp_listen_input+0x1c0>
  return;
 800afde:	bf00      	nop
}
 800afe0:	371c      	adds	r7, #28
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd90      	pop	{r4, r7, pc}
 800afe6:	bf00      	nop
 800afe8:	2000a814 	.word	0x2000a814
 800afec:	08014f48 	.word	0x08014f48
 800aff0:	08015140 	.word	0x08015140
 800aff4:	08014f94 	.word	0x08014f94
 800aff8:	2000a80c 	.word	0x2000a80c
 800affc:	2000a812 	.word	0x2000a812
 800b000:	2000a808 	.word	0x2000a808
 800b004:	2000a7f8 	.word	0x2000a7f8
 800b008:	200050b0 	.word	0x200050b0
 800b00c:	200050b4 	.word	0x200050b4
 800b010:	200050a0 	.word	0x200050a0
 800b014:	2000a7dc 	.word	0x2000a7dc
 800b018:	2000a7e4 	.word	0x2000a7e4

0800b01c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b086      	sub	sp, #24
 800b020:	af04      	add	r7, sp, #16
 800b022:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800b024:	4b2f      	ldr	r3, [pc, #188]	; (800b0e4 <tcp_timewait_input+0xc8>)
 800b026:	781b      	ldrb	r3, [r3, #0]
 800b028:	f003 0304 	and.w	r3, r3, #4
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d153      	bne.n	800b0d8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d106      	bne.n	800b044 <tcp_timewait_input+0x28>
 800b036:	4b2c      	ldr	r3, [pc, #176]	; (800b0e8 <tcp_timewait_input+0xcc>)
 800b038:	f240 22ee 	movw	r2, #750	; 0x2ee
 800b03c:	492b      	ldr	r1, [pc, #172]	; (800b0ec <tcp_timewait_input+0xd0>)
 800b03e:	482c      	ldr	r0, [pc, #176]	; (800b0f0 <tcp_timewait_input+0xd4>)
 800b040:	f006 fe72 	bl	8011d28 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800b044:	4b27      	ldr	r3, [pc, #156]	; (800b0e4 <tcp_timewait_input+0xc8>)
 800b046:	781b      	ldrb	r3, [r3, #0]
 800b048:	f003 0302 	and.w	r3, r3, #2
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d02a      	beq.n	800b0a6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800b050:	4b28      	ldr	r3, [pc, #160]	; (800b0f4 <tcp_timewait_input+0xd8>)
 800b052:	681a      	ldr	r2, [r3, #0]
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b058:	1ad3      	subs	r3, r2, r3
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	db2d      	blt.n	800b0ba <tcp_timewait_input+0x9e>
 800b05e:	4b25      	ldr	r3, [pc, #148]	; (800b0f4 <tcp_timewait_input+0xd8>)
 800b060:	681a      	ldr	r2, [r3, #0]
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b066:	6879      	ldr	r1, [r7, #4]
 800b068:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b06a:	440b      	add	r3, r1
 800b06c:	1ad3      	subs	r3, r2, r3
 800b06e:	2b00      	cmp	r3, #0
 800b070:	dc23      	bgt.n	800b0ba <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b072:	4b21      	ldr	r3, [pc, #132]	; (800b0f8 <tcp_timewait_input+0xdc>)
 800b074:	6819      	ldr	r1, [r3, #0]
 800b076:	4b21      	ldr	r3, [pc, #132]	; (800b0fc <tcp_timewait_input+0xe0>)
 800b078:	881b      	ldrh	r3, [r3, #0]
 800b07a:	461a      	mov	r2, r3
 800b07c:	4b1d      	ldr	r3, [pc, #116]	; (800b0f4 <tcp_timewait_input+0xd8>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b082:	4b1f      	ldr	r3, [pc, #124]	; (800b100 <tcp_timewait_input+0xe4>)
 800b084:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b086:	885b      	ldrh	r3, [r3, #2]
 800b088:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b08a:	4a1d      	ldr	r2, [pc, #116]	; (800b100 <tcp_timewait_input+0xe4>)
 800b08c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b08e:	8812      	ldrh	r2, [r2, #0]
 800b090:	b292      	uxth	r2, r2
 800b092:	9202      	str	r2, [sp, #8]
 800b094:	9301      	str	r3, [sp, #4]
 800b096:	4b1b      	ldr	r3, [pc, #108]	; (800b104 <tcp_timewait_input+0xe8>)
 800b098:	9300      	str	r3, [sp, #0]
 800b09a:	4b1b      	ldr	r3, [pc, #108]	; (800b108 <tcp_timewait_input+0xec>)
 800b09c:	4602      	mov	r2, r0
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f002 fe72 	bl	800dd88 <tcp_rst>
      return;
 800b0a4:	e01b      	b.n	800b0de <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800b0a6:	4b0f      	ldr	r3, [pc, #60]	; (800b0e4 <tcp_timewait_input+0xc8>)
 800b0a8:	781b      	ldrb	r3, [r3, #0]
 800b0aa:	f003 0301 	and.w	r3, r3, #1
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d003      	beq.n	800b0ba <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800b0b2:	4b16      	ldr	r3, [pc, #88]	; (800b10c <tcp_timewait_input+0xf0>)
 800b0b4:	681a      	ldr	r2, [r3, #0]
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800b0ba:	4b10      	ldr	r3, [pc, #64]	; (800b0fc <tcp_timewait_input+0xe0>)
 800b0bc:	881b      	ldrh	r3, [r3, #0]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d00c      	beq.n	800b0dc <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	8b5b      	ldrh	r3, [r3, #26]
 800b0c6:	f043 0302 	orr.w	r3, r3, #2
 800b0ca:	b29a      	uxth	r2, r3
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f002 f8a5 	bl	800d220 <tcp_output>
  }
  return;
 800b0d6:	e001      	b.n	800b0dc <tcp_timewait_input+0xc0>
    return;
 800b0d8:	bf00      	nop
 800b0da:	e000      	b.n	800b0de <tcp_timewait_input+0xc2>
  return;
 800b0dc:	bf00      	nop
}
 800b0de:	3708      	adds	r7, #8
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}
 800b0e4:	2000a814 	.word	0x2000a814
 800b0e8:	08014f48 	.word	0x08014f48
 800b0ec:	08015160 	.word	0x08015160
 800b0f0:	08014f94 	.word	0x08014f94
 800b0f4:	2000a808 	.word	0x2000a808
 800b0f8:	2000a80c 	.word	0x2000a80c
 800b0fc:	2000a812 	.word	0x2000a812
 800b100:	2000a7f8 	.word	0x2000a7f8
 800b104:	200050b0 	.word	0x200050b0
 800b108:	200050b4 	.word	0x200050b4
 800b10c:	2000a7d0 	.word	0x2000a7d0

0800b110 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800b110:	b590      	push	{r4, r7, lr}
 800b112:	b08d      	sub	sp, #52	; 0x34
 800b114:	af04      	add	r7, sp, #16
 800b116:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800b118:	2300      	movs	r3, #0
 800b11a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800b11c:	2300      	movs	r3, #0
 800b11e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d106      	bne.n	800b134 <tcp_process+0x24>
 800b126:	4b9d      	ldr	r3, [pc, #628]	; (800b39c <tcp_process+0x28c>)
 800b128:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800b12c:	499c      	ldr	r1, [pc, #624]	; (800b3a0 <tcp_process+0x290>)
 800b12e:	489d      	ldr	r0, [pc, #628]	; (800b3a4 <tcp_process+0x294>)
 800b130:	f006 fdfa 	bl	8011d28 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800b134:	4b9c      	ldr	r3, [pc, #624]	; (800b3a8 <tcp_process+0x298>)
 800b136:	781b      	ldrb	r3, [r3, #0]
 800b138:	f003 0304 	and.w	r3, r3, #4
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d04e      	beq.n	800b1de <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	7d1b      	ldrb	r3, [r3, #20]
 800b144:	2b02      	cmp	r3, #2
 800b146:	d108      	bne.n	800b15a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b14c:	4b97      	ldr	r3, [pc, #604]	; (800b3ac <tcp_process+0x29c>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	429a      	cmp	r2, r3
 800b152:	d123      	bne.n	800b19c <tcp_process+0x8c>
        acceptable = 1;
 800b154:	2301      	movs	r3, #1
 800b156:	76fb      	strb	r3, [r7, #27]
 800b158:	e020      	b.n	800b19c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b15e:	4b94      	ldr	r3, [pc, #592]	; (800b3b0 <tcp_process+0x2a0>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	429a      	cmp	r2, r3
 800b164:	d102      	bne.n	800b16c <tcp_process+0x5c>
        acceptable = 1;
 800b166:	2301      	movs	r3, #1
 800b168:	76fb      	strb	r3, [r7, #27]
 800b16a:	e017      	b.n	800b19c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b16c:	4b90      	ldr	r3, [pc, #576]	; (800b3b0 <tcp_process+0x2a0>)
 800b16e:	681a      	ldr	r2, [r3, #0]
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b174:	1ad3      	subs	r3, r2, r3
 800b176:	2b00      	cmp	r3, #0
 800b178:	db10      	blt.n	800b19c <tcp_process+0x8c>
 800b17a:	4b8d      	ldr	r3, [pc, #564]	; (800b3b0 <tcp_process+0x2a0>)
 800b17c:	681a      	ldr	r2, [r3, #0]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b182:	6879      	ldr	r1, [r7, #4]
 800b184:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b186:	440b      	add	r3, r1
 800b188:	1ad3      	subs	r3, r2, r3
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	dc06      	bgt.n	800b19c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	8b5b      	ldrh	r3, [r3, #26]
 800b192:	f043 0302 	orr.w	r3, r3, #2
 800b196:	b29a      	uxth	r2, r3
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800b19c:	7efb      	ldrb	r3, [r7, #27]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d01b      	beq.n	800b1da <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	7d1b      	ldrb	r3, [r3, #20]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d106      	bne.n	800b1b8 <tcp_process+0xa8>
 800b1aa:	4b7c      	ldr	r3, [pc, #496]	; (800b39c <tcp_process+0x28c>)
 800b1ac:	f44f 724e 	mov.w	r2, #824	; 0x338
 800b1b0:	4980      	ldr	r1, [pc, #512]	; (800b3b4 <tcp_process+0x2a4>)
 800b1b2:	487c      	ldr	r0, [pc, #496]	; (800b3a4 <tcp_process+0x294>)
 800b1b4:	f006 fdb8 	bl	8011d28 <iprintf>
      recv_flags |= TF_RESET;
 800b1b8:	4b7f      	ldr	r3, [pc, #508]	; (800b3b8 <tcp_process+0x2a8>)
 800b1ba:	781b      	ldrb	r3, [r3, #0]
 800b1bc:	f043 0308 	orr.w	r3, r3, #8
 800b1c0:	b2da      	uxtb	r2, r3
 800b1c2:	4b7d      	ldr	r3, [pc, #500]	; (800b3b8 <tcp_process+0x2a8>)
 800b1c4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	8b5b      	ldrh	r3, [r3, #26]
 800b1ca:	f023 0301 	bic.w	r3, r3, #1
 800b1ce:	b29a      	uxth	r2, r3
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800b1d4:	f06f 030d 	mvn.w	r3, #13
 800b1d8:	e37a      	b.n	800b8d0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	e378      	b.n	800b8d0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800b1de:	4b72      	ldr	r3, [pc, #456]	; (800b3a8 <tcp_process+0x298>)
 800b1e0:	781b      	ldrb	r3, [r3, #0]
 800b1e2:	f003 0302 	and.w	r3, r3, #2
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d010      	beq.n	800b20c <tcp_process+0xfc>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	7d1b      	ldrb	r3, [r3, #20]
 800b1ee:	2b02      	cmp	r3, #2
 800b1f0:	d00c      	beq.n	800b20c <tcp_process+0xfc>
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	7d1b      	ldrb	r3, [r3, #20]
 800b1f6:	2b03      	cmp	r3, #3
 800b1f8:	d008      	beq.n	800b20c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	8b5b      	ldrh	r3, [r3, #26]
 800b1fe:	f043 0302 	orr.w	r3, r3, #2
 800b202:	b29a      	uxth	r2, r3
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800b208:	2300      	movs	r3, #0
 800b20a:	e361      	b.n	800b8d0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	8b5b      	ldrh	r3, [r3, #26]
 800b210:	f003 0310 	and.w	r3, r3, #16
 800b214:	2b00      	cmp	r3, #0
 800b216:	d103      	bne.n	800b220 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800b218:	4b68      	ldr	r3, [pc, #416]	; (800b3bc <tcp_process+0x2ac>)
 800b21a:	681a      	ldr	r2, [r3, #0]
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2200      	movs	r2, #0
 800b224:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2200      	movs	r2, #0
 800b22c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f001 fc2f 	bl	800ca94 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	7d1b      	ldrb	r3, [r3, #20]
 800b23a:	3b02      	subs	r3, #2
 800b23c:	2b07      	cmp	r3, #7
 800b23e:	f200 8337 	bhi.w	800b8b0 <tcp_process+0x7a0>
 800b242:	a201      	add	r2, pc, #4	; (adr r2, 800b248 <tcp_process+0x138>)
 800b244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b248:	0800b269 	.word	0x0800b269
 800b24c:	0800b499 	.word	0x0800b499
 800b250:	0800b611 	.word	0x0800b611
 800b254:	0800b63b 	.word	0x0800b63b
 800b258:	0800b75f 	.word	0x0800b75f
 800b25c:	0800b611 	.word	0x0800b611
 800b260:	0800b7eb 	.word	0x0800b7eb
 800b264:	0800b87b 	.word	0x0800b87b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800b268:	4b4f      	ldr	r3, [pc, #316]	; (800b3a8 <tcp_process+0x298>)
 800b26a:	781b      	ldrb	r3, [r3, #0]
 800b26c:	f003 0310 	and.w	r3, r3, #16
 800b270:	2b00      	cmp	r3, #0
 800b272:	f000 80e4 	beq.w	800b43e <tcp_process+0x32e>
 800b276:	4b4c      	ldr	r3, [pc, #304]	; (800b3a8 <tcp_process+0x298>)
 800b278:	781b      	ldrb	r3, [r3, #0]
 800b27a:	f003 0302 	and.w	r3, r3, #2
 800b27e:	2b00      	cmp	r3, #0
 800b280:	f000 80dd 	beq.w	800b43e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b288:	1c5a      	adds	r2, r3, #1
 800b28a:	4b48      	ldr	r3, [pc, #288]	; (800b3ac <tcp_process+0x29c>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	429a      	cmp	r2, r3
 800b290:	f040 80d5 	bne.w	800b43e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800b294:	4b46      	ldr	r3, [pc, #280]	; (800b3b0 <tcp_process+0x2a0>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	1c5a      	adds	r2, r3, #1
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800b2a6:	4b41      	ldr	r3, [pc, #260]	; (800b3ac <tcp_process+0x29c>)
 800b2a8:	681a      	ldr	r2, [r3, #0]
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800b2ae:	4b44      	ldr	r3, [pc, #272]	; (800b3c0 <tcp_process+0x2b0>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	89db      	ldrh	r3, [r3, #14]
 800b2b4:	b29a      	uxth	r2, r3
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800b2c8:	4b39      	ldr	r3, [pc, #228]	; (800b3b0 <tcp_process+0x2a0>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	1e5a      	subs	r2, r3, #1
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2204      	movs	r2, #4
 800b2d6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	3304      	adds	r3, #4
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f004 fc57 	bl	800fb94 <ip4_route>
 800b2e6:	4601      	mov	r1, r0
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	3304      	adds	r3, #4
 800b2ec:	461a      	mov	r2, r3
 800b2ee:	4620      	mov	r0, r4
 800b2f0:	f7ff f88c 	bl	800a40c <tcp_eff_send_mss_netif>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	461a      	mov	r2, r3
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b300:	009a      	lsls	r2, r3, #2
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b306:	005b      	lsls	r3, r3, #1
 800b308:	f241 111c 	movw	r1, #4380	; 0x111c
 800b30c:	428b      	cmp	r3, r1
 800b30e:	bf38      	it	cc
 800b310:	460b      	movcc	r3, r1
 800b312:	429a      	cmp	r2, r3
 800b314:	d204      	bcs.n	800b320 <tcp_process+0x210>
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b31a:	009b      	lsls	r3, r3, #2
 800b31c:	b29b      	uxth	r3, r3
 800b31e:	e00d      	b.n	800b33c <tcp_process+0x22c>
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b324:	005b      	lsls	r3, r3, #1
 800b326:	f241 121c 	movw	r2, #4380	; 0x111c
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d904      	bls.n	800b338 <tcp_process+0x228>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b332:	005b      	lsls	r3, r3, #1
 800b334:	b29b      	uxth	r3, r3
 800b336:	e001      	b.n	800b33c <tcp_process+0x22c>
 800b338:	f241 131c 	movw	r3, #4380	; 0x111c
 800b33c:	687a      	ldr	r2, [r7, #4]
 800b33e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d106      	bne.n	800b35a <tcp_process+0x24a>
 800b34c:	4b13      	ldr	r3, [pc, #76]	; (800b39c <tcp_process+0x28c>)
 800b34e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800b352:	491c      	ldr	r1, [pc, #112]	; (800b3c4 <tcp_process+0x2b4>)
 800b354:	4813      	ldr	r0, [pc, #76]	; (800b3a4 <tcp_process+0x294>)
 800b356:	f006 fce7 	bl	8011d28 <iprintf>
        --pcb->snd_queuelen;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b360:	3b01      	subs	r3, #1
 800b362:	b29a      	uxth	r2, r3
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b36e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800b370:	69fb      	ldr	r3, [r7, #28]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d12a      	bne.n	800b3cc <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b37a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800b37c:	69fb      	ldr	r3, [r7, #28]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d106      	bne.n	800b390 <tcp_process+0x280>
 800b382:	4b06      	ldr	r3, [pc, #24]	; (800b39c <tcp_process+0x28c>)
 800b384:	f44f 725d 	mov.w	r2, #884	; 0x374
 800b388:	490f      	ldr	r1, [pc, #60]	; (800b3c8 <tcp_process+0x2b8>)
 800b38a:	4806      	ldr	r0, [pc, #24]	; (800b3a4 <tcp_process+0x294>)
 800b38c:	f006 fccc 	bl	8011d28 <iprintf>
          pcb->unsent = rseg->next;
 800b390:	69fb      	ldr	r3, [r7, #28]
 800b392:	681a      	ldr	r2, [r3, #0]
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	66da      	str	r2, [r3, #108]	; 0x6c
 800b398:	e01c      	b.n	800b3d4 <tcp_process+0x2c4>
 800b39a:	bf00      	nop
 800b39c:	08014f48 	.word	0x08014f48
 800b3a0:	08015180 	.word	0x08015180
 800b3a4:	08014f94 	.word	0x08014f94
 800b3a8:	2000a814 	.word	0x2000a814
 800b3ac:	2000a80c 	.word	0x2000a80c
 800b3b0:	2000a808 	.word	0x2000a808
 800b3b4:	0801519c 	.word	0x0801519c
 800b3b8:	2000a815 	.word	0x2000a815
 800b3bc:	2000a7d0 	.word	0x2000a7d0
 800b3c0:	2000a7f8 	.word	0x2000a7f8
 800b3c4:	080151bc 	.word	0x080151bc
 800b3c8:	080151d4 	.word	0x080151d4
        } else {
          pcb->unacked = rseg->next;
 800b3cc:	69fb      	ldr	r3, [r7, #28]
 800b3ce:	681a      	ldr	r2, [r3, #0]
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800b3d4:	69f8      	ldr	r0, [r7, #28]
 800b3d6:	f7fe fd22 	bl	8009e1e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d104      	bne.n	800b3ec <tcp_process+0x2dc>
          pcb->rtime = -1;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b3e8:	861a      	strh	r2, [r3, #48]	; 0x30
 800b3ea:	e006      	b.n	800b3fa <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b400:	2b00      	cmp	r3, #0
 800b402:	d00a      	beq.n	800b41a <tcp_process+0x30a>
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b40a:	687a      	ldr	r2, [r7, #4]
 800b40c:	6910      	ldr	r0, [r2, #16]
 800b40e:	2200      	movs	r2, #0
 800b410:	6879      	ldr	r1, [r7, #4]
 800b412:	4798      	blx	r3
 800b414:	4603      	mov	r3, r0
 800b416:	76bb      	strb	r3, [r7, #26]
 800b418:	e001      	b.n	800b41e <tcp_process+0x30e>
 800b41a:	2300      	movs	r3, #0
 800b41c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800b41e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b422:	f113 0f0d 	cmn.w	r3, #13
 800b426:	d102      	bne.n	800b42e <tcp_process+0x31e>
          return ERR_ABRT;
 800b428:	f06f 030c 	mvn.w	r3, #12
 800b42c:	e250      	b.n	800b8d0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	8b5b      	ldrh	r3, [r3, #26]
 800b432:	f043 0302 	orr.w	r3, r3, #2
 800b436:	b29a      	uxth	r2, r3
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800b43c:	e23a      	b.n	800b8b4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800b43e:	4b98      	ldr	r3, [pc, #608]	; (800b6a0 <tcp_process+0x590>)
 800b440:	781b      	ldrb	r3, [r3, #0]
 800b442:	f003 0310 	and.w	r3, r3, #16
 800b446:	2b00      	cmp	r3, #0
 800b448:	f000 8234 	beq.w	800b8b4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b44c:	4b95      	ldr	r3, [pc, #596]	; (800b6a4 <tcp_process+0x594>)
 800b44e:	6819      	ldr	r1, [r3, #0]
 800b450:	4b95      	ldr	r3, [pc, #596]	; (800b6a8 <tcp_process+0x598>)
 800b452:	881b      	ldrh	r3, [r3, #0]
 800b454:	461a      	mov	r2, r3
 800b456:	4b95      	ldr	r3, [pc, #596]	; (800b6ac <tcp_process+0x59c>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b45c:	4b94      	ldr	r3, [pc, #592]	; (800b6b0 <tcp_process+0x5a0>)
 800b45e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b460:	885b      	ldrh	r3, [r3, #2]
 800b462:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b464:	4a92      	ldr	r2, [pc, #584]	; (800b6b0 <tcp_process+0x5a0>)
 800b466:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b468:	8812      	ldrh	r2, [r2, #0]
 800b46a:	b292      	uxth	r2, r2
 800b46c:	9202      	str	r2, [sp, #8]
 800b46e:	9301      	str	r3, [sp, #4]
 800b470:	4b90      	ldr	r3, [pc, #576]	; (800b6b4 <tcp_process+0x5a4>)
 800b472:	9300      	str	r3, [sp, #0]
 800b474:	4b90      	ldr	r3, [pc, #576]	; (800b6b8 <tcp_process+0x5a8>)
 800b476:	4602      	mov	r2, r0
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f002 fc85 	bl	800dd88 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b484:	2b05      	cmp	r3, #5
 800b486:	f200 8215 	bhi.w	800b8b4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2200      	movs	r2, #0
 800b48e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f002 fa51 	bl	800d938 <tcp_rexmit_rto>
      break;
 800b496:	e20d      	b.n	800b8b4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800b498:	4b81      	ldr	r3, [pc, #516]	; (800b6a0 <tcp_process+0x590>)
 800b49a:	781b      	ldrb	r3, [r3, #0]
 800b49c:	f003 0310 	and.w	r3, r3, #16
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	f000 80a1 	beq.w	800b5e8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b4a6:	4b7f      	ldr	r3, [pc, #508]	; (800b6a4 <tcp_process+0x594>)
 800b4a8:	681a      	ldr	r2, [r3, #0]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4ae:	1ad3      	subs	r3, r2, r3
 800b4b0:	3b01      	subs	r3, #1
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	db7e      	blt.n	800b5b4 <tcp_process+0x4a4>
 800b4b6:	4b7b      	ldr	r3, [pc, #492]	; (800b6a4 <tcp_process+0x594>)
 800b4b8:	681a      	ldr	r2, [r3, #0]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4be:	1ad3      	subs	r3, r2, r3
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	dc77      	bgt.n	800b5b4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2204      	movs	r2, #4
 800b4c8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d102      	bne.n	800b4d8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800b4d2:	23fa      	movs	r3, #250	; 0xfa
 800b4d4:	76bb      	strb	r3, [r7, #26]
 800b4d6:	e01d      	b.n	800b514 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4dc:	699b      	ldr	r3, [r3, #24]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d106      	bne.n	800b4f0 <tcp_process+0x3e0>
 800b4e2:	4b76      	ldr	r3, [pc, #472]	; (800b6bc <tcp_process+0x5ac>)
 800b4e4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800b4e8:	4975      	ldr	r1, [pc, #468]	; (800b6c0 <tcp_process+0x5b0>)
 800b4ea:	4876      	ldr	r0, [pc, #472]	; (800b6c4 <tcp_process+0x5b4>)
 800b4ec:	f006 fc1c 	bl	8011d28 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4f4:	699b      	ldr	r3, [r3, #24]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d00a      	beq.n	800b510 <tcp_process+0x400>
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4fe:	699b      	ldr	r3, [r3, #24]
 800b500:	687a      	ldr	r2, [r7, #4]
 800b502:	6910      	ldr	r0, [r2, #16]
 800b504:	2200      	movs	r2, #0
 800b506:	6879      	ldr	r1, [r7, #4]
 800b508:	4798      	blx	r3
 800b50a:	4603      	mov	r3, r0
 800b50c:	76bb      	strb	r3, [r7, #26]
 800b50e:	e001      	b.n	800b514 <tcp_process+0x404>
 800b510:	23f0      	movs	r3, #240	; 0xf0
 800b512:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800b514:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d00a      	beq.n	800b532 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800b51c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b520:	f113 0f0d 	cmn.w	r3, #13
 800b524:	d002      	beq.n	800b52c <tcp_process+0x41c>
              tcp_abort(pcb);
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f7fd ff8e 	bl	8009448 <tcp_abort>
            }
            return ERR_ABRT;
 800b52c:	f06f 030c 	mvn.w	r3, #12
 800b530:	e1ce      	b.n	800b8d0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f000 fae0 	bl	800baf8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800b538:	4b63      	ldr	r3, [pc, #396]	; (800b6c8 <tcp_process+0x5b8>)
 800b53a:	881b      	ldrh	r3, [r3, #0]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d005      	beq.n	800b54c <tcp_process+0x43c>
            recv_acked--;
 800b540:	4b61      	ldr	r3, [pc, #388]	; (800b6c8 <tcp_process+0x5b8>)
 800b542:	881b      	ldrh	r3, [r3, #0]
 800b544:	3b01      	subs	r3, #1
 800b546:	b29a      	uxth	r2, r3
 800b548:	4b5f      	ldr	r3, [pc, #380]	; (800b6c8 <tcp_process+0x5b8>)
 800b54a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b550:	009a      	lsls	r2, r3, #2
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b556:	005b      	lsls	r3, r3, #1
 800b558:	f241 111c 	movw	r1, #4380	; 0x111c
 800b55c:	428b      	cmp	r3, r1
 800b55e:	bf38      	it	cc
 800b560:	460b      	movcc	r3, r1
 800b562:	429a      	cmp	r2, r3
 800b564:	d204      	bcs.n	800b570 <tcp_process+0x460>
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b56a:	009b      	lsls	r3, r3, #2
 800b56c:	b29b      	uxth	r3, r3
 800b56e:	e00d      	b.n	800b58c <tcp_process+0x47c>
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b574:	005b      	lsls	r3, r3, #1
 800b576:	f241 121c 	movw	r2, #4380	; 0x111c
 800b57a:	4293      	cmp	r3, r2
 800b57c:	d904      	bls.n	800b588 <tcp_process+0x478>
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b582:	005b      	lsls	r3, r3, #1
 800b584:	b29b      	uxth	r3, r3
 800b586:	e001      	b.n	800b58c <tcp_process+0x47c>
 800b588:	f241 131c 	movw	r3, #4380	; 0x111c
 800b58c:	687a      	ldr	r2, [r7, #4]
 800b58e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800b592:	4b4e      	ldr	r3, [pc, #312]	; (800b6cc <tcp_process+0x5bc>)
 800b594:	781b      	ldrb	r3, [r3, #0]
 800b596:	f003 0320 	and.w	r3, r3, #32
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d037      	beq.n	800b60e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	8b5b      	ldrh	r3, [r3, #26]
 800b5a2:	f043 0302 	orr.w	r3, r3, #2
 800b5a6:	b29a      	uxth	r2, r3
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2207      	movs	r2, #7
 800b5b0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800b5b2:	e02c      	b.n	800b60e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b5b4:	4b3b      	ldr	r3, [pc, #236]	; (800b6a4 <tcp_process+0x594>)
 800b5b6:	6819      	ldr	r1, [r3, #0]
 800b5b8:	4b3b      	ldr	r3, [pc, #236]	; (800b6a8 <tcp_process+0x598>)
 800b5ba:	881b      	ldrh	r3, [r3, #0]
 800b5bc:	461a      	mov	r2, r3
 800b5be:	4b3b      	ldr	r3, [pc, #236]	; (800b6ac <tcp_process+0x59c>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b5c4:	4b3a      	ldr	r3, [pc, #232]	; (800b6b0 <tcp_process+0x5a0>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b5c8:	885b      	ldrh	r3, [r3, #2]
 800b5ca:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b5cc:	4a38      	ldr	r2, [pc, #224]	; (800b6b0 <tcp_process+0x5a0>)
 800b5ce:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b5d0:	8812      	ldrh	r2, [r2, #0]
 800b5d2:	b292      	uxth	r2, r2
 800b5d4:	9202      	str	r2, [sp, #8]
 800b5d6:	9301      	str	r3, [sp, #4]
 800b5d8:	4b36      	ldr	r3, [pc, #216]	; (800b6b4 <tcp_process+0x5a4>)
 800b5da:	9300      	str	r3, [sp, #0]
 800b5dc:	4b36      	ldr	r3, [pc, #216]	; (800b6b8 <tcp_process+0x5a8>)
 800b5de:	4602      	mov	r2, r0
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f002 fbd1 	bl	800dd88 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800b5e6:	e167      	b.n	800b8b8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800b5e8:	4b2d      	ldr	r3, [pc, #180]	; (800b6a0 <tcp_process+0x590>)
 800b5ea:	781b      	ldrb	r3, [r3, #0]
 800b5ec:	f003 0302 	and.w	r3, r3, #2
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	f000 8161 	beq.w	800b8b8 <tcp_process+0x7a8>
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5fa:	1e5a      	subs	r2, r3, #1
 800b5fc:	4b2b      	ldr	r3, [pc, #172]	; (800b6ac <tcp_process+0x59c>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	429a      	cmp	r2, r3
 800b602:	f040 8159 	bne.w	800b8b8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f002 f9b8 	bl	800d97c <tcp_rexmit>
      break;
 800b60c:	e154      	b.n	800b8b8 <tcp_process+0x7a8>
 800b60e:	e153      	b.n	800b8b8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	f000 fa71 	bl	800baf8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800b616:	4b2d      	ldr	r3, [pc, #180]	; (800b6cc <tcp_process+0x5bc>)
 800b618:	781b      	ldrb	r3, [r3, #0]
 800b61a:	f003 0320 	and.w	r3, r3, #32
 800b61e:	2b00      	cmp	r3, #0
 800b620:	f000 814c 	beq.w	800b8bc <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	8b5b      	ldrh	r3, [r3, #26]
 800b628:	f043 0302 	orr.w	r3, r3, #2
 800b62c:	b29a      	uxth	r2, r3
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2207      	movs	r2, #7
 800b636:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b638:	e140      	b.n	800b8bc <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f000 fa5c 	bl	800baf8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b640:	4b22      	ldr	r3, [pc, #136]	; (800b6cc <tcp_process+0x5bc>)
 800b642:	781b      	ldrb	r3, [r3, #0]
 800b644:	f003 0320 	and.w	r3, r3, #32
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d071      	beq.n	800b730 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b64c:	4b14      	ldr	r3, [pc, #80]	; (800b6a0 <tcp_process+0x590>)
 800b64e:	781b      	ldrb	r3, [r3, #0]
 800b650:	f003 0310 	and.w	r3, r3, #16
 800b654:	2b00      	cmp	r3, #0
 800b656:	d060      	beq.n	800b71a <tcp_process+0x60a>
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b65c:	4b11      	ldr	r3, [pc, #68]	; (800b6a4 <tcp_process+0x594>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	429a      	cmp	r2, r3
 800b662:	d15a      	bne.n	800b71a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d156      	bne.n	800b71a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	8b5b      	ldrh	r3, [r3, #26]
 800b670:	f043 0302 	orr.w	r3, r3, #2
 800b674:	b29a      	uxth	r2, r3
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f7fe fdbc 	bl	800a1f8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800b680:	4b13      	ldr	r3, [pc, #76]	; (800b6d0 <tcp_process+0x5c0>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	687a      	ldr	r2, [r7, #4]
 800b686:	429a      	cmp	r2, r3
 800b688:	d105      	bne.n	800b696 <tcp_process+0x586>
 800b68a:	4b11      	ldr	r3, [pc, #68]	; (800b6d0 <tcp_process+0x5c0>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	68db      	ldr	r3, [r3, #12]
 800b690:	4a0f      	ldr	r2, [pc, #60]	; (800b6d0 <tcp_process+0x5c0>)
 800b692:	6013      	str	r3, [r2, #0]
 800b694:	e02e      	b.n	800b6f4 <tcp_process+0x5e4>
 800b696:	4b0e      	ldr	r3, [pc, #56]	; (800b6d0 <tcp_process+0x5c0>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	617b      	str	r3, [r7, #20]
 800b69c:	e027      	b.n	800b6ee <tcp_process+0x5de>
 800b69e:	bf00      	nop
 800b6a0:	2000a814 	.word	0x2000a814
 800b6a4:	2000a80c 	.word	0x2000a80c
 800b6a8:	2000a812 	.word	0x2000a812
 800b6ac:	2000a808 	.word	0x2000a808
 800b6b0:	2000a7f8 	.word	0x2000a7f8
 800b6b4:	200050b0 	.word	0x200050b0
 800b6b8:	200050b4 	.word	0x200050b4
 800b6bc:	08014f48 	.word	0x08014f48
 800b6c0:	080151e8 	.word	0x080151e8
 800b6c4:	08014f94 	.word	0x08014f94
 800b6c8:	2000a810 	.word	0x2000a810
 800b6cc:	2000a815 	.word	0x2000a815
 800b6d0:	2000a7dc 	.word	0x2000a7dc
 800b6d4:	697b      	ldr	r3, [r7, #20]
 800b6d6:	68db      	ldr	r3, [r3, #12]
 800b6d8:	687a      	ldr	r2, [r7, #4]
 800b6da:	429a      	cmp	r2, r3
 800b6dc:	d104      	bne.n	800b6e8 <tcp_process+0x5d8>
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	68da      	ldr	r2, [r3, #12]
 800b6e2:	697b      	ldr	r3, [r7, #20]
 800b6e4:	60da      	str	r2, [r3, #12]
 800b6e6:	e005      	b.n	800b6f4 <tcp_process+0x5e4>
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	68db      	ldr	r3, [r3, #12]
 800b6ec:	617b      	str	r3, [r7, #20]
 800b6ee:	697b      	ldr	r3, [r7, #20]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d1ef      	bne.n	800b6d4 <tcp_process+0x5c4>
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	60da      	str	r2, [r3, #12]
 800b6fa:	4b77      	ldr	r3, [pc, #476]	; (800b8d8 <tcp_process+0x7c8>)
 800b6fc:	2201      	movs	r2, #1
 800b6fe:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	220a      	movs	r2, #10
 800b704:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800b706:	4b75      	ldr	r3, [pc, #468]	; (800b8dc <tcp_process+0x7cc>)
 800b708:	681a      	ldr	r2, [r3, #0]
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	60da      	str	r2, [r3, #12]
 800b70e:	4a73      	ldr	r2, [pc, #460]	; (800b8dc <tcp_process+0x7cc>)
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	6013      	str	r3, [r2, #0]
 800b714:	f002 fcfa 	bl	800e10c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800b718:	e0d2      	b.n	800b8c0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	8b5b      	ldrh	r3, [r3, #26]
 800b71e:	f043 0302 	orr.w	r3, r3, #2
 800b722:	b29a      	uxth	r2, r3
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2208      	movs	r2, #8
 800b72c:	751a      	strb	r2, [r3, #20]
      break;
 800b72e:	e0c7      	b.n	800b8c0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b730:	4b6b      	ldr	r3, [pc, #428]	; (800b8e0 <tcp_process+0x7d0>)
 800b732:	781b      	ldrb	r3, [r3, #0]
 800b734:	f003 0310 	and.w	r3, r3, #16
 800b738:	2b00      	cmp	r3, #0
 800b73a:	f000 80c1 	beq.w	800b8c0 <tcp_process+0x7b0>
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b742:	4b68      	ldr	r3, [pc, #416]	; (800b8e4 <tcp_process+0x7d4>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	429a      	cmp	r2, r3
 800b748:	f040 80ba 	bne.w	800b8c0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b750:	2b00      	cmp	r3, #0
 800b752:	f040 80b5 	bne.w	800b8c0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2206      	movs	r2, #6
 800b75a:	751a      	strb	r2, [r3, #20]
      break;
 800b75c:	e0b0      	b.n	800b8c0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f000 f9ca 	bl	800baf8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b764:	4b60      	ldr	r3, [pc, #384]	; (800b8e8 <tcp_process+0x7d8>)
 800b766:	781b      	ldrb	r3, [r3, #0]
 800b768:	f003 0320 	and.w	r3, r3, #32
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	f000 80a9 	beq.w	800b8c4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	8b5b      	ldrh	r3, [r3, #26]
 800b776:	f043 0302 	orr.w	r3, r3, #2
 800b77a:	b29a      	uxth	r2, r3
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f7fe fd39 	bl	800a1f8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b786:	4b59      	ldr	r3, [pc, #356]	; (800b8ec <tcp_process+0x7dc>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	687a      	ldr	r2, [r7, #4]
 800b78c:	429a      	cmp	r2, r3
 800b78e:	d105      	bne.n	800b79c <tcp_process+0x68c>
 800b790:	4b56      	ldr	r3, [pc, #344]	; (800b8ec <tcp_process+0x7dc>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	68db      	ldr	r3, [r3, #12]
 800b796:	4a55      	ldr	r2, [pc, #340]	; (800b8ec <tcp_process+0x7dc>)
 800b798:	6013      	str	r3, [r2, #0]
 800b79a:	e013      	b.n	800b7c4 <tcp_process+0x6b4>
 800b79c:	4b53      	ldr	r3, [pc, #332]	; (800b8ec <tcp_process+0x7dc>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	613b      	str	r3, [r7, #16]
 800b7a2:	e00c      	b.n	800b7be <tcp_process+0x6ae>
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	68db      	ldr	r3, [r3, #12]
 800b7a8:	687a      	ldr	r2, [r7, #4]
 800b7aa:	429a      	cmp	r2, r3
 800b7ac:	d104      	bne.n	800b7b8 <tcp_process+0x6a8>
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	68da      	ldr	r2, [r3, #12]
 800b7b2:	693b      	ldr	r3, [r7, #16]
 800b7b4:	60da      	str	r2, [r3, #12]
 800b7b6:	e005      	b.n	800b7c4 <tcp_process+0x6b4>
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	68db      	ldr	r3, [r3, #12]
 800b7bc:	613b      	str	r3, [r7, #16]
 800b7be:	693b      	ldr	r3, [r7, #16]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d1ef      	bne.n	800b7a4 <tcp_process+0x694>
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	60da      	str	r2, [r3, #12]
 800b7ca:	4b43      	ldr	r3, [pc, #268]	; (800b8d8 <tcp_process+0x7c8>)
 800b7cc:	2201      	movs	r2, #1
 800b7ce:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	220a      	movs	r2, #10
 800b7d4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b7d6:	4b41      	ldr	r3, [pc, #260]	; (800b8dc <tcp_process+0x7cc>)
 800b7d8:	681a      	ldr	r2, [r3, #0]
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	60da      	str	r2, [r3, #12]
 800b7de:	4a3f      	ldr	r2, [pc, #252]	; (800b8dc <tcp_process+0x7cc>)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6013      	str	r3, [r2, #0]
 800b7e4:	f002 fc92 	bl	800e10c <tcp_timer_needed>
      }
      break;
 800b7e8:	e06c      	b.n	800b8c4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f000 f984 	bl	800baf8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b7f0:	4b3b      	ldr	r3, [pc, #236]	; (800b8e0 <tcp_process+0x7d0>)
 800b7f2:	781b      	ldrb	r3, [r3, #0]
 800b7f4:	f003 0310 	and.w	r3, r3, #16
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d065      	beq.n	800b8c8 <tcp_process+0x7b8>
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b800:	4b38      	ldr	r3, [pc, #224]	; (800b8e4 <tcp_process+0x7d4>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	429a      	cmp	r2, r3
 800b806:	d15f      	bne.n	800b8c8 <tcp_process+0x7b8>
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d15b      	bne.n	800b8c8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f7fe fcf1 	bl	800a1f8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b816:	4b35      	ldr	r3, [pc, #212]	; (800b8ec <tcp_process+0x7dc>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	687a      	ldr	r2, [r7, #4]
 800b81c:	429a      	cmp	r2, r3
 800b81e:	d105      	bne.n	800b82c <tcp_process+0x71c>
 800b820:	4b32      	ldr	r3, [pc, #200]	; (800b8ec <tcp_process+0x7dc>)
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	68db      	ldr	r3, [r3, #12]
 800b826:	4a31      	ldr	r2, [pc, #196]	; (800b8ec <tcp_process+0x7dc>)
 800b828:	6013      	str	r3, [r2, #0]
 800b82a:	e013      	b.n	800b854 <tcp_process+0x744>
 800b82c:	4b2f      	ldr	r3, [pc, #188]	; (800b8ec <tcp_process+0x7dc>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	60fb      	str	r3, [r7, #12]
 800b832:	e00c      	b.n	800b84e <tcp_process+0x73e>
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	68db      	ldr	r3, [r3, #12]
 800b838:	687a      	ldr	r2, [r7, #4]
 800b83a:	429a      	cmp	r2, r3
 800b83c:	d104      	bne.n	800b848 <tcp_process+0x738>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	68da      	ldr	r2, [r3, #12]
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	60da      	str	r2, [r3, #12]
 800b846:	e005      	b.n	800b854 <tcp_process+0x744>
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	68db      	ldr	r3, [r3, #12]
 800b84c:	60fb      	str	r3, [r7, #12]
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d1ef      	bne.n	800b834 <tcp_process+0x724>
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2200      	movs	r2, #0
 800b858:	60da      	str	r2, [r3, #12]
 800b85a:	4b1f      	ldr	r3, [pc, #124]	; (800b8d8 <tcp_process+0x7c8>)
 800b85c:	2201      	movs	r2, #1
 800b85e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	220a      	movs	r2, #10
 800b864:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b866:	4b1d      	ldr	r3, [pc, #116]	; (800b8dc <tcp_process+0x7cc>)
 800b868:	681a      	ldr	r2, [r3, #0]
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	60da      	str	r2, [r3, #12]
 800b86e:	4a1b      	ldr	r2, [pc, #108]	; (800b8dc <tcp_process+0x7cc>)
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6013      	str	r3, [r2, #0]
 800b874:	f002 fc4a 	bl	800e10c <tcp_timer_needed>
      }
      break;
 800b878:	e026      	b.n	800b8c8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f000 f93c 	bl	800baf8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b880:	4b17      	ldr	r3, [pc, #92]	; (800b8e0 <tcp_process+0x7d0>)
 800b882:	781b      	ldrb	r3, [r3, #0]
 800b884:	f003 0310 	and.w	r3, r3, #16
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d01f      	beq.n	800b8cc <tcp_process+0x7bc>
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b890:	4b14      	ldr	r3, [pc, #80]	; (800b8e4 <tcp_process+0x7d4>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	429a      	cmp	r2, r3
 800b896:	d119      	bne.n	800b8cc <tcp_process+0x7bc>
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d115      	bne.n	800b8cc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800b8a0:	4b11      	ldr	r3, [pc, #68]	; (800b8e8 <tcp_process+0x7d8>)
 800b8a2:	781b      	ldrb	r3, [r3, #0]
 800b8a4:	f043 0310 	orr.w	r3, r3, #16
 800b8a8:	b2da      	uxtb	r2, r3
 800b8aa:	4b0f      	ldr	r3, [pc, #60]	; (800b8e8 <tcp_process+0x7d8>)
 800b8ac:	701a      	strb	r2, [r3, #0]
      }
      break;
 800b8ae:	e00d      	b.n	800b8cc <tcp_process+0x7bc>
    default:
      break;
 800b8b0:	bf00      	nop
 800b8b2:	e00c      	b.n	800b8ce <tcp_process+0x7be>
      break;
 800b8b4:	bf00      	nop
 800b8b6:	e00a      	b.n	800b8ce <tcp_process+0x7be>
      break;
 800b8b8:	bf00      	nop
 800b8ba:	e008      	b.n	800b8ce <tcp_process+0x7be>
      break;
 800b8bc:	bf00      	nop
 800b8be:	e006      	b.n	800b8ce <tcp_process+0x7be>
      break;
 800b8c0:	bf00      	nop
 800b8c2:	e004      	b.n	800b8ce <tcp_process+0x7be>
      break;
 800b8c4:	bf00      	nop
 800b8c6:	e002      	b.n	800b8ce <tcp_process+0x7be>
      break;
 800b8c8:	bf00      	nop
 800b8ca:	e000      	b.n	800b8ce <tcp_process+0x7be>
      break;
 800b8cc:	bf00      	nop
  }
  return ERR_OK;
 800b8ce:	2300      	movs	r3, #0
}
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	3724      	adds	r7, #36	; 0x24
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd90      	pop	{r4, r7, pc}
 800b8d8:	2000a7e4 	.word	0x2000a7e4
 800b8dc:	2000a7e0 	.word	0x2000a7e0
 800b8e0:	2000a814 	.word	0x2000a814
 800b8e4:	2000a80c 	.word	0x2000a80c
 800b8e8:	2000a815 	.word	0x2000a815
 800b8ec:	2000a7dc 	.word	0x2000a7dc

0800b8f0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800b8f0:	b590      	push	{r4, r7, lr}
 800b8f2:	b085      	sub	sp, #20
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
 800b8f8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d106      	bne.n	800b90e <tcp_oos_insert_segment+0x1e>
 800b900:	4b3b      	ldr	r3, [pc, #236]	; (800b9f0 <tcp_oos_insert_segment+0x100>)
 800b902:	f240 421f 	movw	r2, #1055	; 0x41f
 800b906:	493b      	ldr	r1, [pc, #236]	; (800b9f4 <tcp_oos_insert_segment+0x104>)
 800b908:	483b      	ldr	r0, [pc, #236]	; (800b9f8 <tcp_oos_insert_segment+0x108>)
 800b90a:	f006 fa0d 	bl	8011d28 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	68db      	ldr	r3, [r3, #12]
 800b912:	899b      	ldrh	r3, [r3, #12]
 800b914:	b29b      	uxth	r3, r3
 800b916:	4618      	mov	r0, r3
 800b918:	f7fb fcb0 	bl	800727c <lwip_htons>
 800b91c:	4603      	mov	r3, r0
 800b91e:	b2db      	uxtb	r3, r3
 800b920:	f003 0301 	and.w	r3, r3, #1
 800b924:	2b00      	cmp	r3, #0
 800b926:	d028      	beq.n	800b97a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800b928:	6838      	ldr	r0, [r7, #0]
 800b92a:	f7fe fa63 	bl	8009df4 <tcp_segs_free>
    next = NULL;
 800b92e:	2300      	movs	r3, #0
 800b930:	603b      	str	r3, [r7, #0]
 800b932:	e056      	b.n	800b9e2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	68db      	ldr	r3, [r3, #12]
 800b938:	899b      	ldrh	r3, [r3, #12]
 800b93a:	b29b      	uxth	r3, r3
 800b93c:	4618      	mov	r0, r3
 800b93e:	f7fb fc9d 	bl	800727c <lwip_htons>
 800b942:	4603      	mov	r3, r0
 800b944:	b2db      	uxtb	r3, r3
 800b946:	f003 0301 	and.w	r3, r3, #1
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d00d      	beq.n	800b96a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	68db      	ldr	r3, [r3, #12]
 800b952:	899b      	ldrh	r3, [r3, #12]
 800b954:	b29c      	uxth	r4, r3
 800b956:	2001      	movs	r0, #1
 800b958:	f7fb fc90 	bl	800727c <lwip_htons>
 800b95c:	4603      	mov	r3, r0
 800b95e:	461a      	mov	r2, r3
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	68db      	ldr	r3, [r3, #12]
 800b964:	4322      	orrs	r2, r4
 800b966:	b292      	uxth	r2, r2
 800b968:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800b974:	68f8      	ldr	r0, [r7, #12]
 800b976:	f7fe fa52 	bl	8009e1e <tcp_seg_free>
    while (next &&
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d00e      	beq.n	800b99e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	891b      	ldrh	r3, [r3, #8]
 800b984:	461a      	mov	r2, r3
 800b986:	4b1d      	ldr	r3, [pc, #116]	; (800b9fc <tcp_oos_insert_segment+0x10c>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	441a      	add	r2, r3
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	68db      	ldr	r3, [r3, #12]
 800b990:	685b      	ldr	r3, [r3, #4]
 800b992:	6839      	ldr	r1, [r7, #0]
 800b994:	8909      	ldrh	r1, [r1, #8]
 800b996:	440b      	add	r3, r1
 800b998:	1ad3      	subs	r3, r2, r3
    while (next &&
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	daca      	bge.n	800b934 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d01e      	beq.n	800b9e2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	891b      	ldrh	r3, [r3, #8]
 800b9a8:	461a      	mov	r2, r3
 800b9aa:	4b14      	ldr	r3, [pc, #80]	; (800b9fc <tcp_oos_insert_segment+0x10c>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	441a      	add	r2, r3
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	68db      	ldr	r3, [r3, #12]
 800b9b4:	685b      	ldr	r3, [r3, #4]
 800b9b6:	1ad3      	subs	r3, r2, r3
    if (next &&
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	dd12      	ble.n	800b9e2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	68db      	ldr	r3, [r3, #12]
 800b9c0:	685b      	ldr	r3, [r3, #4]
 800b9c2:	b29a      	uxth	r2, r3
 800b9c4:	4b0d      	ldr	r3, [pc, #52]	; (800b9fc <tcp_oos_insert_segment+0x10c>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	b29b      	uxth	r3, r3
 800b9ca:	1ad3      	subs	r3, r2, r3
 800b9cc:	b29a      	uxth	r2, r3
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	685a      	ldr	r2, [r3, #4]
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	891b      	ldrh	r3, [r3, #8]
 800b9da:	4619      	mov	r1, r3
 800b9dc:	4610      	mov	r0, r2
 800b9de:	f7fc fe25 	bl	800862c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	683a      	ldr	r2, [r7, #0]
 800b9e6:	601a      	str	r2, [r3, #0]
}
 800b9e8:	bf00      	nop
 800b9ea:	3714      	adds	r7, #20
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd90      	pop	{r4, r7, pc}
 800b9f0:	08014f48 	.word	0x08014f48
 800b9f4:	08015208 	.word	0x08015208
 800b9f8:	08014f94 	.word	0x08014f94
 800b9fc:	2000a808 	.word	0x2000a808

0800ba00 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800ba00:	b5b0      	push	{r4, r5, r7, lr}
 800ba02:	b086      	sub	sp, #24
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	60f8      	str	r0, [r7, #12]
 800ba08:	60b9      	str	r1, [r7, #8]
 800ba0a:	607a      	str	r2, [r7, #4]
 800ba0c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800ba0e:	e03e      	b.n	800ba8e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800ba1a:	697b      	ldr	r3, [r7, #20]
 800ba1c:	685b      	ldr	r3, [r3, #4]
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f7fd f812 	bl	8008a48 <pbuf_clen>
 800ba24:	4603      	mov	r3, r0
 800ba26:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ba2e:	8a7a      	ldrh	r2, [r7, #18]
 800ba30:	429a      	cmp	r2, r3
 800ba32:	d906      	bls.n	800ba42 <tcp_free_acked_segments+0x42>
 800ba34:	4b2a      	ldr	r3, [pc, #168]	; (800bae0 <tcp_free_acked_segments+0xe0>)
 800ba36:	f240 4257 	movw	r2, #1111	; 0x457
 800ba3a:	492a      	ldr	r1, [pc, #168]	; (800bae4 <tcp_free_acked_segments+0xe4>)
 800ba3c:	482a      	ldr	r0, [pc, #168]	; (800bae8 <tcp_free_acked_segments+0xe8>)
 800ba3e:	f006 f973 	bl	8011d28 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800ba48:	8a7b      	ldrh	r3, [r7, #18]
 800ba4a:	1ad3      	subs	r3, r2, r3
 800ba4c:	b29a      	uxth	r2, r3
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800ba54:	697b      	ldr	r3, [r7, #20]
 800ba56:	891a      	ldrh	r2, [r3, #8]
 800ba58:	4b24      	ldr	r3, [pc, #144]	; (800baec <tcp_free_acked_segments+0xec>)
 800ba5a:	881b      	ldrh	r3, [r3, #0]
 800ba5c:	4413      	add	r3, r2
 800ba5e:	b29a      	uxth	r2, r3
 800ba60:	4b22      	ldr	r3, [pc, #136]	; (800baec <tcp_free_acked_segments+0xec>)
 800ba62:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800ba64:	6978      	ldr	r0, [r7, #20]
 800ba66:	f7fe f9da 	bl	8009e1e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d00c      	beq.n	800ba8e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d109      	bne.n	800ba8e <tcp_free_acked_segments+0x8e>
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d106      	bne.n	800ba8e <tcp_free_acked_segments+0x8e>
 800ba80:	4b17      	ldr	r3, [pc, #92]	; (800bae0 <tcp_free_acked_segments+0xe0>)
 800ba82:	f240 4261 	movw	r2, #1121	; 0x461
 800ba86:	491a      	ldr	r1, [pc, #104]	; (800baf0 <tcp_free_acked_segments+0xf0>)
 800ba88:	4817      	ldr	r0, [pc, #92]	; (800bae8 <tcp_free_acked_segments+0xe8>)
 800ba8a:	f006 f94d 	bl	8011d28 <iprintf>
  while (seg_list != NULL &&
 800ba8e:	68bb      	ldr	r3, [r7, #8]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d020      	beq.n	800bad6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	68db      	ldr	r3, [r3, #12]
 800ba98:	685b      	ldr	r3, [r3, #4]
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f7fb fc03 	bl	80072a6 <lwip_htonl>
 800baa0:	4604      	mov	r4, r0
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	891b      	ldrh	r3, [r3, #8]
 800baa6:	461d      	mov	r5, r3
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	68db      	ldr	r3, [r3, #12]
 800baac:	899b      	ldrh	r3, [r3, #12]
 800baae:	b29b      	uxth	r3, r3
 800bab0:	4618      	mov	r0, r3
 800bab2:	f7fb fbe3 	bl	800727c <lwip_htons>
 800bab6:	4603      	mov	r3, r0
 800bab8:	b2db      	uxtb	r3, r3
 800baba:	f003 0303 	and.w	r3, r3, #3
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d001      	beq.n	800bac6 <tcp_free_acked_segments+0xc6>
 800bac2:	2301      	movs	r3, #1
 800bac4:	e000      	b.n	800bac8 <tcp_free_acked_segments+0xc8>
 800bac6:	2300      	movs	r3, #0
 800bac8:	442b      	add	r3, r5
 800baca:	18e2      	adds	r2, r4, r3
 800bacc:	4b09      	ldr	r3, [pc, #36]	; (800baf4 <tcp_free_acked_segments+0xf4>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	dd9c      	ble.n	800ba10 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800bad6:	68bb      	ldr	r3, [r7, #8]
}
 800bad8:	4618      	mov	r0, r3
 800bada:	3718      	adds	r7, #24
 800badc:	46bd      	mov	sp, r7
 800bade:	bdb0      	pop	{r4, r5, r7, pc}
 800bae0:	08014f48 	.word	0x08014f48
 800bae4:	08015230 	.word	0x08015230
 800bae8:	08014f94 	.word	0x08014f94
 800baec:	2000a810 	.word	0x2000a810
 800baf0:	08015258 	.word	0x08015258
 800baf4:	2000a80c 	.word	0x2000a80c

0800baf8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800baf8:	b5b0      	push	{r4, r5, r7, lr}
 800bafa:	b094      	sub	sp, #80	; 0x50
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800bb00:	2300      	movs	r3, #0
 800bb02:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d106      	bne.n	800bb18 <tcp_receive+0x20>
 800bb0a:	4b91      	ldr	r3, [pc, #580]	; (800bd50 <tcp_receive+0x258>)
 800bb0c:	f240 427b 	movw	r2, #1147	; 0x47b
 800bb10:	4990      	ldr	r1, [pc, #576]	; (800bd54 <tcp_receive+0x25c>)
 800bb12:	4891      	ldr	r0, [pc, #580]	; (800bd58 <tcp_receive+0x260>)
 800bb14:	f006 f908 	bl	8011d28 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	7d1b      	ldrb	r3, [r3, #20]
 800bb1c:	2b03      	cmp	r3, #3
 800bb1e:	d806      	bhi.n	800bb2e <tcp_receive+0x36>
 800bb20:	4b8b      	ldr	r3, [pc, #556]	; (800bd50 <tcp_receive+0x258>)
 800bb22:	f240 427c 	movw	r2, #1148	; 0x47c
 800bb26:	498d      	ldr	r1, [pc, #564]	; (800bd5c <tcp_receive+0x264>)
 800bb28:	488b      	ldr	r0, [pc, #556]	; (800bd58 <tcp_receive+0x260>)
 800bb2a:	f006 f8fd 	bl	8011d28 <iprintf>

  if (flags & TCP_ACK) {
 800bb2e:	4b8c      	ldr	r3, [pc, #560]	; (800bd60 <tcp_receive+0x268>)
 800bb30:	781b      	ldrb	r3, [r3, #0]
 800bb32:	f003 0310 	and.w	r3, r3, #16
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	f000 8264 	beq.w	800c004 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bb42:	461a      	mov	r2, r3
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb48:	4413      	add	r3, r2
 800bb4a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bb50:	4b84      	ldr	r3, [pc, #528]	; (800bd64 <tcp_receive+0x26c>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	1ad3      	subs	r3, r2, r3
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	db1b      	blt.n	800bb92 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bb5e:	4b81      	ldr	r3, [pc, #516]	; (800bd64 <tcp_receive+0x26c>)
 800bb60:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800bb62:	429a      	cmp	r2, r3
 800bb64:	d106      	bne.n	800bb74 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bb6a:	4b7f      	ldr	r3, [pc, #508]	; (800bd68 <tcp_receive+0x270>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	1ad3      	subs	r3, r2, r3
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	db0e      	blt.n	800bb92 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bb78:	4b7b      	ldr	r3, [pc, #492]	; (800bd68 <tcp_receive+0x270>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bb7c:	429a      	cmp	r2, r3
 800bb7e:	d125      	bne.n	800bbcc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800bb80:	4b7a      	ldr	r3, [pc, #488]	; (800bd6c <tcp_receive+0x274>)
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	89db      	ldrh	r3, [r3, #14]
 800bb86:	b29a      	uxth	r2, r3
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bb8e:	429a      	cmp	r2, r3
 800bb90:	d91c      	bls.n	800bbcc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800bb92:	4b76      	ldr	r3, [pc, #472]	; (800bd6c <tcp_receive+0x274>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	89db      	ldrh	r3, [r3, #14]
 800bb98:	b29a      	uxth	r2, r3
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d205      	bcs.n	800bbbc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800bbbc:	4b69      	ldr	r3, [pc, #420]	; (800bd64 <tcp_receive+0x26c>)
 800bbbe:	681a      	ldr	r2, [r3, #0]
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800bbc4:	4b68      	ldr	r3, [pc, #416]	; (800bd68 <tcp_receive+0x270>)
 800bbc6:	681a      	ldr	r2, [r3, #0]
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800bbcc:	4b66      	ldr	r3, [pc, #408]	; (800bd68 <tcp_receive+0x270>)
 800bbce:	681a      	ldr	r2, [r3, #0]
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbd4:	1ad3      	subs	r3, r2, r3
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	dc58      	bgt.n	800bc8c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800bbda:	4b65      	ldr	r3, [pc, #404]	; (800bd70 <tcp_receive+0x278>)
 800bbdc:	881b      	ldrh	r3, [r3, #0]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d14b      	bne.n	800bc7a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbe6:	687a      	ldr	r2, [r7, #4]
 800bbe8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800bbec:	4413      	add	r3, r2
 800bbee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	d142      	bne.n	800bc7a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	db3d      	blt.n	800bc7a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bc02:	4b59      	ldr	r3, [pc, #356]	; (800bd68 <tcp_receive+0x270>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	429a      	cmp	r2, r3
 800bc08:	d137      	bne.n	800bc7a <tcp_receive+0x182>
              found_dupack = 1;
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bc14:	2bff      	cmp	r3, #255	; 0xff
 800bc16:	d007      	beq.n	800bc28 <tcp_receive+0x130>
                ++pcb->dupacks;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bc1e:	3301      	adds	r3, #1
 800bc20:	b2da      	uxtb	r2, r3
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bc2e:	2b03      	cmp	r3, #3
 800bc30:	d91b      	bls.n	800bc6a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bc3c:	4413      	add	r3, r2
 800bc3e:	b29a      	uxth	r2, r3
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bc46:	429a      	cmp	r2, r3
 800bc48:	d30a      	bcc.n	800bc60 <tcp_receive+0x168>
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bc54:	4413      	add	r3, r2
 800bc56:	b29a      	uxth	r2, r3
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800bc5e:	e004      	b.n	800bc6a <tcp_receive+0x172>
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bc66:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bc70:	2b02      	cmp	r3, #2
 800bc72:	d902      	bls.n	800bc7a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f001 feed 	bl	800da54 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800bc7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	f040 8161 	bne.w	800bf44 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2200      	movs	r2, #0
 800bc86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bc8a:	e15b      	b.n	800bf44 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bc8c:	4b36      	ldr	r3, [pc, #216]	; (800bd68 <tcp_receive+0x270>)
 800bc8e:	681a      	ldr	r2, [r3, #0]
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc94:	1ad3      	subs	r3, r2, r3
 800bc96:	3b01      	subs	r3, #1
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	f2c0 814e 	blt.w	800bf3a <tcp_receive+0x442>
 800bc9e:	4b32      	ldr	r3, [pc, #200]	; (800bd68 <tcp_receive+0x270>)
 800bca0:	681a      	ldr	r2, [r3, #0]
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bca6:	1ad3      	subs	r3, r2, r3
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	f300 8146 	bgt.w	800bf3a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	8b5b      	ldrh	r3, [r3, #26]
 800bcb2:	f003 0304 	and.w	r3, r3, #4
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d010      	beq.n	800bcdc <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	8b5b      	ldrh	r3, [r3, #26]
 800bcbe:	f023 0304 	bic.w	r3, r3, #4
 800bcc2:	b29a      	uxth	r2, r3
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2200      	movs	r2, #0
 800bce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bcea:	10db      	asrs	r3, r3, #3
 800bcec:	b21b      	sxth	r3, r3
 800bcee:	b29a      	uxth	r2, r3
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bcf6:	b29b      	uxth	r3, r3
 800bcf8:	4413      	add	r3, r2
 800bcfa:	b29b      	uxth	r3, r3
 800bcfc:	b21a      	sxth	r2, r3
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800bd04:	4b18      	ldr	r3, [pc, #96]	; (800bd68 <tcp_receive+0x270>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	b29a      	uxth	r2, r3
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd0e:	b29b      	uxth	r3, r3
 800bd10:	1ad3      	subs	r3, r2, r3
 800bd12:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2200      	movs	r2, #0
 800bd18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800bd1c:	4b12      	ldr	r3, [pc, #72]	; (800bd68 <tcp_receive+0x270>)
 800bd1e:	681a      	ldr	r2, [r3, #0]
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	7d1b      	ldrb	r3, [r3, #20]
 800bd28:	2b03      	cmp	r3, #3
 800bd2a:	f240 8097 	bls.w	800be5c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800bd3a:	429a      	cmp	r2, r3
 800bd3c:	d245      	bcs.n	800bdca <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	8b5b      	ldrh	r3, [r3, #26]
 800bd42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d014      	beq.n	800bd74 <tcp_receive+0x27c>
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	e013      	b.n	800bd76 <tcp_receive+0x27e>
 800bd4e:	bf00      	nop
 800bd50:	08014f48 	.word	0x08014f48
 800bd54:	08015278 	.word	0x08015278
 800bd58:	08014f94 	.word	0x08014f94
 800bd5c:	08015294 	.word	0x08015294
 800bd60:	2000a814 	.word	0x2000a814
 800bd64:	2000a808 	.word	0x2000a808
 800bd68:	2000a80c 	.word	0x2000a80c
 800bd6c:	2000a7f8 	.word	0x2000a7f8
 800bd70:	2000a812 	.word	0x2000a812
 800bd74:	2302      	movs	r3, #2
 800bd76:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800bd7a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800bd7e:	b29a      	uxth	r2, r3
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bd84:	fb12 f303 	smulbb	r3, r2, r3
 800bd88:	b29b      	uxth	r3, r3
 800bd8a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bd8c:	4293      	cmp	r3, r2
 800bd8e:	bf28      	it	cs
 800bd90:	4613      	movcs	r3, r2
 800bd92:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bd9a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800bd9c:	4413      	add	r3, r2
 800bd9e:	b29a      	uxth	r2, r3
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bda6:	429a      	cmp	r2, r3
 800bda8:	d309      	bcc.n	800bdbe <tcp_receive+0x2c6>
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bdb0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800bdb2:	4413      	add	r3, r2
 800bdb4:	b29a      	uxth	r2, r3
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800bdbc:	e04e      	b.n	800be5c <tcp_receive+0x364>
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bdc4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800bdc8:	e048      	b.n	800be5c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800bdd0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bdd2:	4413      	add	r3, r2
 800bdd4:	b29a      	uxth	r2, r3
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bddc:	429a      	cmp	r2, r3
 800bdde:	d309      	bcc.n	800bdf4 <tcp_receive+0x2fc>
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800bde6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bde8:	4413      	add	r3, r2
 800bdea:	b29a      	uxth	r2, r3
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bdf2:	e004      	b.n	800bdfe <tcp_receive+0x306>
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bdfa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800be0a:	429a      	cmp	r2, r3
 800be0c:	d326      	bcc.n	800be5c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800be1a:	1ad3      	subs	r3, r2, r3
 800be1c:	b29a      	uxth	r2, r3
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800be2e:	4413      	add	r3, r2
 800be30:	b29a      	uxth	r2, r3
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800be38:	429a      	cmp	r2, r3
 800be3a:	d30a      	bcc.n	800be52 <tcp_receive+0x35a>
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800be46:	4413      	add	r3, r2
 800be48:	b29a      	uxth	r2, r3
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800be50:	e004      	b.n	800be5c <tcp_receive+0x364>
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be58:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be64:	4a98      	ldr	r2, [pc, #608]	; (800c0c8 <tcp_receive+0x5d0>)
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f7ff fdca 	bl	800ba00 <tcp_free_acked_segments>
 800be6c:	4602      	mov	r2, r0
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be7a:	4a94      	ldr	r2, [pc, #592]	; (800c0cc <tcp_receive+0x5d4>)
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	f7ff fdbf 	bl	800ba00 <tcp_free_acked_segments>
 800be82:	4602      	mov	r2, r0
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d104      	bne.n	800be9a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be96:	861a      	strh	r2, [r3, #48]	; 0x30
 800be98:	e002      	b.n	800bea0 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2200      	movs	r2, #0
 800be9e:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2200      	movs	r2, #0
 800bea4:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d103      	bne.n	800beb6 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2200      	movs	r2, #0
 800beb2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800bebc:	4b84      	ldr	r3, [pc, #528]	; (800c0d0 <tcp_receive+0x5d8>)
 800bebe:	881b      	ldrh	r3, [r3, #0]
 800bec0:	4413      	add	r3, r2
 800bec2:	b29a      	uxth	r2, r3
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	8b5b      	ldrh	r3, [r3, #26]
 800bece:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d035      	beq.n	800bf42 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d118      	bne.n	800bf10 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d00c      	beq.n	800bf00 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800beee:	68db      	ldr	r3, [r3, #12]
 800bef0:	685b      	ldr	r3, [r3, #4]
 800bef2:	4618      	mov	r0, r3
 800bef4:	f7fb f9d7 	bl	80072a6 <lwip_htonl>
 800bef8:	4603      	mov	r3, r0
 800befa:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800befc:	2b00      	cmp	r3, #0
 800befe:	dc20      	bgt.n	800bf42 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	8b5b      	ldrh	r3, [r3, #26]
 800bf04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bf08:	b29a      	uxth	r2, r3
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bf0e:	e018      	b.n	800bf42 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf18:	68db      	ldr	r3, [r3, #12]
 800bf1a:	685b      	ldr	r3, [r3, #4]
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	f7fb f9c2 	bl	80072a6 <lwip_htonl>
 800bf22:	4603      	mov	r3, r0
 800bf24:	1ae3      	subs	r3, r4, r3
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	dc0b      	bgt.n	800bf42 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	8b5b      	ldrh	r3, [r3, #26]
 800bf2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bf32:	b29a      	uxth	r2, r3
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bf38:	e003      	b.n	800bf42 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f001 ff76 	bl	800de2c <tcp_send_empty_ack>
 800bf40:	e000      	b.n	800bf44 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bf42:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d05b      	beq.n	800c004 <tcp_receive+0x50c>
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf50:	4b60      	ldr	r3, [pc, #384]	; (800c0d4 <tcp_receive+0x5dc>)
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	1ad3      	subs	r3, r2, r3
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	da54      	bge.n	800c004 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800bf5a:	4b5f      	ldr	r3, [pc, #380]	; (800c0d8 <tcp_receive+0x5e0>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	b29a      	uxth	r2, r3
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf64:	b29b      	uxth	r3, r3
 800bf66:	1ad3      	subs	r3, r2, r3
 800bf68:	b29b      	uxth	r3, r3
 800bf6a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800bf6e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bf78:	10db      	asrs	r3, r3, #3
 800bf7a:	b21b      	sxth	r3, r3
 800bf7c:	b29b      	uxth	r3, r3
 800bf7e:	1ad3      	subs	r3, r2, r3
 800bf80:	b29b      	uxth	r3, r3
 800bf82:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bf8c:	b29a      	uxth	r2, r3
 800bf8e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bf92:	4413      	add	r3, r2
 800bf94:	b29b      	uxth	r3, r3
 800bf96:	b21a      	sxth	r2, r3
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800bf9c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	da05      	bge.n	800bfb0 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800bfa4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bfa8:	425b      	negs	r3, r3
 800bfaa:	b29b      	uxth	r3, r3
 800bfac:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800bfb0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bfba:	109b      	asrs	r3, r3, #2
 800bfbc:	b21b      	sxth	r3, r3
 800bfbe:	b29b      	uxth	r3, r3
 800bfc0:	1ad3      	subs	r3, r2, r3
 800bfc2:	b29b      	uxth	r3, r3
 800bfc4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bfce:	b29a      	uxth	r2, r3
 800bfd0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bfd4:	4413      	add	r3, r2
 800bfd6:	b29b      	uxth	r3, r3
 800bfd8:	b21a      	sxth	r2, r3
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bfe4:	10db      	asrs	r3, r3, #3
 800bfe6:	b21b      	sxth	r3, r3
 800bfe8:	b29a      	uxth	r2, r3
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bff0:	b29b      	uxth	r3, r3
 800bff2:	4413      	add	r3, r2
 800bff4:	b29b      	uxth	r3, r3
 800bff6:	b21a      	sxth	r2, r3
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	2200      	movs	r2, #0
 800c002:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800c004:	4b35      	ldr	r3, [pc, #212]	; (800c0dc <tcp_receive+0x5e4>)
 800c006:	881b      	ldrh	r3, [r3, #0]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	f000 84e2 	beq.w	800c9d2 <tcp_receive+0xeda>
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	7d1b      	ldrb	r3, [r3, #20]
 800c012:	2b06      	cmp	r3, #6
 800c014:	f200 84dd 	bhi.w	800c9d2 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c01c:	4b30      	ldr	r3, [pc, #192]	; (800c0e0 <tcp_receive+0x5e8>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	1ad3      	subs	r3, r2, r3
 800c022:	3b01      	subs	r3, #1
 800c024:	2b00      	cmp	r3, #0
 800c026:	f2c0 808f 	blt.w	800c148 <tcp_receive+0x650>
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c02e:	4b2b      	ldr	r3, [pc, #172]	; (800c0dc <tcp_receive+0x5e4>)
 800c030:	881b      	ldrh	r3, [r3, #0]
 800c032:	4619      	mov	r1, r3
 800c034:	4b2a      	ldr	r3, [pc, #168]	; (800c0e0 <tcp_receive+0x5e8>)
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	440b      	add	r3, r1
 800c03a:	1ad3      	subs	r3, r2, r3
 800c03c:	3301      	adds	r3, #1
 800c03e:	2b00      	cmp	r3, #0
 800c040:	f300 8082 	bgt.w	800c148 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800c044:	4b27      	ldr	r3, [pc, #156]	; (800c0e4 <tcp_receive+0x5ec>)
 800c046:	685b      	ldr	r3, [r3, #4]
 800c048:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c04e:	4b24      	ldr	r3, [pc, #144]	; (800c0e0 <tcp_receive+0x5e8>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	1ad3      	subs	r3, r2, r3
 800c054:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800c056:	4b23      	ldr	r3, [pc, #140]	; (800c0e4 <tcp_receive+0x5ec>)
 800c058:	685b      	ldr	r3, [r3, #4]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d106      	bne.n	800c06c <tcp_receive+0x574>
 800c05e:	4b22      	ldr	r3, [pc, #136]	; (800c0e8 <tcp_receive+0x5f0>)
 800c060:	f240 5294 	movw	r2, #1428	; 0x594
 800c064:	4921      	ldr	r1, [pc, #132]	; (800c0ec <tcp_receive+0x5f4>)
 800c066:	4822      	ldr	r0, [pc, #136]	; (800c0f0 <tcp_receive+0x5f8>)
 800c068:	f005 fe5e 	bl	8011d28 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800c06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c06e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c072:	4293      	cmp	r3, r2
 800c074:	d906      	bls.n	800c084 <tcp_receive+0x58c>
 800c076:	4b1c      	ldr	r3, [pc, #112]	; (800c0e8 <tcp_receive+0x5f0>)
 800c078:	f240 5295 	movw	r2, #1429	; 0x595
 800c07c:	491d      	ldr	r1, [pc, #116]	; (800c0f4 <tcp_receive+0x5fc>)
 800c07e:	481c      	ldr	r0, [pc, #112]	; (800c0f0 <tcp_receive+0x5f8>)
 800c080:	f005 fe52 	bl	8011d28 <iprintf>
      off = (u16_t)off32;
 800c084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c086:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800c08a:	4b16      	ldr	r3, [pc, #88]	; (800c0e4 <tcp_receive+0x5ec>)
 800c08c:	685b      	ldr	r3, [r3, #4]
 800c08e:	891b      	ldrh	r3, [r3, #8]
 800c090:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c094:	429a      	cmp	r2, r3
 800c096:	d906      	bls.n	800c0a6 <tcp_receive+0x5ae>
 800c098:	4b13      	ldr	r3, [pc, #76]	; (800c0e8 <tcp_receive+0x5f0>)
 800c09a:	f240 5297 	movw	r2, #1431	; 0x597
 800c09e:	4916      	ldr	r1, [pc, #88]	; (800c0f8 <tcp_receive+0x600>)
 800c0a0:	4813      	ldr	r0, [pc, #76]	; (800c0f0 <tcp_receive+0x5f8>)
 800c0a2:	f005 fe41 	bl	8011d28 <iprintf>
      inseg.len -= off;
 800c0a6:	4b0f      	ldr	r3, [pc, #60]	; (800c0e4 <tcp_receive+0x5ec>)
 800c0a8:	891a      	ldrh	r2, [r3, #8]
 800c0aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c0ae:	1ad3      	subs	r3, r2, r3
 800c0b0:	b29a      	uxth	r2, r3
 800c0b2:	4b0c      	ldr	r3, [pc, #48]	; (800c0e4 <tcp_receive+0x5ec>)
 800c0b4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c0b6:	4b0b      	ldr	r3, [pc, #44]	; (800c0e4 <tcp_receive+0x5ec>)
 800c0b8:	685b      	ldr	r3, [r3, #4]
 800c0ba:	891a      	ldrh	r2, [r3, #8]
 800c0bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c0c0:	1ad3      	subs	r3, r2, r3
 800c0c2:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800c0c4:	e02a      	b.n	800c11c <tcp_receive+0x624>
 800c0c6:	bf00      	nop
 800c0c8:	080152b0 	.word	0x080152b0
 800c0cc:	080152b8 	.word	0x080152b8
 800c0d0:	2000a810 	.word	0x2000a810
 800c0d4:	2000a80c 	.word	0x2000a80c
 800c0d8:	2000a7d0 	.word	0x2000a7d0
 800c0dc:	2000a812 	.word	0x2000a812
 800c0e0:	2000a808 	.word	0x2000a808
 800c0e4:	2000a7e8 	.word	0x2000a7e8
 800c0e8:	08014f48 	.word	0x08014f48
 800c0ec:	080152c0 	.word	0x080152c0
 800c0f0:	08014f94 	.word	0x08014f94
 800c0f4:	080152d0 	.word	0x080152d0
 800c0f8:	080152e0 	.word	0x080152e0
        off -= p->len;
 800c0fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0fe:	895b      	ldrh	r3, [r3, #10]
 800c100:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c104:	1ad3      	subs	r3, r2, r3
 800c106:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800c10a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c10c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c10e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800c110:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c112:	2200      	movs	r2, #0
 800c114:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800c116:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800c11c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c11e:	895b      	ldrh	r3, [r3, #10]
 800c120:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c124:	429a      	cmp	r2, r3
 800c126:	d8e9      	bhi.n	800c0fc <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800c128:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c12c:	4619      	mov	r1, r3
 800c12e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c130:	f7fc fb7c 	bl	800882c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c138:	4a91      	ldr	r2, [pc, #580]	; (800c380 <tcp_receive+0x888>)
 800c13a:	6013      	str	r3, [r2, #0]
 800c13c:	4b91      	ldr	r3, [pc, #580]	; (800c384 <tcp_receive+0x88c>)
 800c13e:	68db      	ldr	r3, [r3, #12]
 800c140:	4a8f      	ldr	r2, [pc, #572]	; (800c380 <tcp_receive+0x888>)
 800c142:	6812      	ldr	r2, [r2, #0]
 800c144:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c146:	e00d      	b.n	800c164 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800c148:	4b8d      	ldr	r3, [pc, #564]	; (800c380 <tcp_receive+0x888>)
 800c14a:	681a      	ldr	r2, [r3, #0]
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c150:	1ad3      	subs	r3, r2, r3
 800c152:	2b00      	cmp	r3, #0
 800c154:	da06      	bge.n	800c164 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	8b5b      	ldrh	r3, [r3, #26]
 800c15a:	f043 0302 	orr.w	r3, r3, #2
 800c15e:	b29a      	uxth	r2, r3
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c164:	4b86      	ldr	r3, [pc, #536]	; (800c380 <tcp_receive+0x888>)
 800c166:	681a      	ldr	r2, [r3, #0]
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c16c:	1ad3      	subs	r3, r2, r3
 800c16e:	2b00      	cmp	r3, #0
 800c170:	f2c0 842a 	blt.w	800c9c8 <tcp_receive+0xed0>
 800c174:	4b82      	ldr	r3, [pc, #520]	; (800c380 <tcp_receive+0x888>)
 800c176:	681a      	ldr	r2, [r3, #0]
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c17c:	6879      	ldr	r1, [r7, #4]
 800c17e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c180:	440b      	add	r3, r1
 800c182:	1ad3      	subs	r3, r2, r3
 800c184:	3301      	adds	r3, #1
 800c186:	2b00      	cmp	r3, #0
 800c188:	f300 841e 	bgt.w	800c9c8 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c190:	4b7b      	ldr	r3, [pc, #492]	; (800c380 <tcp_receive+0x888>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	429a      	cmp	r2, r3
 800c196:	f040 829a 	bne.w	800c6ce <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800c19a:	4b7a      	ldr	r3, [pc, #488]	; (800c384 <tcp_receive+0x88c>)
 800c19c:	891c      	ldrh	r4, [r3, #8]
 800c19e:	4b79      	ldr	r3, [pc, #484]	; (800c384 <tcp_receive+0x88c>)
 800c1a0:	68db      	ldr	r3, [r3, #12]
 800c1a2:	899b      	ldrh	r3, [r3, #12]
 800c1a4:	b29b      	uxth	r3, r3
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f7fb f868 	bl	800727c <lwip_htons>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	b2db      	uxtb	r3, r3
 800c1b0:	f003 0303 	and.w	r3, r3, #3
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d001      	beq.n	800c1bc <tcp_receive+0x6c4>
 800c1b8:	2301      	movs	r3, #1
 800c1ba:	e000      	b.n	800c1be <tcp_receive+0x6c6>
 800c1bc:	2300      	movs	r3, #0
 800c1be:	4423      	add	r3, r4
 800c1c0:	b29a      	uxth	r2, r3
 800c1c2:	4b71      	ldr	r3, [pc, #452]	; (800c388 <tcp_receive+0x890>)
 800c1c4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c1ca:	4b6f      	ldr	r3, [pc, #444]	; (800c388 <tcp_receive+0x890>)
 800c1cc:	881b      	ldrh	r3, [r3, #0]
 800c1ce:	429a      	cmp	r2, r3
 800c1d0:	d275      	bcs.n	800c2be <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c1d2:	4b6c      	ldr	r3, [pc, #432]	; (800c384 <tcp_receive+0x88c>)
 800c1d4:	68db      	ldr	r3, [r3, #12]
 800c1d6:	899b      	ldrh	r3, [r3, #12]
 800c1d8:	b29b      	uxth	r3, r3
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f7fb f84e 	bl	800727c <lwip_htons>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	b2db      	uxtb	r3, r3
 800c1e4:	f003 0301 	and.w	r3, r3, #1
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d01f      	beq.n	800c22c <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800c1ec:	4b65      	ldr	r3, [pc, #404]	; (800c384 <tcp_receive+0x88c>)
 800c1ee:	68db      	ldr	r3, [r3, #12]
 800c1f0:	899b      	ldrh	r3, [r3, #12]
 800c1f2:	b29b      	uxth	r3, r3
 800c1f4:	b21b      	sxth	r3, r3
 800c1f6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c1fa:	b21c      	sxth	r4, r3
 800c1fc:	4b61      	ldr	r3, [pc, #388]	; (800c384 <tcp_receive+0x88c>)
 800c1fe:	68db      	ldr	r3, [r3, #12]
 800c200:	899b      	ldrh	r3, [r3, #12]
 800c202:	b29b      	uxth	r3, r3
 800c204:	4618      	mov	r0, r3
 800c206:	f7fb f839 	bl	800727c <lwip_htons>
 800c20a:	4603      	mov	r3, r0
 800c20c:	b2db      	uxtb	r3, r3
 800c20e:	b29b      	uxth	r3, r3
 800c210:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c214:	b29b      	uxth	r3, r3
 800c216:	4618      	mov	r0, r3
 800c218:	f7fb f830 	bl	800727c <lwip_htons>
 800c21c:	4603      	mov	r3, r0
 800c21e:	b21b      	sxth	r3, r3
 800c220:	4323      	orrs	r3, r4
 800c222:	b21a      	sxth	r2, r3
 800c224:	4b57      	ldr	r3, [pc, #348]	; (800c384 <tcp_receive+0x88c>)
 800c226:	68db      	ldr	r3, [r3, #12]
 800c228:	b292      	uxth	r2, r2
 800c22a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c230:	4b54      	ldr	r3, [pc, #336]	; (800c384 <tcp_receive+0x88c>)
 800c232:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c234:	4b53      	ldr	r3, [pc, #332]	; (800c384 <tcp_receive+0x88c>)
 800c236:	68db      	ldr	r3, [r3, #12]
 800c238:	899b      	ldrh	r3, [r3, #12]
 800c23a:	b29b      	uxth	r3, r3
 800c23c:	4618      	mov	r0, r3
 800c23e:	f7fb f81d 	bl	800727c <lwip_htons>
 800c242:	4603      	mov	r3, r0
 800c244:	b2db      	uxtb	r3, r3
 800c246:	f003 0302 	and.w	r3, r3, #2
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d005      	beq.n	800c25a <tcp_receive+0x762>
            inseg.len -= 1;
 800c24e:	4b4d      	ldr	r3, [pc, #308]	; (800c384 <tcp_receive+0x88c>)
 800c250:	891b      	ldrh	r3, [r3, #8]
 800c252:	3b01      	subs	r3, #1
 800c254:	b29a      	uxth	r2, r3
 800c256:	4b4b      	ldr	r3, [pc, #300]	; (800c384 <tcp_receive+0x88c>)
 800c258:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800c25a:	4b4a      	ldr	r3, [pc, #296]	; (800c384 <tcp_receive+0x88c>)
 800c25c:	685b      	ldr	r3, [r3, #4]
 800c25e:	4a49      	ldr	r2, [pc, #292]	; (800c384 <tcp_receive+0x88c>)
 800c260:	8912      	ldrh	r2, [r2, #8]
 800c262:	4611      	mov	r1, r2
 800c264:	4618      	mov	r0, r3
 800c266:	f7fc f9e1 	bl	800862c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800c26a:	4b46      	ldr	r3, [pc, #280]	; (800c384 <tcp_receive+0x88c>)
 800c26c:	891c      	ldrh	r4, [r3, #8]
 800c26e:	4b45      	ldr	r3, [pc, #276]	; (800c384 <tcp_receive+0x88c>)
 800c270:	68db      	ldr	r3, [r3, #12]
 800c272:	899b      	ldrh	r3, [r3, #12]
 800c274:	b29b      	uxth	r3, r3
 800c276:	4618      	mov	r0, r3
 800c278:	f7fb f800 	bl	800727c <lwip_htons>
 800c27c:	4603      	mov	r3, r0
 800c27e:	b2db      	uxtb	r3, r3
 800c280:	f003 0303 	and.w	r3, r3, #3
 800c284:	2b00      	cmp	r3, #0
 800c286:	d001      	beq.n	800c28c <tcp_receive+0x794>
 800c288:	2301      	movs	r3, #1
 800c28a:	e000      	b.n	800c28e <tcp_receive+0x796>
 800c28c:	2300      	movs	r3, #0
 800c28e:	4423      	add	r3, r4
 800c290:	b29a      	uxth	r2, r3
 800c292:	4b3d      	ldr	r3, [pc, #244]	; (800c388 <tcp_receive+0x890>)
 800c294:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c296:	4b3c      	ldr	r3, [pc, #240]	; (800c388 <tcp_receive+0x890>)
 800c298:	881b      	ldrh	r3, [r3, #0]
 800c29a:	461a      	mov	r2, r3
 800c29c:	4b38      	ldr	r3, [pc, #224]	; (800c380 <tcp_receive+0x888>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	441a      	add	r2, r3
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2a6:	6879      	ldr	r1, [r7, #4]
 800c2a8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c2aa:	440b      	add	r3, r1
 800c2ac:	429a      	cmp	r2, r3
 800c2ae:	d006      	beq.n	800c2be <tcp_receive+0x7c6>
 800c2b0:	4b36      	ldr	r3, [pc, #216]	; (800c38c <tcp_receive+0x894>)
 800c2b2:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800c2b6:	4936      	ldr	r1, [pc, #216]	; (800c390 <tcp_receive+0x898>)
 800c2b8:	4836      	ldr	r0, [pc, #216]	; (800c394 <tcp_receive+0x89c>)
 800c2ba:	f005 fd35 	bl	8011d28 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	f000 80e7 	beq.w	800c496 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c2c8:	4b2e      	ldr	r3, [pc, #184]	; (800c384 <tcp_receive+0x88c>)
 800c2ca:	68db      	ldr	r3, [r3, #12]
 800c2cc:	899b      	ldrh	r3, [r3, #12]
 800c2ce:	b29b      	uxth	r3, r3
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	f7fa ffd3 	bl	800727c <lwip_htons>
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	b2db      	uxtb	r3, r3
 800c2da:	f003 0301 	and.w	r3, r3, #1
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d010      	beq.n	800c304 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800c2e2:	e00a      	b.n	800c2fa <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c2e8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c2ee:	681a      	ldr	r2, [r3, #0]
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800c2f4:	68f8      	ldr	r0, [r7, #12]
 800c2f6:	f7fd fd92 	bl	8009e1e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d1f0      	bne.n	800c2e4 <tcp_receive+0x7ec>
 800c302:	e0c8      	b.n	800c496 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c308:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800c30a:	e052      	b.n	800c3b2 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c30c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c30e:	68db      	ldr	r3, [r3, #12]
 800c310:	899b      	ldrh	r3, [r3, #12]
 800c312:	b29b      	uxth	r3, r3
 800c314:	4618      	mov	r0, r3
 800c316:	f7fa ffb1 	bl	800727c <lwip_htons>
 800c31a:	4603      	mov	r3, r0
 800c31c:	b2db      	uxtb	r3, r3
 800c31e:	f003 0301 	and.w	r3, r3, #1
 800c322:	2b00      	cmp	r3, #0
 800c324:	d03d      	beq.n	800c3a2 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800c326:	4b17      	ldr	r3, [pc, #92]	; (800c384 <tcp_receive+0x88c>)
 800c328:	68db      	ldr	r3, [r3, #12]
 800c32a:	899b      	ldrh	r3, [r3, #12]
 800c32c:	b29b      	uxth	r3, r3
 800c32e:	4618      	mov	r0, r3
 800c330:	f7fa ffa4 	bl	800727c <lwip_htons>
 800c334:	4603      	mov	r3, r0
 800c336:	b2db      	uxtb	r3, r3
 800c338:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d130      	bne.n	800c3a2 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800c340:	4b10      	ldr	r3, [pc, #64]	; (800c384 <tcp_receive+0x88c>)
 800c342:	68db      	ldr	r3, [r3, #12]
 800c344:	899b      	ldrh	r3, [r3, #12]
 800c346:	b29c      	uxth	r4, r3
 800c348:	2001      	movs	r0, #1
 800c34a:	f7fa ff97 	bl	800727c <lwip_htons>
 800c34e:	4603      	mov	r3, r0
 800c350:	461a      	mov	r2, r3
 800c352:	4b0c      	ldr	r3, [pc, #48]	; (800c384 <tcp_receive+0x88c>)
 800c354:	68db      	ldr	r3, [r3, #12]
 800c356:	4322      	orrs	r2, r4
 800c358:	b292      	uxth	r2, r2
 800c35a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800c35c:	4b09      	ldr	r3, [pc, #36]	; (800c384 <tcp_receive+0x88c>)
 800c35e:	891c      	ldrh	r4, [r3, #8]
 800c360:	4b08      	ldr	r3, [pc, #32]	; (800c384 <tcp_receive+0x88c>)
 800c362:	68db      	ldr	r3, [r3, #12]
 800c364:	899b      	ldrh	r3, [r3, #12]
 800c366:	b29b      	uxth	r3, r3
 800c368:	4618      	mov	r0, r3
 800c36a:	f7fa ff87 	bl	800727c <lwip_htons>
 800c36e:	4603      	mov	r3, r0
 800c370:	b2db      	uxtb	r3, r3
 800c372:	f003 0303 	and.w	r3, r3, #3
 800c376:	2b00      	cmp	r3, #0
 800c378:	d00e      	beq.n	800c398 <tcp_receive+0x8a0>
 800c37a:	2301      	movs	r3, #1
 800c37c:	e00d      	b.n	800c39a <tcp_receive+0x8a2>
 800c37e:	bf00      	nop
 800c380:	2000a808 	.word	0x2000a808
 800c384:	2000a7e8 	.word	0x2000a7e8
 800c388:	2000a812 	.word	0x2000a812
 800c38c:	08014f48 	.word	0x08014f48
 800c390:	080152f0 	.word	0x080152f0
 800c394:	08014f94 	.word	0x08014f94
 800c398:	2300      	movs	r3, #0
 800c39a:	4423      	add	r3, r4
 800c39c:	b29a      	uxth	r2, r3
 800c39e:	4b98      	ldr	r3, [pc, #608]	; (800c600 <tcp_receive+0xb08>)
 800c3a0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800c3a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3a4:	613b      	str	r3, [r7, #16]
              next = next->next;
 800c3a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800c3ac:	6938      	ldr	r0, [r7, #16]
 800c3ae:	f7fd fd36 	bl	8009e1e <tcp_seg_free>
            while (next &&
 800c3b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d00e      	beq.n	800c3d6 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800c3b8:	4b91      	ldr	r3, [pc, #580]	; (800c600 <tcp_receive+0xb08>)
 800c3ba:	881b      	ldrh	r3, [r3, #0]
 800c3bc:	461a      	mov	r2, r3
 800c3be:	4b91      	ldr	r3, [pc, #580]	; (800c604 <tcp_receive+0xb0c>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	441a      	add	r2, r3
 800c3c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3c6:	68db      	ldr	r3, [r3, #12]
 800c3c8:	685b      	ldr	r3, [r3, #4]
 800c3ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c3cc:	8909      	ldrh	r1, [r1, #8]
 800c3ce:	440b      	add	r3, r1
 800c3d0:	1ad3      	subs	r3, r2, r3
            while (next &&
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	da9a      	bge.n	800c30c <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800c3d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d059      	beq.n	800c490 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800c3dc:	4b88      	ldr	r3, [pc, #544]	; (800c600 <tcp_receive+0xb08>)
 800c3de:	881b      	ldrh	r3, [r3, #0]
 800c3e0:	461a      	mov	r2, r3
 800c3e2:	4b88      	ldr	r3, [pc, #544]	; (800c604 <tcp_receive+0xb0c>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	441a      	add	r2, r3
 800c3e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3ea:	68db      	ldr	r3, [r3, #12]
 800c3ec:	685b      	ldr	r3, [r3, #4]
 800c3ee:	1ad3      	subs	r3, r2, r3
            if (next &&
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	dd4d      	ble.n	800c490 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800c3f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3f6:	68db      	ldr	r3, [r3, #12]
 800c3f8:	685b      	ldr	r3, [r3, #4]
 800c3fa:	b29a      	uxth	r2, r3
 800c3fc:	4b81      	ldr	r3, [pc, #516]	; (800c604 <tcp_receive+0xb0c>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	b29b      	uxth	r3, r3
 800c402:	1ad3      	subs	r3, r2, r3
 800c404:	b29a      	uxth	r2, r3
 800c406:	4b80      	ldr	r3, [pc, #512]	; (800c608 <tcp_receive+0xb10>)
 800c408:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c40a:	4b7f      	ldr	r3, [pc, #508]	; (800c608 <tcp_receive+0xb10>)
 800c40c:	68db      	ldr	r3, [r3, #12]
 800c40e:	899b      	ldrh	r3, [r3, #12]
 800c410:	b29b      	uxth	r3, r3
 800c412:	4618      	mov	r0, r3
 800c414:	f7fa ff32 	bl	800727c <lwip_htons>
 800c418:	4603      	mov	r3, r0
 800c41a:	b2db      	uxtb	r3, r3
 800c41c:	f003 0302 	and.w	r3, r3, #2
 800c420:	2b00      	cmp	r3, #0
 800c422:	d005      	beq.n	800c430 <tcp_receive+0x938>
                inseg.len -= 1;
 800c424:	4b78      	ldr	r3, [pc, #480]	; (800c608 <tcp_receive+0xb10>)
 800c426:	891b      	ldrh	r3, [r3, #8]
 800c428:	3b01      	subs	r3, #1
 800c42a:	b29a      	uxth	r2, r3
 800c42c:	4b76      	ldr	r3, [pc, #472]	; (800c608 <tcp_receive+0xb10>)
 800c42e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800c430:	4b75      	ldr	r3, [pc, #468]	; (800c608 <tcp_receive+0xb10>)
 800c432:	685b      	ldr	r3, [r3, #4]
 800c434:	4a74      	ldr	r2, [pc, #464]	; (800c608 <tcp_receive+0xb10>)
 800c436:	8912      	ldrh	r2, [r2, #8]
 800c438:	4611      	mov	r1, r2
 800c43a:	4618      	mov	r0, r3
 800c43c:	f7fc f8f6 	bl	800862c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800c440:	4b71      	ldr	r3, [pc, #452]	; (800c608 <tcp_receive+0xb10>)
 800c442:	891c      	ldrh	r4, [r3, #8]
 800c444:	4b70      	ldr	r3, [pc, #448]	; (800c608 <tcp_receive+0xb10>)
 800c446:	68db      	ldr	r3, [r3, #12]
 800c448:	899b      	ldrh	r3, [r3, #12]
 800c44a:	b29b      	uxth	r3, r3
 800c44c:	4618      	mov	r0, r3
 800c44e:	f7fa ff15 	bl	800727c <lwip_htons>
 800c452:	4603      	mov	r3, r0
 800c454:	b2db      	uxtb	r3, r3
 800c456:	f003 0303 	and.w	r3, r3, #3
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d001      	beq.n	800c462 <tcp_receive+0x96a>
 800c45e:	2301      	movs	r3, #1
 800c460:	e000      	b.n	800c464 <tcp_receive+0x96c>
 800c462:	2300      	movs	r3, #0
 800c464:	4423      	add	r3, r4
 800c466:	b29a      	uxth	r2, r3
 800c468:	4b65      	ldr	r3, [pc, #404]	; (800c600 <tcp_receive+0xb08>)
 800c46a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800c46c:	4b64      	ldr	r3, [pc, #400]	; (800c600 <tcp_receive+0xb08>)
 800c46e:	881b      	ldrh	r3, [r3, #0]
 800c470:	461a      	mov	r2, r3
 800c472:	4b64      	ldr	r3, [pc, #400]	; (800c604 <tcp_receive+0xb0c>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	441a      	add	r2, r3
 800c478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c47a:	68db      	ldr	r3, [r3, #12]
 800c47c:	685b      	ldr	r3, [r3, #4]
 800c47e:	429a      	cmp	r2, r3
 800c480:	d006      	beq.n	800c490 <tcp_receive+0x998>
 800c482:	4b62      	ldr	r3, [pc, #392]	; (800c60c <tcp_receive+0xb14>)
 800c484:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800c488:	4961      	ldr	r1, [pc, #388]	; (800c610 <tcp_receive+0xb18>)
 800c48a:	4862      	ldr	r0, [pc, #392]	; (800c614 <tcp_receive+0xb1c>)
 800c48c:	f005 fc4c 	bl	8011d28 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c494:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800c496:	4b5a      	ldr	r3, [pc, #360]	; (800c600 <tcp_receive+0xb08>)
 800c498:	881b      	ldrh	r3, [r3, #0]
 800c49a:	461a      	mov	r2, r3
 800c49c:	4b59      	ldr	r3, [pc, #356]	; (800c604 <tcp_receive+0xb0c>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	441a      	add	r2, r3
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c4aa:	4b55      	ldr	r3, [pc, #340]	; (800c600 <tcp_receive+0xb08>)
 800c4ac:	881b      	ldrh	r3, [r3, #0]
 800c4ae:	429a      	cmp	r2, r3
 800c4b0:	d206      	bcs.n	800c4c0 <tcp_receive+0x9c8>
 800c4b2:	4b56      	ldr	r3, [pc, #344]	; (800c60c <tcp_receive+0xb14>)
 800c4b4:	f240 6207 	movw	r2, #1543	; 0x607
 800c4b8:	4957      	ldr	r1, [pc, #348]	; (800c618 <tcp_receive+0xb20>)
 800c4ba:	4856      	ldr	r0, [pc, #344]	; (800c614 <tcp_receive+0xb1c>)
 800c4bc:	f005 fc34 	bl	8011d28 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c4c4:	4b4e      	ldr	r3, [pc, #312]	; (800c600 <tcp_receive+0xb08>)
 800c4c6:	881b      	ldrh	r3, [r3, #0]
 800c4c8:	1ad3      	subs	r3, r2, r3
 800c4ca:	b29a      	uxth	r2, r3
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800c4d0:	6878      	ldr	r0, [r7, #4]
 800c4d2:	f7fc ffc5 	bl	8009460 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800c4d6:	4b4c      	ldr	r3, [pc, #304]	; (800c608 <tcp_receive+0xb10>)
 800c4d8:	685b      	ldr	r3, [r3, #4]
 800c4da:	891b      	ldrh	r3, [r3, #8]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d006      	beq.n	800c4ee <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800c4e0:	4b49      	ldr	r3, [pc, #292]	; (800c608 <tcp_receive+0xb10>)
 800c4e2:	685b      	ldr	r3, [r3, #4]
 800c4e4:	4a4d      	ldr	r2, [pc, #308]	; (800c61c <tcp_receive+0xb24>)
 800c4e6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800c4e8:	4b47      	ldr	r3, [pc, #284]	; (800c608 <tcp_receive+0xb10>)
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c4ee:	4b46      	ldr	r3, [pc, #280]	; (800c608 <tcp_receive+0xb10>)
 800c4f0:	68db      	ldr	r3, [r3, #12]
 800c4f2:	899b      	ldrh	r3, [r3, #12]
 800c4f4:	b29b      	uxth	r3, r3
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f7fa fec0 	bl	800727c <lwip_htons>
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	b2db      	uxtb	r3, r3
 800c500:	f003 0301 	and.w	r3, r3, #1
 800c504:	2b00      	cmp	r3, #0
 800c506:	f000 80b8 	beq.w	800c67a <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800c50a:	4b45      	ldr	r3, [pc, #276]	; (800c620 <tcp_receive+0xb28>)
 800c50c:	781b      	ldrb	r3, [r3, #0]
 800c50e:	f043 0320 	orr.w	r3, r3, #32
 800c512:	b2da      	uxtb	r2, r3
 800c514:	4b42      	ldr	r3, [pc, #264]	; (800c620 <tcp_receive+0xb28>)
 800c516:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800c518:	e0af      	b.n	800c67a <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c51e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c524:	68db      	ldr	r3, [r3, #12]
 800c526:	685b      	ldr	r3, [r3, #4]
 800c528:	4a36      	ldr	r2, [pc, #216]	; (800c604 <tcp_receive+0xb0c>)
 800c52a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	891b      	ldrh	r3, [r3, #8]
 800c530:	461c      	mov	r4, r3
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	68db      	ldr	r3, [r3, #12]
 800c536:	899b      	ldrh	r3, [r3, #12]
 800c538:	b29b      	uxth	r3, r3
 800c53a:	4618      	mov	r0, r3
 800c53c:	f7fa fe9e 	bl	800727c <lwip_htons>
 800c540:	4603      	mov	r3, r0
 800c542:	b2db      	uxtb	r3, r3
 800c544:	f003 0303 	and.w	r3, r3, #3
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d001      	beq.n	800c550 <tcp_receive+0xa58>
 800c54c:	2301      	movs	r3, #1
 800c54e:	e000      	b.n	800c552 <tcp_receive+0xa5a>
 800c550:	2300      	movs	r3, #0
 800c552:	191a      	adds	r2, r3, r4
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c558:	441a      	add	r2, r3
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c562:	461c      	mov	r4, r3
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	891b      	ldrh	r3, [r3, #8]
 800c568:	461d      	mov	r5, r3
 800c56a:	68bb      	ldr	r3, [r7, #8]
 800c56c:	68db      	ldr	r3, [r3, #12]
 800c56e:	899b      	ldrh	r3, [r3, #12]
 800c570:	b29b      	uxth	r3, r3
 800c572:	4618      	mov	r0, r3
 800c574:	f7fa fe82 	bl	800727c <lwip_htons>
 800c578:	4603      	mov	r3, r0
 800c57a:	b2db      	uxtb	r3, r3
 800c57c:	f003 0303 	and.w	r3, r3, #3
 800c580:	2b00      	cmp	r3, #0
 800c582:	d001      	beq.n	800c588 <tcp_receive+0xa90>
 800c584:	2301      	movs	r3, #1
 800c586:	e000      	b.n	800c58a <tcp_receive+0xa92>
 800c588:	2300      	movs	r3, #0
 800c58a:	442b      	add	r3, r5
 800c58c:	429c      	cmp	r4, r3
 800c58e:	d206      	bcs.n	800c59e <tcp_receive+0xaa6>
 800c590:	4b1e      	ldr	r3, [pc, #120]	; (800c60c <tcp_receive+0xb14>)
 800c592:	f240 622b 	movw	r2, #1579	; 0x62b
 800c596:	4923      	ldr	r1, [pc, #140]	; (800c624 <tcp_receive+0xb2c>)
 800c598:	481e      	ldr	r0, [pc, #120]	; (800c614 <tcp_receive+0xb1c>)
 800c59a:	f005 fbc5 	bl	8011d28 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	891b      	ldrh	r3, [r3, #8]
 800c5a2:	461c      	mov	r4, r3
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	68db      	ldr	r3, [r3, #12]
 800c5a8:	899b      	ldrh	r3, [r3, #12]
 800c5aa:	b29b      	uxth	r3, r3
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	f7fa fe65 	bl	800727c <lwip_htons>
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	b2db      	uxtb	r3, r3
 800c5b6:	f003 0303 	and.w	r3, r3, #3
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d001      	beq.n	800c5c2 <tcp_receive+0xaca>
 800c5be:	2301      	movs	r3, #1
 800c5c0:	e000      	b.n	800c5c4 <tcp_receive+0xacc>
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	1919      	adds	r1, r3, r4
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c5ca:	b28b      	uxth	r3, r1
 800c5cc:	1ad3      	subs	r3, r2, r3
 800c5ce:	b29a      	uxth	r2, r3
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800c5d4:	6878      	ldr	r0, [r7, #4]
 800c5d6:	f7fc ff43 	bl	8009460 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800c5da:	68bb      	ldr	r3, [r7, #8]
 800c5dc:	685b      	ldr	r3, [r3, #4]
 800c5de:	891b      	ldrh	r3, [r3, #8]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d028      	beq.n	800c636 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800c5e4:	4b0d      	ldr	r3, [pc, #52]	; (800c61c <tcp_receive+0xb24>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d01d      	beq.n	800c628 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800c5ec:	4b0b      	ldr	r3, [pc, #44]	; (800c61c <tcp_receive+0xb24>)
 800c5ee:	681a      	ldr	r2, [r3, #0]
 800c5f0:	68bb      	ldr	r3, [r7, #8]
 800c5f2:	685b      	ldr	r3, [r3, #4]
 800c5f4:	4619      	mov	r1, r3
 800c5f6:	4610      	mov	r0, r2
 800c5f8:	f7fc fa60 	bl	8008abc <pbuf_cat>
 800c5fc:	e018      	b.n	800c630 <tcp_receive+0xb38>
 800c5fe:	bf00      	nop
 800c600:	2000a812 	.word	0x2000a812
 800c604:	2000a808 	.word	0x2000a808
 800c608:	2000a7e8 	.word	0x2000a7e8
 800c60c:	08014f48 	.word	0x08014f48
 800c610:	08015328 	.word	0x08015328
 800c614:	08014f94 	.word	0x08014f94
 800c618:	08015364 	.word	0x08015364
 800c61c:	2000a818 	.word	0x2000a818
 800c620:	2000a815 	.word	0x2000a815
 800c624:	08015384 	.word	0x08015384
            } else {
              recv_data = cseg->p;
 800c628:	68bb      	ldr	r3, [r7, #8]
 800c62a:	685b      	ldr	r3, [r3, #4]
 800c62c:	4a70      	ldr	r2, [pc, #448]	; (800c7f0 <tcp_receive+0xcf8>)
 800c62e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	2200      	movs	r2, #0
 800c634:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	68db      	ldr	r3, [r3, #12]
 800c63a:	899b      	ldrh	r3, [r3, #12]
 800c63c:	b29b      	uxth	r3, r3
 800c63e:	4618      	mov	r0, r3
 800c640:	f7fa fe1c 	bl	800727c <lwip_htons>
 800c644:	4603      	mov	r3, r0
 800c646:	b2db      	uxtb	r3, r3
 800c648:	f003 0301 	and.w	r3, r3, #1
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d00d      	beq.n	800c66c <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800c650:	4b68      	ldr	r3, [pc, #416]	; (800c7f4 <tcp_receive+0xcfc>)
 800c652:	781b      	ldrb	r3, [r3, #0]
 800c654:	f043 0320 	orr.w	r3, r3, #32
 800c658:	b2da      	uxtb	r2, r3
 800c65a:	4b66      	ldr	r3, [pc, #408]	; (800c7f4 <tcp_receive+0xcfc>)
 800c65c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	7d1b      	ldrb	r3, [r3, #20]
 800c662:	2b04      	cmp	r3, #4
 800c664:	d102      	bne.n	800c66c <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	2207      	movs	r2, #7
 800c66a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	681a      	ldr	r2, [r3, #0]
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800c674:	68b8      	ldr	r0, [r7, #8]
 800c676:	f7fd fbd2 	bl	8009e1e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d008      	beq.n	800c694 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c686:	68db      	ldr	r3, [r3, #12]
 800c688:	685a      	ldr	r2, [r3, #4]
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800c68e:	429a      	cmp	r2, r3
 800c690:	f43f af43 	beq.w	800c51a <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	8b5b      	ldrh	r3, [r3, #26]
 800c698:	f003 0301 	and.w	r3, r3, #1
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d00e      	beq.n	800c6be <tcp_receive+0xbc6>
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	8b5b      	ldrh	r3, [r3, #26]
 800c6a4:	f023 0301 	bic.w	r3, r3, #1
 800c6a8:	b29a      	uxth	r2, r3
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	835a      	strh	r2, [r3, #26]
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	8b5b      	ldrh	r3, [r3, #26]
 800c6b2:	f043 0302 	orr.w	r3, r3, #2
 800c6b6:	b29a      	uxth	r2, r3
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c6bc:	e188      	b.n	800c9d0 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	8b5b      	ldrh	r3, [r3, #26]
 800c6c2:	f043 0301 	orr.w	r3, r3, #1
 800c6c6:	b29a      	uxth	r2, r3
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c6cc:	e180      	b.n	800c9d0 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d106      	bne.n	800c6e4 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800c6d6:	4848      	ldr	r0, [pc, #288]	; (800c7f8 <tcp_receive+0xd00>)
 800c6d8:	f7fd fbba 	bl	8009e50 <tcp_seg_copy>
 800c6dc:	4602      	mov	r2, r0
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	675a      	str	r2, [r3, #116]	; 0x74
 800c6e2:	e16d      	b.n	800c9c0 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c6ec:	63bb      	str	r3, [r7, #56]	; 0x38
 800c6ee:	e157      	b.n	800c9a0 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800c6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6f2:	68db      	ldr	r3, [r3, #12]
 800c6f4:	685a      	ldr	r2, [r3, #4]
 800c6f6:	4b41      	ldr	r3, [pc, #260]	; (800c7fc <tcp_receive+0xd04>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	429a      	cmp	r2, r3
 800c6fc:	d11d      	bne.n	800c73a <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800c6fe:	4b3e      	ldr	r3, [pc, #248]	; (800c7f8 <tcp_receive+0xd00>)
 800c700:	891a      	ldrh	r2, [r3, #8]
 800c702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c704:	891b      	ldrh	r3, [r3, #8]
 800c706:	429a      	cmp	r2, r3
 800c708:	f240 814f 	bls.w	800c9aa <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c70c:	483a      	ldr	r0, [pc, #232]	; (800c7f8 <tcp_receive+0xd00>)
 800c70e:	f7fd fb9f 	bl	8009e50 <tcp_seg_copy>
 800c712:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800c714:	697b      	ldr	r3, [r7, #20]
 800c716:	2b00      	cmp	r3, #0
 800c718:	f000 8149 	beq.w	800c9ae <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800c71c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d003      	beq.n	800c72a <tcp_receive+0xc32>
                    prev->next = cseg;
 800c722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c724:	697a      	ldr	r2, [r7, #20]
 800c726:	601a      	str	r2, [r3, #0]
 800c728:	e002      	b.n	800c730 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	697a      	ldr	r2, [r7, #20]
 800c72e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800c730:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c732:	6978      	ldr	r0, [r7, #20]
 800c734:	f7ff f8dc 	bl	800b8f0 <tcp_oos_insert_segment>
                }
                break;
 800c738:	e139      	b.n	800c9ae <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800c73a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d117      	bne.n	800c770 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800c740:	4b2e      	ldr	r3, [pc, #184]	; (800c7fc <tcp_receive+0xd04>)
 800c742:	681a      	ldr	r2, [r3, #0]
 800c744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c746:	68db      	ldr	r3, [r3, #12]
 800c748:	685b      	ldr	r3, [r3, #4]
 800c74a:	1ad3      	subs	r3, r2, r3
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	da57      	bge.n	800c800 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c750:	4829      	ldr	r0, [pc, #164]	; (800c7f8 <tcp_receive+0xd00>)
 800c752:	f7fd fb7d 	bl	8009e50 <tcp_seg_copy>
 800c756:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800c758:	69bb      	ldr	r3, [r7, #24]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	f000 8129 	beq.w	800c9b2 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	69ba      	ldr	r2, [r7, #24]
 800c764:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800c766:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c768:	69b8      	ldr	r0, [r7, #24]
 800c76a:	f7ff f8c1 	bl	800b8f0 <tcp_oos_insert_segment>
                  }
                  break;
 800c76e:	e120      	b.n	800c9b2 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800c770:	4b22      	ldr	r3, [pc, #136]	; (800c7fc <tcp_receive+0xd04>)
 800c772:	681a      	ldr	r2, [r3, #0]
 800c774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c776:	68db      	ldr	r3, [r3, #12]
 800c778:	685b      	ldr	r3, [r3, #4]
 800c77a:	1ad3      	subs	r3, r2, r3
 800c77c:	3b01      	subs	r3, #1
 800c77e:	2b00      	cmp	r3, #0
 800c780:	db3e      	blt.n	800c800 <tcp_receive+0xd08>
 800c782:	4b1e      	ldr	r3, [pc, #120]	; (800c7fc <tcp_receive+0xd04>)
 800c784:	681a      	ldr	r2, [r3, #0]
 800c786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c788:	68db      	ldr	r3, [r3, #12]
 800c78a:	685b      	ldr	r3, [r3, #4]
 800c78c:	1ad3      	subs	r3, r2, r3
 800c78e:	3301      	adds	r3, #1
 800c790:	2b00      	cmp	r3, #0
 800c792:	dc35      	bgt.n	800c800 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c794:	4818      	ldr	r0, [pc, #96]	; (800c7f8 <tcp_receive+0xd00>)
 800c796:	f7fd fb5b 	bl	8009e50 <tcp_seg_copy>
 800c79a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800c79c:	69fb      	ldr	r3, [r7, #28]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	f000 8109 	beq.w	800c9b6 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800c7a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7a6:	68db      	ldr	r3, [r3, #12]
 800c7a8:	685b      	ldr	r3, [r3, #4]
 800c7aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c7ac:	8912      	ldrh	r2, [r2, #8]
 800c7ae:	441a      	add	r2, r3
 800c7b0:	4b12      	ldr	r3, [pc, #72]	; (800c7fc <tcp_receive+0xd04>)
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	1ad3      	subs	r3, r2, r3
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	dd12      	ble.n	800c7e0 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800c7ba:	4b10      	ldr	r3, [pc, #64]	; (800c7fc <tcp_receive+0xd04>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	b29a      	uxth	r2, r3
 800c7c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7c2:	68db      	ldr	r3, [r3, #12]
 800c7c4:	685b      	ldr	r3, [r3, #4]
 800c7c6:	b29b      	uxth	r3, r3
 800c7c8:	1ad3      	subs	r3, r2, r3
 800c7ca:	b29a      	uxth	r2, r3
 800c7cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7ce:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800c7d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7d2:	685a      	ldr	r2, [r3, #4]
 800c7d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7d6:	891b      	ldrh	r3, [r3, #8]
 800c7d8:	4619      	mov	r1, r3
 800c7da:	4610      	mov	r0, r2
 800c7dc:	f7fb ff26 	bl	800862c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800c7e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7e2:	69fa      	ldr	r2, [r7, #28]
 800c7e4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800c7e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c7e8:	69f8      	ldr	r0, [r7, #28]
 800c7ea:	f7ff f881 	bl	800b8f0 <tcp_oos_insert_segment>
                  }
                  break;
 800c7ee:	e0e2      	b.n	800c9b6 <tcp_receive+0xebe>
 800c7f0:	2000a818 	.word	0x2000a818
 800c7f4:	2000a815 	.word	0x2000a815
 800c7f8:	2000a7e8 	.word	0x2000a7e8
 800c7fc:	2000a808 	.word	0x2000a808
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800c800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c802:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800c804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	f040 80c6 	bne.w	800c99a <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800c80e:	4b80      	ldr	r3, [pc, #512]	; (800ca10 <tcp_receive+0xf18>)
 800c810:	681a      	ldr	r2, [r3, #0]
 800c812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c814:	68db      	ldr	r3, [r3, #12]
 800c816:	685b      	ldr	r3, [r3, #4]
 800c818:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	f340 80bd 	ble.w	800c99a <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c822:	68db      	ldr	r3, [r3, #12]
 800c824:	899b      	ldrh	r3, [r3, #12]
 800c826:	b29b      	uxth	r3, r3
 800c828:	4618      	mov	r0, r3
 800c82a:	f7fa fd27 	bl	800727c <lwip_htons>
 800c82e:	4603      	mov	r3, r0
 800c830:	b2db      	uxtb	r3, r3
 800c832:	f003 0301 	and.w	r3, r3, #1
 800c836:	2b00      	cmp	r3, #0
 800c838:	f040 80bf 	bne.w	800c9ba <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800c83c:	4875      	ldr	r0, [pc, #468]	; (800ca14 <tcp_receive+0xf1c>)
 800c83e:	f7fd fb07 	bl	8009e50 <tcp_seg_copy>
 800c842:	4602      	mov	r2, r0
 800c844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c846:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800c848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	f000 80b6 	beq.w	800c9be <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800c852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c854:	68db      	ldr	r3, [r3, #12]
 800c856:	685b      	ldr	r3, [r3, #4]
 800c858:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c85a:	8912      	ldrh	r2, [r2, #8]
 800c85c:	441a      	add	r2, r3
 800c85e:	4b6c      	ldr	r3, [pc, #432]	; (800ca10 <tcp_receive+0xf18>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	1ad3      	subs	r3, r2, r3
 800c864:	2b00      	cmp	r3, #0
 800c866:	dd12      	ble.n	800c88e <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800c868:	4b69      	ldr	r3, [pc, #420]	; (800ca10 <tcp_receive+0xf18>)
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	b29a      	uxth	r2, r3
 800c86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c870:	68db      	ldr	r3, [r3, #12]
 800c872:	685b      	ldr	r3, [r3, #4]
 800c874:	b29b      	uxth	r3, r3
 800c876:	1ad3      	subs	r3, r2, r3
 800c878:	b29a      	uxth	r2, r3
 800c87a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c87c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800c87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c880:	685a      	ldr	r2, [r3, #4]
 800c882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c884:	891b      	ldrh	r3, [r3, #8]
 800c886:	4619      	mov	r1, r3
 800c888:	4610      	mov	r0, r2
 800c88a:	f7fb fecf 	bl	800862c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800c88e:	4b62      	ldr	r3, [pc, #392]	; (800ca18 <tcp_receive+0xf20>)
 800c890:	881b      	ldrh	r3, [r3, #0]
 800c892:	461a      	mov	r2, r3
 800c894:	4b5e      	ldr	r3, [pc, #376]	; (800ca10 <tcp_receive+0xf18>)
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	441a      	add	r2, r3
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c89e:	6879      	ldr	r1, [r7, #4]
 800c8a0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c8a2:	440b      	add	r3, r1
 800c8a4:	1ad3      	subs	r3, r2, r3
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	f340 8089 	ble.w	800c9be <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800c8ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	68db      	ldr	r3, [r3, #12]
 800c8b2:	899b      	ldrh	r3, [r3, #12]
 800c8b4:	b29b      	uxth	r3, r3
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	f7fa fce0 	bl	800727c <lwip_htons>
 800c8bc:	4603      	mov	r3, r0
 800c8be:	b2db      	uxtb	r3, r3
 800c8c0:	f003 0301 	and.w	r3, r3, #1
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d022      	beq.n	800c90e <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800c8c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	68db      	ldr	r3, [r3, #12]
 800c8ce:	899b      	ldrh	r3, [r3, #12]
 800c8d0:	b29b      	uxth	r3, r3
 800c8d2:	b21b      	sxth	r3, r3
 800c8d4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c8d8:	b21c      	sxth	r4, r3
 800c8da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	68db      	ldr	r3, [r3, #12]
 800c8e0:	899b      	ldrh	r3, [r3, #12]
 800c8e2:	b29b      	uxth	r3, r3
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	f7fa fcc9 	bl	800727c <lwip_htons>
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	b2db      	uxtb	r3, r3
 800c8ee:	b29b      	uxth	r3, r3
 800c8f0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c8f4:	b29b      	uxth	r3, r3
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	f7fa fcc0 	bl	800727c <lwip_htons>
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	b21b      	sxth	r3, r3
 800c900:	4323      	orrs	r3, r4
 800c902:	b21a      	sxth	r2, r3
 800c904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	68db      	ldr	r3, [r3, #12]
 800c90a:	b292      	uxth	r2, r2
 800c90c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c912:	b29a      	uxth	r2, r3
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c918:	4413      	add	r3, r2
 800c91a:	b299      	uxth	r1, r3
 800c91c:	4b3c      	ldr	r3, [pc, #240]	; (800ca10 <tcp_receive+0xf18>)
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	b29a      	uxth	r2, r3
 800c922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	1a8a      	subs	r2, r1, r2
 800c928:	b292      	uxth	r2, r2
 800c92a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800c92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	685a      	ldr	r2, [r3, #4]
 800c932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	891b      	ldrh	r3, [r3, #8]
 800c938:	4619      	mov	r1, r3
 800c93a:	4610      	mov	r0, r2
 800c93c:	f7fb fe76 	bl	800862c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800c940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	891c      	ldrh	r4, [r3, #8]
 800c946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	68db      	ldr	r3, [r3, #12]
 800c94c:	899b      	ldrh	r3, [r3, #12]
 800c94e:	b29b      	uxth	r3, r3
 800c950:	4618      	mov	r0, r3
 800c952:	f7fa fc93 	bl	800727c <lwip_htons>
 800c956:	4603      	mov	r3, r0
 800c958:	b2db      	uxtb	r3, r3
 800c95a:	f003 0303 	and.w	r3, r3, #3
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d001      	beq.n	800c966 <tcp_receive+0xe6e>
 800c962:	2301      	movs	r3, #1
 800c964:	e000      	b.n	800c968 <tcp_receive+0xe70>
 800c966:	2300      	movs	r3, #0
 800c968:	4423      	add	r3, r4
 800c96a:	b29a      	uxth	r2, r3
 800c96c:	4b2a      	ldr	r3, [pc, #168]	; (800ca18 <tcp_receive+0xf20>)
 800c96e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c970:	4b29      	ldr	r3, [pc, #164]	; (800ca18 <tcp_receive+0xf20>)
 800c972:	881b      	ldrh	r3, [r3, #0]
 800c974:	461a      	mov	r2, r3
 800c976:	4b26      	ldr	r3, [pc, #152]	; (800ca10 <tcp_receive+0xf18>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	441a      	add	r2, r3
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c980:	6879      	ldr	r1, [r7, #4]
 800c982:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c984:	440b      	add	r3, r1
 800c986:	429a      	cmp	r2, r3
 800c988:	d019      	beq.n	800c9be <tcp_receive+0xec6>
 800c98a:	4b24      	ldr	r3, [pc, #144]	; (800ca1c <tcp_receive+0xf24>)
 800c98c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800c990:	4923      	ldr	r1, [pc, #140]	; (800ca20 <tcp_receive+0xf28>)
 800c992:	4824      	ldr	r0, [pc, #144]	; (800ca24 <tcp_receive+0xf2c>)
 800c994:	f005 f9c8 	bl	8011d28 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800c998:	e011      	b.n	800c9be <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	63bb      	str	r3, [r7, #56]	; 0x38
 800c9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	f47f aea4 	bne.w	800c6f0 <tcp_receive+0xbf8>
 800c9a8:	e00a      	b.n	800c9c0 <tcp_receive+0xec8>
                break;
 800c9aa:	bf00      	nop
 800c9ac:	e008      	b.n	800c9c0 <tcp_receive+0xec8>
                break;
 800c9ae:	bf00      	nop
 800c9b0:	e006      	b.n	800c9c0 <tcp_receive+0xec8>
                  break;
 800c9b2:	bf00      	nop
 800c9b4:	e004      	b.n	800c9c0 <tcp_receive+0xec8>
                  break;
 800c9b6:	bf00      	nop
 800c9b8:	e002      	b.n	800c9c0 <tcp_receive+0xec8>
                  break;
 800c9ba:	bf00      	nop
 800c9bc:	e000      	b.n	800c9c0 <tcp_receive+0xec8>
                break;
 800c9be:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f001 fa33 	bl	800de2c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800c9c6:	e003      	b.n	800c9d0 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800c9c8:	6878      	ldr	r0, [r7, #4]
 800c9ca:	f001 fa2f 	bl	800de2c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c9ce:	e01a      	b.n	800ca06 <tcp_receive+0xf0e>
 800c9d0:	e019      	b.n	800ca06 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800c9d2:	4b0f      	ldr	r3, [pc, #60]	; (800ca10 <tcp_receive+0xf18>)
 800c9d4:	681a      	ldr	r2, [r3, #0]
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9da:	1ad3      	subs	r3, r2, r3
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	db0a      	blt.n	800c9f6 <tcp_receive+0xefe>
 800c9e0:	4b0b      	ldr	r3, [pc, #44]	; (800ca10 <tcp_receive+0xf18>)
 800c9e2:	681a      	ldr	r2, [r3, #0]
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9e8:	6879      	ldr	r1, [r7, #4]
 800c9ea:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c9ec:	440b      	add	r3, r1
 800c9ee:	1ad3      	subs	r3, r2, r3
 800c9f0:	3301      	adds	r3, #1
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	dd07      	ble.n	800ca06 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	8b5b      	ldrh	r3, [r3, #26]
 800c9fa:	f043 0302 	orr.w	r3, r3, #2
 800c9fe:	b29a      	uxth	r2, r3
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800ca04:	e7ff      	b.n	800ca06 <tcp_receive+0xf0e>
 800ca06:	bf00      	nop
 800ca08:	3750      	adds	r7, #80	; 0x50
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bdb0      	pop	{r4, r5, r7, pc}
 800ca0e:	bf00      	nop
 800ca10:	2000a808 	.word	0x2000a808
 800ca14:	2000a7e8 	.word	0x2000a7e8
 800ca18:	2000a812 	.word	0x2000a812
 800ca1c:	08014f48 	.word	0x08014f48
 800ca20:	080152f0 	.word	0x080152f0
 800ca24:	08014f94 	.word	0x08014f94

0800ca28 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800ca28:	b480      	push	{r7}
 800ca2a:	b083      	sub	sp, #12
 800ca2c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800ca2e:	4b15      	ldr	r3, [pc, #84]	; (800ca84 <tcp_get_next_optbyte+0x5c>)
 800ca30:	881b      	ldrh	r3, [r3, #0]
 800ca32:	1c5a      	adds	r2, r3, #1
 800ca34:	b291      	uxth	r1, r2
 800ca36:	4a13      	ldr	r2, [pc, #76]	; (800ca84 <tcp_get_next_optbyte+0x5c>)
 800ca38:	8011      	strh	r1, [r2, #0]
 800ca3a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ca3c:	4b12      	ldr	r3, [pc, #72]	; (800ca88 <tcp_get_next_optbyte+0x60>)
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d004      	beq.n	800ca4e <tcp_get_next_optbyte+0x26>
 800ca44:	4b11      	ldr	r3, [pc, #68]	; (800ca8c <tcp_get_next_optbyte+0x64>)
 800ca46:	881b      	ldrh	r3, [r3, #0]
 800ca48:	88fa      	ldrh	r2, [r7, #6]
 800ca4a:	429a      	cmp	r2, r3
 800ca4c:	d208      	bcs.n	800ca60 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800ca4e:	4b10      	ldr	r3, [pc, #64]	; (800ca90 <tcp_get_next_optbyte+0x68>)
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	3314      	adds	r3, #20
 800ca54:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800ca56:	88fb      	ldrh	r3, [r7, #6]
 800ca58:	683a      	ldr	r2, [r7, #0]
 800ca5a:	4413      	add	r3, r2
 800ca5c:	781b      	ldrb	r3, [r3, #0]
 800ca5e:	e00b      	b.n	800ca78 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ca60:	88fb      	ldrh	r3, [r7, #6]
 800ca62:	b2da      	uxtb	r2, r3
 800ca64:	4b09      	ldr	r3, [pc, #36]	; (800ca8c <tcp_get_next_optbyte+0x64>)
 800ca66:	881b      	ldrh	r3, [r3, #0]
 800ca68:	b2db      	uxtb	r3, r3
 800ca6a:	1ad3      	subs	r3, r2, r3
 800ca6c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800ca6e:	4b06      	ldr	r3, [pc, #24]	; (800ca88 <tcp_get_next_optbyte+0x60>)
 800ca70:	681a      	ldr	r2, [r3, #0]
 800ca72:	797b      	ldrb	r3, [r7, #5]
 800ca74:	4413      	add	r3, r2
 800ca76:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	370c      	adds	r7, #12
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca82:	4770      	bx	lr
 800ca84:	2000a804 	.word	0x2000a804
 800ca88:	2000a800 	.word	0x2000a800
 800ca8c:	2000a7fe 	.word	0x2000a7fe
 800ca90:	2000a7f8 	.word	0x2000a7f8

0800ca94 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b084      	sub	sp, #16
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d106      	bne.n	800cab0 <tcp_parseopt+0x1c>
 800caa2:	4b32      	ldr	r3, [pc, #200]	; (800cb6c <tcp_parseopt+0xd8>)
 800caa4:	f240 727d 	movw	r2, #1917	; 0x77d
 800caa8:	4931      	ldr	r1, [pc, #196]	; (800cb70 <tcp_parseopt+0xdc>)
 800caaa:	4832      	ldr	r0, [pc, #200]	; (800cb74 <tcp_parseopt+0xe0>)
 800caac:	f005 f93c 	bl	8011d28 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800cab0:	4b31      	ldr	r3, [pc, #196]	; (800cb78 <tcp_parseopt+0xe4>)
 800cab2:	881b      	ldrh	r3, [r3, #0]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d055      	beq.n	800cb64 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800cab8:	4b30      	ldr	r3, [pc, #192]	; (800cb7c <tcp_parseopt+0xe8>)
 800caba:	2200      	movs	r2, #0
 800cabc:	801a      	strh	r2, [r3, #0]
 800cabe:	e045      	b.n	800cb4c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800cac0:	f7ff ffb2 	bl	800ca28 <tcp_get_next_optbyte>
 800cac4:	4603      	mov	r3, r0
 800cac6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800cac8:	7bfb      	ldrb	r3, [r7, #15]
 800caca:	2b02      	cmp	r3, #2
 800cacc:	d006      	beq.n	800cadc <tcp_parseopt+0x48>
 800cace:	2b02      	cmp	r3, #2
 800cad0:	dc2b      	bgt.n	800cb2a <tcp_parseopt+0x96>
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d041      	beq.n	800cb5a <tcp_parseopt+0xc6>
 800cad6:	2b01      	cmp	r3, #1
 800cad8:	d127      	bne.n	800cb2a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800cada:	e037      	b.n	800cb4c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800cadc:	f7ff ffa4 	bl	800ca28 <tcp_get_next_optbyte>
 800cae0:	4603      	mov	r3, r0
 800cae2:	2b04      	cmp	r3, #4
 800cae4:	d13b      	bne.n	800cb5e <tcp_parseopt+0xca>
 800cae6:	4b25      	ldr	r3, [pc, #148]	; (800cb7c <tcp_parseopt+0xe8>)
 800cae8:	881b      	ldrh	r3, [r3, #0]
 800caea:	3301      	adds	r3, #1
 800caec:	4a22      	ldr	r2, [pc, #136]	; (800cb78 <tcp_parseopt+0xe4>)
 800caee:	8812      	ldrh	r2, [r2, #0]
 800caf0:	4293      	cmp	r3, r2
 800caf2:	da34      	bge.n	800cb5e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800caf4:	f7ff ff98 	bl	800ca28 <tcp_get_next_optbyte>
 800caf8:	4603      	mov	r3, r0
 800cafa:	b29b      	uxth	r3, r3
 800cafc:	021b      	lsls	r3, r3, #8
 800cafe:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800cb00:	f7ff ff92 	bl	800ca28 <tcp_get_next_optbyte>
 800cb04:	4603      	mov	r3, r0
 800cb06:	b29a      	uxth	r2, r3
 800cb08:	89bb      	ldrh	r3, [r7, #12]
 800cb0a:	4313      	orrs	r3, r2
 800cb0c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800cb0e:	89bb      	ldrh	r3, [r7, #12]
 800cb10:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800cb14:	d804      	bhi.n	800cb20 <tcp_parseopt+0x8c>
 800cb16:	89bb      	ldrh	r3, [r7, #12]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d001      	beq.n	800cb20 <tcp_parseopt+0x8c>
 800cb1c:	89ba      	ldrh	r2, [r7, #12]
 800cb1e:	e001      	b.n	800cb24 <tcp_parseopt+0x90>
 800cb20:	f44f 7206 	mov.w	r2, #536	; 0x218
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800cb28:	e010      	b.n	800cb4c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800cb2a:	f7ff ff7d 	bl	800ca28 <tcp_get_next_optbyte>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800cb32:	7afb      	ldrb	r3, [r7, #11]
 800cb34:	2b01      	cmp	r3, #1
 800cb36:	d914      	bls.n	800cb62 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800cb38:	7afb      	ldrb	r3, [r7, #11]
 800cb3a:	b29a      	uxth	r2, r3
 800cb3c:	4b0f      	ldr	r3, [pc, #60]	; (800cb7c <tcp_parseopt+0xe8>)
 800cb3e:	881b      	ldrh	r3, [r3, #0]
 800cb40:	4413      	add	r3, r2
 800cb42:	b29b      	uxth	r3, r3
 800cb44:	3b02      	subs	r3, #2
 800cb46:	b29a      	uxth	r2, r3
 800cb48:	4b0c      	ldr	r3, [pc, #48]	; (800cb7c <tcp_parseopt+0xe8>)
 800cb4a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800cb4c:	4b0b      	ldr	r3, [pc, #44]	; (800cb7c <tcp_parseopt+0xe8>)
 800cb4e:	881a      	ldrh	r2, [r3, #0]
 800cb50:	4b09      	ldr	r3, [pc, #36]	; (800cb78 <tcp_parseopt+0xe4>)
 800cb52:	881b      	ldrh	r3, [r3, #0]
 800cb54:	429a      	cmp	r2, r3
 800cb56:	d3b3      	bcc.n	800cac0 <tcp_parseopt+0x2c>
 800cb58:	e004      	b.n	800cb64 <tcp_parseopt+0xd0>
          return;
 800cb5a:	bf00      	nop
 800cb5c:	e002      	b.n	800cb64 <tcp_parseopt+0xd0>
            return;
 800cb5e:	bf00      	nop
 800cb60:	e000      	b.n	800cb64 <tcp_parseopt+0xd0>
            return;
 800cb62:	bf00      	nop
      }
    }
  }
}
 800cb64:	3710      	adds	r7, #16
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd80      	pop	{r7, pc}
 800cb6a:	bf00      	nop
 800cb6c:	08014f48 	.word	0x08014f48
 800cb70:	080153ac 	.word	0x080153ac
 800cb74:	08014f94 	.word	0x08014f94
 800cb78:	2000a7fc 	.word	0x2000a7fc
 800cb7c:	2000a804 	.word	0x2000a804

0800cb80 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800cb80:	b480      	push	{r7}
 800cb82:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800cb84:	4b05      	ldr	r3, [pc, #20]	; (800cb9c <tcp_trigger_input_pcb_close+0x1c>)
 800cb86:	781b      	ldrb	r3, [r3, #0]
 800cb88:	f043 0310 	orr.w	r3, r3, #16
 800cb8c:	b2da      	uxtb	r2, r3
 800cb8e:	4b03      	ldr	r3, [pc, #12]	; (800cb9c <tcp_trigger_input_pcb_close+0x1c>)
 800cb90:	701a      	strb	r2, [r3, #0]
}
 800cb92:	bf00      	nop
 800cb94:	46bd      	mov	sp, r7
 800cb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9a:	4770      	bx	lr
 800cb9c:	2000a815 	.word	0x2000a815

0800cba0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b084      	sub	sp, #16
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	60f8      	str	r0, [r7, #12]
 800cba8:	60b9      	str	r1, [r7, #8]
 800cbaa:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d00a      	beq.n	800cbc8 <tcp_route+0x28>
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	7a1b      	ldrb	r3, [r3, #8]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d006      	beq.n	800cbc8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	7a1b      	ldrb	r3, [r3, #8]
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	f7fb fb5a 	bl	8008278 <netif_get_by_index>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	e003      	b.n	800cbd0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	f002 ffe3 	bl	800fb94 <ip4_route>
 800cbce:	4603      	mov	r3, r0
  }
}
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	3710      	adds	r7, #16
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	bd80      	pop	{r7, pc}

0800cbd8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800cbd8:	b590      	push	{r4, r7, lr}
 800cbda:	b087      	sub	sp, #28
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	60f8      	str	r0, [r7, #12]
 800cbe0:	60b9      	str	r1, [r7, #8]
 800cbe2:	603b      	str	r3, [r7, #0]
 800cbe4:	4613      	mov	r3, r2
 800cbe6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d105      	bne.n	800cbfa <tcp_create_segment+0x22>
 800cbee:	4b44      	ldr	r3, [pc, #272]	; (800cd00 <tcp_create_segment+0x128>)
 800cbf0:	22a3      	movs	r2, #163	; 0xa3
 800cbf2:	4944      	ldr	r1, [pc, #272]	; (800cd04 <tcp_create_segment+0x12c>)
 800cbf4:	4844      	ldr	r0, [pc, #272]	; (800cd08 <tcp_create_segment+0x130>)
 800cbf6:	f005 f897 	bl	8011d28 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800cbfa:	68bb      	ldr	r3, [r7, #8]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d105      	bne.n	800cc0c <tcp_create_segment+0x34>
 800cc00:	4b3f      	ldr	r3, [pc, #252]	; (800cd00 <tcp_create_segment+0x128>)
 800cc02:	22a4      	movs	r2, #164	; 0xa4
 800cc04:	4941      	ldr	r1, [pc, #260]	; (800cd0c <tcp_create_segment+0x134>)
 800cc06:	4840      	ldr	r0, [pc, #256]	; (800cd08 <tcp_create_segment+0x130>)
 800cc08:	f005 f88e 	bl	8011d28 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cc0c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cc10:	009b      	lsls	r3, r3, #2
 800cc12:	b2db      	uxtb	r3, r3
 800cc14:	f003 0304 	and.w	r3, r3, #4
 800cc18:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800cc1a:	2003      	movs	r0, #3
 800cc1c:	f7fa ffa6 	bl	8007b6c <memp_malloc>
 800cc20:	6138      	str	r0, [r7, #16]
 800cc22:	693b      	ldr	r3, [r7, #16]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d104      	bne.n	800cc32 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800cc28:	68b8      	ldr	r0, [r7, #8]
 800cc2a:	f7fb fe85 	bl	8008938 <pbuf_free>
    return NULL;
 800cc2e:	2300      	movs	r3, #0
 800cc30:	e061      	b.n	800ccf6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800cc32:	693b      	ldr	r3, [r7, #16]
 800cc34:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800cc38:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800cc3a:	693b      	ldr	r3, [r7, #16]
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800cc40:	693b      	ldr	r3, [r7, #16]
 800cc42:	68ba      	ldr	r2, [r7, #8]
 800cc44:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800cc46:	68bb      	ldr	r3, [r7, #8]
 800cc48:	891a      	ldrh	r2, [r3, #8]
 800cc4a:	7dfb      	ldrb	r3, [r7, #23]
 800cc4c:	b29b      	uxth	r3, r3
 800cc4e:	429a      	cmp	r2, r3
 800cc50:	d205      	bcs.n	800cc5e <tcp_create_segment+0x86>
 800cc52:	4b2b      	ldr	r3, [pc, #172]	; (800cd00 <tcp_create_segment+0x128>)
 800cc54:	22b0      	movs	r2, #176	; 0xb0
 800cc56:	492e      	ldr	r1, [pc, #184]	; (800cd10 <tcp_create_segment+0x138>)
 800cc58:	482b      	ldr	r0, [pc, #172]	; (800cd08 <tcp_create_segment+0x130>)
 800cc5a:	f005 f865 	bl	8011d28 <iprintf>
  seg->len = p->tot_len - optlen;
 800cc5e:	68bb      	ldr	r3, [r7, #8]
 800cc60:	891a      	ldrh	r2, [r3, #8]
 800cc62:	7dfb      	ldrb	r3, [r7, #23]
 800cc64:	b29b      	uxth	r3, r3
 800cc66:	1ad3      	subs	r3, r2, r3
 800cc68:	b29a      	uxth	r2, r3
 800cc6a:	693b      	ldr	r3, [r7, #16]
 800cc6c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800cc6e:	2114      	movs	r1, #20
 800cc70:	68b8      	ldr	r0, [r7, #8]
 800cc72:	f7fb fdcb 	bl	800880c <pbuf_add_header>
 800cc76:	4603      	mov	r3, r0
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d004      	beq.n	800cc86 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800cc7c:	6938      	ldr	r0, [r7, #16]
 800cc7e:	f7fd f8ce 	bl	8009e1e <tcp_seg_free>
    return NULL;
 800cc82:	2300      	movs	r3, #0
 800cc84:	e037      	b.n	800ccf6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800cc86:	693b      	ldr	r3, [r7, #16]
 800cc88:	685b      	ldr	r3, [r3, #4]
 800cc8a:	685a      	ldr	r2, [r3, #4]
 800cc8c:	693b      	ldr	r3, [r7, #16]
 800cc8e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	8ada      	ldrh	r2, [r3, #22]
 800cc94:	693b      	ldr	r3, [r7, #16]
 800cc96:	68dc      	ldr	r4, [r3, #12]
 800cc98:	4610      	mov	r0, r2
 800cc9a:	f7fa faef 	bl	800727c <lwip_htons>
 800cc9e:	4603      	mov	r3, r0
 800cca0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	8b1a      	ldrh	r2, [r3, #24]
 800cca6:	693b      	ldr	r3, [r7, #16]
 800cca8:	68dc      	ldr	r4, [r3, #12]
 800ccaa:	4610      	mov	r0, r2
 800ccac:	f7fa fae6 	bl	800727c <lwip_htons>
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800ccb4:	693b      	ldr	r3, [r7, #16]
 800ccb6:	68dc      	ldr	r4, [r3, #12]
 800ccb8:	6838      	ldr	r0, [r7, #0]
 800ccba:	f7fa faf4 	bl	80072a6 <lwip_htonl>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800ccc2:	7dfb      	ldrb	r3, [r7, #23]
 800ccc4:	089b      	lsrs	r3, r3, #2
 800ccc6:	b2db      	uxtb	r3, r3
 800ccc8:	b29b      	uxth	r3, r3
 800ccca:	3305      	adds	r3, #5
 800cccc:	b29b      	uxth	r3, r3
 800ccce:	031b      	lsls	r3, r3, #12
 800ccd0:	b29a      	uxth	r2, r3
 800ccd2:	79fb      	ldrb	r3, [r7, #7]
 800ccd4:	b29b      	uxth	r3, r3
 800ccd6:	4313      	orrs	r3, r2
 800ccd8:	b29a      	uxth	r2, r3
 800ccda:	693b      	ldr	r3, [r7, #16]
 800ccdc:	68dc      	ldr	r4, [r3, #12]
 800ccde:	4610      	mov	r0, r2
 800cce0:	f7fa facc 	bl	800727c <lwip_htons>
 800cce4:	4603      	mov	r3, r0
 800cce6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800cce8:	693b      	ldr	r3, [r7, #16]
 800ccea:	68db      	ldr	r3, [r3, #12]
 800ccec:	2200      	movs	r2, #0
 800ccee:	749a      	strb	r2, [r3, #18]
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	74da      	strb	r2, [r3, #19]
  return seg;
 800ccf4:	693b      	ldr	r3, [r7, #16]
}
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	371c      	adds	r7, #28
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	bd90      	pop	{r4, r7, pc}
 800ccfe:	bf00      	nop
 800cd00:	080153c8 	.word	0x080153c8
 800cd04:	080153fc 	.word	0x080153fc
 800cd08:	0801541c 	.word	0x0801541c
 800cd0c:	08015444 	.word	0x08015444
 800cd10:	08015468 	.word	0x08015468

0800cd14 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800cd14:	b590      	push	{r4, r7, lr}
 800cd16:	b08b      	sub	sp, #44	; 0x2c
 800cd18:	af02      	add	r7, sp, #8
 800cd1a:	6078      	str	r0, [r7, #4]
 800cd1c:	460b      	mov	r3, r1
 800cd1e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800cd20:	2300      	movs	r3, #0
 800cd22:	61fb      	str	r3, [r7, #28]
 800cd24:	2300      	movs	r3, #0
 800cd26:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800cd28:	2300      	movs	r3, #0
 800cd2a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d106      	bne.n	800cd40 <tcp_split_unsent_seg+0x2c>
 800cd32:	4b95      	ldr	r3, [pc, #596]	; (800cf88 <tcp_split_unsent_seg+0x274>)
 800cd34:	f240 324b 	movw	r2, #843	; 0x34b
 800cd38:	4994      	ldr	r1, [pc, #592]	; (800cf8c <tcp_split_unsent_seg+0x278>)
 800cd3a:	4895      	ldr	r0, [pc, #596]	; (800cf90 <tcp_split_unsent_seg+0x27c>)
 800cd3c:	f004 fff4 	bl	8011d28 <iprintf>

  useg = pcb->unsent;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd44:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800cd46:	697b      	ldr	r3, [r7, #20]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d102      	bne.n	800cd52 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800cd4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd50:	e116      	b.n	800cf80 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800cd52:	887b      	ldrh	r3, [r7, #2]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d109      	bne.n	800cd6c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800cd58:	4b8b      	ldr	r3, [pc, #556]	; (800cf88 <tcp_split_unsent_seg+0x274>)
 800cd5a:	f240 3253 	movw	r2, #851	; 0x353
 800cd5e:	498d      	ldr	r1, [pc, #564]	; (800cf94 <tcp_split_unsent_seg+0x280>)
 800cd60:	488b      	ldr	r0, [pc, #556]	; (800cf90 <tcp_split_unsent_seg+0x27c>)
 800cd62:	f004 ffe1 	bl	8011d28 <iprintf>
    return ERR_VAL;
 800cd66:	f06f 0305 	mvn.w	r3, #5
 800cd6a:	e109      	b.n	800cf80 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800cd6c:	697b      	ldr	r3, [r7, #20]
 800cd6e:	891b      	ldrh	r3, [r3, #8]
 800cd70:	887a      	ldrh	r2, [r7, #2]
 800cd72:	429a      	cmp	r2, r3
 800cd74:	d301      	bcc.n	800cd7a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800cd76:	2300      	movs	r3, #0
 800cd78:	e102      	b.n	800cf80 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cd7e:	887a      	ldrh	r2, [r7, #2]
 800cd80:	429a      	cmp	r2, r3
 800cd82:	d906      	bls.n	800cd92 <tcp_split_unsent_seg+0x7e>
 800cd84:	4b80      	ldr	r3, [pc, #512]	; (800cf88 <tcp_split_unsent_seg+0x274>)
 800cd86:	f240 325b 	movw	r2, #859	; 0x35b
 800cd8a:	4983      	ldr	r1, [pc, #524]	; (800cf98 <tcp_split_unsent_seg+0x284>)
 800cd8c:	4880      	ldr	r0, [pc, #512]	; (800cf90 <tcp_split_unsent_seg+0x27c>)
 800cd8e:	f004 ffcb 	bl	8011d28 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	891b      	ldrh	r3, [r3, #8]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d106      	bne.n	800cda8 <tcp_split_unsent_seg+0x94>
 800cd9a:	4b7b      	ldr	r3, [pc, #492]	; (800cf88 <tcp_split_unsent_seg+0x274>)
 800cd9c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800cda0:	497e      	ldr	r1, [pc, #504]	; (800cf9c <tcp_split_unsent_seg+0x288>)
 800cda2:	487b      	ldr	r0, [pc, #492]	; (800cf90 <tcp_split_unsent_seg+0x27c>)
 800cda4:	f004 ffc0 	bl	8011d28 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800cda8:	697b      	ldr	r3, [r7, #20]
 800cdaa:	7a9b      	ldrb	r3, [r3, #10]
 800cdac:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800cdae:	7bfb      	ldrb	r3, [r7, #15]
 800cdb0:	009b      	lsls	r3, r3, #2
 800cdb2:	b2db      	uxtb	r3, r3
 800cdb4:	f003 0304 	and.w	r3, r3, #4
 800cdb8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800cdba:	697b      	ldr	r3, [r7, #20]
 800cdbc:	891a      	ldrh	r2, [r3, #8]
 800cdbe:	887b      	ldrh	r3, [r7, #2]
 800cdc0:	1ad3      	subs	r3, r2, r3
 800cdc2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800cdc4:	7bbb      	ldrb	r3, [r7, #14]
 800cdc6:	b29a      	uxth	r2, r3
 800cdc8:	89bb      	ldrh	r3, [r7, #12]
 800cdca:	4413      	add	r3, r2
 800cdcc:	b29b      	uxth	r3, r3
 800cdce:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cdd2:	4619      	mov	r1, r3
 800cdd4:	2036      	movs	r0, #54	; 0x36
 800cdd6:	f7fb facb 	bl	8008370 <pbuf_alloc>
 800cdda:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800cddc:	693b      	ldr	r3, [r7, #16]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	f000 80b7 	beq.w	800cf52 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800cde4:	697b      	ldr	r3, [r7, #20]
 800cde6:	685b      	ldr	r3, [r3, #4]
 800cde8:	891a      	ldrh	r2, [r3, #8]
 800cdea:	697b      	ldr	r3, [r7, #20]
 800cdec:	891b      	ldrh	r3, [r3, #8]
 800cdee:	1ad3      	subs	r3, r2, r3
 800cdf0:	b29a      	uxth	r2, r3
 800cdf2:	887b      	ldrh	r3, [r7, #2]
 800cdf4:	4413      	add	r3, r2
 800cdf6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800cdf8:	697b      	ldr	r3, [r7, #20]
 800cdfa:	6858      	ldr	r0, [r3, #4]
 800cdfc:	693b      	ldr	r3, [r7, #16]
 800cdfe:	685a      	ldr	r2, [r3, #4]
 800ce00:	7bbb      	ldrb	r3, [r7, #14]
 800ce02:	18d1      	adds	r1, r2, r3
 800ce04:	897b      	ldrh	r3, [r7, #10]
 800ce06:	89ba      	ldrh	r2, [r7, #12]
 800ce08:	f7fb ff80 	bl	8008d0c <pbuf_copy_partial>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	461a      	mov	r2, r3
 800ce10:	89bb      	ldrh	r3, [r7, #12]
 800ce12:	4293      	cmp	r3, r2
 800ce14:	f040 809f 	bne.w	800cf56 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800ce18:	697b      	ldr	r3, [r7, #20]
 800ce1a:	68db      	ldr	r3, [r3, #12]
 800ce1c:	899b      	ldrh	r3, [r3, #12]
 800ce1e:	b29b      	uxth	r3, r3
 800ce20:	4618      	mov	r0, r3
 800ce22:	f7fa fa2b 	bl	800727c <lwip_htons>
 800ce26:	4603      	mov	r3, r0
 800ce28:	b2db      	uxtb	r3, r3
 800ce2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce2e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800ce30:	2300      	movs	r3, #0
 800ce32:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800ce34:	7efb      	ldrb	r3, [r7, #27]
 800ce36:	f003 0308 	and.w	r3, r3, #8
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d007      	beq.n	800ce4e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800ce3e:	7efb      	ldrb	r3, [r7, #27]
 800ce40:	f023 0308 	bic.w	r3, r3, #8
 800ce44:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800ce46:	7ebb      	ldrb	r3, [r7, #26]
 800ce48:	f043 0308 	orr.w	r3, r3, #8
 800ce4c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800ce4e:	7efb      	ldrb	r3, [r7, #27]
 800ce50:	f003 0301 	and.w	r3, r3, #1
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d007      	beq.n	800ce68 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800ce58:	7efb      	ldrb	r3, [r7, #27]
 800ce5a:	f023 0301 	bic.w	r3, r3, #1
 800ce5e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800ce60:	7ebb      	ldrb	r3, [r7, #26]
 800ce62:	f043 0301 	orr.w	r3, r3, #1
 800ce66:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800ce68:	697b      	ldr	r3, [r7, #20]
 800ce6a:	68db      	ldr	r3, [r3, #12]
 800ce6c:	685b      	ldr	r3, [r3, #4]
 800ce6e:	4618      	mov	r0, r3
 800ce70:	f7fa fa19 	bl	80072a6 <lwip_htonl>
 800ce74:	4602      	mov	r2, r0
 800ce76:	887b      	ldrh	r3, [r7, #2]
 800ce78:	18d1      	adds	r1, r2, r3
 800ce7a:	7eba      	ldrb	r2, [r7, #26]
 800ce7c:	7bfb      	ldrb	r3, [r7, #15]
 800ce7e:	9300      	str	r3, [sp, #0]
 800ce80:	460b      	mov	r3, r1
 800ce82:	6939      	ldr	r1, [r7, #16]
 800ce84:	6878      	ldr	r0, [r7, #4]
 800ce86:	f7ff fea7 	bl	800cbd8 <tcp_create_segment>
 800ce8a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800ce8c:	69fb      	ldr	r3, [r7, #28]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d063      	beq.n	800cf5a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800ce92:	697b      	ldr	r3, [r7, #20]
 800ce94:	685b      	ldr	r3, [r3, #4]
 800ce96:	4618      	mov	r0, r3
 800ce98:	f7fb fdd6 	bl	8008a48 <pbuf_clen>
 800ce9c:	4603      	mov	r3, r0
 800ce9e:	461a      	mov	r2, r3
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cea6:	1a9b      	subs	r3, r3, r2
 800cea8:	b29a      	uxth	r2, r3
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800ceb0:	697b      	ldr	r3, [r7, #20]
 800ceb2:	6858      	ldr	r0, [r3, #4]
 800ceb4:	697b      	ldr	r3, [r7, #20]
 800ceb6:	685b      	ldr	r3, [r3, #4]
 800ceb8:	891a      	ldrh	r2, [r3, #8]
 800ceba:	89bb      	ldrh	r3, [r7, #12]
 800cebc:	1ad3      	subs	r3, r2, r3
 800cebe:	b29b      	uxth	r3, r3
 800cec0:	4619      	mov	r1, r3
 800cec2:	f7fb fbb3 	bl	800862c <pbuf_realloc>
  useg->len -= remainder;
 800cec6:	697b      	ldr	r3, [r7, #20]
 800cec8:	891a      	ldrh	r2, [r3, #8]
 800ceca:	89bb      	ldrh	r3, [r7, #12]
 800cecc:	1ad3      	subs	r3, r2, r3
 800cece:	b29a      	uxth	r2, r3
 800ced0:	697b      	ldr	r3, [r7, #20]
 800ced2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800ced4:	697b      	ldr	r3, [r7, #20]
 800ced6:	68db      	ldr	r3, [r3, #12]
 800ced8:	899b      	ldrh	r3, [r3, #12]
 800ceda:	b29c      	uxth	r4, r3
 800cedc:	7efb      	ldrb	r3, [r7, #27]
 800cede:	b29b      	uxth	r3, r3
 800cee0:	4618      	mov	r0, r3
 800cee2:	f7fa f9cb 	bl	800727c <lwip_htons>
 800cee6:	4603      	mov	r3, r0
 800cee8:	461a      	mov	r2, r3
 800ceea:	697b      	ldr	r3, [r7, #20]
 800ceec:	68db      	ldr	r3, [r3, #12]
 800ceee:	4322      	orrs	r2, r4
 800cef0:	b292      	uxth	r2, r2
 800cef2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800cef4:	697b      	ldr	r3, [r7, #20]
 800cef6:	685b      	ldr	r3, [r3, #4]
 800cef8:	4618      	mov	r0, r3
 800cefa:	f7fb fda5 	bl	8008a48 <pbuf_clen>
 800cefe:	4603      	mov	r3, r0
 800cf00:	461a      	mov	r2, r3
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cf08:	4413      	add	r3, r2
 800cf0a:	b29a      	uxth	r2, r3
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800cf12:	69fb      	ldr	r3, [r7, #28]
 800cf14:	685b      	ldr	r3, [r3, #4]
 800cf16:	4618      	mov	r0, r3
 800cf18:	f7fb fd96 	bl	8008a48 <pbuf_clen>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	461a      	mov	r2, r3
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cf26:	4413      	add	r3, r2
 800cf28:	b29a      	uxth	r2, r3
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800cf30:	697b      	ldr	r3, [r7, #20]
 800cf32:	681a      	ldr	r2, [r3, #0]
 800cf34:	69fb      	ldr	r3, [r7, #28]
 800cf36:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800cf38:	697b      	ldr	r3, [r7, #20]
 800cf3a:	69fa      	ldr	r2, [r7, #28]
 800cf3c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800cf3e:	69fb      	ldr	r3, [r7, #28]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d103      	bne.n	800cf4e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	2200      	movs	r2, #0
 800cf4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	e016      	b.n	800cf80 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800cf52:	bf00      	nop
 800cf54:	e002      	b.n	800cf5c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800cf56:	bf00      	nop
 800cf58:	e000      	b.n	800cf5c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800cf5a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800cf5c:	69fb      	ldr	r3, [r7, #28]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d006      	beq.n	800cf70 <tcp_split_unsent_seg+0x25c>
 800cf62:	4b09      	ldr	r3, [pc, #36]	; (800cf88 <tcp_split_unsent_seg+0x274>)
 800cf64:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800cf68:	490d      	ldr	r1, [pc, #52]	; (800cfa0 <tcp_split_unsent_seg+0x28c>)
 800cf6a:	4809      	ldr	r0, [pc, #36]	; (800cf90 <tcp_split_unsent_seg+0x27c>)
 800cf6c:	f004 fedc 	bl	8011d28 <iprintf>
  if (p != NULL) {
 800cf70:	693b      	ldr	r3, [r7, #16]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d002      	beq.n	800cf7c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800cf76:	6938      	ldr	r0, [r7, #16]
 800cf78:	f7fb fcde 	bl	8008938 <pbuf_free>
  }

  return ERR_MEM;
 800cf7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800cf80:	4618      	mov	r0, r3
 800cf82:	3724      	adds	r7, #36	; 0x24
 800cf84:	46bd      	mov	sp, r7
 800cf86:	bd90      	pop	{r4, r7, pc}
 800cf88:	080153c8 	.word	0x080153c8
 800cf8c:	0801575c 	.word	0x0801575c
 800cf90:	0801541c 	.word	0x0801541c
 800cf94:	08015780 	.word	0x08015780
 800cf98:	080157a4 	.word	0x080157a4
 800cf9c:	080157b4 	.word	0x080157b4
 800cfa0:	080157c4 	.word	0x080157c4

0800cfa4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800cfa4:	b590      	push	{r4, r7, lr}
 800cfa6:	b085      	sub	sp, #20
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d106      	bne.n	800cfc0 <tcp_send_fin+0x1c>
 800cfb2:	4b21      	ldr	r3, [pc, #132]	; (800d038 <tcp_send_fin+0x94>)
 800cfb4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800cfb8:	4920      	ldr	r1, [pc, #128]	; (800d03c <tcp_send_fin+0x98>)
 800cfba:	4821      	ldr	r0, [pc, #132]	; (800d040 <tcp_send_fin+0x9c>)
 800cfbc:	f004 feb4 	bl	8011d28 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d02e      	beq.n	800d026 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfcc:	60fb      	str	r3, [r7, #12]
 800cfce:	e002      	b.n	800cfd6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d1f8      	bne.n	800cfd0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	68db      	ldr	r3, [r3, #12]
 800cfe2:	899b      	ldrh	r3, [r3, #12]
 800cfe4:	b29b      	uxth	r3, r3
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f7fa f948 	bl	800727c <lwip_htons>
 800cfec:	4603      	mov	r3, r0
 800cfee:	b2db      	uxtb	r3, r3
 800cff0:	f003 0307 	and.w	r3, r3, #7
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d116      	bne.n	800d026 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	68db      	ldr	r3, [r3, #12]
 800cffc:	899b      	ldrh	r3, [r3, #12]
 800cffe:	b29c      	uxth	r4, r3
 800d000:	2001      	movs	r0, #1
 800d002:	f7fa f93b 	bl	800727c <lwip_htons>
 800d006:	4603      	mov	r3, r0
 800d008:	461a      	mov	r2, r3
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	68db      	ldr	r3, [r3, #12]
 800d00e:	4322      	orrs	r2, r4
 800d010:	b292      	uxth	r2, r2
 800d012:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	8b5b      	ldrh	r3, [r3, #26]
 800d018:	f043 0320 	orr.w	r3, r3, #32
 800d01c:	b29a      	uxth	r2, r3
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800d022:	2300      	movs	r3, #0
 800d024:	e004      	b.n	800d030 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800d026:	2101      	movs	r1, #1
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f000 f80b 	bl	800d044 <tcp_enqueue_flags>
 800d02e:	4603      	mov	r3, r0
}
 800d030:	4618      	mov	r0, r3
 800d032:	3714      	adds	r7, #20
 800d034:	46bd      	mov	sp, r7
 800d036:	bd90      	pop	{r4, r7, pc}
 800d038:	080153c8 	.word	0x080153c8
 800d03c:	080157d0 	.word	0x080157d0
 800d040:	0801541c 	.word	0x0801541c

0800d044 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b08a      	sub	sp, #40	; 0x28
 800d048:	af02      	add	r7, sp, #8
 800d04a:	6078      	str	r0, [r7, #4]
 800d04c:	460b      	mov	r3, r1
 800d04e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800d050:	2300      	movs	r3, #0
 800d052:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800d054:	2300      	movs	r3, #0
 800d056:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800d058:	78fb      	ldrb	r3, [r7, #3]
 800d05a:	f003 0303 	and.w	r3, r3, #3
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d106      	bne.n	800d070 <tcp_enqueue_flags+0x2c>
 800d062:	4b67      	ldr	r3, [pc, #412]	; (800d200 <tcp_enqueue_flags+0x1bc>)
 800d064:	f240 4211 	movw	r2, #1041	; 0x411
 800d068:	4966      	ldr	r1, [pc, #408]	; (800d204 <tcp_enqueue_flags+0x1c0>)
 800d06a:	4867      	ldr	r0, [pc, #412]	; (800d208 <tcp_enqueue_flags+0x1c4>)
 800d06c:	f004 fe5c 	bl	8011d28 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d106      	bne.n	800d084 <tcp_enqueue_flags+0x40>
 800d076:	4b62      	ldr	r3, [pc, #392]	; (800d200 <tcp_enqueue_flags+0x1bc>)
 800d078:	f240 4213 	movw	r2, #1043	; 0x413
 800d07c:	4963      	ldr	r1, [pc, #396]	; (800d20c <tcp_enqueue_flags+0x1c8>)
 800d07e:	4862      	ldr	r0, [pc, #392]	; (800d208 <tcp_enqueue_flags+0x1c4>)
 800d080:	f004 fe52 	bl	8011d28 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800d084:	78fb      	ldrb	r3, [r7, #3]
 800d086:	f003 0302 	and.w	r3, r3, #2
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d001      	beq.n	800d092 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800d08e:	2301      	movs	r3, #1
 800d090:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d092:	7ffb      	ldrb	r3, [r7, #31]
 800d094:	009b      	lsls	r3, r3, #2
 800d096:	b2db      	uxtb	r3, r3
 800d098:	f003 0304 	and.w	r3, r3, #4
 800d09c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d09e:	7dfb      	ldrb	r3, [r7, #23]
 800d0a0:	b29b      	uxth	r3, r3
 800d0a2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d0a6:	4619      	mov	r1, r3
 800d0a8:	2036      	movs	r0, #54	; 0x36
 800d0aa:	f7fb f961 	bl	8008370 <pbuf_alloc>
 800d0ae:	6138      	str	r0, [r7, #16]
 800d0b0:	693b      	ldr	r3, [r7, #16]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d109      	bne.n	800d0ca <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	8b5b      	ldrh	r3, [r3, #26]
 800d0ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0be:	b29a      	uxth	r2, r3
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d0c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d0c8:	e095      	b.n	800d1f6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800d0ca:	693b      	ldr	r3, [r7, #16]
 800d0cc:	895a      	ldrh	r2, [r3, #10]
 800d0ce:	7dfb      	ldrb	r3, [r7, #23]
 800d0d0:	b29b      	uxth	r3, r3
 800d0d2:	429a      	cmp	r2, r3
 800d0d4:	d206      	bcs.n	800d0e4 <tcp_enqueue_flags+0xa0>
 800d0d6:	4b4a      	ldr	r3, [pc, #296]	; (800d200 <tcp_enqueue_flags+0x1bc>)
 800d0d8:	f240 4239 	movw	r2, #1081	; 0x439
 800d0dc:	494c      	ldr	r1, [pc, #304]	; (800d210 <tcp_enqueue_flags+0x1cc>)
 800d0de:	484a      	ldr	r0, [pc, #296]	; (800d208 <tcp_enqueue_flags+0x1c4>)
 800d0e0:	f004 fe22 	bl	8011d28 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800d0e8:	78fa      	ldrb	r2, [r7, #3]
 800d0ea:	7ffb      	ldrb	r3, [r7, #31]
 800d0ec:	9300      	str	r3, [sp, #0]
 800d0ee:	460b      	mov	r3, r1
 800d0f0:	6939      	ldr	r1, [r7, #16]
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f7ff fd70 	bl	800cbd8 <tcp_create_segment>
 800d0f8:	60f8      	str	r0, [r7, #12]
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d109      	bne.n	800d114 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	8b5b      	ldrh	r3, [r3, #26]
 800d104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d108:	b29a      	uxth	r2, r3
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d10e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d112:	e070      	b.n	800d1f6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	68db      	ldr	r3, [r3, #12]
 800d118:	f003 0303 	and.w	r3, r3, #3
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d006      	beq.n	800d12e <tcp_enqueue_flags+0xea>
 800d120:	4b37      	ldr	r3, [pc, #220]	; (800d200 <tcp_enqueue_flags+0x1bc>)
 800d122:	f240 4242 	movw	r2, #1090	; 0x442
 800d126:	493b      	ldr	r1, [pc, #236]	; (800d214 <tcp_enqueue_flags+0x1d0>)
 800d128:	4837      	ldr	r0, [pc, #220]	; (800d208 <tcp_enqueue_flags+0x1c4>)
 800d12a:	f004 fdfd 	bl	8011d28 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	891b      	ldrh	r3, [r3, #8]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d006      	beq.n	800d144 <tcp_enqueue_flags+0x100>
 800d136:	4b32      	ldr	r3, [pc, #200]	; (800d200 <tcp_enqueue_flags+0x1bc>)
 800d138:	f240 4243 	movw	r2, #1091	; 0x443
 800d13c:	4936      	ldr	r1, [pc, #216]	; (800d218 <tcp_enqueue_flags+0x1d4>)
 800d13e:	4832      	ldr	r0, [pc, #200]	; (800d208 <tcp_enqueue_flags+0x1c4>)
 800d140:	f004 fdf2 	bl	8011d28 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d103      	bne.n	800d154 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	68fa      	ldr	r2, [r7, #12]
 800d150:	66da      	str	r2, [r3, #108]	; 0x6c
 800d152:	e00d      	b.n	800d170 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d158:	61bb      	str	r3, [r7, #24]
 800d15a:	e002      	b.n	800d162 <tcp_enqueue_flags+0x11e>
 800d15c:	69bb      	ldr	r3, [r7, #24]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	61bb      	str	r3, [r7, #24]
 800d162:	69bb      	ldr	r3, [r7, #24]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d1f8      	bne.n	800d15c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800d16a:	69bb      	ldr	r3, [r7, #24]
 800d16c:	68fa      	ldr	r2, [r7, #12]
 800d16e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2200      	movs	r2, #0
 800d174:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800d178:	78fb      	ldrb	r3, [r7, #3]
 800d17a:	f003 0302 	and.w	r3, r3, #2
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d104      	bne.n	800d18c <tcp_enqueue_flags+0x148>
 800d182:	78fb      	ldrb	r3, [r7, #3]
 800d184:	f003 0301 	and.w	r3, r3, #1
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d004      	beq.n	800d196 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d190:	1c5a      	adds	r2, r3, #1
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800d196:	78fb      	ldrb	r3, [r7, #3]
 800d198:	f003 0301 	and.w	r3, r3, #1
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d006      	beq.n	800d1ae <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	8b5b      	ldrh	r3, [r3, #26]
 800d1a4:	f043 0320 	orr.w	r3, r3, #32
 800d1a8:	b29a      	uxth	r2, r3
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	685b      	ldr	r3, [r3, #4]
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	f7fb fc48 	bl	8008a48 <pbuf_clen>
 800d1b8:	4603      	mov	r3, r0
 800d1ba:	461a      	mov	r2, r3
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d1c2:	4413      	add	r3, r2
 800d1c4:	b29a      	uxth	r2, r3
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d00e      	beq.n	800d1f4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d10a      	bne.n	800d1f4 <tcp_enqueue_flags+0x1b0>
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d106      	bne.n	800d1f4 <tcp_enqueue_flags+0x1b0>
 800d1e6:	4b06      	ldr	r3, [pc, #24]	; (800d200 <tcp_enqueue_flags+0x1bc>)
 800d1e8:	f240 4265 	movw	r2, #1125	; 0x465
 800d1ec:	490b      	ldr	r1, [pc, #44]	; (800d21c <tcp_enqueue_flags+0x1d8>)
 800d1ee:	4806      	ldr	r0, [pc, #24]	; (800d208 <tcp_enqueue_flags+0x1c4>)
 800d1f0:	f004 fd9a 	bl	8011d28 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800d1f4:	2300      	movs	r3, #0
}
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	3720      	adds	r7, #32
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	bd80      	pop	{r7, pc}
 800d1fe:	bf00      	nop
 800d200:	080153c8 	.word	0x080153c8
 800d204:	080157ec 	.word	0x080157ec
 800d208:	0801541c 	.word	0x0801541c
 800d20c:	08015844 	.word	0x08015844
 800d210:	08015864 	.word	0x08015864
 800d214:	080158a0 	.word	0x080158a0
 800d218:	080158b8 	.word	0x080158b8
 800d21c:	080158e4 	.word	0x080158e4

0800d220 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800d220:	b5b0      	push	{r4, r5, r7, lr}
 800d222:	b08a      	sub	sp, #40	; 0x28
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d106      	bne.n	800d23c <tcp_output+0x1c>
 800d22e:	4b8a      	ldr	r3, [pc, #552]	; (800d458 <tcp_output+0x238>)
 800d230:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800d234:	4989      	ldr	r1, [pc, #548]	; (800d45c <tcp_output+0x23c>)
 800d236:	488a      	ldr	r0, [pc, #552]	; (800d460 <tcp_output+0x240>)
 800d238:	f004 fd76 	bl	8011d28 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	7d1b      	ldrb	r3, [r3, #20]
 800d240:	2b01      	cmp	r3, #1
 800d242:	d106      	bne.n	800d252 <tcp_output+0x32>
 800d244:	4b84      	ldr	r3, [pc, #528]	; (800d458 <tcp_output+0x238>)
 800d246:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800d24a:	4986      	ldr	r1, [pc, #536]	; (800d464 <tcp_output+0x244>)
 800d24c:	4884      	ldr	r0, [pc, #528]	; (800d460 <tcp_output+0x240>)
 800d24e:	f004 fd6b 	bl	8011d28 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800d252:	4b85      	ldr	r3, [pc, #532]	; (800d468 <tcp_output+0x248>)
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	687a      	ldr	r2, [r7, #4]
 800d258:	429a      	cmp	r2, r3
 800d25a:	d101      	bne.n	800d260 <tcp_output+0x40>
    return ERR_OK;
 800d25c:	2300      	movs	r3, #0
 800d25e:	e1ce      	b.n	800d5fe <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d26c:	4293      	cmp	r3, r2
 800d26e:	bf28      	it	cs
 800d270:	4613      	movcs	r3, r2
 800d272:	b29b      	uxth	r3, r3
 800d274:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d27a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800d27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d10b      	bne.n	800d29a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	8b5b      	ldrh	r3, [r3, #26]
 800d286:	f003 0302 	and.w	r3, r3, #2
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	f000 81aa 	beq.w	800d5e4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800d290:	6878      	ldr	r0, [r7, #4]
 800d292:	f000 fdcb 	bl	800de2c <tcp_send_empty_ack>
 800d296:	4603      	mov	r3, r0
 800d298:	e1b1      	b.n	800d5fe <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800d29a:	6879      	ldr	r1, [r7, #4]
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	3304      	adds	r3, #4
 800d2a0:	461a      	mov	r2, r3
 800d2a2:	6878      	ldr	r0, [r7, #4]
 800d2a4:	f7ff fc7c 	bl	800cba0 <tcp_route>
 800d2a8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800d2aa:	697b      	ldr	r3, [r7, #20]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d102      	bne.n	800d2b6 <tcp_output+0x96>
    return ERR_RTE;
 800d2b0:	f06f 0303 	mvn.w	r3, #3
 800d2b4:	e1a3      	b.n	800d5fe <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d003      	beq.n	800d2c4 <tcp_output+0xa4>
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d111      	bne.n	800d2e8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800d2c4:	697b      	ldr	r3, [r7, #20]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d002      	beq.n	800d2d0 <tcp_output+0xb0>
 800d2ca:	697b      	ldr	r3, [r7, #20]
 800d2cc:	3304      	adds	r3, #4
 800d2ce:	e000      	b.n	800d2d2 <tcp_output+0xb2>
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800d2d4:	693b      	ldr	r3, [r7, #16]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d102      	bne.n	800d2e0 <tcp_output+0xc0>
      return ERR_RTE;
 800d2da:	f06f 0303 	mvn.w	r3, #3
 800d2de:	e18e      	b.n	800d5fe <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d2e0:	693b      	ldr	r3, [r7, #16]
 800d2e2:	681a      	ldr	r2, [r3, #0]
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800d2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ea:	68db      	ldr	r3, [r3, #12]
 800d2ec:	685b      	ldr	r3, [r3, #4]
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	f7f9 ffd9 	bl	80072a6 <lwip_htonl>
 800d2f4:	4602      	mov	r2, r0
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2fa:	1ad3      	subs	r3, r2, r3
 800d2fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2fe:	8912      	ldrh	r2, [r2, #8]
 800d300:	4413      	add	r3, r2
 800d302:	69ba      	ldr	r2, [r7, #24]
 800d304:	429a      	cmp	r2, r3
 800d306:	d227      	bcs.n	800d358 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d30e:	461a      	mov	r2, r3
 800d310:	69bb      	ldr	r3, [r7, #24]
 800d312:	4293      	cmp	r3, r2
 800d314:	d114      	bne.n	800d340 <tcp_output+0x120>
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d110      	bne.n	800d340 <tcp_output+0x120>
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d324:	2b00      	cmp	r3, #0
 800d326:	d10b      	bne.n	800d340 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	2200      	movs	r2, #0
 800d32c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	2201      	movs	r2, #1
 800d334:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	2200      	movs	r2, #0
 800d33c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	8b5b      	ldrh	r3, [r3, #26]
 800d344:	f003 0302 	and.w	r3, r3, #2
 800d348:	2b00      	cmp	r3, #0
 800d34a:	f000 814d 	beq.w	800d5e8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800d34e:	6878      	ldr	r0, [r7, #4]
 800d350:	f000 fd6c 	bl	800de2c <tcp_send_empty_ack>
 800d354:	4603      	mov	r3, r0
 800d356:	e152      	b.n	800d5fe <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	2200      	movs	r2, #0
 800d35c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d364:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800d366:	6a3b      	ldr	r3, [r7, #32]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	f000 811c 	beq.w	800d5a6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800d36e:	e002      	b.n	800d376 <tcp_output+0x156>
 800d370:	6a3b      	ldr	r3, [r7, #32]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	623b      	str	r3, [r7, #32]
 800d376:	6a3b      	ldr	r3, [r7, #32]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d1f8      	bne.n	800d370 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800d37e:	e112      	b.n	800d5a6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800d380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d382:	68db      	ldr	r3, [r3, #12]
 800d384:	899b      	ldrh	r3, [r3, #12]
 800d386:	b29b      	uxth	r3, r3
 800d388:	4618      	mov	r0, r3
 800d38a:	f7f9 ff77 	bl	800727c <lwip_htons>
 800d38e:	4603      	mov	r3, r0
 800d390:	b2db      	uxtb	r3, r3
 800d392:	f003 0304 	and.w	r3, r3, #4
 800d396:	2b00      	cmp	r3, #0
 800d398:	d006      	beq.n	800d3a8 <tcp_output+0x188>
 800d39a:	4b2f      	ldr	r3, [pc, #188]	; (800d458 <tcp_output+0x238>)
 800d39c:	f240 5236 	movw	r2, #1334	; 0x536
 800d3a0:	4932      	ldr	r1, [pc, #200]	; (800d46c <tcp_output+0x24c>)
 800d3a2:	482f      	ldr	r0, [pc, #188]	; (800d460 <tcp_output+0x240>)
 800d3a4:	f004 fcc0 	bl	8011d28 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d01f      	beq.n	800d3f0 <tcp_output+0x1d0>
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	8b5b      	ldrh	r3, [r3, #26]
 800d3b4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d119      	bne.n	800d3f0 <tcp_output+0x1d0>
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d00b      	beq.n	800d3dc <tcp_output+0x1bc>
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d110      	bne.n	800d3f0 <tcp_output+0x1d0>
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3d2:	891a      	ldrh	r2, [r3, #8]
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d3d8:	429a      	cmp	r2, r3
 800d3da:	d209      	bcs.n	800d3f0 <tcp_output+0x1d0>
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d004      	beq.n	800d3f0 <tcp_output+0x1d0>
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d3ec:	2b08      	cmp	r3, #8
 800d3ee:	d901      	bls.n	800d3f4 <tcp_output+0x1d4>
 800d3f0:	2301      	movs	r3, #1
 800d3f2:	e000      	b.n	800d3f6 <tcp_output+0x1d6>
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d106      	bne.n	800d408 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	8b5b      	ldrh	r3, [r3, #26]
 800d3fe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d402:	2b00      	cmp	r3, #0
 800d404:	f000 80e4 	beq.w	800d5d0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	7d1b      	ldrb	r3, [r3, #20]
 800d40c:	2b02      	cmp	r3, #2
 800d40e:	d00d      	beq.n	800d42c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800d410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d412:	68db      	ldr	r3, [r3, #12]
 800d414:	899b      	ldrh	r3, [r3, #12]
 800d416:	b29c      	uxth	r4, r3
 800d418:	2010      	movs	r0, #16
 800d41a:	f7f9 ff2f 	bl	800727c <lwip_htons>
 800d41e:	4603      	mov	r3, r0
 800d420:	461a      	mov	r2, r3
 800d422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d424:	68db      	ldr	r3, [r3, #12]
 800d426:	4322      	orrs	r2, r4
 800d428:	b292      	uxth	r2, r2
 800d42a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800d42c:	697a      	ldr	r2, [r7, #20]
 800d42e:	6879      	ldr	r1, [r7, #4]
 800d430:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d432:	f000 f909 	bl	800d648 <tcp_output_segment>
 800d436:	4603      	mov	r3, r0
 800d438:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800d43a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d016      	beq.n	800d470 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	8b5b      	ldrh	r3, [r3, #26]
 800d446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d44a:	b29a      	uxth	r2, r3
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	835a      	strh	r2, [r3, #26]
      return err;
 800d450:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d454:	e0d3      	b.n	800d5fe <tcp_output+0x3de>
 800d456:	bf00      	nop
 800d458:	080153c8 	.word	0x080153c8
 800d45c:	0801590c 	.word	0x0801590c
 800d460:	0801541c 	.word	0x0801541c
 800d464:	08015924 	.word	0x08015924
 800d468:	2000a81c 	.word	0x2000a81c
 800d46c:	0801594c 	.word	0x0801594c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800d470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d472:	681a      	ldr	r2, [r3, #0]
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	7d1b      	ldrb	r3, [r3, #20]
 800d47c:	2b02      	cmp	r3, #2
 800d47e:	d006      	beq.n	800d48e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	8b5b      	ldrh	r3, [r3, #26]
 800d484:	f023 0303 	bic.w	r3, r3, #3
 800d488:	b29a      	uxth	r2, r3
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d490:	68db      	ldr	r3, [r3, #12]
 800d492:	685b      	ldr	r3, [r3, #4]
 800d494:	4618      	mov	r0, r3
 800d496:	f7f9 ff06 	bl	80072a6 <lwip_htonl>
 800d49a:	4604      	mov	r4, r0
 800d49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d49e:	891b      	ldrh	r3, [r3, #8]
 800d4a0:	461d      	mov	r5, r3
 800d4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a4:	68db      	ldr	r3, [r3, #12]
 800d4a6:	899b      	ldrh	r3, [r3, #12]
 800d4a8:	b29b      	uxth	r3, r3
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	f7f9 fee6 	bl	800727c <lwip_htons>
 800d4b0:	4603      	mov	r3, r0
 800d4b2:	b2db      	uxtb	r3, r3
 800d4b4:	f003 0303 	and.w	r3, r3, #3
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d001      	beq.n	800d4c0 <tcp_output+0x2a0>
 800d4bc:	2301      	movs	r3, #1
 800d4be:	e000      	b.n	800d4c2 <tcp_output+0x2a2>
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	442b      	add	r3, r5
 800d4c4:	4423      	add	r3, r4
 800d4c6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d4cc:	68bb      	ldr	r3, [r7, #8]
 800d4ce:	1ad3      	subs	r3, r2, r3
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	da02      	bge.n	800d4da <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	68ba      	ldr	r2, [r7, #8]
 800d4d8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800d4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4dc:	891b      	ldrh	r3, [r3, #8]
 800d4de:	461c      	mov	r4, r3
 800d4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4e2:	68db      	ldr	r3, [r3, #12]
 800d4e4:	899b      	ldrh	r3, [r3, #12]
 800d4e6:	b29b      	uxth	r3, r3
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f7f9 fec7 	bl	800727c <lwip_htons>
 800d4ee:	4603      	mov	r3, r0
 800d4f0:	b2db      	uxtb	r3, r3
 800d4f2:	f003 0303 	and.w	r3, r3, #3
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d001      	beq.n	800d4fe <tcp_output+0x2de>
 800d4fa:	2301      	movs	r3, #1
 800d4fc:	e000      	b.n	800d500 <tcp_output+0x2e0>
 800d4fe:	2300      	movs	r3, #0
 800d500:	4423      	add	r3, r4
 800d502:	2b00      	cmp	r3, #0
 800d504:	d049      	beq.n	800d59a <tcp_output+0x37a>
      seg->next = NULL;
 800d506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d508:	2200      	movs	r2, #0
 800d50a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d510:	2b00      	cmp	r3, #0
 800d512:	d105      	bne.n	800d520 <tcp_output+0x300>
        pcb->unacked = seg;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d518:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800d51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d51c:	623b      	str	r3, [r7, #32]
 800d51e:	e03f      	b.n	800d5a0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800d520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d522:	68db      	ldr	r3, [r3, #12]
 800d524:	685b      	ldr	r3, [r3, #4]
 800d526:	4618      	mov	r0, r3
 800d528:	f7f9 febd 	bl	80072a6 <lwip_htonl>
 800d52c:	4604      	mov	r4, r0
 800d52e:	6a3b      	ldr	r3, [r7, #32]
 800d530:	68db      	ldr	r3, [r3, #12]
 800d532:	685b      	ldr	r3, [r3, #4]
 800d534:	4618      	mov	r0, r3
 800d536:	f7f9 feb6 	bl	80072a6 <lwip_htonl>
 800d53a:	4603      	mov	r3, r0
 800d53c:	1ae3      	subs	r3, r4, r3
 800d53e:	2b00      	cmp	r3, #0
 800d540:	da24      	bge.n	800d58c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	3370      	adds	r3, #112	; 0x70
 800d546:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d548:	e002      	b.n	800d550 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800d54a:	69fb      	ldr	r3, [r7, #28]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d550:	69fb      	ldr	r3, [r7, #28]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d011      	beq.n	800d57c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d558:	69fb      	ldr	r3, [r7, #28]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	68db      	ldr	r3, [r3, #12]
 800d55e:	685b      	ldr	r3, [r3, #4]
 800d560:	4618      	mov	r0, r3
 800d562:	f7f9 fea0 	bl	80072a6 <lwip_htonl>
 800d566:	4604      	mov	r4, r0
 800d568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d56a:	68db      	ldr	r3, [r3, #12]
 800d56c:	685b      	ldr	r3, [r3, #4]
 800d56e:	4618      	mov	r0, r3
 800d570:	f7f9 fe99 	bl	80072a6 <lwip_htonl>
 800d574:	4603      	mov	r3, r0
 800d576:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800d578:	2b00      	cmp	r3, #0
 800d57a:	dbe6      	blt.n	800d54a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800d57c:	69fb      	ldr	r3, [r7, #28]
 800d57e:	681a      	ldr	r2, [r3, #0]
 800d580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d582:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800d584:	69fb      	ldr	r3, [r7, #28]
 800d586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d588:	601a      	str	r2, [r3, #0]
 800d58a:	e009      	b.n	800d5a0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800d58c:	6a3b      	ldr	r3, [r7, #32]
 800d58e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d590:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800d592:	6a3b      	ldr	r3, [r7, #32]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	623b      	str	r3, [r7, #32]
 800d598:	e002      	b.n	800d5a0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800d59a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d59c:	f7fc fc3f 	bl	8009e1e <tcp_seg_free>
    }
    seg = pcb->unsent;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5a4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800d5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d012      	beq.n	800d5d2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800d5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ae:	68db      	ldr	r3, [r3, #12]
 800d5b0:	685b      	ldr	r3, [r3, #4]
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	f7f9 fe77 	bl	80072a6 <lwip_htonl>
 800d5b8:	4602      	mov	r2, r0
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5be:	1ad3      	subs	r3, r2, r3
 800d5c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5c2:	8912      	ldrh	r2, [r2, #8]
 800d5c4:	4413      	add	r3, r2
  while (seg != NULL &&
 800d5c6:	69ba      	ldr	r2, [r7, #24]
 800d5c8:	429a      	cmp	r2, r3
 800d5ca:	f4bf aed9 	bcs.w	800d380 <tcp_output+0x160>
 800d5ce:	e000      	b.n	800d5d2 <tcp_output+0x3b2>
      break;
 800d5d0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d108      	bne.n	800d5ec <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2200      	movs	r2, #0
 800d5de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800d5e2:	e004      	b.n	800d5ee <tcp_output+0x3ce>
    goto output_done;
 800d5e4:	bf00      	nop
 800d5e6:	e002      	b.n	800d5ee <tcp_output+0x3ce>
    goto output_done;
 800d5e8:	bf00      	nop
 800d5ea:	e000      	b.n	800d5ee <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800d5ec:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	8b5b      	ldrh	r3, [r3, #26]
 800d5f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d5f6:	b29a      	uxth	r2, r3
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800d5fc:	2300      	movs	r3, #0
}
 800d5fe:	4618      	mov	r0, r3
 800d600:	3728      	adds	r7, #40	; 0x28
 800d602:	46bd      	mov	sp, r7
 800d604:	bdb0      	pop	{r4, r5, r7, pc}
 800d606:	bf00      	nop

0800d608 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b082      	sub	sp, #8
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d106      	bne.n	800d624 <tcp_output_segment_busy+0x1c>
 800d616:	4b09      	ldr	r3, [pc, #36]	; (800d63c <tcp_output_segment_busy+0x34>)
 800d618:	f240 529a 	movw	r2, #1434	; 0x59a
 800d61c:	4908      	ldr	r1, [pc, #32]	; (800d640 <tcp_output_segment_busy+0x38>)
 800d61e:	4809      	ldr	r0, [pc, #36]	; (800d644 <tcp_output_segment_busy+0x3c>)
 800d620:	f004 fb82 	bl	8011d28 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	685b      	ldr	r3, [r3, #4]
 800d628:	7b9b      	ldrb	r3, [r3, #14]
 800d62a:	2b01      	cmp	r3, #1
 800d62c:	d001      	beq.n	800d632 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800d62e:	2301      	movs	r3, #1
 800d630:	e000      	b.n	800d634 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800d632:	2300      	movs	r3, #0
}
 800d634:	4618      	mov	r0, r3
 800d636:	3708      	adds	r7, #8
 800d638:	46bd      	mov	sp, r7
 800d63a:	bd80      	pop	{r7, pc}
 800d63c:	080153c8 	.word	0x080153c8
 800d640:	08015964 	.word	0x08015964
 800d644:	0801541c 	.word	0x0801541c

0800d648 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800d648:	b5b0      	push	{r4, r5, r7, lr}
 800d64a:	b08c      	sub	sp, #48	; 0x30
 800d64c:	af04      	add	r7, sp, #16
 800d64e:	60f8      	str	r0, [r7, #12]
 800d650:	60b9      	str	r1, [r7, #8]
 800d652:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d106      	bne.n	800d668 <tcp_output_segment+0x20>
 800d65a:	4b64      	ldr	r3, [pc, #400]	; (800d7ec <tcp_output_segment+0x1a4>)
 800d65c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800d660:	4963      	ldr	r1, [pc, #396]	; (800d7f0 <tcp_output_segment+0x1a8>)
 800d662:	4864      	ldr	r0, [pc, #400]	; (800d7f4 <tcp_output_segment+0x1ac>)
 800d664:	f004 fb60 	bl	8011d28 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800d668:	68bb      	ldr	r3, [r7, #8]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d106      	bne.n	800d67c <tcp_output_segment+0x34>
 800d66e:	4b5f      	ldr	r3, [pc, #380]	; (800d7ec <tcp_output_segment+0x1a4>)
 800d670:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800d674:	4960      	ldr	r1, [pc, #384]	; (800d7f8 <tcp_output_segment+0x1b0>)
 800d676:	485f      	ldr	r0, [pc, #380]	; (800d7f4 <tcp_output_segment+0x1ac>)
 800d678:	f004 fb56 	bl	8011d28 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d106      	bne.n	800d690 <tcp_output_segment+0x48>
 800d682:	4b5a      	ldr	r3, [pc, #360]	; (800d7ec <tcp_output_segment+0x1a4>)
 800d684:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800d688:	495c      	ldr	r1, [pc, #368]	; (800d7fc <tcp_output_segment+0x1b4>)
 800d68a:	485a      	ldr	r0, [pc, #360]	; (800d7f4 <tcp_output_segment+0x1ac>)
 800d68c:	f004 fb4c 	bl	8011d28 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800d690:	68f8      	ldr	r0, [r7, #12]
 800d692:	f7ff ffb9 	bl	800d608 <tcp_output_segment_busy>
 800d696:	4603      	mov	r3, r0
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d001      	beq.n	800d6a0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800d69c:	2300      	movs	r3, #0
 800d69e:	e0a1      	b.n	800d7e4 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800d6a0:	68bb      	ldr	r3, [r7, #8]
 800d6a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	68dc      	ldr	r4, [r3, #12]
 800d6a8:	4610      	mov	r0, r2
 800d6aa:	f7f9 fdfc 	bl	80072a6 <lwip_htonl>
 800d6ae:	4603      	mov	r3, r0
 800d6b0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d6b2:	68bb      	ldr	r3, [r7, #8]
 800d6b4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	68dc      	ldr	r4, [r3, #12]
 800d6ba:	4610      	mov	r0, r2
 800d6bc:	f7f9 fdde 	bl	800727c <lwip_htons>
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d6c4:	68bb      	ldr	r3, [r7, #8]
 800d6c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6c8:	68ba      	ldr	r2, [r7, #8]
 800d6ca:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800d6cc:	441a      	add	r2, r3
 800d6ce:	68bb      	ldr	r3, [r7, #8]
 800d6d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	68db      	ldr	r3, [r3, #12]
 800d6d6:	3314      	adds	r3, #20
 800d6d8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	7a9b      	ldrb	r3, [r3, #10]
 800d6de:	f003 0301 	and.w	r3, r3, #1
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d015      	beq.n	800d712 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800d6e6:	68bb      	ldr	r3, [r7, #8]
 800d6e8:	3304      	adds	r3, #4
 800d6ea:	461a      	mov	r2, r3
 800d6ec:	6879      	ldr	r1, [r7, #4]
 800d6ee:	f44f 7006 	mov.w	r0, #536	; 0x218
 800d6f2:	f7fc fe8b 	bl	800a40c <tcp_eff_send_mss_netif>
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800d6fa:	8b7b      	ldrh	r3, [r7, #26]
 800d6fc:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800d700:	4618      	mov	r0, r3
 800d702:	f7f9 fdd0 	bl	80072a6 <lwip_htonl>
 800d706:	4602      	mov	r2, r0
 800d708:	69fb      	ldr	r3, [r7, #28]
 800d70a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800d70c:	69fb      	ldr	r3, [r7, #28]
 800d70e:	3304      	adds	r3, #4
 800d710:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800d712:	68bb      	ldr	r3, [r7, #8]
 800d714:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d718:	2b00      	cmp	r3, #0
 800d71a:	da02      	bge.n	800d722 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	2200      	movs	r2, #0
 800d720:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800d722:	68bb      	ldr	r3, [r7, #8]
 800d724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d726:	2b00      	cmp	r3, #0
 800d728:	d10c      	bne.n	800d744 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800d72a:	4b35      	ldr	r3, [pc, #212]	; (800d800 <tcp_output_segment+0x1b8>)
 800d72c:	681a      	ldr	r2, [r3, #0]
 800d72e:	68bb      	ldr	r3, [r7, #8]
 800d730:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	68db      	ldr	r3, [r3, #12]
 800d736:	685b      	ldr	r3, [r3, #4]
 800d738:	4618      	mov	r0, r3
 800d73a:	f7f9 fdb4 	bl	80072a6 <lwip_htonl>
 800d73e:	4602      	mov	r2, r0
 800d740:	68bb      	ldr	r3, [r7, #8]
 800d742:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	68da      	ldr	r2, [r3, #12]
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	685b      	ldr	r3, [r3, #4]
 800d74c:	685b      	ldr	r3, [r3, #4]
 800d74e:	1ad3      	subs	r3, r2, r3
 800d750:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	685b      	ldr	r3, [r3, #4]
 800d756:	8959      	ldrh	r1, [r3, #10]
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	685b      	ldr	r3, [r3, #4]
 800d75c:	8b3a      	ldrh	r2, [r7, #24]
 800d75e:	1a8a      	subs	r2, r1, r2
 800d760:	b292      	uxth	r2, r2
 800d762:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	685b      	ldr	r3, [r3, #4]
 800d768:	8919      	ldrh	r1, [r3, #8]
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	685b      	ldr	r3, [r3, #4]
 800d76e:	8b3a      	ldrh	r2, [r7, #24]
 800d770:	1a8a      	subs	r2, r1, r2
 800d772:	b292      	uxth	r2, r2
 800d774:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	685b      	ldr	r3, [r3, #4]
 800d77a:	68fa      	ldr	r2, [r7, #12]
 800d77c:	68d2      	ldr	r2, [r2, #12]
 800d77e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	68db      	ldr	r3, [r3, #12]
 800d784:	2200      	movs	r2, #0
 800d786:	741a      	strb	r2, [r3, #16]
 800d788:	2200      	movs	r2, #0
 800d78a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	68da      	ldr	r2, [r3, #12]
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	7a9b      	ldrb	r3, [r3, #10]
 800d794:	f003 0301 	and.w	r3, r3, #1
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d001      	beq.n	800d7a0 <tcp_output_segment+0x158>
 800d79c:	2318      	movs	r3, #24
 800d79e:	e000      	b.n	800d7a2 <tcp_output_segment+0x15a>
 800d7a0:	2314      	movs	r3, #20
 800d7a2:	4413      	add	r3, r2
 800d7a4:	69fa      	ldr	r2, [r7, #28]
 800d7a6:	429a      	cmp	r2, r3
 800d7a8:	d006      	beq.n	800d7b8 <tcp_output_segment+0x170>
 800d7aa:	4b10      	ldr	r3, [pc, #64]	; (800d7ec <tcp_output_segment+0x1a4>)
 800d7ac:	f240 621c 	movw	r2, #1564	; 0x61c
 800d7b0:	4914      	ldr	r1, [pc, #80]	; (800d804 <tcp_output_segment+0x1bc>)
 800d7b2:	4810      	ldr	r0, [pc, #64]	; (800d7f4 <tcp_output_segment+0x1ac>)
 800d7b4:	f004 fab8 	bl	8011d28 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	6858      	ldr	r0, [r3, #4]
 800d7bc:	68b9      	ldr	r1, [r7, #8]
 800d7be:	68bb      	ldr	r3, [r7, #8]
 800d7c0:	1d1c      	adds	r4, r3, #4
 800d7c2:	68bb      	ldr	r3, [r7, #8]
 800d7c4:	7add      	ldrb	r5, [r3, #11]
 800d7c6:	68bb      	ldr	r3, [r7, #8]
 800d7c8:	7a9b      	ldrb	r3, [r3, #10]
 800d7ca:	687a      	ldr	r2, [r7, #4]
 800d7cc:	9202      	str	r2, [sp, #8]
 800d7ce:	2206      	movs	r2, #6
 800d7d0:	9201      	str	r2, [sp, #4]
 800d7d2:	9300      	str	r3, [sp, #0]
 800d7d4:	462b      	mov	r3, r5
 800d7d6:	4622      	mov	r2, r4
 800d7d8:	f002 fb9a 	bl	800ff10 <ip4_output_if>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800d7e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	3720      	adds	r7, #32
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bdb0      	pop	{r4, r5, r7, pc}
 800d7ec:	080153c8 	.word	0x080153c8
 800d7f0:	0801598c 	.word	0x0801598c
 800d7f4:	0801541c 	.word	0x0801541c
 800d7f8:	080159ac 	.word	0x080159ac
 800d7fc:	080159cc 	.word	0x080159cc
 800d800:	2000a7d0 	.word	0x2000a7d0
 800d804:	080159f0 	.word	0x080159f0

0800d808 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800d808:	b5b0      	push	{r4, r5, r7, lr}
 800d80a:	b084      	sub	sp, #16
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d106      	bne.n	800d824 <tcp_rexmit_rto_prepare+0x1c>
 800d816:	4b31      	ldr	r3, [pc, #196]	; (800d8dc <tcp_rexmit_rto_prepare+0xd4>)
 800d818:	f240 6263 	movw	r2, #1635	; 0x663
 800d81c:	4930      	ldr	r1, [pc, #192]	; (800d8e0 <tcp_rexmit_rto_prepare+0xd8>)
 800d81e:	4831      	ldr	r0, [pc, #196]	; (800d8e4 <tcp_rexmit_rto_prepare+0xdc>)
 800d820:	f004 fa82 	bl	8011d28 <iprintf>

  if (pcb->unacked == NULL) {
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d102      	bne.n	800d832 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800d82c:	f06f 0305 	mvn.w	r3, #5
 800d830:	e050      	b.n	800d8d4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d836:	60fb      	str	r3, [r7, #12]
 800d838:	e00b      	b.n	800d852 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800d83a:	68f8      	ldr	r0, [r7, #12]
 800d83c:	f7ff fee4 	bl	800d608 <tcp_output_segment_busy>
 800d840:	4603      	mov	r3, r0
 800d842:	2b00      	cmp	r3, #0
 800d844:	d002      	beq.n	800d84c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800d846:	f06f 0305 	mvn.w	r3, #5
 800d84a:	e043      	b.n	800d8d4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	60fb      	str	r3, [r7, #12]
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d1ef      	bne.n	800d83a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800d85a:	68f8      	ldr	r0, [r7, #12]
 800d85c:	f7ff fed4 	bl	800d608 <tcp_output_segment_busy>
 800d860:	4603      	mov	r3, r0
 800d862:	2b00      	cmp	r3, #0
 800d864:	d002      	beq.n	800d86c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800d866:	f06f 0305 	mvn.w	r3, #5
 800d86a:	e033      	b.n	800d8d4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2200      	movs	r2, #0
 800d880:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	8b5b      	ldrh	r3, [r3, #26]
 800d886:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d88a:	b29a      	uxth	r2, r3
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	68db      	ldr	r3, [r3, #12]
 800d894:	685b      	ldr	r3, [r3, #4]
 800d896:	4618      	mov	r0, r3
 800d898:	f7f9 fd05 	bl	80072a6 <lwip_htonl>
 800d89c:	4604      	mov	r4, r0
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	891b      	ldrh	r3, [r3, #8]
 800d8a2:	461d      	mov	r5, r3
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	68db      	ldr	r3, [r3, #12]
 800d8a8:	899b      	ldrh	r3, [r3, #12]
 800d8aa:	b29b      	uxth	r3, r3
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f7f9 fce5 	bl	800727c <lwip_htons>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	b2db      	uxtb	r3, r3
 800d8b6:	f003 0303 	and.w	r3, r3, #3
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d001      	beq.n	800d8c2 <tcp_rexmit_rto_prepare+0xba>
 800d8be:	2301      	movs	r3, #1
 800d8c0:	e000      	b.n	800d8c4 <tcp_rexmit_rto_prepare+0xbc>
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	442b      	add	r3, r5
 800d8c6:	18e2      	adds	r2, r4, r3
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800d8d2:	2300      	movs	r3, #0
}
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	3710      	adds	r7, #16
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	bdb0      	pop	{r4, r5, r7, pc}
 800d8dc:	080153c8 	.word	0x080153c8
 800d8e0:	08015a04 	.word	0x08015a04
 800d8e4:	0801541c 	.word	0x0801541c

0800d8e8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b082      	sub	sp, #8
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d106      	bne.n	800d904 <tcp_rexmit_rto_commit+0x1c>
 800d8f6:	4b0d      	ldr	r3, [pc, #52]	; (800d92c <tcp_rexmit_rto_commit+0x44>)
 800d8f8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d8fc:	490c      	ldr	r1, [pc, #48]	; (800d930 <tcp_rexmit_rto_commit+0x48>)
 800d8fe:	480d      	ldr	r0, [pc, #52]	; (800d934 <tcp_rexmit_rto_commit+0x4c>)
 800d900:	f004 fa12 	bl	8011d28 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d90a:	2bff      	cmp	r3, #255	; 0xff
 800d90c:	d007      	beq.n	800d91e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d914:	3301      	adds	r3, #1
 800d916:	b2da      	uxtb	r2, r3
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800d91e:	6878      	ldr	r0, [r7, #4]
 800d920:	f7ff fc7e 	bl	800d220 <tcp_output>
}
 800d924:	bf00      	nop
 800d926:	3708      	adds	r7, #8
 800d928:	46bd      	mov	sp, r7
 800d92a:	bd80      	pop	{r7, pc}
 800d92c:	080153c8 	.word	0x080153c8
 800d930:	08015a28 	.word	0x08015a28
 800d934:	0801541c 	.word	0x0801541c

0800d938 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b082      	sub	sp, #8
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d106      	bne.n	800d954 <tcp_rexmit_rto+0x1c>
 800d946:	4b0a      	ldr	r3, [pc, #40]	; (800d970 <tcp_rexmit_rto+0x38>)
 800d948:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800d94c:	4909      	ldr	r1, [pc, #36]	; (800d974 <tcp_rexmit_rto+0x3c>)
 800d94e:	480a      	ldr	r0, [pc, #40]	; (800d978 <tcp_rexmit_rto+0x40>)
 800d950:	f004 f9ea 	bl	8011d28 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800d954:	6878      	ldr	r0, [r7, #4]
 800d956:	f7ff ff57 	bl	800d808 <tcp_rexmit_rto_prepare>
 800d95a:	4603      	mov	r3, r0
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d102      	bne.n	800d966 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800d960:	6878      	ldr	r0, [r7, #4]
 800d962:	f7ff ffc1 	bl	800d8e8 <tcp_rexmit_rto_commit>
  }
}
 800d966:	bf00      	nop
 800d968:	3708      	adds	r7, #8
 800d96a:	46bd      	mov	sp, r7
 800d96c:	bd80      	pop	{r7, pc}
 800d96e:	bf00      	nop
 800d970:	080153c8 	.word	0x080153c8
 800d974:	08015a4c 	.word	0x08015a4c
 800d978:	0801541c 	.word	0x0801541c

0800d97c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800d97c:	b590      	push	{r4, r7, lr}
 800d97e:	b085      	sub	sp, #20
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d106      	bne.n	800d998 <tcp_rexmit+0x1c>
 800d98a:	4b2f      	ldr	r3, [pc, #188]	; (800da48 <tcp_rexmit+0xcc>)
 800d98c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800d990:	492e      	ldr	r1, [pc, #184]	; (800da4c <tcp_rexmit+0xd0>)
 800d992:	482f      	ldr	r0, [pc, #188]	; (800da50 <tcp_rexmit+0xd4>)
 800d994:	f004 f9c8 	bl	8011d28 <iprintf>

  if (pcb->unacked == NULL) {
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d102      	bne.n	800d9a6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800d9a0:	f06f 0305 	mvn.w	r3, #5
 800d9a4:	e04c      	b.n	800da40 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9aa:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800d9ac:	68b8      	ldr	r0, [r7, #8]
 800d9ae:	f7ff fe2b 	bl	800d608 <tcp_output_segment_busy>
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d002      	beq.n	800d9be <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800d9b8:	f06f 0305 	mvn.w	r3, #5
 800d9bc:	e040      	b.n	800da40 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800d9be:	68bb      	ldr	r3, [r7, #8]
 800d9c0:	681a      	ldr	r2, [r3, #0]
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	336c      	adds	r3, #108	; 0x6c
 800d9ca:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d9cc:	e002      	b.n	800d9d4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d011      	beq.n	800da00 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	68db      	ldr	r3, [r3, #12]
 800d9e2:	685b      	ldr	r3, [r3, #4]
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	f7f9 fc5e 	bl	80072a6 <lwip_htonl>
 800d9ea:	4604      	mov	r4, r0
 800d9ec:	68bb      	ldr	r3, [r7, #8]
 800d9ee:	68db      	ldr	r3, [r3, #12]
 800d9f0:	685b      	ldr	r3, [r3, #4]
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	f7f9 fc57 	bl	80072a6 <lwip_htonl>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	dbe6      	blt.n	800d9ce <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	681a      	ldr	r2, [r3, #0]
 800da04:	68bb      	ldr	r3, [r7, #8]
 800da06:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	68ba      	ldr	r2, [r7, #8]
 800da0c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800da0e:	68bb      	ldr	r3, [r7, #8]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d103      	bne.n	800da1e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	2200      	movs	r2, #0
 800da1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800da24:	2bff      	cmp	r3, #255	; 0xff
 800da26:	d007      	beq.n	800da38 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800da2e:	3301      	adds	r3, #1
 800da30:	b2da      	uxtb	r2, r3
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2200      	movs	r2, #0
 800da3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800da3e:	2300      	movs	r3, #0
}
 800da40:	4618      	mov	r0, r3
 800da42:	3714      	adds	r7, #20
 800da44:	46bd      	mov	sp, r7
 800da46:	bd90      	pop	{r4, r7, pc}
 800da48:	080153c8 	.word	0x080153c8
 800da4c:	08015a68 	.word	0x08015a68
 800da50:	0801541c 	.word	0x0801541c

0800da54 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b082      	sub	sp, #8
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d106      	bne.n	800da70 <tcp_rexmit_fast+0x1c>
 800da62:	4b2a      	ldr	r3, [pc, #168]	; (800db0c <tcp_rexmit_fast+0xb8>)
 800da64:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800da68:	4929      	ldr	r1, [pc, #164]	; (800db10 <tcp_rexmit_fast+0xbc>)
 800da6a:	482a      	ldr	r0, [pc, #168]	; (800db14 <tcp_rexmit_fast+0xc0>)
 800da6c:	f004 f95c 	bl	8011d28 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da74:	2b00      	cmp	r3, #0
 800da76:	d045      	beq.n	800db04 <tcp_rexmit_fast+0xb0>
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	8b5b      	ldrh	r3, [r3, #26]
 800da7c:	f003 0304 	and.w	r3, r3, #4
 800da80:	2b00      	cmp	r3, #0
 800da82:	d13f      	bne.n	800db04 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800da84:	6878      	ldr	r0, [r7, #4]
 800da86:	f7ff ff79 	bl	800d97c <tcp_rexmit>
 800da8a:	4603      	mov	r3, r0
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d139      	bne.n	800db04 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800da9c:	4293      	cmp	r3, r2
 800da9e:	bf28      	it	cs
 800daa0:	4613      	movcs	r3, r2
 800daa2:	b29b      	uxth	r3, r3
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	da00      	bge.n	800daaa <tcp_rexmit_fast+0x56>
 800daa8:	3301      	adds	r3, #1
 800daaa:	105b      	asrs	r3, r3, #1
 800daac:	b29a      	uxth	r2, r3
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800daba:	461a      	mov	r2, r3
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dac0:	005b      	lsls	r3, r3, #1
 800dac2:	429a      	cmp	r2, r3
 800dac4:	d206      	bcs.n	800dad4 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800daca:	005b      	lsls	r3, r3, #1
 800dacc:	b29a      	uxth	r2, r3
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dade:	4619      	mov	r1, r3
 800dae0:	0049      	lsls	r1, r1, #1
 800dae2:	440b      	add	r3, r1
 800dae4:	b29b      	uxth	r3, r3
 800dae6:	4413      	add	r3, r2
 800dae8:	b29a      	uxth	r2, r3
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	8b5b      	ldrh	r3, [r3, #26]
 800daf4:	f043 0304 	orr.w	r3, r3, #4
 800daf8:	b29a      	uxth	r2, r3
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	2200      	movs	r2, #0
 800db02:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800db04:	bf00      	nop
 800db06:	3708      	adds	r7, #8
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd80      	pop	{r7, pc}
 800db0c:	080153c8 	.word	0x080153c8
 800db10:	08015a80 	.word	0x08015a80
 800db14:	0801541c 	.word	0x0801541c

0800db18 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b086      	sub	sp, #24
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	60f8      	str	r0, [r7, #12]
 800db20:	607b      	str	r3, [r7, #4]
 800db22:	460b      	mov	r3, r1
 800db24:	817b      	strh	r3, [r7, #10]
 800db26:	4613      	mov	r3, r2
 800db28:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800db2a:	897a      	ldrh	r2, [r7, #10]
 800db2c:	893b      	ldrh	r3, [r7, #8]
 800db2e:	4413      	add	r3, r2
 800db30:	b29b      	uxth	r3, r3
 800db32:	3314      	adds	r3, #20
 800db34:	b29b      	uxth	r3, r3
 800db36:	f44f 7220 	mov.w	r2, #640	; 0x280
 800db3a:	4619      	mov	r1, r3
 800db3c:	2022      	movs	r0, #34	; 0x22
 800db3e:	f7fa fc17 	bl	8008370 <pbuf_alloc>
 800db42:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800db44:	697b      	ldr	r3, [r7, #20]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d04d      	beq.n	800dbe6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800db4a:	897b      	ldrh	r3, [r7, #10]
 800db4c:	3313      	adds	r3, #19
 800db4e:	697a      	ldr	r2, [r7, #20]
 800db50:	8952      	ldrh	r2, [r2, #10]
 800db52:	4293      	cmp	r3, r2
 800db54:	db06      	blt.n	800db64 <tcp_output_alloc_header_common+0x4c>
 800db56:	4b26      	ldr	r3, [pc, #152]	; (800dbf0 <tcp_output_alloc_header_common+0xd8>)
 800db58:	f240 7223 	movw	r2, #1827	; 0x723
 800db5c:	4925      	ldr	r1, [pc, #148]	; (800dbf4 <tcp_output_alloc_header_common+0xdc>)
 800db5e:	4826      	ldr	r0, [pc, #152]	; (800dbf8 <tcp_output_alloc_header_common+0xe0>)
 800db60:	f004 f8e2 	bl	8011d28 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800db64:	697b      	ldr	r3, [r7, #20]
 800db66:	685b      	ldr	r3, [r3, #4]
 800db68:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800db6a:	8c3b      	ldrh	r3, [r7, #32]
 800db6c:	4618      	mov	r0, r3
 800db6e:	f7f9 fb85 	bl	800727c <lwip_htons>
 800db72:	4603      	mov	r3, r0
 800db74:	461a      	mov	r2, r3
 800db76:	693b      	ldr	r3, [r7, #16]
 800db78:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800db7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db7c:	4618      	mov	r0, r3
 800db7e:	f7f9 fb7d 	bl	800727c <lwip_htons>
 800db82:	4603      	mov	r3, r0
 800db84:	461a      	mov	r2, r3
 800db86:	693b      	ldr	r3, [r7, #16]
 800db88:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800db8a:	693b      	ldr	r3, [r7, #16]
 800db8c:	687a      	ldr	r2, [r7, #4]
 800db8e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800db90:	68f8      	ldr	r0, [r7, #12]
 800db92:	f7f9 fb88 	bl	80072a6 <lwip_htonl>
 800db96:	4602      	mov	r2, r0
 800db98:	693b      	ldr	r3, [r7, #16]
 800db9a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800db9c:	897b      	ldrh	r3, [r7, #10]
 800db9e:	089b      	lsrs	r3, r3, #2
 800dba0:	b29b      	uxth	r3, r3
 800dba2:	3305      	adds	r3, #5
 800dba4:	b29b      	uxth	r3, r3
 800dba6:	031b      	lsls	r3, r3, #12
 800dba8:	b29a      	uxth	r2, r3
 800dbaa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800dbae:	b29b      	uxth	r3, r3
 800dbb0:	4313      	orrs	r3, r2
 800dbb2:	b29b      	uxth	r3, r3
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	f7f9 fb61 	bl	800727c <lwip_htons>
 800dbba:	4603      	mov	r3, r0
 800dbbc:	461a      	mov	r2, r3
 800dbbe:	693b      	ldr	r3, [r7, #16]
 800dbc0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800dbc2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f7f9 fb59 	bl	800727c <lwip_htons>
 800dbca:	4603      	mov	r3, r0
 800dbcc:	461a      	mov	r2, r3
 800dbce:	693b      	ldr	r3, [r7, #16]
 800dbd0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800dbd2:	693b      	ldr	r3, [r7, #16]
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	741a      	strb	r2, [r3, #16]
 800dbd8:	2200      	movs	r2, #0
 800dbda:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800dbdc:	693b      	ldr	r3, [r7, #16]
 800dbde:	2200      	movs	r2, #0
 800dbe0:	749a      	strb	r2, [r3, #18]
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800dbe6:	697b      	ldr	r3, [r7, #20]
}
 800dbe8:	4618      	mov	r0, r3
 800dbea:	3718      	adds	r7, #24
 800dbec:	46bd      	mov	sp, r7
 800dbee:	bd80      	pop	{r7, pc}
 800dbf0:	080153c8 	.word	0x080153c8
 800dbf4:	08015aa0 	.word	0x08015aa0
 800dbf8:	0801541c 	.word	0x0801541c

0800dbfc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800dbfc:	b5b0      	push	{r4, r5, r7, lr}
 800dbfe:	b08a      	sub	sp, #40	; 0x28
 800dc00:	af04      	add	r7, sp, #16
 800dc02:	60f8      	str	r0, [r7, #12]
 800dc04:	607b      	str	r3, [r7, #4]
 800dc06:	460b      	mov	r3, r1
 800dc08:	817b      	strh	r3, [r7, #10]
 800dc0a:	4613      	mov	r3, r2
 800dc0c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d106      	bne.n	800dc22 <tcp_output_alloc_header+0x26>
 800dc14:	4b15      	ldr	r3, [pc, #84]	; (800dc6c <tcp_output_alloc_header+0x70>)
 800dc16:	f240 7242 	movw	r2, #1858	; 0x742
 800dc1a:	4915      	ldr	r1, [pc, #84]	; (800dc70 <tcp_output_alloc_header+0x74>)
 800dc1c:	4815      	ldr	r0, [pc, #84]	; (800dc74 <tcp_output_alloc_header+0x78>)
 800dc1e:	f004 f883 	bl	8011d28 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	8adb      	ldrh	r3, [r3, #22]
 800dc2a:	68fa      	ldr	r2, [r7, #12]
 800dc2c:	8b12      	ldrh	r2, [r2, #24]
 800dc2e:	68f9      	ldr	r1, [r7, #12]
 800dc30:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800dc32:	893d      	ldrh	r5, [r7, #8]
 800dc34:	897c      	ldrh	r4, [r7, #10]
 800dc36:	9103      	str	r1, [sp, #12]
 800dc38:	2110      	movs	r1, #16
 800dc3a:	9102      	str	r1, [sp, #8]
 800dc3c:	9201      	str	r2, [sp, #4]
 800dc3e:	9300      	str	r3, [sp, #0]
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	462a      	mov	r2, r5
 800dc44:	4621      	mov	r1, r4
 800dc46:	f7ff ff67 	bl	800db18 <tcp_output_alloc_header_common>
 800dc4a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800dc4c:	697b      	ldr	r3, [r7, #20]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d006      	beq.n	800dc60 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc56:	68fa      	ldr	r2, [r7, #12]
 800dc58:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800dc5a:	441a      	add	r2, r3
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800dc60:	697b      	ldr	r3, [r7, #20]
}
 800dc62:	4618      	mov	r0, r3
 800dc64:	3718      	adds	r7, #24
 800dc66:	46bd      	mov	sp, r7
 800dc68:	bdb0      	pop	{r4, r5, r7, pc}
 800dc6a:	bf00      	nop
 800dc6c:	080153c8 	.word	0x080153c8
 800dc70:	08015ad0 	.word	0x08015ad0
 800dc74:	0801541c 	.word	0x0801541c

0800dc78 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b088      	sub	sp, #32
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	60f8      	str	r0, [r7, #12]
 800dc80:	60b9      	str	r1, [r7, #8]
 800dc82:	4611      	mov	r1, r2
 800dc84:	461a      	mov	r2, r3
 800dc86:	460b      	mov	r3, r1
 800dc88:	71fb      	strb	r3, [r7, #7]
 800dc8a:	4613      	mov	r3, r2
 800dc8c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800dc8e:	2300      	movs	r3, #0
 800dc90:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800dc92:	68bb      	ldr	r3, [r7, #8]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d106      	bne.n	800dca6 <tcp_output_fill_options+0x2e>
 800dc98:	4b12      	ldr	r3, [pc, #72]	; (800dce4 <tcp_output_fill_options+0x6c>)
 800dc9a:	f240 7256 	movw	r2, #1878	; 0x756
 800dc9e:	4912      	ldr	r1, [pc, #72]	; (800dce8 <tcp_output_fill_options+0x70>)
 800dca0:	4812      	ldr	r0, [pc, #72]	; (800dcec <tcp_output_fill_options+0x74>)
 800dca2:	f004 f841 	bl	8011d28 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800dca6:	68bb      	ldr	r3, [r7, #8]
 800dca8:	685b      	ldr	r3, [r3, #4]
 800dcaa:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800dcac:	69bb      	ldr	r3, [r7, #24]
 800dcae:	3314      	adds	r3, #20
 800dcb0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800dcb2:	8bfb      	ldrh	r3, [r7, #30]
 800dcb4:	009b      	lsls	r3, r3, #2
 800dcb6:	461a      	mov	r2, r3
 800dcb8:	79fb      	ldrb	r3, [r7, #7]
 800dcba:	009b      	lsls	r3, r3, #2
 800dcbc:	f003 0304 	and.w	r3, r3, #4
 800dcc0:	4413      	add	r3, r2
 800dcc2:	3314      	adds	r3, #20
 800dcc4:	69ba      	ldr	r2, [r7, #24]
 800dcc6:	4413      	add	r3, r2
 800dcc8:	697a      	ldr	r2, [r7, #20]
 800dcca:	429a      	cmp	r2, r3
 800dccc:	d006      	beq.n	800dcdc <tcp_output_fill_options+0x64>
 800dcce:	4b05      	ldr	r3, [pc, #20]	; (800dce4 <tcp_output_fill_options+0x6c>)
 800dcd0:	f240 7275 	movw	r2, #1909	; 0x775
 800dcd4:	4906      	ldr	r1, [pc, #24]	; (800dcf0 <tcp_output_fill_options+0x78>)
 800dcd6:	4805      	ldr	r0, [pc, #20]	; (800dcec <tcp_output_fill_options+0x74>)
 800dcd8:	f004 f826 	bl	8011d28 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800dcdc:	bf00      	nop
 800dcde:	3720      	adds	r7, #32
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}
 800dce4:	080153c8 	.word	0x080153c8
 800dce8:	08015af8 	.word	0x08015af8
 800dcec:	0801541c 	.word	0x0801541c
 800dcf0:	080159f0 	.word	0x080159f0

0800dcf4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b08a      	sub	sp, #40	; 0x28
 800dcf8:	af04      	add	r7, sp, #16
 800dcfa:	60f8      	str	r0, [r7, #12]
 800dcfc:	60b9      	str	r1, [r7, #8]
 800dcfe:	607a      	str	r2, [r7, #4]
 800dd00:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800dd02:	68bb      	ldr	r3, [r7, #8]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d106      	bne.n	800dd16 <tcp_output_control_segment+0x22>
 800dd08:	4b1c      	ldr	r3, [pc, #112]	; (800dd7c <tcp_output_control_segment+0x88>)
 800dd0a:	f240 7287 	movw	r2, #1927	; 0x787
 800dd0e:	491c      	ldr	r1, [pc, #112]	; (800dd80 <tcp_output_control_segment+0x8c>)
 800dd10:	481c      	ldr	r0, [pc, #112]	; (800dd84 <tcp_output_control_segment+0x90>)
 800dd12:	f004 f809 	bl	8011d28 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800dd16:	683a      	ldr	r2, [r7, #0]
 800dd18:	6879      	ldr	r1, [r7, #4]
 800dd1a:	68f8      	ldr	r0, [r7, #12]
 800dd1c:	f7fe ff40 	bl	800cba0 <tcp_route>
 800dd20:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800dd22:	693b      	ldr	r3, [r7, #16]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d102      	bne.n	800dd2e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800dd28:	23fc      	movs	r3, #252	; 0xfc
 800dd2a:	75fb      	strb	r3, [r7, #23]
 800dd2c:	e01c      	b.n	800dd68 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d006      	beq.n	800dd42 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	7adb      	ldrb	r3, [r3, #11]
 800dd38:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	7a9b      	ldrb	r3, [r3, #10]
 800dd3e:	757b      	strb	r3, [r7, #21]
 800dd40:	e003      	b.n	800dd4a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800dd42:	23ff      	movs	r3, #255	; 0xff
 800dd44:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800dd46:	2300      	movs	r3, #0
 800dd48:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800dd4a:	7dba      	ldrb	r2, [r7, #22]
 800dd4c:	693b      	ldr	r3, [r7, #16]
 800dd4e:	9302      	str	r3, [sp, #8]
 800dd50:	2306      	movs	r3, #6
 800dd52:	9301      	str	r3, [sp, #4]
 800dd54:	7d7b      	ldrb	r3, [r7, #21]
 800dd56:	9300      	str	r3, [sp, #0]
 800dd58:	4613      	mov	r3, r2
 800dd5a:	683a      	ldr	r2, [r7, #0]
 800dd5c:	6879      	ldr	r1, [r7, #4]
 800dd5e:	68b8      	ldr	r0, [r7, #8]
 800dd60:	f002 f8d6 	bl	800ff10 <ip4_output_if>
 800dd64:	4603      	mov	r3, r0
 800dd66:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800dd68:	68b8      	ldr	r0, [r7, #8]
 800dd6a:	f7fa fde5 	bl	8008938 <pbuf_free>
  return err;
 800dd6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dd72:	4618      	mov	r0, r3
 800dd74:	3718      	adds	r7, #24
 800dd76:	46bd      	mov	sp, r7
 800dd78:	bd80      	pop	{r7, pc}
 800dd7a:	bf00      	nop
 800dd7c:	080153c8 	.word	0x080153c8
 800dd80:	08015b20 	.word	0x08015b20
 800dd84:	0801541c 	.word	0x0801541c

0800dd88 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800dd88:	b590      	push	{r4, r7, lr}
 800dd8a:	b08b      	sub	sp, #44	; 0x2c
 800dd8c:	af04      	add	r7, sp, #16
 800dd8e:	60f8      	str	r0, [r7, #12]
 800dd90:	60b9      	str	r1, [r7, #8]
 800dd92:	607a      	str	r2, [r7, #4]
 800dd94:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d106      	bne.n	800ddaa <tcp_rst+0x22>
 800dd9c:	4b1f      	ldr	r3, [pc, #124]	; (800de1c <tcp_rst+0x94>)
 800dd9e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800dda2:	491f      	ldr	r1, [pc, #124]	; (800de20 <tcp_rst+0x98>)
 800dda4:	481f      	ldr	r0, [pc, #124]	; (800de24 <tcp_rst+0x9c>)
 800dda6:	f003 ffbf 	bl	8011d28 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800ddaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d106      	bne.n	800ddbe <tcp_rst+0x36>
 800ddb0:	4b1a      	ldr	r3, [pc, #104]	; (800de1c <tcp_rst+0x94>)
 800ddb2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800ddb6:	491c      	ldr	r1, [pc, #112]	; (800de28 <tcp_rst+0xa0>)
 800ddb8:	481a      	ldr	r0, [pc, #104]	; (800de24 <tcp_rst+0x9c>)
 800ddba:	f003 ffb5 	bl	8011d28 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800ddc2:	f246 0308 	movw	r3, #24584	; 0x6008
 800ddc6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800ddc8:	7dfb      	ldrb	r3, [r7, #23]
 800ddca:	b29c      	uxth	r4, r3
 800ddcc:	68b8      	ldr	r0, [r7, #8]
 800ddce:	f7f9 fa6a 	bl	80072a6 <lwip_htonl>
 800ddd2:	4602      	mov	r2, r0
 800ddd4:	8abb      	ldrh	r3, [r7, #20]
 800ddd6:	9303      	str	r3, [sp, #12]
 800ddd8:	2314      	movs	r3, #20
 800ddda:	9302      	str	r3, [sp, #8]
 800dddc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ddde:	9301      	str	r3, [sp, #4]
 800dde0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dde2:	9300      	str	r3, [sp, #0]
 800dde4:	4613      	mov	r3, r2
 800dde6:	2200      	movs	r2, #0
 800dde8:	4621      	mov	r1, r4
 800ddea:	6878      	ldr	r0, [r7, #4]
 800ddec:	f7ff fe94 	bl	800db18 <tcp_output_alloc_header_common>
 800ddf0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800ddf2:	693b      	ldr	r3, [r7, #16]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d00c      	beq.n	800de12 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ddf8:	7dfb      	ldrb	r3, [r7, #23]
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	6939      	ldr	r1, [r7, #16]
 800ddfe:	68f8      	ldr	r0, [r7, #12]
 800de00:	f7ff ff3a 	bl	800dc78 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800de04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de06:	683a      	ldr	r2, [r7, #0]
 800de08:	6939      	ldr	r1, [r7, #16]
 800de0a:	68f8      	ldr	r0, [r7, #12]
 800de0c:	f7ff ff72 	bl	800dcf4 <tcp_output_control_segment>
 800de10:	e000      	b.n	800de14 <tcp_rst+0x8c>
    return;
 800de12:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800de14:	371c      	adds	r7, #28
 800de16:	46bd      	mov	sp, r7
 800de18:	bd90      	pop	{r4, r7, pc}
 800de1a:	bf00      	nop
 800de1c:	080153c8 	.word	0x080153c8
 800de20:	08015b4c 	.word	0x08015b4c
 800de24:	0801541c 	.word	0x0801541c
 800de28:	08015b68 	.word	0x08015b68

0800de2c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800de2c:	b590      	push	{r4, r7, lr}
 800de2e:	b087      	sub	sp, #28
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800de34:	2300      	movs	r3, #0
 800de36:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800de38:	2300      	movs	r3, #0
 800de3a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d106      	bne.n	800de50 <tcp_send_empty_ack+0x24>
 800de42:	4b28      	ldr	r3, [pc, #160]	; (800dee4 <tcp_send_empty_ack+0xb8>)
 800de44:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800de48:	4927      	ldr	r1, [pc, #156]	; (800dee8 <tcp_send_empty_ack+0xbc>)
 800de4a:	4828      	ldr	r0, [pc, #160]	; (800deec <tcp_send_empty_ack+0xc0>)
 800de4c:	f003 ff6c 	bl	8011d28 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800de50:	7dfb      	ldrb	r3, [r7, #23]
 800de52:	009b      	lsls	r3, r3, #2
 800de54:	b2db      	uxtb	r3, r3
 800de56:	f003 0304 	and.w	r3, r3, #4
 800de5a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800de5c:	7d7b      	ldrb	r3, [r7, #21]
 800de5e:	b29c      	uxth	r4, r3
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de64:	4618      	mov	r0, r3
 800de66:	f7f9 fa1e 	bl	80072a6 <lwip_htonl>
 800de6a:	4603      	mov	r3, r0
 800de6c:	2200      	movs	r2, #0
 800de6e:	4621      	mov	r1, r4
 800de70:	6878      	ldr	r0, [r7, #4]
 800de72:	f7ff fec3 	bl	800dbfc <tcp_output_alloc_header>
 800de76:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800de78:	693b      	ldr	r3, [r7, #16]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d109      	bne.n	800de92 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	8b5b      	ldrh	r3, [r3, #26]
 800de82:	f043 0303 	orr.w	r3, r3, #3
 800de86:	b29a      	uxth	r2, r3
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800de8c:	f06f 0301 	mvn.w	r3, #1
 800de90:	e023      	b.n	800deda <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800de92:	7dbb      	ldrb	r3, [r7, #22]
 800de94:	7dfa      	ldrb	r2, [r7, #23]
 800de96:	6939      	ldr	r1, [r7, #16]
 800de98:	6878      	ldr	r0, [r7, #4]
 800de9a:	f7ff feed 	bl	800dc78 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800de9e:	687a      	ldr	r2, [r7, #4]
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	3304      	adds	r3, #4
 800dea4:	6939      	ldr	r1, [r7, #16]
 800dea6:	6878      	ldr	r0, [r7, #4]
 800dea8:	f7ff ff24 	bl	800dcf4 <tcp_output_control_segment>
 800deac:	4603      	mov	r3, r0
 800deae:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800deb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d007      	beq.n	800dec8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	8b5b      	ldrh	r3, [r3, #26]
 800debc:	f043 0303 	orr.w	r3, r3, #3
 800dec0:	b29a      	uxth	r2, r3
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	835a      	strh	r2, [r3, #26]
 800dec6:	e006      	b.n	800ded6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	8b5b      	ldrh	r3, [r3, #26]
 800decc:	f023 0303 	bic.w	r3, r3, #3
 800ded0:	b29a      	uxth	r2, r3
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800ded6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800deda:	4618      	mov	r0, r3
 800dedc:	371c      	adds	r7, #28
 800dede:	46bd      	mov	sp, r7
 800dee0:	bd90      	pop	{r4, r7, pc}
 800dee2:	bf00      	nop
 800dee4:	080153c8 	.word	0x080153c8
 800dee8:	08015b84 	.word	0x08015b84
 800deec:	0801541c 	.word	0x0801541c

0800def0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800def0:	b590      	push	{r4, r7, lr}
 800def2:	b087      	sub	sp, #28
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800def8:	2300      	movs	r3, #0
 800defa:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d106      	bne.n	800df10 <tcp_keepalive+0x20>
 800df02:	4b18      	ldr	r3, [pc, #96]	; (800df64 <tcp_keepalive+0x74>)
 800df04:	f640 0224 	movw	r2, #2084	; 0x824
 800df08:	4917      	ldr	r1, [pc, #92]	; (800df68 <tcp_keepalive+0x78>)
 800df0a:	4818      	ldr	r0, [pc, #96]	; (800df6c <tcp_keepalive+0x7c>)
 800df0c:	f003 ff0c 	bl	8011d28 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800df10:	7dfb      	ldrb	r3, [r7, #23]
 800df12:	b29c      	uxth	r4, r3
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df18:	3b01      	subs	r3, #1
 800df1a:	4618      	mov	r0, r3
 800df1c:	f7f9 f9c3 	bl	80072a6 <lwip_htonl>
 800df20:	4603      	mov	r3, r0
 800df22:	2200      	movs	r2, #0
 800df24:	4621      	mov	r1, r4
 800df26:	6878      	ldr	r0, [r7, #4]
 800df28:	f7ff fe68 	bl	800dbfc <tcp_output_alloc_header>
 800df2c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800df2e:	693b      	ldr	r3, [r7, #16]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d102      	bne.n	800df3a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800df34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800df38:	e010      	b.n	800df5c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800df3a:	7dfb      	ldrb	r3, [r7, #23]
 800df3c:	2200      	movs	r2, #0
 800df3e:	6939      	ldr	r1, [r7, #16]
 800df40:	6878      	ldr	r0, [r7, #4]
 800df42:	f7ff fe99 	bl	800dc78 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800df46:	687a      	ldr	r2, [r7, #4]
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	3304      	adds	r3, #4
 800df4c:	6939      	ldr	r1, [r7, #16]
 800df4e:	6878      	ldr	r0, [r7, #4]
 800df50:	f7ff fed0 	bl	800dcf4 <tcp_output_control_segment>
 800df54:	4603      	mov	r3, r0
 800df56:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800df58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800df5c:	4618      	mov	r0, r3
 800df5e:	371c      	adds	r7, #28
 800df60:	46bd      	mov	sp, r7
 800df62:	bd90      	pop	{r4, r7, pc}
 800df64:	080153c8 	.word	0x080153c8
 800df68:	08015ba4 	.word	0x08015ba4
 800df6c:	0801541c 	.word	0x0801541c

0800df70 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800df70:	b590      	push	{r4, r7, lr}
 800df72:	b08b      	sub	sp, #44	; 0x2c
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800df78:	2300      	movs	r3, #0
 800df7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d106      	bne.n	800df92 <tcp_zero_window_probe+0x22>
 800df84:	4b4c      	ldr	r3, [pc, #304]	; (800e0b8 <tcp_zero_window_probe+0x148>)
 800df86:	f640 024f 	movw	r2, #2127	; 0x84f
 800df8a:	494c      	ldr	r1, [pc, #304]	; (800e0bc <tcp_zero_window_probe+0x14c>)
 800df8c:	484c      	ldr	r0, [pc, #304]	; (800e0c0 <tcp_zero_window_probe+0x150>)
 800df8e:	f003 fecb 	bl	8011d28 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df96:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800df98:	6a3b      	ldr	r3, [r7, #32]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d101      	bne.n	800dfa2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800df9e:	2300      	movs	r3, #0
 800dfa0:	e086      	b.n	800e0b0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800dfa8:	2bff      	cmp	r3, #255	; 0xff
 800dfaa:	d007      	beq.n	800dfbc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800dfb2:	3301      	adds	r3, #1
 800dfb4:	b2da      	uxtb	r2, r3
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800dfbc:	6a3b      	ldr	r3, [r7, #32]
 800dfbe:	68db      	ldr	r3, [r3, #12]
 800dfc0:	899b      	ldrh	r3, [r3, #12]
 800dfc2:	b29b      	uxth	r3, r3
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	f7f9 f959 	bl	800727c <lwip_htons>
 800dfca:	4603      	mov	r3, r0
 800dfcc:	b2db      	uxtb	r3, r3
 800dfce:	f003 0301 	and.w	r3, r3, #1
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d005      	beq.n	800dfe2 <tcp_zero_window_probe+0x72>
 800dfd6:	6a3b      	ldr	r3, [r7, #32]
 800dfd8:	891b      	ldrh	r3, [r3, #8]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d101      	bne.n	800dfe2 <tcp_zero_window_probe+0x72>
 800dfde:	2301      	movs	r3, #1
 800dfe0:	e000      	b.n	800dfe4 <tcp_zero_window_probe+0x74>
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800dfe6:	7ffb      	ldrb	r3, [r7, #31]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	bf0c      	ite	eq
 800dfec:	2301      	moveq	r3, #1
 800dfee:	2300      	movne	r3, #0
 800dff0:	b2db      	uxtb	r3, r3
 800dff2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800dff4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dff8:	b299      	uxth	r1, r3
 800dffa:	6a3b      	ldr	r3, [r7, #32]
 800dffc:	68db      	ldr	r3, [r3, #12]
 800dffe:	685b      	ldr	r3, [r3, #4]
 800e000:	8bba      	ldrh	r2, [r7, #28]
 800e002:	6878      	ldr	r0, [r7, #4]
 800e004:	f7ff fdfa 	bl	800dbfc <tcp_output_alloc_header>
 800e008:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800e00a:	69bb      	ldr	r3, [r7, #24]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d102      	bne.n	800e016 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800e010:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e014:	e04c      	b.n	800e0b0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800e016:	69bb      	ldr	r3, [r7, #24]
 800e018:	685b      	ldr	r3, [r3, #4]
 800e01a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800e01c:	7ffb      	ldrb	r3, [r7, #31]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d011      	beq.n	800e046 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800e022:	697b      	ldr	r3, [r7, #20]
 800e024:	899b      	ldrh	r3, [r3, #12]
 800e026:	b29b      	uxth	r3, r3
 800e028:	b21b      	sxth	r3, r3
 800e02a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e02e:	b21c      	sxth	r4, r3
 800e030:	2011      	movs	r0, #17
 800e032:	f7f9 f923 	bl	800727c <lwip_htons>
 800e036:	4603      	mov	r3, r0
 800e038:	b21b      	sxth	r3, r3
 800e03a:	4323      	orrs	r3, r4
 800e03c:	b21b      	sxth	r3, r3
 800e03e:	b29a      	uxth	r2, r3
 800e040:	697b      	ldr	r3, [r7, #20]
 800e042:	819a      	strh	r2, [r3, #12]
 800e044:	e010      	b.n	800e068 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800e046:	69bb      	ldr	r3, [r7, #24]
 800e048:	685b      	ldr	r3, [r3, #4]
 800e04a:	3314      	adds	r3, #20
 800e04c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800e04e:	6a3b      	ldr	r3, [r7, #32]
 800e050:	6858      	ldr	r0, [r3, #4]
 800e052:	6a3b      	ldr	r3, [r7, #32]
 800e054:	685b      	ldr	r3, [r3, #4]
 800e056:	891a      	ldrh	r2, [r3, #8]
 800e058:	6a3b      	ldr	r3, [r7, #32]
 800e05a:	891b      	ldrh	r3, [r3, #8]
 800e05c:	1ad3      	subs	r3, r2, r3
 800e05e:	b29b      	uxth	r3, r3
 800e060:	2201      	movs	r2, #1
 800e062:	6939      	ldr	r1, [r7, #16]
 800e064:	f7fa fe52 	bl	8008d0c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800e068:	6a3b      	ldr	r3, [r7, #32]
 800e06a:	68db      	ldr	r3, [r3, #12]
 800e06c:	685b      	ldr	r3, [r3, #4]
 800e06e:	4618      	mov	r0, r3
 800e070:	f7f9 f919 	bl	80072a6 <lwip_htonl>
 800e074:	4603      	mov	r3, r0
 800e076:	3301      	adds	r3, #1
 800e078:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	1ad3      	subs	r3, r2, r3
 800e082:	2b00      	cmp	r3, #0
 800e084:	da02      	bge.n	800e08c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	68fa      	ldr	r2, [r7, #12]
 800e08a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e08c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e090:	2200      	movs	r2, #0
 800e092:	69b9      	ldr	r1, [r7, #24]
 800e094:	6878      	ldr	r0, [r7, #4]
 800e096:	f7ff fdef 	bl	800dc78 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e09a:	687a      	ldr	r2, [r7, #4]
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	3304      	adds	r3, #4
 800e0a0:	69b9      	ldr	r1, [r7, #24]
 800e0a2:	6878      	ldr	r0, [r7, #4]
 800e0a4:	f7ff fe26 	bl	800dcf4 <tcp_output_control_segment>
 800e0a8:	4603      	mov	r3, r0
 800e0aa:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e0ac:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	372c      	adds	r7, #44	; 0x2c
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	bd90      	pop	{r4, r7, pc}
 800e0b8:	080153c8 	.word	0x080153c8
 800e0bc:	08015bc0 	.word	0x08015bc0
 800e0c0:	0801541c 	.word	0x0801541c

0800e0c4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b082      	sub	sp, #8
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800e0cc:	f7fa ff0c 	bl	8008ee8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800e0d0:	4b0a      	ldr	r3, [pc, #40]	; (800e0fc <tcpip_tcp_timer+0x38>)
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d103      	bne.n	800e0e0 <tcpip_tcp_timer+0x1c>
 800e0d8:	4b09      	ldr	r3, [pc, #36]	; (800e100 <tcpip_tcp_timer+0x3c>)
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d005      	beq.n	800e0ec <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	4908      	ldr	r1, [pc, #32]	; (800e104 <tcpip_tcp_timer+0x40>)
 800e0e4:	20fa      	movs	r0, #250	; 0xfa
 800e0e6:	f000 f8f3 	bl	800e2d0 <sys_timeout>
 800e0ea:	e003      	b.n	800e0f4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800e0ec:	4b06      	ldr	r3, [pc, #24]	; (800e108 <tcpip_tcp_timer+0x44>)
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	601a      	str	r2, [r3, #0]
  }
}
 800e0f2:	bf00      	nop
 800e0f4:	bf00      	nop
 800e0f6:	3708      	adds	r7, #8
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}
 800e0fc:	2000a7dc 	.word	0x2000a7dc
 800e100:	2000a7e0 	.word	0x2000a7e0
 800e104:	0800e0c5 	.word	0x0800e0c5
 800e108:	2000a828 	.word	0x2000a828

0800e10c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800e10c:	b580      	push	{r7, lr}
 800e10e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800e110:	4b0a      	ldr	r3, [pc, #40]	; (800e13c <tcp_timer_needed+0x30>)
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d10f      	bne.n	800e138 <tcp_timer_needed+0x2c>
 800e118:	4b09      	ldr	r3, [pc, #36]	; (800e140 <tcp_timer_needed+0x34>)
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d103      	bne.n	800e128 <tcp_timer_needed+0x1c>
 800e120:	4b08      	ldr	r3, [pc, #32]	; (800e144 <tcp_timer_needed+0x38>)
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d007      	beq.n	800e138 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800e128:	4b04      	ldr	r3, [pc, #16]	; (800e13c <tcp_timer_needed+0x30>)
 800e12a:	2201      	movs	r2, #1
 800e12c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e12e:	2200      	movs	r2, #0
 800e130:	4905      	ldr	r1, [pc, #20]	; (800e148 <tcp_timer_needed+0x3c>)
 800e132:	20fa      	movs	r0, #250	; 0xfa
 800e134:	f000 f8cc 	bl	800e2d0 <sys_timeout>
  }
}
 800e138:	bf00      	nop
 800e13a:	bd80      	pop	{r7, pc}
 800e13c:	2000a828 	.word	0x2000a828
 800e140:	2000a7dc 	.word	0x2000a7dc
 800e144:	2000a7e0 	.word	0x2000a7e0
 800e148:	0800e0c5 	.word	0x0800e0c5

0800e14c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b086      	sub	sp, #24
 800e150:	af00      	add	r7, sp, #0
 800e152:	60f8      	str	r0, [r7, #12]
 800e154:	60b9      	str	r1, [r7, #8]
 800e156:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800e158:	2006      	movs	r0, #6
 800e15a:	f7f9 fd07 	bl	8007b6c <memp_malloc>
 800e15e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800e160:	693b      	ldr	r3, [r7, #16]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d109      	bne.n	800e17a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800e166:	693b      	ldr	r3, [r7, #16]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d151      	bne.n	800e210 <sys_timeout_abs+0xc4>
 800e16c:	4b2a      	ldr	r3, [pc, #168]	; (800e218 <sys_timeout_abs+0xcc>)
 800e16e:	22be      	movs	r2, #190	; 0xbe
 800e170:	492a      	ldr	r1, [pc, #168]	; (800e21c <sys_timeout_abs+0xd0>)
 800e172:	482b      	ldr	r0, [pc, #172]	; (800e220 <sys_timeout_abs+0xd4>)
 800e174:	f003 fdd8 	bl	8011d28 <iprintf>
    return;
 800e178:	e04a      	b.n	800e210 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800e17a:	693b      	ldr	r3, [r7, #16]
 800e17c:	2200      	movs	r2, #0
 800e17e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800e180:	693b      	ldr	r3, [r7, #16]
 800e182:	68ba      	ldr	r2, [r7, #8]
 800e184:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800e186:	693b      	ldr	r3, [r7, #16]
 800e188:	687a      	ldr	r2, [r7, #4]
 800e18a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800e18c:	693b      	ldr	r3, [r7, #16]
 800e18e:	68fa      	ldr	r2, [r7, #12]
 800e190:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800e192:	4b24      	ldr	r3, [pc, #144]	; (800e224 <sys_timeout_abs+0xd8>)
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d103      	bne.n	800e1a2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800e19a:	4a22      	ldr	r2, [pc, #136]	; (800e224 <sys_timeout_abs+0xd8>)
 800e19c:	693b      	ldr	r3, [r7, #16]
 800e19e:	6013      	str	r3, [r2, #0]
    return;
 800e1a0:	e037      	b.n	800e212 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800e1a2:	693b      	ldr	r3, [r7, #16]
 800e1a4:	685a      	ldr	r2, [r3, #4]
 800e1a6:	4b1f      	ldr	r3, [pc, #124]	; (800e224 <sys_timeout_abs+0xd8>)
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	685b      	ldr	r3, [r3, #4]
 800e1ac:	1ad3      	subs	r3, r2, r3
 800e1ae:	0fdb      	lsrs	r3, r3, #31
 800e1b0:	f003 0301 	and.w	r3, r3, #1
 800e1b4:	b2db      	uxtb	r3, r3
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d007      	beq.n	800e1ca <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800e1ba:	4b1a      	ldr	r3, [pc, #104]	; (800e224 <sys_timeout_abs+0xd8>)
 800e1bc:	681a      	ldr	r2, [r3, #0]
 800e1be:	693b      	ldr	r3, [r7, #16]
 800e1c0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800e1c2:	4a18      	ldr	r2, [pc, #96]	; (800e224 <sys_timeout_abs+0xd8>)
 800e1c4:	693b      	ldr	r3, [r7, #16]
 800e1c6:	6013      	str	r3, [r2, #0]
 800e1c8:	e023      	b.n	800e212 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800e1ca:	4b16      	ldr	r3, [pc, #88]	; (800e224 <sys_timeout_abs+0xd8>)
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	617b      	str	r3, [r7, #20]
 800e1d0:	e01a      	b.n	800e208 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800e1d2:	697b      	ldr	r3, [r7, #20]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d00b      	beq.n	800e1f2 <sys_timeout_abs+0xa6>
 800e1da:	693b      	ldr	r3, [r7, #16]
 800e1dc:	685a      	ldr	r2, [r3, #4]
 800e1de:	697b      	ldr	r3, [r7, #20]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	685b      	ldr	r3, [r3, #4]
 800e1e4:	1ad3      	subs	r3, r2, r3
 800e1e6:	0fdb      	lsrs	r3, r3, #31
 800e1e8:	f003 0301 	and.w	r3, r3, #1
 800e1ec:	b2db      	uxtb	r3, r3
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d007      	beq.n	800e202 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800e1f2:	697b      	ldr	r3, [r7, #20]
 800e1f4:	681a      	ldr	r2, [r3, #0]
 800e1f6:	693b      	ldr	r3, [r7, #16]
 800e1f8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800e1fa:	697b      	ldr	r3, [r7, #20]
 800e1fc:	693a      	ldr	r2, [r7, #16]
 800e1fe:	601a      	str	r2, [r3, #0]
        break;
 800e200:	e007      	b.n	800e212 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800e202:	697b      	ldr	r3, [r7, #20]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	617b      	str	r3, [r7, #20]
 800e208:	697b      	ldr	r3, [r7, #20]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d1e1      	bne.n	800e1d2 <sys_timeout_abs+0x86>
 800e20e:	e000      	b.n	800e212 <sys_timeout_abs+0xc6>
    return;
 800e210:	bf00      	nop
      }
    }
  }
}
 800e212:	3718      	adds	r7, #24
 800e214:	46bd      	mov	sp, r7
 800e216:	bd80      	pop	{r7, pc}
 800e218:	08015be4 	.word	0x08015be4
 800e21c:	08015c18 	.word	0x08015c18
 800e220:	08015c58 	.word	0x08015c58
 800e224:	2000a820 	.word	0x2000a820

0800e228 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b086      	sub	sp, #24
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800e234:	697b      	ldr	r3, [r7, #20]
 800e236:	685b      	ldr	r3, [r3, #4]
 800e238:	4798      	blx	r3

  now = sys_now();
 800e23a:	f7f8 fe0b 	bl	8006e54 <sys_now>
 800e23e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800e240:	697b      	ldr	r3, [r7, #20]
 800e242:	681a      	ldr	r2, [r3, #0]
 800e244:	4b0f      	ldr	r3, [pc, #60]	; (800e284 <lwip_cyclic_timer+0x5c>)
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	4413      	add	r3, r2
 800e24a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800e24c:	68fa      	ldr	r2, [r7, #12]
 800e24e:	693b      	ldr	r3, [r7, #16]
 800e250:	1ad3      	subs	r3, r2, r3
 800e252:	0fdb      	lsrs	r3, r3, #31
 800e254:	f003 0301 	and.w	r3, r3, #1
 800e258:	b2db      	uxtb	r3, r3
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d009      	beq.n	800e272 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800e25e:	697b      	ldr	r3, [r7, #20]
 800e260:	681a      	ldr	r2, [r3, #0]
 800e262:	693b      	ldr	r3, [r7, #16]
 800e264:	4413      	add	r3, r2
 800e266:	687a      	ldr	r2, [r7, #4]
 800e268:	4907      	ldr	r1, [pc, #28]	; (800e288 <lwip_cyclic_timer+0x60>)
 800e26a:	4618      	mov	r0, r3
 800e26c:	f7ff ff6e 	bl	800e14c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800e270:	e004      	b.n	800e27c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800e272:	687a      	ldr	r2, [r7, #4]
 800e274:	4904      	ldr	r1, [pc, #16]	; (800e288 <lwip_cyclic_timer+0x60>)
 800e276:	68f8      	ldr	r0, [r7, #12]
 800e278:	f7ff ff68 	bl	800e14c <sys_timeout_abs>
}
 800e27c:	bf00      	nop
 800e27e:	3718      	adds	r7, #24
 800e280:	46bd      	mov	sp, r7
 800e282:	bd80      	pop	{r7, pc}
 800e284:	2000a824 	.word	0x2000a824
 800e288:	0800e229 	.word	0x0800e229

0800e28c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b082      	sub	sp, #8
 800e290:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e292:	2301      	movs	r3, #1
 800e294:	607b      	str	r3, [r7, #4]
 800e296:	e00e      	b.n	800e2b6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800e298:	4a0b      	ldr	r2, [pc, #44]	; (800e2c8 <sys_timeouts_init+0x3c>)
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	00db      	lsls	r3, r3, #3
 800e2a4:	4a08      	ldr	r2, [pc, #32]	; (800e2c8 <sys_timeouts_init+0x3c>)
 800e2a6:	4413      	add	r3, r2
 800e2a8:	461a      	mov	r2, r3
 800e2aa:	4908      	ldr	r1, [pc, #32]	; (800e2cc <sys_timeouts_init+0x40>)
 800e2ac:	f000 f810 	bl	800e2d0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	3301      	adds	r3, #1
 800e2b4:	607b      	str	r3, [r7, #4]
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	2b02      	cmp	r3, #2
 800e2ba:	d9ed      	bls.n	800e298 <sys_timeouts_init+0xc>
  }
}
 800e2bc:	bf00      	nop
 800e2be:	bf00      	nop
 800e2c0:	3708      	adds	r7, #8
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	bd80      	pop	{r7, pc}
 800e2c6:	bf00      	nop
 800e2c8:	080167d4 	.word	0x080167d4
 800e2cc:	0800e229 	.word	0x0800e229

0800e2d0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b086      	sub	sp, #24
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	60f8      	str	r0, [r7, #12]
 800e2d8:	60b9      	str	r1, [r7, #8]
 800e2da:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e2e2:	d306      	bcc.n	800e2f2 <sys_timeout+0x22>
 800e2e4:	4b0a      	ldr	r3, [pc, #40]	; (800e310 <sys_timeout+0x40>)
 800e2e6:	f240 1229 	movw	r2, #297	; 0x129
 800e2ea:	490a      	ldr	r1, [pc, #40]	; (800e314 <sys_timeout+0x44>)
 800e2ec:	480a      	ldr	r0, [pc, #40]	; (800e318 <sys_timeout+0x48>)
 800e2ee:	f003 fd1b 	bl	8011d28 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800e2f2:	f7f8 fdaf 	bl	8006e54 <sys_now>
 800e2f6:	4602      	mov	r2, r0
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	4413      	add	r3, r2
 800e2fc:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800e2fe:	687a      	ldr	r2, [r7, #4]
 800e300:	68b9      	ldr	r1, [r7, #8]
 800e302:	6978      	ldr	r0, [r7, #20]
 800e304:	f7ff ff22 	bl	800e14c <sys_timeout_abs>
#endif
}
 800e308:	bf00      	nop
 800e30a:	3718      	adds	r7, #24
 800e30c:	46bd      	mov	sp, r7
 800e30e:	bd80      	pop	{r7, pc}
 800e310:	08015be4 	.word	0x08015be4
 800e314:	08015c80 	.word	0x08015c80
 800e318:	08015c58 	.word	0x08015c58

0800e31c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b084      	sub	sp, #16
 800e320:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800e322:	f7f8 fd97 	bl	8006e54 <sys_now>
 800e326:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800e328:	4b1a      	ldr	r3, [pc, #104]	; (800e394 <sys_check_timeouts+0x78>)
 800e32a:	781b      	ldrb	r3, [r3, #0]
 800e32c:	b2db      	uxtb	r3, r3
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d001      	beq.n	800e336 <sys_check_timeouts+0x1a>
 800e332:	f7f9 ffc7 	bl	80082c4 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800e336:	4b18      	ldr	r3, [pc, #96]	; (800e398 <sys_check_timeouts+0x7c>)
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800e33c:	68bb      	ldr	r3, [r7, #8]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d022      	beq.n	800e388 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800e342:	68bb      	ldr	r3, [r7, #8]
 800e344:	685b      	ldr	r3, [r3, #4]
 800e346:	68fa      	ldr	r2, [r7, #12]
 800e348:	1ad3      	subs	r3, r2, r3
 800e34a:	0fdb      	lsrs	r3, r3, #31
 800e34c:	f003 0301 	and.w	r3, r3, #1
 800e350:	b2db      	uxtb	r3, r3
 800e352:	2b00      	cmp	r3, #0
 800e354:	d11a      	bne.n	800e38c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800e356:	68bb      	ldr	r3, [r7, #8]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	4a0f      	ldr	r2, [pc, #60]	; (800e398 <sys_check_timeouts+0x7c>)
 800e35c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800e35e:	68bb      	ldr	r3, [r7, #8]
 800e360:	689b      	ldr	r3, [r3, #8]
 800e362:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800e364:	68bb      	ldr	r3, [r7, #8]
 800e366:	68db      	ldr	r3, [r3, #12]
 800e368:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800e36a:	68bb      	ldr	r3, [r7, #8]
 800e36c:	685b      	ldr	r3, [r3, #4]
 800e36e:	4a0b      	ldr	r2, [pc, #44]	; (800e39c <sys_check_timeouts+0x80>)
 800e370:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800e372:	68b9      	ldr	r1, [r7, #8]
 800e374:	2006      	movs	r0, #6
 800e376:	f7f9 fc69 	bl	8007c4c <memp_free>
    if (handler != NULL) {
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d0d3      	beq.n	800e328 <sys_check_timeouts+0xc>
      handler(arg);
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	6838      	ldr	r0, [r7, #0]
 800e384:	4798      	blx	r3
  do {
 800e386:	e7cf      	b.n	800e328 <sys_check_timeouts+0xc>
      return;
 800e388:	bf00      	nop
 800e38a:	e000      	b.n	800e38e <sys_check_timeouts+0x72>
      return;
 800e38c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800e38e:	3710      	adds	r7, #16
 800e390:	46bd      	mov	sp, r7
 800e392:	bd80      	pop	{r7, pc}
 800e394:	2000a7cd 	.word	0x2000a7cd
 800e398:	2000a820 	.word	0x2000a820
 800e39c:	2000a824 	.word	0x2000a824

0800e3a0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e3a4:	f002 fde6 	bl	8010f74 <rand>
 800e3a8:	4603      	mov	r3, r0
 800e3aa:	b29b      	uxth	r3, r3
 800e3ac:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e3b0:	b29b      	uxth	r3, r3
 800e3b2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e3b6:	b29a      	uxth	r2, r3
 800e3b8:	4b01      	ldr	r3, [pc, #4]	; (800e3c0 <udp_init+0x20>)
 800e3ba:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e3bc:	bf00      	nop
 800e3be:	bd80      	pop	{r7, pc}
 800e3c0:	20000028 	.word	0x20000028

0800e3c4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800e3c4:	b480      	push	{r7}
 800e3c6:	b083      	sub	sp, #12
 800e3c8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800e3ce:	4b17      	ldr	r3, [pc, #92]	; (800e42c <udp_new_port+0x68>)
 800e3d0:	881b      	ldrh	r3, [r3, #0]
 800e3d2:	1c5a      	adds	r2, r3, #1
 800e3d4:	b291      	uxth	r1, r2
 800e3d6:	4a15      	ldr	r2, [pc, #84]	; (800e42c <udp_new_port+0x68>)
 800e3d8:	8011      	strh	r1, [r2, #0]
 800e3da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e3de:	4293      	cmp	r3, r2
 800e3e0:	d103      	bne.n	800e3ea <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800e3e2:	4b12      	ldr	r3, [pc, #72]	; (800e42c <udp_new_port+0x68>)
 800e3e4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800e3e8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e3ea:	4b11      	ldr	r3, [pc, #68]	; (800e430 <udp_new_port+0x6c>)
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	603b      	str	r3, [r7, #0]
 800e3f0:	e011      	b.n	800e416 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800e3f2:	683b      	ldr	r3, [r7, #0]
 800e3f4:	8a5a      	ldrh	r2, [r3, #18]
 800e3f6:	4b0d      	ldr	r3, [pc, #52]	; (800e42c <udp_new_port+0x68>)
 800e3f8:	881b      	ldrh	r3, [r3, #0]
 800e3fa:	429a      	cmp	r2, r3
 800e3fc:	d108      	bne.n	800e410 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800e3fe:	88fb      	ldrh	r3, [r7, #6]
 800e400:	3301      	adds	r3, #1
 800e402:	80fb      	strh	r3, [r7, #6]
 800e404:	88fb      	ldrh	r3, [r7, #6]
 800e406:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e40a:	d3e0      	bcc.n	800e3ce <udp_new_port+0xa>
        return 0;
 800e40c:	2300      	movs	r3, #0
 800e40e:	e007      	b.n	800e420 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e410:	683b      	ldr	r3, [r7, #0]
 800e412:	68db      	ldr	r3, [r3, #12]
 800e414:	603b      	str	r3, [r7, #0]
 800e416:	683b      	ldr	r3, [r7, #0]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d1ea      	bne.n	800e3f2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800e41c:	4b03      	ldr	r3, [pc, #12]	; (800e42c <udp_new_port+0x68>)
 800e41e:	881b      	ldrh	r3, [r3, #0]
}
 800e420:	4618      	mov	r0, r3
 800e422:	370c      	adds	r7, #12
 800e424:	46bd      	mov	sp, r7
 800e426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42a:	4770      	bx	lr
 800e42c:	20000028 	.word	0x20000028
 800e430:	2000a82c 	.word	0x2000a82c

0800e434 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b084      	sub	sp, #16
 800e438:	af00      	add	r7, sp, #0
 800e43a:	60f8      	str	r0, [r7, #12]
 800e43c:	60b9      	str	r1, [r7, #8]
 800e43e:	4613      	mov	r3, r2
 800e440:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d105      	bne.n	800e454 <udp_input_local_match+0x20>
 800e448:	4b27      	ldr	r3, [pc, #156]	; (800e4e8 <udp_input_local_match+0xb4>)
 800e44a:	2287      	movs	r2, #135	; 0x87
 800e44c:	4927      	ldr	r1, [pc, #156]	; (800e4ec <udp_input_local_match+0xb8>)
 800e44e:	4828      	ldr	r0, [pc, #160]	; (800e4f0 <udp_input_local_match+0xbc>)
 800e450:	f003 fc6a 	bl	8011d28 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800e454:	68bb      	ldr	r3, [r7, #8]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d105      	bne.n	800e466 <udp_input_local_match+0x32>
 800e45a:	4b23      	ldr	r3, [pc, #140]	; (800e4e8 <udp_input_local_match+0xb4>)
 800e45c:	2288      	movs	r2, #136	; 0x88
 800e45e:	4925      	ldr	r1, [pc, #148]	; (800e4f4 <udp_input_local_match+0xc0>)
 800e460:	4823      	ldr	r0, [pc, #140]	; (800e4f0 <udp_input_local_match+0xbc>)
 800e462:	f003 fc61 	bl	8011d28 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	7a1b      	ldrb	r3, [r3, #8]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d00b      	beq.n	800e486 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	7a1a      	ldrb	r2, [r3, #8]
 800e472:	4b21      	ldr	r3, [pc, #132]	; (800e4f8 <udp_input_local_match+0xc4>)
 800e474:	685b      	ldr	r3, [r3, #4]
 800e476:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e47a:	3301      	adds	r3, #1
 800e47c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e47e:	429a      	cmp	r2, r3
 800e480:	d001      	beq.n	800e486 <udp_input_local_match+0x52>
    return 0;
 800e482:	2300      	movs	r3, #0
 800e484:	e02b      	b.n	800e4de <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800e486:	79fb      	ldrb	r3, [r7, #7]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d018      	beq.n	800e4be <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d013      	beq.n	800e4ba <udp_input_local_match+0x86>
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d00f      	beq.n	800e4ba <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e49a:	4b17      	ldr	r3, [pc, #92]	; (800e4f8 <udp_input_local_match+0xc4>)
 800e49c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e49e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e4a2:	d00a      	beq.n	800e4ba <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	681a      	ldr	r2, [r3, #0]
 800e4a8:	4b13      	ldr	r3, [pc, #76]	; (800e4f8 <udp_input_local_match+0xc4>)
 800e4aa:	695b      	ldr	r3, [r3, #20]
 800e4ac:	405a      	eors	r2, r3
 800e4ae:	68bb      	ldr	r3, [r7, #8]
 800e4b0:	3308      	adds	r3, #8
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d110      	bne.n	800e4dc <udp_input_local_match+0xa8>
          return 1;
 800e4ba:	2301      	movs	r3, #1
 800e4bc:	e00f      	b.n	800e4de <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d009      	beq.n	800e4d8 <udp_input_local_match+0xa4>
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d005      	beq.n	800e4d8 <udp_input_local_match+0xa4>
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	681a      	ldr	r2, [r3, #0]
 800e4d0:	4b09      	ldr	r3, [pc, #36]	; (800e4f8 <udp_input_local_match+0xc4>)
 800e4d2:	695b      	ldr	r3, [r3, #20]
 800e4d4:	429a      	cmp	r2, r3
 800e4d6:	d101      	bne.n	800e4dc <udp_input_local_match+0xa8>
        return 1;
 800e4d8:	2301      	movs	r3, #1
 800e4da:	e000      	b.n	800e4de <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800e4dc:	2300      	movs	r3, #0
}
 800e4de:	4618      	mov	r0, r3
 800e4e0:	3710      	adds	r7, #16
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	bd80      	pop	{r7, pc}
 800e4e6:	bf00      	nop
 800e4e8:	08015ccc 	.word	0x08015ccc
 800e4ec:	08015cfc 	.word	0x08015cfc
 800e4f0:	08015d20 	.word	0x08015d20
 800e4f4:	08015d48 	.word	0x08015d48
 800e4f8:	200050a0 	.word	0x200050a0

0800e4fc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800e4fc:	b590      	push	{r4, r7, lr}
 800e4fe:	b08d      	sub	sp, #52	; 0x34
 800e500:	af02      	add	r7, sp, #8
 800e502:	6078      	str	r0, [r7, #4]
 800e504:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800e506:	2300      	movs	r3, #0
 800e508:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d105      	bne.n	800e51c <udp_input+0x20>
 800e510:	4b7c      	ldr	r3, [pc, #496]	; (800e704 <udp_input+0x208>)
 800e512:	22cf      	movs	r2, #207	; 0xcf
 800e514:	497c      	ldr	r1, [pc, #496]	; (800e708 <udp_input+0x20c>)
 800e516:	487d      	ldr	r0, [pc, #500]	; (800e70c <udp_input+0x210>)
 800e518:	f003 fc06 	bl	8011d28 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800e51c:	683b      	ldr	r3, [r7, #0]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d105      	bne.n	800e52e <udp_input+0x32>
 800e522:	4b78      	ldr	r3, [pc, #480]	; (800e704 <udp_input+0x208>)
 800e524:	22d0      	movs	r2, #208	; 0xd0
 800e526:	497a      	ldr	r1, [pc, #488]	; (800e710 <udp_input+0x214>)
 800e528:	4878      	ldr	r0, [pc, #480]	; (800e70c <udp_input+0x210>)
 800e52a:	f003 fbfd 	bl	8011d28 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	895b      	ldrh	r3, [r3, #10]
 800e532:	2b07      	cmp	r3, #7
 800e534:	d803      	bhi.n	800e53e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800e536:	6878      	ldr	r0, [r7, #4]
 800e538:	f7fa f9fe 	bl	8008938 <pbuf_free>
    goto end;
 800e53c:	e0de      	b.n	800e6fc <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	685b      	ldr	r3, [r3, #4]
 800e542:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800e544:	4b73      	ldr	r3, [pc, #460]	; (800e714 <udp_input+0x218>)
 800e546:	695b      	ldr	r3, [r3, #20]
 800e548:	4a72      	ldr	r2, [pc, #456]	; (800e714 <udp_input+0x218>)
 800e54a:	6812      	ldr	r2, [r2, #0]
 800e54c:	4611      	mov	r1, r2
 800e54e:	4618      	mov	r0, r3
 800e550:	f001 fdb6 	bl	80100c0 <ip4_addr_isbroadcast_u32>
 800e554:	4603      	mov	r3, r0
 800e556:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800e558:	697b      	ldr	r3, [r7, #20]
 800e55a:	881b      	ldrh	r3, [r3, #0]
 800e55c:	b29b      	uxth	r3, r3
 800e55e:	4618      	mov	r0, r3
 800e560:	f7f8 fe8c 	bl	800727c <lwip_htons>
 800e564:	4603      	mov	r3, r0
 800e566:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800e568:	697b      	ldr	r3, [r7, #20]
 800e56a:	885b      	ldrh	r3, [r3, #2]
 800e56c:	b29b      	uxth	r3, r3
 800e56e:	4618      	mov	r0, r3
 800e570:	f7f8 fe84 	bl	800727c <lwip_htons>
 800e574:	4603      	mov	r3, r0
 800e576:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800e578:	2300      	movs	r3, #0
 800e57a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800e57c:	2300      	movs	r3, #0
 800e57e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800e580:	2300      	movs	r3, #0
 800e582:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e584:	4b64      	ldr	r3, [pc, #400]	; (800e718 <udp_input+0x21c>)
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	627b      	str	r3, [r7, #36]	; 0x24
 800e58a:	e054      	b.n	800e636 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800e58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e58e:	8a5b      	ldrh	r3, [r3, #18]
 800e590:	89fa      	ldrh	r2, [r7, #14]
 800e592:	429a      	cmp	r2, r3
 800e594:	d14a      	bne.n	800e62c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800e596:	7cfb      	ldrb	r3, [r7, #19]
 800e598:	461a      	mov	r2, r3
 800e59a:	6839      	ldr	r1, [r7, #0]
 800e59c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e59e:	f7ff ff49 	bl	800e434 <udp_input_local_match>
 800e5a2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d041      	beq.n	800e62c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800e5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5aa:	7c1b      	ldrb	r3, [r3, #16]
 800e5ac:	f003 0304 	and.w	r3, r3, #4
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d11d      	bne.n	800e5f0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800e5b4:	69fb      	ldr	r3, [r7, #28]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d102      	bne.n	800e5c0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800e5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5bc:	61fb      	str	r3, [r7, #28]
 800e5be:	e017      	b.n	800e5f0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800e5c0:	7cfb      	ldrb	r3, [r7, #19]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d014      	beq.n	800e5f0 <udp_input+0xf4>
 800e5c6:	4b53      	ldr	r3, [pc, #332]	; (800e714 <udp_input+0x218>)
 800e5c8:	695b      	ldr	r3, [r3, #20]
 800e5ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e5ce:	d10f      	bne.n	800e5f0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800e5d0:	69fb      	ldr	r3, [r7, #28]
 800e5d2:	681a      	ldr	r2, [r3, #0]
 800e5d4:	683b      	ldr	r3, [r7, #0]
 800e5d6:	3304      	adds	r3, #4
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	429a      	cmp	r2, r3
 800e5dc:	d008      	beq.n	800e5f0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800e5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5e0:	681a      	ldr	r2, [r3, #0]
 800e5e2:	683b      	ldr	r3, [r7, #0]
 800e5e4:	3304      	adds	r3, #4
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	429a      	cmp	r2, r3
 800e5ea:	d101      	bne.n	800e5f0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800e5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ee:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800e5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5f2:	8a9b      	ldrh	r3, [r3, #20]
 800e5f4:	8a3a      	ldrh	r2, [r7, #16]
 800e5f6:	429a      	cmp	r2, r3
 800e5f8:	d118      	bne.n	800e62c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5fc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d005      	beq.n	800e60e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800e602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e604:	685a      	ldr	r2, [r3, #4]
 800e606:	4b43      	ldr	r3, [pc, #268]	; (800e714 <udp_input+0x218>)
 800e608:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e60a:	429a      	cmp	r2, r3
 800e60c:	d10e      	bne.n	800e62c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800e60e:	6a3b      	ldr	r3, [r7, #32]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d014      	beq.n	800e63e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800e614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e616:	68da      	ldr	r2, [r3, #12]
 800e618:	6a3b      	ldr	r3, [r7, #32]
 800e61a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800e61c:	4b3e      	ldr	r3, [pc, #248]	; (800e718 <udp_input+0x21c>)
 800e61e:	681a      	ldr	r2, [r3, #0]
 800e620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e622:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800e624:	4a3c      	ldr	r2, [pc, #240]	; (800e718 <udp_input+0x21c>)
 800e626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e628:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800e62a:	e008      	b.n	800e63e <udp_input+0x142>
      }
    }

    prev = pcb;
 800e62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e62e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e632:	68db      	ldr	r3, [r3, #12]
 800e634:	627b      	str	r3, [r7, #36]	; 0x24
 800e636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d1a7      	bne.n	800e58c <udp_input+0x90>
 800e63c:	e000      	b.n	800e640 <udp_input+0x144>
        break;
 800e63e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800e640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e642:	2b00      	cmp	r3, #0
 800e644:	d101      	bne.n	800e64a <udp_input+0x14e>
    pcb = uncon_pcb;
 800e646:	69fb      	ldr	r3, [r7, #28]
 800e648:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800e64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d002      	beq.n	800e656 <udp_input+0x15a>
    for_us = 1;
 800e650:	2301      	movs	r3, #1
 800e652:	76fb      	strb	r3, [r7, #27]
 800e654:	e00a      	b.n	800e66c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800e656:	683b      	ldr	r3, [r7, #0]
 800e658:	3304      	adds	r3, #4
 800e65a:	681a      	ldr	r2, [r3, #0]
 800e65c:	4b2d      	ldr	r3, [pc, #180]	; (800e714 <udp_input+0x218>)
 800e65e:	695b      	ldr	r3, [r3, #20]
 800e660:	429a      	cmp	r2, r3
 800e662:	bf0c      	ite	eq
 800e664:	2301      	moveq	r3, #1
 800e666:	2300      	movne	r3, #0
 800e668:	b2db      	uxtb	r3, r3
 800e66a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800e66c:	7efb      	ldrb	r3, [r7, #27]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d041      	beq.n	800e6f6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800e672:	2108      	movs	r1, #8
 800e674:	6878      	ldr	r0, [r7, #4]
 800e676:	f7fa f8d9 	bl	800882c <pbuf_remove_header>
 800e67a:	4603      	mov	r3, r0
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d00a      	beq.n	800e696 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800e680:	4b20      	ldr	r3, [pc, #128]	; (800e704 <udp_input+0x208>)
 800e682:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800e686:	4925      	ldr	r1, [pc, #148]	; (800e71c <udp_input+0x220>)
 800e688:	4820      	ldr	r0, [pc, #128]	; (800e70c <udp_input+0x210>)
 800e68a:	f003 fb4d 	bl	8011d28 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800e68e:	6878      	ldr	r0, [r7, #4]
 800e690:	f7fa f952 	bl	8008938 <pbuf_free>
      goto end;
 800e694:	e032      	b.n	800e6fc <udp_input+0x200>
    }

    if (pcb != NULL) {
 800e696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d012      	beq.n	800e6c2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800e69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e69e:	699b      	ldr	r3, [r3, #24]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d00a      	beq.n	800e6ba <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800e6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6a6:	699c      	ldr	r4, [r3, #24]
 800e6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6aa:	69d8      	ldr	r0, [r3, #28]
 800e6ac:	8a3b      	ldrh	r3, [r7, #16]
 800e6ae:	9300      	str	r3, [sp, #0]
 800e6b0:	4b1b      	ldr	r3, [pc, #108]	; (800e720 <udp_input+0x224>)
 800e6b2:	687a      	ldr	r2, [r7, #4]
 800e6b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e6b6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800e6b8:	e021      	b.n	800e6fe <udp_input+0x202>
        pbuf_free(p);
 800e6ba:	6878      	ldr	r0, [r7, #4]
 800e6bc:	f7fa f93c 	bl	8008938 <pbuf_free>
        goto end;
 800e6c0:	e01c      	b.n	800e6fc <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800e6c2:	7cfb      	ldrb	r3, [r7, #19]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d112      	bne.n	800e6ee <udp_input+0x1f2>
 800e6c8:	4b12      	ldr	r3, [pc, #72]	; (800e714 <udp_input+0x218>)
 800e6ca:	695b      	ldr	r3, [r3, #20]
 800e6cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e6d0:	2be0      	cmp	r3, #224	; 0xe0
 800e6d2:	d00c      	beq.n	800e6ee <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800e6d4:	4b0f      	ldr	r3, [pc, #60]	; (800e714 <udp_input+0x218>)
 800e6d6:	899b      	ldrh	r3, [r3, #12]
 800e6d8:	3308      	adds	r3, #8
 800e6da:	b29b      	uxth	r3, r3
 800e6dc:	b21b      	sxth	r3, r3
 800e6de:	4619      	mov	r1, r3
 800e6e0:	6878      	ldr	r0, [r7, #4]
 800e6e2:	f7fa f916 	bl	8008912 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800e6e6:	2103      	movs	r1, #3
 800e6e8:	6878      	ldr	r0, [r7, #4]
 800e6ea:	f001 f9c9 	bl	800fa80 <icmp_dest_unreach>
      pbuf_free(p);
 800e6ee:	6878      	ldr	r0, [r7, #4]
 800e6f0:	f7fa f922 	bl	8008938 <pbuf_free>
  return;
 800e6f4:	e003      	b.n	800e6fe <udp_input+0x202>
    pbuf_free(p);
 800e6f6:	6878      	ldr	r0, [r7, #4]
 800e6f8:	f7fa f91e 	bl	8008938 <pbuf_free>
  return;
 800e6fc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800e6fe:	372c      	adds	r7, #44	; 0x2c
 800e700:	46bd      	mov	sp, r7
 800e702:	bd90      	pop	{r4, r7, pc}
 800e704:	08015ccc 	.word	0x08015ccc
 800e708:	08015d70 	.word	0x08015d70
 800e70c:	08015d20 	.word	0x08015d20
 800e710:	08015d88 	.word	0x08015d88
 800e714:	200050a0 	.word	0x200050a0
 800e718:	2000a82c 	.word	0x2000a82c
 800e71c:	08015da4 	.word	0x08015da4
 800e720:	200050b0 	.word	0x200050b0

0800e724 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e724:	b580      	push	{r7, lr}
 800e726:	b086      	sub	sp, #24
 800e728:	af00      	add	r7, sp, #0
 800e72a:	60f8      	str	r0, [r7, #12]
 800e72c:	60b9      	str	r1, [r7, #8]
 800e72e:	4613      	mov	r3, r2
 800e730:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e732:	68bb      	ldr	r3, [r7, #8]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d101      	bne.n	800e73c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800e738:	4b39      	ldr	r3, [pc, #228]	; (800e820 <udp_bind+0xfc>)
 800e73a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d109      	bne.n	800e756 <udp_bind+0x32>
 800e742:	4b38      	ldr	r3, [pc, #224]	; (800e824 <udp_bind+0x100>)
 800e744:	f240 32b7 	movw	r2, #951	; 0x3b7
 800e748:	4937      	ldr	r1, [pc, #220]	; (800e828 <udp_bind+0x104>)
 800e74a:	4838      	ldr	r0, [pc, #224]	; (800e82c <udp_bind+0x108>)
 800e74c:	f003 faec 	bl	8011d28 <iprintf>
 800e750:	f06f 030f 	mvn.w	r3, #15
 800e754:	e060      	b.n	800e818 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800e756:	2300      	movs	r3, #0
 800e758:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e75a:	4b35      	ldr	r3, [pc, #212]	; (800e830 <udp_bind+0x10c>)
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	617b      	str	r3, [r7, #20]
 800e760:	e009      	b.n	800e776 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800e762:	68fa      	ldr	r2, [r7, #12]
 800e764:	697b      	ldr	r3, [r7, #20]
 800e766:	429a      	cmp	r2, r3
 800e768:	d102      	bne.n	800e770 <udp_bind+0x4c>
      rebind = 1;
 800e76a:	2301      	movs	r3, #1
 800e76c:	74fb      	strb	r3, [r7, #19]
      break;
 800e76e:	e005      	b.n	800e77c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e770:	697b      	ldr	r3, [r7, #20]
 800e772:	68db      	ldr	r3, [r3, #12]
 800e774:	617b      	str	r3, [r7, #20]
 800e776:	697b      	ldr	r3, [r7, #20]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d1f2      	bne.n	800e762 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800e77c:	88fb      	ldrh	r3, [r7, #6]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d109      	bne.n	800e796 <udp_bind+0x72>
    port = udp_new_port();
 800e782:	f7ff fe1f 	bl	800e3c4 <udp_new_port>
 800e786:	4603      	mov	r3, r0
 800e788:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800e78a:	88fb      	ldrh	r3, [r7, #6]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d12c      	bne.n	800e7ea <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800e790:	f06f 0307 	mvn.w	r3, #7
 800e794:	e040      	b.n	800e818 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e796:	4b26      	ldr	r3, [pc, #152]	; (800e830 <udp_bind+0x10c>)
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	617b      	str	r3, [r7, #20]
 800e79c:	e022      	b.n	800e7e4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800e79e:	68fa      	ldr	r2, [r7, #12]
 800e7a0:	697b      	ldr	r3, [r7, #20]
 800e7a2:	429a      	cmp	r2, r3
 800e7a4:	d01b      	beq.n	800e7de <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800e7a6:	697b      	ldr	r3, [r7, #20]
 800e7a8:	8a5b      	ldrh	r3, [r3, #18]
 800e7aa:	88fa      	ldrh	r2, [r7, #6]
 800e7ac:	429a      	cmp	r2, r3
 800e7ae:	d116      	bne.n	800e7de <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800e7b0:	697b      	ldr	r3, [r7, #20]
 800e7b2:	681a      	ldr	r2, [r3, #0]
 800e7b4:	68bb      	ldr	r3, [r7, #8]
 800e7b6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800e7b8:	429a      	cmp	r2, r3
 800e7ba:	d00d      	beq.n	800e7d8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800e7bc:	68bb      	ldr	r3, [r7, #8]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d00a      	beq.n	800e7d8 <udp_bind+0xb4>
 800e7c2:	68bb      	ldr	r3, [r7, #8]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d006      	beq.n	800e7d8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800e7ca:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d003      	beq.n	800e7d8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800e7d0:	697b      	ldr	r3, [r7, #20]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d102      	bne.n	800e7de <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800e7d8:	f06f 0307 	mvn.w	r3, #7
 800e7dc:	e01c      	b.n	800e818 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e7de:	697b      	ldr	r3, [r7, #20]
 800e7e0:	68db      	ldr	r3, [r3, #12]
 800e7e2:	617b      	str	r3, [r7, #20]
 800e7e4:	697b      	ldr	r3, [r7, #20]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d1d9      	bne.n	800e79e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800e7ea:	68bb      	ldr	r3, [r7, #8]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d002      	beq.n	800e7f6 <udp_bind+0xd2>
 800e7f0:	68bb      	ldr	r3, [r7, #8]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	e000      	b.n	800e7f8 <udp_bind+0xd4>
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	68fa      	ldr	r2, [r7, #12]
 800e7fa:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	88fa      	ldrh	r2, [r7, #6]
 800e800:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800e802:	7cfb      	ldrb	r3, [r7, #19]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d106      	bne.n	800e816 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800e808:	4b09      	ldr	r3, [pc, #36]	; (800e830 <udp_bind+0x10c>)
 800e80a:	681a      	ldr	r2, [r3, #0]
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800e810:	4a07      	ldr	r2, [pc, #28]	; (800e830 <udp_bind+0x10c>)
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800e816:	2300      	movs	r3, #0
}
 800e818:	4618      	mov	r0, r3
 800e81a:	3718      	adds	r7, #24
 800e81c:	46bd      	mov	sp, r7
 800e81e:	bd80      	pop	{r7, pc}
 800e820:	080167ec 	.word	0x080167ec
 800e824:	08015ccc 	.word	0x08015ccc
 800e828:	08015f94 	.word	0x08015f94
 800e82c:	08015d20 	.word	0x08015d20
 800e830:	2000a82c 	.word	0x2000a82c

0800e834 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e834:	b580      	push	{r7, lr}
 800e836:	b086      	sub	sp, #24
 800e838:	af00      	add	r7, sp, #0
 800e83a:	60f8      	str	r0, [r7, #12]
 800e83c:	60b9      	str	r1, [r7, #8]
 800e83e:	4613      	mov	r3, r2
 800e840:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d109      	bne.n	800e85c <udp_connect+0x28>
 800e848:	4b2c      	ldr	r3, [pc, #176]	; (800e8fc <udp_connect+0xc8>)
 800e84a:	f240 4235 	movw	r2, #1077	; 0x435
 800e84e:	492c      	ldr	r1, [pc, #176]	; (800e900 <udp_connect+0xcc>)
 800e850:	482c      	ldr	r0, [pc, #176]	; (800e904 <udp_connect+0xd0>)
 800e852:	f003 fa69 	bl	8011d28 <iprintf>
 800e856:	f06f 030f 	mvn.w	r3, #15
 800e85a:	e04b      	b.n	800e8f4 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800e85c:	68bb      	ldr	r3, [r7, #8]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d109      	bne.n	800e876 <udp_connect+0x42>
 800e862:	4b26      	ldr	r3, [pc, #152]	; (800e8fc <udp_connect+0xc8>)
 800e864:	f240 4236 	movw	r2, #1078	; 0x436
 800e868:	4927      	ldr	r1, [pc, #156]	; (800e908 <udp_connect+0xd4>)
 800e86a:	4826      	ldr	r0, [pc, #152]	; (800e904 <udp_connect+0xd0>)
 800e86c:	f003 fa5c 	bl	8011d28 <iprintf>
 800e870:	f06f 030f 	mvn.w	r3, #15
 800e874:	e03e      	b.n	800e8f4 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	8a5b      	ldrh	r3, [r3, #18]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d10f      	bne.n	800e89e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800e87e:	68f9      	ldr	r1, [r7, #12]
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	8a5b      	ldrh	r3, [r3, #18]
 800e884:	461a      	mov	r2, r3
 800e886:	68f8      	ldr	r0, [r7, #12]
 800e888:	f7ff ff4c 	bl	800e724 <udp_bind>
 800e88c:	4603      	mov	r3, r0
 800e88e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800e890:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d002      	beq.n	800e89e <udp_connect+0x6a>
      return err;
 800e898:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e89c:	e02a      	b.n	800e8f4 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800e89e:	68bb      	ldr	r3, [r7, #8]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d002      	beq.n	800e8aa <udp_connect+0x76>
 800e8a4:	68bb      	ldr	r3, [r7, #8]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	e000      	b.n	800e8ac <udp_connect+0x78>
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	68fa      	ldr	r2, [r7, #12]
 800e8ae:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	88fa      	ldrh	r2, [r7, #6]
 800e8b4:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	7c1b      	ldrb	r3, [r3, #16]
 800e8ba:	f043 0304 	orr.w	r3, r3, #4
 800e8be:	b2da      	uxtb	r2, r3
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e8c4:	4b11      	ldr	r3, [pc, #68]	; (800e90c <udp_connect+0xd8>)
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	617b      	str	r3, [r7, #20]
 800e8ca:	e008      	b.n	800e8de <udp_connect+0xaa>
    if (pcb == ipcb) {
 800e8cc:	68fa      	ldr	r2, [r7, #12]
 800e8ce:	697b      	ldr	r3, [r7, #20]
 800e8d0:	429a      	cmp	r2, r3
 800e8d2:	d101      	bne.n	800e8d8 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	e00d      	b.n	800e8f4 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e8d8:	697b      	ldr	r3, [r7, #20]
 800e8da:	68db      	ldr	r3, [r3, #12]
 800e8dc:	617b      	str	r3, [r7, #20]
 800e8de:	697b      	ldr	r3, [r7, #20]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d1f3      	bne.n	800e8cc <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800e8e4:	4b09      	ldr	r3, [pc, #36]	; (800e90c <udp_connect+0xd8>)
 800e8e6:	681a      	ldr	r2, [r3, #0]
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800e8ec:	4a07      	ldr	r2, [pc, #28]	; (800e90c <udp_connect+0xd8>)
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800e8f2:	2300      	movs	r3, #0
}
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	3718      	adds	r7, #24
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	bd80      	pop	{r7, pc}
 800e8fc:	08015ccc 	.word	0x08015ccc
 800e900:	08015fac 	.word	0x08015fac
 800e904:	08015d20 	.word	0x08015d20
 800e908:	08015fc8 	.word	0x08015fc8
 800e90c:	2000a82c 	.word	0x2000a82c

0800e910 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b084      	sub	sp, #16
 800e914:	af00      	add	r7, sp, #0
 800e916:	60f8      	str	r0, [r7, #12]
 800e918:	60b9      	str	r1, [r7, #8]
 800e91a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d107      	bne.n	800e932 <udp_recv+0x22>
 800e922:	4b08      	ldr	r3, [pc, #32]	; (800e944 <udp_recv+0x34>)
 800e924:	f240 428a 	movw	r2, #1162	; 0x48a
 800e928:	4907      	ldr	r1, [pc, #28]	; (800e948 <udp_recv+0x38>)
 800e92a:	4808      	ldr	r0, [pc, #32]	; (800e94c <udp_recv+0x3c>)
 800e92c:	f003 f9fc 	bl	8011d28 <iprintf>
 800e930:	e005      	b.n	800e93e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	68ba      	ldr	r2, [r7, #8]
 800e936:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	687a      	ldr	r2, [r7, #4]
 800e93c:	61da      	str	r2, [r3, #28]
}
 800e93e:	3710      	adds	r7, #16
 800e940:	46bd      	mov	sp, r7
 800e942:	bd80      	pop	{r7, pc}
 800e944:	08015ccc 	.word	0x08015ccc
 800e948:	08016000 	.word	0x08016000
 800e94c:	08015d20 	.word	0x08015d20

0800e950 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800e950:	b580      	push	{r7, lr}
 800e952:	b082      	sub	sp, #8
 800e954:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800e956:	2000      	movs	r0, #0
 800e958:	f7f9 f908 	bl	8007b6c <memp_malloc>
 800e95c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d007      	beq.n	800e974 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800e964:	2220      	movs	r2, #32
 800e966:	2100      	movs	r1, #0
 800e968:	6878      	ldr	r0, [r7, #4]
 800e96a:	f003 fa42 	bl	8011df2 <memset>
    pcb->ttl = UDP_TTL;
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	22ff      	movs	r2, #255	; 0xff
 800e972:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800e974:	687b      	ldr	r3, [r7, #4]
}
 800e976:	4618      	mov	r0, r3
 800e978:	3708      	adds	r7, #8
 800e97a:	46bd      	mov	sp, r7
 800e97c:	bd80      	pop	{r7, pc}
	...

0800e980 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e980:	b480      	push	{r7}
 800e982:	b085      	sub	sp, #20
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]
 800e988:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d01e      	beq.n	800e9ce <udp_netif_ip_addr_changed+0x4e>
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d01a      	beq.n	800e9ce <udp_netif_ip_addr_changed+0x4e>
 800e998:	683b      	ldr	r3, [r7, #0]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d017      	beq.n	800e9ce <udp_netif_ip_addr_changed+0x4e>
 800e99e:	683b      	ldr	r3, [r7, #0]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d013      	beq.n	800e9ce <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e9a6:	4b0d      	ldr	r3, [pc, #52]	; (800e9dc <udp_netif_ip_addr_changed+0x5c>)
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	60fb      	str	r3, [r7, #12]
 800e9ac:	e00c      	b.n	800e9c8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	681a      	ldr	r2, [r3, #0]
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	429a      	cmp	r2, r3
 800e9b8:	d103      	bne.n	800e9c2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800e9ba:	683b      	ldr	r3, [r7, #0]
 800e9bc:	681a      	ldr	r2, [r3, #0]
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	68db      	ldr	r3, [r3, #12]
 800e9c6:	60fb      	str	r3, [r7, #12]
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d1ef      	bne.n	800e9ae <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800e9ce:	bf00      	nop
 800e9d0:	3714      	adds	r7, #20
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d8:	4770      	bx	lr
 800e9da:	bf00      	nop
 800e9dc:	2000a82c 	.word	0x2000a82c

0800e9e0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b082      	sub	sp, #8
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800e9e8:	4915      	ldr	r1, [pc, #84]	; (800ea40 <etharp_free_entry+0x60>)
 800e9ea:	687a      	ldr	r2, [r7, #4]
 800e9ec:	4613      	mov	r3, r2
 800e9ee:	005b      	lsls	r3, r3, #1
 800e9f0:	4413      	add	r3, r2
 800e9f2:	00db      	lsls	r3, r3, #3
 800e9f4:	440b      	add	r3, r1
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d013      	beq.n	800ea24 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800e9fc:	4910      	ldr	r1, [pc, #64]	; (800ea40 <etharp_free_entry+0x60>)
 800e9fe:	687a      	ldr	r2, [r7, #4]
 800ea00:	4613      	mov	r3, r2
 800ea02:	005b      	lsls	r3, r3, #1
 800ea04:	4413      	add	r3, r2
 800ea06:	00db      	lsls	r3, r3, #3
 800ea08:	440b      	add	r3, r1
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	f7f9 ff93 	bl	8008938 <pbuf_free>
    arp_table[i].q = NULL;
 800ea12:	490b      	ldr	r1, [pc, #44]	; (800ea40 <etharp_free_entry+0x60>)
 800ea14:	687a      	ldr	r2, [r7, #4]
 800ea16:	4613      	mov	r3, r2
 800ea18:	005b      	lsls	r3, r3, #1
 800ea1a:	4413      	add	r3, r2
 800ea1c:	00db      	lsls	r3, r3, #3
 800ea1e:	440b      	add	r3, r1
 800ea20:	2200      	movs	r2, #0
 800ea22:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800ea24:	4906      	ldr	r1, [pc, #24]	; (800ea40 <etharp_free_entry+0x60>)
 800ea26:	687a      	ldr	r2, [r7, #4]
 800ea28:	4613      	mov	r3, r2
 800ea2a:	005b      	lsls	r3, r3, #1
 800ea2c:	4413      	add	r3, r2
 800ea2e:	00db      	lsls	r3, r3, #3
 800ea30:	440b      	add	r3, r1
 800ea32:	3314      	adds	r3, #20
 800ea34:	2200      	movs	r2, #0
 800ea36:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800ea38:	bf00      	nop
 800ea3a:	3708      	adds	r7, #8
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	bd80      	pop	{r7, pc}
 800ea40:	2000a830 	.word	0x2000a830

0800ea44 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b082      	sub	sp, #8
 800ea48:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	607b      	str	r3, [r7, #4]
 800ea4e:	e096      	b.n	800eb7e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800ea50:	494f      	ldr	r1, [pc, #316]	; (800eb90 <etharp_tmr+0x14c>)
 800ea52:	687a      	ldr	r2, [r7, #4]
 800ea54:	4613      	mov	r3, r2
 800ea56:	005b      	lsls	r3, r3, #1
 800ea58:	4413      	add	r3, r2
 800ea5a:	00db      	lsls	r3, r3, #3
 800ea5c:	440b      	add	r3, r1
 800ea5e:	3314      	adds	r3, #20
 800ea60:	781b      	ldrb	r3, [r3, #0]
 800ea62:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800ea64:	78fb      	ldrb	r3, [r7, #3]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	f000 8086 	beq.w	800eb78 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800ea6c:	4948      	ldr	r1, [pc, #288]	; (800eb90 <etharp_tmr+0x14c>)
 800ea6e:	687a      	ldr	r2, [r7, #4]
 800ea70:	4613      	mov	r3, r2
 800ea72:	005b      	lsls	r3, r3, #1
 800ea74:	4413      	add	r3, r2
 800ea76:	00db      	lsls	r3, r3, #3
 800ea78:	440b      	add	r3, r1
 800ea7a:	3312      	adds	r3, #18
 800ea7c:	881b      	ldrh	r3, [r3, #0]
 800ea7e:	3301      	adds	r3, #1
 800ea80:	b298      	uxth	r0, r3
 800ea82:	4943      	ldr	r1, [pc, #268]	; (800eb90 <etharp_tmr+0x14c>)
 800ea84:	687a      	ldr	r2, [r7, #4]
 800ea86:	4613      	mov	r3, r2
 800ea88:	005b      	lsls	r3, r3, #1
 800ea8a:	4413      	add	r3, r2
 800ea8c:	00db      	lsls	r3, r3, #3
 800ea8e:	440b      	add	r3, r1
 800ea90:	3312      	adds	r3, #18
 800ea92:	4602      	mov	r2, r0
 800ea94:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ea96:	493e      	ldr	r1, [pc, #248]	; (800eb90 <etharp_tmr+0x14c>)
 800ea98:	687a      	ldr	r2, [r7, #4]
 800ea9a:	4613      	mov	r3, r2
 800ea9c:	005b      	lsls	r3, r3, #1
 800ea9e:	4413      	add	r3, r2
 800eaa0:	00db      	lsls	r3, r3, #3
 800eaa2:	440b      	add	r3, r1
 800eaa4:	3312      	adds	r3, #18
 800eaa6:	881b      	ldrh	r3, [r3, #0]
 800eaa8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800eaac:	d215      	bcs.n	800eada <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800eaae:	4938      	ldr	r1, [pc, #224]	; (800eb90 <etharp_tmr+0x14c>)
 800eab0:	687a      	ldr	r2, [r7, #4]
 800eab2:	4613      	mov	r3, r2
 800eab4:	005b      	lsls	r3, r3, #1
 800eab6:	4413      	add	r3, r2
 800eab8:	00db      	lsls	r3, r3, #3
 800eaba:	440b      	add	r3, r1
 800eabc:	3314      	adds	r3, #20
 800eabe:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800eac0:	2b01      	cmp	r3, #1
 800eac2:	d10e      	bne.n	800eae2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800eac4:	4932      	ldr	r1, [pc, #200]	; (800eb90 <etharp_tmr+0x14c>)
 800eac6:	687a      	ldr	r2, [r7, #4]
 800eac8:	4613      	mov	r3, r2
 800eaca:	005b      	lsls	r3, r3, #1
 800eacc:	4413      	add	r3, r2
 800eace:	00db      	lsls	r3, r3, #3
 800ead0:	440b      	add	r3, r1
 800ead2:	3312      	adds	r3, #18
 800ead4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ead6:	2b04      	cmp	r3, #4
 800ead8:	d903      	bls.n	800eae2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800eada:	6878      	ldr	r0, [r7, #4]
 800eadc:	f7ff ff80 	bl	800e9e0 <etharp_free_entry>
 800eae0:	e04a      	b.n	800eb78 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800eae2:	492b      	ldr	r1, [pc, #172]	; (800eb90 <etharp_tmr+0x14c>)
 800eae4:	687a      	ldr	r2, [r7, #4]
 800eae6:	4613      	mov	r3, r2
 800eae8:	005b      	lsls	r3, r3, #1
 800eaea:	4413      	add	r3, r2
 800eaec:	00db      	lsls	r3, r3, #3
 800eaee:	440b      	add	r3, r1
 800eaf0:	3314      	adds	r3, #20
 800eaf2:	781b      	ldrb	r3, [r3, #0]
 800eaf4:	2b03      	cmp	r3, #3
 800eaf6:	d10a      	bne.n	800eb0e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800eaf8:	4925      	ldr	r1, [pc, #148]	; (800eb90 <etharp_tmr+0x14c>)
 800eafa:	687a      	ldr	r2, [r7, #4]
 800eafc:	4613      	mov	r3, r2
 800eafe:	005b      	lsls	r3, r3, #1
 800eb00:	4413      	add	r3, r2
 800eb02:	00db      	lsls	r3, r3, #3
 800eb04:	440b      	add	r3, r1
 800eb06:	3314      	adds	r3, #20
 800eb08:	2204      	movs	r2, #4
 800eb0a:	701a      	strb	r2, [r3, #0]
 800eb0c:	e034      	b.n	800eb78 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800eb0e:	4920      	ldr	r1, [pc, #128]	; (800eb90 <etharp_tmr+0x14c>)
 800eb10:	687a      	ldr	r2, [r7, #4]
 800eb12:	4613      	mov	r3, r2
 800eb14:	005b      	lsls	r3, r3, #1
 800eb16:	4413      	add	r3, r2
 800eb18:	00db      	lsls	r3, r3, #3
 800eb1a:	440b      	add	r3, r1
 800eb1c:	3314      	adds	r3, #20
 800eb1e:	781b      	ldrb	r3, [r3, #0]
 800eb20:	2b04      	cmp	r3, #4
 800eb22:	d10a      	bne.n	800eb3a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800eb24:	491a      	ldr	r1, [pc, #104]	; (800eb90 <etharp_tmr+0x14c>)
 800eb26:	687a      	ldr	r2, [r7, #4]
 800eb28:	4613      	mov	r3, r2
 800eb2a:	005b      	lsls	r3, r3, #1
 800eb2c:	4413      	add	r3, r2
 800eb2e:	00db      	lsls	r3, r3, #3
 800eb30:	440b      	add	r3, r1
 800eb32:	3314      	adds	r3, #20
 800eb34:	2202      	movs	r2, #2
 800eb36:	701a      	strb	r2, [r3, #0]
 800eb38:	e01e      	b.n	800eb78 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800eb3a:	4915      	ldr	r1, [pc, #84]	; (800eb90 <etharp_tmr+0x14c>)
 800eb3c:	687a      	ldr	r2, [r7, #4]
 800eb3e:	4613      	mov	r3, r2
 800eb40:	005b      	lsls	r3, r3, #1
 800eb42:	4413      	add	r3, r2
 800eb44:	00db      	lsls	r3, r3, #3
 800eb46:	440b      	add	r3, r1
 800eb48:	3314      	adds	r3, #20
 800eb4a:	781b      	ldrb	r3, [r3, #0]
 800eb4c:	2b01      	cmp	r3, #1
 800eb4e:	d113      	bne.n	800eb78 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800eb50:	490f      	ldr	r1, [pc, #60]	; (800eb90 <etharp_tmr+0x14c>)
 800eb52:	687a      	ldr	r2, [r7, #4]
 800eb54:	4613      	mov	r3, r2
 800eb56:	005b      	lsls	r3, r3, #1
 800eb58:	4413      	add	r3, r2
 800eb5a:	00db      	lsls	r3, r3, #3
 800eb5c:	440b      	add	r3, r1
 800eb5e:	3308      	adds	r3, #8
 800eb60:	6818      	ldr	r0, [r3, #0]
 800eb62:	687a      	ldr	r2, [r7, #4]
 800eb64:	4613      	mov	r3, r2
 800eb66:	005b      	lsls	r3, r3, #1
 800eb68:	4413      	add	r3, r2
 800eb6a:	00db      	lsls	r3, r3, #3
 800eb6c:	4a08      	ldr	r2, [pc, #32]	; (800eb90 <etharp_tmr+0x14c>)
 800eb6e:	4413      	add	r3, r2
 800eb70:	3304      	adds	r3, #4
 800eb72:	4619      	mov	r1, r3
 800eb74:	f000 fe6e 	bl	800f854 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	3301      	adds	r3, #1
 800eb7c:	607b      	str	r3, [r7, #4]
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	2b09      	cmp	r3, #9
 800eb82:	f77f af65 	ble.w	800ea50 <etharp_tmr+0xc>
      }
    }
  }
}
 800eb86:	bf00      	nop
 800eb88:	bf00      	nop
 800eb8a:	3708      	adds	r7, #8
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	bd80      	pop	{r7, pc}
 800eb90:	2000a830 	.word	0x2000a830

0800eb94 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b08a      	sub	sp, #40	; 0x28
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	60f8      	str	r0, [r7, #12]
 800eb9c:	460b      	mov	r3, r1
 800eb9e:	607a      	str	r2, [r7, #4]
 800eba0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800eba2:	230a      	movs	r3, #10
 800eba4:	84fb      	strh	r3, [r7, #38]	; 0x26
 800eba6:	230a      	movs	r3, #10
 800eba8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800ebaa:	230a      	movs	r3, #10
 800ebac:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800ebae:	2300      	movs	r3, #0
 800ebb0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800ebb2:	230a      	movs	r3, #10
 800ebb4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	83bb      	strh	r3, [r7, #28]
 800ebba:	2300      	movs	r3, #0
 800ebbc:	837b      	strh	r3, [r7, #26]
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	843b      	strh	r3, [r7, #32]
 800ebc6:	e0ae      	b.n	800ed26 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800ebc8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ebcc:	49a6      	ldr	r1, [pc, #664]	; (800ee68 <etharp_find_entry+0x2d4>)
 800ebce:	4613      	mov	r3, r2
 800ebd0:	005b      	lsls	r3, r3, #1
 800ebd2:	4413      	add	r3, r2
 800ebd4:	00db      	lsls	r3, r3, #3
 800ebd6:	440b      	add	r3, r1
 800ebd8:	3314      	adds	r3, #20
 800ebda:	781b      	ldrb	r3, [r3, #0]
 800ebdc:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800ebde:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ebe2:	2b0a      	cmp	r3, #10
 800ebe4:	d105      	bne.n	800ebf2 <etharp_find_entry+0x5e>
 800ebe6:	7dfb      	ldrb	r3, [r7, #23]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d102      	bne.n	800ebf2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800ebec:	8c3b      	ldrh	r3, [r7, #32]
 800ebee:	847b      	strh	r3, [r7, #34]	; 0x22
 800ebf0:	e095      	b.n	800ed1e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800ebf2:	7dfb      	ldrb	r3, [r7, #23]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	f000 8092 	beq.w	800ed1e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800ebfa:	7dfb      	ldrb	r3, [r7, #23]
 800ebfc:	2b01      	cmp	r3, #1
 800ebfe:	d009      	beq.n	800ec14 <etharp_find_entry+0x80>
 800ec00:	7dfb      	ldrb	r3, [r7, #23]
 800ec02:	2b01      	cmp	r3, #1
 800ec04:	d806      	bhi.n	800ec14 <etharp_find_entry+0x80>
 800ec06:	4b99      	ldr	r3, [pc, #612]	; (800ee6c <etharp_find_entry+0x2d8>)
 800ec08:	f240 1223 	movw	r2, #291	; 0x123
 800ec0c:	4998      	ldr	r1, [pc, #608]	; (800ee70 <etharp_find_entry+0x2dc>)
 800ec0e:	4899      	ldr	r0, [pc, #612]	; (800ee74 <etharp_find_entry+0x2e0>)
 800ec10:	f003 f88a 	bl	8011d28 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d020      	beq.n	800ec5c <etharp_find_entry+0xc8>
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	6819      	ldr	r1, [r3, #0]
 800ec1e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ec22:	4891      	ldr	r0, [pc, #580]	; (800ee68 <etharp_find_entry+0x2d4>)
 800ec24:	4613      	mov	r3, r2
 800ec26:	005b      	lsls	r3, r3, #1
 800ec28:	4413      	add	r3, r2
 800ec2a:	00db      	lsls	r3, r3, #3
 800ec2c:	4403      	add	r3, r0
 800ec2e:	3304      	adds	r3, #4
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	4299      	cmp	r1, r3
 800ec34:	d112      	bne.n	800ec5c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d00c      	beq.n	800ec56 <etharp_find_entry+0xc2>
 800ec3c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ec40:	4989      	ldr	r1, [pc, #548]	; (800ee68 <etharp_find_entry+0x2d4>)
 800ec42:	4613      	mov	r3, r2
 800ec44:	005b      	lsls	r3, r3, #1
 800ec46:	4413      	add	r3, r2
 800ec48:	00db      	lsls	r3, r3, #3
 800ec4a:	440b      	add	r3, r1
 800ec4c:	3308      	adds	r3, #8
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	687a      	ldr	r2, [r7, #4]
 800ec52:	429a      	cmp	r2, r3
 800ec54:	d102      	bne.n	800ec5c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800ec56:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ec5a:	e100      	b.n	800ee5e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800ec5c:	7dfb      	ldrb	r3, [r7, #23]
 800ec5e:	2b01      	cmp	r3, #1
 800ec60:	d140      	bne.n	800ece4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800ec62:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ec66:	4980      	ldr	r1, [pc, #512]	; (800ee68 <etharp_find_entry+0x2d4>)
 800ec68:	4613      	mov	r3, r2
 800ec6a:	005b      	lsls	r3, r3, #1
 800ec6c:	4413      	add	r3, r2
 800ec6e:	00db      	lsls	r3, r3, #3
 800ec70:	440b      	add	r3, r1
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d01a      	beq.n	800ecae <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800ec78:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ec7c:	497a      	ldr	r1, [pc, #488]	; (800ee68 <etharp_find_entry+0x2d4>)
 800ec7e:	4613      	mov	r3, r2
 800ec80:	005b      	lsls	r3, r3, #1
 800ec82:	4413      	add	r3, r2
 800ec84:	00db      	lsls	r3, r3, #3
 800ec86:	440b      	add	r3, r1
 800ec88:	3312      	adds	r3, #18
 800ec8a:	881b      	ldrh	r3, [r3, #0]
 800ec8c:	8bba      	ldrh	r2, [r7, #28]
 800ec8e:	429a      	cmp	r2, r3
 800ec90:	d845      	bhi.n	800ed1e <etharp_find_entry+0x18a>
            old_queue = i;
 800ec92:	8c3b      	ldrh	r3, [r7, #32]
 800ec94:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800ec96:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ec9a:	4973      	ldr	r1, [pc, #460]	; (800ee68 <etharp_find_entry+0x2d4>)
 800ec9c:	4613      	mov	r3, r2
 800ec9e:	005b      	lsls	r3, r3, #1
 800eca0:	4413      	add	r3, r2
 800eca2:	00db      	lsls	r3, r3, #3
 800eca4:	440b      	add	r3, r1
 800eca6:	3312      	adds	r3, #18
 800eca8:	881b      	ldrh	r3, [r3, #0]
 800ecaa:	83bb      	strh	r3, [r7, #28]
 800ecac:	e037      	b.n	800ed1e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800ecae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ecb2:	496d      	ldr	r1, [pc, #436]	; (800ee68 <etharp_find_entry+0x2d4>)
 800ecb4:	4613      	mov	r3, r2
 800ecb6:	005b      	lsls	r3, r3, #1
 800ecb8:	4413      	add	r3, r2
 800ecba:	00db      	lsls	r3, r3, #3
 800ecbc:	440b      	add	r3, r1
 800ecbe:	3312      	adds	r3, #18
 800ecc0:	881b      	ldrh	r3, [r3, #0]
 800ecc2:	8b7a      	ldrh	r2, [r7, #26]
 800ecc4:	429a      	cmp	r2, r3
 800ecc6:	d82a      	bhi.n	800ed1e <etharp_find_entry+0x18a>
            old_pending = i;
 800ecc8:	8c3b      	ldrh	r3, [r7, #32]
 800ecca:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800eccc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ecd0:	4965      	ldr	r1, [pc, #404]	; (800ee68 <etharp_find_entry+0x2d4>)
 800ecd2:	4613      	mov	r3, r2
 800ecd4:	005b      	lsls	r3, r3, #1
 800ecd6:	4413      	add	r3, r2
 800ecd8:	00db      	lsls	r3, r3, #3
 800ecda:	440b      	add	r3, r1
 800ecdc:	3312      	adds	r3, #18
 800ecde:	881b      	ldrh	r3, [r3, #0]
 800ece0:	837b      	strh	r3, [r7, #26]
 800ece2:	e01c      	b.n	800ed1e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800ece4:	7dfb      	ldrb	r3, [r7, #23]
 800ece6:	2b01      	cmp	r3, #1
 800ece8:	d919      	bls.n	800ed1e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800ecea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ecee:	495e      	ldr	r1, [pc, #376]	; (800ee68 <etharp_find_entry+0x2d4>)
 800ecf0:	4613      	mov	r3, r2
 800ecf2:	005b      	lsls	r3, r3, #1
 800ecf4:	4413      	add	r3, r2
 800ecf6:	00db      	lsls	r3, r3, #3
 800ecf8:	440b      	add	r3, r1
 800ecfa:	3312      	adds	r3, #18
 800ecfc:	881b      	ldrh	r3, [r3, #0]
 800ecfe:	8b3a      	ldrh	r2, [r7, #24]
 800ed00:	429a      	cmp	r2, r3
 800ed02:	d80c      	bhi.n	800ed1e <etharp_find_entry+0x18a>
            old_stable = i;
 800ed04:	8c3b      	ldrh	r3, [r7, #32]
 800ed06:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800ed08:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ed0c:	4956      	ldr	r1, [pc, #344]	; (800ee68 <etharp_find_entry+0x2d4>)
 800ed0e:	4613      	mov	r3, r2
 800ed10:	005b      	lsls	r3, r3, #1
 800ed12:	4413      	add	r3, r2
 800ed14:	00db      	lsls	r3, r3, #3
 800ed16:	440b      	add	r3, r1
 800ed18:	3312      	adds	r3, #18
 800ed1a:	881b      	ldrh	r3, [r3, #0]
 800ed1c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ed1e:	8c3b      	ldrh	r3, [r7, #32]
 800ed20:	3301      	adds	r3, #1
 800ed22:	b29b      	uxth	r3, r3
 800ed24:	843b      	strh	r3, [r7, #32]
 800ed26:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ed2a:	2b09      	cmp	r3, #9
 800ed2c:	f77f af4c 	ble.w	800ebc8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800ed30:	7afb      	ldrb	r3, [r7, #11]
 800ed32:	f003 0302 	and.w	r3, r3, #2
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d108      	bne.n	800ed4c <etharp_find_entry+0x1b8>
 800ed3a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ed3e:	2b0a      	cmp	r3, #10
 800ed40:	d107      	bne.n	800ed52 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800ed42:	7afb      	ldrb	r3, [r7, #11]
 800ed44:	f003 0301 	and.w	r3, r3, #1
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d102      	bne.n	800ed52 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800ed4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ed50:	e085      	b.n	800ee5e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800ed52:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ed56:	2b09      	cmp	r3, #9
 800ed58:	dc02      	bgt.n	800ed60 <etharp_find_entry+0x1cc>
    i = empty;
 800ed5a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ed5c:	843b      	strh	r3, [r7, #32]
 800ed5e:	e039      	b.n	800edd4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800ed60:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800ed64:	2b09      	cmp	r3, #9
 800ed66:	dc14      	bgt.n	800ed92 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800ed68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ed6a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800ed6c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ed70:	493d      	ldr	r1, [pc, #244]	; (800ee68 <etharp_find_entry+0x2d4>)
 800ed72:	4613      	mov	r3, r2
 800ed74:	005b      	lsls	r3, r3, #1
 800ed76:	4413      	add	r3, r2
 800ed78:	00db      	lsls	r3, r3, #3
 800ed7a:	440b      	add	r3, r1
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d018      	beq.n	800edb4 <etharp_find_entry+0x220>
 800ed82:	4b3a      	ldr	r3, [pc, #232]	; (800ee6c <etharp_find_entry+0x2d8>)
 800ed84:	f240 126d 	movw	r2, #365	; 0x16d
 800ed88:	493b      	ldr	r1, [pc, #236]	; (800ee78 <etharp_find_entry+0x2e4>)
 800ed8a:	483a      	ldr	r0, [pc, #232]	; (800ee74 <etharp_find_entry+0x2e0>)
 800ed8c:	f002 ffcc 	bl	8011d28 <iprintf>
 800ed90:	e010      	b.n	800edb4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800ed92:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ed96:	2b09      	cmp	r3, #9
 800ed98:	dc02      	bgt.n	800eda0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800ed9a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ed9c:	843b      	strh	r3, [r7, #32]
 800ed9e:	e009      	b.n	800edb4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800eda0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800eda4:	2b09      	cmp	r3, #9
 800eda6:	dc02      	bgt.n	800edae <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800eda8:	8bfb      	ldrh	r3, [r7, #30]
 800edaa:	843b      	strh	r3, [r7, #32]
 800edac:	e002      	b.n	800edb4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800edae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800edb2:	e054      	b.n	800ee5e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800edb4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800edb8:	2b09      	cmp	r3, #9
 800edba:	dd06      	ble.n	800edca <etharp_find_entry+0x236>
 800edbc:	4b2b      	ldr	r3, [pc, #172]	; (800ee6c <etharp_find_entry+0x2d8>)
 800edbe:	f240 127f 	movw	r2, #383	; 0x17f
 800edc2:	492e      	ldr	r1, [pc, #184]	; (800ee7c <etharp_find_entry+0x2e8>)
 800edc4:	482b      	ldr	r0, [pc, #172]	; (800ee74 <etharp_find_entry+0x2e0>)
 800edc6:	f002 ffaf 	bl	8011d28 <iprintf>
    etharp_free_entry(i);
 800edca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800edce:	4618      	mov	r0, r3
 800edd0:	f7ff fe06 	bl	800e9e0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800edd4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800edd8:	2b09      	cmp	r3, #9
 800edda:	dd06      	ble.n	800edea <etharp_find_entry+0x256>
 800eddc:	4b23      	ldr	r3, [pc, #140]	; (800ee6c <etharp_find_entry+0x2d8>)
 800edde:	f240 1283 	movw	r2, #387	; 0x183
 800ede2:	4926      	ldr	r1, [pc, #152]	; (800ee7c <etharp_find_entry+0x2e8>)
 800ede4:	4823      	ldr	r0, [pc, #140]	; (800ee74 <etharp_find_entry+0x2e0>)
 800ede6:	f002 ff9f 	bl	8011d28 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800edea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800edee:	491e      	ldr	r1, [pc, #120]	; (800ee68 <etharp_find_entry+0x2d4>)
 800edf0:	4613      	mov	r3, r2
 800edf2:	005b      	lsls	r3, r3, #1
 800edf4:	4413      	add	r3, r2
 800edf6:	00db      	lsls	r3, r3, #3
 800edf8:	440b      	add	r3, r1
 800edfa:	3314      	adds	r3, #20
 800edfc:	781b      	ldrb	r3, [r3, #0]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d006      	beq.n	800ee10 <etharp_find_entry+0x27c>
 800ee02:	4b1a      	ldr	r3, [pc, #104]	; (800ee6c <etharp_find_entry+0x2d8>)
 800ee04:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800ee08:	491d      	ldr	r1, [pc, #116]	; (800ee80 <etharp_find_entry+0x2ec>)
 800ee0a:	481a      	ldr	r0, [pc, #104]	; (800ee74 <etharp_find_entry+0x2e0>)
 800ee0c:	f002 ff8c 	bl	8011d28 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d00b      	beq.n	800ee2e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800ee16:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	6819      	ldr	r1, [r3, #0]
 800ee1e:	4812      	ldr	r0, [pc, #72]	; (800ee68 <etharp_find_entry+0x2d4>)
 800ee20:	4613      	mov	r3, r2
 800ee22:	005b      	lsls	r3, r3, #1
 800ee24:	4413      	add	r3, r2
 800ee26:	00db      	lsls	r3, r3, #3
 800ee28:	4403      	add	r3, r0
 800ee2a:	3304      	adds	r3, #4
 800ee2c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800ee2e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ee32:	490d      	ldr	r1, [pc, #52]	; (800ee68 <etharp_find_entry+0x2d4>)
 800ee34:	4613      	mov	r3, r2
 800ee36:	005b      	lsls	r3, r3, #1
 800ee38:	4413      	add	r3, r2
 800ee3a:	00db      	lsls	r3, r3, #3
 800ee3c:	440b      	add	r3, r1
 800ee3e:	3312      	adds	r3, #18
 800ee40:	2200      	movs	r2, #0
 800ee42:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800ee44:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ee48:	4907      	ldr	r1, [pc, #28]	; (800ee68 <etharp_find_entry+0x2d4>)
 800ee4a:	4613      	mov	r3, r2
 800ee4c:	005b      	lsls	r3, r3, #1
 800ee4e:	4413      	add	r3, r2
 800ee50:	00db      	lsls	r3, r3, #3
 800ee52:	440b      	add	r3, r1
 800ee54:	3308      	adds	r3, #8
 800ee56:	687a      	ldr	r2, [r7, #4]
 800ee58:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800ee5a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800ee5e:	4618      	mov	r0, r3
 800ee60:	3728      	adds	r7, #40	; 0x28
 800ee62:	46bd      	mov	sp, r7
 800ee64:	bd80      	pop	{r7, pc}
 800ee66:	bf00      	nop
 800ee68:	2000a830 	.word	0x2000a830
 800ee6c:	08016030 	.word	0x08016030
 800ee70:	08016068 	.word	0x08016068
 800ee74:	080160a8 	.word	0x080160a8
 800ee78:	080160d0 	.word	0x080160d0
 800ee7c:	080160e8 	.word	0x080160e8
 800ee80:	080160fc 	.word	0x080160fc

0800ee84 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b088      	sub	sp, #32
 800ee88:	af02      	add	r7, sp, #8
 800ee8a:	60f8      	str	r0, [r7, #12]
 800ee8c:	60b9      	str	r1, [r7, #8]
 800ee8e:	607a      	str	r2, [r7, #4]
 800ee90:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ee98:	2b06      	cmp	r3, #6
 800ee9a:	d006      	beq.n	800eeaa <etharp_update_arp_entry+0x26>
 800ee9c:	4b48      	ldr	r3, [pc, #288]	; (800efc0 <etharp_update_arp_entry+0x13c>)
 800ee9e:	f240 12a9 	movw	r2, #425	; 0x1a9
 800eea2:	4948      	ldr	r1, [pc, #288]	; (800efc4 <etharp_update_arp_entry+0x140>)
 800eea4:	4848      	ldr	r0, [pc, #288]	; (800efc8 <etharp_update_arp_entry+0x144>)
 800eea6:	f002 ff3f 	bl	8011d28 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800eeaa:	68bb      	ldr	r3, [r7, #8]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d012      	beq.n	800eed6 <etharp_update_arp_entry+0x52>
 800eeb0:	68bb      	ldr	r3, [r7, #8]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d00e      	beq.n	800eed6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800eeb8:	68bb      	ldr	r3, [r7, #8]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	68f9      	ldr	r1, [r7, #12]
 800eebe:	4618      	mov	r0, r3
 800eec0:	f001 f8fe 	bl	80100c0 <ip4_addr_isbroadcast_u32>
 800eec4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d105      	bne.n	800eed6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800eeca:	68bb      	ldr	r3, [r7, #8]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800eed2:	2be0      	cmp	r3, #224	; 0xe0
 800eed4:	d102      	bne.n	800eedc <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800eed6:	f06f 030f 	mvn.w	r3, #15
 800eeda:	e06c      	b.n	800efb6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800eedc:	78fb      	ldrb	r3, [r7, #3]
 800eede:	68fa      	ldr	r2, [r7, #12]
 800eee0:	4619      	mov	r1, r3
 800eee2:	68b8      	ldr	r0, [r7, #8]
 800eee4:	f7ff fe56 	bl	800eb94 <etharp_find_entry>
 800eee8:	4603      	mov	r3, r0
 800eeea:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800eeec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	da02      	bge.n	800eefa <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800eef4:	8afb      	ldrh	r3, [r7, #22]
 800eef6:	b25b      	sxtb	r3, r3
 800eef8:	e05d      	b.n	800efb6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800eefa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800eefe:	4933      	ldr	r1, [pc, #204]	; (800efcc <etharp_update_arp_entry+0x148>)
 800ef00:	4613      	mov	r3, r2
 800ef02:	005b      	lsls	r3, r3, #1
 800ef04:	4413      	add	r3, r2
 800ef06:	00db      	lsls	r3, r3, #3
 800ef08:	440b      	add	r3, r1
 800ef0a:	3314      	adds	r3, #20
 800ef0c:	2202      	movs	r2, #2
 800ef0e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800ef10:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ef14:	492d      	ldr	r1, [pc, #180]	; (800efcc <etharp_update_arp_entry+0x148>)
 800ef16:	4613      	mov	r3, r2
 800ef18:	005b      	lsls	r3, r3, #1
 800ef1a:	4413      	add	r3, r2
 800ef1c:	00db      	lsls	r3, r3, #3
 800ef1e:	440b      	add	r3, r1
 800ef20:	3308      	adds	r3, #8
 800ef22:	68fa      	ldr	r2, [r7, #12]
 800ef24:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800ef26:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ef2a:	4613      	mov	r3, r2
 800ef2c:	005b      	lsls	r3, r3, #1
 800ef2e:	4413      	add	r3, r2
 800ef30:	00db      	lsls	r3, r3, #3
 800ef32:	3308      	adds	r3, #8
 800ef34:	4a25      	ldr	r2, [pc, #148]	; (800efcc <etharp_update_arp_entry+0x148>)
 800ef36:	4413      	add	r3, r2
 800ef38:	3304      	adds	r3, #4
 800ef3a:	2206      	movs	r2, #6
 800ef3c:	6879      	ldr	r1, [r7, #4]
 800ef3e:	4618      	mov	r0, r3
 800ef40:	f003 f853 	bl	8011fea <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800ef44:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ef48:	4920      	ldr	r1, [pc, #128]	; (800efcc <etharp_update_arp_entry+0x148>)
 800ef4a:	4613      	mov	r3, r2
 800ef4c:	005b      	lsls	r3, r3, #1
 800ef4e:	4413      	add	r3, r2
 800ef50:	00db      	lsls	r3, r3, #3
 800ef52:	440b      	add	r3, r1
 800ef54:	3312      	adds	r3, #18
 800ef56:	2200      	movs	r2, #0
 800ef58:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800ef5a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ef5e:	491b      	ldr	r1, [pc, #108]	; (800efcc <etharp_update_arp_entry+0x148>)
 800ef60:	4613      	mov	r3, r2
 800ef62:	005b      	lsls	r3, r3, #1
 800ef64:	4413      	add	r3, r2
 800ef66:	00db      	lsls	r3, r3, #3
 800ef68:	440b      	add	r3, r1
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d021      	beq.n	800efb4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800ef70:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ef74:	4915      	ldr	r1, [pc, #84]	; (800efcc <etharp_update_arp_entry+0x148>)
 800ef76:	4613      	mov	r3, r2
 800ef78:	005b      	lsls	r3, r3, #1
 800ef7a:	4413      	add	r3, r2
 800ef7c:	00db      	lsls	r3, r3, #3
 800ef7e:	440b      	add	r3, r1
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800ef84:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ef88:	4910      	ldr	r1, [pc, #64]	; (800efcc <etharp_update_arp_entry+0x148>)
 800ef8a:	4613      	mov	r3, r2
 800ef8c:	005b      	lsls	r3, r3, #1
 800ef8e:	4413      	add	r3, r2
 800ef90:	00db      	lsls	r3, r3, #3
 800ef92:	440b      	add	r3, r1
 800ef94:	2200      	movs	r2, #0
 800ef96:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800ef9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800efa2:	9300      	str	r3, [sp, #0]
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	6939      	ldr	r1, [r7, #16]
 800efa8:	68f8      	ldr	r0, [r7, #12]
 800efaa:	f001 ff97 	bl	8010edc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800efae:	6938      	ldr	r0, [r7, #16]
 800efb0:	f7f9 fcc2 	bl	8008938 <pbuf_free>
  }
  return ERR_OK;
 800efb4:	2300      	movs	r3, #0
}
 800efb6:	4618      	mov	r0, r3
 800efb8:	3718      	adds	r7, #24
 800efba:	46bd      	mov	sp, r7
 800efbc:	bd80      	pop	{r7, pc}
 800efbe:	bf00      	nop
 800efc0:	08016030 	.word	0x08016030
 800efc4:	08016128 	.word	0x08016128
 800efc8:	080160a8 	.word	0x080160a8
 800efcc:	2000a830 	.word	0x2000a830

0800efd0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b084      	sub	sp, #16
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800efd8:	2300      	movs	r3, #0
 800efda:	60fb      	str	r3, [r7, #12]
 800efdc:	e01e      	b.n	800f01c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800efde:	4913      	ldr	r1, [pc, #76]	; (800f02c <etharp_cleanup_netif+0x5c>)
 800efe0:	68fa      	ldr	r2, [r7, #12]
 800efe2:	4613      	mov	r3, r2
 800efe4:	005b      	lsls	r3, r3, #1
 800efe6:	4413      	add	r3, r2
 800efe8:	00db      	lsls	r3, r3, #3
 800efea:	440b      	add	r3, r1
 800efec:	3314      	adds	r3, #20
 800efee:	781b      	ldrb	r3, [r3, #0]
 800eff0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800eff2:	7afb      	ldrb	r3, [r7, #11]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d00e      	beq.n	800f016 <etharp_cleanup_netif+0x46>
 800eff8:	490c      	ldr	r1, [pc, #48]	; (800f02c <etharp_cleanup_netif+0x5c>)
 800effa:	68fa      	ldr	r2, [r7, #12]
 800effc:	4613      	mov	r3, r2
 800effe:	005b      	lsls	r3, r3, #1
 800f000:	4413      	add	r3, r2
 800f002:	00db      	lsls	r3, r3, #3
 800f004:	440b      	add	r3, r1
 800f006:	3308      	adds	r3, #8
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	687a      	ldr	r2, [r7, #4]
 800f00c:	429a      	cmp	r2, r3
 800f00e:	d102      	bne.n	800f016 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800f010:	68f8      	ldr	r0, [r7, #12]
 800f012:	f7ff fce5 	bl	800e9e0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	3301      	adds	r3, #1
 800f01a:	60fb      	str	r3, [r7, #12]
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	2b09      	cmp	r3, #9
 800f020:	dddd      	ble.n	800efde <etharp_cleanup_netif+0xe>
    }
  }
}
 800f022:	bf00      	nop
 800f024:	bf00      	nop
 800f026:	3710      	adds	r7, #16
 800f028:	46bd      	mov	sp, r7
 800f02a:	bd80      	pop	{r7, pc}
 800f02c:	2000a830 	.word	0x2000a830

0800f030 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800f030:	b5b0      	push	{r4, r5, r7, lr}
 800f032:	b08a      	sub	sp, #40	; 0x28
 800f034:	af04      	add	r7, sp, #16
 800f036:	6078      	str	r0, [r7, #4]
 800f038:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f03a:	683b      	ldr	r3, [r7, #0]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d107      	bne.n	800f050 <etharp_input+0x20>
 800f040:	4b3d      	ldr	r3, [pc, #244]	; (800f138 <etharp_input+0x108>)
 800f042:	f240 228a 	movw	r2, #650	; 0x28a
 800f046:	493d      	ldr	r1, [pc, #244]	; (800f13c <etharp_input+0x10c>)
 800f048:	483d      	ldr	r0, [pc, #244]	; (800f140 <etharp_input+0x110>)
 800f04a:	f002 fe6d 	bl	8011d28 <iprintf>
 800f04e:	e06f      	b.n	800f130 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	685b      	ldr	r3, [r3, #4]
 800f054:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f056:	693b      	ldr	r3, [r7, #16]
 800f058:	881b      	ldrh	r3, [r3, #0]
 800f05a:	b29b      	uxth	r3, r3
 800f05c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f060:	d10c      	bne.n	800f07c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f062:	693b      	ldr	r3, [r7, #16]
 800f064:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f066:	2b06      	cmp	r3, #6
 800f068:	d108      	bne.n	800f07c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f06a:	693b      	ldr	r3, [r7, #16]
 800f06c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f06e:	2b04      	cmp	r3, #4
 800f070:	d104      	bne.n	800f07c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800f072:	693b      	ldr	r3, [r7, #16]
 800f074:	885b      	ldrh	r3, [r3, #2]
 800f076:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f078:	2b08      	cmp	r3, #8
 800f07a:	d003      	beq.n	800f084 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800f07c:	6878      	ldr	r0, [r7, #4]
 800f07e:	f7f9 fc5b 	bl	8008938 <pbuf_free>
    return;
 800f082:	e055      	b.n	800f130 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800f084:	693b      	ldr	r3, [r7, #16]
 800f086:	330e      	adds	r3, #14
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800f08c:	693b      	ldr	r3, [r7, #16]
 800f08e:	3318      	adds	r3, #24
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f094:	683b      	ldr	r3, [r7, #0]
 800f096:	3304      	adds	r3, #4
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d102      	bne.n	800f0a4 <etharp_input+0x74>
    for_us = 0;
 800f09e:	2300      	movs	r3, #0
 800f0a0:	75fb      	strb	r3, [r7, #23]
 800f0a2:	e009      	b.n	800f0b8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800f0a4:	68ba      	ldr	r2, [r7, #8]
 800f0a6:	683b      	ldr	r3, [r7, #0]
 800f0a8:	3304      	adds	r3, #4
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	429a      	cmp	r2, r3
 800f0ae:	bf0c      	ite	eq
 800f0b0:	2301      	moveq	r3, #1
 800f0b2:	2300      	movne	r3, #0
 800f0b4:	b2db      	uxtb	r3, r3
 800f0b6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800f0b8:	693b      	ldr	r3, [r7, #16]
 800f0ba:	f103 0208 	add.w	r2, r3, #8
 800f0be:	7dfb      	ldrb	r3, [r7, #23]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d001      	beq.n	800f0c8 <etharp_input+0x98>
 800f0c4:	2301      	movs	r3, #1
 800f0c6:	e000      	b.n	800f0ca <etharp_input+0x9a>
 800f0c8:	2302      	movs	r3, #2
 800f0ca:	f107 010c 	add.w	r1, r7, #12
 800f0ce:	6838      	ldr	r0, [r7, #0]
 800f0d0:	f7ff fed8 	bl	800ee84 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800f0d4:	693b      	ldr	r3, [r7, #16]
 800f0d6:	88db      	ldrh	r3, [r3, #6]
 800f0d8:	b29b      	uxth	r3, r3
 800f0da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f0de:	d003      	beq.n	800f0e8 <etharp_input+0xb8>
 800f0e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f0e4:	d01e      	beq.n	800f124 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800f0e6:	e020      	b.n	800f12a <etharp_input+0xfa>
      if (for_us) {
 800f0e8:	7dfb      	ldrb	r3, [r7, #23]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d01c      	beq.n	800f128 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800f0ee:	683b      	ldr	r3, [r7, #0]
 800f0f0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800f0f4:	693b      	ldr	r3, [r7, #16]
 800f0f6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800f0fa:	683b      	ldr	r3, [r7, #0]
 800f0fc:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800f100:	683b      	ldr	r3, [r7, #0]
 800f102:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800f104:	693a      	ldr	r2, [r7, #16]
 800f106:	3208      	adds	r2, #8
        etharp_raw(netif,
 800f108:	2102      	movs	r1, #2
 800f10a:	9103      	str	r1, [sp, #12]
 800f10c:	f107 010c 	add.w	r1, r7, #12
 800f110:	9102      	str	r1, [sp, #8]
 800f112:	9201      	str	r2, [sp, #4]
 800f114:	9300      	str	r3, [sp, #0]
 800f116:	462b      	mov	r3, r5
 800f118:	4622      	mov	r2, r4
 800f11a:	4601      	mov	r1, r0
 800f11c:	6838      	ldr	r0, [r7, #0]
 800f11e:	f000 faeb 	bl	800f6f8 <etharp_raw>
      break;
 800f122:	e001      	b.n	800f128 <etharp_input+0xf8>
      break;
 800f124:	bf00      	nop
 800f126:	e000      	b.n	800f12a <etharp_input+0xfa>
      break;
 800f128:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800f12a:	6878      	ldr	r0, [r7, #4]
 800f12c:	f7f9 fc04 	bl	8008938 <pbuf_free>
}
 800f130:	3718      	adds	r7, #24
 800f132:	46bd      	mov	sp, r7
 800f134:	bdb0      	pop	{r4, r5, r7, pc}
 800f136:	bf00      	nop
 800f138:	08016030 	.word	0x08016030
 800f13c:	08016180 	.word	0x08016180
 800f140:	080160a8 	.word	0x080160a8

0800f144 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800f144:	b580      	push	{r7, lr}
 800f146:	b086      	sub	sp, #24
 800f148:	af02      	add	r7, sp, #8
 800f14a:	60f8      	str	r0, [r7, #12]
 800f14c:	60b9      	str	r1, [r7, #8]
 800f14e:	4613      	mov	r3, r2
 800f150:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800f152:	79fa      	ldrb	r2, [r7, #7]
 800f154:	4944      	ldr	r1, [pc, #272]	; (800f268 <etharp_output_to_arp_index+0x124>)
 800f156:	4613      	mov	r3, r2
 800f158:	005b      	lsls	r3, r3, #1
 800f15a:	4413      	add	r3, r2
 800f15c:	00db      	lsls	r3, r3, #3
 800f15e:	440b      	add	r3, r1
 800f160:	3314      	adds	r3, #20
 800f162:	781b      	ldrb	r3, [r3, #0]
 800f164:	2b01      	cmp	r3, #1
 800f166:	d806      	bhi.n	800f176 <etharp_output_to_arp_index+0x32>
 800f168:	4b40      	ldr	r3, [pc, #256]	; (800f26c <etharp_output_to_arp_index+0x128>)
 800f16a:	f240 22ee 	movw	r2, #750	; 0x2ee
 800f16e:	4940      	ldr	r1, [pc, #256]	; (800f270 <etharp_output_to_arp_index+0x12c>)
 800f170:	4840      	ldr	r0, [pc, #256]	; (800f274 <etharp_output_to_arp_index+0x130>)
 800f172:	f002 fdd9 	bl	8011d28 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800f176:	79fa      	ldrb	r2, [r7, #7]
 800f178:	493b      	ldr	r1, [pc, #236]	; (800f268 <etharp_output_to_arp_index+0x124>)
 800f17a:	4613      	mov	r3, r2
 800f17c:	005b      	lsls	r3, r3, #1
 800f17e:	4413      	add	r3, r2
 800f180:	00db      	lsls	r3, r3, #3
 800f182:	440b      	add	r3, r1
 800f184:	3314      	adds	r3, #20
 800f186:	781b      	ldrb	r3, [r3, #0]
 800f188:	2b02      	cmp	r3, #2
 800f18a:	d153      	bne.n	800f234 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800f18c:	79fa      	ldrb	r2, [r7, #7]
 800f18e:	4936      	ldr	r1, [pc, #216]	; (800f268 <etharp_output_to_arp_index+0x124>)
 800f190:	4613      	mov	r3, r2
 800f192:	005b      	lsls	r3, r3, #1
 800f194:	4413      	add	r3, r2
 800f196:	00db      	lsls	r3, r3, #3
 800f198:	440b      	add	r3, r1
 800f19a:	3312      	adds	r3, #18
 800f19c:	881b      	ldrh	r3, [r3, #0]
 800f19e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800f1a2:	d919      	bls.n	800f1d8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800f1a4:	79fa      	ldrb	r2, [r7, #7]
 800f1a6:	4613      	mov	r3, r2
 800f1a8:	005b      	lsls	r3, r3, #1
 800f1aa:	4413      	add	r3, r2
 800f1ac:	00db      	lsls	r3, r3, #3
 800f1ae:	4a2e      	ldr	r2, [pc, #184]	; (800f268 <etharp_output_to_arp_index+0x124>)
 800f1b0:	4413      	add	r3, r2
 800f1b2:	3304      	adds	r3, #4
 800f1b4:	4619      	mov	r1, r3
 800f1b6:	68f8      	ldr	r0, [r7, #12]
 800f1b8:	f000 fb4c 	bl	800f854 <etharp_request>
 800f1bc:	4603      	mov	r3, r0
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d138      	bne.n	800f234 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f1c2:	79fa      	ldrb	r2, [r7, #7]
 800f1c4:	4928      	ldr	r1, [pc, #160]	; (800f268 <etharp_output_to_arp_index+0x124>)
 800f1c6:	4613      	mov	r3, r2
 800f1c8:	005b      	lsls	r3, r3, #1
 800f1ca:	4413      	add	r3, r2
 800f1cc:	00db      	lsls	r3, r3, #3
 800f1ce:	440b      	add	r3, r1
 800f1d0:	3314      	adds	r3, #20
 800f1d2:	2203      	movs	r2, #3
 800f1d4:	701a      	strb	r2, [r3, #0]
 800f1d6:	e02d      	b.n	800f234 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800f1d8:	79fa      	ldrb	r2, [r7, #7]
 800f1da:	4923      	ldr	r1, [pc, #140]	; (800f268 <etharp_output_to_arp_index+0x124>)
 800f1dc:	4613      	mov	r3, r2
 800f1de:	005b      	lsls	r3, r3, #1
 800f1e0:	4413      	add	r3, r2
 800f1e2:	00db      	lsls	r3, r3, #3
 800f1e4:	440b      	add	r3, r1
 800f1e6:	3312      	adds	r3, #18
 800f1e8:	881b      	ldrh	r3, [r3, #0]
 800f1ea:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800f1ee:	d321      	bcc.n	800f234 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f1f0:	79fa      	ldrb	r2, [r7, #7]
 800f1f2:	4613      	mov	r3, r2
 800f1f4:	005b      	lsls	r3, r3, #1
 800f1f6:	4413      	add	r3, r2
 800f1f8:	00db      	lsls	r3, r3, #3
 800f1fa:	4a1b      	ldr	r2, [pc, #108]	; (800f268 <etharp_output_to_arp_index+0x124>)
 800f1fc:	4413      	add	r3, r2
 800f1fe:	1d19      	adds	r1, r3, #4
 800f200:	79fa      	ldrb	r2, [r7, #7]
 800f202:	4613      	mov	r3, r2
 800f204:	005b      	lsls	r3, r3, #1
 800f206:	4413      	add	r3, r2
 800f208:	00db      	lsls	r3, r3, #3
 800f20a:	3308      	adds	r3, #8
 800f20c:	4a16      	ldr	r2, [pc, #88]	; (800f268 <etharp_output_to_arp_index+0x124>)
 800f20e:	4413      	add	r3, r2
 800f210:	3304      	adds	r3, #4
 800f212:	461a      	mov	r2, r3
 800f214:	68f8      	ldr	r0, [r7, #12]
 800f216:	f000 fafb 	bl	800f810 <etharp_request_dst>
 800f21a:	4603      	mov	r3, r0
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d109      	bne.n	800f234 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f220:	79fa      	ldrb	r2, [r7, #7]
 800f222:	4911      	ldr	r1, [pc, #68]	; (800f268 <etharp_output_to_arp_index+0x124>)
 800f224:	4613      	mov	r3, r2
 800f226:	005b      	lsls	r3, r3, #1
 800f228:	4413      	add	r3, r2
 800f22a:	00db      	lsls	r3, r3, #3
 800f22c:	440b      	add	r3, r1
 800f22e:	3314      	adds	r3, #20
 800f230:	2203      	movs	r2, #3
 800f232:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800f23a:	79fa      	ldrb	r2, [r7, #7]
 800f23c:	4613      	mov	r3, r2
 800f23e:	005b      	lsls	r3, r3, #1
 800f240:	4413      	add	r3, r2
 800f242:	00db      	lsls	r3, r3, #3
 800f244:	3308      	adds	r3, #8
 800f246:	4a08      	ldr	r2, [pc, #32]	; (800f268 <etharp_output_to_arp_index+0x124>)
 800f248:	4413      	add	r3, r2
 800f24a:	3304      	adds	r3, #4
 800f24c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f250:	9200      	str	r2, [sp, #0]
 800f252:	460a      	mov	r2, r1
 800f254:	68b9      	ldr	r1, [r7, #8]
 800f256:	68f8      	ldr	r0, [r7, #12]
 800f258:	f001 fe40 	bl	8010edc <ethernet_output>
 800f25c:	4603      	mov	r3, r0
}
 800f25e:	4618      	mov	r0, r3
 800f260:	3710      	adds	r7, #16
 800f262:	46bd      	mov	sp, r7
 800f264:	bd80      	pop	{r7, pc}
 800f266:	bf00      	nop
 800f268:	2000a830 	.word	0x2000a830
 800f26c:	08016030 	.word	0x08016030
 800f270:	080161a0 	.word	0x080161a0
 800f274:	080160a8 	.word	0x080160a8

0800f278 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	b08a      	sub	sp, #40	; 0x28
 800f27c:	af02      	add	r7, sp, #8
 800f27e:	60f8      	str	r0, [r7, #12]
 800f280:	60b9      	str	r1, [r7, #8]
 800f282:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d106      	bne.n	800f29c <etharp_output+0x24>
 800f28e:	4b73      	ldr	r3, [pc, #460]	; (800f45c <etharp_output+0x1e4>)
 800f290:	f240 321e 	movw	r2, #798	; 0x31e
 800f294:	4972      	ldr	r1, [pc, #456]	; (800f460 <etharp_output+0x1e8>)
 800f296:	4873      	ldr	r0, [pc, #460]	; (800f464 <etharp_output+0x1ec>)
 800f298:	f002 fd46 	bl	8011d28 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800f29c:	68bb      	ldr	r3, [r7, #8]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d106      	bne.n	800f2b0 <etharp_output+0x38>
 800f2a2:	4b6e      	ldr	r3, [pc, #440]	; (800f45c <etharp_output+0x1e4>)
 800f2a4:	f240 321f 	movw	r2, #799	; 0x31f
 800f2a8:	496f      	ldr	r1, [pc, #444]	; (800f468 <etharp_output+0x1f0>)
 800f2aa:	486e      	ldr	r0, [pc, #440]	; (800f464 <etharp_output+0x1ec>)
 800f2ac:	f002 fd3c 	bl	8011d28 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d106      	bne.n	800f2c4 <etharp_output+0x4c>
 800f2b6:	4b69      	ldr	r3, [pc, #420]	; (800f45c <etharp_output+0x1e4>)
 800f2b8:	f44f 7248 	mov.w	r2, #800	; 0x320
 800f2bc:	496b      	ldr	r1, [pc, #428]	; (800f46c <etharp_output+0x1f4>)
 800f2be:	4869      	ldr	r0, [pc, #420]	; (800f464 <etharp_output+0x1ec>)
 800f2c0:	f002 fd32 	bl	8011d28 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	68f9      	ldr	r1, [r7, #12]
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	f000 fef8 	bl	80100c0 <ip4_addr_isbroadcast_u32>
 800f2d0:	4603      	mov	r3, r0
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d002      	beq.n	800f2dc <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800f2d6:	4b66      	ldr	r3, [pc, #408]	; (800f470 <etharp_output+0x1f8>)
 800f2d8:	61fb      	str	r3, [r7, #28]
 800f2da:	e0af      	b.n	800f43c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f2e4:	2be0      	cmp	r3, #224	; 0xe0
 800f2e6:	d118      	bne.n	800f31a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800f2e8:	2301      	movs	r3, #1
 800f2ea:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800f2f0:	235e      	movs	r3, #94	; 0x5e
 800f2f2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	3301      	adds	r3, #1
 800f2f8:	781b      	ldrb	r3, [r3, #0]
 800f2fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f2fe:	b2db      	uxtb	r3, r3
 800f300:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	3302      	adds	r3, #2
 800f306:	781b      	ldrb	r3, [r3, #0]
 800f308:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	3303      	adds	r3, #3
 800f30e:	781b      	ldrb	r3, [r3, #0]
 800f310:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800f312:	f107 0310 	add.w	r3, r7, #16
 800f316:	61fb      	str	r3, [r7, #28]
 800f318:	e090      	b.n	800f43c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	681a      	ldr	r2, [r3, #0]
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	3304      	adds	r3, #4
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	405a      	eors	r2, r3
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	3308      	adds	r3, #8
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	4013      	ands	r3, r2
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d012      	beq.n	800f358 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f338:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800f33c:	4293      	cmp	r3, r2
 800f33e:	d00b      	beq.n	800f358 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	330c      	adds	r3, #12
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d003      	beq.n	800f352 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	330c      	adds	r3, #12
 800f34e:	61bb      	str	r3, [r7, #24]
 800f350:	e002      	b.n	800f358 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800f352:	f06f 0303 	mvn.w	r3, #3
 800f356:	e07d      	b.n	800f454 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f358:	4b46      	ldr	r3, [pc, #280]	; (800f474 <etharp_output+0x1fc>)
 800f35a:	781b      	ldrb	r3, [r3, #0]
 800f35c:	4619      	mov	r1, r3
 800f35e:	4a46      	ldr	r2, [pc, #280]	; (800f478 <etharp_output+0x200>)
 800f360:	460b      	mov	r3, r1
 800f362:	005b      	lsls	r3, r3, #1
 800f364:	440b      	add	r3, r1
 800f366:	00db      	lsls	r3, r3, #3
 800f368:	4413      	add	r3, r2
 800f36a:	3314      	adds	r3, #20
 800f36c:	781b      	ldrb	r3, [r3, #0]
 800f36e:	2b01      	cmp	r3, #1
 800f370:	d925      	bls.n	800f3be <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f372:	4b40      	ldr	r3, [pc, #256]	; (800f474 <etharp_output+0x1fc>)
 800f374:	781b      	ldrb	r3, [r3, #0]
 800f376:	4619      	mov	r1, r3
 800f378:	4a3f      	ldr	r2, [pc, #252]	; (800f478 <etharp_output+0x200>)
 800f37a:	460b      	mov	r3, r1
 800f37c:	005b      	lsls	r3, r3, #1
 800f37e:	440b      	add	r3, r1
 800f380:	00db      	lsls	r3, r3, #3
 800f382:	4413      	add	r3, r2
 800f384:	3308      	adds	r3, #8
 800f386:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f388:	68fa      	ldr	r2, [r7, #12]
 800f38a:	429a      	cmp	r2, r3
 800f38c:	d117      	bne.n	800f3be <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800f38e:	69bb      	ldr	r3, [r7, #24]
 800f390:	681a      	ldr	r2, [r3, #0]
 800f392:	4b38      	ldr	r3, [pc, #224]	; (800f474 <etharp_output+0x1fc>)
 800f394:	781b      	ldrb	r3, [r3, #0]
 800f396:	4618      	mov	r0, r3
 800f398:	4937      	ldr	r1, [pc, #220]	; (800f478 <etharp_output+0x200>)
 800f39a:	4603      	mov	r3, r0
 800f39c:	005b      	lsls	r3, r3, #1
 800f39e:	4403      	add	r3, r0
 800f3a0:	00db      	lsls	r3, r3, #3
 800f3a2:	440b      	add	r3, r1
 800f3a4:	3304      	adds	r3, #4
 800f3a6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f3a8:	429a      	cmp	r2, r3
 800f3aa:	d108      	bne.n	800f3be <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800f3ac:	4b31      	ldr	r3, [pc, #196]	; (800f474 <etharp_output+0x1fc>)
 800f3ae:	781b      	ldrb	r3, [r3, #0]
 800f3b0:	461a      	mov	r2, r3
 800f3b2:	68b9      	ldr	r1, [r7, #8]
 800f3b4:	68f8      	ldr	r0, [r7, #12]
 800f3b6:	f7ff fec5 	bl	800f144 <etharp_output_to_arp_index>
 800f3ba:	4603      	mov	r3, r0
 800f3bc:	e04a      	b.n	800f454 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f3be:	2300      	movs	r3, #0
 800f3c0:	75fb      	strb	r3, [r7, #23]
 800f3c2:	e031      	b.n	800f428 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f3c4:	7dfa      	ldrb	r2, [r7, #23]
 800f3c6:	492c      	ldr	r1, [pc, #176]	; (800f478 <etharp_output+0x200>)
 800f3c8:	4613      	mov	r3, r2
 800f3ca:	005b      	lsls	r3, r3, #1
 800f3cc:	4413      	add	r3, r2
 800f3ce:	00db      	lsls	r3, r3, #3
 800f3d0:	440b      	add	r3, r1
 800f3d2:	3314      	adds	r3, #20
 800f3d4:	781b      	ldrb	r3, [r3, #0]
 800f3d6:	2b01      	cmp	r3, #1
 800f3d8:	d923      	bls.n	800f422 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800f3da:	7dfa      	ldrb	r2, [r7, #23]
 800f3dc:	4926      	ldr	r1, [pc, #152]	; (800f478 <etharp_output+0x200>)
 800f3de:	4613      	mov	r3, r2
 800f3e0:	005b      	lsls	r3, r3, #1
 800f3e2:	4413      	add	r3, r2
 800f3e4:	00db      	lsls	r3, r3, #3
 800f3e6:	440b      	add	r3, r1
 800f3e8:	3308      	adds	r3, #8
 800f3ea:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f3ec:	68fa      	ldr	r2, [r7, #12]
 800f3ee:	429a      	cmp	r2, r3
 800f3f0:	d117      	bne.n	800f422 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800f3f2:	69bb      	ldr	r3, [r7, #24]
 800f3f4:	6819      	ldr	r1, [r3, #0]
 800f3f6:	7dfa      	ldrb	r2, [r7, #23]
 800f3f8:	481f      	ldr	r0, [pc, #124]	; (800f478 <etharp_output+0x200>)
 800f3fa:	4613      	mov	r3, r2
 800f3fc:	005b      	lsls	r3, r3, #1
 800f3fe:	4413      	add	r3, r2
 800f400:	00db      	lsls	r3, r3, #3
 800f402:	4403      	add	r3, r0
 800f404:	3304      	adds	r3, #4
 800f406:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800f408:	4299      	cmp	r1, r3
 800f40a:	d10a      	bne.n	800f422 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800f40c:	4a19      	ldr	r2, [pc, #100]	; (800f474 <etharp_output+0x1fc>)
 800f40e:	7dfb      	ldrb	r3, [r7, #23]
 800f410:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800f412:	7dfb      	ldrb	r3, [r7, #23]
 800f414:	461a      	mov	r2, r3
 800f416:	68b9      	ldr	r1, [r7, #8]
 800f418:	68f8      	ldr	r0, [r7, #12]
 800f41a:	f7ff fe93 	bl	800f144 <etharp_output_to_arp_index>
 800f41e:	4603      	mov	r3, r0
 800f420:	e018      	b.n	800f454 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f422:	7dfb      	ldrb	r3, [r7, #23]
 800f424:	3301      	adds	r3, #1
 800f426:	75fb      	strb	r3, [r7, #23]
 800f428:	7dfb      	ldrb	r3, [r7, #23]
 800f42a:	2b09      	cmp	r3, #9
 800f42c:	d9ca      	bls.n	800f3c4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800f42e:	68ba      	ldr	r2, [r7, #8]
 800f430:	69b9      	ldr	r1, [r7, #24]
 800f432:	68f8      	ldr	r0, [r7, #12]
 800f434:	f000 f822 	bl	800f47c <etharp_query>
 800f438:	4603      	mov	r3, r0
 800f43a:	e00b      	b.n	800f454 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800f442:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f446:	9300      	str	r3, [sp, #0]
 800f448:	69fb      	ldr	r3, [r7, #28]
 800f44a:	68b9      	ldr	r1, [r7, #8]
 800f44c:	68f8      	ldr	r0, [r7, #12]
 800f44e:	f001 fd45 	bl	8010edc <ethernet_output>
 800f452:	4603      	mov	r3, r0
}
 800f454:	4618      	mov	r0, r3
 800f456:	3720      	adds	r7, #32
 800f458:	46bd      	mov	sp, r7
 800f45a:	bd80      	pop	{r7, pc}
 800f45c:	08016030 	.word	0x08016030
 800f460:	08016180 	.word	0x08016180
 800f464:	080160a8 	.word	0x080160a8
 800f468:	080161d0 	.word	0x080161d0
 800f46c:	08016170 	.word	0x08016170
 800f470:	080167f0 	.word	0x080167f0
 800f474:	2000a920 	.word	0x2000a920
 800f478:	2000a830 	.word	0x2000a830

0800f47c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b08c      	sub	sp, #48	; 0x30
 800f480:	af02      	add	r7, sp, #8
 800f482:	60f8      	str	r0, [r7, #12]
 800f484:	60b9      	str	r1, [r7, #8]
 800f486:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	3326      	adds	r3, #38	; 0x26
 800f48c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800f48e:	23ff      	movs	r3, #255	; 0xff
 800f490:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800f494:	2300      	movs	r3, #0
 800f496:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f498:	68bb      	ldr	r3, [r7, #8]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	68f9      	ldr	r1, [r7, #12]
 800f49e:	4618      	mov	r0, r3
 800f4a0:	f000 fe0e 	bl	80100c0 <ip4_addr_isbroadcast_u32>
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d10c      	bne.n	800f4c4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f4aa:	68bb      	ldr	r3, [r7, #8]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f4b2:	2be0      	cmp	r3, #224	; 0xe0
 800f4b4:	d006      	beq.n	800f4c4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f4b6:	68bb      	ldr	r3, [r7, #8]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d003      	beq.n	800f4c4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800f4bc:	68bb      	ldr	r3, [r7, #8]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d102      	bne.n	800f4ca <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f4c4:	f06f 030f 	mvn.w	r3, #15
 800f4c8:	e101      	b.n	800f6ce <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800f4ca:	68fa      	ldr	r2, [r7, #12]
 800f4cc:	2101      	movs	r1, #1
 800f4ce:	68b8      	ldr	r0, [r7, #8]
 800f4d0:	f7ff fb60 	bl	800eb94 <etharp_find_entry>
 800f4d4:	4603      	mov	r3, r0
 800f4d6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800f4d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	da02      	bge.n	800f4e6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800f4e0:	8a7b      	ldrh	r3, [r7, #18]
 800f4e2:	b25b      	sxtb	r3, r3
 800f4e4:	e0f3      	b.n	800f6ce <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800f4e6:	8a7b      	ldrh	r3, [r7, #18]
 800f4e8:	2b7e      	cmp	r3, #126	; 0x7e
 800f4ea:	d906      	bls.n	800f4fa <etharp_query+0x7e>
 800f4ec:	4b7a      	ldr	r3, [pc, #488]	; (800f6d8 <etharp_query+0x25c>)
 800f4ee:	f240 32c1 	movw	r2, #961	; 0x3c1
 800f4f2:	497a      	ldr	r1, [pc, #488]	; (800f6dc <etharp_query+0x260>)
 800f4f4:	487a      	ldr	r0, [pc, #488]	; (800f6e0 <etharp_query+0x264>)
 800f4f6:	f002 fc17 	bl	8011d28 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800f4fa:	8a7b      	ldrh	r3, [r7, #18]
 800f4fc:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800f4fe:	7c7a      	ldrb	r2, [r7, #17]
 800f500:	4978      	ldr	r1, [pc, #480]	; (800f6e4 <etharp_query+0x268>)
 800f502:	4613      	mov	r3, r2
 800f504:	005b      	lsls	r3, r3, #1
 800f506:	4413      	add	r3, r2
 800f508:	00db      	lsls	r3, r3, #3
 800f50a:	440b      	add	r3, r1
 800f50c:	3314      	adds	r3, #20
 800f50e:	781b      	ldrb	r3, [r3, #0]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d115      	bne.n	800f540 <etharp_query+0xc4>
    is_new_entry = 1;
 800f514:	2301      	movs	r3, #1
 800f516:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800f518:	7c7a      	ldrb	r2, [r7, #17]
 800f51a:	4972      	ldr	r1, [pc, #456]	; (800f6e4 <etharp_query+0x268>)
 800f51c:	4613      	mov	r3, r2
 800f51e:	005b      	lsls	r3, r3, #1
 800f520:	4413      	add	r3, r2
 800f522:	00db      	lsls	r3, r3, #3
 800f524:	440b      	add	r3, r1
 800f526:	3314      	adds	r3, #20
 800f528:	2201      	movs	r2, #1
 800f52a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800f52c:	7c7a      	ldrb	r2, [r7, #17]
 800f52e:	496d      	ldr	r1, [pc, #436]	; (800f6e4 <etharp_query+0x268>)
 800f530:	4613      	mov	r3, r2
 800f532:	005b      	lsls	r3, r3, #1
 800f534:	4413      	add	r3, r2
 800f536:	00db      	lsls	r3, r3, #3
 800f538:	440b      	add	r3, r1
 800f53a:	3308      	adds	r3, #8
 800f53c:	68fa      	ldr	r2, [r7, #12]
 800f53e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800f540:	7c7a      	ldrb	r2, [r7, #17]
 800f542:	4968      	ldr	r1, [pc, #416]	; (800f6e4 <etharp_query+0x268>)
 800f544:	4613      	mov	r3, r2
 800f546:	005b      	lsls	r3, r3, #1
 800f548:	4413      	add	r3, r2
 800f54a:	00db      	lsls	r3, r3, #3
 800f54c:	440b      	add	r3, r1
 800f54e:	3314      	adds	r3, #20
 800f550:	781b      	ldrb	r3, [r3, #0]
 800f552:	2b01      	cmp	r3, #1
 800f554:	d011      	beq.n	800f57a <etharp_query+0xfe>
 800f556:	7c7a      	ldrb	r2, [r7, #17]
 800f558:	4962      	ldr	r1, [pc, #392]	; (800f6e4 <etharp_query+0x268>)
 800f55a:	4613      	mov	r3, r2
 800f55c:	005b      	lsls	r3, r3, #1
 800f55e:	4413      	add	r3, r2
 800f560:	00db      	lsls	r3, r3, #3
 800f562:	440b      	add	r3, r1
 800f564:	3314      	adds	r3, #20
 800f566:	781b      	ldrb	r3, [r3, #0]
 800f568:	2b01      	cmp	r3, #1
 800f56a:	d806      	bhi.n	800f57a <etharp_query+0xfe>
 800f56c:	4b5a      	ldr	r3, [pc, #360]	; (800f6d8 <etharp_query+0x25c>)
 800f56e:	f240 32cd 	movw	r2, #973	; 0x3cd
 800f572:	495d      	ldr	r1, [pc, #372]	; (800f6e8 <etharp_query+0x26c>)
 800f574:	485a      	ldr	r0, [pc, #360]	; (800f6e0 <etharp_query+0x264>)
 800f576:	f002 fbd7 	bl	8011d28 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800f57a:	6a3b      	ldr	r3, [r7, #32]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d102      	bne.n	800f586 <etharp_query+0x10a>
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d10c      	bne.n	800f5a0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800f586:	68b9      	ldr	r1, [r7, #8]
 800f588:	68f8      	ldr	r0, [r7, #12]
 800f58a:	f000 f963 	bl	800f854 <etharp_request>
 800f58e:	4603      	mov	r3, r0
 800f590:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d102      	bne.n	800f5a0 <etharp_query+0x124>
      return result;
 800f59a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f59e:	e096      	b.n	800f6ce <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d106      	bne.n	800f5b4 <etharp_query+0x138>
 800f5a6:	4b4c      	ldr	r3, [pc, #304]	; (800f6d8 <etharp_query+0x25c>)
 800f5a8:	f240 32e1 	movw	r2, #993	; 0x3e1
 800f5ac:	494f      	ldr	r1, [pc, #316]	; (800f6ec <etharp_query+0x270>)
 800f5ae:	484c      	ldr	r0, [pc, #304]	; (800f6e0 <etharp_query+0x264>)
 800f5b0:	f002 fbba 	bl	8011d28 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800f5b4:	7c7a      	ldrb	r2, [r7, #17]
 800f5b6:	494b      	ldr	r1, [pc, #300]	; (800f6e4 <etharp_query+0x268>)
 800f5b8:	4613      	mov	r3, r2
 800f5ba:	005b      	lsls	r3, r3, #1
 800f5bc:	4413      	add	r3, r2
 800f5be:	00db      	lsls	r3, r3, #3
 800f5c0:	440b      	add	r3, r1
 800f5c2:	3314      	adds	r3, #20
 800f5c4:	781b      	ldrb	r3, [r3, #0]
 800f5c6:	2b01      	cmp	r3, #1
 800f5c8:	d917      	bls.n	800f5fa <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800f5ca:	4a49      	ldr	r2, [pc, #292]	; (800f6f0 <etharp_query+0x274>)
 800f5cc:	7c7b      	ldrb	r3, [r7, #17]
 800f5ce:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800f5d0:	7c7a      	ldrb	r2, [r7, #17]
 800f5d2:	4613      	mov	r3, r2
 800f5d4:	005b      	lsls	r3, r3, #1
 800f5d6:	4413      	add	r3, r2
 800f5d8:	00db      	lsls	r3, r3, #3
 800f5da:	3308      	adds	r3, #8
 800f5dc:	4a41      	ldr	r2, [pc, #260]	; (800f6e4 <etharp_query+0x268>)
 800f5de:	4413      	add	r3, r2
 800f5e0:	3304      	adds	r3, #4
 800f5e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f5e6:	9200      	str	r2, [sp, #0]
 800f5e8:	697a      	ldr	r2, [r7, #20]
 800f5ea:	6879      	ldr	r1, [r7, #4]
 800f5ec:	68f8      	ldr	r0, [r7, #12]
 800f5ee:	f001 fc75 	bl	8010edc <ethernet_output>
 800f5f2:	4603      	mov	r3, r0
 800f5f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f5f8:	e067      	b.n	800f6ca <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f5fa:	7c7a      	ldrb	r2, [r7, #17]
 800f5fc:	4939      	ldr	r1, [pc, #228]	; (800f6e4 <etharp_query+0x268>)
 800f5fe:	4613      	mov	r3, r2
 800f600:	005b      	lsls	r3, r3, #1
 800f602:	4413      	add	r3, r2
 800f604:	00db      	lsls	r3, r3, #3
 800f606:	440b      	add	r3, r1
 800f608:	3314      	adds	r3, #20
 800f60a:	781b      	ldrb	r3, [r3, #0]
 800f60c:	2b01      	cmp	r3, #1
 800f60e:	d15c      	bne.n	800f6ca <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800f610:	2300      	movs	r3, #0
 800f612:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f618:	e01c      	b.n	800f654 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800f61a:	69fb      	ldr	r3, [r7, #28]
 800f61c:	895a      	ldrh	r2, [r3, #10]
 800f61e:	69fb      	ldr	r3, [r7, #28]
 800f620:	891b      	ldrh	r3, [r3, #8]
 800f622:	429a      	cmp	r2, r3
 800f624:	d10a      	bne.n	800f63c <etharp_query+0x1c0>
 800f626:	69fb      	ldr	r3, [r7, #28]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d006      	beq.n	800f63c <etharp_query+0x1c0>
 800f62e:	4b2a      	ldr	r3, [pc, #168]	; (800f6d8 <etharp_query+0x25c>)
 800f630:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800f634:	492f      	ldr	r1, [pc, #188]	; (800f6f4 <etharp_query+0x278>)
 800f636:	482a      	ldr	r0, [pc, #168]	; (800f6e0 <etharp_query+0x264>)
 800f638:	f002 fb76 	bl	8011d28 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800f63c:	69fb      	ldr	r3, [r7, #28]
 800f63e:	7b1b      	ldrb	r3, [r3, #12]
 800f640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f644:	2b00      	cmp	r3, #0
 800f646:	d002      	beq.n	800f64e <etharp_query+0x1d2>
        copy_needed = 1;
 800f648:	2301      	movs	r3, #1
 800f64a:	61bb      	str	r3, [r7, #24]
        break;
 800f64c:	e005      	b.n	800f65a <etharp_query+0x1de>
      }
      p = p->next;
 800f64e:	69fb      	ldr	r3, [r7, #28]
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f654:	69fb      	ldr	r3, [r7, #28]
 800f656:	2b00      	cmp	r3, #0
 800f658:	d1df      	bne.n	800f61a <etharp_query+0x19e>
    }
    if (copy_needed) {
 800f65a:	69bb      	ldr	r3, [r7, #24]
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d007      	beq.n	800f670 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800f660:	687a      	ldr	r2, [r7, #4]
 800f662:	f44f 7120 	mov.w	r1, #640	; 0x280
 800f666:	200e      	movs	r0, #14
 800f668:	f7f9 fbc2 	bl	8008df0 <pbuf_clone>
 800f66c:	61f8      	str	r0, [r7, #28]
 800f66e:	e004      	b.n	800f67a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800f674:	69f8      	ldr	r0, [r7, #28]
 800f676:	f7f9 f9ff 	bl	8008a78 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800f67a:	69fb      	ldr	r3, [r7, #28]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d021      	beq.n	800f6c4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800f680:	7c7a      	ldrb	r2, [r7, #17]
 800f682:	4918      	ldr	r1, [pc, #96]	; (800f6e4 <etharp_query+0x268>)
 800f684:	4613      	mov	r3, r2
 800f686:	005b      	lsls	r3, r3, #1
 800f688:	4413      	add	r3, r2
 800f68a:	00db      	lsls	r3, r3, #3
 800f68c:	440b      	add	r3, r1
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d00a      	beq.n	800f6aa <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800f694:	7c7a      	ldrb	r2, [r7, #17]
 800f696:	4913      	ldr	r1, [pc, #76]	; (800f6e4 <etharp_query+0x268>)
 800f698:	4613      	mov	r3, r2
 800f69a:	005b      	lsls	r3, r3, #1
 800f69c:	4413      	add	r3, r2
 800f69e:	00db      	lsls	r3, r3, #3
 800f6a0:	440b      	add	r3, r1
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	f7f9 f947 	bl	8008938 <pbuf_free>
      }
      arp_table[i].q = p;
 800f6aa:	7c7a      	ldrb	r2, [r7, #17]
 800f6ac:	490d      	ldr	r1, [pc, #52]	; (800f6e4 <etharp_query+0x268>)
 800f6ae:	4613      	mov	r3, r2
 800f6b0:	005b      	lsls	r3, r3, #1
 800f6b2:	4413      	add	r3, r2
 800f6b4:	00db      	lsls	r3, r3, #3
 800f6b6:	440b      	add	r3, r1
 800f6b8:	69fa      	ldr	r2, [r7, #28]
 800f6ba:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800f6bc:	2300      	movs	r3, #0
 800f6be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f6c2:	e002      	b.n	800f6ca <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800f6c4:	23ff      	movs	r3, #255	; 0xff
 800f6c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800f6ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	3728      	adds	r7, #40	; 0x28
 800f6d2:	46bd      	mov	sp, r7
 800f6d4:	bd80      	pop	{r7, pc}
 800f6d6:	bf00      	nop
 800f6d8:	08016030 	.word	0x08016030
 800f6dc:	080161dc 	.word	0x080161dc
 800f6e0:	080160a8 	.word	0x080160a8
 800f6e4:	2000a830 	.word	0x2000a830
 800f6e8:	080161ec 	.word	0x080161ec
 800f6ec:	080161d0 	.word	0x080161d0
 800f6f0:	2000a920 	.word	0x2000a920
 800f6f4:	08016214 	.word	0x08016214

0800f6f8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b08a      	sub	sp, #40	; 0x28
 800f6fc:	af02      	add	r7, sp, #8
 800f6fe:	60f8      	str	r0, [r7, #12]
 800f700:	60b9      	str	r1, [r7, #8]
 800f702:	607a      	str	r2, [r7, #4]
 800f704:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800f706:	2300      	movs	r3, #0
 800f708:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d106      	bne.n	800f71e <etharp_raw+0x26>
 800f710:	4b3a      	ldr	r3, [pc, #232]	; (800f7fc <etharp_raw+0x104>)
 800f712:	f240 4257 	movw	r2, #1111	; 0x457
 800f716:	493a      	ldr	r1, [pc, #232]	; (800f800 <etharp_raw+0x108>)
 800f718:	483a      	ldr	r0, [pc, #232]	; (800f804 <etharp_raw+0x10c>)
 800f71a:	f002 fb05 	bl	8011d28 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800f71e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f722:	211c      	movs	r1, #28
 800f724:	200e      	movs	r0, #14
 800f726:	f7f8 fe23 	bl	8008370 <pbuf_alloc>
 800f72a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800f72c:	69bb      	ldr	r3, [r7, #24]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d102      	bne.n	800f738 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800f732:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f736:	e05d      	b.n	800f7f4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800f738:	69bb      	ldr	r3, [r7, #24]
 800f73a:	895b      	ldrh	r3, [r3, #10]
 800f73c:	2b1b      	cmp	r3, #27
 800f73e:	d806      	bhi.n	800f74e <etharp_raw+0x56>
 800f740:	4b2e      	ldr	r3, [pc, #184]	; (800f7fc <etharp_raw+0x104>)
 800f742:	f240 4262 	movw	r2, #1122	; 0x462
 800f746:	4930      	ldr	r1, [pc, #192]	; (800f808 <etharp_raw+0x110>)
 800f748:	482e      	ldr	r0, [pc, #184]	; (800f804 <etharp_raw+0x10c>)
 800f74a:	f002 faed 	bl	8011d28 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800f74e:	69bb      	ldr	r3, [r7, #24]
 800f750:	685b      	ldr	r3, [r3, #4]
 800f752:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800f754:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f756:	4618      	mov	r0, r3
 800f758:	f7f7 fd90 	bl	800727c <lwip_htons>
 800f75c:	4603      	mov	r3, r0
 800f75e:	461a      	mov	r2, r3
 800f760:	697b      	ldr	r3, [r7, #20]
 800f762:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f76a:	2b06      	cmp	r3, #6
 800f76c:	d006      	beq.n	800f77c <etharp_raw+0x84>
 800f76e:	4b23      	ldr	r3, [pc, #140]	; (800f7fc <etharp_raw+0x104>)
 800f770:	f240 4269 	movw	r2, #1129	; 0x469
 800f774:	4925      	ldr	r1, [pc, #148]	; (800f80c <etharp_raw+0x114>)
 800f776:	4823      	ldr	r0, [pc, #140]	; (800f804 <etharp_raw+0x10c>)
 800f778:	f002 fad6 	bl	8011d28 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800f77c:	697b      	ldr	r3, [r7, #20]
 800f77e:	3308      	adds	r3, #8
 800f780:	2206      	movs	r2, #6
 800f782:	6839      	ldr	r1, [r7, #0]
 800f784:	4618      	mov	r0, r3
 800f786:	f002 fc30 	bl	8011fea <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800f78a:	697b      	ldr	r3, [r7, #20]
 800f78c:	3312      	adds	r3, #18
 800f78e:	2206      	movs	r2, #6
 800f790:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f792:	4618      	mov	r0, r3
 800f794:	f002 fc29 	bl	8011fea <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800f798:	697b      	ldr	r3, [r7, #20]
 800f79a:	330e      	adds	r3, #14
 800f79c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f79e:	6812      	ldr	r2, [r2, #0]
 800f7a0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800f7a2:	697b      	ldr	r3, [r7, #20]
 800f7a4:	3318      	adds	r3, #24
 800f7a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f7a8:	6812      	ldr	r2, [r2, #0]
 800f7aa:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800f7ac:	697b      	ldr	r3, [r7, #20]
 800f7ae:	2200      	movs	r2, #0
 800f7b0:	701a      	strb	r2, [r3, #0]
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	f042 0201 	orr.w	r2, r2, #1
 800f7b8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800f7ba:	697b      	ldr	r3, [r7, #20]
 800f7bc:	2200      	movs	r2, #0
 800f7be:	f042 0208 	orr.w	r2, r2, #8
 800f7c2:	709a      	strb	r2, [r3, #2]
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800f7c8:	697b      	ldr	r3, [r7, #20]
 800f7ca:	2206      	movs	r2, #6
 800f7cc:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800f7ce:	697b      	ldr	r3, [r7, #20]
 800f7d0:	2204      	movs	r2, #4
 800f7d2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800f7d4:	f640 0306 	movw	r3, #2054	; 0x806
 800f7d8:	9300      	str	r3, [sp, #0]
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	68ba      	ldr	r2, [r7, #8]
 800f7de:	69b9      	ldr	r1, [r7, #24]
 800f7e0:	68f8      	ldr	r0, [r7, #12]
 800f7e2:	f001 fb7b 	bl	8010edc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800f7e6:	69b8      	ldr	r0, [r7, #24]
 800f7e8:	f7f9 f8a6 	bl	8008938 <pbuf_free>
  p = NULL;
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800f7f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	3720      	adds	r7, #32
 800f7f8:	46bd      	mov	sp, r7
 800f7fa:	bd80      	pop	{r7, pc}
 800f7fc:	08016030 	.word	0x08016030
 800f800:	08016180 	.word	0x08016180
 800f804:	080160a8 	.word	0x080160a8
 800f808:	08016230 	.word	0x08016230
 800f80c:	08016264 	.word	0x08016264

0800f810 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800f810:	b580      	push	{r7, lr}
 800f812:	b088      	sub	sp, #32
 800f814:	af04      	add	r7, sp, #16
 800f816:	60f8      	str	r0, [r7, #12]
 800f818:	60b9      	str	r1, [r7, #8]
 800f81a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f82c:	2201      	movs	r2, #1
 800f82e:	9203      	str	r2, [sp, #12]
 800f830:	68ba      	ldr	r2, [r7, #8]
 800f832:	9202      	str	r2, [sp, #8]
 800f834:	4a06      	ldr	r2, [pc, #24]	; (800f850 <etharp_request_dst+0x40>)
 800f836:	9201      	str	r2, [sp, #4]
 800f838:	9300      	str	r3, [sp, #0]
 800f83a:	4603      	mov	r3, r0
 800f83c:	687a      	ldr	r2, [r7, #4]
 800f83e:	68f8      	ldr	r0, [r7, #12]
 800f840:	f7ff ff5a 	bl	800f6f8 <etharp_raw>
 800f844:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800f846:	4618      	mov	r0, r3
 800f848:	3710      	adds	r7, #16
 800f84a:	46bd      	mov	sp, r7
 800f84c:	bd80      	pop	{r7, pc}
 800f84e:	bf00      	nop
 800f850:	080167f8 	.word	0x080167f8

0800f854 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800f854:	b580      	push	{r7, lr}
 800f856:	b082      	sub	sp, #8
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
 800f85c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800f85e:	4a05      	ldr	r2, [pc, #20]	; (800f874 <etharp_request+0x20>)
 800f860:	6839      	ldr	r1, [r7, #0]
 800f862:	6878      	ldr	r0, [r7, #4]
 800f864:	f7ff ffd4 	bl	800f810 <etharp_request_dst>
 800f868:	4603      	mov	r3, r0
}
 800f86a:	4618      	mov	r0, r3
 800f86c:	3708      	adds	r7, #8
 800f86e:	46bd      	mov	sp, r7
 800f870:	bd80      	pop	{r7, pc}
 800f872:	bf00      	nop
 800f874:	080167f0 	.word	0x080167f0

0800f878 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800f878:	b580      	push	{r7, lr}
 800f87a:	b08e      	sub	sp, #56	; 0x38
 800f87c:	af04      	add	r7, sp, #16
 800f87e:	6078      	str	r0, [r7, #4]
 800f880:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800f882:	4b79      	ldr	r3, [pc, #484]	; (800fa68 <icmp_input+0x1f0>)
 800f884:	689b      	ldr	r3, [r3, #8]
 800f886:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800f888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f88a:	781b      	ldrb	r3, [r3, #0]
 800f88c:	f003 030f 	and.w	r3, r3, #15
 800f890:	b2db      	uxtb	r3, r3
 800f892:	009b      	lsls	r3, r3, #2
 800f894:	b2db      	uxtb	r3, r3
 800f896:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800f898:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f89a:	2b13      	cmp	r3, #19
 800f89c:	f240 80cd 	bls.w	800fa3a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	895b      	ldrh	r3, [r3, #10]
 800f8a4:	2b03      	cmp	r3, #3
 800f8a6:	f240 80ca 	bls.w	800fa3e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	685b      	ldr	r3, [r3, #4]
 800f8ae:	781b      	ldrb	r3, [r3, #0]
 800f8b0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800f8b4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	f000 80b7 	beq.w	800fa2c <icmp_input+0x1b4>
 800f8be:	2b08      	cmp	r3, #8
 800f8c0:	f040 80b7 	bne.w	800fa32 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800f8c4:	4b69      	ldr	r3, [pc, #420]	; (800fa6c <icmp_input+0x1f4>)
 800f8c6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f8c8:	4b67      	ldr	r3, [pc, #412]	; (800fa68 <icmp_input+0x1f0>)
 800f8ca:	695b      	ldr	r3, [r3, #20]
 800f8cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f8d0:	2be0      	cmp	r3, #224	; 0xe0
 800f8d2:	f000 80bb 	beq.w	800fa4c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800f8d6:	4b64      	ldr	r3, [pc, #400]	; (800fa68 <icmp_input+0x1f0>)
 800f8d8:	695b      	ldr	r3, [r3, #20]
 800f8da:	4a63      	ldr	r2, [pc, #396]	; (800fa68 <icmp_input+0x1f0>)
 800f8dc:	6812      	ldr	r2, [r2, #0]
 800f8de:	4611      	mov	r1, r2
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	f000 fbed 	bl	80100c0 <ip4_addr_isbroadcast_u32>
 800f8e6:	4603      	mov	r3, r0
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	f040 80b1 	bne.w	800fa50 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	891b      	ldrh	r3, [r3, #8]
 800f8f2:	2b07      	cmp	r3, #7
 800f8f4:	f240 80a5 	bls.w	800fa42 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800f8f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f8fa:	330e      	adds	r3, #14
 800f8fc:	4619      	mov	r1, r3
 800f8fe:	6878      	ldr	r0, [r7, #4]
 800f900:	f7f8 ff84 	bl	800880c <pbuf_add_header>
 800f904:	4603      	mov	r3, r0
 800f906:	2b00      	cmp	r3, #0
 800f908:	d04b      	beq.n	800f9a2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	891a      	ldrh	r2, [r3, #8]
 800f90e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f910:	4413      	add	r3, r2
 800f912:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	891b      	ldrh	r3, [r3, #8]
 800f918:	8b7a      	ldrh	r2, [r7, #26]
 800f91a:	429a      	cmp	r2, r3
 800f91c:	f0c0 809a 	bcc.w	800fa54 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800f920:	8b7b      	ldrh	r3, [r7, #26]
 800f922:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f926:	4619      	mov	r1, r3
 800f928:	200e      	movs	r0, #14
 800f92a:	f7f8 fd21 	bl	8008370 <pbuf_alloc>
 800f92e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800f930:	697b      	ldr	r3, [r7, #20]
 800f932:	2b00      	cmp	r3, #0
 800f934:	f000 8090 	beq.w	800fa58 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800f938:	697b      	ldr	r3, [r7, #20]
 800f93a:	895b      	ldrh	r3, [r3, #10]
 800f93c:	461a      	mov	r2, r3
 800f93e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f940:	3308      	adds	r3, #8
 800f942:	429a      	cmp	r2, r3
 800f944:	d203      	bcs.n	800f94e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800f946:	6978      	ldr	r0, [r7, #20]
 800f948:	f7f8 fff6 	bl	8008938 <pbuf_free>
          goto icmperr;
 800f94c:	e085      	b.n	800fa5a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800f94e:	697b      	ldr	r3, [r7, #20]
 800f950:	685b      	ldr	r3, [r3, #4]
 800f952:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f954:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f956:	4618      	mov	r0, r3
 800f958:	f002 fb47 	bl	8011fea <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800f95c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f95e:	4619      	mov	r1, r3
 800f960:	6978      	ldr	r0, [r7, #20]
 800f962:	f7f8 ff63 	bl	800882c <pbuf_remove_header>
 800f966:	4603      	mov	r3, r0
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d009      	beq.n	800f980 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800f96c:	4b40      	ldr	r3, [pc, #256]	; (800fa70 <icmp_input+0x1f8>)
 800f96e:	22b6      	movs	r2, #182	; 0xb6
 800f970:	4940      	ldr	r1, [pc, #256]	; (800fa74 <icmp_input+0x1fc>)
 800f972:	4841      	ldr	r0, [pc, #260]	; (800fa78 <icmp_input+0x200>)
 800f974:	f002 f9d8 	bl	8011d28 <iprintf>
          pbuf_free(r);
 800f978:	6978      	ldr	r0, [r7, #20]
 800f97a:	f7f8 ffdd 	bl	8008938 <pbuf_free>
          goto icmperr;
 800f97e:	e06c      	b.n	800fa5a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800f980:	6879      	ldr	r1, [r7, #4]
 800f982:	6978      	ldr	r0, [r7, #20]
 800f984:	f7f9 f8f0 	bl	8008b68 <pbuf_copy>
 800f988:	4603      	mov	r3, r0
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d003      	beq.n	800f996 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800f98e:	6978      	ldr	r0, [r7, #20]
 800f990:	f7f8 ffd2 	bl	8008938 <pbuf_free>
          goto icmperr;
 800f994:	e061      	b.n	800fa5a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800f996:	6878      	ldr	r0, [r7, #4]
 800f998:	f7f8 ffce 	bl	8008938 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800f99c:	697b      	ldr	r3, [r7, #20]
 800f99e:	607b      	str	r3, [r7, #4]
 800f9a0:	e00f      	b.n	800f9c2 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800f9a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f9a4:	330e      	adds	r3, #14
 800f9a6:	4619      	mov	r1, r3
 800f9a8:	6878      	ldr	r0, [r7, #4]
 800f9aa:	f7f8 ff3f 	bl	800882c <pbuf_remove_header>
 800f9ae:	4603      	mov	r3, r0
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d006      	beq.n	800f9c2 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800f9b4:	4b2e      	ldr	r3, [pc, #184]	; (800fa70 <icmp_input+0x1f8>)
 800f9b6:	22c7      	movs	r2, #199	; 0xc7
 800f9b8:	4930      	ldr	r1, [pc, #192]	; (800fa7c <icmp_input+0x204>)
 800f9ba:	482f      	ldr	r0, [pc, #188]	; (800fa78 <icmp_input+0x200>)
 800f9bc:	f002 f9b4 	bl	8011d28 <iprintf>
          goto icmperr;
 800f9c0:	e04b      	b.n	800fa5a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	685b      	ldr	r3, [r3, #4]
 800f9c6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800f9c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f9ca:	4619      	mov	r1, r3
 800f9cc:	6878      	ldr	r0, [r7, #4]
 800f9ce:	f7f8 ff1d 	bl	800880c <pbuf_add_header>
 800f9d2:	4603      	mov	r3, r0
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d12b      	bne.n	800fa30 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	685b      	ldr	r3, [r3, #4]
 800f9dc:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800f9de:	69fb      	ldr	r3, [r7, #28]
 800f9e0:	681a      	ldr	r2, [r3, #0]
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800f9e6:	4b20      	ldr	r3, [pc, #128]	; (800fa68 <icmp_input+0x1f0>)
 800f9e8:	691a      	ldr	r2, [r3, #16]
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800f9ee:	693b      	ldr	r3, [r7, #16]
 800f9f0:	2200      	movs	r2, #0
 800f9f2:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800f9f4:	693b      	ldr	r3, [r7, #16]
 800f9f6:	2200      	movs	r2, #0
 800f9f8:	709a      	strb	r2, [r3, #2]
 800f9fa:	2200      	movs	r2, #0
 800f9fc:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	22ff      	movs	r2, #255	; 0xff
 800fa02:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	2200      	movs	r2, #0
 800fa08:	729a      	strb	r2, [r3, #10]
 800fa0a:	2200      	movs	r2, #0
 800fa0c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800fa0e:	683b      	ldr	r3, [r7, #0]
 800fa10:	9302      	str	r3, [sp, #8]
 800fa12:	2301      	movs	r3, #1
 800fa14:	9301      	str	r3, [sp, #4]
 800fa16:	2300      	movs	r3, #0
 800fa18:	9300      	str	r3, [sp, #0]
 800fa1a:	23ff      	movs	r3, #255	; 0xff
 800fa1c:	2200      	movs	r2, #0
 800fa1e:	69f9      	ldr	r1, [r7, #28]
 800fa20:	6878      	ldr	r0, [r7, #4]
 800fa22:	f000 fa75 	bl	800ff10 <ip4_output_if>
 800fa26:	4603      	mov	r3, r0
 800fa28:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800fa2a:	e001      	b.n	800fa30 <icmp_input+0x1b8>
      break;
 800fa2c:	bf00      	nop
 800fa2e:	e000      	b.n	800fa32 <icmp_input+0x1ba>
      break;
 800fa30:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800fa32:	6878      	ldr	r0, [r7, #4]
 800fa34:	f7f8 ff80 	bl	8008938 <pbuf_free>
  return;
 800fa38:	e013      	b.n	800fa62 <icmp_input+0x1ea>
    goto lenerr;
 800fa3a:	bf00      	nop
 800fa3c:	e002      	b.n	800fa44 <icmp_input+0x1cc>
    goto lenerr;
 800fa3e:	bf00      	nop
 800fa40:	e000      	b.n	800fa44 <icmp_input+0x1cc>
        goto lenerr;
 800fa42:	bf00      	nop
lenerr:
  pbuf_free(p);
 800fa44:	6878      	ldr	r0, [r7, #4]
 800fa46:	f7f8 ff77 	bl	8008938 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800fa4a:	e00a      	b.n	800fa62 <icmp_input+0x1ea>
        goto icmperr;
 800fa4c:	bf00      	nop
 800fa4e:	e004      	b.n	800fa5a <icmp_input+0x1e2>
        goto icmperr;
 800fa50:	bf00      	nop
 800fa52:	e002      	b.n	800fa5a <icmp_input+0x1e2>
          goto icmperr;
 800fa54:	bf00      	nop
 800fa56:	e000      	b.n	800fa5a <icmp_input+0x1e2>
          goto icmperr;
 800fa58:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800fa5a:	6878      	ldr	r0, [r7, #4]
 800fa5c:	f7f8 ff6c 	bl	8008938 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800fa60:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800fa62:	3728      	adds	r7, #40	; 0x28
 800fa64:	46bd      	mov	sp, r7
 800fa66:	bd80      	pop	{r7, pc}
 800fa68:	200050a0 	.word	0x200050a0
 800fa6c:	200050b4 	.word	0x200050b4
 800fa70:	080162a8 	.word	0x080162a8
 800fa74:	080162e0 	.word	0x080162e0
 800fa78:	08016318 	.word	0x08016318
 800fa7c:	08016340 	.word	0x08016340

0800fa80 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800fa80:	b580      	push	{r7, lr}
 800fa82:	b082      	sub	sp, #8
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
 800fa88:	460b      	mov	r3, r1
 800fa8a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800fa8c:	78fb      	ldrb	r3, [r7, #3]
 800fa8e:	461a      	mov	r2, r3
 800fa90:	2103      	movs	r1, #3
 800fa92:	6878      	ldr	r0, [r7, #4]
 800fa94:	f000 f814 	bl	800fac0 <icmp_send_response>
}
 800fa98:	bf00      	nop
 800fa9a:	3708      	adds	r7, #8
 800fa9c:	46bd      	mov	sp, r7
 800fa9e:	bd80      	pop	{r7, pc}

0800faa0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b082      	sub	sp, #8
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	6078      	str	r0, [r7, #4]
 800faa8:	460b      	mov	r3, r1
 800faaa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800faac:	78fb      	ldrb	r3, [r7, #3]
 800faae:	461a      	mov	r2, r3
 800fab0:	210b      	movs	r1, #11
 800fab2:	6878      	ldr	r0, [r7, #4]
 800fab4:	f000 f804 	bl	800fac0 <icmp_send_response>
}
 800fab8:	bf00      	nop
 800faba:	3708      	adds	r7, #8
 800fabc:	46bd      	mov	sp, r7
 800fabe:	bd80      	pop	{r7, pc}

0800fac0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b08c      	sub	sp, #48	; 0x30
 800fac4:	af04      	add	r7, sp, #16
 800fac6:	6078      	str	r0, [r7, #4]
 800fac8:	460b      	mov	r3, r1
 800faca:	70fb      	strb	r3, [r7, #3]
 800facc:	4613      	mov	r3, r2
 800face:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800fad0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fad4:	2124      	movs	r1, #36	; 0x24
 800fad6:	2022      	movs	r0, #34	; 0x22
 800fad8:	f7f8 fc4a 	bl	8008370 <pbuf_alloc>
 800fadc:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800fade:	69fb      	ldr	r3, [r7, #28]
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d04c      	beq.n	800fb7e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800fae4:	69fb      	ldr	r3, [r7, #28]
 800fae6:	895b      	ldrh	r3, [r3, #10]
 800fae8:	2b23      	cmp	r3, #35	; 0x23
 800faea:	d806      	bhi.n	800fafa <icmp_send_response+0x3a>
 800faec:	4b26      	ldr	r3, [pc, #152]	; (800fb88 <icmp_send_response+0xc8>)
 800faee:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800faf2:	4926      	ldr	r1, [pc, #152]	; (800fb8c <icmp_send_response+0xcc>)
 800faf4:	4826      	ldr	r0, [pc, #152]	; (800fb90 <icmp_send_response+0xd0>)
 800faf6:	f002 f917 	bl	8011d28 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	685b      	ldr	r3, [r3, #4]
 800fafe:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800fb00:	69fb      	ldr	r3, [r7, #28]
 800fb02:	685b      	ldr	r3, [r3, #4]
 800fb04:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800fb06:	697b      	ldr	r3, [r7, #20]
 800fb08:	78fa      	ldrb	r2, [r7, #3]
 800fb0a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800fb0c:	697b      	ldr	r3, [r7, #20]
 800fb0e:	78ba      	ldrb	r2, [r7, #2]
 800fb10:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800fb12:	697b      	ldr	r3, [r7, #20]
 800fb14:	2200      	movs	r2, #0
 800fb16:	711a      	strb	r2, [r3, #4]
 800fb18:	2200      	movs	r2, #0
 800fb1a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800fb1c:	697b      	ldr	r3, [r7, #20]
 800fb1e:	2200      	movs	r2, #0
 800fb20:	719a      	strb	r2, [r3, #6]
 800fb22:	2200      	movs	r2, #0
 800fb24:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800fb26:	69fb      	ldr	r3, [r7, #28]
 800fb28:	685b      	ldr	r3, [r3, #4]
 800fb2a:	f103 0008 	add.w	r0, r3, #8
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	685b      	ldr	r3, [r3, #4]
 800fb32:	221c      	movs	r2, #28
 800fb34:	4619      	mov	r1, r3
 800fb36:	f002 fa58 	bl	8011fea <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800fb3a:	69bb      	ldr	r3, [r7, #24]
 800fb3c:	68db      	ldr	r3, [r3, #12]
 800fb3e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800fb40:	f107 030c 	add.w	r3, r7, #12
 800fb44:	4618      	mov	r0, r3
 800fb46:	f000 f825 	bl	800fb94 <ip4_route>
 800fb4a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800fb4c:	693b      	ldr	r3, [r7, #16]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d011      	beq.n	800fb76 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800fb52:	697b      	ldr	r3, [r7, #20]
 800fb54:	2200      	movs	r2, #0
 800fb56:	709a      	strb	r2, [r3, #2]
 800fb58:	2200      	movs	r2, #0
 800fb5a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800fb5c:	f107 020c 	add.w	r2, r7, #12
 800fb60:	693b      	ldr	r3, [r7, #16]
 800fb62:	9302      	str	r3, [sp, #8]
 800fb64:	2301      	movs	r3, #1
 800fb66:	9301      	str	r3, [sp, #4]
 800fb68:	2300      	movs	r3, #0
 800fb6a:	9300      	str	r3, [sp, #0]
 800fb6c:	23ff      	movs	r3, #255	; 0xff
 800fb6e:	2100      	movs	r1, #0
 800fb70:	69f8      	ldr	r0, [r7, #28]
 800fb72:	f000 f9cd 	bl	800ff10 <ip4_output_if>
  }
  pbuf_free(q);
 800fb76:	69f8      	ldr	r0, [r7, #28]
 800fb78:	f7f8 fede 	bl	8008938 <pbuf_free>
 800fb7c:	e000      	b.n	800fb80 <icmp_send_response+0xc0>
    return;
 800fb7e:	bf00      	nop
}
 800fb80:	3720      	adds	r7, #32
 800fb82:	46bd      	mov	sp, r7
 800fb84:	bd80      	pop	{r7, pc}
 800fb86:	bf00      	nop
 800fb88:	080162a8 	.word	0x080162a8
 800fb8c:	08016374 	.word	0x08016374
 800fb90:	08016318 	.word	0x08016318

0800fb94 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800fb94:	b480      	push	{r7}
 800fb96:	b085      	sub	sp, #20
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800fb9c:	4b33      	ldr	r3, [pc, #204]	; (800fc6c <ip4_route+0xd8>)
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	60fb      	str	r3, [r7, #12]
 800fba2:	e036      	b.n	800fc12 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fbaa:	f003 0301 	and.w	r3, r3, #1
 800fbae:	b2db      	uxtb	r3, r3
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d02b      	beq.n	800fc0c <ip4_route+0x78>
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fbba:	089b      	lsrs	r3, r3, #2
 800fbbc:	f003 0301 	and.w	r3, r3, #1
 800fbc0:	b2db      	uxtb	r3, r3
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d022      	beq.n	800fc0c <ip4_route+0x78>
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	3304      	adds	r3, #4
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d01d      	beq.n	800fc0c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	681a      	ldr	r2, [r3, #0]
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	3304      	adds	r3, #4
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	405a      	eors	r2, r3
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	3308      	adds	r3, #8
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	4013      	ands	r3, r2
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d101      	bne.n	800fbec <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	e038      	b.n	800fc5e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fbf2:	f003 0302 	and.w	r3, r3, #2
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d108      	bne.n	800fc0c <ip4_route+0x78>
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	681a      	ldr	r2, [r3, #0]
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	330c      	adds	r3, #12
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	429a      	cmp	r2, r3
 800fc06:	d101      	bne.n	800fc0c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	e028      	b.n	800fc5e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	60fb      	str	r3, [r7, #12]
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d1c5      	bne.n	800fba4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800fc18:	4b15      	ldr	r3, [pc, #84]	; (800fc70 <ip4_route+0xdc>)
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d01a      	beq.n	800fc56 <ip4_route+0xc2>
 800fc20:	4b13      	ldr	r3, [pc, #76]	; (800fc70 <ip4_route+0xdc>)
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fc28:	f003 0301 	and.w	r3, r3, #1
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d012      	beq.n	800fc56 <ip4_route+0xc2>
 800fc30:	4b0f      	ldr	r3, [pc, #60]	; (800fc70 <ip4_route+0xdc>)
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fc38:	f003 0304 	and.w	r3, r3, #4
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d00a      	beq.n	800fc56 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800fc40:	4b0b      	ldr	r3, [pc, #44]	; (800fc70 <ip4_route+0xdc>)
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	3304      	adds	r3, #4
 800fc46:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d004      	beq.n	800fc56 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	b2db      	uxtb	r3, r3
 800fc52:	2b7f      	cmp	r3, #127	; 0x7f
 800fc54:	d101      	bne.n	800fc5a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800fc56:	2300      	movs	r3, #0
 800fc58:	e001      	b.n	800fc5e <ip4_route+0xca>
  }

  return netif_default;
 800fc5a:	4b05      	ldr	r3, [pc, #20]	; (800fc70 <ip4_route+0xdc>)
 800fc5c:	681b      	ldr	r3, [r3, #0]
}
 800fc5e:	4618      	mov	r0, r3
 800fc60:	3714      	adds	r7, #20
 800fc62:	46bd      	mov	sp, r7
 800fc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc68:	4770      	bx	lr
 800fc6a:	bf00      	nop
 800fc6c:	2000a7c4 	.word	0x2000a7c4
 800fc70:	2000a7c8 	.word	0x2000a7c8

0800fc74 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800fc74:	b580      	push	{r7, lr}
 800fc76:	b082      	sub	sp, #8
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fc82:	f003 0301 	and.w	r3, r3, #1
 800fc86:	b2db      	uxtb	r3, r3
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d016      	beq.n	800fcba <ip4_input_accept+0x46>
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	3304      	adds	r3, #4
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d011      	beq.n	800fcba <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800fc96:	4b0b      	ldr	r3, [pc, #44]	; (800fcc4 <ip4_input_accept+0x50>)
 800fc98:	695a      	ldr	r2, [r3, #20]
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	3304      	adds	r3, #4
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	429a      	cmp	r2, r3
 800fca2:	d008      	beq.n	800fcb6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800fca4:	4b07      	ldr	r3, [pc, #28]	; (800fcc4 <ip4_input_accept+0x50>)
 800fca6:	695b      	ldr	r3, [r3, #20]
 800fca8:	6879      	ldr	r1, [r7, #4]
 800fcaa:	4618      	mov	r0, r3
 800fcac:	f000 fa08 	bl	80100c0 <ip4_addr_isbroadcast_u32>
 800fcb0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d001      	beq.n	800fcba <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800fcb6:	2301      	movs	r3, #1
 800fcb8:	e000      	b.n	800fcbc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800fcba:	2300      	movs	r3, #0
}
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	3708      	adds	r7, #8
 800fcc0:	46bd      	mov	sp, r7
 800fcc2:	bd80      	pop	{r7, pc}
 800fcc4:	200050a0 	.word	0x200050a0

0800fcc8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800fcc8:	b580      	push	{r7, lr}
 800fcca:	b086      	sub	sp, #24
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	6078      	str	r0, [r7, #4]
 800fcd0:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	685b      	ldr	r3, [r3, #4]
 800fcd6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800fcd8:	697b      	ldr	r3, [r7, #20]
 800fcda:	781b      	ldrb	r3, [r3, #0]
 800fcdc:	091b      	lsrs	r3, r3, #4
 800fcde:	b2db      	uxtb	r3, r3
 800fce0:	2b04      	cmp	r3, #4
 800fce2:	d004      	beq.n	800fcee <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800fce4:	6878      	ldr	r0, [r7, #4]
 800fce6:	f7f8 fe27 	bl	8008938 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800fcea:	2300      	movs	r3, #0
 800fcec:	e107      	b.n	800fefe <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800fcee:	697b      	ldr	r3, [r7, #20]
 800fcf0:	781b      	ldrb	r3, [r3, #0]
 800fcf2:	f003 030f 	and.w	r3, r3, #15
 800fcf6:	b2db      	uxtb	r3, r3
 800fcf8:	009b      	lsls	r3, r3, #2
 800fcfa:	b2db      	uxtb	r3, r3
 800fcfc:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800fcfe:	697b      	ldr	r3, [r7, #20]
 800fd00:	885b      	ldrh	r3, [r3, #2]
 800fd02:	b29b      	uxth	r3, r3
 800fd04:	4618      	mov	r0, r3
 800fd06:	f7f7 fab9 	bl	800727c <lwip_htons>
 800fd0a:	4603      	mov	r3, r0
 800fd0c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	891b      	ldrh	r3, [r3, #8]
 800fd12:	89ba      	ldrh	r2, [r7, #12]
 800fd14:	429a      	cmp	r2, r3
 800fd16:	d204      	bcs.n	800fd22 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800fd18:	89bb      	ldrh	r3, [r7, #12]
 800fd1a:	4619      	mov	r1, r3
 800fd1c:	6878      	ldr	r0, [r7, #4]
 800fd1e:	f7f8 fc85 	bl	800862c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	895b      	ldrh	r3, [r3, #10]
 800fd26:	89fa      	ldrh	r2, [r7, #14]
 800fd28:	429a      	cmp	r2, r3
 800fd2a:	d807      	bhi.n	800fd3c <ip4_input+0x74>
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	891b      	ldrh	r3, [r3, #8]
 800fd30:	89ba      	ldrh	r2, [r7, #12]
 800fd32:	429a      	cmp	r2, r3
 800fd34:	d802      	bhi.n	800fd3c <ip4_input+0x74>
 800fd36:	89fb      	ldrh	r3, [r7, #14]
 800fd38:	2b13      	cmp	r3, #19
 800fd3a:	d804      	bhi.n	800fd46 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800fd3c:	6878      	ldr	r0, [r7, #4]
 800fd3e:	f7f8 fdfb 	bl	8008938 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800fd42:	2300      	movs	r3, #0
 800fd44:	e0db      	b.n	800fefe <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800fd46:	697b      	ldr	r3, [r7, #20]
 800fd48:	691b      	ldr	r3, [r3, #16]
 800fd4a:	4a6f      	ldr	r2, [pc, #444]	; (800ff08 <ip4_input+0x240>)
 800fd4c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800fd4e:	697b      	ldr	r3, [r7, #20]
 800fd50:	68db      	ldr	r3, [r3, #12]
 800fd52:	4a6d      	ldr	r2, [pc, #436]	; (800ff08 <ip4_input+0x240>)
 800fd54:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fd56:	4b6c      	ldr	r3, [pc, #432]	; (800ff08 <ip4_input+0x240>)
 800fd58:	695b      	ldr	r3, [r3, #20]
 800fd5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fd5e:	2be0      	cmp	r3, #224	; 0xe0
 800fd60:	d112      	bne.n	800fd88 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800fd62:	683b      	ldr	r3, [r7, #0]
 800fd64:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fd68:	f003 0301 	and.w	r3, r3, #1
 800fd6c:	b2db      	uxtb	r3, r3
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d007      	beq.n	800fd82 <ip4_input+0xba>
 800fd72:	683b      	ldr	r3, [r7, #0]
 800fd74:	3304      	adds	r3, #4
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d002      	beq.n	800fd82 <ip4_input+0xba>
      netif = inp;
 800fd7c:	683b      	ldr	r3, [r7, #0]
 800fd7e:	613b      	str	r3, [r7, #16]
 800fd80:	e02a      	b.n	800fdd8 <ip4_input+0x110>
    } else {
      netif = NULL;
 800fd82:	2300      	movs	r3, #0
 800fd84:	613b      	str	r3, [r7, #16]
 800fd86:	e027      	b.n	800fdd8 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800fd88:	6838      	ldr	r0, [r7, #0]
 800fd8a:	f7ff ff73 	bl	800fc74 <ip4_input_accept>
 800fd8e:	4603      	mov	r3, r0
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d002      	beq.n	800fd9a <ip4_input+0xd2>
      netif = inp;
 800fd94:	683b      	ldr	r3, [r7, #0]
 800fd96:	613b      	str	r3, [r7, #16]
 800fd98:	e01e      	b.n	800fdd8 <ip4_input+0x110>
    } else {
      netif = NULL;
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800fd9e:	4b5a      	ldr	r3, [pc, #360]	; (800ff08 <ip4_input+0x240>)
 800fda0:	695b      	ldr	r3, [r3, #20]
 800fda2:	b2db      	uxtb	r3, r3
 800fda4:	2b7f      	cmp	r3, #127	; 0x7f
 800fda6:	d017      	beq.n	800fdd8 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800fda8:	4b58      	ldr	r3, [pc, #352]	; (800ff0c <ip4_input+0x244>)
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	613b      	str	r3, [r7, #16]
 800fdae:	e00e      	b.n	800fdce <ip4_input+0x106>
          if (netif == inp) {
 800fdb0:	693a      	ldr	r2, [r7, #16]
 800fdb2:	683b      	ldr	r3, [r7, #0]
 800fdb4:	429a      	cmp	r2, r3
 800fdb6:	d006      	beq.n	800fdc6 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800fdb8:	6938      	ldr	r0, [r7, #16]
 800fdba:	f7ff ff5b 	bl	800fc74 <ip4_input_accept>
 800fdbe:	4603      	mov	r3, r0
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d108      	bne.n	800fdd6 <ip4_input+0x10e>
 800fdc4:	e000      	b.n	800fdc8 <ip4_input+0x100>
            continue;
 800fdc6:	bf00      	nop
        NETIF_FOREACH(netif) {
 800fdc8:	693b      	ldr	r3, [r7, #16]
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	613b      	str	r3, [r7, #16]
 800fdce:	693b      	ldr	r3, [r7, #16]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d1ed      	bne.n	800fdb0 <ip4_input+0xe8>
 800fdd4:	e000      	b.n	800fdd8 <ip4_input+0x110>
            break;
 800fdd6:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800fdd8:	4b4b      	ldr	r3, [pc, #300]	; (800ff08 <ip4_input+0x240>)
 800fdda:	691b      	ldr	r3, [r3, #16]
 800fddc:	6839      	ldr	r1, [r7, #0]
 800fdde:	4618      	mov	r0, r3
 800fde0:	f000 f96e 	bl	80100c0 <ip4_addr_isbroadcast_u32>
 800fde4:	4603      	mov	r3, r0
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d105      	bne.n	800fdf6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800fdea:	4b47      	ldr	r3, [pc, #284]	; (800ff08 <ip4_input+0x240>)
 800fdec:	691b      	ldr	r3, [r3, #16]
 800fdee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800fdf2:	2be0      	cmp	r3, #224	; 0xe0
 800fdf4:	d104      	bne.n	800fe00 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800fdf6:	6878      	ldr	r0, [r7, #4]
 800fdf8:	f7f8 fd9e 	bl	8008938 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	e07e      	b.n	800fefe <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800fe00:	693b      	ldr	r3, [r7, #16]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d104      	bne.n	800fe10 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800fe06:	6878      	ldr	r0, [r7, #4]
 800fe08:	f7f8 fd96 	bl	8008938 <pbuf_free>
    return ERR_OK;
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	e076      	b.n	800fefe <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800fe10:	697b      	ldr	r3, [r7, #20]
 800fe12:	88db      	ldrh	r3, [r3, #6]
 800fe14:	b29b      	uxth	r3, r3
 800fe16:	461a      	mov	r2, r3
 800fe18:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800fe1c:	4013      	ands	r3, r2
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d00b      	beq.n	800fe3a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800fe22:	6878      	ldr	r0, [r7, #4]
 800fe24:	f000 fc92 	bl	801074c <ip4_reass>
 800fe28:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d101      	bne.n	800fe34 <ip4_input+0x16c>
      return ERR_OK;
 800fe30:	2300      	movs	r3, #0
 800fe32:	e064      	b.n	800fefe <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	685b      	ldr	r3, [r3, #4]
 800fe38:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800fe3a:	4a33      	ldr	r2, [pc, #204]	; (800ff08 <ip4_input+0x240>)
 800fe3c:	693b      	ldr	r3, [r7, #16]
 800fe3e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800fe40:	4a31      	ldr	r2, [pc, #196]	; (800ff08 <ip4_input+0x240>)
 800fe42:	683b      	ldr	r3, [r7, #0]
 800fe44:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800fe46:	4a30      	ldr	r2, [pc, #192]	; (800ff08 <ip4_input+0x240>)
 800fe48:	697b      	ldr	r3, [r7, #20]
 800fe4a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800fe4c:	697b      	ldr	r3, [r7, #20]
 800fe4e:	781b      	ldrb	r3, [r3, #0]
 800fe50:	f003 030f 	and.w	r3, r3, #15
 800fe54:	b2db      	uxtb	r3, r3
 800fe56:	009b      	lsls	r3, r3, #2
 800fe58:	b2db      	uxtb	r3, r3
 800fe5a:	b29a      	uxth	r2, r3
 800fe5c:	4b2a      	ldr	r3, [pc, #168]	; (800ff08 <ip4_input+0x240>)
 800fe5e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800fe60:	89fb      	ldrh	r3, [r7, #14]
 800fe62:	4619      	mov	r1, r3
 800fe64:	6878      	ldr	r0, [r7, #4]
 800fe66:	f7f8 fce1 	bl	800882c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800fe6a:	697b      	ldr	r3, [r7, #20]
 800fe6c:	7a5b      	ldrb	r3, [r3, #9]
 800fe6e:	2b11      	cmp	r3, #17
 800fe70:	d006      	beq.n	800fe80 <ip4_input+0x1b8>
 800fe72:	2b11      	cmp	r3, #17
 800fe74:	dc13      	bgt.n	800fe9e <ip4_input+0x1d6>
 800fe76:	2b01      	cmp	r3, #1
 800fe78:	d00c      	beq.n	800fe94 <ip4_input+0x1cc>
 800fe7a:	2b06      	cmp	r3, #6
 800fe7c:	d005      	beq.n	800fe8a <ip4_input+0x1c2>
 800fe7e:	e00e      	b.n	800fe9e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800fe80:	6839      	ldr	r1, [r7, #0]
 800fe82:	6878      	ldr	r0, [r7, #4]
 800fe84:	f7fe fb3a 	bl	800e4fc <udp_input>
        break;
 800fe88:	e026      	b.n	800fed8 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800fe8a:	6839      	ldr	r1, [r7, #0]
 800fe8c:	6878      	ldr	r0, [r7, #4]
 800fe8e:	f7fa fb7b 	bl	800a588 <tcp_input>
        break;
 800fe92:	e021      	b.n	800fed8 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800fe94:	6839      	ldr	r1, [r7, #0]
 800fe96:	6878      	ldr	r0, [r7, #4]
 800fe98:	f7ff fcee 	bl	800f878 <icmp_input>
        break;
 800fe9c:	e01c      	b.n	800fed8 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800fe9e:	4b1a      	ldr	r3, [pc, #104]	; (800ff08 <ip4_input+0x240>)
 800fea0:	695b      	ldr	r3, [r3, #20]
 800fea2:	6939      	ldr	r1, [r7, #16]
 800fea4:	4618      	mov	r0, r3
 800fea6:	f000 f90b 	bl	80100c0 <ip4_addr_isbroadcast_u32>
 800feaa:	4603      	mov	r3, r0
 800feac:	2b00      	cmp	r3, #0
 800feae:	d10f      	bne.n	800fed0 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800feb0:	4b15      	ldr	r3, [pc, #84]	; (800ff08 <ip4_input+0x240>)
 800feb2:	695b      	ldr	r3, [r3, #20]
 800feb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800feb8:	2be0      	cmp	r3, #224	; 0xe0
 800feba:	d009      	beq.n	800fed0 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800febc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fec0:	4619      	mov	r1, r3
 800fec2:	6878      	ldr	r0, [r7, #4]
 800fec4:	f7f8 fd25 	bl	8008912 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800fec8:	2102      	movs	r1, #2
 800feca:	6878      	ldr	r0, [r7, #4]
 800fecc:	f7ff fdd8 	bl	800fa80 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800fed0:	6878      	ldr	r0, [r7, #4]
 800fed2:	f7f8 fd31 	bl	8008938 <pbuf_free>
        break;
 800fed6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800fed8:	4b0b      	ldr	r3, [pc, #44]	; (800ff08 <ip4_input+0x240>)
 800feda:	2200      	movs	r2, #0
 800fedc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800fede:	4b0a      	ldr	r3, [pc, #40]	; (800ff08 <ip4_input+0x240>)
 800fee0:	2200      	movs	r2, #0
 800fee2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800fee4:	4b08      	ldr	r3, [pc, #32]	; (800ff08 <ip4_input+0x240>)
 800fee6:	2200      	movs	r2, #0
 800fee8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800feea:	4b07      	ldr	r3, [pc, #28]	; (800ff08 <ip4_input+0x240>)
 800feec:	2200      	movs	r2, #0
 800feee:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800fef0:	4b05      	ldr	r3, [pc, #20]	; (800ff08 <ip4_input+0x240>)
 800fef2:	2200      	movs	r2, #0
 800fef4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800fef6:	4b04      	ldr	r3, [pc, #16]	; (800ff08 <ip4_input+0x240>)
 800fef8:	2200      	movs	r2, #0
 800fefa:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800fefc:	2300      	movs	r3, #0
}
 800fefe:	4618      	mov	r0, r3
 800ff00:	3718      	adds	r7, #24
 800ff02:	46bd      	mov	sp, r7
 800ff04:	bd80      	pop	{r7, pc}
 800ff06:	bf00      	nop
 800ff08:	200050a0 	.word	0x200050a0
 800ff0c:	2000a7c4 	.word	0x2000a7c4

0800ff10 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800ff10:	b580      	push	{r7, lr}
 800ff12:	b08a      	sub	sp, #40	; 0x28
 800ff14:	af04      	add	r7, sp, #16
 800ff16:	60f8      	str	r0, [r7, #12]
 800ff18:	60b9      	str	r1, [r7, #8]
 800ff1a:	607a      	str	r2, [r7, #4]
 800ff1c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800ff1e:	68bb      	ldr	r3, [r7, #8]
 800ff20:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d009      	beq.n	800ff3c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800ff28:	68bb      	ldr	r3, [r7, #8]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d003      	beq.n	800ff36 <ip4_output_if+0x26>
 800ff2e:	68bb      	ldr	r3, [r7, #8]
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d102      	bne.n	800ff3c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800ff36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff38:	3304      	adds	r3, #4
 800ff3a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800ff3c:	78fa      	ldrb	r2, [r7, #3]
 800ff3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff40:	9302      	str	r3, [sp, #8]
 800ff42:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ff46:	9301      	str	r3, [sp, #4]
 800ff48:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ff4c:	9300      	str	r3, [sp, #0]
 800ff4e:	4613      	mov	r3, r2
 800ff50:	687a      	ldr	r2, [r7, #4]
 800ff52:	6979      	ldr	r1, [r7, #20]
 800ff54:	68f8      	ldr	r0, [r7, #12]
 800ff56:	f000 f805 	bl	800ff64 <ip4_output_if_src>
 800ff5a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800ff5c:	4618      	mov	r0, r3
 800ff5e:	3718      	adds	r7, #24
 800ff60:	46bd      	mov	sp, r7
 800ff62:	bd80      	pop	{r7, pc}

0800ff64 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b088      	sub	sp, #32
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	60f8      	str	r0, [r7, #12]
 800ff6c:	60b9      	str	r1, [r7, #8]
 800ff6e:	607a      	str	r2, [r7, #4]
 800ff70:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	7b9b      	ldrb	r3, [r3, #14]
 800ff76:	2b01      	cmp	r3, #1
 800ff78:	d006      	beq.n	800ff88 <ip4_output_if_src+0x24>
 800ff7a:	4b4b      	ldr	r3, [pc, #300]	; (80100a8 <ip4_output_if_src+0x144>)
 800ff7c:	f44f 7255 	mov.w	r2, #852	; 0x354
 800ff80:	494a      	ldr	r1, [pc, #296]	; (80100ac <ip4_output_if_src+0x148>)
 800ff82:	484b      	ldr	r0, [pc, #300]	; (80100b0 <ip4_output_if_src+0x14c>)
 800ff84:	f001 fed0 	bl	8011d28 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d060      	beq.n	8010050 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800ff8e:	2314      	movs	r3, #20
 800ff90:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800ff92:	2114      	movs	r1, #20
 800ff94:	68f8      	ldr	r0, [r7, #12]
 800ff96:	f7f8 fc39 	bl	800880c <pbuf_add_header>
 800ff9a:	4603      	mov	r3, r0
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d002      	beq.n	800ffa6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800ffa0:	f06f 0301 	mvn.w	r3, #1
 800ffa4:	e07c      	b.n	80100a0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	685b      	ldr	r3, [r3, #4]
 800ffaa:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	895b      	ldrh	r3, [r3, #10]
 800ffb0:	2b13      	cmp	r3, #19
 800ffb2:	d806      	bhi.n	800ffc2 <ip4_output_if_src+0x5e>
 800ffb4:	4b3c      	ldr	r3, [pc, #240]	; (80100a8 <ip4_output_if_src+0x144>)
 800ffb6:	f44f 7262 	mov.w	r2, #904	; 0x388
 800ffba:	493e      	ldr	r1, [pc, #248]	; (80100b4 <ip4_output_if_src+0x150>)
 800ffbc:	483c      	ldr	r0, [pc, #240]	; (80100b0 <ip4_output_if_src+0x14c>)
 800ffbe:	f001 feb3 	bl	8011d28 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800ffc2:	69fb      	ldr	r3, [r7, #28]
 800ffc4:	78fa      	ldrb	r2, [r7, #3]
 800ffc6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800ffc8:	69fb      	ldr	r3, [r7, #28]
 800ffca:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800ffce:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	681a      	ldr	r2, [r3, #0]
 800ffd4:	69fb      	ldr	r3, [r7, #28]
 800ffd6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800ffd8:	8b7b      	ldrh	r3, [r7, #26]
 800ffda:	089b      	lsrs	r3, r3, #2
 800ffdc:	b29b      	uxth	r3, r3
 800ffde:	b2db      	uxtb	r3, r3
 800ffe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ffe4:	b2da      	uxtb	r2, r3
 800ffe6:	69fb      	ldr	r3, [r7, #28]
 800ffe8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800ffea:	69fb      	ldr	r3, [r7, #28]
 800ffec:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800fff0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	891b      	ldrh	r3, [r3, #8]
 800fff6:	4618      	mov	r0, r3
 800fff8:	f7f7 f940 	bl	800727c <lwip_htons>
 800fffc:	4603      	mov	r3, r0
 800fffe:	461a      	mov	r2, r3
 8010000:	69fb      	ldr	r3, [r7, #28]
 8010002:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8010004:	69fb      	ldr	r3, [r7, #28]
 8010006:	2200      	movs	r2, #0
 8010008:	719a      	strb	r2, [r3, #6]
 801000a:	2200      	movs	r2, #0
 801000c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801000e:	4b2a      	ldr	r3, [pc, #168]	; (80100b8 <ip4_output_if_src+0x154>)
 8010010:	881b      	ldrh	r3, [r3, #0]
 8010012:	4618      	mov	r0, r3
 8010014:	f7f7 f932 	bl	800727c <lwip_htons>
 8010018:	4603      	mov	r3, r0
 801001a:	461a      	mov	r2, r3
 801001c:	69fb      	ldr	r3, [r7, #28]
 801001e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8010020:	4b25      	ldr	r3, [pc, #148]	; (80100b8 <ip4_output_if_src+0x154>)
 8010022:	881b      	ldrh	r3, [r3, #0]
 8010024:	3301      	adds	r3, #1
 8010026:	b29a      	uxth	r2, r3
 8010028:	4b23      	ldr	r3, [pc, #140]	; (80100b8 <ip4_output_if_src+0x154>)
 801002a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801002c:	68bb      	ldr	r3, [r7, #8]
 801002e:	2b00      	cmp	r3, #0
 8010030:	d104      	bne.n	801003c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8010032:	4b22      	ldr	r3, [pc, #136]	; (80100bc <ip4_output_if_src+0x158>)
 8010034:	681a      	ldr	r2, [r3, #0]
 8010036:	69fb      	ldr	r3, [r7, #28]
 8010038:	60da      	str	r2, [r3, #12]
 801003a:	e003      	b.n	8010044 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801003c:	68bb      	ldr	r3, [r7, #8]
 801003e:	681a      	ldr	r2, [r3, #0]
 8010040:	69fb      	ldr	r3, [r7, #28]
 8010042:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8010044:	69fb      	ldr	r3, [r7, #28]
 8010046:	2200      	movs	r2, #0
 8010048:	729a      	strb	r2, [r3, #10]
 801004a:	2200      	movs	r2, #0
 801004c:	72da      	strb	r2, [r3, #11]
 801004e:	e00f      	b.n	8010070 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	895b      	ldrh	r3, [r3, #10]
 8010054:	2b13      	cmp	r3, #19
 8010056:	d802      	bhi.n	801005e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8010058:	f06f 0301 	mvn.w	r3, #1
 801005c:	e020      	b.n	80100a0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	685b      	ldr	r3, [r3, #4]
 8010062:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8010064:	69fb      	ldr	r3, [r7, #28]
 8010066:	691b      	ldr	r3, [r3, #16]
 8010068:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801006a:	f107 0314 	add.w	r3, r7, #20
 801006e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8010070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010072:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010074:	2b00      	cmp	r3, #0
 8010076:	d00c      	beq.n	8010092 <ip4_output_if_src+0x12e>
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	891a      	ldrh	r2, [r3, #8]
 801007c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801007e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010080:	429a      	cmp	r2, r3
 8010082:	d906      	bls.n	8010092 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8010084:	687a      	ldr	r2, [r7, #4]
 8010086:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010088:	68f8      	ldr	r0, [r7, #12]
 801008a:	f000 fd53 	bl	8010b34 <ip4_frag>
 801008e:	4603      	mov	r3, r0
 8010090:	e006      	b.n	80100a0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8010092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010094:	695b      	ldr	r3, [r3, #20]
 8010096:	687a      	ldr	r2, [r7, #4]
 8010098:	68f9      	ldr	r1, [r7, #12]
 801009a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801009c:	4798      	blx	r3
 801009e:	4603      	mov	r3, r0
}
 80100a0:	4618      	mov	r0, r3
 80100a2:	3720      	adds	r7, #32
 80100a4:	46bd      	mov	sp, r7
 80100a6:	bd80      	pop	{r7, pc}
 80100a8:	080163a0 	.word	0x080163a0
 80100ac:	080163d4 	.word	0x080163d4
 80100b0:	080163e0 	.word	0x080163e0
 80100b4:	08016408 	.word	0x08016408
 80100b8:	2000a922 	.word	0x2000a922
 80100bc:	080167ec 	.word	0x080167ec

080100c0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80100c0:	b480      	push	{r7}
 80100c2:	b085      	sub	sp, #20
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	6078      	str	r0, [r7, #4]
 80100c8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80100d4:	d002      	beq.n	80100dc <ip4_addr_isbroadcast_u32+0x1c>
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d101      	bne.n	80100e0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80100dc:	2301      	movs	r3, #1
 80100de:	e02a      	b.n	8010136 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80100e0:	683b      	ldr	r3, [r7, #0]
 80100e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80100e6:	f003 0302 	and.w	r3, r3, #2
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d101      	bne.n	80100f2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80100ee:	2300      	movs	r3, #0
 80100f0:	e021      	b.n	8010136 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80100f2:	683b      	ldr	r3, [r7, #0]
 80100f4:	3304      	adds	r3, #4
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	687a      	ldr	r2, [r7, #4]
 80100fa:	429a      	cmp	r2, r3
 80100fc:	d101      	bne.n	8010102 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80100fe:	2300      	movs	r3, #0
 8010100:	e019      	b.n	8010136 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8010102:	68fa      	ldr	r2, [r7, #12]
 8010104:	683b      	ldr	r3, [r7, #0]
 8010106:	3304      	adds	r3, #4
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	405a      	eors	r2, r3
 801010c:	683b      	ldr	r3, [r7, #0]
 801010e:	3308      	adds	r3, #8
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	4013      	ands	r3, r2
 8010114:	2b00      	cmp	r3, #0
 8010116:	d10d      	bne.n	8010134 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010118:	683b      	ldr	r3, [r7, #0]
 801011a:	3308      	adds	r3, #8
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	43da      	mvns	r2, r3
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8010124:	683b      	ldr	r3, [r7, #0]
 8010126:	3308      	adds	r3, #8
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801012c:	429a      	cmp	r2, r3
 801012e:	d101      	bne.n	8010134 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8010130:	2301      	movs	r3, #1
 8010132:	e000      	b.n	8010136 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8010134:	2300      	movs	r3, #0
  }
}
 8010136:	4618      	mov	r0, r3
 8010138:	3714      	adds	r7, #20
 801013a:	46bd      	mov	sp, r7
 801013c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010140:	4770      	bx	lr
	...

08010144 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8010144:	b580      	push	{r7, lr}
 8010146:	b084      	sub	sp, #16
 8010148:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801014a:	2300      	movs	r3, #0
 801014c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801014e:	4b12      	ldr	r3, [pc, #72]	; (8010198 <ip_reass_tmr+0x54>)
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8010154:	e018      	b.n	8010188 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	7fdb      	ldrb	r3, [r3, #31]
 801015a:	2b00      	cmp	r3, #0
 801015c:	d00b      	beq.n	8010176 <ip_reass_tmr+0x32>
      r->timer--;
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	7fdb      	ldrb	r3, [r3, #31]
 8010162:	3b01      	subs	r3, #1
 8010164:	b2da      	uxtb	r2, r3
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	60fb      	str	r3, [r7, #12]
 8010174:	e008      	b.n	8010188 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8010180:	68b9      	ldr	r1, [r7, #8]
 8010182:	6878      	ldr	r0, [r7, #4]
 8010184:	f000 f80a 	bl	801019c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d1e3      	bne.n	8010156 <ip_reass_tmr+0x12>
    }
  }
}
 801018e:	bf00      	nop
 8010190:	bf00      	nop
 8010192:	3710      	adds	r7, #16
 8010194:	46bd      	mov	sp, r7
 8010196:	bd80      	pop	{r7, pc}
 8010198:	2000a924 	.word	0x2000a924

0801019c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801019c:	b580      	push	{r7, lr}
 801019e:	b088      	sub	sp, #32
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	6078      	str	r0, [r7, #4]
 80101a4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80101a6:	2300      	movs	r3, #0
 80101a8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80101aa:	683a      	ldr	r2, [r7, #0]
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	429a      	cmp	r2, r3
 80101b0:	d105      	bne.n	80101be <ip_reass_free_complete_datagram+0x22>
 80101b2:	4b45      	ldr	r3, [pc, #276]	; (80102c8 <ip_reass_free_complete_datagram+0x12c>)
 80101b4:	22ab      	movs	r2, #171	; 0xab
 80101b6:	4945      	ldr	r1, [pc, #276]	; (80102cc <ip_reass_free_complete_datagram+0x130>)
 80101b8:	4845      	ldr	r0, [pc, #276]	; (80102d0 <ip_reass_free_complete_datagram+0x134>)
 80101ba:	f001 fdb5 	bl	8011d28 <iprintf>
  if (prev != NULL) {
 80101be:	683b      	ldr	r3, [r7, #0]
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d00a      	beq.n	80101da <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80101c4:	683b      	ldr	r3, [r7, #0]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	687a      	ldr	r2, [r7, #4]
 80101ca:	429a      	cmp	r2, r3
 80101cc:	d005      	beq.n	80101da <ip_reass_free_complete_datagram+0x3e>
 80101ce:	4b3e      	ldr	r3, [pc, #248]	; (80102c8 <ip_reass_free_complete_datagram+0x12c>)
 80101d0:	22ad      	movs	r2, #173	; 0xad
 80101d2:	4940      	ldr	r1, [pc, #256]	; (80102d4 <ip_reass_free_complete_datagram+0x138>)
 80101d4:	483e      	ldr	r0, [pc, #248]	; (80102d0 <ip_reass_free_complete_datagram+0x134>)
 80101d6:	f001 fda7 	bl	8011d28 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	685b      	ldr	r3, [r3, #4]
 80101de:	685b      	ldr	r3, [r3, #4]
 80101e0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80101e2:	697b      	ldr	r3, [r7, #20]
 80101e4:	889b      	ldrh	r3, [r3, #4]
 80101e6:	b29b      	uxth	r3, r3
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d12a      	bne.n	8010242 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	685b      	ldr	r3, [r3, #4]
 80101f0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80101f2:	697b      	ldr	r3, [r7, #20]
 80101f4:	681a      	ldr	r2, [r3, #0]
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80101fa:	69bb      	ldr	r3, [r7, #24]
 80101fc:	6858      	ldr	r0, [r3, #4]
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	3308      	adds	r3, #8
 8010202:	2214      	movs	r2, #20
 8010204:	4619      	mov	r1, r3
 8010206:	f001 fef0 	bl	8011fea <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801020a:	2101      	movs	r1, #1
 801020c:	69b8      	ldr	r0, [r7, #24]
 801020e:	f7ff fc47 	bl	800faa0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8010212:	69b8      	ldr	r0, [r7, #24]
 8010214:	f7f8 fc18 	bl	8008a48 <pbuf_clen>
 8010218:	4603      	mov	r3, r0
 801021a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801021c:	8bfa      	ldrh	r2, [r7, #30]
 801021e:	8a7b      	ldrh	r3, [r7, #18]
 8010220:	4413      	add	r3, r2
 8010222:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010226:	db05      	blt.n	8010234 <ip_reass_free_complete_datagram+0x98>
 8010228:	4b27      	ldr	r3, [pc, #156]	; (80102c8 <ip_reass_free_complete_datagram+0x12c>)
 801022a:	22bc      	movs	r2, #188	; 0xbc
 801022c:	492a      	ldr	r1, [pc, #168]	; (80102d8 <ip_reass_free_complete_datagram+0x13c>)
 801022e:	4828      	ldr	r0, [pc, #160]	; (80102d0 <ip_reass_free_complete_datagram+0x134>)
 8010230:	f001 fd7a 	bl	8011d28 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8010234:	8bfa      	ldrh	r2, [r7, #30]
 8010236:	8a7b      	ldrh	r3, [r7, #18]
 8010238:	4413      	add	r3, r2
 801023a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801023c:	69b8      	ldr	r0, [r7, #24]
 801023e:	f7f8 fb7b 	bl	8008938 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	685b      	ldr	r3, [r3, #4]
 8010246:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8010248:	e01f      	b.n	801028a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801024a:	69bb      	ldr	r3, [r7, #24]
 801024c:	685b      	ldr	r3, [r3, #4]
 801024e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8010250:	69bb      	ldr	r3, [r7, #24]
 8010252:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8010254:	697b      	ldr	r3, [r7, #20]
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801025a:	68f8      	ldr	r0, [r7, #12]
 801025c:	f7f8 fbf4 	bl	8008a48 <pbuf_clen>
 8010260:	4603      	mov	r3, r0
 8010262:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010264:	8bfa      	ldrh	r2, [r7, #30]
 8010266:	8a7b      	ldrh	r3, [r7, #18]
 8010268:	4413      	add	r3, r2
 801026a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801026e:	db05      	blt.n	801027c <ip_reass_free_complete_datagram+0xe0>
 8010270:	4b15      	ldr	r3, [pc, #84]	; (80102c8 <ip_reass_free_complete_datagram+0x12c>)
 8010272:	22cc      	movs	r2, #204	; 0xcc
 8010274:	4918      	ldr	r1, [pc, #96]	; (80102d8 <ip_reass_free_complete_datagram+0x13c>)
 8010276:	4816      	ldr	r0, [pc, #88]	; (80102d0 <ip_reass_free_complete_datagram+0x134>)
 8010278:	f001 fd56 	bl	8011d28 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801027c:	8bfa      	ldrh	r2, [r7, #30]
 801027e:	8a7b      	ldrh	r3, [r7, #18]
 8010280:	4413      	add	r3, r2
 8010282:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8010284:	68f8      	ldr	r0, [r7, #12]
 8010286:	f7f8 fb57 	bl	8008938 <pbuf_free>
  while (p != NULL) {
 801028a:	69bb      	ldr	r3, [r7, #24]
 801028c:	2b00      	cmp	r3, #0
 801028e:	d1dc      	bne.n	801024a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8010290:	6839      	ldr	r1, [r7, #0]
 8010292:	6878      	ldr	r0, [r7, #4]
 8010294:	f000 f8c2 	bl	801041c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8010298:	4b10      	ldr	r3, [pc, #64]	; (80102dc <ip_reass_free_complete_datagram+0x140>)
 801029a:	881b      	ldrh	r3, [r3, #0]
 801029c:	8bfa      	ldrh	r2, [r7, #30]
 801029e:	429a      	cmp	r2, r3
 80102a0:	d905      	bls.n	80102ae <ip_reass_free_complete_datagram+0x112>
 80102a2:	4b09      	ldr	r3, [pc, #36]	; (80102c8 <ip_reass_free_complete_datagram+0x12c>)
 80102a4:	22d2      	movs	r2, #210	; 0xd2
 80102a6:	490e      	ldr	r1, [pc, #56]	; (80102e0 <ip_reass_free_complete_datagram+0x144>)
 80102a8:	4809      	ldr	r0, [pc, #36]	; (80102d0 <ip_reass_free_complete_datagram+0x134>)
 80102aa:	f001 fd3d 	bl	8011d28 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80102ae:	4b0b      	ldr	r3, [pc, #44]	; (80102dc <ip_reass_free_complete_datagram+0x140>)
 80102b0:	881a      	ldrh	r2, [r3, #0]
 80102b2:	8bfb      	ldrh	r3, [r7, #30]
 80102b4:	1ad3      	subs	r3, r2, r3
 80102b6:	b29a      	uxth	r2, r3
 80102b8:	4b08      	ldr	r3, [pc, #32]	; (80102dc <ip_reass_free_complete_datagram+0x140>)
 80102ba:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80102bc:	8bfb      	ldrh	r3, [r7, #30]
}
 80102be:	4618      	mov	r0, r3
 80102c0:	3720      	adds	r7, #32
 80102c2:	46bd      	mov	sp, r7
 80102c4:	bd80      	pop	{r7, pc}
 80102c6:	bf00      	nop
 80102c8:	08016438 	.word	0x08016438
 80102cc:	08016474 	.word	0x08016474
 80102d0:	08016480 	.word	0x08016480
 80102d4:	080164a8 	.word	0x080164a8
 80102d8:	080164bc 	.word	0x080164bc
 80102dc:	2000a928 	.word	0x2000a928
 80102e0:	080164dc 	.word	0x080164dc

080102e4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80102e4:	b580      	push	{r7, lr}
 80102e6:	b08a      	sub	sp, #40	; 0x28
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	6078      	str	r0, [r7, #4]
 80102ec:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80102ee:	2300      	movs	r3, #0
 80102f0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80102f2:	2300      	movs	r3, #0
 80102f4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80102f6:	2300      	movs	r3, #0
 80102f8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80102fa:	2300      	movs	r3, #0
 80102fc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80102fe:	2300      	movs	r3, #0
 8010300:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8010302:	4b28      	ldr	r3, [pc, #160]	; (80103a4 <ip_reass_remove_oldest_datagram+0xc0>)
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8010308:	e030      	b.n	801036c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801030a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801030c:	695a      	ldr	r2, [r3, #20]
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	68db      	ldr	r3, [r3, #12]
 8010312:	429a      	cmp	r2, r3
 8010314:	d10c      	bne.n	8010330 <ip_reass_remove_oldest_datagram+0x4c>
 8010316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010318:	699a      	ldr	r2, [r3, #24]
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	691b      	ldr	r3, [r3, #16]
 801031e:	429a      	cmp	r2, r3
 8010320:	d106      	bne.n	8010330 <ip_reass_remove_oldest_datagram+0x4c>
 8010322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010324:	899a      	ldrh	r2, [r3, #12]
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	889b      	ldrh	r3, [r3, #4]
 801032a:	b29b      	uxth	r3, r3
 801032c:	429a      	cmp	r2, r3
 801032e:	d014      	beq.n	801035a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8010330:	693b      	ldr	r3, [r7, #16]
 8010332:	3301      	adds	r3, #1
 8010334:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8010336:	6a3b      	ldr	r3, [r7, #32]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d104      	bne.n	8010346 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801033c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801033e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8010340:	69fb      	ldr	r3, [r7, #28]
 8010342:	61bb      	str	r3, [r7, #24]
 8010344:	e009      	b.n	801035a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8010346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010348:	7fda      	ldrb	r2, [r3, #31]
 801034a:	6a3b      	ldr	r3, [r7, #32]
 801034c:	7fdb      	ldrb	r3, [r3, #31]
 801034e:	429a      	cmp	r2, r3
 8010350:	d803      	bhi.n	801035a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8010352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010354:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8010356:	69fb      	ldr	r3, [r7, #28]
 8010358:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801035a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	2b00      	cmp	r3, #0
 8010360:	d001      	beq.n	8010366 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8010362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010364:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8010366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801036c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801036e:	2b00      	cmp	r3, #0
 8010370:	d1cb      	bne.n	801030a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8010372:	6a3b      	ldr	r3, [r7, #32]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d008      	beq.n	801038a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8010378:	69b9      	ldr	r1, [r7, #24]
 801037a:	6a38      	ldr	r0, [r7, #32]
 801037c:	f7ff ff0e 	bl	801019c <ip_reass_free_complete_datagram>
 8010380:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8010382:	697a      	ldr	r2, [r7, #20]
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	4413      	add	r3, r2
 8010388:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801038a:	697a      	ldr	r2, [r7, #20]
 801038c:	683b      	ldr	r3, [r7, #0]
 801038e:	429a      	cmp	r2, r3
 8010390:	da02      	bge.n	8010398 <ip_reass_remove_oldest_datagram+0xb4>
 8010392:	693b      	ldr	r3, [r7, #16]
 8010394:	2b01      	cmp	r3, #1
 8010396:	dcac      	bgt.n	80102f2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8010398:	697b      	ldr	r3, [r7, #20]
}
 801039a:	4618      	mov	r0, r3
 801039c:	3728      	adds	r7, #40	; 0x28
 801039e:	46bd      	mov	sp, r7
 80103a0:	bd80      	pop	{r7, pc}
 80103a2:	bf00      	nop
 80103a4:	2000a924 	.word	0x2000a924

080103a8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b084      	sub	sp, #16
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
 80103b0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80103b2:	2004      	movs	r0, #4
 80103b4:	f7f7 fbda 	bl	8007b6c <memp_malloc>
 80103b8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d110      	bne.n	80103e2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80103c0:	6839      	ldr	r1, [r7, #0]
 80103c2:	6878      	ldr	r0, [r7, #4]
 80103c4:	f7ff ff8e 	bl	80102e4 <ip_reass_remove_oldest_datagram>
 80103c8:	4602      	mov	r2, r0
 80103ca:	683b      	ldr	r3, [r7, #0]
 80103cc:	4293      	cmp	r3, r2
 80103ce:	dc03      	bgt.n	80103d8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80103d0:	2004      	movs	r0, #4
 80103d2:	f7f7 fbcb 	bl	8007b6c <memp_malloc>
 80103d6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d101      	bne.n	80103e2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80103de:	2300      	movs	r3, #0
 80103e0:	e016      	b.n	8010410 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80103e2:	2220      	movs	r2, #32
 80103e4:	2100      	movs	r1, #0
 80103e6:	68f8      	ldr	r0, [r7, #12]
 80103e8:	f001 fd03 	bl	8011df2 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	220f      	movs	r2, #15
 80103f0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80103f2:	4b09      	ldr	r3, [pc, #36]	; (8010418 <ip_reass_enqueue_new_datagram+0x70>)
 80103f4:	681a      	ldr	r2, [r3, #0]
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80103fa:	4a07      	ldr	r2, [pc, #28]	; (8010418 <ip_reass_enqueue_new_datagram+0x70>)
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	3308      	adds	r3, #8
 8010404:	2214      	movs	r2, #20
 8010406:	6879      	ldr	r1, [r7, #4]
 8010408:	4618      	mov	r0, r3
 801040a:	f001 fdee 	bl	8011fea <memcpy>
  return ipr;
 801040e:	68fb      	ldr	r3, [r7, #12]
}
 8010410:	4618      	mov	r0, r3
 8010412:	3710      	adds	r7, #16
 8010414:	46bd      	mov	sp, r7
 8010416:	bd80      	pop	{r7, pc}
 8010418:	2000a924 	.word	0x2000a924

0801041c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801041c:	b580      	push	{r7, lr}
 801041e:	b082      	sub	sp, #8
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
 8010424:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8010426:	4b10      	ldr	r3, [pc, #64]	; (8010468 <ip_reass_dequeue_datagram+0x4c>)
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	687a      	ldr	r2, [r7, #4]
 801042c:	429a      	cmp	r2, r3
 801042e:	d104      	bne.n	801043a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	4a0c      	ldr	r2, [pc, #48]	; (8010468 <ip_reass_dequeue_datagram+0x4c>)
 8010436:	6013      	str	r3, [r2, #0]
 8010438:	e00d      	b.n	8010456 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801043a:	683b      	ldr	r3, [r7, #0]
 801043c:	2b00      	cmp	r3, #0
 801043e:	d106      	bne.n	801044e <ip_reass_dequeue_datagram+0x32>
 8010440:	4b0a      	ldr	r3, [pc, #40]	; (801046c <ip_reass_dequeue_datagram+0x50>)
 8010442:	f240 1245 	movw	r2, #325	; 0x145
 8010446:	490a      	ldr	r1, [pc, #40]	; (8010470 <ip_reass_dequeue_datagram+0x54>)
 8010448:	480a      	ldr	r0, [pc, #40]	; (8010474 <ip_reass_dequeue_datagram+0x58>)
 801044a:	f001 fc6d 	bl	8011d28 <iprintf>
    prev->next = ipr->next;
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	681a      	ldr	r2, [r3, #0]
 8010452:	683b      	ldr	r3, [r7, #0]
 8010454:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8010456:	6879      	ldr	r1, [r7, #4]
 8010458:	2004      	movs	r0, #4
 801045a:	f7f7 fbf7 	bl	8007c4c <memp_free>
}
 801045e:	bf00      	nop
 8010460:	3708      	adds	r7, #8
 8010462:	46bd      	mov	sp, r7
 8010464:	bd80      	pop	{r7, pc}
 8010466:	bf00      	nop
 8010468:	2000a924 	.word	0x2000a924
 801046c:	08016438 	.word	0x08016438
 8010470:	08016500 	.word	0x08016500
 8010474:	08016480 	.word	0x08016480

08010478 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8010478:	b580      	push	{r7, lr}
 801047a:	b08c      	sub	sp, #48	; 0x30
 801047c:	af00      	add	r7, sp, #0
 801047e:	60f8      	str	r0, [r7, #12]
 8010480:	60b9      	str	r1, [r7, #8]
 8010482:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8010484:	2300      	movs	r3, #0
 8010486:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8010488:	2301      	movs	r3, #1
 801048a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801048c:	68bb      	ldr	r3, [r7, #8]
 801048e:	685b      	ldr	r3, [r3, #4]
 8010490:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010492:	69fb      	ldr	r3, [r7, #28]
 8010494:	885b      	ldrh	r3, [r3, #2]
 8010496:	b29b      	uxth	r3, r3
 8010498:	4618      	mov	r0, r3
 801049a:	f7f6 feef 	bl	800727c <lwip_htons>
 801049e:	4603      	mov	r3, r0
 80104a0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80104a2:	69fb      	ldr	r3, [r7, #28]
 80104a4:	781b      	ldrb	r3, [r3, #0]
 80104a6:	f003 030f 	and.w	r3, r3, #15
 80104aa:	b2db      	uxtb	r3, r3
 80104ac:	009b      	lsls	r3, r3, #2
 80104ae:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80104b0:	7e7b      	ldrb	r3, [r7, #25]
 80104b2:	b29b      	uxth	r3, r3
 80104b4:	8b7a      	ldrh	r2, [r7, #26]
 80104b6:	429a      	cmp	r2, r3
 80104b8:	d202      	bcs.n	80104c0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80104ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80104be:	e135      	b.n	801072c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80104c0:	7e7b      	ldrb	r3, [r7, #25]
 80104c2:	b29b      	uxth	r3, r3
 80104c4:	8b7a      	ldrh	r2, [r7, #26]
 80104c6:	1ad3      	subs	r3, r2, r3
 80104c8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80104ca:	69fb      	ldr	r3, [r7, #28]
 80104cc:	88db      	ldrh	r3, [r3, #6]
 80104ce:	b29b      	uxth	r3, r3
 80104d0:	4618      	mov	r0, r3
 80104d2:	f7f6 fed3 	bl	800727c <lwip_htons>
 80104d6:	4603      	mov	r3, r0
 80104d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80104dc:	b29b      	uxth	r3, r3
 80104de:	00db      	lsls	r3, r3, #3
 80104e0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80104e2:	68bb      	ldr	r3, [r7, #8]
 80104e4:	685b      	ldr	r3, [r3, #4]
 80104e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80104e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104ea:	2200      	movs	r2, #0
 80104ec:	701a      	strb	r2, [r3, #0]
 80104ee:	2200      	movs	r2, #0
 80104f0:	705a      	strb	r2, [r3, #1]
 80104f2:	2200      	movs	r2, #0
 80104f4:	709a      	strb	r2, [r3, #2]
 80104f6:	2200      	movs	r2, #0
 80104f8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80104fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104fc:	8afa      	ldrh	r2, [r7, #22]
 80104fe:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8010500:	8afa      	ldrh	r2, [r7, #22]
 8010502:	8b7b      	ldrh	r3, [r7, #26]
 8010504:	4413      	add	r3, r2
 8010506:	b29a      	uxth	r2, r3
 8010508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801050a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801050c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801050e:	88db      	ldrh	r3, [r3, #6]
 8010510:	b29b      	uxth	r3, r3
 8010512:	8afa      	ldrh	r2, [r7, #22]
 8010514:	429a      	cmp	r2, r3
 8010516:	d902      	bls.n	801051e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010518:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801051c:	e106      	b.n	801072c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	685b      	ldr	r3, [r3, #4]
 8010522:	627b      	str	r3, [r7, #36]	; 0x24
 8010524:	e068      	b.n	80105f8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8010526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010528:	685b      	ldr	r3, [r3, #4]
 801052a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801052c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801052e:	889b      	ldrh	r3, [r3, #4]
 8010530:	b29a      	uxth	r2, r3
 8010532:	693b      	ldr	r3, [r7, #16]
 8010534:	889b      	ldrh	r3, [r3, #4]
 8010536:	b29b      	uxth	r3, r3
 8010538:	429a      	cmp	r2, r3
 801053a:	d235      	bcs.n	80105a8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801053c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801053e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010540:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8010542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010544:	2b00      	cmp	r3, #0
 8010546:	d020      	beq.n	801058a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8010548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801054a:	889b      	ldrh	r3, [r3, #4]
 801054c:	b29a      	uxth	r2, r3
 801054e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010550:	88db      	ldrh	r3, [r3, #6]
 8010552:	b29b      	uxth	r3, r3
 8010554:	429a      	cmp	r2, r3
 8010556:	d307      	bcc.n	8010568 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8010558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801055a:	88db      	ldrh	r3, [r3, #6]
 801055c:	b29a      	uxth	r2, r3
 801055e:	693b      	ldr	r3, [r7, #16]
 8010560:	889b      	ldrh	r3, [r3, #4]
 8010562:	b29b      	uxth	r3, r3
 8010564:	429a      	cmp	r2, r3
 8010566:	d902      	bls.n	801056e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010568:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801056c:	e0de      	b.n	801072c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801056e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010570:	68ba      	ldr	r2, [r7, #8]
 8010572:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8010574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010576:	88db      	ldrh	r3, [r3, #6]
 8010578:	b29a      	uxth	r2, r3
 801057a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801057c:	889b      	ldrh	r3, [r3, #4]
 801057e:	b29b      	uxth	r3, r3
 8010580:	429a      	cmp	r2, r3
 8010582:	d03d      	beq.n	8010600 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8010584:	2300      	movs	r3, #0
 8010586:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8010588:	e03a      	b.n	8010600 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801058a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801058c:	88db      	ldrh	r3, [r3, #6]
 801058e:	b29a      	uxth	r2, r3
 8010590:	693b      	ldr	r3, [r7, #16]
 8010592:	889b      	ldrh	r3, [r3, #4]
 8010594:	b29b      	uxth	r3, r3
 8010596:	429a      	cmp	r2, r3
 8010598:	d902      	bls.n	80105a0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801059a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801059e:	e0c5      	b.n	801072c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	68ba      	ldr	r2, [r7, #8]
 80105a4:	605a      	str	r2, [r3, #4]
      break;
 80105a6:	e02b      	b.n	8010600 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80105a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105aa:	889b      	ldrh	r3, [r3, #4]
 80105ac:	b29a      	uxth	r2, r3
 80105ae:	693b      	ldr	r3, [r7, #16]
 80105b0:	889b      	ldrh	r3, [r3, #4]
 80105b2:	b29b      	uxth	r3, r3
 80105b4:	429a      	cmp	r2, r3
 80105b6:	d102      	bne.n	80105be <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80105b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80105bc:	e0b6      	b.n	801072c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80105be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105c0:	889b      	ldrh	r3, [r3, #4]
 80105c2:	b29a      	uxth	r2, r3
 80105c4:	693b      	ldr	r3, [r7, #16]
 80105c6:	88db      	ldrh	r3, [r3, #6]
 80105c8:	b29b      	uxth	r3, r3
 80105ca:	429a      	cmp	r2, r3
 80105cc:	d202      	bcs.n	80105d4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80105ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80105d2:	e0ab      	b.n	801072c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80105d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d009      	beq.n	80105ee <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80105da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105dc:	88db      	ldrh	r3, [r3, #6]
 80105de:	b29a      	uxth	r2, r3
 80105e0:	693b      	ldr	r3, [r7, #16]
 80105e2:	889b      	ldrh	r3, [r3, #4]
 80105e4:	b29b      	uxth	r3, r3
 80105e6:	429a      	cmp	r2, r3
 80105e8:	d001      	beq.n	80105ee <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80105ea:	2300      	movs	r3, #0
 80105ec:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80105ee:	693b      	ldr	r3, [r7, #16]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80105f4:	693b      	ldr	r3, [r7, #16]
 80105f6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80105f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d193      	bne.n	8010526 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80105fe:	e000      	b.n	8010602 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8010600:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8010602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010604:	2b00      	cmp	r3, #0
 8010606:	d12d      	bne.n	8010664 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8010608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801060a:	2b00      	cmp	r3, #0
 801060c:	d01c      	beq.n	8010648 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801060e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010610:	88db      	ldrh	r3, [r3, #6]
 8010612:	b29a      	uxth	r2, r3
 8010614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010616:	889b      	ldrh	r3, [r3, #4]
 8010618:	b29b      	uxth	r3, r3
 801061a:	429a      	cmp	r2, r3
 801061c:	d906      	bls.n	801062c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801061e:	4b45      	ldr	r3, [pc, #276]	; (8010734 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010620:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8010624:	4944      	ldr	r1, [pc, #272]	; (8010738 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8010626:	4845      	ldr	r0, [pc, #276]	; (801073c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010628:	f001 fb7e 	bl	8011d28 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801062c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801062e:	68ba      	ldr	r2, [r7, #8]
 8010630:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8010632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010634:	88db      	ldrh	r3, [r3, #6]
 8010636:	b29a      	uxth	r2, r3
 8010638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801063a:	889b      	ldrh	r3, [r3, #4]
 801063c:	b29b      	uxth	r3, r3
 801063e:	429a      	cmp	r2, r3
 8010640:	d010      	beq.n	8010664 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8010642:	2300      	movs	r3, #0
 8010644:	623b      	str	r3, [r7, #32]
 8010646:	e00d      	b.n	8010664 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	685b      	ldr	r3, [r3, #4]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d006      	beq.n	801065e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8010650:	4b38      	ldr	r3, [pc, #224]	; (8010734 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010652:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8010656:	493a      	ldr	r1, [pc, #232]	; (8010740 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8010658:	4838      	ldr	r0, [pc, #224]	; (801073c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801065a:	f001 fb65 	bl	8011d28 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	68ba      	ldr	r2, [r7, #8]
 8010662:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d105      	bne.n	8010676 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	7f9b      	ldrb	r3, [r3, #30]
 801066e:	f003 0301 	and.w	r3, r3, #1
 8010672:	2b00      	cmp	r3, #0
 8010674:	d059      	beq.n	801072a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8010676:	6a3b      	ldr	r3, [r7, #32]
 8010678:	2b00      	cmp	r3, #0
 801067a:	d04f      	beq.n	801071c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	685b      	ldr	r3, [r3, #4]
 8010680:	2b00      	cmp	r3, #0
 8010682:	d006      	beq.n	8010692 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	685b      	ldr	r3, [r3, #4]
 8010688:	685b      	ldr	r3, [r3, #4]
 801068a:	889b      	ldrh	r3, [r3, #4]
 801068c:	b29b      	uxth	r3, r3
 801068e:	2b00      	cmp	r3, #0
 8010690:	d002      	beq.n	8010698 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8010692:	2300      	movs	r3, #0
 8010694:	623b      	str	r3, [r7, #32]
 8010696:	e041      	b.n	801071c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8010698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801069a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801069c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80106a2:	e012      	b.n	80106ca <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80106a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106a6:	685b      	ldr	r3, [r3, #4]
 80106a8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80106aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106ac:	88db      	ldrh	r3, [r3, #6]
 80106ae:	b29a      	uxth	r2, r3
 80106b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106b2:	889b      	ldrh	r3, [r3, #4]
 80106b4:	b29b      	uxth	r3, r3
 80106b6:	429a      	cmp	r2, r3
 80106b8:	d002      	beq.n	80106c0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80106ba:	2300      	movs	r3, #0
 80106bc:	623b      	str	r3, [r7, #32]
            break;
 80106be:	e007      	b.n	80106d0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80106c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106c2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80106c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80106ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d1e9      	bne.n	80106a4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80106d0:	6a3b      	ldr	r3, [r7, #32]
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d022      	beq.n	801071c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	685b      	ldr	r3, [r3, #4]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d106      	bne.n	80106ec <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80106de:	4b15      	ldr	r3, [pc, #84]	; (8010734 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80106e0:	f240 12df 	movw	r2, #479	; 0x1df
 80106e4:	4917      	ldr	r1, [pc, #92]	; (8010744 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80106e6:	4815      	ldr	r0, [pc, #84]	; (801073c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80106e8:	f001 fb1e 	bl	8011d28 <iprintf>
          LWIP_ASSERT("sanity check",
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	685b      	ldr	r3, [r3, #4]
 80106f0:	685b      	ldr	r3, [r3, #4]
 80106f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80106f4:	429a      	cmp	r2, r3
 80106f6:	d106      	bne.n	8010706 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80106f8:	4b0e      	ldr	r3, [pc, #56]	; (8010734 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80106fa:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80106fe:	4911      	ldr	r1, [pc, #68]	; (8010744 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010700:	480e      	ldr	r0, [pc, #56]	; (801073c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010702:	f001 fb11 	bl	8011d28 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8010706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d006      	beq.n	801071c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801070e:	4b09      	ldr	r3, [pc, #36]	; (8010734 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010710:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8010714:	490c      	ldr	r1, [pc, #48]	; (8010748 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8010716:	4809      	ldr	r0, [pc, #36]	; (801073c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010718:	f001 fb06 	bl	8011d28 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801071c:	6a3b      	ldr	r3, [r7, #32]
 801071e:	2b00      	cmp	r3, #0
 8010720:	bf14      	ite	ne
 8010722:	2301      	movne	r3, #1
 8010724:	2300      	moveq	r3, #0
 8010726:	b2db      	uxtb	r3, r3
 8010728:	e000      	b.n	801072c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801072a:	2300      	movs	r3, #0
}
 801072c:	4618      	mov	r0, r3
 801072e:	3730      	adds	r7, #48	; 0x30
 8010730:	46bd      	mov	sp, r7
 8010732:	bd80      	pop	{r7, pc}
 8010734:	08016438 	.word	0x08016438
 8010738:	0801651c 	.word	0x0801651c
 801073c:	08016480 	.word	0x08016480
 8010740:	0801653c 	.word	0x0801653c
 8010744:	08016574 	.word	0x08016574
 8010748:	08016584 	.word	0x08016584

0801074c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801074c:	b580      	push	{r7, lr}
 801074e:	b08e      	sub	sp, #56	; 0x38
 8010750:	af00      	add	r7, sp, #0
 8010752:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	685b      	ldr	r3, [r3, #4]
 8010758:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801075a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801075c:	781b      	ldrb	r3, [r3, #0]
 801075e:	f003 030f 	and.w	r3, r3, #15
 8010762:	b2db      	uxtb	r3, r3
 8010764:	009b      	lsls	r3, r3, #2
 8010766:	b2db      	uxtb	r3, r3
 8010768:	2b14      	cmp	r3, #20
 801076a:	f040 8171 	bne.w	8010a50 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801076e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010770:	88db      	ldrh	r3, [r3, #6]
 8010772:	b29b      	uxth	r3, r3
 8010774:	4618      	mov	r0, r3
 8010776:	f7f6 fd81 	bl	800727c <lwip_htons>
 801077a:	4603      	mov	r3, r0
 801077c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010780:	b29b      	uxth	r3, r3
 8010782:	00db      	lsls	r3, r3, #3
 8010784:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010788:	885b      	ldrh	r3, [r3, #2]
 801078a:	b29b      	uxth	r3, r3
 801078c:	4618      	mov	r0, r3
 801078e:	f7f6 fd75 	bl	800727c <lwip_htons>
 8010792:	4603      	mov	r3, r0
 8010794:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8010796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010798:	781b      	ldrb	r3, [r3, #0]
 801079a:	f003 030f 	and.w	r3, r3, #15
 801079e:	b2db      	uxtb	r3, r3
 80107a0:	009b      	lsls	r3, r3, #2
 80107a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80107a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80107aa:	b29b      	uxth	r3, r3
 80107ac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80107ae:	429a      	cmp	r2, r3
 80107b0:	f0c0 8150 	bcc.w	8010a54 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80107b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80107b8:	b29b      	uxth	r3, r3
 80107ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80107bc:	1ad3      	subs	r3, r2, r3
 80107be:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80107c0:	6878      	ldr	r0, [r7, #4]
 80107c2:	f7f8 f941 	bl	8008a48 <pbuf_clen>
 80107c6:	4603      	mov	r3, r0
 80107c8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80107ca:	4b8c      	ldr	r3, [pc, #560]	; (80109fc <ip4_reass+0x2b0>)
 80107cc:	881b      	ldrh	r3, [r3, #0]
 80107ce:	461a      	mov	r2, r3
 80107d0:	8c3b      	ldrh	r3, [r7, #32]
 80107d2:	4413      	add	r3, r2
 80107d4:	2b0a      	cmp	r3, #10
 80107d6:	dd10      	ble.n	80107fa <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80107d8:	8c3b      	ldrh	r3, [r7, #32]
 80107da:	4619      	mov	r1, r3
 80107dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80107de:	f7ff fd81 	bl	80102e4 <ip_reass_remove_oldest_datagram>
 80107e2:	4603      	mov	r3, r0
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	f000 8137 	beq.w	8010a58 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80107ea:	4b84      	ldr	r3, [pc, #528]	; (80109fc <ip4_reass+0x2b0>)
 80107ec:	881b      	ldrh	r3, [r3, #0]
 80107ee:	461a      	mov	r2, r3
 80107f0:	8c3b      	ldrh	r3, [r7, #32]
 80107f2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80107f4:	2b0a      	cmp	r3, #10
 80107f6:	f300 812f 	bgt.w	8010a58 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80107fa:	4b81      	ldr	r3, [pc, #516]	; (8010a00 <ip4_reass+0x2b4>)
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	633b      	str	r3, [r7, #48]	; 0x30
 8010800:	e015      	b.n	801082e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8010802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010804:	695a      	ldr	r2, [r3, #20]
 8010806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010808:	68db      	ldr	r3, [r3, #12]
 801080a:	429a      	cmp	r2, r3
 801080c:	d10c      	bne.n	8010828 <ip4_reass+0xdc>
 801080e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010810:	699a      	ldr	r2, [r3, #24]
 8010812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010814:	691b      	ldr	r3, [r3, #16]
 8010816:	429a      	cmp	r2, r3
 8010818:	d106      	bne.n	8010828 <ip4_reass+0xdc>
 801081a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801081c:	899a      	ldrh	r2, [r3, #12]
 801081e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010820:	889b      	ldrh	r3, [r3, #4]
 8010822:	b29b      	uxth	r3, r3
 8010824:	429a      	cmp	r2, r3
 8010826:	d006      	beq.n	8010836 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	633b      	str	r3, [r7, #48]	; 0x30
 801082e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010830:	2b00      	cmp	r3, #0
 8010832:	d1e6      	bne.n	8010802 <ip4_reass+0xb6>
 8010834:	e000      	b.n	8010838 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8010836:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8010838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801083a:	2b00      	cmp	r3, #0
 801083c:	d109      	bne.n	8010852 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801083e:	8c3b      	ldrh	r3, [r7, #32]
 8010840:	4619      	mov	r1, r3
 8010842:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010844:	f7ff fdb0 	bl	80103a8 <ip_reass_enqueue_new_datagram>
 8010848:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801084a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801084c:	2b00      	cmp	r3, #0
 801084e:	d11c      	bne.n	801088a <ip4_reass+0x13e>
      goto nullreturn;
 8010850:	e105      	b.n	8010a5e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010854:	88db      	ldrh	r3, [r3, #6]
 8010856:	b29b      	uxth	r3, r3
 8010858:	4618      	mov	r0, r3
 801085a:	f7f6 fd0f 	bl	800727c <lwip_htons>
 801085e:	4603      	mov	r3, r0
 8010860:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010864:	2b00      	cmp	r3, #0
 8010866:	d110      	bne.n	801088a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8010868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801086a:	89db      	ldrh	r3, [r3, #14]
 801086c:	4618      	mov	r0, r3
 801086e:	f7f6 fd05 	bl	800727c <lwip_htons>
 8010872:	4603      	mov	r3, r0
 8010874:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010878:	2b00      	cmp	r3, #0
 801087a:	d006      	beq.n	801088a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801087c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801087e:	3308      	adds	r3, #8
 8010880:	2214      	movs	r2, #20
 8010882:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010884:	4618      	mov	r0, r3
 8010886:	f001 fbb0 	bl	8011fea <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801088a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801088c:	88db      	ldrh	r3, [r3, #6]
 801088e:	b29b      	uxth	r3, r3
 8010890:	f003 0320 	and.w	r3, r3, #32
 8010894:	2b00      	cmp	r3, #0
 8010896:	bf0c      	ite	eq
 8010898:	2301      	moveq	r3, #1
 801089a:	2300      	movne	r3, #0
 801089c:	b2db      	uxtb	r3, r3
 801089e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80108a0:	69fb      	ldr	r3, [r7, #28]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d00e      	beq.n	80108c4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80108a6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80108a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80108aa:	4413      	add	r3, r2
 80108ac:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80108ae:	8b7a      	ldrh	r2, [r7, #26]
 80108b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80108b2:	429a      	cmp	r2, r3
 80108b4:	f0c0 80a0 	bcc.w	80109f8 <ip4_reass+0x2ac>
 80108b8:	8b7b      	ldrh	r3, [r7, #26]
 80108ba:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80108be:	4293      	cmp	r3, r2
 80108c0:	f200 809a 	bhi.w	80109f8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80108c4:	69fa      	ldr	r2, [r7, #28]
 80108c6:	6879      	ldr	r1, [r7, #4]
 80108c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80108ca:	f7ff fdd5 	bl	8010478 <ip_reass_chain_frag_into_datagram_and_validate>
 80108ce:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80108d0:	697b      	ldr	r3, [r7, #20]
 80108d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80108d6:	f000 809b 	beq.w	8010a10 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80108da:	4b48      	ldr	r3, [pc, #288]	; (80109fc <ip4_reass+0x2b0>)
 80108dc:	881a      	ldrh	r2, [r3, #0]
 80108de:	8c3b      	ldrh	r3, [r7, #32]
 80108e0:	4413      	add	r3, r2
 80108e2:	b29a      	uxth	r2, r3
 80108e4:	4b45      	ldr	r3, [pc, #276]	; (80109fc <ip4_reass+0x2b0>)
 80108e6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80108e8:	69fb      	ldr	r3, [r7, #28]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d00d      	beq.n	801090a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80108ee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80108f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80108f2:	4413      	add	r3, r2
 80108f4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80108f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108f8:	8a7a      	ldrh	r2, [r7, #18]
 80108fa:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80108fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108fe:	7f9b      	ldrb	r3, [r3, #30]
 8010900:	f043 0301 	orr.w	r3, r3, #1
 8010904:	b2da      	uxtb	r2, r3
 8010906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010908:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801090a:	697b      	ldr	r3, [r7, #20]
 801090c:	2b01      	cmp	r3, #1
 801090e:	d171      	bne.n	80109f4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8010910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010912:	8b9b      	ldrh	r3, [r3, #28]
 8010914:	3314      	adds	r3, #20
 8010916:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8010918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801091a:	685b      	ldr	r3, [r3, #4]
 801091c:	685b      	ldr	r3, [r3, #4]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8010922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010924:	685b      	ldr	r3, [r3, #4]
 8010926:	685b      	ldr	r3, [r3, #4]
 8010928:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801092a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801092c:	3308      	adds	r3, #8
 801092e:	2214      	movs	r2, #20
 8010930:	4619      	mov	r1, r3
 8010932:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010934:	f001 fb59 	bl	8011fea <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8010938:	8a3b      	ldrh	r3, [r7, #16]
 801093a:	4618      	mov	r0, r3
 801093c:	f7f6 fc9e 	bl	800727c <lwip_htons>
 8010940:	4603      	mov	r3, r0
 8010942:	461a      	mov	r2, r3
 8010944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010946:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8010948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801094a:	2200      	movs	r2, #0
 801094c:	719a      	strb	r2, [r3, #6]
 801094e:	2200      	movs	r2, #0
 8010950:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8010952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010954:	2200      	movs	r2, #0
 8010956:	729a      	strb	r2, [r3, #10]
 8010958:	2200      	movs	r2, #0
 801095a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801095c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801095e:	685b      	ldr	r3, [r3, #4]
 8010960:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8010962:	e00d      	b.n	8010980 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8010964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010966:	685b      	ldr	r3, [r3, #4]
 8010968:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801096a:	2114      	movs	r1, #20
 801096c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801096e:	f7f7 ff5d 	bl	800882c <pbuf_remove_header>
      pbuf_cat(p, r);
 8010972:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010974:	6878      	ldr	r0, [r7, #4]
 8010976:	f7f8 f8a1 	bl	8008abc <pbuf_cat>
      r = iprh->next_pbuf;
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8010980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010982:	2b00      	cmp	r3, #0
 8010984:	d1ee      	bne.n	8010964 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8010986:	4b1e      	ldr	r3, [pc, #120]	; (8010a00 <ip4_reass+0x2b4>)
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801098c:	429a      	cmp	r2, r3
 801098e:	d102      	bne.n	8010996 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8010990:	2300      	movs	r3, #0
 8010992:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010994:	e010      	b.n	80109b8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010996:	4b1a      	ldr	r3, [pc, #104]	; (8010a00 <ip4_reass+0x2b4>)
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801099c:	e007      	b.n	80109ae <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801099e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80109a4:	429a      	cmp	r2, r3
 80109a6:	d006      	beq.n	80109b6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80109a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80109ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d1f4      	bne.n	801099e <ip4_reass+0x252>
 80109b4:	e000      	b.n	80109b8 <ip4_reass+0x26c>
          break;
 80109b6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80109b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80109ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80109bc:	f7ff fd2e 	bl	801041c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80109c0:	6878      	ldr	r0, [r7, #4]
 80109c2:	f7f8 f841 	bl	8008a48 <pbuf_clen>
 80109c6:	4603      	mov	r3, r0
 80109c8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80109ca:	4b0c      	ldr	r3, [pc, #48]	; (80109fc <ip4_reass+0x2b0>)
 80109cc:	881b      	ldrh	r3, [r3, #0]
 80109ce:	8c3a      	ldrh	r2, [r7, #32]
 80109d0:	429a      	cmp	r2, r3
 80109d2:	d906      	bls.n	80109e2 <ip4_reass+0x296>
 80109d4:	4b0b      	ldr	r3, [pc, #44]	; (8010a04 <ip4_reass+0x2b8>)
 80109d6:	f240 229b 	movw	r2, #667	; 0x29b
 80109da:	490b      	ldr	r1, [pc, #44]	; (8010a08 <ip4_reass+0x2bc>)
 80109dc:	480b      	ldr	r0, [pc, #44]	; (8010a0c <ip4_reass+0x2c0>)
 80109de:	f001 f9a3 	bl	8011d28 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80109e2:	4b06      	ldr	r3, [pc, #24]	; (80109fc <ip4_reass+0x2b0>)
 80109e4:	881a      	ldrh	r2, [r3, #0]
 80109e6:	8c3b      	ldrh	r3, [r7, #32]
 80109e8:	1ad3      	subs	r3, r2, r3
 80109ea:	b29a      	uxth	r2, r3
 80109ec:	4b03      	ldr	r3, [pc, #12]	; (80109fc <ip4_reass+0x2b0>)
 80109ee:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	e038      	b.n	8010a66 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80109f4:	2300      	movs	r3, #0
 80109f6:	e036      	b.n	8010a66 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80109f8:	bf00      	nop
 80109fa:	e00a      	b.n	8010a12 <ip4_reass+0x2c6>
 80109fc:	2000a928 	.word	0x2000a928
 8010a00:	2000a924 	.word	0x2000a924
 8010a04:	08016438 	.word	0x08016438
 8010a08:	080165a8 	.word	0x080165a8
 8010a0c:	08016480 	.word	0x08016480
    goto nullreturn_ipr;
 8010a10:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8010a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d106      	bne.n	8010a26 <ip4_reass+0x2da>
 8010a18:	4b15      	ldr	r3, [pc, #84]	; (8010a70 <ip4_reass+0x324>)
 8010a1a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8010a1e:	4915      	ldr	r1, [pc, #84]	; (8010a74 <ip4_reass+0x328>)
 8010a20:	4815      	ldr	r0, [pc, #84]	; (8010a78 <ip4_reass+0x32c>)
 8010a22:	f001 f981 	bl	8011d28 <iprintf>
  if (ipr->p == NULL) {
 8010a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a28:	685b      	ldr	r3, [r3, #4]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d116      	bne.n	8010a5c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8010a2e:	4b13      	ldr	r3, [pc, #76]	; (8010a7c <ip4_reass+0x330>)
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a34:	429a      	cmp	r2, r3
 8010a36:	d006      	beq.n	8010a46 <ip4_reass+0x2fa>
 8010a38:	4b0d      	ldr	r3, [pc, #52]	; (8010a70 <ip4_reass+0x324>)
 8010a3a:	f240 22ab 	movw	r2, #683	; 0x2ab
 8010a3e:	4910      	ldr	r1, [pc, #64]	; (8010a80 <ip4_reass+0x334>)
 8010a40:	480d      	ldr	r0, [pc, #52]	; (8010a78 <ip4_reass+0x32c>)
 8010a42:	f001 f971 	bl	8011d28 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8010a46:	2100      	movs	r1, #0
 8010a48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a4a:	f7ff fce7 	bl	801041c <ip_reass_dequeue_datagram>
 8010a4e:	e006      	b.n	8010a5e <ip4_reass+0x312>
    goto nullreturn;
 8010a50:	bf00      	nop
 8010a52:	e004      	b.n	8010a5e <ip4_reass+0x312>
    goto nullreturn;
 8010a54:	bf00      	nop
 8010a56:	e002      	b.n	8010a5e <ip4_reass+0x312>
      goto nullreturn;
 8010a58:	bf00      	nop
 8010a5a:	e000      	b.n	8010a5e <ip4_reass+0x312>
  }

nullreturn:
 8010a5c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8010a5e:	6878      	ldr	r0, [r7, #4]
 8010a60:	f7f7 ff6a 	bl	8008938 <pbuf_free>
  return NULL;
 8010a64:	2300      	movs	r3, #0
}
 8010a66:	4618      	mov	r0, r3
 8010a68:	3738      	adds	r7, #56	; 0x38
 8010a6a:	46bd      	mov	sp, r7
 8010a6c:	bd80      	pop	{r7, pc}
 8010a6e:	bf00      	nop
 8010a70:	08016438 	.word	0x08016438
 8010a74:	080165c4 	.word	0x080165c4
 8010a78:	08016480 	.word	0x08016480
 8010a7c:	2000a924 	.word	0x2000a924
 8010a80:	080165d0 	.word	0x080165d0

08010a84 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8010a84:	b580      	push	{r7, lr}
 8010a86:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8010a88:	2005      	movs	r0, #5
 8010a8a:	f7f7 f86f 	bl	8007b6c <memp_malloc>
 8010a8e:	4603      	mov	r3, r0
}
 8010a90:	4618      	mov	r0, r3
 8010a92:	bd80      	pop	{r7, pc}

08010a94 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8010a94:	b580      	push	{r7, lr}
 8010a96:	b082      	sub	sp, #8
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d106      	bne.n	8010ab0 <ip_frag_free_pbuf_custom_ref+0x1c>
 8010aa2:	4b07      	ldr	r3, [pc, #28]	; (8010ac0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8010aa4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8010aa8:	4906      	ldr	r1, [pc, #24]	; (8010ac4 <ip_frag_free_pbuf_custom_ref+0x30>)
 8010aaa:	4807      	ldr	r0, [pc, #28]	; (8010ac8 <ip_frag_free_pbuf_custom_ref+0x34>)
 8010aac:	f001 f93c 	bl	8011d28 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8010ab0:	6879      	ldr	r1, [r7, #4]
 8010ab2:	2005      	movs	r0, #5
 8010ab4:	f7f7 f8ca 	bl	8007c4c <memp_free>
}
 8010ab8:	bf00      	nop
 8010aba:	3708      	adds	r7, #8
 8010abc:	46bd      	mov	sp, r7
 8010abe:	bd80      	pop	{r7, pc}
 8010ac0:	08016438 	.word	0x08016438
 8010ac4:	080165f0 	.word	0x080165f0
 8010ac8:	08016480 	.word	0x08016480

08010acc <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8010acc:	b580      	push	{r7, lr}
 8010ace:	b084      	sub	sp, #16
 8010ad0:	af00      	add	r7, sp, #0
 8010ad2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d106      	bne.n	8010aec <ipfrag_free_pbuf_custom+0x20>
 8010ade:	4b11      	ldr	r3, [pc, #68]	; (8010b24 <ipfrag_free_pbuf_custom+0x58>)
 8010ae0:	f240 22ce 	movw	r2, #718	; 0x2ce
 8010ae4:	4910      	ldr	r1, [pc, #64]	; (8010b28 <ipfrag_free_pbuf_custom+0x5c>)
 8010ae6:	4811      	ldr	r0, [pc, #68]	; (8010b2c <ipfrag_free_pbuf_custom+0x60>)
 8010ae8:	f001 f91e 	bl	8011d28 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8010aec:	68fa      	ldr	r2, [r7, #12]
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	429a      	cmp	r2, r3
 8010af2:	d006      	beq.n	8010b02 <ipfrag_free_pbuf_custom+0x36>
 8010af4:	4b0b      	ldr	r3, [pc, #44]	; (8010b24 <ipfrag_free_pbuf_custom+0x58>)
 8010af6:	f240 22cf 	movw	r2, #719	; 0x2cf
 8010afa:	490d      	ldr	r1, [pc, #52]	; (8010b30 <ipfrag_free_pbuf_custom+0x64>)
 8010afc:	480b      	ldr	r0, [pc, #44]	; (8010b2c <ipfrag_free_pbuf_custom+0x60>)
 8010afe:	f001 f913 	bl	8011d28 <iprintf>
  if (pcr->original != NULL) {
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	695b      	ldr	r3, [r3, #20]
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d004      	beq.n	8010b14 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	695b      	ldr	r3, [r3, #20]
 8010b0e:	4618      	mov	r0, r3
 8010b10:	f7f7 ff12 	bl	8008938 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8010b14:	68f8      	ldr	r0, [r7, #12]
 8010b16:	f7ff ffbd 	bl	8010a94 <ip_frag_free_pbuf_custom_ref>
}
 8010b1a:	bf00      	nop
 8010b1c:	3710      	adds	r7, #16
 8010b1e:	46bd      	mov	sp, r7
 8010b20:	bd80      	pop	{r7, pc}
 8010b22:	bf00      	nop
 8010b24:	08016438 	.word	0x08016438
 8010b28:	080165fc 	.word	0x080165fc
 8010b2c:	08016480 	.word	0x08016480
 8010b30:	08016608 	.word	0x08016608

08010b34 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8010b34:	b580      	push	{r7, lr}
 8010b36:	b094      	sub	sp, #80	; 0x50
 8010b38:	af02      	add	r7, sp, #8
 8010b3a:	60f8      	str	r0, [r7, #12]
 8010b3c:	60b9      	str	r1, [r7, #8]
 8010b3e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8010b40:	2300      	movs	r3, #0
 8010b42:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8010b46:	68bb      	ldr	r3, [r7, #8]
 8010b48:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010b4a:	3b14      	subs	r3, #20
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	da00      	bge.n	8010b52 <ip4_frag+0x1e>
 8010b50:	3307      	adds	r3, #7
 8010b52:	10db      	asrs	r3, r3, #3
 8010b54:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8010b56:	2314      	movs	r3, #20
 8010b58:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	685b      	ldr	r3, [r3, #4]
 8010b5e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8010b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b62:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8010b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b66:	781b      	ldrb	r3, [r3, #0]
 8010b68:	f003 030f 	and.w	r3, r3, #15
 8010b6c:	b2db      	uxtb	r3, r3
 8010b6e:	009b      	lsls	r3, r3, #2
 8010b70:	b2db      	uxtb	r3, r3
 8010b72:	2b14      	cmp	r3, #20
 8010b74:	d002      	beq.n	8010b7c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8010b76:	f06f 0305 	mvn.w	r3, #5
 8010b7a:	e110      	b.n	8010d9e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	895b      	ldrh	r3, [r3, #10]
 8010b80:	2b13      	cmp	r3, #19
 8010b82:	d809      	bhi.n	8010b98 <ip4_frag+0x64>
 8010b84:	4b88      	ldr	r3, [pc, #544]	; (8010da8 <ip4_frag+0x274>)
 8010b86:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8010b8a:	4988      	ldr	r1, [pc, #544]	; (8010dac <ip4_frag+0x278>)
 8010b8c:	4888      	ldr	r0, [pc, #544]	; (8010db0 <ip4_frag+0x27c>)
 8010b8e:	f001 f8cb 	bl	8011d28 <iprintf>
 8010b92:	f06f 0305 	mvn.w	r3, #5
 8010b96:	e102      	b.n	8010d9e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8010b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b9a:	88db      	ldrh	r3, [r3, #6]
 8010b9c:	b29b      	uxth	r3, r3
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	f7f6 fb6c 	bl	800727c <lwip_htons>
 8010ba4:	4603      	mov	r3, r0
 8010ba6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8010ba8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010baa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010bae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8010bb2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010bb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010bb8:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	891b      	ldrh	r3, [r3, #8]
 8010bbe:	3b14      	subs	r3, #20
 8010bc0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8010bc4:	e0e1      	b.n	8010d8a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8010bc6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010bc8:	00db      	lsls	r3, r3, #3
 8010bca:	b29b      	uxth	r3, r3
 8010bcc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010bd0:	4293      	cmp	r3, r2
 8010bd2:	bf28      	it	cs
 8010bd4:	4613      	movcs	r3, r2
 8010bd6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8010bd8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010bdc:	2114      	movs	r1, #20
 8010bde:	200e      	movs	r0, #14
 8010be0:	f7f7 fbc6 	bl	8008370 <pbuf_alloc>
 8010be4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8010be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	f000 80d5 	beq.w	8010d98 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8010bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bf0:	895b      	ldrh	r3, [r3, #10]
 8010bf2:	2b13      	cmp	r3, #19
 8010bf4:	d806      	bhi.n	8010c04 <ip4_frag+0xd0>
 8010bf6:	4b6c      	ldr	r3, [pc, #432]	; (8010da8 <ip4_frag+0x274>)
 8010bf8:	f44f 7249 	mov.w	r2, #804	; 0x324
 8010bfc:	496d      	ldr	r1, [pc, #436]	; (8010db4 <ip4_frag+0x280>)
 8010bfe:	486c      	ldr	r0, [pc, #432]	; (8010db0 <ip4_frag+0x27c>)
 8010c00:	f001 f892 	bl	8011d28 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8010c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c06:	685b      	ldr	r3, [r3, #4]
 8010c08:	2214      	movs	r2, #20
 8010c0a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	f001 f9ec 	bl	8011fea <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8010c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c14:	685b      	ldr	r3, [r3, #4]
 8010c16:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8010c18:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010c1a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8010c1e:	e064      	b.n	8010cea <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	895a      	ldrh	r2, [r3, #10]
 8010c24:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010c26:	1ad3      	subs	r3, r2, r3
 8010c28:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	895b      	ldrh	r3, [r3, #10]
 8010c2e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010c30:	429a      	cmp	r2, r3
 8010c32:	d906      	bls.n	8010c42 <ip4_frag+0x10e>
 8010c34:	4b5c      	ldr	r3, [pc, #368]	; (8010da8 <ip4_frag+0x274>)
 8010c36:	f240 322d 	movw	r2, #813	; 0x32d
 8010c3a:	495f      	ldr	r1, [pc, #380]	; (8010db8 <ip4_frag+0x284>)
 8010c3c:	485c      	ldr	r0, [pc, #368]	; (8010db0 <ip4_frag+0x27c>)
 8010c3e:	f001 f873 	bl	8011d28 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8010c42:	8bfa      	ldrh	r2, [r7, #30]
 8010c44:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010c48:	4293      	cmp	r3, r2
 8010c4a:	bf28      	it	cs
 8010c4c:	4613      	movcs	r3, r2
 8010c4e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8010c52:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d105      	bne.n	8010c66 <ip4_frag+0x132>
        poff = 0;
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	60fb      	str	r3, [r7, #12]
        continue;
 8010c64:	e041      	b.n	8010cea <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8010c66:	f7ff ff0d 	bl	8010a84 <ip_frag_alloc_pbuf_custom_ref>
 8010c6a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8010c6c:	69bb      	ldr	r3, [r7, #24]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d103      	bne.n	8010c7a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8010c72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010c74:	f7f7 fe60 	bl	8008938 <pbuf_free>
        goto memerr;
 8010c78:	e08f      	b.n	8010d9a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010c7a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010c80:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010c82:	4413      	add	r3, r2
 8010c84:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8010c88:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8010c8c:	9201      	str	r2, [sp, #4]
 8010c8e:	9300      	str	r3, [sp, #0]
 8010c90:	4603      	mov	r3, r0
 8010c92:	2241      	movs	r2, #65	; 0x41
 8010c94:	2000      	movs	r0, #0
 8010c96:	f7f7 fc95 	bl	80085c4 <pbuf_alloced_custom>
 8010c9a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8010c9c:	697b      	ldr	r3, [r7, #20]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d106      	bne.n	8010cb0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8010ca2:	69b8      	ldr	r0, [r7, #24]
 8010ca4:	f7ff fef6 	bl	8010a94 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8010ca8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010caa:	f7f7 fe45 	bl	8008938 <pbuf_free>
        goto memerr;
 8010cae:	e074      	b.n	8010d9a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8010cb0:	68f8      	ldr	r0, [r7, #12]
 8010cb2:	f7f7 fee1 	bl	8008a78 <pbuf_ref>
      pcr->original = p;
 8010cb6:	69bb      	ldr	r3, [r7, #24]
 8010cb8:	68fa      	ldr	r2, [r7, #12]
 8010cba:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8010cbc:	69bb      	ldr	r3, [r7, #24]
 8010cbe:	4a3f      	ldr	r2, [pc, #252]	; (8010dbc <ip4_frag+0x288>)
 8010cc0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8010cc2:	6979      	ldr	r1, [r7, #20]
 8010cc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010cc6:	f7f7 fef9 	bl	8008abc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8010cca:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8010cce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010cd2:	1ad3      	subs	r3, r2, r3
 8010cd4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8010cd8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d004      	beq.n	8010cea <ip4_frag+0x1b6>
        poff = 0;
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8010cea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d196      	bne.n	8010c20 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8010cf2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010cf4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010cf8:	4413      	add	r3, r2
 8010cfa:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8010cfc:	68bb      	ldr	r3, [r7, #8]
 8010cfe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010d00:	f1a3 0213 	sub.w	r2, r3, #19
 8010d04:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010d08:	429a      	cmp	r2, r3
 8010d0a:	bfcc      	ite	gt
 8010d0c:	2301      	movgt	r3, #1
 8010d0e:	2300      	movle	r3, #0
 8010d10:	b2db      	uxtb	r3, r3
 8010d12:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8010d14:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010d18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010d1c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8010d1e:	6a3b      	ldr	r3, [r7, #32]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d002      	beq.n	8010d2a <ip4_frag+0x1f6>
 8010d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d003      	beq.n	8010d32 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8010d2a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010d2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010d30:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8010d32:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010d34:	4618      	mov	r0, r3
 8010d36:	f7f6 faa1 	bl	800727c <lwip_htons>
 8010d3a:	4603      	mov	r3, r0
 8010d3c:	461a      	mov	r2, r3
 8010d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d40:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8010d42:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010d44:	3314      	adds	r3, #20
 8010d46:	b29b      	uxth	r3, r3
 8010d48:	4618      	mov	r0, r3
 8010d4a:	f7f6 fa97 	bl	800727c <lwip_htons>
 8010d4e:	4603      	mov	r3, r0
 8010d50:	461a      	mov	r2, r3
 8010d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d54:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8010d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d58:	2200      	movs	r2, #0
 8010d5a:	729a      	strb	r2, [r3, #10]
 8010d5c:	2200      	movs	r2, #0
 8010d5e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8010d60:	68bb      	ldr	r3, [r7, #8]
 8010d62:	695b      	ldr	r3, [r3, #20]
 8010d64:	687a      	ldr	r2, [r7, #4]
 8010d66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010d68:	68b8      	ldr	r0, [r7, #8]
 8010d6a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8010d6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010d6e:	f7f7 fde3 	bl	8008938 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8010d72:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010d76:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010d78:	1ad3      	subs	r3, r2, r3
 8010d7a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8010d7e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010d82:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010d84:	4413      	add	r3, r2
 8010d86:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8010d8a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	f47f af19 	bne.w	8010bc6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8010d94:	2300      	movs	r3, #0
 8010d96:	e002      	b.n	8010d9e <ip4_frag+0x26a>
      goto memerr;
 8010d98:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8010d9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8010d9e:	4618      	mov	r0, r3
 8010da0:	3748      	adds	r7, #72	; 0x48
 8010da2:	46bd      	mov	sp, r7
 8010da4:	bd80      	pop	{r7, pc}
 8010da6:	bf00      	nop
 8010da8:	08016438 	.word	0x08016438
 8010dac:	08016614 	.word	0x08016614
 8010db0:	08016480 	.word	0x08016480
 8010db4:	08016630 	.word	0x08016630
 8010db8:	08016650 	.word	0x08016650
 8010dbc:	08010acd 	.word	0x08010acd

08010dc0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8010dc0:	b580      	push	{r7, lr}
 8010dc2:	b086      	sub	sp, #24
 8010dc4:	af00      	add	r7, sp, #0
 8010dc6:	6078      	str	r0, [r7, #4]
 8010dc8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8010dca:	230e      	movs	r3, #14
 8010dcc:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	895b      	ldrh	r3, [r3, #10]
 8010dd2:	2b0e      	cmp	r3, #14
 8010dd4:	d96e      	bls.n	8010eb4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	7bdb      	ldrb	r3, [r3, #15]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d106      	bne.n	8010dec <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8010dde:	683b      	ldr	r3, [r7, #0]
 8010de0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010de4:	3301      	adds	r3, #1
 8010de6:	b2da      	uxtb	r2, r3
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	685b      	ldr	r3, [r3, #4]
 8010df0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8010df2:	693b      	ldr	r3, [r7, #16]
 8010df4:	7b1a      	ldrb	r2, [r3, #12]
 8010df6:	7b5b      	ldrb	r3, [r3, #13]
 8010df8:	021b      	lsls	r3, r3, #8
 8010dfa:	4313      	orrs	r3, r2
 8010dfc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8010dfe:	693b      	ldr	r3, [r7, #16]
 8010e00:	781b      	ldrb	r3, [r3, #0]
 8010e02:	f003 0301 	and.w	r3, r3, #1
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d023      	beq.n	8010e52 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8010e0a:	693b      	ldr	r3, [r7, #16]
 8010e0c:	781b      	ldrb	r3, [r3, #0]
 8010e0e:	2b01      	cmp	r3, #1
 8010e10:	d10f      	bne.n	8010e32 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010e12:	693b      	ldr	r3, [r7, #16]
 8010e14:	785b      	ldrb	r3, [r3, #1]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d11b      	bne.n	8010e52 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8010e1a:	693b      	ldr	r3, [r7, #16]
 8010e1c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010e1e:	2b5e      	cmp	r3, #94	; 0x5e
 8010e20:	d117      	bne.n	8010e52 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	7b5b      	ldrb	r3, [r3, #13]
 8010e26:	f043 0310 	orr.w	r3, r3, #16
 8010e2a:	b2da      	uxtb	r2, r3
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	735a      	strb	r2, [r3, #13]
 8010e30:	e00f      	b.n	8010e52 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8010e32:	693b      	ldr	r3, [r7, #16]
 8010e34:	2206      	movs	r2, #6
 8010e36:	4928      	ldr	r1, [pc, #160]	; (8010ed8 <ethernet_input+0x118>)
 8010e38:	4618      	mov	r0, r3
 8010e3a:	f000 ffca 	bl	8011dd2 <memcmp>
 8010e3e:	4603      	mov	r3, r0
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d106      	bne.n	8010e52 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	7b5b      	ldrb	r3, [r3, #13]
 8010e48:	f043 0308 	orr.w	r3, r3, #8
 8010e4c:	b2da      	uxtb	r2, r3
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8010e52:	89fb      	ldrh	r3, [r7, #14]
 8010e54:	2b08      	cmp	r3, #8
 8010e56:	d003      	beq.n	8010e60 <ethernet_input+0xa0>
 8010e58:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8010e5c:	d014      	beq.n	8010e88 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8010e5e:	e032      	b.n	8010ec6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010e60:	683b      	ldr	r3, [r7, #0]
 8010e62:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010e66:	f003 0308 	and.w	r3, r3, #8
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d024      	beq.n	8010eb8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010e6e:	8afb      	ldrh	r3, [r7, #22]
 8010e70:	4619      	mov	r1, r3
 8010e72:	6878      	ldr	r0, [r7, #4]
 8010e74:	f7f7 fcda 	bl	800882c <pbuf_remove_header>
 8010e78:	4603      	mov	r3, r0
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d11e      	bne.n	8010ebc <ethernet_input+0xfc>
        ip4_input(p, netif);
 8010e7e:	6839      	ldr	r1, [r7, #0]
 8010e80:	6878      	ldr	r0, [r7, #4]
 8010e82:	f7fe ff21 	bl	800fcc8 <ip4_input>
      break;
 8010e86:	e013      	b.n	8010eb0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010e88:	683b      	ldr	r3, [r7, #0]
 8010e8a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010e8e:	f003 0308 	and.w	r3, r3, #8
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d014      	beq.n	8010ec0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010e96:	8afb      	ldrh	r3, [r7, #22]
 8010e98:	4619      	mov	r1, r3
 8010e9a:	6878      	ldr	r0, [r7, #4]
 8010e9c:	f7f7 fcc6 	bl	800882c <pbuf_remove_header>
 8010ea0:	4603      	mov	r3, r0
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d10e      	bne.n	8010ec4 <ethernet_input+0x104>
        etharp_input(p, netif);
 8010ea6:	6839      	ldr	r1, [r7, #0]
 8010ea8:	6878      	ldr	r0, [r7, #4]
 8010eaa:	f7fe f8c1 	bl	800f030 <etharp_input>
      break;
 8010eae:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8010eb0:	2300      	movs	r3, #0
 8010eb2:	e00c      	b.n	8010ece <ethernet_input+0x10e>
    goto free_and_return;
 8010eb4:	bf00      	nop
 8010eb6:	e006      	b.n	8010ec6 <ethernet_input+0x106>
        goto free_and_return;
 8010eb8:	bf00      	nop
 8010eba:	e004      	b.n	8010ec6 <ethernet_input+0x106>
        goto free_and_return;
 8010ebc:	bf00      	nop
 8010ebe:	e002      	b.n	8010ec6 <ethernet_input+0x106>
        goto free_and_return;
 8010ec0:	bf00      	nop
 8010ec2:	e000      	b.n	8010ec6 <ethernet_input+0x106>
        goto free_and_return;
 8010ec4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8010ec6:	6878      	ldr	r0, [r7, #4]
 8010ec8:	f7f7 fd36 	bl	8008938 <pbuf_free>
  return ERR_OK;
 8010ecc:	2300      	movs	r3, #0
}
 8010ece:	4618      	mov	r0, r3
 8010ed0:	3718      	adds	r7, #24
 8010ed2:	46bd      	mov	sp, r7
 8010ed4:	bd80      	pop	{r7, pc}
 8010ed6:	bf00      	nop
 8010ed8:	080167f0 	.word	0x080167f0

08010edc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8010edc:	b580      	push	{r7, lr}
 8010ede:	b086      	sub	sp, #24
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	60f8      	str	r0, [r7, #12]
 8010ee4:	60b9      	str	r1, [r7, #8]
 8010ee6:	607a      	str	r2, [r7, #4]
 8010ee8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8010eea:	8c3b      	ldrh	r3, [r7, #32]
 8010eec:	4618      	mov	r0, r3
 8010eee:	f7f6 f9c5 	bl	800727c <lwip_htons>
 8010ef2:	4603      	mov	r3, r0
 8010ef4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8010ef6:	210e      	movs	r1, #14
 8010ef8:	68b8      	ldr	r0, [r7, #8]
 8010efa:	f7f7 fc87 	bl	800880c <pbuf_add_header>
 8010efe:	4603      	mov	r3, r0
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d125      	bne.n	8010f50 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8010f04:	68bb      	ldr	r3, [r7, #8]
 8010f06:	685b      	ldr	r3, [r3, #4]
 8010f08:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8010f0a:	693b      	ldr	r3, [r7, #16]
 8010f0c:	8afa      	ldrh	r2, [r7, #22]
 8010f0e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8010f10:	693b      	ldr	r3, [r7, #16]
 8010f12:	2206      	movs	r2, #6
 8010f14:	6839      	ldr	r1, [r7, #0]
 8010f16:	4618      	mov	r0, r3
 8010f18:	f001 f867 	bl	8011fea <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8010f1c:	693b      	ldr	r3, [r7, #16]
 8010f1e:	3306      	adds	r3, #6
 8010f20:	2206      	movs	r2, #6
 8010f22:	6879      	ldr	r1, [r7, #4]
 8010f24:	4618      	mov	r0, r3
 8010f26:	f001 f860 	bl	8011fea <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010f30:	2b06      	cmp	r3, #6
 8010f32:	d006      	beq.n	8010f42 <ethernet_output+0x66>
 8010f34:	4b0a      	ldr	r3, [pc, #40]	; (8010f60 <ethernet_output+0x84>)
 8010f36:	f44f 7299 	mov.w	r2, #306	; 0x132
 8010f3a:	490a      	ldr	r1, [pc, #40]	; (8010f64 <ethernet_output+0x88>)
 8010f3c:	480a      	ldr	r0, [pc, #40]	; (8010f68 <ethernet_output+0x8c>)
 8010f3e:	f000 fef3 	bl	8011d28 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	699b      	ldr	r3, [r3, #24]
 8010f46:	68b9      	ldr	r1, [r7, #8]
 8010f48:	68f8      	ldr	r0, [r7, #12]
 8010f4a:	4798      	blx	r3
 8010f4c:	4603      	mov	r3, r0
 8010f4e:	e002      	b.n	8010f56 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8010f50:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8010f52:	f06f 0301 	mvn.w	r3, #1
}
 8010f56:	4618      	mov	r0, r3
 8010f58:	3718      	adds	r7, #24
 8010f5a:	46bd      	mov	sp, r7
 8010f5c:	bd80      	pop	{r7, pc}
 8010f5e:	bf00      	nop
 8010f60:	08016660 	.word	0x08016660
 8010f64:	08016698 	.word	0x08016698
 8010f68:	080166cc 	.word	0x080166cc

08010f6c <atof>:
 8010f6c:	2100      	movs	r1, #0
 8010f6e:	f000 be0d 	b.w	8011b8c <strtod>
	...

08010f74 <rand>:
 8010f74:	4b16      	ldr	r3, [pc, #88]	; (8010fd0 <rand+0x5c>)
 8010f76:	b510      	push	{r4, lr}
 8010f78:	681c      	ldr	r4, [r3, #0]
 8010f7a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010f7c:	b9b3      	cbnz	r3, 8010fac <rand+0x38>
 8010f7e:	2018      	movs	r0, #24
 8010f80:	f001 fc0c 	bl	801279c <malloc>
 8010f84:	4602      	mov	r2, r0
 8010f86:	6320      	str	r0, [r4, #48]	; 0x30
 8010f88:	b920      	cbnz	r0, 8010f94 <rand+0x20>
 8010f8a:	4b12      	ldr	r3, [pc, #72]	; (8010fd4 <rand+0x60>)
 8010f8c:	4812      	ldr	r0, [pc, #72]	; (8010fd8 <rand+0x64>)
 8010f8e:	2152      	movs	r1, #82	; 0x52
 8010f90:	f001 f842 	bl	8012018 <__assert_func>
 8010f94:	4911      	ldr	r1, [pc, #68]	; (8010fdc <rand+0x68>)
 8010f96:	4b12      	ldr	r3, [pc, #72]	; (8010fe0 <rand+0x6c>)
 8010f98:	e9c0 1300 	strd	r1, r3, [r0]
 8010f9c:	4b11      	ldr	r3, [pc, #68]	; (8010fe4 <rand+0x70>)
 8010f9e:	6083      	str	r3, [r0, #8]
 8010fa0:	230b      	movs	r3, #11
 8010fa2:	8183      	strh	r3, [r0, #12]
 8010fa4:	2100      	movs	r1, #0
 8010fa6:	2001      	movs	r0, #1
 8010fa8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8010fac:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010fae:	480e      	ldr	r0, [pc, #56]	; (8010fe8 <rand+0x74>)
 8010fb0:	690b      	ldr	r3, [r1, #16]
 8010fb2:	694c      	ldr	r4, [r1, #20]
 8010fb4:	4a0d      	ldr	r2, [pc, #52]	; (8010fec <rand+0x78>)
 8010fb6:	4358      	muls	r0, r3
 8010fb8:	fb02 0004 	mla	r0, r2, r4, r0
 8010fbc:	fba3 3202 	umull	r3, r2, r3, r2
 8010fc0:	3301      	adds	r3, #1
 8010fc2:	eb40 0002 	adc.w	r0, r0, r2
 8010fc6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8010fca:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8010fce:	bd10      	pop	{r4, pc}
 8010fd0:	200001f0 	.word	0x200001f0
 8010fd4:	080167fe 	.word	0x080167fe
 8010fd8:	08016815 	.word	0x08016815
 8010fdc:	abcd330e 	.word	0xabcd330e
 8010fe0:	e66d1234 	.word	0xe66d1234
 8010fe4:	0005deec 	.word	0x0005deec
 8010fe8:	5851f42d 	.word	0x5851f42d
 8010fec:	4c957f2d 	.word	0x4c957f2d

08010ff0 <sulp>:
 8010ff0:	b570      	push	{r4, r5, r6, lr}
 8010ff2:	4604      	mov	r4, r0
 8010ff4:	460d      	mov	r5, r1
 8010ff6:	4616      	mov	r6, r2
 8010ff8:	ec45 4b10 	vmov	d0, r4, r5
 8010ffc:	f002 f800 	bl	8013000 <__ulp>
 8011000:	b17e      	cbz	r6, 8011022 <sulp+0x32>
 8011002:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011006:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801100a:	2b00      	cmp	r3, #0
 801100c:	dd09      	ble.n	8011022 <sulp+0x32>
 801100e:	051b      	lsls	r3, r3, #20
 8011010:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8011014:	2000      	movs	r0, #0
 8011016:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 801101a:	ec41 0b17 	vmov	d7, r0, r1
 801101e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011022:	bd70      	pop	{r4, r5, r6, pc}
 8011024:	0000      	movs	r0, r0
	...

08011028 <_strtod_l>:
 8011028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801102c:	ed2d 8b0e 	vpush	{d8-d14}
 8011030:	b097      	sub	sp, #92	; 0x5c
 8011032:	4604      	mov	r4, r0
 8011034:	920d      	str	r2, [sp, #52]	; 0x34
 8011036:	2200      	movs	r2, #0
 8011038:	9212      	str	r2, [sp, #72]	; 0x48
 801103a:	468a      	mov	sl, r1
 801103c:	f04f 0800 	mov.w	r8, #0
 8011040:	f04f 0900 	mov.w	r9, #0
 8011044:	460a      	mov	r2, r1
 8011046:	9211      	str	r2, [sp, #68]	; 0x44
 8011048:	7811      	ldrb	r1, [r2, #0]
 801104a:	292b      	cmp	r1, #43	; 0x2b
 801104c:	d04c      	beq.n	80110e8 <_strtod_l+0xc0>
 801104e:	d839      	bhi.n	80110c4 <_strtod_l+0x9c>
 8011050:	290d      	cmp	r1, #13
 8011052:	d833      	bhi.n	80110bc <_strtod_l+0x94>
 8011054:	2908      	cmp	r1, #8
 8011056:	d833      	bhi.n	80110c0 <_strtod_l+0x98>
 8011058:	2900      	cmp	r1, #0
 801105a:	d03c      	beq.n	80110d6 <_strtod_l+0xae>
 801105c:	2200      	movs	r2, #0
 801105e:	9208      	str	r2, [sp, #32]
 8011060:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8011062:	7832      	ldrb	r2, [r6, #0]
 8011064:	2a30      	cmp	r2, #48	; 0x30
 8011066:	f040 80b8 	bne.w	80111da <_strtod_l+0x1b2>
 801106a:	7872      	ldrb	r2, [r6, #1]
 801106c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8011070:	2a58      	cmp	r2, #88	; 0x58
 8011072:	d170      	bne.n	8011156 <_strtod_l+0x12e>
 8011074:	9302      	str	r3, [sp, #8]
 8011076:	9b08      	ldr	r3, [sp, #32]
 8011078:	9301      	str	r3, [sp, #4]
 801107a:	ab12      	add	r3, sp, #72	; 0x48
 801107c:	9300      	str	r3, [sp, #0]
 801107e:	4a91      	ldr	r2, [pc, #580]	; (80112c4 <_strtod_l+0x29c>)
 8011080:	ab13      	add	r3, sp, #76	; 0x4c
 8011082:	a911      	add	r1, sp, #68	; 0x44
 8011084:	4620      	mov	r0, r4
 8011086:	f001 f899 	bl	80121bc <__gethex>
 801108a:	f010 070f 	ands.w	r7, r0, #15
 801108e:	4605      	mov	r5, r0
 8011090:	d005      	beq.n	801109e <_strtod_l+0x76>
 8011092:	2f06      	cmp	r7, #6
 8011094:	d12a      	bne.n	80110ec <_strtod_l+0xc4>
 8011096:	3601      	adds	r6, #1
 8011098:	2300      	movs	r3, #0
 801109a:	9611      	str	r6, [sp, #68]	; 0x44
 801109c:	9308      	str	r3, [sp, #32]
 801109e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	f040 8555 	bne.w	8011b50 <_strtod_l+0xb28>
 80110a6:	9b08      	ldr	r3, [sp, #32]
 80110a8:	ec49 8b10 	vmov	d0, r8, r9
 80110ac:	b1cb      	cbz	r3, 80110e2 <_strtod_l+0xba>
 80110ae:	eeb1 0b40 	vneg.f64	d0, d0
 80110b2:	b017      	add	sp, #92	; 0x5c
 80110b4:	ecbd 8b0e 	vpop	{d8-d14}
 80110b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110bc:	2920      	cmp	r1, #32
 80110be:	d1cd      	bne.n	801105c <_strtod_l+0x34>
 80110c0:	3201      	adds	r2, #1
 80110c2:	e7c0      	b.n	8011046 <_strtod_l+0x1e>
 80110c4:	292d      	cmp	r1, #45	; 0x2d
 80110c6:	d1c9      	bne.n	801105c <_strtod_l+0x34>
 80110c8:	2101      	movs	r1, #1
 80110ca:	9108      	str	r1, [sp, #32]
 80110cc:	1c51      	adds	r1, r2, #1
 80110ce:	9111      	str	r1, [sp, #68]	; 0x44
 80110d0:	7852      	ldrb	r2, [r2, #1]
 80110d2:	2a00      	cmp	r2, #0
 80110d4:	d1c4      	bne.n	8011060 <_strtod_l+0x38>
 80110d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80110d8:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 80110dc:	2b00      	cmp	r3, #0
 80110de:	f040 8535 	bne.w	8011b4c <_strtod_l+0xb24>
 80110e2:	ec49 8b10 	vmov	d0, r8, r9
 80110e6:	e7e4      	b.n	80110b2 <_strtod_l+0x8a>
 80110e8:	2100      	movs	r1, #0
 80110ea:	e7ee      	b.n	80110ca <_strtod_l+0xa2>
 80110ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80110ee:	b13a      	cbz	r2, 8011100 <_strtod_l+0xd8>
 80110f0:	2135      	movs	r1, #53	; 0x35
 80110f2:	a814      	add	r0, sp, #80	; 0x50
 80110f4:	f002 f87e 	bl	80131f4 <__copybits>
 80110f8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80110fa:	4620      	mov	r0, r4
 80110fc:	f001 fc54 	bl	80129a8 <_Bfree>
 8011100:	1e7b      	subs	r3, r7, #1
 8011102:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011104:	2b04      	cmp	r3, #4
 8011106:	d806      	bhi.n	8011116 <_strtod_l+0xee>
 8011108:	e8df f003 	tbb	[pc, r3]
 801110c:	201d0314 	.word	0x201d0314
 8011110:	14          	.byte	0x14
 8011111:	00          	.byte	0x00
 8011112:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8011116:	05eb      	lsls	r3, r5, #23
 8011118:	bf48      	it	mi
 801111a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801111e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011122:	0d1b      	lsrs	r3, r3, #20
 8011124:	051b      	lsls	r3, r3, #20
 8011126:	2b00      	cmp	r3, #0
 8011128:	d1b9      	bne.n	801109e <_strtod_l+0x76>
 801112a:	f000 ff31 	bl	8011f90 <__errno>
 801112e:	2322      	movs	r3, #34	; 0x22
 8011130:	6003      	str	r3, [r0, #0]
 8011132:	e7b4      	b.n	801109e <_strtod_l+0x76>
 8011134:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8011138:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801113c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011140:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8011144:	e7e7      	b.n	8011116 <_strtod_l+0xee>
 8011146:	f8df 9184 	ldr.w	r9, [pc, #388]	; 80112cc <_strtod_l+0x2a4>
 801114a:	e7e4      	b.n	8011116 <_strtod_l+0xee>
 801114c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8011150:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8011154:	e7df      	b.n	8011116 <_strtod_l+0xee>
 8011156:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011158:	1c5a      	adds	r2, r3, #1
 801115a:	9211      	str	r2, [sp, #68]	; 0x44
 801115c:	785b      	ldrb	r3, [r3, #1]
 801115e:	2b30      	cmp	r3, #48	; 0x30
 8011160:	d0f9      	beq.n	8011156 <_strtod_l+0x12e>
 8011162:	2b00      	cmp	r3, #0
 8011164:	d09b      	beq.n	801109e <_strtod_l+0x76>
 8011166:	2301      	movs	r3, #1
 8011168:	9306      	str	r3, [sp, #24]
 801116a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801116c:	9309      	str	r3, [sp, #36]	; 0x24
 801116e:	2300      	movs	r3, #0
 8011170:	9305      	str	r3, [sp, #20]
 8011172:	9307      	str	r3, [sp, #28]
 8011174:	461e      	mov	r6, r3
 8011176:	220a      	movs	r2, #10
 8011178:	9811      	ldr	r0, [sp, #68]	; 0x44
 801117a:	7805      	ldrb	r5, [r0, #0]
 801117c:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8011180:	b2d9      	uxtb	r1, r3
 8011182:	2909      	cmp	r1, #9
 8011184:	d92b      	bls.n	80111de <_strtod_l+0x1b6>
 8011186:	4950      	ldr	r1, [pc, #320]	; (80112c8 <_strtod_l+0x2a0>)
 8011188:	2201      	movs	r2, #1
 801118a:	f000 fe3a 	bl	8011e02 <strncmp>
 801118e:	2800      	cmp	r0, #0
 8011190:	d035      	beq.n	80111fe <_strtod_l+0x1d6>
 8011192:	2000      	movs	r0, #0
 8011194:	462a      	mov	r2, r5
 8011196:	4633      	mov	r3, r6
 8011198:	4683      	mov	fp, r0
 801119a:	4601      	mov	r1, r0
 801119c:	2a65      	cmp	r2, #101	; 0x65
 801119e:	d001      	beq.n	80111a4 <_strtod_l+0x17c>
 80111a0:	2a45      	cmp	r2, #69	; 0x45
 80111a2:	d118      	bne.n	80111d6 <_strtod_l+0x1ae>
 80111a4:	b91b      	cbnz	r3, 80111ae <_strtod_l+0x186>
 80111a6:	9b06      	ldr	r3, [sp, #24]
 80111a8:	4303      	orrs	r3, r0
 80111aa:	d094      	beq.n	80110d6 <_strtod_l+0xae>
 80111ac:	2300      	movs	r3, #0
 80111ae:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 80111b2:	f10a 0201 	add.w	r2, sl, #1
 80111b6:	9211      	str	r2, [sp, #68]	; 0x44
 80111b8:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80111bc:	2a2b      	cmp	r2, #43	; 0x2b
 80111be:	d075      	beq.n	80112ac <_strtod_l+0x284>
 80111c0:	2a2d      	cmp	r2, #45	; 0x2d
 80111c2:	d07b      	beq.n	80112bc <_strtod_l+0x294>
 80111c4:	f04f 0e00 	mov.w	lr, #0
 80111c8:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80111cc:	2d09      	cmp	r5, #9
 80111ce:	f240 8083 	bls.w	80112d8 <_strtod_l+0x2b0>
 80111d2:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 80111d6:	2500      	movs	r5, #0
 80111d8:	e09e      	b.n	8011318 <_strtod_l+0x2f0>
 80111da:	2300      	movs	r3, #0
 80111dc:	e7c4      	b.n	8011168 <_strtod_l+0x140>
 80111de:	2e08      	cmp	r6, #8
 80111e0:	bfd5      	itete	le
 80111e2:	9907      	ldrle	r1, [sp, #28]
 80111e4:	9905      	ldrgt	r1, [sp, #20]
 80111e6:	fb02 3301 	mlale	r3, r2, r1, r3
 80111ea:	fb02 3301 	mlagt	r3, r2, r1, r3
 80111ee:	f100 0001 	add.w	r0, r0, #1
 80111f2:	bfd4      	ite	le
 80111f4:	9307      	strle	r3, [sp, #28]
 80111f6:	9305      	strgt	r3, [sp, #20]
 80111f8:	3601      	adds	r6, #1
 80111fa:	9011      	str	r0, [sp, #68]	; 0x44
 80111fc:	e7bc      	b.n	8011178 <_strtod_l+0x150>
 80111fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011200:	1c5a      	adds	r2, r3, #1
 8011202:	9211      	str	r2, [sp, #68]	; 0x44
 8011204:	785a      	ldrb	r2, [r3, #1]
 8011206:	b3ae      	cbz	r6, 8011274 <_strtod_l+0x24c>
 8011208:	4683      	mov	fp, r0
 801120a:	4633      	mov	r3, r6
 801120c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8011210:	2909      	cmp	r1, #9
 8011212:	d912      	bls.n	801123a <_strtod_l+0x212>
 8011214:	2101      	movs	r1, #1
 8011216:	e7c1      	b.n	801119c <_strtod_l+0x174>
 8011218:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801121a:	1c5a      	adds	r2, r3, #1
 801121c:	9211      	str	r2, [sp, #68]	; 0x44
 801121e:	785a      	ldrb	r2, [r3, #1]
 8011220:	3001      	adds	r0, #1
 8011222:	2a30      	cmp	r2, #48	; 0x30
 8011224:	d0f8      	beq.n	8011218 <_strtod_l+0x1f0>
 8011226:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801122a:	2b08      	cmp	r3, #8
 801122c:	f200 8495 	bhi.w	8011b5a <_strtod_l+0xb32>
 8011230:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011232:	9309      	str	r3, [sp, #36]	; 0x24
 8011234:	4683      	mov	fp, r0
 8011236:	2000      	movs	r0, #0
 8011238:	4603      	mov	r3, r0
 801123a:	3a30      	subs	r2, #48	; 0x30
 801123c:	f100 0101 	add.w	r1, r0, #1
 8011240:	d012      	beq.n	8011268 <_strtod_l+0x240>
 8011242:	448b      	add	fp, r1
 8011244:	eb00 0c03 	add.w	ip, r0, r3
 8011248:	4619      	mov	r1, r3
 801124a:	250a      	movs	r5, #10
 801124c:	4561      	cmp	r1, ip
 801124e:	d113      	bne.n	8011278 <_strtod_l+0x250>
 8011250:	1819      	adds	r1, r3, r0
 8011252:	2908      	cmp	r1, #8
 8011254:	f103 0301 	add.w	r3, r3, #1
 8011258:	4403      	add	r3, r0
 801125a:	dc1b      	bgt.n	8011294 <_strtod_l+0x26c>
 801125c:	9807      	ldr	r0, [sp, #28]
 801125e:	210a      	movs	r1, #10
 8011260:	fb01 2200 	mla	r2, r1, r0, r2
 8011264:	9207      	str	r2, [sp, #28]
 8011266:	2100      	movs	r1, #0
 8011268:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801126a:	1c50      	adds	r0, r2, #1
 801126c:	9011      	str	r0, [sp, #68]	; 0x44
 801126e:	7852      	ldrb	r2, [r2, #1]
 8011270:	4608      	mov	r0, r1
 8011272:	e7cb      	b.n	801120c <_strtod_l+0x1e4>
 8011274:	4630      	mov	r0, r6
 8011276:	e7d4      	b.n	8011222 <_strtod_l+0x1fa>
 8011278:	2908      	cmp	r1, #8
 801127a:	f101 0101 	add.w	r1, r1, #1
 801127e:	dc03      	bgt.n	8011288 <_strtod_l+0x260>
 8011280:	9f07      	ldr	r7, [sp, #28]
 8011282:	436f      	muls	r7, r5
 8011284:	9707      	str	r7, [sp, #28]
 8011286:	e7e1      	b.n	801124c <_strtod_l+0x224>
 8011288:	2910      	cmp	r1, #16
 801128a:	bfde      	ittt	le
 801128c:	9f05      	ldrle	r7, [sp, #20]
 801128e:	436f      	mulle	r7, r5
 8011290:	9705      	strle	r7, [sp, #20]
 8011292:	e7db      	b.n	801124c <_strtod_l+0x224>
 8011294:	2b10      	cmp	r3, #16
 8011296:	bfdf      	itttt	le
 8011298:	9805      	ldrle	r0, [sp, #20]
 801129a:	210a      	movle	r1, #10
 801129c:	fb01 2200 	mlale	r2, r1, r0, r2
 80112a0:	9205      	strle	r2, [sp, #20]
 80112a2:	e7e0      	b.n	8011266 <_strtod_l+0x23e>
 80112a4:	f04f 0b00 	mov.w	fp, #0
 80112a8:	2101      	movs	r1, #1
 80112aa:	e77c      	b.n	80111a6 <_strtod_l+0x17e>
 80112ac:	f04f 0e00 	mov.w	lr, #0
 80112b0:	f10a 0202 	add.w	r2, sl, #2
 80112b4:	9211      	str	r2, [sp, #68]	; 0x44
 80112b6:	f89a 2002 	ldrb.w	r2, [sl, #2]
 80112ba:	e785      	b.n	80111c8 <_strtod_l+0x1a0>
 80112bc:	f04f 0e01 	mov.w	lr, #1
 80112c0:	e7f6      	b.n	80112b0 <_strtod_l+0x288>
 80112c2:	bf00      	nop
 80112c4:	0801687c 	.word	0x0801687c
 80112c8:	0801686d 	.word	0x0801686d
 80112cc:	7ff00000 	.word	0x7ff00000
 80112d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80112d2:	1c55      	adds	r5, r2, #1
 80112d4:	9511      	str	r5, [sp, #68]	; 0x44
 80112d6:	7852      	ldrb	r2, [r2, #1]
 80112d8:	2a30      	cmp	r2, #48	; 0x30
 80112da:	d0f9      	beq.n	80112d0 <_strtod_l+0x2a8>
 80112dc:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 80112e0:	2d08      	cmp	r5, #8
 80112e2:	f63f af78 	bhi.w	80111d6 <_strtod_l+0x1ae>
 80112e6:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80112ea:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80112ec:	920a      	str	r2, [sp, #40]	; 0x28
 80112ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80112f0:	1c55      	adds	r5, r2, #1
 80112f2:	9511      	str	r5, [sp, #68]	; 0x44
 80112f4:	7852      	ldrb	r2, [r2, #1]
 80112f6:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 80112fa:	2f09      	cmp	r7, #9
 80112fc:	d937      	bls.n	801136e <_strtod_l+0x346>
 80112fe:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8011300:	1bed      	subs	r5, r5, r7
 8011302:	2d08      	cmp	r5, #8
 8011304:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8011308:	dc02      	bgt.n	8011310 <_strtod_l+0x2e8>
 801130a:	4565      	cmp	r5, ip
 801130c:	bfa8      	it	ge
 801130e:	4665      	movge	r5, ip
 8011310:	f1be 0f00 	cmp.w	lr, #0
 8011314:	d000      	beq.n	8011318 <_strtod_l+0x2f0>
 8011316:	426d      	negs	r5, r5
 8011318:	2b00      	cmp	r3, #0
 801131a:	d14d      	bne.n	80113b8 <_strtod_l+0x390>
 801131c:	9b06      	ldr	r3, [sp, #24]
 801131e:	4303      	orrs	r3, r0
 8011320:	f47f aebd 	bne.w	801109e <_strtod_l+0x76>
 8011324:	2900      	cmp	r1, #0
 8011326:	f47f aed6 	bne.w	80110d6 <_strtod_l+0xae>
 801132a:	2a69      	cmp	r2, #105	; 0x69
 801132c:	d027      	beq.n	801137e <_strtod_l+0x356>
 801132e:	dc24      	bgt.n	801137a <_strtod_l+0x352>
 8011330:	2a49      	cmp	r2, #73	; 0x49
 8011332:	d024      	beq.n	801137e <_strtod_l+0x356>
 8011334:	2a4e      	cmp	r2, #78	; 0x4e
 8011336:	f47f aece 	bne.w	80110d6 <_strtod_l+0xae>
 801133a:	4995      	ldr	r1, [pc, #596]	; (8011590 <_strtod_l+0x568>)
 801133c:	a811      	add	r0, sp, #68	; 0x44
 801133e:	f001 f97d 	bl	801263c <__match>
 8011342:	2800      	cmp	r0, #0
 8011344:	f43f aec7 	beq.w	80110d6 <_strtod_l+0xae>
 8011348:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801134a:	781b      	ldrb	r3, [r3, #0]
 801134c:	2b28      	cmp	r3, #40	; 0x28
 801134e:	d12d      	bne.n	80113ac <_strtod_l+0x384>
 8011350:	4990      	ldr	r1, [pc, #576]	; (8011594 <_strtod_l+0x56c>)
 8011352:	aa14      	add	r2, sp, #80	; 0x50
 8011354:	a811      	add	r0, sp, #68	; 0x44
 8011356:	f001 f985 	bl	8012664 <__hexnan>
 801135a:	2805      	cmp	r0, #5
 801135c:	d126      	bne.n	80113ac <_strtod_l+0x384>
 801135e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011360:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8011364:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8011368:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801136c:	e697      	b.n	801109e <_strtod_l+0x76>
 801136e:	250a      	movs	r5, #10
 8011370:	fb05 2c0c 	mla	ip, r5, ip, r2
 8011374:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8011378:	e7b9      	b.n	80112ee <_strtod_l+0x2c6>
 801137a:	2a6e      	cmp	r2, #110	; 0x6e
 801137c:	e7db      	b.n	8011336 <_strtod_l+0x30e>
 801137e:	4986      	ldr	r1, [pc, #536]	; (8011598 <_strtod_l+0x570>)
 8011380:	a811      	add	r0, sp, #68	; 0x44
 8011382:	f001 f95b 	bl	801263c <__match>
 8011386:	2800      	cmp	r0, #0
 8011388:	f43f aea5 	beq.w	80110d6 <_strtod_l+0xae>
 801138c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801138e:	4983      	ldr	r1, [pc, #524]	; (801159c <_strtod_l+0x574>)
 8011390:	3b01      	subs	r3, #1
 8011392:	a811      	add	r0, sp, #68	; 0x44
 8011394:	9311      	str	r3, [sp, #68]	; 0x44
 8011396:	f001 f951 	bl	801263c <__match>
 801139a:	b910      	cbnz	r0, 80113a2 <_strtod_l+0x37a>
 801139c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801139e:	3301      	adds	r3, #1
 80113a0:	9311      	str	r3, [sp, #68]	; 0x44
 80113a2:	f8df 920c 	ldr.w	r9, [pc, #524]	; 80115b0 <_strtod_l+0x588>
 80113a6:	f04f 0800 	mov.w	r8, #0
 80113aa:	e678      	b.n	801109e <_strtod_l+0x76>
 80113ac:	487c      	ldr	r0, [pc, #496]	; (80115a0 <_strtod_l+0x578>)
 80113ae:	f000 fe2b 	bl	8012008 <nan>
 80113b2:	ec59 8b10 	vmov	r8, r9, d0
 80113b6:	e672      	b.n	801109e <_strtod_l+0x76>
 80113b8:	eddd 7a07 	vldr	s15, [sp, #28]
 80113bc:	eba5 020b 	sub.w	r2, r5, fp
 80113c0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80113c4:	2e00      	cmp	r6, #0
 80113c6:	bf08      	it	eq
 80113c8:	461e      	moveq	r6, r3
 80113ca:	2b10      	cmp	r3, #16
 80113cc:	9206      	str	r2, [sp, #24]
 80113ce:	461a      	mov	r2, r3
 80113d0:	bfa8      	it	ge
 80113d2:	2210      	movge	r2, #16
 80113d4:	2b09      	cmp	r3, #9
 80113d6:	ec59 8b17 	vmov	r8, r9, d7
 80113da:	dd0c      	ble.n	80113f6 <_strtod_l+0x3ce>
 80113dc:	4971      	ldr	r1, [pc, #452]	; (80115a4 <_strtod_l+0x57c>)
 80113de:	eddd 6a05 	vldr	s13, [sp, #20]
 80113e2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80113e6:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 80113ea:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80113ee:	eea7 6b05 	vfma.f64	d6, d7, d5
 80113f2:	ec59 8b16 	vmov	r8, r9, d6
 80113f6:	2b0f      	cmp	r3, #15
 80113f8:	dc37      	bgt.n	801146a <_strtod_l+0x442>
 80113fa:	9906      	ldr	r1, [sp, #24]
 80113fc:	2900      	cmp	r1, #0
 80113fe:	f43f ae4e 	beq.w	801109e <_strtod_l+0x76>
 8011402:	dd23      	ble.n	801144c <_strtod_l+0x424>
 8011404:	2916      	cmp	r1, #22
 8011406:	dc0b      	bgt.n	8011420 <_strtod_l+0x3f8>
 8011408:	4b66      	ldr	r3, [pc, #408]	; (80115a4 <_strtod_l+0x57c>)
 801140a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801140e:	ed93 7b00 	vldr	d7, [r3]
 8011412:	ec49 8b16 	vmov	d6, r8, r9
 8011416:	ee27 7b06 	vmul.f64	d7, d7, d6
 801141a:	ec59 8b17 	vmov	r8, r9, d7
 801141e:	e63e      	b.n	801109e <_strtod_l+0x76>
 8011420:	9806      	ldr	r0, [sp, #24]
 8011422:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8011426:	4281      	cmp	r1, r0
 8011428:	db1f      	blt.n	801146a <_strtod_l+0x442>
 801142a:	4a5e      	ldr	r2, [pc, #376]	; (80115a4 <_strtod_l+0x57c>)
 801142c:	f1c3 030f 	rsb	r3, r3, #15
 8011430:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8011434:	ed91 7b00 	vldr	d7, [r1]
 8011438:	ec49 8b16 	vmov	d6, r8, r9
 801143c:	1ac3      	subs	r3, r0, r3
 801143e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8011442:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011446:	ed92 6b00 	vldr	d6, [r2]
 801144a:	e7e4      	b.n	8011416 <_strtod_l+0x3ee>
 801144c:	9906      	ldr	r1, [sp, #24]
 801144e:	3116      	adds	r1, #22
 8011450:	db0b      	blt.n	801146a <_strtod_l+0x442>
 8011452:	4b54      	ldr	r3, [pc, #336]	; (80115a4 <_strtod_l+0x57c>)
 8011454:	ebab 0505 	sub.w	r5, fp, r5
 8011458:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801145c:	ed95 7b00 	vldr	d7, [r5]
 8011460:	ec49 8b16 	vmov	d6, r8, r9
 8011464:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011468:	e7d7      	b.n	801141a <_strtod_l+0x3f2>
 801146a:	9906      	ldr	r1, [sp, #24]
 801146c:	1a9a      	subs	r2, r3, r2
 801146e:	440a      	add	r2, r1
 8011470:	2a00      	cmp	r2, #0
 8011472:	dd6e      	ble.n	8011552 <_strtod_l+0x52a>
 8011474:	f012 000f 	ands.w	r0, r2, #15
 8011478:	d00a      	beq.n	8011490 <_strtod_l+0x468>
 801147a:	494a      	ldr	r1, [pc, #296]	; (80115a4 <_strtod_l+0x57c>)
 801147c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8011480:	ed91 7b00 	vldr	d7, [r1]
 8011484:	ec49 8b16 	vmov	d6, r8, r9
 8011488:	ee27 7b06 	vmul.f64	d7, d7, d6
 801148c:	ec59 8b17 	vmov	r8, r9, d7
 8011490:	f032 020f 	bics.w	r2, r2, #15
 8011494:	d04e      	beq.n	8011534 <_strtod_l+0x50c>
 8011496:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 801149a:	dd22      	ble.n	80114e2 <_strtod_l+0x4ba>
 801149c:	2500      	movs	r5, #0
 801149e:	462e      	mov	r6, r5
 80114a0:	9507      	str	r5, [sp, #28]
 80114a2:	462f      	mov	r7, r5
 80114a4:	2322      	movs	r3, #34	; 0x22
 80114a6:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80115b0 <_strtod_l+0x588>
 80114aa:	6023      	str	r3, [r4, #0]
 80114ac:	f04f 0800 	mov.w	r8, #0
 80114b0:	9b07      	ldr	r3, [sp, #28]
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	f43f adf3 	beq.w	801109e <_strtod_l+0x76>
 80114b8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80114ba:	4620      	mov	r0, r4
 80114bc:	f001 fa74 	bl	80129a8 <_Bfree>
 80114c0:	4639      	mov	r1, r7
 80114c2:	4620      	mov	r0, r4
 80114c4:	f001 fa70 	bl	80129a8 <_Bfree>
 80114c8:	4631      	mov	r1, r6
 80114ca:	4620      	mov	r0, r4
 80114cc:	f001 fa6c 	bl	80129a8 <_Bfree>
 80114d0:	9907      	ldr	r1, [sp, #28]
 80114d2:	4620      	mov	r0, r4
 80114d4:	f001 fa68 	bl	80129a8 <_Bfree>
 80114d8:	4629      	mov	r1, r5
 80114da:	4620      	mov	r0, r4
 80114dc:	f001 fa64 	bl	80129a8 <_Bfree>
 80114e0:	e5dd      	b.n	801109e <_strtod_l+0x76>
 80114e2:	2000      	movs	r0, #0
 80114e4:	ec49 8b17 	vmov	d7, r8, r9
 80114e8:	4f2f      	ldr	r7, [pc, #188]	; (80115a8 <_strtod_l+0x580>)
 80114ea:	1112      	asrs	r2, r2, #4
 80114ec:	4601      	mov	r1, r0
 80114ee:	2a01      	cmp	r2, #1
 80114f0:	dc23      	bgt.n	801153a <_strtod_l+0x512>
 80114f2:	b108      	cbz	r0, 80114f8 <_strtod_l+0x4d0>
 80114f4:	ec59 8b17 	vmov	r8, r9, d7
 80114f8:	4a2b      	ldr	r2, [pc, #172]	; (80115a8 <_strtod_l+0x580>)
 80114fa:	482c      	ldr	r0, [pc, #176]	; (80115ac <_strtod_l+0x584>)
 80114fc:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8011500:	ed92 7b00 	vldr	d7, [r2]
 8011504:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8011508:	ec49 8b16 	vmov	d6, r8, r9
 801150c:	4a28      	ldr	r2, [pc, #160]	; (80115b0 <_strtod_l+0x588>)
 801150e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011512:	ee17 1a90 	vmov	r1, s15
 8011516:	400a      	ands	r2, r1
 8011518:	4282      	cmp	r2, r0
 801151a:	ec59 8b17 	vmov	r8, r9, d7
 801151e:	d8bd      	bhi.n	801149c <_strtod_l+0x474>
 8011520:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8011524:	4282      	cmp	r2, r0
 8011526:	bf86      	itte	hi
 8011528:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 80115b4 <_strtod_l+0x58c>
 801152c:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8011530:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8011534:	2200      	movs	r2, #0
 8011536:	9205      	str	r2, [sp, #20]
 8011538:	e076      	b.n	8011628 <_strtod_l+0x600>
 801153a:	f012 0f01 	tst.w	r2, #1
 801153e:	d004      	beq.n	801154a <_strtod_l+0x522>
 8011540:	ed97 6b00 	vldr	d6, [r7]
 8011544:	2001      	movs	r0, #1
 8011546:	ee27 7b06 	vmul.f64	d7, d7, d6
 801154a:	3101      	adds	r1, #1
 801154c:	1052      	asrs	r2, r2, #1
 801154e:	3708      	adds	r7, #8
 8011550:	e7cd      	b.n	80114ee <_strtod_l+0x4c6>
 8011552:	d0ef      	beq.n	8011534 <_strtod_l+0x50c>
 8011554:	4252      	negs	r2, r2
 8011556:	f012 000f 	ands.w	r0, r2, #15
 801155a:	d00a      	beq.n	8011572 <_strtod_l+0x54a>
 801155c:	4911      	ldr	r1, [pc, #68]	; (80115a4 <_strtod_l+0x57c>)
 801155e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8011562:	ed91 7b00 	vldr	d7, [r1]
 8011566:	ec49 8b16 	vmov	d6, r8, r9
 801156a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801156e:	ec59 8b17 	vmov	r8, r9, d7
 8011572:	1112      	asrs	r2, r2, #4
 8011574:	d0de      	beq.n	8011534 <_strtod_l+0x50c>
 8011576:	2a1f      	cmp	r2, #31
 8011578:	dd1e      	ble.n	80115b8 <_strtod_l+0x590>
 801157a:	2500      	movs	r5, #0
 801157c:	462e      	mov	r6, r5
 801157e:	9507      	str	r5, [sp, #28]
 8011580:	462f      	mov	r7, r5
 8011582:	2322      	movs	r3, #34	; 0x22
 8011584:	f04f 0800 	mov.w	r8, #0
 8011588:	f04f 0900 	mov.w	r9, #0
 801158c:	6023      	str	r3, [r4, #0]
 801158e:	e78f      	b.n	80114b0 <_strtod_l+0x488>
 8011590:	08016878 	.word	0x08016878
 8011594:	08016890 	.word	0x08016890
 8011598:	0801686f 	.word	0x0801686f
 801159c:	08016872 	.word	0x08016872
 80115a0:	08016a6e 	.word	0x08016a6e
 80115a4:	08016b68 	.word	0x08016b68
 80115a8:	08016b40 	.word	0x08016b40
 80115ac:	7ca00000 	.word	0x7ca00000
 80115b0:	7ff00000 	.word	0x7ff00000
 80115b4:	7fefffff 	.word	0x7fefffff
 80115b8:	f012 0110 	ands.w	r1, r2, #16
 80115bc:	bf18      	it	ne
 80115be:	216a      	movne	r1, #106	; 0x6a
 80115c0:	9105      	str	r1, [sp, #20]
 80115c2:	ec49 8b17 	vmov	d7, r8, r9
 80115c6:	49be      	ldr	r1, [pc, #760]	; (80118c0 <_strtod_l+0x898>)
 80115c8:	2000      	movs	r0, #0
 80115ca:	07d7      	lsls	r7, r2, #31
 80115cc:	d504      	bpl.n	80115d8 <_strtod_l+0x5b0>
 80115ce:	ed91 6b00 	vldr	d6, [r1]
 80115d2:	2001      	movs	r0, #1
 80115d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80115d8:	1052      	asrs	r2, r2, #1
 80115da:	f101 0108 	add.w	r1, r1, #8
 80115de:	d1f4      	bne.n	80115ca <_strtod_l+0x5a2>
 80115e0:	b108      	cbz	r0, 80115e6 <_strtod_l+0x5be>
 80115e2:	ec59 8b17 	vmov	r8, r9, d7
 80115e6:	9a05      	ldr	r2, [sp, #20]
 80115e8:	b1ba      	cbz	r2, 801161a <_strtod_l+0x5f2>
 80115ea:	f3c9 510a 	ubfx	r1, r9, #20, #11
 80115ee:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 80115f2:	2a00      	cmp	r2, #0
 80115f4:	4648      	mov	r0, r9
 80115f6:	dd10      	ble.n	801161a <_strtod_l+0x5f2>
 80115f8:	2a1f      	cmp	r2, #31
 80115fa:	f340 812c 	ble.w	8011856 <_strtod_l+0x82e>
 80115fe:	2a34      	cmp	r2, #52	; 0x34
 8011600:	bfde      	ittt	le
 8011602:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8011606:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 801160a:	408a      	lslle	r2, r1
 801160c:	f04f 0800 	mov.w	r8, #0
 8011610:	bfcc      	ite	gt
 8011612:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8011616:	ea02 0900 	andle.w	r9, r2, r0
 801161a:	ec49 8b17 	vmov	d7, r8, r9
 801161e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011626:	d0a8      	beq.n	801157a <_strtod_l+0x552>
 8011628:	9a07      	ldr	r2, [sp, #28]
 801162a:	9200      	str	r2, [sp, #0]
 801162c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801162e:	4632      	mov	r2, r6
 8011630:	4620      	mov	r0, r4
 8011632:	f001 fa21 	bl	8012a78 <__s2b>
 8011636:	9007      	str	r0, [sp, #28]
 8011638:	2800      	cmp	r0, #0
 801163a:	f43f af2f 	beq.w	801149c <_strtod_l+0x474>
 801163e:	9a06      	ldr	r2, [sp, #24]
 8011640:	2a00      	cmp	r2, #0
 8011642:	ebab 0305 	sub.w	r3, fp, r5
 8011646:	ed9f 9b96 	vldr	d9, [pc, #600]	; 80118a0 <_strtod_l+0x878>
 801164a:	bfa8      	it	ge
 801164c:	2300      	movge	r3, #0
 801164e:	ed9f ab96 	vldr	d10, [pc, #600]	; 80118a8 <_strtod_l+0x880>
 8011652:	ed9f bb97 	vldr	d11, [pc, #604]	; 80118b0 <_strtod_l+0x888>
 8011656:	9309      	str	r3, [sp, #36]	; 0x24
 8011658:	2500      	movs	r5, #0
 801165a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801165e:	930c      	str	r3, [sp, #48]	; 0x30
 8011660:	462e      	mov	r6, r5
 8011662:	9b07      	ldr	r3, [sp, #28]
 8011664:	4620      	mov	r0, r4
 8011666:	6859      	ldr	r1, [r3, #4]
 8011668:	f001 f95e 	bl	8012928 <_Balloc>
 801166c:	4607      	mov	r7, r0
 801166e:	2800      	cmp	r0, #0
 8011670:	f43f af18 	beq.w	80114a4 <_strtod_l+0x47c>
 8011674:	9b07      	ldr	r3, [sp, #28]
 8011676:	691a      	ldr	r2, [r3, #16]
 8011678:	3202      	adds	r2, #2
 801167a:	f103 010c 	add.w	r1, r3, #12
 801167e:	0092      	lsls	r2, r2, #2
 8011680:	300c      	adds	r0, #12
 8011682:	f000 fcb2 	bl	8011fea <memcpy>
 8011686:	ec49 8b10 	vmov	d0, r8, r9
 801168a:	aa14      	add	r2, sp, #80	; 0x50
 801168c:	a913      	add	r1, sp, #76	; 0x4c
 801168e:	4620      	mov	r0, r4
 8011690:	f001 fd26 	bl	80130e0 <__d2b>
 8011694:	ec49 8b18 	vmov	d8, r8, r9
 8011698:	9012      	str	r0, [sp, #72]	; 0x48
 801169a:	2800      	cmp	r0, #0
 801169c:	f43f af02 	beq.w	80114a4 <_strtod_l+0x47c>
 80116a0:	2101      	movs	r1, #1
 80116a2:	4620      	mov	r0, r4
 80116a4:	f001 fa80 	bl	8012ba8 <__i2b>
 80116a8:	4606      	mov	r6, r0
 80116aa:	2800      	cmp	r0, #0
 80116ac:	f43f aefa 	beq.w	80114a4 <_strtod_l+0x47c>
 80116b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80116b2:	9914      	ldr	r1, [sp, #80]	; 0x50
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	bfab      	itete	ge
 80116b8:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 80116ba:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 80116bc:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 80116c0:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 80116c4:	bfac      	ite	ge
 80116c6:	eb03 0b02 	addge.w	fp, r3, r2
 80116ca:	eba2 0a03 	sublt.w	sl, r2, r3
 80116ce:	9a05      	ldr	r2, [sp, #20]
 80116d0:	1a9b      	subs	r3, r3, r2
 80116d2:	440b      	add	r3, r1
 80116d4:	4a7b      	ldr	r2, [pc, #492]	; (80118c4 <_strtod_l+0x89c>)
 80116d6:	3b01      	subs	r3, #1
 80116d8:	4293      	cmp	r3, r2
 80116da:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 80116de:	f280 80cd 	bge.w	801187c <_strtod_l+0x854>
 80116e2:	1ad2      	subs	r2, r2, r3
 80116e4:	2a1f      	cmp	r2, #31
 80116e6:	eba1 0102 	sub.w	r1, r1, r2
 80116ea:	f04f 0001 	mov.w	r0, #1
 80116ee:	f300 80b9 	bgt.w	8011864 <_strtod_l+0x83c>
 80116f2:	fa00 f302 	lsl.w	r3, r0, r2
 80116f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80116f8:	2300      	movs	r3, #0
 80116fa:	930a      	str	r3, [sp, #40]	; 0x28
 80116fc:	eb0b 0301 	add.w	r3, fp, r1
 8011700:	9a05      	ldr	r2, [sp, #20]
 8011702:	459b      	cmp	fp, r3
 8011704:	448a      	add	sl, r1
 8011706:	4492      	add	sl, r2
 8011708:	465a      	mov	r2, fp
 801170a:	bfa8      	it	ge
 801170c:	461a      	movge	r2, r3
 801170e:	4552      	cmp	r2, sl
 8011710:	bfa8      	it	ge
 8011712:	4652      	movge	r2, sl
 8011714:	2a00      	cmp	r2, #0
 8011716:	bfc2      	ittt	gt
 8011718:	1a9b      	subgt	r3, r3, r2
 801171a:	ebaa 0a02 	subgt.w	sl, sl, r2
 801171e:	ebab 0b02 	subgt.w	fp, fp, r2
 8011722:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011724:	2a00      	cmp	r2, #0
 8011726:	dd18      	ble.n	801175a <_strtod_l+0x732>
 8011728:	4631      	mov	r1, r6
 801172a:	4620      	mov	r0, r4
 801172c:	930f      	str	r3, [sp, #60]	; 0x3c
 801172e:	f001 fafb 	bl	8012d28 <__pow5mult>
 8011732:	4606      	mov	r6, r0
 8011734:	2800      	cmp	r0, #0
 8011736:	f43f aeb5 	beq.w	80114a4 <_strtod_l+0x47c>
 801173a:	4601      	mov	r1, r0
 801173c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801173e:	4620      	mov	r0, r4
 8011740:	f001 fa48 	bl	8012bd4 <__multiply>
 8011744:	900e      	str	r0, [sp, #56]	; 0x38
 8011746:	2800      	cmp	r0, #0
 8011748:	f43f aeac 	beq.w	80114a4 <_strtod_l+0x47c>
 801174c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801174e:	4620      	mov	r0, r4
 8011750:	f001 f92a 	bl	80129a8 <_Bfree>
 8011754:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011756:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011758:	9212      	str	r2, [sp, #72]	; 0x48
 801175a:	2b00      	cmp	r3, #0
 801175c:	f300 8093 	bgt.w	8011886 <_strtod_l+0x85e>
 8011760:	9b06      	ldr	r3, [sp, #24]
 8011762:	2b00      	cmp	r3, #0
 8011764:	dd08      	ble.n	8011778 <_strtod_l+0x750>
 8011766:	4639      	mov	r1, r7
 8011768:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801176a:	4620      	mov	r0, r4
 801176c:	f001 fadc 	bl	8012d28 <__pow5mult>
 8011770:	4607      	mov	r7, r0
 8011772:	2800      	cmp	r0, #0
 8011774:	f43f ae96 	beq.w	80114a4 <_strtod_l+0x47c>
 8011778:	f1ba 0f00 	cmp.w	sl, #0
 801177c:	dd08      	ble.n	8011790 <_strtod_l+0x768>
 801177e:	4639      	mov	r1, r7
 8011780:	4652      	mov	r2, sl
 8011782:	4620      	mov	r0, r4
 8011784:	f001 fb2a 	bl	8012ddc <__lshift>
 8011788:	4607      	mov	r7, r0
 801178a:	2800      	cmp	r0, #0
 801178c:	f43f ae8a 	beq.w	80114a4 <_strtod_l+0x47c>
 8011790:	f1bb 0f00 	cmp.w	fp, #0
 8011794:	dd08      	ble.n	80117a8 <_strtod_l+0x780>
 8011796:	4631      	mov	r1, r6
 8011798:	465a      	mov	r2, fp
 801179a:	4620      	mov	r0, r4
 801179c:	f001 fb1e 	bl	8012ddc <__lshift>
 80117a0:	4606      	mov	r6, r0
 80117a2:	2800      	cmp	r0, #0
 80117a4:	f43f ae7e 	beq.w	80114a4 <_strtod_l+0x47c>
 80117a8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80117aa:	463a      	mov	r2, r7
 80117ac:	4620      	mov	r0, r4
 80117ae:	f001 fb9d 	bl	8012eec <__mdiff>
 80117b2:	4605      	mov	r5, r0
 80117b4:	2800      	cmp	r0, #0
 80117b6:	f43f ae75 	beq.w	80114a4 <_strtod_l+0x47c>
 80117ba:	2300      	movs	r3, #0
 80117bc:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80117c0:	60c3      	str	r3, [r0, #12]
 80117c2:	4631      	mov	r1, r6
 80117c4:	f001 fb76 	bl	8012eb4 <__mcmp>
 80117c8:	2800      	cmp	r0, #0
 80117ca:	da7f      	bge.n	80118cc <_strtod_l+0x8a4>
 80117cc:	ea5a 0a08 	orrs.w	sl, sl, r8
 80117d0:	f040 80a5 	bne.w	801191e <_strtod_l+0x8f6>
 80117d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80117d8:	2b00      	cmp	r3, #0
 80117da:	f040 80a0 	bne.w	801191e <_strtod_l+0x8f6>
 80117de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80117e2:	0d1b      	lsrs	r3, r3, #20
 80117e4:	051b      	lsls	r3, r3, #20
 80117e6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80117ea:	f240 8098 	bls.w	801191e <_strtod_l+0x8f6>
 80117ee:	696b      	ldr	r3, [r5, #20]
 80117f0:	b91b      	cbnz	r3, 80117fa <_strtod_l+0x7d2>
 80117f2:	692b      	ldr	r3, [r5, #16]
 80117f4:	2b01      	cmp	r3, #1
 80117f6:	f340 8092 	ble.w	801191e <_strtod_l+0x8f6>
 80117fa:	4629      	mov	r1, r5
 80117fc:	2201      	movs	r2, #1
 80117fe:	4620      	mov	r0, r4
 8011800:	f001 faec 	bl	8012ddc <__lshift>
 8011804:	4631      	mov	r1, r6
 8011806:	4605      	mov	r5, r0
 8011808:	f001 fb54 	bl	8012eb4 <__mcmp>
 801180c:	2800      	cmp	r0, #0
 801180e:	f340 8086 	ble.w	801191e <_strtod_l+0x8f6>
 8011812:	9905      	ldr	r1, [sp, #20]
 8011814:	4a2c      	ldr	r2, [pc, #176]	; (80118c8 <_strtod_l+0x8a0>)
 8011816:	464b      	mov	r3, r9
 8011818:	2900      	cmp	r1, #0
 801181a:	f000 809f 	beq.w	801195c <_strtod_l+0x934>
 801181e:	ea02 0109 	and.w	r1, r2, r9
 8011822:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8011826:	f300 8099 	bgt.w	801195c <_strtod_l+0x934>
 801182a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801182e:	f77f aea8 	ble.w	8011582 <_strtod_l+0x55a>
 8011832:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80118b8 <_strtod_l+0x890>
 8011836:	ec49 8b16 	vmov	d6, r8, r9
 801183a:	4b23      	ldr	r3, [pc, #140]	; (80118c8 <_strtod_l+0x8a0>)
 801183c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8011840:	ee17 2a90 	vmov	r2, s15
 8011844:	4013      	ands	r3, r2
 8011846:	ec59 8b17 	vmov	r8, r9, d7
 801184a:	2b00      	cmp	r3, #0
 801184c:	f47f ae34 	bne.w	80114b8 <_strtod_l+0x490>
 8011850:	2322      	movs	r3, #34	; 0x22
 8011852:	6023      	str	r3, [r4, #0]
 8011854:	e630      	b.n	80114b8 <_strtod_l+0x490>
 8011856:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801185a:	fa01 f202 	lsl.w	r2, r1, r2
 801185e:	ea02 0808 	and.w	r8, r2, r8
 8011862:	e6da      	b.n	801161a <_strtod_l+0x5f2>
 8011864:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8011868:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801186c:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8011870:	33e2      	adds	r3, #226	; 0xe2
 8011872:	fa00 f303 	lsl.w	r3, r0, r3
 8011876:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 801187a:	e73f      	b.n	80116fc <_strtod_l+0x6d4>
 801187c:	2200      	movs	r2, #0
 801187e:	2301      	movs	r3, #1
 8011880:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8011884:	e73a      	b.n	80116fc <_strtod_l+0x6d4>
 8011886:	9912      	ldr	r1, [sp, #72]	; 0x48
 8011888:	461a      	mov	r2, r3
 801188a:	4620      	mov	r0, r4
 801188c:	f001 faa6 	bl	8012ddc <__lshift>
 8011890:	9012      	str	r0, [sp, #72]	; 0x48
 8011892:	2800      	cmp	r0, #0
 8011894:	f47f af64 	bne.w	8011760 <_strtod_l+0x738>
 8011898:	e604      	b.n	80114a4 <_strtod_l+0x47c>
 801189a:	bf00      	nop
 801189c:	f3af 8000 	nop.w
 80118a0:	94a03595 	.word	0x94a03595
 80118a4:	3fcfffff 	.word	0x3fcfffff
 80118a8:	94a03595 	.word	0x94a03595
 80118ac:	3fdfffff 	.word	0x3fdfffff
 80118b0:	35afe535 	.word	0x35afe535
 80118b4:	3fe00000 	.word	0x3fe00000
 80118b8:	00000000 	.word	0x00000000
 80118bc:	39500000 	.word	0x39500000
 80118c0:	080168a8 	.word	0x080168a8
 80118c4:	fffffc02 	.word	0xfffffc02
 80118c8:	7ff00000 	.word	0x7ff00000
 80118cc:	46cb      	mov	fp, r9
 80118ce:	d15f      	bne.n	8011990 <_strtod_l+0x968>
 80118d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80118d4:	f1ba 0f00 	cmp.w	sl, #0
 80118d8:	d02a      	beq.n	8011930 <_strtod_l+0x908>
 80118da:	4aa7      	ldr	r2, [pc, #668]	; (8011b78 <_strtod_l+0xb50>)
 80118dc:	4293      	cmp	r3, r2
 80118de:	d12b      	bne.n	8011938 <_strtod_l+0x910>
 80118e0:	9b05      	ldr	r3, [sp, #20]
 80118e2:	4642      	mov	r2, r8
 80118e4:	b1fb      	cbz	r3, 8011926 <_strtod_l+0x8fe>
 80118e6:	4ba5      	ldr	r3, [pc, #660]	; (8011b7c <_strtod_l+0xb54>)
 80118e8:	ea09 0303 	and.w	r3, r9, r3
 80118ec:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80118f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80118f4:	d81a      	bhi.n	801192c <_strtod_l+0x904>
 80118f6:	0d1b      	lsrs	r3, r3, #20
 80118f8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80118fc:	fa01 f303 	lsl.w	r3, r1, r3
 8011900:	429a      	cmp	r2, r3
 8011902:	d119      	bne.n	8011938 <_strtod_l+0x910>
 8011904:	4b9e      	ldr	r3, [pc, #632]	; (8011b80 <_strtod_l+0xb58>)
 8011906:	459b      	cmp	fp, r3
 8011908:	d102      	bne.n	8011910 <_strtod_l+0x8e8>
 801190a:	3201      	adds	r2, #1
 801190c:	f43f adca 	beq.w	80114a4 <_strtod_l+0x47c>
 8011910:	4b9a      	ldr	r3, [pc, #616]	; (8011b7c <_strtod_l+0xb54>)
 8011912:	ea0b 0303 	and.w	r3, fp, r3
 8011916:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801191a:	f04f 0800 	mov.w	r8, #0
 801191e:	9b05      	ldr	r3, [sp, #20]
 8011920:	2b00      	cmp	r3, #0
 8011922:	d186      	bne.n	8011832 <_strtod_l+0x80a>
 8011924:	e5c8      	b.n	80114b8 <_strtod_l+0x490>
 8011926:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801192a:	e7e9      	b.n	8011900 <_strtod_l+0x8d8>
 801192c:	460b      	mov	r3, r1
 801192e:	e7e7      	b.n	8011900 <_strtod_l+0x8d8>
 8011930:	ea53 0308 	orrs.w	r3, r3, r8
 8011934:	f43f af6d 	beq.w	8011812 <_strtod_l+0x7ea>
 8011938:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801193a:	b1cb      	cbz	r3, 8011970 <_strtod_l+0x948>
 801193c:	ea13 0f0b 	tst.w	r3, fp
 8011940:	d0ed      	beq.n	801191e <_strtod_l+0x8f6>
 8011942:	9a05      	ldr	r2, [sp, #20]
 8011944:	4640      	mov	r0, r8
 8011946:	4649      	mov	r1, r9
 8011948:	f1ba 0f00 	cmp.w	sl, #0
 801194c:	d014      	beq.n	8011978 <_strtod_l+0x950>
 801194e:	f7ff fb4f 	bl	8010ff0 <sulp>
 8011952:	ee38 7b00 	vadd.f64	d7, d8, d0
 8011956:	ec59 8b17 	vmov	r8, r9, d7
 801195a:	e7e0      	b.n	801191e <_strtod_l+0x8f6>
 801195c:	4013      	ands	r3, r2
 801195e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011962:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8011966:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801196a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801196e:	e7d6      	b.n	801191e <_strtod_l+0x8f6>
 8011970:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011972:	ea13 0f08 	tst.w	r3, r8
 8011976:	e7e3      	b.n	8011940 <_strtod_l+0x918>
 8011978:	f7ff fb3a 	bl	8010ff0 <sulp>
 801197c:	ee38 0b40 	vsub.f64	d0, d8, d0
 8011980:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8011984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011988:	ec59 8b10 	vmov	r8, r9, d0
 801198c:	d1c7      	bne.n	801191e <_strtod_l+0x8f6>
 801198e:	e5f8      	b.n	8011582 <_strtod_l+0x55a>
 8011990:	4631      	mov	r1, r6
 8011992:	4628      	mov	r0, r5
 8011994:	f001 fbfe 	bl	8013194 <__ratio>
 8011998:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801199c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80119a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119a4:	d85f      	bhi.n	8011a66 <_strtod_l+0xa3e>
 80119a6:	f1ba 0f00 	cmp.w	sl, #0
 80119aa:	d166      	bne.n	8011a7a <_strtod_l+0xa52>
 80119ac:	f1b8 0f00 	cmp.w	r8, #0
 80119b0:	d14d      	bne.n	8011a4e <_strtod_l+0xa26>
 80119b2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80119b6:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d162      	bne.n	8011a84 <_strtod_l+0xa5c>
 80119be:	eeb4 0bcd 	vcmpe.f64	d0, d13
 80119c2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 80119c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119ca:	d401      	bmi.n	80119d0 <_strtod_l+0x9a8>
 80119cc:	ee20 db0d 	vmul.f64	d13, d0, d13
 80119d0:	eeb1 cb4d 	vneg.f64	d12, d13
 80119d4:	4869      	ldr	r0, [pc, #420]	; (8011b7c <_strtod_l+0xb54>)
 80119d6:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 8011b88 <_strtod_l+0xb60>
 80119da:	ea0b 0100 	and.w	r1, fp, r0
 80119de:	4561      	cmp	r1, ip
 80119e0:	ec53 2b1c 	vmov	r2, r3, d12
 80119e4:	d17a      	bne.n	8011adc <_strtod_l+0xab4>
 80119e6:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 80119ea:	ec49 8b10 	vmov	d0, r8, r9
 80119ee:	910a      	str	r1, [sp, #40]	; 0x28
 80119f0:	f001 fb06 	bl	8013000 <__ulp>
 80119f4:	ec49 8b1e 	vmov	d14, r8, r9
 80119f8:	4860      	ldr	r0, [pc, #384]	; (8011b7c <_strtod_l+0xb54>)
 80119fa:	eea0 eb0c 	vfma.f64	d14, d0, d12
 80119fe:	ee1e 3a90 	vmov	r3, s29
 8011a02:	4a60      	ldr	r2, [pc, #384]	; (8011b84 <_strtod_l+0xb5c>)
 8011a04:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011a06:	4018      	ands	r0, r3
 8011a08:	4290      	cmp	r0, r2
 8011a0a:	ec59 8b1e 	vmov	r8, r9, d14
 8011a0e:	d93c      	bls.n	8011a8a <_strtod_l+0xa62>
 8011a10:	ee18 2a90 	vmov	r2, s17
 8011a14:	4b5a      	ldr	r3, [pc, #360]	; (8011b80 <_strtod_l+0xb58>)
 8011a16:	429a      	cmp	r2, r3
 8011a18:	d104      	bne.n	8011a24 <_strtod_l+0x9fc>
 8011a1a:	ee18 3a10 	vmov	r3, s16
 8011a1e:	3301      	adds	r3, #1
 8011a20:	f43f ad40 	beq.w	80114a4 <_strtod_l+0x47c>
 8011a24:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8011b80 <_strtod_l+0xb58>
 8011a28:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8011a2c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8011a2e:	4620      	mov	r0, r4
 8011a30:	f000 ffba 	bl	80129a8 <_Bfree>
 8011a34:	4639      	mov	r1, r7
 8011a36:	4620      	mov	r0, r4
 8011a38:	f000 ffb6 	bl	80129a8 <_Bfree>
 8011a3c:	4631      	mov	r1, r6
 8011a3e:	4620      	mov	r0, r4
 8011a40:	f000 ffb2 	bl	80129a8 <_Bfree>
 8011a44:	4629      	mov	r1, r5
 8011a46:	4620      	mov	r0, r4
 8011a48:	f000 ffae 	bl	80129a8 <_Bfree>
 8011a4c:	e609      	b.n	8011662 <_strtod_l+0x63a>
 8011a4e:	f1b8 0f01 	cmp.w	r8, #1
 8011a52:	d103      	bne.n	8011a5c <_strtod_l+0xa34>
 8011a54:	f1b9 0f00 	cmp.w	r9, #0
 8011a58:	f43f ad93 	beq.w	8011582 <_strtod_l+0x55a>
 8011a5c:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8011a60:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8011a64:	e7b6      	b.n	80119d4 <_strtod_l+0x9ac>
 8011a66:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8011a6a:	ee20 db0d 	vmul.f64	d13, d0, d13
 8011a6e:	f1ba 0f00 	cmp.w	sl, #0
 8011a72:	d0ad      	beq.n	80119d0 <_strtod_l+0x9a8>
 8011a74:	eeb0 cb4d 	vmov.f64	d12, d13
 8011a78:	e7ac      	b.n	80119d4 <_strtod_l+0x9ac>
 8011a7a:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 8011a7e:	eeb0 db4c 	vmov.f64	d13, d12
 8011a82:	e7a7      	b.n	80119d4 <_strtod_l+0x9ac>
 8011a84:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8011a88:	e7a4      	b.n	80119d4 <_strtod_l+0x9ac>
 8011a8a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8011a8e:	9b05      	ldr	r3, [sp, #20]
 8011a90:	46cb      	mov	fp, r9
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d1ca      	bne.n	8011a2c <_strtod_l+0xa04>
 8011a96:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011a9a:	0d1b      	lsrs	r3, r3, #20
 8011a9c:	051b      	lsls	r3, r3, #20
 8011a9e:	4299      	cmp	r1, r3
 8011aa0:	d1c4      	bne.n	8011a2c <_strtod_l+0xa04>
 8011aa2:	ec51 0b1d 	vmov	r0, r1, d13
 8011aa6:	f7ee fdef 	bl	8000688 <__aeabi_d2lz>
 8011aaa:	f7ee fda7 	bl	80005fc <__aeabi_l2d>
 8011aae:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 8011ab2:	ec41 0b17 	vmov	d7, r0, r1
 8011ab6:	ea4b 0b08 	orr.w	fp, fp, r8
 8011aba:	ea5b 0b0a 	orrs.w	fp, fp, sl
 8011abe:	ee3d db47 	vsub.f64	d13, d13, d7
 8011ac2:	d03c      	beq.n	8011b3e <_strtod_l+0xb16>
 8011ac4:	eeb4 dbca 	vcmpe.f64	d13, d10
 8011ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011acc:	f53f acf4 	bmi.w	80114b8 <_strtod_l+0x490>
 8011ad0:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8011ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ad8:	dda8      	ble.n	8011a2c <_strtod_l+0xa04>
 8011ada:	e4ed      	b.n	80114b8 <_strtod_l+0x490>
 8011adc:	9805      	ldr	r0, [sp, #20]
 8011ade:	b1f0      	cbz	r0, 8011b1e <_strtod_l+0xaf6>
 8011ae0:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8011ae4:	d81b      	bhi.n	8011b1e <_strtod_l+0xaf6>
 8011ae6:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8011b70 <_strtod_l+0xb48>
 8011aea:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8011aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011af2:	d811      	bhi.n	8011b18 <_strtod_l+0xaf0>
 8011af4:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8011af8:	ee1d 3a10 	vmov	r3, s26
 8011afc:	2b01      	cmp	r3, #1
 8011afe:	bf38      	it	cc
 8011b00:	2301      	movcc	r3, #1
 8011b02:	ee0d 3a10 	vmov	s26, r3
 8011b06:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8011b0a:	f1ba 0f00 	cmp.w	sl, #0
 8011b0e:	d113      	bne.n	8011b38 <_strtod_l+0xb10>
 8011b10:	eeb1 7b4d 	vneg.f64	d7, d13
 8011b14:	ec53 2b17 	vmov	r2, r3, d7
 8011b18:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8011b1c:	1a43      	subs	r3, r0, r1
 8011b1e:	eeb0 0b48 	vmov.f64	d0, d8
 8011b22:	ec43 2b1c 	vmov	d12, r2, r3
 8011b26:	910a      	str	r1, [sp, #40]	; 0x28
 8011b28:	f001 fa6a 	bl	8013000 <__ulp>
 8011b2c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011b2e:	eeac 8b00 	vfma.f64	d8, d12, d0
 8011b32:	ec59 8b18 	vmov	r8, r9, d8
 8011b36:	e7aa      	b.n	8011a8e <_strtod_l+0xa66>
 8011b38:	eeb0 7b4d 	vmov.f64	d7, d13
 8011b3c:	e7ea      	b.n	8011b14 <_strtod_l+0xaec>
 8011b3e:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8011b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b46:	f57f af71 	bpl.w	8011a2c <_strtod_l+0xa04>
 8011b4a:	e4b5      	b.n	80114b8 <_strtod_l+0x490>
 8011b4c:	2300      	movs	r3, #0
 8011b4e:	9308      	str	r3, [sp, #32]
 8011b50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011b52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011b54:	6013      	str	r3, [r2, #0]
 8011b56:	f7ff baa6 	b.w	80110a6 <_strtod_l+0x7e>
 8011b5a:	2a65      	cmp	r2, #101	; 0x65
 8011b5c:	f43f aba2 	beq.w	80112a4 <_strtod_l+0x27c>
 8011b60:	2a45      	cmp	r2, #69	; 0x45
 8011b62:	f43f ab9f 	beq.w	80112a4 <_strtod_l+0x27c>
 8011b66:	2101      	movs	r1, #1
 8011b68:	f7ff bbd8 	b.w	801131c <_strtod_l+0x2f4>
 8011b6c:	f3af 8000 	nop.w
 8011b70:	ffc00000 	.word	0xffc00000
 8011b74:	41dfffff 	.word	0x41dfffff
 8011b78:	000fffff 	.word	0x000fffff
 8011b7c:	7ff00000 	.word	0x7ff00000
 8011b80:	7fefffff 	.word	0x7fefffff
 8011b84:	7c9fffff 	.word	0x7c9fffff
 8011b88:	7fe00000 	.word	0x7fe00000

08011b8c <strtod>:
 8011b8c:	460a      	mov	r2, r1
 8011b8e:	4601      	mov	r1, r0
 8011b90:	4802      	ldr	r0, [pc, #8]	; (8011b9c <strtod+0x10>)
 8011b92:	4b03      	ldr	r3, [pc, #12]	; (8011ba0 <strtod+0x14>)
 8011b94:	6800      	ldr	r0, [r0, #0]
 8011b96:	f7ff ba47 	b.w	8011028 <_strtod_l>
 8011b9a:	bf00      	nop
 8011b9c:	200001f0 	.word	0x200001f0
 8011ba0:	20000038 	.word	0x20000038

08011ba4 <std>:
 8011ba4:	2300      	movs	r3, #0
 8011ba6:	b510      	push	{r4, lr}
 8011ba8:	4604      	mov	r4, r0
 8011baa:	e9c0 3300 	strd	r3, r3, [r0]
 8011bae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011bb2:	6083      	str	r3, [r0, #8]
 8011bb4:	8181      	strh	r1, [r0, #12]
 8011bb6:	6643      	str	r3, [r0, #100]	; 0x64
 8011bb8:	81c2      	strh	r2, [r0, #14]
 8011bba:	6183      	str	r3, [r0, #24]
 8011bbc:	4619      	mov	r1, r3
 8011bbe:	2208      	movs	r2, #8
 8011bc0:	305c      	adds	r0, #92	; 0x5c
 8011bc2:	f000 f916 	bl	8011df2 <memset>
 8011bc6:	4b0d      	ldr	r3, [pc, #52]	; (8011bfc <std+0x58>)
 8011bc8:	6263      	str	r3, [r4, #36]	; 0x24
 8011bca:	4b0d      	ldr	r3, [pc, #52]	; (8011c00 <std+0x5c>)
 8011bcc:	62a3      	str	r3, [r4, #40]	; 0x28
 8011bce:	4b0d      	ldr	r3, [pc, #52]	; (8011c04 <std+0x60>)
 8011bd0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011bd2:	4b0d      	ldr	r3, [pc, #52]	; (8011c08 <std+0x64>)
 8011bd4:	6323      	str	r3, [r4, #48]	; 0x30
 8011bd6:	4b0d      	ldr	r3, [pc, #52]	; (8011c0c <std+0x68>)
 8011bd8:	6224      	str	r4, [r4, #32]
 8011bda:	429c      	cmp	r4, r3
 8011bdc:	d006      	beq.n	8011bec <std+0x48>
 8011bde:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8011be2:	4294      	cmp	r4, r2
 8011be4:	d002      	beq.n	8011bec <std+0x48>
 8011be6:	33d0      	adds	r3, #208	; 0xd0
 8011be8:	429c      	cmp	r4, r3
 8011bea:	d105      	bne.n	8011bf8 <std+0x54>
 8011bec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011bf4:	f000 b9f6 	b.w	8011fe4 <__retarget_lock_init_recursive>
 8011bf8:	bd10      	pop	{r4, pc}
 8011bfa:	bf00      	nop
 8011bfc:	08011d4d 	.word	0x08011d4d
 8011c00:	08011d6f 	.word	0x08011d6f
 8011c04:	08011da7 	.word	0x08011da7
 8011c08:	08011dcb 	.word	0x08011dcb
 8011c0c:	2000a92c 	.word	0x2000a92c

08011c10 <stdio_exit_handler>:
 8011c10:	4a02      	ldr	r2, [pc, #8]	; (8011c1c <stdio_exit_handler+0xc>)
 8011c12:	4903      	ldr	r1, [pc, #12]	; (8011c20 <stdio_exit_handler+0x10>)
 8011c14:	4803      	ldr	r0, [pc, #12]	; (8011c24 <stdio_exit_handler+0x14>)
 8011c16:	f000 b869 	b.w	8011cec <_fwalk_sglue>
 8011c1a:	bf00      	nop
 8011c1c:	2000002c 	.word	0x2000002c
 8011c20:	08013949 	.word	0x08013949
 8011c24:	200001a4 	.word	0x200001a4

08011c28 <cleanup_stdio>:
 8011c28:	6841      	ldr	r1, [r0, #4]
 8011c2a:	4b0c      	ldr	r3, [pc, #48]	; (8011c5c <cleanup_stdio+0x34>)
 8011c2c:	4299      	cmp	r1, r3
 8011c2e:	b510      	push	{r4, lr}
 8011c30:	4604      	mov	r4, r0
 8011c32:	d001      	beq.n	8011c38 <cleanup_stdio+0x10>
 8011c34:	f001 fe88 	bl	8013948 <_fflush_r>
 8011c38:	68a1      	ldr	r1, [r4, #8]
 8011c3a:	4b09      	ldr	r3, [pc, #36]	; (8011c60 <cleanup_stdio+0x38>)
 8011c3c:	4299      	cmp	r1, r3
 8011c3e:	d002      	beq.n	8011c46 <cleanup_stdio+0x1e>
 8011c40:	4620      	mov	r0, r4
 8011c42:	f001 fe81 	bl	8013948 <_fflush_r>
 8011c46:	68e1      	ldr	r1, [r4, #12]
 8011c48:	4b06      	ldr	r3, [pc, #24]	; (8011c64 <cleanup_stdio+0x3c>)
 8011c4a:	4299      	cmp	r1, r3
 8011c4c:	d004      	beq.n	8011c58 <cleanup_stdio+0x30>
 8011c4e:	4620      	mov	r0, r4
 8011c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c54:	f001 be78 	b.w	8013948 <_fflush_r>
 8011c58:	bd10      	pop	{r4, pc}
 8011c5a:	bf00      	nop
 8011c5c:	2000a92c 	.word	0x2000a92c
 8011c60:	2000a994 	.word	0x2000a994
 8011c64:	2000a9fc 	.word	0x2000a9fc

08011c68 <global_stdio_init.part.0>:
 8011c68:	b510      	push	{r4, lr}
 8011c6a:	4b0b      	ldr	r3, [pc, #44]	; (8011c98 <global_stdio_init.part.0+0x30>)
 8011c6c:	4c0b      	ldr	r4, [pc, #44]	; (8011c9c <global_stdio_init.part.0+0x34>)
 8011c6e:	4a0c      	ldr	r2, [pc, #48]	; (8011ca0 <global_stdio_init.part.0+0x38>)
 8011c70:	601a      	str	r2, [r3, #0]
 8011c72:	4620      	mov	r0, r4
 8011c74:	2200      	movs	r2, #0
 8011c76:	2104      	movs	r1, #4
 8011c78:	f7ff ff94 	bl	8011ba4 <std>
 8011c7c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8011c80:	2201      	movs	r2, #1
 8011c82:	2109      	movs	r1, #9
 8011c84:	f7ff ff8e 	bl	8011ba4 <std>
 8011c88:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8011c8c:	2202      	movs	r2, #2
 8011c8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c92:	2112      	movs	r1, #18
 8011c94:	f7ff bf86 	b.w	8011ba4 <std>
 8011c98:	2000aa64 	.word	0x2000aa64
 8011c9c:	2000a92c 	.word	0x2000a92c
 8011ca0:	08011c11 	.word	0x08011c11

08011ca4 <__sfp_lock_acquire>:
 8011ca4:	4801      	ldr	r0, [pc, #4]	; (8011cac <__sfp_lock_acquire+0x8>)
 8011ca6:	f000 b99e 	b.w	8011fe6 <__retarget_lock_acquire_recursive>
 8011caa:	bf00      	nop
 8011cac:	2000aa6d 	.word	0x2000aa6d

08011cb0 <__sfp_lock_release>:
 8011cb0:	4801      	ldr	r0, [pc, #4]	; (8011cb8 <__sfp_lock_release+0x8>)
 8011cb2:	f000 b999 	b.w	8011fe8 <__retarget_lock_release_recursive>
 8011cb6:	bf00      	nop
 8011cb8:	2000aa6d 	.word	0x2000aa6d

08011cbc <__sinit>:
 8011cbc:	b510      	push	{r4, lr}
 8011cbe:	4604      	mov	r4, r0
 8011cc0:	f7ff fff0 	bl	8011ca4 <__sfp_lock_acquire>
 8011cc4:	6a23      	ldr	r3, [r4, #32]
 8011cc6:	b11b      	cbz	r3, 8011cd0 <__sinit+0x14>
 8011cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ccc:	f7ff bff0 	b.w	8011cb0 <__sfp_lock_release>
 8011cd0:	4b04      	ldr	r3, [pc, #16]	; (8011ce4 <__sinit+0x28>)
 8011cd2:	6223      	str	r3, [r4, #32]
 8011cd4:	4b04      	ldr	r3, [pc, #16]	; (8011ce8 <__sinit+0x2c>)
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d1f5      	bne.n	8011cc8 <__sinit+0xc>
 8011cdc:	f7ff ffc4 	bl	8011c68 <global_stdio_init.part.0>
 8011ce0:	e7f2      	b.n	8011cc8 <__sinit+0xc>
 8011ce2:	bf00      	nop
 8011ce4:	08011c29 	.word	0x08011c29
 8011ce8:	2000aa64 	.word	0x2000aa64

08011cec <_fwalk_sglue>:
 8011cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011cf0:	4607      	mov	r7, r0
 8011cf2:	4688      	mov	r8, r1
 8011cf4:	4614      	mov	r4, r2
 8011cf6:	2600      	movs	r6, #0
 8011cf8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011cfc:	f1b9 0901 	subs.w	r9, r9, #1
 8011d00:	d505      	bpl.n	8011d0e <_fwalk_sglue+0x22>
 8011d02:	6824      	ldr	r4, [r4, #0]
 8011d04:	2c00      	cmp	r4, #0
 8011d06:	d1f7      	bne.n	8011cf8 <_fwalk_sglue+0xc>
 8011d08:	4630      	mov	r0, r6
 8011d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d0e:	89ab      	ldrh	r3, [r5, #12]
 8011d10:	2b01      	cmp	r3, #1
 8011d12:	d907      	bls.n	8011d24 <_fwalk_sglue+0x38>
 8011d14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011d18:	3301      	adds	r3, #1
 8011d1a:	d003      	beq.n	8011d24 <_fwalk_sglue+0x38>
 8011d1c:	4629      	mov	r1, r5
 8011d1e:	4638      	mov	r0, r7
 8011d20:	47c0      	blx	r8
 8011d22:	4306      	orrs	r6, r0
 8011d24:	3568      	adds	r5, #104	; 0x68
 8011d26:	e7e9      	b.n	8011cfc <_fwalk_sglue+0x10>

08011d28 <iprintf>:
 8011d28:	b40f      	push	{r0, r1, r2, r3}
 8011d2a:	b507      	push	{r0, r1, r2, lr}
 8011d2c:	4906      	ldr	r1, [pc, #24]	; (8011d48 <iprintf+0x20>)
 8011d2e:	ab04      	add	r3, sp, #16
 8011d30:	6808      	ldr	r0, [r1, #0]
 8011d32:	f853 2b04 	ldr.w	r2, [r3], #4
 8011d36:	6881      	ldr	r1, [r0, #8]
 8011d38:	9301      	str	r3, [sp, #4]
 8011d3a:	f001 fad5 	bl	80132e8 <_vfiprintf_r>
 8011d3e:	b003      	add	sp, #12
 8011d40:	f85d eb04 	ldr.w	lr, [sp], #4
 8011d44:	b004      	add	sp, #16
 8011d46:	4770      	bx	lr
 8011d48:	200001f0 	.word	0x200001f0

08011d4c <__sread>:
 8011d4c:	b510      	push	{r4, lr}
 8011d4e:	460c      	mov	r4, r1
 8011d50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d54:	f000 f8f8 	bl	8011f48 <_read_r>
 8011d58:	2800      	cmp	r0, #0
 8011d5a:	bfab      	itete	ge
 8011d5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011d5e:	89a3      	ldrhlt	r3, [r4, #12]
 8011d60:	181b      	addge	r3, r3, r0
 8011d62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011d66:	bfac      	ite	ge
 8011d68:	6563      	strge	r3, [r4, #84]	; 0x54
 8011d6a:	81a3      	strhlt	r3, [r4, #12]
 8011d6c:	bd10      	pop	{r4, pc}

08011d6e <__swrite>:
 8011d6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d72:	461f      	mov	r7, r3
 8011d74:	898b      	ldrh	r3, [r1, #12]
 8011d76:	05db      	lsls	r3, r3, #23
 8011d78:	4605      	mov	r5, r0
 8011d7a:	460c      	mov	r4, r1
 8011d7c:	4616      	mov	r6, r2
 8011d7e:	d505      	bpl.n	8011d8c <__swrite+0x1e>
 8011d80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d84:	2302      	movs	r3, #2
 8011d86:	2200      	movs	r2, #0
 8011d88:	f000 f8cc 	bl	8011f24 <_lseek_r>
 8011d8c:	89a3      	ldrh	r3, [r4, #12]
 8011d8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011d92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011d96:	81a3      	strh	r3, [r4, #12]
 8011d98:	4632      	mov	r2, r6
 8011d9a:	463b      	mov	r3, r7
 8011d9c:	4628      	mov	r0, r5
 8011d9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011da2:	f000 b8e3 	b.w	8011f6c <_write_r>

08011da6 <__sseek>:
 8011da6:	b510      	push	{r4, lr}
 8011da8:	460c      	mov	r4, r1
 8011daa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011dae:	f000 f8b9 	bl	8011f24 <_lseek_r>
 8011db2:	1c43      	adds	r3, r0, #1
 8011db4:	89a3      	ldrh	r3, [r4, #12]
 8011db6:	bf15      	itete	ne
 8011db8:	6560      	strne	r0, [r4, #84]	; 0x54
 8011dba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011dbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011dc2:	81a3      	strheq	r3, [r4, #12]
 8011dc4:	bf18      	it	ne
 8011dc6:	81a3      	strhne	r3, [r4, #12]
 8011dc8:	bd10      	pop	{r4, pc}

08011dca <__sclose>:
 8011dca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011dce:	f000 b899 	b.w	8011f04 <_close_r>

08011dd2 <memcmp>:
 8011dd2:	b510      	push	{r4, lr}
 8011dd4:	3901      	subs	r1, #1
 8011dd6:	4402      	add	r2, r0
 8011dd8:	4290      	cmp	r0, r2
 8011dda:	d101      	bne.n	8011de0 <memcmp+0xe>
 8011ddc:	2000      	movs	r0, #0
 8011dde:	e005      	b.n	8011dec <memcmp+0x1a>
 8011de0:	7803      	ldrb	r3, [r0, #0]
 8011de2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011de6:	42a3      	cmp	r3, r4
 8011de8:	d001      	beq.n	8011dee <memcmp+0x1c>
 8011dea:	1b18      	subs	r0, r3, r4
 8011dec:	bd10      	pop	{r4, pc}
 8011dee:	3001      	adds	r0, #1
 8011df0:	e7f2      	b.n	8011dd8 <memcmp+0x6>

08011df2 <memset>:
 8011df2:	4402      	add	r2, r0
 8011df4:	4603      	mov	r3, r0
 8011df6:	4293      	cmp	r3, r2
 8011df8:	d100      	bne.n	8011dfc <memset+0xa>
 8011dfa:	4770      	bx	lr
 8011dfc:	f803 1b01 	strb.w	r1, [r3], #1
 8011e00:	e7f9      	b.n	8011df6 <memset+0x4>

08011e02 <strncmp>:
 8011e02:	b510      	push	{r4, lr}
 8011e04:	b16a      	cbz	r2, 8011e22 <strncmp+0x20>
 8011e06:	3901      	subs	r1, #1
 8011e08:	1884      	adds	r4, r0, r2
 8011e0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011e0e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011e12:	429a      	cmp	r2, r3
 8011e14:	d103      	bne.n	8011e1e <strncmp+0x1c>
 8011e16:	42a0      	cmp	r0, r4
 8011e18:	d001      	beq.n	8011e1e <strncmp+0x1c>
 8011e1a:	2a00      	cmp	r2, #0
 8011e1c:	d1f5      	bne.n	8011e0a <strncmp+0x8>
 8011e1e:	1ad0      	subs	r0, r2, r3
 8011e20:	bd10      	pop	{r4, pc}
 8011e22:	4610      	mov	r0, r2
 8011e24:	e7fc      	b.n	8011e20 <strncmp+0x1e>

08011e26 <strncpy>:
 8011e26:	b510      	push	{r4, lr}
 8011e28:	3901      	subs	r1, #1
 8011e2a:	4603      	mov	r3, r0
 8011e2c:	b132      	cbz	r2, 8011e3c <strncpy+0x16>
 8011e2e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011e32:	f803 4b01 	strb.w	r4, [r3], #1
 8011e36:	3a01      	subs	r2, #1
 8011e38:	2c00      	cmp	r4, #0
 8011e3a:	d1f7      	bne.n	8011e2c <strncpy+0x6>
 8011e3c:	441a      	add	r2, r3
 8011e3e:	2100      	movs	r1, #0
 8011e40:	4293      	cmp	r3, r2
 8011e42:	d100      	bne.n	8011e46 <strncpy+0x20>
 8011e44:	bd10      	pop	{r4, pc}
 8011e46:	f803 1b01 	strb.w	r1, [r3], #1
 8011e4a:	e7f9      	b.n	8011e40 <strncpy+0x1a>

08011e4c <strtok>:
 8011e4c:	4b16      	ldr	r3, [pc, #88]	; (8011ea8 <strtok+0x5c>)
 8011e4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011e50:	681e      	ldr	r6, [r3, #0]
 8011e52:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8011e54:	4605      	mov	r5, r0
 8011e56:	b9fc      	cbnz	r4, 8011e98 <strtok+0x4c>
 8011e58:	2050      	movs	r0, #80	; 0x50
 8011e5a:	9101      	str	r1, [sp, #4]
 8011e5c:	f000 fc9e 	bl	801279c <malloc>
 8011e60:	9901      	ldr	r1, [sp, #4]
 8011e62:	6470      	str	r0, [r6, #68]	; 0x44
 8011e64:	4602      	mov	r2, r0
 8011e66:	b920      	cbnz	r0, 8011e72 <strtok+0x26>
 8011e68:	4b10      	ldr	r3, [pc, #64]	; (8011eac <strtok+0x60>)
 8011e6a:	4811      	ldr	r0, [pc, #68]	; (8011eb0 <strtok+0x64>)
 8011e6c:	215b      	movs	r1, #91	; 0x5b
 8011e6e:	f000 f8d3 	bl	8012018 <__assert_func>
 8011e72:	e9c0 4400 	strd	r4, r4, [r0]
 8011e76:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8011e7a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8011e7e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8011e82:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8011e86:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8011e8a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8011e8e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8011e92:	6184      	str	r4, [r0, #24]
 8011e94:	7704      	strb	r4, [r0, #28]
 8011e96:	6244      	str	r4, [r0, #36]	; 0x24
 8011e98:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8011e9a:	2301      	movs	r3, #1
 8011e9c:	4628      	mov	r0, r5
 8011e9e:	b002      	add	sp, #8
 8011ea0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011ea4:	f000 b806 	b.w	8011eb4 <__strtok_r>
 8011ea8:	200001f0 	.word	0x200001f0
 8011eac:	080167fe 	.word	0x080167fe
 8011eb0:	080169d1 	.word	0x080169d1

08011eb4 <__strtok_r>:
 8011eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011eb6:	b908      	cbnz	r0, 8011ebc <__strtok_r+0x8>
 8011eb8:	6810      	ldr	r0, [r2, #0]
 8011eba:	b188      	cbz	r0, 8011ee0 <__strtok_r+0x2c>
 8011ebc:	4604      	mov	r4, r0
 8011ebe:	4620      	mov	r0, r4
 8011ec0:	f814 5b01 	ldrb.w	r5, [r4], #1
 8011ec4:	460f      	mov	r7, r1
 8011ec6:	f817 6b01 	ldrb.w	r6, [r7], #1
 8011eca:	b91e      	cbnz	r6, 8011ed4 <__strtok_r+0x20>
 8011ecc:	b965      	cbnz	r5, 8011ee8 <__strtok_r+0x34>
 8011ece:	6015      	str	r5, [r2, #0]
 8011ed0:	4628      	mov	r0, r5
 8011ed2:	e005      	b.n	8011ee0 <__strtok_r+0x2c>
 8011ed4:	42b5      	cmp	r5, r6
 8011ed6:	d1f6      	bne.n	8011ec6 <__strtok_r+0x12>
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d1f0      	bne.n	8011ebe <__strtok_r+0xa>
 8011edc:	6014      	str	r4, [r2, #0]
 8011ede:	7003      	strb	r3, [r0, #0]
 8011ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ee2:	461c      	mov	r4, r3
 8011ee4:	e00c      	b.n	8011f00 <__strtok_r+0x4c>
 8011ee6:	b915      	cbnz	r5, 8011eee <__strtok_r+0x3a>
 8011ee8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011eec:	460e      	mov	r6, r1
 8011eee:	f816 5b01 	ldrb.w	r5, [r6], #1
 8011ef2:	42ab      	cmp	r3, r5
 8011ef4:	d1f7      	bne.n	8011ee6 <__strtok_r+0x32>
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d0f3      	beq.n	8011ee2 <__strtok_r+0x2e>
 8011efa:	2300      	movs	r3, #0
 8011efc:	f804 3c01 	strb.w	r3, [r4, #-1]
 8011f00:	6014      	str	r4, [r2, #0]
 8011f02:	e7ed      	b.n	8011ee0 <__strtok_r+0x2c>

08011f04 <_close_r>:
 8011f04:	b538      	push	{r3, r4, r5, lr}
 8011f06:	4d06      	ldr	r5, [pc, #24]	; (8011f20 <_close_r+0x1c>)
 8011f08:	2300      	movs	r3, #0
 8011f0a:	4604      	mov	r4, r0
 8011f0c:	4608      	mov	r0, r1
 8011f0e:	602b      	str	r3, [r5, #0]
 8011f10:	f7ef fc23 	bl	800175a <_close>
 8011f14:	1c43      	adds	r3, r0, #1
 8011f16:	d102      	bne.n	8011f1e <_close_r+0x1a>
 8011f18:	682b      	ldr	r3, [r5, #0]
 8011f1a:	b103      	cbz	r3, 8011f1e <_close_r+0x1a>
 8011f1c:	6023      	str	r3, [r4, #0]
 8011f1e:	bd38      	pop	{r3, r4, r5, pc}
 8011f20:	2000aa68 	.word	0x2000aa68

08011f24 <_lseek_r>:
 8011f24:	b538      	push	{r3, r4, r5, lr}
 8011f26:	4d07      	ldr	r5, [pc, #28]	; (8011f44 <_lseek_r+0x20>)
 8011f28:	4604      	mov	r4, r0
 8011f2a:	4608      	mov	r0, r1
 8011f2c:	4611      	mov	r1, r2
 8011f2e:	2200      	movs	r2, #0
 8011f30:	602a      	str	r2, [r5, #0]
 8011f32:	461a      	mov	r2, r3
 8011f34:	f7ef fc38 	bl	80017a8 <_lseek>
 8011f38:	1c43      	adds	r3, r0, #1
 8011f3a:	d102      	bne.n	8011f42 <_lseek_r+0x1e>
 8011f3c:	682b      	ldr	r3, [r5, #0]
 8011f3e:	b103      	cbz	r3, 8011f42 <_lseek_r+0x1e>
 8011f40:	6023      	str	r3, [r4, #0]
 8011f42:	bd38      	pop	{r3, r4, r5, pc}
 8011f44:	2000aa68 	.word	0x2000aa68

08011f48 <_read_r>:
 8011f48:	b538      	push	{r3, r4, r5, lr}
 8011f4a:	4d07      	ldr	r5, [pc, #28]	; (8011f68 <_read_r+0x20>)
 8011f4c:	4604      	mov	r4, r0
 8011f4e:	4608      	mov	r0, r1
 8011f50:	4611      	mov	r1, r2
 8011f52:	2200      	movs	r2, #0
 8011f54:	602a      	str	r2, [r5, #0]
 8011f56:	461a      	mov	r2, r3
 8011f58:	f7ef fbc6 	bl	80016e8 <_read>
 8011f5c:	1c43      	adds	r3, r0, #1
 8011f5e:	d102      	bne.n	8011f66 <_read_r+0x1e>
 8011f60:	682b      	ldr	r3, [r5, #0]
 8011f62:	b103      	cbz	r3, 8011f66 <_read_r+0x1e>
 8011f64:	6023      	str	r3, [r4, #0]
 8011f66:	bd38      	pop	{r3, r4, r5, pc}
 8011f68:	2000aa68 	.word	0x2000aa68

08011f6c <_write_r>:
 8011f6c:	b538      	push	{r3, r4, r5, lr}
 8011f6e:	4d07      	ldr	r5, [pc, #28]	; (8011f8c <_write_r+0x20>)
 8011f70:	4604      	mov	r4, r0
 8011f72:	4608      	mov	r0, r1
 8011f74:	4611      	mov	r1, r2
 8011f76:	2200      	movs	r2, #0
 8011f78:	602a      	str	r2, [r5, #0]
 8011f7a:	461a      	mov	r2, r3
 8011f7c:	f7ef fbd1 	bl	8001722 <_write>
 8011f80:	1c43      	adds	r3, r0, #1
 8011f82:	d102      	bne.n	8011f8a <_write_r+0x1e>
 8011f84:	682b      	ldr	r3, [r5, #0]
 8011f86:	b103      	cbz	r3, 8011f8a <_write_r+0x1e>
 8011f88:	6023      	str	r3, [r4, #0]
 8011f8a:	bd38      	pop	{r3, r4, r5, pc}
 8011f8c:	2000aa68 	.word	0x2000aa68

08011f90 <__errno>:
 8011f90:	4b01      	ldr	r3, [pc, #4]	; (8011f98 <__errno+0x8>)
 8011f92:	6818      	ldr	r0, [r3, #0]
 8011f94:	4770      	bx	lr
 8011f96:	bf00      	nop
 8011f98:	200001f0 	.word	0x200001f0

08011f9c <__libc_init_array>:
 8011f9c:	b570      	push	{r4, r5, r6, lr}
 8011f9e:	4d0d      	ldr	r5, [pc, #52]	; (8011fd4 <__libc_init_array+0x38>)
 8011fa0:	4c0d      	ldr	r4, [pc, #52]	; (8011fd8 <__libc_init_array+0x3c>)
 8011fa2:	1b64      	subs	r4, r4, r5
 8011fa4:	10a4      	asrs	r4, r4, #2
 8011fa6:	2600      	movs	r6, #0
 8011fa8:	42a6      	cmp	r6, r4
 8011faa:	d109      	bne.n	8011fc0 <__libc_init_array+0x24>
 8011fac:	4d0b      	ldr	r5, [pc, #44]	; (8011fdc <__libc_init_array+0x40>)
 8011fae:	4c0c      	ldr	r4, [pc, #48]	; (8011fe0 <__libc_init_array+0x44>)
 8011fb0:	f001 fe90 	bl	8013cd4 <_init>
 8011fb4:	1b64      	subs	r4, r4, r5
 8011fb6:	10a4      	asrs	r4, r4, #2
 8011fb8:	2600      	movs	r6, #0
 8011fba:	42a6      	cmp	r6, r4
 8011fbc:	d105      	bne.n	8011fca <__libc_init_array+0x2e>
 8011fbe:	bd70      	pop	{r4, r5, r6, pc}
 8011fc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8011fc4:	4798      	blx	r3
 8011fc6:	3601      	adds	r6, #1
 8011fc8:	e7ee      	b.n	8011fa8 <__libc_init_array+0xc>
 8011fca:	f855 3b04 	ldr.w	r3, [r5], #4
 8011fce:	4798      	blx	r3
 8011fd0:	3601      	adds	r6, #1
 8011fd2:	e7f2      	b.n	8011fba <__libc_init_array+0x1e>
 8011fd4:	08016c78 	.word	0x08016c78
 8011fd8:	08016c78 	.word	0x08016c78
 8011fdc:	08016c78 	.word	0x08016c78
 8011fe0:	08016c7c 	.word	0x08016c7c

08011fe4 <__retarget_lock_init_recursive>:
 8011fe4:	4770      	bx	lr

08011fe6 <__retarget_lock_acquire_recursive>:
 8011fe6:	4770      	bx	lr

08011fe8 <__retarget_lock_release_recursive>:
 8011fe8:	4770      	bx	lr

08011fea <memcpy>:
 8011fea:	440a      	add	r2, r1
 8011fec:	4291      	cmp	r1, r2
 8011fee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011ff2:	d100      	bne.n	8011ff6 <memcpy+0xc>
 8011ff4:	4770      	bx	lr
 8011ff6:	b510      	push	{r4, lr}
 8011ff8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011ffc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012000:	4291      	cmp	r1, r2
 8012002:	d1f9      	bne.n	8011ff8 <memcpy+0xe>
 8012004:	bd10      	pop	{r4, pc}
	...

08012008 <nan>:
 8012008:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012010 <nan+0x8>
 801200c:	4770      	bx	lr
 801200e:	bf00      	nop
 8012010:	00000000 	.word	0x00000000
 8012014:	7ff80000 	.word	0x7ff80000

08012018 <__assert_func>:
 8012018:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801201a:	4614      	mov	r4, r2
 801201c:	461a      	mov	r2, r3
 801201e:	4b09      	ldr	r3, [pc, #36]	; (8012044 <__assert_func+0x2c>)
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	4605      	mov	r5, r0
 8012024:	68d8      	ldr	r0, [r3, #12]
 8012026:	b14c      	cbz	r4, 801203c <__assert_func+0x24>
 8012028:	4b07      	ldr	r3, [pc, #28]	; (8012048 <__assert_func+0x30>)
 801202a:	9100      	str	r1, [sp, #0]
 801202c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012030:	4906      	ldr	r1, [pc, #24]	; (801204c <__assert_func+0x34>)
 8012032:	462b      	mov	r3, r5
 8012034:	f001 fcb0 	bl	8013998 <fiprintf>
 8012038:	f001 fd66 	bl	8013b08 <abort>
 801203c:	4b04      	ldr	r3, [pc, #16]	; (8012050 <__assert_func+0x38>)
 801203e:	461c      	mov	r4, r3
 8012040:	e7f3      	b.n	801202a <__assert_func+0x12>
 8012042:	bf00      	nop
 8012044:	200001f0 	.word	0x200001f0
 8012048:	08016a33 	.word	0x08016a33
 801204c:	08016a40 	.word	0x08016a40
 8012050:	08016a6e 	.word	0x08016a6e

08012054 <_free_r>:
 8012054:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012056:	2900      	cmp	r1, #0
 8012058:	d044      	beq.n	80120e4 <_free_r+0x90>
 801205a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801205e:	9001      	str	r0, [sp, #4]
 8012060:	2b00      	cmp	r3, #0
 8012062:	f1a1 0404 	sub.w	r4, r1, #4
 8012066:	bfb8      	it	lt
 8012068:	18e4      	addlt	r4, r4, r3
 801206a:	f000 fc51 	bl	8012910 <__malloc_lock>
 801206e:	4a1e      	ldr	r2, [pc, #120]	; (80120e8 <_free_r+0x94>)
 8012070:	9801      	ldr	r0, [sp, #4]
 8012072:	6813      	ldr	r3, [r2, #0]
 8012074:	b933      	cbnz	r3, 8012084 <_free_r+0x30>
 8012076:	6063      	str	r3, [r4, #4]
 8012078:	6014      	str	r4, [r2, #0]
 801207a:	b003      	add	sp, #12
 801207c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012080:	f000 bc4c 	b.w	801291c <__malloc_unlock>
 8012084:	42a3      	cmp	r3, r4
 8012086:	d908      	bls.n	801209a <_free_r+0x46>
 8012088:	6825      	ldr	r5, [r4, #0]
 801208a:	1961      	adds	r1, r4, r5
 801208c:	428b      	cmp	r3, r1
 801208e:	bf01      	itttt	eq
 8012090:	6819      	ldreq	r1, [r3, #0]
 8012092:	685b      	ldreq	r3, [r3, #4]
 8012094:	1949      	addeq	r1, r1, r5
 8012096:	6021      	streq	r1, [r4, #0]
 8012098:	e7ed      	b.n	8012076 <_free_r+0x22>
 801209a:	461a      	mov	r2, r3
 801209c:	685b      	ldr	r3, [r3, #4]
 801209e:	b10b      	cbz	r3, 80120a4 <_free_r+0x50>
 80120a0:	42a3      	cmp	r3, r4
 80120a2:	d9fa      	bls.n	801209a <_free_r+0x46>
 80120a4:	6811      	ldr	r1, [r2, #0]
 80120a6:	1855      	adds	r5, r2, r1
 80120a8:	42a5      	cmp	r5, r4
 80120aa:	d10b      	bne.n	80120c4 <_free_r+0x70>
 80120ac:	6824      	ldr	r4, [r4, #0]
 80120ae:	4421      	add	r1, r4
 80120b0:	1854      	adds	r4, r2, r1
 80120b2:	42a3      	cmp	r3, r4
 80120b4:	6011      	str	r1, [r2, #0]
 80120b6:	d1e0      	bne.n	801207a <_free_r+0x26>
 80120b8:	681c      	ldr	r4, [r3, #0]
 80120ba:	685b      	ldr	r3, [r3, #4]
 80120bc:	6053      	str	r3, [r2, #4]
 80120be:	440c      	add	r4, r1
 80120c0:	6014      	str	r4, [r2, #0]
 80120c2:	e7da      	b.n	801207a <_free_r+0x26>
 80120c4:	d902      	bls.n	80120cc <_free_r+0x78>
 80120c6:	230c      	movs	r3, #12
 80120c8:	6003      	str	r3, [r0, #0]
 80120ca:	e7d6      	b.n	801207a <_free_r+0x26>
 80120cc:	6825      	ldr	r5, [r4, #0]
 80120ce:	1961      	adds	r1, r4, r5
 80120d0:	428b      	cmp	r3, r1
 80120d2:	bf04      	itt	eq
 80120d4:	6819      	ldreq	r1, [r3, #0]
 80120d6:	685b      	ldreq	r3, [r3, #4]
 80120d8:	6063      	str	r3, [r4, #4]
 80120da:	bf04      	itt	eq
 80120dc:	1949      	addeq	r1, r1, r5
 80120de:	6021      	streq	r1, [r4, #0]
 80120e0:	6054      	str	r4, [r2, #4]
 80120e2:	e7ca      	b.n	801207a <_free_r+0x26>
 80120e4:	b003      	add	sp, #12
 80120e6:	bd30      	pop	{r4, r5, pc}
 80120e8:	2000aa70 	.word	0x2000aa70

080120ec <rshift>:
 80120ec:	6903      	ldr	r3, [r0, #16]
 80120ee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80120f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80120f6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80120fa:	f100 0414 	add.w	r4, r0, #20
 80120fe:	dd45      	ble.n	801218c <rshift+0xa0>
 8012100:	f011 011f 	ands.w	r1, r1, #31
 8012104:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012108:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801210c:	d10c      	bne.n	8012128 <rshift+0x3c>
 801210e:	f100 0710 	add.w	r7, r0, #16
 8012112:	4629      	mov	r1, r5
 8012114:	42b1      	cmp	r1, r6
 8012116:	d334      	bcc.n	8012182 <rshift+0x96>
 8012118:	1a9b      	subs	r3, r3, r2
 801211a:	009b      	lsls	r3, r3, #2
 801211c:	1eea      	subs	r2, r5, #3
 801211e:	4296      	cmp	r6, r2
 8012120:	bf38      	it	cc
 8012122:	2300      	movcc	r3, #0
 8012124:	4423      	add	r3, r4
 8012126:	e015      	b.n	8012154 <rshift+0x68>
 8012128:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801212c:	f1c1 0820 	rsb	r8, r1, #32
 8012130:	40cf      	lsrs	r7, r1
 8012132:	f105 0e04 	add.w	lr, r5, #4
 8012136:	46a1      	mov	r9, r4
 8012138:	4576      	cmp	r6, lr
 801213a:	46f4      	mov	ip, lr
 801213c:	d815      	bhi.n	801216a <rshift+0x7e>
 801213e:	1a9a      	subs	r2, r3, r2
 8012140:	0092      	lsls	r2, r2, #2
 8012142:	3a04      	subs	r2, #4
 8012144:	3501      	adds	r5, #1
 8012146:	42ae      	cmp	r6, r5
 8012148:	bf38      	it	cc
 801214a:	2200      	movcc	r2, #0
 801214c:	18a3      	adds	r3, r4, r2
 801214e:	50a7      	str	r7, [r4, r2]
 8012150:	b107      	cbz	r7, 8012154 <rshift+0x68>
 8012152:	3304      	adds	r3, #4
 8012154:	1b1a      	subs	r2, r3, r4
 8012156:	42a3      	cmp	r3, r4
 8012158:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801215c:	bf08      	it	eq
 801215e:	2300      	moveq	r3, #0
 8012160:	6102      	str	r2, [r0, #16]
 8012162:	bf08      	it	eq
 8012164:	6143      	streq	r3, [r0, #20]
 8012166:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801216a:	f8dc c000 	ldr.w	ip, [ip]
 801216e:	fa0c fc08 	lsl.w	ip, ip, r8
 8012172:	ea4c 0707 	orr.w	r7, ip, r7
 8012176:	f849 7b04 	str.w	r7, [r9], #4
 801217a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801217e:	40cf      	lsrs	r7, r1
 8012180:	e7da      	b.n	8012138 <rshift+0x4c>
 8012182:	f851 cb04 	ldr.w	ip, [r1], #4
 8012186:	f847 cf04 	str.w	ip, [r7, #4]!
 801218a:	e7c3      	b.n	8012114 <rshift+0x28>
 801218c:	4623      	mov	r3, r4
 801218e:	e7e1      	b.n	8012154 <rshift+0x68>

08012190 <__hexdig_fun>:
 8012190:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012194:	2b09      	cmp	r3, #9
 8012196:	d802      	bhi.n	801219e <__hexdig_fun+0xe>
 8012198:	3820      	subs	r0, #32
 801219a:	b2c0      	uxtb	r0, r0
 801219c:	4770      	bx	lr
 801219e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80121a2:	2b05      	cmp	r3, #5
 80121a4:	d801      	bhi.n	80121aa <__hexdig_fun+0x1a>
 80121a6:	3847      	subs	r0, #71	; 0x47
 80121a8:	e7f7      	b.n	801219a <__hexdig_fun+0xa>
 80121aa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80121ae:	2b05      	cmp	r3, #5
 80121b0:	d801      	bhi.n	80121b6 <__hexdig_fun+0x26>
 80121b2:	3827      	subs	r0, #39	; 0x27
 80121b4:	e7f1      	b.n	801219a <__hexdig_fun+0xa>
 80121b6:	2000      	movs	r0, #0
 80121b8:	4770      	bx	lr
	...

080121bc <__gethex>:
 80121bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121c0:	4617      	mov	r7, r2
 80121c2:	680a      	ldr	r2, [r1, #0]
 80121c4:	b085      	sub	sp, #20
 80121c6:	f102 0b02 	add.w	fp, r2, #2
 80121ca:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80121ce:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80121d2:	4681      	mov	r9, r0
 80121d4:	468a      	mov	sl, r1
 80121d6:	9302      	str	r3, [sp, #8]
 80121d8:	32fe      	adds	r2, #254	; 0xfe
 80121da:	eb02 030b 	add.w	r3, r2, fp
 80121de:	46d8      	mov	r8, fp
 80121e0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80121e4:	9301      	str	r3, [sp, #4]
 80121e6:	2830      	cmp	r0, #48	; 0x30
 80121e8:	d0f7      	beq.n	80121da <__gethex+0x1e>
 80121ea:	f7ff ffd1 	bl	8012190 <__hexdig_fun>
 80121ee:	4604      	mov	r4, r0
 80121f0:	2800      	cmp	r0, #0
 80121f2:	d138      	bne.n	8012266 <__gethex+0xaa>
 80121f4:	49a7      	ldr	r1, [pc, #668]	; (8012494 <__gethex+0x2d8>)
 80121f6:	2201      	movs	r2, #1
 80121f8:	4640      	mov	r0, r8
 80121fa:	f7ff fe02 	bl	8011e02 <strncmp>
 80121fe:	4606      	mov	r6, r0
 8012200:	2800      	cmp	r0, #0
 8012202:	d169      	bne.n	80122d8 <__gethex+0x11c>
 8012204:	f898 0001 	ldrb.w	r0, [r8, #1]
 8012208:	465d      	mov	r5, fp
 801220a:	f7ff ffc1 	bl	8012190 <__hexdig_fun>
 801220e:	2800      	cmp	r0, #0
 8012210:	d064      	beq.n	80122dc <__gethex+0x120>
 8012212:	465a      	mov	r2, fp
 8012214:	7810      	ldrb	r0, [r2, #0]
 8012216:	2830      	cmp	r0, #48	; 0x30
 8012218:	4690      	mov	r8, r2
 801221a:	f102 0201 	add.w	r2, r2, #1
 801221e:	d0f9      	beq.n	8012214 <__gethex+0x58>
 8012220:	f7ff ffb6 	bl	8012190 <__hexdig_fun>
 8012224:	2301      	movs	r3, #1
 8012226:	fab0 f480 	clz	r4, r0
 801222a:	0964      	lsrs	r4, r4, #5
 801222c:	465e      	mov	r6, fp
 801222e:	9301      	str	r3, [sp, #4]
 8012230:	4642      	mov	r2, r8
 8012232:	4615      	mov	r5, r2
 8012234:	3201      	adds	r2, #1
 8012236:	7828      	ldrb	r0, [r5, #0]
 8012238:	f7ff ffaa 	bl	8012190 <__hexdig_fun>
 801223c:	2800      	cmp	r0, #0
 801223e:	d1f8      	bne.n	8012232 <__gethex+0x76>
 8012240:	4994      	ldr	r1, [pc, #592]	; (8012494 <__gethex+0x2d8>)
 8012242:	2201      	movs	r2, #1
 8012244:	4628      	mov	r0, r5
 8012246:	f7ff fddc 	bl	8011e02 <strncmp>
 801224a:	b978      	cbnz	r0, 801226c <__gethex+0xb0>
 801224c:	b946      	cbnz	r6, 8012260 <__gethex+0xa4>
 801224e:	1c6e      	adds	r6, r5, #1
 8012250:	4632      	mov	r2, r6
 8012252:	4615      	mov	r5, r2
 8012254:	3201      	adds	r2, #1
 8012256:	7828      	ldrb	r0, [r5, #0]
 8012258:	f7ff ff9a 	bl	8012190 <__hexdig_fun>
 801225c:	2800      	cmp	r0, #0
 801225e:	d1f8      	bne.n	8012252 <__gethex+0x96>
 8012260:	1b73      	subs	r3, r6, r5
 8012262:	009e      	lsls	r6, r3, #2
 8012264:	e004      	b.n	8012270 <__gethex+0xb4>
 8012266:	2400      	movs	r4, #0
 8012268:	4626      	mov	r6, r4
 801226a:	e7e1      	b.n	8012230 <__gethex+0x74>
 801226c:	2e00      	cmp	r6, #0
 801226e:	d1f7      	bne.n	8012260 <__gethex+0xa4>
 8012270:	782b      	ldrb	r3, [r5, #0]
 8012272:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012276:	2b50      	cmp	r3, #80	; 0x50
 8012278:	d13d      	bne.n	80122f6 <__gethex+0x13a>
 801227a:	786b      	ldrb	r3, [r5, #1]
 801227c:	2b2b      	cmp	r3, #43	; 0x2b
 801227e:	d02f      	beq.n	80122e0 <__gethex+0x124>
 8012280:	2b2d      	cmp	r3, #45	; 0x2d
 8012282:	d031      	beq.n	80122e8 <__gethex+0x12c>
 8012284:	1c69      	adds	r1, r5, #1
 8012286:	f04f 0b00 	mov.w	fp, #0
 801228a:	7808      	ldrb	r0, [r1, #0]
 801228c:	f7ff ff80 	bl	8012190 <__hexdig_fun>
 8012290:	1e42      	subs	r2, r0, #1
 8012292:	b2d2      	uxtb	r2, r2
 8012294:	2a18      	cmp	r2, #24
 8012296:	d82e      	bhi.n	80122f6 <__gethex+0x13a>
 8012298:	f1a0 0210 	sub.w	r2, r0, #16
 801229c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80122a0:	f7ff ff76 	bl	8012190 <__hexdig_fun>
 80122a4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80122a8:	fa5f fc8c 	uxtb.w	ip, ip
 80122ac:	f1bc 0f18 	cmp.w	ip, #24
 80122b0:	d91d      	bls.n	80122ee <__gethex+0x132>
 80122b2:	f1bb 0f00 	cmp.w	fp, #0
 80122b6:	d000      	beq.n	80122ba <__gethex+0xfe>
 80122b8:	4252      	negs	r2, r2
 80122ba:	4416      	add	r6, r2
 80122bc:	f8ca 1000 	str.w	r1, [sl]
 80122c0:	b1dc      	cbz	r4, 80122fa <__gethex+0x13e>
 80122c2:	9b01      	ldr	r3, [sp, #4]
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	bf14      	ite	ne
 80122c8:	f04f 0800 	movne.w	r8, #0
 80122cc:	f04f 0806 	moveq.w	r8, #6
 80122d0:	4640      	mov	r0, r8
 80122d2:	b005      	add	sp, #20
 80122d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122d8:	4645      	mov	r5, r8
 80122da:	4626      	mov	r6, r4
 80122dc:	2401      	movs	r4, #1
 80122de:	e7c7      	b.n	8012270 <__gethex+0xb4>
 80122e0:	f04f 0b00 	mov.w	fp, #0
 80122e4:	1ca9      	adds	r1, r5, #2
 80122e6:	e7d0      	b.n	801228a <__gethex+0xce>
 80122e8:	f04f 0b01 	mov.w	fp, #1
 80122ec:	e7fa      	b.n	80122e4 <__gethex+0x128>
 80122ee:	230a      	movs	r3, #10
 80122f0:	fb03 0002 	mla	r0, r3, r2, r0
 80122f4:	e7d0      	b.n	8012298 <__gethex+0xdc>
 80122f6:	4629      	mov	r1, r5
 80122f8:	e7e0      	b.n	80122bc <__gethex+0x100>
 80122fa:	eba5 0308 	sub.w	r3, r5, r8
 80122fe:	3b01      	subs	r3, #1
 8012300:	4621      	mov	r1, r4
 8012302:	2b07      	cmp	r3, #7
 8012304:	dc0a      	bgt.n	801231c <__gethex+0x160>
 8012306:	4648      	mov	r0, r9
 8012308:	f000 fb0e 	bl	8012928 <_Balloc>
 801230c:	4604      	mov	r4, r0
 801230e:	b940      	cbnz	r0, 8012322 <__gethex+0x166>
 8012310:	4b61      	ldr	r3, [pc, #388]	; (8012498 <__gethex+0x2dc>)
 8012312:	4602      	mov	r2, r0
 8012314:	21e4      	movs	r1, #228	; 0xe4
 8012316:	4861      	ldr	r0, [pc, #388]	; (801249c <__gethex+0x2e0>)
 8012318:	f7ff fe7e 	bl	8012018 <__assert_func>
 801231c:	3101      	adds	r1, #1
 801231e:	105b      	asrs	r3, r3, #1
 8012320:	e7ef      	b.n	8012302 <__gethex+0x146>
 8012322:	f100 0a14 	add.w	sl, r0, #20
 8012326:	2300      	movs	r3, #0
 8012328:	495a      	ldr	r1, [pc, #360]	; (8012494 <__gethex+0x2d8>)
 801232a:	f8cd a004 	str.w	sl, [sp, #4]
 801232e:	469b      	mov	fp, r3
 8012330:	45a8      	cmp	r8, r5
 8012332:	d342      	bcc.n	80123ba <__gethex+0x1fe>
 8012334:	9801      	ldr	r0, [sp, #4]
 8012336:	f840 bb04 	str.w	fp, [r0], #4
 801233a:	eba0 000a 	sub.w	r0, r0, sl
 801233e:	1080      	asrs	r0, r0, #2
 8012340:	6120      	str	r0, [r4, #16]
 8012342:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8012346:	4658      	mov	r0, fp
 8012348:	f000 fbe0 	bl	8012b0c <__hi0bits>
 801234c:	683d      	ldr	r5, [r7, #0]
 801234e:	eba8 0000 	sub.w	r0, r8, r0
 8012352:	42a8      	cmp	r0, r5
 8012354:	dd59      	ble.n	801240a <__gethex+0x24e>
 8012356:	eba0 0805 	sub.w	r8, r0, r5
 801235a:	4641      	mov	r1, r8
 801235c:	4620      	mov	r0, r4
 801235e:	f000 ff6c 	bl	801323a <__any_on>
 8012362:	4683      	mov	fp, r0
 8012364:	b1b8      	cbz	r0, 8012396 <__gethex+0x1da>
 8012366:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 801236a:	1159      	asrs	r1, r3, #5
 801236c:	f003 021f 	and.w	r2, r3, #31
 8012370:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8012374:	f04f 0b01 	mov.w	fp, #1
 8012378:	fa0b f202 	lsl.w	r2, fp, r2
 801237c:	420a      	tst	r2, r1
 801237e:	d00a      	beq.n	8012396 <__gethex+0x1da>
 8012380:	455b      	cmp	r3, fp
 8012382:	dd06      	ble.n	8012392 <__gethex+0x1d6>
 8012384:	f1a8 0102 	sub.w	r1, r8, #2
 8012388:	4620      	mov	r0, r4
 801238a:	f000 ff56 	bl	801323a <__any_on>
 801238e:	2800      	cmp	r0, #0
 8012390:	d138      	bne.n	8012404 <__gethex+0x248>
 8012392:	f04f 0b02 	mov.w	fp, #2
 8012396:	4641      	mov	r1, r8
 8012398:	4620      	mov	r0, r4
 801239a:	f7ff fea7 	bl	80120ec <rshift>
 801239e:	4446      	add	r6, r8
 80123a0:	68bb      	ldr	r3, [r7, #8]
 80123a2:	42b3      	cmp	r3, r6
 80123a4:	da41      	bge.n	801242a <__gethex+0x26e>
 80123a6:	4621      	mov	r1, r4
 80123a8:	4648      	mov	r0, r9
 80123aa:	f000 fafd 	bl	80129a8 <_Bfree>
 80123ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80123b0:	2300      	movs	r3, #0
 80123b2:	6013      	str	r3, [r2, #0]
 80123b4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80123b8:	e78a      	b.n	80122d0 <__gethex+0x114>
 80123ba:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80123be:	2a2e      	cmp	r2, #46	; 0x2e
 80123c0:	d014      	beq.n	80123ec <__gethex+0x230>
 80123c2:	2b20      	cmp	r3, #32
 80123c4:	d106      	bne.n	80123d4 <__gethex+0x218>
 80123c6:	9b01      	ldr	r3, [sp, #4]
 80123c8:	f843 bb04 	str.w	fp, [r3], #4
 80123cc:	f04f 0b00 	mov.w	fp, #0
 80123d0:	9301      	str	r3, [sp, #4]
 80123d2:	465b      	mov	r3, fp
 80123d4:	7828      	ldrb	r0, [r5, #0]
 80123d6:	9303      	str	r3, [sp, #12]
 80123d8:	f7ff feda 	bl	8012190 <__hexdig_fun>
 80123dc:	9b03      	ldr	r3, [sp, #12]
 80123de:	f000 000f 	and.w	r0, r0, #15
 80123e2:	4098      	lsls	r0, r3
 80123e4:	ea4b 0b00 	orr.w	fp, fp, r0
 80123e8:	3304      	adds	r3, #4
 80123ea:	e7a1      	b.n	8012330 <__gethex+0x174>
 80123ec:	45a8      	cmp	r8, r5
 80123ee:	d8e8      	bhi.n	80123c2 <__gethex+0x206>
 80123f0:	2201      	movs	r2, #1
 80123f2:	4628      	mov	r0, r5
 80123f4:	9303      	str	r3, [sp, #12]
 80123f6:	f7ff fd04 	bl	8011e02 <strncmp>
 80123fa:	4926      	ldr	r1, [pc, #152]	; (8012494 <__gethex+0x2d8>)
 80123fc:	9b03      	ldr	r3, [sp, #12]
 80123fe:	2800      	cmp	r0, #0
 8012400:	d1df      	bne.n	80123c2 <__gethex+0x206>
 8012402:	e795      	b.n	8012330 <__gethex+0x174>
 8012404:	f04f 0b03 	mov.w	fp, #3
 8012408:	e7c5      	b.n	8012396 <__gethex+0x1da>
 801240a:	da0b      	bge.n	8012424 <__gethex+0x268>
 801240c:	eba5 0800 	sub.w	r8, r5, r0
 8012410:	4621      	mov	r1, r4
 8012412:	4642      	mov	r2, r8
 8012414:	4648      	mov	r0, r9
 8012416:	f000 fce1 	bl	8012ddc <__lshift>
 801241a:	eba6 0608 	sub.w	r6, r6, r8
 801241e:	4604      	mov	r4, r0
 8012420:	f100 0a14 	add.w	sl, r0, #20
 8012424:	f04f 0b00 	mov.w	fp, #0
 8012428:	e7ba      	b.n	80123a0 <__gethex+0x1e4>
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	42b3      	cmp	r3, r6
 801242e:	dd73      	ble.n	8012518 <__gethex+0x35c>
 8012430:	1b9e      	subs	r6, r3, r6
 8012432:	42b5      	cmp	r5, r6
 8012434:	dc34      	bgt.n	80124a0 <__gethex+0x2e4>
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	2b02      	cmp	r3, #2
 801243a:	d023      	beq.n	8012484 <__gethex+0x2c8>
 801243c:	2b03      	cmp	r3, #3
 801243e:	d025      	beq.n	801248c <__gethex+0x2d0>
 8012440:	2b01      	cmp	r3, #1
 8012442:	d115      	bne.n	8012470 <__gethex+0x2b4>
 8012444:	42b5      	cmp	r5, r6
 8012446:	d113      	bne.n	8012470 <__gethex+0x2b4>
 8012448:	2d01      	cmp	r5, #1
 801244a:	d10b      	bne.n	8012464 <__gethex+0x2a8>
 801244c:	9a02      	ldr	r2, [sp, #8]
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	6013      	str	r3, [r2, #0]
 8012452:	2301      	movs	r3, #1
 8012454:	6123      	str	r3, [r4, #16]
 8012456:	f8ca 3000 	str.w	r3, [sl]
 801245a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801245c:	f04f 0862 	mov.w	r8, #98	; 0x62
 8012460:	601c      	str	r4, [r3, #0]
 8012462:	e735      	b.n	80122d0 <__gethex+0x114>
 8012464:	1e69      	subs	r1, r5, #1
 8012466:	4620      	mov	r0, r4
 8012468:	f000 fee7 	bl	801323a <__any_on>
 801246c:	2800      	cmp	r0, #0
 801246e:	d1ed      	bne.n	801244c <__gethex+0x290>
 8012470:	4621      	mov	r1, r4
 8012472:	4648      	mov	r0, r9
 8012474:	f000 fa98 	bl	80129a8 <_Bfree>
 8012478:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801247a:	2300      	movs	r3, #0
 801247c:	6013      	str	r3, [r2, #0]
 801247e:	f04f 0850 	mov.w	r8, #80	; 0x50
 8012482:	e725      	b.n	80122d0 <__gethex+0x114>
 8012484:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012486:	2b00      	cmp	r3, #0
 8012488:	d1f2      	bne.n	8012470 <__gethex+0x2b4>
 801248a:	e7df      	b.n	801244c <__gethex+0x290>
 801248c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801248e:	2b00      	cmp	r3, #0
 8012490:	d1dc      	bne.n	801244c <__gethex+0x290>
 8012492:	e7ed      	b.n	8012470 <__gethex+0x2b4>
 8012494:	0801686d 	.word	0x0801686d
 8012498:	08016a6f 	.word	0x08016a6f
 801249c:	08016a80 	.word	0x08016a80
 80124a0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80124a4:	f1bb 0f00 	cmp.w	fp, #0
 80124a8:	d133      	bne.n	8012512 <__gethex+0x356>
 80124aa:	f1b8 0f00 	cmp.w	r8, #0
 80124ae:	d004      	beq.n	80124ba <__gethex+0x2fe>
 80124b0:	4641      	mov	r1, r8
 80124b2:	4620      	mov	r0, r4
 80124b4:	f000 fec1 	bl	801323a <__any_on>
 80124b8:	4683      	mov	fp, r0
 80124ba:	ea4f 1268 	mov.w	r2, r8, asr #5
 80124be:	2301      	movs	r3, #1
 80124c0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80124c4:	f008 081f 	and.w	r8, r8, #31
 80124c8:	fa03 f308 	lsl.w	r3, r3, r8
 80124cc:	4213      	tst	r3, r2
 80124ce:	4631      	mov	r1, r6
 80124d0:	4620      	mov	r0, r4
 80124d2:	bf18      	it	ne
 80124d4:	f04b 0b02 	orrne.w	fp, fp, #2
 80124d8:	1bad      	subs	r5, r5, r6
 80124da:	f7ff fe07 	bl	80120ec <rshift>
 80124de:	687e      	ldr	r6, [r7, #4]
 80124e0:	f04f 0802 	mov.w	r8, #2
 80124e4:	f1bb 0f00 	cmp.w	fp, #0
 80124e8:	d04a      	beq.n	8012580 <__gethex+0x3c4>
 80124ea:	68fb      	ldr	r3, [r7, #12]
 80124ec:	2b02      	cmp	r3, #2
 80124ee:	d016      	beq.n	801251e <__gethex+0x362>
 80124f0:	2b03      	cmp	r3, #3
 80124f2:	d018      	beq.n	8012526 <__gethex+0x36a>
 80124f4:	2b01      	cmp	r3, #1
 80124f6:	d109      	bne.n	801250c <__gethex+0x350>
 80124f8:	f01b 0f02 	tst.w	fp, #2
 80124fc:	d006      	beq.n	801250c <__gethex+0x350>
 80124fe:	f8da 3000 	ldr.w	r3, [sl]
 8012502:	ea4b 0b03 	orr.w	fp, fp, r3
 8012506:	f01b 0f01 	tst.w	fp, #1
 801250a:	d10f      	bne.n	801252c <__gethex+0x370>
 801250c:	f048 0810 	orr.w	r8, r8, #16
 8012510:	e036      	b.n	8012580 <__gethex+0x3c4>
 8012512:	f04f 0b01 	mov.w	fp, #1
 8012516:	e7d0      	b.n	80124ba <__gethex+0x2fe>
 8012518:	f04f 0801 	mov.w	r8, #1
 801251c:	e7e2      	b.n	80124e4 <__gethex+0x328>
 801251e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012520:	f1c3 0301 	rsb	r3, r3, #1
 8012524:	930f      	str	r3, [sp, #60]	; 0x3c
 8012526:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012528:	2b00      	cmp	r3, #0
 801252a:	d0ef      	beq.n	801250c <__gethex+0x350>
 801252c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012530:	f104 0214 	add.w	r2, r4, #20
 8012534:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8012538:	9301      	str	r3, [sp, #4]
 801253a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801253e:	2300      	movs	r3, #0
 8012540:	4694      	mov	ip, r2
 8012542:	f852 1b04 	ldr.w	r1, [r2], #4
 8012546:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 801254a:	d01e      	beq.n	801258a <__gethex+0x3ce>
 801254c:	3101      	adds	r1, #1
 801254e:	f8cc 1000 	str.w	r1, [ip]
 8012552:	f1b8 0f02 	cmp.w	r8, #2
 8012556:	f104 0214 	add.w	r2, r4, #20
 801255a:	d13d      	bne.n	80125d8 <__gethex+0x41c>
 801255c:	683b      	ldr	r3, [r7, #0]
 801255e:	3b01      	subs	r3, #1
 8012560:	42ab      	cmp	r3, r5
 8012562:	d10b      	bne.n	801257c <__gethex+0x3c0>
 8012564:	1169      	asrs	r1, r5, #5
 8012566:	2301      	movs	r3, #1
 8012568:	f005 051f 	and.w	r5, r5, #31
 801256c:	fa03 f505 	lsl.w	r5, r3, r5
 8012570:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012574:	421d      	tst	r5, r3
 8012576:	bf18      	it	ne
 8012578:	f04f 0801 	movne.w	r8, #1
 801257c:	f048 0820 	orr.w	r8, r8, #32
 8012580:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012582:	601c      	str	r4, [r3, #0]
 8012584:	9b02      	ldr	r3, [sp, #8]
 8012586:	601e      	str	r6, [r3, #0]
 8012588:	e6a2      	b.n	80122d0 <__gethex+0x114>
 801258a:	4290      	cmp	r0, r2
 801258c:	f842 3c04 	str.w	r3, [r2, #-4]
 8012590:	d8d6      	bhi.n	8012540 <__gethex+0x384>
 8012592:	68a2      	ldr	r2, [r4, #8]
 8012594:	4593      	cmp	fp, r2
 8012596:	db17      	blt.n	80125c8 <__gethex+0x40c>
 8012598:	6861      	ldr	r1, [r4, #4]
 801259a:	4648      	mov	r0, r9
 801259c:	3101      	adds	r1, #1
 801259e:	f000 f9c3 	bl	8012928 <_Balloc>
 80125a2:	4682      	mov	sl, r0
 80125a4:	b918      	cbnz	r0, 80125ae <__gethex+0x3f2>
 80125a6:	4b1b      	ldr	r3, [pc, #108]	; (8012614 <__gethex+0x458>)
 80125a8:	4602      	mov	r2, r0
 80125aa:	2184      	movs	r1, #132	; 0x84
 80125ac:	e6b3      	b.n	8012316 <__gethex+0x15a>
 80125ae:	6922      	ldr	r2, [r4, #16]
 80125b0:	3202      	adds	r2, #2
 80125b2:	f104 010c 	add.w	r1, r4, #12
 80125b6:	0092      	lsls	r2, r2, #2
 80125b8:	300c      	adds	r0, #12
 80125ba:	f7ff fd16 	bl	8011fea <memcpy>
 80125be:	4621      	mov	r1, r4
 80125c0:	4648      	mov	r0, r9
 80125c2:	f000 f9f1 	bl	80129a8 <_Bfree>
 80125c6:	4654      	mov	r4, sl
 80125c8:	6922      	ldr	r2, [r4, #16]
 80125ca:	1c51      	adds	r1, r2, #1
 80125cc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80125d0:	6121      	str	r1, [r4, #16]
 80125d2:	2101      	movs	r1, #1
 80125d4:	6151      	str	r1, [r2, #20]
 80125d6:	e7bc      	b.n	8012552 <__gethex+0x396>
 80125d8:	6921      	ldr	r1, [r4, #16]
 80125da:	4559      	cmp	r1, fp
 80125dc:	dd0b      	ble.n	80125f6 <__gethex+0x43a>
 80125de:	2101      	movs	r1, #1
 80125e0:	4620      	mov	r0, r4
 80125e2:	f7ff fd83 	bl	80120ec <rshift>
 80125e6:	68bb      	ldr	r3, [r7, #8]
 80125e8:	3601      	adds	r6, #1
 80125ea:	42b3      	cmp	r3, r6
 80125ec:	f6ff aedb 	blt.w	80123a6 <__gethex+0x1ea>
 80125f0:	f04f 0801 	mov.w	r8, #1
 80125f4:	e7c2      	b.n	801257c <__gethex+0x3c0>
 80125f6:	f015 051f 	ands.w	r5, r5, #31
 80125fa:	d0f9      	beq.n	80125f0 <__gethex+0x434>
 80125fc:	9b01      	ldr	r3, [sp, #4]
 80125fe:	441a      	add	r2, r3
 8012600:	f1c5 0520 	rsb	r5, r5, #32
 8012604:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8012608:	f000 fa80 	bl	8012b0c <__hi0bits>
 801260c:	42a8      	cmp	r0, r5
 801260e:	dbe6      	blt.n	80125de <__gethex+0x422>
 8012610:	e7ee      	b.n	80125f0 <__gethex+0x434>
 8012612:	bf00      	nop
 8012614:	08016a6f 	.word	0x08016a6f

08012618 <L_shift>:
 8012618:	f1c2 0208 	rsb	r2, r2, #8
 801261c:	0092      	lsls	r2, r2, #2
 801261e:	b570      	push	{r4, r5, r6, lr}
 8012620:	f1c2 0620 	rsb	r6, r2, #32
 8012624:	6843      	ldr	r3, [r0, #4]
 8012626:	6804      	ldr	r4, [r0, #0]
 8012628:	fa03 f506 	lsl.w	r5, r3, r6
 801262c:	432c      	orrs	r4, r5
 801262e:	40d3      	lsrs	r3, r2
 8012630:	6004      	str	r4, [r0, #0]
 8012632:	f840 3f04 	str.w	r3, [r0, #4]!
 8012636:	4288      	cmp	r0, r1
 8012638:	d3f4      	bcc.n	8012624 <L_shift+0xc>
 801263a:	bd70      	pop	{r4, r5, r6, pc}

0801263c <__match>:
 801263c:	b530      	push	{r4, r5, lr}
 801263e:	6803      	ldr	r3, [r0, #0]
 8012640:	3301      	adds	r3, #1
 8012642:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012646:	b914      	cbnz	r4, 801264e <__match+0x12>
 8012648:	6003      	str	r3, [r0, #0]
 801264a:	2001      	movs	r0, #1
 801264c:	bd30      	pop	{r4, r5, pc}
 801264e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012652:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8012656:	2d19      	cmp	r5, #25
 8012658:	bf98      	it	ls
 801265a:	3220      	addls	r2, #32
 801265c:	42a2      	cmp	r2, r4
 801265e:	d0f0      	beq.n	8012642 <__match+0x6>
 8012660:	2000      	movs	r0, #0
 8012662:	e7f3      	b.n	801264c <__match+0x10>

08012664 <__hexnan>:
 8012664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012668:	680b      	ldr	r3, [r1, #0]
 801266a:	6801      	ldr	r1, [r0, #0]
 801266c:	115e      	asrs	r6, r3, #5
 801266e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012672:	f013 031f 	ands.w	r3, r3, #31
 8012676:	b087      	sub	sp, #28
 8012678:	bf18      	it	ne
 801267a:	3604      	addne	r6, #4
 801267c:	2500      	movs	r5, #0
 801267e:	1f37      	subs	r7, r6, #4
 8012680:	4682      	mov	sl, r0
 8012682:	4690      	mov	r8, r2
 8012684:	9301      	str	r3, [sp, #4]
 8012686:	f846 5c04 	str.w	r5, [r6, #-4]
 801268a:	46b9      	mov	r9, r7
 801268c:	463c      	mov	r4, r7
 801268e:	9502      	str	r5, [sp, #8]
 8012690:	46ab      	mov	fp, r5
 8012692:	784a      	ldrb	r2, [r1, #1]
 8012694:	1c4b      	adds	r3, r1, #1
 8012696:	9303      	str	r3, [sp, #12]
 8012698:	b342      	cbz	r2, 80126ec <__hexnan+0x88>
 801269a:	4610      	mov	r0, r2
 801269c:	9105      	str	r1, [sp, #20]
 801269e:	9204      	str	r2, [sp, #16]
 80126a0:	f7ff fd76 	bl	8012190 <__hexdig_fun>
 80126a4:	2800      	cmp	r0, #0
 80126a6:	d14f      	bne.n	8012748 <__hexnan+0xe4>
 80126a8:	9a04      	ldr	r2, [sp, #16]
 80126aa:	9905      	ldr	r1, [sp, #20]
 80126ac:	2a20      	cmp	r2, #32
 80126ae:	d818      	bhi.n	80126e2 <__hexnan+0x7e>
 80126b0:	9b02      	ldr	r3, [sp, #8]
 80126b2:	459b      	cmp	fp, r3
 80126b4:	dd13      	ble.n	80126de <__hexnan+0x7a>
 80126b6:	454c      	cmp	r4, r9
 80126b8:	d206      	bcs.n	80126c8 <__hexnan+0x64>
 80126ba:	2d07      	cmp	r5, #7
 80126bc:	dc04      	bgt.n	80126c8 <__hexnan+0x64>
 80126be:	462a      	mov	r2, r5
 80126c0:	4649      	mov	r1, r9
 80126c2:	4620      	mov	r0, r4
 80126c4:	f7ff ffa8 	bl	8012618 <L_shift>
 80126c8:	4544      	cmp	r4, r8
 80126ca:	d950      	bls.n	801276e <__hexnan+0x10a>
 80126cc:	2300      	movs	r3, #0
 80126ce:	f1a4 0904 	sub.w	r9, r4, #4
 80126d2:	f844 3c04 	str.w	r3, [r4, #-4]
 80126d6:	f8cd b008 	str.w	fp, [sp, #8]
 80126da:	464c      	mov	r4, r9
 80126dc:	461d      	mov	r5, r3
 80126de:	9903      	ldr	r1, [sp, #12]
 80126e0:	e7d7      	b.n	8012692 <__hexnan+0x2e>
 80126e2:	2a29      	cmp	r2, #41	; 0x29
 80126e4:	d155      	bne.n	8012792 <__hexnan+0x12e>
 80126e6:	3102      	adds	r1, #2
 80126e8:	f8ca 1000 	str.w	r1, [sl]
 80126ec:	f1bb 0f00 	cmp.w	fp, #0
 80126f0:	d04f      	beq.n	8012792 <__hexnan+0x12e>
 80126f2:	454c      	cmp	r4, r9
 80126f4:	d206      	bcs.n	8012704 <__hexnan+0xa0>
 80126f6:	2d07      	cmp	r5, #7
 80126f8:	dc04      	bgt.n	8012704 <__hexnan+0xa0>
 80126fa:	462a      	mov	r2, r5
 80126fc:	4649      	mov	r1, r9
 80126fe:	4620      	mov	r0, r4
 8012700:	f7ff ff8a 	bl	8012618 <L_shift>
 8012704:	4544      	cmp	r4, r8
 8012706:	d934      	bls.n	8012772 <__hexnan+0x10e>
 8012708:	f1a8 0204 	sub.w	r2, r8, #4
 801270c:	4623      	mov	r3, r4
 801270e:	f853 1b04 	ldr.w	r1, [r3], #4
 8012712:	f842 1f04 	str.w	r1, [r2, #4]!
 8012716:	429f      	cmp	r7, r3
 8012718:	d2f9      	bcs.n	801270e <__hexnan+0xaa>
 801271a:	1b3b      	subs	r3, r7, r4
 801271c:	f023 0303 	bic.w	r3, r3, #3
 8012720:	3304      	adds	r3, #4
 8012722:	3e03      	subs	r6, #3
 8012724:	3401      	adds	r4, #1
 8012726:	42a6      	cmp	r6, r4
 8012728:	bf38      	it	cc
 801272a:	2304      	movcc	r3, #4
 801272c:	4443      	add	r3, r8
 801272e:	2200      	movs	r2, #0
 8012730:	f843 2b04 	str.w	r2, [r3], #4
 8012734:	429f      	cmp	r7, r3
 8012736:	d2fb      	bcs.n	8012730 <__hexnan+0xcc>
 8012738:	683b      	ldr	r3, [r7, #0]
 801273a:	b91b      	cbnz	r3, 8012744 <__hexnan+0xe0>
 801273c:	4547      	cmp	r7, r8
 801273e:	d126      	bne.n	801278e <__hexnan+0x12a>
 8012740:	2301      	movs	r3, #1
 8012742:	603b      	str	r3, [r7, #0]
 8012744:	2005      	movs	r0, #5
 8012746:	e025      	b.n	8012794 <__hexnan+0x130>
 8012748:	3501      	adds	r5, #1
 801274a:	2d08      	cmp	r5, #8
 801274c:	f10b 0b01 	add.w	fp, fp, #1
 8012750:	dd06      	ble.n	8012760 <__hexnan+0xfc>
 8012752:	4544      	cmp	r4, r8
 8012754:	d9c3      	bls.n	80126de <__hexnan+0x7a>
 8012756:	2300      	movs	r3, #0
 8012758:	f844 3c04 	str.w	r3, [r4, #-4]
 801275c:	2501      	movs	r5, #1
 801275e:	3c04      	subs	r4, #4
 8012760:	6822      	ldr	r2, [r4, #0]
 8012762:	f000 000f 	and.w	r0, r0, #15
 8012766:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801276a:	6020      	str	r0, [r4, #0]
 801276c:	e7b7      	b.n	80126de <__hexnan+0x7a>
 801276e:	2508      	movs	r5, #8
 8012770:	e7b5      	b.n	80126de <__hexnan+0x7a>
 8012772:	9b01      	ldr	r3, [sp, #4]
 8012774:	2b00      	cmp	r3, #0
 8012776:	d0df      	beq.n	8012738 <__hexnan+0xd4>
 8012778:	f1c3 0320 	rsb	r3, r3, #32
 801277c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012780:	40da      	lsrs	r2, r3
 8012782:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8012786:	4013      	ands	r3, r2
 8012788:	f846 3c04 	str.w	r3, [r6, #-4]
 801278c:	e7d4      	b.n	8012738 <__hexnan+0xd4>
 801278e:	3f04      	subs	r7, #4
 8012790:	e7d2      	b.n	8012738 <__hexnan+0xd4>
 8012792:	2004      	movs	r0, #4
 8012794:	b007      	add	sp, #28
 8012796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801279c <malloc>:
 801279c:	4b02      	ldr	r3, [pc, #8]	; (80127a8 <malloc+0xc>)
 801279e:	4601      	mov	r1, r0
 80127a0:	6818      	ldr	r0, [r3, #0]
 80127a2:	f000 b823 	b.w	80127ec <_malloc_r>
 80127a6:	bf00      	nop
 80127a8:	200001f0 	.word	0x200001f0

080127ac <sbrk_aligned>:
 80127ac:	b570      	push	{r4, r5, r6, lr}
 80127ae:	4e0e      	ldr	r6, [pc, #56]	; (80127e8 <sbrk_aligned+0x3c>)
 80127b0:	460c      	mov	r4, r1
 80127b2:	6831      	ldr	r1, [r6, #0]
 80127b4:	4605      	mov	r5, r0
 80127b6:	b911      	cbnz	r1, 80127be <sbrk_aligned+0x12>
 80127b8:	f001 f996 	bl	8013ae8 <_sbrk_r>
 80127bc:	6030      	str	r0, [r6, #0]
 80127be:	4621      	mov	r1, r4
 80127c0:	4628      	mov	r0, r5
 80127c2:	f001 f991 	bl	8013ae8 <_sbrk_r>
 80127c6:	1c43      	adds	r3, r0, #1
 80127c8:	d00a      	beq.n	80127e0 <sbrk_aligned+0x34>
 80127ca:	1cc4      	adds	r4, r0, #3
 80127cc:	f024 0403 	bic.w	r4, r4, #3
 80127d0:	42a0      	cmp	r0, r4
 80127d2:	d007      	beq.n	80127e4 <sbrk_aligned+0x38>
 80127d4:	1a21      	subs	r1, r4, r0
 80127d6:	4628      	mov	r0, r5
 80127d8:	f001 f986 	bl	8013ae8 <_sbrk_r>
 80127dc:	3001      	adds	r0, #1
 80127de:	d101      	bne.n	80127e4 <sbrk_aligned+0x38>
 80127e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80127e4:	4620      	mov	r0, r4
 80127e6:	bd70      	pop	{r4, r5, r6, pc}
 80127e8:	2000aa74 	.word	0x2000aa74

080127ec <_malloc_r>:
 80127ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80127f0:	1ccd      	adds	r5, r1, #3
 80127f2:	f025 0503 	bic.w	r5, r5, #3
 80127f6:	3508      	adds	r5, #8
 80127f8:	2d0c      	cmp	r5, #12
 80127fa:	bf38      	it	cc
 80127fc:	250c      	movcc	r5, #12
 80127fe:	2d00      	cmp	r5, #0
 8012800:	4607      	mov	r7, r0
 8012802:	db01      	blt.n	8012808 <_malloc_r+0x1c>
 8012804:	42a9      	cmp	r1, r5
 8012806:	d905      	bls.n	8012814 <_malloc_r+0x28>
 8012808:	230c      	movs	r3, #12
 801280a:	603b      	str	r3, [r7, #0]
 801280c:	2600      	movs	r6, #0
 801280e:	4630      	mov	r0, r6
 8012810:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012814:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80128e8 <_malloc_r+0xfc>
 8012818:	f000 f87a 	bl	8012910 <__malloc_lock>
 801281c:	f8d8 3000 	ldr.w	r3, [r8]
 8012820:	461c      	mov	r4, r3
 8012822:	bb5c      	cbnz	r4, 801287c <_malloc_r+0x90>
 8012824:	4629      	mov	r1, r5
 8012826:	4638      	mov	r0, r7
 8012828:	f7ff ffc0 	bl	80127ac <sbrk_aligned>
 801282c:	1c43      	adds	r3, r0, #1
 801282e:	4604      	mov	r4, r0
 8012830:	d155      	bne.n	80128de <_malloc_r+0xf2>
 8012832:	f8d8 4000 	ldr.w	r4, [r8]
 8012836:	4626      	mov	r6, r4
 8012838:	2e00      	cmp	r6, #0
 801283a:	d145      	bne.n	80128c8 <_malloc_r+0xdc>
 801283c:	2c00      	cmp	r4, #0
 801283e:	d048      	beq.n	80128d2 <_malloc_r+0xe6>
 8012840:	6823      	ldr	r3, [r4, #0]
 8012842:	4631      	mov	r1, r6
 8012844:	4638      	mov	r0, r7
 8012846:	eb04 0903 	add.w	r9, r4, r3
 801284a:	f001 f94d 	bl	8013ae8 <_sbrk_r>
 801284e:	4581      	cmp	r9, r0
 8012850:	d13f      	bne.n	80128d2 <_malloc_r+0xe6>
 8012852:	6821      	ldr	r1, [r4, #0]
 8012854:	1a6d      	subs	r5, r5, r1
 8012856:	4629      	mov	r1, r5
 8012858:	4638      	mov	r0, r7
 801285a:	f7ff ffa7 	bl	80127ac <sbrk_aligned>
 801285e:	3001      	adds	r0, #1
 8012860:	d037      	beq.n	80128d2 <_malloc_r+0xe6>
 8012862:	6823      	ldr	r3, [r4, #0]
 8012864:	442b      	add	r3, r5
 8012866:	6023      	str	r3, [r4, #0]
 8012868:	f8d8 3000 	ldr.w	r3, [r8]
 801286c:	2b00      	cmp	r3, #0
 801286e:	d038      	beq.n	80128e2 <_malloc_r+0xf6>
 8012870:	685a      	ldr	r2, [r3, #4]
 8012872:	42a2      	cmp	r2, r4
 8012874:	d12b      	bne.n	80128ce <_malloc_r+0xe2>
 8012876:	2200      	movs	r2, #0
 8012878:	605a      	str	r2, [r3, #4]
 801287a:	e00f      	b.n	801289c <_malloc_r+0xb0>
 801287c:	6822      	ldr	r2, [r4, #0]
 801287e:	1b52      	subs	r2, r2, r5
 8012880:	d41f      	bmi.n	80128c2 <_malloc_r+0xd6>
 8012882:	2a0b      	cmp	r2, #11
 8012884:	d917      	bls.n	80128b6 <_malloc_r+0xca>
 8012886:	1961      	adds	r1, r4, r5
 8012888:	42a3      	cmp	r3, r4
 801288a:	6025      	str	r5, [r4, #0]
 801288c:	bf18      	it	ne
 801288e:	6059      	strne	r1, [r3, #4]
 8012890:	6863      	ldr	r3, [r4, #4]
 8012892:	bf08      	it	eq
 8012894:	f8c8 1000 	streq.w	r1, [r8]
 8012898:	5162      	str	r2, [r4, r5]
 801289a:	604b      	str	r3, [r1, #4]
 801289c:	4638      	mov	r0, r7
 801289e:	f104 060b 	add.w	r6, r4, #11
 80128a2:	f000 f83b 	bl	801291c <__malloc_unlock>
 80128a6:	f026 0607 	bic.w	r6, r6, #7
 80128aa:	1d23      	adds	r3, r4, #4
 80128ac:	1af2      	subs	r2, r6, r3
 80128ae:	d0ae      	beq.n	801280e <_malloc_r+0x22>
 80128b0:	1b9b      	subs	r3, r3, r6
 80128b2:	50a3      	str	r3, [r4, r2]
 80128b4:	e7ab      	b.n	801280e <_malloc_r+0x22>
 80128b6:	42a3      	cmp	r3, r4
 80128b8:	6862      	ldr	r2, [r4, #4]
 80128ba:	d1dd      	bne.n	8012878 <_malloc_r+0x8c>
 80128bc:	f8c8 2000 	str.w	r2, [r8]
 80128c0:	e7ec      	b.n	801289c <_malloc_r+0xb0>
 80128c2:	4623      	mov	r3, r4
 80128c4:	6864      	ldr	r4, [r4, #4]
 80128c6:	e7ac      	b.n	8012822 <_malloc_r+0x36>
 80128c8:	4634      	mov	r4, r6
 80128ca:	6876      	ldr	r6, [r6, #4]
 80128cc:	e7b4      	b.n	8012838 <_malloc_r+0x4c>
 80128ce:	4613      	mov	r3, r2
 80128d0:	e7cc      	b.n	801286c <_malloc_r+0x80>
 80128d2:	230c      	movs	r3, #12
 80128d4:	603b      	str	r3, [r7, #0]
 80128d6:	4638      	mov	r0, r7
 80128d8:	f000 f820 	bl	801291c <__malloc_unlock>
 80128dc:	e797      	b.n	801280e <_malloc_r+0x22>
 80128de:	6025      	str	r5, [r4, #0]
 80128e0:	e7dc      	b.n	801289c <_malloc_r+0xb0>
 80128e2:	605b      	str	r3, [r3, #4]
 80128e4:	deff      	udf	#255	; 0xff
 80128e6:	bf00      	nop
 80128e8:	2000aa70 	.word	0x2000aa70

080128ec <__ascii_mbtowc>:
 80128ec:	b082      	sub	sp, #8
 80128ee:	b901      	cbnz	r1, 80128f2 <__ascii_mbtowc+0x6>
 80128f0:	a901      	add	r1, sp, #4
 80128f2:	b142      	cbz	r2, 8012906 <__ascii_mbtowc+0x1a>
 80128f4:	b14b      	cbz	r3, 801290a <__ascii_mbtowc+0x1e>
 80128f6:	7813      	ldrb	r3, [r2, #0]
 80128f8:	600b      	str	r3, [r1, #0]
 80128fa:	7812      	ldrb	r2, [r2, #0]
 80128fc:	1e10      	subs	r0, r2, #0
 80128fe:	bf18      	it	ne
 8012900:	2001      	movne	r0, #1
 8012902:	b002      	add	sp, #8
 8012904:	4770      	bx	lr
 8012906:	4610      	mov	r0, r2
 8012908:	e7fb      	b.n	8012902 <__ascii_mbtowc+0x16>
 801290a:	f06f 0001 	mvn.w	r0, #1
 801290e:	e7f8      	b.n	8012902 <__ascii_mbtowc+0x16>

08012910 <__malloc_lock>:
 8012910:	4801      	ldr	r0, [pc, #4]	; (8012918 <__malloc_lock+0x8>)
 8012912:	f7ff bb68 	b.w	8011fe6 <__retarget_lock_acquire_recursive>
 8012916:	bf00      	nop
 8012918:	2000aa6c 	.word	0x2000aa6c

0801291c <__malloc_unlock>:
 801291c:	4801      	ldr	r0, [pc, #4]	; (8012924 <__malloc_unlock+0x8>)
 801291e:	f7ff bb63 	b.w	8011fe8 <__retarget_lock_release_recursive>
 8012922:	bf00      	nop
 8012924:	2000aa6c 	.word	0x2000aa6c

08012928 <_Balloc>:
 8012928:	b570      	push	{r4, r5, r6, lr}
 801292a:	69c6      	ldr	r6, [r0, #28]
 801292c:	4604      	mov	r4, r0
 801292e:	460d      	mov	r5, r1
 8012930:	b976      	cbnz	r6, 8012950 <_Balloc+0x28>
 8012932:	2010      	movs	r0, #16
 8012934:	f7ff ff32 	bl	801279c <malloc>
 8012938:	4602      	mov	r2, r0
 801293a:	61e0      	str	r0, [r4, #28]
 801293c:	b920      	cbnz	r0, 8012948 <_Balloc+0x20>
 801293e:	4b18      	ldr	r3, [pc, #96]	; (80129a0 <_Balloc+0x78>)
 8012940:	4818      	ldr	r0, [pc, #96]	; (80129a4 <_Balloc+0x7c>)
 8012942:	216b      	movs	r1, #107	; 0x6b
 8012944:	f7ff fb68 	bl	8012018 <__assert_func>
 8012948:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801294c:	6006      	str	r6, [r0, #0]
 801294e:	60c6      	str	r6, [r0, #12]
 8012950:	69e6      	ldr	r6, [r4, #28]
 8012952:	68f3      	ldr	r3, [r6, #12]
 8012954:	b183      	cbz	r3, 8012978 <_Balloc+0x50>
 8012956:	69e3      	ldr	r3, [r4, #28]
 8012958:	68db      	ldr	r3, [r3, #12]
 801295a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801295e:	b9b8      	cbnz	r0, 8012990 <_Balloc+0x68>
 8012960:	2101      	movs	r1, #1
 8012962:	fa01 f605 	lsl.w	r6, r1, r5
 8012966:	1d72      	adds	r2, r6, #5
 8012968:	0092      	lsls	r2, r2, #2
 801296a:	4620      	mov	r0, r4
 801296c:	f001 f8d3 	bl	8013b16 <_calloc_r>
 8012970:	b160      	cbz	r0, 801298c <_Balloc+0x64>
 8012972:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012976:	e00e      	b.n	8012996 <_Balloc+0x6e>
 8012978:	2221      	movs	r2, #33	; 0x21
 801297a:	2104      	movs	r1, #4
 801297c:	4620      	mov	r0, r4
 801297e:	f001 f8ca 	bl	8013b16 <_calloc_r>
 8012982:	69e3      	ldr	r3, [r4, #28]
 8012984:	60f0      	str	r0, [r6, #12]
 8012986:	68db      	ldr	r3, [r3, #12]
 8012988:	2b00      	cmp	r3, #0
 801298a:	d1e4      	bne.n	8012956 <_Balloc+0x2e>
 801298c:	2000      	movs	r0, #0
 801298e:	bd70      	pop	{r4, r5, r6, pc}
 8012990:	6802      	ldr	r2, [r0, #0]
 8012992:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012996:	2300      	movs	r3, #0
 8012998:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801299c:	e7f7      	b.n	801298e <_Balloc+0x66>
 801299e:	bf00      	nop
 80129a0:	080167fe 	.word	0x080167fe
 80129a4:	08016ae0 	.word	0x08016ae0

080129a8 <_Bfree>:
 80129a8:	b570      	push	{r4, r5, r6, lr}
 80129aa:	69c6      	ldr	r6, [r0, #28]
 80129ac:	4605      	mov	r5, r0
 80129ae:	460c      	mov	r4, r1
 80129b0:	b976      	cbnz	r6, 80129d0 <_Bfree+0x28>
 80129b2:	2010      	movs	r0, #16
 80129b4:	f7ff fef2 	bl	801279c <malloc>
 80129b8:	4602      	mov	r2, r0
 80129ba:	61e8      	str	r0, [r5, #28]
 80129bc:	b920      	cbnz	r0, 80129c8 <_Bfree+0x20>
 80129be:	4b09      	ldr	r3, [pc, #36]	; (80129e4 <_Bfree+0x3c>)
 80129c0:	4809      	ldr	r0, [pc, #36]	; (80129e8 <_Bfree+0x40>)
 80129c2:	218f      	movs	r1, #143	; 0x8f
 80129c4:	f7ff fb28 	bl	8012018 <__assert_func>
 80129c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80129cc:	6006      	str	r6, [r0, #0]
 80129ce:	60c6      	str	r6, [r0, #12]
 80129d0:	b13c      	cbz	r4, 80129e2 <_Bfree+0x3a>
 80129d2:	69eb      	ldr	r3, [r5, #28]
 80129d4:	6862      	ldr	r2, [r4, #4]
 80129d6:	68db      	ldr	r3, [r3, #12]
 80129d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80129dc:	6021      	str	r1, [r4, #0]
 80129de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80129e2:	bd70      	pop	{r4, r5, r6, pc}
 80129e4:	080167fe 	.word	0x080167fe
 80129e8:	08016ae0 	.word	0x08016ae0

080129ec <__multadd>:
 80129ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129f0:	690d      	ldr	r5, [r1, #16]
 80129f2:	4607      	mov	r7, r0
 80129f4:	460c      	mov	r4, r1
 80129f6:	461e      	mov	r6, r3
 80129f8:	f101 0c14 	add.w	ip, r1, #20
 80129fc:	2000      	movs	r0, #0
 80129fe:	f8dc 3000 	ldr.w	r3, [ip]
 8012a02:	b299      	uxth	r1, r3
 8012a04:	fb02 6101 	mla	r1, r2, r1, r6
 8012a08:	0c1e      	lsrs	r6, r3, #16
 8012a0a:	0c0b      	lsrs	r3, r1, #16
 8012a0c:	fb02 3306 	mla	r3, r2, r6, r3
 8012a10:	b289      	uxth	r1, r1
 8012a12:	3001      	adds	r0, #1
 8012a14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012a18:	4285      	cmp	r5, r0
 8012a1a:	f84c 1b04 	str.w	r1, [ip], #4
 8012a1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012a22:	dcec      	bgt.n	80129fe <__multadd+0x12>
 8012a24:	b30e      	cbz	r6, 8012a6a <__multadd+0x7e>
 8012a26:	68a3      	ldr	r3, [r4, #8]
 8012a28:	42ab      	cmp	r3, r5
 8012a2a:	dc19      	bgt.n	8012a60 <__multadd+0x74>
 8012a2c:	6861      	ldr	r1, [r4, #4]
 8012a2e:	4638      	mov	r0, r7
 8012a30:	3101      	adds	r1, #1
 8012a32:	f7ff ff79 	bl	8012928 <_Balloc>
 8012a36:	4680      	mov	r8, r0
 8012a38:	b928      	cbnz	r0, 8012a46 <__multadd+0x5a>
 8012a3a:	4602      	mov	r2, r0
 8012a3c:	4b0c      	ldr	r3, [pc, #48]	; (8012a70 <__multadd+0x84>)
 8012a3e:	480d      	ldr	r0, [pc, #52]	; (8012a74 <__multadd+0x88>)
 8012a40:	21ba      	movs	r1, #186	; 0xba
 8012a42:	f7ff fae9 	bl	8012018 <__assert_func>
 8012a46:	6922      	ldr	r2, [r4, #16]
 8012a48:	3202      	adds	r2, #2
 8012a4a:	f104 010c 	add.w	r1, r4, #12
 8012a4e:	0092      	lsls	r2, r2, #2
 8012a50:	300c      	adds	r0, #12
 8012a52:	f7ff faca 	bl	8011fea <memcpy>
 8012a56:	4621      	mov	r1, r4
 8012a58:	4638      	mov	r0, r7
 8012a5a:	f7ff ffa5 	bl	80129a8 <_Bfree>
 8012a5e:	4644      	mov	r4, r8
 8012a60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012a64:	3501      	adds	r5, #1
 8012a66:	615e      	str	r6, [r3, #20]
 8012a68:	6125      	str	r5, [r4, #16]
 8012a6a:	4620      	mov	r0, r4
 8012a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a70:	08016a6f 	.word	0x08016a6f
 8012a74:	08016ae0 	.word	0x08016ae0

08012a78 <__s2b>:
 8012a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a7c:	460c      	mov	r4, r1
 8012a7e:	4615      	mov	r5, r2
 8012a80:	461f      	mov	r7, r3
 8012a82:	2209      	movs	r2, #9
 8012a84:	3308      	adds	r3, #8
 8012a86:	4606      	mov	r6, r0
 8012a88:	fb93 f3f2 	sdiv	r3, r3, r2
 8012a8c:	2100      	movs	r1, #0
 8012a8e:	2201      	movs	r2, #1
 8012a90:	429a      	cmp	r2, r3
 8012a92:	db09      	blt.n	8012aa8 <__s2b+0x30>
 8012a94:	4630      	mov	r0, r6
 8012a96:	f7ff ff47 	bl	8012928 <_Balloc>
 8012a9a:	b940      	cbnz	r0, 8012aae <__s2b+0x36>
 8012a9c:	4602      	mov	r2, r0
 8012a9e:	4b19      	ldr	r3, [pc, #100]	; (8012b04 <__s2b+0x8c>)
 8012aa0:	4819      	ldr	r0, [pc, #100]	; (8012b08 <__s2b+0x90>)
 8012aa2:	21d3      	movs	r1, #211	; 0xd3
 8012aa4:	f7ff fab8 	bl	8012018 <__assert_func>
 8012aa8:	0052      	lsls	r2, r2, #1
 8012aaa:	3101      	adds	r1, #1
 8012aac:	e7f0      	b.n	8012a90 <__s2b+0x18>
 8012aae:	9b08      	ldr	r3, [sp, #32]
 8012ab0:	6143      	str	r3, [r0, #20]
 8012ab2:	2d09      	cmp	r5, #9
 8012ab4:	f04f 0301 	mov.w	r3, #1
 8012ab8:	6103      	str	r3, [r0, #16]
 8012aba:	dd16      	ble.n	8012aea <__s2b+0x72>
 8012abc:	f104 0909 	add.w	r9, r4, #9
 8012ac0:	46c8      	mov	r8, r9
 8012ac2:	442c      	add	r4, r5
 8012ac4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012ac8:	4601      	mov	r1, r0
 8012aca:	3b30      	subs	r3, #48	; 0x30
 8012acc:	220a      	movs	r2, #10
 8012ace:	4630      	mov	r0, r6
 8012ad0:	f7ff ff8c 	bl	80129ec <__multadd>
 8012ad4:	45a0      	cmp	r8, r4
 8012ad6:	d1f5      	bne.n	8012ac4 <__s2b+0x4c>
 8012ad8:	f1a5 0408 	sub.w	r4, r5, #8
 8012adc:	444c      	add	r4, r9
 8012ade:	1b2d      	subs	r5, r5, r4
 8012ae0:	1963      	adds	r3, r4, r5
 8012ae2:	42bb      	cmp	r3, r7
 8012ae4:	db04      	blt.n	8012af0 <__s2b+0x78>
 8012ae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012aea:	340a      	adds	r4, #10
 8012aec:	2509      	movs	r5, #9
 8012aee:	e7f6      	b.n	8012ade <__s2b+0x66>
 8012af0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012af4:	4601      	mov	r1, r0
 8012af6:	3b30      	subs	r3, #48	; 0x30
 8012af8:	220a      	movs	r2, #10
 8012afa:	4630      	mov	r0, r6
 8012afc:	f7ff ff76 	bl	80129ec <__multadd>
 8012b00:	e7ee      	b.n	8012ae0 <__s2b+0x68>
 8012b02:	bf00      	nop
 8012b04:	08016a6f 	.word	0x08016a6f
 8012b08:	08016ae0 	.word	0x08016ae0

08012b0c <__hi0bits>:
 8012b0c:	0c03      	lsrs	r3, r0, #16
 8012b0e:	041b      	lsls	r3, r3, #16
 8012b10:	b9d3      	cbnz	r3, 8012b48 <__hi0bits+0x3c>
 8012b12:	0400      	lsls	r0, r0, #16
 8012b14:	2310      	movs	r3, #16
 8012b16:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012b1a:	bf04      	itt	eq
 8012b1c:	0200      	lsleq	r0, r0, #8
 8012b1e:	3308      	addeq	r3, #8
 8012b20:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012b24:	bf04      	itt	eq
 8012b26:	0100      	lsleq	r0, r0, #4
 8012b28:	3304      	addeq	r3, #4
 8012b2a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012b2e:	bf04      	itt	eq
 8012b30:	0080      	lsleq	r0, r0, #2
 8012b32:	3302      	addeq	r3, #2
 8012b34:	2800      	cmp	r0, #0
 8012b36:	db05      	blt.n	8012b44 <__hi0bits+0x38>
 8012b38:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012b3c:	f103 0301 	add.w	r3, r3, #1
 8012b40:	bf08      	it	eq
 8012b42:	2320      	moveq	r3, #32
 8012b44:	4618      	mov	r0, r3
 8012b46:	4770      	bx	lr
 8012b48:	2300      	movs	r3, #0
 8012b4a:	e7e4      	b.n	8012b16 <__hi0bits+0xa>

08012b4c <__lo0bits>:
 8012b4c:	6803      	ldr	r3, [r0, #0]
 8012b4e:	f013 0207 	ands.w	r2, r3, #7
 8012b52:	d00c      	beq.n	8012b6e <__lo0bits+0x22>
 8012b54:	07d9      	lsls	r1, r3, #31
 8012b56:	d422      	bmi.n	8012b9e <__lo0bits+0x52>
 8012b58:	079a      	lsls	r2, r3, #30
 8012b5a:	bf49      	itett	mi
 8012b5c:	085b      	lsrmi	r3, r3, #1
 8012b5e:	089b      	lsrpl	r3, r3, #2
 8012b60:	6003      	strmi	r3, [r0, #0]
 8012b62:	2201      	movmi	r2, #1
 8012b64:	bf5c      	itt	pl
 8012b66:	6003      	strpl	r3, [r0, #0]
 8012b68:	2202      	movpl	r2, #2
 8012b6a:	4610      	mov	r0, r2
 8012b6c:	4770      	bx	lr
 8012b6e:	b299      	uxth	r1, r3
 8012b70:	b909      	cbnz	r1, 8012b76 <__lo0bits+0x2a>
 8012b72:	0c1b      	lsrs	r3, r3, #16
 8012b74:	2210      	movs	r2, #16
 8012b76:	b2d9      	uxtb	r1, r3
 8012b78:	b909      	cbnz	r1, 8012b7e <__lo0bits+0x32>
 8012b7a:	3208      	adds	r2, #8
 8012b7c:	0a1b      	lsrs	r3, r3, #8
 8012b7e:	0719      	lsls	r1, r3, #28
 8012b80:	bf04      	itt	eq
 8012b82:	091b      	lsreq	r3, r3, #4
 8012b84:	3204      	addeq	r2, #4
 8012b86:	0799      	lsls	r1, r3, #30
 8012b88:	bf04      	itt	eq
 8012b8a:	089b      	lsreq	r3, r3, #2
 8012b8c:	3202      	addeq	r2, #2
 8012b8e:	07d9      	lsls	r1, r3, #31
 8012b90:	d403      	bmi.n	8012b9a <__lo0bits+0x4e>
 8012b92:	085b      	lsrs	r3, r3, #1
 8012b94:	f102 0201 	add.w	r2, r2, #1
 8012b98:	d003      	beq.n	8012ba2 <__lo0bits+0x56>
 8012b9a:	6003      	str	r3, [r0, #0]
 8012b9c:	e7e5      	b.n	8012b6a <__lo0bits+0x1e>
 8012b9e:	2200      	movs	r2, #0
 8012ba0:	e7e3      	b.n	8012b6a <__lo0bits+0x1e>
 8012ba2:	2220      	movs	r2, #32
 8012ba4:	e7e1      	b.n	8012b6a <__lo0bits+0x1e>
	...

08012ba8 <__i2b>:
 8012ba8:	b510      	push	{r4, lr}
 8012baa:	460c      	mov	r4, r1
 8012bac:	2101      	movs	r1, #1
 8012bae:	f7ff febb 	bl	8012928 <_Balloc>
 8012bb2:	4602      	mov	r2, r0
 8012bb4:	b928      	cbnz	r0, 8012bc2 <__i2b+0x1a>
 8012bb6:	4b05      	ldr	r3, [pc, #20]	; (8012bcc <__i2b+0x24>)
 8012bb8:	4805      	ldr	r0, [pc, #20]	; (8012bd0 <__i2b+0x28>)
 8012bba:	f240 1145 	movw	r1, #325	; 0x145
 8012bbe:	f7ff fa2b 	bl	8012018 <__assert_func>
 8012bc2:	2301      	movs	r3, #1
 8012bc4:	6144      	str	r4, [r0, #20]
 8012bc6:	6103      	str	r3, [r0, #16]
 8012bc8:	bd10      	pop	{r4, pc}
 8012bca:	bf00      	nop
 8012bcc:	08016a6f 	.word	0x08016a6f
 8012bd0:	08016ae0 	.word	0x08016ae0

08012bd4 <__multiply>:
 8012bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bd8:	4691      	mov	r9, r2
 8012bda:	690a      	ldr	r2, [r1, #16]
 8012bdc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012be0:	429a      	cmp	r2, r3
 8012be2:	bfb8      	it	lt
 8012be4:	460b      	movlt	r3, r1
 8012be6:	460c      	mov	r4, r1
 8012be8:	bfbc      	itt	lt
 8012bea:	464c      	movlt	r4, r9
 8012bec:	4699      	movlt	r9, r3
 8012bee:	6927      	ldr	r7, [r4, #16]
 8012bf0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012bf4:	68a3      	ldr	r3, [r4, #8]
 8012bf6:	6861      	ldr	r1, [r4, #4]
 8012bf8:	eb07 060a 	add.w	r6, r7, sl
 8012bfc:	42b3      	cmp	r3, r6
 8012bfe:	b085      	sub	sp, #20
 8012c00:	bfb8      	it	lt
 8012c02:	3101      	addlt	r1, #1
 8012c04:	f7ff fe90 	bl	8012928 <_Balloc>
 8012c08:	b930      	cbnz	r0, 8012c18 <__multiply+0x44>
 8012c0a:	4602      	mov	r2, r0
 8012c0c:	4b44      	ldr	r3, [pc, #272]	; (8012d20 <__multiply+0x14c>)
 8012c0e:	4845      	ldr	r0, [pc, #276]	; (8012d24 <__multiply+0x150>)
 8012c10:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8012c14:	f7ff fa00 	bl	8012018 <__assert_func>
 8012c18:	f100 0514 	add.w	r5, r0, #20
 8012c1c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012c20:	462b      	mov	r3, r5
 8012c22:	2200      	movs	r2, #0
 8012c24:	4543      	cmp	r3, r8
 8012c26:	d321      	bcc.n	8012c6c <__multiply+0x98>
 8012c28:	f104 0314 	add.w	r3, r4, #20
 8012c2c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012c30:	f109 0314 	add.w	r3, r9, #20
 8012c34:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012c38:	9202      	str	r2, [sp, #8]
 8012c3a:	1b3a      	subs	r2, r7, r4
 8012c3c:	3a15      	subs	r2, #21
 8012c3e:	f022 0203 	bic.w	r2, r2, #3
 8012c42:	3204      	adds	r2, #4
 8012c44:	f104 0115 	add.w	r1, r4, #21
 8012c48:	428f      	cmp	r7, r1
 8012c4a:	bf38      	it	cc
 8012c4c:	2204      	movcc	r2, #4
 8012c4e:	9201      	str	r2, [sp, #4]
 8012c50:	9a02      	ldr	r2, [sp, #8]
 8012c52:	9303      	str	r3, [sp, #12]
 8012c54:	429a      	cmp	r2, r3
 8012c56:	d80c      	bhi.n	8012c72 <__multiply+0x9e>
 8012c58:	2e00      	cmp	r6, #0
 8012c5a:	dd03      	ble.n	8012c64 <__multiply+0x90>
 8012c5c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d05b      	beq.n	8012d1c <__multiply+0x148>
 8012c64:	6106      	str	r6, [r0, #16]
 8012c66:	b005      	add	sp, #20
 8012c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c6c:	f843 2b04 	str.w	r2, [r3], #4
 8012c70:	e7d8      	b.n	8012c24 <__multiply+0x50>
 8012c72:	f8b3 a000 	ldrh.w	sl, [r3]
 8012c76:	f1ba 0f00 	cmp.w	sl, #0
 8012c7a:	d024      	beq.n	8012cc6 <__multiply+0xf2>
 8012c7c:	f104 0e14 	add.w	lr, r4, #20
 8012c80:	46a9      	mov	r9, r5
 8012c82:	f04f 0c00 	mov.w	ip, #0
 8012c86:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012c8a:	f8d9 1000 	ldr.w	r1, [r9]
 8012c8e:	fa1f fb82 	uxth.w	fp, r2
 8012c92:	b289      	uxth	r1, r1
 8012c94:	fb0a 110b 	mla	r1, sl, fp, r1
 8012c98:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012c9c:	f8d9 2000 	ldr.w	r2, [r9]
 8012ca0:	4461      	add	r1, ip
 8012ca2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012ca6:	fb0a c20b 	mla	r2, sl, fp, ip
 8012caa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012cae:	b289      	uxth	r1, r1
 8012cb0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012cb4:	4577      	cmp	r7, lr
 8012cb6:	f849 1b04 	str.w	r1, [r9], #4
 8012cba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012cbe:	d8e2      	bhi.n	8012c86 <__multiply+0xb2>
 8012cc0:	9a01      	ldr	r2, [sp, #4]
 8012cc2:	f845 c002 	str.w	ip, [r5, r2]
 8012cc6:	9a03      	ldr	r2, [sp, #12]
 8012cc8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012ccc:	3304      	adds	r3, #4
 8012cce:	f1b9 0f00 	cmp.w	r9, #0
 8012cd2:	d021      	beq.n	8012d18 <__multiply+0x144>
 8012cd4:	6829      	ldr	r1, [r5, #0]
 8012cd6:	f104 0c14 	add.w	ip, r4, #20
 8012cda:	46ae      	mov	lr, r5
 8012cdc:	f04f 0a00 	mov.w	sl, #0
 8012ce0:	f8bc b000 	ldrh.w	fp, [ip]
 8012ce4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012ce8:	fb09 220b 	mla	r2, r9, fp, r2
 8012cec:	4452      	add	r2, sl
 8012cee:	b289      	uxth	r1, r1
 8012cf0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012cf4:	f84e 1b04 	str.w	r1, [lr], #4
 8012cf8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8012cfc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012d00:	f8be 1000 	ldrh.w	r1, [lr]
 8012d04:	fb09 110a 	mla	r1, r9, sl, r1
 8012d08:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8012d0c:	4567      	cmp	r7, ip
 8012d0e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012d12:	d8e5      	bhi.n	8012ce0 <__multiply+0x10c>
 8012d14:	9a01      	ldr	r2, [sp, #4]
 8012d16:	50a9      	str	r1, [r5, r2]
 8012d18:	3504      	adds	r5, #4
 8012d1a:	e799      	b.n	8012c50 <__multiply+0x7c>
 8012d1c:	3e01      	subs	r6, #1
 8012d1e:	e79b      	b.n	8012c58 <__multiply+0x84>
 8012d20:	08016a6f 	.word	0x08016a6f
 8012d24:	08016ae0 	.word	0x08016ae0

08012d28 <__pow5mult>:
 8012d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d2c:	4615      	mov	r5, r2
 8012d2e:	f012 0203 	ands.w	r2, r2, #3
 8012d32:	4606      	mov	r6, r0
 8012d34:	460f      	mov	r7, r1
 8012d36:	d007      	beq.n	8012d48 <__pow5mult+0x20>
 8012d38:	4c25      	ldr	r4, [pc, #148]	; (8012dd0 <__pow5mult+0xa8>)
 8012d3a:	3a01      	subs	r2, #1
 8012d3c:	2300      	movs	r3, #0
 8012d3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012d42:	f7ff fe53 	bl	80129ec <__multadd>
 8012d46:	4607      	mov	r7, r0
 8012d48:	10ad      	asrs	r5, r5, #2
 8012d4a:	d03d      	beq.n	8012dc8 <__pow5mult+0xa0>
 8012d4c:	69f4      	ldr	r4, [r6, #28]
 8012d4e:	b97c      	cbnz	r4, 8012d70 <__pow5mult+0x48>
 8012d50:	2010      	movs	r0, #16
 8012d52:	f7ff fd23 	bl	801279c <malloc>
 8012d56:	4602      	mov	r2, r0
 8012d58:	61f0      	str	r0, [r6, #28]
 8012d5a:	b928      	cbnz	r0, 8012d68 <__pow5mult+0x40>
 8012d5c:	4b1d      	ldr	r3, [pc, #116]	; (8012dd4 <__pow5mult+0xac>)
 8012d5e:	481e      	ldr	r0, [pc, #120]	; (8012dd8 <__pow5mult+0xb0>)
 8012d60:	f240 11b3 	movw	r1, #435	; 0x1b3
 8012d64:	f7ff f958 	bl	8012018 <__assert_func>
 8012d68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012d6c:	6004      	str	r4, [r0, #0]
 8012d6e:	60c4      	str	r4, [r0, #12]
 8012d70:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8012d74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012d78:	b94c      	cbnz	r4, 8012d8e <__pow5mult+0x66>
 8012d7a:	f240 2171 	movw	r1, #625	; 0x271
 8012d7e:	4630      	mov	r0, r6
 8012d80:	f7ff ff12 	bl	8012ba8 <__i2b>
 8012d84:	2300      	movs	r3, #0
 8012d86:	f8c8 0008 	str.w	r0, [r8, #8]
 8012d8a:	4604      	mov	r4, r0
 8012d8c:	6003      	str	r3, [r0, #0]
 8012d8e:	f04f 0900 	mov.w	r9, #0
 8012d92:	07eb      	lsls	r3, r5, #31
 8012d94:	d50a      	bpl.n	8012dac <__pow5mult+0x84>
 8012d96:	4639      	mov	r1, r7
 8012d98:	4622      	mov	r2, r4
 8012d9a:	4630      	mov	r0, r6
 8012d9c:	f7ff ff1a 	bl	8012bd4 <__multiply>
 8012da0:	4639      	mov	r1, r7
 8012da2:	4680      	mov	r8, r0
 8012da4:	4630      	mov	r0, r6
 8012da6:	f7ff fdff 	bl	80129a8 <_Bfree>
 8012daa:	4647      	mov	r7, r8
 8012dac:	106d      	asrs	r5, r5, #1
 8012dae:	d00b      	beq.n	8012dc8 <__pow5mult+0xa0>
 8012db0:	6820      	ldr	r0, [r4, #0]
 8012db2:	b938      	cbnz	r0, 8012dc4 <__pow5mult+0x9c>
 8012db4:	4622      	mov	r2, r4
 8012db6:	4621      	mov	r1, r4
 8012db8:	4630      	mov	r0, r6
 8012dba:	f7ff ff0b 	bl	8012bd4 <__multiply>
 8012dbe:	6020      	str	r0, [r4, #0]
 8012dc0:	f8c0 9000 	str.w	r9, [r0]
 8012dc4:	4604      	mov	r4, r0
 8012dc6:	e7e4      	b.n	8012d92 <__pow5mult+0x6a>
 8012dc8:	4638      	mov	r0, r7
 8012dca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012dce:	bf00      	nop
 8012dd0:	08016c30 	.word	0x08016c30
 8012dd4:	080167fe 	.word	0x080167fe
 8012dd8:	08016ae0 	.word	0x08016ae0

08012ddc <__lshift>:
 8012ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012de0:	460c      	mov	r4, r1
 8012de2:	6849      	ldr	r1, [r1, #4]
 8012de4:	6923      	ldr	r3, [r4, #16]
 8012de6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012dea:	68a3      	ldr	r3, [r4, #8]
 8012dec:	4607      	mov	r7, r0
 8012dee:	4691      	mov	r9, r2
 8012df0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012df4:	f108 0601 	add.w	r6, r8, #1
 8012df8:	42b3      	cmp	r3, r6
 8012dfa:	db0b      	blt.n	8012e14 <__lshift+0x38>
 8012dfc:	4638      	mov	r0, r7
 8012dfe:	f7ff fd93 	bl	8012928 <_Balloc>
 8012e02:	4605      	mov	r5, r0
 8012e04:	b948      	cbnz	r0, 8012e1a <__lshift+0x3e>
 8012e06:	4602      	mov	r2, r0
 8012e08:	4b28      	ldr	r3, [pc, #160]	; (8012eac <__lshift+0xd0>)
 8012e0a:	4829      	ldr	r0, [pc, #164]	; (8012eb0 <__lshift+0xd4>)
 8012e0c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8012e10:	f7ff f902 	bl	8012018 <__assert_func>
 8012e14:	3101      	adds	r1, #1
 8012e16:	005b      	lsls	r3, r3, #1
 8012e18:	e7ee      	b.n	8012df8 <__lshift+0x1c>
 8012e1a:	2300      	movs	r3, #0
 8012e1c:	f100 0114 	add.w	r1, r0, #20
 8012e20:	f100 0210 	add.w	r2, r0, #16
 8012e24:	4618      	mov	r0, r3
 8012e26:	4553      	cmp	r3, sl
 8012e28:	db33      	blt.n	8012e92 <__lshift+0xb6>
 8012e2a:	6920      	ldr	r0, [r4, #16]
 8012e2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012e30:	f104 0314 	add.w	r3, r4, #20
 8012e34:	f019 091f 	ands.w	r9, r9, #31
 8012e38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012e3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012e40:	d02b      	beq.n	8012e9a <__lshift+0xbe>
 8012e42:	f1c9 0e20 	rsb	lr, r9, #32
 8012e46:	468a      	mov	sl, r1
 8012e48:	2200      	movs	r2, #0
 8012e4a:	6818      	ldr	r0, [r3, #0]
 8012e4c:	fa00 f009 	lsl.w	r0, r0, r9
 8012e50:	4310      	orrs	r0, r2
 8012e52:	f84a 0b04 	str.w	r0, [sl], #4
 8012e56:	f853 2b04 	ldr.w	r2, [r3], #4
 8012e5a:	459c      	cmp	ip, r3
 8012e5c:	fa22 f20e 	lsr.w	r2, r2, lr
 8012e60:	d8f3      	bhi.n	8012e4a <__lshift+0x6e>
 8012e62:	ebac 0304 	sub.w	r3, ip, r4
 8012e66:	3b15      	subs	r3, #21
 8012e68:	f023 0303 	bic.w	r3, r3, #3
 8012e6c:	3304      	adds	r3, #4
 8012e6e:	f104 0015 	add.w	r0, r4, #21
 8012e72:	4584      	cmp	ip, r0
 8012e74:	bf38      	it	cc
 8012e76:	2304      	movcc	r3, #4
 8012e78:	50ca      	str	r2, [r1, r3]
 8012e7a:	b10a      	cbz	r2, 8012e80 <__lshift+0xa4>
 8012e7c:	f108 0602 	add.w	r6, r8, #2
 8012e80:	3e01      	subs	r6, #1
 8012e82:	4638      	mov	r0, r7
 8012e84:	612e      	str	r6, [r5, #16]
 8012e86:	4621      	mov	r1, r4
 8012e88:	f7ff fd8e 	bl	80129a8 <_Bfree>
 8012e8c:	4628      	mov	r0, r5
 8012e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e92:	f842 0f04 	str.w	r0, [r2, #4]!
 8012e96:	3301      	adds	r3, #1
 8012e98:	e7c5      	b.n	8012e26 <__lshift+0x4a>
 8012e9a:	3904      	subs	r1, #4
 8012e9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012ea0:	f841 2f04 	str.w	r2, [r1, #4]!
 8012ea4:	459c      	cmp	ip, r3
 8012ea6:	d8f9      	bhi.n	8012e9c <__lshift+0xc0>
 8012ea8:	e7ea      	b.n	8012e80 <__lshift+0xa4>
 8012eaa:	bf00      	nop
 8012eac:	08016a6f 	.word	0x08016a6f
 8012eb0:	08016ae0 	.word	0x08016ae0

08012eb4 <__mcmp>:
 8012eb4:	b530      	push	{r4, r5, lr}
 8012eb6:	6902      	ldr	r2, [r0, #16]
 8012eb8:	690c      	ldr	r4, [r1, #16]
 8012eba:	1b12      	subs	r2, r2, r4
 8012ebc:	d10e      	bne.n	8012edc <__mcmp+0x28>
 8012ebe:	f100 0314 	add.w	r3, r0, #20
 8012ec2:	3114      	adds	r1, #20
 8012ec4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012ec8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012ecc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012ed0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012ed4:	42a5      	cmp	r5, r4
 8012ed6:	d003      	beq.n	8012ee0 <__mcmp+0x2c>
 8012ed8:	d305      	bcc.n	8012ee6 <__mcmp+0x32>
 8012eda:	2201      	movs	r2, #1
 8012edc:	4610      	mov	r0, r2
 8012ede:	bd30      	pop	{r4, r5, pc}
 8012ee0:	4283      	cmp	r3, r0
 8012ee2:	d3f3      	bcc.n	8012ecc <__mcmp+0x18>
 8012ee4:	e7fa      	b.n	8012edc <__mcmp+0x28>
 8012ee6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012eea:	e7f7      	b.n	8012edc <__mcmp+0x28>

08012eec <__mdiff>:
 8012eec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ef0:	460c      	mov	r4, r1
 8012ef2:	4606      	mov	r6, r0
 8012ef4:	4611      	mov	r1, r2
 8012ef6:	4620      	mov	r0, r4
 8012ef8:	4690      	mov	r8, r2
 8012efa:	f7ff ffdb 	bl	8012eb4 <__mcmp>
 8012efe:	1e05      	subs	r5, r0, #0
 8012f00:	d110      	bne.n	8012f24 <__mdiff+0x38>
 8012f02:	4629      	mov	r1, r5
 8012f04:	4630      	mov	r0, r6
 8012f06:	f7ff fd0f 	bl	8012928 <_Balloc>
 8012f0a:	b930      	cbnz	r0, 8012f1a <__mdiff+0x2e>
 8012f0c:	4b3a      	ldr	r3, [pc, #232]	; (8012ff8 <__mdiff+0x10c>)
 8012f0e:	4602      	mov	r2, r0
 8012f10:	f240 2137 	movw	r1, #567	; 0x237
 8012f14:	4839      	ldr	r0, [pc, #228]	; (8012ffc <__mdiff+0x110>)
 8012f16:	f7ff f87f 	bl	8012018 <__assert_func>
 8012f1a:	2301      	movs	r3, #1
 8012f1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012f20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f24:	bfa4      	itt	ge
 8012f26:	4643      	movge	r3, r8
 8012f28:	46a0      	movge	r8, r4
 8012f2a:	4630      	mov	r0, r6
 8012f2c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012f30:	bfa6      	itte	ge
 8012f32:	461c      	movge	r4, r3
 8012f34:	2500      	movge	r5, #0
 8012f36:	2501      	movlt	r5, #1
 8012f38:	f7ff fcf6 	bl	8012928 <_Balloc>
 8012f3c:	b920      	cbnz	r0, 8012f48 <__mdiff+0x5c>
 8012f3e:	4b2e      	ldr	r3, [pc, #184]	; (8012ff8 <__mdiff+0x10c>)
 8012f40:	4602      	mov	r2, r0
 8012f42:	f240 2145 	movw	r1, #581	; 0x245
 8012f46:	e7e5      	b.n	8012f14 <__mdiff+0x28>
 8012f48:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012f4c:	6926      	ldr	r6, [r4, #16]
 8012f4e:	60c5      	str	r5, [r0, #12]
 8012f50:	f104 0914 	add.w	r9, r4, #20
 8012f54:	f108 0514 	add.w	r5, r8, #20
 8012f58:	f100 0e14 	add.w	lr, r0, #20
 8012f5c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012f60:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012f64:	f108 0210 	add.w	r2, r8, #16
 8012f68:	46f2      	mov	sl, lr
 8012f6a:	2100      	movs	r1, #0
 8012f6c:	f859 3b04 	ldr.w	r3, [r9], #4
 8012f70:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012f74:	fa11 f88b 	uxtah	r8, r1, fp
 8012f78:	b299      	uxth	r1, r3
 8012f7a:	0c1b      	lsrs	r3, r3, #16
 8012f7c:	eba8 0801 	sub.w	r8, r8, r1
 8012f80:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012f84:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012f88:	fa1f f888 	uxth.w	r8, r8
 8012f8c:	1419      	asrs	r1, r3, #16
 8012f8e:	454e      	cmp	r6, r9
 8012f90:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012f94:	f84a 3b04 	str.w	r3, [sl], #4
 8012f98:	d8e8      	bhi.n	8012f6c <__mdiff+0x80>
 8012f9a:	1b33      	subs	r3, r6, r4
 8012f9c:	3b15      	subs	r3, #21
 8012f9e:	f023 0303 	bic.w	r3, r3, #3
 8012fa2:	3304      	adds	r3, #4
 8012fa4:	3415      	adds	r4, #21
 8012fa6:	42a6      	cmp	r6, r4
 8012fa8:	bf38      	it	cc
 8012faa:	2304      	movcc	r3, #4
 8012fac:	441d      	add	r5, r3
 8012fae:	4473      	add	r3, lr
 8012fb0:	469e      	mov	lr, r3
 8012fb2:	462e      	mov	r6, r5
 8012fb4:	4566      	cmp	r6, ip
 8012fb6:	d30e      	bcc.n	8012fd6 <__mdiff+0xea>
 8012fb8:	f10c 0203 	add.w	r2, ip, #3
 8012fbc:	1b52      	subs	r2, r2, r5
 8012fbe:	f022 0203 	bic.w	r2, r2, #3
 8012fc2:	3d03      	subs	r5, #3
 8012fc4:	45ac      	cmp	ip, r5
 8012fc6:	bf38      	it	cc
 8012fc8:	2200      	movcc	r2, #0
 8012fca:	4413      	add	r3, r2
 8012fcc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8012fd0:	b17a      	cbz	r2, 8012ff2 <__mdiff+0x106>
 8012fd2:	6107      	str	r7, [r0, #16]
 8012fd4:	e7a4      	b.n	8012f20 <__mdiff+0x34>
 8012fd6:	f856 8b04 	ldr.w	r8, [r6], #4
 8012fda:	fa11 f288 	uxtah	r2, r1, r8
 8012fde:	1414      	asrs	r4, r2, #16
 8012fe0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012fe4:	b292      	uxth	r2, r2
 8012fe6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012fea:	f84e 2b04 	str.w	r2, [lr], #4
 8012fee:	1421      	asrs	r1, r4, #16
 8012ff0:	e7e0      	b.n	8012fb4 <__mdiff+0xc8>
 8012ff2:	3f01      	subs	r7, #1
 8012ff4:	e7ea      	b.n	8012fcc <__mdiff+0xe0>
 8012ff6:	bf00      	nop
 8012ff8:	08016a6f 	.word	0x08016a6f
 8012ffc:	08016ae0 	.word	0x08016ae0

08013000 <__ulp>:
 8013000:	b082      	sub	sp, #8
 8013002:	ed8d 0b00 	vstr	d0, [sp]
 8013006:	9a01      	ldr	r2, [sp, #4]
 8013008:	4b0f      	ldr	r3, [pc, #60]	; (8013048 <__ulp+0x48>)
 801300a:	4013      	ands	r3, r2
 801300c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8013010:	2b00      	cmp	r3, #0
 8013012:	dc08      	bgt.n	8013026 <__ulp+0x26>
 8013014:	425b      	negs	r3, r3
 8013016:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801301a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801301e:	da04      	bge.n	801302a <__ulp+0x2a>
 8013020:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8013024:	4113      	asrs	r3, r2
 8013026:	2200      	movs	r2, #0
 8013028:	e008      	b.n	801303c <__ulp+0x3c>
 801302a:	f1a2 0314 	sub.w	r3, r2, #20
 801302e:	2b1e      	cmp	r3, #30
 8013030:	bfda      	itte	le
 8013032:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8013036:	40da      	lsrle	r2, r3
 8013038:	2201      	movgt	r2, #1
 801303a:	2300      	movs	r3, #0
 801303c:	4619      	mov	r1, r3
 801303e:	4610      	mov	r0, r2
 8013040:	ec41 0b10 	vmov	d0, r0, r1
 8013044:	b002      	add	sp, #8
 8013046:	4770      	bx	lr
 8013048:	7ff00000 	.word	0x7ff00000

0801304c <__b2d>:
 801304c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013050:	6906      	ldr	r6, [r0, #16]
 8013052:	f100 0814 	add.w	r8, r0, #20
 8013056:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801305a:	1f37      	subs	r7, r6, #4
 801305c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013060:	4610      	mov	r0, r2
 8013062:	f7ff fd53 	bl	8012b0c <__hi0bits>
 8013066:	f1c0 0320 	rsb	r3, r0, #32
 801306a:	280a      	cmp	r0, #10
 801306c:	600b      	str	r3, [r1, #0]
 801306e:	491b      	ldr	r1, [pc, #108]	; (80130dc <__b2d+0x90>)
 8013070:	dc15      	bgt.n	801309e <__b2d+0x52>
 8013072:	f1c0 0c0b 	rsb	ip, r0, #11
 8013076:	fa22 f30c 	lsr.w	r3, r2, ip
 801307a:	45b8      	cmp	r8, r7
 801307c:	ea43 0501 	orr.w	r5, r3, r1
 8013080:	bf34      	ite	cc
 8013082:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013086:	2300      	movcs	r3, #0
 8013088:	3015      	adds	r0, #21
 801308a:	fa02 f000 	lsl.w	r0, r2, r0
 801308e:	fa23 f30c 	lsr.w	r3, r3, ip
 8013092:	4303      	orrs	r3, r0
 8013094:	461c      	mov	r4, r3
 8013096:	ec45 4b10 	vmov	d0, r4, r5
 801309a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801309e:	45b8      	cmp	r8, r7
 80130a0:	bf3a      	itte	cc
 80130a2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80130a6:	f1a6 0708 	subcc.w	r7, r6, #8
 80130aa:	2300      	movcs	r3, #0
 80130ac:	380b      	subs	r0, #11
 80130ae:	d012      	beq.n	80130d6 <__b2d+0x8a>
 80130b0:	f1c0 0120 	rsb	r1, r0, #32
 80130b4:	fa23 f401 	lsr.w	r4, r3, r1
 80130b8:	4082      	lsls	r2, r0
 80130ba:	4322      	orrs	r2, r4
 80130bc:	4547      	cmp	r7, r8
 80130be:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80130c2:	bf8c      	ite	hi
 80130c4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80130c8:	2200      	movls	r2, #0
 80130ca:	4083      	lsls	r3, r0
 80130cc:	40ca      	lsrs	r2, r1
 80130ce:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80130d2:	4313      	orrs	r3, r2
 80130d4:	e7de      	b.n	8013094 <__b2d+0x48>
 80130d6:	ea42 0501 	orr.w	r5, r2, r1
 80130da:	e7db      	b.n	8013094 <__b2d+0x48>
 80130dc:	3ff00000 	.word	0x3ff00000

080130e0 <__d2b>:
 80130e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80130e4:	460f      	mov	r7, r1
 80130e6:	2101      	movs	r1, #1
 80130e8:	ec59 8b10 	vmov	r8, r9, d0
 80130ec:	4616      	mov	r6, r2
 80130ee:	f7ff fc1b 	bl	8012928 <_Balloc>
 80130f2:	4604      	mov	r4, r0
 80130f4:	b930      	cbnz	r0, 8013104 <__d2b+0x24>
 80130f6:	4602      	mov	r2, r0
 80130f8:	4b24      	ldr	r3, [pc, #144]	; (801318c <__d2b+0xac>)
 80130fa:	4825      	ldr	r0, [pc, #148]	; (8013190 <__d2b+0xb0>)
 80130fc:	f240 310f 	movw	r1, #783	; 0x30f
 8013100:	f7fe ff8a 	bl	8012018 <__assert_func>
 8013104:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013108:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801310c:	bb2d      	cbnz	r5, 801315a <__d2b+0x7a>
 801310e:	9301      	str	r3, [sp, #4]
 8013110:	f1b8 0300 	subs.w	r3, r8, #0
 8013114:	d026      	beq.n	8013164 <__d2b+0x84>
 8013116:	4668      	mov	r0, sp
 8013118:	9300      	str	r3, [sp, #0]
 801311a:	f7ff fd17 	bl	8012b4c <__lo0bits>
 801311e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013122:	b1e8      	cbz	r0, 8013160 <__d2b+0x80>
 8013124:	f1c0 0320 	rsb	r3, r0, #32
 8013128:	fa02 f303 	lsl.w	r3, r2, r3
 801312c:	430b      	orrs	r3, r1
 801312e:	40c2      	lsrs	r2, r0
 8013130:	6163      	str	r3, [r4, #20]
 8013132:	9201      	str	r2, [sp, #4]
 8013134:	9b01      	ldr	r3, [sp, #4]
 8013136:	61a3      	str	r3, [r4, #24]
 8013138:	2b00      	cmp	r3, #0
 801313a:	bf14      	ite	ne
 801313c:	2202      	movne	r2, #2
 801313e:	2201      	moveq	r2, #1
 8013140:	6122      	str	r2, [r4, #16]
 8013142:	b1bd      	cbz	r5, 8013174 <__d2b+0x94>
 8013144:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013148:	4405      	add	r5, r0
 801314a:	603d      	str	r5, [r7, #0]
 801314c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013150:	6030      	str	r0, [r6, #0]
 8013152:	4620      	mov	r0, r4
 8013154:	b003      	add	sp, #12
 8013156:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801315a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801315e:	e7d6      	b.n	801310e <__d2b+0x2e>
 8013160:	6161      	str	r1, [r4, #20]
 8013162:	e7e7      	b.n	8013134 <__d2b+0x54>
 8013164:	a801      	add	r0, sp, #4
 8013166:	f7ff fcf1 	bl	8012b4c <__lo0bits>
 801316a:	9b01      	ldr	r3, [sp, #4]
 801316c:	6163      	str	r3, [r4, #20]
 801316e:	3020      	adds	r0, #32
 8013170:	2201      	movs	r2, #1
 8013172:	e7e5      	b.n	8013140 <__d2b+0x60>
 8013174:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013178:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801317c:	6038      	str	r0, [r7, #0]
 801317e:	6918      	ldr	r0, [r3, #16]
 8013180:	f7ff fcc4 	bl	8012b0c <__hi0bits>
 8013184:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013188:	e7e2      	b.n	8013150 <__d2b+0x70>
 801318a:	bf00      	nop
 801318c:	08016a6f 	.word	0x08016a6f
 8013190:	08016ae0 	.word	0x08016ae0

08013194 <__ratio>:
 8013194:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013198:	4688      	mov	r8, r1
 801319a:	4669      	mov	r1, sp
 801319c:	4681      	mov	r9, r0
 801319e:	f7ff ff55 	bl	801304c <__b2d>
 80131a2:	a901      	add	r1, sp, #4
 80131a4:	4640      	mov	r0, r8
 80131a6:	ec55 4b10 	vmov	r4, r5, d0
 80131aa:	ee10 aa10 	vmov	sl, s0
 80131ae:	f7ff ff4d 	bl	801304c <__b2d>
 80131b2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80131b6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80131ba:	1ad2      	subs	r2, r2, r3
 80131bc:	e9dd 3100 	ldrd	r3, r1, [sp]
 80131c0:	1a5b      	subs	r3, r3, r1
 80131c2:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80131c6:	ec57 6b10 	vmov	r6, r7, d0
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	bfd6      	itet	le
 80131ce:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80131d2:	462a      	movgt	r2, r5
 80131d4:	463a      	movle	r2, r7
 80131d6:	46ab      	mov	fp, r5
 80131d8:	bfd6      	itet	le
 80131da:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 80131de:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80131e2:	ee00 3a90 	vmovle	s1, r3
 80131e6:	ec4b ab17 	vmov	d7, sl, fp
 80131ea:	ee87 0b00 	vdiv.f64	d0, d7, d0
 80131ee:	b003      	add	sp, #12
 80131f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080131f4 <__copybits>:
 80131f4:	3901      	subs	r1, #1
 80131f6:	b570      	push	{r4, r5, r6, lr}
 80131f8:	1149      	asrs	r1, r1, #5
 80131fa:	6914      	ldr	r4, [r2, #16]
 80131fc:	3101      	adds	r1, #1
 80131fe:	f102 0314 	add.w	r3, r2, #20
 8013202:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013206:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801320a:	1f05      	subs	r5, r0, #4
 801320c:	42a3      	cmp	r3, r4
 801320e:	d30c      	bcc.n	801322a <__copybits+0x36>
 8013210:	1aa3      	subs	r3, r4, r2
 8013212:	3b11      	subs	r3, #17
 8013214:	f023 0303 	bic.w	r3, r3, #3
 8013218:	3211      	adds	r2, #17
 801321a:	42a2      	cmp	r2, r4
 801321c:	bf88      	it	hi
 801321e:	2300      	movhi	r3, #0
 8013220:	4418      	add	r0, r3
 8013222:	2300      	movs	r3, #0
 8013224:	4288      	cmp	r0, r1
 8013226:	d305      	bcc.n	8013234 <__copybits+0x40>
 8013228:	bd70      	pop	{r4, r5, r6, pc}
 801322a:	f853 6b04 	ldr.w	r6, [r3], #4
 801322e:	f845 6f04 	str.w	r6, [r5, #4]!
 8013232:	e7eb      	b.n	801320c <__copybits+0x18>
 8013234:	f840 3b04 	str.w	r3, [r0], #4
 8013238:	e7f4      	b.n	8013224 <__copybits+0x30>

0801323a <__any_on>:
 801323a:	f100 0214 	add.w	r2, r0, #20
 801323e:	6900      	ldr	r0, [r0, #16]
 8013240:	114b      	asrs	r3, r1, #5
 8013242:	4298      	cmp	r0, r3
 8013244:	b510      	push	{r4, lr}
 8013246:	db11      	blt.n	801326c <__any_on+0x32>
 8013248:	dd0a      	ble.n	8013260 <__any_on+0x26>
 801324a:	f011 011f 	ands.w	r1, r1, #31
 801324e:	d007      	beq.n	8013260 <__any_on+0x26>
 8013250:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013254:	fa24 f001 	lsr.w	r0, r4, r1
 8013258:	fa00 f101 	lsl.w	r1, r0, r1
 801325c:	428c      	cmp	r4, r1
 801325e:	d10b      	bne.n	8013278 <__any_on+0x3e>
 8013260:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013264:	4293      	cmp	r3, r2
 8013266:	d803      	bhi.n	8013270 <__any_on+0x36>
 8013268:	2000      	movs	r0, #0
 801326a:	bd10      	pop	{r4, pc}
 801326c:	4603      	mov	r3, r0
 801326e:	e7f7      	b.n	8013260 <__any_on+0x26>
 8013270:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013274:	2900      	cmp	r1, #0
 8013276:	d0f5      	beq.n	8013264 <__any_on+0x2a>
 8013278:	2001      	movs	r0, #1
 801327a:	e7f6      	b.n	801326a <__any_on+0x30>

0801327c <__ascii_wctomb>:
 801327c:	b149      	cbz	r1, 8013292 <__ascii_wctomb+0x16>
 801327e:	2aff      	cmp	r2, #255	; 0xff
 8013280:	bf85      	ittet	hi
 8013282:	238a      	movhi	r3, #138	; 0x8a
 8013284:	6003      	strhi	r3, [r0, #0]
 8013286:	700a      	strbls	r2, [r1, #0]
 8013288:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801328c:	bf98      	it	ls
 801328e:	2001      	movls	r0, #1
 8013290:	4770      	bx	lr
 8013292:	4608      	mov	r0, r1
 8013294:	4770      	bx	lr

08013296 <__sfputc_r>:
 8013296:	6893      	ldr	r3, [r2, #8]
 8013298:	3b01      	subs	r3, #1
 801329a:	2b00      	cmp	r3, #0
 801329c:	b410      	push	{r4}
 801329e:	6093      	str	r3, [r2, #8]
 80132a0:	da08      	bge.n	80132b4 <__sfputc_r+0x1e>
 80132a2:	6994      	ldr	r4, [r2, #24]
 80132a4:	42a3      	cmp	r3, r4
 80132a6:	db01      	blt.n	80132ac <__sfputc_r+0x16>
 80132a8:	290a      	cmp	r1, #10
 80132aa:	d103      	bne.n	80132b4 <__sfputc_r+0x1e>
 80132ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80132b0:	f000 bb84 	b.w	80139bc <__swbuf_r>
 80132b4:	6813      	ldr	r3, [r2, #0]
 80132b6:	1c58      	adds	r0, r3, #1
 80132b8:	6010      	str	r0, [r2, #0]
 80132ba:	7019      	strb	r1, [r3, #0]
 80132bc:	4608      	mov	r0, r1
 80132be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80132c2:	4770      	bx	lr

080132c4 <__sfputs_r>:
 80132c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132c6:	4606      	mov	r6, r0
 80132c8:	460f      	mov	r7, r1
 80132ca:	4614      	mov	r4, r2
 80132cc:	18d5      	adds	r5, r2, r3
 80132ce:	42ac      	cmp	r4, r5
 80132d0:	d101      	bne.n	80132d6 <__sfputs_r+0x12>
 80132d2:	2000      	movs	r0, #0
 80132d4:	e007      	b.n	80132e6 <__sfputs_r+0x22>
 80132d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80132da:	463a      	mov	r2, r7
 80132dc:	4630      	mov	r0, r6
 80132de:	f7ff ffda 	bl	8013296 <__sfputc_r>
 80132e2:	1c43      	adds	r3, r0, #1
 80132e4:	d1f3      	bne.n	80132ce <__sfputs_r+0xa>
 80132e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080132e8 <_vfiprintf_r>:
 80132e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132ec:	460d      	mov	r5, r1
 80132ee:	b09d      	sub	sp, #116	; 0x74
 80132f0:	4614      	mov	r4, r2
 80132f2:	4698      	mov	r8, r3
 80132f4:	4606      	mov	r6, r0
 80132f6:	b118      	cbz	r0, 8013300 <_vfiprintf_r+0x18>
 80132f8:	6a03      	ldr	r3, [r0, #32]
 80132fa:	b90b      	cbnz	r3, 8013300 <_vfiprintf_r+0x18>
 80132fc:	f7fe fcde 	bl	8011cbc <__sinit>
 8013300:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013302:	07d9      	lsls	r1, r3, #31
 8013304:	d405      	bmi.n	8013312 <_vfiprintf_r+0x2a>
 8013306:	89ab      	ldrh	r3, [r5, #12]
 8013308:	059a      	lsls	r2, r3, #22
 801330a:	d402      	bmi.n	8013312 <_vfiprintf_r+0x2a>
 801330c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801330e:	f7fe fe6a 	bl	8011fe6 <__retarget_lock_acquire_recursive>
 8013312:	89ab      	ldrh	r3, [r5, #12]
 8013314:	071b      	lsls	r3, r3, #28
 8013316:	d501      	bpl.n	801331c <_vfiprintf_r+0x34>
 8013318:	692b      	ldr	r3, [r5, #16]
 801331a:	b99b      	cbnz	r3, 8013344 <_vfiprintf_r+0x5c>
 801331c:	4629      	mov	r1, r5
 801331e:	4630      	mov	r0, r6
 8013320:	f000 fb8a 	bl	8013a38 <__swsetup_r>
 8013324:	b170      	cbz	r0, 8013344 <_vfiprintf_r+0x5c>
 8013326:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013328:	07dc      	lsls	r4, r3, #31
 801332a:	d504      	bpl.n	8013336 <_vfiprintf_r+0x4e>
 801332c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013330:	b01d      	add	sp, #116	; 0x74
 8013332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013336:	89ab      	ldrh	r3, [r5, #12]
 8013338:	0598      	lsls	r0, r3, #22
 801333a:	d4f7      	bmi.n	801332c <_vfiprintf_r+0x44>
 801333c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801333e:	f7fe fe53 	bl	8011fe8 <__retarget_lock_release_recursive>
 8013342:	e7f3      	b.n	801332c <_vfiprintf_r+0x44>
 8013344:	2300      	movs	r3, #0
 8013346:	9309      	str	r3, [sp, #36]	; 0x24
 8013348:	2320      	movs	r3, #32
 801334a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801334e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013352:	2330      	movs	r3, #48	; 0x30
 8013354:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8013508 <_vfiprintf_r+0x220>
 8013358:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801335c:	f04f 0901 	mov.w	r9, #1
 8013360:	4623      	mov	r3, r4
 8013362:	469a      	mov	sl, r3
 8013364:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013368:	b10a      	cbz	r2, 801336e <_vfiprintf_r+0x86>
 801336a:	2a25      	cmp	r2, #37	; 0x25
 801336c:	d1f9      	bne.n	8013362 <_vfiprintf_r+0x7a>
 801336e:	ebba 0b04 	subs.w	fp, sl, r4
 8013372:	d00b      	beq.n	801338c <_vfiprintf_r+0xa4>
 8013374:	465b      	mov	r3, fp
 8013376:	4622      	mov	r2, r4
 8013378:	4629      	mov	r1, r5
 801337a:	4630      	mov	r0, r6
 801337c:	f7ff ffa2 	bl	80132c4 <__sfputs_r>
 8013380:	3001      	adds	r0, #1
 8013382:	f000 80a9 	beq.w	80134d8 <_vfiprintf_r+0x1f0>
 8013386:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013388:	445a      	add	r2, fp
 801338a:	9209      	str	r2, [sp, #36]	; 0x24
 801338c:	f89a 3000 	ldrb.w	r3, [sl]
 8013390:	2b00      	cmp	r3, #0
 8013392:	f000 80a1 	beq.w	80134d8 <_vfiprintf_r+0x1f0>
 8013396:	2300      	movs	r3, #0
 8013398:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801339c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80133a0:	f10a 0a01 	add.w	sl, sl, #1
 80133a4:	9304      	str	r3, [sp, #16]
 80133a6:	9307      	str	r3, [sp, #28]
 80133a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80133ac:	931a      	str	r3, [sp, #104]	; 0x68
 80133ae:	4654      	mov	r4, sl
 80133b0:	2205      	movs	r2, #5
 80133b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80133b6:	4854      	ldr	r0, [pc, #336]	; (8013508 <_vfiprintf_r+0x220>)
 80133b8:	f7ec ff42 	bl	8000240 <memchr>
 80133bc:	9a04      	ldr	r2, [sp, #16]
 80133be:	b9d8      	cbnz	r0, 80133f8 <_vfiprintf_r+0x110>
 80133c0:	06d1      	lsls	r1, r2, #27
 80133c2:	bf44      	itt	mi
 80133c4:	2320      	movmi	r3, #32
 80133c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80133ca:	0713      	lsls	r3, r2, #28
 80133cc:	bf44      	itt	mi
 80133ce:	232b      	movmi	r3, #43	; 0x2b
 80133d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80133d4:	f89a 3000 	ldrb.w	r3, [sl]
 80133d8:	2b2a      	cmp	r3, #42	; 0x2a
 80133da:	d015      	beq.n	8013408 <_vfiprintf_r+0x120>
 80133dc:	9a07      	ldr	r2, [sp, #28]
 80133de:	4654      	mov	r4, sl
 80133e0:	2000      	movs	r0, #0
 80133e2:	f04f 0c0a 	mov.w	ip, #10
 80133e6:	4621      	mov	r1, r4
 80133e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80133ec:	3b30      	subs	r3, #48	; 0x30
 80133ee:	2b09      	cmp	r3, #9
 80133f0:	d94d      	bls.n	801348e <_vfiprintf_r+0x1a6>
 80133f2:	b1b0      	cbz	r0, 8013422 <_vfiprintf_r+0x13a>
 80133f4:	9207      	str	r2, [sp, #28]
 80133f6:	e014      	b.n	8013422 <_vfiprintf_r+0x13a>
 80133f8:	eba0 0308 	sub.w	r3, r0, r8
 80133fc:	fa09 f303 	lsl.w	r3, r9, r3
 8013400:	4313      	orrs	r3, r2
 8013402:	9304      	str	r3, [sp, #16]
 8013404:	46a2      	mov	sl, r4
 8013406:	e7d2      	b.n	80133ae <_vfiprintf_r+0xc6>
 8013408:	9b03      	ldr	r3, [sp, #12]
 801340a:	1d19      	adds	r1, r3, #4
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	9103      	str	r1, [sp, #12]
 8013410:	2b00      	cmp	r3, #0
 8013412:	bfbb      	ittet	lt
 8013414:	425b      	neglt	r3, r3
 8013416:	f042 0202 	orrlt.w	r2, r2, #2
 801341a:	9307      	strge	r3, [sp, #28]
 801341c:	9307      	strlt	r3, [sp, #28]
 801341e:	bfb8      	it	lt
 8013420:	9204      	strlt	r2, [sp, #16]
 8013422:	7823      	ldrb	r3, [r4, #0]
 8013424:	2b2e      	cmp	r3, #46	; 0x2e
 8013426:	d10c      	bne.n	8013442 <_vfiprintf_r+0x15a>
 8013428:	7863      	ldrb	r3, [r4, #1]
 801342a:	2b2a      	cmp	r3, #42	; 0x2a
 801342c:	d134      	bne.n	8013498 <_vfiprintf_r+0x1b0>
 801342e:	9b03      	ldr	r3, [sp, #12]
 8013430:	1d1a      	adds	r2, r3, #4
 8013432:	681b      	ldr	r3, [r3, #0]
 8013434:	9203      	str	r2, [sp, #12]
 8013436:	2b00      	cmp	r3, #0
 8013438:	bfb8      	it	lt
 801343a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801343e:	3402      	adds	r4, #2
 8013440:	9305      	str	r3, [sp, #20]
 8013442:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8013518 <_vfiprintf_r+0x230>
 8013446:	7821      	ldrb	r1, [r4, #0]
 8013448:	2203      	movs	r2, #3
 801344a:	4650      	mov	r0, sl
 801344c:	f7ec fef8 	bl	8000240 <memchr>
 8013450:	b138      	cbz	r0, 8013462 <_vfiprintf_r+0x17a>
 8013452:	9b04      	ldr	r3, [sp, #16]
 8013454:	eba0 000a 	sub.w	r0, r0, sl
 8013458:	2240      	movs	r2, #64	; 0x40
 801345a:	4082      	lsls	r2, r0
 801345c:	4313      	orrs	r3, r2
 801345e:	3401      	adds	r4, #1
 8013460:	9304      	str	r3, [sp, #16]
 8013462:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013466:	4829      	ldr	r0, [pc, #164]	; (801350c <_vfiprintf_r+0x224>)
 8013468:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801346c:	2206      	movs	r2, #6
 801346e:	f7ec fee7 	bl	8000240 <memchr>
 8013472:	2800      	cmp	r0, #0
 8013474:	d03f      	beq.n	80134f6 <_vfiprintf_r+0x20e>
 8013476:	4b26      	ldr	r3, [pc, #152]	; (8013510 <_vfiprintf_r+0x228>)
 8013478:	bb1b      	cbnz	r3, 80134c2 <_vfiprintf_r+0x1da>
 801347a:	9b03      	ldr	r3, [sp, #12]
 801347c:	3307      	adds	r3, #7
 801347e:	f023 0307 	bic.w	r3, r3, #7
 8013482:	3308      	adds	r3, #8
 8013484:	9303      	str	r3, [sp, #12]
 8013486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013488:	443b      	add	r3, r7
 801348a:	9309      	str	r3, [sp, #36]	; 0x24
 801348c:	e768      	b.n	8013360 <_vfiprintf_r+0x78>
 801348e:	fb0c 3202 	mla	r2, ip, r2, r3
 8013492:	460c      	mov	r4, r1
 8013494:	2001      	movs	r0, #1
 8013496:	e7a6      	b.n	80133e6 <_vfiprintf_r+0xfe>
 8013498:	2300      	movs	r3, #0
 801349a:	3401      	adds	r4, #1
 801349c:	9305      	str	r3, [sp, #20]
 801349e:	4619      	mov	r1, r3
 80134a0:	f04f 0c0a 	mov.w	ip, #10
 80134a4:	4620      	mov	r0, r4
 80134a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80134aa:	3a30      	subs	r2, #48	; 0x30
 80134ac:	2a09      	cmp	r2, #9
 80134ae:	d903      	bls.n	80134b8 <_vfiprintf_r+0x1d0>
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d0c6      	beq.n	8013442 <_vfiprintf_r+0x15a>
 80134b4:	9105      	str	r1, [sp, #20]
 80134b6:	e7c4      	b.n	8013442 <_vfiprintf_r+0x15a>
 80134b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80134bc:	4604      	mov	r4, r0
 80134be:	2301      	movs	r3, #1
 80134c0:	e7f0      	b.n	80134a4 <_vfiprintf_r+0x1bc>
 80134c2:	ab03      	add	r3, sp, #12
 80134c4:	9300      	str	r3, [sp, #0]
 80134c6:	462a      	mov	r2, r5
 80134c8:	4b12      	ldr	r3, [pc, #72]	; (8013514 <_vfiprintf_r+0x22c>)
 80134ca:	a904      	add	r1, sp, #16
 80134cc:	4630      	mov	r0, r6
 80134ce:	f3af 8000 	nop.w
 80134d2:	4607      	mov	r7, r0
 80134d4:	1c78      	adds	r0, r7, #1
 80134d6:	d1d6      	bne.n	8013486 <_vfiprintf_r+0x19e>
 80134d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80134da:	07d9      	lsls	r1, r3, #31
 80134dc:	d405      	bmi.n	80134ea <_vfiprintf_r+0x202>
 80134de:	89ab      	ldrh	r3, [r5, #12]
 80134e0:	059a      	lsls	r2, r3, #22
 80134e2:	d402      	bmi.n	80134ea <_vfiprintf_r+0x202>
 80134e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80134e6:	f7fe fd7f 	bl	8011fe8 <__retarget_lock_release_recursive>
 80134ea:	89ab      	ldrh	r3, [r5, #12]
 80134ec:	065b      	lsls	r3, r3, #25
 80134ee:	f53f af1d 	bmi.w	801332c <_vfiprintf_r+0x44>
 80134f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80134f4:	e71c      	b.n	8013330 <_vfiprintf_r+0x48>
 80134f6:	ab03      	add	r3, sp, #12
 80134f8:	9300      	str	r3, [sp, #0]
 80134fa:	462a      	mov	r2, r5
 80134fc:	4b05      	ldr	r3, [pc, #20]	; (8013514 <_vfiprintf_r+0x22c>)
 80134fe:	a904      	add	r1, sp, #16
 8013500:	4630      	mov	r0, r6
 8013502:	f000 f879 	bl	80135f8 <_printf_i>
 8013506:	e7e4      	b.n	80134d2 <_vfiprintf_r+0x1ea>
 8013508:	08016c3c 	.word	0x08016c3c
 801350c:	08016c46 	.word	0x08016c46
 8013510:	00000000 	.word	0x00000000
 8013514:	080132c5 	.word	0x080132c5
 8013518:	08016c42 	.word	0x08016c42

0801351c <_printf_common>:
 801351c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013520:	4616      	mov	r6, r2
 8013522:	4699      	mov	r9, r3
 8013524:	688a      	ldr	r2, [r1, #8]
 8013526:	690b      	ldr	r3, [r1, #16]
 8013528:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801352c:	4293      	cmp	r3, r2
 801352e:	bfb8      	it	lt
 8013530:	4613      	movlt	r3, r2
 8013532:	6033      	str	r3, [r6, #0]
 8013534:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013538:	4607      	mov	r7, r0
 801353a:	460c      	mov	r4, r1
 801353c:	b10a      	cbz	r2, 8013542 <_printf_common+0x26>
 801353e:	3301      	adds	r3, #1
 8013540:	6033      	str	r3, [r6, #0]
 8013542:	6823      	ldr	r3, [r4, #0]
 8013544:	0699      	lsls	r1, r3, #26
 8013546:	bf42      	ittt	mi
 8013548:	6833      	ldrmi	r3, [r6, #0]
 801354a:	3302      	addmi	r3, #2
 801354c:	6033      	strmi	r3, [r6, #0]
 801354e:	6825      	ldr	r5, [r4, #0]
 8013550:	f015 0506 	ands.w	r5, r5, #6
 8013554:	d106      	bne.n	8013564 <_printf_common+0x48>
 8013556:	f104 0a19 	add.w	sl, r4, #25
 801355a:	68e3      	ldr	r3, [r4, #12]
 801355c:	6832      	ldr	r2, [r6, #0]
 801355e:	1a9b      	subs	r3, r3, r2
 8013560:	42ab      	cmp	r3, r5
 8013562:	dc26      	bgt.n	80135b2 <_printf_common+0x96>
 8013564:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013568:	1e13      	subs	r3, r2, #0
 801356a:	6822      	ldr	r2, [r4, #0]
 801356c:	bf18      	it	ne
 801356e:	2301      	movne	r3, #1
 8013570:	0692      	lsls	r2, r2, #26
 8013572:	d42b      	bmi.n	80135cc <_printf_common+0xb0>
 8013574:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013578:	4649      	mov	r1, r9
 801357a:	4638      	mov	r0, r7
 801357c:	47c0      	blx	r8
 801357e:	3001      	adds	r0, #1
 8013580:	d01e      	beq.n	80135c0 <_printf_common+0xa4>
 8013582:	6823      	ldr	r3, [r4, #0]
 8013584:	6922      	ldr	r2, [r4, #16]
 8013586:	f003 0306 	and.w	r3, r3, #6
 801358a:	2b04      	cmp	r3, #4
 801358c:	bf02      	ittt	eq
 801358e:	68e5      	ldreq	r5, [r4, #12]
 8013590:	6833      	ldreq	r3, [r6, #0]
 8013592:	1aed      	subeq	r5, r5, r3
 8013594:	68a3      	ldr	r3, [r4, #8]
 8013596:	bf0c      	ite	eq
 8013598:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801359c:	2500      	movne	r5, #0
 801359e:	4293      	cmp	r3, r2
 80135a0:	bfc4      	itt	gt
 80135a2:	1a9b      	subgt	r3, r3, r2
 80135a4:	18ed      	addgt	r5, r5, r3
 80135a6:	2600      	movs	r6, #0
 80135a8:	341a      	adds	r4, #26
 80135aa:	42b5      	cmp	r5, r6
 80135ac:	d11a      	bne.n	80135e4 <_printf_common+0xc8>
 80135ae:	2000      	movs	r0, #0
 80135b0:	e008      	b.n	80135c4 <_printf_common+0xa8>
 80135b2:	2301      	movs	r3, #1
 80135b4:	4652      	mov	r2, sl
 80135b6:	4649      	mov	r1, r9
 80135b8:	4638      	mov	r0, r7
 80135ba:	47c0      	blx	r8
 80135bc:	3001      	adds	r0, #1
 80135be:	d103      	bne.n	80135c8 <_printf_common+0xac>
 80135c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80135c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80135c8:	3501      	adds	r5, #1
 80135ca:	e7c6      	b.n	801355a <_printf_common+0x3e>
 80135cc:	18e1      	adds	r1, r4, r3
 80135ce:	1c5a      	adds	r2, r3, #1
 80135d0:	2030      	movs	r0, #48	; 0x30
 80135d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80135d6:	4422      	add	r2, r4
 80135d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80135dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80135e0:	3302      	adds	r3, #2
 80135e2:	e7c7      	b.n	8013574 <_printf_common+0x58>
 80135e4:	2301      	movs	r3, #1
 80135e6:	4622      	mov	r2, r4
 80135e8:	4649      	mov	r1, r9
 80135ea:	4638      	mov	r0, r7
 80135ec:	47c0      	blx	r8
 80135ee:	3001      	adds	r0, #1
 80135f0:	d0e6      	beq.n	80135c0 <_printf_common+0xa4>
 80135f2:	3601      	adds	r6, #1
 80135f4:	e7d9      	b.n	80135aa <_printf_common+0x8e>
	...

080135f8 <_printf_i>:
 80135f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80135fc:	7e0f      	ldrb	r7, [r1, #24]
 80135fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013600:	2f78      	cmp	r7, #120	; 0x78
 8013602:	4691      	mov	r9, r2
 8013604:	4680      	mov	r8, r0
 8013606:	460c      	mov	r4, r1
 8013608:	469a      	mov	sl, r3
 801360a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801360e:	d807      	bhi.n	8013620 <_printf_i+0x28>
 8013610:	2f62      	cmp	r7, #98	; 0x62
 8013612:	d80a      	bhi.n	801362a <_printf_i+0x32>
 8013614:	2f00      	cmp	r7, #0
 8013616:	f000 80d4 	beq.w	80137c2 <_printf_i+0x1ca>
 801361a:	2f58      	cmp	r7, #88	; 0x58
 801361c:	f000 80c0 	beq.w	80137a0 <_printf_i+0x1a8>
 8013620:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013624:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013628:	e03a      	b.n	80136a0 <_printf_i+0xa8>
 801362a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801362e:	2b15      	cmp	r3, #21
 8013630:	d8f6      	bhi.n	8013620 <_printf_i+0x28>
 8013632:	a101      	add	r1, pc, #4	; (adr r1, 8013638 <_printf_i+0x40>)
 8013634:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013638:	08013691 	.word	0x08013691
 801363c:	080136a5 	.word	0x080136a5
 8013640:	08013621 	.word	0x08013621
 8013644:	08013621 	.word	0x08013621
 8013648:	08013621 	.word	0x08013621
 801364c:	08013621 	.word	0x08013621
 8013650:	080136a5 	.word	0x080136a5
 8013654:	08013621 	.word	0x08013621
 8013658:	08013621 	.word	0x08013621
 801365c:	08013621 	.word	0x08013621
 8013660:	08013621 	.word	0x08013621
 8013664:	080137a9 	.word	0x080137a9
 8013668:	080136d1 	.word	0x080136d1
 801366c:	08013763 	.word	0x08013763
 8013670:	08013621 	.word	0x08013621
 8013674:	08013621 	.word	0x08013621
 8013678:	080137cb 	.word	0x080137cb
 801367c:	08013621 	.word	0x08013621
 8013680:	080136d1 	.word	0x080136d1
 8013684:	08013621 	.word	0x08013621
 8013688:	08013621 	.word	0x08013621
 801368c:	0801376b 	.word	0x0801376b
 8013690:	682b      	ldr	r3, [r5, #0]
 8013692:	1d1a      	adds	r2, r3, #4
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	602a      	str	r2, [r5, #0]
 8013698:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801369c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80136a0:	2301      	movs	r3, #1
 80136a2:	e09f      	b.n	80137e4 <_printf_i+0x1ec>
 80136a4:	6820      	ldr	r0, [r4, #0]
 80136a6:	682b      	ldr	r3, [r5, #0]
 80136a8:	0607      	lsls	r7, r0, #24
 80136aa:	f103 0104 	add.w	r1, r3, #4
 80136ae:	6029      	str	r1, [r5, #0]
 80136b0:	d501      	bpl.n	80136b6 <_printf_i+0xbe>
 80136b2:	681e      	ldr	r6, [r3, #0]
 80136b4:	e003      	b.n	80136be <_printf_i+0xc6>
 80136b6:	0646      	lsls	r6, r0, #25
 80136b8:	d5fb      	bpl.n	80136b2 <_printf_i+0xba>
 80136ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 80136be:	2e00      	cmp	r6, #0
 80136c0:	da03      	bge.n	80136ca <_printf_i+0xd2>
 80136c2:	232d      	movs	r3, #45	; 0x2d
 80136c4:	4276      	negs	r6, r6
 80136c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80136ca:	485a      	ldr	r0, [pc, #360]	; (8013834 <_printf_i+0x23c>)
 80136cc:	230a      	movs	r3, #10
 80136ce:	e012      	b.n	80136f6 <_printf_i+0xfe>
 80136d0:	682b      	ldr	r3, [r5, #0]
 80136d2:	6820      	ldr	r0, [r4, #0]
 80136d4:	1d19      	adds	r1, r3, #4
 80136d6:	6029      	str	r1, [r5, #0]
 80136d8:	0605      	lsls	r5, r0, #24
 80136da:	d501      	bpl.n	80136e0 <_printf_i+0xe8>
 80136dc:	681e      	ldr	r6, [r3, #0]
 80136de:	e002      	b.n	80136e6 <_printf_i+0xee>
 80136e0:	0641      	lsls	r1, r0, #25
 80136e2:	d5fb      	bpl.n	80136dc <_printf_i+0xe4>
 80136e4:	881e      	ldrh	r6, [r3, #0]
 80136e6:	4853      	ldr	r0, [pc, #332]	; (8013834 <_printf_i+0x23c>)
 80136e8:	2f6f      	cmp	r7, #111	; 0x6f
 80136ea:	bf0c      	ite	eq
 80136ec:	2308      	moveq	r3, #8
 80136ee:	230a      	movne	r3, #10
 80136f0:	2100      	movs	r1, #0
 80136f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80136f6:	6865      	ldr	r5, [r4, #4]
 80136f8:	60a5      	str	r5, [r4, #8]
 80136fa:	2d00      	cmp	r5, #0
 80136fc:	bfa2      	ittt	ge
 80136fe:	6821      	ldrge	r1, [r4, #0]
 8013700:	f021 0104 	bicge.w	r1, r1, #4
 8013704:	6021      	strge	r1, [r4, #0]
 8013706:	b90e      	cbnz	r6, 801370c <_printf_i+0x114>
 8013708:	2d00      	cmp	r5, #0
 801370a:	d04b      	beq.n	80137a4 <_printf_i+0x1ac>
 801370c:	4615      	mov	r5, r2
 801370e:	fbb6 f1f3 	udiv	r1, r6, r3
 8013712:	fb03 6711 	mls	r7, r3, r1, r6
 8013716:	5dc7      	ldrb	r7, [r0, r7]
 8013718:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801371c:	4637      	mov	r7, r6
 801371e:	42bb      	cmp	r3, r7
 8013720:	460e      	mov	r6, r1
 8013722:	d9f4      	bls.n	801370e <_printf_i+0x116>
 8013724:	2b08      	cmp	r3, #8
 8013726:	d10b      	bne.n	8013740 <_printf_i+0x148>
 8013728:	6823      	ldr	r3, [r4, #0]
 801372a:	07de      	lsls	r6, r3, #31
 801372c:	d508      	bpl.n	8013740 <_printf_i+0x148>
 801372e:	6923      	ldr	r3, [r4, #16]
 8013730:	6861      	ldr	r1, [r4, #4]
 8013732:	4299      	cmp	r1, r3
 8013734:	bfde      	ittt	le
 8013736:	2330      	movle	r3, #48	; 0x30
 8013738:	f805 3c01 	strble.w	r3, [r5, #-1]
 801373c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8013740:	1b52      	subs	r2, r2, r5
 8013742:	6122      	str	r2, [r4, #16]
 8013744:	f8cd a000 	str.w	sl, [sp]
 8013748:	464b      	mov	r3, r9
 801374a:	aa03      	add	r2, sp, #12
 801374c:	4621      	mov	r1, r4
 801374e:	4640      	mov	r0, r8
 8013750:	f7ff fee4 	bl	801351c <_printf_common>
 8013754:	3001      	adds	r0, #1
 8013756:	d14a      	bne.n	80137ee <_printf_i+0x1f6>
 8013758:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801375c:	b004      	add	sp, #16
 801375e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013762:	6823      	ldr	r3, [r4, #0]
 8013764:	f043 0320 	orr.w	r3, r3, #32
 8013768:	6023      	str	r3, [r4, #0]
 801376a:	4833      	ldr	r0, [pc, #204]	; (8013838 <_printf_i+0x240>)
 801376c:	2778      	movs	r7, #120	; 0x78
 801376e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013772:	6823      	ldr	r3, [r4, #0]
 8013774:	6829      	ldr	r1, [r5, #0]
 8013776:	061f      	lsls	r7, r3, #24
 8013778:	f851 6b04 	ldr.w	r6, [r1], #4
 801377c:	d402      	bmi.n	8013784 <_printf_i+0x18c>
 801377e:	065f      	lsls	r7, r3, #25
 8013780:	bf48      	it	mi
 8013782:	b2b6      	uxthmi	r6, r6
 8013784:	07df      	lsls	r7, r3, #31
 8013786:	bf48      	it	mi
 8013788:	f043 0320 	orrmi.w	r3, r3, #32
 801378c:	6029      	str	r1, [r5, #0]
 801378e:	bf48      	it	mi
 8013790:	6023      	strmi	r3, [r4, #0]
 8013792:	b91e      	cbnz	r6, 801379c <_printf_i+0x1a4>
 8013794:	6823      	ldr	r3, [r4, #0]
 8013796:	f023 0320 	bic.w	r3, r3, #32
 801379a:	6023      	str	r3, [r4, #0]
 801379c:	2310      	movs	r3, #16
 801379e:	e7a7      	b.n	80136f0 <_printf_i+0xf8>
 80137a0:	4824      	ldr	r0, [pc, #144]	; (8013834 <_printf_i+0x23c>)
 80137a2:	e7e4      	b.n	801376e <_printf_i+0x176>
 80137a4:	4615      	mov	r5, r2
 80137a6:	e7bd      	b.n	8013724 <_printf_i+0x12c>
 80137a8:	682b      	ldr	r3, [r5, #0]
 80137aa:	6826      	ldr	r6, [r4, #0]
 80137ac:	6961      	ldr	r1, [r4, #20]
 80137ae:	1d18      	adds	r0, r3, #4
 80137b0:	6028      	str	r0, [r5, #0]
 80137b2:	0635      	lsls	r5, r6, #24
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	d501      	bpl.n	80137bc <_printf_i+0x1c4>
 80137b8:	6019      	str	r1, [r3, #0]
 80137ba:	e002      	b.n	80137c2 <_printf_i+0x1ca>
 80137bc:	0670      	lsls	r0, r6, #25
 80137be:	d5fb      	bpl.n	80137b8 <_printf_i+0x1c0>
 80137c0:	8019      	strh	r1, [r3, #0]
 80137c2:	2300      	movs	r3, #0
 80137c4:	6123      	str	r3, [r4, #16]
 80137c6:	4615      	mov	r5, r2
 80137c8:	e7bc      	b.n	8013744 <_printf_i+0x14c>
 80137ca:	682b      	ldr	r3, [r5, #0]
 80137cc:	1d1a      	adds	r2, r3, #4
 80137ce:	602a      	str	r2, [r5, #0]
 80137d0:	681d      	ldr	r5, [r3, #0]
 80137d2:	6862      	ldr	r2, [r4, #4]
 80137d4:	2100      	movs	r1, #0
 80137d6:	4628      	mov	r0, r5
 80137d8:	f7ec fd32 	bl	8000240 <memchr>
 80137dc:	b108      	cbz	r0, 80137e2 <_printf_i+0x1ea>
 80137de:	1b40      	subs	r0, r0, r5
 80137e0:	6060      	str	r0, [r4, #4]
 80137e2:	6863      	ldr	r3, [r4, #4]
 80137e4:	6123      	str	r3, [r4, #16]
 80137e6:	2300      	movs	r3, #0
 80137e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80137ec:	e7aa      	b.n	8013744 <_printf_i+0x14c>
 80137ee:	6923      	ldr	r3, [r4, #16]
 80137f0:	462a      	mov	r2, r5
 80137f2:	4649      	mov	r1, r9
 80137f4:	4640      	mov	r0, r8
 80137f6:	47d0      	blx	sl
 80137f8:	3001      	adds	r0, #1
 80137fa:	d0ad      	beq.n	8013758 <_printf_i+0x160>
 80137fc:	6823      	ldr	r3, [r4, #0]
 80137fe:	079b      	lsls	r3, r3, #30
 8013800:	d413      	bmi.n	801382a <_printf_i+0x232>
 8013802:	68e0      	ldr	r0, [r4, #12]
 8013804:	9b03      	ldr	r3, [sp, #12]
 8013806:	4298      	cmp	r0, r3
 8013808:	bfb8      	it	lt
 801380a:	4618      	movlt	r0, r3
 801380c:	e7a6      	b.n	801375c <_printf_i+0x164>
 801380e:	2301      	movs	r3, #1
 8013810:	4632      	mov	r2, r6
 8013812:	4649      	mov	r1, r9
 8013814:	4640      	mov	r0, r8
 8013816:	47d0      	blx	sl
 8013818:	3001      	adds	r0, #1
 801381a:	d09d      	beq.n	8013758 <_printf_i+0x160>
 801381c:	3501      	adds	r5, #1
 801381e:	68e3      	ldr	r3, [r4, #12]
 8013820:	9903      	ldr	r1, [sp, #12]
 8013822:	1a5b      	subs	r3, r3, r1
 8013824:	42ab      	cmp	r3, r5
 8013826:	dcf2      	bgt.n	801380e <_printf_i+0x216>
 8013828:	e7eb      	b.n	8013802 <_printf_i+0x20a>
 801382a:	2500      	movs	r5, #0
 801382c:	f104 0619 	add.w	r6, r4, #25
 8013830:	e7f5      	b.n	801381e <_printf_i+0x226>
 8013832:	bf00      	nop
 8013834:	08016c4d 	.word	0x08016c4d
 8013838:	08016c5e 	.word	0x08016c5e

0801383c <__sflush_r>:
 801383c:	898a      	ldrh	r2, [r1, #12]
 801383e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013842:	4605      	mov	r5, r0
 8013844:	0710      	lsls	r0, r2, #28
 8013846:	460c      	mov	r4, r1
 8013848:	d458      	bmi.n	80138fc <__sflush_r+0xc0>
 801384a:	684b      	ldr	r3, [r1, #4]
 801384c:	2b00      	cmp	r3, #0
 801384e:	dc05      	bgt.n	801385c <__sflush_r+0x20>
 8013850:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013852:	2b00      	cmp	r3, #0
 8013854:	dc02      	bgt.n	801385c <__sflush_r+0x20>
 8013856:	2000      	movs	r0, #0
 8013858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801385c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801385e:	2e00      	cmp	r6, #0
 8013860:	d0f9      	beq.n	8013856 <__sflush_r+0x1a>
 8013862:	2300      	movs	r3, #0
 8013864:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013868:	682f      	ldr	r7, [r5, #0]
 801386a:	6a21      	ldr	r1, [r4, #32]
 801386c:	602b      	str	r3, [r5, #0]
 801386e:	d032      	beq.n	80138d6 <__sflush_r+0x9a>
 8013870:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013872:	89a3      	ldrh	r3, [r4, #12]
 8013874:	075a      	lsls	r2, r3, #29
 8013876:	d505      	bpl.n	8013884 <__sflush_r+0x48>
 8013878:	6863      	ldr	r3, [r4, #4]
 801387a:	1ac0      	subs	r0, r0, r3
 801387c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801387e:	b10b      	cbz	r3, 8013884 <__sflush_r+0x48>
 8013880:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013882:	1ac0      	subs	r0, r0, r3
 8013884:	2300      	movs	r3, #0
 8013886:	4602      	mov	r2, r0
 8013888:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801388a:	6a21      	ldr	r1, [r4, #32]
 801388c:	4628      	mov	r0, r5
 801388e:	47b0      	blx	r6
 8013890:	1c43      	adds	r3, r0, #1
 8013892:	89a3      	ldrh	r3, [r4, #12]
 8013894:	d106      	bne.n	80138a4 <__sflush_r+0x68>
 8013896:	6829      	ldr	r1, [r5, #0]
 8013898:	291d      	cmp	r1, #29
 801389a:	d82b      	bhi.n	80138f4 <__sflush_r+0xb8>
 801389c:	4a29      	ldr	r2, [pc, #164]	; (8013944 <__sflush_r+0x108>)
 801389e:	410a      	asrs	r2, r1
 80138a0:	07d6      	lsls	r6, r2, #31
 80138a2:	d427      	bmi.n	80138f4 <__sflush_r+0xb8>
 80138a4:	2200      	movs	r2, #0
 80138a6:	6062      	str	r2, [r4, #4]
 80138a8:	04d9      	lsls	r1, r3, #19
 80138aa:	6922      	ldr	r2, [r4, #16]
 80138ac:	6022      	str	r2, [r4, #0]
 80138ae:	d504      	bpl.n	80138ba <__sflush_r+0x7e>
 80138b0:	1c42      	adds	r2, r0, #1
 80138b2:	d101      	bne.n	80138b8 <__sflush_r+0x7c>
 80138b4:	682b      	ldr	r3, [r5, #0]
 80138b6:	b903      	cbnz	r3, 80138ba <__sflush_r+0x7e>
 80138b8:	6560      	str	r0, [r4, #84]	; 0x54
 80138ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80138bc:	602f      	str	r7, [r5, #0]
 80138be:	2900      	cmp	r1, #0
 80138c0:	d0c9      	beq.n	8013856 <__sflush_r+0x1a>
 80138c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80138c6:	4299      	cmp	r1, r3
 80138c8:	d002      	beq.n	80138d0 <__sflush_r+0x94>
 80138ca:	4628      	mov	r0, r5
 80138cc:	f7fe fbc2 	bl	8012054 <_free_r>
 80138d0:	2000      	movs	r0, #0
 80138d2:	6360      	str	r0, [r4, #52]	; 0x34
 80138d4:	e7c0      	b.n	8013858 <__sflush_r+0x1c>
 80138d6:	2301      	movs	r3, #1
 80138d8:	4628      	mov	r0, r5
 80138da:	47b0      	blx	r6
 80138dc:	1c41      	adds	r1, r0, #1
 80138de:	d1c8      	bne.n	8013872 <__sflush_r+0x36>
 80138e0:	682b      	ldr	r3, [r5, #0]
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d0c5      	beq.n	8013872 <__sflush_r+0x36>
 80138e6:	2b1d      	cmp	r3, #29
 80138e8:	d001      	beq.n	80138ee <__sflush_r+0xb2>
 80138ea:	2b16      	cmp	r3, #22
 80138ec:	d101      	bne.n	80138f2 <__sflush_r+0xb6>
 80138ee:	602f      	str	r7, [r5, #0]
 80138f0:	e7b1      	b.n	8013856 <__sflush_r+0x1a>
 80138f2:	89a3      	ldrh	r3, [r4, #12]
 80138f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80138f8:	81a3      	strh	r3, [r4, #12]
 80138fa:	e7ad      	b.n	8013858 <__sflush_r+0x1c>
 80138fc:	690f      	ldr	r7, [r1, #16]
 80138fe:	2f00      	cmp	r7, #0
 8013900:	d0a9      	beq.n	8013856 <__sflush_r+0x1a>
 8013902:	0793      	lsls	r3, r2, #30
 8013904:	680e      	ldr	r6, [r1, #0]
 8013906:	bf08      	it	eq
 8013908:	694b      	ldreq	r3, [r1, #20]
 801390a:	600f      	str	r7, [r1, #0]
 801390c:	bf18      	it	ne
 801390e:	2300      	movne	r3, #0
 8013910:	eba6 0807 	sub.w	r8, r6, r7
 8013914:	608b      	str	r3, [r1, #8]
 8013916:	f1b8 0f00 	cmp.w	r8, #0
 801391a:	dd9c      	ble.n	8013856 <__sflush_r+0x1a>
 801391c:	6a21      	ldr	r1, [r4, #32]
 801391e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013920:	4643      	mov	r3, r8
 8013922:	463a      	mov	r2, r7
 8013924:	4628      	mov	r0, r5
 8013926:	47b0      	blx	r6
 8013928:	2800      	cmp	r0, #0
 801392a:	dc06      	bgt.n	801393a <__sflush_r+0xfe>
 801392c:	89a3      	ldrh	r3, [r4, #12]
 801392e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013932:	81a3      	strh	r3, [r4, #12]
 8013934:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013938:	e78e      	b.n	8013858 <__sflush_r+0x1c>
 801393a:	4407      	add	r7, r0
 801393c:	eba8 0800 	sub.w	r8, r8, r0
 8013940:	e7e9      	b.n	8013916 <__sflush_r+0xda>
 8013942:	bf00      	nop
 8013944:	dfbffffe 	.word	0xdfbffffe

08013948 <_fflush_r>:
 8013948:	b538      	push	{r3, r4, r5, lr}
 801394a:	690b      	ldr	r3, [r1, #16]
 801394c:	4605      	mov	r5, r0
 801394e:	460c      	mov	r4, r1
 8013950:	b913      	cbnz	r3, 8013958 <_fflush_r+0x10>
 8013952:	2500      	movs	r5, #0
 8013954:	4628      	mov	r0, r5
 8013956:	bd38      	pop	{r3, r4, r5, pc}
 8013958:	b118      	cbz	r0, 8013962 <_fflush_r+0x1a>
 801395a:	6a03      	ldr	r3, [r0, #32]
 801395c:	b90b      	cbnz	r3, 8013962 <_fflush_r+0x1a>
 801395e:	f7fe f9ad 	bl	8011cbc <__sinit>
 8013962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013966:	2b00      	cmp	r3, #0
 8013968:	d0f3      	beq.n	8013952 <_fflush_r+0xa>
 801396a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801396c:	07d0      	lsls	r0, r2, #31
 801396e:	d404      	bmi.n	801397a <_fflush_r+0x32>
 8013970:	0599      	lsls	r1, r3, #22
 8013972:	d402      	bmi.n	801397a <_fflush_r+0x32>
 8013974:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013976:	f7fe fb36 	bl	8011fe6 <__retarget_lock_acquire_recursive>
 801397a:	4628      	mov	r0, r5
 801397c:	4621      	mov	r1, r4
 801397e:	f7ff ff5d 	bl	801383c <__sflush_r>
 8013982:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013984:	07da      	lsls	r2, r3, #31
 8013986:	4605      	mov	r5, r0
 8013988:	d4e4      	bmi.n	8013954 <_fflush_r+0xc>
 801398a:	89a3      	ldrh	r3, [r4, #12]
 801398c:	059b      	lsls	r3, r3, #22
 801398e:	d4e1      	bmi.n	8013954 <_fflush_r+0xc>
 8013990:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013992:	f7fe fb29 	bl	8011fe8 <__retarget_lock_release_recursive>
 8013996:	e7dd      	b.n	8013954 <_fflush_r+0xc>

08013998 <fiprintf>:
 8013998:	b40e      	push	{r1, r2, r3}
 801399a:	b503      	push	{r0, r1, lr}
 801399c:	4601      	mov	r1, r0
 801399e:	ab03      	add	r3, sp, #12
 80139a0:	4805      	ldr	r0, [pc, #20]	; (80139b8 <fiprintf+0x20>)
 80139a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80139a6:	6800      	ldr	r0, [r0, #0]
 80139a8:	9301      	str	r3, [sp, #4]
 80139aa:	f7ff fc9d 	bl	80132e8 <_vfiprintf_r>
 80139ae:	b002      	add	sp, #8
 80139b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80139b4:	b003      	add	sp, #12
 80139b6:	4770      	bx	lr
 80139b8:	200001f0 	.word	0x200001f0

080139bc <__swbuf_r>:
 80139bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139be:	460e      	mov	r6, r1
 80139c0:	4614      	mov	r4, r2
 80139c2:	4605      	mov	r5, r0
 80139c4:	b118      	cbz	r0, 80139ce <__swbuf_r+0x12>
 80139c6:	6a03      	ldr	r3, [r0, #32]
 80139c8:	b90b      	cbnz	r3, 80139ce <__swbuf_r+0x12>
 80139ca:	f7fe f977 	bl	8011cbc <__sinit>
 80139ce:	69a3      	ldr	r3, [r4, #24]
 80139d0:	60a3      	str	r3, [r4, #8]
 80139d2:	89a3      	ldrh	r3, [r4, #12]
 80139d4:	071a      	lsls	r2, r3, #28
 80139d6:	d525      	bpl.n	8013a24 <__swbuf_r+0x68>
 80139d8:	6923      	ldr	r3, [r4, #16]
 80139da:	b31b      	cbz	r3, 8013a24 <__swbuf_r+0x68>
 80139dc:	6823      	ldr	r3, [r4, #0]
 80139de:	6922      	ldr	r2, [r4, #16]
 80139e0:	1a98      	subs	r0, r3, r2
 80139e2:	6963      	ldr	r3, [r4, #20]
 80139e4:	b2f6      	uxtb	r6, r6
 80139e6:	4283      	cmp	r3, r0
 80139e8:	4637      	mov	r7, r6
 80139ea:	dc04      	bgt.n	80139f6 <__swbuf_r+0x3a>
 80139ec:	4621      	mov	r1, r4
 80139ee:	4628      	mov	r0, r5
 80139f0:	f7ff ffaa 	bl	8013948 <_fflush_r>
 80139f4:	b9e0      	cbnz	r0, 8013a30 <__swbuf_r+0x74>
 80139f6:	68a3      	ldr	r3, [r4, #8]
 80139f8:	3b01      	subs	r3, #1
 80139fa:	60a3      	str	r3, [r4, #8]
 80139fc:	6823      	ldr	r3, [r4, #0]
 80139fe:	1c5a      	adds	r2, r3, #1
 8013a00:	6022      	str	r2, [r4, #0]
 8013a02:	701e      	strb	r6, [r3, #0]
 8013a04:	6962      	ldr	r2, [r4, #20]
 8013a06:	1c43      	adds	r3, r0, #1
 8013a08:	429a      	cmp	r2, r3
 8013a0a:	d004      	beq.n	8013a16 <__swbuf_r+0x5a>
 8013a0c:	89a3      	ldrh	r3, [r4, #12]
 8013a0e:	07db      	lsls	r3, r3, #31
 8013a10:	d506      	bpl.n	8013a20 <__swbuf_r+0x64>
 8013a12:	2e0a      	cmp	r6, #10
 8013a14:	d104      	bne.n	8013a20 <__swbuf_r+0x64>
 8013a16:	4621      	mov	r1, r4
 8013a18:	4628      	mov	r0, r5
 8013a1a:	f7ff ff95 	bl	8013948 <_fflush_r>
 8013a1e:	b938      	cbnz	r0, 8013a30 <__swbuf_r+0x74>
 8013a20:	4638      	mov	r0, r7
 8013a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a24:	4621      	mov	r1, r4
 8013a26:	4628      	mov	r0, r5
 8013a28:	f000 f806 	bl	8013a38 <__swsetup_r>
 8013a2c:	2800      	cmp	r0, #0
 8013a2e:	d0d5      	beq.n	80139dc <__swbuf_r+0x20>
 8013a30:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8013a34:	e7f4      	b.n	8013a20 <__swbuf_r+0x64>
	...

08013a38 <__swsetup_r>:
 8013a38:	b538      	push	{r3, r4, r5, lr}
 8013a3a:	4b2a      	ldr	r3, [pc, #168]	; (8013ae4 <__swsetup_r+0xac>)
 8013a3c:	4605      	mov	r5, r0
 8013a3e:	6818      	ldr	r0, [r3, #0]
 8013a40:	460c      	mov	r4, r1
 8013a42:	b118      	cbz	r0, 8013a4c <__swsetup_r+0x14>
 8013a44:	6a03      	ldr	r3, [r0, #32]
 8013a46:	b90b      	cbnz	r3, 8013a4c <__swsetup_r+0x14>
 8013a48:	f7fe f938 	bl	8011cbc <__sinit>
 8013a4c:	89a3      	ldrh	r3, [r4, #12]
 8013a4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013a52:	0718      	lsls	r0, r3, #28
 8013a54:	d422      	bmi.n	8013a9c <__swsetup_r+0x64>
 8013a56:	06d9      	lsls	r1, r3, #27
 8013a58:	d407      	bmi.n	8013a6a <__swsetup_r+0x32>
 8013a5a:	2309      	movs	r3, #9
 8013a5c:	602b      	str	r3, [r5, #0]
 8013a5e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013a62:	81a3      	strh	r3, [r4, #12]
 8013a64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013a68:	e034      	b.n	8013ad4 <__swsetup_r+0x9c>
 8013a6a:	0758      	lsls	r0, r3, #29
 8013a6c:	d512      	bpl.n	8013a94 <__swsetup_r+0x5c>
 8013a6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013a70:	b141      	cbz	r1, 8013a84 <__swsetup_r+0x4c>
 8013a72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013a76:	4299      	cmp	r1, r3
 8013a78:	d002      	beq.n	8013a80 <__swsetup_r+0x48>
 8013a7a:	4628      	mov	r0, r5
 8013a7c:	f7fe faea 	bl	8012054 <_free_r>
 8013a80:	2300      	movs	r3, #0
 8013a82:	6363      	str	r3, [r4, #52]	; 0x34
 8013a84:	89a3      	ldrh	r3, [r4, #12]
 8013a86:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013a8a:	81a3      	strh	r3, [r4, #12]
 8013a8c:	2300      	movs	r3, #0
 8013a8e:	6063      	str	r3, [r4, #4]
 8013a90:	6923      	ldr	r3, [r4, #16]
 8013a92:	6023      	str	r3, [r4, #0]
 8013a94:	89a3      	ldrh	r3, [r4, #12]
 8013a96:	f043 0308 	orr.w	r3, r3, #8
 8013a9a:	81a3      	strh	r3, [r4, #12]
 8013a9c:	6923      	ldr	r3, [r4, #16]
 8013a9e:	b94b      	cbnz	r3, 8013ab4 <__swsetup_r+0x7c>
 8013aa0:	89a3      	ldrh	r3, [r4, #12]
 8013aa2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013aa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013aaa:	d003      	beq.n	8013ab4 <__swsetup_r+0x7c>
 8013aac:	4621      	mov	r1, r4
 8013aae:	4628      	mov	r0, r5
 8013ab0:	f000 f86d 	bl	8013b8e <__smakebuf_r>
 8013ab4:	89a0      	ldrh	r0, [r4, #12]
 8013ab6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013aba:	f010 0301 	ands.w	r3, r0, #1
 8013abe:	d00a      	beq.n	8013ad6 <__swsetup_r+0x9e>
 8013ac0:	2300      	movs	r3, #0
 8013ac2:	60a3      	str	r3, [r4, #8]
 8013ac4:	6963      	ldr	r3, [r4, #20]
 8013ac6:	425b      	negs	r3, r3
 8013ac8:	61a3      	str	r3, [r4, #24]
 8013aca:	6923      	ldr	r3, [r4, #16]
 8013acc:	b943      	cbnz	r3, 8013ae0 <__swsetup_r+0xa8>
 8013ace:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013ad2:	d1c4      	bne.n	8013a5e <__swsetup_r+0x26>
 8013ad4:	bd38      	pop	{r3, r4, r5, pc}
 8013ad6:	0781      	lsls	r1, r0, #30
 8013ad8:	bf58      	it	pl
 8013ada:	6963      	ldrpl	r3, [r4, #20]
 8013adc:	60a3      	str	r3, [r4, #8]
 8013ade:	e7f4      	b.n	8013aca <__swsetup_r+0x92>
 8013ae0:	2000      	movs	r0, #0
 8013ae2:	e7f7      	b.n	8013ad4 <__swsetup_r+0x9c>
 8013ae4:	200001f0 	.word	0x200001f0

08013ae8 <_sbrk_r>:
 8013ae8:	b538      	push	{r3, r4, r5, lr}
 8013aea:	4d06      	ldr	r5, [pc, #24]	; (8013b04 <_sbrk_r+0x1c>)
 8013aec:	2300      	movs	r3, #0
 8013aee:	4604      	mov	r4, r0
 8013af0:	4608      	mov	r0, r1
 8013af2:	602b      	str	r3, [r5, #0]
 8013af4:	f7ed fe66 	bl	80017c4 <_sbrk>
 8013af8:	1c43      	adds	r3, r0, #1
 8013afa:	d102      	bne.n	8013b02 <_sbrk_r+0x1a>
 8013afc:	682b      	ldr	r3, [r5, #0]
 8013afe:	b103      	cbz	r3, 8013b02 <_sbrk_r+0x1a>
 8013b00:	6023      	str	r3, [r4, #0]
 8013b02:	bd38      	pop	{r3, r4, r5, pc}
 8013b04:	2000aa68 	.word	0x2000aa68

08013b08 <abort>:
 8013b08:	b508      	push	{r3, lr}
 8013b0a:	2006      	movs	r0, #6
 8013b0c:	f000 f8a4 	bl	8013c58 <raise>
 8013b10:	2001      	movs	r0, #1
 8013b12:	f7ed fddf 	bl	80016d4 <_exit>

08013b16 <_calloc_r>:
 8013b16:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013b18:	fba1 2402 	umull	r2, r4, r1, r2
 8013b1c:	b94c      	cbnz	r4, 8013b32 <_calloc_r+0x1c>
 8013b1e:	4611      	mov	r1, r2
 8013b20:	9201      	str	r2, [sp, #4]
 8013b22:	f7fe fe63 	bl	80127ec <_malloc_r>
 8013b26:	9a01      	ldr	r2, [sp, #4]
 8013b28:	4605      	mov	r5, r0
 8013b2a:	b930      	cbnz	r0, 8013b3a <_calloc_r+0x24>
 8013b2c:	4628      	mov	r0, r5
 8013b2e:	b003      	add	sp, #12
 8013b30:	bd30      	pop	{r4, r5, pc}
 8013b32:	220c      	movs	r2, #12
 8013b34:	6002      	str	r2, [r0, #0]
 8013b36:	2500      	movs	r5, #0
 8013b38:	e7f8      	b.n	8013b2c <_calloc_r+0x16>
 8013b3a:	4621      	mov	r1, r4
 8013b3c:	f7fe f959 	bl	8011df2 <memset>
 8013b40:	e7f4      	b.n	8013b2c <_calloc_r+0x16>

08013b42 <__swhatbuf_r>:
 8013b42:	b570      	push	{r4, r5, r6, lr}
 8013b44:	460c      	mov	r4, r1
 8013b46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b4a:	2900      	cmp	r1, #0
 8013b4c:	b096      	sub	sp, #88	; 0x58
 8013b4e:	4615      	mov	r5, r2
 8013b50:	461e      	mov	r6, r3
 8013b52:	da0d      	bge.n	8013b70 <__swhatbuf_r+0x2e>
 8013b54:	89a3      	ldrh	r3, [r4, #12]
 8013b56:	f013 0f80 	tst.w	r3, #128	; 0x80
 8013b5a:	f04f 0100 	mov.w	r1, #0
 8013b5e:	bf0c      	ite	eq
 8013b60:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8013b64:	2340      	movne	r3, #64	; 0x40
 8013b66:	2000      	movs	r0, #0
 8013b68:	6031      	str	r1, [r6, #0]
 8013b6a:	602b      	str	r3, [r5, #0]
 8013b6c:	b016      	add	sp, #88	; 0x58
 8013b6e:	bd70      	pop	{r4, r5, r6, pc}
 8013b70:	466a      	mov	r2, sp
 8013b72:	f000 f879 	bl	8013c68 <_fstat_r>
 8013b76:	2800      	cmp	r0, #0
 8013b78:	dbec      	blt.n	8013b54 <__swhatbuf_r+0x12>
 8013b7a:	9901      	ldr	r1, [sp, #4]
 8013b7c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8013b80:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8013b84:	4259      	negs	r1, r3
 8013b86:	4159      	adcs	r1, r3
 8013b88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013b8c:	e7eb      	b.n	8013b66 <__swhatbuf_r+0x24>

08013b8e <__smakebuf_r>:
 8013b8e:	898b      	ldrh	r3, [r1, #12]
 8013b90:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013b92:	079d      	lsls	r5, r3, #30
 8013b94:	4606      	mov	r6, r0
 8013b96:	460c      	mov	r4, r1
 8013b98:	d507      	bpl.n	8013baa <__smakebuf_r+0x1c>
 8013b9a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013b9e:	6023      	str	r3, [r4, #0]
 8013ba0:	6123      	str	r3, [r4, #16]
 8013ba2:	2301      	movs	r3, #1
 8013ba4:	6163      	str	r3, [r4, #20]
 8013ba6:	b002      	add	sp, #8
 8013ba8:	bd70      	pop	{r4, r5, r6, pc}
 8013baa:	ab01      	add	r3, sp, #4
 8013bac:	466a      	mov	r2, sp
 8013bae:	f7ff ffc8 	bl	8013b42 <__swhatbuf_r>
 8013bb2:	9900      	ldr	r1, [sp, #0]
 8013bb4:	4605      	mov	r5, r0
 8013bb6:	4630      	mov	r0, r6
 8013bb8:	f7fe fe18 	bl	80127ec <_malloc_r>
 8013bbc:	b948      	cbnz	r0, 8013bd2 <__smakebuf_r+0x44>
 8013bbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013bc2:	059a      	lsls	r2, r3, #22
 8013bc4:	d4ef      	bmi.n	8013ba6 <__smakebuf_r+0x18>
 8013bc6:	f023 0303 	bic.w	r3, r3, #3
 8013bca:	f043 0302 	orr.w	r3, r3, #2
 8013bce:	81a3      	strh	r3, [r4, #12]
 8013bd0:	e7e3      	b.n	8013b9a <__smakebuf_r+0xc>
 8013bd2:	89a3      	ldrh	r3, [r4, #12]
 8013bd4:	6020      	str	r0, [r4, #0]
 8013bd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013bda:	81a3      	strh	r3, [r4, #12]
 8013bdc:	9b00      	ldr	r3, [sp, #0]
 8013bde:	6163      	str	r3, [r4, #20]
 8013be0:	9b01      	ldr	r3, [sp, #4]
 8013be2:	6120      	str	r0, [r4, #16]
 8013be4:	b15b      	cbz	r3, 8013bfe <__smakebuf_r+0x70>
 8013be6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013bea:	4630      	mov	r0, r6
 8013bec:	f000 f84e 	bl	8013c8c <_isatty_r>
 8013bf0:	b128      	cbz	r0, 8013bfe <__smakebuf_r+0x70>
 8013bf2:	89a3      	ldrh	r3, [r4, #12]
 8013bf4:	f023 0303 	bic.w	r3, r3, #3
 8013bf8:	f043 0301 	orr.w	r3, r3, #1
 8013bfc:	81a3      	strh	r3, [r4, #12]
 8013bfe:	89a3      	ldrh	r3, [r4, #12]
 8013c00:	431d      	orrs	r5, r3
 8013c02:	81a5      	strh	r5, [r4, #12]
 8013c04:	e7cf      	b.n	8013ba6 <__smakebuf_r+0x18>

08013c06 <_raise_r>:
 8013c06:	291f      	cmp	r1, #31
 8013c08:	b538      	push	{r3, r4, r5, lr}
 8013c0a:	4604      	mov	r4, r0
 8013c0c:	460d      	mov	r5, r1
 8013c0e:	d904      	bls.n	8013c1a <_raise_r+0x14>
 8013c10:	2316      	movs	r3, #22
 8013c12:	6003      	str	r3, [r0, #0]
 8013c14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013c18:	bd38      	pop	{r3, r4, r5, pc}
 8013c1a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8013c1c:	b112      	cbz	r2, 8013c24 <_raise_r+0x1e>
 8013c1e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013c22:	b94b      	cbnz	r3, 8013c38 <_raise_r+0x32>
 8013c24:	4620      	mov	r0, r4
 8013c26:	f000 f853 	bl	8013cd0 <_getpid_r>
 8013c2a:	462a      	mov	r2, r5
 8013c2c:	4601      	mov	r1, r0
 8013c2e:	4620      	mov	r0, r4
 8013c30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013c34:	f000 b83a 	b.w	8013cac <_kill_r>
 8013c38:	2b01      	cmp	r3, #1
 8013c3a:	d00a      	beq.n	8013c52 <_raise_r+0x4c>
 8013c3c:	1c59      	adds	r1, r3, #1
 8013c3e:	d103      	bne.n	8013c48 <_raise_r+0x42>
 8013c40:	2316      	movs	r3, #22
 8013c42:	6003      	str	r3, [r0, #0]
 8013c44:	2001      	movs	r0, #1
 8013c46:	e7e7      	b.n	8013c18 <_raise_r+0x12>
 8013c48:	2400      	movs	r4, #0
 8013c4a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013c4e:	4628      	mov	r0, r5
 8013c50:	4798      	blx	r3
 8013c52:	2000      	movs	r0, #0
 8013c54:	e7e0      	b.n	8013c18 <_raise_r+0x12>
	...

08013c58 <raise>:
 8013c58:	4b02      	ldr	r3, [pc, #8]	; (8013c64 <raise+0xc>)
 8013c5a:	4601      	mov	r1, r0
 8013c5c:	6818      	ldr	r0, [r3, #0]
 8013c5e:	f7ff bfd2 	b.w	8013c06 <_raise_r>
 8013c62:	bf00      	nop
 8013c64:	200001f0 	.word	0x200001f0

08013c68 <_fstat_r>:
 8013c68:	b538      	push	{r3, r4, r5, lr}
 8013c6a:	4d07      	ldr	r5, [pc, #28]	; (8013c88 <_fstat_r+0x20>)
 8013c6c:	2300      	movs	r3, #0
 8013c6e:	4604      	mov	r4, r0
 8013c70:	4608      	mov	r0, r1
 8013c72:	4611      	mov	r1, r2
 8013c74:	602b      	str	r3, [r5, #0]
 8013c76:	f7ed fd7c 	bl	8001772 <_fstat>
 8013c7a:	1c43      	adds	r3, r0, #1
 8013c7c:	d102      	bne.n	8013c84 <_fstat_r+0x1c>
 8013c7e:	682b      	ldr	r3, [r5, #0]
 8013c80:	b103      	cbz	r3, 8013c84 <_fstat_r+0x1c>
 8013c82:	6023      	str	r3, [r4, #0]
 8013c84:	bd38      	pop	{r3, r4, r5, pc}
 8013c86:	bf00      	nop
 8013c88:	2000aa68 	.word	0x2000aa68

08013c8c <_isatty_r>:
 8013c8c:	b538      	push	{r3, r4, r5, lr}
 8013c8e:	4d06      	ldr	r5, [pc, #24]	; (8013ca8 <_isatty_r+0x1c>)
 8013c90:	2300      	movs	r3, #0
 8013c92:	4604      	mov	r4, r0
 8013c94:	4608      	mov	r0, r1
 8013c96:	602b      	str	r3, [r5, #0]
 8013c98:	f7ed fd7b 	bl	8001792 <_isatty>
 8013c9c:	1c43      	adds	r3, r0, #1
 8013c9e:	d102      	bne.n	8013ca6 <_isatty_r+0x1a>
 8013ca0:	682b      	ldr	r3, [r5, #0]
 8013ca2:	b103      	cbz	r3, 8013ca6 <_isatty_r+0x1a>
 8013ca4:	6023      	str	r3, [r4, #0]
 8013ca6:	bd38      	pop	{r3, r4, r5, pc}
 8013ca8:	2000aa68 	.word	0x2000aa68

08013cac <_kill_r>:
 8013cac:	b538      	push	{r3, r4, r5, lr}
 8013cae:	4d07      	ldr	r5, [pc, #28]	; (8013ccc <_kill_r+0x20>)
 8013cb0:	2300      	movs	r3, #0
 8013cb2:	4604      	mov	r4, r0
 8013cb4:	4608      	mov	r0, r1
 8013cb6:	4611      	mov	r1, r2
 8013cb8:	602b      	str	r3, [r5, #0]
 8013cba:	f7ed fcf9 	bl	80016b0 <_kill>
 8013cbe:	1c43      	adds	r3, r0, #1
 8013cc0:	d102      	bne.n	8013cc8 <_kill_r+0x1c>
 8013cc2:	682b      	ldr	r3, [r5, #0]
 8013cc4:	b103      	cbz	r3, 8013cc8 <_kill_r+0x1c>
 8013cc6:	6023      	str	r3, [r4, #0]
 8013cc8:	bd38      	pop	{r3, r4, r5, pc}
 8013cca:	bf00      	nop
 8013ccc:	2000aa68 	.word	0x2000aa68

08013cd0 <_getpid_r>:
 8013cd0:	f7ed bce6 	b.w	80016a0 <_getpid>

08013cd4 <_init>:
 8013cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cd6:	bf00      	nop
 8013cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013cda:	bc08      	pop	{r3}
 8013cdc:	469e      	mov	lr, r3
 8013cde:	4770      	bx	lr

08013ce0 <_fini>:
 8013ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ce2:	bf00      	nop
 8013ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013ce6:	bc08      	pop	{r3}
 8013ce8:	469e      	mov	lr, r3
 8013cea:	4770      	bx	lr
