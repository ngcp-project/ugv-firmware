
F767ZI_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071d8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  080073d8  080073d8  000173d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800748c  0800748c  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  0800748c  0800748c  0001748c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007494  08007494  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007494  08007494  00017494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007498  08007498  00017498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800749c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000010  080074ac  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000b0  0800754c  000200b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000503c  20000150  080075ec  00020150  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000518c  080075ec  0002518c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  0002017e  2**0
                  CONTENTS, READONLY
 15 .debug_info   000200c0  00000000  00000000  000201c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00003e85  00000000  00000000  00040281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001998  00000000  00000000  00044108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000013fd  00000000  00000000  00045aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0000445a  00000000  00000000  00046e9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001cbd1  00000000  00000000  0004b2f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0010dc84  00000000  00000000  00067ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00006d80  00000000  00000000  00175b4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000060  00000000  00000000  0017c8cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000150 	.word	0x20000150
 800021c:	00000000 	.word	0x00000000
 8000220:	080073c0 	.word	0x080073c0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000154 	.word	0x20000154
 800023c:	080073c0 	.word	0x080073c0

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000250:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000254:	f000 b970 	b.w	8000538 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	460d      	mov	r5, r1
 8000278:	4604      	mov	r4, r0
 800027a:	460f      	mov	r7, r1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d14a      	bne.n	8000316 <__udivmoddi4+0xa6>
 8000280:	428a      	cmp	r2, r1
 8000282:	4694      	mov	ip, r2
 8000284:	d965      	bls.n	8000352 <__udivmoddi4+0xe2>
 8000286:	fab2 f382 	clz	r3, r2
 800028a:	b143      	cbz	r3, 800029e <__udivmoddi4+0x2e>
 800028c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000290:	f1c3 0220 	rsb	r2, r3, #32
 8000294:	409f      	lsls	r7, r3
 8000296:	fa20 f202 	lsr.w	r2, r0, r2
 800029a:	4317      	orrs	r7, r2
 800029c:	409c      	lsls	r4, r3
 800029e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002a2:	fa1f f58c 	uxth.w	r5, ip
 80002a6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002aa:	0c22      	lsrs	r2, r4, #16
 80002ac:	fb0e 7711 	mls	r7, lr, r1, r7
 80002b0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002b4:	fb01 f005 	mul.w	r0, r1, r5
 80002b8:	4290      	cmp	r0, r2
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x62>
 80002bc:	eb1c 0202 	adds.w	r2, ip, r2
 80002c0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002c4:	f080 811c 	bcs.w	8000500 <__udivmoddi4+0x290>
 80002c8:	4290      	cmp	r0, r2
 80002ca:	f240 8119 	bls.w	8000500 <__udivmoddi4+0x290>
 80002ce:	3902      	subs	r1, #2
 80002d0:	4462      	add	r2, ip
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	b2a4      	uxth	r4, r4
 80002d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002da:	fb0e 2210 	mls	r2, lr, r0, r2
 80002de:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e2:	fb00 f505 	mul.w	r5, r0, r5
 80002e6:	42a5      	cmp	r5, r4
 80002e8:	d90a      	bls.n	8000300 <__udivmoddi4+0x90>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002f2:	f080 8107 	bcs.w	8000504 <__udivmoddi4+0x294>
 80002f6:	42a5      	cmp	r5, r4
 80002f8:	f240 8104 	bls.w	8000504 <__udivmoddi4+0x294>
 80002fc:	4464      	add	r4, ip
 80002fe:	3802      	subs	r0, #2
 8000300:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000304:	1b64      	subs	r4, r4, r5
 8000306:	2100      	movs	r1, #0
 8000308:	b11e      	cbz	r6, 8000312 <__udivmoddi4+0xa2>
 800030a:	40dc      	lsrs	r4, r3
 800030c:	2300      	movs	r3, #0
 800030e:	e9c6 4300 	strd	r4, r3, [r6]
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0xbc>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80ed 	beq.w	80004fa <__udivmoddi4+0x28a>
 8000320:	2100      	movs	r1, #0
 8000322:	e9c6 0500 	strd	r0, r5, [r6]
 8000326:	4608      	mov	r0, r1
 8000328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032c:	fab3 f183 	clz	r1, r3
 8000330:	2900      	cmp	r1, #0
 8000332:	d149      	bne.n	80003c8 <__udivmoddi4+0x158>
 8000334:	42ab      	cmp	r3, r5
 8000336:	d302      	bcc.n	800033e <__udivmoddi4+0xce>
 8000338:	4282      	cmp	r2, r0
 800033a:	f200 80f8 	bhi.w	800052e <__udivmoddi4+0x2be>
 800033e:	1a84      	subs	r4, r0, r2
 8000340:	eb65 0203 	sbc.w	r2, r5, r3
 8000344:	2001      	movs	r0, #1
 8000346:	4617      	mov	r7, r2
 8000348:	2e00      	cmp	r6, #0
 800034a:	d0e2      	beq.n	8000312 <__udivmoddi4+0xa2>
 800034c:	e9c6 4700 	strd	r4, r7, [r6]
 8000350:	e7df      	b.n	8000312 <__udivmoddi4+0xa2>
 8000352:	b902      	cbnz	r2, 8000356 <__udivmoddi4+0xe6>
 8000354:	deff      	udf	#255	; 0xff
 8000356:	fab2 f382 	clz	r3, r2
 800035a:	2b00      	cmp	r3, #0
 800035c:	f040 8090 	bne.w	8000480 <__udivmoddi4+0x210>
 8000360:	1a8a      	subs	r2, r1, r2
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2101      	movs	r1, #1
 800036c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000370:	fb07 2015 	mls	r0, r7, r5, r2
 8000374:	0c22      	lsrs	r2, r4, #16
 8000376:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800037a:	fb0e f005 	mul.w	r0, lr, r5
 800037e:	4290      	cmp	r0, r2
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x124>
 8000382:	eb1c 0202 	adds.w	r2, ip, r2
 8000386:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4290      	cmp	r0, r2
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2b8>
 8000392:	4645      	mov	r5, r8
 8000394:	1a12      	subs	r2, r2, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb2 f0f7 	udiv	r0, r2, r7
 800039c:	fb07 2210 	mls	r2, r7, r0, r2
 80003a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x14e>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x14c>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2c2>
 80003bc:	4610      	mov	r0, r2
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003c6:	e79f      	b.n	8000308 <__udivmoddi4+0x98>
 80003c8:	f1c1 0720 	rsb	r7, r1, #32
 80003cc:	408b      	lsls	r3, r1
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa05 f401 	lsl.w	r4, r5, r1
 80003da:	fa20 f307 	lsr.w	r3, r0, r7
 80003de:	40fd      	lsrs	r5, r7
 80003e0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e4:	4323      	orrs	r3, r4
 80003e6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ea:	fa1f fe8c 	uxth.w	lr, ip
 80003ee:	fb09 5518 	mls	r5, r9, r8, r5
 80003f2:	0c1c      	lsrs	r4, r3, #16
 80003f4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f8:	fb08 f50e 	mul.w	r5, r8, lr
 80003fc:	42a5      	cmp	r5, r4
 80003fe:	fa02 f201 	lsl.w	r2, r2, r1
 8000402:	fa00 f001 	lsl.w	r0, r0, r1
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2b4>
 8000414:	42a5      	cmp	r5, r4
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2b4>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4464      	add	r4, ip
 8000420:	1b64      	subs	r4, r4, r5
 8000422:	b29d      	uxth	r5, r3
 8000424:	fbb4 f3f9 	udiv	r3, r4, r9
 8000428:	fb09 4413 	mls	r4, r9, r3, r4
 800042c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000430:	fb03 fe0e 	mul.w	lr, r3, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2ac>
 8000442:	45a6      	cmp	lr, r4
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2ac>
 8000446:	3b02      	subs	r3, #2
 8000448:	4464      	add	r4, ip
 800044a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800044e:	fba3 9502 	umull	r9, r5, r3, r2
 8000452:	eba4 040e 	sub.w	r4, r4, lr
 8000456:	42ac      	cmp	r4, r5
 8000458:	46c8      	mov	r8, r9
 800045a:	46ae      	mov	lr, r5
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x29c>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x298>
 8000460:	b156      	cbz	r6, 8000478 <__udivmoddi4+0x208>
 8000462:	ebb0 0208 	subs.w	r2, r0, r8
 8000466:	eb64 040e 	sbc.w	r4, r4, lr
 800046a:	fa04 f707 	lsl.w	r7, r4, r7
 800046e:	40ca      	lsrs	r2, r1
 8000470:	40cc      	lsrs	r4, r1
 8000472:	4317      	orrs	r7, r2
 8000474:	e9c6 7400 	strd	r7, r4, [r6]
 8000478:	4618      	mov	r0, r3
 800047a:	2100      	movs	r1, #0
 800047c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000480:	f1c3 0120 	rsb	r1, r3, #32
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	fa20 f201 	lsr.w	r2, r0, r1
 800048c:	fa25 f101 	lsr.w	r1, r5, r1
 8000490:	409d      	lsls	r5, r3
 8000492:	432a      	orrs	r2, r5
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb1 f0f7 	udiv	r0, r1, r7
 80004a0:	fb07 1510 	mls	r5, r7, r0, r1
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004aa:	fb00 f50e 	mul.w	r5, r0, lr
 80004ae:	428d      	cmp	r5, r1
 80004b0:	fa04 f403 	lsl.w	r4, r4, r3
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x258>
 80004b6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004c0:	428d      	cmp	r5, r1
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1b49      	subs	r1, r1, r5
 80004ca:	b292      	uxth	r2, r2
 80004cc:	fbb1 f5f7 	udiv	r5, r1, r7
 80004d0:	fb07 1115 	mls	r1, r7, r5, r1
 80004d4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d8:	fb05 f10e 	mul.w	r1, r5, lr
 80004dc:	4291      	cmp	r1, r2
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x282>
 80004e0:	eb1c 0202 	adds.w	r2, ip, r2
 80004e4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2a8>
 80004ea:	4291      	cmp	r1, r2
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2a8>
 80004ee:	3d02      	subs	r5, #2
 80004f0:	4462      	add	r2, ip
 80004f2:	1a52      	subs	r2, r2, r1
 80004f4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0xfc>
 80004fa:	4631      	mov	r1, r6
 80004fc:	4630      	mov	r0, r6
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xa2>
 8000500:	4639      	mov	r1, r7
 8000502:	e6e6      	b.n	80002d2 <__udivmoddi4+0x62>
 8000504:	4610      	mov	r0, r2
 8000506:	e6fb      	b.n	8000300 <__udivmoddi4+0x90>
 8000508:	4548      	cmp	r0, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000514:	3b01      	subs	r3, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000518:	4645      	mov	r5, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x282>
 800051c:	462b      	mov	r3, r5
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1da>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x258>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000528:	3d02      	subs	r5, #2
 800052a:	4462      	add	r2, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x124>
 800052e:	4608      	mov	r0, r1
 8000530:	e70a      	b.n	8000348 <__udivmoddi4+0xd8>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x14e>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000540:	f000 fceb 	bl	8000f1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000544:	f000 f82a 	bl	800059c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000548:	f000 f940 	bl	80007cc <MX_GPIO_Init>
  MX_ETH_Init();
 800054c:	f000 f892 	bl	8000674 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000550:	f000 f8de 	bl	8000710 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000554:	f000 f90c 	bl	8000770 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000558:	f004 f866 	bl	8004628 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800055c:	4a09      	ldr	r2, [pc, #36]	; (8000584 <main+0x48>)
 800055e:	2100      	movs	r1, #0
 8000560:	4809      	ldr	r0, [pc, #36]	; (8000588 <main+0x4c>)
 8000562:	f004 f8cb 	bl	80046fc <osThreadNew>
 8000566:	4603      	mov	r3, r0
 8000568:	4a08      	ldr	r2, [pc, #32]	; (800058c <main+0x50>)
 800056a:	6013      	str	r3, [r2, #0]

  /* creation of task02 */
  task02Handle = osThreadNew(task02_init, NULL, &task02_attributes);
 800056c:	4a08      	ldr	r2, [pc, #32]	; (8000590 <main+0x54>)
 800056e:	2100      	movs	r1, #0
 8000570:	4808      	ldr	r0, [pc, #32]	; (8000594 <main+0x58>)
 8000572:	f004 f8c3 	bl	80046fc <osThreadNew>
 8000576:	4603      	mov	r3, r0
 8000578:	4a07      	ldr	r2, [pc, #28]	; (8000598 <main+0x5c>)
 800057a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800057c:	f004 f888 	bl	8004690 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000580:	e7fe      	b.n	8000580 <main+0x44>
 8000582:	bf00      	nop
 8000584:	0800742c 	.word	0x0800742c
 8000588:	08000911 	.word	0x08000911
 800058c:	200007e4 	.word	0x200007e4
 8000590:	08007450 	.word	0x08007450
 8000594:	08000979 	.word	0x08000979
 8000598:	200007e8 	.word	0x200007e8

0800059c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b094      	sub	sp, #80	; 0x50
 80005a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a2:	f107 031c 	add.w	r3, r7, #28
 80005a6:	2234      	movs	r2, #52	; 0x34
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f006 fece 	bl	800734c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b0:	f107 0308 	add.w	r3, r7, #8
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005c0:	f001 fc2c 	bl	8001e1c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c4:	4b29      	ldr	r3, [pc, #164]	; (800066c <SystemClock_Config+0xd0>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c8:	4a28      	ldr	r2, [pc, #160]	; (800066c <SystemClock_Config+0xd0>)
 80005ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ce:	6413      	str	r3, [r2, #64]	; 0x40
 80005d0:	4b26      	ldr	r3, [pc, #152]	; (800066c <SystemClock_Config+0xd0>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005dc:	4b24      	ldr	r3, [pc, #144]	; (8000670 <SystemClock_Config+0xd4>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005e4:	4a22      	ldr	r2, [pc, #136]	; (8000670 <SystemClock_Config+0xd4>)
 80005e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ea:	6013      	str	r3, [r2, #0]
 80005ec:	4b20      	ldr	r3, [pc, #128]	; (8000670 <SystemClock_Config+0xd4>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005f4:	603b      	str	r3, [r7, #0]
 80005f6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f8:	2301      	movs	r3, #1
 80005fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005fc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000600:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000602:	2302      	movs	r3, #2
 8000604:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000606:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800060a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800060c:	2304      	movs	r3, #4
 800060e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000610:	2378      	movs	r3, #120	; 0x78
 8000612:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000614:	2302      	movs	r3, #2
 8000616:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000618:	2305      	movs	r3, #5
 800061a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800061c:	2302      	movs	r3, #2
 800061e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000620:	f107 031c 	add.w	r3, r7, #28
 8000624:	4618      	mov	r0, r3
 8000626:	f001 fc09 	bl	8001e3c <HAL_RCC_OscConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000630:	f000 f9de 	bl	80009f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000634:	230f      	movs	r3, #15
 8000636:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000638:	2302      	movs	r3, #2
 800063a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800063c:	2380      	movs	r3, #128	; 0x80
 800063e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000640:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000644:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000646:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800064a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800064c:	f107 0308 	add.w	r3, r7, #8
 8000650:	2101      	movs	r1, #1
 8000652:	4618      	mov	r0, r3
 8000654:	f001 fea0 	bl	8002398 <HAL_RCC_ClockConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800065e:	f000 f9c7 	bl	80009f0 <Error_Handler>
  }
}
 8000662:	bf00      	nop
 8000664:	3750      	adds	r7, #80	; 0x50
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40023800 	.word	0x40023800
 8000670:	40007000 	.word	0x40007000

08000674 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000678:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <MX_ETH_Init+0x84>)
 800067a:	4a20      	ldr	r2, [pc, #128]	; (80006fc <MX_ETH_Init+0x88>)
 800067c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800067e:	4b20      	ldr	r3, [pc, #128]	; (8000700 <MX_ETH_Init+0x8c>)
 8000680:	2200      	movs	r2, #0
 8000682:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000684:	4b1e      	ldr	r3, [pc, #120]	; (8000700 <MX_ETH_Init+0x8c>)
 8000686:	2280      	movs	r2, #128	; 0x80
 8000688:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800068a:	4b1d      	ldr	r3, [pc, #116]	; (8000700 <MX_ETH_Init+0x8c>)
 800068c:	22e1      	movs	r2, #225	; 0xe1
 800068e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000690:	4b1b      	ldr	r3, [pc, #108]	; (8000700 <MX_ETH_Init+0x8c>)
 8000692:	2200      	movs	r2, #0
 8000694:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000696:	4b1a      	ldr	r3, [pc, #104]	; (8000700 <MX_ETH_Init+0x8c>)
 8000698:	2200      	movs	r2, #0
 800069a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800069c:	4b18      	ldr	r3, [pc, #96]	; (8000700 <MX_ETH_Init+0x8c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006a2:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <MX_ETH_Init+0x84>)
 80006a4:	4a16      	ldr	r2, [pc, #88]	; (8000700 <MX_ETH_Init+0x8c>)
 80006a6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006a8:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <MX_ETH_Init+0x84>)
 80006aa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80006ae:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006b0:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_ETH_Init+0x84>)
 80006b2:	4a14      	ldr	r2, [pc, #80]	; (8000704 <MX_ETH_Init+0x90>)
 80006b4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006b6:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <MX_ETH_Init+0x84>)
 80006b8:	4a13      	ldr	r2, [pc, #76]	; (8000708 <MX_ETH_Init+0x94>)
 80006ba:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006bc:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_ETH_Init+0x84>)
 80006be:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80006c2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006c4:	480c      	ldr	r0, [pc, #48]	; (80006f8 <MX_ETH_Init+0x84>)
 80006c6:	f000 fd5b 	bl	8001180 <HAL_ETH_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80006d0:	f000 f98e 	bl	80009f0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80006d4:	2238      	movs	r2, #56	; 0x38
 80006d6:	2100      	movs	r1, #0
 80006d8:	480c      	ldr	r0, [pc, #48]	; (800070c <MX_ETH_Init+0x98>)
 80006da:	f006 fe37 	bl	800734c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80006de:	4b0b      	ldr	r3, [pc, #44]	; (800070c <MX_ETH_Init+0x98>)
 80006e0:	2221      	movs	r2, #33	; 0x21
 80006e2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80006e4:	4b09      	ldr	r3, [pc, #36]	; (800070c <MX_ETH_Init+0x98>)
 80006e6:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80006ea:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80006ec:	4b07      	ldr	r3, [pc, #28]	; (800070c <MX_ETH_Init+0x98>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	200001a4 	.word	0x200001a4
 80006fc:	40028000 	.word	0x40028000
 8000700:	200007ec 	.word	0x200007ec
 8000704:	200000b0 	.word	0x200000b0
 8000708:	20000010 	.word	0x20000010
 800070c:	2000016c 	.word	0x2000016c

08000710 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000714:	4b14      	ldr	r3, [pc, #80]	; (8000768 <MX_USART3_UART_Init+0x58>)
 8000716:	4a15      	ldr	r2, [pc, #84]	; (800076c <MX_USART3_UART_Init+0x5c>)
 8000718:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800071a:	4b13      	ldr	r3, [pc, #76]	; (8000768 <MX_USART3_UART_Init+0x58>)
 800071c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000720:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_USART3_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_USART3_UART_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_USART3_UART_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_USART3_UART_Init+0x58>)
 8000736:	220c      	movs	r2, #12
 8000738:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <MX_USART3_UART_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_USART3_UART_Init+0x58>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <MX_USART3_UART_Init+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_USART3_UART_Init+0x58>)
 800074e:	2200      	movs	r2, #0
 8000750:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <MX_USART3_UART_Init+0x58>)
 8000754:	f002 ff80 	bl	8003658 <HAL_UART_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800075e:	f000 f947 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000254 	.word	0x20000254
 800076c:	40004800 	.word	0x40004800

08000770 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000774:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000776:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800077a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800077e:	2206      	movs	r2, #6
 8000780:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000784:	2202      	movs	r2, #2
 8000786:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800078a:	2200      	movs	r2, #0
 800078c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000790:	2202      	movs	r2, #2
 8000792:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000794:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000796:	2201      	movs	r2, #1
 8000798:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007b2:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b4:	f001 f9e9 	bl	8001b8a <HAL_PCD_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007be:	f000 f917 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	200002dc 	.word	0x200002dc

080007cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08c      	sub	sp, #48	; 0x30
 80007d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e2:	4b47      	ldr	r3, [pc, #284]	; (8000900 <MX_GPIO_Init+0x134>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a46      	ldr	r2, [pc, #280]	; (8000900 <MX_GPIO_Init+0x134>)
 80007e8:	f043 0304 	orr.w	r3, r3, #4
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b44      	ldr	r3, [pc, #272]	; (8000900 <MX_GPIO_Init+0x134>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0304 	and.w	r3, r3, #4
 80007f6:	61bb      	str	r3, [r7, #24]
 80007f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fa:	4b41      	ldr	r3, [pc, #260]	; (8000900 <MX_GPIO_Init+0x134>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a40      	ldr	r2, [pc, #256]	; (8000900 <MX_GPIO_Init+0x134>)
 8000800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b3e      	ldr	r3, [pc, #248]	; (8000900 <MX_GPIO_Init+0x134>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	4b3b      	ldr	r3, [pc, #236]	; (8000900 <MX_GPIO_Init+0x134>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a3a      	ldr	r2, [pc, #232]	; (8000900 <MX_GPIO_Init+0x134>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b38      	ldr	r3, [pc, #224]	; (8000900 <MX_GPIO_Init+0x134>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082a:	4b35      	ldr	r3, [pc, #212]	; (8000900 <MX_GPIO_Init+0x134>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a34      	ldr	r2, [pc, #208]	; (8000900 <MX_GPIO_Init+0x134>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b32      	ldr	r3, [pc, #200]	; (8000900 <MX_GPIO_Init+0x134>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000842:	4b2f      	ldr	r3, [pc, #188]	; (8000900 <MX_GPIO_Init+0x134>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a2e      	ldr	r2, [pc, #184]	; (8000900 <MX_GPIO_Init+0x134>)
 8000848:	f043 0308 	orr.w	r3, r3, #8
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b2c      	ldr	r3, [pc, #176]	; (8000900 <MX_GPIO_Init+0x134>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0308 	and.w	r3, r3, #8
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800085a:	4b29      	ldr	r3, [pc, #164]	; (8000900 <MX_GPIO_Init+0x134>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a28      	ldr	r2, [pc, #160]	; (8000900 <MX_GPIO_Init+0x134>)
 8000860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b26      	ldr	r3, [pc, #152]	; (8000900 <MX_GPIO_Init+0x134>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin|GPIO_PIN_8
 8000872:	2200      	movs	r2, #0
 8000874:	f244 3181 	movw	r1, #17281	; 0x4381
 8000878:	4822      	ldr	r0, [pc, #136]	; (8000904 <MX_GPIO_Init+0x138>)
 800087a:	f001 f953 	bl	8001b24 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	2140      	movs	r1, #64	; 0x40
 8000882:	4821      	ldr	r0, [pc, #132]	; (8000908 <MX_GPIO_Init+0x13c>)
 8000884:	f001 f94e 	bl	8001b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000888:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800088e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	4619      	mov	r1, r3
 800089e:	481b      	ldr	r0, [pc, #108]	; (800090c <MX_GPIO_Init+0x140>)
 80008a0:	f000 ff94 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin PB8
                           PB9 */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin|GPIO_PIN_8
 80008a4:	f244 3381 	movw	r3, #17281	; 0x4381
 80008a8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	4811      	ldr	r0, [pc, #68]	; (8000904 <MX_GPIO_Init+0x138>)
 80008be:	f000 ff85 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008c2:	2340      	movs	r3, #64	; 0x40
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c6:	2301      	movs	r3, #1
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	480b      	ldr	r0, [pc, #44]	; (8000908 <MX_GPIO_Init+0x13c>)
 80008da:	f000 ff77 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008de:	2380      	movs	r3, #128	; 0x80
 80008e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e2:	2300      	movs	r3, #0
 80008e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_GPIO_Init+0x13c>)
 80008f2:	f000 ff6b 	bl	80017cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008f6:	bf00      	nop
 80008f8:	3730      	adds	r7, #48	; 0x30
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40023800 	.word	0x40023800
 8000904:	40020400 	.word	0x40020400
 8000908:	40021800 	.word	0x40021800
 800090c:	40020800 	.word	0x40020800

08000910 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000910:	b590      	push	{r4, r7, lr}
 8000912:	b087      	sub	sp, #28
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t message_dt[] = "Hi from DT\n\r";
 8000918:	4b13      	ldr	r3, [pc, #76]	; (8000968 <StartDefaultTask+0x58>)
 800091a:	f107 0408 	add.w	r4, r7, #8
 800091e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000920:	c407      	stmia	r4!, {r0, r1, r2}
 8000922:	7023      	strb	r3, [r4, #0]
	static uint8_t count = 0;
  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Transmit(&huart3, message_dt, sizeof(message_dt), 100);
 8000924:	f107 0108 	add.w	r1, r7, #8
 8000928:	2364      	movs	r3, #100	; 0x64
 800092a:	220d      	movs	r2, #13
 800092c:	480f      	ldr	r0, [pc, #60]	; (800096c <StartDefaultTask+0x5c>)
 800092e:	f002 fee1 	bl	80036f4 <HAL_UART_Transmit>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 8000932:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000936:	480e      	ldr	r0, [pc, #56]	; (8000970 <StartDefaultTask+0x60>)
 8000938:	f001 f90d 	bl	8001b56 <HAL_GPIO_TogglePin>
	  ++count;
 800093c:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <StartDefaultTask+0x64>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	3301      	adds	r3, #1
 8000942:	b2da      	uxtb	r2, r3
 8000944:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <StartDefaultTask+0x64>)
 8000946:	701a      	strb	r2, [r3, #0]

	  if (count == 8)
 8000948:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <StartDefaultTask+0x64>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b08      	cmp	r3, #8
 800094e:	d106      	bne.n	800095e <StartDefaultTask+0x4e>
	  {
		  osDelayUntil(10000);
 8000950:	f242 7010 	movw	r0, #10000	; 0x2710
 8000954:	f003 ffa6 	bl	80048a4 <osDelayUntil>
		  count = 0;
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <StartDefaultTask+0x64>)
 800095a:	2200      	movs	r2, #0
 800095c:	701a      	strb	r2, [r3, #0]
	  }
    osDelay(1000);
 800095e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000962:	f003 ff71 	bl	8004848 <osDelay>
	  HAL_UART_Transmit(&huart3, message_dt, sizeof(message_dt), 100);
 8000966:	e7dd      	b.n	8000924 <StartDefaultTask+0x14>
 8000968:	080073f4 	.word	0x080073f4
 800096c:	20000254 	.word	0x20000254
 8000970:	40020400 	.word	0x40020400
 8000974:	200007f2 	.word	0x200007f2

08000978 <task02_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task02_init */
void task02_init(void *argument)
{
 8000978:	b590      	push	{r4, r7, lr}
 800097a:	b087      	sub	sp, #28
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task02_init */
	uint8_t message_t2[] = "Hi from T2\n\r";
 8000980:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <task02_init+0x44>)
 8000982:	f107 0408 	add.w	r4, r7, #8
 8000986:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000988:	c407      	stmia	r4!, {r0, r1, r2}
 800098a:	7023      	strb	r3, [r4, #0]
  for(;;)
  {
//	  /* Suspend default task if count == 4 */
//	  if (count == 4)
//		  osThreadSuspend(defaultTaskHandle);
	  HAL_UART_Transmit(&huart3, message_t2, sizeof(message_t2), 100);
 800098c:	f107 0108 	add.w	r1, r7, #8
 8000990:	2364      	movs	r3, #100	; 0x64
 8000992:	220d      	movs	r2, #13
 8000994:	480a      	ldr	r0, [pc, #40]	; (80009c0 <task02_init+0x48>)
 8000996:	f002 fead 	bl	80036f4 <HAL_UART_Transmit>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 800099a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800099e:	4809      	ldr	r0, [pc, #36]	; (80009c4 <task02_init+0x4c>)
 80009a0:	f001 f8d9 	bl	8001b56 <HAL_GPIO_TogglePin>
	  ++count;
 80009a4:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <task02_init+0x50>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	3301      	adds	r3, #1
 80009aa:	b2da      	uxtb	r2, r3
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <task02_init+0x50>)
 80009ae:	701a      	strb	r2, [r3, #0]
//	  {
//		  HAL_UART_Transmit(&huart3, "Resume\n\r", sizeof("Resume\n\r"), 100);
//		  osThreadResume(defaultTaskHandle);
//		  count = 0;
//	  }
    osDelay(2000);
 80009b0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009b4:	f003 ff48 	bl	8004848 <osDelay>
	  HAL_UART_Transmit(&huart3, message_t2, sizeof(message_t2), 100);
 80009b8:	e7e8      	b.n	800098c <task02_init+0x14>
 80009ba:	bf00      	nop
 80009bc:	08007404 	.word	0x08007404
 80009c0:	20000254 	.word	0x20000254
 80009c4:	40020400 	.word	0x40020400
 80009c8:	200007f3 	.word	0x200007f3

080009cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a04      	ldr	r2, [pc, #16]	; (80009ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d101      	bne.n	80009e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009de:	f000 faa9 	bl	8000f34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40001000 	.word	0x40001000

080009f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f4:	b672      	cpsid	i
}
 80009f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <Error_Handler+0x8>
	...

080009fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a02:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a06:	4a10      	ldr	r2, [pc, #64]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1e:	4a0a      	ldr	r2, [pc, #40]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a24:	6453      	str	r3, [r2, #68]	; 0x44
 8000a26:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a2e:	603b      	str	r3, [r7, #0]
 8000a30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	210f      	movs	r1, #15
 8000a36:	f06f 0001 	mvn.w	r0, #1
 8000a3a:	f000 fb77 	bl	800112c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40023800 	.word	0x40023800

08000a4c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08e      	sub	sp, #56	; 0x38
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a4e      	ldr	r2, [pc, #312]	; (8000ba4 <HAL_ETH_MspInit+0x158>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	f040 8096 	bne.w	8000b9c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000a70:	4b4d      	ldr	r3, [pc, #308]	; (8000ba8 <HAL_ETH_MspInit+0x15c>)
 8000a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a74:	4a4c      	ldr	r2, [pc, #304]	; (8000ba8 <HAL_ETH_MspInit+0x15c>)
 8000a76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7c:	4b4a      	ldr	r3, [pc, #296]	; (8000ba8 <HAL_ETH_MspInit+0x15c>)
 8000a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a84:	623b      	str	r3, [r7, #32]
 8000a86:	6a3b      	ldr	r3, [r7, #32]
 8000a88:	4b47      	ldr	r3, [pc, #284]	; (8000ba8 <HAL_ETH_MspInit+0x15c>)
 8000a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8c:	4a46      	ldr	r2, [pc, #280]	; (8000ba8 <HAL_ETH_MspInit+0x15c>)
 8000a8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a92:	6313      	str	r3, [r2, #48]	; 0x30
 8000a94:	4b44      	ldr	r3, [pc, #272]	; (8000ba8 <HAL_ETH_MspInit+0x15c>)
 8000a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000a9c:	61fb      	str	r3, [r7, #28]
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	4b41      	ldr	r3, [pc, #260]	; (8000ba8 <HAL_ETH_MspInit+0x15c>)
 8000aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa4:	4a40      	ldr	r2, [pc, #256]	; (8000ba8 <HAL_ETH_MspInit+0x15c>)
 8000aa6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000aaa:	6313      	str	r3, [r2, #48]	; 0x30
 8000aac:	4b3e      	ldr	r3, [pc, #248]	; (8000ba8 <HAL_ETH_MspInit+0x15c>)
 8000aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000ab4:	61bb      	str	r3, [r7, #24]
 8000ab6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab8:	4b3b      	ldr	r3, [pc, #236]	; (8000ba8 <HAL_ETH_MspInit+0x15c>)
 8000aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abc:	4a3a      	ldr	r2, [pc, #232]	; (8000ba8 <HAL_ETH_MspInit+0x15c>)
 8000abe:	f043 0304 	orr.w	r3, r3, #4
 8000ac2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac4:	4b38      	ldr	r3, [pc, #224]	; (8000ba8 <HAL_ETH_MspInit+0x15c>)
 8000ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac8:	f003 0304 	and.w	r3, r3, #4
 8000acc:	617b      	str	r3, [r7, #20]
 8000ace:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad0:	4b35      	ldr	r3, [pc, #212]	; (8000ba8 <HAL_ETH_MspInit+0x15c>)
 8000ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad4:	4a34      	ldr	r2, [pc, #208]	; (8000ba8 <HAL_ETH_MspInit+0x15c>)
 8000ad6:	f043 0301 	orr.w	r3, r3, #1
 8000ada:	6313      	str	r3, [r2, #48]	; 0x30
 8000adc:	4b32      	ldr	r3, [pc, #200]	; (8000ba8 <HAL_ETH_MspInit+0x15c>)
 8000ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae0:	f003 0301 	and.w	r3, r3, #1
 8000ae4:	613b      	str	r3, [r7, #16]
 8000ae6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae8:	4b2f      	ldr	r3, [pc, #188]	; (8000ba8 <HAL_ETH_MspInit+0x15c>)
 8000aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aec:	4a2e      	ldr	r2, [pc, #184]	; (8000ba8 <HAL_ETH_MspInit+0x15c>)
 8000aee:	f043 0302 	orr.w	r3, r3, #2
 8000af2:	6313      	str	r3, [r2, #48]	; 0x30
 8000af4:	4b2c      	ldr	r3, [pc, #176]	; (8000ba8 <HAL_ETH_MspInit+0x15c>)
 8000af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af8:	f003 0302 	and.w	r3, r3, #2
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b00:	4b29      	ldr	r3, [pc, #164]	; (8000ba8 <HAL_ETH_MspInit+0x15c>)
 8000b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b04:	4a28      	ldr	r2, [pc, #160]	; (8000ba8 <HAL_ETH_MspInit+0x15c>)
 8000b06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0c:	4b26      	ldr	r3, [pc, #152]	; (8000ba8 <HAL_ETH_MspInit+0x15c>)
 8000b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b18:	2332      	movs	r3, #50	; 0x32
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b24:	2303      	movs	r3, #3
 8000b26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b28:	230b      	movs	r3, #11
 8000b2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b30:	4619      	mov	r1, r3
 8000b32:	481e      	ldr	r0, [pc, #120]	; (8000bac <HAL_ETH_MspInit+0x160>)
 8000b34:	f000 fe4a 	bl	80017cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b38:	2386      	movs	r3, #134	; 0x86
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b44:	2303      	movs	r3, #3
 8000b46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b48:	230b      	movs	r3, #11
 8000b4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b50:	4619      	mov	r1, r3
 8000b52:	4817      	ldr	r0, [pc, #92]	; (8000bb0 <HAL_ETH_MspInit+0x164>)
 8000b54:	f000 fe3a 	bl	80017cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b66:	2303      	movs	r3, #3
 8000b68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b6a:	230b      	movs	r3, #11
 8000b6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b72:	4619      	mov	r1, r3
 8000b74:	480f      	ldr	r0, [pc, #60]	; (8000bb4 <HAL_ETH_MspInit+0x168>)
 8000b76:	f000 fe29 	bl	80017cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b7a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b80:	2302      	movs	r3, #2
 8000b82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b8c:	230b      	movs	r3, #11
 8000b8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b94:	4619      	mov	r1, r3
 8000b96:	4808      	ldr	r0, [pc, #32]	; (8000bb8 <HAL_ETH_MspInit+0x16c>)
 8000b98:	f000 fe18 	bl	80017cc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000b9c:	bf00      	nop
 8000b9e:	3738      	adds	r7, #56	; 0x38
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40028000 	.word	0x40028000
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40020800 	.word	0x40020800
 8000bb0:	40020000 	.word	0x40020000
 8000bb4:	40020400 	.word	0x40020400
 8000bb8:	40021800 	.word	0x40021800

08000bbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b0ae      	sub	sp, #184	; 0xb8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	2290      	movs	r2, #144	; 0x90
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f006 fbb5 	bl	800734c <memset>
  if(huart->Instance==USART3)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a22      	ldr	r2, [pc, #136]	; (8000c70 <HAL_UART_MspInit+0xb4>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d13c      	bne.n	8000c66 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000bec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bf0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f001 fe24 	bl	8002848 <HAL_RCCEx_PeriphCLKConfig>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c06:	f7ff fef3 	bl	80009f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c0a:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <HAL_UART_MspInit+0xb8>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	4a19      	ldr	r2, [pc, #100]	; (8000c74 <HAL_UART_MspInit+0xb8>)
 8000c10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c14:	6413      	str	r3, [r2, #64]	; 0x40
 8000c16:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <HAL_UART_MspInit+0xb8>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c22:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <HAL_UART_MspInit+0xb8>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a13      	ldr	r2, [pc, #76]	; (8000c74 <HAL_UART_MspInit+0xb8>)
 8000c28:	f043 0308 	orr.w	r3, r3, #8
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <HAL_UART_MspInit+0xb8>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0308 	and.w	r3, r3, #8
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c42:	2302      	movs	r3, #2
 8000c44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c54:	2307      	movs	r3, #7
 8000c56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c5a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4805      	ldr	r0, [pc, #20]	; (8000c78 <HAL_UART_MspInit+0xbc>)
 8000c62:	f000 fdb3 	bl	80017cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c66:	bf00      	nop
 8000c68:	37b8      	adds	r7, #184	; 0xb8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40004800 	.word	0x40004800
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40020c00 	.word	0x40020c00

08000c7c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b0ae      	sub	sp, #184	; 0xb8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	2290      	movs	r2, #144	; 0x90
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f006 fb55 	bl	800734c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000caa:	d159      	bne.n	8000d60 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000cac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000cb0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f001 fdc3 	bl	8002848 <HAL_RCCEx_PeriphCLKConfig>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000cc8:	f7ff fe92 	bl	80009f0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ccc:	4b26      	ldr	r3, [pc, #152]	; (8000d68 <HAL_PCD_MspInit+0xec>)
 8000cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd0:	4a25      	ldr	r2, [pc, #148]	; (8000d68 <HAL_PCD_MspInit+0xec>)
 8000cd2:	f043 0301 	orr.w	r3, r3, #1
 8000cd6:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd8:	4b23      	ldr	r3, [pc, #140]	; (8000d68 <HAL_PCD_MspInit+0xec>)
 8000cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cdc:	f003 0301 	and.w	r3, r3, #1
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ce4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000ce8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cec:	2302      	movs	r3, #2
 8000cee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000cfe:	230a      	movs	r3, #10
 8000d00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d04:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4818      	ldr	r0, [pc, #96]	; (8000d6c <HAL_PCD_MspInit+0xf0>)
 8000d0c:	f000 fd5e 	bl	80017cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d24:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4810      	ldr	r0, [pc, #64]	; (8000d6c <HAL_PCD_MspInit+0xf0>)
 8000d2c:	f000 fd4e 	bl	80017cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d30:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <HAL_PCD_MspInit+0xec>)
 8000d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d34:	4a0c      	ldr	r2, [pc, #48]	; (8000d68 <HAL_PCD_MspInit+0xec>)
 8000d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d3a:	6353      	str	r3, [r2, #52]	; 0x34
 8000d3c:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <HAL_PCD_MspInit+0xec>)
 8000d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <HAL_PCD_MspInit+0xec>)
 8000d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4c:	4a06      	ldr	r2, [pc, #24]	; (8000d68 <HAL_PCD_MspInit+0xec>)
 8000d4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d52:	6453      	str	r3, [r2, #68]	; 0x44
 8000d54:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <HAL_PCD_MspInit+0xec>)
 8000d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000d60:	bf00      	nop
 8000d62:	37b8      	adds	r7, #184	; 0xb8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	40020000 	.word	0x40020000

08000d70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08e      	sub	sp, #56	; 0x38
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d80:	4b33      	ldr	r3, [pc, #204]	; (8000e50 <HAL_InitTick+0xe0>)
 8000d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d84:	4a32      	ldr	r2, [pc, #200]	; (8000e50 <HAL_InitTick+0xe0>)
 8000d86:	f043 0310 	orr.w	r3, r3, #16
 8000d8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8c:	4b30      	ldr	r3, [pc, #192]	; (8000e50 <HAL_InitTick+0xe0>)
 8000d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d90:	f003 0310 	and.w	r3, r3, #16
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d98:	f107 0210 	add.w	r2, r7, #16
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	4611      	mov	r1, r2
 8000da2:	4618      	mov	r0, r3
 8000da4:	f001 fd1e 	bl	80027e4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000da8:	6a3b      	ldr	r3, [r7, #32]
 8000daa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d103      	bne.n	8000dba <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000db2:	f001 fcef 	bl	8002794 <HAL_RCC_GetPCLK1Freq>
 8000db6:	6378      	str	r0, [r7, #52]	; 0x34
 8000db8:	e004      	b.n	8000dc4 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000dba:	f001 fceb 	bl	8002794 <HAL_RCC_GetPCLK1Freq>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dc6:	4a23      	ldr	r2, [pc, #140]	; (8000e54 <HAL_InitTick+0xe4>)
 8000dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dcc:	0c9b      	lsrs	r3, r3, #18
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000dd2:	4b21      	ldr	r3, [pc, #132]	; (8000e58 <HAL_InitTick+0xe8>)
 8000dd4:	4a21      	ldr	r2, [pc, #132]	; (8000e5c <HAL_InitTick+0xec>)
 8000dd6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000dd8:	4b1f      	ldr	r3, [pc, #124]	; (8000e58 <HAL_InitTick+0xe8>)
 8000dda:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dde:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000de0:	4a1d      	ldr	r2, [pc, #116]	; (8000e58 <HAL_InitTick+0xe8>)
 8000de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000de4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000de6:	4b1c      	ldr	r3, [pc, #112]	; (8000e58 <HAL_InitTick+0xe8>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dec:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <HAL_InitTick+0xe8>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df2:	4b19      	ldr	r3, [pc, #100]	; (8000e58 <HAL_InitTick+0xe8>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000df8:	4817      	ldr	r0, [pc, #92]	; (8000e58 <HAL_InitTick+0xe8>)
 8000dfa:	f002 f94d 	bl	8003098 <HAL_TIM_Base_Init>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000e04:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d11b      	bne.n	8000e44 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000e0c:	4812      	ldr	r0, [pc, #72]	; (8000e58 <HAL_InitTick+0xe8>)
 8000e0e:	f002 f9a5 	bl	800315c <HAL_TIM_Base_Start_IT>
 8000e12:	4603      	mov	r3, r0
 8000e14:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000e18:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d111      	bne.n	8000e44 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e20:	2036      	movs	r0, #54	; 0x36
 8000e22:	f000 f99f 	bl	8001164 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2b0f      	cmp	r3, #15
 8000e2a:	d808      	bhi.n	8000e3e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	6879      	ldr	r1, [r7, #4]
 8000e30:	2036      	movs	r0, #54	; 0x36
 8000e32:	f000 f97b 	bl	800112c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e36:	4a0a      	ldr	r2, [pc, #40]	; (8000e60 <HAL_InitTick+0xf0>)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6013      	str	r3, [r2, #0]
 8000e3c:	e002      	b.n	8000e44 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e44:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3738      	adds	r7, #56	; 0x38
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40023800 	.word	0x40023800
 8000e54:	431bde83 	.word	0x431bde83
 8000e58:	200007f4 	.word	0x200007f4
 8000e5c:	40001000 	.word	0x40001000
 8000e60:	20000004 	.word	0x20000004

08000e64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e68:	e7fe      	b.n	8000e68 <NMI_Handler+0x4>

08000e6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e6e:	e7fe      	b.n	8000e6e <HardFault_Handler+0x4>

08000e70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <MemManage_Handler+0x4>

08000e76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e7a:	e7fe      	b.n	8000e7a <BusFault_Handler+0x4>

08000e7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <UsageFault_Handler+0x4>

08000e82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e94:	4802      	ldr	r0, [pc, #8]	; (8000ea0 <TIM6_DAC_IRQHandler+0x10>)
 8000e96:	f002 f9d9 	bl	800324c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	200007f4 	.word	0x200007f4

08000ea4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <SystemInit+0x20>)
 8000eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eae:	4a05      	ldr	r2, [pc, #20]	; (8000ec4 <SystemInit+0x20>)
 8000eb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ec8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ecc:	480d      	ldr	r0, [pc, #52]	; (8000f04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ece:	490e      	ldr	r1, [pc, #56]	; (8000f08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ed0:	4a0e      	ldr	r2, [pc, #56]	; (8000f0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed4:	e002      	b.n	8000edc <LoopCopyDataInit>

08000ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eda:	3304      	adds	r3, #4

08000edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee0:	d3f9      	bcc.n	8000ed6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ee2:	4a0b      	ldr	r2, [pc, #44]	; (8000f10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ee4:	4c0b      	ldr	r4, [pc, #44]	; (8000f14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee8:	e001      	b.n	8000eee <LoopFillZerobss>

08000eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eec:	3204      	adds	r2, #4

08000eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef0:	d3fb      	bcc.n	8000eea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ef2:	f7ff ffd7 	bl	8000ea4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ef6:	f006 fa31 	bl	800735c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000efa:	f7ff fb1f 	bl	800053c <main>
  bx  lr    
 8000efe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f00:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f08:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000f0c:	0800749c 	.word	0x0800749c
  ldr r2, =_sbss
 8000f10:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8000f14:	2000518c 	.word	0x2000518c

08000f18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f18:	e7fe      	b.n	8000f18 <ADC_IRQHandler>

08000f1a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f1e:	2003      	movs	r0, #3
 8000f20:	f000 f8f9 	bl	8001116 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f24:	200f      	movs	r0, #15
 8000f26:	f7ff ff23 	bl	8000d70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f2a:	f7ff fd67 	bl	80009fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f2e:	2300      	movs	r3, #0
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_IncTick+0x20>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_IncTick+0x24>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4413      	add	r3, r2
 8000f44:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <HAL_IncTick+0x24>)
 8000f46:	6013      	str	r3, [r2, #0]
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	20000008 	.word	0x20000008
 8000f58:	20000840 	.word	0x20000840

08000f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f60:	4b03      	ldr	r3, [pc, #12]	; (8000f70 <HAL_GetTick+0x14>)
 8000f62:	681b      	ldr	r3, [r3, #0]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20000840 	.word	0x20000840

08000f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f7c:	f7ff ffee 	bl	8000f5c <HAL_GetTick>
 8000f80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f8c:	d005      	beq.n	8000f9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <HAL_Delay+0x44>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	461a      	mov	r2, r3
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	4413      	add	r3, r2
 8000f98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f9a:	bf00      	nop
 8000f9c:	f7ff ffde 	bl	8000f5c <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d8f7      	bhi.n	8000f9c <HAL_Delay+0x28>
  {
  }
}
 8000fac:	bf00      	nop
 8000fae:	bf00      	nop
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000008 	.word	0x20000008

08000fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fcc:	4b0b      	ldr	r3, [pc, #44]	; (8000ffc <__NVIC_SetPriorityGrouping+0x40>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd2:	68ba      	ldr	r2, [r7, #8]
 8000fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd8:	4013      	ands	r3, r2
 8000fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fea:	4a04      	ldr	r2, [pc, #16]	; (8000ffc <__NVIC_SetPriorityGrouping+0x40>)
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	60d3      	str	r3, [r2, #12]
}
 8000ff0:	bf00      	nop
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000ed00 	.word	0xe000ed00
 8001000:	05fa0000 	.word	0x05fa0000

08001004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <__NVIC_GetPriorityGrouping+0x18>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	0a1b      	lsrs	r3, r3, #8
 800100e:	f003 0307 	and.w	r3, r3, #7
}
 8001012:	4618      	mov	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	2b00      	cmp	r3, #0
 8001030:	db0b      	blt.n	800104a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	f003 021f 	and.w	r2, r3, #31
 8001038:	4907      	ldr	r1, [pc, #28]	; (8001058 <__NVIC_EnableIRQ+0x38>)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	095b      	lsrs	r3, r3, #5
 8001040:	2001      	movs	r0, #1
 8001042:	fa00 f202 	lsl.w	r2, r0, r2
 8001046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	e000e100 	.word	0xe000e100

0800105c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	6039      	str	r1, [r7, #0]
 8001066:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106c:	2b00      	cmp	r3, #0
 800106e:	db0a      	blt.n	8001086 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	b2da      	uxtb	r2, r3
 8001074:	490c      	ldr	r1, [pc, #48]	; (80010a8 <__NVIC_SetPriority+0x4c>)
 8001076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107a:	0112      	lsls	r2, r2, #4
 800107c:	b2d2      	uxtb	r2, r2
 800107e:	440b      	add	r3, r1
 8001080:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001084:	e00a      	b.n	800109c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	b2da      	uxtb	r2, r3
 800108a:	4908      	ldr	r1, [pc, #32]	; (80010ac <__NVIC_SetPriority+0x50>)
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	f003 030f 	and.w	r3, r3, #15
 8001092:	3b04      	subs	r3, #4
 8001094:	0112      	lsls	r2, r2, #4
 8001096:	b2d2      	uxtb	r2, r2
 8001098:	440b      	add	r3, r1
 800109a:	761a      	strb	r2, [r3, #24]
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000e100 	.word	0xe000e100
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b089      	sub	sp, #36	; 0x24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	f1c3 0307 	rsb	r3, r3, #7
 80010ca:	2b04      	cmp	r3, #4
 80010cc:	bf28      	it	cs
 80010ce:	2304      	movcs	r3, #4
 80010d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	3304      	adds	r3, #4
 80010d6:	2b06      	cmp	r3, #6
 80010d8:	d902      	bls.n	80010e0 <NVIC_EncodePriority+0x30>
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	3b03      	subs	r3, #3
 80010de:	e000      	b.n	80010e2 <NVIC_EncodePriority+0x32>
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43da      	mvns	r2, r3
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	401a      	ands	r2, r3
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001102:	43d9      	mvns	r1, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001108:	4313      	orrs	r3, r2
         );
}
 800110a:	4618      	mov	r0, r3
 800110c:	3724      	adds	r7, #36	; 0x24
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff ff4c 	bl	8000fbc <__NVIC_SetPriorityGrouping>
}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
 8001138:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800113a:	2300      	movs	r3, #0
 800113c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800113e:	f7ff ff61 	bl	8001004 <__NVIC_GetPriorityGrouping>
 8001142:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	68b9      	ldr	r1, [r7, #8]
 8001148:	6978      	ldr	r0, [r7, #20]
 800114a:	f7ff ffb1 	bl	80010b0 <NVIC_EncodePriority>
 800114e:	4602      	mov	r2, r0
 8001150:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001154:	4611      	mov	r1, r2
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff ff80 	bl	800105c <__NVIC_SetPriority>
}
 800115c:	bf00      	nop
 800115e:	3718      	adds	r7, #24
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff ff54 	bl	8001020 <__NVIC_EnableIRQ>
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d101      	bne.n	8001192 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e06a      	b.n	8001268 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001198:	2b00      	cmp	r3, #0
 800119a:	d106      	bne.n	80011aa <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2223      	movs	r2, #35	; 0x23
 80011a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff fc51 	bl	8000a4c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011aa:	4b31      	ldr	r3, [pc, #196]	; (8001270 <HAL_ETH_Init+0xf0>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ae:	4a30      	ldr	r2, [pc, #192]	; (8001270 <HAL_ETH_Init+0xf0>)
 80011b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b4:	6453      	str	r3, [r2, #68]	; 0x44
 80011b6:	4b2e      	ldr	r3, [pc, #184]	; (8001270 <HAL_ETH_Init+0xf0>)
 80011b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80011c2:	4b2c      	ldr	r3, [pc, #176]	; (8001274 <HAL_ETH_Init+0xf4>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	4a2b      	ldr	r2, [pc, #172]	; (8001274 <HAL_ETH_Init+0xf4>)
 80011c8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80011cc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80011ce:	4b29      	ldr	r3, [pc, #164]	; (8001274 <HAL_ETH_Init+0xf4>)
 80011d0:	685a      	ldr	r2, [r3, #4]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	4927      	ldr	r1, [pc, #156]	; (8001274 <HAL_ETH_Init+0xf4>)
 80011d8:	4313      	orrs	r3, r2
 80011da:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80011dc:	4b25      	ldr	r3, [pc, #148]	; (8001274 <HAL_ETH_Init+0xf4>)
 80011de:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	6812      	ldr	r2, [r2, #0]
 80011ee:	f043 0301 	orr.w	r3, r3, #1
 80011f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80011f6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011f8:	f7ff feb0 	bl	8000f5c <HAL_GetTick>
 80011fc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80011fe:	e011      	b.n	8001224 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001200:	f7ff feac 	bl	8000f5c <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800120e:	d909      	bls.n	8001224 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2204      	movs	r2, #4
 8001214:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	22e0      	movs	r2, #224	; 0xe0
 800121c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	e021      	b.n	8001268 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1e4      	bne.n	8001200 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f000 f958 	bl	80014ec <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f000 f9ff 	bl	8001640 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f000 fa55 	bl	80016f2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	461a      	mov	r2, r3
 800124e:	2100      	movs	r1, #0
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f000 f9bd 	bl	80015d0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2210      	movs	r2, #16
 8001262:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001266:	2300      	movs	r3, #0
}
 8001268:	4618      	mov	r0, r3
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40023800 	.word	0x40023800
 8001274:	40013800 	.word	0x40013800

08001278 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800128a:	68fa      	ldr	r2, [r7, #12]
 800128c:	4b51      	ldr	r3, [pc, #324]	; (80013d4 <ETH_SetMACConfig+0x15c>)
 800128e:	4013      	ands	r3, r2
 8001290:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	7c1b      	ldrb	r3, [r3, #16]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d102      	bne.n	80012a0 <ETH_SetMACConfig+0x28>
 800129a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800129e:	e000      	b.n	80012a2 <ETH_SetMACConfig+0x2a>
 80012a0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	7c5b      	ldrb	r3, [r3, #17]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d102      	bne.n	80012b0 <ETH_SetMACConfig+0x38>
 80012aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012ae:	e000      	b.n	80012b2 <ETH_SetMACConfig+0x3a>
 80012b0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80012b2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80012b8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	7fdb      	ldrb	r3, [r3, #31]
 80012be:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80012c0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80012c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80012c8:	683a      	ldr	r2, [r7, #0]
 80012ca:	7f92      	ldrb	r2, [r2, #30]
 80012cc:	2a00      	cmp	r2, #0
 80012ce:	d102      	bne.n	80012d6 <ETH_SetMACConfig+0x5e>
 80012d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012d4:	e000      	b.n	80012d8 <ETH_SetMACConfig+0x60>
 80012d6:	2200      	movs	r2, #0
                        macconf->Speed |
 80012d8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	7f1b      	ldrb	r3, [r3, #28]
 80012de:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80012e0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80012e6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	791b      	ldrb	r3, [r3, #4]
 80012ec:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80012ee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80012f0:	683a      	ldr	r2, [r7, #0]
 80012f2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80012f6:	2a00      	cmp	r2, #0
 80012f8:	d102      	bne.n	8001300 <ETH_SetMACConfig+0x88>
 80012fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012fe:	e000      	b.n	8001302 <ETH_SetMACConfig+0x8a>
 8001300:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001302:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	7bdb      	ldrb	r3, [r3, #15]
 8001308:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800130a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001310:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001318:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800131a:	4313      	orrs	r3, r2
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	4313      	orrs	r3, r2
 8001320:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	68fa      	ldr	r2, [r7, #12]
 8001328:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001332:	2001      	movs	r0, #1
 8001334:	f7ff fe1e 	bl	8000f74 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	68fa      	ldr	r2, [r7, #12]
 800133e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001348:	68fa      	ldr	r2, [r7, #12]
 800134a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800134e:	4013      	ands	r3, r2
 8001350:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001356:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001358:	683a      	ldr	r2, [r7, #0]
 800135a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800135e:	2a00      	cmp	r2, #0
 8001360:	d101      	bne.n	8001366 <ETH_SetMACConfig+0xee>
 8001362:	2280      	movs	r2, #128	; 0x80
 8001364:	e000      	b.n	8001368 <ETH_SetMACConfig+0xf0>
 8001366:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001368:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800136e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001370:	683a      	ldr	r2, [r7, #0]
 8001372:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001376:	2a01      	cmp	r2, #1
 8001378:	d101      	bne.n	800137e <ETH_SetMACConfig+0x106>
 800137a:	2208      	movs	r2, #8
 800137c:	e000      	b.n	8001380 <ETH_SetMACConfig+0x108>
 800137e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001380:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001382:	683a      	ldr	r2, [r7, #0]
 8001384:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001388:	2a01      	cmp	r2, #1
 800138a:	d101      	bne.n	8001390 <ETH_SetMACConfig+0x118>
 800138c:	2204      	movs	r2, #4
 800138e:	e000      	b.n	8001392 <ETH_SetMACConfig+0x11a>
 8001390:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001392:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800139a:	2a01      	cmp	r2, #1
 800139c:	d101      	bne.n	80013a2 <ETH_SetMACConfig+0x12a>
 800139e:	2202      	movs	r2, #2
 80013a0:	e000      	b.n	80013a4 <ETH_SetMACConfig+0x12c>
 80013a2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80013a4:	4313      	orrs	r3, r2
 80013a6:	68fa      	ldr	r2, [r7, #12]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	68fa      	ldr	r2, [r7, #12]
 80013b2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80013bc:	2001      	movs	r0, #1
 80013be:	f7ff fdd9 	bl	8000f74 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	619a      	str	r2, [r3, #24]
}
 80013ca:	bf00      	nop
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	ff20810f 	.word	0xff20810f

080013d8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	4b3d      	ldr	r3, [pc, #244]	; (80014e8 <ETH_SetDMAConfig+0x110>)
 80013f2:	4013      	ands	r3, r2
 80013f4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	7b1b      	ldrb	r3, [r3, #12]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d102      	bne.n	8001404 <ETH_SetDMAConfig+0x2c>
 80013fe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001402:	e000      	b.n	8001406 <ETH_SetDMAConfig+0x2e>
 8001404:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	7b5b      	ldrb	r3, [r3, #13]
 800140a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800140c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800140e:	683a      	ldr	r2, [r7, #0]
 8001410:	7f52      	ldrb	r2, [r2, #29]
 8001412:	2a00      	cmp	r2, #0
 8001414:	d102      	bne.n	800141c <ETH_SetDMAConfig+0x44>
 8001416:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800141a:	e000      	b.n	800141e <ETH_SetDMAConfig+0x46>
 800141c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800141e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	7b9b      	ldrb	r3, [r3, #14]
 8001424:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001426:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800142c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	7f1b      	ldrb	r3, [r3, #28]
 8001432:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001434:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	7f9b      	ldrb	r3, [r3, #30]
 800143a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800143c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001442:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800144a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800144c:	4313      	orrs	r3, r2
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	4313      	orrs	r3, r2
 8001452:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800145c:	461a      	mov	r2, r3
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800146e:	2001      	movs	r0, #1
 8001470:	f7ff fd80 	bl	8000f74 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800147c:	461a      	mov	r2, r3
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	791b      	ldrb	r3, [r3, #4]
 8001486:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800148c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001492:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001498:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014a0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80014a2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80014aa:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80014b0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	6812      	ldr	r2, [r2, #0]
 80014b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014be:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014cc:	2001      	movs	r0, #1
 80014ce:	f7ff fd51 	bl	8000f74 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014da:	461a      	mov	r2, r3
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	6013      	str	r3, [r2, #0]
}
 80014e0:	bf00      	nop
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	f8de3f23 	.word	0xf8de3f23

080014ec <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b0a6      	sub	sp, #152	; 0x98
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80014f4:	2301      	movs	r3, #1
 80014f6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80014fa:	2301      	movs	r3, #1
 80014fc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001500:	2300      	movs	r3, #0
 8001502:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001504:	2300      	movs	r3, #0
 8001506:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800150a:	2301      	movs	r3, #1
 800150c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001510:	2300      	movs	r3, #0
 8001512:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001516:	2301      	movs	r3, #1
 8001518:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800151c:	2300      	movs	r3, #0
 800151e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001522:	2300      	movs	r3, #0
 8001524:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001528:	2300      	movs	r3, #0
 800152a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800152c:	2300      	movs	r3, #0
 800152e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001532:	2300      	movs	r3, #0
 8001534:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001536:	2300      	movs	r3, #0
 8001538:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800153c:	2300      	movs	r3, #0
 800153e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001542:	2300      	movs	r3, #0
 8001544:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001548:	2300      	movs	r3, #0
 800154a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800154e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001552:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001554:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001558:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800155a:	2300      	movs	r3, #0
 800155c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001560:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001564:	4619      	mov	r1, r3
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7ff fe86 	bl	8001278 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800156c:	2301      	movs	r3, #1
 800156e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001570:	2301      	movs	r3, #1
 8001572:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001574:	2301      	movs	r3, #1
 8001576:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800157a:	2301      	movs	r3, #1
 800157c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001582:	2300      	movs	r3, #0
 8001584:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001588:	2300      	movs	r3, #0
 800158a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800158e:	2300      	movs	r3, #0
 8001590:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001592:	2301      	movs	r3, #1
 8001594:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001598:	2301      	movs	r3, #1
 800159a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800159c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015a0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80015a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015a6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80015a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015ac:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80015ae:	2301      	movs	r3, #1
 80015b0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80015b4:	2300      	movs	r3, #0
 80015b6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80015bc:	f107 0308 	add.w	r3, r7, #8
 80015c0:	4619      	mov	r1, r3
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff ff08 	bl	80013d8 <ETH_SetDMAConfig>
}
 80015c8:	bf00      	nop
 80015ca:	3798      	adds	r7, #152	; 0x98
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b087      	sub	sp, #28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3305      	adds	r3, #5
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	021b      	lsls	r3, r3, #8
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	3204      	adds	r2, #4
 80015e8:	7812      	ldrb	r2, [r2, #0]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80015ee:	68ba      	ldr	r2, [r7, #8]
 80015f0:	4b11      	ldr	r3, [pc, #68]	; (8001638 <ETH_MACAddressConfig+0x68>)
 80015f2:	4413      	add	r3, r2
 80015f4:	461a      	mov	r2, r3
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	3303      	adds	r3, #3
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	061a      	lsls	r2, r3, #24
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	3302      	adds	r3, #2
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	041b      	lsls	r3, r3, #16
 800160a:	431a      	orrs	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3301      	adds	r3, #1
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	021b      	lsls	r3, r3, #8
 8001614:	4313      	orrs	r3, r2
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	7812      	ldrb	r2, [r2, #0]
 800161a:	4313      	orrs	r3, r2
 800161c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800161e:	68ba      	ldr	r2, [r7, #8]
 8001620:	4b06      	ldr	r3, [pc, #24]	; (800163c <ETH_MACAddressConfig+0x6c>)
 8001622:	4413      	add	r3, r2
 8001624:	461a      	mov	r2, r3
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	6013      	str	r3, [r2, #0]
}
 800162a:	bf00      	nop
 800162c:	371c      	adds	r7, #28
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	40028040 	.word	0x40028040
 800163c:	40028044 	.word	0x40028044

08001640 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001648:	2300      	movs	r3, #0
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	e03e      	b.n	80016cc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	68d9      	ldr	r1, [r3, #12]
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	4613      	mov	r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	4413      	add	r3, r2
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	440b      	add	r3, r1
 800165e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	2200      	movs	r2, #0
 800166a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	2200      	movs	r2, #0
 8001676:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001678:	68b9      	ldr	r1, [r7, #8]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	68fa      	ldr	r2, [r7, #12]
 800167e:	3206      	adds	r2, #6
 8001680:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2b02      	cmp	r3, #2
 8001694:	d80c      	bhi.n	80016b0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	68d9      	ldr	r1, [r3, #12]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	1c5a      	adds	r2, r3, #1
 800169e:	4613      	mov	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	440b      	add	r3, r1
 80016a8:	461a      	mov	r2, r3
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	e004      	b.n	80016ba <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	461a      	mov	r2, r3
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	3301      	adds	r3, #1
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2b03      	cmp	r3, #3
 80016d0:	d9bd      	bls.n	800164e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	68da      	ldr	r2, [r3, #12]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016e4:	611a      	str	r2, [r3, #16]
}
 80016e6:	bf00      	nop
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80016f2:	b480      	push	{r7}
 80016f4:	b085      	sub	sp, #20
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80016fa:	2300      	movs	r3, #0
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	e046      	b.n	800178e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6919      	ldr	r1, [r3, #16]
 8001704:	68fa      	ldr	r2, [r7, #12]
 8001706:	4613      	mov	r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4413      	add	r3, r2
 800170c:	00db      	lsls	r3, r3, #3
 800170e:	440b      	add	r3, r1
 8001710:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	2200      	movs	r2, #0
 800171c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	2200      	movs	r2, #0
 8001728:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	2200      	movs	r2, #0
 800172e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	2200      	movs	r2, #0
 8001734:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800173c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001744:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001752:	68b9      	ldr	r1, [r7, #8]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	3212      	adds	r2, #18
 800175a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2b02      	cmp	r3, #2
 8001762:	d80c      	bhi.n	800177e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6919      	ldr	r1, [r3, #16]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	1c5a      	adds	r2, r3, #1
 800176c:	4613      	mov	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4413      	add	r3, r2
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	440b      	add	r3, r1
 8001776:	461a      	mov	r2, r3
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	60da      	str	r2, [r3, #12]
 800177c:	e004      	b.n	8001788 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	461a      	mov	r2, r3
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	3301      	adds	r3, #1
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2b03      	cmp	r3, #3
 8001792:	d9b5      	bls.n	8001700 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	691a      	ldr	r2, [r3, #16]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017be:	60da      	str	r2, [r3, #12]
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b089      	sub	sp, #36	; 0x24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80017d6:	2300      	movs	r3, #0
 80017d8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80017da:	2300      	movs	r3, #0
 80017dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80017de:	2300      	movs	r3, #0
 80017e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80017e2:	2300      	movs	r3, #0
 80017e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80017e6:	2300      	movs	r3, #0
 80017e8:	61fb      	str	r3, [r7, #28]
 80017ea:	e175      	b.n	8001ad8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80017ec:	2201      	movs	r2, #1
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	697a      	ldr	r2, [r7, #20]
 80017fc:	4013      	ands	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	429a      	cmp	r2, r3
 8001806:	f040 8164 	bne.w	8001ad2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f003 0303 	and.w	r3, r3, #3
 8001812:	2b01      	cmp	r3, #1
 8001814:	d005      	beq.n	8001822 <HAL_GPIO_Init+0x56>
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d130      	bne.n	8001884 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	2203      	movs	r2, #3
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	43db      	mvns	r3, r3
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4013      	ands	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	68da      	ldr	r2, [r3, #12]
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4313      	orrs	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001858:	2201      	movs	r2, #1
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	43db      	mvns	r3, r3
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4013      	ands	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	091b      	lsrs	r3, r3, #4
 800186e:	f003 0201 	and.w	r2, r3, #1
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	4313      	orrs	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 0303 	and.w	r3, r3, #3
 800188c:	2b03      	cmp	r3, #3
 800188e:	d017      	beq.n	80018c0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	2203      	movs	r2, #3
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	4013      	ands	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f003 0303 	and.w	r3, r3, #3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d123      	bne.n	8001914 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	08da      	lsrs	r2, r3, #3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3208      	adds	r2, #8
 80018d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	f003 0307 	and.w	r3, r3, #7
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	220f      	movs	r2, #15
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	4013      	ands	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	691a      	ldr	r2, [r3, #16]
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4313      	orrs	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	08da      	lsrs	r2, r3, #3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	3208      	adds	r2, #8
 800190e:	69b9      	ldr	r1, [r7, #24]
 8001910:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	2203      	movs	r2, #3
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4013      	ands	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 0203 	and.w	r2, r3, #3
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4313      	orrs	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001950:	2b00      	cmp	r3, #0
 8001952:	f000 80be 	beq.w	8001ad2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001956:	4b66      	ldr	r3, [pc, #408]	; (8001af0 <HAL_GPIO_Init+0x324>)
 8001958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195a:	4a65      	ldr	r2, [pc, #404]	; (8001af0 <HAL_GPIO_Init+0x324>)
 800195c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001960:	6453      	str	r3, [r2, #68]	; 0x44
 8001962:	4b63      	ldr	r3, [pc, #396]	; (8001af0 <HAL_GPIO_Init+0x324>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800196e:	4a61      	ldr	r2, [pc, #388]	; (8001af4 <HAL_GPIO_Init+0x328>)
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	089b      	lsrs	r3, r3, #2
 8001974:	3302      	adds	r3, #2
 8001976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800197a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f003 0303 	and.w	r3, r3, #3
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	220f      	movs	r2, #15
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	43db      	mvns	r3, r3
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	4013      	ands	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a58      	ldr	r2, [pc, #352]	; (8001af8 <HAL_GPIO_Init+0x32c>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d037      	beq.n	8001a0a <HAL_GPIO_Init+0x23e>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a57      	ldr	r2, [pc, #348]	; (8001afc <HAL_GPIO_Init+0x330>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d031      	beq.n	8001a06 <HAL_GPIO_Init+0x23a>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a56      	ldr	r2, [pc, #344]	; (8001b00 <HAL_GPIO_Init+0x334>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d02b      	beq.n	8001a02 <HAL_GPIO_Init+0x236>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a55      	ldr	r2, [pc, #340]	; (8001b04 <HAL_GPIO_Init+0x338>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d025      	beq.n	80019fe <HAL_GPIO_Init+0x232>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a54      	ldr	r2, [pc, #336]	; (8001b08 <HAL_GPIO_Init+0x33c>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d01f      	beq.n	80019fa <HAL_GPIO_Init+0x22e>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a53      	ldr	r2, [pc, #332]	; (8001b0c <HAL_GPIO_Init+0x340>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d019      	beq.n	80019f6 <HAL_GPIO_Init+0x22a>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a52      	ldr	r2, [pc, #328]	; (8001b10 <HAL_GPIO_Init+0x344>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d013      	beq.n	80019f2 <HAL_GPIO_Init+0x226>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a51      	ldr	r2, [pc, #324]	; (8001b14 <HAL_GPIO_Init+0x348>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d00d      	beq.n	80019ee <HAL_GPIO_Init+0x222>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a50      	ldr	r2, [pc, #320]	; (8001b18 <HAL_GPIO_Init+0x34c>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d007      	beq.n	80019ea <HAL_GPIO_Init+0x21e>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a4f      	ldr	r2, [pc, #316]	; (8001b1c <HAL_GPIO_Init+0x350>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d101      	bne.n	80019e6 <HAL_GPIO_Init+0x21a>
 80019e2:	2309      	movs	r3, #9
 80019e4:	e012      	b.n	8001a0c <HAL_GPIO_Init+0x240>
 80019e6:	230a      	movs	r3, #10
 80019e8:	e010      	b.n	8001a0c <HAL_GPIO_Init+0x240>
 80019ea:	2308      	movs	r3, #8
 80019ec:	e00e      	b.n	8001a0c <HAL_GPIO_Init+0x240>
 80019ee:	2307      	movs	r3, #7
 80019f0:	e00c      	b.n	8001a0c <HAL_GPIO_Init+0x240>
 80019f2:	2306      	movs	r3, #6
 80019f4:	e00a      	b.n	8001a0c <HAL_GPIO_Init+0x240>
 80019f6:	2305      	movs	r3, #5
 80019f8:	e008      	b.n	8001a0c <HAL_GPIO_Init+0x240>
 80019fa:	2304      	movs	r3, #4
 80019fc:	e006      	b.n	8001a0c <HAL_GPIO_Init+0x240>
 80019fe:	2303      	movs	r3, #3
 8001a00:	e004      	b.n	8001a0c <HAL_GPIO_Init+0x240>
 8001a02:	2302      	movs	r3, #2
 8001a04:	e002      	b.n	8001a0c <HAL_GPIO_Init+0x240>
 8001a06:	2301      	movs	r3, #1
 8001a08:	e000      	b.n	8001a0c <HAL_GPIO_Init+0x240>
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	69fa      	ldr	r2, [r7, #28]
 8001a0e:	f002 0203 	and.w	r2, r2, #3
 8001a12:	0092      	lsls	r2, r2, #2
 8001a14:	4093      	lsls	r3, r2
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001a1c:	4935      	ldr	r1, [pc, #212]	; (8001af4 <HAL_GPIO_Init+0x328>)
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	089b      	lsrs	r3, r3, #2
 8001a22:	3302      	adds	r3, #2
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a2a:	4b3d      	ldr	r3, [pc, #244]	; (8001b20 <HAL_GPIO_Init+0x354>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	43db      	mvns	r3, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4013      	ands	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a4e:	4a34      	ldr	r2, [pc, #208]	; (8001b20 <HAL_GPIO_Init+0x354>)
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a54:	4b32      	ldr	r3, [pc, #200]	; (8001b20 <HAL_GPIO_Init+0x354>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4013      	ands	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d003      	beq.n	8001a78 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a78:	4a29      	ldr	r2, [pc, #164]	; (8001b20 <HAL_GPIO_Init+0x354>)
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a7e:	4b28      	ldr	r3, [pc, #160]	; (8001b20 <HAL_GPIO_Init+0x354>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	43db      	mvns	r3, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001aa2:	4a1f      	ldr	r2, [pc, #124]	; (8001b20 <HAL_GPIO_Init+0x354>)
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aa8:	4b1d      	ldr	r3, [pc, #116]	; (8001b20 <HAL_GPIO_Init+0x354>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d003      	beq.n	8001acc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001acc:	4a14      	ldr	r2, [pc, #80]	; (8001b20 <HAL_GPIO_Init+0x354>)
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	61fb      	str	r3, [r7, #28]
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	2b0f      	cmp	r3, #15
 8001adc:	f67f ae86 	bls.w	80017ec <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001ae0:	bf00      	nop
 8001ae2:	bf00      	nop
 8001ae4:	3724      	adds	r7, #36	; 0x24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40013800 	.word	0x40013800
 8001af8:	40020000 	.word	0x40020000
 8001afc:	40020400 	.word	0x40020400
 8001b00:	40020800 	.word	0x40020800
 8001b04:	40020c00 	.word	0x40020c00
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	40021400 	.word	0x40021400
 8001b10:	40021800 	.word	0x40021800
 8001b14:	40021c00 	.word	0x40021c00
 8001b18:	40022000 	.word	0x40022000
 8001b1c:	40022400 	.word	0x40022400
 8001b20:	40013c00 	.word	0x40013c00

08001b24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	807b      	strh	r3, [r7, #2]
 8001b30:	4613      	mov	r3, r2
 8001b32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b34:	787b      	ldrb	r3, [r7, #1]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b3a:	887a      	ldrh	r2, [r7, #2]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001b40:	e003      	b.n	8001b4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001b42:	887b      	ldrh	r3, [r7, #2]
 8001b44:	041a      	lsls	r2, r3, #16
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	619a      	str	r2, [r3, #24]
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b56:	b480      	push	{r7}
 8001b58:	b085      	sub	sp, #20
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
 8001b5e:	460b      	mov	r3, r1
 8001b60:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	695b      	ldr	r3, [r3, #20]
 8001b66:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b68:	887a      	ldrh	r2, [r7, #2]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	041a      	lsls	r2, r3, #16
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	43d9      	mvns	r1, r3
 8001b74:	887b      	ldrh	r3, [r7, #2]
 8001b76:	400b      	ands	r3, r1
 8001b78:	431a      	orrs	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	619a      	str	r2, [r3, #24]
}
 8001b7e:	bf00      	nop
 8001b80:	3714      	adds	r7, #20
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b8c:	b08f      	sub	sp, #60	; 0x3c
 8001b8e:	af0a      	add	r7, sp, #40	; 0x28
 8001b90:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d101      	bne.n	8001b9c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e116      	b.n	8001dca <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d106      	bne.n	8001bbc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff f860 	bl	8000c7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d102      	bne.n	8001bd6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f002 fa80 	bl	80040e0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	603b      	str	r3, [r7, #0]
 8001be6:	687e      	ldr	r6, [r7, #4]
 8001be8:	466d      	mov	r5, sp
 8001bea:	f106 0410 	add.w	r4, r6, #16
 8001bee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bf4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bf6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bfa:	e885 0003 	stmia.w	r5, {r0, r1}
 8001bfe:	1d33      	adds	r3, r6, #4
 8001c00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c02:	6838      	ldr	r0, [r7, #0]
 8001c04:	f002 fa14 	bl	8004030 <USB_CoreInit>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d005      	beq.n	8001c1a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2202      	movs	r2, #2
 8001c12:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e0d7      	b.n	8001dca <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2100      	movs	r1, #0
 8001c20:	4618      	mov	r0, r3
 8001c22:	f002 fa6e 	bl	8004102 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c26:	2300      	movs	r3, #0
 8001c28:	73fb      	strb	r3, [r7, #15]
 8001c2a:	e04a      	b.n	8001cc2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c2c:	7bfa      	ldrb	r2, [r7, #15]
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	4613      	mov	r3, r2
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	4413      	add	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	440b      	add	r3, r1
 8001c3a:	333d      	adds	r3, #61	; 0x3d
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c40:	7bfa      	ldrb	r2, [r7, #15]
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	4613      	mov	r3, r2
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	4413      	add	r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	440b      	add	r3, r1
 8001c4e:	333c      	adds	r3, #60	; 0x3c
 8001c50:	7bfa      	ldrb	r2, [r7, #15]
 8001c52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c54:	7bfa      	ldrb	r2, [r7, #15]
 8001c56:	7bfb      	ldrb	r3, [r7, #15]
 8001c58:	b298      	uxth	r0, r3
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	4413      	add	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	440b      	add	r3, r1
 8001c66:	3344      	adds	r3, #68	; 0x44
 8001c68:	4602      	mov	r2, r0
 8001c6a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c6c:	7bfa      	ldrb	r2, [r7, #15]
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	4613      	mov	r3, r2
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	4413      	add	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	440b      	add	r3, r1
 8001c7a:	3340      	adds	r3, #64	; 0x40
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c80:	7bfa      	ldrb	r2, [r7, #15]
 8001c82:	6879      	ldr	r1, [r7, #4]
 8001c84:	4613      	mov	r3, r2
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	4413      	add	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	440b      	add	r3, r1
 8001c8e:	3348      	adds	r3, #72	; 0x48
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c94:	7bfa      	ldrb	r2, [r7, #15]
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	4413      	add	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	440b      	add	r3, r1
 8001ca2:	334c      	adds	r3, #76	; 0x4c
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ca8:	7bfa      	ldrb	r2, [r7, #15]
 8001caa:	6879      	ldr	r1, [r7, #4]
 8001cac:	4613      	mov	r3, r2
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	4413      	add	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	440b      	add	r3, r1
 8001cb6:	3354      	adds	r3, #84	; 0x54
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cbc:	7bfb      	ldrb	r3, [r7, #15]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	73fb      	strb	r3, [r7, #15]
 8001cc2:	7bfa      	ldrb	r2, [r7, #15]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d3af      	bcc.n	8001c2c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ccc:	2300      	movs	r3, #0
 8001cce:	73fb      	strb	r3, [r7, #15]
 8001cd0:	e044      	b.n	8001d5c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001cd2:	7bfa      	ldrb	r2, [r7, #15]
 8001cd4:	6879      	ldr	r1, [r7, #4]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	4413      	add	r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	440b      	add	r3, r1
 8001ce0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ce8:	7bfa      	ldrb	r2, [r7, #15]
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	4613      	mov	r3, r2
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	4413      	add	r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	440b      	add	r3, r1
 8001cf6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001cfa:	7bfa      	ldrb	r2, [r7, #15]
 8001cfc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001cfe:	7bfa      	ldrb	r2, [r7, #15]
 8001d00:	6879      	ldr	r1, [r7, #4]
 8001d02:	4613      	mov	r3, r2
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	4413      	add	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	440b      	add	r3, r1
 8001d0c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001d10:	2200      	movs	r2, #0
 8001d12:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d14:	7bfa      	ldrb	r2, [r7, #15]
 8001d16:	6879      	ldr	r1, [r7, #4]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	4413      	add	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	440b      	add	r3, r1
 8001d22:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d2a:	7bfa      	ldrb	r2, [r7, #15]
 8001d2c:	6879      	ldr	r1, [r7, #4]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	4413      	add	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	440b      	add	r3, r1
 8001d38:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d40:	7bfa      	ldrb	r2, [r7, #15]
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	4613      	mov	r3, r2
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	4413      	add	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	440b      	add	r3, r1
 8001d4e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d56:	7bfb      	ldrb	r3, [r7, #15]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	73fb      	strb	r3, [r7, #15]
 8001d5c:	7bfa      	ldrb	r2, [r7, #15]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d3b5      	bcc.n	8001cd2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	603b      	str	r3, [r7, #0]
 8001d6c:	687e      	ldr	r6, [r7, #4]
 8001d6e:	466d      	mov	r5, sp
 8001d70:	f106 0410 	add.w	r4, r6, #16
 8001d74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d7c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d80:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d84:	1d33      	adds	r3, r6, #4
 8001d86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d88:	6838      	ldr	r0, [r7, #0]
 8001d8a:	f002 fa07 	bl	800419c <USB_DevInit>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d005      	beq.n	8001da0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2202      	movs	r2, #2
 8001d98:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e014      	b.n	8001dca <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d102      	bne.n	8001dbe <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 f80b 	bl	8001dd4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f002 fbc5 	bl	8004552 <USB_DevDisconnect>

  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001dd4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e02:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <HAL_PCDEx_ActivateLPM+0x44>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	10000003 	.word	0x10000003

08001e1c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e20:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a04      	ldr	r2, [pc, #16]	; (8001e38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e2a:	6013      	str	r3, [r2, #0]
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	40007000 	.word	0x40007000

08001e3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001e44:	2300      	movs	r3, #0
 8001e46:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e29b      	b.n	800238a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f000 8087 	beq.w	8001f6e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e60:	4b96      	ldr	r3, [pc, #600]	; (80020bc <HAL_RCC_OscConfig+0x280>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f003 030c 	and.w	r3, r3, #12
 8001e68:	2b04      	cmp	r3, #4
 8001e6a:	d00c      	beq.n	8001e86 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e6c:	4b93      	ldr	r3, [pc, #588]	; (80020bc <HAL_RCC_OscConfig+0x280>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f003 030c 	and.w	r3, r3, #12
 8001e74:	2b08      	cmp	r3, #8
 8001e76:	d112      	bne.n	8001e9e <HAL_RCC_OscConfig+0x62>
 8001e78:	4b90      	ldr	r3, [pc, #576]	; (80020bc <HAL_RCC_OscConfig+0x280>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e84:	d10b      	bne.n	8001e9e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e86:	4b8d      	ldr	r3, [pc, #564]	; (80020bc <HAL_RCC_OscConfig+0x280>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d06c      	beq.n	8001f6c <HAL_RCC_OscConfig+0x130>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d168      	bne.n	8001f6c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e275      	b.n	800238a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ea6:	d106      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x7a>
 8001ea8:	4b84      	ldr	r3, [pc, #528]	; (80020bc <HAL_RCC_OscConfig+0x280>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a83      	ldr	r2, [pc, #524]	; (80020bc <HAL_RCC_OscConfig+0x280>)
 8001eae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb2:	6013      	str	r3, [r2, #0]
 8001eb4:	e02e      	b.n	8001f14 <HAL_RCC_OscConfig+0xd8>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10c      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x9c>
 8001ebe:	4b7f      	ldr	r3, [pc, #508]	; (80020bc <HAL_RCC_OscConfig+0x280>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a7e      	ldr	r2, [pc, #504]	; (80020bc <HAL_RCC_OscConfig+0x280>)
 8001ec4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ec8:	6013      	str	r3, [r2, #0]
 8001eca:	4b7c      	ldr	r3, [pc, #496]	; (80020bc <HAL_RCC_OscConfig+0x280>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a7b      	ldr	r2, [pc, #492]	; (80020bc <HAL_RCC_OscConfig+0x280>)
 8001ed0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	e01d      	b.n	8001f14 <HAL_RCC_OscConfig+0xd8>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ee0:	d10c      	bne.n	8001efc <HAL_RCC_OscConfig+0xc0>
 8001ee2:	4b76      	ldr	r3, [pc, #472]	; (80020bc <HAL_RCC_OscConfig+0x280>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a75      	ldr	r2, [pc, #468]	; (80020bc <HAL_RCC_OscConfig+0x280>)
 8001ee8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	4b73      	ldr	r3, [pc, #460]	; (80020bc <HAL_RCC_OscConfig+0x280>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a72      	ldr	r2, [pc, #456]	; (80020bc <HAL_RCC_OscConfig+0x280>)
 8001ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef8:	6013      	str	r3, [r2, #0]
 8001efa:	e00b      	b.n	8001f14 <HAL_RCC_OscConfig+0xd8>
 8001efc:	4b6f      	ldr	r3, [pc, #444]	; (80020bc <HAL_RCC_OscConfig+0x280>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a6e      	ldr	r2, [pc, #440]	; (80020bc <HAL_RCC_OscConfig+0x280>)
 8001f02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f06:	6013      	str	r3, [r2, #0]
 8001f08:	4b6c      	ldr	r3, [pc, #432]	; (80020bc <HAL_RCC_OscConfig+0x280>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a6b      	ldr	r2, [pc, #428]	; (80020bc <HAL_RCC_OscConfig+0x280>)
 8001f0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d013      	beq.n	8001f44 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1c:	f7ff f81e 	bl	8000f5c <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f24:	f7ff f81a 	bl	8000f5c <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b64      	cmp	r3, #100	; 0x64
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e229      	b.n	800238a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f36:	4b61      	ldr	r3, [pc, #388]	; (80020bc <HAL_RCC_OscConfig+0x280>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d0f0      	beq.n	8001f24 <HAL_RCC_OscConfig+0xe8>
 8001f42:	e014      	b.n	8001f6e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f44:	f7ff f80a 	bl	8000f5c <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f4c:	f7ff f806 	bl	8000f5c <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b64      	cmp	r3, #100	; 0x64
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e215      	b.n	800238a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f5e:	4b57      	ldr	r3, [pc, #348]	; (80020bc <HAL_RCC_OscConfig+0x280>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1f0      	bne.n	8001f4c <HAL_RCC_OscConfig+0x110>
 8001f6a:	e000      	b.n	8001f6e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d069      	beq.n	800204e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f7a:	4b50      	ldr	r3, [pc, #320]	; (80020bc <HAL_RCC_OscConfig+0x280>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f003 030c 	and.w	r3, r3, #12
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00b      	beq.n	8001f9e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f86:	4b4d      	ldr	r3, [pc, #308]	; (80020bc <HAL_RCC_OscConfig+0x280>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 030c 	and.w	r3, r3, #12
 8001f8e:	2b08      	cmp	r3, #8
 8001f90:	d11c      	bne.n	8001fcc <HAL_RCC_OscConfig+0x190>
 8001f92:	4b4a      	ldr	r3, [pc, #296]	; (80020bc <HAL_RCC_OscConfig+0x280>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d116      	bne.n	8001fcc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f9e:	4b47      	ldr	r3, [pc, #284]	; (80020bc <HAL_RCC_OscConfig+0x280>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d005      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x17a>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d001      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e1e9      	b.n	800238a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb6:	4b41      	ldr	r3, [pc, #260]	; (80020bc <HAL_RCC_OscConfig+0x280>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	493d      	ldr	r1, [pc, #244]	; (80020bc <HAL_RCC_OscConfig+0x280>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fca:	e040      	b.n	800204e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d023      	beq.n	800201c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fd4:	4b39      	ldr	r3, [pc, #228]	; (80020bc <HAL_RCC_OscConfig+0x280>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a38      	ldr	r2, [pc, #224]	; (80020bc <HAL_RCC_OscConfig+0x280>)
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe0:	f7fe ffbc 	bl	8000f5c <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fe8:	f7fe ffb8 	bl	8000f5c <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e1c7      	b.n	800238a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ffa:	4b30      	ldr	r3, [pc, #192]	; (80020bc <HAL_RCC_OscConfig+0x280>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d0f0      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002006:	4b2d      	ldr	r3, [pc, #180]	; (80020bc <HAL_RCC_OscConfig+0x280>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	4929      	ldr	r1, [pc, #164]	; (80020bc <HAL_RCC_OscConfig+0x280>)
 8002016:	4313      	orrs	r3, r2
 8002018:	600b      	str	r3, [r1, #0]
 800201a:	e018      	b.n	800204e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800201c:	4b27      	ldr	r3, [pc, #156]	; (80020bc <HAL_RCC_OscConfig+0x280>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a26      	ldr	r2, [pc, #152]	; (80020bc <HAL_RCC_OscConfig+0x280>)
 8002022:	f023 0301 	bic.w	r3, r3, #1
 8002026:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002028:	f7fe ff98 	bl	8000f5c <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002030:	f7fe ff94 	bl	8000f5c <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e1a3      	b.n	800238a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002042:	4b1e      	ldr	r3, [pc, #120]	; (80020bc <HAL_RCC_OscConfig+0x280>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1f0      	bne.n	8002030 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	2b00      	cmp	r3, #0
 8002058:	d038      	beq.n	80020cc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d019      	beq.n	8002096 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002062:	4b16      	ldr	r3, [pc, #88]	; (80020bc <HAL_RCC_OscConfig+0x280>)
 8002064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002066:	4a15      	ldr	r2, [pc, #84]	; (80020bc <HAL_RCC_OscConfig+0x280>)
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800206e:	f7fe ff75 	bl	8000f5c <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002076:	f7fe ff71 	bl	8000f5c <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e180      	b.n	800238a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002088:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <HAL_RCC_OscConfig+0x280>)
 800208a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0f0      	beq.n	8002076 <HAL_RCC_OscConfig+0x23a>
 8002094:	e01a      	b.n	80020cc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002096:	4b09      	ldr	r3, [pc, #36]	; (80020bc <HAL_RCC_OscConfig+0x280>)
 8002098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800209a:	4a08      	ldr	r2, [pc, #32]	; (80020bc <HAL_RCC_OscConfig+0x280>)
 800209c:	f023 0301 	bic.w	r3, r3, #1
 80020a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a2:	f7fe ff5b 	bl	8000f5c <HAL_GetTick>
 80020a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a8:	e00a      	b.n	80020c0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020aa:	f7fe ff57 	bl	8000f5c <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d903      	bls.n	80020c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e166      	b.n	800238a <HAL_RCC_OscConfig+0x54e>
 80020bc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c0:	4b92      	ldr	r3, [pc, #584]	; (800230c <HAL_RCC_OscConfig+0x4d0>)
 80020c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1ee      	bne.n	80020aa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0304 	and.w	r3, r3, #4
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f000 80a4 	beq.w	8002222 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020da:	4b8c      	ldr	r3, [pc, #560]	; (800230c <HAL_RCC_OscConfig+0x4d0>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d10d      	bne.n	8002102 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80020e6:	4b89      	ldr	r3, [pc, #548]	; (800230c <HAL_RCC_OscConfig+0x4d0>)
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	4a88      	ldr	r2, [pc, #544]	; (800230c <HAL_RCC_OscConfig+0x4d0>)
 80020ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f0:	6413      	str	r3, [r2, #64]	; 0x40
 80020f2:	4b86      	ldr	r3, [pc, #536]	; (800230c <HAL_RCC_OscConfig+0x4d0>)
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fa:	60bb      	str	r3, [r7, #8]
 80020fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020fe:	2301      	movs	r3, #1
 8002100:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002102:	4b83      	ldr	r3, [pc, #524]	; (8002310 <HAL_RCC_OscConfig+0x4d4>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210a:	2b00      	cmp	r3, #0
 800210c:	d118      	bne.n	8002140 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800210e:	4b80      	ldr	r3, [pc, #512]	; (8002310 <HAL_RCC_OscConfig+0x4d4>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a7f      	ldr	r2, [pc, #508]	; (8002310 <HAL_RCC_OscConfig+0x4d4>)
 8002114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002118:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800211a:	f7fe ff1f 	bl	8000f5c <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002120:	e008      	b.n	8002134 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002122:	f7fe ff1b 	bl	8000f5c <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b64      	cmp	r3, #100	; 0x64
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e12a      	b.n	800238a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002134:	4b76      	ldr	r3, [pc, #472]	; (8002310 <HAL_RCC_OscConfig+0x4d4>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213c:	2b00      	cmp	r3, #0
 800213e:	d0f0      	beq.n	8002122 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d106      	bne.n	8002156 <HAL_RCC_OscConfig+0x31a>
 8002148:	4b70      	ldr	r3, [pc, #448]	; (800230c <HAL_RCC_OscConfig+0x4d0>)
 800214a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800214c:	4a6f      	ldr	r2, [pc, #444]	; (800230c <HAL_RCC_OscConfig+0x4d0>)
 800214e:	f043 0301 	orr.w	r3, r3, #1
 8002152:	6713      	str	r3, [r2, #112]	; 0x70
 8002154:	e02d      	b.n	80021b2 <HAL_RCC_OscConfig+0x376>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10c      	bne.n	8002178 <HAL_RCC_OscConfig+0x33c>
 800215e:	4b6b      	ldr	r3, [pc, #428]	; (800230c <HAL_RCC_OscConfig+0x4d0>)
 8002160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002162:	4a6a      	ldr	r2, [pc, #424]	; (800230c <HAL_RCC_OscConfig+0x4d0>)
 8002164:	f023 0301 	bic.w	r3, r3, #1
 8002168:	6713      	str	r3, [r2, #112]	; 0x70
 800216a:	4b68      	ldr	r3, [pc, #416]	; (800230c <HAL_RCC_OscConfig+0x4d0>)
 800216c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216e:	4a67      	ldr	r2, [pc, #412]	; (800230c <HAL_RCC_OscConfig+0x4d0>)
 8002170:	f023 0304 	bic.w	r3, r3, #4
 8002174:	6713      	str	r3, [r2, #112]	; 0x70
 8002176:	e01c      	b.n	80021b2 <HAL_RCC_OscConfig+0x376>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	2b05      	cmp	r3, #5
 800217e:	d10c      	bne.n	800219a <HAL_RCC_OscConfig+0x35e>
 8002180:	4b62      	ldr	r3, [pc, #392]	; (800230c <HAL_RCC_OscConfig+0x4d0>)
 8002182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002184:	4a61      	ldr	r2, [pc, #388]	; (800230c <HAL_RCC_OscConfig+0x4d0>)
 8002186:	f043 0304 	orr.w	r3, r3, #4
 800218a:	6713      	str	r3, [r2, #112]	; 0x70
 800218c:	4b5f      	ldr	r3, [pc, #380]	; (800230c <HAL_RCC_OscConfig+0x4d0>)
 800218e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002190:	4a5e      	ldr	r2, [pc, #376]	; (800230c <HAL_RCC_OscConfig+0x4d0>)
 8002192:	f043 0301 	orr.w	r3, r3, #1
 8002196:	6713      	str	r3, [r2, #112]	; 0x70
 8002198:	e00b      	b.n	80021b2 <HAL_RCC_OscConfig+0x376>
 800219a:	4b5c      	ldr	r3, [pc, #368]	; (800230c <HAL_RCC_OscConfig+0x4d0>)
 800219c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219e:	4a5b      	ldr	r2, [pc, #364]	; (800230c <HAL_RCC_OscConfig+0x4d0>)
 80021a0:	f023 0301 	bic.w	r3, r3, #1
 80021a4:	6713      	str	r3, [r2, #112]	; 0x70
 80021a6:	4b59      	ldr	r3, [pc, #356]	; (800230c <HAL_RCC_OscConfig+0x4d0>)
 80021a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021aa:	4a58      	ldr	r2, [pc, #352]	; (800230c <HAL_RCC_OscConfig+0x4d0>)
 80021ac:	f023 0304 	bic.w	r3, r3, #4
 80021b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d015      	beq.n	80021e6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ba:	f7fe fecf 	bl	8000f5c <HAL_GetTick>
 80021be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c0:	e00a      	b.n	80021d8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021c2:	f7fe fecb 	bl	8000f5c <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e0d8      	b.n	800238a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d8:	4b4c      	ldr	r3, [pc, #304]	; (800230c <HAL_RCC_OscConfig+0x4d0>)
 80021da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d0ee      	beq.n	80021c2 <HAL_RCC_OscConfig+0x386>
 80021e4:	e014      	b.n	8002210 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e6:	f7fe feb9 	bl	8000f5c <HAL_GetTick>
 80021ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ec:	e00a      	b.n	8002204 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ee:	f7fe feb5 	bl	8000f5c <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e0c2      	b.n	800238a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002204:	4b41      	ldr	r3, [pc, #260]	; (800230c <HAL_RCC_OscConfig+0x4d0>)
 8002206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1ee      	bne.n	80021ee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002210:	7dfb      	ldrb	r3, [r7, #23]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d105      	bne.n	8002222 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002216:	4b3d      	ldr	r3, [pc, #244]	; (800230c <HAL_RCC_OscConfig+0x4d0>)
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	4a3c      	ldr	r2, [pc, #240]	; (800230c <HAL_RCC_OscConfig+0x4d0>)
 800221c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002220:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	2b00      	cmp	r3, #0
 8002228:	f000 80ae 	beq.w	8002388 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800222c:	4b37      	ldr	r3, [pc, #220]	; (800230c <HAL_RCC_OscConfig+0x4d0>)
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f003 030c 	and.w	r3, r3, #12
 8002234:	2b08      	cmp	r3, #8
 8002236:	d06d      	beq.n	8002314 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	2b02      	cmp	r3, #2
 800223e:	d14b      	bne.n	80022d8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002240:	4b32      	ldr	r3, [pc, #200]	; (800230c <HAL_RCC_OscConfig+0x4d0>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a31      	ldr	r2, [pc, #196]	; (800230c <HAL_RCC_OscConfig+0x4d0>)
 8002246:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800224a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800224c:	f7fe fe86 	bl	8000f5c <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002254:	f7fe fe82 	bl	8000f5c <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e091      	b.n	800238a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002266:	4b29      	ldr	r3, [pc, #164]	; (800230c <HAL_RCC_OscConfig+0x4d0>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1f0      	bne.n	8002254 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69da      	ldr	r2, [r3, #28]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	431a      	orrs	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002280:	019b      	lsls	r3, r3, #6
 8002282:	431a      	orrs	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002288:	085b      	lsrs	r3, r3, #1
 800228a:	3b01      	subs	r3, #1
 800228c:	041b      	lsls	r3, r3, #16
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002294:	061b      	lsls	r3, r3, #24
 8002296:	431a      	orrs	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229c:	071b      	lsls	r3, r3, #28
 800229e:	491b      	ldr	r1, [pc, #108]	; (800230c <HAL_RCC_OscConfig+0x4d0>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022a4:	4b19      	ldr	r3, [pc, #100]	; (800230c <HAL_RCC_OscConfig+0x4d0>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a18      	ldr	r2, [pc, #96]	; (800230c <HAL_RCC_OscConfig+0x4d0>)
 80022aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b0:	f7fe fe54 	bl	8000f5c <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b8:	f7fe fe50 	bl	8000f5c <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e05f      	b.n	800238a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ca:	4b10      	ldr	r3, [pc, #64]	; (800230c <HAL_RCC_OscConfig+0x4d0>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0f0      	beq.n	80022b8 <HAL_RCC_OscConfig+0x47c>
 80022d6:	e057      	b.n	8002388 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d8:	4b0c      	ldr	r3, [pc, #48]	; (800230c <HAL_RCC_OscConfig+0x4d0>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a0b      	ldr	r2, [pc, #44]	; (800230c <HAL_RCC_OscConfig+0x4d0>)
 80022de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e4:	f7fe fe3a 	bl	8000f5c <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ec:	f7fe fe36 	bl	8000f5c <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e045      	b.n	800238a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022fe:	4b03      	ldr	r3, [pc, #12]	; (800230c <HAL_RCC_OscConfig+0x4d0>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1f0      	bne.n	80022ec <HAL_RCC_OscConfig+0x4b0>
 800230a:	e03d      	b.n	8002388 <HAL_RCC_OscConfig+0x54c>
 800230c:	40023800 	.word	0x40023800
 8002310:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002314:	4b1f      	ldr	r3, [pc, #124]	; (8002394 <HAL_RCC_OscConfig+0x558>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d030      	beq.n	8002384 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800232c:	429a      	cmp	r2, r3
 800232e:	d129      	bne.n	8002384 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800233a:	429a      	cmp	r2, r3
 800233c:	d122      	bne.n	8002384 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002344:	4013      	ands	r3, r2
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800234a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800234c:	4293      	cmp	r3, r2
 800234e:	d119      	bne.n	8002384 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235a:	085b      	lsrs	r3, r3, #1
 800235c:	3b01      	subs	r3, #1
 800235e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002360:	429a      	cmp	r2, r3
 8002362:	d10f      	bne.n	8002384 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002370:	429a      	cmp	r2, r3
 8002372:	d107      	bne.n	8002384 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002380:	429a      	cmp	r2, r3
 8002382:	d001      	beq.n	8002388 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e000      	b.n	800238a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3718      	adds	r7, #24
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40023800 	.word	0x40023800

08002398 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80023a2:	2300      	movs	r3, #0
 80023a4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d101      	bne.n	80023b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e0d0      	b.n	8002552 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023b0:	4b6a      	ldr	r3, [pc, #424]	; (800255c <HAL_RCC_ClockConfig+0x1c4>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 030f 	and.w	r3, r3, #15
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d910      	bls.n	80023e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023be:	4b67      	ldr	r3, [pc, #412]	; (800255c <HAL_RCC_ClockConfig+0x1c4>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f023 020f 	bic.w	r2, r3, #15
 80023c6:	4965      	ldr	r1, [pc, #404]	; (800255c <HAL_RCC_ClockConfig+0x1c4>)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ce:	4b63      	ldr	r3, [pc, #396]	; (800255c <HAL_RCC_ClockConfig+0x1c4>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 030f 	and.w	r3, r3, #15
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d001      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e0b8      	b.n	8002552 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d020      	beq.n	800242e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0304 	and.w	r3, r3, #4
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d005      	beq.n	8002404 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023f8:	4b59      	ldr	r3, [pc, #356]	; (8002560 <HAL_RCC_ClockConfig+0x1c8>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	4a58      	ldr	r2, [pc, #352]	; (8002560 <HAL_RCC_ClockConfig+0x1c8>)
 80023fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002402:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0308 	and.w	r3, r3, #8
 800240c:	2b00      	cmp	r3, #0
 800240e:	d005      	beq.n	800241c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002410:	4b53      	ldr	r3, [pc, #332]	; (8002560 <HAL_RCC_ClockConfig+0x1c8>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	4a52      	ldr	r2, [pc, #328]	; (8002560 <HAL_RCC_ClockConfig+0x1c8>)
 8002416:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800241a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800241c:	4b50      	ldr	r3, [pc, #320]	; (8002560 <HAL_RCC_ClockConfig+0x1c8>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	494d      	ldr	r1, [pc, #308]	; (8002560 <HAL_RCC_ClockConfig+0x1c8>)
 800242a:	4313      	orrs	r3, r2
 800242c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b00      	cmp	r3, #0
 8002438:	d040      	beq.n	80024bc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d107      	bne.n	8002452 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002442:	4b47      	ldr	r3, [pc, #284]	; (8002560 <HAL_RCC_ClockConfig+0x1c8>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d115      	bne.n	800247a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e07f      	b.n	8002552 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2b02      	cmp	r3, #2
 8002458:	d107      	bne.n	800246a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800245a:	4b41      	ldr	r3, [pc, #260]	; (8002560 <HAL_RCC_ClockConfig+0x1c8>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d109      	bne.n	800247a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e073      	b.n	8002552 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800246a:	4b3d      	ldr	r3, [pc, #244]	; (8002560 <HAL_RCC_ClockConfig+0x1c8>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e06b      	b.n	8002552 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800247a:	4b39      	ldr	r3, [pc, #228]	; (8002560 <HAL_RCC_ClockConfig+0x1c8>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f023 0203 	bic.w	r2, r3, #3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	4936      	ldr	r1, [pc, #216]	; (8002560 <HAL_RCC_ClockConfig+0x1c8>)
 8002488:	4313      	orrs	r3, r2
 800248a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800248c:	f7fe fd66 	bl	8000f5c <HAL_GetTick>
 8002490:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002492:	e00a      	b.n	80024aa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002494:	f7fe fd62 	bl	8000f5c <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e053      	b.n	8002552 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024aa:	4b2d      	ldr	r3, [pc, #180]	; (8002560 <HAL_RCC_ClockConfig+0x1c8>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 020c 	and.w	r2, r3, #12
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d1eb      	bne.n	8002494 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024bc:	4b27      	ldr	r3, [pc, #156]	; (800255c <HAL_RCC_ClockConfig+0x1c4>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 030f 	and.w	r3, r3, #15
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d210      	bcs.n	80024ec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ca:	4b24      	ldr	r3, [pc, #144]	; (800255c <HAL_RCC_ClockConfig+0x1c4>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f023 020f 	bic.w	r2, r3, #15
 80024d2:	4922      	ldr	r1, [pc, #136]	; (800255c <HAL_RCC_ClockConfig+0x1c4>)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024da:	4b20      	ldr	r3, [pc, #128]	; (800255c <HAL_RCC_ClockConfig+0x1c4>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 030f 	and.w	r3, r3, #15
 80024e2:	683a      	ldr	r2, [r7, #0]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d001      	beq.n	80024ec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e032      	b.n	8002552 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0304 	and.w	r3, r3, #4
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d008      	beq.n	800250a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024f8:	4b19      	ldr	r3, [pc, #100]	; (8002560 <HAL_RCC_ClockConfig+0x1c8>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	4916      	ldr	r1, [pc, #88]	; (8002560 <HAL_RCC_ClockConfig+0x1c8>)
 8002506:	4313      	orrs	r3, r2
 8002508:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0308 	and.w	r3, r3, #8
 8002512:	2b00      	cmp	r3, #0
 8002514:	d009      	beq.n	800252a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002516:	4b12      	ldr	r3, [pc, #72]	; (8002560 <HAL_RCC_ClockConfig+0x1c8>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	490e      	ldr	r1, [pc, #56]	; (8002560 <HAL_RCC_ClockConfig+0x1c8>)
 8002526:	4313      	orrs	r3, r2
 8002528:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800252a:	f000 f821 	bl	8002570 <HAL_RCC_GetSysClockFreq>
 800252e:	4602      	mov	r2, r0
 8002530:	4b0b      	ldr	r3, [pc, #44]	; (8002560 <HAL_RCC_ClockConfig+0x1c8>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	091b      	lsrs	r3, r3, #4
 8002536:	f003 030f 	and.w	r3, r3, #15
 800253a:	490a      	ldr	r1, [pc, #40]	; (8002564 <HAL_RCC_ClockConfig+0x1cc>)
 800253c:	5ccb      	ldrb	r3, [r1, r3]
 800253e:	fa22 f303 	lsr.w	r3, r2, r3
 8002542:	4a09      	ldr	r2, [pc, #36]	; (8002568 <HAL_RCC_ClockConfig+0x1d0>)
 8002544:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002546:	4b09      	ldr	r3, [pc, #36]	; (800256c <HAL_RCC_ClockConfig+0x1d4>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f7fe fc10 	bl	8000d70 <HAL_InitTick>

  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40023c00 	.word	0x40023c00
 8002560:	40023800 	.word	0x40023800
 8002564:	08007474 	.word	0x08007474
 8002568:	20000000 	.word	0x20000000
 800256c:	20000004 	.word	0x20000004

08002570 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002570:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002574:	b094      	sub	sp, #80	; 0x50
 8002576:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002578:	2300      	movs	r3, #0
 800257a:	647b      	str	r3, [r7, #68]	; 0x44
 800257c:	2300      	movs	r3, #0
 800257e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002580:	2300      	movs	r3, #0
 8002582:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002584:	2300      	movs	r3, #0
 8002586:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002588:	4b79      	ldr	r3, [pc, #484]	; (8002770 <HAL_RCC_GetSysClockFreq+0x200>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f003 030c 	and.w	r3, r3, #12
 8002590:	2b08      	cmp	r3, #8
 8002592:	d00d      	beq.n	80025b0 <HAL_RCC_GetSysClockFreq+0x40>
 8002594:	2b08      	cmp	r3, #8
 8002596:	f200 80e1 	bhi.w	800275c <HAL_RCC_GetSysClockFreq+0x1ec>
 800259a:	2b00      	cmp	r3, #0
 800259c:	d002      	beq.n	80025a4 <HAL_RCC_GetSysClockFreq+0x34>
 800259e:	2b04      	cmp	r3, #4
 80025a0:	d003      	beq.n	80025aa <HAL_RCC_GetSysClockFreq+0x3a>
 80025a2:	e0db      	b.n	800275c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025a4:	4b73      	ldr	r3, [pc, #460]	; (8002774 <HAL_RCC_GetSysClockFreq+0x204>)
 80025a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025a8:	e0db      	b.n	8002762 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025aa:	4b73      	ldr	r3, [pc, #460]	; (8002778 <HAL_RCC_GetSysClockFreq+0x208>)
 80025ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025ae:	e0d8      	b.n	8002762 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025b0:	4b6f      	ldr	r3, [pc, #444]	; (8002770 <HAL_RCC_GetSysClockFreq+0x200>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025b8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80025ba:	4b6d      	ldr	r3, [pc, #436]	; (8002770 <HAL_RCC_GetSysClockFreq+0x200>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d063      	beq.n	800268e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025c6:	4b6a      	ldr	r3, [pc, #424]	; (8002770 <HAL_RCC_GetSysClockFreq+0x200>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	099b      	lsrs	r3, r3, #6
 80025cc:	2200      	movs	r2, #0
 80025ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80025d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80025d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025d8:	633b      	str	r3, [r7, #48]	; 0x30
 80025da:	2300      	movs	r3, #0
 80025dc:	637b      	str	r3, [r7, #52]	; 0x34
 80025de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80025e2:	4622      	mov	r2, r4
 80025e4:	462b      	mov	r3, r5
 80025e6:	f04f 0000 	mov.w	r0, #0
 80025ea:	f04f 0100 	mov.w	r1, #0
 80025ee:	0159      	lsls	r1, r3, #5
 80025f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025f4:	0150      	lsls	r0, r2, #5
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	4621      	mov	r1, r4
 80025fc:	1a51      	subs	r1, r2, r1
 80025fe:	6139      	str	r1, [r7, #16]
 8002600:	4629      	mov	r1, r5
 8002602:	eb63 0301 	sbc.w	r3, r3, r1
 8002606:	617b      	str	r3, [r7, #20]
 8002608:	f04f 0200 	mov.w	r2, #0
 800260c:	f04f 0300 	mov.w	r3, #0
 8002610:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002614:	4659      	mov	r1, fp
 8002616:	018b      	lsls	r3, r1, #6
 8002618:	4651      	mov	r1, sl
 800261a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800261e:	4651      	mov	r1, sl
 8002620:	018a      	lsls	r2, r1, #6
 8002622:	4651      	mov	r1, sl
 8002624:	ebb2 0801 	subs.w	r8, r2, r1
 8002628:	4659      	mov	r1, fp
 800262a:	eb63 0901 	sbc.w	r9, r3, r1
 800262e:	f04f 0200 	mov.w	r2, #0
 8002632:	f04f 0300 	mov.w	r3, #0
 8002636:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800263a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800263e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002642:	4690      	mov	r8, r2
 8002644:	4699      	mov	r9, r3
 8002646:	4623      	mov	r3, r4
 8002648:	eb18 0303 	adds.w	r3, r8, r3
 800264c:	60bb      	str	r3, [r7, #8]
 800264e:	462b      	mov	r3, r5
 8002650:	eb49 0303 	adc.w	r3, r9, r3
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	f04f 0200 	mov.w	r2, #0
 800265a:	f04f 0300 	mov.w	r3, #0
 800265e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002662:	4629      	mov	r1, r5
 8002664:	024b      	lsls	r3, r1, #9
 8002666:	4621      	mov	r1, r4
 8002668:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800266c:	4621      	mov	r1, r4
 800266e:	024a      	lsls	r2, r1, #9
 8002670:	4610      	mov	r0, r2
 8002672:	4619      	mov	r1, r3
 8002674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002676:	2200      	movs	r2, #0
 8002678:	62bb      	str	r3, [r7, #40]	; 0x28
 800267a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800267c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002680:	f7fd fdde 	bl	8000240 <__aeabi_uldivmod>
 8002684:	4602      	mov	r2, r0
 8002686:	460b      	mov	r3, r1
 8002688:	4613      	mov	r3, r2
 800268a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800268c:	e058      	b.n	8002740 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800268e:	4b38      	ldr	r3, [pc, #224]	; (8002770 <HAL_RCC_GetSysClockFreq+0x200>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	099b      	lsrs	r3, r3, #6
 8002694:	2200      	movs	r2, #0
 8002696:	4618      	mov	r0, r3
 8002698:	4611      	mov	r1, r2
 800269a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800269e:	623b      	str	r3, [r7, #32]
 80026a0:	2300      	movs	r3, #0
 80026a2:	627b      	str	r3, [r7, #36]	; 0x24
 80026a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80026a8:	4642      	mov	r2, r8
 80026aa:	464b      	mov	r3, r9
 80026ac:	f04f 0000 	mov.w	r0, #0
 80026b0:	f04f 0100 	mov.w	r1, #0
 80026b4:	0159      	lsls	r1, r3, #5
 80026b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026ba:	0150      	lsls	r0, r2, #5
 80026bc:	4602      	mov	r2, r0
 80026be:	460b      	mov	r3, r1
 80026c0:	4641      	mov	r1, r8
 80026c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80026c6:	4649      	mov	r1, r9
 80026c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80026cc:	f04f 0200 	mov.w	r2, #0
 80026d0:	f04f 0300 	mov.w	r3, #0
 80026d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026e0:	ebb2 040a 	subs.w	r4, r2, sl
 80026e4:	eb63 050b 	sbc.w	r5, r3, fp
 80026e8:	f04f 0200 	mov.w	r2, #0
 80026ec:	f04f 0300 	mov.w	r3, #0
 80026f0:	00eb      	lsls	r3, r5, #3
 80026f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026f6:	00e2      	lsls	r2, r4, #3
 80026f8:	4614      	mov	r4, r2
 80026fa:	461d      	mov	r5, r3
 80026fc:	4643      	mov	r3, r8
 80026fe:	18e3      	adds	r3, r4, r3
 8002700:	603b      	str	r3, [r7, #0]
 8002702:	464b      	mov	r3, r9
 8002704:	eb45 0303 	adc.w	r3, r5, r3
 8002708:	607b      	str	r3, [r7, #4]
 800270a:	f04f 0200 	mov.w	r2, #0
 800270e:	f04f 0300 	mov.w	r3, #0
 8002712:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002716:	4629      	mov	r1, r5
 8002718:	028b      	lsls	r3, r1, #10
 800271a:	4621      	mov	r1, r4
 800271c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002720:	4621      	mov	r1, r4
 8002722:	028a      	lsls	r2, r1, #10
 8002724:	4610      	mov	r0, r2
 8002726:	4619      	mov	r1, r3
 8002728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800272a:	2200      	movs	r2, #0
 800272c:	61bb      	str	r3, [r7, #24]
 800272e:	61fa      	str	r2, [r7, #28]
 8002730:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002734:	f7fd fd84 	bl	8000240 <__aeabi_uldivmod>
 8002738:	4602      	mov	r2, r0
 800273a:	460b      	mov	r3, r1
 800273c:	4613      	mov	r3, r2
 800273e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002740:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <HAL_RCC_GetSysClockFreq+0x200>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	0c1b      	lsrs	r3, r3, #16
 8002746:	f003 0303 	and.w	r3, r3, #3
 800274a:	3301      	adds	r3, #1
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002750:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002754:	fbb2 f3f3 	udiv	r3, r2, r3
 8002758:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800275a:	e002      	b.n	8002762 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800275c:	4b05      	ldr	r3, [pc, #20]	; (8002774 <HAL_RCC_GetSysClockFreq+0x204>)
 800275e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002760:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002762:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002764:	4618      	mov	r0, r3
 8002766:	3750      	adds	r7, #80	; 0x50
 8002768:	46bd      	mov	sp, r7
 800276a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800276e:	bf00      	nop
 8002770:	40023800 	.word	0x40023800
 8002774:	00f42400 	.word	0x00f42400
 8002778:	007a1200 	.word	0x007a1200

0800277c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002780:	4b03      	ldr	r3, [pc, #12]	; (8002790 <HAL_RCC_GetHCLKFreq+0x14>)
 8002782:	681b      	ldr	r3, [r3, #0]
}
 8002784:	4618      	mov	r0, r3
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	20000000 	.word	0x20000000

08002794 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002798:	f7ff fff0 	bl	800277c <HAL_RCC_GetHCLKFreq>
 800279c:	4602      	mov	r2, r0
 800279e:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	0a9b      	lsrs	r3, r3, #10
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	4903      	ldr	r1, [pc, #12]	; (80027b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027aa:	5ccb      	ldrb	r3, [r1, r3]
 80027ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40023800 	.word	0x40023800
 80027b8:	08007484 	.word	0x08007484

080027bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027c0:	f7ff ffdc 	bl	800277c <HAL_RCC_GetHCLKFreq>
 80027c4:	4602      	mov	r2, r0
 80027c6:	4b05      	ldr	r3, [pc, #20]	; (80027dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	0b5b      	lsrs	r3, r3, #13
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	4903      	ldr	r1, [pc, #12]	; (80027e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027d2:	5ccb      	ldrb	r3, [r1, r3]
 80027d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027d8:	4618      	mov	r0, r3
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40023800 	.word	0x40023800
 80027e0:	08007484 	.word	0x08007484

080027e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	220f      	movs	r2, #15
 80027f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80027f4:	4b12      	ldr	r3, [pc, #72]	; (8002840 <HAL_RCC_GetClockConfig+0x5c>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f003 0203 	and.w	r2, r3, #3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002800:	4b0f      	ldr	r3, [pc, #60]	; (8002840 <HAL_RCC_GetClockConfig+0x5c>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800280c:	4b0c      	ldr	r3, [pc, #48]	; (8002840 <HAL_RCC_GetClockConfig+0x5c>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002818:	4b09      	ldr	r3, [pc, #36]	; (8002840 <HAL_RCC_GetClockConfig+0x5c>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	08db      	lsrs	r3, r3, #3
 800281e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002826:	4b07      	ldr	r3, [pc, #28]	; (8002844 <HAL_RCC_GetClockConfig+0x60>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 020f 	and.w	r2, r3, #15
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	601a      	str	r2, [r3, #0]
}
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	40023800 	.word	0x40023800
 8002844:	40023c00 	.word	0x40023c00

08002848 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b088      	sub	sp, #32
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002850:	2300      	movs	r3, #0
 8002852:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002854:	2300      	movs	r3, #0
 8002856:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002858:	2300      	movs	r3, #0
 800285a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800285c:	2300      	movs	r3, #0
 800285e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002860:	2300      	movs	r3, #0
 8002862:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b00      	cmp	r3, #0
 800286e:	d012      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002870:	4b69      	ldr	r3, [pc, #420]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	4a68      	ldr	r2, [pc, #416]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002876:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800287a:	6093      	str	r3, [r2, #8]
 800287c:	4b66      	ldr	r3, [pc, #408]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002884:	4964      	ldr	r1, [pc, #400]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002886:	4313      	orrs	r3, r2
 8002888:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002892:	2301      	movs	r3, #1
 8002894:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d017      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028a2:	4b5d      	ldr	r3, [pc, #372]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b0:	4959      	ldr	r1, [pc, #356]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028c0:	d101      	bne.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80028c2:	2301      	movs	r3, #1
 80028c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80028ce:	2301      	movs	r3, #1
 80028d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d017      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80028de:	4b4e      	ldr	r3, [pc, #312]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ec:	494a      	ldr	r1, [pc, #296]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028fc:	d101      	bne.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80028fe:	2301      	movs	r3, #1
 8002900:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800290a:	2301      	movs	r3, #1
 800290c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800291a:	2301      	movs	r3, #1
 800291c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0320 	and.w	r3, r3, #32
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 808b 	beq.w	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800292c:	4b3a      	ldr	r3, [pc, #232]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800292e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002930:	4a39      	ldr	r2, [pc, #228]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002936:	6413      	str	r3, [r2, #64]	; 0x40
 8002938:	4b37      	ldr	r3, [pc, #220]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800293a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002940:	60bb      	str	r3, [r7, #8]
 8002942:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002944:	4b35      	ldr	r3, [pc, #212]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a34      	ldr	r2, [pc, #208]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800294a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800294e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002950:	f7fe fb04 	bl	8000f5c <HAL_GetTick>
 8002954:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002956:	e008      	b.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002958:	f7fe fb00 	bl	8000f5c <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b64      	cmp	r3, #100	; 0x64
 8002964:	d901      	bls.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e38f      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800296a:	4b2c      	ldr	r3, [pc, #176]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0f0      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002976:	4b28      	ldr	r3, [pc, #160]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800297e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d035      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	429a      	cmp	r2, r3
 8002992:	d02e      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002994:	4b20      	ldr	r3, [pc, #128]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002998:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800299c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800299e:	4b1e      	ldr	r3, [pc, #120]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a2:	4a1d      	ldr	r2, [pc, #116]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029aa:	4b1b      	ldr	r3, [pc, #108]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ae:	4a1a      	ldr	r2, [pc, #104]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029b4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80029b6:	4a18      	ldr	r2, [pc, #96]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80029bc:	4b16      	ldr	r3, [pc, #88]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d114      	bne.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c8:	f7fe fac8 	bl	8000f5c <HAL_GetTick>
 80029cc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ce:	e00a      	b.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029d0:	f7fe fac4 	bl	8000f5c <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	f241 3288 	movw	r2, #5000	; 0x1388
 80029de:	4293      	cmp	r3, r2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e351      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e6:	4b0c      	ldr	r3, [pc, #48]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d0ee      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029fe:	d111      	bne.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002a00:	4b05      	ldr	r3, [pc, #20]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a0c:	4b04      	ldr	r3, [pc, #16]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002a0e:	400b      	ands	r3, r1
 8002a10:	4901      	ldr	r1, [pc, #4]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	608b      	str	r3, [r1, #8]
 8002a16:	e00b      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002a18:	40023800 	.word	0x40023800
 8002a1c:	40007000 	.word	0x40007000
 8002a20:	0ffffcff 	.word	0x0ffffcff
 8002a24:	4bac      	ldr	r3, [pc, #688]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	4aab      	ldr	r2, [pc, #684]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a2a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002a2e:	6093      	str	r3, [r2, #8]
 8002a30:	4ba9      	ldr	r3, [pc, #676]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a3c:	49a6      	ldr	r1, [pc, #664]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0310 	and.w	r3, r3, #16
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d010      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a4e:	4ba2      	ldr	r3, [pc, #648]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a54:	4aa0      	ldr	r2, [pc, #640]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a5a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002a5e:	4b9e      	ldr	r3, [pc, #632]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a60:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a68:	499b      	ldr	r1, [pc, #620]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00a      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a7c:	4b96      	ldr	r3, [pc, #600]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a82:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a8a:	4993      	ldr	r1, [pc, #588]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00a      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a9e:	4b8e      	ldr	r3, [pc, #568]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002aac:	498a      	ldr	r1, [pc, #552]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00a      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ac0:	4b85      	ldr	r3, [pc, #532]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ace:	4982      	ldr	r1, [pc, #520]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00a      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002ae2:	4b7d      	ldr	r3, [pc, #500]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af0:	4979      	ldr	r1, [pc, #484]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00a      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b04:	4b74      	ldr	r3, [pc, #464]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b0a:	f023 0203 	bic.w	r2, r3, #3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b12:	4971      	ldr	r1, [pc, #452]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00a      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b26:	4b6c      	ldr	r3, [pc, #432]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b2c:	f023 020c 	bic.w	r2, r3, #12
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b34:	4968      	ldr	r1, [pc, #416]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00a      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b48:	4b63      	ldr	r3, [pc, #396]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b4e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b56:	4960      	ldr	r1, [pc, #384]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00a      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b6a:	4b5b      	ldr	r3, [pc, #364]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b70:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b78:	4957      	ldr	r1, [pc, #348]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00a      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b8c:	4b52      	ldr	r3, [pc, #328]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b9a:	494f      	ldr	r1, [pc, #316]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00a      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002bae:	4b4a      	ldr	r3, [pc, #296]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bbc:	4946      	ldr	r1, [pc, #280]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00a      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002bd0:	4b41      	ldr	r3, [pc, #260]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bde:	493e      	ldr	r1, [pc, #248]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00a      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002bf2:	4b39      	ldr	r3, [pc, #228]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c00:	4935      	ldr	r1, [pc, #212]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00a      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c14:	4b30      	ldr	r3, [pc, #192]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c1a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c22:	492d      	ldr	r1, [pc, #180]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d011      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002c36:	4b28      	ldr	r3, [pc, #160]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c3c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c44:	4924      	ldr	r1, [pc, #144]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c54:	d101      	bne.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002c56:	2301      	movs	r3, #1
 8002c58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0308 	and.w	r3, r3, #8
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002c66:	2301      	movs	r3, #1
 8002c68:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00a      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c76:	4b18      	ldr	r3, [pc, #96]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c7c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c84:	4914      	ldr	r1, [pc, #80]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00b      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c98:	4b0f      	ldr	r3, [pc, #60]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c9e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ca8:	490b      	ldr	r1, [pc, #44]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00f      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002cbc:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ccc:	4902      	ldr	r1, [pc, #8]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002cd4:	e002      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002cd6:	bf00      	nop
 8002cd8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00b      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ce8:	4b8a      	ldr	r3, [pc, #552]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf8:	4986      	ldr	r1, [pc, #536]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00b      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002d0c:	4b81      	ldr	r3, [pc, #516]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d12:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d1c:	497d      	ldr	r1, [pc, #500]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d006      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f000 80d6 	beq.w	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002d38:	4b76      	ldr	r3, [pc, #472]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a75      	ldr	r2, [pc, #468]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d3e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d44:	f7fe f90a 	bl	8000f5c <HAL_GetTick>
 8002d48:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d4c:	f7fe f906 	bl	8000f5c <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b64      	cmp	r3, #100	; 0x64
 8002d58:	d901      	bls.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e195      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d5e:	4b6d      	ldr	r3, [pc, #436]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f0      	bne.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d021      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d11d      	bne.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d7e:	4b65      	ldr	r3, [pc, #404]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d84:	0c1b      	lsrs	r3, r3, #16
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d8c:	4b61      	ldr	r3, [pc, #388]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d92:	0e1b      	lsrs	r3, r3, #24
 8002d94:	f003 030f 	and.w	r3, r3, #15
 8002d98:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	019a      	lsls	r2, r3, #6
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	041b      	lsls	r3, r3, #16
 8002da4:	431a      	orrs	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	061b      	lsls	r3, r3, #24
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	071b      	lsls	r3, r3, #28
 8002db2:	4958      	ldr	r1, [pc, #352]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d004      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dce:	d00a      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d02e      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002de4:	d129      	bne.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002de6:	4b4b      	ldr	r3, [pc, #300]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002de8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dec:	0c1b      	lsrs	r3, r3, #16
 8002dee:	f003 0303 	and.w	r3, r3, #3
 8002df2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002df4:	4b47      	ldr	r3, [pc, #284]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002df6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dfa:	0f1b      	lsrs	r3, r3, #28
 8002dfc:	f003 0307 	and.w	r3, r3, #7
 8002e00:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	019a      	lsls	r2, r3, #6
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	041b      	lsls	r3, r3, #16
 8002e0c:	431a      	orrs	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	061b      	lsls	r3, r3, #24
 8002e14:	431a      	orrs	r2, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	071b      	lsls	r3, r3, #28
 8002e1a:	493e      	ldr	r1, [pc, #248]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002e22:	4b3c      	ldr	r3, [pc, #240]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e28:	f023 021f 	bic.w	r2, r3, #31
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	3b01      	subs	r3, #1
 8002e32:	4938      	ldr	r1, [pc, #224]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d01d      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e46:	4b33      	ldr	r3, [pc, #204]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e4c:	0e1b      	lsrs	r3, r3, #24
 8002e4e:	f003 030f 	and.w	r3, r3, #15
 8002e52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e54:	4b2f      	ldr	r3, [pc, #188]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e5a:	0f1b      	lsrs	r3, r3, #28
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	019a      	lsls	r2, r3, #6
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	041b      	lsls	r3, r3, #16
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	061b      	lsls	r3, r3, #24
 8002e74:	431a      	orrs	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	071b      	lsls	r3, r3, #28
 8002e7a:	4926      	ldr	r1, [pc, #152]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d011      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	019a      	lsls	r2, r3, #6
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	041b      	lsls	r3, r3, #16
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	061b      	lsls	r3, r3, #24
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	071b      	lsls	r3, r3, #28
 8002eaa:	491a      	ldr	r1, [pc, #104]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002eb2:	4b18      	ldr	r3, [pc, #96]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a17      	ldr	r2, [pc, #92]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eb8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ebc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ebe:	f7fe f84d 	bl	8000f5c <HAL_GetTick>
 8002ec2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ec4:	e008      	b.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ec6:	f7fe f849 	bl	8000f5c <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	2b64      	cmp	r3, #100	; 0x64
 8002ed2:	d901      	bls.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e0d8      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ed8:	4b0e      	ldr	r3, [pc, #56]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0f0      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	f040 80ce 	bne.w	8003088 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002eec:	4b09      	ldr	r3, [pc, #36]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a08      	ldr	r2, [pc, #32]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ef2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ef6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ef8:	f7fe f830 	bl	8000f5c <HAL_GetTick>
 8002efc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002efe:	e00b      	b.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002f00:	f7fe f82c 	bl	8000f5c <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b64      	cmp	r3, #100	; 0x64
 8002f0c:	d904      	bls.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e0bb      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002f12:	bf00      	nop
 8002f14:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f18:	4b5e      	ldr	r3, [pc, #376]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f24:	d0ec      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d009      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d02e      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d12a      	bne.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002f4e:	4b51      	ldr	r3, [pc, #324]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f54:	0c1b      	lsrs	r3, r3, #16
 8002f56:	f003 0303 	and.w	r3, r3, #3
 8002f5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f5c:	4b4d      	ldr	r3, [pc, #308]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f62:	0f1b      	lsrs	r3, r3, #28
 8002f64:	f003 0307 	and.w	r3, r3, #7
 8002f68:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	019a      	lsls	r2, r3, #6
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	041b      	lsls	r3, r3, #16
 8002f74:	431a      	orrs	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	061b      	lsls	r3, r3, #24
 8002f7c:	431a      	orrs	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	071b      	lsls	r3, r3, #28
 8002f82:	4944      	ldr	r1, [pc, #272]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002f8a:	4b42      	ldr	r3, [pc, #264]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f90:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	021b      	lsls	r3, r3, #8
 8002f9c:	493d      	ldr	r1, [pc, #244]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d022      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fb8:	d11d      	bne.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002fba:	4b36      	ldr	r3, [pc, #216]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc0:	0e1b      	lsrs	r3, r3, #24
 8002fc2:	f003 030f 	and.w	r3, r3, #15
 8002fc6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002fc8:	4b32      	ldr	r3, [pc, #200]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fce:	0f1b      	lsrs	r3, r3, #28
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	019a      	lsls	r2, r3, #6
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	041b      	lsls	r3, r3, #16
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	061b      	lsls	r3, r3, #24
 8002fe8:	431a      	orrs	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	071b      	lsls	r3, r3, #28
 8002fee:	4929      	ldr	r1, [pc, #164]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0308 	and.w	r3, r3, #8
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d028      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003002:	4b24      	ldr	r3, [pc, #144]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003008:	0e1b      	lsrs	r3, r3, #24
 800300a:	f003 030f 	and.w	r3, r3, #15
 800300e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003010:	4b20      	ldr	r3, [pc, #128]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003016:	0c1b      	lsrs	r3, r3, #16
 8003018:	f003 0303 	and.w	r3, r3, #3
 800301c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	019a      	lsls	r2, r3, #6
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	041b      	lsls	r3, r3, #16
 8003028:	431a      	orrs	r2, r3
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	061b      	lsls	r3, r3, #24
 800302e:	431a      	orrs	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	69db      	ldr	r3, [r3, #28]
 8003034:	071b      	lsls	r3, r3, #28
 8003036:	4917      	ldr	r1, [pc, #92]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003038:	4313      	orrs	r3, r2
 800303a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800303e:	4b15      	ldr	r3, [pc, #84]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003040:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003044:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304c:	4911      	ldr	r1, [pc, #68]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800304e:	4313      	orrs	r3, r2
 8003050:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003054:	4b0f      	ldr	r3, [pc, #60]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a0e      	ldr	r2, [pc, #56]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800305a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800305e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003060:	f7fd ff7c 	bl	8000f5c <HAL_GetTick>
 8003064:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003066:	e008      	b.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003068:	f7fd ff78 	bl	8000f5c <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b64      	cmp	r3, #100	; 0x64
 8003074:	d901      	bls.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e007      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800307a:	4b06      	ldr	r3, [pc, #24]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003082:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003086:	d1ef      	bne.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3720      	adds	r7, #32
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	40023800 	.word	0x40023800

08003098 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e049      	b.n	800313e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d106      	bne.n	80030c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f841 	bl	8003146 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2202      	movs	r2, #2
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3304      	adds	r3, #4
 80030d4:	4619      	mov	r1, r3
 80030d6:	4610      	mov	r0, r2
 80030d8:	f000 fa00 	bl	80034dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003146:	b480      	push	{r7}
 8003148:	b083      	sub	sp, #12
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
	...

0800315c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800316a:	b2db      	uxtb	r3, r3
 800316c:	2b01      	cmp	r3, #1
 800316e:	d001      	beq.n	8003174 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e054      	b.n	800321e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2202      	movs	r2, #2
 8003178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68da      	ldr	r2, [r3, #12]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f042 0201 	orr.w	r2, r2, #1
 800318a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a26      	ldr	r2, [pc, #152]	; (800322c <HAL_TIM_Base_Start_IT+0xd0>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d022      	beq.n	80031dc <HAL_TIM_Base_Start_IT+0x80>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800319e:	d01d      	beq.n	80031dc <HAL_TIM_Base_Start_IT+0x80>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a22      	ldr	r2, [pc, #136]	; (8003230 <HAL_TIM_Base_Start_IT+0xd4>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d018      	beq.n	80031dc <HAL_TIM_Base_Start_IT+0x80>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a21      	ldr	r2, [pc, #132]	; (8003234 <HAL_TIM_Base_Start_IT+0xd8>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d013      	beq.n	80031dc <HAL_TIM_Base_Start_IT+0x80>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a1f      	ldr	r2, [pc, #124]	; (8003238 <HAL_TIM_Base_Start_IT+0xdc>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d00e      	beq.n	80031dc <HAL_TIM_Base_Start_IT+0x80>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a1e      	ldr	r2, [pc, #120]	; (800323c <HAL_TIM_Base_Start_IT+0xe0>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d009      	beq.n	80031dc <HAL_TIM_Base_Start_IT+0x80>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a1c      	ldr	r2, [pc, #112]	; (8003240 <HAL_TIM_Base_Start_IT+0xe4>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d004      	beq.n	80031dc <HAL_TIM_Base_Start_IT+0x80>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a1b      	ldr	r2, [pc, #108]	; (8003244 <HAL_TIM_Base_Start_IT+0xe8>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d115      	bne.n	8003208 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689a      	ldr	r2, [r3, #8]
 80031e2:	4b19      	ldr	r3, [pc, #100]	; (8003248 <HAL_TIM_Base_Start_IT+0xec>)
 80031e4:	4013      	ands	r3, r2
 80031e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2b06      	cmp	r3, #6
 80031ec:	d015      	beq.n	800321a <HAL_TIM_Base_Start_IT+0xbe>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031f4:	d011      	beq.n	800321a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f042 0201 	orr.w	r2, r2, #1
 8003204:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003206:	e008      	b.n	800321a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f042 0201 	orr.w	r2, r2, #1
 8003216:	601a      	str	r2, [r3, #0]
 8003218:	e000      	b.n	800321c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800321a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3714      	adds	r7, #20
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	40010000 	.word	0x40010000
 8003230:	40000400 	.word	0x40000400
 8003234:	40000800 	.word	0x40000800
 8003238:	40000c00 	.word	0x40000c00
 800323c:	40010400 	.word	0x40010400
 8003240:	40014000 	.word	0x40014000
 8003244:	40001800 	.word	0x40001800
 8003248:	00010007 	.word	0x00010007

0800324c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b02      	cmp	r3, #2
 8003260:	d122      	bne.n	80032a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b02      	cmp	r3, #2
 800326e:	d11b      	bne.n	80032a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f06f 0202 	mvn.w	r2, #2
 8003278:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2201      	movs	r2, #1
 800327e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	f003 0303 	and.w	r3, r3, #3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 f905 	bl	800349e <HAL_TIM_IC_CaptureCallback>
 8003294:	e005      	b.n	80032a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f8f7 	bl	800348a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 f908 	bl	80034b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	f003 0304 	and.w	r3, r3, #4
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	d122      	bne.n	80032fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	f003 0304 	and.w	r3, r3, #4
 80032c0:	2b04      	cmp	r3, #4
 80032c2:	d11b      	bne.n	80032fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f06f 0204 	mvn.w	r2, #4
 80032cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2202      	movs	r2, #2
 80032d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f8db 	bl	800349e <HAL_TIM_IC_CaptureCallback>
 80032e8:	e005      	b.n	80032f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 f8cd 	bl	800348a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 f8de 	bl	80034b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	f003 0308 	and.w	r3, r3, #8
 8003306:	2b08      	cmp	r3, #8
 8003308:	d122      	bne.n	8003350 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	f003 0308 	and.w	r3, r3, #8
 8003314:	2b08      	cmp	r3, #8
 8003316:	d11b      	bne.n	8003350 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f06f 0208 	mvn.w	r2, #8
 8003320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2204      	movs	r2, #4
 8003326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	f003 0303 	and.w	r3, r3, #3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d003      	beq.n	800333e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 f8b1 	bl	800349e <HAL_TIM_IC_CaptureCallback>
 800333c:	e005      	b.n	800334a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f8a3 	bl	800348a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 f8b4 	bl	80034b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	f003 0310 	and.w	r3, r3, #16
 800335a:	2b10      	cmp	r3, #16
 800335c:	d122      	bne.n	80033a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	f003 0310 	and.w	r3, r3, #16
 8003368:	2b10      	cmp	r3, #16
 800336a:	d11b      	bne.n	80033a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f06f 0210 	mvn.w	r2, #16
 8003374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2208      	movs	r2, #8
 800337a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f887 	bl	800349e <HAL_TIM_IC_CaptureCallback>
 8003390:	e005      	b.n	800339e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f879 	bl	800348a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 f88a 	bl	80034b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d10e      	bne.n	80033d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d107      	bne.n	80033d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f06f 0201 	mvn.w	r2, #1
 80033c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f7fd fafe 	bl	80009cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033da:	2b80      	cmp	r3, #128	; 0x80
 80033dc:	d10e      	bne.n	80033fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e8:	2b80      	cmp	r3, #128	; 0x80
 80033ea:	d107      	bne.n	80033fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f91a 	bl	8003630 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003406:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800340a:	d10e      	bne.n	800342a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003416:	2b80      	cmp	r3, #128	; 0x80
 8003418:	d107      	bne.n	800342a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003422:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 f90d 	bl	8003644 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003434:	2b40      	cmp	r3, #64	; 0x40
 8003436:	d10e      	bne.n	8003456 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003442:	2b40      	cmp	r3, #64	; 0x40
 8003444:	d107      	bne.n	8003456 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800344e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 f838 	bl	80034c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	f003 0320 	and.w	r3, r3, #32
 8003460:	2b20      	cmp	r3, #32
 8003462:	d10e      	bne.n	8003482 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	f003 0320 	and.w	r3, r3, #32
 800346e:	2b20      	cmp	r3, #32
 8003470:	d107      	bne.n	8003482 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f06f 0220 	mvn.w	r2, #32
 800347a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f8cd 	bl	800361c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003482:	bf00      	nop
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800348a:	b480      	push	{r7}
 800348c:	b083      	sub	sp, #12
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr

0800349e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800349e:	b480      	push	{r7}
 80034a0:	b083      	sub	sp, #12
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034a6:	bf00      	nop
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr

080034b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034b2:	b480      	push	{r7}
 80034b4:	b083      	sub	sp, #12
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034ba:	bf00      	nop
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b083      	sub	sp, #12
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034ce:	bf00      	nop
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
	...

080034dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a40      	ldr	r2, [pc, #256]	; (80035f0 <TIM_Base_SetConfig+0x114>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d013      	beq.n	800351c <TIM_Base_SetConfig+0x40>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034fa:	d00f      	beq.n	800351c <TIM_Base_SetConfig+0x40>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a3d      	ldr	r2, [pc, #244]	; (80035f4 <TIM_Base_SetConfig+0x118>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d00b      	beq.n	800351c <TIM_Base_SetConfig+0x40>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a3c      	ldr	r2, [pc, #240]	; (80035f8 <TIM_Base_SetConfig+0x11c>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d007      	beq.n	800351c <TIM_Base_SetConfig+0x40>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a3b      	ldr	r2, [pc, #236]	; (80035fc <TIM_Base_SetConfig+0x120>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d003      	beq.n	800351c <TIM_Base_SetConfig+0x40>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a3a      	ldr	r2, [pc, #232]	; (8003600 <TIM_Base_SetConfig+0x124>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d108      	bne.n	800352e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003522:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	4313      	orrs	r3, r2
 800352c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a2f      	ldr	r2, [pc, #188]	; (80035f0 <TIM_Base_SetConfig+0x114>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d02b      	beq.n	800358e <TIM_Base_SetConfig+0xb2>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800353c:	d027      	beq.n	800358e <TIM_Base_SetConfig+0xb2>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a2c      	ldr	r2, [pc, #176]	; (80035f4 <TIM_Base_SetConfig+0x118>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d023      	beq.n	800358e <TIM_Base_SetConfig+0xb2>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a2b      	ldr	r2, [pc, #172]	; (80035f8 <TIM_Base_SetConfig+0x11c>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d01f      	beq.n	800358e <TIM_Base_SetConfig+0xb2>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a2a      	ldr	r2, [pc, #168]	; (80035fc <TIM_Base_SetConfig+0x120>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d01b      	beq.n	800358e <TIM_Base_SetConfig+0xb2>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a29      	ldr	r2, [pc, #164]	; (8003600 <TIM_Base_SetConfig+0x124>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d017      	beq.n	800358e <TIM_Base_SetConfig+0xb2>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a28      	ldr	r2, [pc, #160]	; (8003604 <TIM_Base_SetConfig+0x128>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d013      	beq.n	800358e <TIM_Base_SetConfig+0xb2>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a27      	ldr	r2, [pc, #156]	; (8003608 <TIM_Base_SetConfig+0x12c>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d00f      	beq.n	800358e <TIM_Base_SetConfig+0xb2>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a26      	ldr	r2, [pc, #152]	; (800360c <TIM_Base_SetConfig+0x130>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d00b      	beq.n	800358e <TIM_Base_SetConfig+0xb2>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a25      	ldr	r2, [pc, #148]	; (8003610 <TIM_Base_SetConfig+0x134>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d007      	beq.n	800358e <TIM_Base_SetConfig+0xb2>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a24      	ldr	r2, [pc, #144]	; (8003614 <TIM_Base_SetConfig+0x138>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d003      	beq.n	800358e <TIM_Base_SetConfig+0xb2>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a23      	ldr	r2, [pc, #140]	; (8003618 <TIM_Base_SetConfig+0x13c>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d108      	bne.n	80035a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003594:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	4313      	orrs	r3, r2
 800359e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a0a      	ldr	r2, [pc, #40]	; (80035f0 <TIM_Base_SetConfig+0x114>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d003      	beq.n	80035d4 <TIM_Base_SetConfig+0xf8>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a0c      	ldr	r2, [pc, #48]	; (8003600 <TIM_Base_SetConfig+0x124>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d103      	bne.n	80035dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	691a      	ldr	r2, [r3, #16]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	615a      	str	r2, [r3, #20]
}
 80035e2:	bf00      	nop
 80035e4:	3714      	adds	r7, #20
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	40010000 	.word	0x40010000
 80035f4:	40000400 	.word	0x40000400
 80035f8:	40000800 	.word	0x40000800
 80035fc:	40000c00 	.word	0x40000c00
 8003600:	40010400 	.word	0x40010400
 8003604:	40014000 	.word	0x40014000
 8003608:	40014400 	.word	0x40014400
 800360c:	40014800 	.word	0x40014800
 8003610:	40001800 	.word	0x40001800
 8003614:	40001c00 	.word	0x40001c00
 8003618:	40002000 	.word	0x40002000

0800361c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e040      	b.n	80036ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800366e:	2b00      	cmp	r3, #0
 8003670:	d106      	bne.n	8003680 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f7fd fa9e 	bl	8000bbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2224      	movs	r2, #36	; 0x24
 8003684:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 0201 	bic.w	r2, r2, #1
 8003694:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f8b0 	bl	80037fc <UART_SetConfig>
 800369c:	4603      	mov	r3, r0
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d101      	bne.n	80036a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e022      	b.n	80036ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d002      	beq.n	80036b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 fb08 	bl	8003cc4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685a      	ldr	r2, [r3, #4]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	689a      	ldr	r2, [r3, #8]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 0201 	orr.w	r2, r2, #1
 80036e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 fb8f 	bl	8003e08 <UART_CheckIdleState>
 80036ea:	4603      	mov	r3, r0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3708      	adds	r7, #8
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b08a      	sub	sp, #40	; 0x28
 80036f8:	af02      	add	r7, sp, #8
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	603b      	str	r3, [r7, #0]
 8003700:	4613      	mov	r3, r2
 8003702:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003708:	2b20      	cmp	r3, #32
 800370a:	d171      	bne.n	80037f0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d002      	beq.n	8003718 <HAL_UART_Transmit+0x24>
 8003712:	88fb      	ldrh	r3, [r7, #6]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d101      	bne.n	800371c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e06a      	b.n	80037f2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2221      	movs	r2, #33	; 0x21
 8003728:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800372a:	f7fd fc17 	bl	8000f5c <HAL_GetTick>
 800372e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	88fa      	ldrh	r2, [r7, #6]
 8003734:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	88fa      	ldrh	r2, [r7, #6]
 800373c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003748:	d108      	bne.n	800375c <HAL_UART_Transmit+0x68>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d104      	bne.n	800375c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003752:	2300      	movs	r3, #0
 8003754:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	61bb      	str	r3, [r7, #24]
 800375a:	e003      	b.n	8003764 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003760:	2300      	movs	r3, #0
 8003762:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003764:	e02c      	b.n	80037c0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	2200      	movs	r2, #0
 800376e:	2180      	movs	r1, #128	; 0x80
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f000 fb96 	bl	8003ea2 <UART_WaitOnFlagUntilTimeout>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d001      	beq.n	8003780 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e038      	b.n	80037f2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10b      	bne.n	800379e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	461a      	mov	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003794:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	3302      	adds	r3, #2
 800379a:	61bb      	str	r3, [r7, #24]
 800379c:	e007      	b.n	80037ae <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	781a      	ldrb	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	3301      	adds	r3, #1
 80037ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	3b01      	subs	r3, #1
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1cc      	bne.n	8003766 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	9300      	str	r3, [sp, #0]
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	2200      	movs	r2, #0
 80037d4:	2140      	movs	r1, #64	; 0x40
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f000 fb63 	bl	8003ea2 <UART_WaitOnFlagUntilTimeout>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e005      	b.n	80037f2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2220      	movs	r2, #32
 80037ea:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80037ec:	2300      	movs	r3, #0
 80037ee:	e000      	b.n	80037f2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80037f0:	2302      	movs	r3, #2
  }
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3720      	adds	r7, #32
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
	...

080037fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b088      	sub	sp, #32
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003804:	2300      	movs	r3, #0
 8003806:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	431a      	orrs	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	431a      	orrs	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	69db      	ldr	r3, [r3, #28]
 800381c:	4313      	orrs	r3, r2
 800381e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	4ba6      	ldr	r3, [pc, #664]	; (8003ac0 <UART_SetConfig+0x2c4>)
 8003828:	4013      	ands	r3, r2
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6812      	ldr	r2, [r2, #0]
 800382e:	6979      	ldr	r1, [r7, #20]
 8003830:	430b      	orrs	r3, r1
 8003832:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68da      	ldr	r2, [r3, #12]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	430a      	orrs	r2, r1
 8003848:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	697a      	ldr	r2, [r7, #20]
 8003856:	4313      	orrs	r3, r2
 8003858:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	430a      	orrs	r2, r1
 800386c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a94      	ldr	r2, [pc, #592]	; (8003ac4 <UART_SetConfig+0x2c8>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d120      	bne.n	80038ba <UART_SetConfig+0xbe>
 8003878:	4b93      	ldr	r3, [pc, #588]	; (8003ac8 <UART_SetConfig+0x2cc>)
 800387a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800387e:	f003 0303 	and.w	r3, r3, #3
 8003882:	2b03      	cmp	r3, #3
 8003884:	d816      	bhi.n	80038b4 <UART_SetConfig+0xb8>
 8003886:	a201      	add	r2, pc, #4	; (adr r2, 800388c <UART_SetConfig+0x90>)
 8003888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800388c:	0800389d 	.word	0x0800389d
 8003890:	080038a9 	.word	0x080038a9
 8003894:	080038a3 	.word	0x080038a3
 8003898:	080038af 	.word	0x080038af
 800389c:	2301      	movs	r3, #1
 800389e:	77fb      	strb	r3, [r7, #31]
 80038a0:	e150      	b.n	8003b44 <UART_SetConfig+0x348>
 80038a2:	2302      	movs	r3, #2
 80038a4:	77fb      	strb	r3, [r7, #31]
 80038a6:	e14d      	b.n	8003b44 <UART_SetConfig+0x348>
 80038a8:	2304      	movs	r3, #4
 80038aa:	77fb      	strb	r3, [r7, #31]
 80038ac:	e14a      	b.n	8003b44 <UART_SetConfig+0x348>
 80038ae:	2308      	movs	r3, #8
 80038b0:	77fb      	strb	r3, [r7, #31]
 80038b2:	e147      	b.n	8003b44 <UART_SetConfig+0x348>
 80038b4:	2310      	movs	r3, #16
 80038b6:	77fb      	strb	r3, [r7, #31]
 80038b8:	e144      	b.n	8003b44 <UART_SetConfig+0x348>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a83      	ldr	r2, [pc, #524]	; (8003acc <UART_SetConfig+0x2d0>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d132      	bne.n	800392a <UART_SetConfig+0x12e>
 80038c4:	4b80      	ldr	r3, [pc, #512]	; (8003ac8 <UART_SetConfig+0x2cc>)
 80038c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ca:	f003 030c 	and.w	r3, r3, #12
 80038ce:	2b0c      	cmp	r3, #12
 80038d0:	d828      	bhi.n	8003924 <UART_SetConfig+0x128>
 80038d2:	a201      	add	r2, pc, #4	; (adr r2, 80038d8 <UART_SetConfig+0xdc>)
 80038d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d8:	0800390d 	.word	0x0800390d
 80038dc:	08003925 	.word	0x08003925
 80038e0:	08003925 	.word	0x08003925
 80038e4:	08003925 	.word	0x08003925
 80038e8:	08003919 	.word	0x08003919
 80038ec:	08003925 	.word	0x08003925
 80038f0:	08003925 	.word	0x08003925
 80038f4:	08003925 	.word	0x08003925
 80038f8:	08003913 	.word	0x08003913
 80038fc:	08003925 	.word	0x08003925
 8003900:	08003925 	.word	0x08003925
 8003904:	08003925 	.word	0x08003925
 8003908:	0800391f 	.word	0x0800391f
 800390c:	2300      	movs	r3, #0
 800390e:	77fb      	strb	r3, [r7, #31]
 8003910:	e118      	b.n	8003b44 <UART_SetConfig+0x348>
 8003912:	2302      	movs	r3, #2
 8003914:	77fb      	strb	r3, [r7, #31]
 8003916:	e115      	b.n	8003b44 <UART_SetConfig+0x348>
 8003918:	2304      	movs	r3, #4
 800391a:	77fb      	strb	r3, [r7, #31]
 800391c:	e112      	b.n	8003b44 <UART_SetConfig+0x348>
 800391e:	2308      	movs	r3, #8
 8003920:	77fb      	strb	r3, [r7, #31]
 8003922:	e10f      	b.n	8003b44 <UART_SetConfig+0x348>
 8003924:	2310      	movs	r3, #16
 8003926:	77fb      	strb	r3, [r7, #31]
 8003928:	e10c      	b.n	8003b44 <UART_SetConfig+0x348>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a68      	ldr	r2, [pc, #416]	; (8003ad0 <UART_SetConfig+0x2d4>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d120      	bne.n	8003976 <UART_SetConfig+0x17a>
 8003934:	4b64      	ldr	r3, [pc, #400]	; (8003ac8 <UART_SetConfig+0x2cc>)
 8003936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800393a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800393e:	2b30      	cmp	r3, #48	; 0x30
 8003940:	d013      	beq.n	800396a <UART_SetConfig+0x16e>
 8003942:	2b30      	cmp	r3, #48	; 0x30
 8003944:	d814      	bhi.n	8003970 <UART_SetConfig+0x174>
 8003946:	2b20      	cmp	r3, #32
 8003948:	d009      	beq.n	800395e <UART_SetConfig+0x162>
 800394a:	2b20      	cmp	r3, #32
 800394c:	d810      	bhi.n	8003970 <UART_SetConfig+0x174>
 800394e:	2b00      	cmp	r3, #0
 8003950:	d002      	beq.n	8003958 <UART_SetConfig+0x15c>
 8003952:	2b10      	cmp	r3, #16
 8003954:	d006      	beq.n	8003964 <UART_SetConfig+0x168>
 8003956:	e00b      	b.n	8003970 <UART_SetConfig+0x174>
 8003958:	2300      	movs	r3, #0
 800395a:	77fb      	strb	r3, [r7, #31]
 800395c:	e0f2      	b.n	8003b44 <UART_SetConfig+0x348>
 800395e:	2302      	movs	r3, #2
 8003960:	77fb      	strb	r3, [r7, #31]
 8003962:	e0ef      	b.n	8003b44 <UART_SetConfig+0x348>
 8003964:	2304      	movs	r3, #4
 8003966:	77fb      	strb	r3, [r7, #31]
 8003968:	e0ec      	b.n	8003b44 <UART_SetConfig+0x348>
 800396a:	2308      	movs	r3, #8
 800396c:	77fb      	strb	r3, [r7, #31]
 800396e:	e0e9      	b.n	8003b44 <UART_SetConfig+0x348>
 8003970:	2310      	movs	r3, #16
 8003972:	77fb      	strb	r3, [r7, #31]
 8003974:	e0e6      	b.n	8003b44 <UART_SetConfig+0x348>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a56      	ldr	r2, [pc, #344]	; (8003ad4 <UART_SetConfig+0x2d8>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d120      	bne.n	80039c2 <UART_SetConfig+0x1c6>
 8003980:	4b51      	ldr	r3, [pc, #324]	; (8003ac8 <UART_SetConfig+0x2cc>)
 8003982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003986:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800398a:	2bc0      	cmp	r3, #192	; 0xc0
 800398c:	d013      	beq.n	80039b6 <UART_SetConfig+0x1ba>
 800398e:	2bc0      	cmp	r3, #192	; 0xc0
 8003990:	d814      	bhi.n	80039bc <UART_SetConfig+0x1c0>
 8003992:	2b80      	cmp	r3, #128	; 0x80
 8003994:	d009      	beq.n	80039aa <UART_SetConfig+0x1ae>
 8003996:	2b80      	cmp	r3, #128	; 0x80
 8003998:	d810      	bhi.n	80039bc <UART_SetConfig+0x1c0>
 800399a:	2b00      	cmp	r3, #0
 800399c:	d002      	beq.n	80039a4 <UART_SetConfig+0x1a8>
 800399e:	2b40      	cmp	r3, #64	; 0x40
 80039a0:	d006      	beq.n	80039b0 <UART_SetConfig+0x1b4>
 80039a2:	e00b      	b.n	80039bc <UART_SetConfig+0x1c0>
 80039a4:	2300      	movs	r3, #0
 80039a6:	77fb      	strb	r3, [r7, #31]
 80039a8:	e0cc      	b.n	8003b44 <UART_SetConfig+0x348>
 80039aa:	2302      	movs	r3, #2
 80039ac:	77fb      	strb	r3, [r7, #31]
 80039ae:	e0c9      	b.n	8003b44 <UART_SetConfig+0x348>
 80039b0:	2304      	movs	r3, #4
 80039b2:	77fb      	strb	r3, [r7, #31]
 80039b4:	e0c6      	b.n	8003b44 <UART_SetConfig+0x348>
 80039b6:	2308      	movs	r3, #8
 80039b8:	77fb      	strb	r3, [r7, #31]
 80039ba:	e0c3      	b.n	8003b44 <UART_SetConfig+0x348>
 80039bc:	2310      	movs	r3, #16
 80039be:	77fb      	strb	r3, [r7, #31]
 80039c0:	e0c0      	b.n	8003b44 <UART_SetConfig+0x348>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a44      	ldr	r2, [pc, #272]	; (8003ad8 <UART_SetConfig+0x2dc>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d125      	bne.n	8003a18 <UART_SetConfig+0x21c>
 80039cc:	4b3e      	ldr	r3, [pc, #248]	; (8003ac8 <UART_SetConfig+0x2cc>)
 80039ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039da:	d017      	beq.n	8003a0c <UART_SetConfig+0x210>
 80039dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039e0:	d817      	bhi.n	8003a12 <UART_SetConfig+0x216>
 80039e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039e6:	d00b      	beq.n	8003a00 <UART_SetConfig+0x204>
 80039e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039ec:	d811      	bhi.n	8003a12 <UART_SetConfig+0x216>
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <UART_SetConfig+0x1fe>
 80039f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039f6:	d006      	beq.n	8003a06 <UART_SetConfig+0x20a>
 80039f8:	e00b      	b.n	8003a12 <UART_SetConfig+0x216>
 80039fa:	2300      	movs	r3, #0
 80039fc:	77fb      	strb	r3, [r7, #31]
 80039fe:	e0a1      	b.n	8003b44 <UART_SetConfig+0x348>
 8003a00:	2302      	movs	r3, #2
 8003a02:	77fb      	strb	r3, [r7, #31]
 8003a04:	e09e      	b.n	8003b44 <UART_SetConfig+0x348>
 8003a06:	2304      	movs	r3, #4
 8003a08:	77fb      	strb	r3, [r7, #31]
 8003a0a:	e09b      	b.n	8003b44 <UART_SetConfig+0x348>
 8003a0c:	2308      	movs	r3, #8
 8003a0e:	77fb      	strb	r3, [r7, #31]
 8003a10:	e098      	b.n	8003b44 <UART_SetConfig+0x348>
 8003a12:	2310      	movs	r3, #16
 8003a14:	77fb      	strb	r3, [r7, #31]
 8003a16:	e095      	b.n	8003b44 <UART_SetConfig+0x348>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a2f      	ldr	r2, [pc, #188]	; (8003adc <UART_SetConfig+0x2e0>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d125      	bne.n	8003a6e <UART_SetConfig+0x272>
 8003a22:	4b29      	ldr	r3, [pc, #164]	; (8003ac8 <UART_SetConfig+0x2cc>)
 8003a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a30:	d017      	beq.n	8003a62 <UART_SetConfig+0x266>
 8003a32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a36:	d817      	bhi.n	8003a68 <UART_SetConfig+0x26c>
 8003a38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a3c:	d00b      	beq.n	8003a56 <UART_SetConfig+0x25a>
 8003a3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a42:	d811      	bhi.n	8003a68 <UART_SetConfig+0x26c>
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d003      	beq.n	8003a50 <UART_SetConfig+0x254>
 8003a48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a4c:	d006      	beq.n	8003a5c <UART_SetConfig+0x260>
 8003a4e:	e00b      	b.n	8003a68 <UART_SetConfig+0x26c>
 8003a50:	2301      	movs	r3, #1
 8003a52:	77fb      	strb	r3, [r7, #31]
 8003a54:	e076      	b.n	8003b44 <UART_SetConfig+0x348>
 8003a56:	2302      	movs	r3, #2
 8003a58:	77fb      	strb	r3, [r7, #31]
 8003a5a:	e073      	b.n	8003b44 <UART_SetConfig+0x348>
 8003a5c:	2304      	movs	r3, #4
 8003a5e:	77fb      	strb	r3, [r7, #31]
 8003a60:	e070      	b.n	8003b44 <UART_SetConfig+0x348>
 8003a62:	2308      	movs	r3, #8
 8003a64:	77fb      	strb	r3, [r7, #31]
 8003a66:	e06d      	b.n	8003b44 <UART_SetConfig+0x348>
 8003a68:	2310      	movs	r3, #16
 8003a6a:	77fb      	strb	r3, [r7, #31]
 8003a6c:	e06a      	b.n	8003b44 <UART_SetConfig+0x348>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a1b      	ldr	r2, [pc, #108]	; (8003ae0 <UART_SetConfig+0x2e4>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d138      	bne.n	8003aea <UART_SetConfig+0x2ee>
 8003a78:	4b13      	ldr	r3, [pc, #76]	; (8003ac8 <UART_SetConfig+0x2cc>)
 8003a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a7e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003a82:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a86:	d017      	beq.n	8003ab8 <UART_SetConfig+0x2bc>
 8003a88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a8c:	d82a      	bhi.n	8003ae4 <UART_SetConfig+0x2e8>
 8003a8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a92:	d00b      	beq.n	8003aac <UART_SetConfig+0x2b0>
 8003a94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a98:	d824      	bhi.n	8003ae4 <UART_SetConfig+0x2e8>
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <UART_SetConfig+0x2aa>
 8003a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aa2:	d006      	beq.n	8003ab2 <UART_SetConfig+0x2b6>
 8003aa4:	e01e      	b.n	8003ae4 <UART_SetConfig+0x2e8>
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	77fb      	strb	r3, [r7, #31]
 8003aaa:	e04b      	b.n	8003b44 <UART_SetConfig+0x348>
 8003aac:	2302      	movs	r3, #2
 8003aae:	77fb      	strb	r3, [r7, #31]
 8003ab0:	e048      	b.n	8003b44 <UART_SetConfig+0x348>
 8003ab2:	2304      	movs	r3, #4
 8003ab4:	77fb      	strb	r3, [r7, #31]
 8003ab6:	e045      	b.n	8003b44 <UART_SetConfig+0x348>
 8003ab8:	2308      	movs	r3, #8
 8003aba:	77fb      	strb	r3, [r7, #31]
 8003abc:	e042      	b.n	8003b44 <UART_SetConfig+0x348>
 8003abe:	bf00      	nop
 8003ac0:	efff69f3 	.word	0xefff69f3
 8003ac4:	40011000 	.word	0x40011000
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	40004400 	.word	0x40004400
 8003ad0:	40004800 	.word	0x40004800
 8003ad4:	40004c00 	.word	0x40004c00
 8003ad8:	40005000 	.word	0x40005000
 8003adc:	40011400 	.word	0x40011400
 8003ae0:	40007800 	.word	0x40007800
 8003ae4:	2310      	movs	r3, #16
 8003ae6:	77fb      	strb	r3, [r7, #31]
 8003ae8:	e02c      	b.n	8003b44 <UART_SetConfig+0x348>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a72      	ldr	r2, [pc, #456]	; (8003cb8 <UART_SetConfig+0x4bc>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d125      	bne.n	8003b40 <UART_SetConfig+0x344>
 8003af4:	4b71      	ldr	r3, [pc, #452]	; (8003cbc <UART_SetConfig+0x4c0>)
 8003af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003afa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003afe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003b02:	d017      	beq.n	8003b34 <UART_SetConfig+0x338>
 8003b04:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003b08:	d817      	bhi.n	8003b3a <UART_SetConfig+0x33e>
 8003b0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b0e:	d00b      	beq.n	8003b28 <UART_SetConfig+0x32c>
 8003b10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b14:	d811      	bhi.n	8003b3a <UART_SetConfig+0x33e>
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d003      	beq.n	8003b22 <UART_SetConfig+0x326>
 8003b1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b1e:	d006      	beq.n	8003b2e <UART_SetConfig+0x332>
 8003b20:	e00b      	b.n	8003b3a <UART_SetConfig+0x33e>
 8003b22:	2300      	movs	r3, #0
 8003b24:	77fb      	strb	r3, [r7, #31]
 8003b26:	e00d      	b.n	8003b44 <UART_SetConfig+0x348>
 8003b28:	2302      	movs	r3, #2
 8003b2a:	77fb      	strb	r3, [r7, #31]
 8003b2c:	e00a      	b.n	8003b44 <UART_SetConfig+0x348>
 8003b2e:	2304      	movs	r3, #4
 8003b30:	77fb      	strb	r3, [r7, #31]
 8003b32:	e007      	b.n	8003b44 <UART_SetConfig+0x348>
 8003b34:	2308      	movs	r3, #8
 8003b36:	77fb      	strb	r3, [r7, #31]
 8003b38:	e004      	b.n	8003b44 <UART_SetConfig+0x348>
 8003b3a:	2310      	movs	r3, #16
 8003b3c:	77fb      	strb	r3, [r7, #31]
 8003b3e:	e001      	b.n	8003b44 <UART_SetConfig+0x348>
 8003b40:	2310      	movs	r3, #16
 8003b42:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	69db      	ldr	r3, [r3, #28]
 8003b48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b4c:	d15b      	bne.n	8003c06 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003b4e:	7ffb      	ldrb	r3, [r7, #31]
 8003b50:	2b08      	cmp	r3, #8
 8003b52:	d828      	bhi.n	8003ba6 <UART_SetConfig+0x3aa>
 8003b54:	a201      	add	r2, pc, #4	; (adr r2, 8003b5c <UART_SetConfig+0x360>)
 8003b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5a:	bf00      	nop
 8003b5c:	08003b81 	.word	0x08003b81
 8003b60:	08003b89 	.word	0x08003b89
 8003b64:	08003b91 	.word	0x08003b91
 8003b68:	08003ba7 	.word	0x08003ba7
 8003b6c:	08003b97 	.word	0x08003b97
 8003b70:	08003ba7 	.word	0x08003ba7
 8003b74:	08003ba7 	.word	0x08003ba7
 8003b78:	08003ba7 	.word	0x08003ba7
 8003b7c:	08003b9f 	.word	0x08003b9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b80:	f7fe fe08 	bl	8002794 <HAL_RCC_GetPCLK1Freq>
 8003b84:	61b8      	str	r0, [r7, #24]
        break;
 8003b86:	e013      	b.n	8003bb0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b88:	f7fe fe18 	bl	80027bc <HAL_RCC_GetPCLK2Freq>
 8003b8c:	61b8      	str	r0, [r7, #24]
        break;
 8003b8e:	e00f      	b.n	8003bb0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b90:	4b4b      	ldr	r3, [pc, #300]	; (8003cc0 <UART_SetConfig+0x4c4>)
 8003b92:	61bb      	str	r3, [r7, #24]
        break;
 8003b94:	e00c      	b.n	8003bb0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b96:	f7fe fceb 	bl	8002570 <HAL_RCC_GetSysClockFreq>
 8003b9a:	61b8      	str	r0, [r7, #24]
        break;
 8003b9c:	e008      	b.n	8003bb0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ba2:	61bb      	str	r3, [r7, #24]
        break;
 8003ba4:	e004      	b.n	8003bb0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	77bb      	strb	r3, [r7, #30]
        break;
 8003bae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d074      	beq.n	8003ca0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	005a      	lsls	r2, r3, #1
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	085b      	lsrs	r3, r3, #1
 8003bc0:	441a      	add	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	2b0f      	cmp	r3, #15
 8003bd0:	d916      	bls.n	8003c00 <UART_SetConfig+0x404>
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bd8:	d212      	bcs.n	8003c00 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	f023 030f 	bic.w	r3, r3, #15
 8003be2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	085b      	lsrs	r3, r3, #1
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	f003 0307 	and.w	r3, r3, #7
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	89fb      	ldrh	r3, [r7, #14]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	89fa      	ldrh	r2, [r7, #14]
 8003bfc:	60da      	str	r2, [r3, #12]
 8003bfe:	e04f      	b.n	8003ca0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	77bb      	strb	r3, [r7, #30]
 8003c04:	e04c      	b.n	8003ca0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c06:	7ffb      	ldrb	r3, [r7, #31]
 8003c08:	2b08      	cmp	r3, #8
 8003c0a:	d828      	bhi.n	8003c5e <UART_SetConfig+0x462>
 8003c0c:	a201      	add	r2, pc, #4	; (adr r2, 8003c14 <UART_SetConfig+0x418>)
 8003c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c12:	bf00      	nop
 8003c14:	08003c39 	.word	0x08003c39
 8003c18:	08003c41 	.word	0x08003c41
 8003c1c:	08003c49 	.word	0x08003c49
 8003c20:	08003c5f 	.word	0x08003c5f
 8003c24:	08003c4f 	.word	0x08003c4f
 8003c28:	08003c5f 	.word	0x08003c5f
 8003c2c:	08003c5f 	.word	0x08003c5f
 8003c30:	08003c5f 	.word	0x08003c5f
 8003c34:	08003c57 	.word	0x08003c57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c38:	f7fe fdac 	bl	8002794 <HAL_RCC_GetPCLK1Freq>
 8003c3c:	61b8      	str	r0, [r7, #24]
        break;
 8003c3e:	e013      	b.n	8003c68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c40:	f7fe fdbc 	bl	80027bc <HAL_RCC_GetPCLK2Freq>
 8003c44:	61b8      	str	r0, [r7, #24]
        break;
 8003c46:	e00f      	b.n	8003c68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c48:	4b1d      	ldr	r3, [pc, #116]	; (8003cc0 <UART_SetConfig+0x4c4>)
 8003c4a:	61bb      	str	r3, [r7, #24]
        break;
 8003c4c:	e00c      	b.n	8003c68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c4e:	f7fe fc8f 	bl	8002570 <HAL_RCC_GetSysClockFreq>
 8003c52:	61b8      	str	r0, [r7, #24]
        break;
 8003c54:	e008      	b.n	8003c68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c5a:	61bb      	str	r3, [r7, #24]
        break;
 8003c5c:	e004      	b.n	8003c68 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	77bb      	strb	r3, [r7, #30]
        break;
 8003c66:	bf00      	nop
    }

    if (pclk != 0U)
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d018      	beq.n	8003ca0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	085a      	lsrs	r2, r3, #1
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	441a      	add	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c80:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	2b0f      	cmp	r3, #15
 8003c86:	d909      	bls.n	8003c9c <UART_SetConfig+0x4a0>
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c8e:	d205      	bcs.n	8003c9c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	60da      	str	r2, [r3, #12]
 8003c9a:	e001      	b.n	8003ca0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003cac:	7fbb      	ldrb	r3, [r7, #30]
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3720      	adds	r7, #32
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	40007c00 	.word	0x40007c00
 8003cbc:	40023800 	.word	0x40023800
 8003cc0:	00f42400 	.word	0x00f42400

08003cc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00a      	beq.n	8003cee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00a      	beq.n	8003d10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d14:	f003 0304 	and.w	r3, r3, #4
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00a      	beq.n	8003d32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d36:	f003 0308 	and.w	r3, r3, #8
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00a      	beq.n	8003d54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	430a      	orrs	r2, r1
 8003d52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d58:	f003 0310 	and.w	r3, r3, #16
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00a      	beq.n	8003d76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	430a      	orrs	r2, r1
 8003d74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7a:	f003 0320 	and.w	r3, r3, #32
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00a      	beq.n	8003d98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	430a      	orrs	r2, r1
 8003d96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d01a      	beq.n	8003dda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dc2:	d10a      	bne.n	8003dda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00a      	beq.n	8003dfc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	605a      	str	r2, [r3, #4]
  }
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af02      	add	r7, sp, #8
 8003e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e18:	f7fd f8a0 	bl	8000f5c <HAL_GetTick>
 8003e1c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0308 	and.w	r3, r3, #8
 8003e28:	2b08      	cmp	r3, #8
 8003e2a:	d10e      	bne.n	8003e4a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f831 	bl	8003ea2 <UART_WaitOnFlagUntilTimeout>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e027      	b.n	8003e9a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0304 	and.w	r3, r3, #4
 8003e54:	2b04      	cmp	r3, #4
 8003e56:	d10e      	bne.n	8003e76 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 f81b 	bl	8003ea2 <UART_WaitOnFlagUntilTimeout>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e011      	b.n	8003e9a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2220      	movs	r2, #32
 8003e7a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2220      	movs	r2, #32
 8003e80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3710      	adds	r7, #16
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b09c      	sub	sp, #112	; 0x70
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	60f8      	str	r0, [r7, #12]
 8003eaa:	60b9      	str	r1, [r7, #8]
 8003eac:	603b      	str	r3, [r7, #0]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eb2:	e0a7      	b.n	8004004 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003eb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003eba:	f000 80a3 	beq.w	8004004 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ebe:	f7fd f84d 	bl	8000f5c <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d302      	bcc.n	8003ed4 <UART_WaitOnFlagUntilTimeout+0x32>
 8003ece:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d13f      	bne.n	8003f54 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003edc:	e853 3f00 	ldrex	r3, [r3]
 8003ee0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003ee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ee4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ee8:	667b      	str	r3, [r7, #100]	; 0x64
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	461a      	mov	r2, r3
 8003ef0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ef2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ef4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003ef8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003efa:	e841 2300 	strex	r3, r2, [r1]
 8003efe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003f00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1e6      	bne.n	8003ed4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	3308      	adds	r3, #8
 8003f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f10:	e853 3f00 	ldrex	r3, [r3]
 8003f14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f18:	f023 0301 	bic.w	r3, r3, #1
 8003f1c:	663b      	str	r3, [r7, #96]	; 0x60
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	3308      	adds	r3, #8
 8003f24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f26:	64ba      	str	r2, [r7, #72]	; 0x48
 8003f28:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f2e:	e841 2300 	strex	r3, r2, [r1]
 8003f32:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1e5      	bne.n	8003f06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2220      	movs	r2, #32
 8003f44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e068      	b.n	8004026 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0304 	and.w	r3, r3, #4
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d050      	beq.n	8004004 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	69db      	ldr	r3, [r3, #28]
 8003f68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f70:	d148      	bne.n	8004004 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f7a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f84:	e853 3f00 	ldrex	r3, [r3]
 8003f88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f90:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	461a      	mov	r2, r3
 8003f98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f9a:	637b      	str	r3, [r7, #52]	; 0x34
 8003f9c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fa0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fa2:	e841 2300 	strex	r3, r2, [r1]
 8003fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1e6      	bne.n	8003f7c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	3308      	adds	r3, #8
 8003fb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	e853 3f00 	ldrex	r3, [r3]
 8003fbc:	613b      	str	r3, [r7, #16]
   return(result);
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	f023 0301 	bic.w	r3, r3, #1
 8003fc4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	3308      	adds	r3, #8
 8003fcc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003fce:	623a      	str	r2, [r7, #32]
 8003fd0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd2:	69f9      	ldr	r1, [r7, #28]
 8003fd4:	6a3a      	ldr	r2, [r7, #32]
 8003fd6:	e841 2300 	strex	r3, r2, [r1]
 8003fda:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1e5      	bne.n	8003fae <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2220      	movs	r2, #32
 8003fec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e010      	b.n	8004026 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	69da      	ldr	r2, [r3, #28]
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	4013      	ands	r3, r2
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	429a      	cmp	r2, r3
 8004012:	bf0c      	ite	eq
 8004014:	2301      	moveq	r3, #1
 8004016:	2300      	movne	r3, #0
 8004018:	b2db      	uxtb	r3, r3
 800401a:	461a      	mov	r2, r3
 800401c:	79fb      	ldrb	r3, [r7, #7]
 800401e:	429a      	cmp	r2, r3
 8004020:	f43f af48 	beq.w	8003eb4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3770      	adds	r7, #112	; 0x70
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
	...

08004030 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004030:	b084      	sub	sp, #16
 8004032:	b580      	push	{r7, lr}
 8004034:	b084      	sub	sp, #16
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
 800403a:	f107 001c 	add.w	r0, r7, #28
 800403e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004044:	2b01      	cmp	r3, #1
 8004046:	d120      	bne.n	800408a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	68da      	ldr	r2, [r3, #12]
 8004058:	4b20      	ldr	r3, [pc, #128]	; (80040dc <USB_CoreInit+0xac>)
 800405a:	4013      	ands	r3, r2
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800406c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800406e:	2b01      	cmp	r3, #1
 8004070:	d105      	bne.n	800407e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 fa96 	bl	80045b0 <USB_CoreReset>
 8004084:	4603      	mov	r3, r0
 8004086:	73fb      	strb	r3, [r7, #15]
 8004088:	e010      	b.n	80040ac <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 fa8a 	bl	80045b0 <USB_CoreReset>
 800409c:	4603      	mov	r3, r0
 800409e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80040ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d10b      	bne.n	80040ca <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f043 0206 	orr.w	r2, r3, #6
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f043 0220 	orr.w	r2, r3, #32
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80040ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040d6:	b004      	add	sp, #16
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	ffbdffbf 	.word	0xffbdffbf

080040e0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f023 0201 	bic.w	r2, r3, #1
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b084      	sub	sp, #16
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
 800410a:	460b      	mov	r3, r1
 800410c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800410e:	2300      	movs	r3, #0
 8004110:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800411e:	78fb      	ldrb	r3, [r7, #3]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d115      	bne.n	8004150 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004130:	2001      	movs	r0, #1
 8004132:	f7fc ff1f 	bl	8000f74 <HAL_Delay>
      ms++;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	3301      	adds	r3, #1
 800413a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 fa29 	bl	8004594 <USB_GetMode>
 8004142:	4603      	mov	r3, r0
 8004144:	2b01      	cmp	r3, #1
 8004146:	d01e      	beq.n	8004186 <USB_SetCurrentMode+0x84>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2b31      	cmp	r3, #49	; 0x31
 800414c:	d9f0      	bls.n	8004130 <USB_SetCurrentMode+0x2e>
 800414e:	e01a      	b.n	8004186 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004150:	78fb      	ldrb	r3, [r7, #3]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d115      	bne.n	8004182 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004162:	2001      	movs	r0, #1
 8004164:	f7fc ff06 	bl	8000f74 <HAL_Delay>
      ms++;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	3301      	adds	r3, #1
 800416c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 fa10 	bl	8004594 <USB_GetMode>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d005      	beq.n	8004186 <USB_SetCurrentMode+0x84>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2b31      	cmp	r3, #49	; 0x31
 800417e:	d9f0      	bls.n	8004162 <USB_SetCurrentMode+0x60>
 8004180:	e001      	b.n	8004186 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e005      	b.n	8004192 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2b32      	cmp	r3, #50	; 0x32
 800418a:	d101      	bne.n	8004190 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e000      	b.n	8004192 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
	...

0800419c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800419c:	b084      	sub	sp, #16
 800419e:	b580      	push	{r7, lr}
 80041a0:	b086      	sub	sp, #24
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
 80041a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80041aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80041ae:	2300      	movs	r3, #0
 80041b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80041b6:	2300      	movs	r3, #0
 80041b8:	613b      	str	r3, [r7, #16]
 80041ba:	e009      	b.n	80041d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	3340      	adds	r3, #64	; 0x40
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	4413      	add	r3, r2
 80041c6:	2200      	movs	r2, #0
 80041c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	3301      	adds	r3, #1
 80041ce:	613b      	str	r3, [r7, #16]
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	2b0e      	cmp	r3, #14
 80041d4:	d9f2      	bls.n	80041bc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80041d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d11c      	bne.n	8004216 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041ea:	f043 0302 	orr.w	r3, r3, #2
 80041ee:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	601a      	str	r2, [r3, #0]
 8004214:	e005      	b.n	8004222 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004228:	461a      	mov	r2, r3
 800422a:	2300      	movs	r3, #0
 800422c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004234:	4619      	mov	r1, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800423c:	461a      	mov	r2, r3
 800423e:	680b      	ldr	r3, [r1, #0]
 8004240:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004244:	2b01      	cmp	r3, #1
 8004246:	d10c      	bne.n	8004262 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800424a:	2b00      	cmp	r3, #0
 800424c:	d104      	bne.n	8004258 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800424e:	2100      	movs	r1, #0
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f000 f965 	bl	8004520 <USB_SetDevSpeed>
 8004256:	e008      	b.n	800426a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004258:	2101      	movs	r1, #1
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 f960 	bl	8004520 <USB_SetDevSpeed>
 8004260:	e003      	b.n	800426a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004262:	2103      	movs	r1, #3
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 f95b 	bl	8004520 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800426a:	2110      	movs	r1, #16
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 f8f3 	bl	8004458 <USB_FlushTxFifo>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d001      	beq.n	800427c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 f91f 	bl	80044c0 <USB_FlushRxFifo>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d001      	beq.n	800428c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004292:	461a      	mov	r2, r3
 8004294:	2300      	movs	r3, #0
 8004296:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800429e:	461a      	mov	r2, r3
 80042a0:	2300      	movs	r3, #0
 80042a2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042aa:	461a      	mov	r2, r3
 80042ac:	2300      	movs	r3, #0
 80042ae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042b0:	2300      	movs	r3, #0
 80042b2:	613b      	str	r3, [r7, #16]
 80042b4:	e043      	b.n	800433e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	015a      	lsls	r2, r3, #5
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	4413      	add	r3, r2
 80042be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042cc:	d118      	bne.n	8004300 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d10a      	bne.n	80042ea <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	015a      	lsls	r2, r3, #5
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	4413      	add	r3, r2
 80042dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042e0:	461a      	mov	r2, r3
 80042e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80042e6:	6013      	str	r3, [r2, #0]
 80042e8:	e013      	b.n	8004312 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	015a      	lsls	r2, r3, #5
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	4413      	add	r3, r2
 80042f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042f6:	461a      	mov	r2, r3
 80042f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80042fc:	6013      	str	r3, [r2, #0]
 80042fe:	e008      	b.n	8004312 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	015a      	lsls	r2, r3, #5
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	4413      	add	r3, r2
 8004308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800430c:	461a      	mov	r2, r3
 800430e:	2300      	movs	r3, #0
 8004310:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	015a      	lsls	r2, r3, #5
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	4413      	add	r3, r2
 800431a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800431e:	461a      	mov	r2, r3
 8004320:	2300      	movs	r3, #0
 8004322:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	015a      	lsls	r2, r3, #5
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4413      	add	r3, r2
 800432c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004330:	461a      	mov	r2, r3
 8004332:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004336:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	3301      	adds	r3, #1
 800433c:	613b      	str	r3, [r7, #16]
 800433e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	429a      	cmp	r2, r3
 8004344:	d3b7      	bcc.n	80042b6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004346:	2300      	movs	r3, #0
 8004348:	613b      	str	r3, [r7, #16]
 800434a:	e043      	b.n	80043d4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	015a      	lsls	r2, r3, #5
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	4413      	add	r3, r2
 8004354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800435e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004362:	d118      	bne.n	8004396 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d10a      	bne.n	8004380 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	015a      	lsls	r2, r3, #5
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	4413      	add	r3, r2
 8004372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004376:	461a      	mov	r2, r3
 8004378:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800437c:	6013      	str	r3, [r2, #0]
 800437e:	e013      	b.n	80043a8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	015a      	lsls	r2, r3, #5
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	4413      	add	r3, r2
 8004388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800438c:	461a      	mov	r2, r3
 800438e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004392:	6013      	str	r3, [r2, #0]
 8004394:	e008      	b.n	80043a8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	015a      	lsls	r2, r3, #5
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	4413      	add	r3, r2
 800439e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a2:	461a      	mov	r2, r3
 80043a4:	2300      	movs	r3, #0
 80043a6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	015a      	lsls	r2, r3, #5
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4413      	add	r3, r2
 80043b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b4:	461a      	mov	r2, r3
 80043b6:	2300      	movs	r3, #0
 80043b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	015a      	lsls	r2, r3, #5
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	4413      	add	r3, r2
 80043c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c6:	461a      	mov	r2, r3
 80043c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80043cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	3301      	adds	r3, #1
 80043d2:	613b      	str	r3, [r7, #16]
 80043d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d3b7      	bcc.n	800434c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043ee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80043fc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80043fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004400:	2b00      	cmp	r3, #0
 8004402:	d105      	bne.n	8004410 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	f043 0210 	orr.w	r2, r3, #16
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	699a      	ldr	r2, [r3, #24]
 8004414:	4b0e      	ldr	r3, [pc, #56]	; (8004450 <USB_DevInit+0x2b4>)
 8004416:	4313      	orrs	r3, r2
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800441c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800441e:	2b00      	cmp	r3, #0
 8004420:	d005      	beq.n	800442e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	f043 0208 	orr.w	r2, r3, #8
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800442e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004430:	2b01      	cmp	r3, #1
 8004432:	d105      	bne.n	8004440 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	699a      	ldr	r2, [r3, #24]
 8004438:	4b06      	ldr	r3, [pc, #24]	; (8004454 <USB_DevInit+0x2b8>)
 800443a:	4313      	orrs	r3, r2
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004440:	7dfb      	ldrb	r3, [r7, #23]
}
 8004442:	4618      	mov	r0, r3
 8004444:	3718      	adds	r7, #24
 8004446:	46bd      	mov	sp, r7
 8004448:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800444c:	b004      	add	sp, #16
 800444e:	4770      	bx	lr
 8004450:	803c3800 	.word	0x803c3800
 8004454:	40000004 	.word	0x40000004

08004458 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004462:	2300      	movs	r3, #0
 8004464:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	3301      	adds	r3, #1
 800446a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	4a13      	ldr	r2, [pc, #76]	; (80044bc <USB_FlushTxFifo+0x64>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d901      	bls.n	8004478 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e01b      	b.n	80044b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	2b00      	cmp	r3, #0
 800447e:	daf2      	bge.n	8004466 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004480:	2300      	movs	r3, #0
 8004482:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	019b      	lsls	r3, r3, #6
 8004488:	f043 0220 	orr.w	r2, r3, #32
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	3301      	adds	r3, #1
 8004494:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	4a08      	ldr	r2, [pc, #32]	; (80044bc <USB_FlushTxFifo+0x64>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d901      	bls.n	80044a2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e006      	b.n	80044b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	f003 0320 	and.w	r3, r3, #32
 80044aa:	2b20      	cmp	r3, #32
 80044ac:	d0f0      	beq.n	8004490 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3714      	adds	r7, #20
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr
 80044bc:	00030d40 	.word	0x00030d40

080044c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b085      	sub	sp, #20
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80044c8:	2300      	movs	r3, #0
 80044ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	3301      	adds	r3, #1
 80044d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	4a11      	ldr	r2, [pc, #68]	; (800451c <USB_FlushRxFifo+0x5c>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d901      	bls.n	80044de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e018      	b.n	8004510 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	daf2      	bge.n	80044cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80044e6:	2300      	movs	r3, #0
 80044e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2210      	movs	r2, #16
 80044ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	3301      	adds	r3, #1
 80044f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	4a08      	ldr	r2, [pc, #32]	; (800451c <USB_FlushRxFifo+0x5c>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d901      	bls.n	8004502 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e006      	b.n	8004510 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	f003 0310 	and.w	r3, r3, #16
 800450a:	2b10      	cmp	r3, #16
 800450c:	d0f0      	beq.n	80044f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3714      	adds	r7, #20
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr
 800451c:	00030d40 	.word	0x00030d40

08004520 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004520:	b480      	push	{r7}
 8004522:	b085      	sub	sp, #20
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	460b      	mov	r3, r1
 800452a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	78fb      	ldrb	r3, [r7, #3]
 800453a:	68f9      	ldr	r1, [r7, #12]
 800453c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004540:	4313      	orrs	r3, r2
 8004542:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3714      	adds	r7, #20
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr

08004552 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004552:	b480      	push	{r7}
 8004554:	b085      	sub	sp, #20
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800456c:	f023 0303 	bic.w	r3, r3, #3
 8004570:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004580:	f043 0302 	orr.w	r3, r3, #2
 8004584:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3714      	adds	r7, #20
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	f003 0301 	and.w	r3, r3, #1
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80045b8:	2300      	movs	r3, #0
 80045ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	3301      	adds	r3, #1
 80045c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	4a13      	ldr	r2, [pc, #76]	; (8004614 <USB_CoreReset+0x64>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d901      	bls.n	80045ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e01b      	b.n	8004606 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	daf2      	bge.n	80045bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80045d6:	2300      	movs	r3, #0
 80045d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	f043 0201 	orr.w	r2, r3, #1
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	3301      	adds	r3, #1
 80045ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	4a09      	ldr	r2, [pc, #36]	; (8004614 <USB_CoreReset+0x64>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d901      	bls.n	80045f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e006      	b.n	8004606 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	2b01      	cmp	r3, #1
 8004602:	d0f0      	beq.n	80045e6 <USB_CoreReset+0x36>

  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3714      	adds	r7, #20
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	00030d40 	.word	0x00030d40

08004618 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004618:	b480      	push	{r7}
 800461a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800461c:	bf00      	nop
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
	...

08004628 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800462e:	f3ef 8305 	mrs	r3, IPSR
 8004632:	60bb      	str	r3, [r7, #8]
  return(result);
 8004634:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004636:	2b00      	cmp	r3, #0
 8004638:	d10f      	bne.n	800465a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800463a:	f3ef 8310 	mrs	r3, PRIMASK
 800463e:	607b      	str	r3, [r7, #4]
  return(result);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d105      	bne.n	8004652 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004646:	f3ef 8311 	mrs	r3, BASEPRI
 800464a:	603b      	str	r3, [r7, #0]
  return(result);
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d007      	beq.n	8004662 <osKernelInitialize+0x3a>
 8004652:	4b0e      	ldr	r3, [pc, #56]	; (800468c <osKernelInitialize+0x64>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2b02      	cmp	r3, #2
 8004658:	d103      	bne.n	8004662 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800465a:	f06f 0305 	mvn.w	r3, #5
 800465e:	60fb      	str	r3, [r7, #12]
 8004660:	e00c      	b.n	800467c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004662:	4b0a      	ldr	r3, [pc, #40]	; (800468c <osKernelInitialize+0x64>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d105      	bne.n	8004676 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800466a:	4b08      	ldr	r3, [pc, #32]	; (800468c <osKernelInitialize+0x64>)
 800466c:	2201      	movs	r2, #1
 800466e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004670:	2300      	movs	r3, #0
 8004672:	60fb      	str	r3, [r7, #12]
 8004674:	e002      	b.n	800467c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004676:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800467a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800467c:	68fb      	ldr	r3, [r7, #12]
}
 800467e:	4618      	mov	r0, r3
 8004680:	3714      	adds	r7, #20
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	20000844 	.word	0x20000844

08004690 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004696:	f3ef 8305 	mrs	r3, IPSR
 800469a:	60bb      	str	r3, [r7, #8]
  return(result);
 800469c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10f      	bne.n	80046c2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046a2:	f3ef 8310 	mrs	r3, PRIMASK
 80046a6:	607b      	str	r3, [r7, #4]
  return(result);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d105      	bne.n	80046ba <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80046ae:	f3ef 8311 	mrs	r3, BASEPRI
 80046b2:	603b      	str	r3, [r7, #0]
  return(result);
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d007      	beq.n	80046ca <osKernelStart+0x3a>
 80046ba:	4b0f      	ldr	r3, [pc, #60]	; (80046f8 <osKernelStart+0x68>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d103      	bne.n	80046ca <osKernelStart+0x3a>
    stat = osErrorISR;
 80046c2:	f06f 0305 	mvn.w	r3, #5
 80046c6:	60fb      	str	r3, [r7, #12]
 80046c8:	e010      	b.n	80046ec <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80046ca:	4b0b      	ldr	r3, [pc, #44]	; (80046f8 <osKernelStart+0x68>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d109      	bne.n	80046e6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80046d2:	f7ff ffa1 	bl	8004618 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80046d6:	4b08      	ldr	r3, [pc, #32]	; (80046f8 <osKernelStart+0x68>)
 80046d8:	2202      	movs	r2, #2
 80046da:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80046dc:	f001 f978 	bl	80059d0 <vTaskStartScheduler>
      stat = osOK;
 80046e0:	2300      	movs	r3, #0
 80046e2:	60fb      	str	r3, [r7, #12]
 80046e4:	e002      	b.n	80046ec <osKernelStart+0x5c>
    } else {
      stat = osError;
 80046e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046ea:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80046ec:	68fb      	ldr	r3, [r7, #12]
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	20000844 	.word	0x20000844

080046fc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b090      	sub	sp, #64	; 0x40
 8004700:	af04      	add	r7, sp, #16
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004708:	2300      	movs	r3, #0
 800470a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800470c:	f3ef 8305 	mrs	r3, IPSR
 8004710:	61fb      	str	r3, [r7, #28]
  return(result);
 8004712:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004714:	2b00      	cmp	r3, #0
 8004716:	f040 808f 	bne.w	8004838 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800471a:	f3ef 8310 	mrs	r3, PRIMASK
 800471e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d105      	bne.n	8004732 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004726:	f3ef 8311 	mrs	r3, BASEPRI
 800472a:	617b      	str	r3, [r7, #20]
  return(result);
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d003      	beq.n	800473a <osThreadNew+0x3e>
 8004732:	4b44      	ldr	r3, [pc, #272]	; (8004844 <osThreadNew+0x148>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2b02      	cmp	r3, #2
 8004738:	d07e      	beq.n	8004838 <osThreadNew+0x13c>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d07b      	beq.n	8004838 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004740:	2380      	movs	r3, #128	; 0x80
 8004742:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004744:	2318      	movs	r3, #24
 8004746:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8004748:	2300      	movs	r3, #0
 800474a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800474c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004750:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d045      	beq.n	80047e4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d002      	beq.n	8004766 <osThreadNew+0x6a>
        name = attr->name;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d002      	beq.n	8004774 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004776:	2b00      	cmp	r3, #0
 8004778:	d008      	beq.n	800478c <osThreadNew+0x90>
 800477a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477c:	2b38      	cmp	r3, #56	; 0x38
 800477e:	d805      	bhi.n	800478c <osThreadNew+0x90>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f003 0301 	and.w	r3, r3, #1
 8004788:	2b00      	cmp	r3, #0
 800478a:	d001      	beq.n	8004790 <osThreadNew+0x94>
        return (NULL);
 800478c:	2300      	movs	r3, #0
 800478e:	e054      	b.n	800483a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	695b      	ldr	r3, [r3, #20]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d003      	beq.n	80047a0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	695b      	ldr	r3, [r3, #20]
 800479c:	089b      	lsrs	r3, r3, #2
 800479e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00e      	beq.n	80047c6 <osThreadNew+0xca>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	2b5b      	cmp	r3, #91	; 0x5b
 80047ae:	d90a      	bls.n	80047c6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d006      	beq.n	80047c6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d002      	beq.n	80047c6 <osThreadNew+0xca>
        mem = 1;
 80047c0:	2301      	movs	r3, #1
 80047c2:	623b      	str	r3, [r7, #32]
 80047c4:	e010      	b.n	80047e8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d10c      	bne.n	80047e8 <osThreadNew+0xec>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d108      	bne.n	80047e8 <osThreadNew+0xec>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d104      	bne.n	80047e8 <osThreadNew+0xec>
          mem = 0;
 80047de:	2300      	movs	r3, #0
 80047e0:	623b      	str	r3, [r7, #32]
 80047e2:	e001      	b.n	80047e8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80047e4:	2300      	movs	r3, #0
 80047e6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80047e8:	6a3b      	ldr	r3, [r7, #32]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d110      	bne.n	8004810 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80047f6:	9202      	str	r2, [sp, #8]
 80047f8:	9301      	str	r3, [sp, #4]
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004802:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f000 fe7f 	bl	8005508 <xTaskCreateStatic>
 800480a:	4603      	mov	r3, r0
 800480c:	613b      	str	r3, [r7, #16]
 800480e:	e013      	b.n	8004838 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004810:	6a3b      	ldr	r3, [r7, #32]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d110      	bne.n	8004838 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004818:	b29a      	uxth	r2, r3
 800481a:	f107 0310 	add.w	r3, r7, #16
 800481e:	9301      	str	r3, [sp, #4]
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	9300      	str	r3, [sp, #0]
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	f000 fed0 	bl	80055ce <xTaskCreate>
 800482e:	4603      	mov	r3, r0
 8004830:	2b01      	cmp	r3, #1
 8004832:	d001      	beq.n	8004838 <osThreadNew+0x13c>
          hTask = NULL;
 8004834:	2300      	movs	r3, #0
 8004836:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004838:	693b      	ldr	r3, [r7, #16]
}
 800483a:	4618      	mov	r0, r3
 800483c:	3730      	adds	r7, #48	; 0x30
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	20000844 	.word	0x20000844

08004848 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004850:	f3ef 8305 	mrs	r3, IPSR
 8004854:	613b      	str	r3, [r7, #16]
  return(result);
 8004856:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004858:	2b00      	cmp	r3, #0
 800485a:	d10f      	bne.n	800487c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800485c:	f3ef 8310 	mrs	r3, PRIMASK
 8004860:	60fb      	str	r3, [r7, #12]
  return(result);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d105      	bne.n	8004874 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004868:	f3ef 8311 	mrs	r3, BASEPRI
 800486c:	60bb      	str	r3, [r7, #8]
  return(result);
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d007      	beq.n	8004884 <osDelay+0x3c>
 8004874:	4b0a      	ldr	r3, [pc, #40]	; (80048a0 <osDelay+0x58>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2b02      	cmp	r3, #2
 800487a:	d103      	bne.n	8004884 <osDelay+0x3c>
    stat = osErrorISR;
 800487c:	f06f 0305 	mvn.w	r3, #5
 8004880:	617b      	str	r3, [r7, #20]
 8004882:	e007      	b.n	8004894 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004884:	2300      	movs	r3, #0
 8004886:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d002      	beq.n	8004894 <osDelay+0x4c>
      vTaskDelay(ticks);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f001 f868 	bl	8005964 <vTaskDelay>
    }
  }

  return (stat);
 8004894:	697b      	ldr	r3, [r7, #20]
}
 8004896:	4618      	mov	r0, r3
 8004898:	3718      	adds	r7, #24
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	20000844 	.word	0x20000844

080048a4 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b088      	sub	sp, #32
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048ac:	f3ef 8305 	mrs	r3, IPSR
 80048b0:	617b      	str	r3, [r7, #20]
  return(result);
 80048b2:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d10f      	bne.n	80048d8 <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048b8:	f3ef 8310 	mrs	r3, PRIMASK
 80048bc:	613b      	str	r3, [r7, #16]
  return(result);
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d105      	bne.n	80048d0 <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80048c4:	f3ef 8311 	mrs	r3, BASEPRI
 80048c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d007      	beq.n	80048e0 <osDelayUntil+0x3c>
 80048d0:	4b13      	ldr	r3, [pc, #76]	; (8004920 <osDelayUntil+0x7c>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d103      	bne.n	80048e0 <osDelayUntil+0x3c>
    stat = osErrorISR;
 80048d8:	f06f 0305 	mvn.w	r3, #5
 80048dc:	61fb      	str	r3, [r7, #28]
 80048de:	e019      	b.n	8004914 <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 80048e0:	2300      	movs	r3, #0
 80048e2:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 80048e4:	f001 f98c 	bl	8005c00 <xTaskGetTickCount>
 80048e8:	4603      	mov	r3, r0
 80048ea:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d009      	beq.n	800490e <osDelayUntil+0x6a>
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	db06      	blt.n	800490e <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 8004900:	f107 0308 	add.w	r3, r7, #8
 8004904:	69b9      	ldr	r1, [r7, #24]
 8004906:	4618      	mov	r0, r3
 8004908:	f000 ffa8 	bl	800585c <vTaskDelayUntil>
 800490c:	e002      	b.n	8004914 <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800490e:	f06f 0303 	mvn.w	r3, #3
 8004912:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8004914:	69fb      	ldr	r3, [r7, #28]
}
 8004916:	4618      	mov	r0, r3
 8004918:	3720      	adds	r7, #32
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	20000844 	.word	0x20000844

08004924 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4a07      	ldr	r2, [pc, #28]	; (8004950 <vApplicationGetIdleTaskMemory+0x2c>)
 8004934:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	4a06      	ldr	r2, [pc, #24]	; (8004954 <vApplicationGetIdleTaskMemory+0x30>)
 800493a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2280      	movs	r2, #128	; 0x80
 8004940:	601a      	str	r2, [r3, #0]
}
 8004942:	bf00      	nop
 8004944:	3714      	adds	r7, #20
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	20000848 	.word	0x20000848
 8004954:	200008a4 	.word	0x200008a4

08004958 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	4a07      	ldr	r2, [pc, #28]	; (8004984 <vApplicationGetTimerTaskMemory+0x2c>)
 8004968:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	4a06      	ldr	r2, [pc, #24]	; (8004988 <vApplicationGetTimerTaskMemory+0x30>)
 800496e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004976:	601a      	str	r2, [r3, #0]
}
 8004978:	bf00      	nop
 800497a:	3714      	adds	r7, #20
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr
 8004984:	20000aa4 	.word	0x20000aa4
 8004988:	20000b00 	.word	0x20000b00

0800498c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f103 0208 	add.w	r2, r3, #8
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f103 0208 	add.w	r2, r3, #8
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f103 0208 	add.w	r2, r3, #8
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80049da:	bf00      	nop
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr

080049e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80049e6:	b480      	push	{r7}
 80049e8:	b085      	sub	sp, #20
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
 80049ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	689a      	ldr	r2, [r3, #8]
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	683a      	ldr	r2, [r7, #0]
 8004a0a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	683a      	ldr	r2, [r7, #0]
 8004a10:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	1c5a      	adds	r2, r3, #1
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	601a      	str	r2, [r3, #0]
}
 8004a22:	bf00      	nop
 8004a24:	3714      	adds	r7, #20
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b085      	sub	sp, #20
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
 8004a36:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a44:	d103      	bne.n	8004a4e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	60fb      	str	r3, [r7, #12]
 8004a4c:	e00c      	b.n	8004a68 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	3308      	adds	r3, #8
 8004a52:	60fb      	str	r3, [r7, #12]
 8004a54:	e002      	b.n	8004a5c <vListInsert+0x2e>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	60fb      	str	r3, [r7, #12]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d2f6      	bcs.n	8004a56 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	685a      	ldr	r2, [r3, #4]
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	683a      	ldr	r2, [r7, #0]
 8004a82:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	1c5a      	adds	r2, r3, #1
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	601a      	str	r2, [r3, #0]
}
 8004a94:	bf00      	nop
 8004a96:	3714      	adds	r7, #20
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	6892      	ldr	r2, [r2, #8]
 8004ab6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	6852      	ldr	r2, [r2, #4]
 8004ac0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d103      	bne.n	8004ad4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	689a      	ldr	r2, [r3, #8]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	1e5a      	subs	r2, r3, #1
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3714      	adds	r7, #20
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d10c      	bne.n	8004b22 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0c:	b672      	cpsid	i
 8004b0e:	f383 8811 	msr	BASEPRI, r3
 8004b12:	f3bf 8f6f 	isb	sy
 8004b16:	f3bf 8f4f 	dsb	sy
 8004b1a:	b662      	cpsie	i
 8004b1c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004b1e:	bf00      	nop
 8004b20:	e7fe      	b.n	8004b20 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004b22:	f002 f903 	bl	8006d2c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b2e:	68f9      	ldr	r1, [r7, #12]
 8004b30:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004b32:	fb01 f303 	mul.w	r3, r1, r3
 8004b36:	441a      	add	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b52:	3b01      	subs	r3, #1
 8004b54:	68f9      	ldr	r1, [r7, #12]
 8004b56:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004b58:	fb01 f303 	mul.w	r3, r1, r3
 8004b5c:	441a      	add	r2, r3
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	22ff      	movs	r2, #255	; 0xff
 8004b66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	22ff      	movs	r2, #255	; 0xff
 8004b6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d114      	bne.n	8004ba2 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d01a      	beq.n	8004bb6 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	3310      	adds	r3, #16
 8004b84:	4618      	mov	r0, r3
 8004b86:	f001 f9bb 	bl	8005f00 <xTaskRemoveFromEventList>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d012      	beq.n	8004bb6 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004b90:	4b0c      	ldr	r3, [pc, #48]	; (8004bc4 <xQueueGenericReset+0xd0>)
 8004b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b96:	601a      	str	r2, [r3, #0]
 8004b98:	f3bf 8f4f 	dsb	sy
 8004b9c:	f3bf 8f6f 	isb	sy
 8004ba0:	e009      	b.n	8004bb6 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	3310      	adds	r3, #16
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f7ff fef0 	bl	800498c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	3324      	adds	r3, #36	; 0x24
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f7ff feeb 	bl	800498c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004bb6:	f002 f8ed 	bl	8006d94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004bba:	2301      	movs	r3, #1
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3710      	adds	r7, #16
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	e000ed04 	.word	0xe000ed04

08004bc8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b08e      	sub	sp, #56	; 0x38
 8004bcc:	af02      	add	r7, sp, #8
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
 8004bd4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d10c      	bne.n	8004bf6 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8004bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be0:	b672      	cpsid	i
 8004be2:	f383 8811 	msr	BASEPRI, r3
 8004be6:	f3bf 8f6f 	isb	sy
 8004bea:	f3bf 8f4f 	dsb	sy
 8004bee:	b662      	cpsie	i
 8004bf0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004bf2:	bf00      	nop
 8004bf4:	e7fe      	b.n	8004bf4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d10c      	bne.n	8004c16 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8004bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c00:	b672      	cpsid	i
 8004c02:	f383 8811 	msr	BASEPRI, r3
 8004c06:	f3bf 8f6f 	isb	sy
 8004c0a:	f3bf 8f4f 	dsb	sy
 8004c0e:	b662      	cpsie	i
 8004c10:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c12:	bf00      	nop
 8004c14:	e7fe      	b.n	8004c14 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d002      	beq.n	8004c22 <xQueueGenericCreateStatic+0x5a>
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <xQueueGenericCreateStatic+0x5e>
 8004c22:	2301      	movs	r3, #1
 8004c24:	e000      	b.n	8004c28 <xQueueGenericCreateStatic+0x60>
 8004c26:	2300      	movs	r3, #0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d10c      	bne.n	8004c46 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8004c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c30:	b672      	cpsid	i
 8004c32:	f383 8811 	msr	BASEPRI, r3
 8004c36:	f3bf 8f6f 	isb	sy
 8004c3a:	f3bf 8f4f 	dsb	sy
 8004c3e:	b662      	cpsie	i
 8004c40:	623b      	str	r3, [r7, #32]
}
 8004c42:	bf00      	nop
 8004c44:	e7fe      	b.n	8004c44 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d102      	bne.n	8004c52 <xQueueGenericCreateStatic+0x8a>
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <xQueueGenericCreateStatic+0x8e>
 8004c52:	2301      	movs	r3, #1
 8004c54:	e000      	b.n	8004c58 <xQueueGenericCreateStatic+0x90>
 8004c56:	2300      	movs	r3, #0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d10c      	bne.n	8004c76 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8004c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c60:	b672      	cpsid	i
 8004c62:	f383 8811 	msr	BASEPRI, r3
 8004c66:	f3bf 8f6f 	isb	sy
 8004c6a:	f3bf 8f4f 	dsb	sy
 8004c6e:	b662      	cpsie	i
 8004c70:	61fb      	str	r3, [r7, #28]
}
 8004c72:	bf00      	nop
 8004c74:	e7fe      	b.n	8004c74 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004c76:	2350      	movs	r3, #80	; 0x50
 8004c78:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	2b50      	cmp	r3, #80	; 0x50
 8004c7e:	d00c      	beq.n	8004c9a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8004c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c84:	b672      	cpsid	i
 8004c86:	f383 8811 	msr	BASEPRI, r3
 8004c8a:	f3bf 8f6f 	isb	sy
 8004c8e:	f3bf 8f4f 	dsb	sy
 8004c92:	b662      	cpsie	i
 8004c94:	61bb      	str	r3, [r7, #24]
}
 8004c96:	bf00      	nop
 8004c98:	e7fe      	b.n	8004c98 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004c9a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00d      	beq.n	8004cc2 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004cae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb4:	9300      	str	r3, [sp, #0]
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	68b9      	ldr	r1, [r7, #8]
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f000 f805 	bl	8004ccc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3730      	adds	r7, #48	; 0x30
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
 8004cd8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d103      	bne.n	8004ce8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	69ba      	ldr	r2, [r7, #24]
 8004ce4:	601a      	str	r2, [r3, #0]
 8004ce6:	e002      	b.n	8004cee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	68ba      	ldr	r2, [r7, #8]
 8004cf8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004cfa:	2101      	movs	r1, #1
 8004cfc:	69b8      	ldr	r0, [r7, #24]
 8004cfe:	f7ff fef9 	bl	8004af4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	78fa      	ldrb	r2, [r7, #3]
 8004d06:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004d0a:	bf00      	nop
 8004d0c:	3710      	adds	r7, #16
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
	...

08004d14 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b08e      	sub	sp, #56	; 0x38
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]
 8004d20:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004d22:	2300      	movs	r3, #0
 8004d24:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10c      	bne.n	8004d4a <xQueueGenericSend+0x36>
	__asm volatile
 8004d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d34:	b672      	cpsid	i
 8004d36:	f383 8811 	msr	BASEPRI, r3
 8004d3a:	f3bf 8f6f 	isb	sy
 8004d3e:	f3bf 8f4f 	dsb	sy
 8004d42:	b662      	cpsie	i
 8004d44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004d46:	bf00      	nop
 8004d48:	e7fe      	b.n	8004d48 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d103      	bne.n	8004d58 <xQueueGenericSend+0x44>
 8004d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d101      	bne.n	8004d5c <xQueueGenericSend+0x48>
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e000      	b.n	8004d5e <xQueueGenericSend+0x4a>
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d10c      	bne.n	8004d7c <xQueueGenericSend+0x68>
	__asm volatile
 8004d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d66:	b672      	cpsid	i
 8004d68:	f383 8811 	msr	BASEPRI, r3
 8004d6c:	f3bf 8f6f 	isb	sy
 8004d70:	f3bf 8f4f 	dsb	sy
 8004d74:	b662      	cpsie	i
 8004d76:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004d78:	bf00      	nop
 8004d7a:	e7fe      	b.n	8004d7a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d103      	bne.n	8004d8a <xQueueGenericSend+0x76>
 8004d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d101      	bne.n	8004d8e <xQueueGenericSend+0x7a>
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e000      	b.n	8004d90 <xQueueGenericSend+0x7c>
 8004d8e:	2300      	movs	r3, #0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10c      	bne.n	8004dae <xQueueGenericSend+0x9a>
	__asm volatile
 8004d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d98:	b672      	cpsid	i
 8004d9a:	f383 8811 	msr	BASEPRI, r3
 8004d9e:	f3bf 8f6f 	isb	sy
 8004da2:	f3bf 8f4f 	dsb	sy
 8004da6:	b662      	cpsie	i
 8004da8:	623b      	str	r3, [r7, #32]
}
 8004daa:	bf00      	nop
 8004dac:	e7fe      	b.n	8004dac <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004dae:	f001 fa6d 	bl	800628c <xTaskGetSchedulerState>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d102      	bne.n	8004dbe <xQueueGenericSend+0xaa>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d101      	bne.n	8004dc2 <xQueueGenericSend+0xae>
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e000      	b.n	8004dc4 <xQueueGenericSend+0xb0>
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d10c      	bne.n	8004de2 <xQueueGenericSend+0xce>
	__asm volatile
 8004dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dcc:	b672      	cpsid	i
 8004dce:	f383 8811 	msr	BASEPRI, r3
 8004dd2:	f3bf 8f6f 	isb	sy
 8004dd6:	f3bf 8f4f 	dsb	sy
 8004dda:	b662      	cpsie	i
 8004ddc:	61fb      	str	r3, [r7, #28]
}
 8004dde:	bf00      	nop
 8004de0:	e7fe      	b.n	8004de0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004de2:	f001 ffa3 	bl	8006d2c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d302      	bcc.n	8004df8 <xQueueGenericSend+0xe4>
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d129      	bne.n	8004e4c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004df8:	683a      	ldr	r2, [r7, #0]
 8004dfa:	68b9      	ldr	r1, [r7, #8]
 8004dfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dfe:	f000 fa15 	bl	800522c <prvCopyDataToQueue>
 8004e02:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d010      	beq.n	8004e2e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0e:	3324      	adds	r3, #36	; 0x24
 8004e10:	4618      	mov	r0, r3
 8004e12:	f001 f875 	bl	8005f00 <xTaskRemoveFromEventList>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d013      	beq.n	8004e44 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004e1c:	4b3f      	ldr	r3, [pc, #252]	; (8004f1c <xQueueGenericSend+0x208>)
 8004e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e22:	601a      	str	r2, [r3, #0]
 8004e24:	f3bf 8f4f 	dsb	sy
 8004e28:	f3bf 8f6f 	isb	sy
 8004e2c:	e00a      	b.n	8004e44 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d007      	beq.n	8004e44 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004e34:	4b39      	ldr	r3, [pc, #228]	; (8004f1c <xQueueGenericSend+0x208>)
 8004e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e3a:	601a      	str	r2, [r3, #0]
 8004e3c:	f3bf 8f4f 	dsb	sy
 8004e40:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004e44:	f001 ffa6 	bl	8006d94 <vPortExitCritical>
				return pdPASS;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e063      	b.n	8004f14 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d103      	bne.n	8004e5a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e52:	f001 ff9f 	bl	8006d94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004e56:	2300      	movs	r3, #0
 8004e58:	e05c      	b.n	8004f14 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d106      	bne.n	8004e6e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e60:	f107 0314 	add.w	r3, r7, #20
 8004e64:	4618      	mov	r0, r3
 8004e66:	f001 f8b1 	bl	8005fcc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e6e:	f001 ff91 	bl	8006d94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e72:	f000 fe17 	bl	8005aa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e76:	f001 ff59 	bl	8006d2c <vPortEnterCritical>
 8004e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e80:	b25b      	sxtb	r3, r3
 8004e82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e86:	d103      	bne.n	8004e90 <xQueueGenericSend+0x17c>
 8004e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e96:	b25b      	sxtb	r3, r3
 8004e98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e9c:	d103      	bne.n	8004ea6 <xQueueGenericSend+0x192>
 8004e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ea6:	f001 ff75 	bl	8006d94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004eaa:	1d3a      	adds	r2, r7, #4
 8004eac:	f107 0314 	add.w	r3, r7, #20
 8004eb0:	4611      	mov	r1, r2
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f001 f8a0 	bl	8005ff8 <xTaskCheckForTimeOut>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d124      	bne.n	8004f08 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004ebe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ec0:	f000 faac 	bl	800541c <prvIsQueueFull>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d018      	beq.n	8004efc <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ecc:	3310      	adds	r3, #16
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	4611      	mov	r1, r2
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f000 ffc0 	bl	8005e58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004ed8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004eda:	f000 fa37 	bl	800534c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004ede:	f000 fdef 	bl	8005ac0 <xTaskResumeAll>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f47f af7c 	bne.w	8004de2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8004eea:	4b0c      	ldr	r3, [pc, #48]	; (8004f1c <xQueueGenericSend+0x208>)
 8004eec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ef0:	601a      	str	r2, [r3, #0]
 8004ef2:	f3bf 8f4f 	dsb	sy
 8004ef6:	f3bf 8f6f 	isb	sy
 8004efa:	e772      	b.n	8004de2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004efc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004efe:	f000 fa25 	bl	800534c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f02:	f000 fddd 	bl	8005ac0 <xTaskResumeAll>
 8004f06:	e76c      	b.n	8004de2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004f08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f0a:	f000 fa1f 	bl	800534c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f0e:	f000 fdd7 	bl	8005ac0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004f12:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3738      	adds	r7, #56	; 0x38
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	e000ed04 	.word	0xe000ed04

08004f20 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b08e      	sub	sp, #56	; 0x38
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
 8004f2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d10c      	bne.n	8004f52 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8004f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3c:	b672      	cpsid	i
 8004f3e:	f383 8811 	msr	BASEPRI, r3
 8004f42:	f3bf 8f6f 	isb	sy
 8004f46:	f3bf 8f4f 	dsb	sy
 8004f4a:	b662      	cpsie	i
 8004f4c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004f4e:	bf00      	nop
 8004f50:	e7fe      	b.n	8004f50 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d103      	bne.n	8004f60 <xQueueGenericSendFromISR+0x40>
 8004f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d101      	bne.n	8004f64 <xQueueGenericSendFromISR+0x44>
 8004f60:	2301      	movs	r3, #1
 8004f62:	e000      	b.n	8004f66 <xQueueGenericSendFromISR+0x46>
 8004f64:	2300      	movs	r3, #0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d10c      	bne.n	8004f84 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8004f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6e:	b672      	cpsid	i
 8004f70:	f383 8811 	msr	BASEPRI, r3
 8004f74:	f3bf 8f6f 	isb	sy
 8004f78:	f3bf 8f4f 	dsb	sy
 8004f7c:	b662      	cpsie	i
 8004f7e:	623b      	str	r3, [r7, #32]
}
 8004f80:	bf00      	nop
 8004f82:	e7fe      	b.n	8004f82 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d103      	bne.n	8004f92 <xQueueGenericSendFromISR+0x72>
 8004f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d101      	bne.n	8004f96 <xQueueGenericSendFromISR+0x76>
 8004f92:	2301      	movs	r3, #1
 8004f94:	e000      	b.n	8004f98 <xQueueGenericSendFromISR+0x78>
 8004f96:	2300      	movs	r3, #0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10c      	bne.n	8004fb6 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8004f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa0:	b672      	cpsid	i
 8004fa2:	f383 8811 	msr	BASEPRI, r3
 8004fa6:	f3bf 8f6f 	isb	sy
 8004faa:	f3bf 8f4f 	dsb	sy
 8004fae:	b662      	cpsie	i
 8004fb0:	61fb      	str	r3, [r7, #28]
}
 8004fb2:	bf00      	nop
 8004fb4:	e7fe      	b.n	8004fb4 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004fb6:	f001 ffa1 	bl	8006efc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004fba:	f3ef 8211 	mrs	r2, BASEPRI
 8004fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc2:	b672      	cpsid	i
 8004fc4:	f383 8811 	msr	BASEPRI, r3
 8004fc8:	f3bf 8f6f 	isb	sy
 8004fcc:	f3bf 8f4f 	dsb	sy
 8004fd0:	b662      	cpsie	i
 8004fd2:	61ba      	str	r2, [r7, #24]
 8004fd4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004fd6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d302      	bcc.n	8004fec <xQueueGenericSendFromISR+0xcc>
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d12c      	bne.n	8005046 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ff2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ff6:	683a      	ldr	r2, [r7, #0]
 8004ff8:	68b9      	ldr	r1, [r7, #8]
 8004ffa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ffc:	f000 f916 	bl	800522c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005000:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005004:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005008:	d112      	bne.n	8005030 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800500a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500e:	2b00      	cmp	r3, #0
 8005010:	d016      	beq.n	8005040 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005014:	3324      	adds	r3, #36	; 0x24
 8005016:	4618      	mov	r0, r3
 8005018:	f000 ff72 	bl	8005f00 <xTaskRemoveFromEventList>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00e      	beq.n	8005040 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00b      	beq.n	8005040 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	601a      	str	r2, [r3, #0]
 800502e:	e007      	b.n	8005040 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005030:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005034:	3301      	adds	r3, #1
 8005036:	b2db      	uxtb	r3, r3
 8005038:	b25a      	sxtb	r2, r3
 800503a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005040:	2301      	movs	r3, #1
 8005042:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005044:	e001      	b.n	800504a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005046:	2300      	movs	r3, #0
 8005048:	637b      	str	r3, [r7, #52]	; 0x34
 800504a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800504c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005054:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005058:	4618      	mov	r0, r3
 800505a:	3738      	adds	r7, #56	; 0x38
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b08c      	sub	sp, #48	; 0x30
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800506c:	2300      	movs	r3, #0
 800506e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10c      	bne.n	8005094 <xQueueReceive+0x34>
	__asm volatile
 800507a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507e:	b672      	cpsid	i
 8005080:	f383 8811 	msr	BASEPRI, r3
 8005084:	f3bf 8f6f 	isb	sy
 8005088:	f3bf 8f4f 	dsb	sy
 800508c:	b662      	cpsie	i
 800508e:	623b      	str	r3, [r7, #32]
}
 8005090:	bf00      	nop
 8005092:	e7fe      	b.n	8005092 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d103      	bne.n	80050a2 <xQueueReceive+0x42>
 800509a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d101      	bne.n	80050a6 <xQueueReceive+0x46>
 80050a2:	2301      	movs	r3, #1
 80050a4:	e000      	b.n	80050a8 <xQueueReceive+0x48>
 80050a6:	2300      	movs	r3, #0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d10c      	bne.n	80050c6 <xQueueReceive+0x66>
	__asm volatile
 80050ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b0:	b672      	cpsid	i
 80050b2:	f383 8811 	msr	BASEPRI, r3
 80050b6:	f3bf 8f6f 	isb	sy
 80050ba:	f3bf 8f4f 	dsb	sy
 80050be:	b662      	cpsie	i
 80050c0:	61fb      	str	r3, [r7, #28]
}
 80050c2:	bf00      	nop
 80050c4:	e7fe      	b.n	80050c4 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80050c6:	f001 f8e1 	bl	800628c <xTaskGetSchedulerState>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d102      	bne.n	80050d6 <xQueueReceive+0x76>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d101      	bne.n	80050da <xQueueReceive+0x7a>
 80050d6:	2301      	movs	r3, #1
 80050d8:	e000      	b.n	80050dc <xQueueReceive+0x7c>
 80050da:	2300      	movs	r3, #0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d10c      	bne.n	80050fa <xQueueReceive+0x9a>
	__asm volatile
 80050e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e4:	b672      	cpsid	i
 80050e6:	f383 8811 	msr	BASEPRI, r3
 80050ea:	f3bf 8f6f 	isb	sy
 80050ee:	f3bf 8f4f 	dsb	sy
 80050f2:	b662      	cpsie	i
 80050f4:	61bb      	str	r3, [r7, #24]
}
 80050f6:	bf00      	nop
 80050f8:	e7fe      	b.n	80050f8 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80050fa:	f001 fe17 	bl	8006d2c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005102:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005106:	2b00      	cmp	r3, #0
 8005108:	d01f      	beq.n	800514a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800510a:	68b9      	ldr	r1, [r7, #8]
 800510c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800510e:	f000 f8f7 	bl	8005300 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005114:	1e5a      	subs	r2, r3, #1
 8005116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005118:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800511a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00f      	beq.n	8005142 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005124:	3310      	adds	r3, #16
 8005126:	4618      	mov	r0, r3
 8005128:	f000 feea 	bl	8005f00 <xTaskRemoveFromEventList>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d007      	beq.n	8005142 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005132:	4b3d      	ldr	r3, [pc, #244]	; (8005228 <xQueueReceive+0x1c8>)
 8005134:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005138:	601a      	str	r2, [r3, #0]
 800513a:	f3bf 8f4f 	dsb	sy
 800513e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005142:	f001 fe27 	bl	8006d94 <vPortExitCritical>
				return pdPASS;
 8005146:	2301      	movs	r3, #1
 8005148:	e069      	b.n	800521e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d103      	bne.n	8005158 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005150:	f001 fe20 	bl	8006d94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005154:	2300      	movs	r3, #0
 8005156:	e062      	b.n	800521e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800515a:	2b00      	cmp	r3, #0
 800515c:	d106      	bne.n	800516c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800515e:	f107 0310 	add.w	r3, r7, #16
 8005162:	4618      	mov	r0, r3
 8005164:	f000 ff32 	bl	8005fcc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005168:	2301      	movs	r3, #1
 800516a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800516c:	f001 fe12 	bl	8006d94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005170:	f000 fc98 	bl	8005aa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005174:	f001 fdda 	bl	8006d2c <vPortEnterCritical>
 8005178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800517e:	b25b      	sxtb	r3, r3
 8005180:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005184:	d103      	bne.n	800518e <xQueueReceive+0x12e>
 8005186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005188:	2200      	movs	r2, #0
 800518a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800518e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005190:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005194:	b25b      	sxtb	r3, r3
 8005196:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800519a:	d103      	bne.n	80051a4 <xQueueReceive+0x144>
 800519c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051a4:	f001 fdf6 	bl	8006d94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80051a8:	1d3a      	adds	r2, r7, #4
 80051aa:	f107 0310 	add.w	r3, r7, #16
 80051ae:	4611      	mov	r1, r2
 80051b0:	4618      	mov	r0, r3
 80051b2:	f000 ff21 	bl	8005ff8 <xTaskCheckForTimeOut>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d123      	bne.n	8005204 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80051bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051be:	f000 f917 	bl	80053f0 <prvIsQueueEmpty>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d017      	beq.n	80051f8 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80051c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ca:	3324      	adds	r3, #36	; 0x24
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	4611      	mov	r1, r2
 80051d0:	4618      	mov	r0, r3
 80051d2:	f000 fe41 	bl	8005e58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80051d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051d8:	f000 f8b8 	bl	800534c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80051dc:	f000 fc70 	bl	8005ac0 <xTaskResumeAll>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d189      	bne.n	80050fa <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80051e6:	4b10      	ldr	r3, [pc, #64]	; (8005228 <xQueueReceive+0x1c8>)
 80051e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051ec:	601a      	str	r2, [r3, #0]
 80051ee:	f3bf 8f4f 	dsb	sy
 80051f2:	f3bf 8f6f 	isb	sy
 80051f6:	e780      	b.n	80050fa <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80051f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051fa:	f000 f8a7 	bl	800534c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80051fe:	f000 fc5f 	bl	8005ac0 <xTaskResumeAll>
 8005202:	e77a      	b.n	80050fa <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005204:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005206:	f000 f8a1 	bl	800534c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800520a:	f000 fc59 	bl	8005ac0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800520e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005210:	f000 f8ee 	bl	80053f0 <prvIsQueueEmpty>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	f43f af6f 	beq.w	80050fa <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800521c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800521e:	4618      	mov	r0, r3
 8005220:	3730      	adds	r7, #48	; 0x30
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	e000ed04 	.word	0xe000ed04

0800522c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b086      	sub	sp, #24
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005238:	2300      	movs	r3, #0
 800523a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005240:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005246:	2b00      	cmp	r3, #0
 8005248:	d10d      	bne.n	8005266 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d14d      	bne.n	80052ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	4618      	mov	r0, r3
 8005258:	f001 f836 	bl	80062c8 <xTaskPriorityDisinherit>
 800525c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2200      	movs	r2, #0
 8005262:	609a      	str	r2, [r3, #8]
 8005264:	e043      	b.n	80052ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d119      	bne.n	80052a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6858      	ldr	r0, [r3, #4]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005274:	461a      	mov	r2, r3
 8005276:	68b9      	ldr	r1, [r7, #8]
 8005278:	f002 f894 	bl	80073a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	685a      	ldr	r2, [r3, #4]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005284:	441a      	add	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	429a      	cmp	r2, r3
 8005294:	d32b      	bcc.n	80052ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	605a      	str	r2, [r3, #4]
 800529e:	e026      	b.n	80052ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	68d8      	ldr	r0, [r3, #12]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a8:	461a      	mov	r2, r3
 80052aa:	68b9      	ldr	r1, [r7, #8]
 80052ac:	f002 f87a 	bl	80073a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	68da      	ldr	r2, [r3, #12]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b8:	425b      	negs	r3, r3
 80052ba:	441a      	add	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	68da      	ldr	r2, [r3, #12]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d207      	bcs.n	80052dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	689a      	ldr	r2, [r3, #8]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d4:	425b      	negs	r3, r3
 80052d6:	441a      	add	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d105      	bne.n	80052ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d002      	beq.n	80052ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	3b01      	subs	r3, #1
 80052ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	1c5a      	adds	r2, r3, #1
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80052f6:	697b      	ldr	r3, [r7, #20]
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3718      	adds	r7, #24
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530e:	2b00      	cmp	r3, #0
 8005310:	d018      	beq.n	8005344 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	68da      	ldr	r2, [r3, #12]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531a:	441a      	add	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	68da      	ldr	r2, [r3, #12]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	429a      	cmp	r2, r3
 800532a:	d303      	bcc.n	8005334 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	68d9      	ldr	r1, [r3, #12]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533c:	461a      	mov	r2, r3
 800533e:	6838      	ldr	r0, [r7, #0]
 8005340:	f002 f830 	bl	80073a4 <memcpy>
	}
}
 8005344:	bf00      	nop
 8005346:	3708      	adds	r7, #8
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005354:	f001 fcea 	bl	8006d2c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800535e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005360:	e011      	b.n	8005386 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005366:	2b00      	cmp	r3, #0
 8005368:	d012      	beq.n	8005390 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	3324      	adds	r3, #36	; 0x24
 800536e:	4618      	mov	r0, r3
 8005370:	f000 fdc6 	bl	8005f00 <xTaskRemoveFromEventList>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d001      	beq.n	800537e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800537a:	f000 fea3 	bl	80060c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800537e:	7bfb      	ldrb	r3, [r7, #15]
 8005380:	3b01      	subs	r3, #1
 8005382:	b2db      	uxtb	r3, r3
 8005384:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800538a:	2b00      	cmp	r3, #0
 800538c:	dce9      	bgt.n	8005362 <prvUnlockQueue+0x16>
 800538e:	e000      	b.n	8005392 <prvUnlockQueue+0x46>
					break;
 8005390:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	22ff      	movs	r2, #255	; 0xff
 8005396:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800539a:	f001 fcfb 	bl	8006d94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800539e:	f001 fcc5 	bl	8006d2c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80053aa:	e011      	b.n	80053d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d012      	beq.n	80053da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	3310      	adds	r3, #16
 80053b8:	4618      	mov	r0, r3
 80053ba:	f000 fda1 	bl	8005f00 <xTaskRemoveFromEventList>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d001      	beq.n	80053c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80053c4:	f000 fe7e 	bl	80060c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80053c8:	7bbb      	ldrb	r3, [r7, #14]
 80053ca:	3b01      	subs	r3, #1
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80053d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	dce9      	bgt.n	80053ac <prvUnlockQueue+0x60>
 80053d8:	e000      	b.n	80053dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80053da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	22ff      	movs	r2, #255	; 0xff
 80053e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80053e4:	f001 fcd6 	bl	8006d94 <vPortExitCritical>
}
 80053e8:	bf00      	nop
 80053ea:	3710      	adds	r7, #16
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80053f8:	f001 fc98 	bl	8006d2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005400:	2b00      	cmp	r3, #0
 8005402:	d102      	bne.n	800540a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005404:	2301      	movs	r3, #1
 8005406:	60fb      	str	r3, [r7, #12]
 8005408:	e001      	b.n	800540e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800540a:	2300      	movs	r3, #0
 800540c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800540e:	f001 fcc1 	bl	8006d94 <vPortExitCritical>

	return xReturn;
 8005412:	68fb      	ldr	r3, [r7, #12]
}
 8005414:	4618      	mov	r0, r3
 8005416:	3710      	adds	r7, #16
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005424:	f001 fc82 	bl	8006d2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005430:	429a      	cmp	r2, r3
 8005432:	d102      	bne.n	800543a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005434:	2301      	movs	r3, #1
 8005436:	60fb      	str	r3, [r7, #12]
 8005438:	e001      	b.n	800543e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800543a:	2300      	movs	r3, #0
 800543c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800543e:	f001 fca9 	bl	8006d94 <vPortExitCritical>

	return xReturn;
 8005442:	68fb      	ldr	r3, [r7, #12]
}
 8005444:	4618      	mov	r0, r3
 8005446:	3710      	adds	r7, #16
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005456:	2300      	movs	r3, #0
 8005458:	60fb      	str	r3, [r7, #12]
 800545a:	e014      	b.n	8005486 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800545c:	4a0f      	ldr	r2, [pc, #60]	; (800549c <vQueueAddToRegistry+0x50>)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d10b      	bne.n	8005480 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005468:	490c      	ldr	r1, [pc, #48]	; (800549c <vQueueAddToRegistry+0x50>)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	683a      	ldr	r2, [r7, #0]
 800546e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005472:	4a0a      	ldr	r2, [pc, #40]	; (800549c <vQueueAddToRegistry+0x50>)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	00db      	lsls	r3, r3, #3
 8005478:	4413      	add	r3, r2
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800547e:	e006      	b.n	800548e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	3301      	adds	r3, #1
 8005484:	60fb      	str	r3, [r7, #12]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2b07      	cmp	r3, #7
 800548a:	d9e7      	bls.n	800545c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800548c:	bf00      	nop
 800548e:	bf00      	nop
 8005490:	3714      	adds	r7, #20
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	20000f00 	.word	0x20000f00

080054a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80054b0:	f001 fc3c 	bl	8006d2c <vPortEnterCritical>
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054ba:	b25b      	sxtb	r3, r3
 80054bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054c0:	d103      	bne.n	80054ca <vQueueWaitForMessageRestricted+0x2a>
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054d0:	b25b      	sxtb	r3, r3
 80054d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054d6:	d103      	bne.n	80054e0 <vQueueWaitForMessageRestricted+0x40>
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054e0:	f001 fc58 	bl	8006d94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d106      	bne.n	80054fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	3324      	adds	r3, #36	; 0x24
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	68b9      	ldr	r1, [r7, #8]
 80054f4:	4618      	mov	r0, r3
 80054f6:	f000 fcd5 	bl	8005ea4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80054fa:	6978      	ldr	r0, [r7, #20]
 80054fc:	f7ff ff26 	bl	800534c <prvUnlockQueue>
	}
 8005500:	bf00      	nop
 8005502:	3718      	adds	r7, #24
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005508:	b580      	push	{r7, lr}
 800550a:	b08e      	sub	sp, #56	; 0x38
 800550c:	af04      	add	r7, sp, #16
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	607a      	str	r2, [r7, #4]
 8005514:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005518:	2b00      	cmp	r3, #0
 800551a:	d10c      	bne.n	8005536 <xTaskCreateStatic+0x2e>
	__asm volatile
 800551c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005520:	b672      	cpsid	i
 8005522:	f383 8811 	msr	BASEPRI, r3
 8005526:	f3bf 8f6f 	isb	sy
 800552a:	f3bf 8f4f 	dsb	sy
 800552e:	b662      	cpsie	i
 8005530:	623b      	str	r3, [r7, #32]
}
 8005532:	bf00      	nop
 8005534:	e7fe      	b.n	8005534 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8005536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005538:	2b00      	cmp	r3, #0
 800553a:	d10c      	bne.n	8005556 <xTaskCreateStatic+0x4e>
	__asm volatile
 800553c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005540:	b672      	cpsid	i
 8005542:	f383 8811 	msr	BASEPRI, r3
 8005546:	f3bf 8f6f 	isb	sy
 800554a:	f3bf 8f4f 	dsb	sy
 800554e:	b662      	cpsie	i
 8005550:	61fb      	str	r3, [r7, #28]
}
 8005552:	bf00      	nop
 8005554:	e7fe      	b.n	8005554 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005556:	235c      	movs	r3, #92	; 0x5c
 8005558:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	2b5c      	cmp	r3, #92	; 0x5c
 800555e:	d00c      	beq.n	800557a <xTaskCreateStatic+0x72>
	__asm volatile
 8005560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005564:	b672      	cpsid	i
 8005566:	f383 8811 	msr	BASEPRI, r3
 800556a:	f3bf 8f6f 	isb	sy
 800556e:	f3bf 8f4f 	dsb	sy
 8005572:	b662      	cpsie	i
 8005574:	61bb      	str	r3, [r7, #24]
}
 8005576:	bf00      	nop
 8005578:	e7fe      	b.n	8005578 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800557a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800557c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557e:	2b00      	cmp	r3, #0
 8005580:	d01e      	beq.n	80055c0 <xTaskCreateStatic+0xb8>
 8005582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005584:	2b00      	cmp	r3, #0
 8005586:	d01b      	beq.n	80055c0 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800558c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005590:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005594:	2202      	movs	r2, #2
 8005596:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800559a:	2300      	movs	r3, #0
 800559c:	9303      	str	r3, [sp, #12]
 800559e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a0:	9302      	str	r3, [sp, #8]
 80055a2:	f107 0314 	add.w	r3, r7, #20
 80055a6:	9301      	str	r3, [sp, #4]
 80055a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055aa:	9300      	str	r3, [sp, #0]
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	68b9      	ldr	r1, [r7, #8]
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	f000 f850 	bl	8005658 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80055b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80055ba:	f000 f8df 	bl	800577c <prvAddNewTaskToReadyList>
 80055be:	e001      	b.n	80055c4 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80055c0:	2300      	movs	r3, #0
 80055c2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80055c4:	697b      	ldr	r3, [r7, #20]
	}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3728      	adds	r7, #40	; 0x28
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b08c      	sub	sp, #48	; 0x30
 80055d2:	af04      	add	r7, sp, #16
 80055d4:	60f8      	str	r0, [r7, #12]
 80055d6:	60b9      	str	r1, [r7, #8]
 80055d8:	603b      	str	r3, [r7, #0]
 80055da:	4613      	mov	r3, r2
 80055dc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80055de:	88fb      	ldrh	r3, [r7, #6]
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	4618      	mov	r0, r3
 80055e4:	f001 fcce 	bl	8006f84 <pvPortMalloc>
 80055e8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00e      	beq.n	800560e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80055f0:	205c      	movs	r0, #92	; 0x5c
 80055f2:	f001 fcc7 	bl	8006f84 <pvPortMalloc>
 80055f6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d003      	beq.n	8005606 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	631a      	str	r2, [r3, #48]	; 0x30
 8005604:	e005      	b.n	8005612 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005606:	6978      	ldr	r0, [r7, #20]
 8005608:	f001 fd86 	bl	8007118 <vPortFree>
 800560c:	e001      	b.n	8005612 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800560e:	2300      	movs	r3, #0
 8005610:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d017      	beq.n	8005648 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005620:	88fa      	ldrh	r2, [r7, #6]
 8005622:	2300      	movs	r3, #0
 8005624:	9303      	str	r3, [sp, #12]
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	9302      	str	r3, [sp, #8]
 800562a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800562c:	9301      	str	r3, [sp, #4]
 800562e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005630:	9300      	str	r3, [sp, #0]
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	68b9      	ldr	r1, [r7, #8]
 8005636:	68f8      	ldr	r0, [r7, #12]
 8005638:	f000 f80e 	bl	8005658 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800563c:	69f8      	ldr	r0, [r7, #28]
 800563e:	f000 f89d 	bl	800577c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005642:	2301      	movs	r3, #1
 8005644:	61bb      	str	r3, [r7, #24]
 8005646:	e002      	b.n	800564e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005648:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800564c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800564e:	69bb      	ldr	r3, [r7, #24]
	}
 8005650:	4618      	mov	r0, r3
 8005652:	3720      	adds	r7, #32
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b088      	sub	sp, #32
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
 8005664:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005668:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	461a      	mov	r2, r3
 8005670:	21a5      	movs	r1, #165	; 0xa5
 8005672:	f001 fe6b 	bl	800734c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005678:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800567a:	6879      	ldr	r1, [r7, #4]
 800567c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005680:	440b      	add	r3, r1
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	4413      	add	r3, r2
 8005686:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	f023 0307 	bic.w	r3, r3, #7
 800568e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	f003 0307 	and.w	r3, r3, #7
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00c      	beq.n	80056b4 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800569a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569e:	b672      	cpsid	i
 80056a0:	f383 8811 	msr	BASEPRI, r3
 80056a4:	f3bf 8f6f 	isb	sy
 80056a8:	f3bf 8f4f 	dsb	sy
 80056ac:	b662      	cpsie	i
 80056ae:	617b      	str	r3, [r7, #20]
}
 80056b0:	bf00      	nop
 80056b2:	e7fe      	b.n	80056b2 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d01f      	beq.n	80056fa <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80056ba:	2300      	movs	r3, #0
 80056bc:	61fb      	str	r3, [r7, #28]
 80056be:	e012      	b.n	80056e6 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80056c0:	68ba      	ldr	r2, [r7, #8]
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	4413      	add	r3, r2
 80056c6:	7819      	ldrb	r1, [r3, #0]
 80056c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	4413      	add	r3, r2
 80056ce:	3334      	adds	r3, #52	; 0x34
 80056d0:	460a      	mov	r2, r1
 80056d2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80056d4:	68ba      	ldr	r2, [r7, #8]
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	4413      	add	r3, r2
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d006      	beq.n	80056ee <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	3301      	adds	r3, #1
 80056e4:	61fb      	str	r3, [r7, #28]
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	2b0f      	cmp	r3, #15
 80056ea:	d9e9      	bls.n	80056c0 <prvInitialiseNewTask+0x68>
 80056ec:	e000      	b.n	80056f0 <prvInitialiseNewTask+0x98>
			{
				break;
 80056ee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80056f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056f8:	e003      	b.n	8005702 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80056fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005704:	2b37      	cmp	r3, #55	; 0x37
 8005706:	d901      	bls.n	800570c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005708:	2337      	movs	r3, #55	; 0x37
 800570a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800570c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005710:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005714:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005716:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571a:	2200      	movs	r2, #0
 800571c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800571e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005720:	3304      	adds	r3, #4
 8005722:	4618      	mov	r0, r3
 8005724:	f7ff f952 	bl	80049cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572a:	3318      	adds	r3, #24
 800572c:	4618      	mov	r0, r3
 800572e:	f7ff f94d 	bl	80049cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005734:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005736:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800573e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005740:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005744:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005746:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574a:	2200      	movs	r2, #0
 800574c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800574e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005750:	2200      	movs	r2, #0
 8005752:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005756:	683a      	ldr	r2, [r7, #0]
 8005758:	68f9      	ldr	r1, [r7, #12]
 800575a:	69b8      	ldr	r0, [r7, #24]
 800575c:	f001 f9d6 	bl	8006b0c <pxPortInitialiseStack>
 8005760:	4602      	mov	r2, r0
 8005762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005764:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005768:	2b00      	cmp	r3, #0
 800576a:	d002      	beq.n	8005772 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800576c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800576e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005770:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005772:	bf00      	nop
 8005774:	3720      	adds	r7, #32
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
	...

0800577c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005784:	f001 fad2 	bl	8006d2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005788:	4b2d      	ldr	r3, [pc, #180]	; (8005840 <prvAddNewTaskToReadyList+0xc4>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	3301      	adds	r3, #1
 800578e:	4a2c      	ldr	r2, [pc, #176]	; (8005840 <prvAddNewTaskToReadyList+0xc4>)
 8005790:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005792:	4b2c      	ldr	r3, [pc, #176]	; (8005844 <prvAddNewTaskToReadyList+0xc8>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d109      	bne.n	80057ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800579a:	4a2a      	ldr	r2, [pc, #168]	; (8005844 <prvAddNewTaskToReadyList+0xc8>)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80057a0:	4b27      	ldr	r3, [pc, #156]	; (8005840 <prvAddNewTaskToReadyList+0xc4>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d110      	bne.n	80057ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80057a8:	f000 fcb0 	bl	800610c <prvInitialiseTaskLists>
 80057ac:	e00d      	b.n	80057ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80057ae:	4b26      	ldr	r3, [pc, #152]	; (8005848 <prvAddNewTaskToReadyList+0xcc>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d109      	bne.n	80057ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80057b6:	4b23      	ldr	r3, [pc, #140]	; (8005844 <prvAddNewTaskToReadyList+0xc8>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d802      	bhi.n	80057ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80057c4:	4a1f      	ldr	r2, [pc, #124]	; (8005844 <prvAddNewTaskToReadyList+0xc8>)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80057ca:	4b20      	ldr	r3, [pc, #128]	; (800584c <prvAddNewTaskToReadyList+0xd0>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	3301      	adds	r3, #1
 80057d0:	4a1e      	ldr	r2, [pc, #120]	; (800584c <prvAddNewTaskToReadyList+0xd0>)
 80057d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80057d4:	4b1d      	ldr	r3, [pc, #116]	; (800584c <prvAddNewTaskToReadyList+0xd0>)
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057e0:	4b1b      	ldr	r3, [pc, #108]	; (8005850 <prvAddNewTaskToReadyList+0xd4>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d903      	bls.n	80057f0 <prvAddNewTaskToReadyList+0x74>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ec:	4a18      	ldr	r2, [pc, #96]	; (8005850 <prvAddNewTaskToReadyList+0xd4>)
 80057ee:	6013      	str	r3, [r2, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f4:	4613      	mov	r3, r2
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4413      	add	r3, r2
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4a15      	ldr	r2, [pc, #84]	; (8005854 <prvAddNewTaskToReadyList+0xd8>)
 80057fe:	441a      	add	r2, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	3304      	adds	r3, #4
 8005804:	4619      	mov	r1, r3
 8005806:	4610      	mov	r0, r2
 8005808:	f7ff f8ed 	bl	80049e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800580c:	f001 fac2 	bl	8006d94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005810:	4b0d      	ldr	r3, [pc, #52]	; (8005848 <prvAddNewTaskToReadyList+0xcc>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00e      	beq.n	8005836 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005818:	4b0a      	ldr	r3, [pc, #40]	; (8005844 <prvAddNewTaskToReadyList+0xc8>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005822:	429a      	cmp	r2, r3
 8005824:	d207      	bcs.n	8005836 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005826:	4b0c      	ldr	r3, [pc, #48]	; (8005858 <prvAddNewTaskToReadyList+0xdc>)
 8005828:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800582c:	601a      	str	r2, [r3, #0]
 800582e:	f3bf 8f4f 	dsb	sy
 8005832:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005836:	bf00      	nop
 8005838:	3708      	adds	r7, #8
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	20001414 	.word	0x20001414
 8005844:	20000f40 	.word	0x20000f40
 8005848:	20001420 	.word	0x20001420
 800584c:	20001430 	.word	0x20001430
 8005850:	2000141c 	.word	0x2000141c
 8005854:	20000f44 	.word	0x20000f44
 8005858:	e000ed04 	.word	0xe000ed04

0800585c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800585c:	b580      	push	{r7, lr}
 800585e:	b08a      	sub	sp, #40	; 0x28
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8005866:	2300      	movs	r3, #0
 8005868:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d10c      	bne.n	800588a <vTaskDelayUntil+0x2e>
	__asm volatile
 8005870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005874:	b672      	cpsid	i
 8005876:	f383 8811 	msr	BASEPRI, r3
 800587a:	f3bf 8f6f 	isb	sy
 800587e:	f3bf 8f4f 	dsb	sy
 8005882:	b662      	cpsie	i
 8005884:	617b      	str	r3, [r7, #20]
}
 8005886:	bf00      	nop
 8005888:	e7fe      	b.n	8005888 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d10c      	bne.n	80058aa <vTaskDelayUntil+0x4e>
	__asm volatile
 8005890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005894:	b672      	cpsid	i
 8005896:	f383 8811 	msr	BASEPRI, r3
 800589a:	f3bf 8f6f 	isb	sy
 800589e:	f3bf 8f4f 	dsb	sy
 80058a2:	b662      	cpsie	i
 80058a4:	613b      	str	r3, [r7, #16]
}
 80058a6:	bf00      	nop
 80058a8:	e7fe      	b.n	80058a8 <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 80058aa:	4b2b      	ldr	r3, [pc, #172]	; (8005958 <vTaskDelayUntil+0xfc>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00c      	beq.n	80058cc <vTaskDelayUntil+0x70>
	__asm volatile
 80058b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b6:	b672      	cpsid	i
 80058b8:	f383 8811 	msr	BASEPRI, r3
 80058bc:	f3bf 8f6f 	isb	sy
 80058c0:	f3bf 8f4f 	dsb	sy
 80058c4:	b662      	cpsie	i
 80058c6:	60fb      	str	r3, [r7, #12]
}
 80058c8:	bf00      	nop
 80058ca:	e7fe      	b.n	80058ca <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 80058cc:	f000 f8ea 	bl	8005aa4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80058d0:	4b22      	ldr	r3, [pc, #136]	; (800595c <vTaskDelayUntil+0x100>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	683a      	ldr	r2, [r7, #0]
 80058dc:	4413      	add	r3, r2
 80058de:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	6a3a      	ldr	r2, [r7, #32]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d20b      	bcs.n	8005902 <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	69fa      	ldr	r2, [r7, #28]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d211      	bcs.n	8005918 <vTaskDelayUntil+0xbc>
 80058f4:	69fa      	ldr	r2, [r7, #28]
 80058f6:	6a3b      	ldr	r3, [r7, #32]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d90d      	bls.n	8005918 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 80058fc:	2301      	movs	r3, #1
 80058fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005900:	e00a      	b.n	8005918 <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	69fa      	ldr	r2, [r7, #28]
 8005908:	429a      	cmp	r2, r3
 800590a:	d303      	bcc.n	8005914 <vTaskDelayUntil+0xb8>
 800590c:	69fa      	ldr	r2, [r7, #28]
 800590e:	6a3b      	ldr	r3, [r7, #32]
 8005910:	429a      	cmp	r2, r3
 8005912:	d901      	bls.n	8005918 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 8005914:	2301      	movs	r3, #1
 8005916:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	69fa      	ldr	r2, [r7, #28]
 800591c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800591e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005920:	2b00      	cmp	r3, #0
 8005922:	d006      	beq.n	8005932 <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8005924:	69fa      	ldr	r2, [r7, #28]
 8005926:	6a3b      	ldr	r3, [r7, #32]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	2100      	movs	r1, #0
 800592c:	4618      	mov	r0, r3
 800592e:	f000 fd3d 	bl	80063ac <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8005932:	f000 f8c5 	bl	8005ac0 <xTaskResumeAll>
 8005936:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d107      	bne.n	800594e <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 800593e:	4b08      	ldr	r3, [pc, #32]	; (8005960 <vTaskDelayUntil+0x104>)
 8005940:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005944:	601a      	str	r2, [r3, #0]
 8005946:	f3bf 8f4f 	dsb	sy
 800594a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800594e:	bf00      	nop
 8005950:	3728      	adds	r7, #40	; 0x28
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	2000143c 	.word	0x2000143c
 800595c:	20001418 	.word	0x20001418
 8005960:	e000ed04 	.word	0xe000ed04

08005964 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800596c:	2300      	movs	r3, #0
 800596e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d019      	beq.n	80059aa <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005976:	4b14      	ldr	r3, [pc, #80]	; (80059c8 <vTaskDelay+0x64>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00c      	beq.n	8005998 <vTaskDelay+0x34>
	__asm volatile
 800597e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005982:	b672      	cpsid	i
 8005984:	f383 8811 	msr	BASEPRI, r3
 8005988:	f3bf 8f6f 	isb	sy
 800598c:	f3bf 8f4f 	dsb	sy
 8005990:	b662      	cpsie	i
 8005992:	60bb      	str	r3, [r7, #8]
}
 8005994:	bf00      	nop
 8005996:	e7fe      	b.n	8005996 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005998:	f000 f884 	bl	8005aa4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800599c:	2100      	movs	r1, #0
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 fd04 	bl	80063ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80059a4:	f000 f88c 	bl	8005ac0 <xTaskResumeAll>
 80059a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d107      	bne.n	80059c0 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80059b0:	4b06      	ldr	r3, [pc, #24]	; (80059cc <vTaskDelay+0x68>)
 80059b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059b6:	601a      	str	r2, [r3, #0]
 80059b8:	f3bf 8f4f 	dsb	sy
 80059bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80059c0:	bf00      	nop
 80059c2:	3710      	adds	r7, #16
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	2000143c 	.word	0x2000143c
 80059cc:	e000ed04 	.word	0xe000ed04

080059d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b08a      	sub	sp, #40	; 0x28
 80059d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80059d6:	2300      	movs	r3, #0
 80059d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80059da:	2300      	movs	r3, #0
 80059dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80059de:	463a      	mov	r2, r7
 80059e0:	1d39      	adds	r1, r7, #4
 80059e2:	f107 0308 	add.w	r3, r7, #8
 80059e6:	4618      	mov	r0, r3
 80059e8:	f7fe ff9c 	bl	8004924 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80059ec:	6839      	ldr	r1, [r7, #0]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	68ba      	ldr	r2, [r7, #8]
 80059f2:	9202      	str	r2, [sp, #8]
 80059f4:	9301      	str	r3, [sp, #4]
 80059f6:	2300      	movs	r3, #0
 80059f8:	9300      	str	r3, [sp, #0]
 80059fa:	2300      	movs	r3, #0
 80059fc:	460a      	mov	r2, r1
 80059fe:	4923      	ldr	r1, [pc, #140]	; (8005a8c <vTaskStartScheduler+0xbc>)
 8005a00:	4823      	ldr	r0, [pc, #140]	; (8005a90 <vTaskStartScheduler+0xc0>)
 8005a02:	f7ff fd81 	bl	8005508 <xTaskCreateStatic>
 8005a06:	4603      	mov	r3, r0
 8005a08:	4a22      	ldr	r2, [pc, #136]	; (8005a94 <vTaskStartScheduler+0xc4>)
 8005a0a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005a0c:	4b21      	ldr	r3, [pc, #132]	; (8005a94 <vTaskStartScheduler+0xc4>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d002      	beq.n	8005a1a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005a14:	2301      	movs	r3, #1
 8005a16:	617b      	str	r3, [r7, #20]
 8005a18:	e001      	b.n	8005a1e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d102      	bne.n	8005a2a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005a24:	f000 fd16 	bl	8006454 <xTimerCreateTimerTask>
 8005a28:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d118      	bne.n	8005a62 <vTaskStartScheduler+0x92>
	__asm volatile
 8005a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a34:	b672      	cpsid	i
 8005a36:	f383 8811 	msr	BASEPRI, r3
 8005a3a:	f3bf 8f6f 	isb	sy
 8005a3e:	f3bf 8f4f 	dsb	sy
 8005a42:	b662      	cpsie	i
 8005a44:	613b      	str	r3, [r7, #16]
}
 8005a46:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005a48:	4b13      	ldr	r3, [pc, #76]	; (8005a98 <vTaskStartScheduler+0xc8>)
 8005a4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a4e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005a50:	4b12      	ldr	r3, [pc, #72]	; (8005a9c <vTaskStartScheduler+0xcc>)
 8005a52:	2201      	movs	r2, #1
 8005a54:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005a56:	4b12      	ldr	r3, [pc, #72]	; (8005aa0 <vTaskStartScheduler+0xd0>)
 8005a58:	2200      	movs	r2, #0
 8005a5a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005a5c:	f001 f8e8 	bl	8006c30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005a60:	e010      	b.n	8005a84 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a68:	d10c      	bne.n	8005a84 <vTaskStartScheduler+0xb4>
	__asm volatile
 8005a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6e:	b672      	cpsid	i
 8005a70:	f383 8811 	msr	BASEPRI, r3
 8005a74:	f3bf 8f6f 	isb	sy
 8005a78:	f3bf 8f4f 	dsb	sy
 8005a7c:	b662      	cpsie	i
 8005a7e:	60fb      	str	r3, [r7, #12]
}
 8005a80:	bf00      	nop
 8005a82:	e7fe      	b.n	8005a82 <vTaskStartScheduler+0xb2>
}
 8005a84:	bf00      	nop
 8005a86:	3718      	adds	r7, #24
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	08007414 	.word	0x08007414
 8005a90:	080060dd 	.word	0x080060dd
 8005a94:	20001438 	.word	0x20001438
 8005a98:	20001434 	.word	0x20001434
 8005a9c:	20001420 	.word	0x20001420
 8005aa0:	20001418 	.word	0x20001418

08005aa4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005aa8:	4b04      	ldr	r3, [pc, #16]	; (8005abc <vTaskSuspendAll+0x18>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	3301      	adds	r3, #1
 8005aae:	4a03      	ldr	r2, [pc, #12]	; (8005abc <vTaskSuspendAll+0x18>)
 8005ab0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005ab2:	bf00      	nop
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr
 8005abc:	2000143c 	.word	0x2000143c

08005ac0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005aca:	2300      	movs	r3, #0
 8005acc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005ace:	4b43      	ldr	r3, [pc, #268]	; (8005bdc <xTaskResumeAll+0x11c>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d10c      	bne.n	8005af0 <xTaskResumeAll+0x30>
	__asm volatile
 8005ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ada:	b672      	cpsid	i
 8005adc:	f383 8811 	msr	BASEPRI, r3
 8005ae0:	f3bf 8f6f 	isb	sy
 8005ae4:	f3bf 8f4f 	dsb	sy
 8005ae8:	b662      	cpsie	i
 8005aea:	603b      	str	r3, [r7, #0]
}
 8005aec:	bf00      	nop
 8005aee:	e7fe      	b.n	8005aee <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005af0:	f001 f91c 	bl	8006d2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005af4:	4b39      	ldr	r3, [pc, #228]	; (8005bdc <xTaskResumeAll+0x11c>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	3b01      	subs	r3, #1
 8005afa:	4a38      	ldr	r2, [pc, #224]	; (8005bdc <xTaskResumeAll+0x11c>)
 8005afc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005afe:	4b37      	ldr	r3, [pc, #220]	; (8005bdc <xTaskResumeAll+0x11c>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d162      	bne.n	8005bcc <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b06:	4b36      	ldr	r3, [pc, #216]	; (8005be0 <xTaskResumeAll+0x120>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d05e      	beq.n	8005bcc <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b0e:	e02f      	b.n	8005b70 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b10:	4b34      	ldr	r3, [pc, #208]	; (8005be4 <xTaskResumeAll+0x124>)
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	3318      	adds	r3, #24
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f7fe ffbf 	bl	8004aa0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	3304      	adds	r3, #4
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7fe ffba 	bl	8004aa0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b30:	4b2d      	ldr	r3, [pc, #180]	; (8005be8 <xTaskResumeAll+0x128>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d903      	bls.n	8005b40 <xTaskResumeAll+0x80>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3c:	4a2a      	ldr	r2, [pc, #168]	; (8005be8 <xTaskResumeAll+0x128>)
 8005b3e:	6013      	str	r3, [r2, #0]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b44:	4613      	mov	r3, r2
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	4413      	add	r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	4a27      	ldr	r2, [pc, #156]	; (8005bec <xTaskResumeAll+0x12c>)
 8005b4e:	441a      	add	r2, r3
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	3304      	adds	r3, #4
 8005b54:	4619      	mov	r1, r3
 8005b56:	4610      	mov	r0, r2
 8005b58:	f7fe ff45 	bl	80049e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b60:	4b23      	ldr	r3, [pc, #140]	; (8005bf0 <xTaskResumeAll+0x130>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d302      	bcc.n	8005b70 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8005b6a:	4b22      	ldr	r3, [pc, #136]	; (8005bf4 <xTaskResumeAll+0x134>)
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b70:	4b1c      	ldr	r3, [pc, #112]	; (8005be4 <xTaskResumeAll+0x124>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d1cb      	bne.n	8005b10 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d001      	beq.n	8005b82 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005b7e:	f000 fb65 	bl	800624c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005b82:	4b1d      	ldr	r3, [pc, #116]	; (8005bf8 <xTaskResumeAll+0x138>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d010      	beq.n	8005bb0 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005b8e:	f000 f847 	bl	8005c20 <xTaskIncrementTick>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d002      	beq.n	8005b9e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8005b98:	4b16      	ldr	r3, [pc, #88]	; (8005bf4 <xTaskResumeAll+0x134>)
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1f1      	bne.n	8005b8e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8005baa:	4b13      	ldr	r3, [pc, #76]	; (8005bf8 <xTaskResumeAll+0x138>)
 8005bac:	2200      	movs	r2, #0
 8005bae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005bb0:	4b10      	ldr	r3, [pc, #64]	; (8005bf4 <xTaskResumeAll+0x134>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d009      	beq.n	8005bcc <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005bbc:	4b0f      	ldr	r3, [pc, #60]	; (8005bfc <xTaskResumeAll+0x13c>)
 8005bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bc2:	601a      	str	r2, [r3, #0]
 8005bc4:	f3bf 8f4f 	dsb	sy
 8005bc8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005bcc:	f001 f8e2 	bl	8006d94 <vPortExitCritical>

	return xAlreadyYielded;
 8005bd0:	68bb      	ldr	r3, [r7, #8]
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	2000143c 	.word	0x2000143c
 8005be0:	20001414 	.word	0x20001414
 8005be4:	200013d4 	.word	0x200013d4
 8005be8:	2000141c 	.word	0x2000141c
 8005bec:	20000f44 	.word	0x20000f44
 8005bf0:	20000f40 	.word	0x20000f40
 8005bf4:	20001428 	.word	0x20001428
 8005bf8:	20001424 	.word	0x20001424
 8005bfc:	e000ed04 	.word	0xe000ed04

08005c00 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005c06:	4b05      	ldr	r3, [pc, #20]	; (8005c1c <xTaskGetTickCount+0x1c>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005c0c:	687b      	ldr	r3, [r7, #4]
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	370c      	adds	r7, #12
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	20001418 	.word	0x20001418

08005c20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b086      	sub	sp, #24
 8005c24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005c26:	2300      	movs	r3, #0
 8005c28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c2a:	4b50      	ldr	r3, [pc, #320]	; (8005d6c <xTaskIncrementTick+0x14c>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	f040 808b 	bne.w	8005d4a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005c34:	4b4e      	ldr	r3, [pc, #312]	; (8005d70 <xTaskIncrementTick+0x150>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	3301      	adds	r3, #1
 8005c3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005c3c:	4a4c      	ldr	r2, [pc, #304]	; (8005d70 <xTaskIncrementTick+0x150>)
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d122      	bne.n	8005c8e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8005c48:	4b4a      	ldr	r3, [pc, #296]	; (8005d74 <xTaskIncrementTick+0x154>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00c      	beq.n	8005c6c <xTaskIncrementTick+0x4c>
	__asm volatile
 8005c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c56:	b672      	cpsid	i
 8005c58:	f383 8811 	msr	BASEPRI, r3
 8005c5c:	f3bf 8f6f 	isb	sy
 8005c60:	f3bf 8f4f 	dsb	sy
 8005c64:	b662      	cpsie	i
 8005c66:	603b      	str	r3, [r7, #0]
}
 8005c68:	bf00      	nop
 8005c6a:	e7fe      	b.n	8005c6a <xTaskIncrementTick+0x4a>
 8005c6c:	4b41      	ldr	r3, [pc, #260]	; (8005d74 <xTaskIncrementTick+0x154>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	60fb      	str	r3, [r7, #12]
 8005c72:	4b41      	ldr	r3, [pc, #260]	; (8005d78 <xTaskIncrementTick+0x158>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a3f      	ldr	r2, [pc, #252]	; (8005d74 <xTaskIncrementTick+0x154>)
 8005c78:	6013      	str	r3, [r2, #0]
 8005c7a:	4a3f      	ldr	r2, [pc, #252]	; (8005d78 <xTaskIncrementTick+0x158>)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6013      	str	r3, [r2, #0]
 8005c80:	4b3e      	ldr	r3, [pc, #248]	; (8005d7c <xTaskIncrementTick+0x15c>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	3301      	adds	r3, #1
 8005c86:	4a3d      	ldr	r2, [pc, #244]	; (8005d7c <xTaskIncrementTick+0x15c>)
 8005c88:	6013      	str	r3, [r2, #0]
 8005c8a:	f000 fadf 	bl	800624c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005c8e:	4b3c      	ldr	r3, [pc, #240]	; (8005d80 <xTaskIncrementTick+0x160>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	693a      	ldr	r2, [r7, #16]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d349      	bcc.n	8005d2c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c98:	4b36      	ldr	r3, [pc, #216]	; (8005d74 <xTaskIncrementTick+0x154>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d104      	bne.n	8005cac <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ca2:	4b37      	ldr	r3, [pc, #220]	; (8005d80 <xTaskIncrementTick+0x160>)
 8005ca4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ca8:	601a      	str	r2, [r3, #0]
					break;
 8005caa:	e03f      	b.n	8005d2c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cac:	4b31      	ldr	r3, [pc, #196]	; (8005d74 <xTaskIncrementTick+0x154>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d203      	bcs.n	8005ccc <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005cc4:	4a2e      	ldr	r2, [pc, #184]	; (8005d80 <xTaskIncrementTick+0x160>)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005cca:	e02f      	b.n	8005d2c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	3304      	adds	r3, #4
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f7fe fee5 	bl	8004aa0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d004      	beq.n	8005ce8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	3318      	adds	r3, #24
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f7fe fedc 	bl	8004aa0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cec:	4b25      	ldr	r3, [pc, #148]	; (8005d84 <xTaskIncrementTick+0x164>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d903      	bls.n	8005cfc <xTaskIncrementTick+0xdc>
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf8:	4a22      	ldr	r2, [pc, #136]	; (8005d84 <xTaskIncrementTick+0x164>)
 8005cfa:	6013      	str	r3, [r2, #0]
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d00:	4613      	mov	r3, r2
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	4413      	add	r3, r2
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4a1f      	ldr	r2, [pc, #124]	; (8005d88 <xTaskIncrementTick+0x168>)
 8005d0a:	441a      	add	r2, r3
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	3304      	adds	r3, #4
 8005d10:	4619      	mov	r1, r3
 8005d12:	4610      	mov	r0, r2
 8005d14:	f7fe fe67 	bl	80049e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d1c:	4b1b      	ldr	r3, [pc, #108]	; (8005d8c <xTaskIncrementTick+0x16c>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d3b8      	bcc.n	8005c98 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8005d26:	2301      	movs	r3, #1
 8005d28:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d2a:	e7b5      	b.n	8005c98 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005d2c:	4b17      	ldr	r3, [pc, #92]	; (8005d8c <xTaskIncrementTick+0x16c>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d32:	4915      	ldr	r1, [pc, #84]	; (8005d88 <xTaskIncrementTick+0x168>)
 8005d34:	4613      	mov	r3, r2
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	4413      	add	r3, r2
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	440b      	add	r3, r1
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d907      	bls.n	8005d54 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8005d44:	2301      	movs	r3, #1
 8005d46:	617b      	str	r3, [r7, #20]
 8005d48:	e004      	b.n	8005d54 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005d4a:	4b11      	ldr	r3, [pc, #68]	; (8005d90 <xTaskIncrementTick+0x170>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	3301      	adds	r3, #1
 8005d50:	4a0f      	ldr	r2, [pc, #60]	; (8005d90 <xTaskIncrementTick+0x170>)
 8005d52:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005d54:	4b0f      	ldr	r3, [pc, #60]	; (8005d94 <xTaskIncrementTick+0x174>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d001      	beq.n	8005d60 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005d60:	697b      	ldr	r3, [r7, #20]
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3718      	adds	r7, #24
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	2000143c 	.word	0x2000143c
 8005d70:	20001418 	.word	0x20001418
 8005d74:	200013cc 	.word	0x200013cc
 8005d78:	200013d0 	.word	0x200013d0
 8005d7c:	2000142c 	.word	0x2000142c
 8005d80:	20001434 	.word	0x20001434
 8005d84:	2000141c 	.word	0x2000141c
 8005d88:	20000f44 	.word	0x20000f44
 8005d8c:	20000f40 	.word	0x20000f40
 8005d90:	20001424 	.word	0x20001424
 8005d94:	20001428 	.word	0x20001428

08005d98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005d9e:	4b29      	ldr	r3, [pc, #164]	; (8005e44 <vTaskSwitchContext+0xac>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d003      	beq.n	8005dae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005da6:	4b28      	ldr	r3, [pc, #160]	; (8005e48 <vTaskSwitchContext+0xb0>)
 8005da8:	2201      	movs	r2, #1
 8005daa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005dac:	e043      	b.n	8005e36 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 8005dae:	4b26      	ldr	r3, [pc, #152]	; (8005e48 <vTaskSwitchContext+0xb0>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005db4:	4b25      	ldr	r3, [pc, #148]	; (8005e4c <vTaskSwitchContext+0xb4>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	60fb      	str	r3, [r7, #12]
 8005dba:	e012      	b.n	8005de2 <vTaskSwitchContext+0x4a>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10c      	bne.n	8005ddc <vTaskSwitchContext+0x44>
	__asm volatile
 8005dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc6:	b672      	cpsid	i
 8005dc8:	f383 8811 	msr	BASEPRI, r3
 8005dcc:	f3bf 8f6f 	isb	sy
 8005dd0:	f3bf 8f4f 	dsb	sy
 8005dd4:	b662      	cpsie	i
 8005dd6:	607b      	str	r3, [r7, #4]
}
 8005dd8:	bf00      	nop
 8005dda:	e7fe      	b.n	8005dda <vTaskSwitchContext+0x42>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	3b01      	subs	r3, #1
 8005de0:	60fb      	str	r3, [r7, #12]
 8005de2:	491b      	ldr	r1, [pc, #108]	; (8005e50 <vTaskSwitchContext+0xb8>)
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	4613      	mov	r3, r2
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	4413      	add	r3, r2
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	440b      	add	r3, r1
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d0e2      	beq.n	8005dbc <vTaskSwitchContext+0x24>
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	4613      	mov	r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	4413      	add	r3, r2
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	4a13      	ldr	r2, [pc, #76]	; (8005e50 <vTaskSwitchContext+0xb8>)
 8005e02:	4413      	add	r3, r2
 8005e04:	60bb      	str	r3, [r7, #8]
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	685a      	ldr	r2, [r3, #4]
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	605a      	str	r2, [r3, #4]
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	685a      	ldr	r2, [r3, #4]
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	3308      	adds	r3, #8
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d104      	bne.n	8005e26 <vTaskSwitchContext+0x8e>
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	685a      	ldr	r2, [r3, #4]
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	605a      	str	r2, [r3, #4]
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	4a09      	ldr	r2, [pc, #36]	; (8005e54 <vTaskSwitchContext+0xbc>)
 8005e2e:	6013      	str	r3, [r2, #0]
 8005e30:	4a06      	ldr	r2, [pc, #24]	; (8005e4c <vTaskSwitchContext+0xb4>)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6013      	str	r3, [r2, #0]
}
 8005e36:	bf00      	nop
 8005e38:	3714      	adds	r7, #20
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	2000143c 	.word	0x2000143c
 8005e48:	20001428 	.word	0x20001428
 8005e4c:	2000141c 	.word	0x2000141c
 8005e50:	20000f44 	.word	0x20000f44
 8005e54:	20000f40 	.word	0x20000f40

08005e58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d10c      	bne.n	8005e82 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8005e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e6c:	b672      	cpsid	i
 8005e6e:	f383 8811 	msr	BASEPRI, r3
 8005e72:	f3bf 8f6f 	isb	sy
 8005e76:	f3bf 8f4f 	dsb	sy
 8005e7a:	b662      	cpsie	i
 8005e7c:	60fb      	str	r3, [r7, #12]
}
 8005e7e:	bf00      	nop
 8005e80:	e7fe      	b.n	8005e80 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e82:	4b07      	ldr	r3, [pc, #28]	; (8005ea0 <vTaskPlaceOnEventList+0x48>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	3318      	adds	r3, #24
 8005e88:	4619      	mov	r1, r3
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f7fe fdcf 	bl	8004a2e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005e90:	2101      	movs	r1, #1
 8005e92:	6838      	ldr	r0, [r7, #0]
 8005e94:	f000 fa8a 	bl	80063ac <prvAddCurrentTaskToDelayedList>
}
 8005e98:	bf00      	nop
 8005e9a:	3710      	adds	r7, #16
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	20000f40 	.word	0x20000f40

08005ea4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b086      	sub	sp, #24
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d10c      	bne.n	8005ed0 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8005eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eba:	b672      	cpsid	i
 8005ebc:	f383 8811 	msr	BASEPRI, r3
 8005ec0:	f3bf 8f6f 	isb	sy
 8005ec4:	f3bf 8f4f 	dsb	sy
 8005ec8:	b662      	cpsie	i
 8005eca:	617b      	str	r3, [r7, #20]
}
 8005ecc:	bf00      	nop
 8005ece:	e7fe      	b.n	8005ece <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ed0:	4b0a      	ldr	r3, [pc, #40]	; (8005efc <vTaskPlaceOnEventListRestricted+0x58>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	3318      	adds	r3, #24
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	f7fe fd84 	bl	80049e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d002      	beq.n	8005eea <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8005ee4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ee8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005eea:	6879      	ldr	r1, [r7, #4]
 8005eec:	68b8      	ldr	r0, [r7, #8]
 8005eee:	f000 fa5d 	bl	80063ac <prvAddCurrentTaskToDelayedList>
	}
 8005ef2:	bf00      	nop
 8005ef4:	3718      	adds	r7, #24
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	20000f40 	.word	0x20000f40

08005f00 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b086      	sub	sp, #24
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d10c      	bne.n	8005f30 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8005f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1a:	b672      	cpsid	i
 8005f1c:	f383 8811 	msr	BASEPRI, r3
 8005f20:	f3bf 8f6f 	isb	sy
 8005f24:	f3bf 8f4f 	dsb	sy
 8005f28:	b662      	cpsie	i
 8005f2a:	60fb      	str	r3, [r7, #12]
}
 8005f2c:	bf00      	nop
 8005f2e:	e7fe      	b.n	8005f2e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	3318      	adds	r3, #24
 8005f34:	4618      	mov	r0, r3
 8005f36:	f7fe fdb3 	bl	8004aa0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f3a:	4b1e      	ldr	r3, [pc, #120]	; (8005fb4 <xTaskRemoveFromEventList+0xb4>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d11d      	bne.n	8005f7e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	3304      	adds	r3, #4
 8005f46:	4618      	mov	r0, r3
 8005f48:	f7fe fdaa 	bl	8004aa0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f50:	4b19      	ldr	r3, [pc, #100]	; (8005fb8 <xTaskRemoveFromEventList+0xb8>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d903      	bls.n	8005f60 <xTaskRemoveFromEventList+0x60>
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5c:	4a16      	ldr	r2, [pc, #88]	; (8005fb8 <xTaskRemoveFromEventList+0xb8>)
 8005f5e:	6013      	str	r3, [r2, #0]
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f64:	4613      	mov	r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	4413      	add	r3, r2
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	4a13      	ldr	r2, [pc, #76]	; (8005fbc <xTaskRemoveFromEventList+0xbc>)
 8005f6e:	441a      	add	r2, r3
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	3304      	adds	r3, #4
 8005f74:	4619      	mov	r1, r3
 8005f76:	4610      	mov	r0, r2
 8005f78:	f7fe fd35 	bl	80049e6 <vListInsertEnd>
 8005f7c:	e005      	b.n	8005f8a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	3318      	adds	r3, #24
 8005f82:	4619      	mov	r1, r3
 8005f84:	480e      	ldr	r0, [pc, #56]	; (8005fc0 <xTaskRemoveFromEventList+0xc0>)
 8005f86:	f7fe fd2e 	bl	80049e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f8e:	4b0d      	ldr	r3, [pc, #52]	; (8005fc4 <xTaskRemoveFromEventList+0xc4>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d905      	bls.n	8005fa4 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005f9c:	4b0a      	ldr	r3, [pc, #40]	; (8005fc8 <xTaskRemoveFromEventList+0xc8>)
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	601a      	str	r2, [r3, #0]
 8005fa2:	e001      	b.n	8005fa8 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005fa8:	697b      	ldr	r3, [r7, #20]
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3718      	adds	r7, #24
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	2000143c 	.word	0x2000143c
 8005fb8:	2000141c 	.word	0x2000141c
 8005fbc:	20000f44 	.word	0x20000f44
 8005fc0:	200013d4 	.word	0x200013d4
 8005fc4:	20000f40 	.word	0x20000f40
 8005fc8:	20001428 	.word	0x20001428

08005fcc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005fd4:	4b06      	ldr	r3, [pc, #24]	; (8005ff0 <vTaskInternalSetTimeOutState+0x24>)
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005fdc:	4b05      	ldr	r3, [pc, #20]	; (8005ff4 <vTaskInternalSetTimeOutState+0x28>)
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	605a      	str	r2, [r3, #4]
}
 8005fe4:	bf00      	nop
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr
 8005ff0:	2000142c 	.word	0x2000142c
 8005ff4:	20001418 	.word	0x20001418

08005ff8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b088      	sub	sp, #32
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d10c      	bne.n	8006022 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8006008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800600c:	b672      	cpsid	i
 800600e:	f383 8811 	msr	BASEPRI, r3
 8006012:	f3bf 8f6f 	isb	sy
 8006016:	f3bf 8f4f 	dsb	sy
 800601a:	b662      	cpsie	i
 800601c:	613b      	str	r3, [r7, #16]
}
 800601e:	bf00      	nop
 8006020:	e7fe      	b.n	8006020 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d10c      	bne.n	8006042 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8006028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602c:	b672      	cpsid	i
 800602e:	f383 8811 	msr	BASEPRI, r3
 8006032:	f3bf 8f6f 	isb	sy
 8006036:	f3bf 8f4f 	dsb	sy
 800603a:	b662      	cpsie	i
 800603c:	60fb      	str	r3, [r7, #12]
}
 800603e:	bf00      	nop
 8006040:	e7fe      	b.n	8006040 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8006042:	f000 fe73 	bl	8006d2c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006046:	4b1d      	ldr	r3, [pc, #116]	; (80060bc <xTaskCheckForTimeOut+0xc4>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	69ba      	ldr	r2, [r7, #24]
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800605e:	d102      	bne.n	8006066 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006060:	2300      	movs	r3, #0
 8006062:	61fb      	str	r3, [r7, #28]
 8006064:	e023      	b.n	80060ae <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	4b15      	ldr	r3, [pc, #84]	; (80060c0 <xTaskCheckForTimeOut+0xc8>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	429a      	cmp	r2, r3
 8006070:	d007      	beq.n	8006082 <xTaskCheckForTimeOut+0x8a>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	69ba      	ldr	r2, [r7, #24]
 8006078:	429a      	cmp	r2, r3
 800607a:	d302      	bcc.n	8006082 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800607c:	2301      	movs	r3, #1
 800607e:	61fb      	str	r3, [r7, #28]
 8006080:	e015      	b.n	80060ae <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	697a      	ldr	r2, [r7, #20]
 8006088:	429a      	cmp	r2, r3
 800608a:	d20b      	bcs.n	80060a4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	1ad2      	subs	r2, r2, r3
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f7ff ff97 	bl	8005fcc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800609e:	2300      	movs	r3, #0
 80060a0:	61fb      	str	r3, [r7, #28]
 80060a2:	e004      	b.n	80060ae <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	2200      	movs	r2, #0
 80060a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80060aa:	2301      	movs	r3, #1
 80060ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80060ae:	f000 fe71 	bl	8006d94 <vPortExitCritical>

	return xReturn;
 80060b2:	69fb      	ldr	r3, [r7, #28]
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3720      	adds	r7, #32
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	20001418 	.word	0x20001418
 80060c0:	2000142c 	.word	0x2000142c

080060c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80060c4:	b480      	push	{r7}
 80060c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80060c8:	4b03      	ldr	r3, [pc, #12]	; (80060d8 <vTaskMissedYield+0x14>)
 80060ca:	2201      	movs	r2, #1
 80060cc:	601a      	str	r2, [r3, #0]
}
 80060ce:	bf00      	nop
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr
 80060d8:	20001428 	.word	0x20001428

080060dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80060e4:	f000 f852 	bl	800618c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80060e8:	4b06      	ldr	r3, [pc, #24]	; (8006104 <prvIdleTask+0x28>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d9f9      	bls.n	80060e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80060f0:	4b05      	ldr	r3, [pc, #20]	; (8006108 <prvIdleTask+0x2c>)
 80060f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060f6:	601a      	str	r2, [r3, #0]
 80060f8:	f3bf 8f4f 	dsb	sy
 80060fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006100:	e7f0      	b.n	80060e4 <prvIdleTask+0x8>
 8006102:	bf00      	nop
 8006104:	20000f44 	.word	0x20000f44
 8006108:	e000ed04 	.word	0xe000ed04

0800610c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006112:	2300      	movs	r3, #0
 8006114:	607b      	str	r3, [r7, #4]
 8006116:	e00c      	b.n	8006132 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	4613      	mov	r3, r2
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	4413      	add	r3, r2
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	4a12      	ldr	r2, [pc, #72]	; (800616c <prvInitialiseTaskLists+0x60>)
 8006124:	4413      	add	r3, r2
 8006126:	4618      	mov	r0, r3
 8006128:	f7fe fc30 	bl	800498c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	3301      	adds	r3, #1
 8006130:	607b      	str	r3, [r7, #4]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2b37      	cmp	r3, #55	; 0x37
 8006136:	d9ef      	bls.n	8006118 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006138:	480d      	ldr	r0, [pc, #52]	; (8006170 <prvInitialiseTaskLists+0x64>)
 800613a:	f7fe fc27 	bl	800498c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800613e:	480d      	ldr	r0, [pc, #52]	; (8006174 <prvInitialiseTaskLists+0x68>)
 8006140:	f7fe fc24 	bl	800498c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006144:	480c      	ldr	r0, [pc, #48]	; (8006178 <prvInitialiseTaskLists+0x6c>)
 8006146:	f7fe fc21 	bl	800498c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800614a:	480c      	ldr	r0, [pc, #48]	; (800617c <prvInitialiseTaskLists+0x70>)
 800614c:	f7fe fc1e 	bl	800498c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006150:	480b      	ldr	r0, [pc, #44]	; (8006180 <prvInitialiseTaskLists+0x74>)
 8006152:	f7fe fc1b 	bl	800498c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006156:	4b0b      	ldr	r3, [pc, #44]	; (8006184 <prvInitialiseTaskLists+0x78>)
 8006158:	4a05      	ldr	r2, [pc, #20]	; (8006170 <prvInitialiseTaskLists+0x64>)
 800615a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800615c:	4b0a      	ldr	r3, [pc, #40]	; (8006188 <prvInitialiseTaskLists+0x7c>)
 800615e:	4a05      	ldr	r2, [pc, #20]	; (8006174 <prvInitialiseTaskLists+0x68>)
 8006160:	601a      	str	r2, [r3, #0]
}
 8006162:	bf00      	nop
 8006164:	3708      	adds	r7, #8
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	20000f44 	.word	0x20000f44
 8006170:	200013a4 	.word	0x200013a4
 8006174:	200013b8 	.word	0x200013b8
 8006178:	200013d4 	.word	0x200013d4
 800617c:	200013e8 	.word	0x200013e8
 8006180:	20001400 	.word	0x20001400
 8006184:	200013cc 	.word	0x200013cc
 8006188:	200013d0 	.word	0x200013d0

0800618c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006192:	e019      	b.n	80061c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006194:	f000 fdca 	bl	8006d2c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006198:	4b10      	ldr	r3, [pc, #64]	; (80061dc <prvCheckTasksWaitingTermination+0x50>)
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	3304      	adds	r3, #4
 80061a4:	4618      	mov	r0, r3
 80061a6:	f7fe fc7b 	bl	8004aa0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80061aa:	4b0d      	ldr	r3, [pc, #52]	; (80061e0 <prvCheckTasksWaitingTermination+0x54>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	3b01      	subs	r3, #1
 80061b0:	4a0b      	ldr	r2, [pc, #44]	; (80061e0 <prvCheckTasksWaitingTermination+0x54>)
 80061b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80061b4:	4b0b      	ldr	r3, [pc, #44]	; (80061e4 <prvCheckTasksWaitingTermination+0x58>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	3b01      	subs	r3, #1
 80061ba:	4a0a      	ldr	r2, [pc, #40]	; (80061e4 <prvCheckTasksWaitingTermination+0x58>)
 80061bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80061be:	f000 fde9 	bl	8006d94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 f810 	bl	80061e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061c8:	4b06      	ldr	r3, [pc, #24]	; (80061e4 <prvCheckTasksWaitingTermination+0x58>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d1e1      	bne.n	8006194 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80061d0:	bf00      	nop
 80061d2:	bf00      	nop
 80061d4:	3708      	adds	r7, #8
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	200013e8 	.word	0x200013e8
 80061e0:	20001414 	.word	0x20001414
 80061e4:	200013fc 	.word	0x200013fc

080061e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d108      	bne.n	800620c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061fe:	4618      	mov	r0, r3
 8006200:	f000 ff8a 	bl	8007118 <vPortFree>
				vPortFree( pxTCB );
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 ff87 	bl	8007118 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800620a:	e01a      	b.n	8006242 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006212:	2b01      	cmp	r3, #1
 8006214:	d103      	bne.n	800621e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 ff7e 	bl	8007118 <vPortFree>
	}
 800621c:	e011      	b.n	8006242 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006224:	2b02      	cmp	r3, #2
 8006226:	d00c      	beq.n	8006242 <prvDeleteTCB+0x5a>
	__asm volatile
 8006228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622c:	b672      	cpsid	i
 800622e:	f383 8811 	msr	BASEPRI, r3
 8006232:	f3bf 8f6f 	isb	sy
 8006236:	f3bf 8f4f 	dsb	sy
 800623a:	b662      	cpsie	i
 800623c:	60fb      	str	r3, [r7, #12]
}
 800623e:	bf00      	nop
 8006240:	e7fe      	b.n	8006240 <prvDeleteTCB+0x58>
	}
 8006242:	bf00      	nop
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
	...

0800624c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006252:	4b0c      	ldr	r3, [pc, #48]	; (8006284 <prvResetNextTaskUnblockTime+0x38>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d104      	bne.n	8006266 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800625c:	4b0a      	ldr	r3, [pc, #40]	; (8006288 <prvResetNextTaskUnblockTime+0x3c>)
 800625e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006262:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006264:	e008      	b.n	8006278 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006266:	4b07      	ldr	r3, [pc, #28]	; (8006284 <prvResetNextTaskUnblockTime+0x38>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	4a04      	ldr	r2, [pc, #16]	; (8006288 <prvResetNextTaskUnblockTime+0x3c>)
 8006276:	6013      	str	r3, [r2, #0]
}
 8006278:	bf00      	nop
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr
 8006284:	200013cc 	.word	0x200013cc
 8006288:	20001434 	.word	0x20001434

0800628c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006292:	4b0b      	ldr	r3, [pc, #44]	; (80062c0 <xTaskGetSchedulerState+0x34>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d102      	bne.n	80062a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800629a:	2301      	movs	r3, #1
 800629c:	607b      	str	r3, [r7, #4]
 800629e:	e008      	b.n	80062b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062a0:	4b08      	ldr	r3, [pc, #32]	; (80062c4 <xTaskGetSchedulerState+0x38>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d102      	bne.n	80062ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80062a8:	2302      	movs	r3, #2
 80062aa:	607b      	str	r3, [r7, #4]
 80062ac:	e001      	b.n	80062b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80062ae:	2300      	movs	r3, #0
 80062b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80062b2:	687b      	ldr	r3, [r7, #4]
	}
 80062b4:	4618      	mov	r0, r3
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr
 80062c0:	20001420 	.word	0x20001420
 80062c4:	2000143c 	.word	0x2000143c

080062c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b086      	sub	sp, #24
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80062d4:	2300      	movs	r3, #0
 80062d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d05a      	beq.n	8006394 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80062de:	4b30      	ldr	r3, [pc, #192]	; (80063a0 <xTaskPriorityDisinherit+0xd8>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	693a      	ldr	r2, [r7, #16]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d00c      	beq.n	8006302 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80062e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ec:	b672      	cpsid	i
 80062ee:	f383 8811 	msr	BASEPRI, r3
 80062f2:	f3bf 8f6f 	isb	sy
 80062f6:	f3bf 8f4f 	dsb	sy
 80062fa:	b662      	cpsie	i
 80062fc:	60fb      	str	r3, [r7, #12]
}
 80062fe:	bf00      	nop
 8006300:	e7fe      	b.n	8006300 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006306:	2b00      	cmp	r3, #0
 8006308:	d10c      	bne.n	8006324 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800630a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800630e:	b672      	cpsid	i
 8006310:	f383 8811 	msr	BASEPRI, r3
 8006314:	f3bf 8f6f 	isb	sy
 8006318:	f3bf 8f4f 	dsb	sy
 800631c:	b662      	cpsie	i
 800631e:	60bb      	str	r3, [r7, #8]
}
 8006320:	bf00      	nop
 8006322:	e7fe      	b.n	8006322 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006328:	1e5a      	subs	r2, r3, #1
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006336:	429a      	cmp	r2, r3
 8006338:	d02c      	beq.n	8006394 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800633e:	2b00      	cmp	r3, #0
 8006340:	d128      	bne.n	8006394 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	3304      	adds	r3, #4
 8006346:	4618      	mov	r0, r3
 8006348:	f7fe fbaa 	bl	8004aa0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006358:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006364:	4b0f      	ldr	r3, [pc, #60]	; (80063a4 <xTaskPriorityDisinherit+0xdc>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	429a      	cmp	r2, r3
 800636a:	d903      	bls.n	8006374 <xTaskPriorityDisinherit+0xac>
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006370:	4a0c      	ldr	r2, [pc, #48]	; (80063a4 <xTaskPriorityDisinherit+0xdc>)
 8006372:	6013      	str	r3, [r2, #0]
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006378:	4613      	mov	r3, r2
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	4413      	add	r3, r2
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	4a09      	ldr	r2, [pc, #36]	; (80063a8 <xTaskPriorityDisinherit+0xe0>)
 8006382:	441a      	add	r2, r3
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	3304      	adds	r3, #4
 8006388:	4619      	mov	r1, r3
 800638a:	4610      	mov	r0, r2
 800638c:	f7fe fb2b 	bl	80049e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006390:	2301      	movs	r3, #1
 8006392:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006394:	697b      	ldr	r3, [r7, #20]
	}
 8006396:	4618      	mov	r0, r3
 8006398:	3718      	adds	r7, #24
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	20000f40 	.word	0x20000f40
 80063a4:	2000141c 	.word	0x2000141c
 80063a8:	20000f44 	.word	0x20000f44

080063ac <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80063b6:	4b21      	ldr	r3, [pc, #132]	; (800643c <prvAddCurrentTaskToDelayedList+0x90>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063bc:	4b20      	ldr	r3, [pc, #128]	; (8006440 <prvAddCurrentTaskToDelayedList+0x94>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	3304      	adds	r3, #4
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7fe fb6c 	bl	8004aa0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063ce:	d10a      	bne.n	80063e6 <prvAddCurrentTaskToDelayedList+0x3a>
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d007      	beq.n	80063e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063d6:	4b1a      	ldr	r3, [pc, #104]	; (8006440 <prvAddCurrentTaskToDelayedList+0x94>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	3304      	adds	r3, #4
 80063dc:	4619      	mov	r1, r3
 80063de:	4819      	ldr	r0, [pc, #100]	; (8006444 <prvAddCurrentTaskToDelayedList+0x98>)
 80063e0:	f7fe fb01 	bl	80049e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80063e4:	e026      	b.n	8006434 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4413      	add	r3, r2
 80063ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80063ee:	4b14      	ldr	r3, [pc, #80]	; (8006440 <prvAddCurrentTaskToDelayedList+0x94>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	68ba      	ldr	r2, [r7, #8]
 80063f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80063f6:	68ba      	ldr	r2, [r7, #8]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d209      	bcs.n	8006412 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063fe:	4b12      	ldr	r3, [pc, #72]	; (8006448 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	4b0f      	ldr	r3, [pc, #60]	; (8006440 <prvAddCurrentTaskToDelayedList+0x94>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	3304      	adds	r3, #4
 8006408:	4619      	mov	r1, r3
 800640a:	4610      	mov	r0, r2
 800640c:	f7fe fb0f 	bl	8004a2e <vListInsert>
}
 8006410:	e010      	b.n	8006434 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006412:	4b0e      	ldr	r3, [pc, #56]	; (800644c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	4b0a      	ldr	r3, [pc, #40]	; (8006440 <prvAddCurrentTaskToDelayedList+0x94>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	3304      	adds	r3, #4
 800641c:	4619      	mov	r1, r3
 800641e:	4610      	mov	r0, r2
 8006420:	f7fe fb05 	bl	8004a2e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006424:	4b0a      	ldr	r3, [pc, #40]	; (8006450 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68ba      	ldr	r2, [r7, #8]
 800642a:	429a      	cmp	r2, r3
 800642c:	d202      	bcs.n	8006434 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800642e:	4a08      	ldr	r2, [pc, #32]	; (8006450 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	6013      	str	r3, [r2, #0]
}
 8006434:	bf00      	nop
 8006436:	3710      	adds	r7, #16
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}
 800643c:	20001418 	.word	0x20001418
 8006440:	20000f40 	.word	0x20000f40
 8006444:	20001400 	.word	0x20001400
 8006448:	200013d0 	.word	0x200013d0
 800644c:	200013cc 	.word	0x200013cc
 8006450:	20001434 	.word	0x20001434

08006454 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b08a      	sub	sp, #40	; 0x28
 8006458:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800645a:	2300      	movs	r3, #0
 800645c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800645e:	f000 fb15 	bl	8006a8c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006462:	4b1d      	ldr	r3, [pc, #116]	; (80064d8 <xTimerCreateTimerTask+0x84>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d021      	beq.n	80064ae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800646a:	2300      	movs	r3, #0
 800646c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800646e:	2300      	movs	r3, #0
 8006470:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006472:	1d3a      	adds	r2, r7, #4
 8006474:	f107 0108 	add.w	r1, r7, #8
 8006478:	f107 030c 	add.w	r3, r7, #12
 800647c:	4618      	mov	r0, r3
 800647e:	f7fe fa6b 	bl	8004958 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006482:	6879      	ldr	r1, [r7, #4]
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	9202      	str	r2, [sp, #8]
 800648a:	9301      	str	r3, [sp, #4]
 800648c:	2302      	movs	r3, #2
 800648e:	9300      	str	r3, [sp, #0]
 8006490:	2300      	movs	r3, #0
 8006492:	460a      	mov	r2, r1
 8006494:	4911      	ldr	r1, [pc, #68]	; (80064dc <xTimerCreateTimerTask+0x88>)
 8006496:	4812      	ldr	r0, [pc, #72]	; (80064e0 <xTimerCreateTimerTask+0x8c>)
 8006498:	f7ff f836 	bl	8005508 <xTaskCreateStatic>
 800649c:	4603      	mov	r3, r0
 800649e:	4a11      	ldr	r2, [pc, #68]	; (80064e4 <xTimerCreateTimerTask+0x90>)
 80064a0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80064a2:	4b10      	ldr	r3, [pc, #64]	; (80064e4 <xTimerCreateTimerTask+0x90>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d001      	beq.n	80064ae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80064aa:	2301      	movs	r3, #1
 80064ac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d10c      	bne.n	80064ce <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80064b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b8:	b672      	cpsid	i
 80064ba:	f383 8811 	msr	BASEPRI, r3
 80064be:	f3bf 8f6f 	isb	sy
 80064c2:	f3bf 8f4f 	dsb	sy
 80064c6:	b662      	cpsie	i
 80064c8:	613b      	str	r3, [r7, #16]
}
 80064ca:	bf00      	nop
 80064cc:	e7fe      	b.n	80064cc <xTimerCreateTimerTask+0x78>
	return xReturn;
 80064ce:	697b      	ldr	r3, [r7, #20]
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3718      	adds	r7, #24
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	20001470 	.word	0x20001470
 80064dc:	0800741c 	.word	0x0800741c
 80064e0:	08006625 	.word	0x08006625
 80064e4:	20001474 	.word	0x20001474

080064e8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b08a      	sub	sp, #40	; 0x28
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	607a      	str	r2, [r7, #4]
 80064f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80064f6:	2300      	movs	r3, #0
 80064f8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d10c      	bne.n	800651a <xTimerGenericCommand+0x32>
	__asm volatile
 8006500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006504:	b672      	cpsid	i
 8006506:	f383 8811 	msr	BASEPRI, r3
 800650a:	f3bf 8f6f 	isb	sy
 800650e:	f3bf 8f4f 	dsb	sy
 8006512:	b662      	cpsie	i
 8006514:	623b      	str	r3, [r7, #32]
}
 8006516:	bf00      	nop
 8006518:	e7fe      	b.n	8006518 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800651a:	4b1a      	ldr	r3, [pc, #104]	; (8006584 <xTimerGenericCommand+0x9c>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d02a      	beq.n	8006578 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	2b05      	cmp	r3, #5
 8006532:	dc18      	bgt.n	8006566 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006534:	f7ff feaa 	bl	800628c <xTaskGetSchedulerState>
 8006538:	4603      	mov	r3, r0
 800653a:	2b02      	cmp	r3, #2
 800653c:	d109      	bne.n	8006552 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800653e:	4b11      	ldr	r3, [pc, #68]	; (8006584 <xTimerGenericCommand+0x9c>)
 8006540:	6818      	ldr	r0, [r3, #0]
 8006542:	f107 0110 	add.w	r1, r7, #16
 8006546:	2300      	movs	r3, #0
 8006548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800654a:	f7fe fbe3 	bl	8004d14 <xQueueGenericSend>
 800654e:	6278      	str	r0, [r7, #36]	; 0x24
 8006550:	e012      	b.n	8006578 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006552:	4b0c      	ldr	r3, [pc, #48]	; (8006584 <xTimerGenericCommand+0x9c>)
 8006554:	6818      	ldr	r0, [r3, #0]
 8006556:	f107 0110 	add.w	r1, r7, #16
 800655a:	2300      	movs	r3, #0
 800655c:	2200      	movs	r2, #0
 800655e:	f7fe fbd9 	bl	8004d14 <xQueueGenericSend>
 8006562:	6278      	str	r0, [r7, #36]	; 0x24
 8006564:	e008      	b.n	8006578 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006566:	4b07      	ldr	r3, [pc, #28]	; (8006584 <xTimerGenericCommand+0x9c>)
 8006568:	6818      	ldr	r0, [r3, #0]
 800656a:	f107 0110 	add.w	r1, r7, #16
 800656e:	2300      	movs	r3, #0
 8006570:	683a      	ldr	r2, [r7, #0]
 8006572:	f7fe fcd5 	bl	8004f20 <xQueueGenericSendFromISR>
 8006576:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800657a:	4618      	mov	r0, r3
 800657c:	3728      	adds	r7, #40	; 0x28
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	20001470 	.word	0x20001470

08006588 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b088      	sub	sp, #32
 800658c:	af02      	add	r7, sp, #8
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006592:	4b23      	ldr	r3, [pc, #140]	; (8006620 <prvProcessExpiredTimer+0x98>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	3304      	adds	r3, #4
 80065a0:	4618      	mov	r0, r3
 80065a2:	f7fe fa7d 	bl	8004aa0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065ac:	f003 0304 	and.w	r3, r3, #4
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d024      	beq.n	80065fe <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	699a      	ldr	r2, [r3, #24]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	18d1      	adds	r1, r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	683a      	ldr	r2, [r7, #0]
 80065c0:	6978      	ldr	r0, [r7, #20]
 80065c2:	f000 f8d3 	bl	800676c <prvInsertTimerInActiveList>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d021      	beq.n	8006610 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80065cc:	2300      	movs	r3, #0
 80065ce:	9300      	str	r3, [sp, #0]
 80065d0:	2300      	movs	r3, #0
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	2100      	movs	r1, #0
 80065d6:	6978      	ldr	r0, [r7, #20]
 80065d8:	f7ff ff86 	bl	80064e8 <xTimerGenericCommand>
 80065dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d115      	bne.n	8006610 <prvProcessExpiredTimer+0x88>
	__asm volatile
 80065e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e8:	b672      	cpsid	i
 80065ea:	f383 8811 	msr	BASEPRI, r3
 80065ee:	f3bf 8f6f 	isb	sy
 80065f2:	f3bf 8f4f 	dsb	sy
 80065f6:	b662      	cpsie	i
 80065f8:	60fb      	str	r3, [r7, #12]
}
 80065fa:	bf00      	nop
 80065fc:	e7fe      	b.n	80065fc <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006604:	f023 0301 	bic.w	r3, r3, #1
 8006608:	b2da      	uxtb	r2, r3
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	6a1b      	ldr	r3, [r3, #32]
 8006614:	6978      	ldr	r0, [r7, #20]
 8006616:	4798      	blx	r3
}
 8006618:	bf00      	nop
 800661a:	3718      	adds	r7, #24
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}
 8006620:	20001468 	.word	0x20001468

08006624 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800662c:	f107 0308 	add.w	r3, r7, #8
 8006630:	4618      	mov	r0, r3
 8006632:	f000 f857 	bl	80066e4 <prvGetNextExpireTime>
 8006636:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	4619      	mov	r1, r3
 800663c:	68f8      	ldr	r0, [r7, #12]
 800663e:	f000 f803 	bl	8006648 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006642:	f000 f8d5 	bl	80067f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006646:	e7f1      	b.n	800662c <prvTimerTask+0x8>

08006648 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006652:	f7ff fa27 	bl	8005aa4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006656:	f107 0308 	add.w	r3, r7, #8
 800665a:	4618      	mov	r0, r3
 800665c:	f000 f866 	bl	800672c <prvSampleTimeNow>
 8006660:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d130      	bne.n	80066ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d10a      	bne.n	8006684 <prvProcessTimerOrBlockTask+0x3c>
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	429a      	cmp	r2, r3
 8006674:	d806      	bhi.n	8006684 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006676:	f7ff fa23 	bl	8005ac0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800667a:	68f9      	ldr	r1, [r7, #12]
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f7ff ff83 	bl	8006588 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006682:	e024      	b.n	80066ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d008      	beq.n	800669c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800668a:	4b13      	ldr	r3, [pc, #76]	; (80066d8 <prvProcessTimerOrBlockTask+0x90>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d101      	bne.n	8006698 <prvProcessTimerOrBlockTask+0x50>
 8006694:	2301      	movs	r3, #1
 8006696:	e000      	b.n	800669a <prvProcessTimerOrBlockTask+0x52>
 8006698:	2300      	movs	r3, #0
 800669a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800669c:	4b0f      	ldr	r3, [pc, #60]	; (80066dc <prvProcessTimerOrBlockTask+0x94>)
 800669e:	6818      	ldr	r0, [r3, #0]
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	683a      	ldr	r2, [r7, #0]
 80066a8:	4619      	mov	r1, r3
 80066aa:	f7fe fef9 	bl	80054a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80066ae:	f7ff fa07 	bl	8005ac0 <xTaskResumeAll>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d10a      	bne.n	80066ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80066b8:	4b09      	ldr	r3, [pc, #36]	; (80066e0 <prvProcessTimerOrBlockTask+0x98>)
 80066ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066be:	601a      	str	r2, [r3, #0]
 80066c0:	f3bf 8f4f 	dsb	sy
 80066c4:	f3bf 8f6f 	isb	sy
}
 80066c8:	e001      	b.n	80066ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80066ca:	f7ff f9f9 	bl	8005ac0 <xTaskResumeAll>
}
 80066ce:	bf00      	nop
 80066d0:	3710      	adds	r7, #16
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	2000146c 	.word	0x2000146c
 80066dc:	20001470 	.word	0x20001470
 80066e0:	e000ed04 	.word	0xe000ed04

080066e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80066e4:	b480      	push	{r7}
 80066e6:	b085      	sub	sp, #20
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80066ec:	4b0e      	ldr	r3, [pc, #56]	; (8006728 <prvGetNextExpireTime+0x44>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d101      	bne.n	80066fa <prvGetNextExpireTime+0x16>
 80066f6:	2201      	movs	r2, #1
 80066f8:	e000      	b.n	80066fc <prvGetNextExpireTime+0x18>
 80066fa:	2200      	movs	r2, #0
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d105      	bne.n	8006714 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006708:	4b07      	ldr	r3, [pc, #28]	; (8006728 <prvGetNextExpireTime+0x44>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	60fb      	str	r3, [r7, #12]
 8006712:	e001      	b.n	8006718 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006714:	2300      	movs	r3, #0
 8006716:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006718:	68fb      	ldr	r3, [r7, #12]
}
 800671a:	4618      	mov	r0, r3
 800671c:	3714      	adds	r7, #20
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop
 8006728:	20001468 	.word	0x20001468

0800672c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006734:	f7ff fa64 	bl	8005c00 <xTaskGetTickCount>
 8006738:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800673a:	4b0b      	ldr	r3, [pc, #44]	; (8006768 <prvSampleTimeNow+0x3c>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	429a      	cmp	r2, r3
 8006742:	d205      	bcs.n	8006750 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006744:	f000 f93c 	bl	80069c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	601a      	str	r2, [r3, #0]
 800674e:	e002      	b.n	8006756 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006756:	4a04      	ldr	r2, [pc, #16]	; (8006768 <prvSampleTimeNow+0x3c>)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800675c:	68fb      	ldr	r3, [r7, #12]
}
 800675e:	4618      	mov	r0, r3
 8006760:	3710      	adds	r7, #16
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	20001478 	.word	0x20001478

0800676c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b086      	sub	sp, #24
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	607a      	str	r2, [r7, #4]
 8006778:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800677a:	2300      	movs	r3, #0
 800677c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	68ba      	ldr	r2, [r7, #8]
 8006782:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800678a:	68ba      	ldr	r2, [r7, #8]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	429a      	cmp	r2, r3
 8006790:	d812      	bhi.n	80067b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	1ad2      	subs	r2, r2, r3
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	429a      	cmp	r2, r3
 800679e:	d302      	bcc.n	80067a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80067a0:	2301      	movs	r3, #1
 80067a2:	617b      	str	r3, [r7, #20]
 80067a4:	e01b      	b.n	80067de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80067a6:	4b10      	ldr	r3, [pc, #64]	; (80067e8 <prvInsertTimerInActiveList+0x7c>)
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	3304      	adds	r3, #4
 80067ae:	4619      	mov	r1, r3
 80067b0:	4610      	mov	r0, r2
 80067b2:	f7fe f93c 	bl	8004a2e <vListInsert>
 80067b6:	e012      	b.n	80067de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d206      	bcs.n	80067ce <prvInsertTimerInActiveList+0x62>
 80067c0:	68ba      	ldr	r2, [r7, #8]
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d302      	bcc.n	80067ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80067c8:	2301      	movs	r3, #1
 80067ca:	617b      	str	r3, [r7, #20]
 80067cc:	e007      	b.n	80067de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80067ce:	4b07      	ldr	r3, [pc, #28]	; (80067ec <prvInsertTimerInActiveList+0x80>)
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	3304      	adds	r3, #4
 80067d6:	4619      	mov	r1, r3
 80067d8:	4610      	mov	r0, r2
 80067da:	f7fe f928 	bl	8004a2e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80067de:	697b      	ldr	r3, [r7, #20]
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3718      	adds	r7, #24
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	2000146c 	.word	0x2000146c
 80067ec:	20001468 	.word	0x20001468

080067f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b08e      	sub	sp, #56	; 0x38
 80067f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80067f6:	e0d0      	b.n	800699a <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	da1a      	bge.n	8006834 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80067fe:	1d3b      	adds	r3, r7, #4
 8006800:	3304      	adds	r3, #4
 8006802:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006806:	2b00      	cmp	r3, #0
 8006808:	d10c      	bne.n	8006824 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800680a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800680e:	b672      	cpsid	i
 8006810:	f383 8811 	msr	BASEPRI, r3
 8006814:	f3bf 8f6f 	isb	sy
 8006818:	f3bf 8f4f 	dsb	sy
 800681c:	b662      	cpsie	i
 800681e:	61fb      	str	r3, [r7, #28]
}
 8006820:	bf00      	nop
 8006822:	e7fe      	b.n	8006822 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800682a:	6850      	ldr	r0, [r2, #4]
 800682c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800682e:	6892      	ldr	r2, [r2, #8]
 8006830:	4611      	mov	r1, r2
 8006832:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2b00      	cmp	r3, #0
 8006838:	f2c0 80af 	blt.w	800699a <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006842:	695b      	ldr	r3, [r3, #20]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d004      	beq.n	8006852 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800684a:	3304      	adds	r3, #4
 800684c:	4618      	mov	r0, r3
 800684e:	f7fe f927 	bl	8004aa0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006852:	463b      	mov	r3, r7
 8006854:	4618      	mov	r0, r3
 8006856:	f7ff ff69 	bl	800672c <prvSampleTimeNow>
 800685a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2b09      	cmp	r3, #9
 8006860:	f200 809a 	bhi.w	8006998 <prvProcessReceivedCommands+0x1a8>
 8006864:	a201      	add	r2, pc, #4	; (adr r2, 800686c <prvProcessReceivedCommands+0x7c>)
 8006866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800686a:	bf00      	nop
 800686c:	08006895 	.word	0x08006895
 8006870:	08006895 	.word	0x08006895
 8006874:	08006895 	.word	0x08006895
 8006878:	0800690d 	.word	0x0800690d
 800687c:	08006921 	.word	0x08006921
 8006880:	0800696f 	.word	0x0800696f
 8006884:	08006895 	.word	0x08006895
 8006888:	08006895 	.word	0x08006895
 800688c:	0800690d 	.word	0x0800690d
 8006890:	08006921 	.word	0x08006921
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006896:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800689a:	f043 0301 	orr.w	r3, r3, #1
 800689e:	b2da      	uxtb	r2, r3
 80068a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80068a6:	68ba      	ldr	r2, [r7, #8]
 80068a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068aa:	699b      	ldr	r3, [r3, #24]
 80068ac:	18d1      	adds	r1, r2, r3
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068b4:	f7ff ff5a 	bl	800676c <prvInsertTimerInActiveList>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d06d      	beq.n	800699a <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80068be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c0:	6a1b      	ldr	r3, [r3, #32]
 80068c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80068c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068cc:	f003 0304 	and.w	r3, r3, #4
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d062      	beq.n	800699a <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80068d4:	68ba      	ldr	r2, [r7, #8]
 80068d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d8:	699b      	ldr	r3, [r3, #24]
 80068da:	441a      	add	r2, r3
 80068dc:	2300      	movs	r3, #0
 80068de:	9300      	str	r3, [sp, #0]
 80068e0:	2300      	movs	r3, #0
 80068e2:	2100      	movs	r1, #0
 80068e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068e6:	f7ff fdff 	bl	80064e8 <xTimerGenericCommand>
 80068ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80068ec:	6a3b      	ldr	r3, [r7, #32]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d153      	bne.n	800699a <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 80068f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f6:	b672      	cpsid	i
 80068f8:	f383 8811 	msr	BASEPRI, r3
 80068fc:	f3bf 8f6f 	isb	sy
 8006900:	f3bf 8f4f 	dsb	sy
 8006904:	b662      	cpsie	i
 8006906:	61bb      	str	r3, [r7, #24]
}
 8006908:	bf00      	nop
 800690a:	e7fe      	b.n	800690a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800690c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006912:	f023 0301 	bic.w	r3, r3, #1
 8006916:	b2da      	uxtb	r2, r3
 8006918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800691a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800691e:	e03c      	b.n	800699a <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006922:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006926:	f043 0301 	orr.w	r3, r3, #1
 800692a:	b2da      	uxtb	r2, r3
 800692c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006932:	68ba      	ldr	r2, [r7, #8]
 8006934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006936:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693a:	699b      	ldr	r3, [r3, #24]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d10c      	bne.n	800695a <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8006940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006944:	b672      	cpsid	i
 8006946:	f383 8811 	msr	BASEPRI, r3
 800694a:	f3bf 8f6f 	isb	sy
 800694e:	f3bf 8f4f 	dsb	sy
 8006952:	b662      	cpsie	i
 8006954:	617b      	str	r3, [r7, #20]
}
 8006956:	bf00      	nop
 8006958:	e7fe      	b.n	8006958 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800695a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695c:	699a      	ldr	r2, [r3, #24]
 800695e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006960:	18d1      	adds	r1, r2, r3
 8006962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006966:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006968:	f7ff ff00 	bl	800676c <prvInsertTimerInActiveList>
					break;
 800696c:	e015      	b.n	800699a <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800696e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006970:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006974:	f003 0302 	and.w	r3, r3, #2
 8006978:	2b00      	cmp	r3, #0
 800697a:	d103      	bne.n	8006984 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800697c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800697e:	f000 fbcb 	bl	8007118 <vPortFree>
 8006982:	e00a      	b.n	800699a <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006986:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800698a:	f023 0301 	bic.w	r3, r3, #1
 800698e:	b2da      	uxtb	r2, r3
 8006990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006992:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006996:	e000      	b.n	800699a <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 8006998:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800699a:	4b08      	ldr	r3, [pc, #32]	; (80069bc <prvProcessReceivedCommands+0x1cc>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	1d39      	adds	r1, r7, #4
 80069a0:	2200      	movs	r2, #0
 80069a2:	4618      	mov	r0, r3
 80069a4:	f7fe fb5c 	bl	8005060 <xQueueReceive>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	f47f af24 	bne.w	80067f8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80069b0:	bf00      	nop
 80069b2:	bf00      	nop
 80069b4:	3730      	adds	r7, #48	; 0x30
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	20001470 	.word	0x20001470

080069c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b088      	sub	sp, #32
 80069c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80069c6:	e04a      	b.n	8006a5e <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80069c8:	4b2e      	ldr	r3, [pc, #184]	; (8006a84 <prvSwitchTimerLists+0xc4>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069d2:	4b2c      	ldr	r3, [pc, #176]	; (8006a84 <prvSwitchTimerLists+0xc4>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	3304      	adds	r3, #4
 80069e0:	4618      	mov	r0, r3
 80069e2:	f7fe f85d 	bl	8004aa0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6a1b      	ldr	r3, [r3, #32]
 80069ea:	68f8      	ldr	r0, [r7, #12]
 80069ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069f4:	f003 0304 	and.w	r3, r3, #4
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d030      	beq.n	8006a5e <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	699b      	ldr	r3, [r3, #24]
 8006a00:	693a      	ldr	r2, [r7, #16]
 8006a02:	4413      	add	r3, r2
 8006a04:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006a06:	68ba      	ldr	r2, [r7, #8]
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d90e      	bls.n	8006a2c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	68ba      	ldr	r2, [r7, #8]
 8006a12:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a1a:	4b1a      	ldr	r3, [pc, #104]	; (8006a84 <prvSwitchTimerLists+0xc4>)
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	3304      	adds	r3, #4
 8006a22:	4619      	mov	r1, r3
 8006a24:	4610      	mov	r0, r2
 8006a26:	f7fe f802 	bl	8004a2e <vListInsert>
 8006a2a:	e018      	b.n	8006a5e <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	9300      	str	r3, [sp, #0]
 8006a30:	2300      	movs	r3, #0
 8006a32:	693a      	ldr	r2, [r7, #16]
 8006a34:	2100      	movs	r1, #0
 8006a36:	68f8      	ldr	r0, [r7, #12]
 8006a38:	f7ff fd56 	bl	80064e8 <xTimerGenericCommand>
 8006a3c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d10c      	bne.n	8006a5e <prvSwitchTimerLists+0x9e>
	__asm volatile
 8006a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a48:	b672      	cpsid	i
 8006a4a:	f383 8811 	msr	BASEPRI, r3
 8006a4e:	f3bf 8f6f 	isb	sy
 8006a52:	f3bf 8f4f 	dsb	sy
 8006a56:	b662      	cpsie	i
 8006a58:	603b      	str	r3, [r7, #0]
}
 8006a5a:	bf00      	nop
 8006a5c:	e7fe      	b.n	8006a5c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006a5e:	4b09      	ldr	r3, [pc, #36]	; (8006a84 <prvSwitchTimerLists+0xc4>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d1af      	bne.n	80069c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006a68:	4b06      	ldr	r3, [pc, #24]	; (8006a84 <prvSwitchTimerLists+0xc4>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006a6e:	4b06      	ldr	r3, [pc, #24]	; (8006a88 <prvSwitchTimerLists+0xc8>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a04      	ldr	r2, [pc, #16]	; (8006a84 <prvSwitchTimerLists+0xc4>)
 8006a74:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006a76:	4a04      	ldr	r2, [pc, #16]	; (8006a88 <prvSwitchTimerLists+0xc8>)
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	6013      	str	r3, [r2, #0]
}
 8006a7c:	bf00      	nop
 8006a7e:	3718      	adds	r7, #24
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	20001468 	.word	0x20001468
 8006a88:	2000146c 	.word	0x2000146c

08006a8c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006a92:	f000 f94b 	bl	8006d2c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006a96:	4b15      	ldr	r3, [pc, #84]	; (8006aec <prvCheckForValidListAndQueue+0x60>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d120      	bne.n	8006ae0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006a9e:	4814      	ldr	r0, [pc, #80]	; (8006af0 <prvCheckForValidListAndQueue+0x64>)
 8006aa0:	f7fd ff74 	bl	800498c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006aa4:	4813      	ldr	r0, [pc, #76]	; (8006af4 <prvCheckForValidListAndQueue+0x68>)
 8006aa6:	f7fd ff71 	bl	800498c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006aaa:	4b13      	ldr	r3, [pc, #76]	; (8006af8 <prvCheckForValidListAndQueue+0x6c>)
 8006aac:	4a10      	ldr	r2, [pc, #64]	; (8006af0 <prvCheckForValidListAndQueue+0x64>)
 8006aae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006ab0:	4b12      	ldr	r3, [pc, #72]	; (8006afc <prvCheckForValidListAndQueue+0x70>)
 8006ab2:	4a10      	ldr	r2, [pc, #64]	; (8006af4 <prvCheckForValidListAndQueue+0x68>)
 8006ab4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	9300      	str	r3, [sp, #0]
 8006aba:	4b11      	ldr	r3, [pc, #68]	; (8006b00 <prvCheckForValidListAndQueue+0x74>)
 8006abc:	4a11      	ldr	r2, [pc, #68]	; (8006b04 <prvCheckForValidListAndQueue+0x78>)
 8006abe:	2110      	movs	r1, #16
 8006ac0:	200a      	movs	r0, #10
 8006ac2:	f7fe f881 	bl	8004bc8 <xQueueGenericCreateStatic>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	4a08      	ldr	r2, [pc, #32]	; (8006aec <prvCheckForValidListAndQueue+0x60>)
 8006aca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006acc:	4b07      	ldr	r3, [pc, #28]	; (8006aec <prvCheckForValidListAndQueue+0x60>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d005      	beq.n	8006ae0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006ad4:	4b05      	ldr	r3, [pc, #20]	; (8006aec <prvCheckForValidListAndQueue+0x60>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	490b      	ldr	r1, [pc, #44]	; (8006b08 <prvCheckForValidListAndQueue+0x7c>)
 8006ada:	4618      	mov	r0, r3
 8006adc:	f7fe fcb6 	bl	800544c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ae0:	f000 f958 	bl	8006d94 <vPortExitCritical>
}
 8006ae4:	bf00      	nop
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	20001470 	.word	0x20001470
 8006af0:	20001440 	.word	0x20001440
 8006af4:	20001454 	.word	0x20001454
 8006af8:	20001468 	.word	0x20001468
 8006afc:	2000146c 	.word	0x2000146c
 8006b00:	2000151c 	.word	0x2000151c
 8006b04:	2000147c 	.word	0x2000147c
 8006b08:	08007424 	.word	0x08007424

08006b0c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b085      	sub	sp, #20
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	3b04      	subs	r3, #4
 8006b1c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006b24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	3b04      	subs	r3, #4
 8006b2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	f023 0201 	bic.w	r2, r3, #1
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	3b04      	subs	r3, #4
 8006b3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006b3c:	4a0c      	ldr	r2, [pc, #48]	; (8006b70 <pxPortInitialiseStack+0x64>)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	3b14      	subs	r3, #20
 8006b46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	3b04      	subs	r3, #4
 8006b52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f06f 0202 	mvn.w	r2, #2
 8006b5a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	3b20      	subs	r3, #32
 8006b60:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006b62:	68fb      	ldr	r3, [r7, #12]
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3714      	adds	r7, #20
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr
 8006b70:	08006b75 	.word	0x08006b75

08006b74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006b7e:	4b14      	ldr	r3, [pc, #80]	; (8006bd0 <prvTaskExitError+0x5c>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b86:	d00c      	beq.n	8006ba2 <prvTaskExitError+0x2e>
	__asm volatile
 8006b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8c:	b672      	cpsid	i
 8006b8e:	f383 8811 	msr	BASEPRI, r3
 8006b92:	f3bf 8f6f 	isb	sy
 8006b96:	f3bf 8f4f 	dsb	sy
 8006b9a:	b662      	cpsie	i
 8006b9c:	60fb      	str	r3, [r7, #12]
}
 8006b9e:	bf00      	nop
 8006ba0:	e7fe      	b.n	8006ba0 <prvTaskExitError+0x2c>
	__asm volatile
 8006ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba6:	b672      	cpsid	i
 8006ba8:	f383 8811 	msr	BASEPRI, r3
 8006bac:	f3bf 8f6f 	isb	sy
 8006bb0:	f3bf 8f4f 	dsb	sy
 8006bb4:	b662      	cpsie	i
 8006bb6:	60bb      	str	r3, [r7, #8]
}
 8006bb8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006bba:	bf00      	nop
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d0fc      	beq.n	8006bbc <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006bc2:	bf00      	nop
 8006bc4:	bf00      	nop
 8006bc6:	3714      	adds	r7, #20
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr
 8006bd0:	2000000c 	.word	0x2000000c
	...

08006be0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006be0:	4b07      	ldr	r3, [pc, #28]	; (8006c00 <pxCurrentTCBConst2>)
 8006be2:	6819      	ldr	r1, [r3, #0]
 8006be4:	6808      	ldr	r0, [r1, #0]
 8006be6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bea:	f380 8809 	msr	PSP, r0
 8006bee:	f3bf 8f6f 	isb	sy
 8006bf2:	f04f 0000 	mov.w	r0, #0
 8006bf6:	f380 8811 	msr	BASEPRI, r0
 8006bfa:	4770      	bx	lr
 8006bfc:	f3af 8000 	nop.w

08006c00 <pxCurrentTCBConst2>:
 8006c00:	20000f40 	.word	0x20000f40
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006c04:	bf00      	nop
 8006c06:	bf00      	nop

08006c08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006c08:	4808      	ldr	r0, [pc, #32]	; (8006c2c <prvPortStartFirstTask+0x24>)
 8006c0a:	6800      	ldr	r0, [r0, #0]
 8006c0c:	6800      	ldr	r0, [r0, #0]
 8006c0e:	f380 8808 	msr	MSP, r0
 8006c12:	f04f 0000 	mov.w	r0, #0
 8006c16:	f380 8814 	msr	CONTROL, r0
 8006c1a:	b662      	cpsie	i
 8006c1c:	b661      	cpsie	f
 8006c1e:	f3bf 8f4f 	dsb	sy
 8006c22:	f3bf 8f6f 	isb	sy
 8006c26:	df00      	svc	0
 8006c28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006c2a:	bf00      	nop
 8006c2c:	e000ed08 	.word	0xe000ed08

08006c30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006c36:	4b37      	ldr	r3, [pc, #220]	; (8006d14 <xPortStartScheduler+0xe4>)
 8006c38:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	22ff      	movs	r2, #255	; 0xff
 8006c46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006c50:	78fb      	ldrb	r3, [r7, #3]
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006c58:	b2da      	uxtb	r2, r3
 8006c5a:	4b2f      	ldr	r3, [pc, #188]	; (8006d18 <xPortStartScheduler+0xe8>)
 8006c5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006c5e:	4b2f      	ldr	r3, [pc, #188]	; (8006d1c <xPortStartScheduler+0xec>)
 8006c60:	2207      	movs	r2, #7
 8006c62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c64:	e009      	b.n	8006c7a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006c66:	4b2d      	ldr	r3, [pc, #180]	; (8006d1c <xPortStartScheduler+0xec>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	4a2b      	ldr	r2, [pc, #172]	; (8006d1c <xPortStartScheduler+0xec>)
 8006c6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006c70:	78fb      	ldrb	r3, [r7, #3]
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	005b      	lsls	r3, r3, #1
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c7a:	78fb      	ldrb	r3, [r7, #3]
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c82:	2b80      	cmp	r3, #128	; 0x80
 8006c84:	d0ef      	beq.n	8006c66 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006c86:	4b25      	ldr	r3, [pc, #148]	; (8006d1c <xPortStartScheduler+0xec>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f1c3 0307 	rsb	r3, r3, #7
 8006c8e:	2b04      	cmp	r3, #4
 8006c90:	d00c      	beq.n	8006cac <xPortStartScheduler+0x7c>
	__asm volatile
 8006c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c96:	b672      	cpsid	i
 8006c98:	f383 8811 	msr	BASEPRI, r3
 8006c9c:	f3bf 8f6f 	isb	sy
 8006ca0:	f3bf 8f4f 	dsb	sy
 8006ca4:	b662      	cpsie	i
 8006ca6:	60bb      	str	r3, [r7, #8]
}
 8006ca8:	bf00      	nop
 8006caa:	e7fe      	b.n	8006caa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006cac:	4b1b      	ldr	r3, [pc, #108]	; (8006d1c <xPortStartScheduler+0xec>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	021b      	lsls	r3, r3, #8
 8006cb2:	4a1a      	ldr	r2, [pc, #104]	; (8006d1c <xPortStartScheduler+0xec>)
 8006cb4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006cb6:	4b19      	ldr	r3, [pc, #100]	; (8006d1c <xPortStartScheduler+0xec>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006cbe:	4a17      	ldr	r2, [pc, #92]	; (8006d1c <xPortStartScheduler+0xec>)
 8006cc0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	b2da      	uxtb	r2, r3
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006cca:	4b15      	ldr	r3, [pc, #84]	; (8006d20 <xPortStartScheduler+0xf0>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a14      	ldr	r2, [pc, #80]	; (8006d20 <xPortStartScheduler+0xf0>)
 8006cd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006cd4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006cd6:	4b12      	ldr	r3, [pc, #72]	; (8006d20 <xPortStartScheduler+0xf0>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a11      	ldr	r2, [pc, #68]	; (8006d20 <xPortStartScheduler+0xf0>)
 8006cdc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006ce0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006ce2:	f000 f8dd 	bl	8006ea0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006ce6:	4b0f      	ldr	r3, [pc, #60]	; (8006d24 <xPortStartScheduler+0xf4>)
 8006ce8:	2200      	movs	r2, #0
 8006cea:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006cec:	f000 f8fc 	bl	8006ee8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006cf0:	4b0d      	ldr	r3, [pc, #52]	; (8006d28 <xPortStartScheduler+0xf8>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a0c      	ldr	r2, [pc, #48]	; (8006d28 <xPortStartScheduler+0xf8>)
 8006cf6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006cfa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006cfc:	f7ff ff84 	bl	8006c08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006d00:	f7ff f84a 	bl	8005d98 <vTaskSwitchContext>
	prvTaskExitError();
 8006d04:	f7ff ff36 	bl	8006b74 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3710      	adds	r7, #16
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	e000e400 	.word	0xe000e400
 8006d18:	2000156c 	.word	0x2000156c
 8006d1c:	20001570 	.word	0x20001570
 8006d20:	e000ed20 	.word	0xe000ed20
 8006d24:	2000000c 	.word	0x2000000c
 8006d28:	e000ef34 	.word	0xe000ef34

08006d2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
	__asm volatile
 8006d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d36:	b672      	cpsid	i
 8006d38:	f383 8811 	msr	BASEPRI, r3
 8006d3c:	f3bf 8f6f 	isb	sy
 8006d40:	f3bf 8f4f 	dsb	sy
 8006d44:	b662      	cpsie	i
 8006d46:	607b      	str	r3, [r7, #4]
}
 8006d48:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006d4a:	4b10      	ldr	r3, [pc, #64]	; (8006d8c <vPortEnterCritical+0x60>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	3301      	adds	r3, #1
 8006d50:	4a0e      	ldr	r2, [pc, #56]	; (8006d8c <vPortEnterCritical+0x60>)
 8006d52:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006d54:	4b0d      	ldr	r3, [pc, #52]	; (8006d8c <vPortEnterCritical+0x60>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d111      	bne.n	8006d80 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006d5c:	4b0c      	ldr	r3, [pc, #48]	; (8006d90 <vPortEnterCritical+0x64>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00c      	beq.n	8006d80 <vPortEnterCritical+0x54>
	__asm volatile
 8006d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6a:	b672      	cpsid	i
 8006d6c:	f383 8811 	msr	BASEPRI, r3
 8006d70:	f3bf 8f6f 	isb	sy
 8006d74:	f3bf 8f4f 	dsb	sy
 8006d78:	b662      	cpsie	i
 8006d7a:	603b      	str	r3, [r7, #0]
}
 8006d7c:	bf00      	nop
 8006d7e:	e7fe      	b.n	8006d7e <vPortEnterCritical+0x52>
	}
}
 8006d80:	bf00      	nop
 8006d82:	370c      	adds	r7, #12
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr
 8006d8c:	2000000c 	.word	0x2000000c
 8006d90:	e000ed04 	.word	0xe000ed04

08006d94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006d9a:	4b13      	ldr	r3, [pc, #76]	; (8006de8 <vPortExitCritical+0x54>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d10c      	bne.n	8006dbc <vPortExitCritical+0x28>
	__asm volatile
 8006da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da6:	b672      	cpsid	i
 8006da8:	f383 8811 	msr	BASEPRI, r3
 8006dac:	f3bf 8f6f 	isb	sy
 8006db0:	f3bf 8f4f 	dsb	sy
 8006db4:	b662      	cpsie	i
 8006db6:	607b      	str	r3, [r7, #4]
}
 8006db8:	bf00      	nop
 8006dba:	e7fe      	b.n	8006dba <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8006dbc:	4b0a      	ldr	r3, [pc, #40]	; (8006de8 <vPortExitCritical+0x54>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	3b01      	subs	r3, #1
 8006dc2:	4a09      	ldr	r2, [pc, #36]	; (8006de8 <vPortExitCritical+0x54>)
 8006dc4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006dc6:	4b08      	ldr	r3, [pc, #32]	; (8006de8 <vPortExitCritical+0x54>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d105      	bne.n	8006dda <vPortExitCritical+0x46>
 8006dce:	2300      	movs	r3, #0
 8006dd0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	f383 8811 	msr	BASEPRI, r3
}
 8006dd8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006dda:	bf00      	nop
 8006ddc:	370c      	adds	r7, #12
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop
 8006de8:	2000000c 	.word	0x2000000c
 8006dec:	00000000 	.word	0x00000000

08006df0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006df0:	f3ef 8009 	mrs	r0, PSP
 8006df4:	f3bf 8f6f 	isb	sy
 8006df8:	4b15      	ldr	r3, [pc, #84]	; (8006e50 <pxCurrentTCBConst>)
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	f01e 0f10 	tst.w	lr, #16
 8006e00:	bf08      	it	eq
 8006e02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006e06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e0a:	6010      	str	r0, [r2, #0]
 8006e0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006e10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006e14:	b672      	cpsid	i
 8006e16:	f380 8811 	msr	BASEPRI, r0
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	f3bf 8f6f 	isb	sy
 8006e22:	b662      	cpsie	i
 8006e24:	f7fe ffb8 	bl	8005d98 <vTaskSwitchContext>
 8006e28:	f04f 0000 	mov.w	r0, #0
 8006e2c:	f380 8811 	msr	BASEPRI, r0
 8006e30:	bc09      	pop	{r0, r3}
 8006e32:	6819      	ldr	r1, [r3, #0]
 8006e34:	6808      	ldr	r0, [r1, #0]
 8006e36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e3a:	f01e 0f10 	tst.w	lr, #16
 8006e3e:	bf08      	it	eq
 8006e40:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006e44:	f380 8809 	msr	PSP, r0
 8006e48:	f3bf 8f6f 	isb	sy
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop

08006e50 <pxCurrentTCBConst>:
 8006e50:	20000f40 	.word	0x20000f40
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006e54:	bf00      	nop
 8006e56:	bf00      	nop

08006e58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
	__asm volatile
 8006e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e62:	b672      	cpsid	i
 8006e64:	f383 8811 	msr	BASEPRI, r3
 8006e68:	f3bf 8f6f 	isb	sy
 8006e6c:	f3bf 8f4f 	dsb	sy
 8006e70:	b662      	cpsie	i
 8006e72:	607b      	str	r3, [r7, #4]
}
 8006e74:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006e76:	f7fe fed3 	bl	8005c20 <xTaskIncrementTick>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d003      	beq.n	8006e88 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006e80:	4b06      	ldr	r3, [pc, #24]	; (8006e9c <SysTick_Handler+0x44>)
 8006e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e86:	601a      	str	r2, [r3, #0]
 8006e88:	2300      	movs	r3, #0
 8006e8a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	f383 8811 	msr	BASEPRI, r3
}
 8006e92:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006e94:	bf00      	nop
 8006e96:	3708      	adds	r7, #8
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	e000ed04 	.word	0xe000ed04

08006ea0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ea4:	4b0b      	ldr	r3, [pc, #44]	; (8006ed4 <vPortSetupTimerInterrupt+0x34>)
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006eaa:	4b0b      	ldr	r3, [pc, #44]	; (8006ed8 <vPortSetupTimerInterrupt+0x38>)
 8006eac:	2200      	movs	r2, #0
 8006eae:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006eb0:	4b0a      	ldr	r3, [pc, #40]	; (8006edc <vPortSetupTimerInterrupt+0x3c>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a0a      	ldr	r2, [pc, #40]	; (8006ee0 <vPortSetupTimerInterrupt+0x40>)
 8006eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8006eba:	099b      	lsrs	r3, r3, #6
 8006ebc:	4a09      	ldr	r2, [pc, #36]	; (8006ee4 <vPortSetupTimerInterrupt+0x44>)
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006ec2:	4b04      	ldr	r3, [pc, #16]	; (8006ed4 <vPortSetupTimerInterrupt+0x34>)
 8006ec4:	2207      	movs	r2, #7
 8006ec6:	601a      	str	r2, [r3, #0]
}
 8006ec8:	bf00      	nop
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr
 8006ed2:	bf00      	nop
 8006ed4:	e000e010 	.word	0xe000e010
 8006ed8:	e000e018 	.word	0xe000e018
 8006edc:	20000000 	.word	0x20000000
 8006ee0:	10624dd3 	.word	0x10624dd3
 8006ee4:	e000e014 	.word	0xe000e014

08006ee8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006ee8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006ef8 <vPortEnableVFP+0x10>
 8006eec:	6801      	ldr	r1, [r0, #0]
 8006eee:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006ef2:	6001      	str	r1, [r0, #0]
 8006ef4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006ef6:	bf00      	nop
 8006ef8:	e000ed88 	.word	0xe000ed88

08006efc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006efc:	b480      	push	{r7}
 8006efe:	b085      	sub	sp, #20
 8006f00:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006f02:	f3ef 8305 	mrs	r3, IPSR
 8006f06:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2b0f      	cmp	r3, #15
 8006f0c:	d916      	bls.n	8006f3c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006f0e:	4a19      	ldr	r2, [pc, #100]	; (8006f74 <vPortValidateInterruptPriority+0x78>)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	4413      	add	r3, r2
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006f18:	4b17      	ldr	r3, [pc, #92]	; (8006f78 <vPortValidateInterruptPriority+0x7c>)
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	7afa      	ldrb	r2, [r7, #11]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d20c      	bcs.n	8006f3c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8006f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f26:	b672      	cpsid	i
 8006f28:	f383 8811 	msr	BASEPRI, r3
 8006f2c:	f3bf 8f6f 	isb	sy
 8006f30:	f3bf 8f4f 	dsb	sy
 8006f34:	b662      	cpsie	i
 8006f36:	607b      	str	r3, [r7, #4]
}
 8006f38:	bf00      	nop
 8006f3a:	e7fe      	b.n	8006f3a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006f3c:	4b0f      	ldr	r3, [pc, #60]	; (8006f7c <vPortValidateInterruptPriority+0x80>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006f44:	4b0e      	ldr	r3, [pc, #56]	; (8006f80 <vPortValidateInterruptPriority+0x84>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d90c      	bls.n	8006f66 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8006f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f50:	b672      	cpsid	i
 8006f52:	f383 8811 	msr	BASEPRI, r3
 8006f56:	f3bf 8f6f 	isb	sy
 8006f5a:	f3bf 8f4f 	dsb	sy
 8006f5e:	b662      	cpsie	i
 8006f60:	603b      	str	r3, [r7, #0]
}
 8006f62:	bf00      	nop
 8006f64:	e7fe      	b.n	8006f64 <vPortValidateInterruptPriority+0x68>
	}
 8006f66:	bf00      	nop
 8006f68:	3714      	adds	r7, #20
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr
 8006f72:	bf00      	nop
 8006f74:	e000e3f0 	.word	0xe000e3f0
 8006f78:	2000156c 	.word	0x2000156c
 8006f7c:	e000ed0c 	.word	0xe000ed0c
 8006f80:	20001570 	.word	0x20001570

08006f84 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b08a      	sub	sp, #40	; 0x28
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006f90:	f7fe fd88 	bl	8005aa4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006f94:	4b5b      	ldr	r3, [pc, #364]	; (8007104 <pvPortMalloc+0x180>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d101      	bne.n	8006fa0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006f9c:	f000 f91a 	bl	80071d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006fa0:	4b59      	ldr	r3, [pc, #356]	; (8007108 <pvPortMalloc+0x184>)
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4013      	ands	r3, r2
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f040 8092 	bne.w	80070d2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d01f      	beq.n	8006ff4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8006fb4:	2208      	movs	r2, #8
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4413      	add	r3, r2
 8006fba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f003 0307 	and.w	r3, r3, #7
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d016      	beq.n	8006ff4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f023 0307 	bic.w	r3, r3, #7
 8006fcc:	3308      	adds	r3, #8
 8006fce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f003 0307 	and.w	r3, r3, #7
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00c      	beq.n	8006ff4 <pvPortMalloc+0x70>
	__asm volatile
 8006fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fde:	b672      	cpsid	i
 8006fe0:	f383 8811 	msr	BASEPRI, r3
 8006fe4:	f3bf 8f6f 	isb	sy
 8006fe8:	f3bf 8f4f 	dsb	sy
 8006fec:	b662      	cpsie	i
 8006fee:	617b      	str	r3, [r7, #20]
}
 8006ff0:	bf00      	nop
 8006ff2:	e7fe      	b.n	8006ff2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d06b      	beq.n	80070d2 <pvPortMalloc+0x14e>
 8006ffa:	4b44      	ldr	r3, [pc, #272]	; (800710c <pvPortMalloc+0x188>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	429a      	cmp	r2, r3
 8007002:	d866      	bhi.n	80070d2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007004:	4b42      	ldr	r3, [pc, #264]	; (8007110 <pvPortMalloc+0x18c>)
 8007006:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007008:	4b41      	ldr	r3, [pc, #260]	; (8007110 <pvPortMalloc+0x18c>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800700e:	e004      	b.n	800701a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8007010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007012:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800701a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	429a      	cmp	r2, r3
 8007022:	d903      	bls.n	800702c <pvPortMalloc+0xa8>
 8007024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d1f1      	bne.n	8007010 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800702c:	4b35      	ldr	r3, [pc, #212]	; (8007104 <pvPortMalloc+0x180>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007032:	429a      	cmp	r2, r3
 8007034:	d04d      	beq.n	80070d2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007036:	6a3b      	ldr	r3, [r7, #32]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	2208      	movs	r2, #8
 800703c:	4413      	add	r3, r2
 800703e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	6a3b      	ldr	r3, [r7, #32]
 8007046:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704a:	685a      	ldr	r2, [r3, #4]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	1ad2      	subs	r2, r2, r3
 8007050:	2308      	movs	r3, #8
 8007052:	005b      	lsls	r3, r3, #1
 8007054:	429a      	cmp	r2, r3
 8007056:	d921      	bls.n	800709c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4413      	add	r3, r2
 800705e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	f003 0307 	and.w	r3, r3, #7
 8007066:	2b00      	cmp	r3, #0
 8007068:	d00c      	beq.n	8007084 <pvPortMalloc+0x100>
	__asm volatile
 800706a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800706e:	b672      	cpsid	i
 8007070:	f383 8811 	msr	BASEPRI, r3
 8007074:	f3bf 8f6f 	isb	sy
 8007078:	f3bf 8f4f 	dsb	sy
 800707c:	b662      	cpsie	i
 800707e:	613b      	str	r3, [r7, #16]
}
 8007080:	bf00      	nop
 8007082:	e7fe      	b.n	8007082 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007086:	685a      	ldr	r2, [r3, #4]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	1ad2      	subs	r2, r2, r3
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007096:	69b8      	ldr	r0, [r7, #24]
 8007098:	f000 f8fe 	bl	8007298 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800709c:	4b1b      	ldr	r3, [pc, #108]	; (800710c <pvPortMalloc+0x188>)
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	4a19      	ldr	r2, [pc, #100]	; (800710c <pvPortMalloc+0x188>)
 80070a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80070aa:	4b18      	ldr	r3, [pc, #96]	; (800710c <pvPortMalloc+0x188>)
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	4b19      	ldr	r3, [pc, #100]	; (8007114 <pvPortMalloc+0x190>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d203      	bcs.n	80070be <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80070b6:	4b15      	ldr	r3, [pc, #84]	; (800710c <pvPortMalloc+0x188>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a16      	ldr	r2, [pc, #88]	; (8007114 <pvPortMalloc+0x190>)
 80070bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80070be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c0:	685a      	ldr	r2, [r3, #4]
 80070c2:	4b11      	ldr	r3, [pc, #68]	; (8007108 <pvPortMalloc+0x184>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	431a      	orrs	r2, r3
 80070c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80070cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ce:	2200      	movs	r2, #0
 80070d0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80070d2:	f7fe fcf5 	bl	8005ac0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	f003 0307 	and.w	r3, r3, #7
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d00c      	beq.n	80070fa <pvPortMalloc+0x176>
	__asm volatile
 80070e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e4:	b672      	cpsid	i
 80070e6:	f383 8811 	msr	BASEPRI, r3
 80070ea:	f3bf 8f6f 	isb	sy
 80070ee:	f3bf 8f4f 	dsb	sy
 80070f2:	b662      	cpsie	i
 80070f4:	60fb      	str	r3, [r7, #12]
}
 80070f6:	bf00      	nop
 80070f8:	e7fe      	b.n	80070f8 <pvPortMalloc+0x174>
	return pvReturn;
 80070fa:	69fb      	ldr	r3, [r7, #28]
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3728      	adds	r7, #40	; 0x28
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	2000517c 	.word	0x2000517c
 8007108:	20005188 	.word	0x20005188
 800710c:	20005180 	.word	0x20005180
 8007110:	20005174 	.word	0x20005174
 8007114:	20005184 	.word	0x20005184

08007118 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b086      	sub	sp, #24
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d04c      	beq.n	80071c4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800712a:	2308      	movs	r3, #8
 800712c:	425b      	negs	r3, r3
 800712e:	697a      	ldr	r2, [r7, #20]
 8007130:	4413      	add	r3, r2
 8007132:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	685a      	ldr	r2, [r3, #4]
 800713c:	4b23      	ldr	r3, [pc, #140]	; (80071cc <vPortFree+0xb4>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4013      	ands	r3, r2
 8007142:	2b00      	cmp	r3, #0
 8007144:	d10c      	bne.n	8007160 <vPortFree+0x48>
	__asm volatile
 8007146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800714a:	b672      	cpsid	i
 800714c:	f383 8811 	msr	BASEPRI, r3
 8007150:	f3bf 8f6f 	isb	sy
 8007154:	f3bf 8f4f 	dsb	sy
 8007158:	b662      	cpsie	i
 800715a:	60fb      	str	r3, [r7, #12]
}
 800715c:	bf00      	nop
 800715e:	e7fe      	b.n	800715e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d00c      	beq.n	8007182 <vPortFree+0x6a>
	__asm volatile
 8007168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800716c:	b672      	cpsid	i
 800716e:	f383 8811 	msr	BASEPRI, r3
 8007172:	f3bf 8f6f 	isb	sy
 8007176:	f3bf 8f4f 	dsb	sy
 800717a:	b662      	cpsie	i
 800717c:	60bb      	str	r3, [r7, #8]
}
 800717e:	bf00      	nop
 8007180:	e7fe      	b.n	8007180 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	685a      	ldr	r2, [r3, #4]
 8007186:	4b11      	ldr	r3, [pc, #68]	; (80071cc <vPortFree+0xb4>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4013      	ands	r3, r2
 800718c:	2b00      	cmp	r3, #0
 800718e:	d019      	beq.n	80071c4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d115      	bne.n	80071c4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	685a      	ldr	r2, [r3, #4]
 800719c:	4b0b      	ldr	r3, [pc, #44]	; (80071cc <vPortFree+0xb4>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	43db      	mvns	r3, r3
 80071a2:	401a      	ands	r2, r3
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80071a8:	f7fe fc7c 	bl	8005aa4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	685a      	ldr	r2, [r3, #4]
 80071b0:	4b07      	ldr	r3, [pc, #28]	; (80071d0 <vPortFree+0xb8>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4413      	add	r3, r2
 80071b6:	4a06      	ldr	r2, [pc, #24]	; (80071d0 <vPortFree+0xb8>)
 80071b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80071ba:	6938      	ldr	r0, [r7, #16]
 80071bc:	f000 f86c 	bl	8007298 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80071c0:	f7fe fc7e 	bl	8005ac0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80071c4:	bf00      	nop
 80071c6:	3718      	adds	r7, #24
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}
 80071cc:	20005188 	.word	0x20005188
 80071d0:	20005180 	.word	0x20005180

080071d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80071d4:	b480      	push	{r7}
 80071d6:	b085      	sub	sp, #20
 80071d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80071da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80071de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80071e0:	4b27      	ldr	r3, [pc, #156]	; (8007280 <prvHeapInit+0xac>)
 80071e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f003 0307 	and.w	r3, r3, #7
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d00c      	beq.n	8007208 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	3307      	adds	r3, #7
 80071f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f023 0307 	bic.w	r3, r3, #7
 80071fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80071fc:	68ba      	ldr	r2, [r7, #8]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	1ad3      	subs	r3, r2, r3
 8007202:	4a1f      	ldr	r2, [pc, #124]	; (8007280 <prvHeapInit+0xac>)
 8007204:	4413      	add	r3, r2
 8007206:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800720c:	4a1d      	ldr	r2, [pc, #116]	; (8007284 <prvHeapInit+0xb0>)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007212:	4b1c      	ldr	r3, [pc, #112]	; (8007284 <prvHeapInit+0xb0>)
 8007214:	2200      	movs	r2, #0
 8007216:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	68ba      	ldr	r2, [r7, #8]
 800721c:	4413      	add	r3, r2
 800721e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007220:	2208      	movs	r2, #8
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	1a9b      	subs	r3, r3, r2
 8007226:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f023 0307 	bic.w	r3, r3, #7
 800722e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	4a15      	ldr	r2, [pc, #84]	; (8007288 <prvHeapInit+0xb4>)
 8007234:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007236:	4b14      	ldr	r3, [pc, #80]	; (8007288 <prvHeapInit+0xb4>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	2200      	movs	r2, #0
 800723c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800723e:	4b12      	ldr	r3, [pc, #72]	; (8007288 <prvHeapInit+0xb4>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	2200      	movs	r2, #0
 8007244:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	68fa      	ldr	r2, [r7, #12]
 800724e:	1ad2      	subs	r2, r2, r3
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007254:	4b0c      	ldr	r3, [pc, #48]	; (8007288 <prvHeapInit+0xb4>)
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	4a0a      	ldr	r2, [pc, #40]	; (800728c <prvHeapInit+0xb8>)
 8007262:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	4a09      	ldr	r2, [pc, #36]	; (8007290 <prvHeapInit+0xbc>)
 800726a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800726c:	4b09      	ldr	r3, [pc, #36]	; (8007294 <prvHeapInit+0xc0>)
 800726e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007272:	601a      	str	r2, [r3, #0]
}
 8007274:	bf00      	nop
 8007276:	3714      	adds	r7, #20
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr
 8007280:	20001574 	.word	0x20001574
 8007284:	20005174 	.word	0x20005174
 8007288:	2000517c 	.word	0x2000517c
 800728c:	20005184 	.word	0x20005184
 8007290:	20005180 	.word	0x20005180
 8007294:	20005188 	.word	0x20005188

08007298 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007298:	b480      	push	{r7}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80072a0:	4b28      	ldr	r3, [pc, #160]	; (8007344 <prvInsertBlockIntoFreeList+0xac>)
 80072a2:	60fb      	str	r3, [r7, #12]
 80072a4:	e002      	b.n	80072ac <prvInsertBlockIntoFreeList+0x14>
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	60fb      	str	r3, [r7, #12]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d8f7      	bhi.n	80072a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	68ba      	ldr	r2, [r7, #8]
 80072c0:	4413      	add	r3, r2
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d108      	bne.n	80072da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	685a      	ldr	r2, [r3, #4]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	441a      	add	r2, r3
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	68ba      	ldr	r2, [r7, #8]
 80072e4:	441a      	add	r2, r3
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d118      	bne.n	8007320 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	4b15      	ldr	r3, [pc, #84]	; (8007348 <prvInsertBlockIntoFreeList+0xb0>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d00d      	beq.n	8007316 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	685a      	ldr	r2, [r3, #4]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	441a      	add	r2, r3
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	601a      	str	r2, [r3, #0]
 8007314:	e008      	b.n	8007328 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007316:	4b0c      	ldr	r3, [pc, #48]	; (8007348 <prvInsertBlockIntoFreeList+0xb0>)
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	601a      	str	r2, [r3, #0]
 800731e:	e003      	b.n	8007328 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	429a      	cmp	r2, r3
 800732e:	d002      	beq.n	8007336 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007336:	bf00      	nop
 8007338:	3714      	adds	r7, #20
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr
 8007342:	bf00      	nop
 8007344:	20005174 	.word	0x20005174
 8007348:	2000517c 	.word	0x2000517c

0800734c <memset>:
 800734c:	4402      	add	r2, r0
 800734e:	4603      	mov	r3, r0
 8007350:	4293      	cmp	r3, r2
 8007352:	d100      	bne.n	8007356 <memset+0xa>
 8007354:	4770      	bx	lr
 8007356:	f803 1b01 	strb.w	r1, [r3], #1
 800735a:	e7f9      	b.n	8007350 <memset+0x4>

0800735c <__libc_init_array>:
 800735c:	b570      	push	{r4, r5, r6, lr}
 800735e:	4d0d      	ldr	r5, [pc, #52]	; (8007394 <__libc_init_array+0x38>)
 8007360:	4c0d      	ldr	r4, [pc, #52]	; (8007398 <__libc_init_array+0x3c>)
 8007362:	1b64      	subs	r4, r4, r5
 8007364:	10a4      	asrs	r4, r4, #2
 8007366:	2600      	movs	r6, #0
 8007368:	42a6      	cmp	r6, r4
 800736a:	d109      	bne.n	8007380 <__libc_init_array+0x24>
 800736c:	4d0b      	ldr	r5, [pc, #44]	; (800739c <__libc_init_array+0x40>)
 800736e:	4c0c      	ldr	r4, [pc, #48]	; (80073a0 <__libc_init_array+0x44>)
 8007370:	f000 f826 	bl	80073c0 <_init>
 8007374:	1b64      	subs	r4, r4, r5
 8007376:	10a4      	asrs	r4, r4, #2
 8007378:	2600      	movs	r6, #0
 800737a:	42a6      	cmp	r6, r4
 800737c:	d105      	bne.n	800738a <__libc_init_array+0x2e>
 800737e:	bd70      	pop	{r4, r5, r6, pc}
 8007380:	f855 3b04 	ldr.w	r3, [r5], #4
 8007384:	4798      	blx	r3
 8007386:	3601      	adds	r6, #1
 8007388:	e7ee      	b.n	8007368 <__libc_init_array+0xc>
 800738a:	f855 3b04 	ldr.w	r3, [r5], #4
 800738e:	4798      	blx	r3
 8007390:	3601      	adds	r6, #1
 8007392:	e7f2      	b.n	800737a <__libc_init_array+0x1e>
 8007394:	08007494 	.word	0x08007494
 8007398:	08007494 	.word	0x08007494
 800739c:	08007494 	.word	0x08007494
 80073a0:	08007498 	.word	0x08007498

080073a4 <memcpy>:
 80073a4:	440a      	add	r2, r1
 80073a6:	4291      	cmp	r1, r2
 80073a8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80073ac:	d100      	bne.n	80073b0 <memcpy+0xc>
 80073ae:	4770      	bx	lr
 80073b0:	b510      	push	{r4, lr}
 80073b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073ba:	4291      	cmp	r1, r2
 80073bc:	d1f9      	bne.n	80073b2 <memcpy+0xe>
 80073be:	bd10      	pop	{r4, pc}

080073c0 <_init>:
 80073c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073c2:	bf00      	nop
 80073c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073c6:	bc08      	pop	{r3}
 80073c8:	469e      	mov	lr, r3
 80073ca:	4770      	bx	lr

080073cc <_fini>:
 80073cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ce:	bf00      	nop
 80073d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073d2:	bc08      	pop	{r3}
 80073d4:	469e      	mov	lr, r3
 80073d6:	4770      	bx	lr
