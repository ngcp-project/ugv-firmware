
udp_client.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f5a4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bbc  0800f7a4  0800f7a4  0001f7a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012360  08012360  000301c8  2**0
                  CONTENTS
  4 .ARM          00000008  08012360  08012360  00022360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012368  08012368  000301c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012368  08012368  00022368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801236c  0801236c  0002236c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08012370  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000088  080123f8  00030088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000128  08012498  00030128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000a594  200001c8  08012538  000301c8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000a75c  08012538  0003a75c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000301c8  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000301f6  2**0
                  CONTENTS, READONLY
 15 .debug_info   0001ec36  00000000  00000000  00030239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00005352  00000000  00000000  0004ee6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000017c0  00000000  00000000  000541c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000012f5  00000000  00000000  00055988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00033e76  00000000  00000000  00056c7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00025459  00000000  00000000  0008aaf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0010ec15  00000000  00000000  000aff4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00006a68  00000000  00000000  001beb64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000062  00000000  00000000  001c55cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001c8 	.word	0x200001c8
 800021c:	00000000 	.word	0x00000000
 8000220:	0800f78c 	.word	0x0800f78c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001cc 	.word	0x200001cc
 800023c:	0800f78c 	.word	0x0800f78c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005e0:	f3bf 8f4f 	dsb	sy
}
 80005e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005e6:	f3bf 8f6f 	isb	sy
}
 80005ea:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005ec:	4b0d      	ldr	r3, [pc, #52]	; (8000624 <SCB_EnableICache+0x48>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005f4:	f3bf 8f4f 	dsb	sy
}
 80005f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005fa:	f3bf 8f6f 	isb	sy
}
 80005fe:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000600:	4b08      	ldr	r3, [pc, #32]	; (8000624 <SCB_EnableICache+0x48>)
 8000602:	695b      	ldr	r3, [r3, #20]
 8000604:	4a07      	ldr	r2, [pc, #28]	; (8000624 <SCB_EnableICache+0x48>)
 8000606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800060a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800060c:	f3bf 8f4f 	dsb	sy
}
 8000610:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000612:	f3bf 8f6f 	isb	sy
}
 8000616:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	e000ed00 	.word	0xe000ed00

08000628 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800062e:	4b1f      	ldr	r3, [pc, #124]	; (80006ac <SCB_EnableDCache+0x84>)
 8000630:	2200      	movs	r2, #0
 8000632:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000636:	f3bf 8f4f 	dsb	sy
}
 800063a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800063c:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <SCB_EnableDCache+0x84>)
 800063e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000642:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	0b5b      	lsrs	r3, r3, #13
 8000648:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800064c:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	08db      	lsrs	r3, r3, #3
 8000652:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000656:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	015a      	lsls	r2, r3, #5
 800065c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000660:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000662:	68ba      	ldr	r2, [r7, #8]
 8000664:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000666:	4911      	ldr	r1, [pc, #68]	; (80006ac <SCB_EnableDCache+0x84>)
 8000668:	4313      	orrs	r3, r2
 800066a:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	1e5a      	subs	r2, r3, #1
 8000672:	60ba      	str	r2, [r7, #8]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d1ef      	bne.n	8000658 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	1e5a      	subs	r2, r3, #1
 800067c:	60fa      	str	r2, [r7, #12]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d1e5      	bne.n	800064e <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000682:	f3bf 8f4f 	dsb	sy
}
 8000686:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000688:	4b08      	ldr	r3, [pc, #32]	; (80006ac <SCB_EnableDCache+0x84>)
 800068a:	695b      	ldr	r3, [r3, #20]
 800068c:	4a07      	ldr	r2, [pc, #28]	; (80006ac <SCB_EnableDCache+0x84>)
 800068e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000692:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000694:	f3bf 8f4f 	dsb	sy
}
 8000698:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800069a:	f3bf 8f6f 	isb	sy
}
 800069e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80006a0:	bf00      	nop
 80006a2:	3714      	adds	r7, #20
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	e000ed00 	.word	0xe000ed00

080006b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006b4:	f000 fa28 	bl	8000b08 <MPU_Config>
/* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80006b8:	f7ff ff90 	bl	80005dc <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80006bc:	f7ff ffb4 	bl	8000628 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c0:	f000 fcfc 	bl	80010bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c4:	f000 f818 	bl	80006f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c8:	f000 f8d8 	bl	800087c <MX_GPIO_Init>
  MX_LWIP_Init();
 80006cc:	f003 fcb6 	bl	800403c <MX_LWIP_Init>
  MX_TIM1_Init();
 80006d0:	f000 f880 	bl	80007d4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  //Start HAL timer interrupt

  udp_client_connect();
 80006d4:	f000 f9b6 	bl	8000a44 <udp_client_connect>

  // Interrupt occurs once every 250ms
  HAL_TIM_Base_Start_IT(&htim1);
 80006d8:	4805      	ldr	r0, [pc, #20]	; (80006f0 <main+0x40>)
 80006da:	f003 f84b 	bl	8003774 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  ethernetif_input(&gnetif);
 80006de:	4805      	ldr	r0, [pc, #20]	; (80006f4 <main+0x44>)
 80006e0:	f003 ff3c 	bl	800455c <ethernetif_input>
	  ethernet_link_check_state(&gnetif);
 80006e4:	4803      	ldr	r0, [pc, #12]	; (80006f4 <main+0x44>)
 80006e6:	f004 f8b7 	bl	8004858 <ethernet_link_check_state>
	  //udpClient
//	  gnetif.input()
	  //ethernet_input(p, netif)
	  sys_check_timeouts();
 80006ea:	f00b fa03 	bl	800baf4 <sys_check_timeouts>
	  ethernetif_input(&gnetif);
 80006ee:	e7f6      	b.n	80006de <main+0x2e>
 80006f0:	200001e4 	.word	0x200001e4
 80006f4:	200002a4 	.word	0x200002a4

080006f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b094      	sub	sp, #80	; 0x50
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	f107 031c 	add.w	r3, r7, #28
 8000702:	2234      	movs	r2, #52	; 0x34
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f00e f981 	bl	800ea0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070c:	f107 0308 	add.w	r3, r7, #8
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800071c:	4b2b      	ldr	r3, [pc, #172]	; (80007cc <SystemClock_Config+0xd4>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000720:	4a2a      	ldr	r2, [pc, #168]	; (80007cc <SystemClock_Config+0xd4>)
 8000722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000726:	6413      	str	r3, [r2, #64]	; 0x40
 8000728:	4b28      	ldr	r3, [pc, #160]	; (80007cc <SystemClock_Config+0xd4>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000734:	4b26      	ldr	r3, [pc, #152]	; (80007d0 <SystemClock_Config+0xd8>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a25      	ldr	r2, [pc, #148]	; (80007d0 <SystemClock_Config+0xd8>)
 800073a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800073e:	6013      	str	r3, [r2, #0]
 8000740:	4b23      	ldr	r3, [pc, #140]	; (80007d0 <SystemClock_Config+0xd8>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000748:	603b      	str	r3, [r7, #0]
 800074a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800074c:	2301      	movs	r3, #1
 800074e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000750:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000754:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000756:	2302      	movs	r3, #2
 8000758:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800075a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800075e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000760:	2308      	movs	r3, #8
 8000762:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000764:	23d8      	movs	r3, #216	; 0xd8
 8000766:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000768:	2302      	movs	r3, #2
 800076a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800076c:	2302      	movs	r3, #2
 800076e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000770:	2302      	movs	r3, #2
 8000772:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000774:	f107 031c 	add.w	r3, r7, #28
 8000778:	4618      	mov	r0, r3
 800077a:	f002 faf9 	bl	8002d70 <HAL_RCC_OscConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000784:	f000 f9ee 	bl	8000b64 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000788:	f002 faa2 	bl	8002cd0 <HAL_PWREx_EnableOverDrive>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000792:	f000 f9e7 	bl	8000b64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000796:	230f      	movs	r3, #15
 8000798:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079a:	2302      	movs	r3, #2
 800079c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007a2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ac:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007ae:	f107 0308 	add.w	r3, r7, #8
 80007b2:	2107      	movs	r1, #7
 80007b4:	4618      	mov	r0, r3
 80007b6:	f002 fd89 	bl	80032cc <HAL_RCC_ClockConfig>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80007c0:	f000 f9d0 	bl	8000b64 <Error_Handler>
  }
}
 80007c4:	bf00      	nop
 80007c6:	3750      	adds	r7, #80	; 0x50
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40007000 	.word	0x40007000

080007d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b088      	sub	sp, #32
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007da:	f107 0310 	add.w	r3, r7, #16
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e8:	1d3b      	adds	r3, r7, #4
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007f2:	4b20      	ldr	r3, [pc, #128]	; (8000874 <MX_TIM1_Init+0xa0>)
 80007f4:	4a20      	ldr	r2, [pc, #128]	; (8000878 <MX_TIM1_Init+0xa4>)
 80007f6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10800;
 80007f8:	4b1e      	ldr	r3, [pc, #120]	; (8000874 <MX_TIM1_Init+0xa0>)
 80007fa:	f642 2230 	movw	r2, #10800	; 0x2a30
 80007fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000800:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <MX_TIM1_Init+0xa0>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8000806:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <MX_TIM1_Init+0xa0>)
 8000808:	f242 7210 	movw	r2, #10000	; 0x2710
 800080c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800080e:	4b19      	ldr	r3, [pc, #100]	; (8000874 <MX_TIM1_Init+0xa0>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000814:	4b17      	ldr	r3, [pc, #92]	; (8000874 <MX_TIM1_Init+0xa0>)
 8000816:	2200      	movs	r2, #0
 8000818:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800081a:	4b16      	ldr	r3, [pc, #88]	; (8000874 <MX_TIM1_Init+0xa0>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000820:	4814      	ldr	r0, [pc, #80]	; (8000874 <MX_TIM1_Init+0xa0>)
 8000822:	f002 ff4f 	bl	80036c4 <HAL_TIM_Base_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 800082c:	f000 f99a 	bl	8000b64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000830:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000834:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000836:	f107 0310 	add.w	r3, r7, #16
 800083a:	4619      	mov	r1, r3
 800083c:	480d      	ldr	r0, [pc, #52]	; (8000874 <MX_TIM1_Init+0xa0>)
 800083e:	f003 f919 	bl	8003a74 <HAL_TIM_ConfigClockSource>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000848:	f000 f98c 	bl	8000b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800084c:	2300      	movs	r3, #0
 800084e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000850:	2300      	movs	r3, #0
 8000852:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000854:	2300      	movs	r3, #0
 8000856:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	4619      	mov	r1, r3
 800085c:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_TIM1_Init+0xa0>)
 800085e:	f003 fb41 	bl	8003ee4 <HAL_TIMEx_MasterConfigSynchronization>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000868:	f000 f97c 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800086c:	bf00      	nop
 800086e:	3720      	adds	r7, #32
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	200001e4 	.word	0x200001e4
 8000878:	40010000 	.word	0x40010000

0800087c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08c      	sub	sp, #48	; 0x30
 8000880:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000892:	4b5e      	ldr	r3, [pc, #376]	; (8000a0c <MX_GPIO_Init+0x190>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a5d      	ldr	r2, [pc, #372]	; (8000a0c <MX_GPIO_Init+0x190>)
 8000898:	f043 0304 	orr.w	r3, r3, #4
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b5b      	ldr	r3, [pc, #364]	; (8000a0c <MX_GPIO_Init+0x190>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0304 	and.w	r3, r3, #4
 80008a6:	61bb      	str	r3, [r7, #24]
 80008a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008aa:	4b58      	ldr	r3, [pc, #352]	; (8000a0c <MX_GPIO_Init+0x190>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a57      	ldr	r2, [pc, #348]	; (8000a0c <MX_GPIO_Init+0x190>)
 80008b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b55      	ldr	r3, [pc, #340]	; (8000a0c <MX_GPIO_Init+0x190>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008be:	617b      	str	r3, [r7, #20]
 80008c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c2:	4b52      	ldr	r3, [pc, #328]	; (8000a0c <MX_GPIO_Init+0x190>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a51      	ldr	r2, [pc, #324]	; (8000a0c <MX_GPIO_Init+0x190>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b4f      	ldr	r3, [pc, #316]	; (8000a0c <MX_GPIO_Init+0x190>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	613b      	str	r3, [r7, #16]
 80008d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008da:	4b4c      	ldr	r3, [pc, #304]	; (8000a0c <MX_GPIO_Init+0x190>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a4b      	ldr	r2, [pc, #300]	; (8000a0c <MX_GPIO_Init+0x190>)
 80008e0:	f043 0302 	orr.w	r3, r3, #2
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b49      	ldr	r3, [pc, #292]	; (8000a0c <MX_GPIO_Init+0x190>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0302 	and.w	r3, r3, #2
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008f2:	4b46      	ldr	r3, [pc, #280]	; (8000a0c <MX_GPIO_Init+0x190>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a45      	ldr	r2, [pc, #276]	; (8000a0c <MX_GPIO_Init+0x190>)
 80008f8:	f043 0308 	orr.w	r3, r3, #8
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b43      	ldr	r3, [pc, #268]	; (8000a0c <MX_GPIO_Init+0x190>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0308 	and.w	r3, r3, #8
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800090a:	4b40      	ldr	r3, [pc, #256]	; (8000a0c <MX_GPIO_Init+0x190>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a3f      	ldr	r2, [pc, #252]	; (8000a0c <MX_GPIO_Init+0x190>)
 8000910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b3d      	ldr	r3, [pc, #244]	; (8000a0c <MX_GPIO_Init+0x190>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	f244 0181 	movw	r1, #16513	; 0x4081
 8000928:	4839      	ldr	r0, [pc, #228]	; (8000a10 <MX_GPIO_Init+0x194>)
 800092a:	f002 f99d 	bl	8002c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	2140      	movs	r1, #64	; 0x40
 8000932:	4838      	ldr	r0, [pc, #224]	; (8000a14 <MX_GPIO_Init+0x198>)
 8000934:	f002 f998 	bl	8002c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000938:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800093e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	4832      	ldr	r0, [pc, #200]	; (8000a18 <MX_GPIO_Init+0x19c>)
 8000950:	f001 ffde 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000954:	f244 0381 	movw	r3, #16513	; 0x4081
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095a:	2301      	movs	r3, #1
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	4828      	ldr	r0, [pc, #160]	; (8000a10 <MX_GPIO_Init+0x194>)
 800096e:	f001 ffcf 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000972:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000978:	2302      	movs	r3, #2
 800097a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000980:	2303      	movs	r3, #3
 8000982:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000984:	2307      	movs	r3, #7
 8000986:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	4619      	mov	r1, r3
 800098e:	4823      	ldr	r0, [pc, #140]	; (8000a1c <MX_GPIO_Init+0x1a0>)
 8000990:	f001 ffbe 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000994:	2340      	movs	r3, #64	; 0x40
 8000996:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000998:	2301      	movs	r3, #1
 800099a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f107 031c 	add.w	r3, r7, #28
 80009a8:	4619      	mov	r1, r3
 80009aa:	481a      	ldr	r0, [pc, #104]	; (8000a14 <MX_GPIO_Init+0x198>)
 80009ac:	f001 ffb0 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009b0:	2380      	movs	r3, #128	; 0x80
 80009b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b4:	2300      	movs	r3, #0
 80009b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4619      	mov	r1, r3
 80009c2:	4814      	ldr	r0, [pc, #80]	; (8000a14 <MX_GPIO_Init+0x198>)
 80009c4:	f001 ffa4 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80009c8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80009cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ce:	2302      	movs	r3, #2
 80009d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d6:	2303      	movs	r3, #3
 80009d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009da:	230a      	movs	r3, #10
 80009dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4619      	mov	r1, r3
 80009e4:	480e      	ldr	r0, [pc, #56]	; (8000a20 <MX_GPIO_Init+0x1a4>)
 80009e6:	f001 ff93 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80009ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f0:	2300      	movs	r3, #0
 80009f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	4619      	mov	r1, r3
 80009fe:	4808      	ldr	r0, [pc, #32]	; (8000a20 <MX_GPIO_Init+0x1a4>)
 8000a00:	f001 ff86 	bl	8002910 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a04:	bf00      	nop
 8000a06:	3730      	adds	r7, #48	; 0x30
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40020400 	.word	0x40020400
 8000a14:	40021800 	.word	0x40021800
 8000a18:	40020800 	.word	0x40020800
 8000a1c:	40020c00 	.word	0x40020c00
 8000a20:	40020000 	.word	0x40020000

08000a24 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000a2c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a30:	4803      	ldr	r0, [pc, #12]	; (8000a40 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000a32:	f002 f932 	bl	8002c9a <HAL_GPIO_TogglePin>

	// Timer callback meant to send data from stm -> Rpi in a periodic manner

//	udp_client_send();
}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40020400 	.word	0x40020400

08000a44 <udp_client_connect>:

void udp_client_connect()
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
	err_t err;

	// Create a new UDP control block
	// Need to check for null return
	upcb = udp_new();
 8000a4a:	f00b fb6d 	bl	800c128 <udp_new>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	4a15      	ldr	r2, [pc, #84]	; (8000aa8 <udp_client_connect+0x64>)
 8000a52:	6013      	str	r3, [r2, #0]

	// Bind control block to module's IP address and port
	// Static IP address: 192.168.2.xxx
	ip_addr_t my_ip;
	IP_ADDR4(&my_ip, 192, 168, 5, 21); 	//STM ip when connected to RPI 5
 8000a54:	4b15      	ldr	r3, [pc, #84]	; (8000aac <udp_client_connect+0x68>)
 8000a56:	60bb      	str	r3, [r7, #8]
	//	IP_ADDR4(&my_ip, 192, 168, 2, 21); 	// STM ip when connected to linux desktop

	// Binds udp protocol control block to a local IP address
	// Arbitrary port # selection: 8
	udp_bind(upcb, &my_ip, 8);
 8000a58:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <udp_client_connect+0x64>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f107 0108 	add.w	r1, r7, #8
 8000a60:	2208      	movs	r2, #8
 8000a62:	4618      	mov	r0, r3
 8000a64:	f00b fa4a 	bl	800befc <udp_bind>

	// Configure destination IP address
	// Host ip address: 192.168.2.5
	// Arbitrary port # selection: 12345
	ip_addr_t DestIPaddr;
	IP_ADDR4(&DestIPaddr, 192, 168, 5, 5);  //RPI 5 host ip address
 8000a68:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <udp_client_connect+0x6c>)
 8000a6a:	607b      	str	r3, [r7, #4]

//	IP_ADDR4(&DestIPaddr, 192, 168, 2, 5);  //Desktop Host ip address
	err = udp_connect(upcb, &DestIPaddr, 12345);
 8000a6c:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <udp_client_connect+0x64>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	1d39      	adds	r1, r7, #4
 8000a72:	f243 0239 	movw	r2, #12345	; 0x3039
 8000a76:	4618      	mov	r0, r3
 8000a78:	f00b fac8 	bl	800c00c <udp_connect>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	73fb      	strb	r3, [r7, #15]

	if (err == HAL_OK)
 8000a80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d10a      	bne.n	8000a9e <udp_client_connect+0x5a>
	{
		// Blue LED
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000a88:	2180      	movs	r1, #128	; 0x80
 8000a8a:	480a      	ldr	r0, [pc, #40]	; (8000ab4 <udp_client_connect+0x70>)
 8000a8c:	f002 f905 	bl	8002c9a <HAL_GPIO_TogglePin>
		// Send message to server
		// Add function here
//		udp_client_send();
		// Set a receive callback for the upcb when server sends data to client
		udp_recv(upcb, udp_receive_callback, NULL);
 8000a90:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <udp_client_connect+0x64>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2200      	movs	r2, #0
 8000a96:	4908      	ldr	r1, [pc, #32]	; (8000ab8 <udp_client_connect+0x74>)
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f00b fb25 	bl	800c0e8 <udp_recv>

	}
}
 8000a9e:	bf00      	nop
 8000aa0:	3710      	adds	r7, #16
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000230 	.word	0x20000230
 8000aac:	1505a8c0 	.word	0x1505a8c0
 8000ab0:	0505a8c0 	.word	0x0505a8c0
 8000ab4:	40020400 	.word	0x40020400
 8000ab8:	08000abd 	.word	0x08000abd

08000abc <udp_receive_callback>:
	}
}

void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p,
		const ip_addr_t *addr, u16_t port)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
 8000ac8:	603b      	str	r3, [r7, #0]
	// Copy data from the pbuf
	strncpy(buffer, (char *)p->payload, p->len);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6859      	ldr	r1, [r3, #4]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	895b      	ldrh	r3, [r3, #10]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	4809      	ldr	r0, [pc, #36]	; (8000afc <udp_receive_callback+0x40>)
 8000ad6:	f00d ffa2 	bl	800ea1e <strncpy>


	// Increment message count
	++counter;
 8000ada:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <udp_receive_callback+0x44>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	4a07      	ldr	r2, [pc, #28]	; (8000b00 <udp_receive_callback+0x44>)
 8000ae2:	6013      	str	r3, [r2, #0]

	// Free recieve pbuf;
	pbuf_free(p);
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f005 fb13 	bl	8006110 <pbuf_free>

	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000aea:	2101      	movs	r1, #1
 8000aec:	4805      	ldr	r0, [pc, #20]	; (8000b04 <udp_receive_callback+0x48>)
 8000aee:	f002 f8d4 	bl	8002c9a <HAL_GPIO_TogglePin>
}
 8000af2:	bf00      	nop
 8000af4:	3710      	adds	r7, #16
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000234 	.word	0x20000234
 8000b00:	20000298 	.word	0x20000298
 8000b04:	40020400 	.word	0x40020400

08000b08 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b0e:	463b      	mov	r3, r7
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000b1a:	f000 fc6b 	bl	80013f4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x2007c000;
 8000b26:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <MPU_Config+0x58>)
 8000b28:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000b2a:	230d      	movs	r3, #13
 8000b2c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000b32:	2301      	movs	r3, #1
 8000b34:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000b36:	2303      	movs	r3, #3
 8000b38:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000b42:	2300      	movs	r3, #0
 8000b44:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000b46:	2300      	movs	r3, #0
 8000b48:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b4a:	463b      	mov	r3, r7
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f000 fc89 	bl	8001464 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000b52:	2004      	movs	r0, #4
 8000b54:	f000 fc66 	bl	8001424 <HAL_MPU_Enable>

}
 8000b58:	bf00      	nop
 8000b5a:	3710      	adds	r7, #16
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	2007c000 	.word	0x2007c000

08000b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b68:	b672      	cpsid	i
}
 8000b6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <Error_Handler+0x8>
	...

08000b70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b76:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	4a0e      	ldr	r2, [pc, #56]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b80:	6413      	str	r3, [r2, #64]	; 0x40
 8000b82:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8e:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b92:	4a08      	ldr	r2, [pc, #32]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b98:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ba2:	603b      	str	r3, [r7, #0]
 8000ba4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	40023800 	.word	0x40023800

08000bb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a11      	ldr	r2, [pc, #68]	; (8000c0c <HAL_TIM_Base_MspInit+0x54>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d11b      	bne.n	8000c02 <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <HAL_TIM_Base_MspInit+0x58>)
 8000bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bce:	4a10      	ldr	r2, [pc, #64]	; (8000c10 <HAL_TIM_Base_MspInit+0x58>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <HAL_TIM_Base_MspInit+0x58>)
 8000bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2100      	movs	r1, #0
 8000be6:	2018      	movs	r0, #24
 8000be8:	f000 fbcd 	bl	8001386 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000bec:	2018      	movs	r0, #24
 8000bee:	f000 fbe6 	bl	80013be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	2019      	movs	r0, #25
 8000bf8:	f000 fbc5 	bl	8001386 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000bfc:	2019      	movs	r0, #25
 8000bfe:	f000 fbde 	bl	80013be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000c02:	bf00      	nop
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40010000 	.word	0x40010000
 8000c10:	40023800 	.word	0x40023800

08000c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c18:	e7fe      	b.n	8000c18 <NMI_Handler+0x4>

08000c1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1e:	e7fe      	b.n	8000c1e <HardFault_Handler+0x4>

08000c20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <MemManage_Handler+0x4>

08000c26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <BusFault_Handler+0x4>

08000c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <UsageFault_Handler+0x4>

08000c32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr

08000c4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c60:	f000 fa72 	bl	8001148 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c6c:	4802      	ldr	r0, [pc, #8]	; (8000c78 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000c6e:	f002 fdf9 	bl	8003864 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	200001e4 	.word	0x200001e4

08000c7c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c80:	4802      	ldr	r0, [pc, #8]	; (8000c8c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c82:	f002 fdef 	bl	8003864 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	200001e4 	.word	0x200001e4

08000c90 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000c94:	4802      	ldr	r0, [pc, #8]	; (8000ca0 <ETH_IRQHandler+0x10>)
 8000c96:	f000 ff4f 	bl	8001b38 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20004c7c 	.word	0x20004c7c

08000ca4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  return 1;
 8000ca8:	2301      	movs	r3, #1
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <_kill>:

int _kill(int pid, int sig)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000cbe:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <_kill+0x20>)
 8000cc0:	2216      	movs	r2, #22
 8000cc2:	601a      	str	r2, [r3, #0]
  return -1;
 8000cc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	2000a74c 	.word	0x2000a74c

08000cd8 <_exit>:

void _exit (int status)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ce0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f7ff ffe5 	bl	8000cb4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000cea:	e7fe      	b.n	8000cea <_exit+0x12>

08000cec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]
 8000cfc:	e00a      	b.n	8000d14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cfe:	f3af 8000 	nop.w
 8000d02:	4601      	mov	r1, r0
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	1c5a      	adds	r2, r3, #1
 8000d08:	60ba      	str	r2, [r7, #8]
 8000d0a:	b2ca      	uxtb	r2, r1
 8000d0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	3301      	adds	r3, #1
 8000d12:	617b      	str	r3, [r7, #20]
 8000d14:	697a      	ldr	r2, [r7, #20]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	dbf0      	blt.n	8000cfe <_read+0x12>
  }

  return len;
 8000d1c:	687b      	ldr	r3, [r7, #4]
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3718      	adds	r7, #24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b086      	sub	sp, #24
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	60f8      	str	r0, [r7, #12]
 8000d2e:	60b9      	str	r1, [r7, #8]
 8000d30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
 8000d36:	e009      	b.n	8000d4c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	1c5a      	adds	r2, r3, #1
 8000d3c:	60ba      	str	r2, [r7, #8]
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	617b      	str	r3, [r7, #20]
 8000d4c:	697a      	ldr	r2, [r7, #20]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	dbf1      	blt.n	8000d38 <_write+0x12>
  }
  return len;
 8000d54:	687b      	ldr	r3, [r7, #4]
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3718      	adds	r7, #24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <_close>:

int _close(int file)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	b083      	sub	sp, #12
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d76:	b480      	push	{r7}
 8000d78:	b083      	sub	sp, #12
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
 8000d7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d86:	605a      	str	r2, [r3, #4]
  return 0;
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <_isatty>:

int _isatty(int file)
{
 8000d96:	b480      	push	{r7}
 8000d98:	b083      	sub	sp, #12
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d9e:	2301      	movs	r3, #1
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3714      	adds	r7, #20
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
	...

08000dc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b087      	sub	sp, #28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd0:	4a14      	ldr	r2, [pc, #80]	; (8000e24 <_sbrk+0x5c>)
 8000dd2:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <_sbrk+0x60>)
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ddc:	4b13      	ldr	r3, [pc, #76]	; (8000e2c <_sbrk+0x64>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d102      	bne.n	8000dea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de4:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <_sbrk+0x64>)
 8000de6:	4a12      	ldr	r2, [pc, #72]	; (8000e30 <_sbrk+0x68>)
 8000de8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dea:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <_sbrk+0x64>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4413      	add	r3, r2
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d205      	bcs.n	8000e04 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000df8:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <_sbrk+0x6c>)
 8000dfa:	220c      	movs	r2, #12
 8000dfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e02:	e009      	b.n	8000e18 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e04:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <_sbrk+0x64>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e0a:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <_sbrk+0x64>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4413      	add	r3, r2
 8000e12:	4a06      	ldr	r2, [pc, #24]	; (8000e2c <_sbrk+0x64>)
 8000e14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e16:	68fb      	ldr	r3, [r7, #12]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	371c      	adds	r7, #28
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	20080000 	.word	0x20080000
 8000e28:	00000400 	.word	0x00000400
 8000e2c:	2000029c 	.word	0x2000029c
 8000e30:	2000a760 	.word	0x2000a760
 8000e34:	2000a74c 	.word	0x2000a74c

08000e38 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <SystemInit+0x20>)
 8000e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e42:	4a05      	ldr	r2, [pc, #20]	; (8000e58 <SystemInit+0x20>)
 8000e44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e94 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e60:	f7ff ffea 	bl	8000e38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e64:	480c      	ldr	r0, [pc, #48]	; (8000e98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e66:	490d      	ldr	r1, [pc, #52]	; (8000e9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e68:	4a0d      	ldr	r2, [pc, #52]	; (8000ea0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e6c:	e002      	b.n	8000e74 <LoopCopyDataInit>

08000e6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e72:	3304      	adds	r3, #4

08000e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e78:	d3f9      	bcc.n	8000e6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ea4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e7c:	4c0a      	ldr	r4, [pc, #40]	; (8000ea8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e80:	e001      	b.n	8000e86 <LoopFillZerobss>

08000e82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e84:	3204      	adds	r2, #4

08000e86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e88:	d3fb      	bcc.n	8000e82 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e8a:	f00d fe21 	bl	800ead0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e8e:	f7ff fc0f 	bl	80006b0 <main>
  bx  lr    
 8000e92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e94:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000e98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e9c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000ea0:	08012370 	.word	0x08012370
  ldr r2, =_sbss
 8000ea4:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8000ea8:	2000a75c 	.word	0x2000a75c

08000eac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eac:	e7fe      	b.n	8000eac <ADC_IRQHandler>

08000eae <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b083      	sub	sp, #12
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
 8000eb6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d00b      	beq.n	8000ed6 <LAN8742_RegisterBusIO+0x28>
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	68db      	ldr	r3, [r3, #12]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d007      	beq.n	8000ed6 <LAN8742_RegisterBusIO+0x28>
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d003      	beq.n	8000ed6 <LAN8742_RegisterBusIO+0x28>
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	691b      	ldr	r3, [r3, #16]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d102      	bne.n	8000edc <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000ed6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000eda:	e014      	b.n	8000f06 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685a      	ldr	r2, [r3, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	68da      	ldr	r2, [r3, #12]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	689a      	ldr	r2, [r3, #8]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	691a      	ldr	r2, [r3, #16]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr

08000f12 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b086      	sub	sp, #24
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d139      	bne.n	8000fa2 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d002      	beq.n	8000f3c <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2220      	movs	r2, #32
 8000f40:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
 8000f46:	e01c      	b.n	8000f82 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	695b      	ldr	r3, [r3, #20]
 8000f4c:	f107 020c 	add.w	r2, r7, #12
 8000f50:	2112      	movs	r1, #18
 8000f52:	6978      	ldr	r0, [r7, #20]
 8000f54:	4798      	blx	r3
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	da03      	bge.n	8000f64 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000f5c:	f06f 0304 	mvn.w	r3, #4
 8000f60:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000f62:	e00b      	b.n	8000f7c <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f003 031f 	and.w	r3, r3, #31
 8000f6a:	697a      	ldr	r2, [r7, #20]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d105      	bne.n	8000f7c <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	697a      	ldr	r2, [r7, #20]
 8000f74:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000f76:	2300      	movs	r3, #0
 8000f78:	613b      	str	r3, [r7, #16]
         break;
 8000f7a:	e005      	b.n	8000f88 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	617b      	str	r3, [r7, #20]
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	2b1f      	cmp	r3, #31
 8000f86:	d9df      	bls.n	8000f48 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b1f      	cmp	r3, #31
 8000f8e:	d902      	bls.n	8000f96 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000f90:	f06f 0302 	mvn.w	r3, #2
 8000f94:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d102      	bne.n	8000fa2 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8000fa2:	693b      	ldr	r3, [r7, #16]
 }
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3718      	adds	r7, #24
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	695b      	ldr	r3, [r3, #20]
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	6810      	ldr	r0, [r2, #0]
 8000fc0:	f107 020c 	add.w	r2, r7, #12
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	4798      	blx	r3
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	da02      	bge.n	8000fd4 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000fce:	f06f 0304 	mvn.w	r3, #4
 8000fd2:	e06e      	b.n	80010b2 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	695b      	ldr	r3, [r3, #20]
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	6810      	ldr	r0, [r2, #0]
 8000fdc:	f107 020c 	add.w	r2, r7, #12
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	4798      	blx	r3
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	da02      	bge.n	8000ff0 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000fea:	f06f 0304 	mvn.w	r3, #4
 8000fee:	e060      	b.n	80010b2 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	f003 0304 	and.w	r3, r3, #4
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d101      	bne.n	8000ffe <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e059      	b.n	80010b2 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	6810      	ldr	r0, [r2, #0]
 8001006:	f107 020c 	add.w	r2, r7, #12
 800100a:	2100      	movs	r1, #0
 800100c:	4798      	blx	r3
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	da02      	bge.n	800101a <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001014:	f06f 0304 	mvn.w	r3, #4
 8001018:	e04b      	b.n	80010b2 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d11b      	bne.n	800105c <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d006      	beq.n	800103c <LAN8742_GetLinkState+0x90>
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001038:	2302      	movs	r3, #2
 800103a:	e03a      	b.n	80010b2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001046:	2303      	movs	r3, #3
 8001048:	e033      	b.n	80010b2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001054:	2304      	movs	r3, #4
 8001056:	e02c      	b.n	80010b2 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001058:	2305      	movs	r3, #5
 800105a:	e02a      	b.n	80010b2 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	695b      	ldr	r3, [r3, #20]
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	6810      	ldr	r0, [r2, #0]
 8001064:	f107 020c 	add.w	r2, r7, #12
 8001068:	211f      	movs	r1, #31
 800106a:	4798      	blx	r3
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	da02      	bge.n	8001078 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001072:	f06f 0304 	mvn.w	r3, #4
 8001076:	e01c      	b.n	80010b2 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d101      	bne.n	8001086 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001082:	2306      	movs	r3, #6
 8001084:	e015      	b.n	80010b2 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f003 031c 	and.w	r3, r3, #28
 800108c:	2b18      	cmp	r3, #24
 800108e:	d101      	bne.n	8001094 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001090:	2302      	movs	r3, #2
 8001092:	e00e      	b.n	80010b2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f003 031c 	and.w	r3, r3, #28
 800109a:	2b08      	cmp	r3, #8
 800109c:	d101      	bne.n	80010a2 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800109e:	2303      	movs	r3, #3
 80010a0:	e007      	b.n	80010b2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f003 031c 	and.w	r3, r3, #28
 80010a8:	2b14      	cmp	r3, #20
 80010aa:	d101      	bne.n	80010b0 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80010ac:	2304      	movs	r3, #4
 80010ae:	e000      	b.n	80010b2 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80010b0:	2305      	movs	r3, #5
    }
  }
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c0:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <HAL_Init+0x28>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a07      	ldr	r2, [pc, #28]	; (80010e4 <HAL_Init+0x28>)
 80010c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010cc:	2003      	movs	r0, #3
 80010ce:	f000 f94f 	bl	8001370 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010d2:	2000      	movs	r0, #0
 80010d4:	f000 f808 	bl	80010e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010d8:	f7ff fd4a 	bl	8000b70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40023c00 	.word	0x40023c00

080010e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010f0:	4b12      	ldr	r3, [pc, #72]	; (800113c <HAL_InitTick+0x54>)
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	4b12      	ldr	r3, [pc, #72]	; (8001140 <HAL_InitTick+0x58>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4619      	mov	r1, r3
 80010fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001102:	fbb2 f3f3 	udiv	r3, r2, r3
 8001106:	4618      	mov	r0, r3
 8001108:	f000 f967 	bl	80013da <HAL_SYSTICK_Config>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e00e      	b.n	8001134 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2b0f      	cmp	r3, #15
 800111a:	d80a      	bhi.n	8001132 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800111c:	2200      	movs	r2, #0
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001124:	f000 f92f 	bl	8001386 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001128:	4a06      	ldr	r2, [pc, #24]	; (8001144 <HAL_InitTick+0x5c>)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800112e:	2300      	movs	r3, #0
 8001130:	e000      	b.n	8001134 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
}
 8001134:	4618      	mov	r0, r3
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20000000 	.word	0x20000000
 8001140:	20000008 	.word	0x20000008
 8001144:	20000004 	.word	0x20000004

08001148 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <HAL_IncTick+0x20>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	461a      	mov	r2, r3
 8001152:	4b06      	ldr	r3, [pc, #24]	; (800116c <HAL_IncTick+0x24>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4413      	add	r3, r2
 8001158:	4a04      	ldr	r2, [pc, #16]	; (800116c <HAL_IncTick+0x24>)
 800115a:	6013      	str	r3, [r2, #0]
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	20000008 	.word	0x20000008
 800116c:	200002a0 	.word	0x200002a0

08001170 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  return uwTick;
 8001174:	4b03      	ldr	r3, [pc, #12]	; (8001184 <HAL_GetTick+0x14>)
 8001176:	681b      	ldr	r3, [r3, #0]
}
 8001178:	4618      	mov	r0, r3
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	200002a0 	.word	0x200002a0

08001188 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001190:	f7ff ffee 	bl	8001170 <HAL_GetTick>
 8001194:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011a0:	d005      	beq.n	80011ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011a2:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <HAL_Delay+0x44>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	461a      	mov	r2, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4413      	add	r3, r2
 80011ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011ae:	bf00      	nop
 80011b0:	f7ff ffde 	bl	8001170 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d8f7      	bhi.n	80011b0 <HAL_Delay+0x28>
  {
  }
}
 80011c0:	bf00      	nop
 80011c2:	bf00      	nop
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000008 	.word	0x20000008

080011d0 <__NVIC_SetPriorityGrouping>:
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e0:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <__NVIC_SetPriorityGrouping+0x40>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011ec:	4013      	ands	r3, r2
 80011ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <__NVIC_SetPriorityGrouping+0x44>)
 80011fa:	4313      	orrs	r3, r2
 80011fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011fe:	4a04      	ldr	r2, [pc, #16]	; (8001210 <__NVIC_SetPriorityGrouping+0x40>)
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	60d3      	str	r3, [r2, #12]
}
 8001204:	bf00      	nop
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000ed00 	.word	0xe000ed00
 8001214:	05fa0000 	.word	0x05fa0000

08001218 <__NVIC_GetPriorityGrouping>:
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800121c:	4b04      	ldr	r3, [pc, #16]	; (8001230 <__NVIC_GetPriorityGrouping+0x18>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	0a1b      	lsrs	r3, r3, #8
 8001222:	f003 0307 	and.w	r3, r3, #7
}
 8001226:	4618      	mov	r0, r3
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <__NVIC_EnableIRQ>:
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	2b00      	cmp	r3, #0
 8001244:	db0b      	blt.n	800125e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	f003 021f 	and.w	r2, r3, #31
 800124c:	4907      	ldr	r1, [pc, #28]	; (800126c <__NVIC_EnableIRQ+0x38>)
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	095b      	lsrs	r3, r3, #5
 8001254:	2001      	movs	r0, #1
 8001256:	fa00 f202 	lsl.w	r2, r0, r2
 800125a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	e000e100 	.word	0xe000e100

08001270 <__NVIC_SetPriority>:
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	6039      	str	r1, [r7, #0]
 800127a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800127c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001280:	2b00      	cmp	r3, #0
 8001282:	db0a      	blt.n	800129a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	b2da      	uxtb	r2, r3
 8001288:	490c      	ldr	r1, [pc, #48]	; (80012bc <__NVIC_SetPriority+0x4c>)
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	0112      	lsls	r2, r2, #4
 8001290:	b2d2      	uxtb	r2, r2
 8001292:	440b      	add	r3, r1
 8001294:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001298:	e00a      	b.n	80012b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	b2da      	uxtb	r2, r3
 800129e:	4908      	ldr	r1, [pc, #32]	; (80012c0 <__NVIC_SetPriority+0x50>)
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	f003 030f 	and.w	r3, r3, #15
 80012a6:	3b04      	subs	r3, #4
 80012a8:	0112      	lsls	r2, r2, #4
 80012aa:	b2d2      	uxtb	r2, r2
 80012ac:	440b      	add	r3, r1
 80012ae:	761a      	strb	r2, [r3, #24]
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	e000e100 	.word	0xe000e100
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <NVIC_EncodePriority>:
{
 80012c4:	b480      	push	{r7}
 80012c6:	b089      	sub	sp, #36	; 0x24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f003 0307 	and.w	r3, r3, #7
 80012d6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	f1c3 0307 	rsb	r3, r3, #7
 80012de:	2b04      	cmp	r3, #4
 80012e0:	bf28      	it	cs
 80012e2:	2304      	movcs	r3, #4
 80012e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	3304      	adds	r3, #4
 80012ea:	2b06      	cmp	r3, #6
 80012ec:	d902      	bls.n	80012f4 <NVIC_EncodePriority+0x30>
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	3b03      	subs	r3, #3
 80012f2:	e000      	b.n	80012f6 <NVIC_EncodePriority+0x32>
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	43da      	mvns	r2, r3
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	401a      	ands	r2, r3
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800130c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	fa01 f303 	lsl.w	r3, r1, r3
 8001316:	43d9      	mvns	r1, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800131c:	4313      	orrs	r3, r2
}
 800131e:	4618      	mov	r0, r3
 8001320:	3724      	adds	r7, #36	; 0x24
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
	...

0800132c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3b01      	subs	r3, #1
 8001338:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800133c:	d301      	bcc.n	8001342 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800133e:	2301      	movs	r3, #1
 8001340:	e00f      	b.n	8001362 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001342:	4a0a      	ldr	r2, [pc, #40]	; (800136c <SysTick_Config+0x40>)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3b01      	subs	r3, #1
 8001348:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800134a:	210f      	movs	r1, #15
 800134c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001350:	f7ff ff8e 	bl	8001270 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001354:	4b05      	ldr	r3, [pc, #20]	; (800136c <SysTick_Config+0x40>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800135a:	4b04      	ldr	r3, [pc, #16]	; (800136c <SysTick_Config+0x40>)
 800135c:	2207      	movs	r2, #7
 800135e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	e000e010 	.word	0xe000e010

08001370 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff ff29 	bl	80011d0 <__NVIC_SetPriorityGrouping>
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001386:	b580      	push	{r7, lr}
 8001388:	b086      	sub	sp, #24
 800138a:	af00      	add	r7, sp, #0
 800138c:	4603      	mov	r3, r0
 800138e:	60b9      	str	r1, [r7, #8]
 8001390:	607a      	str	r2, [r7, #4]
 8001392:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001398:	f7ff ff3e 	bl	8001218 <__NVIC_GetPriorityGrouping>
 800139c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	68b9      	ldr	r1, [r7, #8]
 80013a2:	6978      	ldr	r0, [r7, #20]
 80013a4:	f7ff ff8e 	bl	80012c4 <NVIC_EncodePriority>
 80013a8:	4602      	mov	r2, r0
 80013aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ae:	4611      	mov	r1, r2
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff ff5d 	bl	8001270 <__NVIC_SetPriority>
}
 80013b6:	bf00      	nop
 80013b8:	3718      	adds	r7, #24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b082      	sub	sp, #8
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	4603      	mov	r3, r0
 80013c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ff31 	bl	8001234 <__NVIC_EnableIRQ>
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff ffa2 	bl	800132c <SysTick_Config>
 80013e8:	4603      	mov	r3, r0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80013f8:	f3bf 8f5f 	dmb	sy
}
 80013fc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80013fe:	4b07      	ldr	r3, [pc, #28]	; (800141c <HAL_MPU_Disable+0x28>)
 8001400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001402:	4a06      	ldr	r2, [pc, #24]	; (800141c <HAL_MPU_Disable+0x28>)
 8001404:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001408:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800140a:	4b05      	ldr	r3, [pc, #20]	; (8001420 <HAL_MPU_Disable+0x2c>)
 800140c:	2200      	movs	r2, #0
 800140e:	605a      	str	r2, [r3, #4]
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	e000ed00 	.word	0xe000ed00
 8001420:	e000ed90 	.word	0xe000ed90

08001424 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800142c:	4a0b      	ldr	r2, [pc, #44]	; (800145c <HAL_MPU_Enable+0x38>)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001436:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <HAL_MPU_Enable+0x3c>)
 8001438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143a:	4a09      	ldr	r2, [pc, #36]	; (8001460 <HAL_MPU_Enable+0x3c>)
 800143c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001440:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001442:	f3bf 8f4f 	dsb	sy
}
 8001446:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001448:	f3bf 8f6f 	isb	sy
}
 800144c:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	e000ed90 	.word	0xe000ed90
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	785a      	ldrb	r2, [r3, #1]
 8001470:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <HAL_MPU_ConfigRegion+0x7c>)
 8001472:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001474:	4b1a      	ldr	r3, [pc, #104]	; (80014e0 <HAL_MPU_ConfigRegion+0x7c>)
 8001476:	691b      	ldr	r3, [r3, #16]
 8001478:	4a19      	ldr	r2, [pc, #100]	; (80014e0 <HAL_MPU_ConfigRegion+0x7c>)
 800147a:	f023 0301 	bic.w	r3, r3, #1
 800147e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001480:	4a17      	ldr	r2, [pc, #92]	; (80014e0 <HAL_MPU_ConfigRegion+0x7c>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	7b1b      	ldrb	r3, [r3, #12]
 800148c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	7adb      	ldrb	r3, [r3, #11]
 8001492:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001494:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	7a9b      	ldrb	r3, [r3, #10]
 800149a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800149c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	7b5b      	ldrb	r3, [r3, #13]
 80014a2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80014a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	7b9b      	ldrb	r3, [r3, #14]
 80014aa:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80014ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	7bdb      	ldrb	r3, [r3, #15]
 80014b2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80014b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	7a5b      	ldrb	r3, [r3, #9]
 80014ba:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80014bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	7a1b      	ldrb	r3, [r3, #8]
 80014c2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80014c4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	7812      	ldrb	r2, [r2, #0]
 80014ca:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014cc:	4a04      	ldr	r2, [pc, #16]	; (80014e0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80014ce:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014d0:	6113      	str	r3, [r2, #16]
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	e000ed90 	.word	0xe000ed90

080014e4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e086      	b.n	8001604 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d106      	bne.n	800150e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2223      	movs	r2, #35	; 0x23
 8001504:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f003 f897 	bl	800463c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150e:	4b3f      	ldr	r3, [pc, #252]	; (800160c <HAL_ETH_Init+0x128>)
 8001510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001512:	4a3e      	ldr	r2, [pc, #248]	; (800160c <HAL_ETH_Init+0x128>)
 8001514:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001518:	6453      	str	r3, [r2, #68]	; 0x44
 800151a:	4b3c      	ldr	r3, [pc, #240]	; (800160c <HAL_ETH_Init+0x128>)
 800151c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001526:	4b3a      	ldr	r3, [pc, #232]	; (8001610 <HAL_ETH_Init+0x12c>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	4a39      	ldr	r2, [pc, #228]	; (8001610 <HAL_ETH_Init+0x12c>)
 800152c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001530:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001532:	4b37      	ldr	r3, [pc, #220]	; (8001610 <HAL_ETH_Init+0x12c>)
 8001534:	685a      	ldr	r2, [r3, #4]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	4935      	ldr	r1, [pc, #212]	; (8001610 <HAL_ETH_Init+0x12c>)
 800153c:	4313      	orrs	r3, r2
 800153e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001540:	4b33      	ldr	r3, [pc, #204]	; (8001610 <HAL_ETH_Init+0x12c>)
 8001542:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	6812      	ldr	r2, [r2, #0]
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800155a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800155c:	f7ff fe08 	bl	8001170 <HAL_GetTick>
 8001560:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001562:	e011      	b.n	8001588 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001564:	f7ff fe04 	bl	8001170 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001572:	d909      	bls.n	8001588 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2204      	movs	r2, #4
 8001578:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	22e0      	movs	r2, #224	; 0xe0
 8001580:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e03d      	b.n	8001604 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1e4      	bne.n	8001564 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f000 fefc 	bl	8002398 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f000 ffa7 	bl	80024f4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f000 fffd 	bl	80025a6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	461a      	mov	r2, r3
 80015b2:	2100      	movs	r1, #0
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f000 ff65 	bl	8002484 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 80015c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <HAL_ETH_Init+0x130>)
 80015d8:	430b      	orrs	r3, r1
 80015da:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 80015ee:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2210      	movs	r2, #16
 80015fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40023800 	.word	0x40023800
 8001610:	40013800 	.word	0x40013800
 8001614:	00020060 	.word	0x00020060

08001618 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001626:	2b10      	cmp	r3, #16
 8001628:	d150      	bne.n	80016cc <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2223      	movs	r2, #35	; 0x23
 800162e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2204      	movs	r2, #4
 8001636:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f000 f9f9 	bl	8001a30 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f042 0208 	orr.w	r2, r2, #8
 800164c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001656:	2001      	movs	r0, #1
 8001658:	f7ff fd96 	bl	8001188 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68fa      	ldr	r2, [r7, #12]
 8001662:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f042 0204 	orr.w	r2, r2, #4
 8001672:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800167c:	2001      	movs	r0, #1
 800167e:	f7ff fd83 	bl	8001188 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f000 fd20 	bl	80020d0 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	6812      	ldr	r2, [r2, #0]
 800169e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016a6:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	6812      	ldr	r2, [r2, #0]
 80016b6:	f043 0302 	orr.w	r3, r3, #2
 80016ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016be:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2223      	movs	r2, #35	; 0x23
 80016c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80016c8:	2300      	movs	r3, #0
 80016ca:	e000      	b.n	80016ce <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
  }
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b084      	sub	sp, #16
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016e4:	2b23      	cmp	r3, #35	; 0x23
 80016e6:	d14a      	bne.n	800177e <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2223      	movs	r2, #35	; 0x23
 80016ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	6812      	ldr	r2, [r2, #0]
 80016fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001702:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001706:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	6812      	ldr	r2, [r2, #0]
 8001716:	f023 0302 	bic.w	r3, r3, #2
 800171a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800171e:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f022 0204 	bic.w	r2, r2, #4
 800172e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001738:	2001      	movs	r0, #1
 800173a:	f7ff fd25 	bl	8001188 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f000 fcc2 	bl	80020d0 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f022 0208 	bic.w	r2, r2, #8
 800175a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001764:	2001      	movs	r0, #1
 8001766:	f7ff fd0f 	bl	8001188 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2210      	movs	r2, #16
 8001776:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800177a:	2300      	movs	r3, #0
 800177c:	e000      	b.n	8001780 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
  }
}
 8001780:	4618      	mov	r0, r3
 8001782:	3710      	adds	r7, #16
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d109      	bne.n	80017ae <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017a0:	f043 0201 	orr.w	r2, r3, #1
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e07c      	b.n	80018a8 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017b4:	2b23      	cmp	r3, #35	; 0x23
 80017b6:	d176      	bne.n	80018a6 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80017b8:	2200      	movs	r2, #0
 80017ba:	68b9      	ldr	r1, [r7, #8]
 80017bc:	68f8      	ldr	r0, [r7, #12]
 80017be:	f000 ff61 	bl	8002684 <ETH_Prepare_Tx_Descriptors>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d009      	beq.n	80017dc <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ce:	f043 0202 	orr.w	r2, r3, #2
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e065      	b.n	80018a8 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 80017dc:	f3bf 8f4f 	dsb	sy
}
 80017e0:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	3206      	adds	r2, #6
 80017ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ee:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f4:	1c5a      	adds	r2, r3, #1
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	629a      	str	r2, [r3, #40]	; 0x28
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fe:	2b03      	cmp	r3, #3
 8001800:	d904      	bls.n	800180c <HAL_ETH_Transmit+0x84>
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001806:	1f1a      	subs	r2, r3, #4
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	3106      	adds	r1, #6
 8001818:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800181c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001820:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8001822:	f7ff fca5 	bl	8001170 <HAL_GetTick>
 8001826:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001828:	e037      	b.n	800189a <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001832:	695b      	ldr	r3, [r3, #20]
 8001834:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d011      	beq.n	8001860 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001842:	f043 0208 	orr.w	r2, r3, #8
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001854:	695a      	ldr	r2, [r3, #20]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e023      	b.n	80018a8 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001866:	d018      	beq.n	800189a <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001868:	f7ff fc82 	bl	8001170 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	429a      	cmp	r2, r3
 8001876:	d302      	bcc.n	800187e <HAL_ETH_Transmit+0xf6>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d10d      	bne.n	800189a <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001884:	f043 0204 	orr.w	r2, r3, #4
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001894:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e006      	b.n	80018a8 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	dbc3      	blt.n	800182a <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80018a2:	2300      	movs	r3, #0
 80018a4:	e000      	b.n	80018a8 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
  }
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b088      	sub	sp, #32
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80018be:	2300      	movs	r3, #0
 80018c0:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d109      	bne.n	80018dc <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ce:	f043 0201 	orr.w	r2, r3, #1
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e0a4      	b.n	8001a26 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018e2:	2b23      	cmp	r3, #35	; 0x23
 80018e4:	d001      	beq.n	80018ea <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e09d      	b.n	8001a26 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ee:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	69fa      	ldr	r2, [r7, #28]
 80018f4:	3212      	adds	r2, #18
 80018f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018fa:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001900:	f1c3 0304 	rsb	r3, r3, #4
 8001904:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001906:	e066      	b.n	80019d6 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001910:	2b00      	cmp	r3, #0
 8001912:	d007      	beq.n	8001924 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	69da      	ldr	r2, [r3, #28]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	699a      	ldr	r2, [r3, #24]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800192c:	2b00      	cmp	r3, #0
 800192e:	d103      	bne.n	8001938 <HAL_ETH_ReadData+0x88>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001934:	2b00      	cmp	r3, #0
 8001936:	d03c      	beq.n	80019b2 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001940:	2b00      	cmp	r3, #0
 8001942:	d005      	beq.n	8001950 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	0c1b      	lsrs	r3, r3, #16
 8001956:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800195a:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001964:	2b00      	cmp	r3, #0
 8001966:	d005      	beq.n	8001974 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001970:	2301      	movs	r3, #1
 8001972:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	689a      	ldr	r2, [r3, #8]
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800198c:	461a      	mov	r2, r3
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	b29b      	uxth	r3, r3
 8001992:	f003 f81d 	bl	80049d0 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800199a:	1c5a      	adds	r2, r3, #1
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	441a      	add	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	2200      	movs	r2, #0
 80019b0:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	3301      	adds	r3, #1
 80019b6:	61fb      	str	r3, [r7, #28]
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	2b03      	cmp	r3, #3
 80019bc:	d902      	bls.n	80019c4 <HAL_ETH_ReadData+0x114>
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	3b04      	subs	r3, #4
 80019c2:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	69fa      	ldr	r2, [r7, #28]
 80019c8:	3212      	adds	r2, #18
 80019ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019ce:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	3301      	adds	r3, #1
 80019d4:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80019da:	2b00      	cmp	r3, #0
 80019dc:	db06      	blt.n	80019ec <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80019de:	697a      	ldr	r2, [r7, #20]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d202      	bcs.n	80019ec <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 80019e6:	7cfb      	ldrb	r3, [r7, #19]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d08d      	beq.n	8001908 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	441a      	add	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d002      	beq.n	8001a06 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f000 f815 	bl	8001a30 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69fa      	ldr	r2, [r7, #28]
 8001a0a:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001a0c:	7cfb      	ldrb	r3, [r7, #19]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d108      	bne.n	8001a24 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001a20:	2300      	movs	r3, #0
 8001a22:	e000      	b.n	8001a26 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3720      	adds	r7, #32
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b088      	sub	sp, #32
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a44:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	69fa      	ldr	r2, [r7, #28]
 8001a4a:	3212      	adds	r2, #18
 8001a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a50:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a56:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001a58:	e042      	b.n	8001ae0 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	6a1b      	ldr	r3, [r3, #32]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d112      	bne.n	8001a88 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001a62:	f107 0308 	add.w	r3, r7, #8
 8001a66:	4618      	mov	r0, r3
 8001a68:	f002 ff82 	bl	8004970 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d102      	bne.n	8001a78 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001a72:	2300      	movs	r3, #0
 8001a74:	74fb      	strb	r3, [r7, #19]
 8001a76:	e007      	b.n	8001a88 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	461a      	mov	r2, r3
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001a88:	7cfb      	ldrb	r3, [r7, #19]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d028      	beq.n	8001ae0 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d106      	bne.n	8001aa4 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	695a      	ldr	r2, [r3, #20]
 8001a9a:	4b26      	ldr	r3, [pc, #152]	; (8001b34 <ETH_UpdateDescriptor+0x104>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	697a      	ldr	r2, [r7, #20]
 8001aa0:	6053      	str	r3, [r2, #4]
 8001aa2:	e005      	b.n	8001ab0 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	695b      	ldr	r3, [r3, #20]
 8001aa8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	61fb      	str	r3, [r7, #28]
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	2b03      	cmp	r3, #3
 8001ac6:	d902      	bls.n	8001ace <ETH_UpdateDescriptor+0x9e>
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	3b04      	subs	r3, #4
 8001acc:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	69fa      	ldr	r2, [r7, #28]
 8001ad2:	3212      	adds	r2, #18
 8001ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad8:	617b      	str	r3, [r7, #20]
      desccount--;
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	3b01      	subs	r3, #1
 8001ade:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d002      	beq.n	8001aec <ETH_UpdateDescriptor+0xbc>
 8001ae6:	7cfb      	ldrb	r3, [r7, #19]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1b6      	bne.n	8001a5a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d01a      	beq.n	8001b2c <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	3301      	adds	r3, #1
 8001afa:	f003 0303 	and.w	r3, r3, #3
 8001afe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8001b00:	f3bf 8f5f 	dmb	sy
}
 8001b04:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6919      	ldr	r1, [r3, #16]
 8001b0a:	68fa      	ldr	r2, [r7, #12]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4413      	add	r3, r2
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	18ca      	adds	r2, r1, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b1e:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	69fa      	ldr	r2, [r7, #28]
 8001b24:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001b2c:	bf00      	nop
 8001b2e:	3720      	adds	r7, #32
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	80004000 	.word	0x80004000

08001b38 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b46:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8001b60:	4b4b      	ldr	r3, [pc, #300]	; (8001c90 <HAL_ETH_IRQHandler+0x158>)
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d00e      	beq.n	8001b8e <HAL_ETH_IRQHandler+0x56>
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d009      	beq.n	8001b8e <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b82:	461a      	mov	r2, r3
 8001b84:	4b43      	ldr	r3, [pc, #268]	; (8001c94 <HAL_ETH_IRQHandler+0x15c>)
 8001b86:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f000 f891 	bl	8001cb0 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d00f      	beq.n	8001bb8 <HAL_ETH_IRQHandler+0x80>
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00a      	beq.n	8001bb8 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001baa:	461a      	mov	r2, r3
 8001bac:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001bb0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 f872 	bl	8001c9c <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d042      	beq.n	8001c48 <HAL_ETH_IRQHandler+0x110>
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d03d      	beq.n	8001c48 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bd2:	f043 0208 	orr.w	r2, r3, #8
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d01a      	beq.n	8001c1c <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bee:	695a      	ldr	r2, [r3, #20]
 8001bf0:	4b29      	ldr	r3, [pc, #164]	; (8001c98 <HAL_ETH_IRQHandler+0x160>)
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c02:	69db      	ldr	r3, [r3, #28]
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	6812      	ldr	r2, [r2, #0]
 8001c08:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8001c0c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c10:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	22e0      	movs	r2, #224	; 0xe0
 8001c16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001c1a:	e012      	b.n	8001c42 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c24:	695a      	ldr	r2, [r3, #20]
 8001c26:	f248 6380 	movw	r3, #34432	; 0x8680
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	f248 6380 	movw	r3, #34432	; 0x8680
 8001c40:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f83e 	bl	8001cc4 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00e      	beq.n	8001c70 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c58:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f838 	bl	8001cd8 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d006      	beq.n	8001c88 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001c7a:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <HAL_ETH_IRQHandler+0x158>)
 8001c7c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001c80:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f832 	bl	8001cec <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001c88:	bf00      	nop
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40013c00 	.word	0x40013c00
 8001c94:	00010040 	.word	0x00010040
 8001c98:	007e2000 	.word	0x007e2000

08001c9c <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
 8001d0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	f003 031c 	and.w	r3, r3, #28
 8001d1c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	02db      	lsls	r3, r3, #11
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	697a      	ldr	r2, [r7, #20]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	019b      	lsls	r3, r3, #6
 8001d2e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	f023 0302 	bic.w	r3, r3, #2
 8001d3e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	f043 0301 	orr.w	r3, r3, #1
 8001d46:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001d50:	f7ff fa0e 	bl	8001170 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d56:	e00d      	b.n	8001d74 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001d58:	f7ff fa0a 	bl	8001170 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d66:	d301      	bcc.n	8001d6c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e010      	b.n	8001d8e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1ec      	bne.n	8001d58 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	695b      	ldr	r3, [r3, #20]
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	461a      	mov	r2, r3
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b086      	sub	sp, #24
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	60f8      	str	r0, [r7, #12]
 8001d9e:	60b9      	str	r1, [r7, #8]
 8001da0:	607a      	str	r2, [r7, #4]
 8001da2:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	f003 031c 	and.w	r3, r3, #28
 8001db2:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	02db      	lsls	r3, r3, #11
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	019b      	lsls	r3, r3, #6
 8001dc4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001dc8:	697a      	ldr	r2, [r7, #20]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	f043 0302 	orr.w	r3, r3, #2
 8001dd4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	f043 0301 	orr.w	r3, r3, #1
 8001ddc:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001df0:	f7ff f9be 	bl	8001170 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001df6:	e00d      	b.n	8001e14 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001df8:	f7ff f9ba 	bl	8001170 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e06:	d301      	bcc.n	8001e0c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e009      	b.n	8001e20 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1ec      	bne.n	8001df8 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3718      	adds	r7, #24
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d101      	bne.n	8001e3c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e0e6      	b.n	800200a <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0310 	and.w	r3, r3, #16
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	bf14      	ite	ne
 8001e4a:	2301      	movne	r3, #1
 8001e4c:	2300      	moveq	r3, #0
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	461a      	mov	r2, r3
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	bf0c      	ite	eq
 8001e74:	2301      	moveq	r3, #1
 8001e76:	2300      	movne	r3, #0
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	bf14      	ite	ne
 8001e90:	2301      	movne	r3, #1
 8001e92:	2300      	moveq	r3, #0
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	bf0c      	ite	eq
 8001eaa:	2301      	moveq	r3, #1
 8001eac:	2300      	movne	r3, #0
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	bf14      	ite	ne
 8001ec4:	2301      	movne	r3, #1
 8001ec6:	2300      	moveq	r3, #0
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	461a      	mov	r2, r3
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	bf0c      	ite	eq
 8001efa:	2301      	moveq	r3, #1
 8001efc:	2300      	movne	r3, #0
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	461a      	mov	r2, r3
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	bf0c      	ite	eq
 8001f14:	2301      	moveq	r3, #1
 8001f16:	2300      	movne	r3, #0
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	bf14      	ite	ne
 8001f2e:	2301      	movne	r3, #1
 8001f30:	2300      	moveq	r3, #0
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	461a      	mov	r2, r3
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	bf14      	ite	ne
 8001f56:	2301      	movne	r3, #1
 8001f58:	2300      	moveq	r3, #0
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	bf14      	ite	ne
 8001f70:	2301      	movne	r3, #1
 8001f72:	2300      	moveq	r3, #0
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	461a      	mov	r2, r3
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	bf14      	ite	ne
 8001f8a:	2301      	movne	r3, #1
 8001f8c:	2300      	moveq	r3, #0
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	461a      	mov	r2, r3
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	bf0c      	ite	eq
 8001fa6:	2301      	moveq	r3, #1
 8001fa8:	2300      	movne	r3, #0
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	461a      	mov	r2, r3
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	0c1b      	lsrs	r3, r3, #16
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	f003 0304 	and.w	r3, r3, #4
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	bf14      	ite	ne
 8001fde:	2301      	movne	r3, #1
 8001fe0:	2300      	moveq	r3, #0
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	bf14      	ite	ne
 8001ffa:	2301      	movne	r3, #1
 8001ffc:	2300      	moveq	r3, #0
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
 800201e:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e00b      	b.n	8002042 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002030:	2b10      	cmp	r3, #16
 8002032:	d105      	bne.n	8002040 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002034:	6839      	ldr	r1, [r7, #0]
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f870 	bl	800211c <ETH_SetMACConfig>

    return HAL_OK;
 800203c:	2300      	movs	r3, #0
 800203e:	e000      	b.n	8002042 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
  }
}
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
	...

0800204c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f023 031c 	bic.w	r3, r3, #28
 8002062:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002064:	f001 fb22 	bl	80036ac <HAL_RCC_GetHCLKFreq>
 8002068:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	4a14      	ldr	r2, [pc, #80]	; (80020c0 <HAL_ETH_SetMDIOClockRange+0x74>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d804      	bhi.n	800207c <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f043 0308 	orr.w	r3, r3, #8
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	e019      	b.n	80020b0 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	4a11      	ldr	r2, [pc, #68]	; (80020c4 <HAL_ETH_SetMDIOClockRange+0x78>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d204      	bcs.n	800208e <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f043 030c 	orr.w	r3, r3, #12
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	e010      	b.n	80020b0 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	4a0d      	ldr	r2, [pc, #52]	; (80020c8 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d90c      	bls.n	80020b0 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	4a0c      	ldr	r2, [pc, #48]	; (80020cc <HAL_ETH_SetMDIOClockRange+0x80>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d804      	bhi.n	80020a8 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f043 0304 	orr.w	r3, r3, #4
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	e003      	b.n	80020b0 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f043 0310 	orr.w	r3, r3, #16
 80020ae:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	611a      	str	r2, [r3, #16]
}
 80020b8:	bf00      	nop
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	02160ebf 	.word	0x02160ebf
 80020c4:	03938700 	.word	0x03938700
 80020c8:	05f5e0ff 	.word	0x05f5e0ff
 80020cc:	08f0d17f 	.word	0x08f0d17f

080020d0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80020d8:	2300      	movs	r3, #0
 80020da:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	6812      	ldr	r2, [r2, #0]
 80020ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80020f2:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002100:	2001      	movs	r0, #1
 8002102:	f7ff f841 	bl	8001188 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002110:	6193      	str	r3, [r2, #24]
}
 8002112:	bf00      	nop
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
	...

0800211c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	4b53      	ldr	r3, [pc, #332]	; (8002280 <ETH_SetMACConfig+0x164>)
 8002132:	4013      	ands	r3, r2
 8002134:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	7b9b      	ldrb	r3, [r3, #14]
 800213a:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	7c12      	ldrb	r2, [r2, #16]
 8002140:	2a00      	cmp	r2, #0
 8002142:	d102      	bne.n	800214a <ETH_SetMACConfig+0x2e>
 8002144:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002148:	e000      	b.n	800214c <ETH_SetMACConfig+0x30>
 800214a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800214c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	7c52      	ldrb	r2, [r2, #17]
 8002152:	2a00      	cmp	r2, #0
 8002154:	d102      	bne.n	800215c <ETH_SetMACConfig+0x40>
 8002156:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800215a:	e000      	b.n	800215e <ETH_SetMACConfig+0x42>
 800215c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800215e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002164:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	7fdb      	ldrb	r3, [r3, #31]
 800216a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800216c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002172:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	7f92      	ldrb	r2, [r2, #30]
 8002178:	2a00      	cmp	r2, #0
 800217a:	d102      	bne.n	8002182 <ETH_SetMACConfig+0x66>
 800217c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002180:	e000      	b.n	8002184 <ETH_SetMACConfig+0x68>
 8002182:	2200      	movs	r2, #0
                        macconf->Speed |
 8002184:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	7f1b      	ldrb	r3, [r3, #28]
 800218a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800218c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002192:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	791b      	ldrb	r3, [r3, #4]
 8002198:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800219a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	f892 2020 	ldrb.w	r2, [r2, #32]
 80021a2:	2a00      	cmp	r2, #0
 80021a4:	d102      	bne.n	80021ac <ETH_SetMACConfig+0x90>
 80021a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021aa:	e000      	b.n	80021ae <ETH_SetMACConfig+0x92>
 80021ac:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80021ae:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	7bdb      	ldrb	r3, [r3, #15]
 80021b4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80021b6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80021bc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80021c4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80021c6:	4313      	orrs	r3, r2
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021de:	2001      	movs	r0, #1
 80021e0:	f7fe ffd2 	bl	8001188 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	f64f 7341 	movw	r3, #65345	; 0xff41
 80021fa:	4013      	ands	r3, r2
 80021fc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002202:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800220a:	2a00      	cmp	r2, #0
 800220c:	d101      	bne.n	8002212 <ETH_SetMACConfig+0xf6>
 800220e:	2280      	movs	r2, #128	; 0x80
 8002210:	e000      	b.n	8002214 <ETH_SetMACConfig+0xf8>
 8002212:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002214:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800221a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002222:	2a01      	cmp	r2, #1
 8002224:	d101      	bne.n	800222a <ETH_SetMACConfig+0x10e>
 8002226:	2208      	movs	r2, #8
 8002228:	e000      	b.n	800222c <ETH_SetMACConfig+0x110>
 800222a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800222c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002234:	2a01      	cmp	r2, #1
 8002236:	d101      	bne.n	800223c <ETH_SetMACConfig+0x120>
 8002238:	2204      	movs	r2, #4
 800223a:	e000      	b.n	800223e <ETH_SetMACConfig+0x122>
 800223c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800223e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002246:	2a01      	cmp	r2, #1
 8002248:	d101      	bne.n	800224e <ETH_SetMACConfig+0x132>
 800224a:	2202      	movs	r2, #2
 800224c:	e000      	b.n	8002250 <ETH_SetMACConfig+0x134>
 800224e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002250:	4313      	orrs	r3, r2
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	4313      	orrs	r3, r2
 8002256:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002268:	2001      	movs	r0, #1
 800226a:	f7fe ff8d 	bl	8001188 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	619a      	str	r2, [r3, #24]
}
 8002276:	bf00      	nop
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	fd20810f 	.word	0xfd20810f

08002284 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	4b3d      	ldr	r3, [pc, #244]	; (8002394 <ETH_SetDMAConfig+0x110>)
 800229e:	4013      	ands	r3, r2
 80022a0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	7b1b      	ldrb	r3, [r3, #12]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d102      	bne.n	80022b0 <ETH_SetDMAConfig+0x2c>
 80022aa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80022ae:	e000      	b.n	80022b2 <ETH_SetDMAConfig+0x2e>
 80022b0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	7b5b      	ldrb	r3, [r3, #13]
 80022b6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80022b8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	7f52      	ldrb	r2, [r2, #29]
 80022be:	2a00      	cmp	r2, #0
 80022c0:	d102      	bne.n	80022c8 <ETH_SetDMAConfig+0x44>
 80022c2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80022c6:	e000      	b.n	80022ca <ETH_SetDMAConfig+0x46>
 80022c8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80022ca:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	7b9b      	ldrb	r3, [r3, #14]
 80022d0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80022d2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80022d8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	7f1b      	ldrb	r3, [r3, #28]
 80022de:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80022e0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	7f9b      	ldrb	r3, [r3, #30]
 80022e6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80022e8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80022ee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022f6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80022f8:	4313      	orrs	r3, r2
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002308:	461a      	mov	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800231a:	2001      	movs	r0, #1
 800231c:	f7fe ff34 	bl	8001188 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002328:	461a      	mov	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	791b      	ldrb	r3, [r3, #4]
 8002332:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002338:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800233e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002344:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800234c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800234e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002354:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002356:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800235c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	6812      	ldr	r2, [r2, #0]
 8002362:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002366:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800236a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002378:	2001      	movs	r0, #1
 800237a:	f7fe ff05 	bl	8001188 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002386:	461a      	mov	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6013      	str	r3, [r2, #0]
}
 800238c:	bf00      	nop
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	f8de3f23 	.word	0xf8de3f23

08002398 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b0a6      	sub	sp, #152	; 0x98
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80023a0:	2301      	movs	r3, #1
 80023a2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80023a6:	2301      	movs	r3, #1
 80023a8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80023ac:	2300      	movs	r3, #0
 80023ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80023b0:	2300      	movs	r3, #0
 80023b2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80023b6:	2301      	movs	r3, #1
 80023b8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80023bc:	2300      	movs	r3, #0
 80023be:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80023c2:	2301      	movs	r3, #1
 80023c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80023c8:	2301      	movs	r3, #1
 80023ca:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80023ce:	2300      	movs	r3, #0
 80023d0:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80023d4:	2300      	movs	r3, #0
 80023d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80023da:	2300      	movs	r3, #0
 80023dc:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80023de:	2300      	movs	r3, #0
 80023e0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80023e8:	2300      	movs	r3, #0
 80023ea:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80023ee:	2300      	movs	r3, #0
 80023f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80023f4:	2300      	movs	r3, #0
 80023f6:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80023fa:	2300      	movs	r3, #0
 80023fc:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002400:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002404:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002406:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800240a:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800240c:	2300      	movs	r3, #0
 800240e:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002412:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002416:	4619      	mov	r1, r3
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7ff fe7f 	bl	800211c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800241e:	2301      	movs	r3, #1
 8002420:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002422:	2301      	movs	r3, #1
 8002424:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002426:	2301      	movs	r3, #1
 8002428:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800242c:	2301      	movs	r3, #1
 800242e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002430:	2300      	movs	r3, #0
 8002432:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002434:	2300      	movs	r3, #0
 8002436:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800243a:	2300      	movs	r3, #0
 800243c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002440:	2300      	movs	r3, #0
 8002442:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002444:	2301      	movs	r3, #1
 8002446:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800244a:	2301      	movs	r3, #1
 800244c:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800244e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002452:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002454:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002458:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800245a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800245e:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002460:	2301      	movs	r3, #1
 8002462:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002466:	2300      	movs	r3, #0
 8002468:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800246a:	2300      	movs	r3, #0
 800246c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800246e:	f107 0308 	add.w	r3, r7, #8
 8002472:	4619      	mov	r1, r3
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f7ff ff05 	bl	8002284 <ETH_SetDMAConfig>
}
 800247a:	bf00      	nop
 800247c:	3798      	adds	r7, #152	; 0x98
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
	...

08002484 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002484:	b480      	push	{r7}
 8002486:	b087      	sub	sp, #28
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3305      	adds	r3, #5
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	021b      	lsls	r3, r3, #8
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	3204      	adds	r2, #4
 800249c:	7812      	ldrb	r2, [r2, #0]
 800249e:	4313      	orrs	r3, r2
 80024a0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	4b11      	ldr	r3, [pc, #68]	; (80024ec <ETH_MACAddressConfig+0x68>)
 80024a6:	4413      	add	r3, r2
 80024a8:	461a      	mov	r2, r3
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	3303      	adds	r3, #3
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	061a      	lsls	r2, r3, #24
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	3302      	adds	r3, #2
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	041b      	lsls	r3, r3, #16
 80024be:	431a      	orrs	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3301      	adds	r3, #1
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	021b      	lsls	r3, r3, #8
 80024c8:	4313      	orrs	r3, r2
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	7812      	ldrb	r2, [r2, #0]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80024d2:	68ba      	ldr	r2, [r7, #8]
 80024d4:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <ETH_MACAddressConfig+0x6c>)
 80024d6:	4413      	add	r3, r2
 80024d8:	461a      	mov	r2, r3
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	6013      	str	r3, [r2, #0]
}
 80024de:	bf00      	nop
 80024e0:	371c      	adds	r7, #28
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	40028040 	.word	0x40028040
 80024f0:	40028044 	.word	0x40028044

080024f4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80024fc:	2300      	movs	r3, #0
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	e03e      	b.n	8002580 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68d9      	ldr	r1, [r3, #12]
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	4613      	mov	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4413      	add	r3, r2
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	440b      	add	r3, r1
 8002512:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	2200      	movs	r2, #0
 800251e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	2200      	movs	r2, #0
 8002524:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	2200      	movs	r2, #0
 800252a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800252c:	68b9      	ldr	r1, [r7, #8]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	3206      	adds	r2, #6
 8002534:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2b02      	cmp	r3, #2
 8002548:	d80c      	bhi.n	8002564 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68d9      	ldr	r1, [r3, #12]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	1c5a      	adds	r2, r3, #1
 8002552:	4613      	mov	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	440b      	add	r3, r1
 800255c:	461a      	mov	r2, r3
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	60da      	str	r2, [r3, #12]
 8002562:	e004      	b.n	800256e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	461a      	mov	r2, r3
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	3301      	adds	r3, #1
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2b03      	cmp	r3, #3
 8002584:	d9bd      	bls.n	8002502 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	68da      	ldr	r2, [r3, #12]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002598:	611a      	str	r2, [r3, #16]
}
 800259a:	bf00      	nop
 800259c:	3714      	adds	r7, #20
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b085      	sub	sp, #20
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80025ae:	2300      	movs	r3, #0
 80025b0:	60fb      	str	r3, [r7, #12]
 80025b2:	e048      	b.n	8002646 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6919      	ldr	r1, [r3, #16]
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	4613      	mov	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4413      	add	r3, r2
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	440b      	add	r3, r1
 80025c4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	2200      	movs	r2, #0
 80025d0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	2200      	movs	r2, #0
 80025d6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	2200      	movs	r2, #0
 80025dc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	2200      	movs	r2, #0
 80025e2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	2200      	movs	r2, #0
 80025e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80025f0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800260a:	68b9      	ldr	r1, [r7, #8]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	3212      	adds	r2, #18
 8002612:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2b02      	cmp	r3, #2
 800261a:	d80c      	bhi.n	8002636 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6919      	ldr	r1, [r3, #16]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	1c5a      	adds	r2, r3, #1
 8002624:	4613      	mov	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	440b      	add	r3, r1
 800262e:	461a      	mov	r2, r3
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	60da      	str	r2, [r3, #12]
 8002634:	e004      	b.n	8002640 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	461a      	mov	r2, r3
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	3301      	adds	r3, #1
 8002644:	60fb      	str	r3, [r7, #12]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2b03      	cmp	r3, #3
 800264a:	d9b3      	bls.n	80025b4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	691a      	ldr	r2, [r3, #16]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002676:	60da      	str	r2, [r3, #12]
}
 8002678:	bf00      	nop
 800267a:	3714      	adds	r7, #20
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8002684:	b480      	push	{r7}
 8002686:	b091      	sub	sp, #68	; 0x44
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	3318      	adds	r3, #24
 8002694:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80026a2:	2300      	movs	r3, #0
 80026a4:	637b      	str	r3, [r7, #52]	; 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026ae:	633b      	str	r3, [r7, #48]	; 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t           bd_count = 0;
 80026b6:	2300      	movs	r3, #0
 80026b8:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80026ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80026c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026c6:	d007      	beq.n	80026d8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80026c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026cc:	3304      	adds	r3, #4
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4413      	add	r3, r2
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80026d8:	2302      	movs	r3, #2
 80026da:	e111      	b.n	8002900 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 80026dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026de:	3301      	adds	r3, #1
 80026e0:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80026e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	461a      	mov	r2, r3
 80026e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ea:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80026ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	4b86      	ldr	r3, [pc, #536]	; (800290c <ETH_Prepare_Tx_Descriptors+0x288>)
 80026f2:	4013      	ands	r3, r2
 80026f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026f6:	6852      	ldr	r2, [r2, #4]
 80026f8:	431a      	orrs	r2, r3
 80026fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026fc:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b00      	cmp	r3, #0
 8002708:	d008      	beq.n	800271c <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800270a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	431a      	orrs	r2, r3
 8002718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800271a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0320 	and.w	r3, r3, #32
 8002724:	2b00      	cmp	r3, #0
 8002726:	d008      	beq.n	800273a <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	431a      	orrs	r2, r3
 8002736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002738:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0304 	and.w	r3, r3, #4
 8002742:	2b00      	cmp	r3, #0
 8002744:	d005      	beq.n	8002752 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800274e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002750:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800275a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800275c:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800275e:	e082      	b.n	8002866 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800276a:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d006      	beq.n	8002780 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800277a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	e005      	b.n	800278c <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800278a:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800278c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800278e:	3301      	adds	r3, #1
 8002790:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002794:	2b03      	cmp	r3, #3
 8002796:	d902      	bls.n	800279e <ETH_Prepare_Tx_Descriptors+0x11a>
 8002798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800279a:	3b04      	subs	r3, #4
 800279c:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80027a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027a6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80027a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80027b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027b4:	d007      	beq.n	80027c6 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80027b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027ba:	3304      	adds	r3, #4
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4413      	add	r3, r2
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d029      	beq.n	800281a <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 80027c6:	6a3b      	ldr	r3, [r7, #32]
 80027c8:	63fb      	str	r3, [r7, #60]	; 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80027ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027d2:	633b      	str	r3, [r7, #48]	; 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80027d4:	2300      	movs	r3, #0
 80027d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80027d8:	e019      	b.n	800280e <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 80027da:	f3bf 8f5f 	dmb	sy
}
 80027de:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80027e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ea:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80027ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027ee:	3301      	adds	r3, #1
 80027f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027f4:	2b03      	cmp	r3, #3
 80027f6:	d902      	bls.n	80027fe <ETH_Prepare_Tx_Descriptors+0x17a>
 80027f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027fa:	3b04      	subs	r3, #4
 80027fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002806:	633b      	str	r3, [r7, #48]	; 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800280a:	3301      	adds	r3, #1
 800280c:	63bb      	str	r3, [r7, #56]	; 0x38
 800280e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002812:	429a      	cmp	r2, r3
 8002814:	d3e1      	bcc.n	80027da <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8002816:	2302      	movs	r3, #2
 8002818:	e072      	b.n	8002900 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800281a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002824:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8002826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002828:	3301      	adds	r3, #1
 800282a:	637b      	str	r3, [r7, #52]	; 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800282c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	461a      	mov	r2, r3
 8002838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800283a:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800283c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	4b32      	ldr	r3, [pc, #200]	; (800290c <ETH_Prepare_Tx_Descriptors+0x288>)
 8002842:	4013      	ands	r3, r2
 8002844:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002846:	6852      	ldr	r2, [r2, #4]
 8002848:	431a      	orrs	r2, r3
 800284a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284c:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800284e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002850:	3301      	adds	r3, #1
 8002852:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8002854:	f3bf 8f5f 	dmb	sy
}
 8002858:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800285a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002864:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	2b00      	cmp	r3, #0
 800286c:	f47f af78 	bne.w	8002760 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d006      	beq.n	8002884 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800287e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	e005      	b.n	8002890 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800288c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800288e:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800289a:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289e:	6a3a      	ldr	r2, [r7, #32]
 80028a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028a4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80028a6:	f3bf 8f5f 	dmb	sy
}
 80028aa:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80028ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80028b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b6:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80028b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028c0:	3304      	adds	r3, #4
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	440b      	add	r3, r1
 80028c6:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028cc:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028ce:	f3ef 8310 	mrs	r3, PRIMASK
 80028d2:	613b      	str	r3, [r7, #16]
  return(result);
 80028d4:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80028d6:	61fb      	str	r3, [r7, #28]
 80028d8:	2301      	movs	r3, #1
 80028da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	f383 8810 	msr	PRIMASK, r3
}
 80028e2:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ea:	4413      	add	r3, r2
 80028ec:	1c5a      	adds	r2, r3, #1
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	629a      	str	r2, [r3, #40]	; 0x28
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	f383 8810 	msr	PRIMASK, r3
}
 80028fc:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3744      	adds	r7, #68	; 0x44
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	ffffe000 	.word	0xffffe000

08002910 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002910:	b480      	push	{r7}
 8002912:	b089      	sub	sp, #36	; 0x24
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800291a:	2300      	movs	r3, #0
 800291c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800291e:	2300      	movs	r3, #0
 8002920:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002922:	2300      	movs	r3, #0
 8002924:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002926:	2300      	movs	r3, #0
 8002928:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800292a:	2300      	movs	r3, #0
 800292c:	61fb      	str	r3, [r7, #28]
 800292e:	e175      	b.n	8002c1c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002930:	2201      	movs	r2, #1
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	4013      	ands	r3, r2
 8002942:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	429a      	cmp	r2, r3
 800294a:	f040 8164 	bne.w	8002c16 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f003 0303 	and.w	r3, r3, #3
 8002956:	2b01      	cmp	r3, #1
 8002958:	d005      	beq.n	8002966 <HAL_GPIO_Init+0x56>
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f003 0303 	and.w	r3, r3, #3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d130      	bne.n	80029c8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	2203      	movs	r2, #3
 8002972:	fa02 f303 	lsl.w	r3, r2, r3
 8002976:	43db      	mvns	r3, r3
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	4013      	ands	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	68da      	ldr	r2, [r3, #12]
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	4313      	orrs	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800299c:	2201      	movs	r2, #1
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	43db      	mvns	r3, r3
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	4013      	ands	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	091b      	lsrs	r3, r3, #4
 80029b2:	f003 0201 	and.w	r2, r3, #1
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	4313      	orrs	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f003 0303 	and.w	r3, r3, #3
 80029d0:	2b03      	cmp	r3, #3
 80029d2:	d017      	beq.n	8002a04 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	2203      	movs	r2, #3
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	43db      	mvns	r3, r3
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	4013      	ands	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f003 0303 	and.w	r3, r3, #3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d123      	bne.n	8002a58 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	08da      	lsrs	r2, r3, #3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3208      	adds	r2, #8
 8002a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	f003 0307 	and.w	r3, r3, #7
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	220f      	movs	r2, #15
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	4013      	ands	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	691a      	ldr	r2, [r3, #16]
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	08da      	lsrs	r2, r3, #3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	3208      	adds	r2, #8
 8002a52:	69b9      	ldr	r1, [r7, #24]
 8002a54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	2203      	movs	r2, #3
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f003 0203 	and.w	r2, r3, #3
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f000 80be 	beq.w	8002c16 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a9a:	4b66      	ldr	r3, [pc, #408]	; (8002c34 <HAL_GPIO_Init+0x324>)
 8002a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9e:	4a65      	ldr	r2, [pc, #404]	; (8002c34 <HAL_GPIO_Init+0x324>)
 8002aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8002aa6:	4b63      	ldr	r3, [pc, #396]	; (8002c34 <HAL_GPIO_Init+0x324>)
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aae:	60fb      	str	r3, [r7, #12]
 8002ab0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002ab2:	4a61      	ldr	r2, [pc, #388]	; (8002c38 <HAL_GPIO_Init+0x328>)
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	089b      	lsrs	r3, r3, #2
 8002ab8:	3302      	adds	r3, #2
 8002aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	f003 0303 	and.w	r3, r3, #3
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	220f      	movs	r2, #15
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	43db      	mvns	r3, r3
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a58      	ldr	r2, [pc, #352]	; (8002c3c <HAL_GPIO_Init+0x32c>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d037      	beq.n	8002b4e <HAL_GPIO_Init+0x23e>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a57      	ldr	r2, [pc, #348]	; (8002c40 <HAL_GPIO_Init+0x330>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d031      	beq.n	8002b4a <HAL_GPIO_Init+0x23a>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a56      	ldr	r2, [pc, #344]	; (8002c44 <HAL_GPIO_Init+0x334>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d02b      	beq.n	8002b46 <HAL_GPIO_Init+0x236>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a55      	ldr	r2, [pc, #340]	; (8002c48 <HAL_GPIO_Init+0x338>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d025      	beq.n	8002b42 <HAL_GPIO_Init+0x232>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a54      	ldr	r2, [pc, #336]	; (8002c4c <HAL_GPIO_Init+0x33c>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d01f      	beq.n	8002b3e <HAL_GPIO_Init+0x22e>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a53      	ldr	r2, [pc, #332]	; (8002c50 <HAL_GPIO_Init+0x340>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d019      	beq.n	8002b3a <HAL_GPIO_Init+0x22a>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a52      	ldr	r2, [pc, #328]	; (8002c54 <HAL_GPIO_Init+0x344>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d013      	beq.n	8002b36 <HAL_GPIO_Init+0x226>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a51      	ldr	r2, [pc, #324]	; (8002c58 <HAL_GPIO_Init+0x348>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d00d      	beq.n	8002b32 <HAL_GPIO_Init+0x222>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a50      	ldr	r2, [pc, #320]	; (8002c5c <HAL_GPIO_Init+0x34c>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d007      	beq.n	8002b2e <HAL_GPIO_Init+0x21e>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a4f      	ldr	r2, [pc, #316]	; (8002c60 <HAL_GPIO_Init+0x350>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d101      	bne.n	8002b2a <HAL_GPIO_Init+0x21a>
 8002b26:	2309      	movs	r3, #9
 8002b28:	e012      	b.n	8002b50 <HAL_GPIO_Init+0x240>
 8002b2a:	230a      	movs	r3, #10
 8002b2c:	e010      	b.n	8002b50 <HAL_GPIO_Init+0x240>
 8002b2e:	2308      	movs	r3, #8
 8002b30:	e00e      	b.n	8002b50 <HAL_GPIO_Init+0x240>
 8002b32:	2307      	movs	r3, #7
 8002b34:	e00c      	b.n	8002b50 <HAL_GPIO_Init+0x240>
 8002b36:	2306      	movs	r3, #6
 8002b38:	e00a      	b.n	8002b50 <HAL_GPIO_Init+0x240>
 8002b3a:	2305      	movs	r3, #5
 8002b3c:	e008      	b.n	8002b50 <HAL_GPIO_Init+0x240>
 8002b3e:	2304      	movs	r3, #4
 8002b40:	e006      	b.n	8002b50 <HAL_GPIO_Init+0x240>
 8002b42:	2303      	movs	r3, #3
 8002b44:	e004      	b.n	8002b50 <HAL_GPIO_Init+0x240>
 8002b46:	2302      	movs	r3, #2
 8002b48:	e002      	b.n	8002b50 <HAL_GPIO_Init+0x240>
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e000      	b.n	8002b50 <HAL_GPIO_Init+0x240>
 8002b4e:	2300      	movs	r3, #0
 8002b50:	69fa      	ldr	r2, [r7, #28]
 8002b52:	f002 0203 	and.w	r2, r2, #3
 8002b56:	0092      	lsls	r2, r2, #2
 8002b58:	4093      	lsls	r3, r2
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002b60:	4935      	ldr	r1, [pc, #212]	; (8002c38 <HAL_GPIO_Init+0x328>)
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	089b      	lsrs	r3, r3, #2
 8002b66:	3302      	adds	r3, #2
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b6e:	4b3d      	ldr	r3, [pc, #244]	; (8002c64 <HAL_GPIO_Init+0x354>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	43db      	mvns	r3, r3
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b92:	4a34      	ldr	r2, [pc, #208]	; (8002c64 <HAL_GPIO_Init+0x354>)
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b98:	4b32      	ldr	r3, [pc, #200]	; (8002c64 <HAL_GPIO_Init+0x354>)
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d003      	beq.n	8002bbc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bbc:	4a29      	ldr	r2, [pc, #164]	; (8002c64 <HAL_GPIO_Init+0x354>)
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bc2:	4b28      	ldr	r3, [pc, #160]	; (8002c64 <HAL_GPIO_Init+0x354>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	43db      	mvns	r3, r3
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d003      	beq.n	8002be6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002be6:	4a1f      	ldr	r2, [pc, #124]	; (8002c64 <HAL_GPIO_Init+0x354>)
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bec:	4b1d      	ldr	r3, [pc, #116]	; (8002c64 <HAL_GPIO_Init+0x354>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d003      	beq.n	8002c10 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c10:	4a14      	ldr	r2, [pc, #80]	; (8002c64 <HAL_GPIO_Init+0x354>)
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	61fb      	str	r3, [r7, #28]
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	2b0f      	cmp	r3, #15
 8002c20:	f67f ae86 	bls.w	8002930 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002c24:	bf00      	nop
 8002c26:	bf00      	nop
 8002c28:	3724      	adds	r7, #36	; 0x24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	40023800 	.word	0x40023800
 8002c38:	40013800 	.word	0x40013800
 8002c3c:	40020000 	.word	0x40020000
 8002c40:	40020400 	.word	0x40020400
 8002c44:	40020800 	.word	0x40020800
 8002c48:	40020c00 	.word	0x40020c00
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	40021400 	.word	0x40021400
 8002c54:	40021800 	.word	0x40021800
 8002c58:	40021c00 	.word	0x40021c00
 8002c5c:	40022000 	.word	0x40022000
 8002c60:	40022400 	.word	0x40022400
 8002c64:	40013c00 	.word	0x40013c00

08002c68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	460b      	mov	r3, r1
 8002c72:	807b      	strh	r3, [r7, #2]
 8002c74:	4613      	mov	r3, r2
 8002c76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c78:	787b      	ldrb	r3, [r7, #1]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c7e:	887a      	ldrh	r2, [r7, #2]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002c84:	e003      	b.n	8002c8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002c86:	887b      	ldrh	r3, [r7, #2]
 8002c88:	041a      	lsls	r2, r3, #16
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	619a      	str	r2, [r3, #24]
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b085      	sub	sp, #20
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002cac:	887a      	ldrh	r2, [r7, #2]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	041a      	lsls	r2, r3, #16
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	43d9      	mvns	r1, r3
 8002cb8:	887b      	ldrh	r3, [r7, #2]
 8002cba:	400b      	ands	r3, r1
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	619a      	str	r2, [r3, #24]
}
 8002cc2:	bf00      	nop
 8002cc4:	3714      	adds	r7, #20
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
	...

08002cd0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002cda:	4b23      	ldr	r3, [pc, #140]	; (8002d68 <HAL_PWREx_EnableOverDrive+0x98>)
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	4a22      	ldr	r2, [pc, #136]	; (8002d68 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ce6:	4b20      	ldr	r3, [pc, #128]	; (8002d68 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cee:	603b      	str	r3, [r7, #0]
 8002cf0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002cf2:	4b1e      	ldr	r3, [pc, #120]	; (8002d6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a1d      	ldr	r2, [pc, #116]	; (8002d6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cfc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cfe:	f7fe fa37 	bl	8001170 <HAL_GetTick>
 8002d02:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002d04:	e009      	b.n	8002d1a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d06:	f7fe fa33 	bl	8001170 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d14:	d901      	bls.n	8002d1a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e022      	b.n	8002d60 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002d1a:	4b14      	ldr	r3, [pc, #80]	; (8002d6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d26:	d1ee      	bne.n	8002d06 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002d28:	4b10      	ldr	r3, [pc, #64]	; (8002d6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a0f      	ldr	r2, [pc, #60]	; (8002d6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d32:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d34:	f7fe fa1c 	bl	8001170 <HAL_GetTick>
 8002d38:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d3a:	e009      	b.n	8002d50 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d3c:	f7fe fa18 	bl	8001170 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d4a:	d901      	bls.n	8002d50 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e007      	b.n	8002d60 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d50:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d5c:	d1ee      	bne.n	8002d3c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	40007000 	.word	0x40007000

08002d70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e29b      	b.n	80032be <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f000 8087 	beq.w	8002ea2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d94:	4b96      	ldr	r3, [pc, #600]	; (8002ff0 <HAL_RCC_OscConfig+0x280>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f003 030c 	and.w	r3, r3, #12
 8002d9c:	2b04      	cmp	r3, #4
 8002d9e:	d00c      	beq.n	8002dba <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002da0:	4b93      	ldr	r3, [pc, #588]	; (8002ff0 <HAL_RCC_OscConfig+0x280>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 030c 	and.w	r3, r3, #12
 8002da8:	2b08      	cmp	r3, #8
 8002daa:	d112      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x62>
 8002dac:	4b90      	ldr	r3, [pc, #576]	; (8002ff0 <HAL_RCC_OscConfig+0x280>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002db4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002db8:	d10b      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dba:	4b8d      	ldr	r3, [pc, #564]	; (8002ff0 <HAL_RCC_OscConfig+0x280>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d06c      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x130>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d168      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e275      	b.n	80032be <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dda:	d106      	bne.n	8002dea <HAL_RCC_OscConfig+0x7a>
 8002ddc:	4b84      	ldr	r3, [pc, #528]	; (8002ff0 <HAL_RCC_OscConfig+0x280>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a83      	ldr	r2, [pc, #524]	; (8002ff0 <HAL_RCC_OscConfig+0x280>)
 8002de2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de6:	6013      	str	r3, [r2, #0]
 8002de8:	e02e      	b.n	8002e48 <HAL_RCC_OscConfig+0xd8>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10c      	bne.n	8002e0c <HAL_RCC_OscConfig+0x9c>
 8002df2:	4b7f      	ldr	r3, [pc, #508]	; (8002ff0 <HAL_RCC_OscConfig+0x280>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a7e      	ldr	r2, [pc, #504]	; (8002ff0 <HAL_RCC_OscConfig+0x280>)
 8002df8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dfc:	6013      	str	r3, [r2, #0]
 8002dfe:	4b7c      	ldr	r3, [pc, #496]	; (8002ff0 <HAL_RCC_OscConfig+0x280>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a7b      	ldr	r2, [pc, #492]	; (8002ff0 <HAL_RCC_OscConfig+0x280>)
 8002e04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e08:	6013      	str	r3, [r2, #0]
 8002e0a:	e01d      	b.n	8002e48 <HAL_RCC_OscConfig+0xd8>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e14:	d10c      	bne.n	8002e30 <HAL_RCC_OscConfig+0xc0>
 8002e16:	4b76      	ldr	r3, [pc, #472]	; (8002ff0 <HAL_RCC_OscConfig+0x280>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a75      	ldr	r2, [pc, #468]	; (8002ff0 <HAL_RCC_OscConfig+0x280>)
 8002e1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e20:	6013      	str	r3, [r2, #0]
 8002e22:	4b73      	ldr	r3, [pc, #460]	; (8002ff0 <HAL_RCC_OscConfig+0x280>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a72      	ldr	r2, [pc, #456]	; (8002ff0 <HAL_RCC_OscConfig+0x280>)
 8002e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e2c:	6013      	str	r3, [r2, #0]
 8002e2e:	e00b      	b.n	8002e48 <HAL_RCC_OscConfig+0xd8>
 8002e30:	4b6f      	ldr	r3, [pc, #444]	; (8002ff0 <HAL_RCC_OscConfig+0x280>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a6e      	ldr	r2, [pc, #440]	; (8002ff0 <HAL_RCC_OscConfig+0x280>)
 8002e36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e3a:	6013      	str	r3, [r2, #0]
 8002e3c:	4b6c      	ldr	r3, [pc, #432]	; (8002ff0 <HAL_RCC_OscConfig+0x280>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a6b      	ldr	r2, [pc, #428]	; (8002ff0 <HAL_RCC_OscConfig+0x280>)
 8002e42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d013      	beq.n	8002e78 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e50:	f7fe f98e 	bl	8001170 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e58:	f7fe f98a 	bl	8001170 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b64      	cmp	r3, #100	; 0x64
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e229      	b.n	80032be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e6a:	4b61      	ldr	r3, [pc, #388]	; (8002ff0 <HAL_RCC_OscConfig+0x280>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d0f0      	beq.n	8002e58 <HAL_RCC_OscConfig+0xe8>
 8002e76:	e014      	b.n	8002ea2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e78:	f7fe f97a 	bl	8001170 <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e80:	f7fe f976 	bl	8001170 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b64      	cmp	r3, #100	; 0x64
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e215      	b.n	80032be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e92:	4b57      	ldr	r3, [pc, #348]	; (8002ff0 <HAL_RCC_OscConfig+0x280>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1f0      	bne.n	8002e80 <HAL_RCC_OscConfig+0x110>
 8002e9e:	e000      	b.n	8002ea2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d069      	beq.n	8002f82 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002eae:	4b50      	ldr	r3, [pc, #320]	; (8002ff0 <HAL_RCC_OscConfig+0x280>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 030c 	and.w	r3, r3, #12
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00b      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eba:	4b4d      	ldr	r3, [pc, #308]	; (8002ff0 <HAL_RCC_OscConfig+0x280>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 030c 	and.w	r3, r3, #12
 8002ec2:	2b08      	cmp	r3, #8
 8002ec4:	d11c      	bne.n	8002f00 <HAL_RCC_OscConfig+0x190>
 8002ec6:	4b4a      	ldr	r3, [pc, #296]	; (8002ff0 <HAL_RCC_OscConfig+0x280>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d116      	bne.n	8002f00 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ed2:	4b47      	ldr	r3, [pc, #284]	; (8002ff0 <HAL_RCC_OscConfig+0x280>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d005      	beq.n	8002eea <HAL_RCC_OscConfig+0x17a>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d001      	beq.n	8002eea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e1e9      	b.n	80032be <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eea:	4b41      	ldr	r3, [pc, #260]	; (8002ff0 <HAL_RCC_OscConfig+0x280>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	493d      	ldr	r1, [pc, #244]	; (8002ff0 <HAL_RCC_OscConfig+0x280>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002efe:	e040      	b.n	8002f82 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d023      	beq.n	8002f50 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f08:	4b39      	ldr	r3, [pc, #228]	; (8002ff0 <HAL_RCC_OscConfig+0x280>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a38      	ldr	r2, [pc, #224]	; (8002ff0 <HAL_RCC_OscConfig+0x280>)
 8002f0e:	f043 0301 	orr.w	r3, r3, #1
 8002f12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f14:	f7fe f92c 	bl	8001170 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f1c:	f7fe f928 	bl	8001170 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e1c7      	b.n	80032be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f2e:	4b30      	ldr	r3, [pc, #192]	; (8002ff0 <HAL_RCC_OscConfig+0x280>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d0f0      	beq.n	8002f1c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f3a:	4b2d      	ldr	r3, [pc, #180]	; (8002ff0 <HAL_RCC_OscConfig+0x280>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	4929      	ldr	r1, [pc, #164]	; (8002ff0 <HAL_RCC_OscConfig+0x280>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	600b      	str	r3, [r1, #0]
 8002f4e:	e018      	b.n	8002f82 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f50:	4b27      	ldr	r3, [pc, #156]	; (8002ff0 <HAL_RCC_OscConfig+0x280>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a26      	ldr	r2, [pc, #152]	; (8002ff0 <HAL_RCC_OscConfig+0x280>)
 8002f56:	f023 0301 	bic.w	r3, r3, #1
 8002f5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5c:	f7fe f908 	bl	8001170 <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f64:	f7fe f904 	bl	8001170 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e1a3      	b.n	80032be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f76:	4b1e      	ldr	r3, [pc, #120]	; (8002ff0 <HAL_RCC_OscConfig+0x280>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1f0      	bne.n	8002f64 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0308 	and.w	r3, r3, #8
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d038      	beq.n	8003000 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d019      	beq.n	8002fca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f96:	4b16      	ldr	r3, [pc, #88]	; (8002ff0 <HAL_RCC_OscConfig+0x280>)
 8002f98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f9a:	4a15      	ldr	r2, [pc, #84]	; (8002ff0 <HAL_RCC_OscConfig+0x280>)
 8002f9c:	f043 0301 	orr.w	r3, r3, #1
 8002fa0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa2:	f7fe f8e5 	bl	8001170 <HAL_GetTick>
 8002fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fa8:	e008      	b.n	8002fbc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002faa:	f7fe f8e1 	bl	8001170 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e180      	b.n	80032be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fbc:	4b0c      	ldr	r3, [pc, #48]	; (8002ff0 <HAL_RCC_OscConfig+0x280>)
 8002fbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d0f0      	beq.n	8002faa <HAL_RCC_OscConfig+0x23a>
 8002fc8:	e01a      	b.n	8003000 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fca:	4b09      	ldr	r3, [pc, #36]	; (8002ff0 <HAL_RCC_OscConfig+0x280>)
 8002fcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fce:	4a08      	ldr	r2, [pc, #32]	; (8002ff0 <HAL_RCC_OscConfig+0x280>)
 8002fd0:	f023 0301 	bic.w	r3, r3, #1
 8002fd4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd6:	f7fe f8cb 	bl	8001170 <HAL_GetTick>
 8002fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fdc:	e00a      	b.n	8002ff4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fde:	f7fe f8c7 	bl	8001170 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d903      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e166      	b.n	80032be <HAL_RCC_OscConfig+0x54e>
 8002ff0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ff4:	4b92      	ldr	r3, [pc, #584]	; (8003240 <HAL_RCC_OscConfig+0x4d0>)
 8002ff6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1ee      	bne.n	8002fde <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	2b00      	cmp	r3, #0
 800300a:	f000 80a4 	beq.w	8003156 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800300e:	4b8c      	ldr	r3, [pc, #560]	; (8003240 <HAL_RCC_OscConfig+0x4d0>)
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10d      	bne.n	8003036 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800301a:	4b89      	ldr	r3, [pc, #548]	; (8003240 <HAL_RCC_OscConfig+0x4d0>)
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	4a88      	ldr	r2, [pc, #544]	; (8003240 <HAL_RCC_OscConfig+0x4d0>)
 8003020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003024:	6413      	str	r3, [r2, #64]	; 0x40
 8003026:	4b86      	ldr	r3, [pc, #536]	; (8003240 <HAL_RCC_OscConfig+0x4d0>)
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800302e:	60bb      	str	r3, [r7, #8]
 8003030:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003032:	2301      	movs	r3, #1
 8003034:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003036:	4b83      	ldr	r3, [pc, #524]	; (8003244 <HAL_RCC_OscConfig+0x4d4>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303e:	2b00      	cmp	r3, #0
 8003040:	d118      	bne.n	8003074 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003042:	4b80      	ldr	r3, [pc, #512]	; (8003244 <HAL_RCC_OscConfig+0x4d4>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a7f      	ldr	r2, [pc, #508]	; (8003244 <HAL_RCC_OscConfig+0x4d4>)
 8003048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800304c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800304e:	f7fe f88f 	bl	8001170 <HAL_GetTick>
 8003052:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003054:	e008      	b.n	8003068 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003056:	f7fe f88b 	bl	8001170 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b64      	cmp	r3, #100	; 0x64
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e12a      	b.n	80032be <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003068:	4b76      	ldr	r3, [pc, #472]	; (8003244 <HAL_RCC_OscConfig+0x4d4>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003070:	2b00      	cmp	r3, #0
 8003072:	d0f0      	beq.n	8003056 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d106      	bne.n	800308a <HAL_RCC_OscConfig+0x31a>
 800307c:	4b70      	ldr	r3, [pc, #448]	; (8003240 <HAL_RCC_OscConfig+0x4d0>)
 800307e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003080:	4a6f      	ldr	r2, [pc, #444]	; (8003240 <HAL_RCC_OscConfig+0x4d0>)
 8003082:	f043 0301 	orr.w	r3, r3, #1
 8003086:	6713      	str	r3, [r2, #112]	; 0x70
 8003088:	e02d      	b.n	80030e6 <HAL_RCC_OscConfig+0x376>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10c      	bne.n	80030ac <HAL_RCC_OscConfig+0x33c>
 8003092:	4b6b      	ldr	r3, [pc, #428]	; (8003240 <HAL_RCC_OscConfig+0x4d0>)
 8003094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003096:	4a6a      	ldr	r2, [pc, #424]	; (8003240 <HAL_RCC_OscConfig+0x4d0>)
 8003098:	f023 0301 	bic.w	r3, r3, #1
 800309c:	6713      	str	r3, [r2, #112]	; 0x70
 800309e:	4b68      	ldr	r3, [pc, #416]	; (8003240 <HAL_RCC_OscConfig+0x4d0>)
 80030a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a2:	4a67      	ldr	r2, [pc, #412]	; (8003240 <HAL_RCC_OscConfig+0x4d0>)
 80030a4:	f023 0304 	bic.w	r3, r3, #4
 80030a8:	6713      	str	r3, [r2, #112]	; 0x70
 80030aa:	e01c      	b.n	80030e6 <HAL_RCC_OscConfig+0x376>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	2b05      	cmp	r3, #5
 80030b2:	d10c      	bne.n	80030ce <HAL_RCC_OscConfig+0x35e>
 80030b4:	4b62      	ldr	r3, [pc, #392]	; (8003240 <HAL_RCC_OscConfig+0x4d0>)
 80030b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b8:	4a61      	ldr	r2, [pc, #388]	; (8003240 <HAL_RCC_OscConfig+0x4d0>)
 80030ba:	f043 0304 	orr.w	r3, r3, #4
 80030be:	6713      	str	r3, [r2, #112]	; 0x70
 80030c0:	4b5f      	ldr	r3, [pc, #380]	; (8003240 <HAL_RCC_OscConfig+0x4d0>)
 80030c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c4:	4a5e      	ldr	r2, [pc, #376]	; (8003240 <HAL_RCC_OscConfig+0x4d0>)
 80030c6:	f043 0301 	orr.w	r3, r3, #1
 80030ca:	6713      	str	r3, [r2, #112]	; 0x70
 80030cc:	e00b      	b.n	80030e6 <HAL_RCC_OscConfig+0x376>
 80030ce:	4b5c      	ldr	r3, [pc, #368]	; (8003240 <HAL_RCC_OscConfig+0x4d0>)
 80030d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d2:	4a5b      	ldr	r2, [pc, #364]	; (8003240 <HAL_RCC_OscConfig+0x4d0>)
 80030d4:	f023 0301 	bic.w	r3, r3, #1
 80030d8:	6713      	str	r3, [r2, #112]	; 0x70
 80030da:	4b59      	ldr	r3, [pc, #356]	; (8003240 <HAL_RCC_OscConfig+0x4d0>)
 80030dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030de:	4a58      	ldr	r2, [pc, #352]	; (8003240 <HAL_RCC_OscConfig+0x4d0>)
 80030e0:	f023 0304 	bic.w	r3, r3, #4
 80030e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d015      	beq.n	800311a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ee:	f7fe f83f 	bl	8001170 <HAL_GetTick>
 80030f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030f4:	e00a      	b.n	800310c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030f6:	f7fe f83b 	bl	8001170 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	f241 3288 	movw	r2, #5000	; 0x1388
 8003104:	4293      	cmp	r3, r2
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e0d8      	b.n	80032be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800310c:	4b4c      	ldr	r3, [pc, #304]	; (8003240 <HAL_RCC_OscConfig+0x4d0>)
 800310e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d0ee      	beq.n	80030f6 <HAL_RCC_OscConfig+0x386>
 8003118:	e014      	b.n	8003144 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800311a:	f7fe f829 	bl	8001170 <HAL_GetTick>
 800311e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003120:	e00a      	b.n	8003138 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003122:	f7fe f825 	bl	8001170 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003130:	4293      	cmp	r3, r2
 8003132:	d901      	bls.n	8003138 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e0c2      	b.n	80032be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003138:	4b41      	ldr	r3, [pc, #260]	; (8003240 <HAL_RCC_OscConfig+0x4d0>)
 800313a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1ee      	bne.n	8003122 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003144:	7dfb      	ldrb	r3, [r7, #23]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d105      	bne.n	8003156 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800314a:	4b3d      	ldr	r3, [pc, #244]	; (8003240 <HAL_RCC_OscConfig+0x4d0>)
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	4a3c      	ldr	r2, [pc, #240]	; (8003240 <HAL_RCC_OscConfig+0x4d0>)
 8003150:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003154:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	2b00      	cmp	r3, #0
 800315c:	f000 80ae 	beq.w	80032bc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003160:	4b37      	ldr	r3, [pc, #220]	; (8003240 <HAL_RCC_OscConfig+0x4d0>)
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f003 030c 	and.w	r3, r3, #12
 8003168:	2b08      	cmp	r3, #8
 800316a:	d06d      	beq.n	8003248 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	2b02      	cmp	r3, #2
 8003172:	d14b      	bne.n	800320c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003174:	4b32      	ldr	r3, [pc, #200]	; (8003240 <HAL_RCC_OscConfig+0x4d0>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a31      	ldr	r2, [pc, #196]	; (8003240 <HAL_RCC_OscConfig+0x4d0>)
 800317a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800317e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003180:	f7fd fff6 	bl	8001170 <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003188:	f7fd fff2 	bl	8001170 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e091      	b.n	80032be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800319a:	4b29      	ldr	r3, [pc, #164]	; (8003240 <HAL_RCC_OscConfig+0x4d0>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1f0      	bne.n	8003188 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	69da      	ldr	r2, [r3, #28]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	431a      	orrs	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	019b      	lsls	r3, r3, #6
 80031b6:	431a      	orrs	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031bc:	085b      	lsrs	r3, r3, #1
 80031be:	3b01      	subs	r3, #1
 80031c0:	041b      	lsls	r3, r3, #16
 80031c2:	431a      	orrs	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c8:	061b      	lsls	r3, r3, #24
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d0:	071b      	lsls	r3, r3, #28
 80031d2:	491b      	ldr	r1, [pc, #108]	; (8003240 <HAL_RCC_OscConfig+0x4d0>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031d8:	4b19      	ldr	r3, [pc, #100]	; (8003240 <HAL_RCC_OscConfig+0x4d0>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a18      	ldr	r2, [pc, #96]	; (8003240 <HAL_RCC_OscConfig+0x4d0>)
 80031de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e4:	f7fd ffc4 	bl	8001170 <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ec:	f7fd ffc0 	bl	8001170 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e05f      	b.n	80032be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031fe:	4b10      	ldr	r3, [pc, #64]	; (8003240 <HAL_RCC_OscConfig+0x4d0>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d0f0      	beq.n	80031ec <HAL_RCC_OscConfig+0x47c>
 800320a:	e057      	b.n	80032bc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800320c:	4b0c      	ldr	r3, [pc, #48]	; (8003240 <HAL_RCC_OscConfig+0x4d0>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a0b      	ldr	r2, [pc, #44]	; (8003240 <HAL_RCC_OscConfig+0x4d0>)
 8003212:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003216:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003218:	f7fd ffaa 	bl	8001170 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003220:	f7fd ffa6 	bl	8001170 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e045      	b.n	80032be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003232:	4b03      	ldr	r3, [pc, #12]	; (8003240 <HAL_RCC_OscConfig+0x4d0>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1f0      	bne.n	8003220 <HAL_RCC_OscConfig+0x4b0>
 800323e:	e03d      	b.n	80032bc <HAL_RCC_OscConfig+0x54c>
 8003240:	40023800 	.word	0x40023800
 8003244:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003248:	4b1f      	ldr	r3, [pc, #124]	; (80032c8 <HAL_RCC_OscConfig+0x558>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d030      	beq.n	80032b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003260:	429a      	cmp	r2, r3
 8003262:	d129      	bne.n	80032b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800326e:	429a      	cmp	r2, r3
 8003270:	d122      	bne.n	80032b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003278:	4013      	ands	r3, r2
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800327e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003280:	4293      	cmp	r3, r2
 8003282:	d119      	bne.n	80032b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328e:	085b      	lsrs	r3, r3, #1
 8003290:	3b01      	subs	r3, #1
 8003292:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003294:	429a      	cmp	r2, r3
 8003296:	d10f      	bne.n	80032b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d107      	bne.n	80032b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d001      	beq.n	80032bc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e000      	b.n	80032be <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3718      	adds	r7, #24
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	40023800 	.word	0x40023800

080032cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80032d6:	2300      	movs	r3, #0
 80032d8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e0d0      	b.n	8003486 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032e4:	4b6a      	ldr	r3, [pc, #424]	; (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 030f 	and.w	r3, r3, #15
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d910      	bls.n	8003314 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032f2:	4b67      	ldr	r3, [pc, #412]	; (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f023 020f 	bic.w	r2, r3, #15
 80032fa:	4965      	ldr	r1, [pc, #404]	; (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	4313      	orrs	r3, r2
 8003300:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003302:	4b63      	ldr	r3, [pc, #396]	; (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 030f 	and.w	r3, r3, #15
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	429a      	cmp	r2, r3
 800330e:	d001      	beq.n	8003314 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e0b8      	b.n	8003486 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d020      	beq.n	8003362 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0304 	and.w	r3, r3, #4
 8003328:	2b00      	cmp	r3, #0
 800332a:	d005      	beq.n	8003338 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800332c:	4b59      	ldr	r3, [pc, #356]	; (8003494 <HAL_RCC_ClockConfig+0x1c8>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	4a58      	ldr	r2, [pc, #352]	; (8003494 <HAL_RCC_ClockConfig+0x1c8>)
 8003332:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003336:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0308 	and.w	r3, r3, #8
 8003340:	2b00      	cmp	r3, #0
 8003342:	d005      	beq.n	8003350 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003344:	4b53      	ldr	r3, [pc, #332]	; (8003494 <HAL_RCC_ClockConfig+0x1c8>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	4a52      	ldr	r2, [pc, #328]	; (8003494 <HAL_RCC_ClockConfig+0x1c8>)
 800334a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800334e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003350:	4b50      	ldr	r3, [pc, #320]	; (8003494 <HAL_RCC_ClockConfig+0x1c8>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	494d      	ldr	r1, [pc, #308]	; (8003494 <HAL_RCC_ClockConfig+0x1c8>)
 800335e:	4313      	orrs	r3, r2
 8003360:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d040      	beq.n	80033f0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d107      	bne.n	8003386 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003376:	4b47      	ldr	r3, [pc, #284]	; (8003494 <HAL_RCC_ClockConfig+0x1c8>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d115      	bne.n	80033ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e07f      	b.n	8003486 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	2b02      	cmp	r3, #2
 800338c:	d107      	bne.n	800339e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800338e:	4b41      	ldr	r3, [pc, #260]	; (8003494 <HAL_RCC_ClockConfig+0x1c8>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d109      	bne.n	80033ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e073      	b.n	8003486 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800339e:	4b3d      	ldr	r3, [pc, #244]	; (8003494 <HAL_RCC_ClockConfig+0x1c8>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e06b      	b.n	8003486 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033ae:	4b39      	ldr	r3, [pc, #228]	; (8003494 <HAL_RCC_ClockConfig+0x1c8>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f023 0203 	bic.w	r2, r3, #3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	4936      	ldr	r1, [pc, #216]	; (8003494 <HAL_RCC_ClockConfig+0x1c8>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033c0:	f7fd fed6 	bl	8001170 <HAL_GetTick>
 80033c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033c6:	e00a      	b.n	80033de <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c8:	f7fd fed2 	bl	8001170 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e053      	b.n	8003486 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033de:	4b2d      	ldr	r3, [pc, #180]	; (8003494 <HAL_RCC_ClockConfig+0x1c8>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f003 020c 	and.w	r2, r3, #12
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d1eb      	bne.n	80033c8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033f0:	4b27      	ldr	r3, [pc, #156]	; (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 030f 	and.w	r3, r3, #15
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d210      	bcs.n	8003420 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033fe:	4b24      	ldr	r3, [pc, #144]	; (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f023 020f 	bic.w	r2, r3, #15
 8003406:	4922      	ldr	r1, [pc, #136]	; (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	4313      	orrs	r3, r2
 800340c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800340e:	4b20      	ldr	r3, [pc, #128]	; (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 030f 	and.w	r3, r3, #15
 8003416:	683a      	ldr	r2, [r7, #0]
 8003418:	429a      	cmp	r2, r3
 800341a:	d001      	beq.n	8003420 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e032      	b.n	8003486 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0304 	and.w	r3, r3, #4
 8003428:	2b00      	cmp	r3, #0
 800342a:	d008      	beq.n	800343e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800342c:	4b19      	ldr	r3, [pc, #100]	; (8003494 <HAL_RCC_ClockConfig+0x1c8>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	4916      	ldr	r1, [pc, #88]	; (8003494 <HAL_RCC_ClockConfig+0x1c8>)
 800343a:	4313      	orrs	r3, r2
 800343c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0308 	and.w	r3, r3, #8
 8003446:	2b00      	cmp	r3, #0
 8003448:	d009      	beq.n	800345e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800344a:	4b12      	ldr	r3, [pc, #72]	; (8003494 <HAL_RCC_ClockConfig+0x1c8>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	490e      	ldr	r1, [pc, #56]	; (8003494 <HAL_RCC_ClockConfig+0x1c8>)
 800345a:	4313      	orrs	r3, r2
 800345c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800345e:	f000 f821 	bl	80034a4 <HAL_RCC_GetSysClockFreq>
 8003462:	4602      	mov	r2, r0
 8003464:	4b0b      	ldr	r3, [pc, #44]	; (8003494 <HAL_RCC_ClockConfig+0x1c8>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	091b      	lsrs	r3, r3, #4
 800346a:	f003 030f 	and.w	r3, r3, #15
 800346e:	490a      	ldr	r1, [pc, #40]	; (8003498 <HAL_RCC_ClockConfig+0x1cc>)
 8003470:	5ccb      	ldrb	r3, [r1, r3]
 8003472:	fa22 f303 	lsr.w	r3, r2, r3
 8003476:	4a09      	ldr	r2, [pc, #36]	; (800349c <HAL_RCC_ClockConfig+0x1d0>)
 8003478:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800347a:	4b09      	ldr	r3, [pc, #36]	; (80034a0 <HAL_RCC_ClockConfig+0x1d4>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4618      	mov	r0, r3
 8003480:	f7fd fe32 	bl	80010e8 <HAL_InitTick>

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	40023c00 	.word	0x40023c00
 8003494:	40023800 	.word	0x40023800
 8003498:	08012184 	.word	0x08012184
 800349c:	20000000 	.word	0x20000000
 80034a0:	20000004 	.word	0x20000004

080034a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034a8:	b094      	sub	sp, #80	; 0x50
 80034aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80034ac:	2300      	movs	r3, #0
 80034ae:	647b      	str	r3, [r7, #68]	; 0x44
 80034b0:	2300      	movs	r3, #0
 80034b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034b4:	2300      	movs	r3, #0
 80034b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80034b8:	2300      	movs	r3, #0
 80034ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034bc:	4b79      	ldr	r3, [pc, #484]	; (80036a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f003 030c 	and.w	r3, r3, #12
 80034c4:	2b08      	cmp	r3, #8
 80034c6:	d00d      	beq.n	80034e4 <HAL_RCC_GetSysClockFreq+0x40>
 80034c8:	2b08      	cmp	r3, #8
 80034ca:	f200 80e1 	bhi.w	8003690 <HAL_RCC_GetSysClockFreq+0x1ec>
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d002      	beq.n	80034d8 <HAL_RCC_GetSysClockFreq+0x34>
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	d003      	beq.n	80034de <HAL_RCC_GetSysClockFreq+0x3a>
 80034d6:	e0db      	b.n	8003690 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034d8:	4b73      	ldr	r3, [pc, #460]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80034da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034dc:	e0db      	b.n	8003696 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034de:	4b72      	ldr	r3, [pc, #456]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80034e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034e2:	e0d8      	b.n	8003696 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034e4:	4b6f      	ldr	r3, [pc, #444]	; (80036a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034ec:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80034ee:	4b6d      	ldr	r3, [pc, #436]	; (80036a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d063      	beq.n	80035c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034fa:	4b6a      	ldr	r3, [pc, #424]	; (80036a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	099b      	lsrs	r3, r3, #6
 8003500:	2200      	movs	r2, #0
 8003502:	63bb      	str	r3, [r7, #56]	; 0x38
 8003504:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800350c:	633b      	str	r3, [r7, #48]	; 0x30
 800350e:	2300      	movs	r3, #0
 8003510:	637b      	str	r3, [r7, #52]	; 0x34
 8003512:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003516:	4622      	mov	r2, r4
 8003518:	462b      	mov	r3, r5
 800351a:	f04f 0000 	mov.w	r0, #0
 800351e:	f04f 0100 	mov.w	r1, #0
 8003522:	0159      	lsls	r1, r3, #5
 8003524:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003528:	0150      	lsls	r0, r2, #5
 800352a:	4602      	mov	r2, r0
 800352c:	460b      	mov	r3, r1
 800352e:	4621      	mov	r1, r4
 8003530:	1a51      	subs	r1, r2, r1
 8003532:	6139      	str	r1, [r7, #16]
 8003534:	4629      	mov	r1, r5
 8003536:	eb63 0301 	sbc.w	r3, r3, r1
 800353a:	617b      	str	r3, [r7, #20]
 800353c:	f04f 0200 	mov.w	r2, #0
 8003540:	f04f 0300 	mov.w	r3, #0
 8003544:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003548:	4659      	mov	r1, fp
 800354a:	018b      	lsls	r3, r1, #6
 800354c:	4651      	mov	r1, sl
 800354e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003552:	4651      	mov	r1, sl
 8003554:	018a      	lsls	r2, r1, #6
 8003556:	4651      	mov	r1, sl
 8003558:	ebb2 0801 	subs.w	r8, r2, r1
 800355c:	4659      	mov	r1, fp
 800355e:	eb63 0901 	sbc.w	r9, r3, r1
 8003562:	f04f 0200 	mov.w	r2, #0
 8003566:	f04f 0300 	mov.w	r3, #0
 800356a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800356e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003572:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003576:	4690      	mov	r8, r2
 8003578:	4699      	mov	r9, r3
 800357a:	4623      	mov	r3, r4
 800357c:	eb18 0303 	adds.w	r3, r8, r3
 8003580:	60bb      	str	r3, [r7, #8]
 8003582:	462b      	mov	r3, r5
 8003584:	eb49 0303 	adc.w	r3, r9, r3
 8003588:	60fb      	str	r3, [r7, #12]
 800358a:	f04f 0200 	mov.w	r2, #0
 800358e:	f04f 0300 	mov.w	r3, #0
 8003592:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003596:	4629      	mov	r1, r5
 8003598:	028b      	lsls	r3, r1, #10
 800359a:	4621      	mov	r1, r4
 800359c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035a0:	4621      	mov	r1, r4
 80035a2:	028a      	lsls	r2, r1, #10
 80035a4:	4610      	mov	r0, r2
 80035a6:	4619      	mov	r1, r3
 80035a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035aa:	2200      	movs	r2, #0
 80035ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80035ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035b4:	f7fc fe94 	bl	80002e0 <__aeabi_uldivmod>
 80035b8:	4602      	mov	r2, r0
 80035ba:	460b      	mov	r3, r1
 80035bc:	4613      	mov	r3, r2
 80035be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035c0:	e058      	b.n	8003674 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035c2:	4b38      	ldr	r3, [pc, #224]	; (80036a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	099b      	lsrs	r3, r3, #6
 80035c8:	2200      	movs	r2, #0
 80035ca:	4618      	mov	r0, r3
 80035cc:	4611      	mov	r1, r2
 80035ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80035d2:	623b      	str	r3, [r7, #32]
 80035d4:	2300      	movs	r3, #0
 80035d6:	627b      	str	r3, [r7, #36]	; 0x24
 80035d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80035dc:	4642      	mov	r2, r8
 80035de:	464b      	mov	r3, r9
 80035e0:	f04f 0000 	mov.w	r0, #0
 80035e4:	f04f 0100 	mov.w	r1, #0
 80035e8:	0159      	lsls	r1, r3, #5
 80035ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035ee:	0150      	lsls	r0, r2, #5
 80035f0:	4602      	mov	r2, r0
 80035f2:	460b      	mov	r3, r1
 80035f4:	4641      	mov	r1, r8
 80035f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80035fa:	4649      	mov	r1, r9
 80035fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8003600:	f04f 0200 	mov.w	r2, #0
 8003604:	f04f 0300 	mov.w	r3, #0
 8003608:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800360c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003610:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003614:	ebb2 040a 	subs.w	r4, r2, sl
 8003618:	eb63 050b 	sbc.w	r5, r3, fp
 800361c:	f04f 0200 	mov.w	r2, #0
 8003620:	f04f 0300 	mov.w	r3, #0
 8003624:	00eb      	lsls	r3, r5, #3
 8003626:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800362a:	00e2      	lsls	r2, r4, #3
 800362c:	4614      	mov	r4, r2
 800362e:	461d      	mov	r5, r3
 8003630:	4643      	mov	r3, r8
 8003632:	18e3      	adds	r3, r4, r3
 8003634:	603b      	str	r3, [r7, #0]
 8003636:	464b      	mov	r3, r9
 8003638:	eb45 0303 	adc.w	r3, r5, r3
 800363c:	607b      	str	r3, [r7, #4]
 800363e:	f04f 0200 	mov.w	r2, #0
 8003642:	f04f 0300 	mov.w	r3, #0
 8003646:	e9d7 4500 	ldrd	r4, r5, [r7]
 800364a:	4629      	mov	r1, r5
 800364c:	028b      	lsls	r3, r1, #10
 800364e:	4621      	mov	r1, r4
 8003650:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003654:	4621      	mov	r1, r4
 8003656:	028a      	lsls	r2, r1, #10
 8003658:	4610      	mov	r0, r2
 800365a:	4619      	mov	r1, r3
 800365c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800365e:	2200      	movs	r2, #0
 8003660:	61bb      	str	r3, [r7, #24]
 8003662:	61fa      	str	r2, [r7, #28]
 8003664:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003668:	f7fc fe3a 	bl	80002e0 <__aeabi_uldivmod>
 800366c:	4602      	mov	r2, r0
 800366e:	460b      	mov	r3, r1
 8003670:	4613      	mov	r3, r2
 8003672:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003674:	4b0b      	ldr	r3, [pc, #44]	; (80036a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	0c1b      	lsrs	r3, r3, #16
 800367a:	f003 0303 	and.w	r3, r3, #3
 800367e:	3301      	adds	r3, #1
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003684:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003686:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003688:	fbb2 f3f3 	udiv	r3, r2, r3
 800368c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800368e:	e002      	b.n	8003696 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003690:	4b05      	ldr	r3, [pc, #20]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003692:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003694:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003696:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003698:	4618      	mov	r0, r3
 800369a:	3750      	adds	r7, #80	; 0x50
 800369c:	46bd      	mov	sp, r7
 800369e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036a2:	bf00      	nop
 80036a4:	40023800 	.word	0x40023800
 80036a8:	00f42400 	.word	0x00f42400

080036ac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036b0:	4b03      	ldr	r3, [pc, #12]	; (80036c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80036b2:	681b      	ldr	r3, [r3, #0]
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	20000000 	.word	0x20000000

080036c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e049      	b.n	800376a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d106      	bne.n	80036f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7fd fa64 	bl	8000bb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2202      	movs	r2, #2
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	3304      	adds	r3, #4
 8003700:	4619      	mov	r1, r3
 8003702:	4610      	mov	r0, r2
 8003704:	f000 faa8 	bl	8003c58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
	...

08003774 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b01      	cmp	r3, #1
 8003786:	d001      	beq.n	800378c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e054      	b.n	8003836 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2202      	movs	r2, #2
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68da      	ldr	r2, [r3, #12]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f042 0201 	orr.w	r2, r2, #1
 80037a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a26      	ldr	r2, [pc, #152]	; (8003844 <HAL_TIM_Base_Start_IT+0xd0>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d022      	beq.n	80037f4 <HAL_TIM_Base_Start_IT+0x80>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037b6:	d01d      	beq.n	80037f4 <HAL_TIM_Base_Start_IT+0x80>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a22      	ldr	r2, [pc, #136]	; (8003848 <HAL_TIM_Base_Start_IT+0xd4>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d018      	beq.n	80037f4 <HAL_TIM_Base_Start_IT+0x80>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a21      	ldr	r2, [pc, #132]	; (800384c <HAL_TIM_Base_Start_IT+0xd8>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d013      	beq.n	80037f4 <HAL_TIM_Base_Start_IT+0x80>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a1f      	ldr	r2, [pc, #124]	; (8003850 <HAL_TIM_Base_Start_IT+0xdc>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d00e      	beq.n	80037f4 <HAL_TIM_Base_Start_IT+0x80>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a1e      	ldr	r2, [pc, #120]	; (8003854 <HAL_TIM_Base_Start_IT+0xe0>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d009      	beq.n	80037f4 <HAL_TIM_Base_Start_IT+0x80>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a1c      	ldr	r2, [pc, #112]	; (8003858 <HAL_TIM_Base_Start_IT+0xe4>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d004      	beq.n	80037f4 <HAL_TIM_Base_Start_IT+0x80>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a1b      	ldr	r2, [pc, #108]	; (800385c <HAL_TIM_Base_Start_IT+0xe8>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d115      	bne.n	8003820 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	689a      	ldr	r2, [r3, #8]
 80037fa:	4b19      	ldr	r3, [pc, #100]	; (8003860 <HAL_TIM_Base_Start_IT+0xec>)
 80037fc:	4013      	ands	r3, r2
 80037fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2b06      	cmp	r3, #6
 8003804:	d015      	beq.n	8003832 <HAL_TIM_Base_Start_IT+0xbe>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800380c:	d011      	beq.n	8003832 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f042 0201 	orr.w	r2, r2, #1
 800381c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800381e:	e008      	b.n	8003832 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f042 0201 	orr.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]
 8003830:	e000      	b.n	8003834 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003832:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	40010000 	.word	0x40010000
 8003848:	40000400 	.word	0x40000400
 800384c:	40000800 	.word	0x40000800
 8003850:	40000c00 	.word	0x40000c00
 8003854:	40010400 	.word	0x40010400
 8003858:	40014000 	.word	0x40014000
 800385c:	40001800 	.word	0x40001800
 8003860:	00010007 	.word	0x00010007

08003864 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d020      	beq.n	80038c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d01b      	beq.n	80038c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f06f 0202 	mvn.w	r2, #2
 8003898:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	f003 0303 	and.w	r3, r3, #3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f9b4 	bl	8003c1c <HAL_TIM_IC_CaptureCallback>
 80038b4:	e005      	b.n	80038c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 f9a6 	bl	8003c08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 f9b7 	bl	8003c30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	f003 0304 	and.w	r3, r3, #4
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d020      	beq.n	8003914 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f003 0304 	and.w	r3, r3, #4
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d01b      	beq.n	8003914 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f06f 0204 	mvn.w	r2, #4
 80038e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2202      	movs	r2, #2
 80038ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d003      	beq.n	8003902 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 f98e 	bl	8003c1c <HAL_TIM_IC_CaptureCallback>
 8003900:	e005      	b.n	800390e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 f980 	bl	8003c08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 f991 	bl	8003c30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	f003 0308 	and.w	r3, r3, #8
 800391a:	2b00      	cmp	r3, #0
 800391c:	d020      	beq.n	8003960 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f003 0308 	and.w	r3, r3, #8
 8003924:	2b00      	cmp	r3, #0
 8003926:	d01b      	beq.n	8003960 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f06f 0208 	mvn.w	r2, #8
 8003930:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2204      	movs	r2, #4
 8003936:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	69db      	ldr	r3, [r3, #28]
 800393e:	f003 0303 	and.w	r3, r3, #3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d003      	beq.n	800394e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f968 	bl	8003c1c <HAL_TIM_IC_CaptureCallback>
 800394c:	e005      	b.n	800395a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f95a 	bl	8003c08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 f96b 	bl	8003c30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	f003 0310 	and.w	r3, r3, #16
 8003966:	2b00      	cmp	r3, #0
 8003968:	d020      	beq.n	80039ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f003 0310 	and.w	r3, r3, #16
 8003970:	2b00      	cmp	r3, #0
 8003972:	d01b      	beq.n	80039ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f06f 0210 	mvn.w	r2, #16
 800397c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2208      	movs	r2, #8
 8003982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	69db      	ldr	r3, [r3, #28]
 800398a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800398e:	2b00      	cmp	r3, #0
 8003990:	d003      	beq.n	800399a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f942 	bl	8003c1c <HAL_TIM_IC_CaptureCallback>
 8003998:	e005      	b.n	80039a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f934 	bl	8003c08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 f945 	bl	8003c30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00c      	beq.n	80039d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d007      	beq.n	80039d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f06f 0201 	mvn.w	r2, #1
 80039c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7fd f82a 	bl	8000a24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d104      	bne.n	80039e4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00c      	beq.n	80039fe <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d007      	beq.n	80039fe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80039f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f000 fb0b 	bl	8004014 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00c      	beq.n	8003a22 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d007      	beq.n	8003a22 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003a1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 fb03 	bl	8004028 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00c      	beq.n	8003a46 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d007      	beq.n	8003a46 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f000 f8ff 	bl	8003c44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	f003 0320 	and.w	r3, r3, #32
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d00c      	beq.n	8003a6a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f003 0320 	and.w	r3, r3, #32
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d007      	beq.n	8003a6a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f06f 0220 	mvn.w	r2, #32
 8003a62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 facb 	bl	8004000 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a6a:	bf00      	nop
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
	...

08003a74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d101      	bne.n	8003a90 <HAL_TIM_ConfigClockSource+0x1c>
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	e0b4      	b.n	8003bfa <HAL_TIM_ConfigClockSource+0x186>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003aa8:	68ba      	ldr	r2, [r7, #8]
 8003aaa:	4b56      	ldr	r3, [pc, #344]	; (8003c04 <HAL_TIM_ConfigClockSource+0x190>)
 8003aac:	4013      	ands	r3, r2
 8003aae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ab6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ac8:	d03e      	beq.n	8003b48 <HAL_TIM_ConfigClockSource+0xd4>
 8003aca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ace:	f200 8087 	bhi.w	8003be0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ad6:	f000 8086 	beq.w	8003be6 <HAL_TIM_ConfigClockSource+0x172>
 8003ada:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ade:	d87f      	bhi.n	8003be0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ae0:	2b70      	cmp	r3, #112	; 0x70
 8003ae2:	d01a      	beq.n	8003b1a <HAL_TIM_ConfigClockSource+0xa6>
 8003ae4:	2b70      	cmp	r3, #112	; 0x70
 8003ae6:	d87b      	bhi.n	8003be0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ae8:	2b60      	cmp	r3, #96	; 0x60
 8003aea:	d050      	beq.n	8003b8e <HAL_TIM_ConfigClockSource+0x11a>
 8003aec:	2b60      	cmp	r3, #96	; 0x60
 8003aee:	d877      	bhi.n	8003be0 <HAL_TIM_ConfigClockSource+0x16c>
 8003af0:	2b50      	cmp	r3, #80	; 0x50
 8003af2:	d03c      	beq.n	8003b6e <HAL_TIM_ConfigClockSource+0xfa>
 8003af4:	2b50      	cmp	r3, #80	; 0x50
 8003af6:	d873      	bhi.n	8003be0 <HAL_TIM_ConfigClockSource+0x16c>
 8003af8:	2b40      	cmp	r3, #64	; 0x40
 8003afa:	d058      	beq.n	8003bae <HAL_TIM_ConfigClockSource+0x13a>
 8003afc:	2b40      	cmp	r3, #64	; 0x40
 8003afe:	d86f      	bhi.n	8003be0 <HAL_TIM_ConfigClockSource+0x16c>
 8003b00:	2b30      	cmp	r3, #48	; 0x30
 8003b02:	d064      	beq.n	8003bce <HAL_TIM_ConfigClockSource+0x15a>
 8003b04:	2b30      	cmp	r3, #48	; 0x30
 8003b06:	d86b      	bhi.n	8003be0 <HAL_TIM_ConfigClockSource+0x16c>
 8003b08:	2b20      	cmp	r3, #32
 8003b0a:	d060      	beq.n	8003bce <HAL_TIM_ConfigClockSource+0x15a>
 8003b0c:	2b20      	cmp	r3, #32
 8003b0e:	d867      	bhi.n	8003be0 <HAL_TIM_ConfigClockSource+0x16c>
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d05c      	beq.n	8003bce <HAL_TIM_ConfigClockSource+0x15a>
 8003b14:	2b10      	cmp	r3, #16
 8003b16:	d05a      	beq.n	8003bce <HAL_TIM_ConfigClockSource+0x15a>
 8003b18:	e062      	b.n	8003be0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b2a:	f000 f9bb 	bl	8003ea4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68ba      	ldr	r2, [r7, #8]
 8003b44:	609a      	str	r2, [r3, #8]
      break;
 8003b46:	e04f      	b.n	8003be8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b58:	f000 f9a4 	bl	8003ea4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	689a      	ldr	r2, [r3, #8]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b6a:	609a      	str	r2, [r3, #8]
      break;
 8003b6c:	e03c      	b.n	8003be8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	f000 f918 	bl	8003db0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2150      	movs	r1, #80	; 0x50
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 f971 	bl	8003e6e <TIM_ITRx_SetConfig>
      break;
 8003b8c:	e02c      	b.n	8003be8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	f000 f937 	bl	8003e0e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2160      	movs	r1, #96	; 0x60
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 f961 	bl	8003e6e <TIM_ITRx_SetConfig>
      break;
 8003bac:	e01c      	b.n	8003be8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bba:	461a      	mov	r2, r3
 8003bbc:	f000 f8f8 	bl	8003db0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2140      	movs	r1, #64	; 0x40
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f000 f951 	bl	8003e6e <TIM_ITRx_SetConfig>
      break;
 8003bcc:	e00c      	b.n	8003be8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	4610      	mov	r0, r2
 8003bda:	f000 f948 	bl	8003e6e <TIM_ITRx_SetConfig>
      break;
 8003bde:	e003      	b.n	8003be8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	73fb      	strb	r3, [r7, #15]
      break;
 8003be4:	e000      	b.n	8003be8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003be6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	fffeff88 	.word	0xfffeff88

08003c08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a46      	ldr	r2, [pc, #280]	; (8003d84 <TIM_Base_SetConfig+0x12c>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d013      	beq.n	8003c98 <TIM_Base_SetConfig+0x40>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c76:	d00f      	beq.n	8003c98 <TIM_Base_SetConfig+0x40>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a43      	ldr	r2, [pc, #268]	; (8003d88 <TIM_Base_SetConfig+0x130>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d00b      	beq.n	8003c98 <TIM_Base_SetConfig+0x40>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a42      	ldr	r2, [pc, #264]	; (8003d8c <TIM_Base_SetConfig+0x134>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d007      	beq.n	8003c98 <TIM_Base_SetConfig+0x40>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a41      	ldr	r2, [pc, #260]	; (8003d90 <TIM_Base_SetConfig+0x138>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d003      	beq.n	8003c98 <TIM_Base_SetConfig+0x40>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a40      	ldr	r2, [pc, #256]	; (8003d94 <TIM_Base_SetConfig+0x13c>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d108      	bne.n	8003caa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a35      	ldr	r2, [pc, #212]	; (8003d84 <TIM_Base_SetConfig+0x12c>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d02b      	beq.n	8003d0a <TIM_Base_SetConfig+0xb2>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cb8:	d027      	beq.n	8003d0a <TIM_Base_SetConfig+0xb2>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a32      	ldr	r2, [pc, #200]	; (8003d88 <TIM_Base_SetConfig+0x130>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d023      	beq.n	8003d0a <TIM_Base_SetConfig+0xb2>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a31      	ldr	r2, [pc, #196]	; (8003d8c <TIM_Base_SetConfig+0x134>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d01f      	beq.n	8003d0a <TIM_Base_SetConfig+0xb2>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a30      	ldr	r2, [pc, #192]	; (8003d90 <TIM_Base_SetConfig+0x138>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d01b      	beq.n	8003d0a <TIM_Base_SetConfig+0xb2>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a2f      	ldr	r2, [pc, #188]	; (8003d94 <TIM_Base_SetConfig+0x13c>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d017      	beq.n	8003d0a <TIM_Base_SetConfig+0xb2>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a2e      	ldr	r2, [pc, #184]	; (8003d98 <TIM_Base_SetConfig+0x140>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d013      	beq.n	8003d0a <TIM_Base_SetConfig+0xb2>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a2d      	ldr	r2, [pc, #180]	; (8003d9c <TIM_Base_SetConfig+0x144>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d00f      	beq.n	8003d0a <TIM_Base_SetConfig+0xb2>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a2c      	ldr	r2, [pc, #176]	; (8003da0 <TIM_Base_SetConfig+0x148>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d00b      	beq.n	8003d0a <TIM_Base_SetConfig+0xb2>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a2b      	ldr	r2, [pc, #172]	; (8003da4 <TIM_Base_SetConfig+0x14c>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d007      	beq.n	8003d0a <TIM_Base_SetConfig+0xb2>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a2a      	ldr	r2, [pc, #168]	; (8003da8 <TIM_Base_SetConfig+0x150>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d003      	beq.n	8003d0a <TIM_Base_SetConfig+0xb2>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a29      	ldr	r2, [pc, #164]	; (8003dac <TIM_Base_SetConfig+0x154>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d108      	bne.n	8003d1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	689a      	ldr	r2, [r3, #8]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a10      	ldr	r2, [pc, #64]	; (8003d84 <TIM_Base_SetConfig+0x12c>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d003      	beq.n	8003d50 <TIM_Base_SetConfig+0xf8>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a12      	ldr	r2, [pc, #72]	; (8003d94 <TIM_Base_SetConfig+0x13c>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d103      	bne.n	8003d58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	691a      	ldr	r2, [r3, #16]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d105      	bne.n	8003d76 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	f023 0201 	bic.w	r2, r3, #1
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	611a      	str	r2, [r3, #16]
  }
}
 8003d76:	bf00      	nop
 8003d78:	3714      	adds	r7, #20
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	40010000 	.word	0x40010000
 8003d88:	40000400 	.word	0x40000400
 8003d8c:	40000800 	.word	0x40000800
 8003d90:	40000c00 	.word	0x40000c00
 8003d94:	40010400 	.word	0x40010400
 8003d98:	40014000 	.word	0x40014000
 8003d9c:	40014400 	.word	0x40014400
 8003da0:	40014800 	.word	0x40014800
 8003da4:	40001800 	.word	0x40001800
 8003da8:	40001c00 	.word	0x40001c00
 8003dac:	40002000 	.word	0x40002000

08003db0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b087      	sub	sp, #28
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	f023 0201 	bic.w	r2, r3, #1
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	011b      	lsls	r3, r3, #4
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f023 030a 	bic.w	r3, r3, #10
 8003dec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	621a      	str	r2, [r3, #32]
}
 8003e02:	bf00      	nop
 8003e04:	371c      	adds	r7, #28
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr

08003e0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b087      	sub	sp, #28
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	60f8      	str	r0, [r7, #12]
 8003e16:	60b9      	str	r1, [r7, #8]
 8003e18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	f023 0210 	bic.w	r2, r3, #16
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	031b      	lsls	r3, r3, #12
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e4a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	011b      	lsls	r3, r3, #4
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	621a      	str	r2, [r3, #32]
}
 8003e62:	bf00      	nop
 8003e64:	371c      	adds	r7, #28
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b085      	sub	sp, #20
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
 8003e76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e86:	683a      	ldr	r2, [r7, #0]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	f043 0307 	orr.w	r3, r3, #7
 8003e90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	609a      	str	r2, [r3, #8]
}
 8003e98:	bf00      	nop
 8003e9a:	3714      	adds	r7, #20
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b087      	sub	sp, #28
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
 8003eb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ebe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	021a      	lsls	r2, r3, #8
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	609a      	str	r2, [r3, #8]
}
 8003ed8:	bf00      	nop
 8003eda:	371c      	adds	r7, #28
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d101      	bne.n	8003efc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ef8:	2302      	movs	r3, #2
 8003efa:	e06d      	b.n	8003fd8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2202      	movs	r2, #2
 8003f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a30      	ldr	r2, [pc, #192]	; (8003fe4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d004      	beq.n	8003f30 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a2f      	ldr	r2, [pc, #188]	; (8003fe8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d108      	bne.n	8003f42 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003f36:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f48:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a20      	ldr	r2, [pc, #128]	; (8003fe4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d022      	beq.n	8003fac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f6e:	d01d      	beq.n	8003fac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a1d      	ldr	r2, [pc, #116]	; (8003fec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d018      	beq.n	8003fac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a1c      	ldr	r2, [pc, #112]	; (8003ff0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d013      	beq.n	8003fac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a1a      	ldr	r2, [pc, #104]	; (8003ff4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d00e      	beq.n	8003fac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a15      	ldr	r2, [pc, #84]	; (8003fe8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d009      	beq.n	8003fac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a16      	ldr	r2, [pc, #88]	; (8003ff8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d004      	beq.n	8003fac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a15      	ldr	r2, [pc, #84]	; (8003ffc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d10c      	bne.n	8003fc6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fb2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	68ba      	ldr	r2, [r7, #8]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3714      	adds	r7, #20
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr
 8003fe4:	40010000 	.word	0x40010000
 8003fe8:	40010400 	.word	0x40010400
 8003fec:	40000400 	.word	0x40000400
 8003ff0:	40000800 	.word	0x40000800
 8003ff4:	40000c00 	.word	0x40000c00
 8003ff8:	40014000 	.word	0x40014000
 8003ffc:	40001800 	.word	0x40001800

08004000 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8004042:	4b87      	ldr	r3, [pc, #540]	; (8004260 <MX_LWIP_Init+0x224>)
 8004044:	22c0      	movs	r2, #192	; 0xc0
 8004046:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004048:	4b85      	ldr	r3, [pc, #532]	; (8004260 <MX_LWIP_Init+0x224>)
 800404a:	22a8      	movs	r2, #168	; 0xa8
 800404c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 5;
 800404e:	4b84      	ldr	r3, [pc, #528]	; (8004260 <MX_LWIP_Init+0x224>)
 8004050:	2205      	movs	r2, #5
 8004052:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 21;
 8004054:	4b82      	ldr	r3, [pc, #520]	; (8004260 <MX_LWIP_Init+0x224>)
 8004056:	2215      	movs	r2, #21
 8004058:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800405a:	4b82      	ldr	r3, [pc, #520]	; (8004264 <MX_LWIP_Init+0x228>)
 800405c:	22ff      	movs	r2, #255	; 0xff
 800405e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004060:	4b80      	ldr	r3, [pc, #512]	; (8004264 <MX_LWIP_Init+0x228>)
 8004062:	22ff      	movs	r2, #255	; 0xff
 8004064:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004066:	4b7f      	ldr	r3, [pc, #508]	; (8004264 <MX_LWIP_Init+0x228>)
 8004068:	22ff      	movs	r2, #255	; 0xff
 800406a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800406c:	4b7d      	ldr	r3, [pc, #500]	; (8004264 <MX_LWIP_Init+0x228>)
 800406e:	2200      	movs	r2, #0
 8004070:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8004072:	4b7d      	ldr	r3, [pc, #500]	; (8004268 <MX_LWIP_Init+0x22c>)
 8004074:	22c0      	movs	r2, #192	; 0xc0
 8004076:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004078:	4b7b      	ldr	r3, [pc, #492]	; (8004268 <MX_LWIP_Init+0x22c>)
 800407a:	22a8      	movs	r2, #168	; 0xa8
 800407c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 5;
 800407e:	4b7a      	ldr	r3, [pc, #488]	; (8004268 <MX_LWIP_Init+0x22c>)
 8004080:	2205      	movs	r2, #5
 8004082:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004084:	4b78      	ldr	r3, [pc, #480]	; (8004268 <MX_LWIP_Init+0x22c>)
 8004086:	2201      	movs	r2, #1
 8004088:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800408a:	f000 fd11 	bl	8004ab0 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800408e:	4b74      	ldr	r3, [pc, #464]	; (8004260 <MX_LWIP_Init+0x224>)
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	061a      	lsls	r2, r3, #24
 8004094:	4b72      	ldr	r3, [pc, #456]	; (8004260 <MX_LWIP_Init+0x224>)
 8004096:	785b      	ldrb	r3, [r3, #1]
 8004098:	041b      	lsls	r3, r3, #16
 800409a:	431a      	orrs	r2, r3
 800409c:	4b70      	ldr	r3, [pc, #448]	; (8004260 <MX_LWIP_Init+0x224>)
 800409e:	789b      	ldrb	r3, [r3, #2]
 80040a0:	021b      	lsls	r3, r3, #8
 80040a2:	4313      	orrs	r3, r2
 80040a4:	4a6e      	ldr	r2, [pc, #440]	; (8004260 <MX_LWIP_Init+0x224>)
 80040a6:	78d2      	ldrb	r2, [r2, #3]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	061a      	lsls	r2, r3, #24
 80040ac:	4b6c      	ldr	r3, [pc, #432]	; (8004260 <MX_LWIP_Init+0x224>)
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	0619      	lsls	r1, r3, #24
 80040b2:	4b6b      	ldr	r3, [pc, #428]	; (8004260 <MX_LWIP_Init+0x224>)
 80040b4:	785b      	ldrb	r3, [r3, #1]
 80040b6:	041b      	lsls	r3, r3, #16
 80040b8:	4319      	orrs	r1, r3
 80040ba:	4b69      	ldr	r3, [pc, #420]	; (8004260 <MX_LWIP_Init+0x224>)
 80040bc:	789b      	ldrb	r3, [r3, #2]
 80040be:	021b      	lsls	r3, r3, #8
 80040c0:	430b      	orrs	r3, r1
 80040c2:	4967      	ldr	r1, [pc, #412]	; (8004260 <MX_LWIP_Init+0x224>)
 80040c4:	78c9      	ldrb	r1, [r1, #3]
 80040c6:	430b      	orrs	r3, r1
 80040c8:	021b      	lsls	r3, r3, #8
 80040ca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80040ce:	431a      	orrs	r2, r3
 80040d0:	4b63      	ldr	r3, [pc, #396]	; (8004260 <MX_LWIP_Init+0x224>)
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	0619      	lsls	r1, r3, #24
 80040d6:	4b62      	ldr	r3, [pc, #392]	; (8004260 <MX_LWIP_Init+0x224>)
 80040d8:	785b      	ldrb	r3, [r3, #1]
 80040da:	041b      	lsls	r3, r3, #16
 80040dc:	4319      	orrs	r1, r3
 80040de:	4b60      	ldr	r3, [pc, #384]	; (8004260 <MX_LWIP_Init+0x224>)
 80040e0:	789b      	ldrb	r3, [r3, #2]
 80040e2:	021b      	lsls	r3, r3, #8
 80040e4:	430b      	orrs	r3, r1
 80040e6:	495e      	ldr	r1, [pc, #376]	; (8004260 <MX_LWIP_Init+0x224>)
 80040e8:	78c9      	ldrb	r1, [r1, #3]
 80040ea:	430b      	orrs	r3, r1
 80040ec:	0a1b      	lsrs	r3, r3, #8
 80040ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80040f2:	431a      	orrs	r2, r3
 80040f4:	4b5a      	ldr	r3, [pc, #360]	; (8004260 <MX_LWIP_Init+0x224>)
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	0619      	lsls	r1, r3, #24
 80040fa:	4b59      	ldr	r3, [pc, #356]	; (8004260 <MX_LWIP_Init+0x224>)
 80040fc:	785b      	ldrb	r3, [r3, #1]
 80040fe:	041b      	lsls	r3, r3, #16
 8004100:	4319      	orrs	r1, r3
 8004102:	4b57      	ldr	r3, [pc, #348]	; (8004260 <MX_LWIP_Init+0x224>)
 8004104:	789b      	ldrb	r3, [r3, #2]
 8004106:	021b      	lsls	r3, r3, #8
 8004108:	430b      	orrs	r3, r1
 800410a:	4955      	ldr	r1, [pc, #340]	; (8004260 <MX_LWIP_Init+0x224>)
 800410c:	78c9      	ldrb	r1, [r1, #3]
 800410e:	430b      	orrs	r3, r1
 8004110:	0e1b      	lsrs	r3, r3, #24
 8004112:	4313      	orrs	r3, r2
 8004114:	4a55      	ldr	r2, [pc, #340]	; (800426c <MX_LWIP_Init+0x230>)
 8004116:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004118:	4b52      	ldr	r3, [pc, #328]	; (8004264 <MX_LWIP_Init+0x228>)
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	061a      	lsls	r2, r3, #24
 800411e:	4b51      	ldr	r3, [pc, #324]	; (8004264 <MX_LWIP_Init+0x228>)
 8004120:	785b      	ldrb	r3, [r3, #1]
 8004122:	041b      	lsls	r3, r3, #16
 8004124:	431a      	orrs	r2, r3
 8004126:	4b4f      	ldr	r3, [pc, #316]	; (8004264 <MX_LWIP_Init+0x228>)
 8004128:	789b      	ldrb	r3, [r3, #2]
 800412a:	021b      	lsls	r3, r3, #8
 800412c:	4313      	orrs	r3, r2
 800412e:	4a4d      	ldr	r2, [pc, #308]	; (8004264 <MX_LWIP_Init+0x228>)
 8004130:	78d2      	ldrb	r2, [r2, #3]
 8004132:	4313      	orrs	r3, r2
 8004134:	061a      	lsls	r2, r3, #24
 8004136:	4b4b      	ldr	r3, [pc, #300]	; (8004264 <MX_LWIP_Init+0x228>)
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	0619      	lsls	r1, r3, #24
 800413c:	4b49      	ldr	r3, [pc, #292]	; (8004264 <MX_LWIP_Init+0x228>)
 800413e:	785b      	ldrb	r3, [r3, #1]
 8004140:	041b      	lsls	r3, r3, #16
 8004142:	4319      	orrs	r1, r3
 8004144:	4b47      	ldr	r3, [pc, #284]	; (8004264 <MX_LWIP_Init+0x228>)
 8004146:	789b      	ldrb	r3, [r3, #2]
 8004148:	021b      	lsls	r3, r3, #8
 800414a:	430b      	orrs	r3, r1
 800414c:	4945      	ldr	r1, [pc, #276]	; (8004264 <MX_LWIP_Init+0x228>)
 800414e:	78c9      	ldrb	r1, [r1, #3]
 8004150:	430b      	orrs	r3, r1
 8004152:	021b      	lsls	r3, r3, #8
 8004154:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004158:	431a      	orrs	r2, r3
 800415a:	4b42      	ldr	r3, [pc, #264]	; (8004264 <MX_LWIP_Init+0x228>)
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	0619      	lsls	r1, r3, #24
 8004160:	4b40      	ldr	r3, [pc, #256]	; (8004264 <MX_LWIP_Init+0x228>)
 8004162:	785b      	ldrb	r3, [r3, #1]
 8004164:	041b      	lsls	r3, r3, #16
 8004166:	4319      	orrs	r1, r3
 8004168:	4b3e      	ldr	r3, [pc, #248]	; (8004264 <MX_LWIP_Init+0x228>)
 800416a:	789b      	ldrb	r3, [r3, #2]
 800416c:	021b      	lsls	r3, r3, #8
 800416e:	430b      	orrs	r3, r1
 8004170:	493c      	ldr	r1, [pc, #240]	; (8004264 <MX_LWIP_Init+0x228>)
 8004172:	78c9      	ldrb	r1, [r1, #3]
 8004174:	430b      	orrs	r3, r1
 8004176:	0a1b      	lsrs	r3, r3, #8
 8004178:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800417c:	431a      	orrs	r2, r3
 800417e:	4b39      	ldr	r3, [pc, #228]	; (8004264 <MX_LWIP_Init+0x228>)
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	0619      	lsls	r1, r3, #24
 8004184:	4b37      	ldr	r3, [pc, #220]	; (8004264 <MX_LWIP_Init+0x228>)
 8004186:	785b      	ldrb	r3, [r3, #1]
 8004188:	041b      	lsls	r3, r3, #16
 800418a:	4319      	orrs	r1, r3
 800418c:	4b35      	ldr	r3, [pc, #212]	; (8004264 <MX_LWIP_Init+0x228>)
 800418e:	789b      	ldrb	r3, [r3, #2]
 8004190:	021b      	lsls	r3, r3, #8
 8004192:	430b      	orrs	r3, r1
 8004194:	4933      	ldr	r1, [pc, #204]	; (8004264 <MX_LWIP_Init+0x228>)
 8004196:	78c9      	ldrb	r1, [r1, #3]
 8004198:	430b      	orrs	r3, r1
 800419a:	0e1b      	lsrs	r3, r3, #24
 800419c:	4313      	orrs	r3, r2
 800419e:	4a34      	ldr	r2, [pc, #208]	; (8004270 <MX_LWIP_Init+0x234>)
 80041a0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80041a2:	4b31      	ldr	r3, [pc, #196]	; (8004268 <MX_LWIP_Init+0x22c>)
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	061a      	lsls	r2, r3, #24
 80041a8:	4b2f      	ldr	r3, [pc, #188]	; (8004268 <MX_LWIP_Init+0x22c>)
 80041aa:	785b      	ldrb	r3, [r3, #1]
 80041ac:	041b      	lsls	r3, r3, #16
 80041ae:	431a      	orrs	r2, r3
 80041b0:	4b2d      	ldr	r3, [pc, #180]	; (8004268 <MX_LWIP_Init+0x22c>)
 80041b2:	789b      	ldrb	r3, [r3, #2]
 80041b4:	021b      	lsls	r3, r3, #8
 80041b6:	4313      	orrs	r3, r2
 80041b8:	4a2b      	ldr	r2, [pc, #172]	; (8004268 <MX_LWIP_Init+0x22c>)
 80041ba:	78d2      	ldrb	r2, [r2, #3]
 80041bc:	4313      	orrs	r3, r2
 80041be:	061a      	lsls	r2, r3, #24
 80041c0:	4b29      	ldr	r3, [pc, #164]	; (8004268 <MX_LWIP_Init+0x22c>)
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	0619      	lsls	r1, r3, #24
 80041c6:	4b28      	ldr	r3, [pc, #160]	; (8004268 <MX_LWIP_Init+0x22c>)
 80041c8:	785b      	ldrb	r3, [r3, #1]
 80041ca:	041b      	lsls	r3, r3, #16
 80041cc:	4319      	orrs	r1, r3
 80041ce:	4b26      	ldr	r3, [pc, #152]	; (8004268 <MX_LWIP_Init+0x22c>)
 80041d0:	789b      	ldrb	r3, [r3, #2]
 80041d2:	021b      	lsls	r3, r3, #8
 80041d4:	430b      	orrs	r3, r1
 80041d6:	4924      	ldr	r1, [pc, #144]	; (8004268 <MX_LWIP_Init+0x22c>)
 80041d8:	78c9      	ldrb	r1, [r1, #3]
 80041da:	430b      	orrs	r3, r1
 80041dc:	021b      	lsls	r3, r3, #8
 80041de:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80041e2:	431a      	orrs	r2, r3
 80041e4:	4b20      	ldr	r3, [pc, #128]	; (8004268 <MX_LWIP_Init+0x22c>)
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	0619      	lsls	r1, r3, #24
 80041ea:	4b1f      	ldr	r3, [pc, #124]	; (8004268 <MX_LWIP_Init+0x22c>)
 80041ec:	785b      	ldrb	r3, [r3, #1]
 80041ee:	041b      	lsls	r3, r3, #16
 80041f0:	4319      	orrs	r1, r3
 80041f2:	4b1d      	ldr	r3, [pc, #116]	; (8004268 <MX_LWIP_Init+0x22c>)
 80041f4:	789b      	ldrb	r3, [r3, #2]
 80041f6:	021b      	lsls	r3, r3, #8
 80041f8:	430b      	orrs	r3, r1
 80041fa:	491b      	ldr	r1, [pc, #108]	; (8004268 <MX_LWIP_Init+0x22c>)
 80041fc:	78c9      	ldrb	r1, [r1, #3]
 80041fe:	430b      	orrs	r3, r1
 8004200:	0a1b      	lsrs	r3, r3, #8
 8004202:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004206:	431a      	orrs	r2, r3
 8004208:	4b17      	ldr	r3, [pc, #92]	; (8004268 <MX_LWIP_Init+0x22c>)
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	0619      	lsls	r1, r3, #24
 800420e:	4b16      	ldr	r3, [pc, #88]	; (8004268 <MX_LWIP_Init+0x22c>)
 8004210:	785b      	ldrb	r3, [r3, #1]
 8004212:	041b      	lsls	r3, r3, #16
 8004214:	4319      	orrs	r1, r3
 8004216:	4b14      	ldr	r3, [pc, #80]	; (8004268 <MX_LWIP_Init+0x22c>)
 8004218:	789b      	ldrb	r3, [r3, #2]
 800421a:	021b      	lsls	r3, r3, #8
 800421c:	430b      	orrs	r3, r1
 800421e:	4912      	ldr	r1, [pc, #72]	; (8004268 <MX_LWIP_Init+0x22c>)
 8004220:	78c9      	ldrb	r1, [r1, #3]
 8004222:	430b      	orrs	r3, r1
 8004224:	0e1b      	lsrs	r3, r3, #24
 8004226:	4313      	orrs	r3, r2
 8004228:	4a12      	ldr	r2, [pc, #72]	; (8004274 <MX_LWIP_Init+0x238>)
 800422a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800422c:	4b12      	ldr	r3, [pc, #72]	; (8004278 <MX_LWIP_Init+0x23c>)
 800422e:	9302      	str	r3, [sp, #8]
 8004230:	4b12      	ldr	r3, [pc, #72]	; (800427c <MX_LWIP_Init+0x240>)
 8004232:	9301      	str	r3, [sp, #4]
 8004234:	2300      	movs	r3, #0
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	4b0e      	ldr	r3, [pc, #56]	; (8004274 <MX_LWIP_Init+0x238>)
 800423a:	4a0d      	ldr	r2, [pc, #52]	; (8004270 <MX_LWIP_Init+0x234>)
 800423c:	490b      	ldr	r1, [pc, #44]	; (800426c <MX_LWIP_Init+0x230>)
 800423e:	4810      	ldr	r0, [pc, #64]	; (8004280 <MX_LWIP_Init+0x244>)
 8004240:	f001 f922 	bl	8005488 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004244:	480e      	ldr	r0, [pc, #56]	; (8004280 <MX_LWIP_Init+0x244>)
 8004246:	f001 fad1 	bl	80057ec <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800424a:	480d      	ldr	r0, [pc, #52]	; (8004280 <MX_LWIP_Init+0x244>)
 800424c:	f001 fade 	bl	800580c <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004250:	490c      	ldr	r1, [pc, #48]	; (8004284 <MX_LWIP_Init+0x248>)
 8004252:	480b      	ldr	r0, [pc, #44]	; (8004280 <MX_LWIP_Init+0x244>)
 8004254:	f001 fbdc 	bl	8005a10 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004258:	bf00      	nop
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	200002e4 	.word	0x200002e4
 8004264:	200002e8 	.word	0x200002e8
 8004268:	200002ec 	.word	0x200002ec
 800426c:	200002d8 	.word	0x200002d8
 8004270:	200002dc 	.word	0x200002dc
 8004274:	200002e0 	.word	0x200002e0
 8004278:	0800e599 	.word	0x0800e599
 800427c:	0800459d 	.word	0x0800459d
 8004280:	200002a4 	.word	0x200002a4
 8004284:	08004289 	.word	0x08004289

08004288 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <SCB_InvalidateDCache_by_Addr>:
{
 800429c:	b480      	push	{r7}
 800429e:	b087      	sub	sp, #28
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 80042ae:	2320      	movs	r3, #32
 80042b0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80042b2:	f3bf 8f4f 	dsb	sy
}
 80042b6:	bf00      	nop
    while (op_size > 0) {
 80042b8:	e00b      	b.n	80042d2 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 80042ba:	4a0d      	ldr	r2, [pc, #52]	; (80042f0 <SCB_InvalidateDCache_by_Addr+0x54>)
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	4413      	add	r3, r2
 80042c8:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	dcf0      	bgt.n	80042ba <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 80042d8:	f3bf 8f4f 	dsb	sy
}
 80042dc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80042de:	f3bf 8f6f 	isb	sy
}
 80042e2:	bf00      	nop
}
 80042e4:	bf00      	nop
 80042e6:	371c      	adds	r7, #28
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr
 80042f0:	e000ed00 	.word	0xe000ed00

080042f4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80042fc:	2300      	movs	r3, #0
 80042fe:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004300:	4b40      	ldr	r3, [pc, #256]	; (8004404 <low_level_init+0x110>)
 8004302:	4a41      	ldr	r2, [pc, #260]	; (8004408 <low_level_init+0x114>)
 8004304:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004306:	2300      	movs	r3, #0
 8004308:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800430a:	2380      	movs	r3, #128	; 0x80
 800430c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800430e:	23e1      	movs	r3, #225	; 0xe1
 8004310:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004312:	2300      	movs	r3, #0
 8004314:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004316:	2300      	movs	r3, #0
 8004318:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x20;
 800431a:	2320      	movs	r3, #32
 800431c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800431e:	4a39      	ldr	r2, [pc, #228]	; (8004404 <low_level_init+0x110>)
 8004320:	f107 0308 	add.w	r3, r7, #8
 8004324:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004326:	4b37      	ldr	r3, [pc, #220]	; (8004404 <low_level_init+0x110>)
 8004328:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800432c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800432e:	4b35      	ldr	r3, [pc, #212]	; (8004404 <low_level_init+0x110>)
 8004330:	4a36      	ldr	r2, [pc, #216]	; (800440c <low_level_init+0x118>)
 8004332:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004334:	4b33      	ldr	r3, [pc, #204]	; (8004404 <low_level_init+0x110>)
 8004336:	4a36      	ldr	r2, [pc, #216]	; (8004410 <low_level_init+0x11c>)
 8004338:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800433a:	4b32      	ldr	r3, [pc, #200]	; (8004404 <low_level_init+0x110>)
 800433c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004340:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004342:	4830      	ldr	r0, [pc, #192]	; (8004404 <low_level_init+0x110>)
 8004344:	f7fd f8ce 	bl	80014e4 <HAL_ETH_Init>
 8004348:	4603      	mov	r3, r0
 800434a:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800434c:	2238      	movs	r2, #56	; 0x38
 800434e:	2100      	movs	r1, #0
 8004350:	4830      	ldr	r0, [pc, #192]	; (8004414 <low_level_init+0x120>)
 8004352:	f00a fb5c 	bl	800ea0e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004356:	4b2f      	ldr	r3, [pc, #188]	; (8004414 <low_level_init+0x120>)
 8004358:	2221      	movs	r2, #33	; 0x21
 800435a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800435c:	4b2d      	ldr	r3, [pc, #180]	; (8004414 <low_level_init+0x120>)
 800435e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8004362:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004364:	4b2b      	ldr	r3, [pc, #172]	; (8004414 <low_level_init+0x120>)
 8004366:	2200      	movs	r2, #0
 8004368:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800436a:	482b      	ldr	r0, [pc, #172]	; (8004418 <low_level_init+0x124>)
 800436c:	f000 ff54 	bl	8005218 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2206      	movs	r2, #6
 8004374:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004378:	4b22      	ldr	r3, [pc, #136]	; (8004404 <low_level_init+0x110>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	781a      	ldrb	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004384:	4b1f      	ldr	r3, [pc, #124]	; (8004404 <low_level_init+0x110>)
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	785a      	ldrb	r2, [r3, #1]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004390:	4b1c      	ldr	r3, [pc, #112]	; (8004404 <low_level_init+0x110>)
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	789a      	ldrb	r2, [r3, #2]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800439c:	4b19      	ldr	r3, [pc, #100]	; (8004404 <low_level_init+0x110>)
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	78da      	ldrb	r2, [r3, #3]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80043a8:	4b16      	ldr	r3, [pc, #88]	; (8004404 <low_level_init+0x110>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	791a      	ldrb	r2, [r3, #4]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80043b4:	4b13      	ldr	r3, [pc, #76]	; (8004404 <low_level_init+0x110>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	795a      	ldrb	r2, [r3, #5]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80043c6:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80043ce:	f043 030a 	orr.w	r3, r3, #10
 80043d2:	b2da      	uxtb	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80043da:	4910      	ldr	r1, [pc, #64]	; (800441c <low_level_init+0x128>)
 80043dc:	4810      	ldr	r0, [pc, #64]	; (8004420 <low_level_init+0x12c>)
 80043de:	f7fc fd66 	bl	8000eae <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 80043e2:	480f      	ldr	r0, [pc, #60]	; (8004420 <low_level_init+0x12c>)
 80043e4:	f7fc fd95 	bl	8000f12 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 80043e8:	7bfb      	ldrb	r3, [r7, #15]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d103      	bne.n	80043f6 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 fa32 	bl	8004858 <ethernet_link_check_state>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 80043f4:	e001      	b.n	80043fa <low_level_init+0x106>
    Error_Handler();
 80043f6:	f7fc fbb5 	bl	8000b64 <Error_Handler>
}
 80043fa:	bf00      	nop
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	20004c7c 	.word	0x20004c7c
 8004408:	40028000 	.word	0x40028000
 800440c:	20000128 	.word	0x20000128
 8004410:	20000088 	.word	0x20000088
 8004414:	20004d2c 	.word	0x20004d2c
 8004418:	08012194 	.word	0x08012194
 800441c:	2000000c 	.word	0x2000000c
 8004420:	20004d64 	.word	0x20004d64

08004424 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b092      	sub	sp, #72	; 0x48
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800442e:	2300      	movs	r3, #0
 8004430:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8004432:	2300      	movs	r3, #0
 8004434:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8004436:	2300      	movs	r3, #0
 8004438:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800443c:	f107 030c 	add.w	r3, r7, #12
 8004440:	2230      	movs	r2, #48	; 0x30
 8004442:	2100      	movs	r1, #0
 8004444:	4618      	mov	r0, r3
 8004446:	f00a fae2 	bl	800ea0e <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800444a:	f107 030c 	add.w	r3, r7, #12
 800444e:	2230      	movs	r2, #48	; 0x30
 8004450:	2100      	movs	r1, #0
 8004452:	4618      	mov	r0, r3
 8004454:	f00a fadb 	bl	800ea0e <memset>

  for(q = p; q != NULL; q = q->next)
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	643b      	str	r3, [r7, #64]	; 0x40
 800445c:	e045      	b.n	80044ea <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800445e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004460:	2b03      	cmp	r3, #3
 8004462:	d902      	bls.n	800446a <low_level_output+0x46>
      return ERR_IF;
 8004464:	f06f 030b 	mvn.w	r3, #11
 8004468:	e055      	b.n	8004516 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800446a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800446c:	6859      	ldr	r1, [r3, #4]
 800446e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004470:	4613      	mov	r3, r2
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	4413      	add	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	3348      	adds	r3, #72	; 0x48
 800447a:	443b      	add	r3, r7
 800447c:	3b3c      	subs	r3, #60	; 0x3c
 800447e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8004480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004482:	895b      	ldrh	r3, [r3, #10]
 8004484:	4619      	mov	r1, r3
 8004486:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004488:	4613      	mov	r3, r2
 800448a:	005b      	lsls	r3, r3, #1
 800448c:	4413      	add	r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	3348      	adds	r3, #72	; 0x48
 8004492:	443b      	add	r3, r7
 8004494:	3b38      	subs	r3, #56	; 0x38
 8004496:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004498:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800449a:	2b00      	cmp	r3, #0
 800449c:	d011      	beq.n	80044c2 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800449e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044a0:	1e5a      	subs	r2, r3, #1
 80044a2:	f107 000c 	add.w	r0, r7, #12
 80044a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80044a8:	460b      	mov	r3, r1
 80044aa:	005b      	lsls	r3, r3, #1
 80044ac:	440b      	add	r3, r1
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	18c1      	adds	r1, r0, r3
 80044b2:	4613      	mov	r3, r2
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	4413      	add	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	3348      	adds	r3, #72	; 0x48
 80044bc:	443b      	add	r3, r7
 80044be:	3b34      	subs	r3, #52	; 0x34
 80044c0:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80044c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d109      	bne.n	80044de <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80044ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044cc:	4613      	mov	r3, r2
 80044ce:	005b      	lsls	r3, r3, #1
 80044d0:	4413      	add	r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	3348      	adds	r3, #72	; 0x48
 80044d6:	443b      	add	r3, r7
 80044d8:	3b34      	subs	r3, #52	; 0x34
 80044da:	2200      	movs	r2, #0
 80044dc:	601a      	str	r2, [r3, #0]
    }

    i++;
 80044de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044e0:	3301      	adds	r3, #1
 80044e2:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80044e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	643b      	str	r3, [r7, #64]	; 0x40
 80044ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1b6      	bne.n	800445e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	891b      	ldrh	r3, [r3, #8]
 80044f4:	461a      	mov	r2, r3
 80044f6:	4b0a      	ldr	r3, [pc, #40]	; (8004520 <low_level_output+0xfc>)
 80044f8:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80044fa:	4a09      	ldr	r2, [pc, #36]	; (8004520 <low_level_output+0xfc>)
 80044fc:	f107 030c 	add.w	r3, r7, #12
 8004500:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004502:	4a07      	ldr	r2, [pc, #28]	; (8004520 <low_level_output+0xfc>)
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8004508:	2214      	movs	r2, #20
 800450a:	4905      	ldr	r1, [pc, #20]	; (8004520 <low_level_output+0xfc>)
 800450c:	4805      	ldr	r0, [pc, #20]	; (8004524 <low_level_output+0x100>)
 800450e:	f7fd f93b 	bl	8001788 <HAL_ETH_Transmit>

  return errval;
 8004512:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8004516:	4618      	mov	r0, r3
 8004518:	3748      	adds	r7, #72	; 0x48
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	20004d2c 	.word	0x20004d2c
 8004524:	20004c7c 	.word	0x20004c7c

08004528 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004530:	2300      	movs	r3, #0
 8004532:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8004534:	4b07      	ldr	r3, [pc, #28]	; (8004554 <low_level_input+0x2c>)
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d105      	bne.n	8004548 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800453c:	f107 030c 	add.w	r3, r7, #12
 8004540:	4619      	mov	r1, r3
 8004542:	4805      	ldr	r0, [pc, #20]	; (8004558 <low_level_input+0x30>)
 8004544:	f7fd f9b4 	bl	80018b0 <HAL_ETH_ReadData>
  }

  return p;
 8004548:	68fb      	ldr	r3, [r7, #12]
}
 800454a:	4618      	mov	r0, r3
 800454c:	3710      	adds	r7, #16
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	20004c78 	.word	0x20004c78
 8004558:	20004c7c 	.word	0x20004c7c

0800455c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004564:	2300      	movs	r3, #0
 8004566:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f7ff ffdd 	bl	8004528 <low_level_input>
 800456e:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00a      	beq.n	800458c <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	6879      	ldr	r1, [r7, #4]
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	4798      	blx	r3
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d002      	beq.n	800458c <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f001 fdc2 	bl	8006110 <pbuf_free>
      }
    }
  } while(p!=NULL);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1ea      	bne.n	8004568 <ethernetif_input+0xc>
}
 8004592:	bf00      	nop
 8004594:	bf00      	nop
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d106      	bne.n	80045b8 <ethernetif_init+0x1c>
 80045aa:	4b0e      	ldr	r3, [pc, #56]	; (80045e4 <ethernetif_init+0x48>)
 80045ac:	f240 127b 	movw	r2, #379	; 0x17b
 80045b0:	490d      	ldr	r1, [pc, #52]	; (80045e8 <ethernetif_init+0x4c>)
 80045b2:	480e      	ldr	r0, [pc, #56]	; (80045ec <ethernetif_init+0x50>)
 80045b4:	f00a f9c6 	bl	800e944 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2273      	movs	r2, #115	; 0x73
 80045bc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2274      	movs	r2, #116	; 0x74
 80045c4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a09      	ldr	r2, [pc, #36]	; (80045f0 <ethernetif_init+0x54>)
 80045cc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a08      	ldr	r2, [pc, #32]	; (80045f4 <ethernetif_init+0x58>)
 80045d2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f7ff fe8d 	bl	80042f4 <low_level_init>

  return ERR_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3708      	adds	r7, #8
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	0800f7a4 	.word	0x0800f7a4
 80045e8:	0800f7c0 	.word	0x0800f7c0
 80045ec:	0800f7d0 	.word	0x0800f7d0
 80045f0:	0800ca51 	.word	0x0800ca51
 80045f4:	08004425 	.word	0x08004425

080045f8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004604:	68f9      	ldr	r1, [r7, #12]
 8004606:	4807      	ldr	r0, [pc, #28]	; (8004624 <pbuf_free_custom+0x2c>)
 8004608:	f000 fee8 	bl	80053dc <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800460c:	4b06      	ldr	r3, [pc, #24]	; (8004628 <pbuf_free_custom+0x30>)
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d102      	bne.n	800461a <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004614:	4b04      	ldr	r3, [pc, #16]	; (8004628 <pbuf_free_custom+0x30>)
 8004616:	2200      	movs	r2, #0
 8004618:	701a      	strb	r2, [r3, #0]
  }
}
 800461a:	bf00      	nop
 800461c:	3710      	adds	r7, #16
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	08012194 	.word	0x08012194
 8004628:	20004c78 	.word	0x20004c78

0800462c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004630:	f7fc fd9e 	bl	8001170 <HAL_GetTick>
 8004634:	4603      	mov	r3, r0
}
 8004636:	4618      	mov	r0, r3
 8004638:	bd80      	pop	{r7, pc}
	...

0800463c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b08e      	sub	sp, #56	; 0x38
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004644:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004648:	2200      	movs	r2, #0
 800464a:	601a      	str	r2, [r3, #0]
 800464c:	605a      	str	r2, [r3, #4]
 800464e:	609a      	str	r2, [r3, #8]
 8004650:	60da      	str	r2, [r3, #12]
 8004652:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a52      	ldr	r2, [pc, #328]	; (80047a4 <HAL_ETH_MspInit+0x168>)
 800465a:	4293      	cmp	r3, r2
 800465c:	f040 809e 	bne.w	800479c <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004660:	4b51      	ldr	r3, [pc, #324]	; (80047a8 <HAL_ETH_MspInit+0x16c>)
 8004662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004664:	4a50      	ldr	r2, [pc, #320]	; (80047a8 <HAL_ETH_MspInit+0x16c>)
 8004666:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800466a:	6313      	str	r3, [r2, #48]	; 0x30
 800466c:	4b4e      	ldr	r3, [pc, #312]	; (80047a8 <HAL_ETH_MspInit+0x16c>)
 800466e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004674:	623b      	str	r3, [r7, #32]
 8004676:	6a3b      	ldr	r3, [r7, #32]
 8004678:	4b4b      	ldr	r3, [pc, #300]	; (80047a8 <HAL_ETH_MspInit+0x16c>)
 800467a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467c:	4a4a      	ldr	r2, [pc, #296]	; (80047a8 <HAL_ETH_MspInit+0x16c>)
 800467e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004682:	6313      	str	r3, [r2, #48]	; 0x30
 8004684:	4b48      	ldr	r3, [pc, #288]	; (80047a8 <HAL_ETH_MspInit+0x16c>)
 8004686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004688:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800468c:	61fb      	str	r3, [r7, #28]
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	4b45      	ldr	r3, [pc, #276]	; (80047a8 <HAL_ETH_MspInit+0x16c>)
 8004692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004694:	4a44      	ldr	r2, [pc, #272]	; (80047a8 <HAL_ETH_MspInit+0x16c>)
 8004696:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800469a:	6313      	str	r3, [r2, #48]	; 0x30
 800469c:	4b42      	ldr	r3, [pc, #264]	; (80047a8 <HAL_ETH_MspInit+0x16c>)
 800469e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046a4:	61bb      	str	r3, [r7, #24]
 80046a6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046a8:	4b3f      	ldr	r3, [pc, #252]	; (80047a8 <HAL_ETH_MspInit+0x16c>)
 80046aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ac:	4a3e      	ldr	r2, [pc, #248]	; (80047a8 <HAL_ETH_MspInit+0x16c>)
 80046ae:	f043 0304 	orr.w	r3, r3, #4
 80046b2:	6313      	str	r3, [r2, #48]	; 0x30
 80046b4:	4b3c      	ldr	r3, [pc, #240]	; (80047a8 <HAL_ETH_MspInit+0x16c>)
 80046b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b8:	f003 0304 	and.w	r3, r3, #4
 80046bc:	617b      	str	r3, [r7, #20]
 80046be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046c0:	4b39      	ldr	r3, [pc, #228]	; (80047a8 <HAL_ETH_MspInit+0x16c>)
 80046c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c4:	4a38      	ldr	r2, [pc, #224]	; (80047a8 <HAL_ETH_MspInit+0x16c>)
 80046c6:	f043 0301 	orr.w	r3, r3, #1
 80046ca:	6313      	str	r3, [r2, #48]	; 0x30
 80046cc:	4b36      	ldr	r3, [pc, #216]	; (80047a8 <HAL_ETH_MspInit+0x16c>)
 80046ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d0:	f003 0301 	and.w	r3, r3, #1
 80046d4:	613b      	str	r3, [r7, #16]
 80046d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046d8:	4b33      	ldr	r3, [pc, #204]	; (80047a8 <HAL_ETH_MspInit+0x16c>)
 80046da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046dc:	4a32      	ldr	r2, [pc, #200]	; (80047a8 <HAL_ETH_MspInit+0x16c>)
 80046de:	f043 0302 	orr.w	r3, r3, #2
 80046e2:	6313      	str	r3, [r2, #48]	; 0x30
 80046e4:	4b30      	ldr	r3, [pc, #192]	; (80047a8 <HAL_ETH_MspInit+0x16c>)
 80046e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	60fb      	str	r3, [r7, #12]
 80046ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80046f0:	4b2d      	ldr	r3, [pc, #180]	; (80047a8 <HAL_ETH_MspInit+0x16c>)
 80046f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f4:	4a2c      	ldr	r2, [pc, #176]	; (80047a8 <HAL_ETH_MspInit+0x16c>)
 80046f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046fa:	6313      	str	r3, [r2, #48]	; 0x30
 80046fc:	4b2a      	ldr	r3, [pc, #168]	; (80047a8 <HAL_ETH_MspInit+0x16c>)
 80046fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004704:	60bb      	str	r3, [r7, #8]
 8004706:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004708:	2332      	movs	r3, #50	; 0x32
 800470a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800470c:	2302      	movs	r3, #2
 800470e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004710:	2300      	movs	r3, #0
 8004712:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004714:	2303      	movs	r3, #3
 8004716:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004718:	230b      	movs	r3, #11
 800471a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800471c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004720:	4619      	mov	r1, r3
 8004722:	4822      	ldr	r0, [pc, #136]	; (80047ac <HAL_ETH_MspInit+0x170>)
 8004724:	f7fe f8f4 	bl	8002910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004728:	2386      	movs	r3, #134	; 0x86
 800472a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800472c:	2302      	movs	r3, #2
 800472e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004730:	2300      	movs	r3, #0
 8004732:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004734:	2303      	movs	r3, #3
 8004736:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004738:	230b      	movs	r3, #11
 800473a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800473c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004740:	4619      	mov	r1, r3
 8004742:	481b      	ldr	r0, [pc, #108]	; (80047b0 <HAL_ETH_MspInit+0x174>)
 8004744:	f7fe f8e4 	bl	8002910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004748:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800474c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800474e:	2302      	movs	r3, #2
 8004750:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004752:	2300      	movs	r3, #0
 8004754:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004756:	2303      	movs	r3, #3
 8004758:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800475a:	230b      	movs	r3, #11
 800475c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800475e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004762:	4619      	mov	r1, r3
 8004764:	4813      	ldr	r0, [pc, #76]	; (80047b4 <HAL_ETH_MspInit+0x178>)
 8004766:	f7fe f8d3 	bl	8002910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800476a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800476e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004770:	2302      	movs	r3, #2
 8004772:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004774:	2300      	movs	r3, #0
 8004776:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004778:	2303      	movs	r3, #3
 800477a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800477c:	230b      	movs	r3, #11
 800477e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004784:	4619      	mov	r1, r3
 8004786:	480c      	ldr	r0, [pc, #48]	; (80047b8 <HAL_ETH_MspInit+0x17c>)
 8004788:	f7fe f8c2 	bl	8002910 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 800478c:	2200      	movs	r2, #0
 800478e:	2100      	movs	r1, #0
 8004790:	203d      	movs	r0, #61	; 0x3d
 8004792:	f7fc fdf8 	bl	8001386 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004796:	203d      	movs	r0, #61	; 0x3d
 8004798:	f7fc fe11 	bl	80013be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800479c:	bf00      	nop
 800479e:	3738      	adds	r7, #56	; 0x38
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	40028000 	.word	0x40028000
 80047a8:	40023800 	.word	0x40023800
 80047ac:	40020800 	.word	0x40020800
 80047b0:	40020000 	.word	0x40020000
 80047b4:	40020400 	.word	0x40020400
 80047b8:	40021800 	.word	0x40021800

080047bc <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80047c0:	4802      	ldr	r0, [pc, #8]	; (80047cc <ETH_PHY_IO_Init+0x10>)
 80047c2:	f7fd fc43 	bl	800204c <HAL_ETH_SetMDIOClockRange>

  return 0;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	20004c7c 	.word	0x20004c7c

080047d0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80047d0:	b480      	push	{r7}
 80047d2:	af00      	add	r7, sp, #0
  return 0;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	68f9      	ldr	r1, [r7, #12]
 80047f2:	4807      	ldr	r0, [pc, #28]	; (8004810 <ETH_PHY_IO_ReadReg+0x30>)
 80047f4:	f7fd fa84 	bl	8001d00 <HAL_ETH_ReadPHYRegister>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d002      	beq.n	8004804 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80047fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004802:	e000      	b.n	8004806 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	20004c7c 	.word	0x20004c7c

08004814 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	68f9      	ldr	r1, [r7, #12]
 8004826:	4807      	ldr	r0, [pc, #28]	; (8004844 <ETH_PHY_IO_WriteReg+0x30>)
 8004828:	f7fd fab5 	bl	8001d96 <HAL_ETH_WritePHYRegister>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d002      	beq.n	8004838 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8004832:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004836:	e000      	b.n	800483a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3710      	adds	r7, #16
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	20004c7c 	.word	0x20004c7c

08004848 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800484c:	f7fc fc90 	bl	8001170 <HAL_GetTick>
 8004850:	4603      	mov	r3, r0
}
 8004852:	4618      	mov	r0, r3
 8004854:	bd80      	pop	{r7, pc}
	...

08004858 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b0a0      	sub	sp, #128	; 0x80
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8004860:	f107 030c 	add.w	r3, r7, #12
 8004864:	2264      	movs	r2, #100	; 0x64
 8004866:	2100      	movs	r1, #0
 8004868:	4618      	mov	r0, r3
 800486a:	f00a f8d0 	bl	800ea0e <memset>
  int32_t PHYLinkState = 0;
 800486e:	2300      	movs	r3, #0
 8004870:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8004872:	2300      	movs	r3, #0
 8004874:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004876:	2300      	movs	r3, #0
 8004878:	67bb      	str	r3, [r7, #120]	; 0x78
 800487a:	2300      	movs	r3, #0
 800487c:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800487e:	483a      	ldr	r0, [pc, #232]	; (8004968 <ethernet_link_check_state+0x110>)
 8004880:	f7fc fb94 	bl	8000fac <LAN8742_GetLinkState>
 8004884:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800488c:	089b      	lsrs	r3, r3, #2
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	b2db      	uxtb	r3, r3
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00c      	beq.n	80048b2 <ethernet_link_check_state+0x5a>
 8004898:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800489a:	2b01      	cmp	r3, #1
 800489c:	dc09      	bgt.n	80048b2 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800489e:	4833      	ldr	r0, [pc, #204]	; (800496c <ethernet_link_check_state+0x114>)
 80048a0:	f7fc ff19 	bl	80016d6 <HAL_ETH_Stop>
    netif_set_down(netif);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f001 f81d 	bl	80058e4 <netif_set_down>
    netif_set_link_down(netif);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f001 f880 	bl	80059b0 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 80048b0:	e055      	b.n	800495e <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80048b8:	f003 0304 	and.w	r3, r3, #4
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d14e      	bne.n	800495e <ethernet_link_check_state+0x106>
 80048c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	dd4b      	ble.n	800495e <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 80048c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048c8:	3b02      	subs	r3, #2
 80048ca:	2b03      	cmp	r3, #3
 80048cc:	d82a      	bhi.n	8004924 <ethernet_link_check_state+0xcc>
 80048ce:	a201      	add	r2, pc, #4	; (adr r2, 80048d4 <ethernet_link_check_state+0x7c>)
 80048d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d4:	080048e5 	.word	0x080048e5
 80048d8:	080048f7 	.word	0x080048f7
 80048dc:	08004907 	.word	0x08004907
 80048e0:	08004917 	.word	0x08004917
      duplex = ETH_FULLDUPLEX_MODE;
 80048e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80048e8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80048ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80048ee:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80048f0:	2301      	movs	r3, #1
 80048f2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80048f4:	e017      	b.n	8004926 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80048f6:	2300      	movs	r3, #0
 80048f8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80048fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80048fe:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004900:	2301      	movs	r3, #1
 8004902:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004904:	e00f      	b.n	8004926 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8004906:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800490a:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800490c:	2300      	movs	r3, #0
 800490e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004910:	2301      	movs	r3, #1
 8004912:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004914:	e007      	b.n	8004926 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004916:	2300      	movs	r3, #0
 8004918:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800491a:	2300      	movs	r3, #0
 800491c:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800491e:	2301      	movs	r3, #1
 8004920:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004922:	e000      	b.n	8004926 <ethernet_link_check_state+0xce>
      break;
 8004924:	bf00      	nop
    if(linkchanged)
 8004926:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004928:	2b00      	cmp	r3, #0
 800492a:	d018      	beq.n	800495e <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800492c:	f107 030c 	add.w	r3, r7, #12
 8004930:	4619      	mov	r1, r3
 8004932:	480e      	ldr	r0, [pc, #56]	; (800496c <ethernet_link_check_state+0x114>)
 8004934:	f7fd fa78 	bl	8001e28 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8004938:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800493a:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800493c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800493e:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004940:	f107 030c 	add.w	r3, r7, #12
 8004944:	4619      	mov	r1, r3
 8004946:	4809      	ldr	r0, [pc, #36]	; (800496c <ethernet_link_check_state+0x114>)
 8004948:	f7fd fb65 	bl	8002016 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800494c:	4807      	ldr	r0, [pc, #28]	; (800496c <ethernet_link_check_state+0x114>)
 800494e:	f7fc fe63 	bl	8001618 <HAL_ETH_Start>
      netif_set_up(netif);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 ff5a 	bl	800580c <netif_set_up>
      netif_set_link_up(netif);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 fff5 	bl	8005948 <netif_set_link_up>
}
 800495e:	bf00      	nop
 8004960:	3780      	adds	r7, #128	; 0x80
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	20004d64 	.word	0x20004d64
 800496c:	20004c7c 	.word	0x20004c7c

08004970 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b086      	sub	sp, #24
 8004974:	af02      	add	r7, sp, #8
 8004976:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004978:	4812      	ldr	r0, [pc, #72]	; (80049c4 <HAL_ETH_RxAllocateCallback+0x54>)
 800497a:	f000 fcc1 	bl	8005300 <memp_malloc_pool>
 800497e:	60f8      	str	r0, [r7, #12]
  if (p)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d014      	beq.n	80049b0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f103 0220 	add.w	r2, r3, #32
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	4a0d      	ldr	r2, [pc, #52]	; (80049c8 <HAL_ETH_RxAllocateCallback+0x58>)
 8004994:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800499e:	9201      	str	r2, [sp, #4]
 80049a0:	9300      	str	r3, [sp, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2241      	movs	r2, #65	; 0x41
 80049a6:	2100      	movs	r1, #0
 80049a8:	2000      	movs	r0, #0
 80049aa:	f001 f9f7 	bl	8005d9c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80049ae:	e005      	b.n	80049bc <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80049b0:	4b06      	ldr	r3, [pc, #24]	; (80049cc <HAL_ETH_RxAllocateCallback+0x5c>)
 80049b2:	2201      	movs	r2, #1
 80049b4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	601a      	str	r2, [r3, #0]
}
 80049bc:	bf00      	nop
 80049be:	3710      	adds	r7, #16
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	08012194 	.word	0x08012194
 80049c8:	080045f9 	.word	0x080045f9
 80049cc:	20004c78 	.word	0x20004c78

080049d0 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b088      	sub	sp, #32
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]
 80049dc:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80049e6:	2300      	movs	r3, #0
 80049e8:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	3b20      	subs	r3, #32
 80049ee:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	2200      	movs	r2, #0
 80049f4:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	2200      	movs	r2, #0
 80049fa:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	887a      	ldrh	r2, [r7, #2]
 8004a00:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d103      	bne.n	8004a12 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	69fa      	ldr	r2, [r7, #28]
 8004a0e:	601a      	str	r2, [r3, #0]
 8004a10:	e003      	b.n	8004a1a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	69fa      	ldr	r2, [r7, #28]
 8004a18:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	69fa      	ldr	r2, [r7, #28]
 8004a1e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	61fb      	str	r3, [r7, #28]
 8004a26:	e009      	b.n	8004a3c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	891a      	ldrh	r2, [r3, #8]
 8004a2c:	887b      	ldrh	r3, [r7, #2]
 8004a2e:	4413      	add	r3, r2
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	61fb      	str	r3, [r7, #28]
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1f2      	bne.n	8004a28 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8004a42:	887b      	ldrh	r3, [r7, #2]
 8004a44:	4619      	mov	r1, r3
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f7ff fc28 	bl	800429c <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8004a4c:	bf00      	nop
 8004a4e:	3720      	adds	r7, #32
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8004a5e:	88fb      	ldrh	r3, [r7, #6]
 8004a60:	021b      	lsls	r3, r3, #8
 8004a62:	b21a      	sxth	r2, r3
 8004a64:	88fb      	ldrh	r3, [r7, #6]
 8004a66:	0a1b      	lsrs	r3, r3, #8
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	b21b      	sxth	r3, r3
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	b21b      	sxth	r3, r3
 8004a70:	b29b      	uxth	r3, r3
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	370c      	adds	r7, #12
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr

08004a7e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b083      	sub	sp, #12
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	061a      	lsls	r2, r3, #24
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	021b      	lsls	r3, r3, #8
 8004a8e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004a92:	431a      	orrs	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	0a1b      	lsrs	r3, r3, #8
 8004a98:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004a9c:	431a      	orrs	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	0e1b      	lsrs	r3, r3, #24
 8004aa2:	4313      	orrs	r3, r2
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8004aba:	f000 f8d5 	bl	8004c68 <mem_init>
  memp_init();
 8004abe:	f000 fbdb 	bl	8005278 <memp_init>
  pbuf_init();
  netif_init();
 8004ac2:	f000 fcd9 	bl	8005478 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8004ac6:	f007 f857 	bl	800bb78 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8004aca:	f001 fdaf 	bl	800662c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8004ace:	f006 ffc9 	bl	800ba64 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8004ad2:	bf00      	nop
 8004ad4:	3708      	adds	r7, #8
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
	...

08004adc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8004ae6:	4b05      	ldr	r3, [pc, #20]	; (8004afc <ptr_to_mem+0x20>)
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	88fb      	ldrh	r3, [r7, #6]
 8004aec:	4413      	add	r3, r2
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	200075b0 	.word	0x200075b0

08004b00 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8004b08:	4b05      	ldr	r3, [pc, #20]	; (8004b20 <mem_to_ptr+0x20>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	b29b      	uxth	r3, r3
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	370c      	adds	r7, #12
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	200075b0 	.word	0x200075b0

08004b24 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8004b24:	b590      	push	{r4, r7, lr}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8004b2c:	4b45      	ldr	r3, [pc, #276]	; (8004c44 <plug_holes+0x120>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d206      	bcs.n	8004b44 <plug_holes+0x20>
 8004b36:	4b44      	ldr	r3, [pc, #272]	; (8004c48 <plug_holes+0x124>)
 8004b38:	f240 12df 	movw	r2, #479	; 0x1df
 8004b3c:	4943      	ldr	r1, [pc, #268]	; (8004c4c <plug_holes+0x128>)
 8004b3e:	4844      	ldr	r0, [pc, #272]	; (8004c50 <plug_holes+0x12c>)
 8004b40:	f009 ff00 	bl	800e944 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8004b44:	4b43      	ldr	r3, [pc, #268]	; (8004c54 <plug_holes+0x130>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d306      	bcc.n	8004b5c <plug_holes+0x38>
 8004b4e:	4b3e      	ldr	r3, [pc, #248]	; (8004c48 <plug_holes+0x124>)
 8004b50:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004b54:	4940      	ldr	r1, [pc, #256]	; (8004c58 <plug_holes+0x134>)
 8004b56:	483e      	ldr	r0, [pc, #248]	; (8004c50 <plug_holes+0x12c>)
 8004b58:	f009 fef4 	bl	800e944 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	791b      	ldrb	r3, [r3, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d006      	beq.n	8004b72 <plug_holes+0x4e>
 8004b64:	4b38      	ldr	r3, [pc, #224]	; (8004c48 <plug_holes+0x124>)
 8004b66:	f240 12e1 	movw	r2, #481	; 0x1e1
 8004b6a:	493c      	ldr	r1, [pc, #240]	; (8004c5c <plug_holes+0x138>)
 8004b6c:	4838      	ldr	r0, [pc, #224]	; (8004c50 <plug_holes+0x12c>)
 8004b6e:	f009 fee9 	bl	800e944 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	881b      	ldrh	r3, [r3, #0]
 8004b76:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004b7a:	d906      	bls.n	8004b8a <plug_holes+0x66>
 8004b7c:	4b32      	ldr	r3, [pc, #200]	; (8004c48 <plug_holes+0x124>)
 8004b7e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8004b82:	4937      	ldr	r1, [pc, #220]	; (8004c60 <plug_holes+0x13c>)
 8004b84:	4832      	ldr	r0, [pc, #200]	; (8004c50 <plug_holes+0x12c>)
 8004b86:	f009 fedd 	bl	800e944 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	881b      	ldrh	r3, [r3, #0]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7ff ffa4 	bl	8004adc <ptr_to_mem>
 8004b94:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d024      	beq.n	8004be8 <plug_holes+0xc4>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	791b      	ldrb	r3, [r3, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d120      	bne.n	8004be8 <plug_holes+0xc4>
 8004ba6:	4b2b      	ldr	r3, [pc, #172]	; (8004c54 <plug_holes+0x130>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d01b      	beq.n	8004be8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004bb0:	4b2c      	ldr	r3, [pc, #176]	; (8004c64 <plug_holes+0x140>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d102      	bne.n	8004bc0 <plug_holes+0x9c>
      lfree = mem;
 8004bba:	4a2a      	ldr	r2, [pc, #168]	; (8004c64 <plug_holes+0x140>)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	881a      	ldrh	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	881b      	ldrh	r3, [r3, #0]
 8004bcc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004bd0:	d00a      	beq.n	8004be8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	881b      	ldrh	r3, [r3, #0]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7ff ff80 	bl	8004adc <ptr_to_mem>
 8004bdc:	4604      	mov	r4, r0
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f7ff ff8e 	bl	8004b00 <mem_to_ptr>
 8004be4:	4603      	mov	r3, r0
 8004be6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	885b      	ldrh	r3, [r3, #2]
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7ff ff75 	bl	8004adc <ptr_to_mem>
 8004bf2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8004bf4:	68ba      	ldr	r2, [r7, #8]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d01f      	beq.n	8004c3c <plug_holes+0x118>
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	791b      	ldrb	r3, [r3, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d11b      	bne.n	8004c3c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8004c04:	4b17      	ldr	r3, [pc, #92]	; (8004c64 <plug_holes+0x140>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d102      	bne.n	8004c14 <plug_holes+0xf0>
      lfree = pmem;
 8004c0e:	4a15      	ldr	r2, [pc, #84]	; (8004c64 <plug_holes+0x140>)
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	881a      	ldrh	r2, [r3, #0]
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	881b      	ldrh	r3, [r3, #0]
 8004c20:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004c24:	d00a      	beq.n	8004c3c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	881b      	ldrh	r3, [r3, #0]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7ff ff56 	bl	8004adc <ptr_to_mem>
 8004c30:	4604      	mov	r4, r0
 8004c32:	68b8      	ldr	r0, [r7, #8]
 8004c34:	f7ff ff64 	bl	8004b00 <mem_to_ptr>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8004c3c:	bf00      	nop
 8004c3e:	3714      	adds	r7, #20
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd90      	pop	{r4, r7, pc}
 8004c44:	200075b0 	.word	0x200075b0
 8004c48:	0800f7f8 	.word	0x0800f7f8
 8004c4c:	0800f828 	.word	0x0800f828
 8004c50:	0800f840 	.word	0x0800f840
 8004c54:	200075b4 	.word	0x200075b4
 8004c58:	0800f868 	.word	0x0800f868
 8004c5c:	0800f884 	.word	0x0800f884
 8004c60:	0800f8a0 	.word	0x0800f8a0
 8004c64:	200075b8 	.word	0x200075b8

08004c68 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004c6e:	4b18      	ldr	r3, [pc, #96]	; (8004cd0 <mem_init+0x68>)
 8004c70:	3303      	adds	r3, #3
 8004c72:	f023 0303 	bic.w	r3, r3, #3
 8004c76:	461a      	mov	r2, r3
 8004c78:	4b16      	ldr	r3, [pc, #88]	; (8004cd4 <mem_init+0x6c>)
 8004c7a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004c7c:	4b15      	ldr	r3, [pc, #84]	; (8004cd4 <mem_init+0x6c>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8004c88:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8004c96:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8004c9a:	f7ff ff1f 	bl	8004adc <ptr_to_mem>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	4a0d      	ldr	r2, [pc, #52]	; (8004cd8 <mem_init+0x70>)
 8004ca2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8004ca4:	4b0c      	ldr	r3, [pc, #48]	; (8004cd8 <mem_init+0x70>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004cac:	4b0a      	ldr	r3, [pc, #40]	; (8004cd8 <mem_init+0x70>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8004cb4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004cb6:	4b08      	ldr	r3, [pc, #32]	; (8004cd8 <mem_init+0x70>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8004cbe:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004cc0:	4b04      	ldr	r3, [pc, #16]	; (8004cd4 <mem_init+0x6c>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a05      	ldr	r2, [pc, #20]	; (8004cdc <mem_init+0x74>)
 8004cc6:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8004cc8:	bf00      	nop
 8004cca:	3708      	adds	r7, #8
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	20004d9c 	.word	0x20004d9c
 8004cd4:	200075b0 	.word	0x200075b0
 8004cd8:	200075b4 	.word	0x200075b4
 8004cdc:	200075b8 	.word	0x200075b8

08004ce0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f7ff ff09 	bl	8004b00 <mem_to_ptr>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	881b      	ldrh	r3, [r3, #0]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7ff fef0 	bl	8004adc <ptr_to_mem>
 8004cfc:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	885b      	ldrh	r3, [r3, #2]
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7ff feea 	bl	8004adc <ptr_to_mem>
 8004d08:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	881b      	ldrh	r3, [r3, #0]
 8004d0e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004d12:	d818      	bhi.n	8004d46 <mem_link_valid+0x66>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	885b      	ldrh	r3, [r3, #2]
 8004d18:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004d1c:	d813      	bhi.n	8004d46 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004d22:	8afa      	ldrh	r2, [r7, #22]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d004      	beq.n	8004d32 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	881b      	ldrh	r3, [r3, #0]
 8004d2c:	8afa      	ldrh	r2, [r7, #22]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d109      	bne.n	8004d46 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004d32:	4b08      	ldr	r3, [pc, #32]	; (8004d54 <mem_link_valid+0x74>)
 8004d34:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004d36:	693a      	ldr	r2, [r7, #16]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d006      	beq.n	8004d4a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	885b      	ldrh	r3, [r3, #2]
 8004d40:	8afa      	ldrh	r2, [r7, #22]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d001      	beq.n	8004d4a <mem_link_valid+0x6a>
    return 0;
 8004d46:	2300      	movs	r3, #0
 8004d48:	e000      	b.n	8004d4c <mem_link_valid+0x6c>
  }
  return 1;
 8004d4a:	2301      	movs	r3, #1
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3718      	adds	r7, #24
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	200075b4 	.word	0x200075b4

08004d58 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d04c      	beq.n	8004e00 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f003 0303 	and.w	r3, r3, #3
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d007      	beq.n	8004d80 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8004d70:	4b25      	ldr	r3, [pc, #148]	; (8004e08 <mem_free+0xb0>)
 8004d72:	f240 2273 	movw	r2, #627	; 0x273
 8004d76:	4925      	ldr	r1, [pc, #148]	; (8004e0c <mem_free+0xb4>)
 8004d78:	4825      	ldr	r0, [pc, #148]	; (8004e10 <mem_free+0xb8>)
 8004d7a:	f009 fde3 	bl	800e944 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004d7e:	e040      	b.n	8004e02 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	3b08      	subs	r3, #8
 8004d84:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8004d86:	4b23      	ldr	r3, [pc, #140]	; (8004e14 <mem_free+0xbc>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d306      	bcc.n	8004d9e <mem_free+0x46>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f103 020c 	add.w	r2, r3, #12
 8004d96:	4b20      	ldr	r3, [pc, #128]	; (8004e18 <mem_free+0xc0>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d907      	bls.n	8004dae <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8004d9e:	4b1a      	ldr	r3, [pc, #104]	; (8004e08 <mem_free+0xb0>)
 8004da0:	f240 227f 	movw	r2, #639	; 0x27f
 8004da4:	491d      	ldr	r1, [pc, #116]	; (8004e1c <mem_free+0xc4>)
 8004da6:	481a      	ldr	r0, [pc, #104]	; (8004e10 <mem_free+0xb8>)
 8004da8:	f009 fdcc 	bl	800e944 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004dac:	e029      	b.n	8004e02 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	791b      	ldrb	r3, [r3, #4]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d107      	bne.n	8004dc6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8004db6:	4b14      	ldr	r3, [pc, #80]	; (8004e08 <mem_free+0xb0>)
 8004db8:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8004dbc:	4918      	ldr	r1, [pc, #96]	; (8004e20 <mem_free+0xc8>)
 8004dbe:	4814      	ldr	r0, [pc, #80]	; (8004e10 <mem_free+0xb8>)
 8004dc0:	f009 fdc0 	bl	800e944 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004dc4:	e01d      	b.n	8004e02 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	f7ff ff8a 	bl	8004ce0 <mem_link_valid>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d107      	bne.n	8004de2 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8004dd2:	4b0d      	ldr	r3, [pc, #52]	; (8004e08 <mem_free+0xb0>)
 8004dd4:	f240 2295 	movw	r2, #661	; 0x295
 8004dd8:	4912      	ldr	r1, [pc, #72]	; (8004e24 <mem_free+0xcc>)
 8004dda:	480d      	ldr	r0, [pc, #52]	; (8004e10 <mem_free+0xb8>)
 8004ddc:	f009 fdb2 	bl	800e944 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004de0:	e00f      	b.n	8004e02 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004de8:	4b0f      	ldr	r3, [pc, #60]	; (8004e28 <mem_free+0xd0>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d202      	bcs.n	8004df8 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004df2:	4a0d      	ldr	r2, [pc, #52]	; (8004e28 <mem_free+0xd0>)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	f7ff fe93 	bl	8004b24 <plug_holes>
 8004dfe:	e000      	b.n	8004e02 <mem_free+0xaa>
    return;
 8004e00:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8004e02:	3710      	adds	r7, #16
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	0800f7f8 	.word	0x0800f7f8
 8004e0c:	0800f8cc 	.word	0x0800f8cc
 8004e10:	0800f840 	.word	0x0800f840
 8004e14:	200075b0 	.word	0x200075b0
 8004e18:	200075b4 	.word	0x200075b4
 8004e1c:	0800f8f0 	.word	0x0800f8f0
 8004e20:	0800f90c 	.word	0x0800f90c
 8004e24:	0800f934 	.word	0x0800f934
 8004e28:	200075b8 	.word	0x200075b8

08004e2c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b088      	sub	sp, #32
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	460b      	mov	r3, r1
 8004e36:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8004e38:	887b      	ldrh	r3, [r7, #2]
 8004e3a:	3303      	adds	r3, #3
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	f023 0303 	bic.w	r3, r3, #3
 8004e42:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8004e44:	8bfb      	ldrh	r3, [r7, #30]
 8004e46:	2b0b      	cmp	r3, #11
 8004e48:	d801      	bhi.n	8004e4e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8004e4a:	230c      	movs	r3, #12
 8004e4c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8004e4e:	8bfb      	ldrh	r3, [r7, #30]
 8004e50:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004e54:	d803      	bhi.n	8004e5e <mem_trim+0x32>
 8004e56:	8bfa      	ldrh	r2, [r7, #30]
 8004e58:	887b      	ldrh	r3, [r7, #2]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d201      	bcs.n	8004e62 <mem_trim+0x36>
    return NULL;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	e0cc      	b.n	8004ffc <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004e62:	4b68      	ldr	r3, [pc, #416]	; (8005004 <mem_trim+0x1d8>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d304      	bcc.n	8004e76 <mem_trim+0x4a>
 8004e6c:	4b66      	ldr	r3, [pc, #408]	; (8005008 <mem_trim+0x1dc>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d306      	bcc.n	8004e84 <mem_trim+0x58>
 8004e76:	4b65      	ldr	r3, [pc, #404]	; (800500c <mem_trim+0x1e0>)
 8004e78:	f240 22d1 	movw	r2, #721	; 0x2d1
 8004e7c:	4964      	ldr	r1, [pc, #400]	; (8005010 <mem_trim+0x1e4>)
 8004e7e:	4865      	ldr	r0, [pc, #404]	; (8005014 <mem_trim+0x1e8>)
 8004e80:	f009 fd60 	bl	800e944 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004e84:	4b5f      	ldr	r3, [pc, #380]	; (8005004 <mem_trim+0x1d8>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d304      	bcc.n	8004e98 <mem_trim+0x6c>
 8004e8e:	4b5e      	ldr	r3, [pc, #376]	; (8005008 <mem_trim+0x1dc>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d301      	bcc.n	8004e9c <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	e0af      	b.n	8004ffc <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	3b08      	subs	r3, #8
 8004ea0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8004ea2:	69b8      	ldr	r0, [r7, #24]
 8004ea4:	f7ff fe2c 	bl	8004b00 <mem_to_ptr>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	881a      	ldrh	r2, [r3, #0]
 8004eb0:	8afb      	ldrh	r3, [r7, #22]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	3b08      	subs	r3, #8
 8004eb8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004eba:	8bfa      	ldrh	r2, [r7, #30]
 8004ebc:	8abb      	ldrh	r3, [r7, #20]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d906      	bls.n	8004ed0 <mem_trim+0xa4>
 8004ec2:	4b52      	ldr	r3, [pc, #328]	; (800500c <mem_trim+0x1e0>)
 8004ec4:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8004ec8:	4953      	ldr	r1, [pc, #332]	; (8005018 <mem_trim+0x1ec>)
 8004eca:	4852      	ldr	r0, [pc, #328]	; (8005014 <mem_trim+0x1e8>)
 8004ecc:	f009 fd3a 	bl	800e944 <iprintf>
  if (newsize > size) {
 8004ed0:	8bfa      	ldrh	r2, [r7, #30]
 8004ed2:	8abb      	ldrh	r3, [r7, #20]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d901      	bls.n	8004edc <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	e08f      	b.n	8004ffc <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8004edc:	8bfa      	ldrh	r2, [r7, #30]
 8004ede:	8abb      	ldrh	r3, [r7, #20]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d101      	bne.n	8004ee8 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	e089      	b.n	8004ffc <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	881b      	ldrh	r3, [r3, #0]
 8004eec:	4618      	mov	r0, r3
 8004eee:	f7ff fdf5 	bl	8004adc <ptr_to_mem>
 8004ef2:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	791b      	ldrb	r3, [r3, #4]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d13f      	bne.n	8004f7c <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	881b      	ldrh	r3, [r3, #0]
 8004f00:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004f04:	d106      	bne.n	8004f14 <mem_trim+0xe8>
 8004f06:	4b41      	ldr	r3, [pc, #260]	; (800500c <mem_trim+0x1e0>)
 8004f08:	f240 22f5 	movw	r2, #757	; 0x2f5
 8004f0c:	4943      	ldr	r1, [pc, #268]	; (800501c <mem_trim+0x1f0>)
 8004f0e:	4841      	ldr	r0, [pc, #260]	; (8005014 <mem_trim+0x1e8>)
 8004f10:	f009 fd18 	bl	800e944 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	881b      	ldrh	r3, [r3, #0]
 8004f18:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004f1a:	8afa      	ldrh	r2, [r7, #22]
 8004f1c:	8bfb      	ldrh	r3, [r7, #30]
 8004f1e:	4413      	add	r3, r2
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	3308      	adds	r3, #8
 8004f24:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8004f26:	4b3e      	ldr	r3, [pc, #248]	; (8005020 <mem_trim+0x1f4>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d106      	bne.n	8004f3e <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8004f30:	89fb      	ldrh	r3, [r7, #14]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7ff fdd2 	bl	8004adc <ptr_to_mem>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	4a39      	ldr	r2, [pc, #228]	; (8005020 <mem_trim+0x1f4>)
 8004f3c:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8004f3e:	89fb      	ldrh	r3, [r7, #14]
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7ff fdcb 	bl	8004adc <ptr_to_mem>
 8004f46:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	89ba      	ldrh	r2, [r7, #12]
 8004f52:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	8afa      	ldrh	r2, [r7, #22]
 8004f58:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	89fa      	ldrh	r2, [r7, #14]
 8004f5e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	881b      	ldrh	r3, [r3, #0]
 8004f64:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004f68:	d047      	beq.n	8004ffa <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	881b      	ldrh	r3, [r3, #0]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7ff fdb4 	bl	8004adc <ptr_to_mem>
 8004f74:	4602      	mov	r2, r0
 8004f76:	89fb      	ldrh	r3, [r7, #14]
 8004f78:	8053      	strh	r3, [r2, #2]
 8004f7a:	e03e      	b.n	8004ffa <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004f7c:	8bfb      	ldrh	r3, [r7, #30]
 8004f7e:	f103 0214 	add.w	r2, r3, #20
 8004f82:	8abb      	ldrh	r3, [r7, #20]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d838      	bhi.n	8004ffa <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004f88:	8afa      	ldrh	r2, [r7, #22]
 8004f8a:	8bfb      	ldrh	r3, [r7, #30]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	3308      	adds	r3, #8
 8004f92:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	881b      	ldrh	r3, [r3, #0]
 8004f98:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004f9c:	d106      	bne.n	8004fac <mem_trim+0x180>
 8004f9e:	4b1b      	ldr	r3, [pc, #108]	; (800500c <mem_trim+0x1e0>)
 8004fa0:	f240 3216 	movw	r2, #790	; 0x316
 8004fa4:	491d      	ldr	r1, [pc, #116]	; (800501c <mem_trim+0x1f0>)
 8004fa6:	481b      	ldr	r0, [pc, #108]	; (8005014 <mem_trim+0x1e8>)
 8004fa8:	f009 fccc 	bl	800e944 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8004fac:	89fb      	ldrh	r3, [r7, #14]
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7ff fd94 	bl	8004adc <ptr_to_mem>
 8004fb4:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8004fb6:	4b1a      	ldr	r3, [pc, #104]	; (8005020 <mem_trim+0x1f4>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	693a      	ldr	r2, [r7, #16]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d202      	bcs.n	8004fc6 <mem_trim+0x19a>
      lfree = mem2;
 8004fc0:	4a17      	ldr	r2, [pc, #92]	; (8005020 <mem_trim+0x1f4>)
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	881a      	ldrh	r2, [r3, #0]
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	8afa      	ldrh	r2, [r7, #22]
 8004fd8:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	89fa      	ldrh	r2, [r7, #14]
 8004fde:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	881b      	ldrh	r3, [r3, #0]
 8004fe4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004fe8:	d007      	beq.n	8004ffa <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	881b      	ldrh	r3, [r3, #0]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7ff fd74 	bl	8004adc <ptr_to_mem>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	89fb      	ldrh	r3, [r7, #14]
 8004ff8:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8004ffa:	687b      	ldr	r3, [r7, #4]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3720      	adds	r7, #32
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	200075b0 	.word	0x200075b0
 8005008:	200075b4 	.word	0x200075b4
 800500c:	0800f7f8 	.word	0x0800f7f8
 8005010:	0800f968 	.word	0x0800f968
 8005014:	0800f840 	.word	0x0800f840
 8005018:	0800f980 	.word	0x0800f980
 800501c:	0800f9a0 	.word	0x0800f9a0
 8005020:	200075b8 	.word	0x200075b8

08005024 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b088      	sub	sp, #32
 8005028:	af00      	add	r7, sp, #0
 800502a:	4603      	mov	r3, r0
 800502c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800502e:	88fb      	ldrh	r3, [r7, #6]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d101      	bne.n	8005038 <mem_malloc+0x14>
    return NULL;
 8005034:	2300      	movs	r3, #0
 8005036:	e0d9      	b.n	80051ec <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8005038:	88fb      	ldrh	r3, [r7, #6]
 800503a:	3303      	adds	r3, #3
 800503c:	b29b      	uxth	r3, r3
 800503e:	f023 0303 	bic.w	r3, r3, #3
 8005042:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8005044:	8bbb      	ldrh	r3, [r7, #28]
 8005046:	2b0b      	cmp	r3, #11
 8005048:	d801      	bhi.n	800504e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800504a:	230c      	movs	r3, #12
 800504c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800504e:	8bbb      	ldrh	r3, [r7, #28]
 8005050:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005054:	d803      	bhi.n	800505e <mem_malloc+0x3a>
 8005056:	8bba      	ldrh	r2, [r7, #28]
 8005058:	88fb      	ldrh	r3, [r7, #6]
 800505a:	429a      	cmp	r2, r3
 800505c:	d201      	bcs.n	8005062 <mem_malloc+0x3e>
    return NULL;
 800505e:	2300      	movs	r3, #0
 8005060:	e0c4      	b.n	80051ec <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005062:	4b64      	ldr	r3, [pc, #400]	; (80051f4 <mem_malloc+0x1d0>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4618      	mov	r0, r3
 8005068:	f7ff fd4a 	bl	8004b00 <mem_to_ptr>
 800506c:	4603      	mov	r3, r0
 800506e:	83fb      	strh	r3, [r7, #30]
 8005070:	e0b4      	b.n	80051dc <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8005072:	8bfb      	ldrh	r3, [r7, #30]
 8005074:	4618      	mov	r0, r3
 8005076:	f7ff fd31 	bl	8004adc <ptr_to_mem>
 800507a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	791b      	ldrb	r3, [r3, #4]
 8005080:	2b00      	cmp	r3, #0
 8005082:	f040 80a4 	bne.w	80051ce <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	881b      	ldrh	r3, [r3, #0]
 800508a:	461a      	mov	r2, r3
 800508c:	8bfb      	ldrh	r3, [r7, #30]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	f1a3 0208 	sub.w	r2, r3, #8
 8005094:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8005096:	429a      	cmp	r2, r3
 8005098:	f0c0 8099 	bcc.w	80051ce <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	881b      	ldrh	r3, [r3, #0]
 80050a0:	461a      	mov	r2, r3
 80050a2:	8bfb      	ldrh	r3, [r7, #30]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	f1a3 0208 	sub.w	r2, r3, #8
 80050aa:	8bbb      	ldrh	r3, [r7, #28]
 80050ac:	3314      	adds	r3, #20
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d333      	bcc.n	800511a <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80050b2:	8bfa      	ldrh	r2, [r7, #30]
 80050b4:	8bbb      	ldrh	r3, [r7, #28]
 80050b6:	4413      	add	r3, r2
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	3308      	adds	r3, #8
 80050bc:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80050be:	8a7b      	ldrh	r3, [r7, #18]
 80050c0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80050c4:	d106      	bne.n	80050d4 <mem_malloc+0xb0>
 80050c6:	4b4c      	ldr	r3, [pc, #304]	; (80051f8 <mem_malloc+0x1d4>)
 80050c8:	f240 3287 	movw	r2, #903	; 0x387
 80050cc:	494b      	ldr	r1, [pc, #300]	; (80051fc <mem_malloc+0x1d8>)
 80050ce:	484c      	ldr	r0, [pc, #304]	; (8005200 <mem_malloc+0x1dc>)
 80050d0:	f009 fc38 	bl	800e944 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80050d4:	8a7b      	ldrh	r3, [r7, #18]
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7ff fd00 	bl	8004adc <ptr_to_mem>
 80050dc:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	881a      	ldrh	r2, [r3, #0]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	8bfa      	ldrh	r2, [r7, #30]
 80050f0:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	8a7a      	ldrh	r2, [r7, #18]
 80050f6:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	2201      	movs	r2, #1
 80050fc:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	881b      	ldrh	r3, [r3, #0]
 8005102:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005106:	d00b      	beq.n	8005120 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	881b      	ldrh	r3, [r3, #0]
 800510c:	4618      	mov	r0, r3
 800510e:	f7ff fce5 	bl	8004adc <ptr_to_mem>
 8005112:	4602      	mov	r2, r0
 8005114:	8a7b      	ldrh	r3, [r7, #18]
 8005116:	8053      	strh	r3, [r2, #2]
 8005118:	e002      	b.n	8005120 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	2201      	movs	r2, #1
 800511e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8005120:	4b34      	ldr	r3, [pc, #208]	; (80051f4 <mem_malloc+0x1d0>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	429a      	cmp	r2, r3
 8005128:	d127      	bne.n	800517a <mem_malloc+0x156>
          struct mem *cur = lfree;
 800512a:	4b32      	ldr	r3, [pc, #200]	; (80051f4 <mem_malloc+0x1d0>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8005130:	e005      	b.n	800513e <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	881b      	ldrh	r3, [r3, #0]
 8005136:	4618      	mov	r0, r3
 8005138:	f7ff fcd0 	bl	8004adc <ptr_to_mem>
 800513c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	791b      	ldrb	r3, [r3, #4]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d004      	beq.n	8005150 <mem_malloc+0x12c>
 8005146:	4b2f      	ldr	r3, [pc, #188]	; (8005204 <mem_malloc+0x1e0>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	69ba      	ldr	r2, [r7, #24]
 800514c:	429a      	cmp	r2, r3
 800514e:	d1f0      	bne.n	8005132 <mem_malloc+0x10e>
          }
          lfree = cur;
 8005150:	4a28      	ldr	r2, [pc, #160]	; (80051f4 <mem_malloc+0x1d0>)
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8005156:	4b27      	ldr	r3, [pc, #156]	; (80051f4 <mem_malloc+0x1d0>)
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	4b2a      	ldr	r3, [pc, #168]	; (8005204 <mem_malloc+0x1e0>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	429a      	cmp	r2, r3
 8005160:	d00b      	beq.n	800517a <mem_malloc+0x156>
 8005162:	4b24      	ldr	r3, [pc, #144]	; (80051f4 <mem_malloc+0x1d0>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	791b      	ldrb	r3, [r3, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d006      	beq.n	800517a <mem_malloc+0x156>
 800516c:	4b22      	ldr	r3, [pc, #136]	; (80051f8 <mem_malloc+0x1d4>)
 800516e:	f240 32b5 	movw	r2, #949	; 0x3b5
 8005172:	4925      	ldr	r1, [pc, #148]	; (8005208 <mem_malloc+0x1e4>)
 8005174:	4822      	ldr	r0, [pc, #136]	; (8005200 <mem_malloc+0x1dc>)
 8005176:	f009 fbe5 	bl	800e944 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800517a:	8bba      	ldrh	r2, [r7, #28]
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	4413      	add	r3, r2
 8005180:	3308      	adds	r3, #8
 8005182:	4a20      	ldr	r2, [pc, #128]	; (8005204 <mem_malloc+0x1e0>)
 8005184:	6812      	ldr	r2, [r2, #0]
 8005186:	4293      	cmp	r3, r2
 8005188:	d906      	bls.n	8005198 <mem_malloc+0x174>
 800518a:	4b1b      	ldr	r3, [pc, #108]	; (80051f8 <mem_malloc+0x1d4>)
 800518c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8005190:	491e      	ldr	r1, [pc, #120]	; (800520c <mem_malloc+0x1e8>)
 8005192:	481b      	ldr	r0, [pc, #108]	; (8005200 <mem_malloc+0x1dc>)
 8005194:	f009 fbd6 	bl	800e944 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	f003 0303 	and.w	r3, r3, #3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d006      	beq.n	80051b0 <mem_malloc+0x18c>
 80051a2:	4b15      	ldr	r3, [pc, #84]	; (80051f8 <mem_malloc+0x1d4>)
 80051a4:	f240 32bb 	movw	r2, #955	; 0x3bb
 80051a8:	4919      	ldr	r1, [pc, #100]	; (8005210 <mem_malloc+0x1ec>)
 80051aa:	4815      	ldr	r0, [pc, #84]	; (8005200 <mem_malloc+0x1dc>)
 80051ac:	f009 fbca 	bl	800e944 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	f003 0303 	and.w	r3, r3, #3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d006      	beq.n	80051c8 <mem_malloc+0x1a4>
 80051ba:	4b0f      	ldr	r3, [pc, #60]	; (80051f8 <mem_malloc+0x1d4>)
 80051bc:	f240 32bd 	movw	r2, #957	; 0x3bd
 80051c0:	4914      	ldr	r1, [pc, #80]	; (8005214 <mem_malloc+0x1f0>)
 80051c2:	480f      	ldr	r0, [pc, #60]	; (8005200 <mem_malloc+0x1dc>)
 80051c4:	f009 fbbe 	bl	800e944 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	3308      	adds	r3, #8
 80051cc:	e00e      	b.n	80051ec <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80051ce:	8bfb      	ldrh	r3, [r7, #30]
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7ff fc83 	bl	8004adc <ptr_to_mem>
 80051d6:	4603      	mov	r3, r0
 80051d8:	881b      	ldrh	r3, [r3, #0]
 80051da:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80051dc:	8bfa      	ldrh	r2, [r7, #30]
 80051de:	8bbb      	ldrh	r3, [r7, #28]
 80051e0:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 80051e4:	429a      	cmp	r2, r3
 80051e6:	f4ff af44 	bcc.w	8005072 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3720      	adds	r7, #32
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	200075b8 	.word	0x200075b8
 80051f8:	0800f7f8 	.word	0x0800f7f8
 80051fc:	0800f9a0 	.word	0x0800f9a0
 8005200:	0800f840 	.word	0x0800f840
 8005204:	200075b4 	.word	0x200075b4
 8005208:	0800f9b4 	.word	0x0800f9b4
 800520c:	0800f9d0 	.word	0x0800f9d0
 8005210:	0800fa00 	.word	0x0800fa00
 8005214:	0800fa30 	.word	0x0800fa30

08005218 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	2200      	movs	r2, #0
 8005226:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	3303      	adds	r3, #3
 800522e:	f023 0303 	bic.w	r3, r3, #3
 8005232:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8005234:	2300      	movs	r3, #0
 8005236:	60fb      	str	r3, [r7, #12]
 8005238:	e011      	b.n	800525e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	881b      	ldrh	r3, [r3, #0]
 8005250:	461a      	mov	r2, r3
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	4413      	add	r3, r2
 8005256:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	3301      	adds	r3, #1
 800525c:	60fb      	str	r3, [r7, #12]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	885b      	ldrh	r3, [r3, #2]
 8005262:	461a      	mov	r2, r3
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	4293      	cmp	r3, r2
 8005268:	dbe7      	blt.n	800523a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800526a:	bf00      	nop
 800526c:	bf00      	nop
 800526e:	3714      	adds	r7, #20
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800527e:	2300      	movs	r3, #0
 8005280:	80fb      	strh	r3, [r7, #6]
 8005282:	e009      	b.n	8005298 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8005284:	88fb      	ldrh	r3, [r7, #6]
 8005286:	4a08      	ldr	r2, [pc, #32]	; (80052a8 <memp_init+0x30>)
 8005288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800528c:	4618      	mov	r0, r3
 800528e:	f7ff ffc3 	bl	8005218 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005292:	88fb      	ldrh	r3, [r7, #6]
 8005294:	3301      	adds	r3, #1
 8005296:	80fb      	strh	r3, [r7, #6]
 8005298:	88fb      	ldrh	r3, [r7, #6]
 800529a:	2b08      	cmp	r3, #8
 800529c:	d9f2      	bls.n	8005284 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800529e:	bf00      	nop
 80052a0:	bf00      	nop
 80052a2:	3708      	adds	r7, #8
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	0801220c 	.word	0x0801220c

080052ac <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d012      	beq.n	80052e8 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	6812      	ldr	r2, [r2, #0]
 80052ca:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f003 0303 	and.w	r3, r3, #3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d006      	beq.n	80052e4 <do_memp_malloc_pool+0x38>
 80052d6:	4b07      	ldr	r3, [pc, #28]	; (80052f4 <do_memp_malloc_pool+0x48>)
 80052d8:	f44f 728c 	mov.w	r2, #280	; 0x118
 80052dc:	4906      	ldr	r1, [pc, #24]	; (80052f8 <do_memp_malloc_pool+0x4c>)
 80052de:	4807      	ldr	r0, [pc, #28]	; (80052fc <do_memp_malloc_pool+0x50>)
 80052e0:	f009 fb30 	bl	800e944 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	e000      	b.n	80052ea <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3710      	adds	r7, #16
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	0800fa54 	.word	0x0800fa54
 80052f8:	0800fa84 	.word	0x0800fa84
 80052fc:	0800faa8 	.word	0x0800faa8

08005300 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d106      	bne.n	800531c <memp_malloc_pool+0x1c>
 800530e:	4b0a      	ldr	r3, [pc, #40]	; (8005338 <memp_malloc_pool+0x38>)
 8005310:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8005314:	4909      	ldr	r1, [pc, #36]	; (800533c <memp_malloc_pool+0x3c>)
 8005316:	480a      	ldr	r0, [pc, #40]	; (8005340 <memp_malloc_pool+0x40>)
 8005318:	f009 fb14 	bl	800e944 <iprintf>
  if (desc == NULL) {
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <memp_malloc_pool+0x26>
    return NULL;
 8005322:	2300      	movs	r3, #0
 8005324:	e003      	b.n	800532e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f7ff ffc0 	bl	80052ac <do_memp_malloc_pool>
 800532c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800532e:	4618      	mov	r0, r3
 8005330:	3708      	adds	r7, #8
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	0800fa54 	.word	0x0800fa54
 800533c:	0800fad0 	.word	0x0800fad0
 8005340:	0800faa8 	.word	0x0800faa8

08005344 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	4603      	mov	r3, r0
 800534c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800534e:	79fb      	ldrb	r3, [r7, #7]
 8005350:	2b08      	cmp	r3, #8
 8005352:	d908      	bls.n	8005366 <memp_malloc+0x22>
 8005354:	4b0a      	ldr	r3, [pc, #40]	; (8005380 <memp_malloc+0x3c>)
 8005356:	f240 1257 	movw	r2, #343	; 0x157
 800535a:	490a      	ldr	r1, [pc, #40]	; (8005384 <memp_malloc+0x40>)
 800535c:	480a      	ldr	r0, [pc, #40]	; (8005388 <memp_malloc+0x44>)
 800535e:	f009 faf1 	bl	800e944 <iprintf>
 8005362:	2300      	movs	r3, #0
 8005364:	e008      	b.n	8005378 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8005366:	79fb      	ldrb	r3, [r7, #7]
 8005368:	4a08      	ldr	r2, [pc, #32]	; (800538c <memp_malloc+0x48>)
 800536a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800536e:	4618      	mov	r0, r3
 8005370:	f7ff ff9c 	bl	80052ac <do_memp_malloc_pool>
 8005374:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8005376:	68fb      	ldr	r3, [r7, #12]
}
 8005378:	4618      	mov	r0, r3
 800537a:	3710      	adds	r7, #16
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	0800fa54 	.word	0x0800fa54
 8005384:	0800fae4 	.word	0x0800fae4
 8005388:	0800faa8 	.word	0x0800faa8
 800538c:	0801220c 	.word	0x0801220c

08005390 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	f003 0303 	and.w	r3, r3, #3
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d006      	beq.n	80053b2 <do_memp_free_pool+0x22>
 80053a4:	4b0a      	ldr	r3, [pc, #40]	; (80053d0 <do_memp_free_pool+0x40>)
 80053a6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80053aa:	490a      	ldr	r1, [pc, #40]	; (80053d4 <do_memp_free_pool+0x44>)
 80053ac:	480a      	ldr	r0, [pc, #40]	; (80053d8 <do_memp_free_pool+0x48>)
 80053ae:	f009 fac9 	bl	800e944 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80053c8:	bf00      	nop
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	0800fa54 	.word	0x0800fa54
 80053d4:	0800fb04 	.word	0x0800fb04
 80053d8:	0800faa8 	.word	0x0800faa8

080053dc <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d106      	bne.n	80053fa <memp_free_pool+0x1e>
 80053ec:	4b0a      	ldr	r3, [pc, #40]	; (8005418 <memp_free_pool+0x3c>)
 80053ee:	f240 1295 	movw	r2, #405	; 0x195
 80053f2:	490a      	ldr	r1, [pc, #40]	; (800541c <memp_free_pool+0x40>)
 80053f4:	480a      	ldr	r0, [pc, #40]	; (8005420 <memp_free_pool+0x44>)
 80053f6:	f009 faa5 	bl	800e944 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d007      	beq.n	8005410 <memp_free_pool+0x34>
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d004      	beq.n	8005410 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8005406:	6839      	ldr	r1, [r7, #0]
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f7ff ffc1 	bl	8005390 <do_memp_free_pool>
 800540e:	e000      	b.n	8005412 <memp_free_pool+0x36>
    return;
 8005410:	bf00      	nop
}
 8005412:	3708      	adds	r7, #8
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}
 8005418:	0800fa54 	.word	0x0800fa54
 800541c:	0800fad0 	.word	0x0800fad0
 8005420:	0800faa8 	.word	0x0800faa8

08005424 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
 800542a:	4603      	mov	r3, r0
 800542c:	6039      	str	r1, [r7, #0]
 800542e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8005430:	79fb      	ldrb	r3, [r7, #7]
 8005432:	2b08      	cmp	r3, #8
 8005434:	d907      	bls.n	8005446 <memp_free+0x22>
 8005436:	4b0c      	ldr	r3, [pc, #48]	; (8005468 <memp_free+0x44>)
 8005438:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800543c:	490b      	ldr	r1, [pc, #44]	; (800546c <memp_free+0x48>)
 800543e:	480c      	ldr	r0, [pc, #48]	; (8005470 <memp_free+0x4c>)
 8005440:	f009 fa80 	bl	800e944 <iprintf>
 8005444:	e00c      	b.n	8005460 <memp_free+0x3c>

  if (mem == NULL) {
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d008      	beq.n	800545e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800544c:	79fb      	ldrb	r3, [r7, #7]
 800544e:	4a09      	ldr	r2, [pc, #36]	; (8005474 <memp_free+0x50>)
 8005450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005454:	6839      	ldr	r1, [r7, #0]
 8005456:	4618      	mov	r0, r3
 8005458:	f7ff ff9a 	bl	8005390 <do_memp_free_pool>
 800545c:	e000      	b.n	8005460 <memp_free+0x3c>
    return;
 800545e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8005460:	3708      	adds	r7, #8
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	0800fa54 	.word	0x0800fa54
 800546c:	0800fb24 	.word	0x0800fb24
 8005470:	0800faa8 	.word	0x0800faa8
 8005474:	0801220c 	.word	0x0801220c

08005478 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8005478:	b480      	push	{r7}
 800547a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800547c:	bf00      	nop
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
	...

08005488 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b086      	sub	sp, #24
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
 8005494:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d108      	bne.n	80054ae <netif_add+0x26>
 800549c:	4b57      	ldr	r3, [pc, #348]	; (80055fc <netif_add+0x174>)
 800549e:	f240 1227 	movw	r2, #295	; 0x127
 80054a2:	4957      	ldr	r1, [pc, #348]	; (8005600 <netif_add+0x178>)
 80054a4:	4857      	ldr	r0, [pc, #348]	; (8005604 <netif_add+0x17c>)
 80054a6:	f009 fa4d 	bl	800e944 <iprintf>
 80054aa:	2300      	movs	r3, #0
 80054ac:	e0a2      	b.n	80055f4 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80054ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d108      	bne.n	80054c6 <netif_add+0x3e>
 80054b4:	4b51      	ldr	r3, [pc, #324]	; (80055fc <netif_add+0x174>)
 80054b6:	f44f 7294 	mov.w	r2, #296	; 0x128
 80054ba:	4953      	ldr	r1, [pc, #332]	; (8005608 <netif_add+0x180>)
 80054bc:	4851      	ldr	r0, [pc, #324]	; (8005604 <netif_add+0x17c>)
 80054be:	f009 fa41 	bl	800e944 <iprintf>
 80054c2:	2300      	movs	r3, #0
 80054c4:	e096      	b.n	80055f4 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d101      	bne.n	80054d0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80054cc:	4b4f      	ldr	r3, [pc, #316]	; (800560c <netif_add+0x184>)
 80054ce:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d101      	bne.n	80054da <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80054d6:	4b4d      	ldr	r3, [pc, #308]	; (800560c <netif_add+0x184>)
 80054d8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d101      	bne.n	80054e4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80054e0:	4b4a      	ldr	r3, [pc, #296]	; (800560c <netif_add+0x184>)
 80054e2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	4a45      	ldr	r2, [pc, #276]	; (8005610 <netif_add+0x188>)
 80054fa:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6a3a      	ldr	r2, [r7, #32]
 8005514:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8005516:	4b3f      	ldr	r3, [pc, #252]	; (8005614 <netif_add+0x18c>)
 8005518:	781a      	ldrb	r2, [r3, #0]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005524:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	68b9      	ldr	r1, [r7, #8]
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f000 f913 	bl	8005758 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8005532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005534:	68f8      	ldr	r0, [r7, #12]
 8005536:	4798      	blx	r3
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d001      	beq.n	8005542 <netif_add+0xba>
    return NULL;
 800553e:	2300      	movs	r3, #0
 8005540:	e058      	b.n	80055f4 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005548:	2bff      	cmp	r3, #255	; 0xff
 800554a:	d103      	bne.n	8005554 <netif_add+0xcc>
        netif->num = 0;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8005554:	2300      	movs	r3, #0
 8005556:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005558:	4b2f      	ldr	r3, [pc, #188]	; (8005618 <netif_add+0x190>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	617b      	str	r3, [r7, #20]
 800555e:	e02b      	b.n	80055b8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8005560:	697a      	ldr	r2, [r7, #20]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	429a      	cmp	r2, r3
 8005566:	d106      	bne.n	8005576 <netif_add+0xee>
 8005568:	4b24      	ldr	r3, [pc, #144]	; (80055fc <netif_add+0x174>)
 800556a:	f240 128b 	movw	r2, #395	; 0x18b
 800556e:	492b      	ldr	r1, [pc, #172]	; (800561c <netif_add+0x194>)
 8005570:	4824      	ldr	r0, [pc, #144]	; (8005604 <netif_add+0x17c>)
 8005572:	f009 f9e7 	bl	800e944 <iprintf>
        num_netifs++;
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	3301      	adds	r3, #1
 800557a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	2bff      	cmp	r3, #255	; 0xff
 8005580:	dd06      	ble.n	8005590 <netif_add+0x108>
 8005582:	4b1e      	ldr	r3, [pc, #120]	; (80055fc <netif_add+0x174>)
 8005584:	f240 128d 	movw	r2, #397	; 0x18d
 8005588:	4925      	ldr	r1, [pc, #148]	; (8005620 <netif_add+0x198>)
 800558a:	481e      	ldr	r0, [pc, #120]	; (8005604 <netif_add+0x17c>)
 800558c:	f009 f9da 	bl	800e944 <iprintf>
        if (netif2->num == netif->num) {
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800559c:	429a      	cmp	r2, r3
 800559e:	d108      	bne.n	80055b2 <netif_add+0x12a>
          netif->num++;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80055a6:	3301      	adds	r3, #1
 80055a8:	b2da      	uxtb	r2, r3
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80055b0:	e005      	b.n	80055be <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	617b      	str	r3, [r7, #20]
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1d0      	bne.n	8005560 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1be      	bne.n	8005542 <netif_add+0xba>
  }
  if (netif->num == 254) {
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80055ca:	2bfe      	cmp	r3, #254	; 0xfe
 80055cc:	d103      	bne.n	80055d6 <netif_add+0x14e>
    netif_num = 0;
 80055ce:	4b11      	ldr	r3, [pc, #68]	; (8005614 <netif_add+0x18c>)
 80055d0:	2200      	movs	r2, #0
 80055d2:	701a      	strb	r2, [r3, #0]
 80055d4:	e006      	b.n	80055e4 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80055dc:	3301      	adds	r3, #1
 80055de:	b2da      	uxtb	r2, r3
 80055e0:	4b0c      	ldr	r3, [pc, #48]	; (8005614 <netif_add+0x18c>)
 80055e2:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80055e4:	4b0c      	ldr	r3, [pc, #48]	; (8005618 <netif_add+0x190>)
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80055ec:	4a0a      	ldr	r2, [pc, #40]	; (8005618 <netif_add+0x190>)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80055f2:	68fb      	ldr	r3, [r7, #12]
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3718      	adds	r7, #24
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	0800fb40 	.word	0x0800fb40
 8005600:	0800fbd4 	.word	0x0800fbd4
 8005604:	0800fb90 	.word	0x0800fb90
 8005608:	0800fbf0 	.word	0x0800fbf0
 800560c:	08012270 	.word	0x08012270
 8005610:	08005a33 	.word	0x08005a33
 8005614:	2000a4b0 	.word	0x2000a4b0
 8005618:	2000a4a8 	.word	0x2000a4a8
 800561c:	0800fc14 	.word	0x0800fc14
 8005620:	0800fc28 	.word	0x0800fc28

08005624 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800562e:	6839      	ldr	r1, [r7, #0]
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f002 fb43 	bl	8007cbc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8005636:	6839      	ldr	r1, [r7, #0]
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f006 fd8d 	bl	800c158 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800563e:	bf00      	nop
 8005640:	3708      	adds	r7, #8
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
	...

08005648 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b086      	sub	sp, #24
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d106      	bne.n	8005668 <netif_do_set_ipaddr+0x20>
 800565a:	4b1d      	ldr	r3, [pc, #116]	; (80056d0 <netif_do_set_ipaddr+0x88>)
 800565c:	f240 12cb 	movw	r2, #459	; 0x1cb
 8005660:	491c      	ldr	r1, [pc, #112]	; (80056d4 <netif_do_set_ipaddr+0x8c>)
 8005662:	481d      	ldr	r0, [pc, #116]	; (80056d8 <netif_do_set_ipaddr+0x90>)
 8005664:	f009 f96e 	bl	800e944 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d106      	bne.n	800567c <netif_do_set_ipaddr+0x34>
 800566e:	4b18      	ldr	r3, [pc, #96]	; (80056d0 <netif_do_set_ipaddr+0x88>)
 8005670:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8005674:	4917      	ldr	r1, [pc, #92]	; (80056d4 <netif_do_set_ipaddr+0x8c>)
 8005676:	4818      	ldr	r0, [pc, #96]	; (80056d8 <netif_do_set_ipaddr+0x90>)
 8005678:	f009 f964 	bl	800e944 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	3304      	adds	r3, #4
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	429a      	cmp	r2, r3
 8005688:	d01c      	beq.n	80056c4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	3304      	adds	r3, #4
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800569a:	f107 0314 	add.w	r3, r7, #20
 800569e:	4619      	mov	r1, r3
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f7ff ffbf 	bl	8005624 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d002      	beq.n	80056b2 <netif_do_set_ipaddr+0x6a>
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	e000      	b.n	80056b4 <netif_do_set_ipaddr+0x6c>
 80056b2:	2300      	movs	r3, #0
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80056b8:	2101      	movs	r1, #1
 80056ba:	68f8      	ldr	r0, [r7, #12]
 80056bc:	f000 f8d2 	bl	8005864 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80056c0:	2301      	movs	r3, #1
 80056c2:	e000      	b.n	80056c6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3718      	adds	r7, #24
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	0800fb40 	.word	0x0800fb40
 80056d4:	0800fc58 	.word	0x0800fc58
 80056d8:	0800fb90 	.word	0x0800fb90

080056dc <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	3308      	adds	r3, #8
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d00a      	beq.n	800570c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d002      	beq.n	8005702 <netif_do_set_netmask+0x26>
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	e000      	b.n	8005704 <netif_do_set_netmask+0x28>
 8005702:	2300      	movs	r3, #0
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8005708:	2301      	movs	r3, #1
 800570a:	e000      	b.n	800570e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3714      	adds	r7, #20
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr

0800571a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800571a:	b480      	push	{r7}
 800571c:	b085      	sub	sp, #20
 800571e:	af00      	add	r7, sp, #0
 8005720:	60f8      	str	r0, [r7, #12]
 8005722:	60b9      	str	r1, [r7, #8]
 8005724:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	330c      	adds	r3, #12
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	429a      	cmp	r2, r3
 8005732:	d00a      	beq.n	800574a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d002      	beq.n	8005740 <netif_do_set_gw+0x26>
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	e000      	b.n	8005742 <netif_do_set_gw+0x28>
 8005740:	2300      	movs	r3, #0
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8005746:	2301      	movs	r3, #1
 8005748:	e000      	b.n	800574c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3714      	adds	r7, #20
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b088      	sub	sp, #32
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	607a      	str	r2, [r7, #4]
 8005764:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8005766:	2300      	movs	r3, #0
 8005768:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800576a:	2300      	movs	r3, #0
 800576c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d101      	bne.n	8005778 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8005774:	4b1c      	ldr	r3, [pc, #112]	; (80057e8 <netif_set_addr+0x90>)
 8005776:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d101      	bne.n	8005782 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800577e:	4b1a      	ldr	r3, [pc, #104]	; (80057e8 <netif_set_addr+0x90>)
 8005780:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d101      	bne.n	800578c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8005788:	4b17      	ldr	r3, [pc, #92]	; (80057e8 <netif_set_addr+0x90>)
 800578a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d003      	beq.n	800579a <netif_set_addr+0x42>
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d101      	bne.n	800579e <netif_set_addr+0x46>
 800579a:	2301      	movs	r3, #1
 800579c:	e000      	b.n	80057a0 <netif_set_addr+0x48>
 800579e:	2300      	movs	r3, #0
 80057a0:	617b      	str	r3, [r7, #20]
  if (remove) {
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d006      	beq.n	80057b6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80057a8:	f107 0310 	add.w	r3, r7, #16
 80057ac:	461a      	mov	r2, r3
 80057ae:	68b9      	ldr	r1, [r7, #8]
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	f7ff ff49 	bl	8005648 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80057b6:	69fa      	ldr	r2, [r7, #28]
 80057b8:	6879      	ldr	r1, [r7, #4]
 80057ba:	68f8      	ldr	r0, [r7, #12]
 80057bc:	f7ff ff8e 	bl	80056dc <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80057c0:	69ba      	ldr	r2, [r7, #24]
 80057c2:	6839      	ldr	r1, [r7, #0]
 80057c4:	68f8      	ldr	r0, [r7, #12]
 80057c6:	f7ff ffa8 	bl	800571a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d106      	bne.n	80057de <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80057d0:	f107 0310 	add.w	r3, r7, #16
 80057d4:	461a      	mov	r2, r3
 80057d6:	68b9      	ldr	r1, [r7, #8]
 80057d8:	68f8      	ldr	r0, [r7, #12]
 80057da:	f7ff ff35 	bl	8005648 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80057de:	bf00      	nop
 80057e0:	3720      	adds	r7, #32
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	08012270 	.word	0x08012270

080057ec <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80057f4:	4a04      	ldr	r2, [pc, #16]	; (8005808 <netif_set_default+0x1c>)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80057fa:	bf00      	nop
 80057fc:	370c      	adds	r7, #12
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	2000a4ac 	.word	0x2000a4ac

0800580c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d107      	bne.n	800582a <netif_set_up+0x1e>
 800581a:	4b0f      	ldr	r3, [pc, #60]	; (8005858 <netif_set_up+0x4c>)
 800581c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8005820:	490e      	ldr	r1, [pc, #56]	; (800585c <netif_set_up+0x50>)
 8005822:	480f      	ldr	r0, [pc, #60]	; (8005860 <netif_set_up+0x54>)
 8005824:	f009 f88e 	bl	800e944 <iprintf>
 8005828:	e013      	b.n	8005852 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005830:	f003 0301 	and.w	r3, r3, #1
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10c      	bne.n	8005852 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800583e:	f043 0301 	orr.w	r3, r3, #1
 8005842:	b2da      	uxtb	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800584a:	2103      	movs	r1, #3
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 f809 	bl	8005864 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8005852:	3708      	adds	r7, #8
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	0800fb40 	.word	0x0800fb40
 800585c:	0800fcc8 	.word	0x0800fcc8
 8005860:	0800fb90 	.word	0x0800fb90

08005864 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	460b      	mov	r3, r1
 800586e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d106      	bne.n	8005884 <netif_issue_reports+0x20>
 8005876:	4b18      	ldr	r3, [pc, #96]	; (80058d8 <netif_issue_reports+0x74>)
 8005878:	f240 326d 	movw	r2, #877	; 0x36d
 800587c:	4917      	ldr	r1, [pc, #92]	; (80058dc <netif_issue_reports+0x78>)
 800587e:	4818      	ldr	r0, [pc, #96]	; (80058e0 <netif_issue_reports+0x7c>)
 8005880:	f009 f860 	bl	800e944 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800588a:	f003 0304 	and.w	r3, r3, #4
 800588e:	2b00      	cmp	r3, #0
 8005890:	d01e      	beq.n	80058d0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005898:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800589c:	2b00      	cmp	r3, #0
 800589e:	d017      	beq.n	80058d0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80058a0:	78fb      	ldrb	r3, [r7, #3]
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d013      	beq.n	80058d2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	3304      	adds	r3, #4
 80058ae:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d00e      	beq.n	80058d2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80058ba:	f003 0308 	and.w	r3, r3, #8
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d007      	beq.n	80058d2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	3304      	adds	r3, #4
 80058c6:	4619      	mov	r1, r3
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f007 fbaf 	bl	800d02c <etharp_request>
 80058ce:	e000      	b.n	80058d2 <netif_issue_reports+0x6e>
    return;
 80058d0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80058d2:	3708      	adds	r7, #8
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	0800fb40 	.word	0x0800fb40
 80058dc:	0800fce4 	.word	0x0800fce4
 80058e0:	0800fb90 	.word	0x0800fb90

080058e4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d107      	bne.n	8005902 <netif_set_down+0x1e>
 80058f2:	4b12      	ldr	r3, [pc, #72]	; (800593c <netif_set_down+0x58>)
 80058f4:	f240 329b 	movw	r2, #923	; 0x39b
 80058f8:	4911      	ldr	r1, [pc, #68]	; (8005940 <netif_set_down+0x5c>)
 80058fa:	4812      	ldr	r0, [pc, #72]	; (8005944 <netif_set_down+0x60>)
 80058fc:	f009 f822 	bl	800e944 <iprintf>
 8005900:	e019      	b.n	8005936 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005908:	f003 0301 	and.w	r3, r3, #1
 800590c:	2b00      	cmp	r3, #0
 800590e:	d012      	beq.n	8005936 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005916:	f023 0301 	bic.w	r3, r3, #1
 800591a:	b2da      	uxtb	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005928:	f003 0308 	and.w	r3, r3, #8
 800592c:	2b00      	cmp	r3, #0
 800592e:	d002      	beq.n	8005936 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f006 ff39 	bl	800c7a8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8005936:	3708      	adds	r7, #8
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	0800fb40 	.word	0x0800fb40
 8005940:	0800fd08 	.word	0x0800fd08
 8005944:	0800fb90 	.word	0x0800fb90

08005948 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d107      	bne.n	8005966 <netif_set_link_up+0x1e>
 8005956:	4b13      	ldr	r3, [pc, #76]	; (80059a4 <netif_set_link_up+0x5c>)
 8005958:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800595c:	4912      	ldr	r1, [pc, #72]	; (80059a8 <netif_set_link_up+0x60>)
 800595e:	4813      	ldr	r0, [pc, #76]	; (80059ac <netif_set_link_up+0x64>)
 8005960:	f008 fff0 	bl	800e944 <iprintf>
 8005964:	e01b      	b.n	800599e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800596c:	f003 0304 	and.w	r3, r3, #4
 8005970:	2b00      	cmp	r3, #0
 8005972:	d114      	bne.n	800599e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800597a:	f043 0304 	orr.w	r3, r3, #4
 800597e:	b2da      	uxtb	r2, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005986:	2103      	movs	r1, #3
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f7ff ff6b 	bl	8005864 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	69db      	ldr	r3, [r3, #28]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d003      	beq.n	800599e <netif_set_link_up+0x56>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	69db      	ldr	r3, [r3, #28]
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800599e:	3708      	adds	r7, #8
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	0800fb40 	.word	0x0800fb40
 80059a8:	0800fd28 	.word	0x0800fd28
 80059ac:	0800fb90 	.word	0x0800fb90

080059b0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d107      	bne.n	80059ce <netif_set_link_down+0x1e>
 80059be:	4b11      	ldr	r3, [pc, #68]	; (8005a04 <netif_set_link_down+0x54>)
 80059c0:	f240 4206 	movw	r2, #1030	; 0x406
 80059c4:	4910      	ldr	r1, [pc, #64]	; (8005a08 <netif_set_link_down+0x58>)
 80059c6:	4811      	ldr	r0, [pc, #68]	; (8005a0c <netif_set_link_down+0x5c>)
 80059c8:	f008 ffbc 	bl	800e944 <iprintf>
 80059cc:	e017      	b.n	80059fe <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80059d4:	f003 0304 	and.w	r3, r3, #4
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d010      	beq.n	80059fe <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80059e2:	f023 0304 	bic.w	r3, r3, #4
 80059e6:	b2da      	uxtb	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	69db      	ldr	r3, [r3, #28]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d003      	beq.n	80059fe <netif_set_link_down+0x4e>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80059fe:	3708      	adds	r7, #8
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	0800fb40 	.word	0x0800fb40
 8005a08:	0800fd4c 	.word	0x0800fd4c
 8005a0c:	0800fb90 	.word	0x0800fb90

08005a10 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d002      	beq.n	8005a26 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	683a      	ldr	r2, [r7, #0]
 8005a24:	61da      	str	r2, [r3, #28]
  }
}
 8005a26:	bf00      	nop
 8005a28:	370c      	adds	r7, #12
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr

08005a32 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8005a32:	b480      	push	{r7}
 8005a34:	b085      	sub	sp, #20
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	60f8      	str	r0, [r7, #12]
 8005a3a:	60b9      	str	r1, [r7, #8]
 8005a3c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8005a3e:	f06f 030b 	mvn.w	r3, #11
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3714      	adds	r7, #20
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
	...

08005a50 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b085      	sub	sp, #20
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	4603      	mov	r3, r0
 8005a58:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8005a5a:	79fb      	ldrb	r3, [r7, #7]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d013      	beq.n	8005a88 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8005a60:	4b0d      	ldr	r3, [pc, #52]	; (8005a98 <netif_get_by_index+0x48>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	60fb      	str	r3, [r7, #12]
 8005a66:	e00c      	b.n	8005a82 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a6e:	3301      	adds	r3, #1
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	79fa      	ldrb	r2, [r7, #7]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d101      	bne.n	8005a7c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	e006      	b.n	8005a8a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	60fb      	str	r3, [r7, #12]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1ef      	bne.n	8005a68 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3714      	adds	r7, #20
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	2000a4a8 	.word	0x2000a4a8

08005a9c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8005aa2:	4b0c      	ldr	r3, [pc, #48]	; (8005ad4 <pbuf_free_ooseq+0x38>)
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005aa8:	4b0b      	ldr	r3, [pc, #44]	; (8005ad8 <pbuf_free_ooseq+0x3c>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	607b      	str	r3, [r7, #4]
 8005aae:	e00a      	b.n	8005ac6 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d003      	beq.n	8005ac0 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f002 f93d 	bl	8007d38 <tcp_free_ooseq>
      return;
 8005abe:	e005      	b.n	8005acc <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	607b      	str	r3, [r7, #4]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1f1      	bne.n	8005ab0 <pbuf_free_ooseq+0x14>
    }
  }
}
 8005acc:	3708      	adds	r7, #8
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	2000a4b1 	.word	0x2000a4b1
 8005ad8:	2000a4c0 	.word	0x2000a4c0

08005adc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8005adc:	b480      	push	{r7}
 8005ade:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8005ae0:	4b03      	ldr	r3, [pc, #12]	; (8005af0 <pbuf_pool_is_empty+0x14>)
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8005ae6:	bf00      	nop
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr
 8005af0:	2000a4b1 	.word	0x2000a4b1

08005af4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	4611      	mov	r1, r2
 8005b00:	461a      	mov	r2, r3
 8005b02:	460b      	mov	r3, r1
 8005b04:	80fb      	strh	r3, [r7, #6]
 8005b06:	4613      	mov	r3, r2
 8005b08:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	68ba      	ldr	r2, [r7, #8]
 8005b14:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	88fa      	ldrh	r2, [r7, #6]
 8005b1a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	88ba      	ldrh	r2, [r7, #4]
 8005b20:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8005b22:	8b3b      	ldrh	r3, [r7, #24]
 8005b24:	b2da      	uxtb	r2, r3
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	7f3a      	ldrb	r2, [r7, #28]
 8005b2e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2201      	movs	r2, #1
 8005b34:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	73da      	strb	r2, [r3, #15]
}
 8005b3c:	bf00      	nop
 8005b3e:	3714      	adds	r7, #20
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b08c      	sub	sp, #48	; 0x30
 8005b4c:	af02      	add	r7, sp, #8
 8005b4e:	4603      	mov	r3, r0
 8005b50:	71fb      	strb	r3, [r7, #7]
 8005b52:	460b      	mov	r3, r1
 8005b54:	80bb      	strh	r3, [r7, #4]
 8005b56:	4613      	mov	r3, r2
 8005b58:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8005b5a:	79fb      	ldrb	r3, [r7, #7]
 8005b5c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8005b5e:	887b      	ldrh	r3, [r7, #2]
 8005b60:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005b64:	d07f      	beq.n	8005c66 <pbuf_alloc+0x11e>
 8005b66:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005b6a:	f300 80c8 	bgt.w	8005cfe <pbuf_alloc+0x1b6>
 8005b6e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005b72:	d010      	beq.n	8005b96 <pbuf_alloc+0x4e>
 8005b74:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005b78:	f300 80c1 	bgt.w	8005cfe <pbuf_alloc+0x1b6>
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d002      	beq.n	8005b86 <pbuf_alloc+0x3e>
 8005b80:	2b41      	cmp	r3, #65	; 0x41
 8005b82:	f040 80bc 	bne.w	8005cfe <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8005b86:	887a      	ldrh	r2, [r7, #2]
 8005b88:	88bb      	ldrh	r3, [r7, #4]
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	2000      	movs	r0, #0
 8005b8e:	f000 f8d1 	bl	8005d34 <pbuf_alloc_reference>
 8005b92:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8005b94:	e0bd      	b.n	8005d12 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8005b96:	2300      	movs	r3, #0
 8005b98:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8005b9e:	88bb      	ldrh	r3, [r7, #4]
 8005ba0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005ba2:	2008      	movs	r0, #8
 8005ba4:	f7ff fbce 	bl	8005344 <memp_malloc>
 8005ba8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d109      	bne.n	8005bc4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8005bb0:	f7ff ff94 	bl	8005adc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d002      	beq.n	8005bc0 <pbuf_alloc+0x78>
            pbuf_free(p);
 8005bba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005bbc:	f000 faa8 	bl	8006110 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	e0a7      	b.n	8005d14 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8005bc4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005bc6:	3303      	adds	r3, #3
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	f023 0303 	bic.w	r3, r3, #3
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	8b7a      	ldrh	r2, [r7, #26]
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	bf28      	it	cs
 8005bdc:	4613      	movcs	r3, r2
 8005bde:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8005be0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005be2:	3310      	adds	r3, #16
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	4413      	add	r3, r2
 8005be8:	3303      	adds	r3, #3
 8005bea:	f023 0303 	bic.w	r3, r3, #3
 8005bee:	4618      	mov	r0, r3
 8005bf0:	89f9      	ldrh	r1, [r7, #14]
 8005bf2:	8b7a      	ldrh	r2, [r7, #26]
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	9301      	str	r3, [sp, #4]
 8005bf8:	887b      	ldrh	r3, [r7, #2]
 8005bfa:	9300      	str	r3, [sp, #0]
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	4601      	mov	r1, r0
 8005c00:	6938      	ldr	r0, [r7, #16]
 8005c02:	f7ff ff77 	bl	8005af4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	f003 0303 	and.w	r3, r3, #3
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d006      	beq.n	8005c20 <pbuf_alloc+0xd8>
 8005c12:	4b42      	ldr	r3, [pc, #264]	; (8005d1c <pbuf_alloc+0x1d4>)
 8005c14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c18:	4941      	ldr	r1, [pc, #260]	; (8005d20 <pbuf_alloc+0x1d8>)
 8005c1a:	4842      	ldr	r0, [pc, #264]	; (8005d24 <pbuf_alloc+0x1dc>)
 8005c1c:	f008 fe92 	bl	800e944 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8005c20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005c22:	3303      	adds	r3, #3
 8005c24:	f023 0303 	bic.w	r3, r3, #3
 8005c28:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8005c2c:	d106      	bne.n	8005c3c <pbuf_alloc+0xf4>
 8005c2e:	4b3b      	ldr	r3, [pc, #236]	; (8005d1c <pbuf_alloc+0x1d4>)
 8005c30:	f44f 7281 	mov.w	r2, #258	; 0x102
 8005c34:	493c      	ldr	r1, [pc, #240]	; (8005d28 <pbuf_alloc+0x1e0>)
 8005c36:	483b      	ldr	r0, [pc, #236]	; (8005d24 <pbuf_alloc+0x1dc>)
 8005c38:	f008 fe84 	bl	800e944 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d102      	bne.n	8005c48 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	627b      	str	r3, [r7, #36]	; 0x24
 8005c46:	e002      	b.n	8005c4e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	693a      	ldr	r2, [r7, #16]
 8005c4c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8005c52:	8b7a      	ldrh	r2, [r7, #26]
 8005c54:	89fb      	ldrh	r3, [r7, #14]
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8005c5e:	8b7b      	ldrh	r3, [r7, #26]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d19e      	bne.n	8005ba2 <pbuf_alloc+0x5a>
      break;
 8005c64:	e055      	b.n	8005d12 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8005c66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005c68:	3303      	adds	r3, #3
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	f023 0303 	bic.w	r3, r3, #3
 8005c70:	b29a      	uxth	r2, r3
 8005c72:	88bb      	ldrh	r3, [r7, #4]
 8005c74:	3303      	adds	r3, #3
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	f023 0303 	bic.w	r3, r3, #3
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	4413      	add	r3, r2
 8005c80:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8005c82:	8b3b      	ldrh	r3, [r7, #24]
 8005c84:	3310      	adds	r3, #16
 8005c86:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005c88:	8b3a      	ldrh	r2, [r7, #24]
 8005c8a:	88bb      	ldrh	r3, [r7, #4]
 8005c8c:	3303      	adds	r3, #3
 8005c8e:	f023 0303 	bic.w	r3, r3, #3
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d306      	bcc.n	8005ca4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8005c96:	8afa      	ldrh	r2, [r7, #22]
 8005c98:	88bb      	ldrh	r3, [r7, #4]
 8005c9a:	3303      	adds	r3, #3
 8005c9c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d201      	bcs.n	8005ca8 <pbuf_alloc+0x160>
        return NULL;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	e035      	b.n	8005d14 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8005ca8:	8afb      	ldrh	r3, [r7, #22]
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7ff f9ba 	bl	8005024 <mem_malloc>
 8005cb0:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d101      	bne.n	8005cbc <pbuf_alloc+0x174>
        return NULL;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	e02b      	b.n	8005d14 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8005cbc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005cbe:	3310      	adds	r3, #16
 8005cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cc2:	4413      	add	r3, r2
 8005cc4:	3303      	adds	r3, #3
 8005cc6:	f023 0303 	bic.w	r3, r3, #3
 8005cca:	4618      	mov	r0, r3
 8005ccc:	88b9      	ldrh	r1, [r7, #4]
 8005cce:	88ba      	ldrh	r2, [r7, #4]
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	9301      	str	r3, [sp, #4]
 8005cd4:	887b      	ldrh	r3, [r7, #2]
 8005cd6:	9300      	str	r3, [sp, #0]
 8005cd8:	460b      	mov	r3, r1
 8005cda:	4601      	mov	r1, r0
 8005cdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005cde:	f7ff ff09 	bl	8005af4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	f003 0303 	and.w	r3, r3, #3
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d010      	beq.n	8005d10 <pbuf_alloc+0x1c8>
 8005cee:	4b0b      	ldr	r3, [pc, #44]	; (8005d1c <pbuf_alloc+0x1d4>)
 8005cf0:	f44f 7291 	mov.w	r2, #290	; 0x122
 8005cf4:	490d      	ldr	r1, [pc, #52]	; (8005d2c <pbuf_alloc+0x1e4>)
 8005cf6:	480b      	ldr	r0, [pc, #44]	; (8005d24 <pbuf_alloc+0x1dc>)
 8005cf8:	f008 fe24 	bl	800e944 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8005cfc:	e008      	b.n	8005d10 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005cfe:	4b07      	ldr	r3, [pc, #28]	; (8005d1c <pbuf_alloc+0x1d4>)
 8005d00:	f240 1227 	movw	r2, #295	; 0x127
 8005d04:	490a      	ldr	r1, [pc, #40]	; (8005d30 <pbuf_alloc+0x1e8>)
 8005d06:	4807      	ldr	r0, [pc, #28]	; (8005d24 <pbuf_alloc+0x1dc>)
 8005d08:	f008 fe1c 	bl	800e944 <iprintf>
      return NULL;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	e001      	b.n	8005d14 <pbuf_alloc+0x1cc>
      break;
 8005d10:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8005d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3728      	adds	r7, #40	; 0x28
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	0800fd70 	.word	0x0800fd70
 8005d20:	0800fda0 	.word	0x0800fda0
 8005d24:	0800fdd0 	.word	0x0800fdd0
 8005d28:	0800fdf8 	.word	0x0800fdf8
 8005d2c:	0800fe2c 	.word	0x0800fe2c
 8005d30:	0800fe58 	.word	0x0800fe58

08005d34 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b086      	sub	sp, #24
 8005d38:	af02      	add	r7, sp, #8
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	807b      	strh	r3, [r7, #2]
 8005d40:	4613      	mov	r3, r2
 8005d42:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8005d44:	883b      	ldrh	r3, [r7, #0]
 8005d46:	2b41      	cmp	r3, #65	; 0x41
 8005d48:	d009      	beq.n	8005d5e <pbuf_alloc_reference+0x2a>
 8005d4a:	883b      	ldrh	r3, [r7, #0]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d006      	beq.n	8005d5e <pbuf_alloc_reference+0x2a>
 8005d50:	4b0f      	ldr	r3, [pc, #60]	; (8005d90 <pbuf_alloc_reference+0x5c>)
 8005d52:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8005d56:	490f      	ldr	r1, [pc, #60]	; (8005d94 <pbuf_alloc_reference+0x60>)
 8005d58:	480f      	ldr	r0, [pc, #60]	; (8005d98 <pbuf_alloc_reference+0x64>)
 8005d5a:	f008 fdf3 	bl	800e944 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8005d5e:	2007      	movs	r0, #7
 8005d60:	f7ff faf0 	bl	8005344 <memp_malloc>
 8005d64:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d101      	bne.n	8005d70 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	e00b      	b.n	8005d88 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8005d70:	8879      	ldrh	r1, [r7, #2]
 8005d72:	887a      	ldrh	r2, [r7, #2]
 8005d74:	2300      	movs	r3, #0
 8005d76:	9301      	str	r3, [sp, #4]
 8005d78:	883b      	ldrh	r3, [r7, #0]
 8005d7a:	9300      	str	r3, [sp, #0]
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	6879      	ldr	r1, [r7, #4]
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	f7ff feb7 	bl	8005af4 <pbuf_init_alloced_pbuf>
  return p;
 8005d86:	68fb      	ldr	r3, [r7, #12]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3710      	adds	r7, #16
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	0800fd70 	.word	0x0800fd70
 8005d94:	0800fe74 	.word	0x0800fe74
 8005d98:	0800fdd0 	.word	0x0800fdd0

08005d9c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b088      	sub	sp, #32
 8005da0:	af02      	add	r7, sp, #8
 8005da2:	607b      	str	r3, [r7, #4]
 8005da4:	4603      	mov	r3, r0
 8005da6:	73fb      	strb	r3, [r7, #15]
 8005da8:	460b      	mov	r3, r1
 8005daa:	81bb      	strh	r3, [r7, #12]
 8005dac:	4613      	mov	r3, r2
 8005dae:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8005db0:	7bfb      	ldrb	r3, [r7, #15]
 8005db2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005db4:	8a7b      	ldrh	r3, [r7, #18]
 8005db6:	3303      	adds	r3, #3
 8005db8:	f023 0203 	bic.w	r2, r3, #3
 8005dbc:	89bb      	ldrh	r3, [r7, #12]
 8005dbe:	441a      	add	r2, r3
 8005dc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d901      	bls.n	8005dca <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	e018      	b.n	8005dfc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8005dca:	6a3b      	ldr	r3, [r7, #32]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d007      	beq.n	8005de0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005dd0:	8a7b      	ldrh	r3, [r7, #18]
 8005dd2:	3303      	adds	r3, #3
 8005dd4:	f023 0303 	bic.w	r3, r3, #3
 8005dd8:	6a3a      	ldr	r2, [r7, #32]
 8005dda:	4413      	add	r3, r2
 8005ddc:	617b      	str	r3, [r7, #20]
 8005dde:	e001      	b.n	8005de4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8005de0:	2300      	movs	r3, #0
 8005de2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	89b9      	ldrh	r1, [r7, #12]
 8005de8:	89ba      	ldrh	r2, [r7, #12]
 8005dea:	2302      	movs	r3, #2
 8005dec:	9301      	str	r3, [sp, #4]
 8005dee:	897b      	ldrh	r3, [r7, #10]
 8005df0:	9300      	str	r3, [sp, #0]
 8005df2:	460b      	mov	r3, r1
 8005df4:	6979      	ldr	r1, [r7, #20]
 8005df6:	f7ff fe7d 	bl	8005af4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8005dfa:	687b      	ldr	r3, [r7, #4]
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3718      	adds	r7, #24
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d106      	bne.n	8005e24 <pbuf_realloc+0x20>
 8005e16:	4b3a      	ldr	r3, [pc, #232]	; (8005f00 <pbuf_realloc+0xfc>)
 8005e18:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8005e1c:	4939      	ldr	r1, [pc, #228]	; (8005f04 <pbuf_realloc+0x100>)
 8005e1e:	483a      	ldr	r0, [pc, #232]	; (8005f08 <pbuf_realloc+0x104>)
 8005e20:	f008 fd90 	bl	800e944 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	891b      	ldrh	r3, [r3, #8]
 8005e28:	887a      	ldrh	r2, [r7, #2]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d263      	bcs.n	8005ef6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	891a      	ldrh	r2, [r3, #8]
 8005e32:	887b      	ldrh	r3, [r7, #2]
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8005e38:	887b      	ldrh	r3, [r7, #2]
 8005e3a:	817b      	strh	r3, [r7, #10]
  q = p;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8005e40:	e018      	b.n	8005e74 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	895b      	ldrh	r3, [r3, #10]
 8005e46:	897a      	ldrh	r2, [r7, #10]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	891a      	ldrh	r2, [r3, #8]
 8005e50:	893b      	ldrh	r3, [r7, #8]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d106      	bne.n	8005e74 <pbuf_realloc+0x70>
 8005e66:	4b26      	ldr	r3, [pc, #152]	; (8005f00 <pbuf_realloc+0xfc>)
 8005e68:	f240 12af 	movw	r2, #431	; 0x1af
 8005e6c:	4927      	ldr	r1, [pc, #156]	; (8005f0c <pbuf_realloc+0x108>)
 8005e6e:	4826      	ldr	r0, [pc, #152]	; (8005f08 <pbuf_realloc+0x104>)
 8005e70:	f008 fd68 	bl	800e944 <iprintf>
  while (rem_len > q->len) {
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	895b      	ldrh	r3, [r3, #10]
 8005e78:	897a      	ldrh	r2, [r7, #10]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d8e1      	bhi.n	8005e42 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	7b1b      	ldrb	r3, [r3, #12]
 8005e82:	f003 030f 	and.w	r3, r3, #15
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d121      	bne.n	8005ece <pbuf_realloc+0xca>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	895b      	ldrh	r3, [r3, #10]
 8005e8e:	897a      	ldrh	r2, [r7, #10]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d01c      	beq.n	8005ece <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	7b5b      	ldrb	r3, [r3, #13]
 8005e98:	f003 0302 	and.w	r3, r3, #2
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d116      	bne.n	8005ece <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	685a      	ldr	r2, [r3, #4]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	b29a      	uxth	r2, r3
 8005eaa:	897b      	ldrh	r3, [r7, #10]
 8005eac:	4413      	add	r3, r2
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	68f8      	ldr	r0, [r7, #12]
 8005eb4:	f7fe ffba 	bl	8004e2c <mem_trim>
 8005eb8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d106      	bne.n	8005ece <pbuf_realloc+0xca>
 8005ec0:	4b0f      	ldr	r3, [pc, #60]	; (8005f00 <pbuf_realloc+0xfc>)
 8005ec2:	f240 12bd 	movw	r2, #445	; 0x1bd
 8005ec6:	4912      	ldr	r1, [pc, #72]	; (8005f10 <pbuf_realloc+0x10c>)
 8005ec8:	480f      	ldr	r0, [pc, #60]	; (8005f08 <pbuf_realloc+0x104>)
 8005eca:	f008 fd3b 	bl	800e944 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	897a      	ldrh	r2, [r7, #10]
 8005ed2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	895a      	ldrh	r2, [r3, #10]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d004      	beq.n	8005eee <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f000 f911 	bl	8006110 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	601a      	str	r2, [r3, #0]
 8005ef4:	e000      	b.n	8005ef8 <pbuf_realloc+0xf4>
    return;
 8005ef6:	bf00      	nop

}
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	0800fd70 	.word	0x0800fd70
 8005f04:	0800fe88 	.word	0x0800fe88
 8005f08:	0800fdd0 	.word	0x0800fdd0
 8005f0c:	0800fea0 	.word	0x0800fea0
 8005f10:	0800feb8 	.word	0x0800feb8

08005f14 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	4613      	mov	r3, r2
 8005f20:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d106      	bne.n	8005f36 <pbuf_add_header_impl+0x22>
 8005f28:	4b2b      	ldr	r3, [pc, #172]	; (8005fd8 <pbuf_add_header_impl+0xc4>)
 8005f2a:	f240 12df 	movw	r2, #479	; 0x1df
 8005f2e:	492b      	ldr	r1, [pc, #172]	; (8005fdc <pbuf_add_header_impl+0xc8>)
 8005f30:	482b      	ldr	r0, [pc, #172]	; (8005fe0 <pbuf_add_header_impl+0xcc>)
 8005f32:	f008 fd07 	bl	800e944 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d003      	beq.n	8005f44 <pbuf_add_header_impl+0x30>
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f42:	d301      	bcc.n	8005f48 <pbuf_add_header_impl+0x34>
    return 1;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e043      	b.n	8005fd0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d101      	bne.n	8005f52 <pbuf_add_header_impl+0x3e>
    return 0;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	e03e      	b.n	8005fd0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	891a      	ldrh	r2, [r3, #8]
 8005f5a:	8a7b      	ldrh	r3, [r7, #18]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	8a7a      	ldrh	r2, [r7, #18]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d901      	bls.n	8005f6a <pbuf_add_header_impl+0x56>
    return 1;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e032      	b.n	8005fd0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	7b1b      	ldrb	r3, [r3, #12]
 8005f6e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8005f70:	8a3b      	ldrh	r3, [r7, #16]
 8005f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00c      	beq.n	8005f94 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	685a      	ldr	r2, [r3, #4]
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	425b      	negs	r3, r3
 8005f82:	4413      	add	r3, r2
 8005f84:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	3310      	adds	r3, #16
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d20d      	bcs.n	8005fac <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e01d      	b.n	8005fd0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8005f94:	79fb      	ldrb	r3, [r7, #7]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d006      	beq.n	8005fa8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	685a      	ldr	r2, [r3, #4]
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	425b      	negs	r3, r3
 8005fa2:	4413      	add	r3, r2
 8005fa4:	617b      	str	r3, [r7, #20]
 8005fa6:	e001      	b.n	8005fac <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e011      	b.n	8005fd0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	697a      	ldr	r2, [r7, #20]
 8005fb0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	895a      	ldrh	r2, [r3, #10]
 8005fb6:	8a7b      	ldrh	r3, [r7, #18]
 8005fb8:	4413      	add	r3, r2
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	891a      	ldrh	r2, [r3, #8]
 8005fc4:	8a7b      	ldrh	r3, [r7, #18]
 8005fc6:	4413      	add	r3, r2
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	811a      	strh	r2, [r3, #8]


  return 0;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3718      	adds	r7, #24
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	0800fd70 	.word	0x0800fd70
 8005fdc:	0800fed4 	.word	0x0800fed4
 8005fe0:	0800fdd0 	.word	0x0800fdd0

08005fe4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8005fee:	2200      	movs	r2, #0
 8005ff0:	6839      	ldr	r1, [r7, #0]
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f7ff ff8e 	bl	8005f14 <pbuf_add_header_impl>
 8005ff8:	4603      	mov	r3, r0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3708      	adds	r7, #8
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
	...

08006004 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d106      	bne.n	8006022 <pbuf_remove_header+0x1e>
 8006014:	4b20      	ldr	r3, [pc, #128]	; (8006098 <pbuf_remove_header+0x94>)
 8006016:	f240 224b 	movw	r2, #587	; 0x24b
 800601a:	4920      	ldr	r1, [pc, #128]	; (800609c <pbuf_remove_header+0x98>)
 800601c:	4820      	ldr	r0, [pc, #128]	; (80060a0 <pbuf_remove_header+0x9c>)
 800601e:	f008 fc91 	bl	800e944 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d003      	beq.n	8006030 <pbuf_remove_header+0x2c>
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800602e:	d301      	bcc.n	8006034 <pbuf_remove_header+0x30>
    return 1;
 8006030:	2301      	movs	r3, #1
 8006032:	e02c      	b.n	800608e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d101      	bne.n	800603e <pbuf_remove_header+0x3a>
    return 0;
 800603a:	2300      	movs	r3, #0
 800603c:	e027      	b.n	800608e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	895b      	ldrh	r3, [r3, #10]
 8006046:	89fa      	ldrh	r2, [r7, #14]
 8006048:	429a      	cmp	r2, r3
 800604a:	d908      	bls.n	800605e <pbuf_remove_header+0x5a>
 800604c:	4b12      	ldr	r3, [pc, #72]	; (8006098 <pbuf_remove_header+0x94>)
 800604e:	f240 2255 	movw	r2, #597	; 0x255
 8006052:	4914      	ldr	r1, [pc, #80]	; (80060a4 <pbuf_remove_header+0xa0>)
 8006054:	4812      	ldr	r0, [pc, #72]	; (80060a0 <pbuf_remove_header+0x9c>)
 8006056:	f008 fc75 	bl	800e944 <iprintf>
 800605a:	2301      	movs	r3, #1
 800605c:	e017      	b.n	800608e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	685a      	ldr	r2, [r3, #4]
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	441a      	add	r2, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	895a      	ldrh	r2, [r3, #10]
 8006074:	89fb      	ldrh	r3, [r7, #14]
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	b29a      	uxth	r2, r3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	891a      	ldrh	r2, [r3, #8]
 8006082:	89fb      	ldrh	r3, [r7, #14]
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	b29a      	uxth	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3710      	adds	r7, #16
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	0800fd70 	.word	0x0800fd70
 800609c:	0800fed4 	.word	0x0800fed4
 80060a0:	0800fdd0 	.word	0x0800fdd0
 80060a4:	0800fee0 	.word	0x0800fee0

080060a8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	460b      	mov	r3, r1
 80060b2:	807b      	strh	r3, [r7, #2]
 80060b4:	4613      	mov	r3, r2
 80060b6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80060b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	da08      	bge.n	80060d2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80060c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80060c4:	425b      	negs	r3, r3
 80060c6:	4619      	mov	r1, r3
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f7ff ff9b 	bl	8006004 <pbuf_remove_header>
 80060ce:	4603      	mov	r3, r0
 80060d0:	e007      	b.n	80060e2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80060d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80060d6:	787a      	ldrb	r2, [r7, #1]
 80060d8:	4619      	mov	r1, r3
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f7ff ff1a 	bl	8005f14 <pbuf_add_header_impl>
 80060e0:	4603      	mov	r3, r0
  }
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3708      	adds	r7, #8
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b082      	sub	sp, #8
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
 80060f2:	460b      	mov	r3, r1
 80060f4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80060f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80060fa:	2201      	movs	r2, #1
 80060fc:	4619      	mov	r1, r3
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f7ff ffd2 	bl	80060a8 <pbuf_header_impl>
 8006104:	4603      	mov	r3, r0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3708      	adds	r7, #8
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
	...

08006110 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b086      	sub	sp, #24
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d10b      	bne.n	8006136 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d106      	bne.n	8006132 <pbuf_free+0x22>
 8006124:	4b38      	ldr	r3, [pc, #224]	; (8006208 <pbuf_free+0xf8>)
 8006126:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800612a:	4938      	ldr	r1, [pc, #224]	; (800620c <pbuf_free+0xfc>)
 800612c:	4838      	ldr	r0, [pc, #224]	; (8006210 <pbuf_free+0x100>)
 800612e:	f008 fc09 	bl	800e944 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8006132:	2300      	movs	r3, #0
 8006134:	e063      	b.n	80061fe <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8006136:	2300      	movs	r3, #0
 8006138:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800613a:	e05c      	b.n	80061f6 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	7b9b      	ldrb	r3, [r3, #14]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d106      	bne.n	8006152 <pbuf_free+0x42>
 8006144:	4b30      	ldr	r3, [pc, #192]	; (8006208 <pbuf_free+0xf8>)
 8006146:	f240 22f1 	movw	r2, #753	; 0x2f1
 800614a:	4932      	ldr	r1, [pc, #200]	; (8006214 <pbuf_free+0x104>)
 800614c:	4830      	ldr	r0, [pc, #192]	; (8006210 <pbuf_free+0x100>)
 800614e:	f008 fbf9 	bl	800e944 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	7b9b      	ldrb	r3, [r3, #14]
 8006156:	3b01      	subs	r3, #1
 8006158:	b2da      	uxtb	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	739a      	strb	r2, [r3, #14]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	7b9b      	ldrb	r3, [r3, #14]
 8006162:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8006164:	7dbb      	ldrb	r3, [r7, #22]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d143      	bne.n	80061f2 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	7b1b      	ldrb	r3, [r3, #12]
 8006174:	f003 030f 	and.w	r3, r3, #15
 8006178:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	7b5b      	ldrb	r3, [r3, #13]
 800617e:	f003 0302 	and.w	r3, r3, #2
 8006182:	2b00      	cmp	r3, #0
 8006184:	d011      	beq.n	80061aa <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d106      	bne.n	80061a0 <pbuf_free+0x90>
 8006192:	4b1d      	ldr	r3, [pc, #116]	; (8006208 <pbuf_free+0xf8>)
 8006194:	f240 22ff 	movw	r2, #767	; 0x2ff
 8006198:	491f      	ldr	r1, [pc, #124]	; (8006218 <pbuf_free+0x108>)
 800619a:	481d      	ldr	r0, [pc, #116]	; (8006210 <pbuf_free+0x100>)
 800619c:	f008 fbd2 	bl	800e944 <iprintf>
        pc->custom_free_function(p);
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	4798      	blx	r3
 80061a8:	e01d      	b.n	80061e6 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80061aa:	7bfb      	ldrb	r3, [r7, #15]
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d104      	bne.n	80061ba <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80061b0:	6879      	ldr	r1, [r7, #4]
 80061b2:	2008      	movs	r0, #8
 80061b4:	f7ff f936 	bl	8005424 <memp_free>
 80061b8:	e015      	b.n	80061e6 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80061ba:	7bfb      	ldrb	r3, [r7, #15]
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d104      	bne.n	80061ca <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80061c0:	6879      	ldr	r1, [r7, #4]
 80061c2:	2007      	movs	r0, #7
 80061c4:	f7ff f92e 	bl	8005424 <memp_free>
 80061c8:	e00d      	b.n	80061e6 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80061ca:	7bfb      	ldrb	r3, [r7, #15]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d103      	bne.n	80061d8 <pbuf_free+0xc8>
          mem_free(p);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f7fe fdc1 	bl	8004d58 <mem_free>
 80061d6:	e006      	b.n	80061e6 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80061d8:	4b0b      	ldr	r3, [pc, #44]	; (8006208 <pbuf_free+0xf8>)
 80061da:	f240 320f 	movw	r2, #783	; 0x30f
 80061de:	490f      	ldr	r1, [pc, #60]	; (800621c <pbuf_free+0x10c>)
 80061e0:	480b      	ldr	r0, [pc, #44]	; (8006210 <pbuf_free+0x100>)
 80061e2:	f008 fbaf 	bl	800e944 <iprintf>
        }
      }
      count++;
 80061e6:	7dfb      	ldrb	r3, [r7, #23]
 80061e8:	3301      	adds	r3, #1
 80061ea:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	607b      	str	r3, [r7, #4]
 80061f0:	e001      	b.n	80061f6 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80061f2:	2300      	movs	r3, #0
 80061f4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d19f      	bne.n	800613c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80061fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3718      	adds	r7, #24
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	0800fd70 	.word	0x0800fd70
 800620c:	0800fed4 	.word	0x0800fed4
 8006210:	0800fdd0 	.word	0x0800fdd0
 8006214:	0800ff00 	.word	0x0800ff00
 8006218:	0800ff18 	.word	0x0800ff18
 800621c:	0800ff3c 	.word	0x0800ff3c

08006220 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8006228:	2300      	movs	r3, #0
 800622a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800622c:	e005      	b.n	800623a <pbuf_clen+0x1a>
    ++len;
 800622e:	89fb      	ldrh	r3, [r7, #14]
 8006230:	3301      	adds	r3, #1
 8006232:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d1f6      	bne.n	800622e <pbuf_clen+0xe>
  }
  return len;
 8006240:	89fb      	ldrh	r3, [r7, #14]
}
 8006242:	4618      	mov	r0, r3
 8006244:	3714      	adds	r7, #20
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr
	...

08006250 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d010      	beq.n	8006280 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	7b9b      	ldrb	r3, [r3, #14]
 8006262:	3301      	adds	r3, #1
 8006264:	b2da      	uxtb	r2, r3
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	7b9b      	ldrb	r3, [r3, #14]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d106      	bne.n	8006280 <pbuf_ref+0x30>
 8006272:	4b05      	ldr	r3, [pc, #20]	; (8006288 <pbuf_ref+0x38>)
 8006274:	f240 3242 	movw	r2, #834	; 0x342
 8006278:	4904      	ldr	r1, [pc, #16]	; (800628c <pbuf_ref+0x3c>)
 800627a:	4805      	ldr	r0, [pc, #20]	; (8006290 <pbuf_ref+0x40>)
 800627c:	f008 fb62 	bl	800e944 <iprintf>
  }
}
 8006280:	bf00      	nop
 8006282:	3708      	adds	r7, #8
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}
 8006288:	0800fd70 	.word	0x0800fd70
 800628c:	0800ff50 	.word	0x0800ff50
 8006290:	0800fdd0 	.word	0x0800fdd0

08006294 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d002      	beq.n	80062aa <pbuf_cat+0x16>
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d107      	bne.n	80062ba <pbuf_cat+0x26>
 80062aa:	4b20      	ldr	r3, [pc, #128]	; (800632c <pbuf_cat+0x98>)
 80062ac:	f240 3259 	movw	r2, #857	; 0x359
 80062b0:	491f      	ldr	r1, [pc, #124]	; (8006330 <pbuf_cat+0x9c>)
 80062b2:	4820      	ldr	r0, [pc, #128]	; (8006334 <pbuf_cat+0xa0>)
 80062b4:	f008 fb46 	bl	800e944 <iprintf>
 80062b8:	e034      	b.n	8006324 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	60fb      	str	r3, [r7, #12]
 80062be:	e00a      	b.n	80062d6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	891a      	ldrh	r2, [r3, #8]
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	891b      	ldrh	r3, [r3, #8]
 80062c8:	4413      	add	r3, r2
 80062ca:	b29a      	uxth	r2, r3
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	60fb      	str	r3, [r7, #12]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1f0      	bne.n	80062c0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	891a      	ldrh	r2, [r3, #8]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	895b      	ldrh	r3, [r3, #10]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d006      	beq.n	80062f8 <pbuf_cat+0x64>
 80062ea:	4b10      	ldr	r3, [pc, #64]	; (800632c <pbuf_cat+0x98>)
 80062ec:	f240 3262 	movw	r2, #866	; 0x362
 80062f0:	4911      	ldr	r1, [pc, #68]	; (8006338 <pbuf_cat+0xa4>)
 80062f2:	4810      	ldr	r0, [pc, #64]	; (8006334 <pbuf_cat+0xa0>)
 80062f4:	f008 fb26 	bl	800e944 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d006      	beq.n	800630e <pbuf_cat+0x7a>
 8006300:	4b0a      	ldr	r3, [pc, #40]	; (800632c <pbuf_cat+0x98>)
 8006302:	f240 3263 	movw	r2, #867	; 0x363
 8006306:	490d      	ldr	r1, [pc, #52]	; (800633c <pbuf_cat+0xa8>)
 8006308:	480a      	ldr	r0, [pc, #40]	; (8006334 <pbuf_cat+0xa0>)
 800630a:	f008 fb1b 	bl	800e944 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	891a      	ldrh	r2, [r3, #8]
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	891b      	ldrh	r3, [r3, #8]
 8006316:	4413      	add	r3, r2
 8006318:	b29a      	uxth	r2, r3
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	683a      	ldr	r2, [r7, #0]
 8006322:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	0800fd70 	.word	0x0800fd70
 8006330:	0800ff64 	.word	0x0800ff64
 8006334:	0800fdd0 	.word	0x0800fdd0
 8006338:	0800ff9c 	.word	0x0800ff9c
 800633c:	0800ffcc 	.word	0x0800ffcc

08006340 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b086      	sub	sp, #24
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800634a:	2300      	movs	r3, #0
 800634c:	617b      	str	r3, [r7, #20]
 800634e:	2300      	movs	r3, #0
 8006350:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d008      	beq.n	800636a <pbuf_copy+0x2a>
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d005      	beq.n	800636a <pbuf_copy+0x2a>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	891a      	ldrh	r2, [r3, #8]
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	891b      	ldrh	r3, [r3, #8]
 8006366:	429a      	cmp	r2, r3
 8006368:	d209      	bcs.n	800637e <pbuf_copy+0x3e>
 800636a:	4b57      	ldr	r3, [pc, #348]	; (80064c8 <pbuf_copy+0x188>)
 800636c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8006370:	4956      	ldr	r1, [pc, #344]	; (80064cc <pbuf_copy+0x18c>)
 8006372:	4857      	ldr	r0, [pc, #348]	; (80064d0 <pbuf_copy+0x190>)
 8006374:	f008 fae6 	bl	800e944 <iprintf>
 8006378:	f06f 030f 	mvn.w	r3, #15
 800637c:	e09f      	b.n	80064be <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	895b      	ldrh	r3, [r3, #10]
 8006382:	461a      	mov	r2, r3
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	1ad2      	subs	r2, r2, r3
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	895b      	ldrh	r3, [r3, #10]
 800638c:	4619      	mov	r1, r3
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	1acb      	subs	r3, r1, r3
 8006392:	429a      	cmp	r2, r3
 8006394:	d306      	bcc.n	80063a4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	895b      	ldrh	r3, [r3, #10]
 800639a:	461a      	mov	r2, r3
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	60fb      	str	r3, [r7, #12]
 80063a2:	e005      	b.n	80063b0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	895b      	ldrh	r3, [r3, #10]
 80063a8:	461a      	mov	r2, r3
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	685a      	ldr	r2, [r3, #4]
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	18d0      	adds	r0, r2, r3
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	685a      	ldr	r2, [r3, #4]
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	4413      	add	r3, r2
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	4619      	mov	r1, r3
 80063c4:	f008 fbab 	bl	800eb1e <memcpy>
    offset_to += len;
 80063c8:	697a      	ldr	r2, [r7, #20]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	4413      	add	r3, r2
 80063ce:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80063d0:	693a      	ldr	r2, [r7, #16]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	4413      	add	r3, r2
 80063d6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	895b      	ldrh	r3, [r3, #10]
 80063dc:	461a      	mov	r2, r3
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d906      	bls.n	80063f2 <pbuf_copy+0xb2>
 80063e4:	4b38      	ldr	r3, [pc, #224]	; (80064c8 <pbuf_copy+0x188>)
 80063e6:	f240 32d9 	movw	r2, #985	; 0x3d9
 80063ea:	493a      	ldr	r1, [pc, #232]	; (80064d4 <pbuf_copy+0x194>)
 80063ec:	4838      	ldr	r0, [pc, #224]	; (80064d0 <pbuf_copy+0x190>)
 80063ee:	f008 faa9 	bl	800e944 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	895b      	ldrh	r3, [r3, #10]
 80063f6:	461a      	mov	r2, r3
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d906      	bls.n	800640c <pbuf_copy+0xcc>
 80063fe:	4b32      	ldr	r3, [pc, #200]	; (80064c8 <pbuf_copy+0x188>)
 8006400:	f240 32da 	movw	r2, #986	; 0x3da
 8006404:	4934      	ldr	r1, [pc, #208]	; (80064d8 <pbuf_copy+0x198>)
 8006406:	4832      	ldr	r0, [pc, #200]	; (80064d0 <pbuf_copy+0x190>)
 8006408:	f008 fa9c 	bl	800e944 <iprintf>
    if (offset_from >= p_from->len) {
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	895b      	ldrh	r3, [r3, #10]
 8006410:	461a      	mov	r2, r3
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	4293      	cmp	r3, r2
 8006416:	d304      	bcc.n	8006422 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8006418:	2300      	movs	r3, #0
 800641a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	895b      	ldrh	r3, [r3, #10]
 8006426:	461a      	mov	r2, r3
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	4293      	cmp	r3, r2
 800642c:	d114      	bne.n	8006458 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800642e:	2300      	movs	r3, #0
 8006430:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d10c      	bne.n	8006458 <pbuf_copy+0x118>
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d009      	beq.n	8006458 <pbuf_copy+0x118>
 8006444:	4b20      	ldr	r3, [pc, #128]	; (80064c8 <pbuf_copy+0x188>)
 8006446:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800644a:	4924      	ldr	r1, [pc, #144]	; (80064dc <pbuf_copy+0x19c>)
 800644c:	4820      	ldr	r0, [pc, #128]	; (80064d0 <pbuf_copy+0x190>)
 800644e:	f008 fa79 	bl	800e944 <iprintf>
 8006452:	f06f 030f 	mvn.w	r3, #15
 8006456:	e032      	b.n	80064be <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d013      	beq.n	8006486 <pbuf_copy+0x146>
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	895a      	ldrh	r2, [r3, #10]
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	891b      	ldrh	r3, [r3, #8]
 8006466:	429a      	cmp	r2, r3
 8006468:	d10d      	bne.n	8006486 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d009      	beq.n	8006486 <pbuf_copy+0x146>
 8006472:	4b15      	ldr	r3, [pc, #84]	; (80064c8 <pbuf_copy+0x188>)
 8006474:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8006478:	4919      	ldr	r1, [pc, #100]	; (80064e0 <pbuf_copy+0x1a0>)
 800647a:	4815      	ldr	r0, [pc, #84]	; (80064d0 <pbuf_copy+0x190>)
 800647c:	f008 fa62 	bl	800e944 <iprintf>
 8006480:	f06f 0305 	mvn.w	r3, #5
 8006484:	e01b      	b.n	80064be <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d013      	beq.n	80064b4 <pbuf_copy+0x174>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	895a      	ldrh	r2, [r3, #10]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	891b      	ldrh	r3, [r3, #8]
 8006494:	429a      	cmp	r2, r3
 8006496:	d10d      	bne.n	80064b4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d009      	beq.n	80064b4 <pbuf_copy+0x174>
 80064a0:	4b09      	ldr	r3, [pc, #36]	; (80064c8 <pbuf_copy+0x188>)
 80064a2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80064a6:	490e      	ldr	r1, [pc, #56]	; (80064e0 <pbuf_copy+0x1a0>)
 80064a8:	4809      	ldr	r0, [pc, #36]	; (80064d0 <pbuf_copy+0x190>)
 80064aa:	f008 fa4b 	bl	800e944 <iprintf>
 80064ae:	f06f 0305 	mvn.w	r3, #5
 80064b2:	e004      	b.n	80064be <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	f47f af61 	bne.w	800637e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80064bc:	2300      	movs	r3, #0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3718      	adds	r7, #24
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	0800fd70 	.word	0x0800fd70
 80064cc:	08010018 	.word	0x08010018
 80064d0:	0800fdd0 	.word	0x0800fdd0
 80064d4:	08010048 	.word	0x08010048
 80064d8:	08010060 	.word	0x08010060
 80064dc:	0801007c 	.word	0x0801007c
 80064e0:	0801008c 	.word	0x0801008c

080064e4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b088      	sub	sp, #32
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	4611      	mov	r1, r2
 80064f0:	461a      	mov	r2, r3
 80064f2:	460b      	mov	r3, r1
 80064f4:	80fb      	strh	r3, [r7, #6]
 80064f6:	4613      	mov	r3, r2
 80064f8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80064fa:	2300      	movs	r3, #0
 80064fc:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80064fe:	2300      	movs	r3, #0
 8006500:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d108      	bne.n	800651a <pbuf_copy_partial+0x36>
 8006508:	4b2b      	ldr	r3, [pc, #172]	; (80065b8 <pbuf_copy_partial+0xd4>)
 800650a:	f240 420a 	movw	r2, #1034	; 0x40a
 800650e:	492b      	ldr	r1, [pc, #172]	; (80065bc <pbuf_copy_partial+0xd8>)
 8006510:	482b      	ldr	r0, [pc, #172]	; (80065c0 <pbuf_copy_partial+0xdc>)
 8006512:	f008 fa17 	bl	800e944 <iprintf>
 8006516:	2300      	movs	r3, #0
 8006518:	e04a      	b.n	80065b0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d108      	bne.n	8006532 <pbuf_copy_partial+0x4e>
 8006520:	4b25      	ldr	r3, [pc, #148]	; (80065b8 <pbuf_copy_partial+0xd4>)
 8006522:	f240 420b 	movw	r2, #1035	; 0x40b
 8006526:	4927      	ldr	r1, [pc, #156]	; (80065c4 <pbuf_copy_partial+0xe0>)
 8006528:	4825      	ldr	r0, [pc, #148]	; (80065c0 <pbuf_copy_partial+0xdc>)
 800652a:	f008 fa0b 	bl	800e944 <iprintf>
 800652e:	2300      	movs	r3, #0
 8006530:	e03e      	b.n	80065b0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	61fb      	str	r3, [r7, #28]
 8006536:	e034      	b.n	80065a2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8006538:	88bb      	ldrh	r3, [r7, #4]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d00a      	beq.n	8006554 <pbuf_copy_partial+0x70>
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	895b      	ldrh	r3, [r3, #10]
 8006542:	88ba      	ldrh	r2, [r7, #4]
 8006544:	429a      	cmp	r2, r3
 8006546:	d305      	bcc.n	8006554 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	895b      	ldrh	r3, [r3, #10]
 800654c:	88ba      	ldrh	r2, [r7, #4]
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	80bb      	strh	r3, [r7, #4]
 8006552:	e023      	b.n	800659c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	895a      	ldrh	r2, [r3, #10]
 8006558:	88bb      	ldrh	r3, [r7, #4]
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800655e:	8b3a      	ldrh	r2, [r7, #24]
 8006560:	88fb      	ldrh	r3, [r7, #6]
 8006562:	429a      	cmp	r2, r3
 8006564:	d901      	bls.n	800656a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8006566:	88fb      	ldrh	r3, [r7, #6]
 8006568:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800656a:	8b7b      	ldrh	r3, [r7, #26]
 800656c:	68ba      	ldr	r2, [r7, #8]
 800656e:	18d0      	adds	r0, r2, r3
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	685a      	ldr	r2, [r3, #4]
 8006574:	88bb      	ldrh	r3, [r7, #4]
 8006576:	4413      	add	r3, r2
 8006578:	8b3a      	ldrh	r2, [r7, #24]
 800657a:	4619      	mov	r1, r3
 800657c:	f008 facf 	bl	800eb1e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006580:	8afa      	ldrh	r2, [r7, #22]
 8006582:	8b3b      	ldrh	r3, [r7, #24]
 8006584:	4413      	add	r3, r2
 8006586:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8006588:	8b7a      	ldrh	r2, [r7, #26]
 800658a:	8b3b      	ldrh	r3, [r7, #24]
 800658c:	4413      	add	r3, r2
 800658e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8006590:	88fa      	ldrh	r2, [r7, #6]
 8006592:	8b3b      	ldrh	r3, [r7, #24]
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8006598:	2300      	movs	r3, #0
 800659a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	61fb      	str	r3, [r7, #28]
 80065a2:	88fb      	ldrh	r3, [r7, #6]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d002      	beq.n	80065ae <pbuf_copy_partial+0xca>
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d1c4      	bne.n	8006538 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80065ae:	8afb      	ldrh	r3, [r7, #22]
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3720      	adds	r7, #32
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	0800fd70 	.word	0x0800fd70
 80065bc:	080100b8 	.word	0x080100b8
 80065c0:	0800fdd0 	.word	0x0800fdd0
 80065c4:	080100d8 	.word	0x080100d8

080065c8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	4603      	mov	r3, r0
 80065d0:	603a      	str	r2, [r7, #0]
 80065d2:	71fb      	strb	r3, [r7, #7]
 80065d4:	460b      	mov	r3, r1
 80065d6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	8919      	ldrh	r1, [r3, #8]
 80065dc:	88ba      	ldrh	r2, [r7, #4]
 80065de:	79fb      	ldrb	r3, [r7, #7]
 80065e0:	4618      	mov	r0, r3
 80065e2:	f7ff fab1 	bl	8005b48 <pbuf_alloc>
 80065e6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d101      	bne.n	80065f2 <pbuf_clone+0x2a>
    return NULL;
 80065ee:	2300      	movs	r3, #0
 80065f0:	e011      	b.n	8006616 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80065f2:	6839      	ldr	r1, [r7, #0]
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f7ff fea3 	bl	8006340 <pbuf_copy>
 80065fa:	4603      	mov	r3, r0
 80065fc:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80065fe:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d006      	beq.n	8006614 <pbuf_clone+0x4c>
 8006606:	4b06      	ldr	r3, [pc, #24]	; (8006620 <pbuf_clone+0x58>)
 8006608:	f240 5224 	movw	r2, #1316	; 0x524
 800660c:	4905      	ldr	r1, [pc, #20]	; (8006624 <pbuf_clone+0x5c>)
 800660e:	4806      	ldr	r0, [pc, #24]	; (8006628 <pbuf_clone+0x60>)
 8006610:	f008 f998 	bl	800e944 <iprintf>
  return q;
 8006614:	68fb      	ldr	r3, [r7, #12]
}
 8006616:	4618      	mov	r0, r3
 8006618:	3710      	adds	r7, #16
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	0800fd70 	.word	0x0800fd70
 8006624:	080101e4 	.word	0x080101e4
 8006628:	0800fdd0 	.word	0x0800fdd0

0800662c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8006630:	f008 f888 	bl	800e744 <rand>
 8006634:	4603      	mov	r3, r0
 8006636:	b29b      	uxth	r3, r3
 8006638:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800663c:	b29b      	uxth	r3, r3
 800663e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8006642:	b29a      	uxth	r2, r3
 8006644:	4b01      	ldr	r3, [pc, #4]	; (800664c <tcp_init+0x20>)
 8006646:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8006648:	bf00      	nop
 800664a:	bd80      	pop	{r7, pc}
 800664c:	20000020 	.word	0x20000020

08006650 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	7d1b      	ldrb	r3, [r3, #20]
 800665c:	2b01      	cmp	r3, #1
 800665e:	d105      	bne.n	800666c <tcp_free+0x1c>
 8006660:	4b06      	ldr	r3, [pc, #24]	; (800667c <tcp_free+0x2c>)
 8006662:	22d4      	movs	r2, #212	; 0xd4
 8006664:	4906      	ldr	r1, [pc, #24]	; (8006680 <tcp_free+0x30>)
 8006666:	4807      	ldr	r0, [pc, #28]	; (8006684 <tcp_free+0x34>)
 8006668:	f008 f96c 	bl	800e944 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800666c:	6879      	ldr	r1, [r7, #4]
 800666e:	2001      	movs	r0, #1
 8006670:	f7fe fed8 	bl	8005424 <memp_free>
}
 8006674:	bf00      	nop
 8006676:	3708      	adds	r7, #8
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}
 800667c:	08010270 	.word	0x08010270
 8006680:	080102a0 	.word	0x080102a0
 8006684:	080102b4 	.word	0x080102b4

08006688 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	7d1b      	ldrb	r3, [r3, #20]
 8006694:	2b01      	cmp	r3, #1
 8006696:	d105      	bne.n	80066a4 <tcp_free_listen+0x1c>
 8006698:	4b06      	ldr	r3, [pc, #24]	; (80066b4 <tcp_free_listen+0x2c>)
 800669a:	22df      	movs	r2, #223	; 0xdf
 800669c:	4906      	ldr	r1, [pc, #24]	; (80066b8 <tcp_free_listen+0x30>)
 800669e:	4807      	ldr	r0, [pc, #28]	; (80066bc <tcp_free_listen+0x34>)
 80066a0:	f008 f950 	bl	800e944 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80066a4:	6879      	ldr	r1, [r7, #4]
 80066a6:	2002      	movs	r0, #2
 80066a8:	f7fe febc 	bl	8005424 <memp_free>
}
 80066ac:	bf00      	nop
 80066ae:	3708      	adds	r7, #8
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	08010270 	.word	0x08010270
 80066b8:	080102dc 	.word	0x080102dc
 80066bc:	080102b4 	.word	0x080102b4

080066c0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80066c4:	f000 fea2 	bl	800740c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80066c8:	4b07      	ldr	r3, [pc, #28]	; (80066e8 <tcp_tmr+0x28>)
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	3301      	adds	r3, #1
 80066ce:	b2da      	uxtb	r2, r3
 80066d0:	4b05      	ldr	r3, [pc, #20]	; (80066e8 <tcp_tmr+0x28>)
 80066d2:	701a      	strb	r2, [r3, #0]
 80066d4:	4b04      	ldr	r3, [pc, #16]	; (80066e8 <tcp_tmr+0x28>)
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	f003 0301 	and.w	r3, r3, #1
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d001      	beq.n	80066e4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80066e0:	f000 fb54 	bl	8006d8c <tcp_slowtmr>
  }
}
 80066e4:	bf00      	nop
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	2000a4c9 	.word	0x2000a4c9

080066ec <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d105      	bne.n	8006708 <tcp_remove_listener+0x1c>
 80066fc:	4b0d      	ldr	r3, [pc, #52]	; (8006734 <tcp_remove_listener+0x48>)
 80066fe:	22ff      	movs	r2, #255	; 0xff
 8006700:	490d      	ldr	r1, [pc, #52]	; (8006738 <tcp_remove_listener+0x4c>)
 8006702:	480e      	ldr	r0, [pc, #56]	; (800673c <tcp_remove_listener+0x50>)
 8006704:	f008 f91e 	bl	800e944 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	60fb      	str	r3, [r7, #12]
 800670c:	e00a      	b.n	8006724 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006712:	683a      	ldr	r2, [r7, #0]
 8006714:	429a      	cmp	r2, r3
 8006716:	d102      	bne.n	800671e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2200      	movs	r2, #0
 800671c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	60fb      	str	r3, [r7, #12]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d1f1      	bne.n	800670e <tcp_remove_listener+0x22>
    }
  }
}
 800672a:	bf00      	nop
 800672c:	bf00      	nop
 800672e:	3710      	adds	r7, #16
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	08010270 	.word	0x08010270
 8006738:	080102f8 	.word	0x080102f8
 800673c:	080102b4 	.word	0x080102b4

08006740 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d106      	bne.n	800675c <tcp_listen_closed+0x1c>
 800674e:	4b14      	ldr	r3, [pc, #80]	; (80067a0 <tcp_listen_closed+0x60>)
 8006750:	f240 1211 	movw	r2, #273	; 0x111
 8006754:	4913      	ldr	r1, [pc, #76]	; (80067a4 <tcp_listen_closed+0x64>)
 8006756:	4814      	ldr	r0, [pc, #80]	; (80067a8 <tcp_listen_closed+0x68>)
 8006758:	f008 f8f4 	bl	800e944 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	7d1b      	ldrb	r3, [r3, #20]
 8006760:	2b01      	cmp	r3, #1
 8006762:	d006      	beq.n	8006772 <tcp_listen_closed+0x32>
 8006764:	4b0e      	ldr	r3, [pc, #56]	; (80067a0 <tcp_listen_closed+0x60>)
 8006766:	f44f 7289 	mov.w	r2, #274	; 0x112
 800676a:	4910      	ldr	r1, [pc, #64]	; (80067ac <tcp_listen_closed+0x6c>)
 800676c:	480e      	ldr	r0, [pc, #56]	; (80067a8 <tcp_listen_closed+0x68>)
 800676e:	f008 f8e9 	bl	800e944 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006772:	2301      	movs	r3, #1
 8006774:	60fb      	str	r3, [r7, #12]
 8006776:	e00b      	b.n	8006790 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8006778:	4a0d      	ldr	r2, [pc, #52]	; (80067b0 <tcp_listen_closed+0x70>)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	6879      	ldr	r1, [r7, #4]
 8006784:	4618      	mov	r0, r3
 8006786:	f7ff ffb1 	bl	80066ec <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	3301      	adds	r3, #1
 800678e:	60fb      	str	r3, [r7, #12]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2b03      	cmp	r3, #3
 8006794:	d9f0      	bls.n	8006778 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8006796:	bf00      	nop
 8006798:	bf00      	nop
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	08010270 	.word	0x08010270
 80067a4:	08010320 	.word	0x08010320
 80067a8:	080102b4 	.word	0x080102b4
 80067ac:	0801032c 	.word	0x0801032c
 80067b0:	08012248 	.word	0x08012248

080067b4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80067b4:	b5b0      	push	{r4, r5, r7, lr}
 80067b6:	b088      	sub	sp, #32
 80067b8:	af04      	add	r7, sp, #16
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	460b      	mov	r3, r1
 80067be:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d106      	bne.n	80067d4 <tcp_close_shutdown+0x20>
 80067c6:	4b63      	ldr	r3, [pc, #396]	; (8006954 <tcp_close_shutdown+0x1a0>)
 80067c8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80067cc:	4962      	ldr	r1, [pc, #392]	; (8006958 <tcp_close_shutdown+0x1a4>)
 80067ce:	4863      	ldr	r0, [pc, #396]	; (800695c <tcp_close_shutdown+0x1a8>)
 80067d0:	f008 f8b8 	bl	800e944 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80067d4:	78fb      	ldrb	r3, [r7, #3]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d066      	beq.n	80068a8 <tcp_close_shutdown+0xf4>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	7d1b      	ldrb	r3, [r3, #20]
 80067de:	2b04      	cmp	r3, #4
 80067e0:	d003      	beq.n	80067ea <tcp_close_shutdown+0x36>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	7d1b      	ldrb	r3, [r3, #20]
 80067e6:	2b07      	cmp	r3, #7
 80067e8:	d15e      	bne.n	80068a8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d104      	bne.n	80067fc <tcp_close_shutdown+0x48>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067f6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80067fa:	d055      	beq.n	80068a8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	8b5b      	ldrh	r3, [r3, #26]
 8006800:	f003 0310 	and.w	r3, r3, #16
 8006804:	2b00      	cmp	r3, #0
 8006806:	d106      	bne.n	8006816 <tcp_close_shutdown+0x62>
 8006808:	4b52      	ldr	r3, [pc, #328]	; (8006954 <tcp_close_shutdown+0x1a0>)
 800680a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800680e:	4954      	ldr	r1, [pc, #336]	; (8006960 <tcp_close_shutdown+0x1ac>)
 8006810:	4852      	ldr	r0, [pc, #328]	; (800695c <tcp_close_shutdown+0x1a8>)
 8006812:	f008 f897 	bl	800e944 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800681e:	687d      	ldr	r5, [r7, #4]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	3304      	adds	r3, #4
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	8ad2      	ldrh	r2, [r2, #22]
 8006828:	6879      	ldr	r1, [r7, #4]
 800682a:	8b09      	ldrh	r1, [r1, #24]
 800682c:	9102      	str	r1, [sp, #8]
 800682e:	9201      	str	r2, [sp, #4]
 8006830:	9300      	str	r3, [sp, #0]
 8006832:	462b      	mov	r3, r5
 8006834:	4622      	mov	r2, r4
 8006836:	4601      	mov	r1, r0
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f004 fe91 	bl	800b560 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f001 f8c6 	bl	80079d0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006844:	4b47      	ldr	r3, [pc, #284]	; (8006964 <tcp_close_shutdown+0x1b0>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	429a      	cmp	r2, r3
 800684c:	d105      	bne.n	800685a <tcp_close_shutdown+0xa6>
 800684e:	4b45      	ldr	r3, [pc, #276]	; (8006964 <tcp_close_shutdown+0x1b0>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	4a43      	ldr	r2, [pc, #268]	; (8006964 <tcp_close_shutdown+0x1b0>)
 8006856:	6013      	str	r3, [r2, #0]
 8006858:	e013      	b.n	8006882 <tcp_close_shutdown+0xce>
 800685a:	4b42      	ldr	r3, [pc, #264]	; (8006964 <tcp_close_shutdown+0x1b0>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	60fb      	str	r3, [r7, #12]
 8006860:	e00c      	b.n	800687c <tcp_close_shutdown+0xc8>
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	429a      	cmp	r2, r3
 800686a:	d104      	bne.n	8006876 <tcp_close_shutdown+0xc2>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	68da      	ldr	r2, [r3, #12]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	60da      	str	r2, [r3, #12]
 8006874:	e005      	b.n	8006882 <tcp_close_shutdown+0xce>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	60fb      	str	r3, [r7, #12]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1ef      	bne.n	8006862 <tcp_close_shutdown+0xae>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	60da      	str	r2, [r3, #12]
 8006888:	4b37      	ldr	r3, [pc, #220]	; (8006968 <tcp_close_shutdown+0x1b4>)
 800688a:	2201      	movs	r2, #1
 800688c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800688e:	4b37      	ldr	r3, [pc, #220]	; (800696c <tcp_close_shutdown+0x1b8>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	429a      	cmp	r2, r3
 8006896:	d102      	bne.n	800689e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8006898:	f003 fd5e 	bl	800a358 <tcp_trigger_input_pcb_close>
 800689c:	e002      	b.n	80068a4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f7ff fed6 	bl	8006650 <tcp_free>
      }
      return ERR_OK;
 80068a4:	2300      	movs	r3, #0
 80068a6:	e050      	b.n	800694a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	7d1b      	ldrb	r3, [r3, #20]
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d03b      	beq.n	8006928 <tcp_close_shutdown+0x174>
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	dc44      	bgt.n	800693e <tcp_close_shutdown+0x18a>
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d002      	beq.n	80068be <tcp_close_shutdown+0x10a>
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d02a      	beq.n	8006912 <tcp_close_shutdown+0x15e>
 80068bc:	e03f      	b.n	800693e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	8adb      	ldrh	r3, [r3, #22]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d021      	beq.n	800690a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80068c6:	4b2a      	ldr	r3, [pc, #168]	; (8006970 <tcp_close_shutdown+0x1bc>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d105      	bne.n	80068dc <tcp_close_shutdown+0x128>
 80068d0:	4b27      	ldr	r3, [pc, #156]	; (8006970 <tcp_close_shutdown+0x1bc>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	4a26      	ldr	r2, [pc, #152]	; (8006970 <tcp_close_shutdown+0x1bc>)
 80068d8:	6013      	str	r3, [r2, #0]
 80068da:	e013      	b.n	8006904 <tcp_close_shutdown+0x150>
 80068dc:	4b24      	ldr	r3, [pc, #144]	; (8006970 <tcp_close_shutdown+0x1bc>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	60bb      	str	r3, [r7, #8]
 80068e2:	e00c      	b.n	80068fe <tcp_close_shutdown+0x14a>
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d104      	bne.n	80068f8 <tcp_close_shutdown+0x144>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	68da      	ldr	r2, [r3, #12]
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	60da      	str	r2, [r3, #12]
 80068f6:	e005      	b.n	8006904 <tcp_close_shutdown+0x150>
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	60bb      	str	r3, [r7, #8]
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d1ef      	bne.n	80068e4 <tcp_close_shutdown+0x130>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f7ff fea0 	bl	8006650 <tcp_free>
      break;
 8006910:	e01a      	b.n	8006948 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f7ff ff14 	bl	8006740 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8006918:	6879      	ldr	r1, [r7, #4]
 800691a:	4816      	ldr	r0, [pc, #88]	; (8006974 <tcp_close_shutdown+0x1c0>)
 800691c:	f001 f8a8 	bl	8007a70 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f7ff feb1 	bl	8006688 <tcp_free_listen>
      break;
 8006926:	e00f      	b.n	8006948 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006928:	6879      	ldr	r1, [r7, #4]
 800692a:	480e      	ldr	r0, [pc, #56]	; (8006964 <tcp_close_shutdown+0x1b0>)
 800692c:	f001 f8a0 	bl	8007a70 <tcp_pcb_remove>
 8006930:	4b0d      	ldr	r3, [pc, #52]	; (8006968 <tcp_close_shutdown+0x1b4>)
 8006932:	2201      	movs	r2, #1
 8006934:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f7ff fe8a 	bl	8006650 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800693c:	e004      	b.n	8006948 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 f81a 	bl	8006978 <tcp_close_shutdown_fin>
 8006944:	4603      	mov	r3, r0
 8006946:	e000      	b.n	800694a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	bdb0      	pop	{r4, r5, r7, pc}
 8006952:	bf00      	nop
 8006954:	08010270 	.word	0x08010270
 8006958:	08010344 	.word	0x08010344
 800695c:	080102b4 	.word	0x080102b4
 8006960:	08010364 	.word	0x08010364
 8006964:	2000a4c0 	.word	0x2000a4c0
 8006968:	2000a4c8 	.word	0x2000a4c8
 800696c:	2000a500 	.word	0x2000a500
 8006970:	2000a4b8 	.word	0x2000a4b8
 8006974:	2000a4bc 	.word	0x2000a4bc

08006978 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d106      	bne.n	8006994 <tcp_close_shutdown_fin+0x1c>
 8006986:	4b2e      	ldr	r3, [pc, #184]	; (8006a40 <tcp_close_shutdown_fin+0xc8>)
 8006988:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800698c:	492d      	ldr	r1, [pc, #180]	; (8006a44 <tcp_close_shutdown_fin+0xcc>)
 800698e:	482e      	ldr	r0, [pc, #184]	; (8006a48 <tcp_close_shutdown_fin+0xd0>)
 8006990:	f007 ffd8 	bl	800e944 <iprintf>

  switch (pcb->state) {
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	7d1b      	ldrb	r3, [r3, #20]
 8006998:	2b07      	cmp	r3, #7
 800699a:	d020      	beq.n	80069de <tcp_close_shutdown_fin+0x66>
 800699c:	2b07      	cmp	r3, #7
 800699e:	dc2b      	bgt.n	80069f8 <tcp_close_shutdown_fin+0x80>
 80069a0:	2b03      	cmp	r3, #3
 80069a2:	d002      	beq.n	80069aa <tcp_close_shutdown_fin+0x32>
 80069a4:	2b04      	cmp	r3, #4
 80069a6:	d00d      	beq.n	80069c4 <tcp_close_shutdown_fin+0x4c>
 80069a8:	e026      	b.n	80069f8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f003 fee6 	bl	800a77c <tcp_send_fin>
 80069b0:	4603      	mov	r3, r0
 80069b2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80069b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d11f      	bne.n	80069fc <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2205      	movs	r2, #5
 80069c0:	751a      	strb	r2, [r3, #20]
      }
      break;
 80069c2:	e01b      	b.n	80069fc <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f003 fed9 	bl	800a77c <tcp_send_fin>
 80069ca:	4603      	mov	r3, r0
 80069cc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80069ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d114      	bne.n	8006a00 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2205      	movs	r2, #5
 80069da:	751a      	strb	r2, [r3, #20]
      }
      break;
 80069dc:	e010      	b.n	8006a00 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f003 fecc 	bl	800a77c <tcp_send_fin>
 80069e4:	4603      	mov	r3, r0
 80069e6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80069e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d109      	bne.n	8006a04 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2209      	movs	r2, #9
 80069f4:	751a      	strb	r2, [r3, #20]
      }
      break;
 80069f6:	e005      	b.n	8006a04 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80069f8:	2300      	movs	r3, #0
 80069fa:	e01c      	b.n	8006a36 <tcp_close_shutdown_fin+0xbe>
      break;
 80069fc:	bf00      	nop
 80069fe:	e002      	b.n	8006a06 <tcp_close_shutdown_fin+0x8e>
      break;
 8006a00:	bf00      	nop
 8006a02:	e000      	b.n	8006a06 <tcp_close_shutdown_fin+0x8e>
      break;
 8006a04:	bf00      	nop
  }

  if (err == ERR_OK) {
 8006a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d103      	bne.n	8006a16 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f003 fff2 	bl	800a9f8 <tcp_output>
 8006a14:	e00d      	b.n	8006a32 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8006a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a1e:	d108      	bne.n	8006a32 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	8b5b      	ldrh	r3, [r3, #26]
 8006a24:	f043 0308 	orr.w	r3, r3, #8
 8006a28:	b29a      	uxth	r2, r3
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	e001      	b.n	8006a36 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8006a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	08010270 	.word	0x08010270
 8006a44:	08010320 	.word	0x08010320
 8006a48:	080102b4 	.word	0x080102b4

08006a4c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d109      	bne.n	8006a6e <tcp_close+0x22>
 8006a5a:	4b0f      	ldr	r3, [pc, #60]	; (8006a98 <tcp_close+0x4c>)
 8006a5c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8006a60:	490e      	ldr	r1, [pc, #56]	; (8006a9c <tcp_close+0x50>)
 8006a62:	480f      	ldr	r0, [pc, #60]	; (8006aa0 <tcp_close+0x54>)
 8006a64:	f007 ff6e 	bl	800e944 <iprintf>
 8006a68:	f06f 030f 	mvn.w	r3, #15
 8006a6c:	e00f      	b.n	8006a8e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	7d1b      	ldrb	r3, [r3, #20]
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d006      	beq.n	8006a84 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	8b5b      	ldrh	r3, [r3, #26]
 8006a7a:	f043 0310 	orr.w	r3, r3, #16
 8006a7e:	b29a      	uxth	r2, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8006a84:	2101      	movs	r1, #1
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f7ff fe94 	bl	80067b4 <tcp_close_shutdown>
 8006a8c:	4603      	mov	r3, r0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3708      	adds	r7, #8
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	08010270 	.word	0x08010270
 8006a9c:	08010380 	.word	0x08010380
 8006aa0:	080102b4 	.word	0x080102b4

08006aa4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b08e      	sub	sp, #56	; 0x38
 8006aa8:	af04      	add	r7, sp, #16
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d107      	bne.n	8006ac4 <tcp_abandon+0x20>
 8006ab4:	4b52      	ldr	r3, [pc, #328]	; (8006c00 <tcp_abandon+0x15c>)
 8006ab6:	f240 223d 	movw	r2, #573	; 0x23d
 8006aba:	4952      	ldr	r1, [pc, #328]	; (8006c04 <tcp_abandon+0x160>)
 8006abc:	4852      	ldr	r0, [pc, #328]	; (8006c08 <tcp_abandon+0x164>)
 8006abe:	f007 ff41 	bl	800e944 <iprintf>
 8006ac2:	e099      	b.n	8006bf8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	7d1b      	ldrb	r3, [r3, #20]
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d106      	bne.n	8006ada <tcp_abandon+0x36>
 8006acc:	4b4c      	ldr	r3, [pc, #304]	; (8006c00 <tcp_abandon+0x15c>)
 8006ace:	f44f 7210 	mov.w	r2, #576	; 0x240
 8006ad2:	494e      	ldr	r1, [pc, #312]	; (8006c0c <tcp_abandon+0x168>)
 8006ad4:	484c      	ldr	r0, [pc, #304]	; (8006c08 <tcp_abandon+0x164>)
 8006ad6:	f007 ff35 	bl	800e944 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	7d1b      	ldrb	r3, [r3, #20]
 8006ade:	2b0a      	cmp	r3, #10
 8006ae0:	d107      	bne.n	8006af2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8006ae2:	6879      	ldr	r1, [r7, #4]
 8006ae4:	484a      	ldr	r0, [pc, #296]	; (8006c10 <tcp_abandon+0x16c>)
 8006ae6:	f000 ffc3 	bl	8007a70 <tcp_pcb_remove>
    tcp_free(pcb);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f7ff fdb0 	bl	8006650 <tcp_free>
 8006af0:	e082      	b.n	8006bf8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8006af2:	2300      	movs	r3, #0
 8006af4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8006af6:	2300      	movs	r3, #0
 8006af8:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006afe:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b04:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b0c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	7d1b      	ldrb	r3, [r3, #20]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d126      	bne.n	8006b6a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	8adb      	ldrh	r3, [r3, #22]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d02e      	beq.n	8006b82 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006b24:	4b3b      	ldr	r3, [pc, #236]	; (8006c14 <tcp_abandon+0x170>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d105      	bne.n	8006b3a <tcp_abandon+0x96>
 8006b2e:	4b39      	ldr	r3, [pc, #228]	; (8006c14 <tcp_abandon+0x170>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	4a37      	ldr	r2, [pc, #220]	; (8006c14 <tcp_abandon+0x170>)
 8006b36:	6013      	str	r3, [r2, #0]
 8006b38:	e013      	b.n	8006b62 <tcp_abandon+0xbe>
 8006b3a:	4b36      	ldr	r3, [pc, #216]	; (8006c14 <tcp_abandon+0x170>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	61fb      	str	r3, [r7, #28]
 8006b40:	e00c      	b.n	8006b5c <tcp_abandon+0xb8>
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d104      	bne.n	8006b56 <tcp_abandon+0xb2>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	68da      	ldr	r2, [r3, #12]
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	60da      	str	r2, [r3, #12]
 8006b54:	e005      	b.n	8006b62 <tcp_abandon+0xbe>
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	61fb      	str	r3, [r7, #28]
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1ef      	bne.n	8006b42 <tcp_abandon+0x9e>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	60da      	str	r2, [r3, #12]
 8006b68:	e00b      	b.n	8006b82 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	8adb      	ldrh	r3, [r3, #22]
 8006b72:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006b74:	6879      	ldr	r1, [r7, #4]
 8006b76:	4828      	ldr	r0, [pc, #160]	; (8006c18 <tcp_abandon+0x174>)
 8006b78:	f000 ff7a 	bl	8007a70 <tcp_pcb_remove>
 8006b7c:	4b27      	ldr	r3, [pc, #156]	; (8006c1c <tcp_abandon+0x178>)
 8006b7e:	2201      	movs	r2, #1
 8006b80:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d004      	beq.n	8006b94 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f000 fd1c 	bl	80075cc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d004      	beq.n	8006ba6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f000 fd13 	bl	80075cc <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d004      	beq.n	8006bb8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f000 fd0a 	bl	80075cc <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8006bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d00e      	beq.n	8006bdc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8006bbe:	6879      	ldr	r1, [r7, #4]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	3304      	adds	r3, #4
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	8b12      	ldrh	r2, [r2, #24]
 8006bc8:	9202      	str	r2, [sp, #8]
 8006bca:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006bcc:	9201      	str	r2, [sp, #4]
 8006bce:	9300      	str	r3, [sp, #0]
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	697a      	ldr	r2, [r7, #20]
 8006bd4:	69b9      	ldr	r1, [r7, #24]
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f004 fcc2 	bl	800b560 <tcp_rst>
    }
    last_state = pcb->state;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	7d1b      	ldrb	r3, [r3, #20]
 8006be0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f7ff fd34 	bl	8006650 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d004      	beq.n	8006bf8 <tcp_abandon+0x154>
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	f06f 010c 	mvn.w	r1, #12
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	4798      	blx	r3
  }
}
 8006bf8:	3728      	adds	r7, #40	; 0x28
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	08010270 	.word	0x08010270
 8006c04:	080103b4 	.word	0x080103b4
 8006c08:	080102b4 	.word	0x080102b4
 8006c0c:	080103d0 	.word	0x080103d0
 8006c10:	2000a4c4 	.word	0x2000a4c4
 8006c14:	2000a4b8 	.word	0x2000a4b8
 8006c18:	2000a4c0 	.word	0x2000a4c0
 8006c1c:	2000a4c8 	.word	0x2000a4c8

08006c20 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8006c28:	2101      	movs	r1, #1
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f7ff ff3a 	bl	8006aa4 <tcp_abandon>
}
 8006c30:	bf00      	nop
 8006c32:	3708      	adds	r7, #8
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d106      	bne.n	8006c54 <tcp_update_rcv_ann_wnd+0x1c>
 8006c46:	4b25      	ldr	r3, [pc, #148]	; (8006cdc <tcp_update_rcv_ann_wnd+0xa4>)
 8006c48:	f240 32a6 	movw	r2, #934	; 0x3a6
 8006c4c:	4924      	ldr	r1, [pc, #144]	; (8006ce0 <tcp_update_rcv_ann_wnd+0xa8>)
 8006c4e:	4825      	ldr	r0, [pc, #148]	; (8006ce4 <tcp_update_rcv_ann_wnd+0xac>)
 8006c50:	f007 fe78 	bl	800e944 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006c5c:	4413      	add	r3, r2
 8006c5e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8006c68:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8006c6c:	bf28      	it	cs
 8006c6e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8006c72:	b292      	uxth	r2, r2
 8006c74:	4413      	add	r3, r2
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	1ad3      	subs	r3, r2, r3
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	db08      	blt.n	8006c90 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	1ad3      	subs	r3, r2, r3
 8006c8e:	e020      	b.n	8006cd2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	dd03      	ble.n	8006ca6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006ca4:	e014      	b.n	8006cd0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cae:	1ad3      	subs	r3, r2, r3
 8006cb0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cb8:	d306      	bcc.n	8006cc8 <tcp_update_rcv_ann_wnd+0x90>
 8006cba:	4b08      	ldr	r3, [pc, #32]	; (8006cdc <tcp_update_rcv_ann_wnd+0xa4>)
 8006cbc:	f240 32b6 	movw	r2, #950	; 0x3b6
 8006cc0:	4909      	ldr	r1, [pc, #36]	; (8006ce8 <tcp_update_rcv_ann_wnd+0xb0>)
 8006cc2:	4808      	ldr	r0, [pc, #32]	; (8006ce4 <tcp_update_rcv_ann_wnd+0xac>)
 8006cc4:	f007 fe3e 	bl	800e944 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	b29a      	uxth	r2, r3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8006cd0:	2300      	movs	r3, #0
  }
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	08010270 	.word	0x08010270
 8006ce0:	080104cc 	.word	0x080104cc
 8006ce4:	080102b4 	.word	0x080102b4
 8006ce8:	080104f0 	.word	0x080104f0

08006cec <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d107      	bne.n	8006d0e <tcp_recved+0x22>
 8006cfe:	4b1f      	ldr	r3, [pc, #124]	; (8006d7c <tcp_recved+0x90>)
 8006d00:	f240 32cf 	movw	r2, #975	; 0x3cf
 8006d04:	491e      	ldr	r1, [pc, #120]	; (8006d80 <tcp_recved+0x94>)
 8006d06:	481f      	ldr	r0, [pc, #124]	; (8006d84 <tcp_recved+0x98>)
 8006d08:	f007 fe1c 	bl	800e944 <iprintf>
 8006d0c:	e032      	b.n	8006d74 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	7d1b      	ldrb	r3, [r3, #20]
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d106      	bne.n	8006d24 <tcp_recved+0x38>
 8006d16:	4b19      	ldr	r3, [pc, #100]	; (8006d7c <tcp_recved+0x90>)
 8006d18:	f240 32d2 	movw	r2, #978	; 0x3d2
 8006d1c:	491a      	ldr	r1, [pc, #104]	; (8006d88 <tcp_recved+0x9c>)
 8006d1e:	4819      	ldr	r0, [pc, #100]	; (8006d84 <tcp_recved+0x98>)
 8006d20:	f007 fe10 	bl	800e944 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006d28:	887b      	ldrh	r3, [r7, #2]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8006d2e:	89fb      	ldrh	r3, [r7, #14]
 8006d30:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006d34:	d804      	bhi.n	8006d40 <tcp_recved+0x54>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d3a:	89fa      	ldrh	r2, [r7, #14]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d204      	bcs.n	8006d4a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006d46:	851a      	strh	r2, [r3, #40]	; 0x28
 8006d48:	e002      	b.n	8006d50 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	89fa      	ldrh	r2, [r7, #14]
 8006d4e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f7ff ff71 	bl	8006c38 <tcp_update_rcv_ann_wnd>
 8006d56:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8006d5e:	d309      	bcc.n	8006d74 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	8b5b      	ldrh	r3, [r3, #26]
 8006d64:	f043 0302 	orr.w	r3, r3, #2
 8006d68:	b29a      	uxth	r2, r3
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f003 fe42 	bl	800a9f8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8006d74:	3710      	adds	r7, #16
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	08010270 	.word	0x08010270
 8006d80:	0801050c 	.word	0x0801050c
 8006d84:	080102b4 	.word	0x080102b4
 8006d88:	08010524 	.word	0x08010524

08006d8c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8006d8c:	b5b0      	push	{r4, r5, r7, lr}
 8006d8e:	b090      	sub	sp, #64	; 0x40
 8006d90:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8006d92:	2300      	movs	r3, #0
 8006d94:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8006d98:	4b94      	ldr	r3, [pc, #592]	; (8006fec <tcp_slowtmr+0x260>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	4a93      	ldr	r2, [pc, #588]	; (8006fec <tcp_slowtmr+0x260>)
 8006da0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8006da2:	4b93      	ldr	r3, [pc, #588]	; (8006ff0 <tcp_slowtmr+0x264>)
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	3301      	adds	r3, #1
 8006da8:	b2da      	uxtb	r2, r3
 8006daa:	4b91      	ldr	r3, [pc, #580]	; (8006ff0 <tcp_slowtmr+0x264>)
 8006dac:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8006dae:	2300      	movs	r3, #0
 8006db0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8006db2:	4b90      	ldr	r3, [pc, #576]	; (8006ff4 <tcp_slowtmr+0x268>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8006db8:	e29d      	b.n	80072f6 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8006dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dbc:	7d1b      	ldrb	r3, [r3, #20]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d106      	bne.n	8006dd0 <tcp_slowtmr+0x44>
 8006dc2:	4b8d      	ldr	r3, [pc, #564]	; (8006ff8 <tcp_slowtmr+0x26c>)
 8006dc4:	f240 42be 	movw	r2, #1214	; 0x4be
 8006dc8:	498c      	ldr	r1, [pc, #560]	; (8006ffc <tcp_slowtmr+0x270>)
 8006dca:	488d      	ldr	r0, [pc, #564]	; (8007000 <tcp_slowtmr+0x274>)
 8006dcc:	f007 fdba 	bl	800e944 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8006dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd2:	7d1b      	ldrb	r3, [r3, #20]
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d106      	bne.n	8006de6 <tcp_slowtmr+0x5a>
 8006dd8:	4b87      	ldr	r3, [pc, #540]	; (8006ff8 <tcp_slowtmr+0x26c>)
 8006dda:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8006dde:	4989      	ldr	r1, [pc, #548]	; (8007004 <tcp_slowtmr+0x278>)
 8006de0:	4887      	ldr	r0, [pc, #540]	; (8007000 <tcp_slowtmr+0x274>)
 8006de2:	f007 fdaf 	bl	800e944 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8006de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de8:	7d1b      	ldrb	r3, [r3, #20]
 8006dea:	2b0a      	cmp	r3, #10
 8006dec:	d106      	bne.n	8006dfc <tcp_slowtmr+0x70>
 8006dee:	4b82      	ldr	r3, [pc, #520]	; (8006ff8 <tcp_slowtmr+0x26c>)
 8006df0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8006df4:	4984      	ldr	r1, [pc, #528]	; (8007008 <tcp_slowtmr+0x27c>)
 8006df6:	4882      	ldr	r0, [pc, #520]	; (8007000 <tcp_slowtmr+0x274>)
 8006df8:	f007 fda4 	bl	800e944 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8006dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dfe:	7f9a      	ldrb	r2, [r3, #30]
 8006e00:	4b7b      	ldr	r3, [pc, #492]	; (8006ff0 <tcp_slowtmr+0x264>)
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d105      	bne.n	8006e14 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8006e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e0a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8006e12:	e270      	b.n	80072f6 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8006e14:	4b76      	ldr	r3, [pc, #472]	; (8006ff0 <tcp_slowtmr+0x264>)
 8006e16:	781a      	ldrb	r2, [r3, #0]
 8006e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e1a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8006e22:	2300      	movs	r3, #0
 8006e24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8006e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e2a:	7d1b      	ldrb	r3, [r3, #20]
 8006e2c:	2b02      	cmp	r3, #2
 8006e2e:	d10a      	bne.n	8006e46 <tcp_slowtmr+0xba>
 8006e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006e36:	2b05      	cmp	r3, #5
 8006e38:	d905      	bls.n	8006e46 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8006e3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e3e:	3301      	adds	r3, #1
 8006e40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006e44:	e11e      	b.n	8007084 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8006e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e48:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006e4c:	2b0b      	cmp	r3, #11
 8006e4e:	d905      	bls.n	8006e5c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8006e50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e54:	3301      	adds	r3, #1
 8006e56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006e5a:	e113      	b.n	8007084 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8006e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e5e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d075      	beq.n	8006f52 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8006e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d006      	beq.n	8006e7c <tcp_slowtmr+0xf0>
 8006e6e:	4b62      	ldr	r3, [pc, #392]	; (8006ff8 <tcp_slowtmr+0x26c>)
 8006e70:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8006e74:	4965      	ldr	r1, [pc, #404]	; (800700c <tcp_slowtmr+0x280>)
 8006e76:	4862      	ldr	r0, [pc, #392]	; (8007000 <tcp_slowtmr+0x274>)
 8006e78:	f007 fd64 	bl	800e944 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8006e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d106      	bne.n	8006e92 <tcp_slowtmr+0x106>
 8006e84:	4b5c      	ldr	r3, [pc, #368]	; (8006ff8 <tcp_slowtmr+0x26c>)
 8006e86:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8006e8a:	4961      	ldr	r1, [pc, #388]	; (8007010 <tcp_slowtmr+0x284>)
 8006e8c:	485c      	ldr	r0, [pc, #368]	; (8007000 <tcp_slowtmr+0x274>)
 8006e8e:	f007 fd59 	bl	800e944 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8006e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e94:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8006e98:	2b0b      	cmp	r3, #11
 8006e9a:	d905      	bls.n	8006ea8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8006e9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006ea6:	e0ed      	b.n	8007084 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8006ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eaa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	4a58      	ldr	r2, [pc, #352]	; (8007014 <tcp_slowtmr+0x288>)
 8006eb2:	5cd3      	ldrb	r3, [r2, r3]
 8006eb4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8006eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006ebc:	7c7a      	ldrb	r2, [r7, #17]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d907      	bls.n	8006ed2 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8006ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006ec8:	3301      	adds	r3, #1
 8006eca:	b2da      	uxtb	r2, r3
 8006ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ece:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8006ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ed4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006ed8:	7c7a      	ldrb	r2, [r7, #17]
 8006eda:	429a      	cmp	r2, r3
 8006edc:	f200 80d2 	bhi.w	8007084 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8006ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d108      	bne.n	8006f00 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8006eee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ef0:	f004 fc2a 	bl	800b748 <tcp_zero_window_probe>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d014      	beq.n	8006f24 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8006efa:	2300      	movs	r3, #0
 8006efc:	623b      	str	r3, [r7, #32]
 8006efe:	e011      	b.n	8006f24 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8006f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006f06:	4619      	mov	r1, r3
 8006f08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f0a:	f003 faef 	bl	800a4ec <tcp_split_unsent_seg>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d107      	bne.n	8006f24 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8006f14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f16:	f003 fd6f 	bl	800a9f8 <tcp_output>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d101      	bne.n	8006f24 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8006f20:	2300      	movs	r3, #0
 8006f22:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8006f24:	6a3b      	ldr	r3, [r7, #32]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	f000 80ac 	beq.w	8007084 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8006f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8006f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f36:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006f3a:	2b06      	cmp	r3, #6
 8006f3c:	f200 80a2 	bhi.w	8007084 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8006f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f42:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006f46:	3301      	adds	r3, #1
 8006f48:	b2da      	uxtb	r2, r3
 8006f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f4c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8006f50:	e098      	b.n	8007084 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8006f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f54:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	db0f      	blt.n	8006f7c <tcp_slowtmr+0x1f0>
 8006f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f5e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006f62:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d008      	beq.n	8006f7c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8006f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f6c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	3301      	adds	r3, #1
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	b21a      	sxth	r2, r3
 8006f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f7a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8006f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f7e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8006f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f84:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	db7b      	blt.n	8007084 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8006f8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f8e:	f004 f827 	bl	800afe0 <tcp_rexmit_rto_prepare>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d007      	beq.n	8006fa8 <tcp_slowtmr+0x21c>
 8006f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d171      	bne.n	8007084 <tcp_slowtmr+0x2f8>
 8006fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d06d      	beq.n	8007084 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8006fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006faa:	7d1b      	ldrb	r3, [r3, #20]
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	d03a      	beq.n	8007026 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8006fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006fb6:	2b0c      	cmp	r3, #12
 8006fb8:	bf28      	it	cs
 8006fba:	230c      	movcs	r3, #12
 8006fbc:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8006fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8006fc4:	10db      	asrs	r3, r3, #3
 8006fc6:	b21b      	sxth	r3, r3
 8006fc8:	461a      	mov	r2, r3
 8006fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fcc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8006fd0:	4413      	add	r3, r2
 8006fd2:	7efa      	ldrb	r2, [r7, #27]
 8006fd4:	4910      	ldr	r1, [pc, #64]	; (8007018 <tcp_slowtmr+0x28c>)
 8006fd6:	5c8a      	ldrb	r2, [r1, r2]
 8006fd8:	4093      	lsls	r3, r2
 8006fda:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	dc1a      	bgt.n	800701c <tcp_slowtmr+0x290>
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	b21a      	sxth	r2, r3
 8006fea:	e019      	b.n	8007020 <tcp_slowtmr+0x294>
 8006fec:	2000a4b4 	.word	0x2000a4b4
 8006ff0:	2000a4ca 	.word	0x2000a4ca
 8006ff4:	2000a4c0 	.word	0x2000a4c0
 8006ff8:	08010270 	.word	0x08010270
 8006ffc:	080105b4 	.word	0x080105b4
 8007000:	080102b4 	.word	0x080102b4
 8007004:	080105e0 	.word	0x080105e0
 8007008:	0801060c 	.word	0x0801060c
 800700c:	0801063c 	.word	0x0801063c
 8007010:	08010670 	.word	0x08010670
 8007014:	08012240 	.word	0x08012240
 8007018:	08012230 	.word	0x08012230
 800701c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007022:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8007026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007028:	2200      	movs	r2, #0
 800702a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800702c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800702e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007034:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007038:	4293      	cmp	r3, r2
 800703a:	bf28      	it	cs
 800703c:	4613      	movcs	r3, r2
 800703e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8007040:	8a7b      	ldrh	r3, [r7, #18]
 8007042:	085b      	lsrs	r3, r3, #1
 8007044:	b29a      	uxth	r2, r3
 8007046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007048:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800704c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800704e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8007052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007054:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007056:	005b      	lsls	r3, r3, #1
 8007058:	b29b      	uxth	r3, r3
 800705a:	429a      	cmp	r2, r3
 800705c:	d206      	bcs.n	800706c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800705e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007060:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007062:	005b      	lsls	r3, r3, #1
 8007064:	b29a      	uxth	r2, r3
 8007066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007068:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800706c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800706e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007072:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8007076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007078:	2200      	movs	r2, #0
 800707a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800707e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007080:	f004 f81e 	bl	800b0c0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8007084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007086:	7d1b      	ldrb	r3, [r3, #20]
 8007088:	2b06      	cmp	r3, #6
 800708a:	d111      	bne.n	80070b0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800708c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800708e:	8b5b      	ldrh	r3, [r3, #26]
 8007090:	f003 0310 	and.w	r3, r3, #16
 8007094:	2b00      	cmp	r3, #0
 8007096:	d00b      	beq.n	80070b0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007098:	4b9c      	ldr	r3, [pc, #624]	; (800730c <tcp_slowtmr+0x580>)
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800709e:	6a1b      	ldr	r3, [r3, #32]
 80070a0:	1ad3      	subs	r3, r2, r3
 80070a2:	2b28      	cmp	r3, #40	; 0x28
 80070a4:	d904      	bls.n	80070b0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80070a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070aa:	3301      	adds	r3, #1
 80070ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80070b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b2:	7a5b      	ldrb	r3, [r3, #9]
 80070b4:	f003 0308 	and.w	r3, r3, #8
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d04a      	beq.n	8007152 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 80070bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070be:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80070c0:	2b04      	cmp	r3, #4
 80070c2:	d003      	beq.n	80070cc <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80070c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80070c8:	2b07      	cmp	r3, #7
 80070ca:	d142      	bne.n	8007152 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80070cc:	4b8f      	ldr	r3, [pc, #572]	; (800730c <tcp_slowtmr+0x580>)
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d2:	6a1b      	ldr	r3, [r3, #32]
 80070d4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80070d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d8:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80070dc:	4b8c      	ldr	r3, [pc, #560]	; (8007310 <tcp_slowtmr+0x584>)
 80070de:	440b      	add	r3, r1
 80070e0:	498c      	ldr	r1, [pc, #560]	; (8007314 <tcp_slowtmr+0x588>)
 80070e2:	fba1 1303 	umull	r1, r3, r1, r3
 80070e6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d90a      	bls.n	8007102 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80070ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070f0:	3301      	adds	r3, #1
 80070f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80070f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80070fa:	3301      	adds	r3, #1
 80070fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007100:	e027      	b.n	8007152 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007102:	4b82      	ldr	r3, [pc, #520]	; (800730c <tcp_slowtmr+0x580>)
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007108:	6a1b      	ldr	r3, [r3, #32]
 800710a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800710c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800710e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8007112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007114:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007118:	4618      	mov	r0, r3
 800711a:	4b7f      	ldr	r3, [pc, #508]	; (8007318 <tcp_slowtmr+0x58c>)
 800711c:	fb00 f303 	mul.w	r3, r0, r3
 8007120:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8007122:	497c      	ldr	r1, [pc, #496]	; (8007314 <tcp_slowtmr+0x588>)
 8007124:	fba1 1303 	umull	r1, r3, r1, r3
 8007128:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800712a:	429a      	cmp	r2, r3
 800712c:	d911      	bls.n	8007152 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800712e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007130:	f004 faca 	bl	800b6c8 <tcp_keepalive>
 8007134:	4603      	mov	r3, r0
 8007136:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800713a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800713e:	2b00      	cmp	r3, #0
 8007140:	d107      	bne.n	8007152 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8007142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007144:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007148:	3301      	adds	r3, #1
 800714a:	b2da      	uxtb	r2, r3
 800714c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800714e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8007152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007156:	2b00      	cmp	r3, #0
 8007158:	d011      	beq.n	800717e <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800715a:	4b6c      	ldr	r3, [pc, #432]	; (800730c <tcp_slowtmr+0x580>)
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007160:	6a1b      	ldr	r3, [r3, #32]
 8007162:	1ad2      	subs	r2, r2, r3
 8007164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007166:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800716a:	4619      	mov	r1, r3
 800716c:	460b      	mov	r3, r1
 800716e:	005b      	lsls	r3, r3, #1
 8007170:	440b      	add	r3, r1
 8007172:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8007174:	429a      	cmp	r2, r3
 8007176:	d302      	bcc.n	800717e <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8007178:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800717a:	f000 fddd 	bl	8007d38 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800717e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007180:	7d1b      	ldrb	r3, [r3, #20]
 8007182:	2b03      	cmp	r3, #3
 8007184:	d10b      	bne.n	800719e <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007186:	4b61      	ldr	r3, [pc, #388]	; (800730c <tcp_slowtmr+0x580>)
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800718c:	6a1b      	ldr	r3, [r3, #32]
 800718e:	1ad3      	subs	r3, r2, r3
 8007190:	2b28      	cmp	r3, #40	; 0x28
 8007192:	d904      	bls.n	800719e <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8007194:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007198:	3301      	adds	r3, #1
 800719a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800719e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a0:	7d1b      	ldrb	r3, [r3, #20]
 80071a2:	2b09      	cmp	r3, #9
 80071a4:	d10b      	bne.n	80071be <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80071a6:	4b59      	ldr	r3, [pc, #356]	; (800730c <tcp_slowtmr+0x580>)
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ac:	6a1b      	ldr	r3, [r3, #32]
 80071ae:	1ad3      	subs	r3, r2, r3
 80071b0:	2bf0      	cmp	r3, #240	; 0xf0
 80071b2:	d904      	bls.n	80071be <tcp_slowtmr+0x432>
        ++pcb_remove;
 80071b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071b8:	3301      	adds	r3, #1
 80071ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80071be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d060      	beq.n	8007288 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80071c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071cc:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80071ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80071d0:	f000 fbfe 	bl	80079d0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80071d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d010      	beq.n	80071fc <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80071da:	4b50      	ldr	r3, [pc, #320]	; (800731c <tcp_slowtmr+0x590>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d106      	bne.n	80071f2 <tcp_slowtmr+0x466>
 80071e4:	4b4e      	ldr	r3, [pc, #312]	; (8007320 <tcp_slowtmr+0x594>)
 80071e6:	f240 526d 	movw	r2, #1389	; 0x56d
 80071ea:	494e      	ldr	r1, [pc, #312]	; (8007324 <tcp_slowtmr+0x598>)
 80071ec:	484e      	ldr	r0, [pc, #312]	; (8007328 <tcp_slowtmr+0x59c>)
 80071ee:	f007 fba9 	bl	800e944 <iprintf>
        prev->next = pcb->next;
 80071f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f4:	68da      	ldr	r2, [r3, #12]
 80071f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f8:	60da      	str	r2, [r3, #12]
 80071fa:	e00f      	b.n	800721c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80071fc:	4b47      	ldr	r3, [pc, #284]	; (800731c <tcp_slowtmr+0x590>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007202:	429a      	cmp	r2, r3
 8007204:	d006      	beq.n	8007214 <tcp_slowtmr+0x488>
 8007206:	4b46      	ldr	r3, [pc, #280]	; (8007320 <tcp_slowtmr+0x594>)
 8007208:	f240 5271 	movw	r2, #1393	; 0x571
 800720c:	4947      	ldr	r1, [pc, #284]	; (800732c <tcp_slowtmr+0x5a0>)
 800720e:	4846      	ldr	r0, [pc, #280]	; (8007328 <tcp_slowtmr+0x59c>)
 8007210:	f007 fb98 	bl	800e944 <iprintf>
        tcp_active_pcbs = pcb->next;
 8007214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	4a40      	ldr	r2, [pc, #256]	; (800731c <tcp_slowtmr+0x590>)
 800721a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800721c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007220:	2b00      	cmp	r3, #0
 8007222:	d013      	beq.n	800724c <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007226:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800722a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800722c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800722e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007230:	3304      	adds	r3, #4
 8007232:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007234:	8ad2      	ldrh	r2, [r2, #22]
 8007236:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007238:	8b09      	ldrh	r1, [r1, #24]
 800723a:	9102      	str	r1, [sp, #8]
 800723c:	9201      	str	r2, [sp, #4]
 800723e:	9300      	str	r3, [sp, #0]
 8007240:	462b      	mov	r3, r5
 8007242:	4622      	mov	r2, r4
 8007244:	4601      	mov	r1, r0
 8007246:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007248:	f004 f98a 	bl	800b560 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800724c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800724e:	691b      	ldr	r3, [r3, #16]
 8007250:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8007252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007254:	7d1b      	ldrb	r3, [r3, #20]
 8007256:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8007258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800725a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800725c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007262:	6838      	ldr	r0, [r7, #0]
 8007264:	f7ff f9f4 	bl	8006650 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8007268:	4b31      	ldr	r3, [pc, #196]	; (8007330 <tcp_slowtmr+0x5a4>)
 800726a:	2200      	movs	r2, #0
 800726c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d004      	beq.n	800727e <tcp_slowtmr+0x4f2>
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f06f 010c 	mvn.w	r1, #12
 800727a:	68b8      	ldr	r0, [r7, #8]
 800727c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800727e:	4b2c      	ldr	r3, [pc, #176]	; (8007330 <tcp_slowtmr+0x5a4>)
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d037      	beq.n	80072f6 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8007286:	e592      	b.n	8006dae <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8007288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800728a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800728c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800728e:	68db      	ldr	r3, [r3, #12]
 8007290:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8007292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007294:	7f1b      	ldrb	r3, [r3, #28]
 8007296:	3301      	adds	r3, #1
 8007298:	b2da      	uxtb	r2, r3
 800729a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800729e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a0:	7f1a      	ldrb	r2, [r3, #28]
 80072a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a4:	7f5b      	ldrb	r3, [r3, #29]
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d325      	bcc.n	80072f6 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 80072aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ac:	2200      	movs	r2, #0
 80072ae:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80072b0:	4b1f      	ldr	r3, [pc, #124]	; (8007330 <tcp_slowtmr+0x5a4>)
 80072b2:	2200      	movs	r2, #0
 80072b4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80072b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00b      	beq.n	80072d8 <tcp_slowtmr+0x54c>
 80072c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072c8:	6912      	ldr	r2, [r2, #16]
 80072ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072cc:	4610      	mov	r0, r2
 80072ce:	4798      	blx	r3
 80072d0:	4603      	mov	r3, r0
 80072d2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80072d6:	e002      	b.n	80072de <tcp_slowtmr+0x552>
 80072d8:	2300      	movs	r3, #0
 80072da:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80072de:	4b14      	ldr	r3, [pc, #80]	; (8007330 <tcp_slowtmr+0x5a4>)
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d000      	beq.n	80072e8 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 80072e6:	e562      	b.n	8006dae <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80072e8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d102      	bne.n	80072f6 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 80072f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072f2:	f003 fb81 	bl	800a9f8 <tcp_output>
  while (pcb != NULL) {
 80072f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	f47f ad5e 	bne.w	8006dba <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80072fe:	2300      	movs	r3, #0
 8007300:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8007302:	4b0c      	ldr	r3, [pc, #48]	; (8007334 <tcp_slowtmr+0x5a8>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007308:	e069      	b.n	80073de <tcp_slowtmr+0x652>
 800730a:	bf00      	nop
 800730c:	2000a4b4 	.word	0x2000a4b4
 8007310:	000a4cb8 	.word	0x000a4cb8
 8007314:	10624dd3 	.word	0x10624dd3
 8007318:	000124f8 	.word	0x000124f8
 800731c:	2000a4c0 	.word	0x2000a4c0
 8007320:	08010270 	.word	0x08010270
 8007324:	080106a8 	.word	0x080106a8
 8007328:	080102b4 	.word	0x080102b4
 800732c:	080106d4 	.word	0x080106d4
 8007330:	2000a4c8 	.word	0x2000a4c8
 8007334:	2000a4c4 	.word	0x2000a4c4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733a:	7d1b      	ldrb	r3, [r3, #20]
 800733c:	2b0a      	cmp	r3, #10
 800733e:	d006      	beq.n	800734e <tcp_slowtmr+0x5c2>
 8007340:	4b2b      	ldr	r3, [pc, #172]	; (80073f0 <tcp_slowtmr+0x664>)
 8007342:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8007346:	492b      	ldr	r1, [pc, #172]	; (80073f4 <tcp_slowtmr+0x668>)
 8007348:	482b      	ldr	r0, [pc, #172]	; (80073f8 <tcp_slowtmr+0x66c>)
 800734a:	f007 fafb 	bl	800e944 <iprintf>
    pcb_remove = 0;
 800734e:	2300      	movs	r3, #0
 8007350:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007354:	4b29      	ldr	r3, [pc, #164]	; (80073fc <tcp_slowtmr+0x670>)
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800735a:	6a1b      	ldr	r3, [r3, #32]
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	2bf0      	cmp	r3, #240	; 0xf0
 8007360:	d904      	bls.n	800736c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8007362:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007366:	3301      	adds	r3, #1
 8007368:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800736c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007370:	2b00      	cmp	r3, #0
 8007372:	d02f      	beq.n	80073d4 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8007374:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007376:	f000 fb2b 	bl	80079d0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800737a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737c:	2b00      	cmp	r3, #0
 800737e:	d010      	beq.n	80073a2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007380:	4b1f      	ldr	r3, [pc, #124]	; (8007400 <tcp_slowtmr+0x674>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007386:	429a      	cmp	r2, r3
 8007388:	d106      	bne.n	8007398 <tcp_slowtmr+0x60c>
 800738a:	4b19      	ldr	r3, [pc, #100]	; (80073f0 <tcp_slowtmr+0x664>)
 800738c:	f240 52af 	movw	r2, #1455	; 0x5af
 8007390:	491c      	ldr	r1, [pc, #112]	; (8007404 <tcp_slowtmr+0x678>)
 8007392:	4819      	ldr	r0, [pc, #100]	; (80073f8 <tcp_slowtmr+0x66c>)
 8007394:	f007 fad6 	bl	800e944 <iprintf>
        prev->next = pcb->next;
 8007398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800739a:	68da      	ldr	r2, [r3, #12]
 800739c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739e:	60da      	str	r2, [r3, #12]
 80073a0:	e00f      	b.n	80073c2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80073a2:	4b17      	ldr	r3, [pc, #92]	; (8007400 <tcp_slowtmr+0x674>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d006      	beq.n	80073ba <tcp_slowtmr+0x62e>
 80073ac:	4b10      	ldr	r3, [pc, #64]	; (80073f0 <tcp_slowtmr+0x664>)
 80073ae:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80073b2:	4915      	ldr	r1, [pc, #84]	; (8007408 <tcp_slowtmr+0x67c>)
 80073b4:	4810      	ldr	r0, [pc, #64]	; (80073f8 <tcp_slowtmr+0x66c>)
 80073b6:	f007 fac5 	bl	800e944 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80073ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	4a10      	ldr	r2, [pc, #64]	; (8007400 <tcp_slowtmr+0x674>)
 80073c0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80073c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80073c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80073cc:	69f8      	ldr	r0, [r7, #28]
 80073ce:	f7ff f93f 	bl	8006650 <tcp_free>
 80073d2:	e004      	b.n	80073de <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80073d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80073d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80073de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d1a9      	bne.n	8007338 <tcp_slowtmr+0x5ac>
    }
  }
}
 80073e4:	bf00      	nop
 80073e6:	bf00      	nop
 80073e8:	3730      	adds	r7, #48	; 0x30
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bdb0      	pop	{r4, r5, r7, pc}
 80073ee:	bf00      	nop
 80073f0:	08010270 	.word	0x08010270
 80073f4:	08010700 	.word	0x08010700
 80073f8:	080102b4 	.word	0x080102b4
 80073fc:	2000a4b4 	.word	0x2000a4b4
 8007400:	2000a4c4 	.word	0x2000a4c4
 8007404:	08010730 	.word	0x08010730
 8007408:	08010758 	.word	0x08010758

0800740c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8007412:	4b2d      	ldr	r3, [pc, #180]	; (80074c8 <tcp_fasttmr+0xbc>)
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	3301      	adds	r3, #1
 8007418:	b2da      	uxtb	r2, r3
 800741a:	4b2b      	ldr	r3, [pc, #172]	; (80074c8 <tcp_fasttmr+0xbc>)
 800741c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800741e:	4b2b      	ldr	r3, [pc, #172]	; (80074cc <tcp_fasttmr+0xc0>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007424:	e048      	b.n	80074b8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	7f9a      	ldrb	r2, [r3, #30]
 800742a:	4b27      	ldr	r3, [pc, #156]	; (80074c8 <tcp_fasttmr+0xbc>)
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	429a      	cmp	r2, r3
 8007430:	d03f      	beq.n	80074b2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8007432:	4b25      	ldr	r3, [pc, #148]	; (80074c8 <tcp_fasttmr+0xbc>)
 8007434:	781a      	ldrb	r2, [r3, #0]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	8b5b      	ldrh	r3, [r3, #26]
 800743e:	f003 0301 	and.w	r3, r3, #1
 8007442:	2b00      	cmp	r3, #0
 8007444:	d010      	beq.n	8007468 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	8b5b      	ldrh	r3, [r3, #26]
 800744a:	f043 0302 	orr.w	r3, r3, #2
 800744e:	b29a      	uxth	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f003 facf 	bl	800a9f8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	8b5b      	ldrh	r3, [r3, #26]
 800745e:	f023 0303 	bic.w	r3, r3, #3
 8007462:	b29a      	uxth	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	8b5b      	ldrh	r3, [r3, #26]
 800746c:	f003 0308 	and.w	r3, r3, #8
 8007470:	2b00      	cmp	r3, #0
 8007472:	d009      	beq.n	8007488 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	8b5b      	ldrh	r3, [r3, #26]
 8007478:	f023 0308 	bic.w	r3, r3, #8
 800747c:	b29a      	uxth	r2, r3
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f7ff fa78 	bl	8006978 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	68db      	ldr	r3, [r3, #12]
 800748c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007492:	2b00      	cmp	r3, #0
 8007494:	d00a      	beq.n	80074ac <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8007496:	4b0e      	ldr	r3, [pc, #56]	; (80074d0 <tcp_fasttmr+0xc4>)
 8007498:	2200      	movs	r2, #0
 800749a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 f819 	bl	80074d4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80074a2:	4b0b      	ldr	r3, [pc, #44]	; (80074d0 <tcp_fasttmr+0xc4>)
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d000      	beq.n	80074ac <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80074aa:	e7b8      	b.n	800741e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	607b      	str	r3, [r7, #4]
 80074b0:	e002      	b.n	80074b8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	68db      	ldr	r3, [r3, #12]
 80074b6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d1b3      	bne.n	8007426 <tcp_fasttmr+0x1a>
    }
  }
}
 80074be:	bf00      	nop
 80074c0:	bf00      	nop
 80074c2:	3708      	adds	r7, #8
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	2000a4ca 	.word	0x2000a4ca
 80074cc:	2000a4c0 	.word	0x2000a4c0
 80074d0:	2000a4c8 	.word	0x2000a4c8

080074d4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80074d4:	b590      	push	{r4, r7, lr}
 80074d6:	b085      	sub	sp, #20
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d109      	bne.n	80074f6 <tcp_process_refused_data+0x22>
 80074e2:	4b37      	ldr	r3, [pc, #220]	; (80075c0 <tcp_process_refused_data+0xec>)
 80074e4:	f240 6209 	movw	r2, #1545	; 0x609
 80074e8:	4936      	ldr	r1, [pc, #216]	; (80075c4 <tcp_process_refused_data+0xf0>)
 80074ea:	4837      	ldr	r0, [pc, #220]	; (80075c8 <tcp_process_refused_data+0xf4>)
 80074ec:	f007 fa2a 	bl	800e944 <iprintf>
 80074f0:	f06f 030f 	mvn.w	r3, #15
 80074f4:	e060      	b.n	80075b8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074fa:	7b5b      	ldrb	r3, [r3, #13]
 80074fc:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007502:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00b      	beq.n	800752c <tcp_process_refused_data+0x58>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6918      	ldr	r0, [r3, #16]
 800751e:	2300      	movs	r3, #0
 8007520:	68ba      	ldr	r2, [r7, #8]
 8007522:	6879      	ldr	r1, [r7, #4]
 8007524:	47a0      	blx	r4
 8007526:	4603      	mov	r3, r0
 8007528:	73fb      	strb	r3, [r7, #15]
 800752a:	e007      	b.n	800753c <tcp_process_refused_data+0x68>
 800752c:	2300      	movs	r3, #0
 800752e:	68ba      	ldr	r2, [r7, #8]
 8007530:	6879      	ldr	r1, [r7, #4]
 8007532:	2000      	movs	r0, #0
 8007534:	f000 f8a4 	bl	8007680 <tcp_recv_null>
 8007538:	4603      	mov	r3, r0
 800753a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800753c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d12a      	bne.n	800759a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8007544:	7bbb      	ldrb	r3, [r7, #14]
 8007546:	f003 0320 	and.w	r3, r3, #32
 800754a:	2b00      	cmp	r3, #0
 800754c:	d033      	beq.n	80075b6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007552:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007556:	d005      	beq.n	8007564 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800755c:	3301      	adds	r3, #1
 800755e:	b29a      	uxth	r2, r3
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800756a:	2b00      	cmp	r3, #0
 800756c:	d00b      	beq.n	8007586 <tcp_process_refused_data+0xb2>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6918      	ldr	r0, [r3, #16]
 8007578:	2300      	movs	r3, #0
 800757a:	2200      	movs	r2, #0
 800757c:	6879      	ldr	r1, [r7, #4]
 800757e:	47a0      	blx	r4
 8007580:	4603      	mov	r3, r0
 8007582:	73fb      	strb	r3, [r7, #15]
 8007584:	e001      	b.n	800758a <tcp_process_refused_data+0xb6>
 8007586:	2300      	movs	r3, #0
 8007588:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800758a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800758e:	f113 0f0d 	cmn.w	r3, #13
 8007592:	d110      	bne.n	80075b6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8007594:	f06f 030c 	mvn.w	r3, #12
 8007598:	e00e      	b.n	80075b8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800759a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800759e:	f113 0f0d 	cmn.w	r3, #13
 80075a2:	d102      	bne.n	80075aa <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80075a4:	f06f 030c 	mvn.w	r3, #12
 80075a8:	e006      	b.n	80075b8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	68ba      	ldr	r2, [r7, #8]
 80075ae:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80075b0:	f06f 0304 	mvn.w	r3, #4
 80075b4:	e000      	b.n	80075b8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3714      	adds	r7, #20
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd90      	pop	{r4, r7, pc}
 80075c0:	08010270 	.word	0x08010270
 80075c4:	08010780 	.word	0x08010780
 80075c8:	080102b4 	.word	0x080102b4

080075cc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80075d4:	e007      	b.n	80075e6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 f80a 	bl	80075f6 <tcp_seg_free>
    seg = next;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d1f4      	bne.n	80075d6 <tcp_segs_free+0xa>
  }
}
 80075ec:	bf00      	nop
 80075ee:	bf00      	nop
 80075f0:	3710      	adds	r7, #16
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80075f6:	b580      	push	{r7, lr}
 80075f8:	b082      	sub	sp, #8
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00c      	beq.n	800761e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d004      	beq.n	8007616 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	4618      	mov	r0, r3
 8007612:	f7fe fd7d 	bl	8006110 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8007616:	6879      	ldr	r1, [r7, #4]
 8007618:	2003      	movs	r0, #3
 800761a:	f7fd ff03 	bl	8005424 <memp_free>
  }
}
 800761e:	bf00      	nop
 8007620:	3708      	adds	r7, #8
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
	...

08007628 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d106      	bne.n	8007644 <tcp_seg_copy+0x1c>
 8007636:	4b0f      	ldr	r3, [pc, #60]	; (8007674 <tcp_seg_copy+0x4c>)
 8007638:	f240 6282 	movw	r2, #1666	; 0x682
 800763c:	490e      	ldr	r1, [pc, #56]	; (8007678 <tcp_seg_copy+0x50>)
 800763e:	480f      	ldr	r0, [pc, #60]	; (800767c <tcp_seg_copy+0x54>)
 8007640:	f007 f980 	bl	800e944 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8007644:	2003      	movs	r0, #3
 8007646:	f7fd fe7d 	bl	8005344 <memp_malloc>
 800764a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d101      	bne.n	8007656 <tcp_seg_copy+0x2e>
    return NULL;
 8007652:	2300      	movs	r3, #0
 8007654:	e00a      	b.n	800766c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8007656:	2210      	movs	r2, #16
 8007658:	6879      	ldr	r1, [r7, #4]
 800765a:	68f8      	ldr	r0, [r7, #12]
 800765c:	f007 fa5f 	bl	800eb1e <memcpy>
  pbuf_ref(cseg->p);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	4618      	mov	r0, r3
 8007666:	f7fe fdf3 	bl	8006250 <pbuf_ref>
  return cseg;
 800766a:	68fb      	ldr	r3, [r7, #12]
}
 800766c:	4618      	mov	r0, r3
 800766e:	3710      	adds	r7, #16
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}
 8007674:	08010270 	.word	0x08010270
 8007678:	080107c4 	.word	0x080107c4
 800767c:	080102b4 	.word	0x080102b4

08007680 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	60b9      	str	r1, [r7, #8]
 800768a:	607a      	str	r2, [r7, #4]
 800768c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d109      	bne.n	80076a8 <tcp_recv_null+0x28>
 8007694:	4b12      	ldr	r3, [pc, #72]	; (80076e0 <tcp_recv_null+0x60>)
 8007696:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800769a:	4912      	ldr	r1, [pc, #72]	; (80076e4 <tcp_recv_null+0x64>)
 800769c:	4812      	ldr	r0, [pc, #72]	; (80076e8 <tcp_recv_null+0x68>)
 800769e:	f007 f951 	bl	800e944 <iprintf>
 80076a2:	f06f 030f 	mvn.w	r3, #15
 80076a6:	e016      	b.n	80076d6 <tcp_recv_null+0x56>

  if (p != NULL) {
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d009      	beq.n	80076c2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	891b      	ldrh	r3, [r3, #8]
 80076b2:	4619      	mov	r1, r3
 80076b4:	68b8      	ldr	r0, [r7, #8]
 80076b6:	f7ff fb19 	bl	8006cec <tcp_recved>
    pbuf_free(p);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f7fe fd28 	bl	8006110 <pbuf_free>
 80076c0:	e008      	b.n	80076d4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80076c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d104      	bne.n	80076d4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80076ca:	68b8      	ldr	r0, [r7, #8]
 80076cc:	f7ff f9be 	bl	8006a4c <tcp_close>
 80076d0:	4603      	mov	r3, r0
 80076d2:	e000      	b.n	80076d6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	08010270 	.word	0x08010270
 80076e4:	080107e0 	.word	0x080107e0
 80076e8:	080102b4 	.word	0x080102b4

080076ec <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b086      	sub	sp, #24
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	4603      	mov	r3, r0
 80076f4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80076f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	db01      	blt.n	8007702 <tcp_kill_prio+0x16>
 80076fe:	79fb      	ldrb	r3, [r7, #7]
 8007700:	e000      	b.n	8007704 <tcp_kill_prio+0x18>
 8007702:	237f      	movs	r3, #127	; 0x7f
 8007704:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8007706:	7afb      	ldrb	r3, [r7, #11]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d034      	beq.n	8007776 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800770c:	7afb      	ldrb	r3, [r7, #11]
 800770e:	3b01      	subs	r3, #1
 8007710:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8007712:	2300      	movs	r3, #0
 8007714:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007716:	2300      	movs	r3, #0
 8007718:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800771a:	4b19      	ldr	r3, [pc, #100]	; (8007780 <tcp_kill_prio+0x94>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	617b      	str	r3, [r7, #20]
 8007720:	e01f      	b.n	8007762 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	7d5b      	ldrb	r3, [r3, #21]
 8007726:	7afa      	ldrb	r2, [r7, #11]
 8007728:	429a      	cmp	r2, r3
 800772a:	d80c      	bhi.n	8007746 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8007730:	7afa      	ldrb	r2, [r7, #11]
 8007732:	429a      	cmp	r2, r3
 8007734:	d112      	bne.n	800775c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007736:	4b13      	ldr	r3, [pc, #76]	; (8007784 <tcp_kill_prio+0x98>)
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	6a1b      	ldr	r3, [r3, #32]
 800773e:	1ad3      	subs	r3, r2, r3
 8007740:	68fa      	ldr	r2, [r7, #12]
 8007742:	429a      	cmp	r2, r3
 8007744:	d80a      	bhi.n	800775c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8007746:	4b0f      	ldr	r3, [pc, #60]	; (8007784 <tcp_kill_prio+0x98>)
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	6a1b      	ldr	r3, [r3, #32]
 800774e:	1ad3      	subs	r3, r2, r3
 8007750:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	7d5b      	ldrb	r3, [r3, #21]
 800775a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	617b      	str	r3, [r7, #20]
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d1dc      	bne.n	8007722 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d004      	beq.n	8007778 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800776e:	6938      	ldr	r0, [r7, #16]
 8007770:	f7ff fa56 	bl	8006c20 <tcp_abort>
 8007774:	e000      	b.n	8007778 <tcp_kill_prio+0x8c>
    return;
 8007776:	bf00      	nop
  }
}
 8007778:	3718      	adds	r7, #24
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
 800777e:	bf00      	nop
 8007780:	2000a4c0 	.word	0x2000a4c0
 8007784:	2000a4b4 	.word	0x2000a4b4

08007788 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b086      	sub	sp, #24
 800778c:	af00      	add	r7, sp, #0
 800778e:	4603      	mov	r3, r0
 8007790:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007792:	79fb      	ldrb	r3, [r7, #7]
 8007794:	2b08      	cmp	r3, #8
 8007796:	d009      	beq.n	80077ac <tcp_kill_state+0x24>
 8007798:	79fb      	ldrb	r3, [r7, #7]
 800779a:	2b09      	cmp	r3, #9
 800779c:	d006      	beq.n	80077ac <tcp_kill_state+0x24>
 800779e:	4b1a      	ldr	r3, [pc, #104]	; (8007808 <tcp_kill_state+0x80>)
 80077a0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80077a4:	4919      	ldr	r1, [pc, #100]	; (800780c <tcp_kill_state+0x84>)
 80077a6:	481a      	ldr	r0, [pc, #104]	; (8007810 <tcp_kill_state+0x88>)
 80077a8:	f007 f8cc 	bl	800e944 <iprintf>

  inactivity = 0;
 80077ac:	2300      	movs	r3, #0
 80077ae:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80077b0:	2300      	movs	r3, #0
 80077b2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80077b4:	4b17      	ldr	r3, [pc, #92]	; (8007814 <tcp_kill_state+0x8c>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	617b      	str	r3, [r7, #20]
 80077ba:	e017      	b.n	80077ec <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	7d1b      	ldrb	r3, [r3, #20]
 80077c0:	79fa      	ldrb	r2, [r7, #7]
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d10f      	bne.n	80077e6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80077c6:	4b14      	ldr	r3, [pc, #80]	; (8007818 <tcp_kill_state+0x90>)
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	6a1b      	ldr	r3, [r3, #32]
 80077ce:	1ad3      	subs	r3, r2, r3
 80077d0:	68fa      	ldr	r2, [r7, #12]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d807      	bhi.n	80077e6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80077d6:	4b10      	ldr	r3, [pc, #64]	; (8007818 <tcp_kill_state+0x90>)
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	6a1b      	ldr	r3, [r3, #32]
 80077de:	1ad3      	subs	r3, r2, r3
 80077e0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	617b      	str	r3, [r7, #20]
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d1e4      	bne.n	80077bc <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d003      	beq.n	8007800 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80077f8:	2100      	movs	r1, #0
 80077fa:	6938      	ldr	r0, [r7, #16]
 80077fc:	f7ff f952 	bl	8006aa4 <tcp_abandon>
  }
}
 8007800:	bf00      	nop
 8007802:	3718      	adds	r7, #24
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}
 8007808:	08010270 	.word	0x08010270
 800780c:	080107fc 	.word	0x080107fc
 8007810:	080102b4 	.word	0x080102b4
 8007814:	2000a4c0 	.word	0x2000a4c0
 8007818:	2000a4b4 	.word	0x2000a4b4

0800781c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8007822:	2300      	movs	r3, #0
 8007824:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8007826:	2300      	movs	r3, #0
 8007828:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800782a:	4b12      	ldr	r3, [pc, #72]	; (8007874 <tcp_kill_timewait+0x58>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	60fb      	str	r3, [r7, #12]
 8007830:	e012      	b.n	8007858 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007832:	4b11      	ldr	r3, [pc, #68]	; (8007878 <tcp_kill_timewait+0x5c>)
 8007834:	681a      	ldr	r2, [r3, #0]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	6a1b      	ldr	r3, [r3, #32]
 800783a:	1ad3      	subs	r3, r2, r3
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	429a      	cmp	r2, r3
 8007840:	d807      	bhi.n	8007852 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8007842:	4b0d      	ldr	r3, [pc, #52]	; (8007878 <tcp_kill_timewait+0x5c>)
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6a1b      	ldr	r3, [r3, #32]
 800784a:	1ad3      	subs	r3, r2, r3
 800784c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	60fb      	str	r3, [r7, #12]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d1e9      	bne.n	8007832 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d002      	beq.n	800786a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007864:	68b8      	ldr	r0, [r7, #8]
 8007866:	f7ff f9db 	bl	8006c20 <tcp_abort>
  }
}
 800786a:	bf00      	nop
 800786c:	3710      	adds	r7, #16
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
 8007872:	bf00      	nop
 8007874:	2000a4c4 	.word	0x2000a4c4
 8007878:	2000a4b4 	.word	0x2000a4b4

0800787c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8007882:	4b10      	ldr	r3, [pc, #64]	; (80078c4 <tcp_handle_closepend+0x48>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007888:	e014      	b.n	80078b4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	8b5b      	ldrh	r3, [r3, #26]
 8007894:	f003 0308 	and.w	r3, r3, #8
 8007898:	2b00      	cmp	r3, #0
 800789a:	d009      	beq.n	80078b0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	8b5b      	ldrh	r3, [r3, #26]
 80078a0:	f023 0308 	bic.w	r3, r3, #8
 80078a4:	b29a      	uxth	r2, r3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f7ff f864 	bl	8006978 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d1e7      	bne.n	800788a <tcp_handle_closepend+0xe>
  }
}
 80078ba:	bf00      	nop
 80078bc:	bf00      	nop
 80078be:	3708      	adds	r7, #8
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}
 80078c4:	2000a4c0 	.word	0x2000a4c0

080078c8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	4603      	mov	r3, r0
 80078d0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80078d2:	2001      	movs	r0, #1
 80078d4:	f7fd fd36 	bl	8005344 <memp_malloc>
 80078d8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d126      	bne.n	800792e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80078e0:	f7ff ffcc 	bl	800787c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80078e4:	f7ff ff9a 	bl	800781c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80078e8:	2001      	movs	r0, #1
 80078ea:	f7fd fd2b 	bl	8005344 <memp_malloc>
 80078ee:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d11b      	bne.n	800792e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80078f6:	2009      	movs	r0, #9
 80078f8:	f7ff ff46 	bl	8007788 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80078fc:	2001      	movs	r0, #1
 80078fe:	f7fd fd21 	bl	8005344 <memp_malloc>
 8007902:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d111      	bne.n	800792e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800790a:	2008      	movs	r0, #8
 800790c:	f7ff ff3c 	bl	8007788 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007910:	2001      	movs	r0, #1
 8007912:	f7fd fd17 	bl	8005344 <memp_malloc>
 8007916:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d107      	bne.n	800792e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800791e:	79fb      	ldrb	r3, [r7, #7]
 8007920:	4618      	mov	r0, r3
 8007922:	f7ff fee3 	bl	80076ec <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007926:	2001      	movs	r0, #1
 8007928:	f7fd fd0c 	bl	8005344 <memp_malloc>
 800792c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d03f      	beq.n	80079b4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007934:	229c      	movs	r2, #156	; 0x9c
 8007936:	2100      	movs	r1, #0
 8007938:	68f8      	ldr	r0, [r7, #12]
 800793a:	f007 f868 	bl	800ea0e <memset>
    pcb->prio = prio;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	79fa      	ldrb	r2, [r7, #7]
 8007942:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800794a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007954:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	22ff      	movs	r2, #255	; 0xff
 8007962:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f44f 7206 	mov.w	r2, #536	; 0x218
 800796a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2206      	movs	r2, #6
 8007970:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2206      	movs	r2, #6
 8007978:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007980:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2201      	movs	r2, #1
 8007986:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800798a:	4b0d      	ldr	r3, [pc, #52]	; (80079c0 <tcp_alloc+0xf8>)
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8007992:	4b0c      	ldr	r3, [pc, #48]	; (80079c4 <tcp_alloc+0xfc>)
 8007994:	781a      	ldrb	r2, [r3, #0]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80079a0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	4a08      	ldr	r2, [pc, #32]	; (80079c8 <tcp_alloc+0x100>)
 80079a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	4a07      	ldr	r2, [pc, #28]	; (80079cc <tcp_alloc+0x104>)
 80079b0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80079b4:	68fb      	ldr	r3, [r7, #12]
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3710      	adds	r7, #16
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	2000a4b4 	.word	0x2000a4b4
 80079c4:	2000a4ca 	.word	0x2000a4ca
 80079c8:	08007681 	.word	0x08007681
 80079cc:	006ddd00 	.word	0x006ddd00

080079d0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d107      	bne.n	80079ee <tcp_pcb_purge+0x1e>
 80079de:	4b21      	ldr	r3, [pc, #132]	; (8007a64 <tcp_pcb_purge+0x94>)
 80079e0:	f640 0251 	movw	r2, #2129	; 0x851
 80079e4:	4920      	ldr	r1, [pc, #128]	; (8007a68 <tcp_pcb_purge+0x98>)
 80079e6:	4821      	ldr	r0, [pc, #132]	; (8007a6c <tcp_pcb_purge+0x9c>)
 80079e8:	f006 ffac 	bl	800e944 <iprintf>
 80079ec:	e037      	b.n	8007a5e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	7d1b      	ldrb	r3, [r3, #20]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d033      	beq.n	8007a5e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80079fa:	2b0a      	cmp	r3, #10
 80079fc:	d02f      	beq.n	8007a5e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	d02b      	beq.n	8007a5e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d007      	beq.n	8007a1e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7fe fb7c 	bl	8006110 <pbuf_free>
      pcb->refused_data = NULL;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d002      	beq.n	8007a2c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 f986 	bl	8007d38 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007a32:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f7ff fdc7 	bl	80075cc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a42:	4618      	mov	r0, r3
 8007a44:	f7ff fdc2 	bl	80075cc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	66da      	str	r2, [r3, #108]	; 0x6c
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8007a5e:	3708      	adds	r7, #8
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	08010270 	.word	0x08010270
 8007a68:	080108bc 	.word	0x080108bc
 8007a6c:	080102b4 	.word	0x080102b4

08007a70 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d106      	bne.n	8007a8e <tcp_pcb_remove+0x1e>
 8007a80:	4b3e      	ldr	r3, [pc, #248]	; (8007b7c <tcp_pcb_remove+0x10c>)
 8007a82:	f640 0283 	movw	r2, #2179	; 0x883
 8007a86:	493e      	ldr	r1, [pc, #248]	; (8007b80 <tcp_pcb_remove+0x110>)
 8007a88:	483e      	ldr	r0, [pc, #248]	; (8007b84 <tcp_pcb_remove+0x114>)
 8007a8a:	f006 ff5b 	bl	800e944 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d106      	bne.n	8007aa2 <tcp_pcb_remove+0x32>
 8007a94:	4b39      	ldr	r3, [pc, #228]	; (8007b7c <tcp_pcb_remove+0x10c>)
 8007a96:	f640 0284 	movw	r2, #2180	; 0x884
 8007a9a:	493b      	ldr	r1, [pc, #236]	; (8007b88 <tcp_pcb_remove+0x118>)
 8007a9c:	4839      	ldr	r0, [pc, #228]	; (8007b84 <tcp_pcb_remove+0x114>)
 8007a9e:	f006 ff51 	bl	800e944 <iprintf>

  TCP_RMV(pcblist, pcb);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	683a      	ldr	r2, [r7, #0]
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d105      	bne.n	8007ab8 <tcp_pcb_remove+0x48>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	68da      	ldr	r2, [r3, #12]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	601a      	str	r2, [r3, #0]
 8007ab6:	e013      	b.n	8007ae0 <tcp_pcb_remove+0x70>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	60fb      	str	r3, [r7, #12]
 8007abe:	e00c      	b.n	8007ada <tcp_pcb_remove+0x6a>
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	683a      	ldr	r2, [r7, #0]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d104      	bne.n	8007ad4 <tcp_pcb_remove+0x64>
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	68da      	ldr	r2, [r3, #12]
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	60da      	str	r2, [r3, #12]
 8007ad2:	e005      	b.n	8007ae0 <tcp_pcb_remove+0x70>
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	60fb      	str	r3, [r7, #12]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d1ef      	bne.n	8007ac0 <tcp_pcb_remove+0x50>
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8007ae6:	6838      	ldr	r0, [r7, #0]
 8007ae8:	f7ff ff72 	bl	80079d0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	7d1b      	ldrb	r3, [r3, #20]
 8007af0:	2b0a      	cmp	r3, #10
 8007af2:	d013      	beq.n	8007b1c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d00f      	beq.n	8007b1c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	8b5b      	ldrh	r3, [r3, #26]
 8007b00:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d009      	beq.n	8007b1c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	8b5b      	ldrh	r3, [r3, #26]
 8007b0c:	f043 0302 	orr.w	r3, r3, #2
 8007b10:	b29a      	uxth	r2, r3
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007b16:	6838      	ldr	r0, [r7, #0]
 8007b18:	f002 ff6e 	bl	800a9f8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	7d1b      	ldrb	r3, [r3, #20]
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d020      	beq.n	8007b66 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d006      	beq.n	8007b3a <tcp_pcb_remove+0xca>
 8007b2c:	4b13      	ldr	r3, [pc, #76]	; (8007b7c <tcp_pcb_remove+0x10c>)
 8007b2e:	f640 0293 	movw	r2, #2195	; 0x893
 8007b32:	4916      	ldr	r1, [pc, #88]	; (8007b8c <tcp_pcb_remove+0x11c>)
 8007b34:	4813      	ldr	r0, [pc, #76]	; (8007b84 <tcp_pcb_remove+0x114>)
 8007b36:	f006 ff05 	bl	800e944 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d006      	beq.n	8007b50 <tcp_pcb_remove+0xe0>
 8007b42:	4b0e      	ldr	r3, [pc, #56]	; (8007b7c <tcp_pcb_remove+0x10c>)
 8007b44:	f640 0294 	movw	r2, #2196	; 0x894
 8007b48:	4911      	ldr	r1, [pc, #68]	; (8007b90 <tcp_pcb_remove+0x120>)
 8007b4a:	480e      	ldr	r0, [pc, #56]	; (8007b84 <tcp_pcb_remove+0x114>)
 8007b4c:	f006 fefa 	bl	800e944 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d006      	beq.n	8007b66 <tcp_pcb_remove+0xf6>
 8007b58:	4b08      	ldr	r3, [pc, #32]	; (8007b7c <tcp_pcb_remove+0x10c>)
 8007b5a:	f640 0296 	movw	r2, #2198	; 0x896
 8007b5e:	490d      	ldr	r1, [pc, #52]	; (8007b94 <tcp_pcb_remove+0x124>)
 8007b60:	4808      	ldr	r0, [pc, #32]	; (8007b84 <tcp_pcb_remove+0x114>)
 8007b62:	f006 feef 	bl	800e944 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8007b72:	bf00      	nop
 8007b74:	3710      	adds	r7, #16
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	08010270 	.word	0x08010270
 8007b80:	080108d8 	.word	0x080108d8
 8007b84:	080102b4 	.word	0x080102b4
 8007b88:	080108f4 	.word	0x080108f4
 8007b8c:	08010914 	.word	0x08010914
 8007b90:	0801092c 	.word	0x0801092c
 8007b94:	08010948 	.word	0x08010948

08007b98 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d106      	bne.n	8007bb4 <tcp_next_iss+0x1c>
 8007ba6:	4b0a      	ldr	r3, [pc, #40]	; (8007bd0 <tcp_next_iss+0x38>)
 8007ba8:	f640 02af 	movw	r2, #2223	; 0x8af
 8007bac:	4909      	ldr	r1, [pc, #36]	; (8007bd4 <tcp_next_iss+0x3c>)
 8007bae:	480a      	ldr	r0, [pc, #40]	; (8007bd8 <tcp_next_iss+0x40>)
 8007bb0:	f006 fec8 	bl	800e944 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8007bb4:	4b09      	ldr	r3, [pc, #36]	; (8007bdc <tcp_next_iss+0x44>)
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	4b09      	ldr	r3, [pc, #36]	; (8007be0 <tcp_next_iss+0x48>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	4a07      	ldr	r2, [pc, #28]	; (8007bdc <tcp_next_iss+0x44>)
 8007bc0:	6013      	str	r3, [r2, #0]
  return iss;
 8007bc2:	4b06      	ldr	r3, [pc, #24]	; (8007bdc <tcp_next_iss+0x44>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3708      	adds	r7, #8
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	08010270 	.word	0x08010270
 8007bd4:	08010960 	.word	0x08010960
 8007bd8:	080102b4 	.word	0x080102b4
 8007bdc:	20000024 	.word	0x20000024
 8007be0:	2000a4b4 	.word	0x2000a4b4

08007be4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b086      	sub	sp, #24
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	4603      	mov	r3, r0
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	607a      	str	r2, [r7, #4]
 8007bf0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d106      	bne.n	8007c06 <tcp_eff_send_mss_netif+0x22>
 8007bf8:	4b14      	ldr	r3, [pc, #80]	; (8007c4c <tcp_eff_send_mss_netif+0x68>)
 8007bfa:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8007bfe:	4914      	ldr	r1, [pc, #80]	; (8007c50 <tcp_eff_send_mss_netif+0x6c>)
 8007c00:	4814      	ldr	r0, [pc, #80]	; (8007c54 <tcp_eff_send_mss_netif+0x70>)
 8007c02:	f006 fe9f 	bl	800e944 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d101      	bne.n	8007c10 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8007c0c:	89fb      	ldrh	r3, [r7, #14]
 8007c0e:	e019      	b.n	8007c44 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007c14:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8007c16:	8afb      	ldrh	r3, [r7, #22]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d012      	beq.n	8007c42 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8007c1c:	2328      	movs	r3, #40	; 0x28
 8007c1e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8007c20:	8afa      	ldrh	r2, [r7, #22]
 8007c22:	8abb      	ldrh	r3, [r7, #20]
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d904      	bls.n	8007c32 <tcp_eff_send_mss_netif+0x4e>
 8007c28:	8afa      	ldrh	r2, [r7, #22]
 8007c2a:	8abb      	ldrh	r3, [r7, #20]
 8007c2c:	1ad3      	subs	r3, r2, r3
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	e000      	b.n	8007c34 <tcp_eff_send_mss_netif+0x50>
 8007c32:	2300      	movs	r3, #0
 8007c34:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8007c36:	8a7a      	ldrh	r2, [r7, #18]
 8007c38:	89fb      	ldrh	r3, [r7, #14]
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	bf28      	it	cs
 8007c3e:	4613      	movcs	r3, r2
 8007c40:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8007c42:	89fb      	ldrh	r3, [r7, #14]
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3718      	adds	r7, #24
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}
 8007c4c:	08010270 	.word	0x08010270
 8007c50:	0801097c 	.word	0x0801097c
 8007c54:	080102b4 	.word	0x080102b4

08007c58 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d119      	bne.n	8007ca0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8007c6c:	4b10      	ldr	r3, [pc, #64]	; (8007cb0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8007c6e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8007c72:	4910      	ldr	r1, [pc, #64]	; (8007cb4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8007c74:	4810      	ldr	r0, [pc, #64]	; (8007cb8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8007c76:	f006 fe65 	bl	800e944 <iprintf>

  while (pcb != NULL) {
 8007c7a:	e011      	b.n	8007ca0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d108      	bne.n	8007c9a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8007c8e:	68f8      	ldr	r0, [r7, #12]
 8007c90:	f7fe ffc6 	bl	8006c20 <tcp_abort>
      pcb = next;
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	60fb      	str	r3, [r7, #12]
 8007c98:	e002      	b.n	8007ca0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d1ea      	bne.n	8007c7c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8007ca6:	bf00      	nop
 8007ca8:	bf00      	nop
 8007caa:	3710      	adds	r7, #16
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	08010270 	.word	0x08010270
 8007cb4:	080109a4 	.word	0x080109a4
 8007cb8:	080102b4 	.word	0x080102b4

08007cbc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d02a      	beq.n	8007d22 <tcp_netif_ip_addr_changed+0x66>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d026      	beq.n	8007d22 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007cd4:	4b15      	ldr	r3, [pc, #84]	; (8007d2c <tcp_netif_ip_addr_changed+0x70>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4619      	mov	r1, r3
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f7ff ffbc 	bl	8007c58 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8007ce0:	4b13      	ldr	r3, [pc, #76]	; (8007d30 <tcp_netif_ip_addr_changed+0x74>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f7ff ffb6 	bl	8007c58 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d017      	beq.n	8007d22 <tcp_netif_ip_addr_changed+0x66>
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d013      	beq.n	8007d22 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007cfa:	4b0e      	ldr	r3, [pc, #56]	; (8007d34 <tcp_netif_ip_addr_changed+0x78>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	60fb      	str	r3, [r7, #12]
 8007d00:	e00c      	b.n	8007d1c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d103      	bne.n	8007d16 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	68db      	ldr	r3, [r3, #12]
 8007d1a:	60fb      	str	r3, [r7, #12]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d1ef      	bne.n	8007d02 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8007d22:	bf00      	nop
 8007d24:	3710      	adds	r7, #16
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	2000a4c0 	.word	0x2000a4c0
 8007d30:	2000a4b8 	.word	0x2000a4b8
 8007d34:	2000a4bc 	.word	0x2000a4bc

08007d38 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d007      	beq.n	8007d58 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f7ff fc3d 	bl	80075cc <tcp_segs_free>
    pcb->ooseq = NULL;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8007d58:	bf00      	nop
 8007d5a:	3708      	adds	r7, #8
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8007d60:	b590      	push	{r4, r7, lr}
 8007d62:	b08d      	sub	sp, #52	; 0x34
 8007d64:	af04      	add	r7, sp, #16
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d105      	bne.n	8007d7c <tcp_input+0x1c>
 8007d70:	4b9b      	ldr	r3, [pc, #620]	; (8007fe0 <tcp_input+0x280>)
 8007d72:	2283      	movs	r2, #131	; 0x83
 8007d74:	499b      	ldr	r1, [pc, #620]	; (8007fe4 <tcp_input+0x284>)
 8007d76:	489c      	ldr	r0, [pc, #624]	; (8007fe8 <tcp_input+0x288>)
 8007d78:	f006 fde4 	bl	800e944 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	4a9a      	ldr	r2, [pc, #616]	; (8007fec <tcp_input+0x28c>)
 8007d82:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	895b      	ldrh	r3, [r3, #10]
 8007d88:	2b13      	cmp	r3, #19
 8007d8a:	f240 83d1 	bls.w	8008530 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007d8e:	4b98      	ldr	r3, [pc, #608]	; (8007ff0 <tcp_input+0x290>)
 8007d90:	695b      	ldr	r3, [r3, #20]
 8007d92:	4a97      	ldr	r2, [pc, #604]	; (8007ff0 <tcp_input+0x290>)
 8007d94:	6812      	ldr	r2, [r2, #0]
 8007d96:	4611      	mov	r1, r2
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f005 fd7d 	bl	800d898 <ip4_addr_isbroadcast_u32>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	f040 83c7 	bne.w	8008534 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8007da6:	4b92      	ldr	r3, [pc, #584]	; (8007ff0 <tcp_input+0x290>)
 8007da8:	695b      	ldr	r3, [r3, #20]
 8007daa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007dae:	2be0      	cmp	r3, #224	; 0xe0
 8007db0:	f000 83c0 	beq.w	8008534 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8007db4:	4b8d      	ldr	r3, [pc, #564]	; (8007fec <tcp_input+0x28c>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	899b      	ldrh	r3, [r3, #12]
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f7fc fe49 	bl	8004a54 <lwip_htons>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	0b1b      	lsrs	r3, r3, #12
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8007dce:	7cbb      	ldrb	r3, [r7, #18]
 8007dd0:	2b13      	cmp	r3, #19
 8007dd2:	f240 83b1 	bls.w	8008538 <tcp_input+0x7d8>
 8007dd6:	7cbb      	ldrb	r3, [r7, #18]
 8007dd8:	b29a      	uxth	r2, r3
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	891b      	ldrh	r3, [r3, #8]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	f200 83aa 	bhi.w	8008538 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8007de4:	7cbb      	ldrb	r3, [r7, #18]
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	3b14      	subs	r3, #20
 8007dea:	b29a      	uxth	r2, r3
 8007dec:	4b81      	ldr	r3, [pc, #516]	; (8007ff4 <tcp_input+0x294>)
 8007dee:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8007df0:	4b81      	ldr	r3, [pc, #516]	; (8007ff8 <tcp_input+0x298>)
 8007df2:	2200      	movs	r2, #0
 8007df4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	895a      	ldrh	r2, [r3, #10]
 8007dfa:	7cbb      	ldrb	r3, [r7, #18]
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d309      	bcc.n	8007e16 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8007e02:	4b7c      	ldr	r3, [pc, #496]	; (8007ff4 <tcp_input+0x294>)
 8007e04:	881a      	ldrh	r2, [r3, #0]
 8007e06:	4b7d      	ldr	r3, [pc, #500]	; (8007ffc <tcp_input+0x29c>)
 8007e08:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8007e0a:	7cbb      	ldrb	r3, [r7, #18]
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f7fe f8f8 	bl	8006004 <pbuf_remove_header>
 8007e14:	e04e      	b.n	8007eb4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d105      	bne.n	8007e2a <tcp_input+0xca>
 8007e1e:	4b70      	ldr	r3, [pc, #448]	; (8007fe0 <tcp_input+0x280>)
 8007e20:	22c2      	movs	r2, #194	; 0xc2
 8007e22:	4977      	ldr	r1, [pc, #476]	; (8008000 <tcp_input+0x2a0>)
 8007e24:	4870      	ldr	r0, [pc, #448]	; (8007fe8 <tcp_input+0x288>)
 8007e26:	f006 fd8d 	bl	800e944 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8007e2a:	2114      	movs	r1, #20
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f7fe f8e9 	bl	8006004 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	895a      	ldrh	r2, [r3, #10]
 8007e36:	4b71      	ldr	r3, [pc, #452]	; (8007ffc <tcp_input+0x29c>)
 8007e38:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8007e3a:	4b6e      	ldr	r3, [pc, #440]	; (8007ff4 <tcp_input+0x294>)
 8007e3c:	881a      	ldrh	r2, [r3, #0]
 8007e3e:	4b6f      	ldr	r3, [pc, #444]	; (8007ffc <tcp_input+0x29c>)
 8007e40:	881b      	ldrh	r3, [r3, #0]
 8007e42:	1ad3      	subs	r3, r2, r3
 8007e44:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8007e46:	4b6d      	ldr	r3, [pc, #436]	; (8007ffc <tcp_input+0x29c>)
 8007e48:	881b      	ldrh	r3, [r3, #0]
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f7fe f8d9 	bl	8006004 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	895b      	ldrh	r3, [r3, #10]
 8007e58:	8a3a      	ldrh	r2, [r7, #16]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	f200 836e 	bhi.w	800853c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	4a64      	ldr	r2, [pc, #400]	; (8007ff8 <tcp_input+0x298>)
 8007e68:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	8a3a      	ldrh	r2, [r7, #16]
 8007e70:	4611      	mov	r1, r2
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7fe f8c6 	bl	8006004 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	891a      	ldrh	r2, [r3, #8]
 8007e7c:	8a3b      	ldrh	r3, [r7, #16]
 8007e7e:	1ad3      	subs	r3, r2, r3
 8007e80:	b29a      	uxth	r2, r3
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	895b      	ldrh	r3, [r3, #10]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d005      	beq.n	8007e9a <tcp_input+0x13a>
 8007e8e:	4b54      	ldr	r3, [pc, #336]	; (8007fe0 <tcp_input+0x280>)
 8007e90:	22df      	movs	r2, #223	; 0xdf
 8007e92:	495c      	ldr	r1, [pc, #368]	; (8008004 <tcp_input+0x2a4>)
 8007e94:	4854      	ldr	r0, [pc, #336]	; (8007fe8 <tcp_input+0x288>)
 8007e96:	f006 fd55 	bl	800e944 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	891a      	ldrh	r2, [r3, #8]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	891b      	ldrh	r3, [r3, #8]
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d005      	beq.n	8007eb4 <tcp_input+0x154>
 8007ea8:	4b4d      	ldr	r3, [pc, #308]	; (8007fe0 <tcp_input+0x280>)
 8007eaa:	22e0      	movs	r2, #224	; 0xe0
 8007eac:	4956      	ldr	r1, [pc, #344]	; (8008008 <tcp_input+0x2a8>)
 8007eae:	484e      	ldr	r0, [pc, #312]	; (8007fe8 <tcp_input+0x288>)
 8007eb0:	f006 fd48 	bl	800e944 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007eb4:	4b4d      	ldr	r3, [pc, #308]	; (8007fec <tcp_input+0x28c>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	881b      	ldrh	r3, [r3, #0]
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	4a4b      	ldr	r2, [pc, #300]	; (8007fec <tcp_input+0x28c>)
 8007ebe:	6814      	ldr	r4, [r2, #0]
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f7fc fdc7 	bl	8004a54 <lwip_htons>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8007eca:	4b48      	ldr	r3, [pc, #288]	; (8007fec <tcp_input+0x28c>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	885b      	ldrh	r3, [r3, #2]
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	4a46      	ldr	r2, [pc, #280]	; (8007fec <tcp_input+0x28c>)
 8007ed4:	6814      	ldr	r4, [r2, #0]
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f7fc fdbc 	bl	8004a54 <lwip_htons>
 8007edc:	4603      	mov	r3, r0
 8007ede:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007ee0:	4b42      	ldr	r3, [pc, #264]	; (8007fec <tcp_input+0x28c>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	4a41      	ldr	r2, [pc, #260]	; (8007fec <tcp_input+0x28c>)
 8007ee8:	6814      	ldr	r4, [r2, #0]
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7fc fdc7 	bl	8004a7e <lwip_htonl>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	6063      	str	r3, [r4, #4]
 8007ef4:	6863      	ldr	r3, [r4, #4]
 8007ef6:	4a45      	ldr	r2, [pc, #276]	; (800800c <tcp_input+0x2ac>)
 8007ef8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007efa:	4b3c      	ldr	r3, [pc, #240]	; (8007fec <tcp_input+0x28c>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	4a3a      	ldr	r2, [pc, #232]	; (8007fec <tcp_input+0x28c>)
 8007f02:	6814      	ldr	r4, [r2, #0]
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7fc fdba 	bl	8004a7e <lwip_htonl>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	60a3      	str	r3, [r4, #8]
 8007f0e:	68a3      	ldr	r3, [r4, #8]
 8007f10:	4a3f      	ldr	r2, [pc, #252]	; (8008010 <tcp_input+0x2b0>)
 8007f12:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007f14:	4b35      	ldr	r3, [pc, #212]	; (8007fec <tcp_input+0x28c>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	89db      	ldrh	r3, [r3, #14]
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	4a33      	ldr	r2, [pc, #204]	; (8007fec <tcp_input+0x28c>)
 8007f1e:	6814      	ldr	r4, [r2, #0]
 8007f20:	4618      	mov	r0, r3
 8007f22:	f7fc fd97 	bl	8004a54 <lwip_htons>
 8007f26:	4603      	mov	r3, r0
 8007f28:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8007f2a:	4b30      	ldr	r3, [pc, #192]	; (8007fec <tcp_input+0x28c>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	899b      	ldrh	r3, [r3, #12]
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7fc fd8e 	bl	8004a54 <lwip_htons>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f40:	b2da      	uxtb	r2, r3
 8007f42:	4b34      	ldr	r3, [pc, #208]	; (8008014 <tcp_input+0x2b4>)
 8007f44:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	891a      	ldrh	r2, [r3, #8]
 8007f4a:	4b33      	ldr	r3, [pc, #204]	; (8008018 <tcp_input+0x2b8>)
 8007f4c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8007f4e:	4b31      	ldr	r3, [pc, #196]	; (8008014 <tcp_input+0x2b4>)
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	f003 0303 	and.w	r3, r3, #3
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d00c      	beq.n	8007f74 <tcp_input+0x214>
    tcplen++;
 8007f5a:	4b2f      	ldr	r3, [pc, #188]	; (8008018 <tcp_input+0x2b8>)
 8007f5c:	881b      	ldrh	r3, [r3, #0]
 8007f5e:	3301      	adds	r3, #1
 8007f60:	b29a      	uxth	r2, r3
 8007f62:	4b2d      	ldr	r3, [pc, #180]	; (8008018 <tcp_input+0x2b8>)
 8007f64:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	891a      	ldrh	r2, [r3, #8]
 8007f6a:	4b2b      	ldr	r3, [pc, #172]	; (8008018 <tcp_input+0x2b8>)
 8007f6c:	881b      	ldrh	r3, [r3, #0]
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	f200 82e6 	bhi.w	8008540 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8007f74:	2300      	movs	r3, #0
 8007f76:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f78:	4b28      	ldr	r3, [pc, #160]	; (800801c <tcp_input+0x2bc>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	61fb      	str	r3, [r7, #28]
 8007f7e:	e09d      	b.n	80080bc <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	7d1b      	ldrb	r3, [r3, #20]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d105      	bne.n	8007f94 <tcp_input+0x234>
 8007f88:	4b15      	ldr	r3, [pc, #84]	; (8007fe0 <tcp_input+0x280>)
 8007f8a:	22fb      	movs	r2, #251	; 0xfb
 8007f8c:	4924      	ldr	r1, [pc, #144]	; (8008020 <tcp_input+0x2c0>)
 8007f8e:	4816      	ldr	r0, [pc, #88]	; (8007fe8 <tcp_input+0x288>)
 8007f90:	f006 fcd8 	bl	800e944 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8007f94:	69fb      	ldr	r3, [r7, #28]
 8007f96:	7d1b      	ldrb	r3, [r3, #20]
 8007f98:	2b0a      	cmp	r3, #10
 8007f9a:	d105      	bne.n	8007fa8 <tcp_input+0x248>
 8007f9c:	4b10      	ldr	r3, [pc, #64]	; (8007fe0 <tcp_input+0x280>)
 8007f9e:	22fc      	movs	r2, #252	; 0xfc
 8007fa0:	4920      	ldr	r1, [pc, #128]	; (8008024 <tcp_input+0x2c4>)
 8007fa2:	4811      	ldr	r0, [pc, #68]	; (8007fe8 <tcp_input+0x288>)
 8007fa4:	f006 fcce 	bl	800e944 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	7d1b      	ldrb	r3, [r3, #20]
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d105      	bne.n	8007fbc <tcp_input+0x25c>
 8007fb0:	4b0b      	ldr	r3, [pc, #44]	; (8007fe0 <tcp_input+0x280>)
 8007fb2:	22fd      	movs	r2, #253	; 0xfd
 8007fb4:	491c      	ldr	r1, [pc, #112]	; (8008028 <tcp_input+0x2c8>)
 8007fb6:	480c      	ldr	r0, [pc, #48]	; (8007fe8 <tcp_input+0x288>)
 8007fb8:	f006 fcc4 	bl	800e944 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	7a1b      	ldrb	r3, [r3, #8]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d033      	beq.n	800802c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	7a1a      	ldrb	r2, [r3, #8]
 8007fc8:	4b09      	ldr	r3, [pc, #36]	; (8007ff0 <tcp_input+0x290>)
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d029      	beq.n	800802c <tcp_input+0x2cc>
      prev = pcb;
 8007fd8:	69fb      	ldr	r3, [r7, #28]
 8007fda:	61bb      	str	r3, [r7, #24]
      continue;
 8007fdc:	e06b      	b.n	80080b6 <tcp_input+0x356>
 8007fde:	bf00      	nop
 8007fe0:	080109d8 	.word	0x080109d8
 8007fe4:	08010a0c 	.word	0x08010a0c
 8007fe8:	08010a24 	.word	0x08010a24
 8007fec:	2000a4dc 	.word	0x2000a4dc
 8007ff0:	20004d84 	.word	0x20004d84
 8007ff4:	2000a4e0 	.word	0x2000a4e0
 8007ff8:	2000a4e4 	.word	0x2000a4e4
 8007ffc:	2000a4e2 	.word	0x2000a4e2
 8008000:	08010a4c 	.word	0x08010a4c
 8008004:	08010a5c 	.word	0x08010a5c
 8008008:	08010a68 	.word	0x08010a68
 800800c:	2000a4ec 	.word	0x2000a4ec
 8008010:	2000a4f0 	.word	0x2000a4f0
 8008014:	2000a4f8 	.word	0x2000a4f8
 8008018:	2000a4f6 	.word	0x2000a4f6
 800801c:	2000a4c0 	.word	0x2000a4c0
 8008020:	08010a88 	.word	0x08010a88
 8008024:	08010ab0 	.word	0x08010ab0
 8008028:	08010adc 	.word	0x08010adc
    }

    if (pcb->remote_port == tcphdr->src &&
 800802c:	69fb      	ldr	r3, [r7, #28]
 800802e:	8b1a      	ldrh	r2, [r3, #24]
 8008030:	4b72      	ldr	r3, [pc, #456]	; (80081fc <tcp_input+0x49c>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	881b      	ldrh	r3, [r3, #0]
 8008036:	b29b      	uxth	r3, r3
 8008038:	429a      	cmp	r2, r3
 800803a:	d13a      	bne.n	80080b2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800803c:	69fb      	ldr	r3, [r7, #28]
 800803e:	8ada      	ldrh	r2, [r3, #22]
 8008040:	4b6e      	ldr	r3, [pc, #440]	; (80081fc <tcp_input+0x49c>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	885b      	ldrh	r3, [r3, #2]
 8008046:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8008048:	429a      	cmp	r2, r3
 800804a:	d132      	bne.n	80080b2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800804c:	69fb      	ldr	r3, [r7, #28]
 800804e:	685a      	ldr	r2, [r3, #4]
 8008050:	4b6b      	ldr	r3, [pc, #428]	; (8008200 <tcp_input+0x4a0>)
 8008052:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008054:	429a      	cmp	r2, r3
 8008056:	d12c      	bne.n	80080b2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008058:	69fb      	ldr	r3, [r7, #28]
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	4b68      	ldr	r3, [pc, #416]	; (8008200 <tcp_input+0x4a0>)
 800805e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008060:	429a      	cmp	r2, r3
 8008062:	d126      	bne.n	80080b2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	68db      	ldr	r3, [r3, #12]
 8008068:	69fa      	ldr	r2, [r7, #28]
 800806a:	429a      	cmp	r2, r3
 800806c:	d106      	bne.n	800807c <tcp_input+0x31c>
 800806e:	4b65      	ldr	r3, [pc, #404]	; (8008204 <tcp_input+0x4a4>)
 8008070:	f240 120d 	movw	r2, #269	; 0x10d
 8008074:	4964      	ldr	r1, [pc, #400]	; (8008208 <tcp_input+0x4a8>)
 8008076:	4865      	ldr	r0, [pc, #404]	; (800820c <tcp_input+0x4ac>)
 8008078:	f006 fc64 	bl	800e944 <iprintf>
      if (prev != NULL) {
 800807c:	69bb      	ldr	r3, [r7, #24]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d00a      	beq.n	8008098 <tcp_input+0x338>
        prev->next = pcb->next;
 8008082:	69fb      	ldr	r3, [r7, #28]
 8008084:	68da      	ldr	r2, [r3, #12]
 8008086:	69bb      	ldr	r3, [r7, #24]
 8008088:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800808a:	4b61      	ldr	r3, [pc, #388]	; (8008210 <tcp_input+0x4b0>)
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	69fb      	ldr	r3, [r7, #28]
 8008090:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8008092:	4a5f      	ldr	r2, [pc, #380]	; (8008210 <tcp_input+0x4b0>)
 8008094:	69fb      	ldr	r3, [r7, #28]
 8008096:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008098:	69fb      	ldr	r3, [r7, #28]
 800809a:	68db      	ldr	r3, [r3, #12]
 800809c:	69fa      	ldr	r2, [r7, #28]
 800809e:	429a      	cmp	r2, r3
 80080a0:	d111      	bne.n	80080c6 <tcp_input+0x366>
 80080a2:	4b58      	ldr	r3, [pc, #352]	; (8008204 <tcp_input+0x4a4>)
 80080a4:	f240 1215 	movw	r2, #277	; 0x115
 80080a8:	495a      	ldr	r1, [pc, #360]	; (8008214 <tcp_input+0x4b4>)
 80080aa:	4858      	ldr	r0, [pc, #352]	; (800820c <tcp_input+0x4ac>)
 80080ac:	f006 fc4a 	bl	800e944 <iprintf>
      break;
 80080b0:	e009      	b.n	80080c6 <tcp_input+0x366>
    }
    prev = pcb;
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80080b6:	69fb      	ldr	r3, [r7, #28]
 80080b8:	68db      	ldr	r3, [r3, #12]
 80080ba:	61fb      	str	r3, [r7, #28]
 80080bc:	69fb      	ldr	r3, [r7, #28]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	f47f af5e 	bne.w	8007f80 <tcp_input+0x220>
 80080c4:	e000      	b.n	80080c8 <tcp_input+0x368>
      break;
 80080c6:	bf00      	nop
  }

  if (pcb == NULL) {
 80080c8:	69fb      	ldr	r3, [r7, #28]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	f040 80aa 	bne.w	8008224 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80080d0:	4b51      	ldr	r3, [pc, #324]	; (8008218 <tcp_input+0x4b8>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	61fb      	str	r3, [r7, #28]
 80080d6:	e03f      	b.n	8008158 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80080d8:	69fb      	ldr	r3, [r7, #28]
 80080da:	7d1b      	ldrb	r3, [r3, #20]
 80080dc:	2b0a      	cmp	r3, #10
 80080de:	d006      	beq.n	80080ee <tcp_input+0x38e>
 80080e0:	4b48      	ldr	r3, [pc, #288]	; (8008204 <tcp_input+0x4a4>)
 80080e2:	f240 121f 	movw	r2, #287	; 0x11f
 80080e6:	494d      	ldr	r1, [pc, #308]	; (800821c <tcp_input+0x4bc>)
 80080e8:	4848      	ldr	r0, [pc, #288]	; (800820c <tcp_input+0x4ac>)
 80080ea:	f006 fc2b 	bl	800e944 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	7a1b      	ldrb	r3, [r3, #8]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d009      	beq.n	800810a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80080f6:	69fb      	ldr	r3, [r7, #28]
 80080f8:	7a1a      	ldrb	r2, [r3, #8]
 80080fa:	4b41      	ldr	r3, [pc, #260]	; (8008200 <tcp_input+0x4a0>)
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008102:	3301      	adds	r3, #1
 8008104:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008106:	429a      	cmp	r2, r3
 8008108:	d122      	bne.n	8008150 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800810a:	69fb      	ldr	r3, [r7, #28]
 800810c:	8b1a      	ldrh	r2, [r3, #24]
 800810e:	4b3b      	ldr	r3, [pc, #236]	; (80081fc <tcp_input+0x49c>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	881b      	ldrh	r3, [r3, #0]
 8008114:	b29b      	uxth	r3, r3
 8008116:	429a      	cmp	r2, r3
 8008118:	d11b      	bne.n	8008152 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800811a:	69fb      	ldr	r3, [r7, #28]
 800811c:	8ada      	ldrh	r2, [r3, #22]
 800811e:	4b37      	ldr	r3, [pc, #220]	; (80081fc <tcp_input+0x49c>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	885b      	ldrh	r3, [r3, #2]
 8008124:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8008126:	429a      	cmp	r2, r3
 8008128:	d113      	bne.n	8008152 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800812a:	69fb      	ldr	r3, [r7, #28]
 800812c:	685a      	ldr	r2, [r3, #4]
 800812e:	4b34      	ldr	r3, [pc, #208]	; (8008200 <tcp_input+0x4a0>)
 8008130:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8008132:	429a      	cmp	r2, r3
 8008134:	d10d      	bne.n	8008152 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	4b31      	ldr	r3, [pc, #196]	; (8008200 <tcp_input+0x4a0>)
 800813c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800813e:	429a      	cmp	r2, r3
 8008140:	d107      	bne.n	8008152 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8008142:	69f8      	ldr	r0, [r7, #28]
 8008144:	f000 fb56 	bl	80087f4 <tcp_timewait_input>
        }
        pbuf_free(p);
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f7fd ffe1 	bl	8006110 <pbuf_free>
        return;
 800814e:	e1fd      	b.n	800854c <tcp_input+0x7ec>
        continue;
 8008150:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008152:	69fb      	ldr	r3, [r7, #28]
 8008154:	68db      	ldr	r3, [r3, #12]
 8008156:	61fb      	str	r3, [r7, #28]
 8008158:	69fb      	ldr	r3, [r7, #28]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d1bc      	bne.n	80080d8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800815e:	2300      	movs	r3, #0
 8008160:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008162:	4b2f      	ldr	r3, [pc, #188]	; (8008220 <tcp_input+0x4c0>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	617b      	str	r3, [r7, #20]
 8008168:	e02a      	b.n	80081c0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	7a1b      	ldrb	r3, [r3, #8]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d00c      	beq.n	800818c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	7a1a      	ldrb	r2, [r3, #8]
 8008176:	4b22      	ldr	r3, [pc, #136]	; (8008200 <tcp_input+0x4a0>)
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800817e:	3301      	adds	r3, #1
 8008180:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008182:	429a      	cmp	r2, r3
 8008184:	d002      	beq.n	800818c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	61bb      	str	r3, [r7, #24]
        continue;
 800818a:	e016      	b.n	80081ba <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	8ada      	ldrh	r2, [r3, #22]
 8008190:	4b1a      	ldr	r3, [pc, #104]	; (80081fc <tcp_input+0x49c>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	885b      	ldrh	r3, [r3, #2]
 8008196:	b29b      	uxth	r3, r3
 8008198:	429a      	cmp	r2, r3
 800819a:	d10c      	bne.n	80081b6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	4b17      	ldr	r3, [pc, #92]	; (8008200 <tcp_input+0x4a0>)
 80081a2:	695b      	ldr	r3, [r3, #20]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d00f      	beq.n	80081c8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d00d      	beq.n	80081ca <tcp_input+0x46a>
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d009      	beq.n	80081ca <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	68db      	ldr	r3, [r3, #12]
 80081be:	617b      	str	r3, [r7, #20]
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d1d1      	bne.n	800816a <tcp_input+0x40a>
 80081c6:	e000      	b.n	80081ca <tcp_input+0x46a>
            break;
 80081c8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d029      	beq.n	8008224 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80081d0:	69bb      	ldr	r3, [r7, #24]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d00a      	beq.n	80081ec <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	68da      	ldr	r2, [r3, #12]
 80081da:	69bb      	ldr	r3, [r7, #24]
 80081dc:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80081de:	4b10      	ldr	r3, [pc, #64]	; (8008220 <tcp_input+0x4c0>)
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80081e6:	4a0e      	ldr	r2, [pc, #56]	; (8008220 <tcp_input+0x4c0>)
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80081ec:	6978      	ldr	r0, [r7, #20]
 80081ee:	f000 fa03 	bl	80085f8 <tcp_listen_input>
      }
      pbuf_free(p);
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f7fd ff8c 	bl	8006110 <pbuf_free>
      return;
 80081f8:	e1a8      	b.n	800854c <tcp_input+0x7ec>
 80081fa:	bf00      	nop
 80081fc:	2000a4dc 	.word	0x2000a4dc
 8008200:	20004d84 	.word	0x20004d84
 8008204:	080109d8 	.word	0x080109d8
 8008208:	08010b04 	.word	0x08010b04
 800820c:	08010a24 	.word	0x08010a24
 8008210:	2000a4c0 	.word	0x2000a4c0
 8008214:	08010b30 	.word	0x08010b30
 8008218:	2000a4c4 	.word	0x2000a4c4
 800821c:	08010b5c 	.word	0x08010b5c
 8008220:	2000a4bc 	.word	0x2000a4bc
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8008224:	69fb      	ldr	r3, [r7, #28]
 8008226:	2b00      	cmp	r3, #0
 8008228:	f000 8158 	beq.w	80084dc <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800822c:	4b95      	ldr	r3, [pc, #596]	; (8008484 <tcp_input+0x724>)
 800822e:	2200      	movs	r2, #0
 8008230:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	891a      	ldrh	r2, [r3, #8]
 8008236:	4b93      	ldr	r3, [pc, #588]	; (8008484 <tcp_input+0x724>)
 8008238:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800823a:	4a92      	ldr	r2, [pc, #584]	; (8008484 <tcp_input+0x724>)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8008240:	4b91      	ldr	r3, [pc, #580]	; (8008488 <tcp_input+0x728>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a8f      	ldr	r2, [pc, #572]	; (8008484 <tcp_input+0x724>)
 8008246:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8008248:	4b90      	ldr	r3, [pc, #576]	; (800848c <tcp_input+0x72c>)
 800824a:	2200      	movs	r2, #0
 800824c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800824e:	4b90      	ldr	r3, [pc, #576]	; (8008490 <tcp_input+0x730>)
 8008250:	2200      	movs	r2, #0
 8008252:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8008254:	4b8f      	ldr	r3, [pc, #572]	; (8008494 <tcp_input+0x734>)
 8008256:	2200      	movs	r2, #0
 8008258:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800825a:	4b8f      	ldr	r3, [pc, #572]	; (8008498 <tcp_input+0x738>)
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	f003 0308 	and.w	r3, r3, #8
 8008262:	2b00      	cmp	r3, #0
 8008264:	d006      	beq.n	8008274 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	7b5b      	ldrb	r3, [r3, #13]
 800826a:	f043 0301 	orr.w	r3, r3, #1
 800826e:	b2da      	uxtb	r2, r3
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8008274:	69fb      	ldr	r3, [r7, #28]
 8008276:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008278:	2b00      	cmp	r3, #0
 800827a:	d017      	beq.n	80082ac <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800827c:	69f8      	ldr	r0, [r7, #28]
 800827e:	f7ff f929 	bl	80074d4 <tcp_process_refused_data>
 8008282:	4603      	mov	r3, r0
 8008284:	f113 0f0d 	cmn.w	r3, #13
 8008288:	d007      	beq.n	800829a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800828a:	69fb      	ldr	r3, [r7, #28]
 800828c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800828e:	2b00      	cmp	r3, #0
 8008290:	d00c      	beq.n	80082ac <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008292:	4b82      	ldr	r3, [pc, #520]	; (800849c <tcp_input+0x73c>)
 8008294:	881b      	ldrh	r3, [r3, #0]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d008      	beq.n	80082ac <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800829a:	69fb      	ldr	r3, [r7, #28]
 800829c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800829e:	2b00      	cmp	r3, #0
 80082a0:	f040 80e3 	bne.w	800846a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80082a4:	69f8      	ldr	r0, [r7, #28]
 80082a6:	f003 f9ad 	bl	800b604 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80082aa:	e0de      	b.n	800846a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80082ac:	4a7c      	ldr	r2, [pc, #496]	; (80084a0 <tcp_input+0x740>)
 80082ae:	69fb      	ldr	r3, [r7, #28]
 80082b0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80082b2:	69f8      	ldr	r0, [r7, #28]
 80082b4:	f000 fb18 	bl	80088e8 <tcp_process>
 80082b8:	4603      	mov	r3, r0
 80082ba:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80082bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80082c0:	f113 0f0d 	cmn.w	r3, #13
 80082c4:	f000 80d3 	beq.w	800846e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80082c8:	4b71      	ldr	r3, [pc, #452]	; (8008490 <tcp_input+0x730>)
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	f003 0308 	and.w	r3, r3, #8
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d015      	beq.n	8008300 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80082d4:	69fb      	ldr	r3, [r7, #28]
 80082d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d008      	beq.n	80082f0 <tcp_input+0x590>
 80082de:	69fb      	ldr	r3, [r7, #28]
 80082e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082e4:	69fa      	ldr	r2, [r7, #28]
 80082e6:	6912      	ldr	r2, [r2, #16]
 80082e8:	f06f 010d 	mvn.w	r1, #13
 80082ec:	4610      	mov	r0, r2
 80082ee:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80082f0:	69f9      	ldr	r1, [r7, #28]
 80082f2:	486c      	ldr	r0, [pc, #432]	; (80084a4 <tcp_input+0x744>)
 80082f4:	f7ff fbbc 	bl	8007a70 <tcp_pcb_remove>
        tcp_free(pcb);
 80082f8:	69f8      	ldr	r0, [r7, #28]
 80082fa:	f7fe f9a9 	bl	8006650 <tcp_free>
 80082fe:	e0da      	b.n	80084b6 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8008300:	2300      	movs	r3, #0
 8008302:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8008304:	4b63      	ldr	r3, [pc, #396]	; (8008494 <tcp_input+0x734>)
 8008306:	881b      	ldrh	r3, [r3, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d01d      	beq.n	8008348 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800830c:	4b61      	ldr	r3, [pc, #388]	; (8008494 <tcp_input+0x734>)
 800830e:	881b      	ldrh	r3, [r3, #0]
 8008310:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8008312:	69fb      	ldr	r3, [r7, #28]
 8008314:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008318:	2b00      	cmp	r3, #0
 800831a:	d00a      	beq.n	8008332 <tcp_input+0x5d2>
 800831c:	69fb      	ldr	r3, [r7, #28]
 800831e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008322:	69fa      	ldr	r2, [r7, #28]
 8008324:	6910      	ldr	r0, [r2, #16]
 8008326:	89fa      	ldrh	r2, [r7, #14]
 8008328:	69f9      	ldr	r1, [r7, #28]
 800832a:	4798      	blx	r3
 800832c:	4603      	mov	r3, r0
 800832e:	74fb      	strb	r3, [r7, #19]
 8008330:	e001      	b.n	8008336 <tcp_input+0x5d6>
 8008332:	2300      	movs	r3, #0
 8008334:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008336:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800833a:	f113 0f0d 	cmn.w	r3, #13
 800833e:	f000 8098 	beq.w	8008472 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8008342:	4b54      	ldr	r3, [pc, #336]	; (8008494 <tcp_input+0x734>)
 8008344:	2200      	movs	r2, #0
 8008346:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8008348:	69f8      	ldr	r0, [r7, #28]
 800834a:	f000 f915 	bl	8008578 <tcp_input_delayed_close>
 800834e:	4603      	mov	r3, r0
 8008350:	2b00      	cmp	r3, #0
 8008352:	f040 8090 	bne.w	8008476 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8008356:	4b4d      	ldr	r3, [pc, #308]	; (800848c <tcp_input+0x72c>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d041      	beq.n	80083e2 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800835e:	69fb      	ldr	r3, [r7, #28]
 8008360:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008362:	2b00      	cmp	r3, #0
 8008364:	d006      	beq.n	8008374 <tcp_input+0x614>
 8008366:	4b50      	ldr	r3, [pc, #320]	; (80084a8 <tcp_input+0x748>)
 8008368:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800836c:	494f      	ldr	r1, [pc, #316]	; (80084ac <tcp_input+0x74c>)
 800836e:	4850      	ldr	r0, [pc, #320]	; (80084b0 <tcp_input+0x750>)
 8008370:	f006 fae8 	bl	800e944 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	8b5b      	ldrh	r3, [r3, #26]
 8008378:	f003 0310 	and.w	r3, r3, #16
 800837c:	2b00      	cmp	r3, #0
 800837e:	d008      	beq.n	8008392 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8008380:	4b42      	ldr	r3, [pc, #264]	; (800848c <tcp_input+0x72c>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4618      	mov	r0, r3
 8008386:	f7fd fec3 	bl	8006110 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800838a:	69f8      	ldr	r0, [r7, #28]
 800838c:	f7fe fc48 	bl	8006c20 <tcp_abort>
            goto aborted;
 8008390:	e091      	b.n	80084b6 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8008392:	69fb      	ldr	r3, [r7, #28]
 8008394:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008398:	2b00      	cmp	r3, #0
 800839a:	d00c      	beq.n	80083b6 <tcp_input+0x656>
 800839c:	69fb      	ldr	r3, [r7, #28]
 800839e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80083a2:	69fb      	ldr	r3, [r7, #28]
 80083a4:	6918      	ldr	r0, [r3, #16]
 80083a6:	4b39      	ldr	r3, [pc, #228]	; (800848c <tcp_input+0x72c>)
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	2300      	movs	r3, #0
 80083ac:	69f9      	ldr	r1, [r7, #28]
 80083ae:	47a0      	blx	r4
 80083b0:	4603      	mov	r3, r0
 80083b2:	74fb      	strb	r3, [r7, #19]
 80083b4:	e008      	b.n	80083c8 <tcp_input+0x668>
 80083b6:	4b35      	ldr	r3, [pc, #212]	; (800848c <tcp_input+0x72c>)
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	2300      	movs	r3, #0
 80083bc:	69f9      	ldr	r1, [r7, #28]
 80083be:	2000      	movs	r0, #0
 80083c0:	f7ff f95e 	bl	8007680 <tcp_recv_null>
 80083c4:	4603      	mov	r3, r0
 80083c6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80083c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80083cc:	f113 0f0d 	cmn.w	r3, #13
 80083d0:	d053      	beq.n	800847a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80083d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d003      	beq.n	80083e2 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80083da:	4b2c      	ldr	r3, [pc, #176]	; (800848c <tcp_input+0x72c>)
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	69fb      	ldr	r3, [r7, #28]
 80083e0:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80083e2:	4b2b      	ldr	r3, [pc, #172]	; (8008490 <tcp_input+0x730>)
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	f003 0320 	and.w	r3, r3, #32
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d030      	beq.n	8008450 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80083ee:	69fb      	ldr	r3, [r7, #28]
 80083f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d009      	beq.n	800840a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80083f6:	69fb      	ldr	r3, [r7, #28]
 80083f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083fa:	7b5a      	ldrb	r2, [r3, #13]
 80083fc:	69fb      	ldr	r3, [r7, #28]
 80083fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008400:	f042 0220 	orr.w	r2, r2, #32
 8008404:	b2d2      	uxtb	r2, r2
 8008406:	735a      	strb	r2, [r3, #13]
 8008408:	e022      	b.n	8008450 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800840a:	69fb      	ldr	r3, [r7, #28]
 800840c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800840e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008412:	d005      	beq.n	8008420 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8008414:	69fb      	ldr	r3, [r7, #28]
 8008416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008418:	3301      	adds	r3, #1
 800841a:	b29a      	uxth	r2, r3
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8008420:	69fb      	ldr	r3, [r7, #28]
 8008422:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00b      	beq.n	8008442 <tcp_input+0x6e2>
 800842a:	69fb      	ldr	r3, [r7, #28]
 800842c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008430:	69fb      	ldr	r3, [r7, #28]
 8008432:	6918      	ldr	r0, [r3, #16]
 8008434:	2300      	movs	r3, #0
 8008436:	2200      	movs	r2, #0
 8008438:	69f9      	ldr	r1, [r7, #28]
 800843a:	47a0      	blx	r4
 800843c:	4603      	mov	r3, r0
 800843e:	74fb      	strb	r3, [r7, #19]
 8008440:	e001      	b.n	8008446 <tcp_input+0x6e6>
 8008442:	2300      	movs	r3, #0
 8008444:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008446:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800844a:	f113 0f0d 	cmn.w	r3, #13
 800844e:	d016      	beq.n	800847e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8008450:	4b13      	ldr	r3, [pc, #76]	; (80084a0 <tcp_input+0x740>)
 8008452:	2200      	movs	r2, #0
 8008454:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8008456:	69f8      	ldr	r0, [r7, #28]
 8008458:	f000 f88e 	bl	8008578 <tcp_input_delayed_close>
 800845c:	4603      	mov	r3, r0
 800845e:	2b00      	cmp	r3, #0
 8008460:	d128      	bne.n	80084b4 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8008462:	69f8      	ldr	r0, [r7, #28]
 8008464:	f002 fac8 	bl	800a9f8 <tcp_output>
 8008468:	e025      	b.n	80084b6 <tcp_input+0x756>
        goto aborted;
 800846a:	bf00      	nop
 800846c:	e023      	b.n	80084b6 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800846e:	bf00      	nop
 8008470:	e021      	b.n	80084b6 <tcp_input+0x756>
              goto aborted;
 8008472:	bf00      	nop
 8008474:	e01f      	b.n	80084b6 <tcp_input+0x756>
          goto aborted;
 8008476:	bf00      	nop
 8008478:	e01d      	b.n	80084b6 <tcp_input+0x756>
            goto aborted;
 800847a:	bf00      	nop
 800847c:	e01b      	b.n	80084b6 <tcp_input+0x756>
              goto aborted;
 800847e:	bf00      	nop
 8008480:	e019      	b.n	80084b6 <tcp_input+0x756>
 8008482:	bf00      	nop
 8008484:	2000a4cc 	.word	0x2000a4cc
 8008488:	2000a4dc 	.word	0x2000a4dc
 800848c:	2000a4fc 	.word	0x2000a4fc
 8008490:	2000a4f9 	.word	0x2000a4f9
 8008494:	2000a4f4 	.word	0x2000a4f4
 8008498:	2000a4f8 	.word	0x2000a4f8
 800849c:	2000a4f6 	.word	0x2000a4f6
 80084a0:	2000a500 	.word	0x2000a500
 80084a4:	2000a4c0 	.word	0x2000a4c0
 80084a8:	080109d8 	.word	0x080109d8
 80084ac:	08010b8c 	.word	0x08010b8c
 80084b0:	08010a24 	.word	0x08010a24
          goto aborted;
 80084b4:	bf00      	nop
    tcp_input_pcb = NULL;
 80084b6:	4b27      	ldr	r3, [pc, #156]	; (8008554 <tcp_input+0x7f4>)
 80084b8:	2200      	movs	r2, #0
 80084ba:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80084bc:	4b26      	ldr	r3, [pc, #152]	; (8008558 <tcp_input+0x7f8>)
 80084be:	2200      	movs	r2, #0
 80084c0:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80084c2:	4b26      	ldr	r3, [pc, #152]	; (800855c <tcp_input+0x7fc>)
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d03f      	beq.n	800854a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80084ca:	4b24      	ldr	r3, [pc, #144]	; (800855c <tcp_input+0x7fc>)
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	4618      	mov	r0, r3
 80084d0:	f7fd fe1e 	bl	8006110 <pbuf_free>
      inseg.p = NULL;
 80084d4:	4b21      	ldr	r3, [pc, #132]	; (800855c <tcp_input+0x7fc>)
 80084d6:	2200      	movs	r2, #0
 80084d8:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80084da:	e036      	b.n	800854a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80084dc:	4b20      	ldr	r3, [pc, #128]	; (8008560 <tcp_input+0x800>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	899b      	ldrh	r3, [r3, #12]
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	4618      	mov	r0, r3
 80084e6:	f7fc fab5 	bl	8004a54 <lwip_htons>
 80084ea:	4603      	mov	r3, r0
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	f003 0304 	and.w	r3, r3, #4
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d118      	bne.n	8008528 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80084f6:	4b1b      	ldr	r3, [pc, #108]	; (8008564 <tcp_input+0x804>)
 80084f8:	6819      	ldr	r1, [r3, #0]
 80084fa:	4b1b      	ldr	r3, [pc, #108]	; (8008568 <tcp_input+0x808>)
 80084fc:	881b      	ldrh	r3, [r3, #0]
 80084fe:	461a      	mov	r2, r3
 8008500:	4b1a      	ldr	r3, [pc, #104]	; (800856c <tcp_input+0x80c>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008506:	4b16      	ldr	r3, [pc, #88]	; (8008560 <tcp_input+0x800>)
 8008508:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800850a:	885b      	ldrh	r3, [r3, #2]
 800850c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800850e:	4a14      	ldr	r2, [pc, #80]	; (8008560 <tcp_input+0x800>)
 8008510:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008512:	8812      	ldrh	r2, [r2, #0]
 8008514:	b292      	uxth	r2, r2
 8008516:	9202      	str	r2, [sp, #8]
 8008518:	9301      	str	r3, [sp, #4]
 800851a:	4b15      	ldr	r3, [pc, #84]	; (8008570 <tcp_input+0x810>)
 800851c:	9300      	str	r3, [sp, #0]
 800851e:	4b15      	ldr	r3, [pc, #84]	; (8008574 <tcp_input+0x814>)
 8008520:	4602      	mov	r2, r0
 8008522:	2000      	movs	r0, #0
 8008524:	f003 f81c 	bl	800b560 <tcp_rst>
    pbuf_free(p);
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f7fd fdf1 	bl	8006110 <pbuf_free>
  return;
 800852e:	e00c      	b.n	800854a <tcp_input+0x7ea>
    goto dropped;
 8008530:	bf00      	nop
 8008532:	e006      	b.n	8008542 <tcp_input+0x7e2>
    goto dropped;
 8008534:	bf00      	nop
 8008536:	e004      	b.n	8008542 <tcp_input+0x7e2>
    goto dropped;
 8008538:	bf00      	nop
 800853a:	e002      	b.n	8008542 <tcp_input+0x7e2>
      goto dropped;
 800853c:	bf00      	nop
 800853e:	e000      	b.n	8008542 <tcp_input+0x7e2>
      goto dropped;
 8008540:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f7fd fde4 	bl	8006110 <pbuf_free>
 8008548:	e000      	b.n	800854c <tcp_input+0x7ec>
  return;
 800854a:	bf00      	nop
}
 800854c:	3724      	adds	r7, #36	; 0x24
 800854e:	46bd      	mov	sp, r7
 8008550:	bd90      	pop	{r4, r7, pc}
 8008552:	bf00      	nop
 8008554:	2000a500 	.word	0x2000a500
 8008558:	2000a4fc 	.word	0x2000a4fc
 800855c:	2000a4cc 	.word	0x2000a4cc
 8008560:	2000a4dc 	.word	0x2000a4dc
 8008564:	2000a4f0 	.word	0x2000a4f0
 8008568:	2000a4f6 	.word	0x2000a4f6
 800856c:	2000a4ec 	.word	0x2000a4ec
 8008570:	20004d94 	.word	0x20004d94
 8008574:	20004d98 	.word	0x20004d98

08008578 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b082      	sub	sp, #8
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d106      	bne.n	8008594 <tcp_input_delayed_close+0x1c>
 8008586:	4b17      	ldr	r3, [pc, #92]	; (80085e4 <tcp_input_delayed_close+0x6c>)
 8008588:	f240 225a 	movw	r2, #602	; 0x25a
 800858c:	4916      	ldr	r1, [pc, #88]	; (80085e8 <tcp_input_delayed_close+0x70>)
 800858e:	4817      	ldr	r0, [pc, #92]	; (80085ec <tcp_input_delayed_close+0x74>)
 8008590:	f006 f9d8 	bl	800e944 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8008594:	4b16      	ldr	r3, [pc, #88]	; (80085f0 <tcp_input_delayed_close+0x78>)
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	f003 0310 	and.w	r3, r3, #16
 800859c:	2b00      	cmp	r3, #0
 800859e:	d01c      	beq.n	80085da <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	8b5b      	ldrh	r3, [r3, #26]
 80085a4:	f003 0310 	and.w	r3, r3, #16
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d10d      	bne.n	80085c8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d008      	beq.n	80085c8 <tcp_input_delayed_close+0x50>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	6912      	ldr	r2, [r2, #16]
 80085c0:	f06f 010e 	mvn.w	r1, #14
 80085c4:	4610      	mov	r0, r2
 80085c6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80085c8:	6879      	ldr	r1, [r7, #4]
 80085ca:	480a      	ldr	r0, [pc, #40]	; (80085f4 <tcp_input_delayed_close+0x7c>)
 80085cc:	f7ff fa50 	bl	8007a70 <tcp_pcb_remove>
    tcp_free(pcb);
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f7fe f83d 	bl	8006650 <tcp_free>
    return 1;
 80085d6:	2301      	movs	r3, #1
 80085d8:	e000      	b.n	80085dc <tcp_input_delayed_close+0x64>
  }
  return 0;
 80085da:	2300      	movs	r3, #0
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3708      	adds	r7, #8
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}
 80085e4:	080109d8 	.word	0x080109d8
 80085e8:	08010ba8 	.word	0x08010ba8
 80085ec:	08010a24 	.word	0x08010a24
 80085f0:	2000a4f9 	.word	0x2000a4f9
 80085f4:	2000a4c0 	.word	0x2000a4c0

080085f8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80085f8:	b590      	push	{r4, r7, lr}
 80085fa:	b08b      	sub	sp, #44	; 0x2c
 80085fc:	af04      	add	r7, sp, #16
 80085fe:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8008600:	4b6f      	ldr	r3, [pc, #444]	; (80087c0 <tcp_listen_input+0x1c8>)
 8008602:	781b      	ldrb	r3, [r3, #0]
 8008604:	f003 0304 	and.w	r3, r3, #4
 8008608:	2b00      	cmp	r3, #0
 800860a:	f040 80d2 	bne.w	80087b2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d106      	bne.n	8008622 <tcp_listen_input+0x2a>
 8008614:	4b6b      	ldr	r3, [pc, #428]	; (80087c4 <tcp_listen_input+0x1cc>)
 8008616:	f240 2281 	movw	r2, #641	; 0x281
 800861a:	496b      	ldr	r1, [pc, #428]	; (80087c8 <tcp_listen_input+0x1d0>)
 800861c:	486b      	ldr	r0, [pc, #428]	; (80087cc <tcp_listen_input+0x1d4>)
 800861e:	f006 f991 	bl	800e944 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8008622:	4b67      	ldr	r3, [pc, #412]	; (80087c0 <tcp_listen_input+0x1c8>)
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	f003 0310 	and.w	r3, r3, #16
 800862a:	2b00      	cmp	r3, #0
 800862c:	d019      	beq.n	8008662 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800862e:	4b68      	ldr	r3, [pc, #416]	; (80087d0 <tcp_listen_input+0x1d8>)
 8008630:	6819      	ldr	r1, [r3, #0]
 8008632:	4b68      	ldr	r3, [pc, #416]	; (80087d4 <tcp_listen_input+0x1dc>)
 8008634:	881b      	ldrh	r3, [r3, #0]
 8008636:	461a      	mov	r2, r3
 8008638:	4b67      	ldr	r3, [pc, #412]	; (80087d8 <tcp_listen_input+0x1e0>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800863e:	4b67      	ldr	r3, [pc, #412]	; (80087dc <tcp_listen_input+0x1e4>)
 8008640:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008642:	885b      	ldrh	r3, [r3, #2]
 8008644:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008646:	4a65      	ldr	r2, [pc, #404]	; (80087dc <tcp_listen_input+0x1e4>)
 8008648:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800864a:	8812      	ldrh	r2, [r2, #0]
 800864c:	b292      	uxth	r2, r2
 800864e:	9202      	str	r2, [sp, #8]
 8008650:	9301      	str	r3, [sp, #4]
 8008652:	4b63      	ldr	r3, [pc, #396]	; (80087e0 <tcp_listen_input+0x1e8>)
 8008654:	9300      	str	r3, [sp, #0]
 8008656:	4b63      	ldr	r3, [pc, #396]	; (80087e4 <tcp_listen_input+0x1ec>)
 8008658:	4602      	mov	r2, r0
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f002 ff80 	bl	800b560 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8008660:	e0a9      	b.n	80087b6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8008662:	4b57      	ldr	r3, [pc, #348]	; (80087c0 <tcp_listen_input+0x1c8>)
 8008664:	781b      	ldrb	r3, [r3, #0]
 8008666:	f003 0302 	and.w	r3, r3, #2
 800866a:	2b00      	cmp	r3, #0
 800866c:	f000 80a3 	beq.w	80087b6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	7d5b      	ldrb	r3, [r3, #21]
 8008674:	4618      	mov	r0, r3
 8008676:	f7ff f927 	bl	80078c8 <tcp_alloc>
 800867a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d111      	bne.n	80086a6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	699b      	ldr	r3, [r3, #24]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d00a      	beq.n	80086a0 <tcp_listen_input+0xa8>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	699b      	ldr	r3, [r3, #24]
 800868e:	687a      	ldr	r2, [r7, #4]
 8008690:	6910      	ldr	r0, [r2, #16]
 8008692:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008696:	2100      	movs	r1, #0
 8008698:	4798      	blx	r3
 800869a:	4603      	mov	r3, r0
 800869c:	73bb      	strb	r3, [r7, #14]
      return;
 800869e:	e08b      	b.n	80087b8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80086a0:	23f0      	movs	r3, #240	; 0xf0
 80086a2:	73bb      	strb	r3, [r7, #14]
      return;
 80086a4:	e088      	b.n	80087b8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80086a6:	4b50      	ldr	r3, [pc, #320]	; (80087e8 <tcp_listen_input+0x1f0>)
 80086a8:	695a      	ldr	r2, [r3, #20]
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80086ae:	4b4e      	ldr	r3, [pc, #312]	; (80087e8 <tcp_listen_input+0x1f0>)
 80086b0:	691a      	ldr	r2, [r3, #16]
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	8ada      	ldrh	r2, [r3, #22]
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80086be:	4b47      	ldr	r3, [pc, #284]	; (80087dc <tcp_listen_input+0x1e4>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	881b      	ldrh	r3, [r3, #0]
 80086c4:	b29a      	uxth	r2, r3
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	2203      	movs	r2, #3
 80086ce:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80086d0:	4b41      	ldr	r3, [pc, #260]	; (80087d8 <tcp_listen_input+0x1e0>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	1c5a      	adds	r2, r3, #1
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80086e2:	6978      	ldr	r0, [r7, #20]
 80086e4:	f7ff fa58 	bl	8007b98 <tcp_next_iss>
 80086e8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	693a      	ldr	r2, [r7, #16]
 80086ee:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	693a      	ldr	r2, [r7, #16]
 80086f4:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	693a      	ldr	r2, [r7, #16]
 80086fa:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	693a      	ldr	r2, [r7, #16]
 8008700:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008702:	4b35      	ldr	r3, [pc, #212]	; (80087d8 <tcp_listen_input+0x1e0>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	1e5a      	subs	r2, r3, #1
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	691a      	ldr	r2, [r3, #16]
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	7a5b      	ldrb	r3, [r3, #9]
 800871e:	f003 030c 	and.w	r3, r3, #12
 8008722:	b2da      	uxtb	r2, r3
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	7a1a      	ldrb	r2, [r3, #8]
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8008730:	4b2e      	ldr	r3, [pc, #184]	; (80087ec <tcp_listen_input+0x1f4>)
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	60da      	str	r2, [r3, #12]
 8008738:	4a2c      	ldr	r2, [pc, #176]	; (80087ec <tcp_listen_input+0x1f4>)
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	6013      	str	r3, [r2, #0]
 800873e:	f003 f8d1 	bl	800b8e4 <tcp_timer_needed>
 8008742:	4b2b      	ldr	r3, [pc, #172]	; (80087f0 <tcp_listen_input+0x1f8>)
 8008744:	2201      	movs	r2, #1
 8008746:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8008748:	6978      	ldr	r0, [r7, #20]
 800874a:	f001 fd8f 	bl	800a26c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800874e:	4b23      	ldr	r3, [pc, #140]	; (80087dc <tcp_listen_input+0x1e4>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	89db      	ldrh	r3, [r3, #14]
 8008754:	b29a      	uxth	r2, r3
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	3304      	adds	r3, #4
 8008770:	4618      	mov	r0, r3
 8008772:	f004 fdfb 	bl	800d36c <ip4_route>
 8008776:	4601      	mov	r1, r0
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	3304      	adds	r3, #4
 800877c:	461a      	mov	r2, r3
 800877e:	4620      	mov	r0, r4
 8008780:	f7ff fa30 	bl	8007be4 <tcp_eff_send_mss_netif>
 8008784:	4603      	mov	r3, r0
 8008786:	461a      	mov	r2, r3
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800878c:	2112      	movs	r1, #18
 800878e:	6978      	ldr	r0, [r7, #20]
 8008790:	f002 f844 	bl	800a81c <tcp_enqueue_flags>
 8008794:	4603      	mov	r3, r0
 8008796:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8008798:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d004      	beq.n	80087aa <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80087a0:	2100      	movs	r1, #0
 80087a2:	6978      	ldr	r0, [r7, #20]
 80087a4:	f7fe f97e 	bl	8006aa4 <tcp_abandon>
      return;
 80087a8:	e006      	b.n	80087b8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80087aa:	6978      	ldr	r0, [r7, #20]
 80087ac:	f002 f924 	bl	800a9f8 <tcp_output>
  return;
 80087b0:	e001      	b.n	80087b6 <tcp_listen_input+0x1be>
    return;
 80087b2:	bf00      	nop
 80087b4:	e000      	b.n	80087b8 <tcp_listen_input+0x1c0>
  return;
 80087b6:	bf00      	nop
}
 80087b8:	371c      	adds	r7, #28
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd90      	pop	{r4, r7, pc}
 80087be:	bf00      	nop
 80087c0:	2000a4f8 	.word	0x2000a4f8
 80087c4:	080109d8 	.word	0x080109d8
 80087c8:	08010bd0 	.word	0x08010bd0
 80087cc:	08010a24 	.word	0x08010a24
 80087d0:	2000a4f0 	.word	0x2000a4f0
 80087d4:	2000a4f6 	.word	0x2000a4f6
 80087d8:	2000a4ec 	.word	0x2000a4ec
 80087dc:	2000a4dc 	.word	0x2000a4dc
 80087e0:	20004d94 	.word	0x20004d94
 80087e4:	20004d98 	.word	0x20004d98
 80087e8:	20004d84 	.word	0x20004d84
 80087ec:	2000a4c0 	.word	0x2000a4c0
 80087f0:	2000a4c8 	.word	0x2000a4c8

080087f4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b086      	sub	sp, #24
 80087f8:	af04      	add	r7, sp, #16
 80087fa:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80087fc:	4b2f      	ldr	r3, [pc, #188]	; (80088bc <tcp_timewait_input+0xc8>)
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	f003 0304 	and.w	r3, r3, #4
 8008804:	2b00      	cmp	r3, #0
 8008806:	d153      	bne.n	80088b0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d106      	bne.n	800881c <tcp_timewait_input+0x28>
 800880e:	4b2c      	ldr	r3, [pc, #176]	; (80088c0 <tcp_timewait_input+0xcc>)
 8008810:	f240 22ee 	movw	r2, #750	; 0x2ee
 8008814:	492b      	ldr	r1, [pc, #172]	; (80088c4 <tcp_timewait_input+0xd0>)
 8008816:	482c      	ldr	r0, [pc, #176]	; (80088c8 <tcp_timewait_input+0xd4>)
 8008818:	f006 f894 	bl	800e944 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800881c:	4b27      	ldr	r3, [pc, #156]	; (80088bc <tcp_timewait_input+0xc8>)
 800881e:	781b      	ldrb	r3, [r3, #0]
 8008820:	f003 0302 	and.w	r3, r3, #2
 8008824:	2b00      	cmp	r3, #0
 8008826:	d02a      	beq.n	800887e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8008828:	4b28      	ldr	r3, [pc, #160]	; (80088cc <tcp_timewait_input+0xd8>)
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008830:	1ad3      	subs	r3, r2, r3
 8008832:	2b00      	cmp	r3, #0
 8008834:	db2d      	blt.n	8008892 <tcp_timewait_input+0x9e>
 8008836:	4b25      	ldr	r3, [pc, #148]	; (80088cc <tcp_timewait_input+0xd8>)
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800883e:	6879      	ldr	r1, [r7, #4]
 8008840:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008842:	440b      	add	r3, r1
 8008844:	1ad3      	subs	r3, r2, r3
 8008846:	2b00      	cmp	r3, #0
 8008848:	dc23      	bgt.n	8008892 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800884a:	4b21      	ldr	r3, [pc, #132]	; (80088d0 <tcp_timewait_input+0xdc>)
 800884c:	6819      	ldr	r1, [r3, #0]
 800884e:	4b21      	ldr	r3, [pc, #132]	; (80088d4 <tcp_timewait_input+0xe0>)
 8008850:	881b      	ldrh	r3, [r3, #0]
 8008852:	461a      	mov	r2, r3
 8008854:	4b1d      	ldr	r3, [pc, #116]	; (80088cc <tcp_timewait_input+0xd8>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800885a:	4b1f      	ldr	r3, [pc, #124]	; (80088d8 <tcp_timewait_input+0xe4>)
 800885c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800885e:	885b      	ldrh	r3, [r3, #2]
 8008860:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008862:	4a1d      	ldr	r2, [pc, #116]	; (80088d8 <tcp_timewait_input+0xe4>)
 8008864:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008866:	8812      	ldrh	r2, [r2, #0]
 8008868:	b292      	uxth	r2, r2
 800886a:	9202      	str	r2, [sp, #8]
 800886c:	9301      	str	r3, [sp, #4]
 800886e:	4b1b      	ldr	r3, [pc, #108]	; (80088dc <tcp_timewait_input+0xe8>)
 8008870:	9300      	str	r3, [sp, #0]
 8008872:	4b1b      	ldr	r3, [pc, #108]	; (80088e0 <tcp_timewait_input+0xec>)
 8008874:	4602      	mov	r2, r0
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f002 fe72 	bl	800b560 <tcp_rst>
      return;
 800887c:	e01b      	b.n	80088b6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800887e:	4b0f      	ldr	r3, [pc, #60]	; (80088bc <tcp_timewait_input+0xc8>)
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	f003 0301 	and.w	r3, r3, #1
 8008886:	2b00      	cmp	r3, #0
 8008888:	d003      	beq.n	8008892 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800888a:	4b16      	ldr	r3, [pc, #88]	; (80088e4 <tcp_timewait_input+0xf0>)
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8008892:	4b10      	ldr	r3, [pc, #64]	; (80088d4 <tcp_timewait_input+0xe0>)
 8008894:	881b      	ldrh	r3, [r3, #0]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d00c      	beq.n	80088b4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	8b5b      	ldrh	r3, [r3, #26]
 800889e:	f043 0302 	orr.w	r3, r3, #2
 80088a2:	b29a      	uxth	r2, r3
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f002 f8a5 	bl	800a9f8 <tcp_output>
  }
  return;
 80088ae:	e001      	b.n	80088b4 <tcp_timewait_input+0xc0>
    return;
 80088b0:	bf00      	nop
 80088b2:	e000      	b.n	80088b6 <tcp_timewait_input+0xc2>
  return;
 80088b4:	bf00      	nop
}
 80088b6:	3708      	adds	r7, #8
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}
 80088bc:	2000a4f8 	.word	0x2000a4f8
 80088c0:	080109d8 	.word	0x080109d8
 80088c4:	08010bf0 	.word	0x08010bf0
 80088c8:	08010a24 	.word	0x08010a24
 80088cc:	2000a4ec 	.word	0x2000a4ec
 80088d0:	2000a4f0 	.word	0x2000a4f0
 80088d4:	2000a4f6 	.word	0x2000a4f6
 80088d8:	2000a4dc 	.word	0x2000a4dc
 80088dc:	20004d94 	.word	0x20004d94
 80088e0:	20004d98 	.word	0x20004d98
 80088e4:	2000a4b4 	.word	0x2000a4b4

080088e8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80088e8:	b590      	push	{r4, r7, lr}
 80088ea:	b08d      	sub	sp, #52	; 0x34
 80088ec:	af04      	add	r7, sp, #16
 80088ee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80088f0:	2300      	movs	r3, #0
 80088f2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80088f4:	2300      	movs	r3, #0
 80088f6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d106      	bne.n	800890c <tcp_process+0x24>
 80088fe:	4b9d      	ldr	r3, [pc, #628]	; (8008b74 <tcp_process+0x28c>)
 8008900:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8008904:	499c      	ldr	r1, [pc, #624]	; (8008b78 <tcp_process+0x290>)
 8008906:	489d      	ldr	r0, [pc, #628]	; (8008b7c <tcp_process+0x294>)
 8008908:	f006 f81c 	bl	800e944 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800890c:	4b9c      	ldr	r3, [pc, #624]	; (8008b80 <tcp_process+0x298>)
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	f003 0304 	and.w	r3, r3, #4
 8008914:	2b00      	cmp	r3, #0
 8008916:	d04e      	beq.n	80089b6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	7d1b      	ldrb	r3, [r3, #20]
 800891c:	2b02      	cmp	r3, #2
 800891e:	d108      	bne.n	8008932 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008924:	4b97      	ldr	r3, [pc, #604]	; (8008b84 <tcp_process+0x29c>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	429a      	cmp	r2, r3
 800892a:	d123      	bne.n	8008974 <tcp_process+0x8c>
        acceptable = 1;
 800892c:	2301      	movs	r3, #1
 800892e:	76fb      	strb	r3, [r7, #27]
 8008930:	e020      	b.n	8008974 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008936:	4b94      	ldr	r3, [pc, #592]	; (8008b88 <tcp_process+0x2a0>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	429a      	cmp	r2, r3
 800893c:	d102      	bne.n	8008944 <tcp_process+0x5c>
        acceptable = 1;
 800893e:	2301      	movs	r3, #1
 8008940:	76fb      	strb	r3, [r7, #27]
 8008942:	e017      	b.n	8008974 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008944:	4b90      	ldr	r3, [pc, #576]	; (8008b88 <tcp_process+0x2a0>)
 8008946:	681a      	ldr	r2, [r3, #0]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894c:	1ad3      	subs	r3, r2, r3
 800894e:	2b00      	cmp	r3, #0
 8008950:	db10      	blt.n	8008974 <tcp_process+0x8c>
 8008952:	4b8d      	ldr	r3, [pc, #564]	; (8008b88 <tcp_process+0x2a0>)
 8008954:	681a      	ldr	r2, [r3, #0]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895a:	6879      	ldr	r1, [r7, #4]
 800895c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800895e:	440b      	add	r3, r1
 8008960:	1ad3      	subs	r3, r2, r3
 8008962:	2b00      	cmp	r3, #0
 8008964:	dc06      	bgt.n	8008974 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	8b5b      	ldrh	r3, [r3, #26]
 800896a:	f043 0302 	orr.w	r3, r3, #2
 800896e:	b29a      	uxth	r2, r3
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8008974:	7efb      	ldrb	r3, [r7, #27]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d01b      	beq.n	80089b2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	7d1b      	ldrb	r3, [r3, #20]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d106      	bne.n	8008990 <tcp_process+0xa8>
 8008982:	4b7c      	ldr	r3, [pc, #496]	; (8008b74 <tcp_process+0x28c>)
 8008984:	f44f 724e 	mov.w	r2, #824	; 0x338
 8008988:	4980      	ldr	r1, [pc, #512]	; (8008b8c <tcp_process+0x2a4>)
 800898a:	487c      	ldr	r0, [pc, #496]	; (8008b7c <tcp_process+0x294>)
 800898c:	f005 ffda 	bl	800e944 <iprintf>
      recv_flags |= TF_RESET;
 8008990:	4b7f      	ldr	r3, [pc, #508]	; (8008b90 <tcp_process+0x2a8>)
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	f043 0308 	orr.w	r3, r3, #8
 8008998:	b2da      	uxtb	r2, r3
 800899a:	4b7d      	ldr	r3, [pc, #500]	; (8008b90 <tcp_process+0x2a8>)
 800899c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	8b5b      	ldrh	r3, [r3, #26]
 80089a2:	f023 0301 	bic.w	r3, r3, #1
 80089a6:	b29a      	uxth	r2, r3
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80089ac:	f06f 030d 	mvn.w	r3, #13
 80089b0:	e37a      	b.n	80090a8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80089b2:	2300      	movs	r3, #0
 80089b4:	e378      	b.n	80090a8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80089b6:	4b72      	ldr	r3, [pc, #456]	; (8008b80 <tcp_process+0x298>)
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	f003 0302 	and.w	r3, r3, #2
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d010      	beq.n	80089e4 <tcp_process+0xfc>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	7d1b      	ldrb	r3, [r3, #20]
 80089c6:	2b02      	cmp	r3, #2
 80089c8:	d00c      	beq.n	80089e4 <tcp_process+0xfc>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	7d1b      	ldrb	r3, [r3, #20]
 80089ce:	2b03      	cmp	r3, #3
 80089d0:	d008      	beq.n	80089e4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	8b5b      	ldrh	r3, [r3, #26]
 80089d6:	f043 0302 	orr.w	r3, r3, #2
 80089da:	b29a      	uxth	r2, r3
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80089e0:	2300      	movs	r3, #0
 80089e2:	e361      	b.n	80090a8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	8b5b      	ldrh	r3, [r3, #26]
 80089e8:	f003 0310 	and.w	r3, r3, #16
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d103      	bne.n	80089f8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80089f0:	4b68      	ldr	r3, [pc, #416]	; (8008b94 <tcp_process+0x2ac>)
 80089f2:	681a      	ldr	r2, [r3, #0]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2200      	movs	r2, #0
 80089fc:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2200      	movs	r2, #0
 8008a04:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f001 fc2f 	bl	800a26c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	7d1b      	ldrb	r3, [r3, #20]
 8008a12:	3b02      	subs	r3, #2
 8008a14:	2b07      	cmp	r3, #7
 8008a16:	f200 8337 	bhi.w	8009088 <tcp_process+0x7a0>
 8008a1a:	a201      	add	r2, pc, #4	; (adr r2, 8008a20 <tcp_process+0x138>)
 8008a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a20:	08008a41 	.word	0x08008a41
 8008a24:	08008c71 	.word	0x08008c71
 8008a28:	08008de9 	.word	0x08008de9
 8008a2c:	08008e13 	.word	0x08008e13
 8008a30:	08008f37 	.word	0x08008f37
 8008a34:	08008de9 	.word	0x08008de9
 8008a38:	08008fc3 	.word	0x08008fc3
 8008a3c:	08009053 	.word	0x08009053
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8008a40:	4b4f      	ldr	r3, [pc, #316]	; (8008b80 <tcp_process+0x298>)
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	f003 0310 	and.w	r3, r3, #16
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	f000 80e4 	beq.w	8008c16 <tcp_process+0x32e>
 8008a4e:	4b4c      	ldr	r3, [pc, #304]	; (8008b80 <tcp_process+0x298>)
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	f003 0302 	and.w	r3, r3, #2
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	f000 80dd 	beq.w	8008c16 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a60:	1c5a      	adds	r2, r3, #1
 8008a62:	4b48      	ldr	r3, [pc, #288]	; (8008b84 <tcp_process+0x29c>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	429a      	cmp	r2, r3
 8008a68:	f040 80d5 	bne.w	8008c16 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8008a6c:	4b46      	ldr	r3, [pc, #280]	; (8008b88 <tcp_process+0x2a0>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	1c5a      	adds	r2, r3, #1
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8008a7e:	4b41      	ldr	r3, [pc, #260]	; (8008b84 <tcp_process+0x29c>)
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8008a86:	4b44      	ldr	r3, [pc, #272]	; (8008b98 <tcp_process+0x2b0>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	89db      	ldrh	r3, [r3, #14]
 8008a8c:	b29a      	uxth	r2, r3
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008aa0:	4b39      	ldr	r3, [pc, #228]	; (8008b88 <tcp_process+0x2a0>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	1e5a      	subs	r2, r3, #1
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2204      	movs	r2, #4
 8008aae:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	3304      	adds	r3, #4
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f004 fc57 	bl	800d36c <ip4_route>
 8008abe:	4601      	mov	r1, r0
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	3304      	adds	r3, #4
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	f7ff f88c 	bl	8007be4 <tcp_eff_send_mss_netif>
 8008acc:	4603      	mov	r3, r0
 8008ace:	461a      	mov	r2, r3
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008ad8:	009a      	lsls	r2, r3, #2
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008ade:	005b      	lsls	r3, r3, #1
 8008ae0:	f241 111c 	movw	r1, #4380	; 0x111c
 8008ae4:	428b      	cmp	r3, r1
 8008ae6:	bf38      	it	cc
 8008ae8:	460b      	movcc	r3, r1
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d204      	bcs.n	8008af8 <tcp_process+0x210>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008af2:	009b      	lsls	r3, r3, #2
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	e00d      	b.n	8008b14 <tcp_process+0x22c>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008afc:	005b      	lsls	r3, r3, #1
 8008afe:	f241 121c 	movw	r2, #4380	; 0x111c
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d904      	bls.n	8008b10 <tcp_process+0x228>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008b0a:	005b      	lsls	r3, r3, #1
 8008b0c:	b29b      	uxth	r3, r3
 8008b0e:	e001      	b.n	8008b14 <tcp_process+0x22c>
 8008b10:	f241 131c 	movw	r3, #4380	; 0x111c
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d106      	bne.n	8008b32 <tcp_process+0x24a>
 8008b24:	4b13      	ldr	r3, [pc, #76]	; (8008b74 <tcp_process+0x28c>)
 8008b26:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8008b2a:	491c      	ldr	r1, [pc, #112]	; (8008b9c <tcp_process+0x2b4>)
 8008b2c:	4813      	ldr	r0, [pc, #76]	; (8008b7c <tcp_process+0x294>)
 8008b2e:	f005 ff09 	bl	800e944 <iprintf>
        --pcb->snd_queuelen;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008b38:	3b01      	subs	r3, #1
 8008b3a:	b29a      	uxth	r2, r3
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b46:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d12a      	bne.n	8008ba4 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b52:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8008b54:	69fb      	ldr	r3, [r7, #28]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d106      	bne.n	8008b68 <tcp_process+0x280>
 8008b5a:	4b06      	ldr	r3, [pc, #24]	; (8008b74 <tcp_process+0x28c>)
 8008b5c:	f44f 725d 	mov.w	r2, #884	; 0x374
 8008b60:	490f      	ldr	r1, [pc, #60]	; (8008ba0 <tcp_process+0x2b8>)
 8008b62:	4806      	ldr	r0, [pc, #24]	; (8008b7c <tcp_process+0x294>)
 8008b64:	f005 feee 	bl	800e944 <iprintf>
          pcb->unsent = rseg->next;
 8008b68:	69fb      	ldr	r3, [r7, #28]
 8008b6a:	681a      	ldr	r2, [r3, #0]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	66da      	str	r2, [r3, #108]	; 0x6c
 8008b70:	e01c      	b.n	8008bac <tcp_process+0x2c4>
 8008b72:	bf00      	nop
 8008b74:	080109d8 	.word	0x080109d8
 8008b78:	08010c10 	.word	0x08010c10
 8008b7c:	08010a24 	.word	0x08010a24
 8008b80:	2000a4f8 	.word	0x2000a4f8
 8008b84:	2000a4f0 	.word	0x2000a4f0
 8008b88:	2000a4ec 	.word	0x2000a4ec
 8008b8c:	08010c2c 	.word	0x08010c2c
 8008b90:	2000a4f9 	.word	0x2000a4f9
 8008b94:	2000a4b4 	.word	0x2000a4b4
 8008b98:	2000a4dc 	.word	0x2000a4dc
 8008b9c:	08010c4c 	.word	0x08010c4c
 8008ba0:	08010c64 	.word	0x08010c64
        } else {
          pcb->unacked = rseg->next;
 8008ba4:	69fb      	ldr	r3, [r7, #28]
 8008ba6:	681a      	ldr	r2, [r3, #0]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8008bac:	69f8      	ldr	r0, [r7, #28]
 8008bae:	f7fe fd22 	bl	80075f6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d104      	bne.n	8008bc4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008bc0:	861a      	strh	r2, [r3, #48]	; 0x30
 8008bc2:	e006      	b.n	8008bd2 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d00a      	beq.n	8008bf2 <tcp_process+0x30a>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008be2:	687a      	ldr	r2, [r7, #4]
 8008be4:	6910      	ldr	r0, [r2, #16]
 8008be6:	2200      	movs	r2, #0
 8008be8:	6879      	ldr	r1, [r7, #4]
 8008bea:	4798      	blx	r3
 8008bec:	4603      	mov	r3, r0
 8008bee:	76bb      	strb	r3, [r7, #26]
 8008bf0:	e001      	b.n	8008bf6 <tcp_process+0x30e>
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8008bf6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008bfa:	f113 0f0d 	cmn.w	r3, #13
 8008bfe:	d102      	bne.n	8008c06 <tcp_process+0x31e>
          return ERR_ABRT;
 8008c00:	f06f 030c 	mvn.w	r3, #12
 8008c04:	e250      	b.n	80090a8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	8b5b      	ldrh	r3, [r3, #26]
 8008c0a:	f043 0302 	orr.w	r3, r3, #2
 8008c0e:	b29a      	uxth	r2, r3
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8008c14:	e23a      	b.n	800908c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8008c16:	4b98      	ldr	r3, [pc, #608]	; (8008e78 <tcp_process+0x590>)
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	f003 0310 	and.w	r3, r3, #16
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	f000 8234 	beq.w	800908c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c24:	4b95      	ldr	r3, [pc, #596]	; (8008e7c <tcp_process+0x594>)
 8008c26:	6819      	ldr	r1, [r3, #0]
 8008c28:	4b95      	ldr	r3, [pc, #596]	; (8008e80 <tcp_process+0x598>)
 8008c2a:	881b      	ldrh	r3, [r3, #0]
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	4b95      	ldr	r3, [pc, #596]	; (8008e84 <tcp_process+0x59c>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008c34:	4b94      	ldr	r3, [pc, #592]	; (8008e88 <tcp_process+0x5a0>)
 8008c36:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c38:	885b      	ldrh	r3, [r3, #2]
 8008c3a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008c3c:	4a92      	ldr	r2, [pc, #584]	; (8008e88 <tcp_process+0x5a0>)
 8008c3e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c40:	8812      	ldrh	r2, [r2, #0]
 8008c42:	b292      	uxth	r2, r2
 8008c44:	9202      	str	r2, [sp, #8]
 8008c46:	9301      	str	r3, [sp, #4]
 8008c48:	4b90      	ldr	r3, [pc, #576]	; (8008e8c <tcp_process+0x5a4>)
 8008c4a:	9300      	str	r3, [sp, #0]
 8008c4c:	4b90      	ldr	r3, [pc, #576]	; (8008e90 <tcp_process+0x5a8>)
 8008c4e:	4602      	mov	r2, r0
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f002 fc85 	bl	800b560 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008c5c:	2b05      	cmp	r3, #5
 8008c5e:	f200 8215 	bhi.w	800908c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2200      	movs	r2, #0
 8008c66:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f002 fa51 	bl	800b110 <tcp_rexmit_rto>
      break;
 8008c6e:	e20d      	b.n	800908c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8008c70:	4b81      	ldr	r3, [pc, #516]	; (8008e78 <tcp_process+0x590>)
 8008c72:	781b      	ldrb	r3, [r3, #0]
 8008c74:	f003 0310 	and.w	r3, r3, #16
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	f000 80a1 	beq.w	8008dc0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008c7e:	4b7f      	ldr	r3, [pc, #508]	; (8008e7c <tcp_process+0x594>)
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c86:	1ad3      	subs	r3, r2, r3
 8008c88:	3b01      	subs	r3, #1
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	db7e      	blt.n	8008d8c <tcp_process+0x4a4>
 8008c8e:	4b7b      	ldr	r3, [pc, #492]	; (8008e7c <tcp_process+0x594>)
 8008c90:	681a      	ldr	r2, [r3, #0]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c96:	1ad3      	subs	r3, r2, r3
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	dc77      	bgt.n	8008d8c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2204      	movs	r2, #4
 8008ca0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d102      	bne.n	8008cb0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8008caa:	23fa      	movs	r3, #250	; 0xfa
 8008cac:	76bb      	strb	r3, [r7, #26]
 8008cae:	e01d      	b.n	8008cec <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008cb4:	699b      	ldr	r3, [r3, #24]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d106      	bne.n	8008cc8 <tcp_process+0x3e0>
 8008cba:	4b76      	ldr	r3, [pc, #472]	; (8008e94 <tcp_process+0x5ac>)
 8008cbc:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8008cc0:	4975      	ldr	r1, [pc, #468]	; (8008e98 <tcp_process+0x5b0>)
 8008cc2:	4876      	ldr	r0, [pc, #472]	; (8008e9c <tcp_process+0x5b4>)
 8008cc4:	f005 fe3e 	bl	800e944 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ccc:	699b      	ldr	r3, [r3, #24]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d00a      	beq.n	8008ce8 <tcp_process+0x400>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008cd6:	699b      	ldr	r3, [r3, #24]
 8008cd8:	687a      	ldr	r2, [r7, #4]
 8008cda:	6910      	ldr	r0, [r2, #16]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	6879      	ldr	r1, [r7, #4]
 8008ce0:	4798      	blx	r3
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	76bb      	strb	r3, [r7, #26]
 8008ce6:	e001      	b.n	8008cec <tcp_process+0x404>
 8008ce8:	23f0      	movs	r3, #240	; 0xf0
 8008cea:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8008cec:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d00a      	beq.n	8008d0a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8008cf4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008cf8:	f113 0f0d 	cmn.w	r3, #13
 8008cfc:	d002      	beq.n	8008d04 <tcp_process+0x41c>
              tcp_abort(pcb);
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f7fd ff8e 	bl	8006c20 <tcp_abort>
            }
            return ERR_ABRT;
 8008d04:	f06f 030c 	mvn.w	r3, #12
 8008d08:	e1ce      	b.n	80090a8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 fae0 	bl	80092d0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8008d10:	4b63      	ldr	r3, [pc, #396]	; (8008ea0 <tcp_process+0x5b8>)
 8008d12:	881b      	ldrh	r3, [r3, #0]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d005      	beq.n	8008d24 <tcp_process+0x43c>
            recv_acked--;
 8008d18:	4b61      	ldr	r3, [pc, #388]	; (8008ea0 <tcp_process+0x5b8>)
 8008d1a:	881b      	ldrh	r3, [r3, #0]
 8008d1c:	3b01      	subs	r3, #1
 8008d1e:	b29a      	uxth	r2, r3
 8008d20:	4b5f      	ldr	r3, [pc, #380]	; (8008ea0 <tcp_process+0x5b8>)
 8008d22:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008d28:	009a      	lsls	r2, r3, #2
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008d2e:	005b      	lsls	r3, r3, #1
 8008d30:	f241 111c 	movw	r1, #4380	; 0x111c
 8008d34:	428b      	cmp	r3, r1
 8008d36:	bf38      	it	cc
 8008d38:	460b      	movcc	r3, r1
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d204      	bcs.n	8008d48 <tcp_process+0x460>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008d42:	009b      	lsls	r3, r3, #2
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	e00d      	b.n	8008d64 <tcp_process+0x47c>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008d4c:	005b      	lsls	r3, r3, #1
 8008d4e:	f241 121c 	movw	r2, #4380	; 0x111c
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d904      	bls.n	8008d60 <tcp_process+0x478>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008d5a:	005b      	lsls	r3, r3, #1
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	e001      	b.n	8008d64 <tcp_process+0x47c>
 8008d60:	f241 131c 	movw	r3, #4380	; 0x111c
 8008d64:	687a      	ldr	r2, [r7, #4]
 8008d66:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8008d6a:	4b4e      	ldr	r3, [pc, #312]	; (8008ea4 <tcp_process+0x5bc>)
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	f003 0320 	and.w	r3, r3, #32
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d037      	beq.n	8008de6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	8b5b      	ldrh	r3, [r3, #26]
 8008d7a:	f043 0302 	orr.w	r3, r3, #2
 8008d7e:	b29a      	uxth	r2, r3
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2207      	movs	r2, #7
 8008d88:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8008d8a:	e02c      	b.n	8008de6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008d8c:	4b3b      	ldr	r3, [pc, #236]	; (8008e7c <tcp_process+0x594>)
 8008d8e:	6819      	ldr	r1, [r3, #0]
 8008d90:	4b3b      	ldr	r3, [pc, #236]	; (8008e80 <tcp_process+0x598>)
 8008d92:	881b      	ldrh	r3, [r3, #0]
 8008d94:	461a      	mov	r2, r3
 8008d96:	4b3b      	ldr	r3, [pc, #236]	; (8008e84 <tcp_process+0x59c>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008d9c:	4b3a      	ldr	r3, [pc, #232]	; (8008e88 <tcp_process+0x5a0>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008da0:	885b      	ldrh	r3, [r3, #2]
 8008da2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008da4:	4a38      	ldr	r2, [pc, #224]	; (8008e88 <tcp_process+0x5a0>)
 8008da6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008da8:	8812      	ldrh	r2, [r2, #0]
 8008daa:	b292      	uxth	r2, r2
 8008dac:	9202      	str	r2, [sp, #8]
 8008dae:	9301      	str	r3, [sp, #4]
 8008db0:	4b36      	ldr	r3, [pc, #216]	; (8008e8c <tcp_process+0x5a4>)
 8008db2:	9300      	str	r3, [sp, #0]
 8008db4:	4b36      	ldr	r3, [pc, #216]	; (8008e90 <tcp_process+0x5a8>)
 8008db6:	4602      	mov	r2, r0
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f002 fbd1 	bl	800b560 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8008dbe:	e167      	b.n	8009090 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8008dc0:	4b2d      	ldr	r3, [pc, #180]	; (8008e78 <tcp_process+0x590>)
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	f003 0302 	and.w	r3, r3, #2
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	f000 8161 	beq.w	8009090 <tcp_process+0x7a8>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd2:	1e5a      	subs	r2, r3, #1
 8008dd4:	4b2b      	ldr	r3, [pc, #172]	; (8008e84 <tcp_process+0x59c>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	f040 8159 	bne.w	8009090 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f002 f9b8 	bl	800b154 <tcp_rexmit>
      break;
 8008de4:	e154      	b.n	8009090 <tcp_process+0x7a8>
 8008de6:	e153      	b.n	8009090 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f000 fa71 	bl	80092d0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8008dee:	4b2d      	ldr	r3, [pc, #180]	; (8008ea4 <tcp_process+0x5bc>)
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	f003 0320 	and.w	r3, r3, #32
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	f000 814c 	beq.w	8009094 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	8b5b      	ldrh	r3, [r3, #26]
 8008e00:	f043 0302 	orr.w	r3, r3, #2
 8008e04:	b29a      	uxth	r2, r3
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2207      	movs	r2, #7
 8008e0e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008e10:	e140      	b.n	8009094 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 fa5c 	bl	80092d0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008e18:	4b22      	ldr	r3, [pc, #136]	; (8008ea4 <tcp_process+0x5bc>)
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	f003 0320 	and.w	r3, r3, #32
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d071      	beq.n	8008f08 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008e24:	4b14      	ldr	r3, [pc, #80]	; (8008e78 <tcp_process+0x590>)
 8008e26:	781b      	ldrb	r3, [r3, #0]
 8008e28:	f003 0310 	and.w	r3, r3, #16
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d060      	beq.n	8008ef2 <tcp_process+0x60a>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008e34:	4b11      	ldr	r3, [pc, #68]	; (8008e7c <tcp_process+0x594>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	d15a      	bne.n	8008ef2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d156      	bne.n	8008ef2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	8b5b      	ldrh	r3, [r3, #26]
 8008e48:	f043 0302 	orr.w	r3, r3, #2
 8008e4c:	b29a      	uxth	r2, r3
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f7fe fdbc 	bl	80079d0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8008e58:	4b13      	ldr	r3, [pc, #76]	; (8008ea8 <tcp_process+0x5c0>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	687a      	ldr	r2, [r7, #4]
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d105      	bne.n	8008e6e <tcp_process+0x586>
 8008e62:	4b11      	ldr	r3, [pc, #68]	; (8008ea8 <tcp_process+0x5c0>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	4a0f      	ldr	r2, [pc, #60]	; (8008ea8 <tcp_process+0x5c0>)
 8008e6a:	6013      	str	r3, [r2, #0]
 8008e6c:	e02e      	b.n	8008ecc <tcp_process+0x5e4>
 8008e6e:	4b0e      	ldr	r3, [pc, #56]	; (8008ea8 <tcp_process+0x5c0>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	617b      	str	r3, [r7, #20]
 8008e74:	e027      	b.n	8008ec6 <tcp_process+0x5de>
 8008e76:	bf00      	nop
 8008e78:	2000a4f8 	.word	0x2000a4f8
 8008e7c:	2000a4f0 	.word	0x2000a4f0
 8008e80:	2000a4f6 	.word	0x2000a4f6
 8008e84:	2000a4ec 	.word	0x2000a4ec
 8008e88:	2000a4dc 	.word	0x2000a4dc
 8008e8c:	20004d94 	.word	0x20004d94
 8008e90:	20004d98 	.word	0x20004d98
 8008e94:	080109d8 	.word	0x080109d8
 8008e98:	08010c78 	.word	0x08010c78
 8008e9c:	08010a24 	.word	0x08010a24
 8008ea0:	2000a4f4 	.word	0x2000a4f4
 8008ea4:	2000a4f9 	.word	0x2000a4f9
 8008ea8:	2000a4c0 	.word	0x2000a4c0
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	68db      	ldr	r3, [r3, #12]
 8008eb0:	687a      	ldr	r2, [r7, #4]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d104      	bne.n	8008ec0 <tcp_process+0x5d8>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	68da      	ldr	r2, [r3, #12]
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	60da      	str	r2, [r3, #12]
 8008ebe:	e005      	b.n	8008ecc <tcp_process+0x5e4>
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	68db      	ldr	r3, [r3, #12]
 8008ec4:	617b      	str	r3, [r7, #20]
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d1ef      	bne.n	8008eac <tcp_process+0x5c4>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	60da      	str	r2, [r3, #12]
 8008ed2:	4b77      	ldr	r3, [pc, #476]	; (80090b0 <tcp_process+0x7c8>)
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	220a      	movs	r2, #10
 8008edc:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8008ede:	4b75      	ldr	r3, [pc, #468]	; (80090b4 <tcp_process+0x7cc>)
 8008ee0:	681a      	ldr	r2, [r3, #0]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	60da      	str	r2, [r3, #12]
 8008ee6:	4a73      	ldr	r2, [pc, #460]	; (80090b4 <tcp_process+0x7cc>)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6013      	str	r3, [r2, #0]
 8008eec:	f002 fcfa 	bl	800b8e4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8008ef0:	e0d2      	b.n	8009098 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	8b5b      	ldrh	r3, [r3, #26]
 8008ef6:	f043 0302 	orr.w	r3, r3, #2
 8008efa:	b29a      	uxth	r2, r3
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2208      	movs	r2, #8
 8008f04:	751a      	strb	r2, [r3, #20]
      break;
 8008f06:	e0c7      	b.n	8009098 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008f08:	4b6b      	ldr	r3, [pc, #428]	; (80090b8 <tcp_process+0x7d0>)
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	f003 0310 	and.w	r3, r3, #16
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	f000 80c1 	beq.w	8009098 <tcp_process+0x7b0>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f1a:	4b68      	ldr	r3, [pc, #416]	; (80090bc <tcp_process+0x7d4>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	f040 80ba 	bne.w	8009098 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	f040 80b5 	bne.w	8009098 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2206      	movs	r2, #6
 8008f32:	751a      	strb	r2, [r3, #20]
      break;
 8008f34:	e0b0      	b.n	8009098 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 f9ca 	bl	80092d0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008f3c:	4b60      	ldr	r3, [pc, #384]	; (80090c0 <tcp_process+0x7d8>)
 8008f3e:	781b      	ldrb	r3, [r3, #0]
 8008f40:	f003 0320 	and.w	r3, r3, #32
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	f000 80a9 	beq.w	800909c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	8b5b      	ldrh	r3, [r3, #26]
 8008f4e:	f043 0302 	orr.w	r3, r3, #2
 8008f52:	b29a      	uxth	r2, r3
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f7fe fd39 	bl	80079d0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008f5e:	4b59      	ldr	r3, [pc, #356]	; (80090c4 <tcp_process+0x7dc>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	687a      	ldr	r2, [r7, #4]
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d105      	bne.n	8008f74 <tcp_process+0x68c>
 8008f68:	4b56      	ldr	r3, [pc, #344]	; (80090c4 <tcp_process+0x7dc>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	68db      	ldr	r3, [r3, #12]
 8008f6e:	4a55      	ldr	r2, [pc, #340]	; (80090c4 <tcp_process+0x7dc>)
 8008f70:	6013      	str	r3, [r2, #0]
 8008f72:	e013      	b.n	8008f9c <tcp_process+0x6b4>
 8008f74:	4b53      	ldr	r3, [pc, #332]	; (80090c4 <tcp_process+0x7dc>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	613b      	str	r3, [r7, #16]
 8008f7a:	e00c      	b.n	8008f96 <tcp_process+0x6ae>
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	429a      	cmp	r2, r3
 8008f84:	d104      	bne.n	8008f90 <tcp_process+0x6a8>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	68da      	ldr	r2, [r3, #12]
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	60da      	str	r2, [r3, #12]
 8008f8e:	e005      	b.n	8008f9c <tcp_process+0x6b4>
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	68db      	ldr	r3, [r3, #12]
 8008f94:	613b      	str	r3, [r7, #16]
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d1ef      	bne.n	8008f7c <tcp_process+0x694>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	60da      	str	r2, [r3, #12]
 8008fa2:	4b43      	ldr	r3, [pc, #268]	; (80090b0 <tcp_process+0x7c8>)
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	220a      	movs	r2, #10
 8008fac:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008fae:	4b41      	ldr	r3, [pc, #260]	; (80090b4 <tcp_process+0x7cc>)
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	60da      	str	r2, [r3, #12]
 8008fb6:	4a3f      	ldr	r2, [pc, #252]	; (80090b4 <tcp_process+0x7cc>)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6013      	str	r3, [r2, #0]
 8008fbc:	f002 fc92 	bl	800b8e4 <tcp_timer_needed>
      }
      break;
 8008fc0:	e06c      	b.n	800909c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 f984 	bl	80092d0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008fc8:	4b3b      	ldr	r3, [pc, #236]	; (80090b8 <tcp_process+0x7d0>)
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	f003 0310 	and.w	r3, r3, #16
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d065      	beq.n	80090a0 <tcp_process+0x7b8>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008fd8:	4b38      	ldr	r3, [pc, #224]	; (80090bc <tcp_process+0x7d4>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	d15f      	bne.n	80090a0 <tcp_process+0x7b8>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d15b      	bne.n	80090a0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f7fe fcf1 	bl	80079d0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008fee:	4b35      	ldr	r3, [pc, #212]	; (80090c4 <tcp_process+0x7dc>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	687a      	ldr	r2, [r7, #4]
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d105      	bne.n	8009004 <tcp_process+0x71c>
 8008ff8:	4b32      	ldr	r3, [pc, #200]	; (80090c4 <tcp_process+0x7dc>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	68db      	ldr	r3, [r3, #12]
 8008ffe:	4a31      	ldr	r2, [pc, #196]	; (80090c4 <tcp_process+0x7dc>)
 8009000:	6013      	str	r3, [r2, #0]
 8009002:	e013      	b.n	800902c <tcp_process+0x744>
 8009004:	4b2f      	ldr	r3, [pc, #188]	; (80090c4 <tcp_process+0x7dc>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	60fb      	str	r3, [r7, #12]
 800900a:	e00c      	b.n	8009026 <tcp_process+0x73e>
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	68db      	ldr	r3, [r3, #12]
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	429a      	cmp	r2, r3
 8009014:	d104      	bne.n	8009020 <tcp_process+0x738>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	68da      	ldr	r2, [r3, #12]
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	60da      	str	r2, [r3, #12]
 800901e:	e005      	b.n	800902c <tcp_process+0x744>
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	68db      	ldr	r3, [r3, #12]
 8009024:	60fb      	str	r3, [r7, #12]
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d1ef      	bne.n	800900c <tcp_process+0x724>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2200      	movs	r2, #0
 8009030:	60da      	str	r2, [r3, #12]
 8009032:	4b1f      	ldr	r3, [pc, #124]	; (80090b0 <tcp_process+0x7c8>)
 8009034:	2201      	movs	r2, #1
 8009036:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	220a      	movs	r2, #10
 800903c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800903e:	4b1d      	ldr	r3, [pc, #116]	; (80090b4 <tcp_process+0x7cc>)
 8009040:	681a      	ldr	r2, [r3, #0]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	60da      	str	r2, [r3, #12]
 8009046:	4a1b      	ldr	r2, [pc, #108]	; (80090b4 <tcp_process+0x7cc>)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6013      	str	r3, [r2, #0]
 800904c:	f002 fc4a 	bl	800b8e4 <tcp_timer_needed>
      }
      break;
 8009050:	e026      	b.n	80090a0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 f93c 	bl	80092d0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009058:	4b17      	ldr	r3, [pc, #92]	; (80090b8 <tcp_process+0x7d0>)
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	f003 0310 	and.w	r3, r3, #16
 8009060:	2b00      	cmp	r3, #0
 8009062:	d01f      	beq.n	80090a4 <tcp_process+0x7bc>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009068:	4b14      	ldr	r3, [pc, #80]	; (80090bc <tcp_process+0x7d4>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	429a      	cmp	r2, r3
 800906e:	d119      	bne.n	80090a4 <tcp_process+0x7bc>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009074:	2b00      	cmp	r3, #0
 8009076:	d115      	bne.n	80090a4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8009078:	4b11      	ldr	r3, [pc, #68]	; (80090c0 <tcp_process+0x7d8>)
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	f043 0310 	orr.w	r3, r3, #16
 8009080:	b2da      	uxtb	r2, r3
 8009082:	4b0f      	ldr	r3, [pc, #60]	; (80090c0 <tcp_process+0x7d8>)
 8009084:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009086:	e00d      	b.n	80090a4 <tcp_process+0x7bc>
    default:
      break;
 8009088:	bf00      	nop
 800908a:	e00c      	b.n	80090a6 <tcp_process+0x7be>
      break;
 800908c:	bf00      	nop
 800908e:	e00a      	b.n	80090a6 <tcp_process+0x7be>
      break;
 8009090:	bf00      	nop
 8009092:	e008      	b.n	80090a6 <tcp_process+0x7be>
      break;
 8009094:	bf00      	nop
 8009096:	e006      	b.n	80090a6 <tcp_process+0x7be>
      break;
 8009098:	bf00      	nop
 800909a:	e004      	b.n	80090a6 <tcp_process+0x7be>
      break;
 800909c:	bf00      	nop
 800909e:	e002      	b.n	80090a6 <tcp_process+0x7be>
      break;
 80090a0:	bf00      	nop
 80090a2:	e000      	b.n	80090a6 <tcp_process+0x7be>
      break;
 80090a4:	bf00      	nop
  }
  return ERR_OK;
 80090a6:	2300      	movs	r3, #0
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3724      	adds	r7, #36	; 0x24
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd90      	pop	{r4, r7, pc}
 80090b0:	2000a4c8 	.word	0x2000a4c8
 80090b4:	2000a4c4 	.word	0x2000a4c4
 80090b8:	2000a4f8 	.word	0x2000a4f8
 80090bc:	2000a4f0 	.word	0x2000a4f0
 80090c0:	2000a4f9 	.word	0x2000a4f9
 80090c4:	2000a4c0 	.word	0x2000a4c0

080090c8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80090c8:	b590      	push	{r4, r7, lr}
 80090ca:	b085      	sub	sp, #20
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d106      	bne.n	80090e6 <tcp_oos_insert_segment+0x1e>
 80090d8:	4b3b      	ldr	r3, [pc, #236]	; (80091c8 <tcp_oos_insert_segment+0x100>)
 80090da:	f240 421f 	movw	r2, #1055	; 0x41f
 80090de:	493b      	ldr	r1, [pc, #236]	; (80091cc <tcp_oos_insert_segment+0x104>)
 80090e0:	483b      	ldr	r0, [pc, #236]	; (80091d0 <tcp_oos_insert_segment+0x108>)
 80090e2:	f005 fc2f 	bl	800e944 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	68db      	ldr	r3, [r3, #12]
 80090ea:	899b      	ldrh	r3, [r3, #12]
 80090ec:	b29b      	uxth	r3, r3
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7fb fcb0 	bl	8004a54 <lwip_htons>
 80090f4:	4603      	mov	r3, r0
 80090f6:	b2db      	uxtb	r3, r3
 80090f8:	f003 0301 	and.w	r3, r3, #1
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d028      	beq.n	8009152 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8009100:	6838      	ldr	r0, [r7, #0]
 8009102:	f7fe fa63 	bl	80075cc <tcp_segs_free>
    next = NULL;
 8009106:	2300      	movs	r3, #0
 8009108:	603b      	str	r3, [r7, #0]
 800910a:	e056      	b.n	80091ba <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	68db      	ldr	r3, [r3, #12]
 8009110:	899b      	ldrh	r3, [r3, #12]
 8009112:	b29b      	uxth	r3, r3
 8009114:	4618      	mov	r0, r3
 8009116:	f7fb fc9d 	bl	8004a54 <lwip_htons>
 800911a:	4603      	mov	r3, r0
 800911c:	b2db      	uxtb	r3, r3
 800911e:	f003 0301 	and.w	r3, r3, #1
 8009122:	2b00      	cmp	r3, #0
 8009124:	d00d      	beq.n	8009142 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	68db      	ldr	r3, [r3, #12]
 800912a:	899b      	ldrh	r3, [r3, #12]
 800912c:	b29c      	uxth	r4, r3
 800912e:	2001      	movs	r0, #1
 8009130:	f7fb fc90 	bl	8004a54 <lwip_htons>
 8009134:	4603      	mov	r3, r0
 8009136:	461a      	mov	r2, r3
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	4322      	orrs	r2, r4
 800913e:	b292      	uxth	r2, r2
 8009140:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800914c:	68f8      	ldr	r0, [r7, #12]
 800914e:	f7fe fa52 	bl	80075f6 <tcp_seg_free>
    while (next &&
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d00e      	beq.n	8009176 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	891b      	ldrh	r3, [r3, #8]
 800915c:	461a      	mov	r2, r3
 800915e:	4b1d      	ldr	r3, [pc, #116]	; (80091d4 <tcp_oos_insert_segment+0x10c>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	441a      	add	r2, r3
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	68db      	ldr	r3, [r3, #12]
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	6839      	ldr	r1, [r7, #0]
 800916c:	8909      	ldrh	r1, [r1, #8]
 800916e:	440b      	add	r3, r1
 8009170:	1ad3      	subs	r3, r2, r3
    while (next &&
 8009172:	2b00      	cmp	r3, #0
 8009174:	daca      	bge.n	800910c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d01e      	beq.n	80091ba <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	891b      	ldrh	r3, [r3, #8]
 8009180:	461a      	mov	r2, r3
 8009182:	4b14      	ldr	r3, [pc, #80]	; (80091d4 <tcp_oos_insert_segment+0x10c>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	441a      	add	r2, r3
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	68db      	ldr	r3, [r3, #12]
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8009190:	2b00      	cmp	r3, #0
 8009192:	dd12      	ble.n	80091ba <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	68db      	ldr	r3, [r3, #12]
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	b29a      	uxth	r2, r3
 800919c:	4b0d      	ldr	r3, [pc, #52]	; (80091d4 <tcp_oos_insert_segment+0x10c>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	1ad3      	subs	r3, r2, r3
 80091a4:	b29a      	uxth	r2, r3
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	685a      	ldr	r2, [r3, #4]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	891b      	ldrh	r3, [r3, #8]
 80091b2:	4619      	mov	r1, r3
 80091b4:	4610      	mov	r0, r2
 80091b6:	f7fc fe25 	bl	8005e04 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	683a      	ldr	r2, [r7, #0]
 80091be:	601a      	str	r2, [r3, #0]
}
 80091c0:	bf00      	nop
 80091c2:	3714      	adds	r7, #20
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd90      	pop	{r4, r7, pc}
 80091c8:	080109d8 	.word	0x080109d8
 80091cc:	08010c98 	.word	0x08010c98
 80091d0:	08010a24 	.word	0x08010a24
 80091d4:	2000a4ec 	.word	0x2000a4ec

080091d8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80091d8:	b5b0      	push	{r4, r5, r7, lr}
 80091da:	b086      	sub	sp, #24
 80091dc:	af00      	add	r7, sp, #0
 80091de:	60f8      	str	r0, [r7, #12]
 80091e0:	60b9      	str	r1, [r7, #8]
 80091e2:	607a      	str	r2, [r7, #4]
 80091e4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80091e6:	e03e      	b.n	8009266 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7fd f812 	bl	8006220 <pbuf_clen>
 80091fc:	4603      	mov	r3, r0
 80091fe:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009206:	8a7a      	ldrh	r2, [r7, #18]
 8009208:	429a      	cmp	r2, r3
 800920a:	d906      	bls.n	800921a <tcp_free_acked_segments+0x42>
 800920c:	4b2a      	ldr	r3, [pc, #168]	; (80092b8 <tcp_free_acked_segments+0xe0>)
 800920e:	f240 4257 	movw	r2, #1111	; 0x457
 8009212:	492a      	ldr	r1, [pc, #168]	; (80092bc <tcp_free_acked_segments+0xe4>)
 8009214:	482a      	ldr	r0, [pc, #168]	; (80092c0 <tcp_free_acked_segments+0xe8>)
 8009216:	f005 fb95 	bl	800e944 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8009220:	8a7b      	ldrh	r3, [r7, #18]
 8009222:	1ad3      	subs	r3, r2, r3
 8009224:	b29a      	uxth	r2, r3
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	891a      	ldrh	r2, [r3, #8]
 8009230:	4b24      	ldr	r3, [pc, #144]	; (80092c4 <tcp_free_acked_segments+0xec>)
 8009232:	881b      	ldrh	r3, [r3, #0]
 8009234:	4413      	add	r3, r2
 8009236:	b29a      	uxth	r2, r3
 8009238:	4b22      	ldr	r3, [pc, #136]	; (80092c4 <tcp_free_acked_segments+0xec>)
 800923a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800923c:	6978      	ldr	r0, [r7, #20]
 800923e:	f7fe f9da 	bl	80075f6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009248:	2b00      	cmp	r3, #0
 800924a:	d00c      	beq.n	8009266 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d109      	bne.n	8009266 <tcp_free_acked_segments+0x8e>
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d106      	bne.n	8009266 <tcp_free_acked_segments+0x8e>
 8009258:	4b17      	ldr	r3, [pc, #92]	; (80092b8 <tcp_free_acked_segments+0xe0>)
 800925a:	f240 4261 	movw	r2, #1121	; 0x461
 800925e:	491a      	ldr	r1, [pc, #104]	; (80092c8 <tcp_free_acked_segments+0xf0>)
 8009260:	4817      	ldr	r0, [pc, #92]	; (80092c0 <tcp_free_acked_segments+0xe8>)
 8009262:	f005 fb6f 	bl	800e944 <iprintf>
  while (seg_list != NULL &&
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d020      	beq.n	80092ae <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	68db      	ldr	r3, [r3, #12]
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	4618      	mov	r0, r3
 8009274:	f7fb fc03 	bl	8004a7e <lwip_htonl>
 8009278:	4604      	mov	r4, r0
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	891b      	ldrh	r3, [r3, #8]
 800927e:	461d      	mov	r5, r3
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	68db      	ldr	r3, [r3, #12]
 8009284:	899b      	ldrh	r3, [r3, #12]
 8009286:	b29b      	uxth	r3, r3
 8009288:	4618      	mov	r0, r3
 800928a:	f7fb fbe3 	bl	8004a54 <lwip_htons>
 800928e:	4603      	mov	r3, r0
 8009290:	b2db      	uxtb	r3, r3
 8009292:	f003 0303 	and.w	r3, r3, #3
 8009296:	2b00      	cmp	r3, #0
 8009298:	d001      	beq.n	800929e <tcp_free_acked_segments+0xc6>
 800929a:	2301      	movs	r3, #1
 800929c:	e000      	b.n	80092a0 <tcp_free_acked_segments+0xc8>
 800929e:	2300      	movs	r3, #0
 80092a0:	442b      	add	r3, r5
 80092a2:	18e2      	adds	r2, r4, r3
 80092a4:	4b09      	ldr	r3, [pc, #36]	; (80092cc <tcp_free_acked_segments+0xf4>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	dd9c      	ble.n	80091e8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80092ae:	68bb      	ldr	r3, [r7, #8]
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3718      	adds	r7, #24
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bdb0      	pop	{r4, r5, r7, pc}
 80092b8:	080109d8 	.word	0x080109d8
 80092bc:	08010cc0 	.word	0x08010cc0
 80092c0:	08010a24 	.word	0x08010a24
 80092c4:	2000a4f4 	.word	0x2000a4f4
 80092c8:	08010ce8 	.word	0x08010ce8
 80092cc:	2000a4f0 	.word	0x2000a4f0

080092d0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80092d0:	b5b0      	push	{r4, r5, r7, lr}
 80092d2:	b094      	sub	sp, #80	; 0x50
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80092d8:	2300      	movs	r3, #0
 80092da:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d106      	bne.n	80092f0 <tcp_receive+0x20>
 80092e2:	4b91      	ldr	r3, [pc, #580]	; (8009528 <tcp_receive+0x258>)
 80092e4:	f240 427b 	movw	r2, #1147	; 0x47b
 80092e8:	4990      	ldr	r1, [pc, #576]	; (800952c <tcp_receive+0x25c>)
 80092ea:	4891      	ldr	r0, [pc, #580]	; (8009530 <tcp_receive+0x260>)
 80092ec:	f005 fb2a 	bl	800e944 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	7d1b      	ldrb	r3, [r3, #20]
 80092f4:	2b03      	cmp	r3, #3
 80092f6:	d806      	bhi.n	8009306 <tcp_receive+0x36>
 80092f8:	4b8b      	ldr	r3, [pc, #556]	; (8009528 <tcp_receive+0x258>)
 80092fa:	f240 427c 	movw	r2, #1148	; 0x47c
 80092fe:	498d      	ldr	r1, [pc, #564]	; (8009534 <tcp_receive+0x264>)
 8009300:	488b      	ldr	r0, [pc, #556]	; (8009530 <tcp_receive+0x260>)
 8009302:	f005 fb1f 	bl	800e944 <iprintf>

  if (flags & TCP_ACK) {
 8009306:	4b8c      	ldr	r3, [pc, #560]	; (8009538 <tcp_receive+0x268>)
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	f003 0310 	and.w	r3, r3, #16
 800930e:	2b00      	cmp	r3, #0
 8009310:	f000 8264 	beq.w	80097dc <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800931a:	461a      	mov	r2, r3
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009320:	4413      	add	r3, r2
 8009322:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009328:	4b84      	ldr	r3, [pc, #528]	; (800953c <tcp_receive+0x26c>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	1ad3      	subs	r3, r2, r3
 800932e:	2b00      	cmp	r3, #0
 8009330:	db1b      	blt.n	800936a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009336:	4b81      	ldr	r3, [pc, #516]	; (800953c <tcp_receive+0x26c>)
 8009338:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800933a:	429a      	cmp	r2, r3
 800933c:	d106      	bne.n	800934c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009342:	4b7f      	ldr	r3, [pc, #508]	; (8009540 <tcp_receive+0x270>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	1ad3      	subs	r3, r2, r3
 8009348:	2b00      	cmp	r3, #0
 800934a:	db0e      	blt.n	800936a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009350:	4b7b      	ldr	r3, [pc, #492]	; (8009540 <tcp_receive+0x270>)
 8009352:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009354:	429a      	cmp	r2, r3
 8009356:	d125      	bne.n	80093a4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009358:	4b7a      	ldr	r3, [pc, #488]	; (8009544 <tcp_receive+0x274>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	89db      	ldrh	r3, [r3, #14]
 800935e:	b29a      	uxth	r2, r3
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009366:	429a      	cmp	r2, r3
 8009368:	d91c      	bls.n	80093a4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800936a:	4b76      	ldr	r3, [pc, #472]	; (8009544 <tcp_receive+0x274>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	89db      	ldrh	r3, [r3, #14]
 8009370:	b29a      	uxth	r2, r3
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009384:	429a      	cmp	r2, r3
 8009386:	d205      	bcs.n	8009394 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8009394:	4b69      	ldr	r3, [pc, #420]	; (800953c <tcp_receive+0x26c>)
 8009396:	681a      	ldr	r2, [r3, #0]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800939c:	4b68      	ldr	r3, [pc, #416]	; (8009540 <tcp_receive+0x270>)
 800939e:	681a      	ldr	r2, [r3, #0]
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80093a4:	4b66      	ldr	r3, [pc, #408]	; (8009540 <tcp_receive+0x270>)
 80093a6:	681a      	ldr	r2, [r3, #0]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093ac:	1ad3      	subs	r3, r2, r3
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	dc58      	bgt.n	8009464 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80093b2:	4b65      	ldr	r3, [pc, #404]	; (8009548 <tcp_receive+0x278>)
 80093b4:	881b      	ldrh	r3, [r3, #0]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d14b      	bne.n	8009452 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80093c4:	4413      	add	r3, r2
 80093c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d142      	bne.n	8009452 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	db3d      	blt.n	8009452 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093da:	4b59      	ldr	r3, [pc, #356]	; (8009540 <tcp_receive+0x270>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	429a      	cmp	r2, r3
 80093e0:	d137      	bne.n	8009452 <tcp_receive+0x182>
              found_dupack = 1;
 80093e2:	2301      	movs	r3, #1
 80093e4:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80093ec:	2bff      	cmp	r3, #255	; 0xff
 80093ee:	d007      	beq.n	8009400 <tcp_receive+0x130>
                ++pcb->dupacks;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80093f6:	3301      	adds	r3, #1
 80093f8:	b2da      	uxtb	r2, r3
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009406:	2b03      	cmp	r3, #3
 8009408:	d91b      	bls.n	8009442 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009414:	4413      	add	r3, r2
 8009416:	b29a      	uxth	r2, r3
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800941e:	429a      	cmp	r2, r3
 8009420:	d30a      	bcc.n	8009438 <tcp_receive+0x168>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800942c:	4413      	add	r3, r2
 800942e:	b29a      	uxth	r2, r3
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009436:	e004      	b.n	8009442 <tcp_receive+0x172>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800943e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009448:	2b02      	cmp	r3, #2
 800944a:	d902      	bls.n	8009452 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f001 feed 	bl	800b22c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8009452:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009454:	2b00      	cmp	r3, #0
 8009456:	f040 8161 	bne.w	800971c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2200      	movs	r2, #0
 800945e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009462:	e15b      	b.n	800971c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009464:	4b36      	ldr	r3, [pc, #216]	; (8009540 <tcp_receive+0x270>)
 8009466:	681a      	ldr	r2, [r3, #0]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800946c:	1ad3      	subs	r3, r2, r3
 800946e:	3b01      	subs	r3, #1
 8009470:	2b00      	cmp	r3, #0
 8009472:	f2c0 814e 	blt.w	8009712 <tcp_receive+0x442>
 8009476:	4b32      	ldr	r3, [pc, #200]	; (8009540 <tcp_receive+0x270>)
 8009478:	681a      	ldr	r2, [r3, #0]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800947e:	1ad3      	subs	r3, r2, r3
 8009480:	2b00      	cmp	r3, #0
 8009482:	f300 8146 	bgt.w	8009712 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	8b5b      	ldrh	r3, [r3, #26]
 800948a:	f003 0304 	and.w	r3, r3, #4
 800948e:	2b00      	cmp	r3, #0
 8009490:	d010      	beq.n	80094b4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	8b5b      	ldrh	r3, [r3, #26]
 8009496:	f023 0304 	bic.w	r3, r3, #4
 800949a:	b29a      	uxth	r2, r3
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2200      	movs	r2, #0
 80094b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2200      	movs	r2, #0
 80094b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80094c2:	10db      	asrs	r3, r3, #3
 80094c4:	b21b      	sxth	r3, r3
 80094c6:	b29a      	uxth	r2, r3
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	4413      	add	r3, r2
 80094d2:	b29b      	uxth	r3, r3
 80094d4:	b21a      	sxth	r2, r3
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80094dc:	4b18      	ldr	r3, [pc, #96]	; (8009540 <tcp_receive+0x270>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	b29a      	uxth	r2, r3
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	1ad3      	subs	r3, r2, r3
 80094ea:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2200      	movs	r2, #0
 80094f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80094f4:	4b12      	ldr	r3, [pc, #72]	; (8009540 <tcp_receive+0x270>)
 80094f6:	681a      	ldr	r2, [r3, #0]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	7d1b      	ldrb	r3, [r3, #20]
 8009500:	2b03      	cmp	r3, #3
 8009502:	f240 8097 	bls.w	8009634 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8009512:	429a      	cmp	r2, r3
 8009514:	d245      	bcs.n	80095a2 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	8b5b      	ldrh	r3, [r3, #26]
 800951a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800951e:	2b00      	cmp	r3, #0
 8009520:	d014      	beq.n	800954c <tcp_receive+0x27c>
 8009522:	2301      	movs	r3, #1
 8009524:	e013      	b.n	800954e <tcp_receive+0x27e>
 8009526:	bf00      	nop
 8009528:	080109d8 	.word	0x080109d8
 800952c:	08010d08 	.word	0x08010d08
 8009530:	08010a24 	.word	0x08010a24
 8009534:	08010d24 	.word	0x08010d24
 8009538:	2000a4f8 	.word	0x2000a4f8
 800953c:	2000a4ec 	.word	0x2000a4ec
 8009540:	2000a4f0 	.word	0x2000a4f0
 8009544:	2000a4dc 	.word	0x2000a4dc
 8009548:	2000a4f6 	.word	0x2000a4f6
 800954c:	2302      	movs	r3, #2
 800954e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8009552:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8009556:	b29a      	uxth	r2, r3
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800955c:	fb12 f303 	smulbb	r3, r2, r3
 8009560:	b29b      	uxth	r3, r3
 8009562:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009564:	4293      	cmp	r3, r2
 8009566:	bf28      	it	cs
 8009568:	4613      	movcs	r3, r2
 800956a:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009572:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009574:	4413      	add	r3, r2
 8009576:	b29a      	uxth	r2, r3
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800957e:	429a      	cmp	r2, r3
 8009580:	d309      	bcc.n	8009596 <tcp_receive+0x2c6>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009588:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800958a:	4413      	add	r3, r2
 800958c:	b29a      	uxth	r2, r3
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009594:	e04e      	b.n	8009634 <tcp_receive+0x364>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800959c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80095a0:	e048      	b.n	8009634 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80095a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80095aa:	4413      	add	r3, r2
 80095ac:	b29a      	uxth	r2, r3
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80095b4:	429a      	cmp	r2, r3
 80095b6:	d309      	bcc.n	80095cc <tcp_receive+0x2fc>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80095be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80095c0:	4413      	add	r3, r2
 80095c2:	b29a      	uxth	r2, r3
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80095ca:	e004      	b.n	80095d6 <tcp_receive+0x306>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80095d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d326      	bcc.n	8009634 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80095f2:	1ad3      	subs	r3, r2, r3
 80095f4:	b29a      	uxth	r2, r3
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009606:	4413      	add	r3, r2
 8009608:	b29a      	uxth	r2, r3
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009610:	429a      	cmp	r2, r3
 8009612:	d30a      	bcc.n	800962a <tcp_receive+0x35a>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800961e:	4413      	add	r3, r2
 8009620:	b29a      	uxth	r2, r3
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009628:	e004      	b.n	8009634 <tcp_receive+0x364>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009630:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800963c:	4a98      	ldr	r2, [pc, #608]	; (80098a0 <tcp_receive+0x5d0>)
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f7ff fdca 	bl	80091d8 <tcp_free_acked_segments>
 8009644:	4602      	mov	r2, r0
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009652:	4a94      	ldr	r2, [pc, #592]	; (80098a4 <tcp_receive+0x5d4>)
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f7ff fdbf 	bl	80091d8 <tcp_free_acked_segments>
 800965a:	4602      	mov	r2, r0
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009664:	2b00      	cmp	r3, #0
 8009666:	d104      	bne.n	8009672 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800966e:	861a      	strh	r2, [r3, #48]	; 0x30
 8009670:	e002      	b.n	8009678 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2200      	movs	r2, #0
 8009676:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2200      	movs	r2, #0
 800967c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009682:	2b00      	cmp	r3, #0
 8009684:	d103      	bne.n	800968e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2200      	movs	r2, #0
 800968a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8009694:	4b84      	ldr	r3, [pc, #528]	; (80098a8 <tcp_receive+0x5d8>)
 8009696:	881b      	ldrh	r3, [r3, #0]
 8009698:	4413      	add	r3, r2
 800969a:	b29a      	uxth	r2, r3
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	8b5b      	ldrh	r3, [r3, #26]
 80096a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d035      	beq.n	800971a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d118      	bne.n	80096e8 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d00c      	beq.n	80096d8 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096c6:	68db      	ldr	r3, [r3, #12]
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	4618      	mov	r0, r3
 80096cc:	f7fb f9d7 	bl	8004a7e <lwip_htonl>
 80096d0:	4603      	mov	r3, r0
 80096d2:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	dc20      	bgt.n	800971a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	8b5b      	ldrh	r3, [r3, #26]
 80096dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80096e0:	b29a      	uxth	r2, r3
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80096e6:	e018      	b.n	800971a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096f0:	68db      	ldr	r3, [r3, #12]
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	4618      	mov	r0, r3
 80096f6:	f7fb f9c2 	bl	8004a7e <lwip_htonl>
 80096fa:	4603      	mov	r3, r0
 80096fc:	1ae3      	subs	r3, r4, r3
 80096fe:	2b00      	cmp	r3, #0
 8009700:	dc0b      	bgt.n	800971a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	8b5b      	ldrh	r3, [r3, #26]
 8009706:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800970a:	b29a      	uxth	r2, r3
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009710:	e003      	b.n	800971a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f001 ff76 	bl	800b604 <tcp_send_empty_ack>
 8009718:	e000      	b.n	800971c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800971a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009720:	2b00      	cmp	r3, #0
 8009722:	d05b      	beq.n	80097dc <tcp_receive+0x50c>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009728:	4b60      	ldr	r3, [pc, #384]	; (80098ac <tcp_receive+0x5dc>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	1ad3      	subs	r3, r2, r3
 800972e:	2b00      	cmp	r3, #0
 8009730:	da54      	bge.n	80097dc <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009732:	4b5f      	ldr	r3, [pc, #380]	; (80098b0 <tcp_receive+0x5e0>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	b29a      	uxth	r2, r3
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800973c:	b29b      	uxth	r3, r3
 800973e:	1ad3      	subs	r3, r2, r3
 8009740:	b29b      	uxth	r3, r3
 8009742:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8009746:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009750:	10db      	asrs	r3, r3, #3
 8009752:	b21b      	sxth	r3, r3
 8009754:	b29b      	uxth	r3, r3
 8009756:	1ad3      	subs	r3, r2, r3
 8009758:	b29b      	uxth	r3, r3
 800975a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009764:	b29a      	uxth	r2, r3
 8009766:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800976a:	4413      	add	r3, r2
 800976c:	b29b      	uxth	r3, r3
 800976e:	b21a      	sxth	r2, r3
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8009774:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8009778:	2b00      	cmp	r3, #0
 800977a:	da05      	bge.n	8009788 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800977c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009780:	425b      	negs	r3, r3
 8009782:	b29b      	uxth	r3, r3
 8009784:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8009788:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009792:	109b      	asrs	r3, r3, #2
 8009794:	b21b      	sxth	r3, r3
 8009796:	b29b      	uxth	r3, r3
 8009798:	1ad3      	subs	r3, r2, r3
 800979a:	b29b      	uxth	r3, r3
 800979c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80097a6:	b29a      	uxth	r2, r3
 80097a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80097ac:	4413      	add	r3, r2
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	b21a      	sxth	r2, r3
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80097bc:	10db      	asrs	r3, r3, #3
 80097be:	b21b      	sxth	r3, r3
 80097c0:	b29a      	uxth	r2, r3
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80097c8:	b29b      	uxth	r3, r3
 80097ca:	4413      	add	r3, r2
 80097cc:	b29b      	uxth	r3, r3
 80097ce:	b21a      	sxth	r2, r3
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2200      	movs	r2, #0
 80097da:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80097dc:	4b35      	ldr	r3, [pc, #212]	; (80098b4 <tcp_receive+0x5e4>)
 80097de:	881b      	ldrh	r3, [r3, #0]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	f000 84e2 	beq.w	800a1aa <tcp_receive+0xeda>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	7d1b      	ldrb	r3, [r3, #20]
 80097ea:	2b06      	cmp	r3, #6
 80097ec:	f200 84dd 	bhi.w	800a1aa <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80097f4:	4b30      	ldr	r3, [pc, #192]	; (80098b8 <tcp_receive+0x5e8>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	1ad3      	subs	r3, r2, r3
 80097fa:	3b01      	subs	r3, #1
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	f2c0 808f 	blt.w	8009920 <tcp_receive+0x650>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009806:	4b2b      	ldr	r3, [pc, #172]	; (80098b4 <tcp_receive+0x5e4>)
 8009808:	881b      	ldrh	r3, [r3, #0]
 800980a:	4619      	mov	r1, r3
 800980c:	4b2a      	ldr	r3, [pc, #168]	; (80098b8 <tcp_receive+0x5e8>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	440b      	add	r3, r1
 8009812:	1ad3      	subs	r3, r2, r3
 8009814:	3301      	adds	r3, #1
 8009816:	2b00      	cmp	r3, #0
 8009818:	f300 8082 	bgt.w	8009920 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800981c:	4b27      	ldr	r3, [pc, #156]	; (80098bc <tcp_receive+0x5ec>)
 800981e:	685b      	ldr	r3, [r3, #4]
 8009820:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009826:	4b24      	ldr	r3, [pc, #144]	; (80098b8 <tcp_receive+0x5e8>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	1ad3      	subs	r3, r2, r3
 800982c:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800982e:	4b23      	ldr	r3, [pc, #140]	; (80098bc <tcp_receive+0x5ec>)
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d106      	bne.n	8009844 <tcp_receive+0x574>
 8009836:	4b22      	ldr	r3, [pc, #136]	; (80098c0 <tcp_receive+0x5f0>)
 8009838:	f240 5294 	movw	r2, #1428	; 0x594
 800983c:	4921      	ldr	r1, [pc, #132]	; (80098c4 <tcp_receive+0x5f4>)
 800983e:	4822      	ldr	r0, [pc, #136]	; (80098c8 <tcp_receive+0x5f8>)
 8009840:	f005 f880 	bl	800e944 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8009844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009846:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800984a:	4293      	cmp	r3, r2
 800984c:	d906      	bls.n	800985c <tcp_receive+0x58c>
 800984e:	4b1c      	ldr	r3, [pc, #112]	; (80098c0 <tcp_receive+0x5f0>)
 8009850:	f240 5295 	movw	r2, #1429	; 0x595
 8009854:	491d      	ldr	r1, [pc, #116]	; (80098cc <tcp_receive+0x5fc>)
 8009856:	481c      	ldr	r0, [pc, #112]	; (80098c8 <tcp_receive+0x5f8>)
 8009858:	f005 f874 	bl	800e944 <iprintf>
      off = (u16_t)off32;
 800985c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009862:	4b16      	ldr	r3, [pc, #88]	; (80098bc <tcp_receive+0x5ec>)
 8009864:	685b      	ldr	r3, [r3, #4]
 8009866:	891b      	ldrh	r3, [r3, #8]
 8009868:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800986c:	429a      	cmp	r2, r3
 800986e:	d906      	bls.n	800987e <tcp_receive+0x5ae>
 8009870:	4b13      	ldr	r3, [pc, #76]	; (80098c0 <tcp_receive+0x5f0>)
 8009872:	f240 5297 	movw	r2, #1431	; 0x597
 8009876:	4916      	ldr	r1, [pc, #88]	; (80098d0 <tcp_receive+0x600>)
 8009878:	4813      	ldr	r0, [pc, #76]	; (80098c8 <tcp_receive+0x5f8>)
 800987a:	f005 f863 	bl	800e944 <iprintf>
      inseg.len -= off;
 800987e:	4b0f      	ldr	r3, [pc, #60]	; (80098bc <tcp_receive+0x5ec>)
 8009880:	891a      	ldrh	r2, [r3, #8]
 8009882:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009886:	1ad3      	subs	r3, r2, r3
 8009888:	b29a      	uxth	r2, r3
 800988a:	4b0c      	ldr	r3, [pc, #48]	; (80098bc <tcp_receive+0x5ec>)
 800988c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800988e:	4b0b      	ldr	r3, [pc, #44]	; (80098bc <tcp_receive+0x5ec>)
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	891a      	ldrh	r2, [r3, #8]
 8009894:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009898:	1ad3      	subs	r3, r2, r3
 800989a:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800989c:	e02a      	b.n	80098f4 <tcp_receive+0x624>
 800989e:	bf00      	nop
 80098a0:	08010d40 	.word	0x08010d40
 80098a4:	08010d48 	.word	0x08010d48
 80098a8:	2000a4f4 	.word	0x2000a4f4
 80098ac:	2000a4f0 	.word	0x2000a4f0
 80098b0:	2000a4b4 	.word	0x2000a4b4
 80098b4:	2000a4f6 	.word	0x2000a4f6
 80098b8:	2000a4ec 	.word	0x2000a4ec
 80098bc:	2000a4cc 	.word	0x2000a4cc
 80098c0:	080109d8 	.word	0x080109d8
 80098c4:	08010d50 	.word	0x08010d50
 80098c8:	08010a24 	.word	0x08010a24
 80098cc:	08010d60 	.word	0x08010d60
 80098d0:	08010d70 	.word	0x08010d70
        off -= p->len;
 80098d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098d6:	895b      	ldrh	r3, [r3, #10]
 80098d8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80098dc:	1ad3      	subs	r3, r2, r3
 80098de:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80098e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098e4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80098e6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80098e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098ea:	2200      	movs	r2, #0
 80098ec:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80098ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80098f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098f6:	895b      	ldrh	r3, [r3, #10]
 80098f8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80098fc:	429a      	cmp	r2, r3
 80098fe:	d8e9      	bhi.n	80098d4 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8009900:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009904:	4619      	mov	r1, r3
 8009906:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009908:	f7fc fb7c 	bl	8006004 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009910:	4a91      	ldr	r2, [pc, #580]	; (8009b58 <tcp_receive+0x888>)
 8009912:	6013      	str	r3, [r2, #0]
 8009914:	4b91      	ldr	r3, [pc, #580]	; (8009b5c <tcp_receive+0x88c>)
 8009916:	68db      	ldr	r3, [r3, #12]
 8009918:	4a8f      	ldr	r2, [pc, #572]	; (8009b58 <tcp_receive+0x888>)
 800991a:	6812      	ldr	r2, [r2, #0]
 800991c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800991e:	e00d      	b.n	800993c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8009920:	4b8d      	ldr	r3, [pc, #564]	; (8009b58 <tcp_receive+0x888>)
 8009922:	681a      	ldr	r2, [r3, #0]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009928:	1ad3      	subs	r3, r2, r3
 800992a:	2b00      	cmp	r3, #0
 800992c:	da06      	bge.n	800993c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	8b5b      	ldrh	r3, [r3, #26]
 8009932:	f043 0302 	orr.w	r3, r3, #2
 8009936:	b29a      	uxth	r2, r3
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800993c:	4b86      	ldr	r3, [pc, #536]	; (8009b58 <tcp_receive+0x888>)
 800993e:	681a      	ldr	r2, [r3, #0]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009944:	1ad3      	subs	r3, r2, r3
 8009946:	2b00      	cmp	r3, #0
 8009948:	f2c0 842a 	blt.w	800a1a0 <tcp_receive+0xed0>
 800994c:	4b82      	ldr	r3, [pc, #520]	; (8009b58 <tcp_receive+0x888>)
 800994e:	681a      	ldr	r2, [r3, #0]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009954:	6879      	ldr	r1, [r7, #4]
 8009956:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009958:	440b      	add	r3, r1
 800995a:	1ad3      	subs	r3, r2, r3
 800995c:	3301      	adds	r3, #1
 800995e:	2b00      	cmp	r3, #0
 8009960:	f300 841e 	bgt.w	800a1a0 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009968:	4b7b      	ldr	r3, [pc, #492]	; (8009b58 <tcp_receive+0x888>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	429a      	cmp	r2, r3
 800996e:	f040 829a 	bne.w	8009ea6 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8009972:	4b7a      	ldr	r3, [pc, #488]	; (8009b5c <tcp_receive+0x88c>)
 8009974:	891c      	ldrh	r4, [r3, #8]
 8009976:	4b79      	ldr	r3, [pc, #484]	; (8009b5c <tcp_receive+0x88c>)
 8009978:	68db      	ldr	r3, [r3, #12]
 800997a:	899b      	ldrh	r3, [r3, #12]
 800997c:	b29b      	uxth	r3, r3
 800997e:	4618      	mov	r0, r3
 8009980:	f7fb f868 	bl	8004a54 <lwip_htons>
 8009984:	4603      	mov	r3, r0
 8009986:	b2db      	uxtb	r3, r3
 8009988:	f003 0303 	and.w	r3, r3, #3
 800998c:	2b00      	cmp	r3, #0
 800998e:	d001      	beq.n	8009994 <tcp_receive+0x6c4>
 8009990:	2301      	movs	r3, #1
 8009992:	e000      	b.n	8009996 <tcp_receive+0x6c6>
 8009994:	2300      	movs	r3, #0
 8009996:	4423      	add	r3, r4
 8009998:	b29a      	uxth	r2, r3
 800999a:	4b71      	ldr	r3, [pc, #452]	; (8009b60 <tcp_receive+0x890>)
 800999c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80099a2:	4b6f      	ldr	r3, [pc, #444]	; (8009b60 <tcp_receive+0x890>)
 80099a4:	881b      	ldrh	r3, [r3, #0]
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d275      	bcs.n	8009a96 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80099aa:	4b6c      	ldr	r3, [pc, #432]	; (8009b5c <tcp_receive+0x88c>)
 80099ac:	68db      	ldr	r3, [r3, #12]
 80099ae:	899b      	ldrh	r3, [r3, #12]
 80099b0:	b29b      	uxth	r3, r3
 80099b2:	4618      	mov	r0, r3
 80099b4:	f7fb f84e 	bl	8004a54 <lwip_htons>
 80099b8:	4603      	mov	r3, r0
 80099ba:	b2db      	uxtb	r3, r3
 80099bc:	f003 0301 	and.w	r3, r3, #1
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d01f      	beq.n	8009a04 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80099c4:	4b65      	ldr	r3, [pc, #404]	; (8009b5c <tcp_receive+0x88c>)
 80099c6:	68db      	ldr	r3, [r3, #12]
 80099c8:	899b      	ldrh	r3, [r3, #12]
 80099ca:	b29b      	uxth	r3, r3
 80099cc:	b21b      	sxth	r3, r3
 80099ce:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80099d2:	b21c      	sxth	r4, r3
 80099d4:	4b61      	ldr	r3, [pc, #388]	; (8009b5c <tcp_receive+0x88c>)
 80099d6:	68db      	ldr	r3, [r3, #12]
 80099d8:	899b      	ldrh	r3, [r3, #12]
 80099da:	b29b      	uxth	r3, r3
 80099dc:	4618      	mov	r0, r3
 80099de:	f7fb f839 	bl	8004a54 <lwip_htons>
 80099e2:	4603      	mov	r3, r0
 80099e4:	b2db      	uxtb	r3, r3
 80099e6:	b29b      	uxth	r3, r3
 80099e8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80099ec:	b29b      	uxth	r3, r3
 80099ee:	4618      	mov	r0, r3
 80099f0:	f7fb f830 	bl	8004a54 <lwip_htons>
 80099f4:	4603      	mov	r3, r0
 80099f6:	b21b      	sxth	r3, r3
 80099f8:	4323      	orrs	r3, r4
 80099fa:	b21a      	sxth	r2, r3
 80099fc:	4b57      	ldr	r3, [pc, #348]	; (8009b5c <tcp_receive+0x88c>)
 80099fe:	68db      	ldr	r3, [r3, #12]
 8009a00:	b292      	uxth	r2, r2
 8009a02:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009a08:	4b54      	ldr	r3, [pc, #336]	; (8009b5c <tcp_receive+0x88c>)
 8009a0a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009a0c:	4b53      	ldr	r3, [pc, #332]	; (8009b5c <tcp_receive+0x88c>)
 8009a0e:	68db      	ldr	r3, [r3, #12]
 8009a10:	899b      	ldrh	r3, [r3, #12]
 8009a12:	b29b      	uxth	r3, r3
 8009a14:	4618      	mov	r0, r3
 8009a16:	f7fb f81d 	bl	8004a54 <lwip_htons>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	f003 0302 	and.w	r3, r3, #2
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d005      	beq.n	8009a32 <tcp_receive+0x762>
            inseg.len -= 1;
 8009a26:	4b4d      	ldr	r3, [pc, #308]	; (8009b5c <tcp_receive+0x88c>)
 8009a28:	891b      	ldrh	r3, [r3, #8]
 8009a2a:	3b01      	subs	r3, #1
 8009a2c:	b29a      	uxth	r2, r3
 8009a2e:	4b4b      	ldr	r3, [pc, #300]	; (8009b5c <tcp_receive+0x88c>)
 8009a30:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8009a32:	4b4a      	ldr	r3, [pc, #296]	; (8009b5c <tcp_receive+0x88c>)
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	4a49      	ldr	r2, [pc, #292]	; (8009b5c <tcp_receive+0x88c>)
 8009a38:	8912      	ldrh	r2, [r2, #8]
 8009a3a:	4611      	mov	r1, r2
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f7fc f9e1 	bl	8005e04 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8009a42:	4b46      	ldr	r3, [pc, #280]	; (8009b5c <tcp_receive+0x88c>)
 8009a44:	891c      	ldrh	r4, [r3, #8]
 8009a46:	4b45      	ldr	r3, [pc, #276]	; (8009b5c <tcp_receive+0x88c>)
 8009a48:	68db      	ldr	r3, [r3, #12]
 8009a4a:	899b      	ldrh	r3, [r3, #12]
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f7fb f800 	bl	8004a54 <lwip_htons>
 8009a54:	4603      	mov	r3, r0
 8009a56:	b2db      	uxtb	r3, r3
 8009a58:	f003 0303 	and.w	r3, r3, #3
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d001      	beq.n	8009a64 <tcp_receive+0x794>
 8009a60:	2301      	movs	r3, #1
 8009a62:	e000      	b.n	8009a66 <tcp_receive+0x796>
 8009a64:	2300      	movs	r3, #0
 8009a66:	4423      	add	r3, r4
 8009a68:	b29a      	uxth	r2, r3
 8009a6a:	4b3d      	ldr	r3, [pc, #244]	; (8009b60 <tcp_receive+0x890>)
 8009a6c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009a6e:	4b3c      	ldr	r3, [pc, #240]	; (8009b60 <tcp_receive+0x890>)
 8009a70:	881b      	ldrh	r3, [r3, #0]
 8009a72:	461a      	mov	r2, r3
 8009a74:	4b38      	ldr	r3, [pc, #224]	; (8009b58 <tcp_receive+0x888>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	441a      	add	r2, r3
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a7e:	6879      	ldr	r1, [r7, #4]
 8009a80:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009a82:	440b      	add	r3, r1
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d006      	beq.n	8009a96 <tcp_receive+0x7c6>
 8009a88:	4b36      	ldr	r3, [pc, #216]	; (8009b64 <tcp_receive+0x894>)
 8009a8a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8009a8e:	4936      	ldr	r1, [pc, #216]	; (8009b68 <tcp_receive+0x898>)
 8009a90:	4836      	ldr	r0, [pc, #216]	; (8009b6c <tcp_receive+0x89c>)
 8009a92:	f004 ff57 	bl	800e944 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	f000 80e7 	beq.w	8009c6e <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009aa0:	4b2e      	ldr	r3, [pc, #184]	; (8009b5c <tcp_receive+0x88c>)
 8009aa2:	68db      	ldr	r3, [r3, #12]
 8009aa4:	899b      	ldrh	r3, [r3, #12]
 8009aa6:	b29b      	uxth	r3, r3
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f7fa ffd3 	bl	8004a54 <lwip_htons>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	b2db      	uxtb	r3, r3
 8009ab2:	f003 0301 	and.w	r3, r3, #1
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d010      	beq.n	8009adc <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8009aba:	e00a      	b.n	8009ad2 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ac0:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ac6:	681a      	ldr	r2, [r3, #0]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8009acc:	68f8      	ldr	r0, [r7, #12]
 8009ace:	f7fd fd92 	bl	80075f6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d1f0      	bne.n	8009abc <tcp_receive+0x7ec>
 8009ada:	e0c8      	b.n	8009c6e <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8009ae2:	e052      	b.n	8009b8a <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ae6:	68db      	ldr	r3, [r3, #12]
 8009ae8:	899b      	ldrh	r3, [r3, #12]
 8009aea:	b29b      	uxth	r3, r3
 8009aec:	4618      	mov	r0, r3
 8009aee:	f7fa ffb1 	bl	8004a54 <lwip_htons>
 8009af2:	4603      	mov	r3, r0
 8009af4:	b2db      	uxtb	r3, r3
 8009af6:	f003 0301 	and.w	r3, r3, #1
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d03d      	beq.n	8009b7a <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8009afe:	4b17      	ldr	r3, [pc, #92]	; (8009b5c <tcp_receive+0x88c>)
 8009b00:	68db      	ldr	r3, [r3, #12]
 8009b02:	899b      	ldrh	r3, [r3, #12]
 8009b04:	b29b      	uxth	r3, r3
 8009b06:	4618      	mov	r0, r3
 8009b08:	f7fa ffa4 	bl	8004a54 <lwip_htons>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	b2db      	uxtb	r3, r3
 8009b10:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d130      	bne.n	8009b7a <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009b18:	4b10      	ldr	r3, [pc, #64]	; (8009b5c <tcp_receive+0x88c>)
 8009b1a:	68db      	ldr	r3, [r3, #12]
 8009b1c:	899b      	ldrh	r3, [r3, #12]
 8009b1e:	b29c      	uxth	r4, r3
 8009b20:	2001      	movs	r0, #1
 8009b22:	f7fa ff97 	bl	8004a54 <lwip_htons>
 8009b26:	4603      	mov	r3, r0
 8009b28:	461a      	mov	r2, r3
 8009b2a:	4b0c      	ldr	r3, [pc, #48]	; (8009b5c <tcp_receive+0x88c>)
 8009b2c:	68db      	ldr	r3, [r3, #12]
 8009b2e:	4322      	orrs	r2, r4
 8009b30:	b292      	uxth	r2, r2
 8009b32:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8009b34:	4b09      	ldr	r3, [pc, #36]	; (8009b5c <tcp_receive+0x88c>)
 8009b36:	891c      	ldrh	r4, [r3, #8]
 8009b38:	4b08      	ldr	r3, [pc, #32]	; (8009b5c <tcp_receive+0x88c>)
 8009b3a:	68db      	ldr	r3, [r3, #12]
 8009b3c:	899b      	ldrh	r3, [r3, #12]
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	4618      	mov	r0, r3
 8009b42:	f7fa ff87 	bl	8004a54 <lwip_htons>
 8009b46:	4603      	mov	r3, r0
 8009b48:	b2db      	uxtb	r3, r3
 8009b4a:	f003 0303 	and.w	r3, r3, #3
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d00e      	beq.n	8009b70 <tcp_receive+0x8a0>
 8009b52:	2301      	movs	r3, #1
 8009b54:	e00d      	b.n	8009b72 <tcp_receive+0x8a2>
 8009b56:	bf00      	nop
 8009b58:	2000a4ec 	.word	0x2000a4ec
 8009b5c:	2000a4cc 	.word	0x2000a4cc
 8009b60:	2000a4f6 	.word	0x2000a4f6
 8009b64:	080109d8 	.word	0x080109d8
 8009b68:	08010d80 	.word	0x08010d80
 8009b6c:	08010a24 	.word	0x08010a24
 8009b70:	2300      	movs	r3, #0
 8009b72:	4423      	add	r3, r4
 8009b74:	b29a      	uxth	r2, r3
 8009b76:	4b98      	ldr	r3, [pc, #608]	; (8009dd8 <tcp_receive+0xb08>)
 8009b78:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8009b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b7c:	613b      	str	r3, [r7, #16]
              next = next->next;
 8009b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8009b84:	6938      	ldr	r0, [r7, #16]
 8009b86:	f7fd fd36 	bl	80075f6 <tcp_seg_free>
            while (next &&
 8009b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d00e      	beq.n	8009bae <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009b90:	4b91      	ldr	r3, [pc, #580]	; (8009dd8 <tcp_receive+0xb08>)
 8009b92:	881b      	ldrh	r3, [r3, #0]
 8009b94:	461a      	mov	r2, r3
 8009b96:	4b91      	ldr	r3, [pc, #580]	; (8009ddc <tcp_receive+0xb0c>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	441a      	add	r2, r3
 8009b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b9e:	68db      	ldr	r3, [r3, #12]
 8009ba0:	685b      	ldr	r3, [r3, #4]
 8009ba2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009ba4:	8909      	ldrh	r1, [r1, #8]
 8009ba6:	440b      	add	r3, r1
 8009ba8:	1ad3      	subs	r3, r2, r3
            while (next &&
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	da9a      	bge.n	8009ae4 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8009bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d059      	beq.n	8009c68 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8009bb4:	4b88      	ldr	r3, [pc, #544]	; (8009dd8 <tcp_receive+0xb08>)
 8009bb6:	881b      	ldrh	r3, [r3, #0]
 8009bb8:	461a      	mov	r2, r3
 8009bba:	4b88      	ldr	r3, [pc, #544]	; (8009ddc <tcp_receive+0xb0c>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	441a      	add	r2, r3
 8009bc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bc2:	68db      	ldr	r3, [r3, #12]
 8009bc4:	685b      	ldr	r3, [r3, #4]
 8009bc6:	1ad3      	subs	r3, r2, r3
            if (next &&
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	dd4d      	ble.n	8009c68 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8009bcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bce:	68db      	ldr	r3, [r3, #12]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	b29a      	uxth	r2, r3
 8009bd4:	4b81      	ldr	r3, [pc, #516]	; (8009ddc <tcp_receive+0xb0c>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	b29b      	uxth	r3, r3
 8009bda:	1ad3      	subs	r3, r2, r3
 8009bdc:	b29a      	uxth	r2, r3
 8009bde:	4b80      	ldr	r3, [pc, #512]	; (8009de0 <tcp_receive+0xb10>)
 8009be0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009be2:	4b7f      	ldr	r3, [pc, #508]	; (8009de0 <tcp_receive+0xb10>)
 8009be4:	68db      	ldr	r3, [r3, #12]
 8009be6:	899b      	ldrh	r3, [r3, #12]
 8009be8:	b29b      	uxth	r3, r3
 8009bea:	4618      	mov	r0, r3
 8009bec:	f7fa ff32 	bl	8004a54 <lwip_htons>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	b2db      	uxtb	r3, r3
 8009bf4:	f003 0302 	and.w	r3, r3, #2
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d005      	beq.n	8009c08 <tcp_receive+0x938>
                inseg.len -= 1;
 8009bfc:	4b78      	ldr	r3, [pc, #480]	; (8009de0 <tcp_receive+0xb10>)
 8009bfe:	891b      	ldrh	r3, [r3, #8]
 8009c00:	3b01      	subs	r3, #1
 8009c02:	b29a      	uxth	r2, r3
 8009c04:	4b76      	ldr	r3, [pc, #472]	; (8009de0 <tcp_receive+0xb10>)
 8009c06:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8009c08:	4b75      	ldr	r3, [pc, #468]	; (8009de0 <tcp_receive+0xb10>)
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	4a74      	ldr	r2, [pc, #464]	; (8009de0 <tcp_receive+0xb10>)
 8009c0e:	8912      	ldrh	r2, [r2, #8]
 8009c10:	4611      	mov	r1, r2
 8009c12:	4618      	mov	r0, r3
 8009c14:	f7fc f8f6 	bl	8005e04 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8009c18:	4b71      	ldr	r3, [pc, #452]	; (8009de0 <tcp_receive+0xb10>)
 8009c1a:	891c      	ldrh	r4, [r3, #8]
 8009c1c:	4b70      	ldr	r3, [pc, #448]	; (8009de0 <tcp_receive+0xb10>)
 8009c1e:	68db      	ldr	r3, [r3, #12]
 8009c20:	899b      	ldrh	r3, [r3, #12]
 8009c22:	b29b      	uxth	r3, r3
 8009c24:	4618      	mov	r0, r3
 8009c26:	f7fa ff15 	bl	8004a54 <lwip_htons>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	b2db      	uxtb	r3, r3
 8009c2e:	f003 0303 	and.w	r3, r3, #3
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d001      	beq.n	8009c3a <tcp_receive+0x96a>
 8009c36:	2301      	movs	r3, #1
 8009c38:	e000      	b.n	8009c3c <tcp_receive+0x96c>
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	4423      	add	r3, r4
 8009c3e:	b29a      	uxth	r2, r3
 8009c40:	4b65      	ldr	r3, [pc, #404]	; (8009dd8 <tcp_receive+0xb08>)
 8009c42:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8009c44:	4b64      	ldr	r3, [pc, #400]	; (8009dd8 <tcp_receive+0xb08>)
 8009c46:	881b      	ldrh	r3, [r3, #0]
 8009c48:	461a      	mov	r2, r3
 8009c4a:	4b64      	ldr	r3, [pc, #400]	; (8009ddc <tcp_receive+0xb0c>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	441a      	add	r2, r3
 8009c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c52:	68db      	ldr	r3, [r3, #12]
 8009c54:	685b      	ldr	r3, [r3, #4]
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d006      	beq.n	8009c68 <tcp_receive+0x998>
 8009c5a:	4b62      	ldr	r3, [pc, #392]	; (8009de4 <tcp_receive+0xb14>)
 8009c5c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8009c60:	4961      	ldr	r1, [pc, #388]	; (8009de8 <tcp_receive+0xb18>)
 8009c62:	4862      	ldr	r0, [pc, #392]	; (8009dec <tcp_receive+0xb1c>)
 8009c64:	f004 fe6e 	bl	800e944 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009c6c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8009c6e:	4b5a      	ldr	r3, [pc, #360]	; (8009dd8 <tcp_receive+0xb08>)
 8009c70:	881b      	ldrh	r3, [r3, #0]
 8009c72:	461a      	mov	r2, r3
 8009c74:	4b59      	ldr	r3, [pc, #356]	; (8009ddc <tcp_receive+0xb0c>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	441a      	add	r2, r3
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009c82:	4b55      	ldr	r3, [pc, #340]	; (8009dd8 <tcp_receive+0xb08>)
 8009c84:	881b      	ldrh	r3, [r3, #0]
 8009c86:	429a      	cmp	r2, r3
 8009c88:	d206      	bcs.n	8009c98 <tcp_receive+0x9c8>
 8009c8a:	4b56      	ldr	r3, [pc, #344]	; (8009de4 <tcp_receive+0xb14>)
 8009c8c:	f240 6207 	movw	r2, #1543	; 0x607
 8009c90:	4957      	ldr	r1, [pc, #348]	; (8009df0 <tcp_receive+0xb20>)
 8009c92:	4856      	ldr	r0, [pc, #344]	; (8009dec <tcp_receive+0xb1c>)
 8009c94:	f004 fe56 	bl	800e944 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009c9c:	4b4e      	ldr	r3, [pc, #312]	; (8009dd8 <tcp_receive+0xb08>)
 8009c9e:	881b      	ldrh	r3, [r3, #0]
 8009ca0:	1ad3      	subs	r3, r2, r3
 8009ca2:	b29a      	uxth	r2, r3
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f7fc ffc5 	bl	8006c38 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8009cae:	4b4c      	ldr	r3, [pc, #304]	; (8009de0 <tcp_receive+0xb10>)
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	891b      	ldrh	r3, [r3, #8]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d006      	beq.n	8009cc6 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8009cb8:	4b49      	ldr	r3, [pc, #292]	; (8009de0 <tcp_receive+0xb10>)
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	4a4d      	ldr	r2, [pc, #308]	; (8009df4 <tcp_receive+0xb24>)
 8009cbe:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8009cc0:	4b47      	ldr	r3, [pc, #284]	; (8009de0 <tcp_receive+0xb10>)
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009cc6:	4b46      	ldr	r3, [pc, #280]	; (8009de0 <tcp_receive+0xb10>)
 8009cc8:	68db      	ldr	r3, [r3, #12]
 8009cca:	899b      	ldrh	r3, [r3, #12]
 8009ccc:	b29b      	uxth	r3, r3
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f7fa fec0 	bl	8004a54 <lwip_htons>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	b2db      	uxtb	r3, r3
 8009cd8:	f003 0301 	and.w	r3, r3, #1
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	f000 80b8 	beq.w	8009e52 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8009ce2:	4b45      	ldr	r3, [pc, #276]	; (8009df8 <tcp_receive+0xb28>)
 8009ce4:	781b      	ldrb	r3, [r3, #0]
 8009ce6:	f043 0320 	orr.w	r3, r3, #32
 8009cea:	b2da      	uxtb	r2, r3
 8009cec:	4b42      	ldr	r3, [pc, #264]	; (8009df8 <tcp_receive+0xb28>)
 8009cee:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8009cf0:	e0af      	b.n	8009e52 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cf6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cfc:	68db      	ldr	r3, [r3, #12]
 8009cfe:	685b      	ldr	r3, [r3, #4]
 8009d00:	4a36      	ldr	r2, [pc, #216]	; (8009ddc <tcp_receive+0xb0c>)
 8009d02:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	891b      	ldrh	r3, [r3, #8]
 8009d08:	461c      	mov	r4, r3
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	68db      	ldr	r3, [r3, #12]
 8009d0e:	899b      	ldrh	r3, [r3, #12]
 8009d10:	b29b      	uxth	r3, r3
 8009d12:	4618      	mov	r0, r3
 8009d14:	f7fa fe9e 	bl	8004a54 <lwip_htons>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	b2db      	uxtb	r3, r3
 8009d1c:	f003 0303 	and.w	r3, r3, #3
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d001      	beq.n	8009d28 <tcp_receive+0xa58>
 8009d24:	2301      	movs	r3, #1
 8009d26:	e000      	b.n	8009d2a <tcp_receive+0xa5a>
 8009d28:	2300      	movs	r3, #0
 8009d2a:	191a      	adds	r2, r3, r4
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d30:	441a      	add	r2, r3
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d3a:	461c      	mov	r4, r3
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	891b      	ldrh	r3, [r3, #8]
 8009d40:	461d      	mov	r5, r3
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	68db      	ldr	r3, [r3, #12]
 8009d46:	899b      	ldrh	r3, [r3, #12]
 8009d48:	b29b      	uxth	r3, r3
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f7fa fe82 	bl	8004a54 <lwip_htons>
 8009d50:	4603      	mov	r3, r0
 8009d52:	b2db      	uxtb	r3, r3
 8009d54:	f003 0303 	and.w	r3, r3, #3
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d001      	beq.n	8009d60 <tcp_receive+0xa90>
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	e000      	b.n	8009d62 <tcp_receive+0xa92>
 8009d60:	2300      	movs	r3, #0
 8009d62:	442b      	add	r3, r5
 8009d64:	429c      	cmp	r4, r3
 8009d66:	d206      	bcs.n	8009d76 <tcp_receive+0xaa6>
 8009d68:	4b1e      	ldr	r3, [pc, #120]	; (8009de4 <tcp_receive+0xb14>)
 8009d6a:	f240 622b 	movw	r2, #1579	; 0x62b
 8009d6e:	4923      	ldr	r1, [pc, #140]	; (8009dfc <tcp_receive+0xb2c>)
 8009d70:	481e      	ldr	r0, [pc, #120]	; (8009dec <tcp_receive+0xb1c>)
 8009d72:	f004 fde7 	bl	800e944 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	891b      	ldrh	r3, [r3, #8]
 8009d7a:	461c      	mov	r4, r3
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	68db      	ldr	r3, [r3, #12]
 8009d80:	899b      	ldrh	r3, [r3, #12]
 8009d82:	b29b      	uxth	r3, r3
 8009d84:	4618      	mov	r0, r3
 8009d86:	f7fa fe65 	bl	8004a54 <lwip_htons>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	b2db      	uxtb	r3, r3
 8009d8e:	f003 0303 	and.w	r3, r3, #3
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d001      	beq.n	8009d9a <tcp_receive+0xaca>
 8009d96:	2301      	movs	r3, #1
 8009d98:	e000      	b.n	8009d9c <tcp_receive+0xacc>
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	1919      	adds	r1, r3, r4
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009da2:	b28b      	uxth	r3, r1
 8009da4:	1ad3      	subs	r3, r2, r3
 8009da6:	b29a      	uxth	r2, r3
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f7fc ff43 	bl	8006c38 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	891b      	ldrh	r3, [r3, #8]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d028      	beq.n	8009e0e <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8009dbc:	4b0d      	ldr	r3, [pc, #52]	; (8009df4 <tcp_receive+0xb24>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d01d      	beq.n	8009e00 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8009dc4:	4b0b      	ldr	r3, [pc, #44]	; (8009df4 <tcp_receive+0xb24>)
 8009dc6:	681a      	ldr	r2, [r3, #0]
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	4619      	mov	r1, r3
 8009dce:	4610      	mov	r0, r2
 8009dd0:	f7fc fa60 	bl	8006294 <pbuf_cat>
 8009dd4:	e018      	b.n	8009e08 <tcp_receive+0xb38>
 8009dd6:	bf00      	nop
 8009dd8:	2000a4f6 	.word	0x2000a4f6
 8009ddc:	2000a4ec 	.word	0x2000a4ec
 8009de0:	2000a4cc 	.word	0x2000a4cc
 8009de4:	080109d8 	.word	0x080109d8
 8009de8:	08010db8 	.word	0x08010db8
 8009dec:	08010a24 	.word	0x08010a24
 8009df0:	08010df4 	.word	0x08010df4
 8009df4:	2000a4fc 	.word	0x2000a4fc
 8009df8:	2000a4f9 	.word	0x2000a4f9
 8009dfc:	08010e14 	.word	0x08010e14
            } else {
              recv_data = cseg->p;
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	4a70      	ldr	r2, [pc, #448]	; (8009fc8 <tcp_receive+0xcf8>)
 8009e06:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	68db      	ldr	r3, [r3, #12]
 8009e12:	899b      	ldrh	r3, [r3, #12]
 8009e14:	b29b      	uxth	r3, r3
 8009e16:	4618      	mov	r0, r3
 8009e18:	f7fa fe1c 	bl	8004a54 <lwip_htons>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	b2db      	uxtb	r3, r3
 8009e20:	f003 0301 	and.w	r3, r3, #1
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d00d      	beq.n	8009e44 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8009e28:	4b68      	ldr	r3, [pc, #416]	; (8009fcc <tcp_receive+0xcfc>)
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	f043 0320 	orr.w	r3, r3, #32
 8009e30:	b2da      	uxtb	r2, r3
 8009e32:	4b66      	ldr	r3, [pc, #408]	; (8009fcc <tcp_receive+0xcfc>)
 8009e34:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	7d1b      	ldrb	r3, [r3, #20]
 8009e3a:	2b04      	cmp	r3, #4
 8009e3c:	d102      	bne.n	8009e44 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2207      	movs	r2, #7
 8009e42:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	681a      	ldr	r2, [r3, #0]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8009e4c:	68b8      	ldr	r0, [r7, #8]
 8009e4e:	f7fd fbd2 	bl	80075f6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d008      	beq.n	8009e6c <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e5e:	68db      	ldr	r3, [r3, #12]
 8009e60:	685a      	ldr	r2, [r3, #4]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8009e66:	429a      	cmp	r2, r3
 8009e68:	f43f af43 	beq.w	8009cf2 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	8b5b      	ldrh	r3, [r3, #26]
 8009e70:	f003 0301 	and.w	r3, r3, #1
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d00e      	beq.n	8009e96 <tcp_receive+0xbc6>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	8b5b      	ldrh	r3, [r3, #26]
 8009e7c:	f023 0301 	bic.w	r3, r3, #1
 8009e80:	b29a      	uxth	r2, r3
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	835a      	strh	r2, [r3, #26]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	8b5b      	ldrh	r3, [r3, #26]
 8009e8a:	f043 0302 	orr.w	r3, r3, #2
 8009e8e:	b29a      	uxth	r2, r3
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009e94:	e188      	b.n	800a1a8 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	8b5b      	ldrh	r3, [r3, #26]
 8009e9a:	f043 0301 	orr.w	r3, r3, #1
 8009e9e:	b29a      	uxth	r2, r3
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009ea4:	e180      	b.n	800a1a8 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d106      	bne.n	8009ebc <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8009eae:	4848      	ldr	r0, [pc, #288]	; (8009fd0 <tcp_receive+0xd00>)
 8009eb0:	f7fd fbba 	bl	8007628 <tcp_seg_copy>
 8009eb4:	4602      	mov	r2, r0
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	675a      	str	r2, [r3, #116]	; 0x74
 8009eba:	e16d      	b.n	800a198 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ec4:	63bb      	str	r3, [r7, #56]	; 0x38
 8009ec6:	e157      	b.n	800a178 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8009ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eca:	68db      	ldr	r3, [r3, #12]
 8009ecc:	685a      	ldr	r2, [r3, #4]
 8009ece:	4b41      	ldr	r3, [pc, #260]	; (8009fd4 <tcp_receive+0xd04>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d11d      	bne.n	8009f12 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8009ed6:	4b3e      	ldr	r3, [pc, #248]	; (8009fd0 <tcp_receive+0xd00>)
 8009ed8:	891a      	ldrh	r2, [r3, #8]
 8009eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009edc:	891b      	ldrh	r3, [r3, #8]
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	f240 814f 	bls.w	800a182 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009ee4:	483a      	ldr	r0, [pc, #232]	; (8009fd0 <tcp_receive+0xd00>)
 8009ee6:	f7fd fb9f 	bl	8007628 <tcp_seg_copy>
 8009eea:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	f000 8149 	beq.w	800a186 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8009ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d003      	beq.n	8009f02 <tcp_receive+0xc32>
                    prev->next = cseg;
 8009efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009efc:	697a      	ldr	r2, [r7, #20]
 8009efe:	601a      	str	r2, [r3, #0]
 8009f00:	e002      	b.n	8009f08 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	697a      	ldr	r2, [r7, #20]
 8009f06:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8009f08:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009f0a:	6978      	ldr	r0, [r7, #20]
 8009f0c:	f7ff f8dc 	bl	80090c8 <tcp_oos_insert_segment>
                }
                break;
 8009f10:	e139      	b.n	800a186 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8009f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d117      	bne.n	8009f48 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8009f18:	4b2e      	ldr	r3, [pc, #184]	; (8009fd4 <tcp_receive+0xd04>)
 8009f1a:	681a      	ldr	r2, [r3, #0]
 8009f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f1e:	68db      	ldr	r3, [r3, #12]
 8009f20:	685b      	ldr	r3, [r3, #4]
 8009f22:	1ad3      	subs	r3, r2, r3
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	da57      	bge.n	8009fd8 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009f28:	4829      	ldr	r0, [pc, #164]	; (8009fd0 <tcp_receive+0xd00>)
 8009f2a:	f7fd fb7d 	bl	8007628 <tcp_seg_copy>
 8009f2e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8009f30:	69bb      	ldr	r3, [r7, #24]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	f000 8129 	beq.w	800a18a <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	69ba      	ldr	r2, [r7, #24]
 8009f3c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8009f3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009f40:	69b8      	ldr	r0, [r7, #24]
 8009f42:	f7ff f8c1 	bl	80090c8 <tcp_oos_insert_segment>
                  }
                  break;
 8009f46:	e120      	b.n	800a18a <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8009f48:	4b22      	ldr	r3, [pc, #136]	; (8009fd4 <tcp_receive+0xd04>)
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f4e:	68db      	ldr	r3, [r3, #12]
 8009f50:	685b      	ldr	r3, [r3, #4]
 8009f52:	1ad3      	subs	r3, r2, r3
 8009f54:	3b01      	subs	r3, #1
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	db3e      	blt.n	8009fd8 <tcp_receive+0xd08>
 8009f5a:	4b1e      	ldr	r3, [pc, #120]	; (8009fd4 <tcp_receive+0xd04>)
 8009f5c:	681a      	ldr	r2, [r3, #0]
 8009f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f60:	68db      	ldr	r3, [r3, #12]
 8009f62:	685b      	ldr	r3, [r3, #4]
 8009f64:	1ad3      	subs	r3, r2, r3
 8009f66:	3301      	adds	r3, #1
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	dc35      	bgt.n	8009fd8 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009f6c:	4818      	ldr	r0, [pc, #96]	; (8009fd0 <tcp_receive+0xd00>)
 8009f6e:	f7fd fb5b 	bl	8007628 <tcp_seg_copy>
 8009f72:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8009f74:	69fb      	ldr	r3, [r7, #28]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	f000 8109 	beq.w	800a18e <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8009f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f7e:	68db      	ldr	r3, [r3, #12]
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f84:	8912      	ldrh	r2, [r2, #8]
 8009f86:	441a      	add	r2, r3
 8009f88:	4b12      	ldr	r3, [pc, #72]	; (8009fd4 <tcp_receive+0xd04>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	1ad3      	subs	r3, r2, r3
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	dd12      	ble.n	8009fb8 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8009f92:	4b10      	ldr	r3, [pc, #64]	; (8009fd4 <tcp_receive+0xd04>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	b29a      	uxth	r2, r3
 8009f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f9a:	68db      	ldr	r3, [r3, #12]
 8009f9c:	685b      	ldr	r3, [r3, #4]
 8009f9e:	b29b      	uxth	r3, r3
 8009fa0:	1ad3      	subs	r3, r2, r3
 8009fa2:	b29a      	uxth	r2, r3
 8009fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fa6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8009fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009faa:	685a      	ldr	r2, [r3, #4]
 8009fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fae:	891b      	ldrh	r3, [r3, #8]
 8009fb0:	4619      	mov	r1, r3
 8009fb2:	4610      	mov	r0, r2
 8009fb4:	f7fb ff26 	bl	8005e04 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8009fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fba:	69fa      	ldr	r2, [r7, #28]
 8009fbc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8009fbe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009fc0:	69f8      	ldr	r0, [r7, #28]
 8009fc2:	f7ff f881 	bl	80090c8 <tcp_oos_insert_segment>
                  }
                  break;
 8009fc6:	e0e2      	b.n	800a18e <tcp_receive+0xebe>
 8009fc8:	2000a4fc 	.word	0x2000a4fc
 8009fcc:	2000a4f9 	.word	0x2000a4f9
 8009fd0:	2000a4cc 	.word	0x2000a4cc
 8009fd4:	2000a4ec 	.word	0x2000a4ec
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8009fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fda:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8009fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	f040 80c6 	bne.w	800a172 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8009fe6:	4b80      	ldr	r3, [pc, #512]	; (800a1e8 <tcp_receive+0xf18>)
 8009fe8:	681a      	ldr	r2, [r3, #0]
 8009fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fec:	68db      	ldr	r3, [r3, #12]
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	f340 80bd 	ble.w	800a172 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ffa:	68db      	ldr	r3, [r3, #12]
 8009ffc:	899b      	ldrh	r3, [r3, #12]
 8009ffe:	b29b      	uxth	r3, r3
 800a000:	4618      	mov	r0, r3
 800a002:	f7fa fd27 	bl	8004a54 <lwip_htons>
 800a006:	4603      	mov	r3, r0
 800a008:	b2db      	uxtb	r3, r3
 800a00a:	f003 0301 	and.w	r3, r3, #1
 800a00e:	2b00      	cmp	r3, #0
 800a010:	f040 80bf 	bne.w	800a192 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800a014:	4875      	ldr	r0, [pc, #468]	; (800a1ec <tcp_receive+0xf1c>)
 800a016:	f7fd fb07 	bl	8007628 <tcp_seg_copy>
 800a01a:	4602      	mov	r2, r0
 800a01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a01e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800a020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	2b00      	cmp	r3, #0
 800a026:	f000 80b6 	beq.w	800a196 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800a02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a02c:	68db      	ldr	r3, [r3, #12]
 800a02e:	685b      	ldr	r3, [r3, #4]
 800a030:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a032:	8912      	ldrh	r2, [r2, #8]
 800a034:	441a      	add	r2, r3
 800a036:	4b6c      	ldr	r3, [pc, #432]	; (800a1e8 <tcp_receive+0xf18>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	1ad3      	subs	r3, r2, r3
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	dd12      	ble.n	800a066 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800a040:	4b69      	ldr	r3, [pc, #420]	; (800a1e8 <tcp_receive+0xf18>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	b29a      	uxth	r2, r3
 800a046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a048:	68db      	ldr	r3, [r3, #12]
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	b29b      	uxth	r3, r3
 800a04e:	1ad3      	subs	r3, r2, r3
 800a050:	b29a      	uxth	r2, r3
 800a052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a054:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800a056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a058:	685a      	ldr	r2, [r3, #4]
 800a05a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a05c:	891b      	ldrh	r3, [r3, #8]
 800a05e:	4619      	mov	r1, r3
 800a060:	4610      	mov	r0, r2
 800a062:	f7fb fecf 	bl	8005e04 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800a066:	4b62      	ldr	r3, [pc, #392]	; (800a1f0 <tcp_receive+0xf20>)
 800a068:	881b      	ldrh	r3, [r3, #0]
 800a06a:	461a      	mov	r2, r3
 800a06c:	4b5e      	ldr	r3, [pc, #376]	; (800a1e8 <tcp_receive+0xf18>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	441a      	add	r2, r3
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a076:	6879      	ldr	r1, [r7, #4]
 800a078:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a07a:	440b      	add	r3, r1
 800a07c:	1ad3      	subs	r3, r2, r3
 800a07e:	2b00      	cmp	r3, #0
 800a080:	f340 8089 	ble.w	800a196 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800a084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	68db      	ldr	r3, [r3, #12]
 800a08a:	899b      	ldrh	r3, [r3, #12]
 800a08c:	b29b      	uxth	r3, r3
 800a08e:	4618      	mov	r0, r3
 800a090:	f7fa fce0 	bl	8004a54 <lwip_htons>
 800a094:	4603      	mov	r3, r0
 800a096:	b2db      	uxtb	r3, r3
 800a098:	f003 0301 	and.w	r3, r3, #1
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d022      	beq.n	800a0e6 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800a0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	68db      	ldr	r3, [r3, #12]
 800a0a6:	899b      	ldrh	r3, [r3, #12]
 800a0a8:	b29b      	uxth	r3, r3
 800a0aa:	b21b      	sxth	r3, r3
 800a0ac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a0b0:	b21c      	sxth	r4, r3
 800a0b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	68db      	ldr	r3, [r3, #12]
 800a0b8:	899b      	ldrh	r3, [r3, #12]
 800a0ba:	b29b      	uxth	r3, r3
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f7fa fcc9 	bl	8004a54 <lwip_htons>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	b2db      	uxtb	r3, r3
 800a0c6:	b29b      	uxth	r3, r3
 800a0c8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a0cc:	b29b      	uxth	r3, r3
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f7fa fcc0 	bl	8004a54 <lwip_htons>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	b21b      	sxth	r3, r3
 800a0d8:	4323      	orrs	r3, r4
 800a0da:	b21a      	sxth	r2, r3
 800a0dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	68db      	ldr	r3, [r3, #12]
 800a0e2:	b292      	uxth	r2, r2
 800a0e4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ea:	b29a      	uxth	r2, r3
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0f0:	4413      	add	r3, r2
 800a0f2:	b299      	uxth	r1, r3
 800a0f4:	4b3c      	ldr	r3, [pc, #240]	; (800a1e8 <tcp_receive+0xf18>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	b29a      	uxth	r2, r3
 800a0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	1a8a      	subs	r2, r1, r2
 800a100:	b292      	uxth	r2, r2
 800a102:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800a104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	685a      	ldr	r2, [r3, #4]
 800a10a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	891b      	ldrh	r3, [r3, #8]
 800a110:	4619      	mov	r1, r3
 800a112:	4610      	mov	r0, r2
 800a114:	f7fb fe76 	bl	8005e04 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800a118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	891c      	ldrh	r4, [r3, #8]
 800a11e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	68db      	ldr	r3, [r3, #12]
 800a124:	899b      	ldrh	r3, [r3, #12]
 800a126:	b29b      	uxth	r3, r3
 800a128:	4618      	mov	r0, r3
 800a12a:	f7fa fc93 	bl	8004a54 <lwip_htons>
 800a12e:	4603      	mov	r3, r0
 800a130:	b2db      	uxtb	r3, r3
 800a132:	f003 0303 	and.w	r3, r3, #3
 800a136:	2b00      	cmp	r3, #0
 800a138:	d001      	beq.n	800a13e <tcp_receive+0xe6e>
 800a13a:	2301      	movs	r3, #1
 800a13c:	e000      	b.n	800a140 <tcp_receive+0xe70>
 800a13e:	2300      	movs	r3, #0
 800a140:	4423      	add	r3, r4
 800a142:	b29a      	uxth	r2, r3
 800a144:	4b2a      	ldr	r3, [pc, #168]	; (800a1f0 <tcp_receive+0xf20>)
 800a146:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a148:	4b29      	ldr	r3, [pc, #164]	; (800a1f0 <tcp_receive+0xf20>)
 800a14a:	881b      	ldrh	r3, [r3, #0]
 800a14c:	461a      	mov	r2, r3
 800a14e:	4b26      	ldr	r3, [pc, #152]	; (800a1e8 <tcp_receive+0xf18>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	441a      	add	r2, r3
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a158:	6879      	ldr	r1, [r7, #4]
 800a15a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a15c:	440b      	add	r3, r1
 800a15e:	429a      	cmp	r2, r3
 800a160:	d019      	beq.n	800a196 <tcp_receive+0xec6>
 800a162:	4b24      	ldr	r3, [pc, #144]	; (800a1f4 <tcp_receive+0xf24>)
 800a164:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800a168:	4923      	ldr	r1, [pc, #140]	; (800a1f8 <tcp_receive+0xf28>)
 800a16a:	4824      	ldr	r0, [pc, #144]	; (800a1fc <tcp_receive+0xf2c>)
 800a16c:	f004 fbea 	bl	800e944 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800a170:	e011      	b.n	800a196 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	63bb      	str	r3, [r7, #56]	; 0x38
 800a178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	f47f aea4 	bne.w	8009ec8 <tcp_receive+0xbf8>
 800a180:	e00a      	b.n	800a198 <tcp_receive+0xec8>
                break;
 800a182:	bf00      	nop
 800a184:	e008      	b.n	800a198 <tcp_receive+0xec8>
                break;
 800a186:	bf00      	nop
 800a188:	e006      	b.n	800a198 <tcp_receive+0xec8>
                  break;
 800a18a:	bf00      	nop
 800a18c:	e004      	b.n	800a198 <tcp_receive+0xec8>
                  break;
 800a18e:	bf00      	nop
 800a190:	e002      	b.n	800a198 <tcp_receive+0xec8>
                  break;
 800a192:	bf00      	nop
 800a194:	e000      	b.n	800a198 <tcp_receive+0xec8>
                break;
 800a196:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f001 fa33 	bl	800b604 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800a19e:	e003      	b.n	800a1a8 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f001 fa2f 	bl	800b604 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a1a6:	e01a      	b.n	800a1de <tcp_receive+0xf0e>
 800a1a8:	e019      	b.n	800a1de <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a1aa:	4b0f      	ldr	r3, [pc, #60]	; (800a1e8 <tcp_receive+0xf18>)
 800a1ac:	681a      	ldr	r2, [r3, #0]
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b2:	1ad3      	subs	r3, r2, r3
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	db0a      	blt.n	800a1ce <tcp_receive+0xefe>
 800a1b8:	4b0b      	ldr	r3, [pc, #44]	; (800a1e8 <tcp_receive+0xf18>)
 800a1ba:	681a      	ldr	r2, [r3, #0]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1c0:	6879      	ldr	r1, [r7, #4]
 800a1c2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a1c4:	440b      	add	r3, r1
 800a1c6:	1ad3      	subs	r3, r2, r3
 800a1c8:	3301      	adds	r3, #1
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	dd07      	ble.n	800a1de <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	8b5b      	ldrh	r3, [r3, #26]
 800a1d2:	f043 0302 	orr.w	r3, r3, #2
 800a1d6:	b29a      	uxth	r2, r3
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800a1dc:	e7ff      	b.n	800a1de <tcp_receive+0xf0e>
 800a1de:	bf00      	nop
 800a1e0:	3750      	adds	r7, #80	; 0x50
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bdb0      	pop	{r4, r5, r7, pc}
 800a1e6:	bf00      	nop
 800a1e8:	2000a4ec 	.word	0x2000a4ec
 800a1ec:	2000a4cc 	.word	0x2000a4cc
 800a1f0:	2000a4f6 	.word	0x2000a4f6
 800a1f4:	080109d8 	.word	0x080109d8
 800a1f8:	08010d80 	.word	0x08010d80
 800a1fc:	08010a24 	.word	0x08010a24

0800a200 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800a200:	b480      	push	{r7}
 800a202:	b083      	sub	sp, #12
 800a204:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800a206:	4b15      	ldr	r3, [pc, #84]	; (800a25c <tcp_get_next_optbyte+0x5c>)
 800a208:	881b      	ldrh	r3, [r3, #0]
 800a20a:	1c5a      	adds	r2, r3, #1
 800a20c:	b291      	uxth	r1, r2
 800a20e:	4a13      	ldr	r2, [pc, #76]	; (800a25c <tcp_get_next_optbyte+0x5c>)
 800a210:	8011      	strh	r1, [r2, #0]
 800a212:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a214:	4b12      	ldr	r3, [pc, #72]	; (800a260 <tcp_get_next_optbyte+0x60>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d004      	beq.n	800a226 <tcp_get_next_optbyte+0x26>
 800a21c:	4b11      	ldr	r3, [pc, #68]	; (800a264 <tcp_get_next_optbyte+0x64>)
 800a21e:	881b      	ldrh	r3, [r3, #0]
 800a220:	88fa      	ldrh	r2, [r7, #6]
 800a222:	429a      	cmp	r2, r3
 800a224:	d208      	bcs.n	800a238 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800a226:	4b10      	ldr	r3, [pc, #64]	; (800a268 <tcp_get_next_optbyte+0x68>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	3314      	adds	r3, #20
 800a22c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800a22e:	88fb      	ldrh	r3, [r7, #6]
 800a230:	683a      	ldr	r2, [r7, #0]
 800a232:	4413      	add	r3, r2
 800a234:	781b      	ldrb	r3, [r3, #0]
 800a236:	e00b      	b.n	800a250 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a238:	88fb      	ldrh	r3, [r7, #6]
 800a23a:	b2da      	uxtb	r2, r3
 800a23c:	4b09      	ldr	r3, [pc, #36]	; (800a264 <tcp_get_next_optbyte+0x64>)
 800a23e:	881b      	ldrh	r3, [r3, #0]
 800a240:	b2db      	uxtb	r3, r3
 800a242:	1ad3      	subs	r3, r2, r3
 800a244:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800a246:	4b06      	ldr	r3, [pc, #24]	; (800a260 <tcp_get_next_optbyte+0x60>)
 800a248:	681a      	ldr	r2, [r3, #0]
 800a24a:	797b      	ldrb	r3, [r7, #5]
 800a24c:	4413      	add	r3, r2
 800a24e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a250:	4618      	mov	r0, r3
 800a252:	370c      	adds	r7, #12
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr
 800a25c:	2000a4e8 	.word	0x2000a4e8
 800a260:	2000a4e4 	.word	0x2000a4e4
 800a264:	2000a4e2 	.word	0x2000a4e2
 800a268:	2000a4dc 	.word	0x2000a4dc

0800a26c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b084      	sub	sp, #16
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d106      	bne.n	800a288 <tcp_parseopt+0x1c>
 800a27a:	4b32      	ldr	r3, [pc, #200]	; (800a344 <tcp_parseopt+0xd8>)
 800a27c:	f240 727d 	movw	r2, #1917	; 0x77d
 800a280:	4931      	ldr	r1, [pc, #196]	; (800a348 <tcp_parseopt+0xdc>)
 800a282:	4832      	ldr	r0, [pc, #200]	; (800a34c <tcp_parseopt+0xe0>)
 800a284:	f004 fb5e 	bl	800e944 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800a288:	4b31      	ldr	r3, [pc, #196]	; (800a350 <tcp_parseopt+0xe4>)
 800a28a:	881b      	ldrh	r3, [r3, #0]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d055      	beq.n	800a33c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a290:	4b30      	ldr	r3, [pc, #192]	; (800a354 <tcp_parseopt+0xe8>)
 800a292:	2200      	movs	r2, #0
 800a294:	801a      	strh	r2, [r3, #0]
 800a296:	e045      	b.n	800a324 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800a298:	f7ff ffb2 	bl	800a200 <tcp_get_next_optbyte>
 800a29c:	4603      	mov	r3, r0
 800a29e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800a2a0:	7bfb      	ldrb	r3, [r7, #15]
 800a2a2:	2b02      	cmp	r3, #2
 800a2a4:	d006      	beq.n	800a2b4 <tcp_parseopt+0x48>
 800a2a6:	2b02      	cmp	r3, #2
 800a2a8:	dc2b      	bgt.n	800a302 <tcp_parseopt+0x96>
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d041      	beq.n	800a332 <tcp_parseopt+0xc6>
 800a2ae:	2b01      	cmp	r3, #1
 800a2b0:	d127      	bne.n	800a302 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800a2b2:	e037      	b.n	800a324 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a2b4:	f7ff ffa4 	bl	800a200 <tcp_get_next_optbyte>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	2b04      	cmp	r3, #4
 800a2bc:	d13b      	bne.n	800a336 <tcp_parseopt+0xca>
 800a2be:	4b25      	ldr	r3, [pc, #148]	; (800a354 <tcp_parseopt+0xe8>)
 800a2c0:	881b      	ldrh	r3, [r3, #0]
 800a2c2:	3301      	adds	r3, #1
 800a2c4:	4a22      	ldr	r2, [pc, #136]	; (800a350 <tcp_parseopt+0xe4>)
 800a2c6:	8812      	ldrh	r2, [r2, #0]
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	da34      	bge.n	800a336 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a2cc:	f7ff ff98 	bl	800a200 <tcp_get_next_optbyte>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	b29b      	uxth	r3, r3
 800a2d4:	021b      	lsls	r3, r3, #8
 800a2d6:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800a2d8:	f7ff ff92 	bl	800a200 <tcp_get_next_optbyte>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	b29a      	uxth	r2, r3
 800a2e0:	89bb      	ldrh	r3, [r7, #12]
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a2e6:	89bb      	ldrh	r3, [r7, #12]
 800a2e8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a2ec:	d804      	bhi.n	800a2f8 <tcp_parseopt+0x8c>
 800a2ee:	89bb      	ldrh	r3, [r7, #12]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d001      	beq.n	800a2f8 <tcp_parseopt+0x8c>
 800a2f4:	89ba      	ldrh	r2, [r7, #12]
 800a2f6:	e001      	b.n	800a2fc <tcp_parseopt+0x90>
 800a2f8:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800a300:	e010      	b.n	800a324 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800a302:	f7ff ff7d 	bl	800a200 <tcp_get_next_optbyte>
 800a306:	4603      	mov	r3, r0
 800a308:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800a30a:	7afb      	ldrb	r3, [r7, #11]
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d914      	bls.n	800a33a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800a310:	7afb      	ldrb	r3, [r7, #11]
 800a312:	b29a      	uxth	r2, r3
 800a314:	4b0f      	ldr	r3, [pc, #60]	; (800a354 <tcp_parseopt+0xe8>)
 800a316:	881b      	ldrh	r3, [r3, #0]
 800a318:	4413      	add	r3, r2
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	3b02      	subs	r3, #2
 800a31e:	b29a      	uxth	r2, r3
 800a320:	4b0c      	ldr	r3, [pc, #48]	; (800a354 <tcp_parseopt+0xe8>)
 800a322:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a324:	4b0b      	ldr	r3, [pc, #44]	; (800a354 <tcp_parseopt+0xe8>)
 800a326:	881a      	ldrh	r2, [r3, #0]
 800a328:	4b09      	ldr	r3, [pc, #36]	; (800a350 <tcp_parseopt+0xe4>)
 800a32a:	881b      	ldrh	r3, [r3, #0]
 800a32c:	429a      	cmp	r2, r3
 800a32e:	d3b3      	bcc.n	800a298 <tcp_parseopt+0x2c>
 800a330:	e004      	b.n	800a33c <tcp_parseopt+0xd0>
          return;
 800a332:	bf00      	nop
 800a334:	e002      	b.n	800a33c <tcp_parseopt+0xd0>
            return;
 800a336:	bf00      	nop
 800a338:	e000      	b.n	800a33c <tcp_parseopt+0xd0>
            return;
 800a33a:	bf00      	nop
      }
    }
  }
}
 800a33c:	3710      	adds	r7, #16
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}
 800a342:	bf00      	nop
 800a344:	080109d8 	.word	0x080109d8
 800a348:	08010e3c 	.word	0x08010e3c
 800a34c:	08010a24 	.word	0x08010a24
 800a350:	2000a4e0 	.word	0x2000a4e0
 800a354:	2000a4e8 	.word	0x2000a4e8

0800a358 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800a358:	b480      	push	{r7}
 800a35a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800a35c:	4b05      	ldr	r3, [pc, #20]	; (800a374 <tcp_trigger_input_pcb_close+0x1c>)
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	f043 0310 	orr.w	r3, r3, #16
 800a364:	b2da      	uxtb	r2, r3
 800a366:	4b03      	ldr	r3, [pc, #12]	; (800a374 <tcp_trigger_input_pcb_close+0x1c>)
 800a368:	701a      	strb	r2, [r3, #0]
}
 800a36a:	bf00      	nop
 800a36c:	46bd      	mov	sp, r7
 800a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a372:	4770      	bx	lr
 800a374:	2000a4f9 	.word	0x2000a4f9

0800a378 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b084      	sub	sp, #16
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	60f8      	str	r0, [r7, #12]
 800a380:	60b9      	str	r1, [r7, #8]
 800a382:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d00a      	beq.n	800a3a0 <tcp_route+0x28>
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	7a1b      	ldrb	r3, [r3, #8]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d006      	beq.n	800a3a0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	7a1b      	ldrb	r3, [r3, #8]
 800a396:	4618      	mov	r0, r3
 800a398:	f7fb fb5a 	bl	8005a50 <netif_get_by_index>
 800a39c:	4603      	mov	r3, r0
 800a39e:	e003      	b.n	800a3a8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f002 ffe3 	bl	800d36c <ip4_route>
 800a3a6:	4603      	mov	r3, r0
  }
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	3710      	adds	r7, #16
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}

0800a3b0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800a3b0:	b590      	push	{r4, r7, lr}
 800a3b2:	b087      	sub	sp, #28
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	60f8      	str	r0, [r7, #12]
 800a3b8:	60b9      	str	r1, [r7, #8]
 800a3ba:	603b      	str	r3, [r7, #0]
 800a3bc:	4613      	mov	r3, r2
 800a3be:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d105      	bne.n	800a3d2 <tcp_create_segment+0x22>
 800a3c6:	4b44      	ldr	r3, [pc, #272]	; (800a4d8 <tcp_create_segment+0x128>)
 800a3c8:	22a3      	movs	r2, #163	; 0xa3
 800a3ca:	4944      	ldr	r1, [pc, #272]	; (800a4dc <tcp_create_segment+0x12c>)
 800a3cc:	4844      	ldr	r0, [pc, #272]	; (800a4e0 <tcp_create_segment+0x130>)
 800a3ce:	f004 fab9 	bl	800e944 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d105      	bne.n	800a3e4 <tcp_create_segment+0x34>
 800a3d8:	4b3f      	ldr	r3, [pc, #252]	; (800a4d8 <tcp_create_segment+0x128>)
 800a3da:	22a4      	movs	r2, #164	; 0xa4
 800a3dc:	4941      	ldr	r1, [pc, #260]	; (800a4e4 <tcp_create_segment+0x134>)
 800a3de:	4840      	ldr	r0, [pc, #256]	; (800a4e0 <tcp_create_segment+0x130>)
 800a3e0:	f004 fab0 	bl	800e944 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a3e4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a3e8:	009b      	lsls	r3, r3, #2
 800a3ea:	b2db      	uxtb	r3, r3
 800a3ec:	f003 0304 	and.w	r3, r3, #4
 800a3f0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800a3f2:	2003      	movs	r0, #3
 800a3f4:	f7fa ffa6 	bl	8005344 <memp_malloc>
 800a3f8:	6138      	str	r0, [r7, #16]
 800a3fa:	693b      	ldr	r3, [r7, #16]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d104      	bne.n	800a40a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800a400:	68b8      	ldr	r0, [r7, #8]
 800a402:	f7fb fe85 	bl	8006110 <pbuf_free>
    return NULL;
 800a406:	2300      	movs	r3, #0
 800a408:	e061      	b.n	800a4ce <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800a410:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800a412:	693b      	ldr	r3, [r7, #16]
 800a414:	2200      	movs	r2, #0
 800a416:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	68ba      	ldr	r2, [r7, #8]
 800a41c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	891a      	ldrh	r2, [r3, #8]
 800a422:	7dfb      	ldrb	r3, [r7, #23]
 800a424:	b29b      	uxth	r3, r3
 800a426:	429a      	cmp	r2, r3
 800a428:	d205      	bcs.n	800a436 <tcp_create_segment+0x86>
 800a42a:	4b2b      	ldr	r3, [pc, #172]	; (800a4d8 <tcp_create_segment+0x128>)
 800a42c:	22b0      	movs	r2, #176	; 0xb0
 800a42e:	492e      	ldr	r1, [pc, #184]	; (800a4e8 <tcp_create_segment+0x138>)
 800a430:	482b      	ldr	r0, [pc, #172]	; (800a4e0 <tcp_create_segment+0x130>)
 800a432:	f004 fa87 	bl	800e944 <iprintf>
  seg->len = p->tot_len - optlen;
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	891a      	ldrh	r2, [r3, #8]
 800a43a:	7dfb      	ldrb	r3, [r7, #23]
 800a43c:	b29b      	uxth	r3, r3
 800a43e:	1ad3      	subs	r3, r2, r3
 800a440:	b29a      	uxth	r2, r3
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800a446:	2114      	movs	r1, #20
 800a448:	68b8      	ldr	r0, [r7, #8]
 800a44a:	f7fb fdcb 	bl	8005fe4 <pbuf_add_header>
 800a44e:	4603      	mov	r3, r0
 800a450:	2b00      	cmp	r3, #0
 800a452:	d004      	beq.n	800a45e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800a454:	6938      	ldr	r0, [r7, #16]
 800a456:	f7fd f8ce 	bl	80075f6 <tcp_seg_free>
    return NULL;
 800a45a:	2300      	movs	r3, #0
 800a45c:	e037      	b.n	800a4ce <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	685b      	ldr	r3, [r3, #4]
 800a462:	685a      	ldr	r2, [r3, #4]
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	8ada      	ldrh	r2, [r3, #22]
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	68dc      	ldr	r4, [r3, #12]
 800a470:	4610      	mov	r0, r2
 800a472:	f7fa faef 	bl	8004a54 <lwip_htons>
 800a476:	4603      	mov	r3, r0
 800a478:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	8b1a      	ldrh	r2, [r3, #24]
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	68dc      	ldr	r4, [r3, #12]
 800a482:	4610      	mov	r0, r2
 800a484:	f7fa fae6 	bl	8004a54 <lwip_htons>
 800a488:	4603      	mov	r3, r0
 800a48a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	68dc      	ldr	r4, [r3, #12]
 800a490:	6838      	ldr	r0, [r7, #0]
 800a492:	f7fa faf4 	bl	8004a7e <lwip_htonl>
 800a496:	4603      	mov	r3, r0
 800a498:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800a49a:	7dfb      	ldrb	r3, [r7, #23]
 800a49c:	089b      	lsrs	r3, r3, #2
 800a49e:	b2db      	uxtb	r3, r3
 800a4a0:	b29b      	uxth	r3, r3
 800a4a2:	3305      	adds	r3, #5
 800a4a4:	b29b      	uxth	r3, r3
 800a4a6:	031b      	lsls	r3, r3, #12
 800a4a8:	b29a      	uxth	r2, r3
 800a4aa:	79fb      	ldrb	r3, [r7, #7]
 800a4ac:	b29b      	uxth	r3, r3
 800a4ae:	4313      	orrs	r3, r2
 800a4b0:	b29a      	uxth	r2, r3
 800a4b2:	693b      	ldr	r3, [r7, #16]
 800a4b4:	68dc      	ldr	r4, [r3, #12]
 800a4b6:	4610      	mov	r0, r2
 800a4b8:	f7fa facc 	bl	8004a54 <lwip_htons>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	68db      	ldr	r3, [r3, #12]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	749a      	strb	r2, [r3, #18]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	74da      	strb	r2, [r3, #19]
  return seg;
 800a4cc:	693b      	ldr	r3, [r7, #16]
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	371c      	adds	r7, #28
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd90      	pop	{r4, r7, pc}
 800a4d6:	bf00      	nop
 800a4d8:	08010e58 	.word	0x08010e58
 800a4dc:	08010e8c 	.word	0x08010e8c
 800a4e0:	08010eac 	.word	0x08010eac
 800a4e4:	08010ed4 	.word	0x08010ed4
 800a4e8:	08010ef8 	.word	0x08010ef8

0800a4ec <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800a4ec:	b590      	push	{r4, r7, lr}
 800a4ee:	b08b      	sub	sp, #44	; 0x2c
 800a4f0:	af02      	add	r7, sp, #8
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	460b      	mov	r3, r1
 800a4f6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	61fb      	str	r3, [r7, #28]
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800a500:	2300      	movs	r3, #0
 800a502:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d106      	bne.n	800a518 <tcp_split_unsent_seg+0x2c>
 800a50a:	4b95      	ldr	r3, [pc, #596]	; (800a760 <tcp_split_unsent_seg+0x274>)
 800a50c:	f240 324b 	movw	r2, #843	; 0x34b
 800a510:	4994      	ldr	r1, [pc, #592]	; (800a764 <tcp_split_unsent_seg+0x278>)
 800a512:	4895      	ldr	r0, [pc, #596]	; (800a768 <tcp_split_unsent_seg+0x27c>)
 800a514:	f004 fa16 	bl	800e944 <iprintf>

  useg = pcb->unsent;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a51c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d102      	bne.n	800a52a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800a524:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a528:	e116      	b.n	800a758 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800a52a:	887b      	ldrh	r3, [r7, #2]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d109      	bne.n	800a544 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800a530:	4b8b      	ldr	r3, [pc, #556]	; (800a760 <tcp_split_unsent_seg+0x274>)
 800a532:	f240 3253 	movw	r2, #851	; 0x353
 800a536:	498d      	ldr	r1, [pc, #564]	; (800a76c <tcp_split_unsent_seg+0x280>)
 800a538:	488b      	ldr	r0, [pc, #556]	; (800a768 <tcp_split_unsent_seg+0x27c>)
 800a53a:	f004 fa03 	bl	800e944 <iprintf>
    return ERR_VAL;
 800a53e:	f06f 0305 	mvn.w	r3, #5
 800a542:	e109      	b.n	800a758 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	891b      	ldrh	r3, [r3, #8]
 800a548:	887a      	ldrh	r2, [r7, #2]
 800a54a:	429a      	cmp	r2, r3
 800a54c:	d301      	bcc.n	800a552 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800a54e:	2300      	movs	r3, #0
 800a550:	e102      	b.n	800a758 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a556:	887a      	ldrh	r2, [r7, #2]
 800a558:	429a      	cmp	r2, r3
 800a55a:	d906      	bls.n	800a56a <tcp_split_unsent_seg+0x7e>
 800a55c:	4b80      	ldr	r3, [pc, #512]	; (800a760 <tcp_split_unsent_seg+0x274>)
 800a55e:	f240 325b 	movw	r2, #859	; 0x35b
 800a562:	4983      	ldr	r1, [pc, #524]	; (800a770 <tcp_split_unsent_seg+0x284>)
 800a564:	4880      	ldr	r0, [pc, #512]	; (800a768 <tcp_split_unsent_seg+0x27c>)
 800a566:	f004 f9ed 	bl	800e944 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	891b      	ldrh	r3, [r3, #8]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d106      	bne.n	800a580 <tcp_split_unsent_seg+0x94>
 800a572:	4b7b      	ldr	r3, [pc, #492]	; (800a760 <tcp_split_unsent_seg+0x274>)
 800a574:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800a578:	497e      	ldr	r1, [pc, #504]	; (800a774 <tcp_split_unsent_seg+0x288>)
 800a57a:	487b      	ldr	r0, [pc, #492]	; (800a768 <tcp_split_unsent_seg+0x27c>)
 800a57c:	f004 f9e2 	bl	800e944 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800a580:	697b      	ldr	r3, [r7, #20]
 800a582:	7a9b      	ldrb	r3, [r3, #10]
 800a584:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a586:	7bfb      	ldrb	r3, [r7, #15]
 800a588:	009b      	lsls	r3, r3, #2
 800a58a:	b2db      	uxtb	r3, r3
 800a58c:	f003 0304 	and.w	r3, r3, #4
 800a590:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	891a      	ldrh	r2, [r3, #8]
 800a596:	887b      	ldrh	r3, [r7, #2]
 800a598:	1ad3      	subs	r3, r2, r3
 800a59a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800a59c:	7bbb      	ldrb	r3, [r7, #14]
 800a59e:	b29a      	uxth	r2, r3
 800a5a0:	89bb      	ldrh	r3, [r7, #12]
 800a5a2:	4413      	add	r3, r2
 800a5a4:	b29b      	uxth	r3, r3
 800a5a6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a5aa:	4619      	mov	r1, r3
 800a5ac:	2036      	movs	r0, #54	; 0x36
 800a5ae:	f7fb facb 	bl	8005b48 <pbuf_alloc>
 800a5b2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	f000 80b7 	beq.w	800a72a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800a5bc:	697b      	ldr	r3, [r7, #20]
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	891a      	ldrh	r2, [r3, #8]
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	891b      	ldrh	r3, [r3, #8]
 800a5c6:	1ad3      	subs	r3, r2, r3
 800a5c8:	b29a      	uxth	r2, r3
 800a5ca:	887b      	ldrh	r3, [r7, #2]
 800a5cc:	4413      	add	r3, r2
 800a5ce:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	6858      	ldr	r0, [r3, #4]
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	685a      	ldr	r2, [r3, #4]
 800a5d8:	7bbb      	ldrb	r3, [r7, #14]
 800a5da:	18d1      	adds	r1, r2, r3
 800a5dc:	897b      	ldrh	r3, [r7, #10]
 800a5de:	89ba      	ldrh	r2, [r7, #12]
 800a5e0:	f7fb ff80 	bl	80064e4 <pbuf_copy_partial>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	461a      	mov	r2, r3
 800a5e8:	89bb      	ldrh	r3, [r7, #12]
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	f040 809f 	bne.w	800a72e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	68db      	ldr	r3, [r3, #12]
 800a5f4:	899b      	ldrh	r3, [r3, #12]
 800a5f6:	b29b      	uxth	r3, r3
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f7fa fa2b 	bl	8004a54 <lwip_htons>
 800a5fe:	4603      	mov	r3, r0
 800a600:	b2db      	uxtb	r3, r3
 800a602:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a606:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800a608:	2300      	movs	r3, #0
 800a60a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800a60c:	7efb      	ldrb	r3, [r7, #27]
 800a60e:	f003 0308 	and.w	r3, r3, #8
 800a612:	2b00      	cmp	r3, #0
 800a614:	d007      	beq.n	800a626 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800a616:	7efb      	ldrb	r3, [r7, #27]
 800a618:	f023 0308 	bic.w	r3, r3, #8
 800a61c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800a61e:	7ebb      	ldrb	r3, [r7, #26]
 800a620:	f043 0308 	orr.w	r3, r3, #8
 800a624:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800a626:	7efb      	ldrb	r3, [r7, #27]
 800a628:	f003 0301 	and.w	r3, r3, #1
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d007      	beq.n	800a640 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800a630:	7efb      	ldrb	r3, [r7, #27]
 800a632:	f023 0301 	bic.w	r3, r3, #1
 800a636:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800a638:	7ebb      	ldrb	r3, [r7, #26]
 800a63a:	f043 0301 	orr.w	r3, r3, #1
 800a63e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800a640:	697b      	ldr	r3, [r7, #20]
 800a642:	68db      	ldr	r3, [r3, #12]
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	4618      	mov	r0, r3
 800a648:	f7fa fa19 	bl	8004a7e <lwip_htonl>
 800a64c:	4602      	mov	r2, r0
 800a64e:	887b      	ldrh	r3, [r7, #2]
 800a650:	18d1      	adds	r1, r2, r3
 800a652:	7eba      	ldrb	r2, [r7, #26]
 800a654:	7bfb      	ldrb	r3, [r7, #15]
 800a656:	9300      	str	r3, [sp, #0]
 800a658:	460b      	mov	r3, r1
 800a65a:	6939      	ldr	r1, [r7, #16]
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f7ff fea7 	bl	800a3b0 <tcp_create_segment>
 800a662:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800a664:	69fb      	ldr	r3, [r7, #28]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d063      	beq.n	800a732 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	685b      	ldr	r3, [r3, #4]
 800a66e:	4618      	mov	r0, r3
 800a670:	f7fb fdd6 	bl	8006220 <pbuf_clen>
 800a674:	4603      	mov	r3, r0
 800a676:	461a      	mov	r2, r3
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a67e:	1a9b      	subs	r3, r3, r2
 800a680:	b29a      	uxth	r2, r3
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	6858      	ldr	r0, [r3, #4]
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	685b      	ldr	r3, [r3, #4]
 800a690:	891a      	ldrh	r2, [r3, #8]
 800a692:	89bb      	ldrh	r3, [r7, #12]
 800a694:	1ad3      	subs	r3, r2, r3
 800a696:	b29b      	uxth	r3, r3
 800a698:	4619      	mov	r1, r3
 800a69a:	f7fb fbb3 	bl	8005e04 <pbuf_realloc>
  useg->len -= remainder;
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	891a      	ldrh	r2, [r3, #8]
 800a6a2:	89bb      	ldrh	r3, [r7, #12]
 800a6a4:	1ad3      	subs	r3, r2, r3
 800a6a6:	b29a      	uxth	r2, r3
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	68db      	ldr	r3, [r3, #12]
 800a6b0:	899b      	ldrh	r3, [r3, #12]
 800a6b2:	b29c      	uxth	r4, r3
 800a6b4:	7efb      	ldrb	r3, [r7, #27]
 800a6b6:	b29b      	uxth	r3, r3
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f7fa f9cb 	bl	8004a54 <lwip_htons>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	461a      	mov	r2, r3
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	68db      	ldr	r3, [r3, #12]
 800a6c6:	4322      	orrs	r2, r4
 800a6c8:	b292      	uxth	r2, r2
 800a6ca:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	685b      	ldr	r3, [r3, #4]
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f7fb fda5 	bl	8006220 <pbuf_clen>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	461a      	mov	r2, r3
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a6e0:	4413      	add	r3, r2
 800a6e2:	b29a      	uxth	r2, r3
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a6ea:	69fb      	ldr	r3, [r7, #28]
 800a6ec:	685b      	ldr	r3, [r3, #4]
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f7fb fd96 	bl	8006220 <pbuf_clen>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	461a      	mov	r2, r3
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a6fe:	4413      	add	r3, r2
 800a700:	b29a      	uxth	r2, r3
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	681a      	ldr	r2, [r3, #0]
 800a70c:	69fb      	ldr	r3, [r7, #28]
 800a70e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800a710:	697b      	ldr	r3, [r7, #20]
 800a712:	69fa      	ldr	r2, [r7, #28]
 800a714:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800a716:	69fb      	ldr	r3, [r7, #28]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d103      	bne.n	800a726 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2200      	movs	r2, #0
 800a722:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800a726:	2300      	movs	r3, #0
 800a728:	e016      	b.n	800a758 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800a72a:	bf00      	nop
 800a72c:	e002      	b.n	800a734 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a72e:	bf00      	nop
 800a730:	e000      	b.n	800a734 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a732:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800a734:	69fb      	ldr	r3, [r7, #28]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d006      	beq.n	800a748 <tcp_split_unsent_seg+0x25c>
 800a73a:	4b09      	ldr	r3, [pc, #36]	; (800a760 <tcp_split_unsent_seg+0x274>)
 800a73c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800a740:	490d      	ldr	r1, [pc, #52]	; (800a778 <tcp_split_unsent_seg+0x28c>)
 800a742:	4809      	ldr	r0, [pc, #36]	; (800a768 <tcp_split_unsent_seg+0x27c>)
 800a744:	f004 f8fe 	bl	800e944 <iprintf>
  if (p != NULL) {
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d002      	beq.n	800a754 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800a74e:	6938      	ldr	r0, [r7, #16]
 800a750:	f7fb fcde 	bl	8006110 <pbuf_free>
  }

  return ERR_MEM;
 800a754:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800a758:	4618      	mov	r0, r3
 800a75a:	3724      	adds	r7, #36	; 0x24
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd90      	pop	{r4, r7, pc}
 800a760:	08010e58 	.word	0x08010e58
 800a764:	080111ec 	.word	0x080111ec
 800a768:	08010eac 	.word	0x08010eac
 800a76c:	08011210 	.word	0x08011210
 800a770:	08011234 	.word	0x08011234
 800a774:	08011244 	.word	0x08011244
 800a778:	08011254 	.word	0x08011254

0800a77c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800a77c:	b590      	push	{r4, r7, lr}
 800a77e:	b085      	sub	sp, #20
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d106      	bne.n	800a798 <tcp_send_fin+0x1c>
 800a78a:	4b21      	ldr	r3, [pc, #132]	; (800a810 <tcp_send_fin+0x94>)
 800a78c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800a790:	4920      	ldr	r1, [pc, #128]	; (800a814 <tcp_send_fin+0x98>)
 800a792:	4821      	ldr	r0, [pc, #132]	; (800a818 <tcp_send_fin+0x9c>)
 800a794:	f004 f8d6 	bl	800e944 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d02e      	beq.n	800a7fe <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7a4:	60fb      	str	r3, [r7, #12]
 800a7a6:	e002      	b.n	800a7ae <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d1f8      	bne.n	800a7a8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	68db      	ldr	r3, [r3, #12]
 800a7ba:	899b      	ldrh	r3, [r3, #12]
 800a7bc:	b29b      	uxth	r3, r3
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f7fa f948 	bl	8004a54 <lwip_htons>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	b2db      	uxtb	r3, r3
 800a7c8:	f003 0307 	and.w	r3, r3, #7
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d116      	bne.n	800a7fe <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	68db      	ldr	r3, [r3, #12]
 800a7d4:	899b      	ldrh	r3, [r3, #12]
 800a7d6:	b29c      	uxth	r4, r3
 800a7d8:	2001      	movs	r0, #1
 800a7da:	f7fa f93b 	bl	8004a54 <lwip_htons>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	461a      	mov	r2, r3
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	68db      	ldr	r3, [r3, #12]
 800a7e6:	4322      	orrs	r2, r4
 800a7e8:	b292      	uxth	r2, r2
 800a7ea:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	8b5b      	ldrh	r3, [r3, #26]
 800a7f0:	f043 0320 	orr.w	r3, r3, #32
 800a7f4:	b29a      	uxth	r2, r3
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	e004      	b.n	800a808 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800a7fe:	2101      	movs	r1, #1
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f000 f80b 	bl	800a81c <tcp_enqueue_flags>
 800a806:	4603      	mov	r3, r0
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3714      	adds	r7, #20
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd90      	pop	{r4, r7, pc}
 800a810:	08010e58 	.word	0x08010e58
 800a814:	08011260 	.word	0x08011260
 800a818:	08010eac 	.word	0x08010eac

0800a81c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b08a      	sub	sp, #40	; 0x28
 800a820:	af02      	add	r7, sp, #8
 800a822:	6078      	str	r0, [r7, #4]
 800a824:	460b      	mov	r3, r1
 800a826:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800a828:	2300      	movs	r3, #0
 800a82a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800a82c:	2300      	movs	r3, #0
 800a82e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800a830:	78fb      	ldrb	r3, [r7, #3]
 800a832:	f003 0303 	and.w	r3, r3, #3
 800a836:	2b00      	cmp	r3, #0
 800a838:	d106      	bne.n	800a848 <tcp_enqueue_flags+0x2c>
 800a83a:	4b67      	ldr	r3, [pc, #412]	; (800a9d8 <tcp_enqueue_flags+0x1bc>)
 800a83c:	f240 4211 	movw	r2, #1041	; 0x411
 800a840:	4966      	ldr	r1, [pc, #408]	; (800a9dc <tcp_enqueue_flags+0x1c0>)
 800a842:	4867      	ldr	r0, [pc, #412]	; (800a9e0 <tcp_enqueue_flags+0x1c4>)
 800a844:	f004 f87e 	bl	800e944 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d106      	bne.n	800a85c <tcp_enqueue_flags+0x40>
 800a84e:	4b62      	ldr	r3, [pc, #392]	; (800a9d8 <tcp_enqueue_flags+0x1bc>)
 800a850:	f240 4213 	movw	r2, #1043	; 0x413
 800a854:	4963      	ldr	r1, [pc, #396]	; (800a9e4 <tcp_enqueue_flags+0x1c8>)
 800a856:	4862      	ldr	r0, [pc, #392]	; (800a9e0 <tcp_enqueue_flags+0x1c4>)
 800a858:	f004 f874 	bl	800e944 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800a85c:	78fb      	ldrb	r3, [r7, #3]
 800a85e:	f003 0302 	and.w	r3, r3, #2
 800a862:	2b00      	cmp	r3, #0
 800a864:	d001      	beq.n	800a86a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800a866:	2301      	movs	r3, #1
 800a868:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a86a:	7ffb      	ldrb	r3, [r7, #31]
 800a86c:	009b      	lsls	r3, r3, #2
 800a86e:	b2db      	uxtb	r3, r3
 800a870:	f003 0304 	and.w	r3, r3, #4
 800a874:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a876:	7dfb      	ldrb	r3, [r7, #23]
 800a878:	b29b      	uxth	r3, r3
 800a87a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a87e:	4619      	mov	r1, r3
 800a880:	2036      	movs	r0, #54	; 0x36
 800a882:	f7fb f961 	bl	8005b48 <pbuf_alloc>
 800a886:	6138      	str	r0, [r7, #16]
 800a888:	693b      	ldr	r3, [r7, #16]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d109      	bne.n	800a8a2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	8b5b      	ldrh	r3, [r3, #26]
 800a892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a896:	b29a      	uxth	r2, r3
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a89c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a8a0:	e095      	b.n	800a9ce <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	895a      	ldrh	r2, [r3, #10]
 800a8a6:	7dfb      	ldrb	r3, [r7, #23]
 800a8a8:	b29b      	uxth	r3, r3
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	d206      	bcs.n	800a8bc <tcp_enqueue_flags+0xa0>
 800a8ae:	4b4a      	ldr	r3, [pc, #296]	; (800a9d8 <tcp_enqueue_flags+0x1bc>)
 800a8b0:	f240 4239 	movw	r2, #1081	; 0x439
 800a8b4:	494c      	ldr	r1, [pc, #304]	; (800a9e8 <tcp_enqueue_flags+0x1cc>)
 800a8b6:	484a      	ldr	r0, [pc, #296]	; (800a9e0 <tcp_enqueue_flags+0x1c4>)
 800a8b8:	f004 f844 	bl	800e944 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800a8c0:	78fa      	ldrb	r2, [r7, #3]
 800a8c2:	7ffb      	ldrb	r3, [r7, #31]
 800a8c4:	9300      	str	r3, [sp, #0]
 800a8c6:	460b      	mov	r3, r1
 800a8c8:	6939      	ldr	r1, [r7, #16]
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f7ff fd70 	bl	800a3b0 <tcp_create_segment>
 800a8d0:	60f8      	str	r0, [r7, #12]
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d109      	bne.n	800a8ec <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	8b5b      	ldrh	r3, [r3, #26]
 800a8dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8e0:	b29a      	uxth	r2, r3
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a8e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a8ea:	e070      	b.n	800a9ce <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	68db      	ldr	r3, [r3, #12]
 800a8f0:	f003 0303 	and.w	r3, r3, #3
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d006      	beq.n	800a906 <tcp_enqueue_flags+0xea>
 800a8f8:	4b37      	ldr	r3, [pc, #220]	; (800a9d8 <tcp_enqueue_flags+0x1bc>)
 800a8fa:	f240 4242 	movw	r2, #1090	; 0x442
 800a8fe:	493b      	ldr	r1, [pc, #236]	; (800a9ec <tcp_enqueue_flags+0x1d0>)
 800a900:	4837      	ldr	r0, [pc, #220]	; (800a9e0 <tcp_enqueue_flags+0x1c4>)
 800a902:	f004 f81f 	bl	800e944 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	891b      	ldrh	r3, [r3, #8]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d006      	beq.n	800a91c <tcp_enqueue_flags+0x100>
 800a90e:	4b32      	ldr	r3, [pc, #200]	; (800a9d8 <tcp_enqueue_flags+0x1bc>)
 800a910:	f240 4243 	movw	r2, #1091	; 0x443
 800a914:	4936      	ldr	r1, [pc, #216]	; (800a9f0 <tcp_enqueue_flags+0x1d4>)
 800a916:	4832      	ldr	r0, [pc, #200]	; (800a9e0 <tcp_enqueue_flags+0x1c4>)
 800a918:	f004 f814 	bl	800e944 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a920:	2b00      	cmp	r3, #0
 800a922:	d103      	bne.n	800a92c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	68fa      	ldr	r2, [r7, #12]
 800a928:	66da      	str	r2, [r3, #108]	; 0x6c
 800a92a:	e00d      	b.n	800a948 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a930:	61bb      	str	r3, [r7, #24]
 800a932:	e002      	b.n	800a93a <tcp_enqueue_flags+0x11e>
 800a934:	69bb      	ldr	r3, [r7, #24]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	61bb      	str	r3, [r7, #24]
 800a93a:	69bb      	ldr	r3, [r7, #24]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d1f8      	bne.n	800a934 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800a942:	69bb      	ldr	r3, [r7, #24]
 800a944:	68fa      	ldr	r2, [r7, #12]
 800a946:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2200      	movs	r2, #0
 800a94c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800a950:	78fb      	ldrb	r3, [r7, #3]
 800a952:	f003 0302 	and.w	r3, r3, #2
 800a956:	2b00      	cmp	r3, #0
 800a958:	d104      	bne.n	800a964 <tcp_enqueue_flags+0x148>
 800a95a:	78fb      	ldrb	r3, [r7, #3]
 800a95c:	f003 0301 	and.w	r3, r3, #1
 800a960:	2b00      	cmp	r3, #0
 800a962:	d004      	beq.n	800a96e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a968:	1c5a      	adds	r2, r3, #1
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800a96e:	78fb      	ldrb	r3, [r7, #3]
 800a970:	f003 0301 	and.w	r3, r3, #1
 800a974:	2b00      	cmp	r3, #0
 800a976:	d006      	beq.n	800a986 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	8b5b      	ldrh	r3, [r3, #26]
 800a97c:	f043 0320 	orr.w	r3, r3, #32
 800a980:	b29a      	uxth	r2, r3
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	685b      	ldr	r3, [r3, #4]
 800a98a:	4618      	mov	r0, r3
 800a98c:	f7fb fc48 	bl	8006220 <pbuf_clen>
 800a990:	4603      	mov	r3, r0
 800a992:	461a      	mov	r2, r3
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a99a:	4413      	add	r3, r2
 800a99c:	b29a      	uxth	r2, r3
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d00e      	beq.n	800a9cc <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d10a      	bne.n	800a9cc <tcp_enqueue_flags+0x1b0>
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d106      	bne.n	800a9cc <tcp_enqueue_flags+0x1b0>
 800a9be:	4b06      	ldr	r3, [pc, #24]	; (800a9d8 <tcp_enqueue_flags+0x1bc>)
 800a9c0:	f240 4265 	movw	r2, #1125	; 0x465
 800a9c4:	490b      	ldr	r1, [pc, #44]	; (800a9f4 <tcp_enqueue_flags+0x1d8>)
 800a9c6:	4806      	ldr	r0, [pc, #24]	; (800a9e0 <tcp_enqueue_flags+0x1c4>)
 800a9c8:	f003 ffbc 	bl	800e944 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800a9cc:	2300      	movs	r3, #0
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3720      	adds	r7, #32
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}
 800a9d6:	bf00      	nop
 800a9d8:	08010e58 	.word	0x08010e58
 800a9dc:	0801127c 	.word	0x0801127c
 800a9e0:	08010eac 	.word	0x08010eac
 800a9e4:	080112d4 	.word	0x080112d4
 800a9e8:	080112f4 	.word	0x080112f4
 800a9ec:	08011330 	.word	0x08011330
 800a9f0:	08011348 	.word	0x08011348
 800a9f4:	08011374 	.word	0x08011374

0800a9f8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800a9f8:	b5b0      	push	{r4, r5, r7, lr}
 800a9fa:	b08a      	sub	sp, #40	; 0x28
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d106      	bne.n	800aa14 <tcp_output+0x1c>
 800aa06:	4b8a      	ldr	r3, [pc, #552]	; (800ac30 <tcp_output+0x238>)
 800aa08:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800aa0c:	4989      	ldr	r1, [pc, #548]	; (800ac34 <tcp_output+0x23c>)
 800aa0e:	488a      	ldr	r0, [pc, #552]	; (800ac38 <tcp_output+0x240>)
 800aa10:	f003 ff98 	bl	800e944 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	7d1b      	ldrb	r3, [r3, #20]
 800aa18:	2b01      	cmp	r3, #1
 800aa1a:	d106      	bne.n	800aa2a <tcp_output+0x32>
 800aa1c:	4b84      	ldr	r3, [pc, #528]	; (800ac30 <tcp_output+0x238>)
 800aa1e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800aa22:	4986      	ldr	r1, [pc, #536]	; (800ac3c <tcp_output+0x244>)
 800aa24:	4884      	ldr	r0, [pc, #528]	; (800ac38 <tcp_output+0x240>)
 800aa26:	f003 ff8d 	bl	800e944 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800aa2a:	4b85      	ldr	r3, [pc, #532]	; (800ac40 <tcp_output+0x248>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	687a      	ldr	r2, [r7, #4]
 800aa30:	429a      	cmp	r2, r3
 800aa32:	d101      	bne.n	800aa38 <tcp_output+0x40>
    return ERR_OK;
 800aa34:	2300      	movs	r3, #0
 800aa36:	e1ce      	b.n	800add6 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800aa44:	4293      	cmp	r3, r2
 800aa46:	bf28      	it	cs
 800aa48:	4613      	movcs	r3, r2
 800aa4a:	b29b      	uxth	r3, r3
 800aa4c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa52:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800aa54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d10b      	bne.n	800aa72 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	8b5b      	ldrh	r3, [r3, #26]
 800aa5e:	f003 0302 	and.w	r3, r3, #2
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	f000 81aa 	beq.w	800adbc <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f000 fdcb 	bl	800b604 <tcp_send_empty_ack>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	e1b1      	b.n	800add6 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800aa72:	6879      	ldr	r1, [r7, #4]
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	3304      	adds	r3, #4
 800aa78:	461a      	mov	r2, r3
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f7ff fc7c 	bl	800a378 <tcp_route>
 800aa80:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d102      	bne.n	800aa8e <tcp_output+0x96>
    return ERR_RTE;
 800aa88:	f06f 0303 	mvn.w	r3, #3
 800aa8c:	e1a3      	b.n	800add6 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d003      	beq.n	800aa9c <tcp_output+0xa4>
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d111      	bne.n	800aac0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d002      	beq.n	800aaa8 <tcp_output+0xb0>
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	3304      	adds	r3, #4
 800aaa6:	e000      	b.n	800aaaa <tcp_output+0xb2>
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d102      	bne.n	800aab8 <tcp_output+0xc0>
      return ERR_RTE;
 800aab2:	f06f 0303 	mvn.w	r3, #3
 800aab6:	e18e      	b.n	800add6 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800aab8:	693b      	ldr	r3, [r7, #16]
 800aaba:	681a      	ldr	r2, [r3, #0]
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800aac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac2:	68db      	ldr	r3, [r3, #12]
 800aac4:	685b      	ldr	r3, [r3, #4]
 800aac6:	4618      	mov	r0, r3
 800aac8:	f7f9 ffd9 	bl	8004a7e <lwip_htonl>
 800aacc:	4602      	mov	r2, r0
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aad2:	1ad3      	subs	r3, r2, r3
 800aad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aad6:	8912      	ldrh	r2, [r2, #8]
 800aad8:	4413      	add	r3, r2
 800aada:	69ba      	ldr	r2, [r7, #24]
 800aadc:	429a      	cmp	r2, r3
 800aade:	d227      	bcs.n	800ab30 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800aae6:	461a      	mov	r2, r3
 800aae8:	69bb      	ldr	r3, [r7, #24]
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d114      	bne.n	800ab18 <tcp_output+0x120>
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d110      	bne.n	800ab18 <tcp_output+0x120>
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d10b      	bne.n	800ab18 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2200      	movs	r2, #0
 800ab04:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2201      	movs	r2, #1
 800ab0c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2200      	movs	r2, #0
 800ab14:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	8b5b      	ldrh	r3, [r3, #26]
 800ab1c:	f003 0302 	and.w	r3, r3, #2
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	f000 814d 	beq.w	800adc0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f000 fd6c 	bl	800b604 <tcp_send_empty_ack>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	e152      	b.n	800add6 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2200      	movs	r2, #0
 800ab34:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab3c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800ab3e:	6a3b      	ldr	r3, [r7, #32]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	f000 811c 	beq.w	800ad7e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800ab46:	e002      	b.n	800ab4e <tcp_output+0x156>
 800ab48:	6a3b      	ldr	r3, [r7, #32]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	623b      	str	r3, [r7, #32]
 800ab4e:	6a3b      	ldr	r3, [r7, #32]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d1f8      	bne.n	800ab48 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800ab56:	e112      	b.n	800ad7e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800ab58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5a:	68db      	ldr	r3, [r3, #12]
 800ab5c:	899b      	ldrh	r3, [r3, #12]
 800ab5e:	b29b      	uxth	r3, r3
 800ab60:	4618      	mov	r0, r3
 800ab62:	f7f9 ff77 	bl	8004a54 <lwip_htons>
 800ab66:	4603      	mov	r3, r0
 800ab68:	b2db      	uxtb	r3, r3
 800ab6a:	f003 0304 	and.w	r3, r3, #4
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d006      	beq.n	800ab80 <tcp_output+0x188>
 800ab72:	4b2f      	ldr	r3, [pc, #188]	; (800ac30 <tcp_output+0x238>)
 800ab74:	f240 5236 	movw	r2, #1334	; 0x536
 800ab78:	4932      	ldr	r1, [pc, #200]	; (800ac44 <tcp_output+0x24c>)
 800ab7a:	482f      	ldr	r0, [pc, #188]	; (800ac38 <tcp_output+0x240>)
 800ab7c:	f003 fee2 	bl	800e944 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d01f      	beq.n	800abc8 <tcp_output+0x1d0>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	8b5b      	ldrh	r3, [r3, #26]
 800ab8c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d119      	bne.n	800abc8 <tcp_output+0x1d0>
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d00b      	beq.n	800abb4 <tcp_output+0x1bc>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d110      	bne.n	800abc8 <tcp_output+0x1d0>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abaa:	891a      	ldrh	r2, [r3, #8]
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800abb0:	429a      	cmp	r2, r3
 800abb2:	d209      	bcs.n	800abc8 <tcp_output+0x1d0>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d004      	beq.n	800abc8 <tcp_output+0x1d0>
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800abc4:	2b08      	cmp	r3, #8
 800abc6:	d901      	bls.n	800abcc <tcp_output+0x1d4>
 800abc8:	2301      	movs	r3, #1
 800abca:	e000      	b.n	800abce <tcp_output+0x1d6>
 800abcc:	2300      	movs	r3, #0
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d106      	bne.n	800abe0 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	8b5b      	ldrh	r3, [r3, #26]
 800abd6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800abda:	2b00      	cmp	r3, #0
 800abdc:	f000 80e4 	beq.w	800ada8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	7d1b      	ldrb	r3, [r3, #20]
 800abe4:	2b02      	cmp	r3, #2
 800abe6:	d00d      	beq.n	800ac04 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800abe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abea:	68db      	ldr	r3, [r3, #12]
 800abec:	899b      	ldrh	r3, [r3, #12]
 800abee:	b29c      	uxth	r4, r3
 800abf0:	2010      	movs	r0, #16
 800abf2:	f7f9 ff2f 	bl	8004a54 <lwip_htons>
 800abf6:	4603      	mov	r3, r0
 800abf8:	461a      	mov	r2, r3
 800abfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abfc:	68db      	ldr	r3, [r3, #12]
 800abfe:	4322      	orrs	r2, r4
 800ac00:	b292      	uxth	r2, r2
 800ac02:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800ac04:	697a      	ldr	r2, [r7, #20]
 800ac06:	6879      	ldr	r1, [r7, #4]
 800ac08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac0a:	f000 f909 	bl	800ae20 <tcp_output_segment>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800ac12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d016      	beq.n	800ac48 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	8b5b      	ldrh	r3, [r3, #26]
 800ac1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac22:	b29a      	uxth	r2, r3
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	835a      	strh	r2, [r3, #26]
      return err;
 800ac28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac2c:	e0d3      	b.n	800add6 <tcp_output+0x3de>
 800ac2e:	bf00      	nop
 800ac30:	08010e58 	.word	0x08010e58
 800ac34:	0801139c 	.word	0x0801139c
 800ac38:	08010eac 	.word	0x08010eac
 800ac3c:	080113b4 	.word	0x080113b4
 800ac40:	2000a500 	.word	0x2000a500
 800ac44:	080113dc 	.word	0x080113dc
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800ac48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	7d1b      	ldrb	r3, [r3, #20]
 800ac54:	2b02      	cmp	r3, #2
 800ac56:	d006      	beq.n	800ac66 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	8b5b      	ldrh	r3, [r3, #26]
 800ac5c:	f023 0303 	bic.w	r3, r3, #3
 800ac60:	b29a      	uxth	r2, r3
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ac66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac68:	68db      	ldr	r3, [r3, #12]
 800ac6a:	685b      	ldr	r3, [r3, #4]
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f7f9 ff06 	bl	8004a7e <lwip_htonl>
 800ac72:	4604      	mov	r4, r0
 800ac74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac76:	891b      	ldrh	r3, [r3, #8]
 800ac78:	461d      	mov	r5, r3
 800ac7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac7c:	68db      	ldr	r3, [r3, #12]
 800ac7e:	899b      	ldrh	r3, [r3, #12]
 800ac80:	b29b      	uxth	r3, r3
 800ac82:	4618      	mov	r0, r3
 800ac84:	f7f9 fee6 	bl	8004a54 <lwip_htons>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	b2db      	uxtb	r3, r3
 800ac8c:	f003 0303 	and.w	r3, r3, #3
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d001      	beq.n	800ac98 <tcp_output+0x2a0>
 800ac94:	2301      	movs	r3, #1
 800ac96:	e000      	b.n	800ac9a <tcp_output+0x2a2>
 800ac98:	2300      	movs	r3, #0
 800ac9a:	442b      	add	r3, r5
 800ac9c:	4423      	add	r3, r4
 800ac9e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	1ad3      	subs	r3, r2, r3
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	da02      	bge.n	800acb2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	68ba      	ldr	r2, [r7, #8]
 800acb0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800acb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb4:	891b      	ldrh	r3, [r3, #8]
 800acb6:	461c      	mov	r4, r3
 800acb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acba:	68db      	ldr	r3, [r3, #12]
 800acbc:	899b      	ldrh	r3, [r3, #12]
 800acbe:	b29b      	uxth	r3, r3
 800acc0:	4618      	mov	r0, r3
 800acc2:	f7f9 fec7 	bl	8004a54 <lwip_htons>
 800acc6:	4603      	mov	r3, r0
 800acc8:	b2db      	uxtb	r3, r3
 800acca:	f003 0303 	and.w	r3, r3, #3
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d001      	beq.n	800acd6 <tcp_output+0x2de>
 800acd2:	2301      	movs	r3, #1
 800acd4:	e000      	b.n	800acd8 <tcp_output+0x2e0>
 800acd6:	2300      	movs	r3, #0
 800acd8:	4423      	add	r3, r4
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d049      	beq.n	800ad72 <tcp_output+0x37a>
      seg->next = NULL;
 800acde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace0:	2200      	movs	r2, #0
 800ace2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d105      	bne.n	800acf8 <tcp_output+0x300>
        pcb->unacked = seg;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acf0:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800acf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf4:	623b      	str	r3, [r7, #32]
 800acf6:	e03f      	b.n	800ad78 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800acf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acfa:	68db      	ldr	r3, [r3, #12]
 800acfc:	685b      	ldr	r3, [r3, #4]
 800acfe:	4618      	mov	r0, r3
 800ad00:	f7f9 febd 	bl	8004a7e <lwip_htonl>
 800ad04:	4604      	mov	r4, r0
 800ad06:	6a3b      	ldr	r3, [r7, #32]
 800ad08:	68db      	ldr	r3, [r3, #12]
 800ad0a:	685b      	ldr	r3, [r3, #4]
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f7f9 feb6 	bl	8004a7e <lwip_htonl>
 800ad12:	4603      	mov	r3, r0
 800ad14:	1ae3      	subs	r3, r4, r3
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	da24      	bge.n	800ad64 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	3370      	adds	r3, #112	; 0x70
 800ad1e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ad20:	e002      	b.n	800ad28 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800ad22:	69fb      	ldr	r3, [r7, #28]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ad28:	69fb      	ldr	r3, [r7, #28]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d011      	beq.n	800ad54 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ad30:	69fb      	ldr	r3, [r7, #28]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	68db      	ldr	r3, [r3, #12]
 800ad36:	685b      	ldr	r3, [r3, #4]
 800ad38:	4618      	mov	r0, r3
 800ad3a:	f7f9 fea0 	bl	8004a7e <lwip_htonl>
 800ad3e:	4604      	mov	r4, r0
 800ad40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad42:	68db      	ldr	r3, [r3, #12]
 800ad44:	685b      	ldr	r3, [r3, #4]
 800ad46:	4618      	mov	r0, r3
 800ad48:	f7f9 fe99 	bl	8004a7e <lwip_htonl>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	dbe6      	blt.n	800ad22 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800ad54:	69fb      	ldr	r3, [r7, #28]
 800ad56:	681a      	ldr	r2, [r3, #0]
 800ad58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad5a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800ad5c:	69fb      	ldr	r3, [r7, #28]
 800ad5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad60:	601a      	str	r2, [r3, #0]
 800ad62:	e009      	b.n	800ad78 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800ad64:	6a3b      	ldr	r3, [r7, #32]
 800ad66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad68:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800ad6a:	6a3b      	ldr	r3, [r7, #32]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	623b      	str	r3, [r7, #32]
 800ad70:	e002      	b.n	800ad78 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800ad72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ad74:	f7fc fc3f 	bl	80075f6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad7c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800ad7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d012      	beq.n	800adaa <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800ad84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad86:	68db      	ldr	r3, [r3, #12]
 800ad88:	685b      	ldr	r3, [r3, #4]
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f7f9 fe77 	bl	8004a7e <lwip_htonl>
 800ad90:	4602      	mov	r2, r0
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad96:	1ad3      	subs	r3, r2, r3
 800ad98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad9a:	8912      	ldrh	r2, [r2, #8]
 800ad9c:	4413      	add	r3, r2
  while (seg != NULL &&
 800ad9e:	69ba      	ldr	r2, [r7, #24]
 800ada0:	429a      	cmp	r2, r3
 800ada2:	f4bf aed9 	bcs.w	800ab58 <tcp_output+0x160>
 800ada6:	e000      	b.n	800adaa <tcp_output+0x3b2>
      break;
 800ada8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d108      	bne.n	800adc4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2200      	movs	r2, #0
 800adb6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800adba:	e004      	b.n	800adc6 <tcp_output+0x3ce>
    goto output_done;
 800adbc:	bf00      	nop
 800adbe:	e002      	b.n	800adc6 <tcp_output+0x3ce>
    goto output_done;
 800adc0:	bf00      	nop
 800adc2:	e000      	b.n	800adc6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800adc4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	8b5b      	ldrh	r3, [r3, #26]
 800adca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800adce:	b29a      	uxth	r2, r3
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800add4:	2300      	movs	r3, #0
}
 800add6:	4618      	mov	r0, r3
 800add8:	3728      	adds	r7, #40	; 0x28
 800adda:	46bd      	mov	sp, r7
 800addc:	bdb0      	pop	{r4, r5, r7, pc}
 800adde:	bf00      	nop

0800ade0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b082      	sub	sp, #8
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d106      	bne.n	800adfc <tcp_output_segment_busy+0x1c>
 800adee:	4b09      	ldr	r3, [pc, #36]	; (800ae14 <tcp_output_segment_busy+0x34>)
 800adf0:	f240 529a 	movw	r2, #1434	; 0x59a
 800adf4:	4908      	ldr	r1, [pc, #32]	; (800ae18 <tcp_output_segment_busy+0x38>)
 800adf6:	4809      	ldr	r0, [pc, #36]	; (800ae1c <tcp_output_segment_busy+0x3c>)
 800adf8:	f003 fda4 	bl	800e944 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	7b9b      	ldrb	r3, [r3, #14]
 800ae02:	2b01      	cmp	r3, #1
 800ae04:	d001      	beq.n	800ae0a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800ae06:	2301      	movs	r3, #1
 800ae08:	e000      	b.n	800ae0c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800ae0a:	2300      	movs	r3, #0
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3708      	adds	r7, #8
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}
 800ae14:	08010e58 	.word	0x08010e58
 800ae18:	080113f4 	.word	0x080113f4
 800ae1c:	08010eac 	.word	0x08010eac

0800ae20 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800ae20:	b5b0      	push	{r4, r5, r7, lr}
 800ae22:	b08c      	sub	sp, #48	; 0x30
 800ae24:	af04      	add	r7, sp, #16
 800ae26:	60f8      	str	r0, [r7, #12]
 800ae28:	60b9      	str	r1, [r7, #8]
 800ae2a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d106      	bne.n	800ae40 <tcp_output_segment+0x20>
 800ae32:	4b64      	ldr	r3, [pc, #400]	; (800afc4 <tcp_output_segment+0x1a4>)
 800ae34:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800ae38:	4963      	ldr	r1, [pc, #396]	; (800afc8 <tcp_output_segment+0x1a8>)
 800ae3a:	4864      	ldr	r0, [pc, #400]	; (800afcc <tcp_output_segment+0x1ac>)
 800ae3c:	f003 fd82 	bl	800e944 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d106      	bne.n	800ae54 <tcp_output_segment+0x34>
 800ae46:	4b5f      	ldr	r3, [pc, #380]	; (800afc4 <tcp_output_segment+0x1a4>)
 800ae48:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800ae4c:	4960      	ldr	r1, [pc, #384]	; (800afd0 <tcp_output_segment+0x1b0>)
 800ae4e:	485f      	ldr	r0, [pc, #380]	; (800afcc <tcp_output_segment+0x1ac>)
 800ae50:	f003 fd78 	bl	800e944 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d106      	bne.n	800ae68 <tcp_output_segment+0x48>
 800ae5a:	4b5a      	ldr	r3, [pc, #360]	; (800afc4 <tcp_output_segment+0x1a4>)
 800ae5c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800ae60:	495c      	ldr	r1, [pc, #368]	; (800afd4 <tcp_output_segment+0x1b4>)
 800ae62:	485a      	ldr	r0, [pc, #360]	; (800afcc <tcp_output_segment+0x1ac>)
 800ae64:	f003 fd6e 	bl	800e944 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800ae68:	68f8      	ldr	r0, [r7, #12]
 800ae6a:	f7ff ffb9 	bl	800ade0 <tcp_output_segment_busy>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d001      	beq.n	800ae78 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800ae74:	2300      	movs	r3, #0
 800ae76:	e0a1      	b.n	800afbc <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	68dc      	ldr	r4, [r3, #12]
 800ae80:	4610      	mov	r0, r2
 800ae82:	f7f9 fdfc 	bl	8004a7e <lwip_htonl>
 800ae86:	4603      	mov	r3, r0
 800ae88:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	68dc      	ldr	r4, [r3, #12]
 800ae92:	4610      	mov	r0, r2
 800ae94:	f7f9 fdde 	bl	8004a54 <lwip_htons>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aea0:	68ba      	ldr	r2, [r7, #8]
 800aea2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800aea4:	441a      	add	r2, r3
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	68db      	ldr	r3, [r3, #12]
 800aeae:	3314      	adds	r3, #20
 800aeb0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	7a9b      	ldrb	r3, [r3, #10]
 800aeb6:	f003 0301 	and.w	r3, r3, #1
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d015      	beq.n	800aeea <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	3304      	adds	r3, #4
 800aec2:	461a      	mov	r2, r3
 800aec4:	6879      	ldr	r1, [r7, #4]
 800aec6:	f44f 7006 	mov.w	r0, #536	; 0x218
 800aeca:	f7fc fe8b 	bl	8007be4 <tcp_eff_send_mss_netif>
 800aece:	4603      	mov	r3, r0
 800aed0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800aed2:	8b7b      	ldrh	r3, [r7, #26]
 800aed4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800aed8:	4618      	mov	r0, r3
 800aeda:	f7f9 fdd0 	bl	8004a7e <lwip_htonl>
 800aede:	4602      	mov	r2, r0
 800aee0:	69fb      	ldr	r3, [r7, #28]
 800aee2:	601a      	str	r2, [r3, #0]
    opts += 1;
 800aee4:	69fb      	ldr	r3, [r7, #28]
 800aee6:	3304      	adds	r3, #4
 800aee8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	da02      	bge.n	800aefa <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	2200      	movs	r2, #0
 800aef8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d10c      	bne.n	800af1c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800af02:	4b35      	ldr	r3, [pc, #212]	; (800afd8 <tcp_output_segment+0x1b8>)
 800af04:	681a      	ldr	r2, [r3, #0]
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	68db      	ldr	r3, [r3, #12]
 800af0e:	685b      	ldr	r3, [r3, #4]
 800af10:	4618      	mov	r0, r3
 800af12:	f7f9 fdb4 	bl	8004a7e <lwip_htonl>
 800af16:	4602      	mov	r2, r0
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	68da      	ldr	r2, [r3, #12]
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	685b      	ldr	r3, [r3, #4]
 800af24:	685b      	ldr	r3, [r3, #4]
 800af26:	1ad3      	subs	r3, r2, r3
 800af28:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	685b      	ldr	r3, [r3, #4]
 800af2e:	8959      	ldrh	r1, [r3, #10]
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	685b      	ldr	r3, [r3, #4]
 800af34:	8b3a      	ldrh	r2, [r7, #24]
 800af36:	1a8a      	subs	r2, r1, r2
 800af38:	b292      	uxth	r2, r2
 800af3a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	8919      	ldrh	r1, [r3, #8]
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	8b3a      	ldrh	r2, [r7, #24]
 800af48:	1a8a      	subs	r2, r1, r2
 800af4a:	b292      	uxth	r2, r2
 800af4c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	68fa      	ldr	r2, [r7, #12]
 800af54:	68d2      	ldr	r2, [r2, #12]
 800af56:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	68db      	ldr	r3, [r3, #12]
 800af5c:	2200      	movs	r2, #0
 800af5e:	741a      	strb	r2, [r3, #16]
 800af60:	2200      	movs	r2, #0
 800af62:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	68da      	ldr	r2, [r3, #12]
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	7a9b      	ldrb	r3, [r3, #10]
 800af6c:	f003 0301 	and.w	r3, r3, #1
 800af70:	2b00      	cmp	r3, #0
 800af72:	d001      	beq.n	800af78 <tcp_output_segment+0x158>
 800af74:	2318      	movs	r3, #24
 800af76:	e000      	b.n	800af7a <tcp_output_segment+0x15a>
 800af78:	2314      	movs	r3, #20
 800af7a:	4413      	add	r3, r2
 800af7c:	69fa      	ldr	r2, [r7, #28]
 800af7e:	429a      	cmp	r2, r3
 800af80:	d006      	beq.n	800af90 <tcp_output_segment+0x170>
 800af82:	4b10      	ldr	r3, [pc, #64]	; (800afc4 <tcp_output_segment+0x1a4>)
 800af84:	f240 621c 	movw	r2, #1564	; 0x61c
 800af88:	4914      	ldr	r1, [pc, #80]	; (800afdc <tcp_output_segment+0x1bc>)
 800af8a:	4810      	ldr	r0, [pc, #64]	; (800afcc <tcp_output_segment+0x1ac>)
 800af8c:	f003 fcda 	bl	800e944 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	6858      	ldr	r0, [r3, #4]
 800af94:	68b9      	ldr	r1, [r7, #8]
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	1d1c      	adds	r4, r3, #4
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	7add      	ldrb	r5, [r3, #11]
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	7a9b      	ldrb	r3, [r3, #10]
 800afa2:	687a      	ldr	r2, [r7, #4]
 800afa4:	9202      	str	r2, [sp, #8]
 800afa6:	2206      	movs	r2, #6
 800afa8:	9201      	str	r2, [sp, #4]
 800afaa:	9300      	str	r3, [sp, #0]
 800afac:	462b      	mov	r3, r5
 800afae:	4622      	mov	r2, r4
 800afb0:	f002 fb9a 	bl	800d6e8 <ip4_output_if>
 800afb4:	4603      	mov	r3, r0
 800afb6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800afb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	3720      	adds	r7, #32
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bdb0      	pop	{r4, r5, r7, pc}
 800afc4:	08010e58 	.word	0x08010e58
 800afc8:	0801141c 	.word	0x0801141c
 800afcc:	08010eac 	.word	0x08010eac
 800afd0:	0801143c 	.word	0x0801143c
 800afd4:	0801145c 	.word	0x0801145c
 800afd8:	2000a4b4 	.word	0x2000a4b4
 800afdc:	08011480 	.word	0x08011480

0800afe0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800afe0:	b5b0      	push	{r4, r5, r7, lr}
 800afe2:	b084      	sub	sp, #16
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d106      	bne.n	800affc <tcp_rexmit_rto_prepare+0x1c>
 800afee:	4b31      	ldr	r3, [pc, #196]	; (800b0b4 <tcp_rexmit_rto_prepare+0xd4>)
 800aff0:	f240 6263 	movw	r2, #1635	; 0x663
 800aff4:	4930      	ldr	r1, [pc, #192]	; (800b0b8 <tcp_rexmit_rto_prepare+0xd8>)
 800aff6:	4831      	ldr	r0, [pc, #196]	; (800b0bc <tcp_rexmit_rto_prepare+0xdc>)
 800aff8:	f003 fca4 	bl	800e944 <iprintf>

  if (pcb->unacked == NULL) {
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b000:	2b00      	cmp	r3, #0
 800b002:	d102      	bne.n	800b00a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800b004:	f06f 0305 	mvn.w	r3, #5
 800b008:	e050      	b.n	800b0ac <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b00e:	60fb      	str	r3, [r7, #12]
 800b010:	e00b      	b.n	800b02a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800b012:	68f8      	ldr	r0, [r7, #12]
 800b014:	f7ff fee4 	bl	800ade0 <tcp_output_segment_busy>
 800b018:	4603      	mov	r3, r0
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d002      	beq.n	800b024 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800b01e:	f06f 0305 	mvn.w	r3, #5
 800b022:	e043      	b.n	800b0ac <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	60fb      	str	r3, [r7, #12]
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d1ef      	bne.n	800b012 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800b032:	68f8      	ldr	r0, [r7, #12]
 800b034:	f7ff fed4 	bl	800ade0 <tcp_output_segment_busy>
 800b038:	4603      	mov	r3, r0
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d002      	beq.n	800b044 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800b03e:	f06f 0305 	mvn.w	r3, #5
 800b042:	e033      	b.n	800b0ac <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2200      	movs	r2, #0
 800b058:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	8b5b      	ldrh	r3, [r3, #26]
 800b05e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b062:	b29a      	uxth	r2, r3
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	68db      	ldr	r3, [r3, #12]
 800b06c:	685b      	ldr	r3, [r3, #4]
 800b06e:	4618      	mov	r0, r3
 800b070:	f7f9 fd05 	bl	8004a7e <lwip_htonl>
 800b074:	4604      	mov	r4, r0
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	891b      	ldrh	r3, [r3, #8]
 800b07a:	461d      	mov	r5, r3
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	68db      	ldr	r3, [r3, #12]
 800b080:	899b      	ldrh	r3, [r3, #12]
 800b082:	b29b      	uxth	r3, r3
 800b084:	4618      	mov	r0, r3
 800b086:	f7f9 fce5 	bl	8004a54 <lwip_htons>
 800b08a:	4603      	mov	r3, r0
 800b08c:	b2db      	uxtb	r3, r3
 800b08e:	f003 0303 	and.w	r3, r3, #3
 800b092:	2b00      	cmp	r3, #0
 800b094:	d001      	beq.n	800b09a <tcp_rexmit_rto_prepare+0xba>
 800b096:	2301      	movs	r3, #1
 800b098:	e000      	b.n	800b09c <tcp_rexmit_rto_prepare+0xbc>
 800b09a:	2300      	movs	r3, #0
 800b09c:	442b      	add	r3, r5
 800b09e:	18e2      	adds	r2, r4, r3
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800b0aa:	2300      	movs	r3, #0
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3710      	adds	r7, #16
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bdb0      	pop	{r4, r5, r7, pc}
 800b0b4:	08010e58 	.word	0x08010e58
 800b0b8:	08011494 	.word	0x08011494
 800b0bc:	08010eac 	.word	0x08010eac

0800b0c0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b082      	sub	sp, #8
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d106      	bne.n	800b0dc <tcp_rexmit_rto_commit+0x1c>
 800b0ce:	4b0d      	ldr	r3, [pc, #52]	; (800b104 <tcp_rexmit_rto_commit+0x44>)
 800b0d0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800b0d4:	490c      	ldr	r1, [pc, #48]	; (800b108 <tcp_rexmit_rto_commit+0x48>)
 800b0d6:	480d      	ldr	r0, [pc, #52]	; (800b10c <tcp_rexmit_rto_commit+0x4c>)
 800b0d8:	f003 fc34 	bl	800e944 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b0e2:	2bff      	cmp	r3, #255	; 0xff
 800b0e4:	d007      	beq.n	800b0f6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b0ec:	3301      	adds	r3, #1
 800b0ee:	b2da      	uxtb	r2, r3
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f7ff fc7e 	bl	800a9f8 <tcp_output>
}
 800b0fc:	bf00      	nop
 800b0fe:	3708      	adds	r7, #8
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}
 800b104:	08010e58 	.word	0x08010e58
 800b108:	080114b8 	.word	0x080114b8
 800b10c:	08010eac 	.word	0x08010eac

0800b110 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b082      	sub	sp, #8
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d106      	bne.n	800b12c <tcp_rexmit_rto+0x1c>
 800b11e:	4b0a      	ldr	r3, [pc, #40]	; (800b148 <tcp_rexmit_rto+0x38>)
 800b120:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800b124:	4909      	ldr	r1, [pc, #36]	; (800b14c <tcp_rexmit_rto+0x3c>)
 800b126:	480a      	ldr	r0, [pc, #40]	; (800b150 <tcp_rexmit_rto+0x40>)
 800b128:	f003 fc0c 	bl	800e944 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f7ff ff57 	bl	800afe0 <tcp_rexmit_rto_prepare>
 800b132:	4603      	mov	r3, r0
 800b134:	2b00      	cmp	r3, #0
 800b136:	d102      	bne.n	800b13e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f7ff ffc1 	bl	800b0c0 <tcp_rexmit_rto_commit>
  }
}
 800b13e:	bf00      	nop
 800b140:	3708      	adds	r7, #8
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}
 800b146:	bf00      	nop
 800b148:	08010e58 	.word	0x08010e58
 800b14c:	080114dc 	.word	0x080114dc
 800b150:	08010eac 	.word	0x08010eac

0800b154 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800b154:	b590      	push	{r4, r7, lr}
 800b156:	b085      	sub	sp, #20
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d106      	bne.n	800b170 <tcp_rexmit+0x1c>
 800b162:	4b2f      	ldr	r3, [pc, #188]	; (800b220 <tcp_rexmit+0xcc>)
 800b164:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800b168:	492e      	ldr	r1, [pc, #184]	; (800b224 <tcp_rexmit+0xd0>)
 800b16a:	482f      	ldr	r0, [pc, #188]	; (800b228 <tcp_rexmit+0xd4>)
 800b16c:	f003 fbea 	bl	800e944 <iprintf>

  if (pcb->unacked == NULL) {
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b174:	2b00      	cmp	r3, #0
 800b176:	d102      	bne.n	800b17e <tcp_rexmit+0x2a>
    return ERR_VAL;
 800b178:	f06f 0305 	mvn.w	r3, #5
 800b17c:	e04c      	b.n	800b218 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b182:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800b184:	68b8      	ldr	r0, [r7, #8]
 800b186:	f7ff fe2b 	bl	800ade0 <tcp_output_segment_busy>
 800b18a:	4603      	mov	r3, r0
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d002      	beq.n	800b196 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800b190:	f06f 0305 	mvn.w	r3, #5
 800b194:	e040      	b.n	800b218 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	681a      	ldr	r2, [r3, #0]
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	336c      	adds	r3, #108	; 0x6c
 800b1a2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b1a4:	e002      	b.n	800b1ac <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d011      	beq.n	800b1d8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	68db      	ldr	r3, [r3, #12]
 800b1ba:	685b      	ldr	r3, [r3, #4]
 800b1bc:	4618      	mov	r0, r3
 800b1be:	f7f9 fc5e 	bl	8004a7e <lwip_htonl>
 800b1c2:	4604      	mov	r4, r0
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	68db      	ldr	r3, [r3, #12]
 800b1c8:	685b      	ldr	r3, [r3, #4]
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f7f9 fc57 	bl	8004a7e <lwip_htonl>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	dbe6      	blt.n	800b1a6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	681a      	ldr	r2, [r3, #0]
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	68ba      	ldr	r2, [r7, #8]
 800b1e4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d103      	bne.n	800b1f6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b1fc:	2bff      	cmp	r3, #255	; 0xff
 800b1fe:	d007      	beq.n	800b210 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b206:	3301      	adds	r3, #1
 800b208:	b2da      	uxtb	r2, r3
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2200      	movs	r2, #0
 800b214:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800b216:	2300      	movs	r3, #0
}
 800b218:	4618      	mov	r0, r3
 800b21a:	3714      	adds	r7, #20
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd90      	pop	{r4, r7, pc}
 800b220:	08010e58 	.word	0x08010e58
 800b224:	080114f8 	.word	0x080114f8
 800b228:	08010eac 	.word	0x08010eac

0800b22c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b082      	sub	sp, #8
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d106      	bne.n	800b248 <tcp_rexmit_fast+0x1c>
 800b23a:	4b2a      	ldr	r3, [pc, #168]	; (800b2e4 <tcp_rexmit_fast+0xb8>)
 800b23c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800b240:	4929      	ldr	r1, [pc, #164]	; (800b2e8 <tcp_rexmit_fast+0xbc>)
 800b242:	482a      	ldr	r0, [pc, #168]	; (800b2ec <tcp_rexmit_fast+0xc0>)
 800b244:	f003 fb7e 	bl	800e944 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d045      	beq.n	800b2dc <tcp_rexmit_fast+0xb0>
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	8b5b      	ldrh	r3, [r3, #26]
 800b254:	f003 0304 	and.w	r3, r3, #4
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d13f      	bne.n	800b2dc <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800b25c:	6878      	ldr	r0, [r7, #4]
 800b25e:	f7ff ff79 	bl	800b154 <tcp_rexmit>
 800b262:	4603      	mov	r3, r0
 800b264:	2b00      	cmp	r3, #0
 800b266:	d139      	bne.n	800b2dc <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b274:	4293      	cmp	r3, r2
 800b276:	bf28      	it	cs
 800b278:	4613      	movcs	r3, r2
 800b27a:	b29b      	uxth	r3, r3
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	da00      	bge.n	800b282 <tcp_rexmit_fast+0x56>
 800b280:	3301      	adds	r3, #1
 800b282:	105b      	asrs	r3, r3, #1
 800b284:	b29a      	uxth	r2, r3
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b292:	461a      	mov	r2, r3
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b298:	005b      	lsls	r3, r3, #1
 800b29a:	429a      	cmp	r2, r3
 800b29c:	d206      	bcs.n	800b2ac <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b2a2:	005b      	lsls	r3, r3, #1
 800b2a4:	b29a      	uxth	r2, r3
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b2b6:	4619      	mov	r1, r3
 800b2b8:	0049      	lsls	r1, r1, #1
 800b2ba:	440b      	add	r3, r1
 800b2bc:	b29b      	uxth	r3, r3
 800b2be:	4413      	add	r3, r2
 800b2c0:	b29a      	uxth	r2, r3
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	8b5b      	ldrh	r3, [r3, #26]
 800b2cc:	f043 0304 	orr.w	r3, r3, #4
 800b2d0:	b29a      	uxth	r2, r3
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800b2dc:	bf00      	nop
 800b2de:	3708      	adds	r7, #8
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}
 800b2e4:	08010e58 	.word	0x08010e58
 800b2e8:	08011510 	.word	0x08011510
 800b2ec:	08010eac 	.word	0x08010eac

0800b2f0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b086      	sub	sp, #24
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	60f8      	str	r0, [r7, #12]
 800b2f8:	607b      	str	r3, [r7, #4]
 800b2fa:	460b      	mov	r3, r1
 800b2fc:	817b      	strh	r3, [r7, #10]
 800b2fe:	4613      	mov	r3, r2
 800b300:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b302:	897a      	ldrh	r2, [r7, #10]
 800b304:	893b      	ldrh	r3, [r7, #8]
 800b306:	4413      	add	r3, r2
 800b308:	b29b      	uxth	r3, r3
 800b30a:	3314      	adds	r3, #20
 800b30c:	b29b      	uxth	r3, r3
 800b30e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b312:	4619      	mov	r1, r3
 800b314:	2022      	movs	r0, #34	; 0x22
 800b316:	f7fa fc17 	bl	8005b48 <pbuf_alloc>
 800b31a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800b31c:	697b      	ldr	r3, [r7, #20]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d04d      	beq.n	800b3be <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b322:	897b      	ldrh	r3, [r7, #10]
 800b324:	3313      	adds	r3, #19
 800b326:	697a      	ldr	r2, [r7, #20]
 800b328:	8952      	ldrh	r2, [r2, #10]
 800b32a:	4293      	cmp	r3, r2
 800b32c:	db06      	blt.n	800b33c <tcp_output_alloc_header_common+0x4c>
 800b32e:	4b26      	ldr	r3, [pc, #152]	; (800b3c8 <tcp_output_alloc_header_common+0xd8>)
 800b330:	f240 7223 	movw	r2, #1827	; 0x723
 800b334:	4925      	ldr	r1, [pc, #148]	; (800b3cc <tcp_output_alloc_header_common+0xdc>)
 800b336:	4826      	ldr	r0, [pc, #152]	; (800b3d0 <tcp_output_alloc_header_common+0xe0>)
 800b338:	f003 fb04 	bl	800e944 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800b33c:	697b      	ldr	r3, [r7, #20]
 800b33e:	685b      	ldr	r3, [r3, #4]
 800b340:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800b342:	8c3b      	ldrh	r3, [r7, #32]
 800b344:	4618      	mov	r0, r3
 800b346:	f7f9 fb85 	bl	8004a54 <lwip_htons>
 800b34a:	4603      	mov	r3, r0
 800b34c:	461a      	mov	r2, r3
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800b352:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b354:	4618      	mov	r0, r3
 800b356:	f7f9 fb7d 	bl	8004a54 <lwip_htons>
 800b35a:	4603      	mov	r3, r0
 800b35c:	461a      	mov	r2, r3
 800b35e:	693b      	ldr	r3, [r7, #16]
 800b360:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800b362:	693b      	ldr	r3, [r7, #16]
 800b364:	687a      	ldr	r2, [r7, #4]
 800b366:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800b368:	68f8      	ldr	r0, [r7, #12]
 800b36a:	f7f9 fb88 	bl	8004a7e <lwip_htonl>
 800b36e:	4602      	mov	r2, r0
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800b374:	897b      	ldrh	r3, [r7, #10]
 800b376:	089b      	lsrs	r3, r3, #2
 800b378:	b29b      	uxth	r3, r3
 800b37a:	3305      	adds	r3, #5
 800b37c:	b29b      	uxth	r3, r3
 800b37e:	031b      	lsls	r3, r3, #12
 800b380:	b29a      	uxth	r2, r3
 800b382:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b386:	b29b      	uxth	r3, r3
 800b388:	4313      	orrs	r3, r2
 800b38a:	b29b      	uxth	r3, r3
 800b38c:	4618      	mov	r0, r3
 800b38e:	f7f9 fb61 	bl	8004a54 <lwip_htons>
 800b392:	4603      	mov	r3, r0
 800b394:	461a      	mov	r2, r3
 800b396:	693b      	ldr	r3, [r7, #16]
 800b398:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800b39a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b39c:	4618      	mov	r0, r3
 800b39e:	f7f9 fb59 	bl	8004a54 <lwip_htons>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	461a      	mov	r2, r3
 800b3a6:	693b      	ldr	r3, [r7, #16]
 800b3a8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800b3aa:	693b      	ldr	r3, [r7, #16]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	741a      	strb	r2, [r3, #16]
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800b3b4:	693b      	ldr	r3, [r7, #16]
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	749a      	strb	r2, [r3, #18]
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800b3be:	697b      	ldr	r3, [r7, #20]
}
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	3718      	adds	r7, #24
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}
 800b3c8:	08010e58 	.word	0x08010e58
 800b3cc:	08011530 	.word	0x08011530
 800b3d0:	08010eac 	.word	0x08010eac

0800b3d4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800b3d4:	b5b0      	push	{r4, r5, r7, lr}
 800b3d6:	b08a      	sub	sp, #40	; 0x28
 800b3d8:	af04      	add	r7, sp, #16
 800b3da:	60f8      	str	r0, [r7, #12]
 800b3dc:	607b      	str	r3, [r7, #4]
 800b3de:	460b      	mov	r3, r1
 800b3e0:	817b      	strh	r3, [r7, #10]
 800b3e2:	4613      	mov	r3, r2
 800b3e4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d106      	bne.n	800b3fa <tcp_output_alloc_header+0x26>
 800b3ec:	4b15      	ldr	r3, [pc, #84]	; (800b444 <tcp_output_alloc_header+0x70>)
 800b3ee:	f240 7242 	movw	r2, #1858	; 0x742
 800b3f2:	4915      	ldr	r1, [pc, #84]	; (800b448 <tcp_output_alloc_header+0x74>)
 800b3f4:	4815      	ldr	r0, [pc, #84]	; (800b44c <tcp_output_alloc_header+0x78>)
 800b3f6:	f003 faa5 	bl	800e944 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	8adb      	ldrh	r3, [r3, #22]
 800b402:	68fa      	ldr	r2, [r7, #12]
 800b404:	8b12      	ldrh	r2, [r2, #24]
 800b406:	68f9      	ldr	r1, [r7, #12]
 800b408:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800b40a:	893d      	ldrh	r5, [r7, #8]
 800b40c:	897c      	ldrh	r4, [r7, #10]
 800b40e:	9103      	str	r1, [sp, #12]
 800b410:	2110      	movs	r1, #16
 800b412:	9102      	str	r1, [sp, #8]
 800b414:	9201      	str	r2, [sp, #4]
 800b416:	9300      	str	r3, [sp, #0]
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	462a      	mov	r2, r5
 800b41c:	4621      	mov	r1, r4
 800b41e:	f7ff ff67 	bl	800b2f0 <tcp_output_alloc_header_common>
 800b422:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d006      	beq.n	800b438 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b42e:	68fa      	ldr	r2, [r7, #12]
 800b430:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b432:	441a      	add	r2, r3
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800b438:	697b      	ldr	r3, [r7, #20]
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	3718      	adds	r7, #24
 800b43e:	46bd      	mov	sp, r7
 800b440:	bdb0      	pop	{r4, r5, r7, pc}
 800b442:	bf00      	nop
 800b444:	08010e58 	.word	0x08010e58
 800b448:	08011560 	.word	0x08011560
 800b44c:	08010eac 	.word	0x08010eac

0800b450 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b088      	sub	sp, #32
 800b454:	af00      	add	r7, sp, #0
 800b456:	60f8      	str	r0, [r7, #12]
 800b458:	60b9      	str	r1, [r7, #8]
 800b45a:	4611      	mov	r1, r2
 800b45c:	461a      	mov	r2, r3
 800b45e:	460b      	mov	r3, r1
 800b460:	71fb      	strb	r3, [r7, #7]
 800b462:	4613      	mov	r3, r2
 800b464:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800b466:	2300      	movs	r3, #0
 800b468:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d106      	bne.n	800b47e <tcp_output_fill_options+0x2e>
 800b470:	4b12      	ldr	r3, [pc, #72]	; (800b4bc <tcp_output_fill_options+0x6c>)
 800b472:	f240 7256 	movw	r2, #1878	; 0x756
 800b476:	4912      	ldr	r1, [pc, #72]	; (800b4c0 <tcp_output_fill_options+0x70>)
 800b478:	4812      	ldr	r0, [pc, #72]	; (800b4c4 <tcp_output_fill_options+0x74>)
 800b47a:	f003 fa63 	bl	800e944 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800b47e:	68bb      	ldr	r3, [r7, #8]
 800b480:	685b      	ldr	r3, [r3, #4]
 800b482:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800b484:	69bb      	ldr	r3, [r7, #24]
 800b486:	3314      	adds	r3, #20
 800b488:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800b48a:	8bfb      	ldrh	r3, [r7, #30]
 800b48c:	009b      	lsls	r3, r3, #2
 800b48e:	461a      	mov	r2, r3
 800b490:	79fb      	ldrb	r3, [r7, #7]
 800b492:	009b      	lsls	r3, r3, #2
 800b494:	f003 0304 	and.w	r3, r3, #4
 800b498:	4413      	add	r3, r2
 800b49a:	3314      	adds	r3, #20
 800b49c:	69ba      	ldr	r2, [r7, #24]
 800b49e:	4413      	add	r3, r2
 800b4a0:	697a      	ldr	r2, [r7, #20]
 800b4a2:	429a      	cmp	r2, r3
 800b4a4:	d006      	beq.n	800b4b4 <tcp_output_fill_options+0x64>
 800b4a6:	4b05      	ldr	r3, [pc, #20]	; (800b4bc <tcp_output_fill_options+0x6c>)
 800b4a8:	f240 7275 	movw	r2, #1909	; 0x775
 800b4ac:	4906      	ldr	r1, [pc, #24]	; (800b4c8 <tcp_output_fill_options+0x78>)
 800b4ae:	4805      	ldr	r0, [pc, #20]	; (800b4c4 <tcp_output_fill_options+0x74>)
 800b4b0:	f003 fa48 	bl	800e944 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800b4b4:	bf00      	nop
 800b4b6:	3720      	adds	r7, #32
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}
 800b4bc:	08010e58 	.word	0x08010e58
 800b4c0:	08011588 	.word	0x08011588
 800b4c4:	08010eac 	.word	0x08010eac
 800b4c8:	08011480 	.word	0x08011480

0800b4cc <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b08a      	sub	sp, #40	; 0x28
 800b4d0:	af04      	add	r7, sp, #16
 800b4d2:	60f8      	str	r0, [r7, #12]
 800b4d4:	60b9      	str	r1, [r7, #8]
 800b4d6:	607a      	str	r2, [r7, #4]
 800b4d8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d106      	bne.n	800b4ee <tcp_output_control_segment+0x22>
 800b4e0:	4b1c      	ldr	r3, [pc, #112]	; (800b554 <tcp_output_control_segment+0x88>)
 800b4e2:	f240 7287 	movw	r2, #1927	; 0x787
 800b4e6:	491c      	ldr	r1, [pc, #112]	; (800b558 <tcp_output_control_segment+0x8c>)
 800b4e8:	481c      	ldr	r0, [pc, #112]	; (800b55c <tcp_output_control_segment+0x90>)
 800b4ea:	f003 fa2b 	bl	800e944 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800b4ee:	683a      	ldr	r2, [r7, #0]
 800b4f0:	6879      	ldr	r1, [r7, #4]
 800b4f2:	68f8      	ldr	r0, [r7, #12]
 800b4f4:	f7fe ff40 	bl	800a378 <tcp_route>
 800b4f8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800b4fa:	693b      	ldr	r3, [r7, #16]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d102      	bne.n	800b506 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800b500:	23fc      	movs	r3, #252	; 0xfc
 800b502:	75fb      	strb	r3, [r7, #23]
 800b504:	e01c      	b.n	800b540 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d006      	beq.n	800b51a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	7adb      	ldrb	r3, [r3, #11]
 800b510:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	7a9b      	ldrb	r3, [r3, #10]
 800b516:	757b      	strb	r3, [r7, #21]
 800b518:	e003      	b.n	800b522 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800b51a:	23ff      	movs	r3, #255	; 0xff
 800b51c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800b51e:	2300      	movs	r3, #0
 800b520:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800b522:	7dba      	ldrb	r2, [r7, #22]
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	9302      	str	r3, [sp, #8]
 800b528:	2306      	movs	r3, #6
 800b52a:	9301      	str	r3, [sp, #4]
 800b52c:	7d7b      	ldrb	r3, [r7, #21]
 800b52e:	9300      	str	r3, [sp, #0]
 800b530:	4613      	mov	r3, r2
 800b532:	683a      	ldr	r2, [r7, #0]
 800b534:	6879      	ldr	r1, [r7, #4]
 800b536:	68b8      	ldr	r0, [r7, #8]
 800b538:	f002 f8d6 	bl	800d6e8 <ip4_output_if>
 800b53c:	4603      	mov	r3, r0
 800b53e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800b540:	68b8      	ldr	r0, [r7, #8]
 800b542:	f7fa fde5 	bl	8006110 <pbuf_free>
  return err;
 800b546:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b54a:	4618      	mov	r0, r3
 800b54c:	3718      	adds	r7, #24
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}
 800b552:	bf00      	nop
 800b554:	08010e58 	.word	0x08010e58
 800b558:	080115b0 	.word	0x080115b0
 800b55c:	08010eac 	.word	0x08010eac

0800b560 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800b560:	b590      	push	{r4, r7, lr}
 800b562:	b08b      	sub	sp, #44	; 0x2c
 800b564:	af04      	add	r7, sp, #16
 800b566:	60f8      	str	r0, [r7, #12]
 800b568:	60b9      	str	r1, [r7, #8]
 800b56a:	607a      	str	r2, [r7, #4]
 800b56c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d106      	bne.n	800b582 <tcp_rst+0x22>
 800b574:	4b1f      	ldr	r3, [pc, #124]	; (800b5f4 <tcp_rst+0x94>)
 800b576:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800b57a:	491f      	ldr	r1, [pc, #124]	; (800b5f8 <tcp_rst+0x98>)
 800b57c:	481f      	ldr	r0, [pc, #124]	; (800b5fc <tcp_rst+0x9c>)
 800b57e:	f003 f9e1 	bl	800e944 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800b582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b584:	2b00      	cmp	r3, #0
 800b586:	d106      	bne.n	800b596 <tcp_rst+0x36>
 800b588:	4b1a      	ldr	r3, [pc, #104]	; (800b5f4 <tcp_rst+0x94>)
 800b58a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800b58e:	491c      	ldr	r1, [pc, #112]	; (800b600 <tcp_rst+0xa0>)
 800b590:	481a      	ldr	r0, [pc, #104]	; (800b5fc <tcp_rst+0x9c>)
 800b592:	f003 f9d7 	bl	800e944 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b596:	2300      	movs	r3, #0
 800b598:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800b59a:	f246 0308 	movw	r3, #24584	; 0x6008
 800b59e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800b5a0:	7dfb      	ldrb	r3, [r7, #23]
 800b5a2:	b29c      	uxth	r4, r3
 800b5a4:	68b8      	ldr	r0, [r7, #8]
 800b5a6:	f7f9 fa6a 	bl	8004a7e <lwip_htonl>
 800b5aa:	4602      	mov	r2, r0
 800b5ac:	8abb      	ldrh	r3, [r7, #20]
 800b5ae:	9303      	str	r3, [sp, #12]
 800b5b0:	2314      	movs	r3, #20
 800b5b2:	9302      	str	r3, [sp, #8]
 800b5b4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b5b6:	9301      	str	r3, [sp, #4]
 800b5b8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b5ba:	9300      	str	r3, [sp, #0]
 800b5bc:	4613      	mov	r3, r2
 800b5be:	2200      	movs	r2, #0
 800b5c0:	4621      	mov	r1, r4
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f7ff fe94 	bl	800b2f0 <tcp_output_alloc_header_common>
 800b5c8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800b5ca:	693b      	ldr	r3, [r7, #16]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d00c      	beq.n	800b5ea <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b5d0:	7dfb      	ldrb	r3, [r7, #23]
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	6939      	ldr	r1, [r7, #16]
 800b5d6:	68f8      	ldr	r0, [r7, #12]
 800b5d8:	f7ff ff3a 	bl	800b450 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800b5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5de:	683a      	ldr	r2, [r7, #0]
 800b5e0:	6939      	ldr	r1, [r7, #16]
 800b5e2:	68f8      	ldr	r0, [r7, #12]
 800b5e4:	f7ff ff72 	bl	800b4cc <tcp_output_control_segment>
 800b5e8:	e000      	b.n	800b5ec <tcp_rst+0x8c>
    return;
 800b5ea:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800b5ec:	371c      	adds	r7, #28
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd90      	pop	{r4, r7, pc}
 800b5f2:	bf00      	nop
 800b5f4:	08010e58 	.word	0x08010e58
 800b5f8:	080115dc 	.word	0x080115dc
 800b5fc:	08010eac 	.word	0x08010eac
 800b600:	080115f8 	.word	0x080115f8

0800b604 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800b604:	b590      	push	{r4, r7, lr}
 800b606:	b087      	sub	sp, #28
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800b60c:	2300      	movs	r3, #0
 800b60e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800b610:	2300      	movs	r3, #0
 800b612:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d106      	bne.n	800b628 <tcp_send_empty_ack+0x24>
 800b61a:	4b28      	ldr	r3, [pc, #160]	; (800b6bc <tcp_send_empty_ack+0xb8>)
 800b61c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800b620:	4927      	ldr	r1, [pc, #156]	; (800b6c0 <tcp_send_empty_ack+0xbc>)
 800b622:	4828      	ldr	r0, [pc, #160]	; (800b6c4 <tcp_send_empty_ack+0xc0>)
 800b624:	f003 f98e 	bl	800e944 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b628:	7dfb      	ldrb	r3, [r7, #23]
 800b62a:	009b      	lsls	r3, r3, #2
 800b62c:	b2db      	uxtb	r3, r3
 800b62e:	f003 0304 	and.w	r3, r3, #4
 800b632:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800b634:	7d7b      	ldrb	r3, [r7, #21]
 800b636:	b29c      	uxth	r4, r3
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b63c:	4618      	mov	r0, r3
 800b63e:	f7f9 fa1e 	bl	8004a7e <lwip_htonl>
 800b642:	4603      	mov	r3, r0
 800b644:	2200      	movs	r2, #0
 800b646:	4621      	mov	r1, r4
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f7ff fec3 	bl	800b3d4 <tcp_output_alloc_header>
 800b64e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b650:	693b      	ldr	r3, [r7, #16]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d109      	bne.n	800b66a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	8b5b      	ldrh	r3, [r3, #26]
 800b65a:	f043 0303 	orr.w	r3, r3, #3
 800b65e:	b29a      	uxth	r2, r3
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800b664:	f06f 0301 	mvn.w	r3, #1
 800b668:	e023      	b.n	800b6b2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800b66a:	7dbb      	ldrb	r3, [r7, #22]
 800b66c:	7dfa      	ldrb	r2, [r7, #23]
 800b66e:	6939      	ldr	r1, [r7, #16]
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f7ff feed 	bl	800b450 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b676:	687a      	ldr	r2, [r7, #4]
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	3304      	adds	r3, #4
 800b67c:	6939      	ldr	r1, [r7, #16]
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f7ff ff24 	bl	800b4cc <tcp_output_control_segment>
 800b684:	4603      	mov	r3, r0
 800b686:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800b688:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d007      	beq.n	800b6a0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	8b5b      	ldrh	r3, [r3, #26]
 800b694:	f043 0303 	orr.w	r3, r3, #3
 800b698:	b29a      	uxth	r2, r3
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	835a      	strh	r2, [r3, #26]
 800b69e:	e006      	b.n	800b6ae <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	8b5b      	ldrh	r3, [r3, #26]
 800b6a4:	f023 0303 	bic.w	r3, r3, #3
 800b6a8:	b29a      	uxth	r2, r3
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800b6ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	371c      	adds	r7, #28
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd90      	pop	{r4, r7, pc}
 800b6ba:	bf00      	nop
 800b6bc:	08010e58 	.word	0x08010e58
 800b6c0:	08011614 	.word	0x08011614
 800b6c4:	08010eac 	.word	0x08010eac

0800b6c8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800b6c8:	b590      	push	{r4, r7, lr}
 800b6ca:	b087      	sub	sp, #28
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d106      	bne.n	800b6e8 <tcp_keepalive+0x20>
 800b6da:	4b18      	ldr	r3, [pc, #96]	; (800b73c <tcp_keepalive+0x74>)
 800b6dc:	f640 0224 	movw	r2, #2084	; 0x824
 800b6e0:	4917      	ldr	r1, [pc, #92]	; (800b740 <tcp_keepalive+0x78>)
 800b6e2:	4818      	ldr	r0, [pc, #96]	; (800b744 <tcp_keepalive+0x7c>)
 800b6e4:	f003 f92e 	bl	800e944 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800b6e8:	7dfb      	ldrb	r3, [r7, #23]
 800b6ea:	b29c      	uxth	r4, r3
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6f0:	3b01      	subs	r3, #1
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	f7f9 f9c3 	bl	8004a7e <lwip_htonl>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	4621      	mov	r1, r4
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	f7ff fe68 	bl	800b3d4 <tcp_output_alloc_header>
 800b704:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b706:	693b      	ldr	r3, [r7, #16]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d102      	bne.n	800b712 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800b70c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b710:	e010      	b.n	800b734 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b712:	7dfb      	ldrb	r3, [r7, #23]
 800b714:	2200      	movs	r2, #0
 800b716:	6939      	ldr	r1, [r7, #16]
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	f7ff fe99 	bl	800b450 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b71e:	687a      	ldr	r2, [r7, #4]
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	3304      	adds	r3, #4
 800b724:	6939      	ldr	r1, [r7, #16]
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f7ff fed0 	bl	800b4cc <tcp_output_control_segment>
 800b72c:	4603      	mov	r3, r0
 800b72e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b730:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b734:	4618      	mov	r0, r3
 800b736:	371c      	adds	r7, #28
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd90      	pop	{r4, r7, pc}
 800b73c:	08010e58 	.word	0x08010e58
 800b740:	08011634 	.word	0x08011634
 800b744:	08010eac 	.word	0x08010eac

0800b748 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800b748:	b590      	push	{r4, r7, lr}
 800b74a:	b08b      	sub	sp, #44	; 0x2c
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b750:	2300      	movs	r3, #0
 800b752:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d106      	bne.n	800b76a <tcp_zero_window_probe+0x22>
 800b75c:	4b4c      	ldr	r3, [pc, #304]	; (800b890 <tcp_zero_window_probe+0x148>)
 800b75e:	f640 024f 	movw	r2, #2127	; 0x84f
 800b762:	494c      	ldr	r1, [pc, #304]	; (800b894 <tcp_zero_window_probe+0x14c>)
 800b764:	484c      	ldr	r0, [pc, #304]	; (800b898 <tcp_zero_window_probe+0x150>)
 800b766:	f003 f8ed 	bl	800e944 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b76e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800b770:	6a3b      	ldr	r3, [r7, #32]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d101      	bne.n	800b77a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800b776:	2300      	movs	r3, #0
 800b778:	e086      	b.n	800b888 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b780:	2bff      	cmp	r3, #255	; 0xff
 800b782:	d007      	beq.n	800b794 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b78a:	3301      	adds	r3, #1
 800b78c:	b2da      	uxtb	r2, r3
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800b794:	6a3b      	ldr	r3, [r7, #32]
 800b796:	68db      	ldr	r3, [r3, #12]
 800b798:	899b      	ldrh	r3, [r3, #12]
 800b79a:	b29b      	uxth	r3, r3
 800b79c:	4618      	mov	r0, r3
 800b79e:	f7f9 f959 	bl	8004a54 <lwip_htons>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	b2db      	uxtb	r3, r3
 800b7a6:	f003 0301 	and.w	r3, r3, #1
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d005      	beq.n	800b7ba <tcp_zero_window_probe+0x72>
 800b7ae:	6a3b      	ldr	r3, [r7, #32]
 800b7b0:	891b      	ldrh	r3, [r3, #8]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d101      	bne.n	800b7ba <tcp_zero_window_probe+0x72>
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	e000      	b.n	800b7bc <tcp_zero_window_probe+0x74>
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800b7be:	7ffb      	ldrb	r3, [r7, #31]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	bf0c      	ite	eq
 800b7c4:	2301      	moveq	r3, #1
 800b7c6:	2300      	movne	r3, #0
 800b7c8:	b2db      	uxtb	r3, r3
 800b7ca:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800b7cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7d0:	b299      	uxth	r1, r3
 800b7d2:	6a3b      	ldr	r3, [r7, #32]
 800b7d4:	68db      	ldr	r3, [r3, #12]
 800b7d6:	685b      	ldr	r3, [r3, #4]
 800b7d8:	8bba      	ldrh	r2, [r7, #28]
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f7ff fdfa 	bl	800b3d4 <tcp_output_alloc_header>
 800b7e0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800b7e2:	69bb      	ldr	r3, [r7, #24]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d102      	bne.n	800b7ee <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800b7e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b7ec:	e04c      	b.n	800b888 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800b7ee:	69bb      	ldr	r3, [r7, #24]
 800b7f0:	685b      	ldr	r3, [r3, #4]
 800b7f2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800b7f4:	7ffb      	ldrb	r3, [r7, #31]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d011      	beq.n	800b81e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	899b      	ldrh	r3, [r3, #12]
 800b7fe:	b29b      	uxth	r3, r3
 800b800:	b21b      	sxth	r3, r3
 800b802:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b806:	b21c      	sxth	r4, r3
 800b808:	2011      	movs	r0, #17
 800b80a:	f7f9 f923 	bl	8004a54 <lwip_htons>
 800b80e:	4603      	mov	r3, r0
 800b810:	b21b      	sxth	r3, r3
 800b812:	4323      	orrs	r3, r4
 800b814:	b21b      	sxth	r3, r3
 800b816:	b29a      	uxth	r2, r3
 800b818:	697b      	ldr	r3, [r7, #20]
 800b81a:	819a      	strh	r2, [r3, #12]
 800b81c:	e010      	b.n	800b840 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800b81e:	69bb      	ldr	r3, [r7, #24]
 800b820:	685b      	ldr	r3, [r3, #4]
 800b822:	3314      	adds	r3, #20
 800b824:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800b826:	6a3b      	ldr	r3, [r7, #32]
 800b828:	6858      	ldr	r0, [r3, #4]
 800b82a:	6a3b      	ldr	r3, [r7, #32]
 800b82c:	685b      	ldr	r3, [r3, #4]
 800b82e:	891a      	ldrh	r2, [r3, #8]
 800b830:	6a3b      	ldr	r3, [r7, #32]
 800b832:	891b      	ldrh	r3, [r3, #8]
 800b834:	1ad3      	subs	r3, r2, r3
 800b836:	b29b      	uxth	r3, r3
 800b838:	2201      	movs	r2, #1
 800b83a:	6939      	ldr	r1, [r7, #16]
 800b83c:	f7fa fe52 	bl	80064e4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800b840:	6a3b      	ldr	r3, [r7, #32]
 800b842:	68db      	ldr	r3, [r3, #12]
 800b844:	685b      	ldr	r3, [r3, #4]
 800b846:	4618      	mov	r0, r3
 800b848:	f7f9 f919 	bl	8004a7e <lwip_htonl>
 800b84c:	4603      	mov	r3, r0
 800b84e:	3301      	adds	r3, #1
 800b850:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	1ad3      	subs	r3, r2, r3
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	da02      	bge.n	800b864 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	68fa      	ldr	r2, [r7, #12]
 800b862:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b864:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b868:	2200      	movs	r2, #0
 800b86a:	69b9      	ldr	r1, [r7, #24]
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f7ff fdef 	bl	800b450 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b872:	687a      	ldr	r2, [r7, #4]
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	3304      	adds	r3, #4
 800b878:	69b9      	ldr	r1, [r7, #24]
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f7ff fe26 	bl	800b4cc <tcp_output_control_segment>
 800b880:	4603      	mov	r3, r0
 800b882:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b884:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b888:	4618      	mov	r0, r3
 800b88a:	372c      	adds	r7, #44	; 0x2c
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bd90      	pop	{r4, r7, pc}
 800b890:	08010e58 	.word	0x08010e58
 800b894:	08011650 	.word	0x08011650
 800b898:	08010eac 	.word	0x08010eac

0800b89c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b082      	sub	sp, #8
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800b8a4:	f7fa ff0c 	bl	80066c0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800b8a8:	4b0a      	ldr	r3, [pc, #40]	; (800b8d4 <tcpip_tcp_timer+0x38>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d103      	bne.n	800b8b8 <tcpip_tcp_timer+0x1c>
 800b8b0:	4b09      	ldr	r3, [pc, #36]	; (800b8d8 <tcpip_tcp_timer+0x3c>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d005      	beq.n	800b8c4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	4908      	ldr	r1, [pc, #32]	; (800b8dc <tcpip_tcp_timer+0x40>)
 800b8bc:	20fa      	movs	r0, #250	; 0xfa
 800b8be:	f000 f8f3 	bl	800baa8 <sys_timeout>
 800b8c2:	e003      	b.n	800b8cc <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800b8c4:	4b06      	ldr	r3, [pc, #24]	; (800b8e0 <tcpip_tcp_timer+0x44>)
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	601a      	str	r2, [r3, #0]
  }
}
 800b8ca:	bf00      	nop
 800b8cc:	bf00      	nop
 800b8ce:	3708      	adds	r7, #8
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}
 800b8d4:	2000a4c0 	.word	0x2000a4c0
 800b8d8:	2000a4c4 	.word	0x2000a4c4
 800b8dc:	0800b89d 	.word	0x0800b89d
 800b8e0:	2000a50c 	.word	0x2000a50c

0800b8e4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800b8e8:	4b0a      	ldr	r3, [pc, #40]	; (800b914 <tcp_timer_needed+0x30>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d10f      	bne.n	800b910 <tcp_timer_needed+0x2c>
 800b8f0:	4b09      	ldr	r3, [pc, #36]	; (800b918 <tcp_timer_needed+0x34>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d103      	bne.n	800b900 <tcp_timer_needed+0x1c>
 800b8f8:	4b08      	ldr	r3, [pc, #32]	; (800b91c <tcp_timer_needed+0x38>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d007      	beq.n	800b910 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800b900:	4b04      	ldr	r3, [pc, #16]	; (800b914 <tcp_timer_needed+0x30>)
 800b902:	2201      	movs	r2, #1
 800b904:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b906:	2200      	movs	r2, #0
 800b908:	4905      	ldr	r1, [pc, #20]	; (800b920 <tcp_timer_needed+0x3c>)
 800b90a:	20fa      	movs	r0, #250	; 0xfa
 800b90c:	f000 f8cc 	bl	800baa8 <sys_timeout>
  }
}
 800b910:	bf00      	nop
 800b912:	bd80      	pop	{r7, pc}
 800b914:	2000a50c 	.word	0x2000a50c
 800b918:	2000a4c0 	.word	0x2000a4c0
 800b91c:	2000a4c4 	.word	0x2000a4c4
 800b920:	0800b89d 	.word	0x0800b89d

0800b924 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b086      	sub	sp, #24
 800b928:	af00      	add	r7, sp, #0
 800b92a:	60f8      	str	r0, [r7, #12]
 800b92c:	60b9      	str	r1, [r7, #8]
 800b92e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800b930:	2006      	movs	r0, #6
 800b932:	f7f9 fd07 	bl	8005344 <memp_malloc>
 800b936:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800b938:	693b      	ldr	r3, [r7, #16]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d109      	bne.n	800b952 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d151      	bne.n	800b9e8 <sys_timeout_abs+0xc4>
 800b944:	4b2a      	ldr	r3, [pc, #168]	; (800b9f0 <sys_timeout_abs+0xcc>)
 800b946:	22be      	movs	r2, #190	; 0xbe
 800b948:	492a      	ldr	r1, [pc, #168]	; (800b9f4 <sys_timeout_abs+0xd0>)
 800b94a:	482b      	ldr	r0, [pc, #172]	; (800b9f8 <sys_timeout_abs+0xd4>)
 800b94c:	f002 fffa 	bl	800e944 <iprintf>
    return;
 800b950:	e04a      	b.n	800b9e8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	2200      	movs	r2, #0
 800b956:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800b958:	693b      	ldr	r3, [r7, #16]
 800b95a:	68ba      	ldr	r2, [r7, #8]
 800b95c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800b95e:	693b      	ldr	r3, [r7, #16]
 800b960:	687a      	ldr	r2, [r7, #4]
 800b962:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	68fa      	ldr	r2, [r7, #12]
 800b968:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800b96a:	4b24      	ldr	r3, [pc, #144]	; (800b9fc <sys_timeout_abs+0xd8>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d103      	bne.n	800b97a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800b972:	4a22      	ldr	r2, [pc, #136]	; (800b9fc <sys_timeout_abs+0xd8>)
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	6013      	str	r3, [r2, #0]
    return;
 800b978:	e037      	b.n	800b9ea <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800b97a:	693b      	ldr	r3, [r7, #16]
 800b97c:	685a      	ldr	r2, [r3, #4]
 800b97e:	4b1f      	ldr	r3, [pc, #124]	; (800b9fc <sys_timeout_abs+0xd8>)
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	685b      	ldr	r3, [r3, #4]
 800b984:	1ad3      	subs	r3, r2, r3
 800b986:	0fdb      	lsrs	r3, r3, #31
 800b988:	f003 0301 	and.w	r3, r3, #1
 800b98c:	b2db      	uxtb	r3, r3
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d007      	beq.n	800b9a2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800b992:	4b1a      	ldr	r3, [pc, #104]	; (800b9fc <sys_timeout_abs+0xd8>)
 800b994:	681a      	ldr	r2, [r3, #0]
 800b996:	693b      	ldr	r3, [r7, #16]
 800b998:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800b99a:	4a18      	ldr	r2, [pc, #96]	; (800b9fc <sys_timeout_abs+0xd8>)
 800b99c:	693b      	ldr	r3, [r7, #16]
 800b99e:	6013      	str	r3, [r2, #0]
 800b9a0:	e023      	b.n	800b9ea <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800b9a2:	4b16      	ldr	r3, [pc, #88]	; (800b9fc <sys_timeout_abs+0xd8>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	617b      	str	r3, [r7, #20]
 800b9a8:	e01a      	b.n	800b9e0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800b9aa:	697b      	ldr	r3, [r7, #20]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d00b      	beq.n	800b9ca <sys_timeout_abs+0xa6>
 800b9b2:	693b      	ldr	r3, [r7, #16]
 800b9b4:	685a      	ldr	r2, [r3, #4]
 800b9b6:	697b      	ldr	r3, [r7, #20]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	685b      	ldr	r3, [r3, #4]
 800b9bc:	1ad3      	subs	r3, r2, r3
 800b9be:	0fdb      	lsrs	r3, r3, #31
 800b9c0:	f003 0301 	and.w	r3, r3, #1
 800b9c4:	b2db      	uxtb	r3, r3
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d007      	beq.n	800b9da <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	681a      	ldr	r2, [r3, #0]
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	693a      	ldr	r2, [r7, #16]
 800b9d6:	601a      	str	r2, [r3, #0]
        break;
 800b9d8:	e007      	b.n	800b9ea <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800b9da:	697b      	ldr	r3, [r7, #20]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	617b      	str	r3, [r7, #20]
 800b9e0:	697b      	ldr	r3, [r7, #20]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d1e1      	bne.n	800b9aa <sys_timeout_abs+0x86>
 800b9e6:	e000      	b.n	800b9ea <sys_timeout_abs+0xc6>
    return;
 800b9e8:	bf00      	nop
      }
    }
  }
}
 800b9ea:	3718      	adds	r7, #24
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}
 800b9f0:	08011674 	.word	0x08011674
 800b9f4:	080116a8 	.word	0x080116a8
 800b9f8:	080116e8 	.word	0x080116e8
 800b9fc:	2000a504 	.word	0x2000a504

0800ba00 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b086      	sub	sp, #24
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	685b      	ldr	r3, [r3, #4]
 800ba10:	4798      	blx	r3

  now = sys_now();
 800ba12:	f7f8 fe0b 	bl	800462c <sys_now>
 800ba16:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800ba18:	697b      	ldr	r3, [r7, #20]
 800ba1a:	681a      	ldr	r2, [r3, #0]
 800ba1c:	4b0f      	ldr	r3, [pc, #60]	; (800ba5c <lwip_cyclic_timer+0x5c>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	4413      	add	r3, r2
 800ba22:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800ba24:	68fa      	ldr	r2, [r7, #12]
 800ba26:	693b      	ldr	r3, [r7, #16]
 800ba28:	1ad3      	subs	r3, r2, r3
 800ba2a:	0fdb      	lsrs	r3, r3, #31
 800ba2c:	f003 0301 	and.w	r3, r3, #1
 800ba30:	b2db      	uxtb	r3, r3
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d009      	beq.n	800ba4a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800ba36:	697b      	ldr	r3, [r7, #20]
 800ba38:	681a      	ldr	r2, [r3, #0]
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	4413      	add	r3, r2
 800ba3e:	687a      	ldr	r2, [r7, #4]
 800ba40:	4907      	ldr	r1, [pc, #28]	; (800ba60 <lwip_cyclic_timer+0x60>)
 800ba42:	4618      	mov	r0, r3
 800ba44:	f7ff ff6e 	bl	800b924 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800ba48:	e004      	b.n	800ba54 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800ba4a:	687a      	ldr	r2, [r7, #4]
 800ba4c:	4904      	ldr	r1, [pc, #16]	; (800ba60 <lwip_cyclic_timer+0x60>)
 800ba4e:	68f8      	ldr	r0, [r7, #12]
 800ba50:	f7ff ff68 	bl	800b924 <sys_timeout_abs>
}
 800ba54:	bf00      	nop
 800ba56:	3718      	adds	r7, #24
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}
 800ba5c:	2000a508 	.word	0x2000a508
 800ba60:	0800ba01 	.word	0x0800ba01

0800ba64 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b082      	sub	sp, #8
 800ba68:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	607b      	str	r3, [r7, #4]
 800ba6e:	e00e      	b.n	800ba8e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800ba70:	4a0b      	ldr	r2, [pc, #44]	; (800baa0 <sys_timeouts_init+0x3c>)
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	00db      	lsls	r3, r3, #3
 800ba7c:	4a08      	ldr	r2, [pc, #32]	; (800baa0 <sys_timeouts_init+0x3c>)
 800ba7e:	4413      	add	r3, r2
 800ba80:	461a      	mov	r2, r3
 800ba82:	4908      	ldr	r1, [pc, #32]	; (800baa4 <sys_timeouts_init+0x40>)
 800ba84:	f000 f810 	bl	800baa8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	3301      	adds	r3, #1
 800ba8c:	607b      	str	r3, [r7, #4]
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2b02      	cmp	r3, #2
 800ba92:	d9ed      	bls.n	800ba70 <sys_timeouts_init+0xc>
  }
}
 800ba94:	bf00      	nop
 800ba96:	bf00      	nop
 800ba98:	3708      	adds	r7, #8
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}
 800ba9e:	bf00      	nop
 800baa0:	08012258 	.word	0x08012258
 800baa4:	0800ba01 	.word	0x0800ba01

0800baa8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b086      	sub	sp, #24
 800baac:	af00      	add	r7, sp, #0
 800baae:	60f8      	str	r0, [r7, #12]
 800bab0:	60b9      	str	r1, [r7, #8]
 800bab2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800baba:	d306      	bcc.n	800baca <sys_timeout+0x22>
 800babc:	4b0a      	ldr	r3, [pc, #40]	; (800bae8 <sys_timeout+0x40>)
 800babe:	f240 1229 	movw	r2, #297	; 0x129
 800bac2:	490a      	ldr	r1, [pc, #40]	; (800baec <sys_timeout+0x44>)
 800bac4:	480a      	ldr	r0, [pc, #40]	; (800baf0 <sys_timeout+0x48>)
 800bac6:	f002 ff3d 	bl	800e944 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800baca:	f7f8 fdaf 	bl	800462c <sys_now>
 800bace:	4602      	mov	r2, r0
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	4413      	add	r3, r2
 800bad4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800bad6:	687a      	ldr	r2, [r7, #4]
 800bad8:	68b9      	ldr	r1, [r7, #8]
 800bada:	6978      	ldr	r0, [r7, #20]
 800badc:	f7ff ff22 	bl	800b924 <sys_timeout_abs>
#endif
}
 800bae0:	bf00      	nop
 800bae2:	3718      	adds	r7, #24
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}
 800bae8:	08011674 	.word	0x08011674
 800baec:	08011710 	.word	0x08011710
 800baf0:	080116e8 	.word	0x080116e8

0800baf4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b084      	sub	sp, #16
 800baf8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800bafa:	f7f8 fd97 	bl	800462c <sys_now>
 800bafe:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800bb00:	4b1a      	ldr	r3, [pc, #104]	; (800bb6c <sys_check_timeouts+0x78>)
 800bb02:	781b      	ldrb	r3, [r3, #0]
 800bb04:	b2db      	uxtb	r3, r3
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d001      	beq.n	800bb0e <sys_check_timeouts+0x1a>
 800bb0a:	f7f9 ffc7 	bl	8005a9c <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800bb0e:	4b18      	ldr	r3, [pc, #96]	; (800bb70 <sys_check_timeouts+0x7c>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d022      	beq.n	800bb60 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800bb1a:	68bb      	ldr	r3, [r7, #8]
 800bb1c:	685b      	ldr	r3, [r3, #4]
 800bb1e:	68fa      	ldr	r2, [r7, #12]
 800bb20:	1ad3      	subs	r3, r2, r3
 800bb22:	0fdb      	lsrs	r3, r3, #31
 800bb24:	f003 0301 	and.w	r3, r3, #1
 800bb28:	b2db      	uxtb	r3, r3
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d11a      	bne.n	800bb64 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	4a0f      	ldr	r2, [pc, #60]	; (800bb70 <sys_check_timeouts+0x7c>)
 800bb34:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800bb36:	68bb      	ldr	r3, [r7, #8]
 800bb38:	689b      	ldr	r3, [r3, #8]
 800bb3a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	68db      	ldr	r3, [r3, #12]
 800bb40:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800bb42:	68bb      	ldr	r3, [r7, #8]
 800bb44:	685b      	ldr	r3, [r3, #4]
 800bb46:	4a0b      	ldr	r2, [pc, #44]	; (800bb74 <sys_check_timeouts+0x80>)
 800bb48:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800bb4a:	68b9      	ldr	r1, [r7, #8]
 800bb4c:	2006      	movs	r0, #6
 800bb4e:	f7f9 fc69 	bl	8005424 <memp_free>
    if (handler != NULL) {
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d0d3      	beq.n	800bb00 <sys_check_timeouts+0xc>
      handler(arg);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6838      	ldr	r0, [r7, #0]
 800bb5c:	4798      	blx	r3
  do {
 800bb5e:	e7cf      	b.n	800bb00 <sys_check_timeouts+0xc>
      return;
 800bb60:	bf00      	nop
 800bb62:	e000      	b.n	800bb66 <sys_check_timeouts+0x72>
      return;
 800bb64:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800bb66:	3710      	adds	r7, #16
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}
 800bb6c:	2000a4b1 	.word	0x2000a4b1
 800bb70:	2000a504 	.word	0x2000a504
 800bb74:	2000a508 	.word	0x2000a508

0800bb78 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800bb7c:	f002 fde2 	bl	800e744 <rand>
 800bb80:	4603      	mov	r3, r0
 800bb82:	b29b      	uxth	r3, r3
 800bb84:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bb88:	b29b      	uxth	r3, r3
 800bb8a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800bb8e:	b29a      	uxth	r2, r3
 800bb90:	4b01      	ldr	r3, [pc, #4]	; (800bb98 <udp_init+0x20>)
 800bb92:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800bb94:	bf00      	nop
 800bb96:	bd80      	pop	{r7, pc}
 800bb98:	20000028 	.word	0x20000028

0800bb9c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800bb9c:	b480      	push	{r7}
 800bb9e:	b083      	sub	sp, #12
 800bba0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800bba2:	2300      	movs	r3, #0
 800bba4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800bba6:	4b17      	ldr	r3, [pc, #92]	; (800bc04 <udp_new_port+0x68>)
 800bba8:	881b      	ldrh	r3, [r3, #0]
 800bbaa:	1c5a      	adds	r2, r3, #1
 800bbac:	b291      	uxth	r1, r2
 800bbae:	4a15      	ldr	r2, [pc, #84]	; (800bc04 <udp_new_port+0x68>)
 800bbb0:	8011      	strh	r1, [r2, #0]
 800bbb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bbb6:	4293      	cmp	r3, r2
 800bbb8:	d103      	bne.n	800bbc2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800bbba:	4b12      	ldr	r3, [pc, #72]	; (800bc04 <udp_new_port+0x68>)
 800bbbc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800bbc0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bbc2:	4b11      	ldr	r3, [pc, #68]	; (800bc08 <udp_new_port+0x6c>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	603b      	str	r3, [r7, #0]
 800bbc8:	e011      	b.n	800bbee <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	8a5a      	ldrh	r2, [r3, #18]
 800bbce:	4b0d      	ldr	r3, [pc, #52]	; (800bc04 <udp_new_port+0x68>)
 800bbd0:	881b      	ldrh	r3, [r3, #0]
 800bbd2:	429a      	cmp	r2, r3
 800bbd4:	d108      	bne.n	800bbe8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800bbd6:	88fb      	ldrh	r3, [r7, #6]
 800bbd8:	3301      	adds	r3, #1
 800bbda:	80fb      	strh	r3, [r7, #6]
 800bbdc:	88fb      	ldrh	r3, [r7, #6]
 800bbde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bbe2:	d3e0      	bcc.n	800bba6 <udp_new_port+0xa>
        return 0;
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	e007      	b.n	800bbf8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	68db      	ldr	r3, [r3, #12]
 800bbec:	603b      	str	r3, [r7, #0]
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d1ea      	bne.n	800bbca <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800bbf4:	4b03      	ldr	r3, [pc, #12]	; (800bc04 <udp_new_port+0x68>)
 800bbf6:	881b      	ldrh	r3, [r3, #0]
}
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	370c      	adds	r7, #12
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc02:	4770      	bx	lr
 800bc04:	20000028 	.word	0x20000028
 800bc08:	2000a510 	.word	0x2000a510

0800bc0c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b084      	sub	sp, #16
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	60f8      	str	r0, [r7, #12]
 800bc14:	60b9      	str	r1, [r7, #8]
 800bc16:	4613      	mov	r3, r2
 800bc18:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d105      	bne.n	800bc2c <udp_input_local_match+0x20>
 800bc20:	4b27      	ldr	r3, [pc, #156]	; (800bcc0 <udp_input_local_match+0xb4>)
 800bc22:	2287      	movs	r2, #135	; 0x87
 800bc24:	4927      	ldr	r1, [pc, #156]	; (800bcc4 <udp_input_local_match+0xb8>)
 800bc26:	4828      	ldr	r0, [pc, #160]	; (800bcc8 <udp_input_local_match+0xbc>)
 800bc28:	f002 fe8c 	bl	800e944 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d105      	bne.n	800bc3e <udp_input_local_match+0x32>
 800bc32:	4b23      	ldr	r3, [pc, #140]	; (800bcc0 <udp_input_local_match+0xb4>)
 800bc34:	2288      	movs	r2, #136	; 0x88
 800bc36:	4925      	ldr	r1, [pc, #148]	; (800bccc <udp_input_local_match+0xc0>)
 800bc38:	4823      	ldr	r0, [pc, #140]	; (800bcc8 <udp_input_local_match+0xbc>)
 800bc3a:	f002 fe83 	bl	800e944 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	7a1b      	ldrb	r3, [r3, #8]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d00b      	beq.n	800bc5e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	7a1a      	ldrb	r2, [r3, #8]
 800bc4a:	4b21      	ldr	r3, [pc, #132]	; (800bcd0 <udp_input_local_match+0xc4>)
 800bc4c:	685b      	ldr	r3, [r3, #4]
 800bc4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bc52:	3301      	adds	r3, #1
 800bc54:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bc56:	429a      	cmp	r2, r3
 800bc58:	d001      	beq.n	800bc5e <udp_input_local_match+0x52>
    return 0;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	e02b      	b.n	800bcb6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800bc5e:	79fb      	ldrb	r3, [r7, #7]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d018      	beq.n	800bc96 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d013      	beq.n	800bc92 <udp_input_local_match+0x86>
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d00f      	beq.n	800bc92 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800bc72:	4b17      	ldr	r3, [pc, #92]	; (800bcd0 <udp_input_local_match+0xc4>)
 800bc74:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bc76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc7a:	d00a      	beq.n	800bc92 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	681a      	ldr	r2, [r3, #0]
 800bc80:	4b13      	ldr	r3, [pc, #76]	; (800bcd0 <udp_input_local_match+0xc4>)
 800bc82:	695b      	ldr	r3, [r3, #20]
 800bc84:	405a      	eors	r2, r3
 800bc86:	68bb      	ldr	r3, [r7, #8]
 800bc88:	3308      	adds	r3, #8
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d110      	bne.n	800bcb4 <udp_input_local_match+0xa8>
          return 1;
 800bc92:	2301      	movs	r3, #1
 800bc94:	e00f      	b.n	800bcb6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d009      	beq.n	800bcb0 <udp_input_local_match+0xa4>
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d005      	beq.n	800bcb0 <udp_input_local_match+0xa4>
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	681a      	ldr	r2, [r3, #0]
 800bca8:	4b09      	ldr	r3, [pc, #36]	; (800bcd0 <udp_input_local_match+0xc4>)
 800bcaa:	695b      	ldr	r3, [r3, #20]
 800bcac:	429a      	cmp	r2, r3
 800bcae:	d101      	bne.n	800bcb4 <udp_input_local_match+0xa8>
        return 1;
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	e000      	b.n	800bcb6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800bcb4:	2300      	movs	r3, #0
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	3710      	adds	r7, #16
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}
 800bcbe:	bf00      	nop
 800bcc0:	0801175c 	.word	0x0801175c
 800bcc4:	0801178c 	.word	0x0801178c
 800bcc8:	080117b0 	.word	0x080117b0
 800bccc:	080117d8 	.word	0x080117d8
 800bcd0:	20004d84 	.word	0x20004d84

0800bcd4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800bcd4:	b590      	push	{r4, r7, lr}
 800bcd6:	b08d      	sub	sp, #52	; 0x34
 800bcd8:	af02      	add	r7, sp, #8
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800bcde:	2300      	movs	r3, #0
 800bce0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d105      	bne.n	800bcf4 <udp_input+0x20>
 800bce8:	4b7c      	ldr	r3, [pc, #496]	; (800bedc <udp_input+0x208>)
 800bcea:	22cf      	movs	r2, #207	; 0xcf
 800bcec:	497c      	ldr	r1, [pc, #496]	; (800bee0 <udp_input+0x20c>)
 800bcee:	487d      	ldr	r0, [pc, #500]	; (800bee4 <udp_input+0x210>)
 800bcf0:	f002 fe28 	bl	800e944 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d105      	bne.n	800bd06 <udp_input+0x32>
 800bcfa:	4b78      	ldr	r3, [pc, #480]	; (800bedc <udp_input+0x208>)
 800bcfc:	22d0      	movs	r2, #208	; 0xd0
 800bcfe:	497a      	ldr	r1, [pc, #488]	; (800bee8 <udp_input+0x214>)
 800bd00:	4878      	ldr	r0, [pc, #480]	; (800bee4 <udp_input+0x210>)
 800bd02:	f002 fe1f 	bl	800e944 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	895b      	ldrh	r3, [r3, #10]
 800bd0a:	2b07      	cmp	r3, #7
 800bd0c:	d803      	bhi.n	800bd16 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f7fa f9fe 	bl	8006110 <pbuf_free>
    goto end;
 800bd14:	e0de      	b.n	800bed4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	685b      	ldr	r3, [r3, #4]
 800bd1a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800bd1c:	4b73      	ldr	r3, [pc, #460]	; (800beec <udp_input+0x218>)
 800bd1e:	695b      	ldr	r3, [r3, #20]
 800bd20:	4a72      	ldr	r2, [pc, #456]	; (800beec <udp_input+0x218>)
 800bd22:	6812      	ldr	r2, [r2, #0]
 800bd24:	4611      	mov	r1, r2
 800bd26:	4618      	mov	r0, r3
 800bd28:	f001 fdb6 	bl	800d898 <ip4_addr_isbroadcast_u32>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800bd30:	697b      	ldr	r3, [r7, #20]
 800bd32:	881b      	ldrh	r3, [r3, #0]
 800bd34:	b29b      	uxth	r3, r3
 800bd36:	4618      	mov	r0, r3
 800bd38:	f7f8 fe8c 	bl	8004a54 <lwip_htons>
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	885b      	ldrh	r3, [r3, #2]
 800bd44:	b29b      	uxth	r3, r3
 800bd46:	4618      	mov	r0, r3
 800bd48:	f7f8 fe84 	bl	8004a54 <lwip_htons>
 800bd4c:	4603      	mov	r3, r0
 800bd4e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800bd50:	2300      	movs	r3, #0
 800bd52:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800bd54:	2300      	movs	r3, #0
 800bd56:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bd5c:	4b64      	ldr	r3, [pc, #400]	; (800bef0 <udp_input+0x21c>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	627b      	str	r3, [r7, #36]	; 0x24
 800bd62:	e054      	b.n	800be0e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800bd64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd66:	8a5b      	ldrh	r3, [r3, #18]
 800bd68:	89fa      	ldrh	r2, [r7, #14]
 800bd6a:	429a      	cmp	r2, r3
 800bd6c:	d14a      	bne.n	800be04 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800bd6e:	7cfb      	ldrb	r3, [r7, #19]
 800bd70:	461a      	mov	r2, r3
 800bd72:	6839      	ldr	r1, [r7, #0]
 800bd74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bd76:	f7ff ff49 	bl	800bc0c <udp_input_local_match>
 800bd7a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d041      	beq.n	800be04 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800bd80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd82:	7c1b      	ldrb	r3, [r3, #16]
 800bd84:	f003 0304 	and.w	r3, r3, #4
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d11d      	bne.n	800bdc8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800bd8c:	69fb      	ldr	r3, [r7, #28]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d102      	bne.n	800bd98 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800bd92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd94:	61fb      	str	r3, [r7, #28]
 800bd96:	e017      	b.n	800bdc8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800bd98:	7cfb      	ldrb	r3, [r7, #19]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d014      	beq.n	800bdc8 <udp_input+0xf4>
 800bd9e:	4b53      	ldr	r3, [pc, #332]	; (800beec <udp_input+0x218>)
 800bda0:	695b      	ldr	r3, [r3, #20]
 800bda2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bda6:	d10f      	bne.n	800bdc8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800bda8:	69fb      	ldr	r3, [r7, #28]
 800bdaa:	681a      	ldr	r2, [r3, #0]
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	3304      	adds	r3, #4
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	429a      	cmp	r2, r3
 800bdb4:	d008      	beq.n	800bdc8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800bdb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb8:	681a      	ldr	r2, [r3, #0]
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	3304      	adds	r3, #4
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d101      	bne.n	800bdc8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800bdc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800bdc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdca:	8a9b      	ldrh	r3, [r3, #20]
 800bdcc:	8a3a      	ldrh	r2, [r7, #16]
 800bdce:	429a      	cmp	r2, r3
 800bdd0:	d118      	bne.n	800be04 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800bdd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d005      	beq.n	800bde6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800bdda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bddc:	685a      	ldr	r2, [r3, #4]
 800bdde:	4b43      	ldr	r3, [pc, #268]	; (800beec <udp_input+0x218>)
 800bde0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800bde2:	429a      	cmp	r2, r3
 800bde4:	d10e      	bne.n	800be04 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800bde6:	6a3b      	ldr	r3, [r7, #32]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d014      	beq.n	800be16 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800bdec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdee:	68da      	ldr	r2, [r3, #12]
 800bdf0:	6a3b      	ldr	r3, [r7, #32]
 800bdf2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800bdf4:	4b3e      	ldr	r3, [pc, #248]	; (800bef0 <udp_input+0x21c>)
 800bdf6:	681a      	ldr	r2, [r3, #0]
 800bdf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdfa:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800bdfc:	4a3c      	ldr	r2, [pc, #240]	; (800bef0 <udp_input+0x21c>)
 800bdfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be00:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800be02:	e008      	b.n	800be16 <udp_input+0x142>
      }
    }

    prev = pcb;
 800be04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be06:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800be08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be0a:	68db      	ldr	r3, [r3, #12]
 800be0c:	627b      	str	r3, [r7, #36]	; 0x24
 800be0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be10:	2b00      	cmp	r3, #0
 800be12:	d1a7      	bne.n	800bd64 <udp_input+0x90>
 800be14:	e000      	b.n	800be18 <udp_input+0x144>
        break;
 800be16:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800be18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d101      	bne.n	800be22 <udp_input+0x14e>
    pcb = uncon_pcb;
 800be1e:	69fb      	ldr	r3, [r7, #28]
 800be20:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800be22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be24:	2b00      	cmp	r3, #0
 800be26:	d002      	beq.n	800be2e <udp_input+0x15a>
    for_us = 1;
 800be28:	2301      	movs	r3, #1
 800be2a:	76fb      	strb	r3, [r7, #27]
 800be2c:	e00a      	b.n	800be44 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	3304      	adds	r3, #4
 800be32:	681a      	ldr	r2, [r3, #0]
 800be34:	4b2d      	ldr	r3, [pc, #180]	; (800beec <udp_input+0x218>)
 800be36:	695b      	ldr	r3, [r3, #20]
 800be38:	429a      	cmp	r2, r3
 800be3a:	bf0c      	ite	eq
 800be3c:	2301      	moveq	r3, #1
 800be3e:	2300      	movne	r3, #0
 800be40:	b2db      	uxtb	r3, r3
 800be42:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800be44:	7efb      	ldrb	r3, [r7, #27]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d041      	beq.n	800bece <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800be4a:	2108      	movs	r1, #8
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f7fa f8d9 	bl	8006004 <pbuf_remove_header>
 800be52:	4603      	mov	r3, r0
 800be54:	2b00      	cmp	r3, #0
 800be56:	d00a      	beq.n	800be6e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800be58:	4b20      	ldr	r3, [pc, #128]	; (800bedc <udp_input+0x208>)
 800be5a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800be5e:	4925      	ldr	r1, [pc, #148]	; (800bef4 <udp_input+0x220>)
 800be60:	4820      	ldr	r0, [pc, #128]	; (800bee4 <udp_input+0x210>)
 800be62:	f002 fd6f 	bl	800e944 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f7fa f952 	bl	8006110 <pbuf_free>
      goto end;
 800be6c:	e032      	b.n	800bed4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800be6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be70:	2b00      	cmp	r3, #0
 800be72:	d012      	beq.n	800be9a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800be74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be76:	699b      	ldr	r3, [r3, #24]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d00a      	beq.n	800be92 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800be7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be7e:	699c      	ldr	r4, [r3, #24]
 800be80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be82:	69d8      	ldr	r0, [r3, #28]
 800be84:	8a3b      	ldrh	r3, [r7, #16]
 800be86:	9300      	str	r3, [sp, #0]
 800be88:	4b1b      	ldr	r3, [pc, #108]	; (800bef8 <udp_input+0x224>)
 800be8a:	687a      	ldr	r2, [r7, #4]
 800be8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800be8e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800be90:	e021      	b.n	800bed6 <udp_input+0x202>
        pbuf_free(p);
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f7fa f93c 	bl	8006110 <pbuf_free>
        goto end;
 800be98:	e01c      	b.n	800bed4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800be9a:	7cfb      	ldrb	r3, [r7, #19]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d112      	bne.n	800bec6 <udp_input+0x1f2>
 800bea0:	4b12      	ldr	r3, [pc, #72]	; (800beec <udp_input+0x218>)
 800bea2:	695b      	ldr	r3, [r3, #20]
 800bea4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bea8:	2be0      	cmp	r3, #224	; 0xe0
 800beaa:	d00c      	beq.n	800bec6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800beac:	4b0f      	ldr	r3, [pc, #60]	; (800beec <udp_input+0x218>)
 800beae:	899b      	ldrh	r3, [r3, #12]
 800beb0:	3308      	adds	r3, #8
 800beb2:	b29b      	uxth	r3, r3
 800beb4:	b21b      	sxth	r3, r3
 800beb6:	4619      	mov	r1, r3
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	f7fa f916 	bl	80060ea <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800bebe:	2103      	movs	r1, #3
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f001 f9c9 	bl	800d258 <icmp_dest_unreach>
      pbuf_free(p);
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f7fa f922 	bl	8006110 <pbuf_free>
  return;
 800becc:	e003      	b.n	800bed6 <udp_input+0x202>
    pbuf_free(p);
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f7fa f91e 	bl	8006110 <pbuf_free>
  return;
 800bed4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800bed6:	372c      	adds	r7, #44	; 0x2c
 800bed8:	46bd      	mov	sp, r7
 800beda:	bd90      	pop	{r4, r7, pc}
 800bedc:	0801175c 	.word	0x0801175c
 800bee0:	08011800 	.word	0x08011800
 800bee4:	080117b0 	.word	0x080117b0
 800bee8:	08011818 	.word	0x08011818
 800beec:	20004d84 	.word	0x20004d84
 800bef0:	2000a510 	.word	0x2000a510
 800bef4:	08011834 	.word	0x08011834
 800bef8:	20004d94 	.word	0x20004d94

0800befc <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b086      	sub	sp, #24
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	60f8      	str	r0, [r7, #12]
 800bf04:	60b9      	str	r1, [r7, #8]
 800bf06:	4613      	mov	r3, r2
 800bf08:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d101      	bne.n	800bf14 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800bf10:	4b39      	ldr	r3, [pc, #228]	; (800bff8 <udp_bind+0xfc>)
 800bf12:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d109      	bne.n	800bf2e <udp_bind+0x32>
 800bf1a:	4b38      	ldr	r3, [pc, #224]	; (800bffc <udp_bind+0x100>)
 800bf1c:	f240 32b7 	movw	r2, #951	; 0x3b7
 800bf20:	4937      	ldr	r1, [pc, #220]	; (800c000 <udp_bind+0x104>)
 800bf22:	4838      	ldr	r0, [pc, #224]	; (800c004 <udp_bind+0x108>)
 800bf24:	f002 fd0e 	bl	800e944 <iprintf>
 800bf28:	f06f 030f 	mvn.w	r3, #15
 800bf2c:	e060      	b.n	800bff0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800bf2e:	2300      	movs	r3, #0
 800bf30:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bf32:	4b35      	ldr	r3, [pc, #212]	; (800c008 <udp_bind+0x10c>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	617b      	str	r3, [r7, #20]
 800bf38:	e009      	b.n	800bf4e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800bf3a:	68fa      	ldr	r2, [r7, #12]
 800bf3c:	697b      	ldr	r3, [r7, #20]
 800bf3e:	429a      	cmp	r2, r3
 800bf40:	d102      	bne.n	800bf48 <udp_bind+0x4c>
      rebind = 1;
 800bf42:	2301      	movs	r3, #1
 800bf44:	74fb      	strb	r3, [r7, #19]
      break;
 800bf46:	e005      	b.n	800bf54 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bf48:	697b      	ldr	r3, [r7, #20]
 800bf4a:	68db      	ldr	r3, [r3, #12]
 800bf4c:	617b      	str	r3, [r7, #20]
 800bf4e:	697b      	ldr	r3, [r7, #20]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d1f2      	bne.n	800bf3a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800bf54:	88fb      	ldrh	r3, [r7, #6]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d109      	bne.n	800bf6e <udp_bind+0x72>
    port = udp_new_port();
 800bf5a:	f7ff fe1f 	bl	800bb9c <udp_new_port>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800bf62:	88fb      	ldrh	r3, [r7, #6]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d12c      	bne.n	800bfc2 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800bf68:	f06f 0307 	mvn.w	r3, #7
 800bf6c:	e040      	b.n	800bff0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bf6e:	4b26      	ldr	r3, [pc, #152]	; (800c008 <udp_bind+0x10c>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	617b      	str	r3, [r7, #20]
 800bf74:	e022      	b.n	800bfbc <udp_bind+0xc0>
      if (pcb != ipcb) {
 800bf76:	68fa      	ldr	r2, [r7, #12]
 800bf78:	697b      	ldr	r3, [r7, #20]
 800bf7a:	429a      	cmp	r2, r3
 800bf7c:	d01b      	beq.n	800bfb6 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800bf7e:	697b      	ldr	r3, [r7, #20]
 800bf80:	8a5b      	ldrh	r3, [r3, #18]
 800bf82:	88fa      	ldrh	r2, [r7, #6]
 800bf84:	429a      	cmp	r2, r3
 800bf86:	d116      	bne.n	800bfb6 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800bf88:	697b      	ldr	r3, [r7, #20]
 800bf8a:	681a      	ldr	r2, [r3, #0]
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800bf90:	429a      	cmp	r2, r3
 800bf92:	d00d      	beq.n	800bfb0 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d00a      	beq.n	800bfb0 <udp_bind+0xb4>
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d006      	beq.n	800bfb0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800bfa2:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d003      	beq.n	800bfb0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800bfa8:	697b      	ldr	r3, [r7, #20]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d102      	bne.n	800bfb6 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800bfb0:	f06f 0307 	mvn.w	r3, #7
 800bfb4:	e01c      	b.n	800bff0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bfb6:	697b      	ldr	r3, [r7, #20]
 800bfb8:	68db      	ldr	r3, [r3, #12]
 800bfba:	617b      	str	r3, [r7, #20]
 800bfbc:	697b      	ldr	r3, [r7, #20]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d1d9      	bne.n	800bf76 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800bfc2:	68bb      	ldr	r3, [r7, #8]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d002      	beq.n	800bfce <udp_bind+0xd2>
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	e000      	b.n	800bfd0 <udp_bind+0xd4>
 800bfce:	2300      	movs	r3, #0
 800bfd0:	68fa      	ldr	r2, [r7, #12]
 800bfd2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	88fa      	ldrh	r2, [r7, #6]
 800bfd8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800bfda:	7cfb      	ldrb	r3, [r7, #19]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d106      	bne.n	800bfee <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800bfe0:	4b09      	ldr	r3, [pc, #36]	; (800c008 <udp_bind+0x10c>)
 800bfe2:	681a      	ldr	r2, [r3, #0]
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800bfe8:	4a07      	ldr	r2, [pc, #28]	; (800c008 <udp_bind+0x10c>)
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800bfee:	2300      	movs	r3, #0
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	3718      	adds	r7, #24
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}
 800bff8:	08012270 	.word	0x08012270
 800bffc:	0801175c 	.word	0x0801175c
 800c000:	08011a24 	.word	0x08011a24
 800c004:	080117b0 	.word	0x080117b0
 800c008:	2000a510 	.word	0x2000a510

0800c00c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b086      	sub	sp, #24
 800c010:	af00      	add	r7, sp, #0
 800c012:	60f8      	str	r0, [r7, #12]
 800c014:	60b9      	str	r1, [r7, #8]
 800c016:	4613      	mov	r3, r2
 800c018:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d109      	bne.n	800c034 <udp_connect+0x28>
 800c020:	4b2c      	ldr	r3, [pc, #176]	; (800c0d4 <udp_connect+0xc8>)
 800c022:	f240 4235 	movw	r2, #1077	; 0x435
 800c026:	492c      	ldr	r1, [pc, #176]	; (800c0d8 <udp_connect+0xcc>)
 800c028:	482c      	ldr	r0, [pc, #176]	; (800c0dc <udp_connect+0xd0>)
 800c02a:	f002 fc8b 	bl	800e944 <iprintf>
 800c02e:	f06f 030f 	mvn.w	r3, #15
 800c032:	e04b      	b.n	800c0cc <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800c034:	68bb      	ldr	r3, [r7, #8]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d109      	bne.n	800c04e <udp_connect+0x42>
 800c03a:	4b26      	ldr	r3, [pc, #152]	; (800c0d4 <udp_connect+0xc8>)
 800c03c:	f240 4236 	movw	r2, #1078	; 0x436
 800c040:	4927      	ldr	r1, [pc, #156]	; (800c0e0 <udp_connect+0xd4>)
 800c042:	4826      	ldr	r0, [pc, #152]	; (800c0dc <udp_connect+0xd0>)
 800c044:	f002 fc7e 	bl	800e944 <iprintf>
 800c048:	f06f 030f 	mvn.w	r3, #15
 800c04c:	e03e      	b.n	800c0cc <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	8a5b      	ldrh	r3, [r3, #18]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d10f      	bne.n	800c076 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800c056:	68f9      	ldr	r1, [r7, #12]
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	8a5b      	ldrh	r3, [r3, #18]
 800c05c:	461a      	mov	r2, r3
 800c05e:	68f8      	ldr	r0, [r7, #12]
 800c060:	f7ff ff4c 	bl	800befc <udp_bind>
 800c064:	4603      	mov	r3, r0
 800c066:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800c068:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d002      	beq.n	800c076 <udp_connect+0x6a>
      return err;
 800c070:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c074:	e02a      	b.n	800c0cc <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800c076:	68bb      	ldr	r3, [r7, #8]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d002      	beq.n	800c082 <udp_connect+0x76>
 800c07c:	68bb      	ldr	r3, [r7, #8]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	e000      	b.n	800c084 <udp_connect+0x78>
 800c082:	2300      	movs	r3, #0
 800c084:	68fa      	ldr	r2, [r7, #12]
 800c086:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	88fa      	ldrh	r2, [r7, #6]
 800c08c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	7c1b      	ldrb	r3, [r3, #16]
 800c092:	f043 0304 	orr.w	r3, r3, #4
 800c096:	b2da      	uxtb	r2, r3
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c09c:	4b11      	ldr	r3, [pc, #68]	; (800c0e4 <udp_connect+0xd8>)
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	617b      	str	r3, [r7, #20]
 800c0a2:	e008      	b.n	800c0b6 <udp_connect+0xaa>
    if (pcb == ipcb) {
 800c0a4:	68fa      	ldr	r2, [r7, #12]
 800c0a6:	697b      	ldr	r3, [r7, #20]
 800c0a8:	429a      	cmp	r2, r3
 800c0aa:	d101      	bne.n	800c0b0 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	e00d      	b.n	800c0cc <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c0b0:	697b      	ldr	r3, [r7, #20]
 800c0b2:	68db      	ldr	r3, [r3, #12]
 800c0b4:	617b      	str	r3, [r7, #20]
 800c0b6:	697b      	ldr	r3, [r7, #20]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d1f3      	bne.n	800c0a4 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800c0bc:	4b09      	ldr	r3, [pc, #36]	; (800c0e4 <udp_connect+0xd8>)
 800c0be:	681a      	ldr	r2, [r3, #0]
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800c0c4:	4a07      	ldr	r2, [pc, #28]	; (800c0e4 <udp_connect+0xd8>)
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800c0ca:	2300      	movs	r3, #0
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3718      	adds	r7, #24
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}
 800c0d4:	0801175c 	.word	0x0801175c
 800c0d8:	08011a3c 	.word	0x08011a3c
 800c0dc:	080117b0 	.word	0x080117b0
 800c0e0:	08011a58 	.word	0x08011a58
 800c0e4:	2000a510 	.word	0x2000a510

0800c0e8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b084      	sub	sp, #16
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	60f8      	str	r0, [r7, #12]
 800c0f0:	60b9      	str	r1, [r7, #8]
 800c0f2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d107      	bne.n	800c10a <udp_recv+0x22>
 800c0fa:	4b08      	ldr	r3, [pc, #32]	; (800c11c <udp_recv+0x34>)
 800c0fc:	f240 428a 	movw	r2, #1162	; 0x48a
 800c100:	4907      	ldr	r1, [pc, #28]	; (800c120 <udp_recv+0x38>)
 800c102:	4808      	ldr	r0, [pc, #32]	; (800c124 <udp_recv+0x3c>)
 800c104:	f002 fc1e 	bl	800e944 <iprintf>
 800c108:	e005      	b.n	800c116 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	68ba      	ldr	r2, [r7, #8]
 800c10e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	687a      	ldr	r2, [r7, #4]
 800c114:	61da      	str	r2, [r3, #28]
}
 800c116:	3710      	adds	r7, #16
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}
 800c11c:	0801175c 	.word	0x0801175c
 800c120:	08011a90 	.word	0x08011a90
 800c124:	080117b0 	.word	0x080117b0

0800c128 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b082      	sub	sp, #8
 800c12c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800c12e:	2000      	movs	r0, #0
 800c130:	f7f9 f908 	bl	8005344 <memp_malloc>
 800c134:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d007      	beq.n	800c14c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800c13c:	2220      	movs	r2, #32
 800c13e:	2100      	movs	r1, #0
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f002 fc64 	bl	800ea0e <memset>
    pcb->ttl = UDP_TTL;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	22ff      	movs	r2, #255	; 0xff
 800c14a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800c14c:	687b      	ldr	r3, [r7, #4]
}
 800c14e:	4618      	mov	r0, r3
 800c150:	3708      	adds	r7, #8
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}
	...

0800c158 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c158:	b480      	push	{r7}
 800c15a:	b085      	sub	sp, #20
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
 800c160:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d01e      	beq.n	800c1a6 <udp_netif_ip_addr_changed+0x4e>
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d01a      	beq.n	800c1a6 <udp_netif_ip_addr_changed+0x4e>
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d017      	beq.n	800c1a6 <udp_netif_ip_addr_changed+0x4e>
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d013      	beq.n	800c1a6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c17e:	4b0d      	ldr	r3, [pc, #52]	; (800c1b4 <udp_netif_ip_addr_changed+0x5c>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	60fb      	str	r3, [r7, #12]
 800c184:	e00c      	b.n	800c1a0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	681a      	ldr	r2, [r3, #0]
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	429a      	cmp	r2, r3
 800c190:	d103      	bne.n	800c19a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	681a      	ldr	r2, [r3, #0]
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	68db      	ldr	r3, [r3, #12]
 800c19e:	60fb      	str	r3, [r7, #12]
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d1ef      	bne.n	800c186 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800c1a6:	bf00      	nop
 800c1a8:	3714      	adds	r7, #20
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b0:	4770      	bx	lr
 800c1b2:	bf00      	nop
 800c1b4:	2000a510 	.word	0x2000a510

0800c1b8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b082      	sub	sp, #8
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800c1c0:	4915      	ldr	r1, [pc, #84]	; (800c218 <etharp_free_entry+0x60>)
 800c1c2:	687a      	ldr	r2, [r7, #4]
 800c1c4:	4613      	mov	r3, r2
 800c1c6:	005b      	lsls	r3, r3, #1
 800c1c8:	4413      	add	r3, r2
 800c1ca:	00db      	lsls	r3, r3, #3
 800c1cc:	440b      	add	r3, r1
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d013      	beq.n	800c1fc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800c1d4:	4910      	ldr	r1, [pc, #64]	; (800c218 <etharp_free_entry+0x60>)
 800c1d6:	687a      	ldr	r2, [r7, #4]
 800c1d8:	4613      	mov	r3, r2
 800c1da:	005b      	lsls	r3, r3, #1
 800c1dc:	4413      	add	r3, r2
 800c1de:	00db      	lsls	r3, r3, #3
 800c1e0:	440b      	add	r3, r1
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	f7f9 ff93 	bl	8006110 <pbuf_free>
    arp_table[i].q = NULL;
 800c1ea:	490b      	ldr	r1, [pc, #44]	; (800c218 <etharp_free_entry+0x60>)
 800c1ec:	687a      	ldr	r2, [r7, #4]
 800c1ee:	4613      	mov	r3, r2
 800c1f0:	005b      	lsls	r3, r3, #1
 800c1f2:	4413      	add	r3, r2
 800c1f4:	00db      	lsls	r3, r3, #3
 800c1f6:	440b      	add	r3, r1
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c1fc:	4906      	ldr	r1, [pc, #24]	; (800c218 <etharp_free_entry+0x60>)
 800c1fe:	687a      	ldr	r2, [r7, #4]
 800c200:	4613      	mov	r3, r2
 800c202:	005b      	lsls	r3, r3, #1
 800c204:	4413      	add	r3, r2
 800c206:	00db      	lsls	r3, r3, #3
 800c208:	440b      	add	r3, r1
 800c20a:	3314      	adds	r3, #20
 800c20c:	2200      	movs	r2, #0
 800c20e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800c210:	bf00      	nop
 800c212:	3708      	adds	r7, #8
 800c214:	46bd      	mov	sp, r7
 800c216:	bd80      	pop	{r7, pc}
 800c218:	2000a514 	.word	0x2000a514

0800c21c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b082      	sub	sp, #8
 800c220:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c222:	2300      	movs	r3, #0
 800c224:	607b      	str	r3, [r7, #4]
 800c226:	e096      	b.n	800c356 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800c228:	494f      	ldr	r1, [pc, #316]	; (800c368 <etharp_tmr+0x14c>)
 800c22a:	687a      	ldr	r2, [r7, #4]
 800c22c:	4613      	mov	r3, r2
 800c22e:	005b      	lsls	r3, r3, #1
 800c230:	4413      	add	r3, r2
 800c232:	00db      	lsls	r3, r3, #3
 800c234:	440b      	add	r3, r1
 800c236:	3314      	adds	r3, #20
 800c238:	781b      	ldrb	r3, [r3, #0]
 800c23a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800c23c:	78fb      	ldrb	r3, [r7, #3]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	f000 8086 	beq.w	800c350 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800c244:	4948      	ldr	r1, [pc, #288]	; (800c368 <etharp_tmr+0x14c>)
 800c246:	687a      	ldr	r2, [r7, #4]
 800c248:	4613      	mov	r3, r2
 800c24a:	005b      	lsls	r3, r3, #1
 800c24c:	4413      	add	r3, r2
 800c24e:	00db      	lsls	r3, r3, #3
 800c250:	440b      	add	r3, r1
 800c252:	3312      	adds	r3, #18
 800c254:	881b      	ldrh	r3, [r3, #0]
 800c256:	3301      	adds	r3, #1
 800c258:	b298      	uxth	r0, r3
 800c25a:	4943      	ldr	r1, [pc, #268]	; (800c368 <etharp_tmr+0x14c>)
 800c25c:	687a      	ldr	r2, [r7, #4]
 800c25e:	4613      	mov	r3, r2
 800c260:	005b      	lsls	r3, r3, #1
 800c262:	4413      	add	r3, r2
 800c264:	00db      	lsls	r3, r3, #3
 800c266:	440b      	add	r3, r1
 800c268:	3312      	adds	r3, #18
 800c26a:	4602      	mov	r2, r0
 800c26c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c26e:	493e      	ldr	r1, [pc, #248]	; (800c368 <etharp_tmr+0x14c>)
 800c270:	687a      	ldr	r2, [r7, #4]
 800c272:	4613      	mov	r3, r2
 800c274:	005b      	lsls	r3, r3, #1
 800c276:	4413      	add	r3, r2
 800c278:	00db      	lsls	r3, r3, #3
 800c27a:	440b      	add	r3, r1
 800c27c:	3312      	adds	r3, #18
 800c27e:	881b      	ldrh	r3, [r3, #0]
 800c280:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800c284:	d215      	bcs.n	800c2b2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c286:	4938      	ldr	r1, [pc, #224]	; (800c368 <etharp_tmr+0x14c>)
 800c288:	687a      	ldr	r2, [r7, #4]
 800c28a:	4613      	mov	r3, r2
 800c28c:	005b      	lsls	r3, r3, #1
 800c28e:	4413      	add	r3, r2
 800c290:	00db      	lsls	r3, r3, #3
 800c292:	440b      	add	r3, r1
 800c294:	3314      	adds	r3, #20
 800c296:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c298:	2b01      	cmp	r3, #1
 800c29a:	d10e      	bne.n	800c2ba <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800c29c:	4932      	ldr	r1, [pc, #200]	; (800c368 <etharp_tmr+0x14c>)
 800c29e:	687a      	ldr	r2, [r7, #4]
 800c2a0:	4613      	mov	r3, r2
 800c2a2:	005b      	lsls	r3, r3, #1
 800c2a4:	4413      	add	r3, r2
 800c2a6:	00db      	lsls	r3, r3, #3
 800c2a8:	440b      	add	r3, r1
 800c2aa:	3312      	adds	r3, #18
 800c2ac:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c2ae:	2b04      	cmp	r3, #4
 800c2b0:	d903      	bls.n	800c2ba <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	f7ff ff80 	bl	800c1b8 <etharp_free_entry>
 800c2b8:	e04a      	b.n	800c350 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800c2ba:	492b      	ldr	r1, [pc, #172]	; (800c368 <etharp_tmr+0x14c>)
 800c2bc:	687a      	ldr	r2, [r7, #4]
 800c2be:	4613      	mov	r3, r2
 800c2c0:	005b      	lsls	r3, r3, #1
 800c2c2:	4413      	add	r3, r2
 800c2c4:	00db      	lsls	r3, r3, #3
 800c2c6:	440b      	add	r3, r1
 800c2c8:	3314      	adds	r3, #20
 800c2ca:	781b      	ldrb	r3, [r3, #0]
 800c2cc:	2b03      	cmp	r3, #3
 800c2ce:	d10a      	bne.n	800c2e6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800c2d0:	4925      	ldr	r1, [pc, #148]	; (800c368 <etharp_tmr+0x14c>)
 800c2d2:	687a      	ldr	r2, [r7, #4]
 800c2d4:	4613      	mov	r3, r2
 800c2d6:	005b      	lsls	r3, r3, #1
 800c2d8:	4413      	add	r3, r2
 800c2da:	00db      	lsls	r3, r3, #3
 800c2dc:	440b      	add	r3, r1
 800c2de:	3314      	adds	r3, #20
 800c2e0:	2204      	movs	r2, #4
 800c2e2:	701a      	strb	r2, [r3, #0]
 800c2e4:	e034      	b.n	800c350 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800c2e6:	4920      	ldr	r1, [pc, #128]	; (800c368 <etharp_tmr+0x14c>)
 800c2e8:	687a      	ldr	r2, [r7, #4]
 800c2ea:	4613      	mov	r3, r2
 800c2ec:	005b      	lsls	r3, r3, #1
 800c2ee:	4413      	add	r3, r2
 800c2f0:	00db      	lsls	r3, r3, #3
 800c2f2:	440b      	add	r3, r1
 800c2f4:	3314      	adds	r3, #20
 800c2f6:	781b      	ldrb	r3, [r3, #0]
 800c2f8:	2b04      	cmp	r3, #4
 800c2fa:	d10a      	bne.n	800c312 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800c2fc:	491a      	ldr	r1, [pc, #104]	; (800c368 <etharp_tmr+0x14c>)
 800c2fe:	687a      	ldr	r2, [r7, #4]
 800c300:	4613      	mov	r3, r2
 800c302:	005b      	lsls	r3, r3, #1
 800c304:	4413      	add	r3, r2
 800c306:	00db      	lsls	r3, r3, #3
 800c308:	440b      	add	r3, r1
 800c30a:	3314      	adds	r3, #20
 800c30c:	2202      	movs	r2, #2
 800c30e:	701a      	strb	r2, [r3, #0]
 800c310:	e01e      	b.n	800c350 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c312:	4915      	ldr	r1, [pc, #84]	; (800c368 <etharp_tmr+0x14c>)
 800c314:	687a      	ldr	r2, [r7, #4]
 800c316:	4613      	mov	r3, r2
 800c318:	005b      	lsls	r3, r3, #1
 800c31a:	4413      	add	r3, r2
 800c31c:	00db      	lsls	r3, r3, #3
 800c31e:	440b      	add	r3, r1
 800c320:	3314      	adds	r3, #20
 800c322:	781b      	ldrb	r3, [r3, #0]
 800c324:	2b01      	cmp	r3, #1
 800c326:	d113      	bne.n	800c350 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800c328:	490f      	ldr	r1, [pc, #60]	; (800c368 <etharp_tmr+0x14c>)
 800c32a:	687a      	ldr	r2, [r7, #4]
 800c32c:	4613      	mov	r3, r2
 800c32e:	005b      	lsls	r3, r3, #1
 800c330:	4413      	add	r3, r2
 800c332:	00db      	lsls	r3, r3, #3
 800c334:	440b      	add	r3, r1
 800c336:	3308      	adds	r3, #8
 800c338:	6818      	ldr	r0, [r3, #0]
 800c33a:	687a      	ldr	r2, [r7, #4]
 800c33c:	4613      	mov	r3, r2
 800c33e:	005b      	lsls	r3, r3, #1
 800c340:	4413      	add	r3, r2
 800c342:	00db      	lsls	r3, r3, #3
 800c344:	4a08      	ldr	r2, [pc, #32]	; (800c368 <etharp_tmr+0x14c>)
 800c346:	4413      	add	r3, r2
 800c348:	3304      	adds	r3, #4
 800c34a:	4619      	mov	r1, r3
 800c34c:	f000 fe6e 	bl	800d02c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	3301      	adds	r3, #1
 800c354:	607b      	str	r3, [r7, #4]
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2b09      	cmp	r3, #9
 800c35a:	f77f af65 	ble.w	800c228 <etharp_tmr+0xc>
      }
    }
  }
}
 800c35e:	bf00      	nop
 800c360:	bf00      	nop
 800c362:	3708      	adds	r7, #8
 800c364:	46bd      	mov	sp, r7
 800c366:	bd80      	pop	{r7, pc}
 800c368:	2000a514 	.word	0x2000a514

0800c36c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b08a      	sub	sp, #40	; 0x28
 800c370:	af00      	add	r7, sp, #0
 800c372:	60f8      	str	r0, [r7, #12]
 800c374:	460b      	mov	r3, r1
 800c376:	607a      	str	r2, [r7, #4]
 800c378:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800c37a:	230a      	movs	r3, #10
 800c37c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c37e:	230a      	movs	r3, #10
 800c380:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800c382:	230a      	movs	r3, #10
 800c384:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800c386:	2300      	movs	r3, #0
 800c388:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800c38a:	230a      	movs	r3, #10
 800c38c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800c38e:	2300      	movs	r3, #0
 800c390:	83bb      	strh	r3, [r7, #28]
 800c392:	2300      	movs	r3, #0
 800c394:	837b      	strh	r3, [r7, #26]
 800c396:	2300      	movs	r3, #0
 800c398:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c39a:	2300      	movs	r3, #0
 800c39c:	843b      	strh	r3, [r7, #32]
 800c39e:	e0ae      	b.n	800c4fe <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800c3a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c3a4:	49a6      	ldr	r1, [pc, #664]	; (800c640 <etharp_find_entry+0x2d4>)
 800c3a6:	4613      	mov	r3, r2
 800c3a8:	005b      	lsls	r3, r3, #1
 800c3aa:	4413      	add	r3, r2
 800c3ac:	00db      	lsls	r3, r3, #3
 800c3ae:	440b      	add	r3, r1
 800c3b0:	3314      	adds	r3, #20
 800c3b2:	781b      	ldrb	r3, [r3, #0]
 800c3b4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800c3b6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c3ba:	2b0a      	cmp	r3, #10
 800c3bc:	d105      	bne.n	800c3ca <etharp_find_entry+0x5e>
 800c3be:	7dfb      	ldrb	r3, [r7, #23]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d102      	bne.n	800c3ca <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800c3c4:	8c3b      	ldrh	r3, [r7, #32]
 800c3c6:	847b      	strh	r3, [r7, #34]	; 0x22
 800c3c8:	e095      	b.n	800c4f6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800c3ca:	7dfb      	ldrb	r3, [r7, #23]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	f000 8092 	beq.w	800c4f6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800c3d2:	7dfb      	ldrb	r3, [r7, #23]
 800c3d4:	2b01      	cmp	r3, #1
 800c3d6:	d009      	beq.n	800c3ec <etharp_find_entry+0x80>
 800c3d8:	7dfb      	ldrb	r3, [r7, #23]
 800c3da:	2b01      	cmp	r3, #1
 800c3dc:	d806      	bhi.n	800c3ec <etharp_find_entry+0x80>
 800c3de:	4b99      	ldr	r3, [pc, #612]	; (800c644 <etharp_find_entry+0x2d8>)
 800c3e0:	f240 1223 	movw	r2, #291	; 0x123
 800c3e4:	4998      	ldr	r1, [pc, #608]	; (800c648 <etharp_find_entry+0x2dc>)
 800c3e6:	4899      	ldr	r0, [pc, #612]	; (800c64c <etharp_find_entry+0x2e0>)
 800c3e8:	f002 faac 	bl	800e944 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d020      	beq.n	800c434 <etharp_find_entry+0xc8>
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	6819      	ldr	r1, [r3, #0]
 800c3f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c3fa:	4891      	ldr	r0, [pc, #580]	; (800c640 <etharp_find_entry+0x2d4>)
 800c3fc:	4613      	mov	r3, r2
 800c3fe:	005b      	lsls	r3, r3, #1
 800c400:	4413      	add	r3, r2
 800c402:	00db      	lsls	r3, r3, #3
 800c404:	4403      	add	r3, r0
 800c406:	3304      	adds	r3, #4
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	4299      	cmp	r1, r3
 800c40c:	d112      	bne.n	800c434 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d00c      	beq.n	800c42e <etharp_find_entry+0xc2>
 800c414:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c418:	4989      	ldr	r1, [pc, #548]	; (800c640 <etharp_find_entry+0x2d4>)
 800c41a:	4613      	mov	r3, r2
 800c41c:	005b      	lsls	r3, r3, #1
 800c41e:	4413      	add	r3, r2
 800c420:	00db      	lsls	r3, r3, #3
 800c422:	440b      	add	r3, r1
 800c424:	3308      	adds	r3, #8
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	687a      	ldr	r2, [r7, #4]
 800c42a:	429a      	cmp	r2, r3
 800c42c:	d102      	bne.n	800c434 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800c42e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c432:	e100      	b.n	800c636 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800c434:	7dfb      	ldrb	r3, [r7, #23]
 800c436:	2b01      	cmp	r3, #1
 800c438:	d140      	bne.n	800c4bc <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800c43a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c43e:	4980      	ldr	r1, [pc, #512]	; (800c640 <etharp_find_entry+0x2d4>)
 800c440:	4613      	mov	r3, r2
 800c442:	005b      	lsls	r3, r3, #1
 800c444:	4413      	add	r3, r2
 800c446:	00db      	lsls	r3, r3, #3
 800c448:	440b      	add	r3, r1
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d01a      	beq.n	800c486 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800c450:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c454:	497a      	ldr	r1, [pc, #488]	; (800c640 <etharp_find_entry+0x2d4>)
 800c456:	4613      	mov	r3, r2
 800c458:	005b      	lsls	r3, r3, #1
 800c45a:	4413      	add	r3, r2
 800c45c:	00db      	lsls	r3, r3, #3
 800c45e:	440b      	add	r3, r1
 800c460:	3312      	adds	r3, #18
 800c462:	881b      	ldrh	r3, [r3, #0]
 800c464:	8bba      	ldrh	r2, [r7, #28]
 800c466:	429a      	cmp	r2, r3
 800c468:	d845      	bhi.n	800c4f6 <etharp_find_entry+0x18a>
            old_queue = i;
 800c46a:	8c3b      	ldrh	r3, [r7, #32]
 800c46c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800c46e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c472:	4973      	ldr	r1, [pc, #460]	; (800c640 <etharp_find_entry+0x2d4>)
 800c474:	4613      	mov	r3, r2
 800c476:	005b      	lsls	r3, r3, #1
 800c478:	4413      	add	r3, r2
 800c47a:	00db      	lsls	r3, r3, #3
 800c47c:	440b      	add	r3, r1
 800c47e:	3312      	adds	r3, #18
 800c480:	881b      	ldrh	r3, [r3, #0]
 800c482:	83bb      	strh	r3, [r7, #28]
 800c484:	e037      	b.n	800c4f6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800c486:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c48a:	496d      	ldr	r1, [pc, #436]	; (800c640 <etharp_find_entry+0x2d4>)
 800c48c:	4613      	mov	r3, r2
 800c48e:	005b      	lsls	r3, r3, #1
 800c490:	4413      	add	r3, r2
 800c492:	00db      	lsls	r3, r3, #3
 800c494:	440b      	add	r3, r1
 800c496:	3312      	adds	r3, #18
 800c498:	881b      	ldrh	r3, [r3, #0]
 800c49a:	8b7a      	ldrh	r2, [r7, #26]
 800c49c:	429a      	cmp	r2, r3
 800c49e:	d82a      	bhi.n	800c4f6 <etharp_find_entry+0x18a>
            old_pending = i;
 800c4a0:	8c3b      	ldrh	r3, [r7, #32]
 800c4a2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800c4a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c4a8:	4965      	ldr	r1, [pc, #404]	; (800c640 <etharp_find_entry+0x2d4>)
 800c4aa:	4613      	mov	r3, r2
 800c4ac:	005b      	lsls	r3, r3, #1
 800c4ae:	4413      	add	r3, r2
 800c4b0:	00db      	lsls	r3, r3, #3
 800c4b2:	440b      	add	r3, r1
 800c4b4:	3312      	adds	r3, #18
 800c4b6:	881b      	ldrh	r3, [r3, #0]
 800c4b8:	837b      	strh	r3, [r7, #26]
 800c4ba:	e01c      	b.n	800c4f6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800c4bc:	7dfb      	ldrb	r3, [r7, #23]
 800c4be:	2b01      	cmp	r3, #1
 800c4c0:	d919      	bls.n	800c4f6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800c4c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c4c6:	495e      	ldr	r1, [pc, #376]	; (800c640 <etharp_find_entry+0x2d4>)
 800c4c8:	4613      	mov	r3, r2
 800c4ca:	005b      	lsls	r3, r3, #1
 800c4cc:	4413      	add	r3, r2
 800c4ce:	00db      	lsls	r3, r3, #3
 800c4d0:	440b      	add	r3, r1
 800c4d2:	3312      	adds	r3, #18
 800c4d4:	881b      	ldrh	r3, [r3, #0]
 800c4d6:	8b3a      	ldrh	r2, [r7, #24]
 800c4d8:	429a      	cmp	r2, r3
 800c4da:	d80c      	bhi.n	800c4f6 <etharp_find_entry+0x18a>
            old_stable = i;
 800c4dc:	8c3b      	ldrh	r3, [r7, #32]
 800c4de:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800c4e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c4e4:	4956      	ldr	r1, [pc, #344]	; (800c640 <etharp_find_entry+0x2d4>)
 800c4e6:	4613      	mov	r3, r2
 800c4e8:	005b      	lsls	r3, r3, #1
 800c4ea:	4413      	add	r3, r2
 800c4ec:	00db      	lsls	r3, r3, #3
 800c4ee:	440b      	add	r3, r1
 800c4f0:	3312      	adds	r3, #18
 800c4f2:	881b      	ldrh	r3, [r3, #0]
 800c4f4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c4f6:	8c3b      	ldrh	r3, [r7, #32]
 800c4f8:	3301      	adds	r3, #1
 800c4fa:	b29b      	uxth	r3, r3
 800c4fc:	843b      	strh	r3, [r7, #32]
 800c4fe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c502:	2b09      	cmp	r3, #9
 800c504:	f77f af4c 	ble.w	800c3a0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800c508:	7afb      	ldrb	r3, [r7, #11]
 800c50a:	f003 0302 	and.w	r3, r3, #2
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d108      	bne.n	800c524 <etharp_find_entry+0x1b8>
 800c512:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c516:	2b0a      	cmp	r3, #10
 800c518:	d107      	bne.n	800c52a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800c51a:	7afb      	ldrb	r3, [r7, #11]
 800c51c:	f003 0301 	and.w	r3, r3, #1
 800c520:	2b00      	cmp	r3, #0
 800c522:	d102      	bne.n	800c52a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800c524:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c528:	e085      	b.n	800c636 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800c52a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c52e:	2b09      	cmp	r3, #9
 800c530:	dc02      	bgt.n	800c538 <etharp_find_entry+0x1cc>
    i = empty;
 800c532:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c534:	843b      	strh	r3, [r7, #32]
 800c536:	e039      	b.n	800c5ac <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800c538:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800c53c:	2b09      	cmp	r3, #9
 800c53e:	dc14      	bgt.n	800c56a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800c540:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c542:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800c544:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c548:	493d      	ldr	r1, [pc, #244]	; (800c640 <etharp_find_entry+0x2d4>)
 800c54a:	4613      	mov	r3, r2
 800c54c:	005b      	lsls	r3, r3, #1
 800c54e:	4413      	add	r3, r2
 800c550:	00db      	lsls	r3, r3, #3
 800c552:	440b      	add	r3, r1
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d018      	beq.n	800c58c <etharp_find_entry+0x220>
 800c55a:	4b3a      	ldr	r3, [pc, #232]	; (800c644 <etharp_find_entry+0x2d8>)
 800c55c:	f240 126d 	movw	r2, #365	; 0x16d
 800c560:	493b      	ldr	r1, [pc, #236]	; (800c650 <etharp_find_entry+0x2e4>)
 800c562:	483a      	ldr	r0, [pc, #232]	; (800c64c <etharp_find_entry+0x2e0>)
 800c564:	f002 f9ee 	bl	800e944 <iprintf>
 800c568:	e010      	b.n	800c58c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800c56a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c56e:	2b09      	cmp	r3, #9
 800c570:	dc02      	bgt.n	800c578 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800c572:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c574:	843b      	strh	r3, [r7, #32]
 800c576:	e009      	b.n	800c58c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800c578:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c57c:	2b09      	cmp	r3, #9
 800c57e:	dc02      	bgt.n	800c586 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800c580:	8bfb      	ldrh	r3, [r7, #30]
 800c582:	843b      	strh	r3, [r7, #32]
 800c584:	e002      	b.n	800c58c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800c586:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c58a:	e054      	b.n	800c636 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c58c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c590:	2b09      	cmp	r3, #9
 800c592:	dd06      	ble.n	800c5a2 <etharp_find_entry+0x236>
 800c594:	4b2b      	ldr	r3, [pc, #172]	; (800c644 <etharp_find_entry+0x2d8>)
 800c596:	f240 127f 	movw	r2, #383	; 0x17f
 800c59a:	492e      	ldr	r1, [pc, #184]	; (800c654 <etharp_find_entry+0x2e8>)
 800c59c:	482b      	ldr	r0, [pc, #172]	; (800c64c <etharp_find_entry+0x2e0>)
 800c59e:	f002 f9d1 	bl	800e944 <iprintf>
    etharp_free_entry(i);
 800c5a2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f7ff fe06 	bl	800c1b8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c5ac:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c5b0:	2b09      	cmp	r3, #9
 800c5b2:	dd06      	ble.n	800c5c2 <etharp_find_entry+0x256>
 800c5b4:	4b23      	ldr	r3, [pc, #140]	; (800c644 <etharp_find_entry+0x2d8>)
 800c5b6:	f240 1283 	movw	r2, #387	; 0x183
 800c5ba:	4926      	ldr	r1, [pc, #152]	; (800c654 <etharp_find_entry+0x2e8>)
 800c5bc:	4823      	ldr	r0, [pc, #140]	; (800c64c <etharp_find_entry+0x2e0>)
 800c5be:	f002 f9c1 	bl	800e944 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800c5c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c5c6:	491e      	ldr	r1, [pc, #120]	; (800c640 <etharp_find_entry+0x2d4>)
 800c5c8:	4613      	mov	r3, r2
 800c5ca:	005b      	lsls	r3, r3, #1
 800c5cc:	4413      	add	r3, r2
 800c5ce:	00db      	lsls	r3, r3, #3
 800c5d0:	440b      	add	r3, r1
 800c5d2:	3314      	adds	r3, #20
 800c5d4:	781b      	ldrb	r3, [r3, #0]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d006      	beq.n	800c5e8 <etharp_find_entry+0x27c>
 800c5da:	4b1a      	ldr	r3, [pc, #104]	; (800c644 <etharp_find_entry+0x2d8>)
 800c5dc:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800c5e0:	491d      	ldr	r1, [pc, #116]	; (800c658 <etharp_find_entry+0x2ec>)
 800c5e2:	481a      	ldr	r0, [pc, #104]	; (800c64c <etharp_find_entry+0x2e0>)
 800c5e4:	f002 f9ae 	bl	800e944 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d00b      	beq.n	800c606 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800c5ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	6819      	ldr	r1, [r3, #0]
 800c5f6:	4812      	ldr	r0, [pc, #72]	; (800c640 <etharp_find_entry+0x2d4>)
 800c5f8:	4613      	mov	r3, r2
 800c5fa:	005b      	lsls	r3, r3, #1
 800c5fc:	4413      	add	r3, r2
 800c5fe:	00db      	lsls	r3, r3, #3
 800c600:	4403      	add	r3, r0
 800c602:	3304      	adds	r3, #4
 800c604:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800c606:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c60a:	490d      	ldr	r1, [pc, #52]	; (800c640 <etharp_find_entry+0x2d4>)
 800c60c:	4613      	mov	r3, r2
 800c60e:	005b      	lsls	r3, r3, #1
 800c610:	4413      	add	r3, r2
 800c612:	00db      	lsls	r3, r3, #3
 800c614:	440b      	add	r3, r1
 800c616:	3312      	adds	r3, #18
 800c618:	2200      	movs	r2, #0
 800c61a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800c61c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c620:	4907      	ldr	r1, [pc, #28]	; (800c640 <etharp_find_entry+0x2d4>)
 800c622:	4613      	mov	r3, r2
 800c624:	005b      	lsls	r3, r3, #1
 800c626:	4413      	add	r3, r2
 800c628:	00db      	lsls	r3, r3, #3
 800c62a:	440b      	add	r3, r1
 800c62c:	3308      	adds	r3, #8
 800c62e:	687a      	ldr	r2, [r7, #4]
 800c630:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800c632:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800c636:	4618      	mov	r0, r3
 800c638:	3728      	adds	r7, #40	; 0x28
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}
 800c63e:	bf00      	nop
 800c640:	2000a514 	.word	0x2000a514
 800c644:	08011ac0 	.word	0x08011ac0
 800c648:	08011af8 	.word	0x08011af8
 800c64c:	08011b38 	.word	0x08011b38
 800c650:	08011b60 	.word	0x08011b60
 800c654:	08011b78 	.word	0x08011b78
 800c658:	08011b8c 	.word	0x08011b8c

0800c65c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b088      	sub	sp, #32
 800c660:	af02      	add	r7, sp, #8
 800c662:	60f8      	str	r0, [r7, #12]
 800c664:	60b9      	str	r1, [r7, #8]
 800c666:	607a      	str	r2, [r7, #4]
 800c668:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c670:	2b06      	cmp	r3, #6
 800c672:	d006      	beq.n	800c682 <etharp_update_arp_entry+0x26>
 800c674:	4b48      	ldr	r3, [pc, #288]	; (800c798 <etharp_update_arp_entry+0x13c>)
 800c676:	f240 12a9 	movw	r2, #425	; 0x1a9
 800c67a:	4948      	ldr	r1, [pc, #288]	; (800c79c <etharp_update_arp_entry+0x140>)
 800c67c:	4848      	ldr	r0, [pc, #288]	; (800c7a0 <etharp_update_arp_entry+0x144>)
 800c67e:	f002 f961 	bl	800e944 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800c682:	68bb      	ldr	r3, [r7, #8]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d012      	beq.n	800c6ae <etharp_update_arp_entry+0x52>
 800c688:	68bb      	ldr	r3, [r7, #8]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d00e      	beq.n	800c6ae <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c690:	68bb      	ldr	r3, [r7, #8]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	68f9      	ldr	r1, [r7, #12]
 800c696:	4618      	mov	r0, r3
 800c698:	f001 f8fe 	bl	800d898 <ip4_addr_isbroadcast_u32>
 800c69c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d105      	bne.n	800c6ae <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800c6a2:	68bb      	ldr	r3, [r7, #8]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c6aa:	2be0      	cmp	r3, #224	; 0xe0
 800c6ac:	d102      	bne.n	800c6b4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c6ae:	f06f 030f 	mvn.w	r3, #15
 800c6b2:	e06c      	b.n	800c78e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800c6b4:	78fb      	ldrb	r3, [r7, #3]
 800c6b6:	68fa      	ldr	r2, [r7, #12]
 800c6b8:	4619      	mov	r1, r3
 800c6ba:	68b8      	ldr	r0, [r7, #8]
 800c6bc:	f7ff fe56 	bl	800c36c <etharp_find_entry>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800c6c4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	da02      	bge.n	800c6d2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800c6cc:	8afb      	ldrh	r3, [r7, #22]
 800c6ce:	b25b      	sxtb	r3, r3
 800c6d0:	e05d      	b.n	800c78e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800c6d2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c6d6:	4933      	ldr	r1, [pc, #204]	; (800c7a4 <etharp_update_arp_entry+0x148>)
 800c6d8:	4613      	mov	r3, r2
 800c6da:	005b      	lsls	r3, r3, #1
 800c6dc:	4413      	add	r3, r2
 800c6de:	00db      	lsls	r3, r3, #3
 800c6e0:	440b      	add	r3, r1
 800c6e2:	3314      	adds	r3, #20
 800c6e4:	2202      	movs	r2, #2
 800c6e6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800c6e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c6ec:	492d      	ldr	r1, [pc, #180]	; (800c7a4 <etharp_update_arp_entry+0x148>)
 800c6ee:	4613      	mov	r3, r2
 800c6f0:	005b      	lsls	r3, r3, #1
 800c6f2:	4413      	add	r3, r2
 800c6f4:	00db      	lsls	r3, r3, #3
 800c6f6:	440b      	add	r3, r1
 800c6f8:	3308      	adds	r3, #8
 800c6fa:	68fa      	ldr	r2, [r7, #12]
 800c6fc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800c6fe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c702:	4613      	mov	r3, r2
 800c704:	005b      	lsls	r3, r3, #1
 800c706:	4413      	add	r3, r2
 800c708:	00db      	lsls	r3, r3, #3
 800c70a:	3308      	adds	r3, #8
 800c70c:	4a25      	ldr	r2, [pc, #148]	; (800c7a4 <etharp_update_arp_entry+0x148>)
 800c70e:	4413      	add	r3, r2
 800c710:	3304      	adds	r3, #4
 800c712:	2206      	movs	r2, #6
 800c714:	6879      	ldr	r1, [r7, #4]
 800c716:	4618      	mov	r0, r3
 800c718:	f002 fa01 	bl	800eb1e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800c71c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c720:	4920      	ldr	r1, [pc, #128]	; (800c7a4 <etharp_update_arp_entry+0x148>)
 800c722:	4613      	mov	r3, r2
 800c724:	005b      	lsls	r3, r3, #1
 800c726:	4413      	add	r3, r2
 800c728:	00db      	lsls	r3, r3, #3
 800c72a:	440b      	add	r3, r1
 800c72c:	3312      	adds	r3, #18
 800c72e:	2200      	movs	r2, #0
 800c730:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800c732:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c736:	491b      	ldr	r1, [pc, #108]	; (800c7a4 <etharp_update_arp_entry+0x148>)
 800c738:	4613      	mov	r3, r2
 800c73a:	005b      	lsls	r3, r3, #1
 800c73c:	4413      	add	r3, r2
 800c73e:	00db      	lsls	r3, r3, #3
 800c740:	440b      	add	r3, r1
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d021      	beq.n	800c78c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800c748:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c74c:	4915      	ldr	r1, [pc, #84]	; (800c7a4 <etharp_update_arp_entry+0x148>)
 800c74e:	4613      	mov	r3, r2
 800c750:	005b      	lsls	r3, r3, #1
 800c752:	4413      	add	r3, r2
 800c754:	00db      	lsls	r3, r3, #3
 800c756:	440b      	add	r3, r1
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800c75c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c760:	4910      	ldr	r1, [pc, #64]	; (800c7a4 <etharp_update_arp_entry+0x148>)
 800c762:	4613      	mov	r3, r2
 800c764:	005b      	lsls	r3, r3, #1
 800c766:	4413      	add	r3, r2
 800c768:	00db      	lsls	r3, r3, #3
 800c76a:	440b      	add	r3, r1
 800c76c:	2200      	movs	r2, #0
 800c76e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800c776:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c77a:	9300      	str	r3, [sp, #0]
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6939      	ldr	r1, [r7, #16]
 800c780:	68f8      	ldr	r0, [r7, #12]
 800c782:	f001 ff97 	bl	800e6b4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800c786:	6938      	ldr	r0, [r7, #16]
 800c788:	f7f9 fcc2 	bl	8006110 <pbuf_free>
  }
  return ERR_OK;
 800c78c:	2300      	movs	r3, #0
}
 800c78e:	4618      	mov	r0, r3
 800c790:	3718      	adds	r7, #24
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}
 800c796:	bf00      	nop
 800c798:	08011ac0 	.word	0x08011ac0
 800c79c:	08011bb8 	.word	0x08011bb8
 800c7a0:	08011b38 	.word	0x08011b38
 800c7a4:	2000a514 	.word	0x2000a514

0800c7a8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b084      	sub	sp, #16
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	60fb      	str	r3, [r7, #12]
 800c7b4:	e01e      	b.n	800c7f4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800c7b6:	4913      	ldr	r1, [pc, #76]	; (800c804 <etharp_cleanup_netif+0x5c>)
 800c7b8:	68fa      	ldr	r2, [r7, #12]
 800c7ba:	4613      	mov	r3, r2
 800c7bc:	005b      	lsls	r3, r3, #1
 800c7be:	4413      	add	r3, r2
 800c7c0:	00db      	lsls	r3, r3, #3
 800c7c2:	440b      	add	r3, r1
 800c7c4:	3314      	adds	r3, #20
 800c7c6:	781b      	ldrb	r3, [r3, #0]
 800c7c8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800c7ca:	7afb      	ldrb	r3, [r7, #11]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d00e      	beq.n	800c7ee <etharp_cleanup_netif+0x46>
 800c7d0:	490c      	ldr	r1, [pc, #48]	; (800c804 <etharp_cleanup_netif+0x5c>)
 800c7d2:	68fa      	ldr	r2, [r7, #12]
 800c7d4:	4613      	mov	r3, r2
 800c7d6:	005b      	lsls	r3, r3, #1
 800c7d8:	4413      	add	r3, r2
 800c7da:	00db      	lsls	r3, r3, #3
 800c7dc:	440b      	add	r3, r1
 800c7de:	3308      	adds	r3, #8
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	687a      	ldr	r2, [r7, #4]
 800c7e4:	429a      	cmp	r2, r3
 800c7e6:	d102      	bne.n	800c7ee <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800c7e8:	68f8      	ldr	r0, [r7, #12]
 800c7ea:	f7ff fce5 	bl	800c1b8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	3301      	adds	r3, #1
 800c7f2:	60fb      	str	r3, [r7, #12]
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	2b09      	cmp	r3, #9
 800c7f8:	dddd      	ble.n	800c7b6 <etharp_cleanup_netif+0xe>
    }
  }
}
 800c7fa:	bf00      	nop
 800c7fc:	bf00      	nop
 800c7fe:	3710      	adds	r7, #16
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}
 800c804:	2000a514 	.word	0x2000a514

0800c808 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800c808:	b5b0      	push	{r4, r5, r7, lr}
 800c80a:	b08a      	sub	sp, #40	; 0x28
 800c80c:	af04      	add	r7, sp, #16
 800c80e:	6078      	str	r0, [r7, #4]
 800c810:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d107      	bne.n	800c828 <etharp_input+0x20>
 800c818:	4b3d      	ldr	r3, [pc, #244]	; (800c910 <etharp_input+0x108>)
 800c81a:	f240 228a 	movw	r2, #650	; 0x28a
 800c81e:	493d      	ldr	r1, [pc, #244]	; (800c914 <etharp_input+0x10c>)
 800c820:	483d      	ldr	r0, [pc, #244]	; (800c918 <etharp_input+0x110>)
 800c822:	f002 f88f 	bl	800e944 <iprintf>
 800c826:	e06f      	b.n	800c908 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	685b      	ldr	r3, [r3, #4]
 800c82c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c82e:	693b      	ldr	r3, [r7, #16]
 800c830:	881b      	ldrh	r3, [r3, #0]
 800c832:	b29b      	uxth	r3, r3
 800c834:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c838:	d10c      	bne.n	800c854 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c83a:	693b      	ldr	r3, [r7, #16]
 800c83c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c83e:	2b06      	cmp	r3, #6
 800c840:	d108      	bne.n	800c854 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c842:	693b      	ldr	r3, [r7, #16]
 800c844:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c846:	2b04      	cmp	r3, #4
 800c848:	d104      	bne.n	800c854 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	885b      	ldrh	r3, [r3, #2]
 800c84e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c850:	2b08      	cmp	r3, #8
 800c852:	d003      	beq.n	800c85c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f7f9 fc5b 	bl	8006110 <pbuf_free>
    return;
 800c85a:	e055      	b.n	800c908 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800c85c:	693b      	ldr	r3, [r7, #16]
 800c85e:	330e      	adds	r3, #14
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800c864:	693b      	ldr	r3, [r7, #16]
 800c866:	3318      	adds	r3, #24
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	3304      	adds	r3, #4
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d102      	bne.n	800c87c <etharp_input+0x74>
    for_us = 0;
 800c876:	2300      	movs	r3, #0
 800c878:	75fb      	strb	r3, [r7, #23]
 800c87a:	e009      	b.n	800c890 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800c87c:	68ba      	ldr	r2, [r7, #8]
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	3304      	adds	r3, #4
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	429a      	cmp	r2, r3
 800c886:	bf0c      	ite	eq
 800c888:	2301      	moveq	r3, #1
 800c88a:	2300      	movne	r3, #0
 800c88c:	b2db      	uxtb	r3, r3
 800c88e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c890:	693b      	ldr	r3, [r7, #16]
 800c892:	f103 0208 	add.w	r2, r3, #8
 800c896:	7dfb      	ldrb	r3, [r7, #23]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d001      	beq.n	800c8a0 <etharp_input+0x98>
 800c89c:	2301      	movs	r3, #1
 800c89e:	e000      	b.n	800c8a2 <etharp_input+0x9a>
 800c8a0:	2302      	movs	r3, #2
 800c8a2:	f107 010c 	add.w	r1, r7, #12
 800c8a6:	6838      	ldr	r0, [r7, #0]
 800c8a8:	f7ff fed8 	bl	800c65c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800c8ac:	693b      	ldr	r3, [r7, #16]
 800c8ae:	88db      	ldrh	r3, [r3, #6]
 800c8b0:	b29b      	uxth	r3, r3
 800c8b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8b6:	d003      	beq.n	800c8c0 <etharp_input+0xb8>
 800c8b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c8bc:	d01e      	beq.n	800c8fc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800c8be:	e020      	b.n	800c902 <etharp_input+0xfa>
      if (for_us) {
 800c8c0:	7dfb      	ldrb	r3, [r7, #23]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d01c      	beq.n	800c900 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800c8cc:	693b      	ldr	r3, [r7, #16]
 800c8ce:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800c8dc:	693a      	ldr	r2, [r7, #16]
 800c8de:	3208      	adds	r2, #8
        etharp_raw(netif,
 800c8e0:	2102      	movs	r1, #2
 800c8e2:	9103      	str	r1, [sp, #12]
 800c8e4:	f107 010c 	add.w	r1, r7, #12
 800c8e8:	9102      	str	r1, [sp, #8]
 800c8ea:	9201      	str	r2, [sp, #4]
 800c8ec:	9300      	str	r3, [sp, #0]
 800c8ee:	462b      	mov	r3, r5
 800c8f0:	4622      	mov	r2, r4
 800c8f2:	4601      	mov	r1, r0
 800c8f4:	6838      	ldr	r0, [r7, #0]
 800c8f6:	f000 faeb 	bl	800ced0 <etharp_raw>
      break;
 800c8fa:	e001      	b.n	800c900 <etharp_input+0xf8>
      break;
 800c8fc:	bf00      	nop
 800c8fe:	e000      	b.n	800c902 <etharp_input+0xfa>
      break;
 800c900:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f7f9 fc04 	bl	8006110 <pbuf_free>
}
 800c908:	3718      	adds	r7, #24
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bdb0      	pop	{r4, r5, r7, pc}
 800c90e:	bf00      	nop
 800c910:	08011ac0 	.word	0x08011ac0
 800c914:	08011c10 	.word	0x08011c10
 800c918:	08011b38 	.word	0x08011b38

0800c91c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b086      	sub	sp, #24
 800c920:	af02      	add	r7, sp, #8
 800c922:	60f8      	str	r0, [r7, #12]
 800c924:	60b9      	str	r1, [r7, #8]
 800c926:	4613      	mov	r3, r2
 800c928:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c92a:	79fa      	ldrb	r2, [r7, #7]
 800c92c:	4944      	ldr	r1, [pc, #272]	; (800ca40 <etharp_output_to_arp_index+0x124>)
 800c92e:	4613      	mov	r3, r2
 800c930:	005b      	lsls	r3, r3, #1
 800c932:	4413      	add	r3, r2
 800c934:	00db      	lsls	r3, r3, #3
 800c936:	440b      	add	r3, r1
 800c938:	3314      	adds	r3, #20
 800c93a:	781b      	ldrb	r3, [r3, #0]
 800c93c:	2b01      	cmp	r3, #1
 800c93e:	d806      	bhi.n	800c94e <etharp_output_to_arp_index+0x32>
 800c940:	4b40      	ldr	r3, [pc, #256]	; (800ca44 <etharp_output_to_arp_index+0x128>)
 800c942:	f240 22ee 	movw	r2, #750	; 0x2ee
 800c946:	4940      	ldr	r1, [pc, #256]	; (800ca48 <etharp_output_to_arp_index+0x12c>)
 800c948:	4840      	ldr	r0, [pc, #256]	; (800ca4c <etharp_output_to_arp_index+0x130>)
 800c94a:	f001 fffb 	bl	800e944 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800c94e:	79fa      	ldrb	r2, [r7, #7]
 800c950:	493b      	ldr	r1, [pc, #236]	; (800ca40 <etharp_output_to_arp_index+0x124>)
 800c952:	4613      	mov	r3, r2
 800c954:	005b      	lsls	r3, r3, #1
 800c956:	4413      	add	r3, r2
 800c958:	00db      	lsls	r3, r3, #3
 800c95a:	440b      	add	r3, r1
 800c95c:	3314      	adds	r3, #20
 800c95e:	781b      	ldrb	r3, [r3, #0]
 800c960:	2b02      	cmp	r3, #2
 800c962:	d153      	bne.n	800ca0c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800c964:	79fa      	ldrb	r2, [r7, #7]
 800c966:	4936      	ldr	r1, [pc, #216]	; (800ca40 <etharp_output_to_arp_index+0x124>)
 800c968:	4613      	mov	r3, r2
 800c96a:	005b      	lsls	r3, r3, #1
 800c96c:	4413      	add	r3, r2
 800c96e:	00db      	lsls	r3, r3, #3
 800c970:	440b      	add	r3, r1
 800c972:	3312      	adds	r3, #18
 800c974:	881b      	ldrh	r3, [r3, #0]
 800c976:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800c97a:	d919      	bls.n	800c9b0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800c97c:	79fa      	ldrb	r2, [r7, #7]
 800c97e:	4613      	mov	r3, r2
 800c980:	005b      	lsls	r3, r3, #1
 800c982:	4413      	add	r3, r2
 800c984:	00db      	lsls	r3, r3, #3
 800c986:	4a2e      	ldr	r2, [pc, #184]	; (800ca40 <etharp_output_to_arp_index+0x124>)
 800c988:	4413      	add	r3, r2
 800c98a:	3304      	adds	r3, #4
 800c98c:	4619      	mov	r1, r3
 800c98e:	68f8      	ldr	r0, [r7, #12]
 800c990:	f000 fb4c 	bl	800d02c <etharp_request>
 800c994:	4603      	mov	r3, r0
 800c996:	2b00      	cmp	r3, #0
 800c998:	d138      	bne.n	800ca0c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c99a:	79fa      	ldrb	r2, [r7, #7]
 800c99c:	4928      	ldr	r1, [pc, #160]	; (800ca40 <etharp_output_to_arp_index+0x124>)
 800c99e:	4613      	mov	r3, r2
 800c9a0:	005b      	lsls	r3, r3, #1
 800c9a2:	4413      	add	r3, r2
 800c9a4:	00db      	lsls	r3, r3, #3
 800c9a6:	440b      	add	r3, r1
 800c9a8:	3314      	adds	r3, #20
 800c9aa:	2203      	movs	r2, #3
 800c9ac:	701a      	strb	r2, [r3, #0]
 800c9ae:	e02d      	b.n	800ca0c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800c9b0:	79fa      	ldrb	r2, [r7, #7]
 800c9b2:	4923      	ldr	r1, [pc, #140]	; (800ca40 <etharp_output_to_arp_index+0x124>)
 800c9b4:	4613      	mov	r3, r2
 800c9b6:	005b      	lsls	r3, r3, #1
 800c9b8:	4413      	add	r3, r2
 800c9ba:	00db      	lsls	r3, r3, #3
 800c9bc:	440b      	add	r3, r1
 800c9be:	3312      	adds	r3, #18
 800c9c0:	881b      	ldrh	r3, [r3, #0]
 800c9c2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800c9c6:	d321      	bcc.n	800ca0c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c9c8:	79fa      	ldrb	r2, [r7, #7]
 800c9ca:	4613      	mov	r3, r2
 800c9cc:	005b      	lsls	r3, r3, #1
 800c9ce:	4413      	add	r3, r2
 800c9d0:	00db      	lsls	r3, r3, #3
 800c9d2:	4a1b      	ldr	r2, [pc, #108]	; (800ca40 <etharp_output_to_arp_index+0x124>)
 800c9d4:	4413      	add	r3, r2
 800c9d6:	1d19      	adds	r1, r3, #4
 800c9d8:	79fa      	ldrb	r2, [r7, #7]
 800c9da:	4613      	mov	r3, r2
 800c9dc:	005b      	lsls	r3, r3, #1
 800c9de:	4413      	add	r3, r2
 800c9e0:	00db      	lsls	r3, r3, #3
 800c9e2:	3308      	adds	r3, #8
 800c9e4:	4a16      	ldr	r2, [pc, #88]	; (800ca40 <etharp_output_to_arp_index+0x124>)
 800c9e6:	4413      	add	r3, r2
 800c9e8:	3304      	adds	r3, #4
 800c9ea:	461a      	mov	r2, r3
 800c9ec:	68f8      	ldr	r0, [r7, #12]
 800c9ee:	f000 fafb 	bl	800cfe8 <etharp_request_dst>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d109      	bne.n	800ca0c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c9f8:	79fa      	ldrb	r2, [r7, #7]
 800c9fa:	4911      	ldr	r1, [pc, #68]	; (800ca40 <etharp_output_to_arp_index+0x124>)
 800c9fc:	4613      	mov	r3, r2
 800c9fe:	005b      	lsls	r3, r3, #1
 800ca00:	4413      	add	r3, r2
 800ca02:	00db      	lsls	r3, r3, #3
 800ca04:	440b      	add	r3, r1
 800ca06:	3314      	adds	r3, #20
 800ca08:	2203      	movs	r2, #3
 800ca0a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800ca12:	79fa      	ldrb	r2, [r7, #7]
 800ca14:	4613      	mov	r3, r2
 800ca16:	005b      	lsls	r3, r3, #1
 800ca18:	4413      	add	r3, r2
 800ca1a:	00db      	lsls	r3, r3, #3
 800ca1c:	3308      	adds	r3, #8
 800ca1e:	4a08      	ldr	r2, [pc, #32]	; (800ca40 <etharp_output_to_arp_index+0x124>)
 800ca20:	4413      	add	r3, r2
 800ca22:	3304      	adds	r3, #4
 800ca24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ca28:	9200      	str	r2, [sp, #0]
 800ca2a:	460a      	mov	r2, r1
 800ca2c:	68b9      	ldr	r1, [r7, #8]
 800ca2e:	68f8      	ldr	r0, [r7, #12]
 800ca30:	f001 fe40 	bl	800e6b4 <ethernet_output>
 800ca34:	4603      	mov	r3, r0
}
 800ca36:	4618      	mov	r0, r3
 800ca38:	3710      	adds	r7, #16
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}
 800ca3e:	bf00      	nop
 800ca40:	2000a514 	.word	0x2000a514
 800ca44:	08011ac0 	.word	0x08011ac0
 800ca48:	08011c30 	.word	0x08011c30
 800ca4c:	08011b38 	.word	0x08011b38

0800ca50 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b08a      	sub	sp, #40	; 0x28
 800ca54:	af02      	add	r7, sp, #8
 800ca56:	60f8      	str	r0, [r7, #12]
 800ca58:	60b9      	str	r1, [r7, #8]
 800ca5a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d106      	bne.n	800ca74 <etharp_output+0x24>
 800ca66:	4b73      	ldr	r3, [pc, #460]	; (800cc34 <etharp_output+0x1e4>)
 800ca68:	f240 321e 	movw	r2, #798	; 0x31e
 800ca6c:	4972      	ldr	r1, [pc, #456]	; (800cc38 <etharp_output+0x1e8>)
 800ca6e:	4873      	ldr	r0, [pc, #460]	; (800cc3c <etharp_output+0x1ec>)
 800ca70:	f001 ff68 	bl	800e944 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d106      	bne.n	800ca88 <etharp_output+0x38>
 800ca7a:	4b6e      	ldr	r3, [pc, #440]	; (800cc34 <etharp_output+0x1e4>)
 800ca7c:	f240 321f 	movw	r2, #799	; 0x31f
 800ca80:	496f      	ldr	r1, [pc, #444]	; (800cc40 <etharp_output+0x1f0>)
 800ca82:	486e      	ldr	r0, [pc, #440]	; (800cc3c <etharp_output+0x1ec>)
 800ca84:	f001 ff5e 	bl	800e944 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d106      	bne.n	800ca9c <etharp_output+0x4c>
 800ca8e:	4b69      	ldr	r3, [pc, #420]	; (800cc34 <etharp_output+0x1e4>)
 800ca90:	f44f 7248 	mov.w	r2, #800	; 0x320
 800ca94:	496b      	ldr	r1, [pc, #428]	; (800cc44 <etharp_output+0x1f4>)
 800ca96:	4869      	ldr	r0, [pc, #420]	; (800cc3c <etharp_output+0x1ec>)
 800ca98:	f001 ff54 	bl	800e944 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	68f9      	ldr	r1, [r7, #12]
 800caa2:	4618      	mov	r0, r3
 800caa4:	f000 fef8 	bl	800d898 <ip4_addr_isbroadcast_u32>
 800caa8:	4603      	mov	r3, r0
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d002      	beq.n	800cab4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800caae:	4b66      	ldr	r3, [pc, #408]	; (800cc48 <etharp_output+0x1f8>)
 800cab0:	61fb      	str	r3, [r7, #28]
 800cab2:	e0af      	b.n	800cc14 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cabc:	2be0      	cmp	r3, #224	; 0xe0
 800cabe:	d118      	bne.n	800caf2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800cac0:	2301      	movs	r3, #1
 800cac2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800cac4:	2300      	movs	r3, #0
 800cac6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800cac8:	235e      	movs	r3, #94	; 0x5e
 800caca:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	3301      	adds	r3, #1
 800cad0:	781b      	ldrb	r3, [r3, #0]
 800cad2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cad6:	b2db      	uxtb	r3, r3
 800cad8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	3302      	adds	r3, #2
 800cade:	781b      	ldrb	r3, [r3, #0]
 800cae0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	3303      	adds	r3, #3
 800cae6:	781b      	ldrb	r3, [r3, #0]
 800cae8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800caea:	f107 0310 	add.w	r3, r7, #16
 800caee:	61fb      	str	r3, [r7, #28]
 800caf0:	e090      	b.n	800cc14 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681a      	ldr	r2, [r3, #0]
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	3304      	adds	r3, #4
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	405a      	eors	r2, r3
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	3308      	adds	r3, #8
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	4013      	ands	r3, r2
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d012      	beq.n	800cb30 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cb10:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800cb14:	4293      	cmp	r3, r2
 800cb16:	d00b      	beq.n	800cb30 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	330c      	adds	r3, #12
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d003      	beq.n	800cb2a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	330c      	adds	r3, #12
 800cb26:	61bb      	str	r3, [r7, #24]
 800cb28:	e002      	b.n	800cb30 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800cb2a:	f06f 0303 	mvn.w	r3, #3
 800cb2e:	e07d      	b.n	800cc2c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800cb30:	4b46      	ldr	r3, [pc, #280]	; (800cc4c <etharp_output+0x1fc>)
 800cb32:	781b      	ldrb	r3, [r3, #0]
 800cb34:	4619      	mov	r1, r3
 800cb36:	4a46      	ldr	r2, [pc, #280]	; (800cc50 <etharp_output+0x200>)
 800cb38:	460b      	mov	r3, r1
 800cb3a:	005b      	lsls	r3, r3, #1
 800cb3c:	440b      	add	r3, r1
 800cb3e:	00db      	lsls	r3, r3, #3
 800cb40:	4413      	add	r3, r2
 800cb42:	3314      	adds	r3, #20
 800cb44:	781b      	ldrb	r3, [r3, #0]
 800cb46:	2b01      	cmp	r3, #1
 800cb48:	d925      	bls.n	800cb96 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800cb4a:	4b40      	ldr	r3, [pc, #256]	; (800cc4c <etharp_output+0x1fc>)
 800cb4c:	781b      	ldrb	r3, [r3, #0]
 800cb4e:	4619      	mov	r1, r3
 800cb50:	4a3f      	ldr	r2, [pc, #252]	; (800cc50 <etharp_output+0x200>)
 800cb52:	460b      	mov	r3, r1
 800cb54:	005b      	lsls	r3, r3, #1
 800cb56:	440b      	add	r3, r1
 800cb58:	00db      	lsls	r3, r3, #3
 800cb5a:	4413      	add	r3, r2
 800cb5c:	3308      	adds	r3, #8
 800cb5e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800cb60:	68fa      	ldr	r2, [r7, #12]
 800cb62:	429a      	cmp	r2, r3
 800cb64:	d117      	bne.n	800cb96 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800cb66:	69bb      	ldr	r3, [r7, #24]
 800cb68:	681a      	ldr	r2, [r3, #0]
 800cb6a:	4b38      	ldr	r3, [pc, #224]	; (800cc4c <etharp_output+0x1fc>)
 800cb6c:	781b      	ldrb	r3, [r3, #0]
 800cb6e:	4618      	mov	r0, r3
 800cb70:	4937      	ldr	r1, [pc, #220]	; (800cc50 <etharp_output+0x200>)
 800cb72:	4603      	mov	r3, r0
 800cb74:	005b      	lsls	r3, r3, #1
 800cb76:	4403      	add	r3, r0
 800cb78:	00db      	lsls	r3, r3, #3
 800cb7a:	440b      	add	r3, r1
 800cb7c:	3304      	adds	r3, #4
 800cb7e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800cb80:	429a      	cmp	r2, r3
 800cb82:	d108      	bne.n	800cb96 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800cb84:	4b31      	ldr	r3, [pc, #196]	; (800cc4c <etharp_output+0x1fc>)
 800cb86:	781b      	ldrb	r3, [r3, #0]
 800cb88:	461a      	mov	r2, r3
 800cb8a:	68b9      	ldr	r1, [r7, #8]
 800cb8c:	68f8      	ldr	r0, [r7, #12]
 800cb8e:	f7ff fec5 	bl	800c91c <etharp_output_to_arp_index>
 800cb92:	4603      	mov	r3, r0
 800cb94:	e04a      	b.n	800cc2c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800cb96:	2300      	movs	r3, #0
 800cb98:	75fb      	strb	r3, [r7, #23]
 800cb9a:	e031      	b.n	800cc00 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800cb9c:	7dfa      	ldrb	r2, [r7, #23]
 800cb9e:	492c      	ldr	r1, [pc, #176]	; (800cc50 <etharp_output+0x200>)
 800cba0:	4613      	mov	r3, r2
 800cba2:	005b      	lsls	r3, r3, #1
 800cba4:	4413      	add	r3, r2
 800cba6:	00db      	lsls	r3, r3, #3
 800cba8:	440b      	add	r3, r1
 800cbaa:	3314      	adds	r3, #20
 800cbac:	781b      	ldrb	r3, [r3, #0]
 800cbae:	2b01      	cmp	r3, #1
 800cbb0:	d923      	bls.n	800cbfa <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800cbb2:	7dfa      	ldrb	r2, [r7, #23]
 800cbb4:	4926      	ldr	r1, [pc, #152]	; (800cc50 <etharp_output+0x200>)
 800cbb6:	4613      	mov	r3, r2
 800cbb8:	005b      	lsls	r3, r3, #1
 800cbba:	4413      	add	r3, r2
 800cbbc:	00db      	lsls	r3, r3, #3
 800cbbe:	440b      	add	r3, r1
 800cbc0:	3308      	adds	r3, #8
 800cbc2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800cbc4:	68fa      	ldr	r2, [r7, #12]
 800cbc6:	429a      	cmp	r2, r3
 800cbc8:	d117      	bne.n	800cbfa <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800cbca:	69bb      	ldr	r3, [r7, #24]
 800cbcc:	6819      	ldr	r1, [r3, #0]
 800cbce:	7dfa      	ldrb	r2, [r7, #23]
 800cbd0:	481f      	ldr	r0, [pc, #124]	; (800cc50 <etharp_output+0x200>)
 800cbd2:	4613      	mov	r3, r2
 800cbd4:	005b      	lsls	r3, r3, #1
 800cbd6:	4413      	add	r3, r2
 800cbd8:	00db      	lsls	r3, r3, #3
 800cbda:	4403      	add	r3, r0
 800cbdc:	3304      	adds	r3, #4
 800cbde:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800cbe0:	4299      	cmp	r1, r3
 800cbe2:	d10a      	bne.n	800cbfa <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800cbe4:	4a19      	ldr	r2, [pc, #100]	; (800cc4c <etharp_output+0x1fc>)
 800cbe6:	7dfb      	ldrb	r3, [r7, #23]
 800cbe8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800cbea:	7dfb      	ldrb	r3, [r7, #23]
 800cbec:	461a      	mov	r2, r3
 800cbee:	68b9      	ldr	r1, [r7, #8]
 800cbf0:	68f8      	ldr	r0, [r7, #12]
 800cbf2:	f7ff fe93 	bl	800c91c <etharp_output_to_arp_index>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	e018      	b.n	800cc2c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800cbfa:	7dfb      	ldrb	r3, [r7, #23]
 800cbfc:	3301      	adds	r3, #1
 800cbfe:	75fb      	strb	r3, [r7, #23]
 800cc00:	7dfb      	ldrb	r3, [r7, #23]
 800cc02:	2b09      	cmp	r3, #9
 800cc04:	d9ca      	bls.n	800cb9c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800cc06:	68ba      	ldr	r2, [r7, #8]
 800cc08:	69b9      	ldr	r1, [r7, #24]
 800cc0a:	68f8      	ldr	r0, [r7, #12]
 800cc0c:	f000 f822 	bl	800cc54 <etharp_query>
 800cc10:	4603      	mov	r3, r0
 800cc12:	e00b      	b.n	800cc2c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800cc1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cc1e:	9300      	str	r3, [sp, #0]
 800cc20:	69fb      	ldr	r3, [r7, #28]
 800cc22:	68b9      	ldr	r1, [r7, #8]
 800cc24:	68f8      	ldr	r0, [r7, #12]
 800cc26:	f001 fd45 	bl	800e6b4 <ethernet_output>
 800cc2a:	4603      	mov	r3, r0
}
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	3720      	adds	r7, #32
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bd80      	pop	{r7, pc}
 800cc34:	08011ac0 	.word	0x08011ac0
 800cc38:	08011c10 	.word	0x08011c10
 800cc3c:	08011b38 	.word	0x08011b38
 800cc40:	08011c60 	.word	0x08011c60
 800cc44:	08011c00 	.word	0x08011c00
 800cc48:	08012274 	.word	0x08012274
 800cc4c:	2000a604 	.word	0x2000a604
 800cc50:	2000a514 	.word	0x2000a514

0800cc54 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b08c      	sub	sp, #48	; 0x30
 800cc58:	af02      	add	r7, sp, #8
 800cc5a:	60f8      	str	r0, [r7, #12]
 800cc5c:	60b9      	str	r1, [r7, #8]
 800cc5e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	3326      	adds	r3, #38	; 0x26
 800cc64:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800cc66:	23ff      	movs	r3, #255	; 0xff
 800cc68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800cc70:	68bb      	ldr	r3, [r7, #8]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	68f9      	ldr	r1, [r7, #12]
 800cc76:	4618      	mov	r0, r3
 800cc78:	f000 fe0e 	bl	800d898 <ip4_addr_isbroadcast_u32>
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d10c      	bne.n	800cc9c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800cc82:	68bb      	ldr	r3, [r7, #8]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800cc8a:	2be0      	cmp	r3, #224	; 0xe0
 800cc8c:	d006      	beq.n	800cc9c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800cc8e:	68bb      	ldr	r3, [r7, #8]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d003      	beq.n	800cc9c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800cc94:	68bb      	ldr	r3, [r7, #8]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d102      	bne.n	800cca2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800cc9c:	f06f 030f 	mvn.w	r3, #15
 800cca0:	e101      	b.n	800cea6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800cca2:	68fa      	ldr	r2, [r7, #12]
 800cca4:	2101      	movs	r1, #1
 800cca6:	68b8      	ldr	r0, [r7, #8]
 800cca8:	f7ff fb60 	bl	800c36c <etharp_find_entry>
 800ccac:	4603      	mov	r3, r0
 800ccae:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800ccb0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	da02      	bge.n	800ccbe <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800ccb8:	8a7b      	ldrh	r3, [r7, #18]
 800ccba:	b25b      	sxtb	r3, r3
 800ccbc:	e0f3      	b.n	800cea6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800ccbe:	8a7b      	ldrh	r3, [r7, #18]
 800ccc0:	2b7e      	cmp	r3, #126	; 0x7e
 800ccc2:	d906      	bls.n	800ccd2 <etharp_query+0x7e>
 800ccc4:	4b7a      	ldr	r3, [pc, #488]	; (800ceb0 <etharp_query+0x25c>)
 800ccc6:	f240 32c1 	movw	r2, #961	; 0x3c1
 800ccca:	497a      	ldr	r1, [pc, #488]	; (800ceb4 <etharp_query+0x260>)
 800cccc:	487a      	ldr	r0, [pc, #488]	; (800ceb8 <etharp_query+0x264>)
 800ccce:	f001 fe39 	bl	800e944 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800ccd2:	8a7b      	ldrh	r3, [r7, #18]
 800ccd4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800ccd6:	7c7a      	ldrb	r2, [r7, #17]
 800ccd8:	4978      	ldr	r1, [pc, #480]	; (800cebc <etharp_query+0x268>)
 800ccda:	4613      	mov	r3, r2
 800ccdc:	005b      	lsls	r3, r3, #1
 800ccde:	4413      	add	r3, r2
 800cce0:	00db      	lsls	r3, r3, #3
 800cce2:	440b      	add	r3, r1
 800cce4:	3314      	adds	r3, #20
 800cce6:	781b      	ldrb	r3, [r3, #0]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d115      	bne.n	800cd18 <etharp_query+0xc4>
    is_new_entry = 1;
 800ccec:	2301      	movs	r3, #1
 800ccee:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800ccf0:	7c7a      	ldrb	r2, [r7, #17]
 800ccf2:	4972      	ldr	r1, [pc, #456]	; (800cebc <etharp_query+0x268>)
 800ccf4:	4613      	mov	r3, r2
 800ccf6:	005b      	lsls	r3, r3, #1
 800ccf8:	4413      	add	r3, r2
 800ccfa:	00db      	lsls	r3, r3, #3
 800ccfc:	440b      	add	r3, r1
 800ccfe:	3314      	adds	r3, #20
 800cd00:	2201      	movs	r2, #1
 800cd02:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800cd04:	7c7a      	ldrb	r2, [r7, #17]
 800cd06:	496d      	ldr	r1, [pc, #436]	; (800cebc <etharp_query+0x268>)
 800cd08:	4613      	mov	r3, r2
 800cd0a:	005b      	lsls	r3, r3, #1
 800cd0c:	4413      	add	r3, r2
 800cd0e:	00db      	lsls	r3, r3, #3
 800cd10:	440b      	add	r3, r1
 800cd12:	3308      	adds	r3, #8
 800cd14:	68fa      	ldr	r2, [r7, #12]
 800cd16:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800cd18:	7c7a      	ldrb	r2, [r7, #17]
 800cd1a:	4968      	ldr	r1, [pc, #416]	; (800cebc <etharp_query+0x268>)
 800cd1c:	4613      	mov	r3, r2
 800cd1e:	005b      	lsls	r3, r3, #1
 800cd20:	4413      	add	r3, r2
 800cd22:	00db      	lsls	r3, r3, #3
 800cd24:	440b      	add	r3, r1
 800cd26:	3314      	adds	r3, #20
 800cd28:	781b      	ldrb	r3, [r3, #0]
 800cd2a:	2b01      	cmp	r3, #1
 800cd2c:	d011      	beq.n	800cd52 <etharp_query+0xfe>
 800cd2e:	7c7a      	ldrb	r2, [r7, #17]
 800cd30:	4962      	ldr	r1, [pc, #392]	; (800cebc <etharp_query+0x268>)
 800cd32:	4613      	mov	r3, r2
 800cd34:	005b      	lsls	r3, r3, #1
 800cd36:	4413      	add	r3, r2
 800cd38:	00db      	lsls	r3, r3, #3
 800cd3a:	440b      	add	r3, r1
 800cd3c:	3314      	adds	r3, #20
 800cd3e:	781b      	ldrb	r3, [r3, #0]
 800cd40:	2b01      	cmp	r3, #1
 800cd42:	d806      	bhi.n	800cd52 <etharp_query+0xfe>
 800cd44:	4b5a      	ldr	r3, [pc, #360]	; (800ceb0 <etharp_query+0x25c>)
 800cd46:	f240 32cd 	movw	r2, #973	; 0x3cd
 800cd4a:	495d      	ldr	r1, [pc, #372]	; (800cec0 <etharp_query+0x26c>)
 800cd4c:	485a      	ldr	r0, [pc, #360]	; (800ceb8 <etharp_query+0x264>)
 800cd4e:	f001 fdf9 	bl	800e944 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800cd52:	6a3b      	ldr	r3, [r7, #32]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d102      	bne.n	800cd5e <etharp_query+0x10a>
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d10c      	bne.n	800cd78 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800cd5e:	68b9      	ldr	r1, [r7, #8]
 800cd60:	68f8      	ldr	r0, [r7, #12]
 800cd62:	f000 f963 	bl	800d02c <etharp_request>
 800cd66:	4603      	mov	r3, r0
 800cd68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d102      	bne.n	800cd78 <etharp_query+0x124>
      return result;
 800cd72:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cd76:	e096      	b.n	800cea6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d106      	bne.n	800cd8c <etharp_query+0x138>
 800cd7e:	4b4c      	ldr	r3, [pc, #304]	; (800ceb0 <etharp_query+0x25c>)
 800cd80:	f240 32e1 	movw	r2, #993	; 0x3e1
 800cd84:	494f      	ldr	r1, [pc, #316]	; (800cec4 <etharp_query+0x270>)
 800cd86:	484c      	ldr	r0, [pc, #304]	; (800ceb8 <etharp_query+0x264>)
 800cd88:	f001 fddc 	bl	800e944 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800cd8c:	7c7a      	ldrb	r2, [r7, #17]
 800cd8e:	494b      	ldr	r1, [pc, #300]	; (800cebc <etharp_query+0x268>)
 800cd90:	4613      	mov	r3, r2
 800cd92:	005b      	lsls	r3, r3, #1
 800cd94:	4413      	add	r3, r2
 800cd96:	00db      	lsls	r3, r3, #3
 800cd98:	440b      	add	r3, r1
 800cd9a:	3314      	adds	r3, #20
 800cd9c:	781b      	ldrb	r3, [r3, #0]
 800cd9e:	2b01      	cmp	r3, #1
 800cda0:	d917      	bls.n	800cdd2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800cda2:	4a49      	ldr	r2, [pc, #292]	; (800cec8 <etharp_query+0x274>)
 800cda4:	7c7b      	ldrb	r3, [r7, #17]
 800cda6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800cda8:	7c7a      	ldrb	r2, [r7, #17]
 800cdaa:	4613      	mov	r3, r2
 800cdac:	005b      	lsls	r3, r3, #1
 800cdae:	4413      	add	r3, r2
 800cdb0:	00db      	lsls	r3, r3, #3
 800cdb2:	3308      	adds	r3, #8
 800cdb4:	4a41      	ldr	r2, [pc, #260]	; (800cebc <etharp_query+0x268>)
 800cdb6:	4413      	add	r3, r2
 800cdb8:	3304      	adds	r3, #4
 800cdba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cdbe:	9200      	str	r2, [sp, #0]
 800cdc0:	697a      	ldr	r2, [r7, #20]
 800cdc2:	6879      	ldr	r1, [r7, #4]
 800cdc4:	68f8      	ldr	r0, [r7, #12]
 800cdc6:	f001 fc75 	bl	800e6b4 <ethernet_output>
 800cdca:	4603      	mov	r3, r0
 800cdcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cdd0:	e067      	b.n	800cea2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800cdd2:	7c7a      	ldrb	r2, [r7, #17]
 800cdd4:	4939      	ldr	r1, [pc, #228]	; (800cebc <etharp_query+0x268>)
 800cdd6:	4613      	mov	r3, r2
 800cdd8:	005b      	lsls	r3, r3, #1
 800cdda:	4413      	add	r3, r2
 800cddc:	00db      	lsls	r3, r3, #3
 800cdde:	440b      	add	r3, r1
 800cde0:	3314      	adds	r3, #20
 800cde2:	781b      	ldrb	r3, [r3, #0]
 800cde4:	2b01      	cmp	r3, #1
 800cde6:	d15c      	bne.n	800cea2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800cde8:	2300      	movs	r3, #0
 800cdea:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	61fb      	str	r3, [r7, #28]
    while (p) {
 800cdf0:	e01c      	b.n	800ce2c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800cdf2:	69fb      	ldr	r3, [r7, #28]
 800cdf4:	895a      	ldrh	r2, [r3, #10]
 800cdf6:	69fb      	ldr	r3, [r7, #28]
 800cdf8:	891b      	ldrh	r3, [r3, #8]
 800cdfa:	429a      	cmp	r2, r3
 800cdfc:	d10a      	bne.n	800ce14 <etharp_query+0x1c0>
 800cdfe:	69fb      	ldr	r3, [r7, #28]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d006      	beq.n	800ce14 <etharp_query+0x1c0>
 800ce06:	4b2a      	ldr	r3, [pc, #168]	; (800ceb0 <etharp_query+0x25c>)
 800ce08:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800ce0c:	492f      	ldr	r1, [pc, #188]	; (800cecc <etharp_query+0x278>)
 800ce0e:	482a      	ldr	r0, [pc, #168]	; (800ceb8 <etharp_query+0x264>)
 800ce10:	f001 fd98 	bl	800e944 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800ce14:	69fb      	ldr	r3, [r7, #28]
 800ce16:	7b1b      	ldrb	r3, [r3, #12]
 800ce18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d002      	beq.n	800ce26 <etharp_query+0x1d2>
        copy_needed = 1;
 800ce20:	2301      	movs	r3, #1
 800ce22:	61bb      	str	r3, [r7, #24]
        break;
 800ce24:	e005      	b.n	800ce32 <etharp_query+0x1de>
      }
      p = p->next;
 800ce26:	69fb      	ldr	r3, [r7, #28]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ce2c:	69fb      	ldr	r3, [r7, #28]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d1df      	bne.n	800cdf2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800ce32:	69bb      	ldr	r3, [r7, #24]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d007      	beq.n	800ce48 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800ce38:	687a      	ldr	r2, [r7, #4]
 800ce3a:	f44f 7120 	mov.w	r1, #640	; 0x280
 800ce3e:	200e      	movs	r0, #14
 800ce40:	f7f9 fbc2 	bl	80065c8 <pbuf_clone>
 800ce44:	61f8      	str	r0, [r7, #28]
 800ce46:	e004      	b.n	800ce52 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800ce4c:	69f8      	ldr	r0, [r7, #28]
 800ce4e:	f7f9 f9ff 	bl	8006250 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800ce52:	69fb      	ldr	r3, [r7, #28]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d021      	beq.n	800ce9c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800ce58:	7c7a      	ldrb	r2, [r7, #17]
 800ce5a:	4918      	ldr	r1, [pc, #96]	; (800cebc <etharp_query+0x268>)
 800ce5c:	4613      	mov	r3, r2
 800ce5e:	005b      	lsls	r3, r3, #1
 800ce60:	4413      	add	r3, r2
 800ce62:	00db      	lsls	r3, r3, #3
 800ce64:	440b      	add	r3, r1
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d00a      	beq.n	800ce82 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800ce6c:	7c7a      	ldrb	r2, [r7, #17]
 800ce6e:	4913      	ldr	r1, [pc, #76]	; (800cebc <etharp_query+0x268>)
 800ce70:	4613      	mov	r3, r2
 800ce72:	005b      	lsls	r3, r3, #1
 800ce74:	4413      	add	r3, r2
 800ce76:	00db      	lsls	r3, r3, #3
 800ce78:	440b      	add	r3, r1
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	f7f9 f947 	bl	8006110 <pbuf_free>
      }
      arp_table[i].q = p;
 800ce82:	7c7a      	ldrb	r2, [r7, #17]
 800ce84:	490d      	ldr	r1, [pc, #52]	; (800cebc <etharp_query+0x268>)
 800ce86:	4613      	mov	r3, r2
 800ce88:	005b      	lsls	r3, r3, #1
 800ce8a:	4413      	add	r3, r2
 800ce8c:	00db      	lsls	r3, r3, #3
 800ce8e:	440b      	add	r3, r1
 800ce90:	69fa      	ldr	r2, [r7, #28]
 800ce92:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800ce94:	2300      	movs	r3, #0
 800ce96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ce9a:	e002      	b.n	800cea2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800ce9c:	23ff      	movs	r3, #255	; 0xff
 800ce9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800cea2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	3728      	adds	r7, #40	; 0x28
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bd80      	pop	{r7, pc}
 800ceae:	bf00      	nop
 800ceb0:	08011ac0 	.word	0x08011ac0
 800ceb4:	08011c6c 	.word	0x08011c6c
 800ceb8:	08011b38 	.word	0x08011b38
 800cebc:	2000a514 	.word	0x2000a514
 800cec0:	08011c7c 	.word	0x08011c7c
 800cec4:	08011c60 	.word	0x08011c60
 800cec8:	2000a604 	.word	0x2000a604
 800cecc:	08011ca4 	.word	0x08011ca4

0800ced0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b08a      	sub	sp, #40	; 0x28
 800ced4:	af02      	add	r7, sp, #8
 800ced6:	60f8      	str	r0, [r7, #12]
 800ced8:	60b9      	str	r1, [r7, #8]
 800ceda:	607a      	str	r2, [r7, #4]
 800cedc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800cede:	2300      	movs	r3, #0
 800cee0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d106      	bne.n	800cef6 <etharp_raw+0x26>
 800cee8:	4b3a      	ldr	r3, [pc, #232]	; (800cfd4 <etharp_raw+0x104>)
 800ceea:	f240 4257 	movw	r2, #1111	; 0x457
 800ceee:	493a      	ldr	r1, [pc, #232]	; (800cfd8 <etharp_raw+0x108>)
 800cef0:	483a      	ldr	r0, [pc, #232]	; (800cfdc <etharp_raw+0x10c>)
 800cef2:	f001 fd27 	bl	800e944 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800cef6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cefa:	211c      	movs	r1, #28
 800cefc:	200e      	movs	r0, #14
 800cefe:	f7f8 fe23 	bl	8005b48 <pbuf_alloc>
 800cf02:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800cf04:	69bb      	ldr	r3, [r7, #24]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d102      	bne.n	800cf10 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800cf0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cf0e:	e05d      	b.n	800cfcc <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800cf10:	69bb      	ldr	r3, [r7, #24]
 800cf12:	895b      	ldrh	r3, [r3, #10]
 800cf14:	2b1b      	cmp	r3, #27
 800cf16:	d806      	bhi.n	800cf26 <etharp_raw+0x56>
 800cf18:	4b2e      	ldr	r3, [pc, #184]	; (800cfd4 <etharp_raw+0x104>)
 800cf1a:	f240 4262 	movw	r2, #1122	; 0x462
 800cf1e:	4930      	ldr	r1, [pc, #192]	; (800cfe0 <etharp_raw+0x110>)
 800cf20:	482e      	ldr	r0, [pc, #184]	; (800cfdc <etharp_raw+0x10c>)
 800cf22:	f001 fd0f 	bl	800e944 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800cf26:	69bb      	ldr	r3, [r7, #24]
 800cf28:	685b      	ldr	r3, [r3, #4]
 800cf2a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800cf2c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cf2e:	4618      	mov	r0, r3
 800cf30:	f7f7 fd90 	bl	8004a54 <lwip_htons>
 800cf34:	4603      	mov	r3, r0
 800cf36:	461a      	mov	r2, r3
 800cf38:	697b      	ldr	r3, [r7, #20]
 800cf3a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cf42:	2b06      	cmp	r3, #6
 800cf44:	d006      	beq.n	800cf54 <etharp_raw+0x84>
 800cf46:	4b23      	ldr	r3, [pc, #140]	; (800cfd4 <etharp_raw+0x104>)
 800cf48:	f240 4269 	movw	r2, #1129	; 0x469
 800cf4c:	4925      	ldr	r1, [pc, #148]	; (800cfe4 <etharp_raw+0x114>)
 800cf4e:	4823      	ldr	r0, [pc, #140]	; (800cfdc <etharp_raw+0x10c>)
 800cf50:	f001 fcf8 	bl	800e944 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800cf54:	697b      	ldr	r3, [r7, #20]
 800cf56:	3308      	adds	r3, #8
 800cf58:	2206      	movs	r2, #6
 800cf5a:	6839      	ldr	r1, [r7, #0]
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	f001 fdde 	bl	800eb1e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800cf62:	697b      	ldr	r3, [r7, #20]
 800cf64:	3312      	adds	r3, #18
 800cf66:	2206      	movs	r2, #6
 800cf68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f001 fdd7 	bl	800eb1e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800cf70:	697b      	ldr	r3, [r7, #20]
 800cf72:	330e      	adds	r3, #14
 800cf74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf76:	6812      	ldr	r2, [r2, #0]
 800cf78:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800cf7a:	697b      	ldr	r3, [r7, #20]
 800cf7c:	3318      	adds	r3, #24
 800cf7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf80:	6812      	ldr	r2, [r2, #0]
 800cf82:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800cf84:	697b      	ldr	r3, [r7, #20]
 800cf86:	2200      	movs	r2, #0
 800cf88:	701a      	strb	r2, [r3, #0]
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	f042 0201 	orr.w	r2, r2, #1
 800cf90:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800cf92:	697b      	ldr	r3, [r7, #20]
 800cf94:	2200      	movs	r2, #0
 800cf96:	f042 0208 	orr.w	r2, r2, #8
 800cf9a:	709a      	strb	r2, [r3, #2]
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800cfa0:	697b      	ldr	r3, [r7, #20]
 800cfa2:	2206      	movs	r2, #6
 800cfa4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800cfa6:	697b      	ldr	r3, [r7, #20]
 800cfa8:	2204      	movs	r2, #4
 800cfaa:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800cfac:	f640 0306 	movw	r3, #2054	; 0x806
 800cfb0:	9300      	str	r3, [sp, #0]
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	68ba      	ldr	r2, [r7, #8]
 800cfb6:	69b9      	ldr	r1, [r7, #24]
 800cfb8:	68f8      	ldr	r0, [r7, #12]
 800cfba:	f001 fb7b 	bl	800e6b4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800cfbe:	69b8      	ldr	r0, [r7, #24]
 800cfc0:	f7f9 f8a6 	bl	8006110 <pbuf_free>
  p = NULL;
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800cfc8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cfcc:	4618      	mov	r0, r3
 800cfce:	3720      	adds	r7, #32
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	bd80      	pop	{r7, pc}
 800cfd4:	08011ac0 	.word	0x08011ac0
 800cfd8:	08011c10 	.word	0x08011c10
 800cfdc:	08011b38 	.word	0x08011b38
 800cfe0:	08011cc0 	.word	0x08011cc0
 800cfe4:	08011cf4 	.word	0x08011cf4

0800cfe8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b088      	sub	sp, #32
 800cfec:	af04      	add	r7, sp, #16
 800cfee:	60f8      	str	r0, [r7, #12]
 800cff0:	60b9      	str	r1, [r7, #8]
 800cff2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d004:	2201      	movs	r2, #1
 800d006:	9203      	str	r2, [sp, #12]
 800d008:	68ba      	ldr	r2, [r7, #8]
 800d00a:	9202      	str	r2, [sp, #8]
 800d00c:	4a06      	ldr	r2, [pc, #24]	; (800d028 <etharp_request_dst+0x40>)
 800d00e:	9201      	str	r2, [sp, #4]
 800d010:	9300      	str	r3, [sp, #0]
 800d012:	4603      	mov	r3, r0
 800d014:	687a      	ldr	r2, [r7, #4]
 800d016:	68f8      	ldr	r0, [r7, #12]
 800d018:	f7ff ff5a 	bl	800ced0 <etharp_raw>
 800d01c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800d01e:	4618      	mov	r0, r3
 800d020:	3710      	adds	r7, #16
 800d022:	46bd      	mov	sp, r7
 800d024:	bd80      	pop	{r7, pc}
 800d026:	bf00      	nop
 800d028:	0801227c 	.word	0x0801227c

0800d02c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b082      	sub	sp, #8
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
 800d034:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800d036:	4a05      	ldr	r2, [pc, #20]	; (800d04c <etharp_request+0x20>)
 800d038:	6839      	ldr	r1, [r7, #0]
 800d03a:	6878      	ldr	r0, [r7, #4]
 800d03c:	f7ff ffd4 	bl	800cfe8 <etharp_request_dst>
 800d040:	4603      	mov	r3, r0
}
 800d042:	4618      	mov	r0, r3
 800d044:	3708      	adds	r7, #8
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}
 800d04a:	bf00      	nop
 800d04c:	08012274 	.word	0x08012274

0800d050 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b08e      	sub	sp, #56	; 0x38
 800d054:	af04      	add	r7, sp, #16
 800d056:	6078      	str	r0, [r7, #4]
 800d058:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800d05a:	4b79      	ldr	r3, [pc, #484]	; (800d240 <icmp_input+0x1f0>)
 800d05c:	689b      	ldr	r3, [r3, #8]
 800d05e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800d060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d062:	781b      	ldrb	r3, [r3, #0]
 800d064:	f003 030f 	and.w	r3, r3, #15
 800d068:	b2db      	uxtb	r3, r3
 800d06a:	009b      	lsls	r3, r3, #2
 800d06c:	b2db      	uxtb	r3, r3
 800d06e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800d070:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d072:	2b13      	cmp	r3, #19
 800d074:	f240 80cd 	bls.w	800d212 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	895b      	ldrh	r3, [r3, #10]
 800d07c:	2b03      	cmp	r3, #3
 800d07e:	f240 80ca 	bls.w	800d216 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	685b      	ldr	r3, [r3, #4]
 800d086:	781b      	ldrb	r3, [r3, #0]
 800d088:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800d08c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800d090:	2b00      	cmp	r3, #0
 800d092:	f000 80b7 	beq.w	800d204 <icmp_input+0x1b4>
 800d096:	2b08      	cmp	r3, #8
 800d098:	f040 80b7 	bne.w	800d20a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800d09c:	4b69      	ldr	r3, [pc, #420]	; (800d244 <icmp_input+0x1f4>)
 800d09e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d0a0:	4b67      	ldr	r3, [pc, #412]	; (800d240 <icmp_input+0x1f0>)
 800d0a2:	695b      	ldr	r3, [r3, #20]
 800d0a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d0a8:	2be0      	cmp	r3, #224	; 0xe0
 800d0aa:	f000 80bb 	beq.w	800d224 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800d0ae:	4b64      	ldr	r3, [pc, #400]	; (800d240 <icmp_input+0x1f0>)
 800d0b0:	695b      	ldr	r3, [r3, #20]
 800d0b2:	4a63      	ldr	r2, [pc, #396]	; (800d240 <icmp_input+0x1f0>)
 800d0b4:	6812      	ldr	r2, [r2, #0]
 800d0b6:	4611      	mov	r1, r2
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	f000 fbed 	bl	800d898 <ip4_addr_isbroadcast_u32>
 800d0be:	4603      	mov	r3, r0
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	f040 80b1 	bne.w	800d228 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	891b      	ldrh	r3, [r3, #8]
 800d0ca:	2b07      	cmp	r3, #7
 800d0cc:	f240 80a5 	bls.w	800d21a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d0d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d0d2:	330e      	adds	r3, #14
 800d0d4:	4619      	mov	r1, r3
 800d0d6:	6878      	ldr	r0, [r7, #4]
 800d0d8:	f7f8 ff84 	bl	8005fe4 <pbuf_add_header>
 800d0dc:	4603      	mov	r3, r0
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d04b      	beq.n	800d17a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	891a      	ldrh	r2, [r3, #8]
 800d0e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d0e8:	4413      	add	r3, r2
 800d0ea:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	891b      	ldrh	r3, [r3, #8]
 800d0f0:	8b7a      	ldrh	r2, [r7, #26]
 800d0f2:	429a      	cmp	r2, r3
 800d0f4:	f0c0 809a 	bcc.w	800d22c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800d0f8:	8b7b      	ldrh	r3, [r7, #26]
 800d0fa:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d0fe:	4619      	mov	r1, r3
 800d100:	200e      	movs	r0, #14
 800d102:	f7f8 fd21 	bl	8005b48 <pbuf_alloc>
 800d106:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800d108:	697b      	ldr	r3, [r7, #20]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	f000 8090 	beq.w	800d230 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800d110:	697b      	ldr	r3, [r7, #20]
 800d112:	895b      	ldrh	r3, [r3, #10]
 800d114:	461a      	mov	r2, r3
 800d116:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d118:	3308      	adds	r3, #8
 800d11a:	429a      	cmp	r2, r3
 800d11c:	d203      	bcs.n	800d126 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800d11e:	6978      	ldr	r0, [r7, #20]
 800d120:	f7f8 fff6 	bl	8006110 <pbuf_free>
          goto icmperr;
 800d124:	e085      	b.n	800d232 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800d126:	697b      	ldr	r3, [r7, #20]
 800d128:	685b      	ldr	r3, [r3, #4]
 800d12a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d12c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d12e:	4618      	mov	r0, r3
 800d130:	f001 fcf5 	bl	800eb1e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800d134:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d136:	4619      	mov	r1, r3
 800d138:	6978      	ldr	r0, [r7, #20]
 800d13a:	f7f8 ff63 	bl	8006004 <pbuf_remove_header>
 800d13e:	4603      	mov	r3, r0
 800d140:	2b00      	cmp	r3, #0
 800d142:	d009      	beq.n	800d158 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800d144:	4b40      	ldr	r3, [pc, #256]	; (800d248 <icmp_input+0x1f8>)
 800d146:	22b6      	movs	r2, #182	; 0xb6
 800d148:	4940      	ldr	r1, [pc, #256]	; (800d24c <icmp_input+0x1fc>)
 800d14a:	4841      	ldr	r0, [pc, #260]	; (800d250 <icmp_input+0x200>)
 800d14c:	f001 fbfa 	bl	800e944 <iprintf>
          pbuf_free(r);
 800d150:	6978      	ldr	r0, [r7, #20]
 800d152:	f7f8 ffdd 	bl	8006110 <pbuf_free>
          goto icmperr;
 800d156:	e06c      	b.n	800d232 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800d158:	6879      	ldr	r1, [r7, #4]
 800d15a:	6978      	ldr	r0, [r7, #20]
 800d15c:	f7f9 f8f0 	bl	8006340 <pbuf_copy>
 800d160:	4603      	mov	r3, r0
 800d162:	2b00      	cmp	r3, #0
 800d164:	d003      	beq.n	800d16e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800d166:	6978      	ldr	r0, [r7, #20]
 800d168:	f7f8 ffd2 	bl	8006110 <pbuf_free>
          goto icmperr;
 800d16c:	e061      	b.n	800d232 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	f7f8 ffce 	bl	8006110 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800d174:	697b      	ldr	r3, [r7, #20]
 800d176:	607b      	str	r3, [r7, #4]
 800d178:	e00f      	b.n	800d19a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d17a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d17c:	330e      	adds	r3, #14
 800d17e:	4619      	mov	r1, r3
 800d180:	6878      	ldr	r0, [r7, #4]
 800d182:	f7f8 ff3f 	bl	8006004 <pbuf_remove_header>
 800d186:	4603      	mov	r3, r0
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d006      	beq.n	800d19a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800d18c:	4b2e      	ldr	r3, [pc, #184]	; (800d248 <icmp_input+0x1f8>)
 800d18e:	22c7      	movs	r2, #199	; 0xc7
 800d190:	4930      	ldr	r1, [pc, #192]	; (800d254 <icmp_input+0x204>)
 800d192:	482f      	ldr	r0, [pc, #188]	; (800d250 <icmp_input+0x200>)
 800d194:	f001 fbd6 	bl	800e944 <iprintf>
          goto icmperr;
 800d198:	e04b      	b.n	800d232 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	685b      	ldr	r3, [r3, #4]
 800d19e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800d1a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d1a2:	4619      	mov	r1, r3
 800d1a4:	6878      	ldr	r0, [r7, #4]
 800d1a6:	f7f8 ff1d 	bl	8005fe4 <pbuf_add_header>
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d12b      	bne.n	800d208 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	685b      	ldr	r3, [r3, #4]
 800d1b4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800d1b6:	69fb      	ldr	r3, [r7, #28]
 800d1b8:	681a      	ldr	r2, [r3, #0]
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800d1be:	4b20      	ldr	r3, [pc, #128]	; (800d240 <icmp_input+0x1f0>)
 800d1c0:	691a      	ldr	r2, [r3, #16]
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800d1c6:	693b      	ldr	r3, [r7, #16]
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800d1cc:	693b      	ldr	r3, [r7, #16]
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	709a      	strb	r2, [r3, #2]
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	22ff      	movs	r2, #255	; 0xff
 800d1da:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	2200      	movs	r2, #0
 800d1e0:	729a      	strb	r2, [r3, #10]
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	9302      	str	r3, [sp, #8]
 800d1ea:	2301      	movs	r3, #1
 800d1ec:	9301      	str	r3, [sp, #4]
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	9300      	str	r3, [sp, #0]
 800d1f2:	23ff      	movs	r3, #255	; 0xff
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	69f9      	ldr	r1, [r7, #28]
 800d1f8:	6878      	ldr	r0, [r7, #4]
 800d1fa:	f000 fa75 	bl	800d6e8 <ip4_output_if>
 800d1fe:	4603      	mov	r3, r0
 800d200:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800d202:	e001      	b.n	800d208 <icmp_input+0x1b8>
      break;
 800d204:	bf00      	nop
 800d206:	e000      	b.n	800d20a <icmp_input+0x1ba>
      break;
 800d208:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	f7f8 ff80 	bl	8006110 <pbuf_free>
  return;
 800d210:	e013      	b.n	800d23a <icmp_input+0x1ea>
    goto lenerr;
 800d212:	bf00      	nop
 800d214:	e002      	b.n	800d21c <icmp_input+0x1cc>
    goto lenerr;
 800d216:	bf00      	nop
 800d218:	e000      	b.n	800d21c <icmp_input+0x1cc>
        goto lenerr;
 800d21a:	bf00      	nop
lenerr:
  pbuf_free(p);
 800d21c:	6878      	ldr	r0, [r7, #4]
 800d21e:	f7f8 ff77 	bl	8006110 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d222:	e00a      	b.n	800d23a <icmp_input+0x1ea>
        goto icmperr;
 800d224:	bf00      	nop
 800d226:	e004      	b.n	800d232 <icmp_input+0x1e2>
        goto icmperr;
 800d228:	bf00      	nop
 800d22a:	e002      	b.n	800d232 <icmp_input+0x1e2>
          goto icmperr;
 800d22c:	bf00      	nop
 800d22e:	e000      	b.n	800d232 <icmp_input+0x1e2>
          goto icmperr;
 800d230:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800d232:	6878      	ldr	r0, [r7, #4]
 800d234:	f7f8 ff6c 	bl	8006110 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d238:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800d23a:	3728      	adds	r7, #40	; 0x28
 800d23c:	46bd      	mov	sp, r7
 800d23e:	bd80      	pop	{r7, pc}
 800d240:	20004d84 	.word	0x20004d84
 800d244:	20004d98 	.word	0x20004d98
 800d248:	08011d38 	.word	0x08011d38
 800d24c:	08011d70 	.word	0x08011d70
 800d250:	08011da8 	.word	0x08011da8
 800d254:	08011dd0 	.word	0x08011dd0

0800d258 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800d258:	b580      	push	{r7, lr}
 800d25a:	b082      	sub	sp, #8
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
 800d260:	460b      	mov	r3, r1
 800d262:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800d264:	78fb      	ldrb	r3, [r7, #3]
 800d266:	461a      	mov	r2, r3
 800d268:	2103      	movs	r1, #3
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	f000 f814 	bl	800d298 <icmp_send_response>
}
 800d270:	bf00      	nop
 800d272:	3708      	adds	r7, #8
 800d274:	46bd      	mov	sp, r7
 800d276:	bd80      	pop	{r7, pc}

0800d278 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b082      	sub	sp, #8
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
 800d280:	460b      	mov	r3, r1
 800d282:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800d284:	78fb      	ldrb	r3, [r7, #3]
 800d286:	461a      	mov	r2, r3
 800d288:	210b      	movs	r1, #11
 800d28a:	6878      	ldr	r0, [r7, #4]
 800d28c:	f000 f804 	bl	800d298 <icmp_send_response>
}
 800d290:	bf00      	nop
 800d292:	3708      	adds	r7, #8
 800d294:	46bd      	mov	sp, r7
 800d296:	bd80      	pop	{r7, pc}

0800d298 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b08c      	sub	sp, #48	; 0x30
 800d29c:	af04      	add	r7, sp, #16
 800d29e:	6078      	str	r0, [r7, #4]
 800d2a0:	460b      	mov	r3, r1
 800d2a2:	70fb      	strb	r3, [r7, #3]
 800d2a4:	4613      	mov	r3, r2
 800d2a6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800d2a8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d2ac:	2124      	movs	r1, #36	; 0x24
 800d2ae:	2022      	movs	r0, #34	; 0x22
 800d2b0:	f7f8 fc4a 	bl	8005b48 <pbuf_alloc>
 800d2b4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800d2b6:	69fb      	ldr	r3, [r7, #28]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d04c      	beq.n	800d356 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800d2bc:	69fb      	ldr	r3, [r7, #28]
 800d2be:	895b      	ldrh	r3, [r3, #10]
 800d2c0:	2b23      	cmp	r3, #35	; 0x23
 800d2c2:	d806      	bhi.n	800d2d2 <icmp_send_response+0x3a>
 800d2c4:	4b26      	ldr	r3, [pc, #152]	; (800d360 <icmp_send_response+0xc8>)
 800d2c6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800d2ca:	4926      	ldr	r1, [pc, #152]	; (800d364 <icmp_send_response+0xcc>)
 800d2cc:	4826      	ldr	r0, [pc, #152]	; (800d368 <icmp_send_response+0xd0>)
 800d2ce:	f001 fb39 	bl	800e944 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	685b      	ldr	r3, [r3, #4]
 800d2d6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800d2d8:	69fb      	ldr	r3, [r7, #28]
 800d2da:	685b      	ldr	r3, [r3, #4]
 800d2dc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800d2de:	697b      	ldr	r3, [r7, #20]
 800d2e0:	78fa      	ldrb	r2, [r7, #3]
 800d2e2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800d2e4:	697b      	ldr	r3, [r7, #20]
 800d2e6:	78ba      	ldrb	r2, [r7, #2]
 800d2e8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800d2ea:	697b      	ldr	r3, [r7, #20]
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	711a      	strb	r2, [r3, #4]
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800d2f4:	697b      	ldr	r3, [r7, #20]
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	719a      	strb	r2, [r3, #6]
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800d2fe:	69fb      	ldr	r3, [r7, #28]
 800d300:	685b      	ldr	r3, [r3, #4]
 800d302:	f103 0008 	add.w	r0, r3, #8
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	685b      	ldr	r3, [r3, #4]
 800d30a:	221c      	movs	r2, #28
 800d30c:	4619      	mov	r1, r3
 800d30e:	f001 fc06 	bl	800eb1e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800d312:	69bb      	ldr	r3, [r7, #24]
 800d314:	68db      	ldr	r3, [r3, #12]
 800d316:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800d318:	f107 030c 	add.w	r3, r7, #12
 800d31c:	4618      	mov	r0, r3
 800d31e:	f000 f825 	bl	800d36c <ip4_route>
 800d322:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800d324:	693b      	ldr	r3, [r7, #16]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d011      	beq.n	800d34e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800d32a:	697b      	ldr	r3, [r7, #20]
 800d32c:	2200      	movs	r2, #0
 800d32e:	709a      	strb	r2, [r3, #2]
 800d330:	2200      	movs	r2, #0
 800d332:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800d334:	f107 020c 	add.w	r2, r7, #12
 800d338:	693b      	ldr	r3, [r7, #16]
 800d33a:	9302      	str	r3, [sp, #8]
 800d33c:	2301      	movs	r3, #1
 800d33e:	9301      	str	r3, [sp, #4]
 800d340:	2300      	movs	r3, #0
 800d342:	9300      	str	r3, [sp, #0]
 800d344:	23ff      	movs	r3, #255	; 0xff
 800d346:	2100      	movs	r1, #0
 800d348:	69f8      	ldr	r0, [r7, #28]
 800d34a:	f000 f9cd 	bl	800d6e8 <ip4_output_if>
  }
  pbuf_free(q);
 800d34e:	69f8      	ldr	r0, [r7, #28]
 800d350:	f7f8 fede 	bl	8006110 <pbuf_free>
 800d354:	e000      	b.n	800d358 <icmp_send_response+0xc0>
    return;
 800d356:	bf00      	nop
}
 800d358:	3720      	adds	r7, #32
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}
 800d35e:	bf00      	nop
 800d360:	08011d38 	.word	0x08011d38
 800d364:	08011e04 	.word	0x08011e04
 800d368:	08011da8 	.word	0x08011da8

0800d36c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800d36c:	b480      	push	{r7}
 800d36e:	b085      	sub	sp, #20
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800d374:	4b33      	ldr	r3, [pc, #204]	; (800d444 <ip4_route+0xd8>)
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	60fb      	str	r3, [r7, #12]
 800d37a:	e036      	b.n	800d3ea <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d382:	f003 0301 	and.w	r3, r3, #1
 800d386:	b2db      	uxtb	r3, r3
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d02b      	beq.n	800d3e4 <ip4_route+0x78>
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d392:	089b      	lsrs	r3, r3, #2
 800d394:	f003 0301 	and.w	r3, r3, #1
 800d398:	b2db      	uxtb	r3, r3
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d022      	beq.n	800d3e4 <ip4_route+0x78>
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	3304      	adds	r3, #4
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d01d      	beq.n	800d3e4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681a      	ldr	r2, [r3, #0]
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	3304      	adds	r3, #4
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	405a      	eors	r2, r3
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	3308      	adds	r3, #8
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	4013      	ands	r3, r2
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d101      	bne.n	800d3c4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	e038      	b.n	800d436 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d3ca:	f003 0302 	and.w	r3, r3, #2
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d108      	bne.n	800d3e4 <ip4_route+0x78>
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681a      	ldr	r2, [r3, #0]
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	330c      	adds	r3, #12
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	429a      	cmp	r2, r3
 800d3de:	d101      	bne.n	800d3e4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	e028      	b.n	800d436 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	60fb      	str	r3, [r7, #12]
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d1c5      	bne.n	800d37c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d3f0:	4b15      	ldr	r3, [pc, #84]	; (800d448 <ip4_route+0xdc>)
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d01a      	beq.n	800d42e <ip4_route+0xc2>
 800d3f8:	4b13      	ldr	r3, [pc, #76]	; (800d448 <ip4_route+0xdc>)
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d400:	f003 0301 	and.w	r3, r3, #1
 800d404:	2b00      	cmp	r3, #0
 800d406:	d012      	beq.n	800d42e <ip4_route+0xc2>
 800d408:	4b0f      	ldr	r3, [pc, #60]	; (800d448 <ip4_route+0xdc>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d410:	f003 0304 	and.w	r3, r3, #4
 800d414:	2b00      	cmp	r3, #0
 800d416:	d00a      	beq.n	800d42e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d418:	4b0b      	ldr	r3, [pc, #44]	; (800d448 <ip4_route+0xdc>)
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	3304      	adds	r3, #4
 800d41e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d420:	2b00      	cmp	r3, #0
 800d422:	d004      	beq.n	800d42e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	b2db      	uxtb	r3, r3
 800d42a:	2b7f      	cmp	r3, #127	; 0x7f
 800d42c:	d101      	bne.n	800d432 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800d42e:	2300      	movs	r3, #0
 800d430:	e001      	b.n	800d436 <ip4_route+0xca>
  }

  return netif_default;
 800d432:	4b05      	ldr	r3, [pc, #20]	; (800d448 <ip4_route+0xdc>)
 800d434:	681b      	ldr	r3, [r3, #0]
}
 800d436:	4618      	mov	r0, r3
 800d438:	3714      	adds	r7, #20
 800d43a:	46bd      	mov	sp, r7
 800d43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d440:	4770      	bx	lr
 800d442:	bf00      	nop
 800d444:	2000a4a8 	.word	0x2000a4a8
 800d448:	2000a4ac 	.word	0x2000a4ac

0800d44c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b082      	sub	sp, #8
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d45a:	f003 0301 	and.w	r3, r3, #1
 800d45e:	b2db      	uxtb	r3, r3
 800d460:	2b00      	cmp	r3, #0
 800d462:	d016      	beq.n	800d492 <ip4_input_accept+0x46>
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	3304      	adds	r3, #4
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d011      	beq.n	800d492 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d46e:	4b0b      	ldr	r3, [pc, #44]	; (800d49c <ip4_input_accept+0x50>)
 800d470:	695a      	ldr	r2, [r3, #20]
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	3304      	adds	r3, #4
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	429a      	cmp	r2, r3
 800d47a:	d008      	beq.n	800d48e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d47c:	4b07      	ldr	r3, [pc, #28]	; (800d49c <ip4_input_accept+0x50>)
 800d47e:	695b      	ldr	r3, [r3, #20]
 800d480:	6879      	ldr	r1, [r7, #4]
 800d482:	4618      	mov	r0, r3
 800d484:	f000 fa08 	bl	800d898 <ip4_addr_isbroadcast_u32>
 800d488:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d001      	beq.n	800d492 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800d48e:	2301      	movs	r3, #1
 800d490:	e000      	b.n	800d494 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800d492:	2300      	movs	r3, #0
}
 800d494:	4618      	mov	r0, r3
 800d496:	3708      	adds	r7, #8
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}
 800d49c:	20004d84 	.word	0x20004d84

0800d4a0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b086      	sub	sp, #24
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
 800d4a8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	685b      	ldr	r3, [r3, #4]
 800d4ae:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800d4b0:	697b      	ldr	r3, [r7, #20]
 800d4b2:	781b      	ldrb	r3, [r3, #0]
 800d4b4:	091b      	lsrs	r3, r3, #4
 800d4b6:	b2db      	uxtb	r3, r3
 800d4b8:	2b04      	cmp	r3, #4
 800d4ba:	d004      	beq.n	800d4c6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	f7f8 fe27 	bl	8006110 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	e107      	b.n	800d6d6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800d4c6:	697b      	ldr	r3, [r7, #20]
 800d4c8:	781b      	ldrb	r3, [r3, #0]
 800d4ca:	f003 030f 	and.w	r3, r3, #15
 800d4ce:	b2db      	uxtb	r3, r3
 800d4d0:	009b      	lsls	r3, r3, #2
 800d4d2:	b2db      	uxtb	r3, r3
 800d4d4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800d4d6:	697b      	ldr	r3, [r7, #20]
 800d4d8:	885b      	ldrh	r3, [r3, #2]
 800d4da:	b29b      	uxth	r3, r3
 800d4dc:	4618      	mov	r0, r3
 800d4de:	f7f7 fab9 	bl	8004a54 <lwip_htons>
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	891b      	ldrh	r3, [r3, #8]
 800d4ea:	89ba      	ldrh	r2, [r7, #12]
 800d4ec:	429a      	cmp	r2, r3
 800d4ee:	d204      	bcs.n	800d4fa <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800d4f0:	89bb      	ldrh	r3, [r7, #12]
 800d4f2:	4619      	mov	r1, r3
 800d4f4:	6878      	ldr	r0, [r7, #4]
 800d4f6:	f7f8 fc85 	bl	8005e04 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	895b      	ldrh	r3, [r3, #10]
 800d4fe:	89fa      	ldrh	r2, [r7, #14]
 800d500:	429a      	cmp	r2, r3
 800d502:	d807      	bhi.n	800d514 <ip4_input+0x74>
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	891b      	ldrh	r3, [r3, #8]
 800d508:	89ba      	ldrh	r2, [r7, #12]
 800d50a:	429a      	cmp	r2, r3
 800d50c:	d802      	bhi.n	800d514 <ip4_input+0x74>
 800d50e:	89fb      	ldrh	r3, [r7, #14]
 800d510:	2b13      	cmp	r3, #19
 800d512:	d804      	bhi.n	800d51e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800d514:	6878      	ldr	r0, [r7, #4]
 800d516:	f7f8 fdfb 	bl	8006110 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800d51a:	2300      	movs	r3, #0
 800d51c:	e0db      	b.n	800d6d6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800d51e:	697b      	ldr	r3, [r7, #20]
 800d520:	691b      	ldr	r3, [r3, #16]
 800d522:	4a6f      	ldr	r2, [pc, #444]	; (800d6e0 <ip4_input+0x240>)
 800d524:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800d526:	697b      	ldr	r3, [r7, #20]
 800d528:	68db      	ldr	r3, [r3, #12]
 800d52a:	4a6d      	ldr	r2, [pc, #436]	; (800d6e0 <ip4_input+0x240>)
 800d52c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d52e:	4b6c      	ldr	r3, [pc, #432]	; (800d6e0 <ip4_input+0x240>)
 800d530:	695b      	ldr	r3, [r3, #20]
 800d532:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d536:	2be0      	cmp	r3, #224	; 0xe0
 800d538:	d112      	bne.n	800d560 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800d53a:	683b      	ldr	r3, [r7, #0]
 800d53c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d540:	f003 0301 	and.w	r3, r3, #1
 800d544:	b2db      	uxtb	r3, r3
 800d546:	2b00      	cmp	r3, #0
 800d548:	d007      	beq.n	800d55a <ip4_input+0xba>
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	3304      	adds	r3, #4
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d002      	beq.n	800d55a <ip4_input+0xba>
      netif = inp;
 800d554:	683b      	ldr	r3, [r7, #0]
 800d556:	613b      	str	r3, [r7, #16]
 800d558:	e02a      	b.n	800d5b0 <ip4_input+0x110>
    } else {
      netif = NULL;
 800d55a:	2300      	movs	r3, #0
 800d55c:	613b      	str	r3, [r7, #16]
 800d55e:	e027      	b.n	800d5b0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800d560:	6838      	ldr	r0, [r7, #0]
 800d562:	f7ff ff73 	bl	800d44c <ip4_input_accept>
 800d566:	4603      	mov	r3, r0
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d002      	beq.n	800d572 <ip4_input+0xd2>
      netif = inp;
 800d56c:	683b      	ldr	r3, [r7, #0]
 800d56e:	613b      	str	r3, [r7, #16]
 800d570:	e01e      	b.n	800d5b0 <ip4_input+0x110>
    } else {
      netif = NULL;
 800d572:	2300      	movs	r3, #0
 800d574:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800d576:	4b5a      	ldr	r3, [pc, #360]	; (800d6e0 <ip4_input+0x240>)
 800d578:	695b      	ldr	r3, [r3, #20]
 800d57a:	b2db      	uxtb	r3, r3
 800d57c:	2b7f      	cmp	r3, #127	; 0x7f
 800d57e:	d017      	beq.n	800d5b0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800d580:	4b58      	ldr	r3, [pc, #352]	; (800d6e4 <ip4_input+0x244>)
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	613b      	str	r3, [r7, #16]
 800d586:	e00e      	b.n	800d5a6 <ip4_input+0x106>
          if (netif == inp) {
 800d588:	693a      	ldr	r2, [r7, #16]
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	429a      	cmp	r2, r3
 800d58e:	d006      	beq.n	800d59e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800d590:	6938      	ldr	r0, [r7, #16]
 800d592:	f7ff ff5b 	bl	800d44c <ip4_input_accept>
 800d596:	4603      	mov	r3, r0
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d108      	bne.n	800d5ae <ip4_input+0x10e>
 800d59c:	e000      	b.n	800d5a0 <ip4_input+0x100>
            continue;
 800d59e:	bf00      	nop
        NETIF_FOREACH(netif) {
 800d5a0:	693b      	ldr	r3, [r7, #16]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	613b      	str	r3, [r7, #16]
 800d5a6:	693b      	ldr	r3, [r7, #16]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d1ed      	bne.n	800d588 <ip4_input+0xe8>
 800d5ac:	e000      	b.n	800d5b0 <ip4_input+0x110>
            break;
 800d5ae:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d5b0:	4b4b      	ldr	r3, [pc, #300]	; (800d6e0 <ip4_input+0x240>)
 800d5b2:	691b      	ldr	r3, [r3, #16]
 800d5b4:	6839      	ldr	r1, [r7, #0]
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	f000 f96e 	bl	800d898 <ip4_addr_isbroadcast_u32>
 800d5bc:	4603      	mov	r3, r0
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d105      	bne.n	800d5ce <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800d5c2:	4b47      	ldr	r3, [pc, #284]	; (800d6e0 <ip4_input+0x240>)
 800d5c4:	691b      	ldr	r3, [r3, #16]
 800d5c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d5ca:	2be0      	cmp	r3, #224	; 0xe0
 800d5cc:	d104      	bne.n	800d5d8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800d5ce:	6878      	ldr	r0, [r7, #4]
 800d5d0:	f7f8 fd9e 	bl	8006110 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	e07e      	b.n	800d6d6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800d5d8:	693b      	ldr	r3, [r7, #16]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d104      	bne.n	800d5e8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800d5de:	6878      	ldr	r0, [r7, #4]
 800d5e0:	f7f8 fd96 	bl	8006110 <pbuf_free>
    return ERR_OK;
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	e076      	b.n	800d6d6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800d5e8:	697b      	ldr	r3, [r7, #20]
 800d5ea:	88db      	ldrh	r3, [r3, #6]
 800d5ec:	b29b      	uxth	r3, r3
 800d5ee:	461a      	mov	r2, r3
 800d5f0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800d5f4:	4013      	ands	r3, r2
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d00b      	beq.n	800d612 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800d5fa:	6878      	ldr	r0, [r7, #4]
 800d5fc:	f000 fc92 	bl	800df24 <ip4_reass>
 800d600:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d101      	bne.n	800d60c <ip4_input+0x16c>
      return ERR_OK;
 800d608:	2300      	movs	r3, #0
 800d60a:	e064      	b.n	800d6d6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	685b      	ldr	r3, [r3, #4]
 800d610:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800d612:	4a33      	ldr	r2, [pc, #204]	; (800d6e0 <ip4_input+0x240>)
 800d614:	693b      	ldr	r3, [r7, #16]
 800d616:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800d618:	4a31      	ldr	r2, [pc, #196]	; (800d6e0 <ip4_input+0x240>)
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800d61e:	4a30      	ldr	r2, [pc, #192]	; (800d6e0 <ip4_input+0x240>)
 800d620:	697b      	ldr	r3, [r7, #20]
 800d622:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800d624:	697b      	ldr	r3, [r7, #20]
 800d626:	781b      	ldrb	r3, [r3, #0]
 800d628:	f003 030f 	and.w	r3, r3, #15
 800d62c:	b2db      	uxtb	r3, r3
 800d62e:	009b      	lsls	r3, r3, #2
 800d630:	b2db      	uxtb	r3, r3
 800d632:	b29a      	uxth	r2, r3
 800d634:	4b2a      	ldr	r3, [pc, #168]	; (800d6e0 <ip4_input+0x240>)
 800d636:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800d638:	89fb      	ldrh	r3, [r7, #14]
 800d63a:	4619      	mov	r1, r3
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	f7f8 fce1 	bl	8006004 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800d642:	697b      	ldr	r3, [r7, #20]
 800d644:	7a5b      	ldrb	r3, [r3, #9]
 800d646:	2b11      	cmp	r3, #17
 800d648:	d006      	beq.n	800d658 <ip4_input+0x1b8>
 800d64a:	2b11      	cmp	r3, #17
 800d64c:	dc13      	bgt.n	800d676 <ip4_input+0x1d6>
 800d64e:	2b01      	cmp	r3, #1
 800d650:	d00c      	beq.n	800d66c <ip4_input+0x1cc>
 800d652:	2b06      	cmp	r3, #6
 800d654:	d005      	beq.n	800d662 <ip4_input+0x1c2>
 800d656:	e00e      	b.n	800d676 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800d658:	6839      	ldr	r1, [r7, #0]
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	f7fe fb3a 	bl	800bcd4 <udp_input>
        break;
 800d660:	e026      	b.n	800d6b0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800d662:	6839      	ldr	r1, [r7, #0]
 800d664:	6878      	ldr	r0, [r7, #4]
 800d666:	f7fa fb7b 	bl	8007d60 <tcp_input>
        break;
 800d66a:	e021      	b.n	800d6b0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800d66c:	6839      	ldr	r1, [r7, #0]
 800d66e:	6878      	ldr	r0, [r7, #4]
 800d670:	f7ff fcee 	bl	800d050 <icmp_input>
        break;
 800d674:	e01c      	b.n	800d6b0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d676:	4b1a      	ldr	r3, [pc, #104]	; (800d6e0 <ip4_input+0x240>)
 800d678:	695b      	ldr	r3, [r3, #20]
 800d67a:	6939      	ldr	r1, [r7, #16]
 800d67c:	4618      	mov	r0, r3
 800d67e:	f000 f90b 	bl	800d898 <ip4_addr_isbroadcast_u32>
 800d682:	4603      	mov	r3, r0
 800d684:	2b00      	cmp	r3, #0
 800d686:	d10f      	bne.n	800d6a8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d688:	4b15      	ldr	r3, [pc, #84]	; (800d6e0 <ip4_input+0x240>)
 800d68a:	695b      	ldr	r3, [r3, #20]
 800d68c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d690:	2be0      	cmp	r3, #224	; 0xe0
 800d692:	d009      	beq.n	800d6a8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800d694:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d698:	4619      	mov	r1, r3
 800d69a:	6878      	ldr	r0, [r7, #4]
 800d69c:	f7f8 fd25 	bl	80060ea <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800d6a0:	2102      	movs	r1, #2
 800d6a2:	6878      	ldr	r0, [r7, #4]
 800d6a4:	f7ff fdd8 	bl	800d258 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800d6a8:	6878      	ldr	r0, [r7, #4]
 800d6aa:	f7f8 fd31 	bl	8006110 <pbuf_free>
        break;
 800d6ae:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800d6b0:	4b0b      	ldr	r3, [pc, #44]	; (800d6e0 <ip4_input+0x240>)
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800d6b6:	4b0a      	ldr	r3, [pc, #40]	; (800d6e0 <ip4_input+0x240>)
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800d6bc:	4b08      	ldr	r3, [pc, #32]	; (800d6e0 <ip4_input+0x240>)
 800d6be:	2200      	movs	r2, #0
 800d6c0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800d6c2:	4b07      	ldr	r3, [pc, #28]	; (800d6e0 <ip4_input+0x240>)
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800d6c8:	4b05      	ldr	r3, [pc, #20]	; (800d6e0 <ip4_input+0x240>)
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800d6ce:	4b04      	ldr	r3, [pc, #16]	; (800d6e0 <ip4_input+0x240>)
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800d6d4:	2300      	movs	r3, #0
}
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	3718      	adds	r7, #24
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	bd80      	pop	{r7, pc}
 800d6de:	bf00      	nop
 800d6e0:	20004d84 	.word	0x20004d84
 800d6e4:	2000a4a8 	.word	0x2000a4a8

0800d6e8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b08a      	sub	sp, #40	; 0x28
 800d6ec:	af04      	add	r7, sp, #16
 800d6ee:	60f8      	str	r0, [r7, #12]
 800d6f0:	60b9      	str	r1, [r7, #8]
 800d6f2:	607a      	str	r2, [r7, #4]
 800d6f4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800d6f6:	68bb      	ldr	r3, [r7, #8]
 800d6f8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d009      	beq.n	800d714 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800d700:	68bb      	ldr	r3, [r7, #8]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d003      	beq.n	800d70e <ip4_output_if+0x26>
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d102      	bne.n	800d714 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800d70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d710:	3304      	adds	r3, #4
 800d712:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800d714:	78fa      	ldrb	r2, [r7, #3]
 800d716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d718:	9302      	str	r3, [sp, #8]
 800d71a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d71e:	9301      	str	r3, [sp, #4]
 800d720:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d724:	9300      	str	r3, [sp, #0]
 800d726:	4613      	mov	r3, r2
 800d728:	687a      	ldr	r2, [r7, #4]
 800d72a:	6979      	ldr	r1, [r7, #20]
 800d72c:	68f8      	ldr	r0, [r7, #12]
 800d72e:	f000 f805 	bl	800d73c <ip4_output_if_src>
 800d732:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800d734:	4618      	mov	r0, r3
 800d736:	3718      	adds	r7, #24
 800d738:	46bd      	mov	sp, r7
 800d73a:	bd80      	pop	{r7, pc}

0800d73c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b088      	sub	sp, #32
 800d740:	af00      	add	r7, sp, #0
 800d742:	60f8      	str	r0, [r7, #12]
 800d744:	60b9      	str	r1, [r7, #8]
 800d746:	607a      	str	r2, [r7, #4]
 800d748:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	7b9b      	ldrb	r3, [r3, #14]
 800d74e:	2b01      	cmp	r3, #1
 800d750:	d006      	beq.n	800d760 <ip4_output_if_src+0x24>
 800d752:	4b4b      	ldr	r3, [pc, #300]	; (800d880 <ip4_output_if_src+0x144>)
 800d754:	f44f 7255 	mov.w	r2, #852	; 0x354
 800d758:	494a      	ldr	r1, [pc, #296]	; (800d884 <ip4_output_if_src+0x148>)
 800d75a:	484b      	ldr	r0, [pc, #300]	; (800d888 <ip4_output_if_src+0x14c>)
 800d75c:	f001 f8f2 	bl	800e944 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d060      	beq.n	800d828 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800d766:	2314      	movs	r3, #20
 800d768:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800d76a:	2114      	movs	r1, #20
 800d76c:	68f8      	ldr	r0, [r7, #12]
 800d76e:	f7f8 fc39 	bl	8005fe4 <pbuf_add_header>
 800d772:	4603      	mov	r3, r0
 800d774:	2b00      	cmp	r3, #0
 800d776:	d002      	beq.n	800d77e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d778:	f06f 0301 	mvn.w	r3, #1
 800d77c:	e07c      	b.n	800d878 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	685b      	ldr	r3, [r3, #4]
 800d782:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	895b      	ldrh	r3, [r3, #10]
 800d788:	2b13      	cmp	r3, #19
 800d78a:	d806      	bhi.n	800d79a <ip4_output_if_src+0x5e>
 800d78c:	4b3c      	ldr	r3, [pc, #240]	; (800d880 <ip4_output_if_src+0x144>)
 800d78e:	f44f 7262 	mov.w	r2, #904	; 0x388
 800d792:	493e      	ldr	r1, [pc, #248]	; (800d88c <ip4_output_if_src+0x150>)
 800d794:	483c      	ldr	r0, [pc, #240]	; (800d888 <ip4_output_if_src+0x14c>)
 800d796:	f001 f8d5 	bl	800e944 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800d79a:	69fb      	ldr	r3, [r7, #28]
 800d79c:	78fa      	ldrb	r2, [r7, #3]
 800d79e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800d7a0:	69fb      	ldr	r3, [r7, #28]
 800d7a2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d7a6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681a      	ldr	r2, [r3, #0]
 800d7ac:	69fb      	ldr	r3, [r7, #28]
 800d7ae:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800d7b0:	8b7b      	ldrh	r3, [r7, #26]
 800d7b2:	089b      	lsrs	r3, r3, #2
 800d7b4:	b29b      	uxth	r3, r3
 800d7b6:	b2db      	uxtb	r3, r3
 800d7b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7bc:	b2da      	uxtb	r2, r3
 800d7be:	69fb      	ldr	r3, [r7, #28]
 800d7c0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800d7c2:	69fb      	ldr	r3, [r7, #28]
 800d7c4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d7c8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	891b      	ldrh	r3, [r3, #8]
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	f7f7 f940 	bl	8004a54 <lwip_htons>
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	461a      	mov	r2, r3
 800d7d8:	69fb      	ldr	r3, [r7, #28]
 800d7da:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800d7dc:	69fb      	ldr	r3, [r7, #28]
 800d7de:	2200      	movs	r2, #0
 800d7e0:	719a      	strb	r2, [r3, #6]
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d7e6:	4b2a      	ldr	r3, [pc, #168]	; (800d890 <ip4_output_if_src+0x154>)
 800d7e8:	881b      	ldrh	r3, [r3, #0]
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	f7f7 f932 	bl	8004a54 <lwip_htons>
 800d7f0:	4603      	mov	r3, r0
 800d7f2:	461a      	mov	r2, r3
 800d7f4:	69fb      	ldr	r3, [r7, #28]
 800d7f6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800d7f8:	4b25      	ldr	r3, [pc, #148]	; (800d890 <ip4_output_if_src+0x154>)
 800d7fa:	881b      	ldrh	r3, [r3, #0]
 800d7fc:	3301      	adds	r3, #1
 800d7fe:	b29a      	uxth	r2, r3
 800d800:	4b23      	ldr	r3, [pc, #140]	; (800d890 <ip4_output_if_src+0x154>)
 800d802:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800d804:	68bb      	ldr	r3, [r7, #8]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d104      	bne.n	800d814 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800d80a:	4b22      	ldr	r3, [pc, #136]	; (800d894 <ip4_output_if_src+0x158>)
 800d80c:	681a      	ldr	r2, [r3, #0]
 800d80e:	69fb      	ldr	r3, [r7, #28]
 800d810:	60da      	str	r2, [r3, #12]
 800d812:	e003      	b.n	800d81c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800d814:	68bb      	ldr	r3, [r7, #8]
 800d816:	681a      	ldr	r2, [r3, #0]
 800d818:	69fb      	ldr	r3, [r7, #28]
 800d81a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800d81c:	69fb      	ldr	r3, [r7, #28]
 800d81e:	2200      	movs	r2, #0
 800d820:	729a      	strb	r2, [r3, #10]
 800d822:	2200      	movs	r2, #0
 800d824:	72da      	strb	r2, [r3, #11]
 800d826:	e00f      	b.n	800d848 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	895b      	ldrh	r3, [r3, #10]
 800d82c:	2b13      	cmp	r3, #19
 800d82e:	d802      	bhi.n	800d836 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d830:	f06f 0301 	mvn.w	r3, #1
 800d834:	e020      	b.n	800d878 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	685b      	ldr	r3, [r3, #4]
 800d83a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800d83c:	69fb      	ldr	r3, [r7, #28]
 800d83e:	691b      	ldr	r3, [r3, #16]
 800d840:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800d842:	f107 0314 	add.w	r3, r7, #20
 800d846:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800d848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d84a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d00c      	beq.n	800d86a <ip4_output_if_src+0x12e>
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	891a      	ldrh	r2, [r3, #8]
 800d854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d856:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d858:	429a      	cmp	r2, r3
 800d85a:	d906      	bls.n	800d86a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800d85c:	687a      	ldr	r2, [r7, #4]
 800d85e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d860:	68f8      	ldr	r0, [r7, #12]
 800d862:	f000 fd53 	bl	800e30c <ip4_frag>
 800d866:	4603      	mov	r3, r0
 800d868:	e006      	b.n	800d878 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800d86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d86c:	695b      	ldr	r3, [r3, #20]
 800d86e:	687a      	ldr	r2, [r7, #4]
 800d870:	68f9      	ldr	r1, [r7, #12]
 800d872:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d874:	4798      	blx	r3
 800d876:	4603      	mov	r3, r0
}
 800d878:	4618      	mov	r0, r3
 800d87a:	3720      	adds	r7, #32
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd80      	pop	{r7, pc}
 800d880:	08011e30 	.word	0x08011e30
 800d884:	08011e64 	.word	0x08011e64
 800d888:	08011e70 	.word	0x08011e70
 800d88c:	08011e98 	.word	0x08011e98
 800d890:	2000a606 	.word	0x2000a606
 800d894:	08012270 	.word	0x08012270

0800d898 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800d898:	b480      	push	{r7}
 800d89a:	b085      	sub	sp, #20
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
 800d8a0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d8ac:	d002      	beq.n	800d8b4 <ip4_addr_isbroadcast_u32+0x1c>
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d101      	bne.n	800d8b8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800d8b4:	2301      	movs	r3, #1
 800d8b6:	e02a      	b.n	800d90e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d8be:	f003 0302 	and.w	r3, r3, #2
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d101      	bne.n	800d8ca <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	e021      	b.n	800d90e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	3304      	adds	r3, #4
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	687a      	ldr	r2, [r7, #4]
 800d8d2:	429a      	cmp	r2, r3
 800d8d4:	d101      	bne.n	800d8da <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	e019      	b.n	800d90e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800d8da:	68fa      	ldr	r2, [r7, #12]
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	3304      	adds	r3, #4
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	405a      	eors	r2, r3
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	3308      	adds	r3, #8
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	4013      	ands	r3, r2
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d10d      	bne.n	800d90c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d8f0:	683b      	ldr	r3, [r7, #0]
 800d8f2:	3308      	adds	r3, #8
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	43da      	mvns	r2, r3
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800d8fc:	683b      	ldr	r3, [r7, #0]
 800d8fe:	3308      	adds	r3, #8
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d904:	429a      	cmp	r2, r3
 800d906:	d101      	bne.n	800d90c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800d908:	2301      	movs	r3, #1
 800d90a:	e000      	b.n	800d90e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800d90c:	2300      	movs	r3, #0
  }
}
 800d90e:	4618      	mov	r0, r3
 800d910:	3714      	adds	r7, #20
 800d912:	46bd      	mov	sp, r7
 800d914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d918:	4770      	bx	lr
	...

0800d91c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b084      	sub	sp, #16
 800d920:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800d922:	2300      	movs	r3, #0
 800d924:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800d926:	4b12      	ldr	r3, [pc, #72]	; (800d970 <ip_reass_tmr+0x54>)
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800d92c:	e018      	b.n	800d960 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	7fdb      	ldrb	r3, [r3, #31]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d00b      	beq.n	800d94e <ip_reass_tmr+0x32>
      r->timer--;
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	7fdb      	ldrb	r3, [r3, #31]
 800d93a:	3b01      	subs	r3, #1
 800d93c:	b2da      	uxtb	r2, r3
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	60fb      	str	r3, [r7, #12]
 800d94c:	e008      	b.n	800d960 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800d958:	68b9      	ldr	r1, [r7, #8]
 800d95a:	6878      	ldr	r0, [r7, #4]
 800d95c:	f000 f80a 	bl	800d974 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d1e3      	bne.n	800d92e <ip_reass_tmr+0x12>
    }
  }
}
 800d966:	bf00      	nop
 800d968:	bf00      	nop
 800d96a:	3710      	adds	r7, #16
 800d96c:	46bd      	mov	sp, r7
 800d96e:	bd80      	pop	{r7, pc}
 800d970:	2000a608 	.word	0x2000a608

0800d974 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d974:	b580      	push	{r7, lr}
 800d976:	b088      	sub	sp, #32
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
 800d97c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800d97e:	2300      	movs	r3, #0
 800d980:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800d982:	683a      	ldr	r2, [r7, #0]
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	429a      	cmp	r2, r3
 800d988:	d105      	bne.n	800d996 <ip_reass_free_complete_datagram+0x22>
 800d98a:	4b45      	ldr	r3, [pc, #276]	; (800daa0 <ip_reass_free_complete_datagram+0x12c>)
 800d98c:	22ab      	movs	r2, #171	; 0xab
 800d98e:	4945      	ldr	r1, [pc, #276]	; (800daa4 <ip_reass_free_complete_datagram+0x130>)
 800d990:	4845      	ldr	r0, [pc, #276]	; (800daa8 <ip_reass_free_complete_datagram+0x134>)
 800d992:	f000 ffd7 	bl	800e944 <iprintf>
  if (prev != NULL) {
 800d996:	683b      	ldr	r3, [r7, #0]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d00a      	beq.n	800d9b2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	687a      	ldr	r2, [r7, #4]
 800d9a2:	429a      	cmp	r2, r3
 800d9a4:	d005      	beq.n	800d9b2 <ip_reass_free_complete_datagram+0x3e>
 800d9a6:	4b3e      	ldr	r3, [pc, #248]	; (800daa0 <ip_reass_free_complete_datagram+0x12c>)
 800d9a8:	22ad      	movs	r2, #173	; 0xad
 800d9aa:	4940      	ldr	r1, [pc, #256]	; (800daac <ip_reass_free_complete_datagram+0x138>)
 800d9ac:	483e      	ldr	r0, [pc, #248]	; (800daa8 <ip_reass_free_complete_datagram+0x134>)
 800d9ae:	f000 ffc9 	bl	800e944 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	685b      	ldr	r3, [r3, #4]
 800d9b6:	685b      	ldr	r3, [r3, #4]
 800d9b8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800d9ba:	697b      	ldr	r3, [r7, #20]
 800d9bc:	889b      	ldrh	r3, [r3, #4]
 800d9be:	b29b      	uxth	r3, r3
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d12a      	bne.n	800da1a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	685b      	ldr	r3, [r3, #4]
 800d9c8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800d9ca:	697b      	ldr	r3, [r7, #20]
 800d9cc:	681a      	ldr	r2, [r3, #0]
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800d9d2:	69bb      	ldr	r3, [r7, #24]
 800d9d4:	6858      	ldr	r0, [r3, #4]
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	3308      	adds	r3, #8
 800d9da:	2214      	movs	r2, #20
 800d9dc:	4619      	mov	r1, r3
 800d9de:	f001 f89e 	bl	800eb1e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800d9e2:	2101      	movs	r1, #1
 800d9e4:	69b8      	ldr	r0, [r7, #24]
 800d9e6:	f7ff fc47 	bl	800d278 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800d9ea:	69b8      	ldr	r0, [r7, #24]
 800d9ec:	f7f8 fc18 	bl	8006220 <pbuf_clen>
 800d9f0:	4603      	mov	r3, r0
 800d9f2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d9f4:	8bfa      	ldrh	r2, [r7, #30]
 800d9f6:	8a7b      	ldrh	r3, [r7, #18]
 800d9f8:	4413      	add	r3, r2
 800d9fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d9fe:	db05      	blt.n	800da0c <ip_reass_free_complete_datagram+0x98>
 800da00:	4b27      	ldr	r3, [pc, #156]	; (800daa0 <ip_reass_free_complete_datagram+0x12c>)
 800da02:	22bc      	movs	r2, #188	; 0xbc
 800da04:	492a      	ldr	r1, [pc, #168]	; (800dab0 <ip_reass_free_complete_datagram+0x13c>)
 800da06:	4828      	ldr	r0, [pc, #160]	; (800daa8 <ip_reass_free_complete_datagram+0x134>)
 800da08:	f000 ff9c 	bl	800e944 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800da0c:	8bfa      	ldrh	r2, [r7, #30]
 800da0e:	8a7b      	ldrh	r3, [r7, #18]
 800da10:	4413      	add	r3, r2
 800da12:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800da14:	69b8      	ldr	r0, [r7, #24]
 800da16:	f7f8 fb7b 	bl	8006110 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	685b      	ldr	r3, [r3, #4]
 800da1e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800da20:	e01f      	b.n	800da62 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800da22:	69bb      	ldr	r3, [r7, #24]
 800da24:	685b      	ldr	r3, [r3, #4]
 800da26:	617b      	str	r3, [r7, #20]
    pcur = p;
 800da28:	69bb      	ldr	r3, [r7, #24]
 800da2a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800da2c:	697b      	ldr	r3, [r7, #20]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800da32:	68f8      	ldr	r0, [r7, #12]
 800da34:	f7f8 fbf4 	bl	8006220 <pbuf_clen>
 800da38:	4603      	mov	r3, r0
 800da3a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800da3c:	8bfa      	ldrh	r2, [r7, #30]
 800da3e:	8a7b      	ldrh	r3, [r7, #18]
 800da40:	4413      	add	r3, r2
 800da42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da46:	db05      	blt.n	800da54 <ip_reass_free_complete_datagram+0xe0>
 800da48:	4b15      	ldr	r3, [pc, #84]	; (800daa0 <ip_reass_free_complete_datagram+0x12c>)
 800da4a:	22cc      	movs	r2, #204	; 0xcc
 800da4c:	4918      	ldr	r1, [pc, #96]	; (800dab0 <ip_reass_free_complete_datagram+0x13c>)
 800da4e:	4816      	ldr	r0, [pc, #88]	; (800daa8 <ip_reass_free_complete_datagram+0x134>)
 800da50:	f000 ff78 	bl	800e944 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800da54:	8bfa      	ldrh	r2, [r7, #30]
 800da56:	8a7b      	ldrh	r3, [r7, #18]
 800da58:	4413      	add	r3, r2
 800da5a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800da5c:	68f8      	ldr	r0, [r7, #12]
 800da5e:	f7f8 fb57 	bl	8006110 <pbuf_free>
  while (p != NULL) {
 800da62:	69bb      	ldr	r3, [r7, #24]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d1dc      	bne.n	800da22 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800da68:	6839      	ldr	r1, [r7, #0]
 800da6a:	6878      	ldr	r0, [r7, #4]
 800da6c:	f000 f8c2 	bl	800dbf4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800da70:	4b10      	ldr	r3, [pc, #64]	; (800dab4 <ip_reass_free_complete_datagram+0x140>)
 800da72:	881b      	ldrh	r3, [r3, #0]
 800da74:	8bfa      	ldrh	r2, [r7, #30]
 800da76:	429a      	cmp	r2, r3
 800da78:	d905      	bls.n	800da86 <ip_reass_free_complete_datagram+0x112>
 800da7a:	4b09      	ldr	r3, [pc, #36]	; (800daa0 <ip_reass_free_complete_datagram+0x12c>)
 800da7c:	22d2      	movs	r2, #210	; 0xd2
 800da7e:	490e      	ldr	r1, [pc, #56]	; (800dab8 <ip_reass_free_complete_datagram+0x144>)
 800da80:	4809      	ldr	r0, [pc, #36]	; (800daa8 <ip_reass_free_complete_datagram+0x134>)
 800da82:	f000 ff5f 	bl	800e944 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800da86:	4b0b      	ldr	r3, [pc, #44]	; (800dab4 <ip_reass_free_complete_datagram+0x140>)
 800da88:	881a      	ldrh	r2, [r3, #0]
 800da8a:	8bfb      	ldrh	r3, [r7, #30]
 800da8c:	1ad3      	subs	r3, r2, r3
 800da8e:	b29a      	uxth	r2, r3
 800da90:	4b08      	ldr	r3, [pc, #32]	; (800dab4 <ip_reass_free_complete_datagram+0x140>)
 800da92:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800da94:	8bfb      	ldrh	r3, [r7, #30]
}
 800da96:	4618      	mov	r0, r3
 800da98:	3720      	adds	r7, #32
 800da9a:	46bd      	mov	sp, r7
 800da9c:	bd80      	pop	{r7, pc}
 800da9e:	bf00      	nop
 800daa0:	08011ec8 	.word	0x08011ec8
 800daa4:	08011f04 	.word	0x08011f04
 800daa8:	08011f10 	.word	0x08011f10
 800daac:	08011f38 	.word	0x08011f38
 800dab0:	08011f4c 	.word	0x08011f4c
 800dab4:	2000a60c 	.word	0x2000a60c
 800dab8:	08011f6c 	.word	0x08011f6c

0800dabc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b08a      	sub	sp, #40	; 0x28
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
 800dac4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800dac6:	2300      	movs	r3, #0
 800dac8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800daca:	2300      	movs	r3, #0
 800dacc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800dace:	2300      	movs	r3, #0
 800dad0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800dad2:	2300      	movs	r3, #0
 800dad4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800dad6:	2300      	movs	r3, #0
 800dad8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800dada:	4b28      	ldr	r3, [pc, #160]	; (800db7c <ip_reass_remove_oldest_datagram+0xc0>)
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800dae0:	e030      	b.n	800db44 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800dae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dae4:	695a      	ldr	r2, [r3, #20]
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	68db      	ldr	r3, [r3, #12]
 800daea:	429a      	cmp	r2, r3
 800daec:	d10c      	bne.n	800db08 <ip_reass_remove_oldest_datagram+0x4c>
 800daee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daf0:	699a      	ldr	r2, [r3, #24]
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	691b      	ldr	r3, [r3, #16]
 800daf6:	429a      	cmp	r2, r3
 800daf8:	d106      	bne.n	800db08 <ip_reass_remove_oldest_datagram+0x4c>
 800dafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dafc:	899a      	ldrh	r2, [r3, #12]
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	889b      	ldrh	r3, [r3, #4]
 800db02:	b29b      	uxth	r3, r3
 800db04:	429a      	cmp	r2, r3
 800db06:	d014      	beq.n	800db32 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800db08:	693b      	ldr	r3, [r7, #16]
 800db0a:	3301      	adds	r3, #1
 800db0c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800db0e:	6a3b      	ldr	r3, [r7, #32]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d104      	bne.n	800db1e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800db14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db16:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800db18:	69fb      	ldr	r3, [r7, #28]
 800db1a:	61bb      	str	r3, [r7, #24]
 800db1c:	e009      	b.n	800db32 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800db1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db20:	7fda      	ldrb	r2, [r3, #31]
 800db22:	6a3b      	ldr	r3, [r7, #32]
 800db24:	7fdb      	ldrb	r3, [r3, #31]
 800db26:	429a      	cmp	r2, r3
 800db28:	d803      	bhi.n	800db32 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800db2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db2c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800db2e:	69fb      	ldr	r3, [r7, #28]
 800db30:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800db32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d001      	beq.n	800db3e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800db3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db3c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800db3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800db44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db46:	2b00      	cmp	r3, #0
 800db48:	d1cb      	bne.n	800dae2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800db4a:	6a3b      	ldr	r3, [r7, #32]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d008      	beq.n	800db62 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800db50:	69b9      	ldr	r1, [r7, #24]
 800db52:	6a38      	ldr	r0, [r7, #32]
 800db54:	f7ff ff0e 	bl	800d974 <ip_reass_free_complete_datagram>
 800db58:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800db5a:	697a      	ldr	r2, [r7, #20]
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	4413      	add	r3, r2
 800db60:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800db62:	697a      	ldr	r2, [r7, #20]
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	429a      	cmp	r2, r3
 800db68:	da02      	bge.n	800db70 <ip_reass_remove_oldest_datagram+0xb4>
 800db6a:	693b      	ldr	r3, [r7, #16]
 800db6c:	2b01      	cmp	r3, #1
 800db6e:	dcac      	bgt.n	800daca <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800db70:	697b      	ldr	r3, [r7, #20]
}
 800db72:	4618      	mov	r0, r3
 800db74:	3728      	adds	r7, #40	; 0x28
 800db76:	46bd      	mov	sp, r7
 800db78:	bd80      	pop	{r7, pc}
 800db7a:	bf00      	nop
 800db7c:	2000a608 	.word	0x2000a608

0800db80 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b084      	sub	sp, #16
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
 800db88:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800db8a:	2004      	movs	r0, #4
 800db8c:	f7f7 fbda 	bl	8005344 <memp_malloc>
 800db90:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d110      	bne.n	800dbba <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800db98:	6839      	ldr	r1, [r7, #0]
 800db9a:	6878      	ldr	r0, [r7, #4]
 800db9c:	f7ff ff8e 	bl	800dabc <ip_reass_remove_oldest_datagram>
 800dba0:	4602      	mov	r2, r0
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	4293      	cmp	r3, r2
 800dba6:	dc03      	bgt.n	800dbb0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800dba8:	2004      	movs	r0, #4
 800dbaa:	f7f7 fbcb 	bl	8005344 <memp_malloc>
 800dbae:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d101      	bne.n	800dbba <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	e016      	b.n	800dbe8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800dbba:	2220      	movs	r2, #32
 800dbbc:	2100      	movs	r1, #0
 800dbbe:	68f8      	ldr	r0, [r7, #12]
 800dbc0:	f000 ff25 	bl	800ea0e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	220f      	movs	r2, #15
 800dbc8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800dbca:	4b09      	ldr	r3, [pc, #36]	; (800dbf0 <ip_reass_enqueue_new_datagram+0x70>)
 800dbcc:	681a      	ldr	r2, [r3, #0]
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800dbd2:	4a07      	ldr	r2, [pc, #28]	; (800dbf0 <ip_reass_enqueue_new_datagram+0x70>)
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	3308      	adds	r3, #8
 800dbdc:	2214      	movs	r2, #20
 800dbde:	6879      	ldr	r1, [r7, #4]
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	f000 ff9c 	bl	800eb1e <memcpy>
  return ipr;
 800dbe6:	68fb      	ldr	r3, [r7, #12]
}
 800dbe8:	4618      	mov	r0, r3
 800dbea:	3710      	adds	r7, #16
 800dbec:	46bd      	mov	sp, r7
 800dbee:	bd80      	pop	{r7, pc}
 800dbf0:	2000a608 	.word	0x2000a608

0800dbf4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b082      	sub	sp, #8
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
 800dbfc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800dbfe:	4b10      	ldr	r3, [pc, #64]	; (800dc40 <ip_reass_dequeue_datagram+0x4c>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	687a      	ldr	r2, [r7, #4]
 800dc04:	429a      	cmp	r2, r3
 800dc06:	d104      	bne.n	800dc12 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	4a0c      	ldr	r2, [pc, #48]	; (800dc40 <ip_reass_dequeue_datagram+0x4c>)
 800dc0e:	6013      	str	r3, [r2, #0]
 800dc10:	e00d      	b.n	800dc2e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800dc12:	683b      	ldr	r3, [r7, #0]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d106      	bne.n	800dc26 <ip_reass_dequeue_datagram+0x32>
 800dc18:	4b0a      	ldr	r3, [pc, #40]	; (800dc44 <ip_reass_dequeue_datagram+0x50>)
 800dc1a:	f240 1245 	movw	r2, #325	; 0x145
 800dc1e:	490a      	ldr	r1, [pc, #40]	; (800dc48 <ip_reass_dequeue_datagram+0x54>)
 800dc20:	480a      	ldr	r0, [pc, #40]	; (800dc4c <ip_reass_dequeue_datagram+0x58>)
 800dc22:	f000 fe8f 	bl	800e944 <iprintf>
    prev->next = ipr->next;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681a      	ldr	r2, [r3, #0]
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800dc2e:	6879      	ldr	r1, [r7, #4]
 800dc30:	2004      	movs	r0, #4
 800dc32:	f7f7 fbf7 	bl	8005424 <memp_free>
}
 800dc36:	bf00      	nop
 800dc38:	3708      	adds	r7, #8
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	bd80      	pop	{r7, pc}
 800dc3e:	bf00      	nop
 800dc40:	2000a608 	.word	0x2000a608
 800dc44:	08011ec8 	.word	0x08011ec8
 800dc48:	08011f90 	.word	0x08011f90
 800dc4c:	08011f10 	.word	0x08011f10

0800dc50 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b08c      	sub	sp, #48	; 0x30
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	60f8      	str	r0, [r7, #12]
 800dc58:	60b9      	str	r1, [r7, #8]
 800dc5a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800dc60:	2301      	movs	r3, #1
 800dc62:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800dc64:	68bb      	ldr	r3, [r7, #8]
 800dc66:	685b      	ldr	r3, [r3, #4]
 800dc68:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800dc6a:	69fb      	ldr	r3, [r7, #28]
 800dc6c:	885b      	ldrh	r3, [r3, #2]
 800dc6e:	b29b      	uxth	r3, r3
 800dc70:	4618      	mov	r0, r3
 800dc72:	f7f6 feef 	bl	8004a54 <lwip_htons>
 800dc76:	4603      	mov	r3, r0
 800dc78:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800dc7a:	69fb      	ldr	r3, [r7, #28]
 800dc7c:	781b      	ldrb	r3, [r3, #0]
 800dc7e:	f003 030f 	and.w	r3, r3, #15
 800dc82:	b2db      	uxtb	r3, r3
 800dc84:	009b      	lsls	r3, r3, #2
 800dc86:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800dc88:	7e7b      	ldrb	r3, [r7, #25]
 800dc8a:	b29b      	uxth	r3, r3
 800dc8c:	8b7a      	ldrh	r2, [r7, #26]
 800dc8e:	429a      	cmp	r2, r3
 800dc90:	d202      	bcs.n	800dc98 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800dc92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dc96:	e135      	b.n	800df04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800dc98:	7e7b      	ldrb	r3, [r7, #25]
 800dc9a:	b29b      	uxth	r3, r3
 800dc9c:	8b7a      	ldrh	r2, [r7, #26]
 800dc9e:	1ad3      	subs	r3, r2, r3
 800dca0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800dca2:	69fb      	ldr	r3, [r7, #28]
 800dca4:	88db      	ldrh	r3, [r3, #6]
 800dca6:	b29b      	uxth	r3, r3
 800dca8:	4618      	mov	r0, r3
 800dcaa:	f7f6 fed3 	bl	8004a54 <lwip_htons>
 800dcae:	4603      	mov	r3, r0
 800dcb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dcb4:	b29b      	uxth	r3, r3
 800dcb6:	00db      	lsls	r3, r3, #3
 800dcb8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800dcba:	68bb      	ldr	r3, [r7, #8]
 800dcbc:	685b      	ldr	r3, [r3, #4]
 800dcbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800dcc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	701a      	strb	r2, [r3, #0]
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	705a      	strb	r2, [r3, #1]
 800dcca:	2200      	movs	r2, #0
 800dccc:	709a      	strb	r2, [r3, #2]
 800dcce:	2200      	movs	r2, #0
 800dcd0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800dcd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcd4:	8afa      	ldrh	r2, [r7, #22]
 800dcd6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800dcd8:	8afa      	ldrh	r2, [r7, #22]
 800dcda:	8b7b      	ldrh	r3, [r7, #26]
 800dcdc:	4413      	add	r3, r2
 800dcde:	b29a      	uxth	r2, r3
 800dce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dce2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800dce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dce6:	88db      	ldrh	r3, [r3, #6]
 800dce8:	b29b      	uxth	r3, r3
 800dcea:	8afa      	ldrh	r2, [r7, #22]
 800dcec:	429a      	cmp	r2, r3
 800dcee:	d902      	bls.n	800dcf6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800dcf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dcf4:	e106      	b.n	800df04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	685b      	ldr	r3, [r3, #4]
 800dcfa:	627b      	str	r3, [r7, #36]	; 0x24
 800dcfc:	e068      	b.n	800ddd0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800dcfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd00:	685b      	ldr	r3, [r3, #4]
 800dd02:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800dd04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd06:	889b      	ldrh	r3, [r3, #4]
 800dd08:	b29a      	uxth	r2, r3
 800dd0a:	693b      	ldr	r3, [r7, #16]
 800dd0c:	889b      	ldrh	r3, [r3, #4]
 800dd0e:	b29b      	uxth	r3, r3
 800dd10:	429a      	cmp	r2, r3
 800dd12:	d235      	bcs.n	800dd80 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800dd14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd18:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800dd1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d020      	beq.n	800dd62 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800dd20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd22:	889b      	ldrh	r3, [r3, #4]
 800dd24:	b29a      	uxth	r2, r3
 800dd26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd28:	88db      	ldrh	r3, [r3, #6]
 800dd2a:	b29b      	uxth	r3, r3
 800dd2c:	429a      	cmp	r2, r3
 800dd2e:	d307      	bcc.n	800dd40 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800dd30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd32:	88db      	ldrh	r3, [r3, #6]
 800dd34:	b29a      	uxth	r2, r3
 800dd36:	693b      	ldr	r3, [r7, #16]
 800dd38:	889b      	ldrh	r3, [r3, #4]
 800dd3a:	b29b      	uxth	r3, r3
 800dd3c:	429a      	cmp	r2, r3
 800dd3e:	d902      	bls.n	800dd46 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800dd40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dd44:	e0de      	b.n	800df04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800dd46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd48:	68ba      	ldr	r2, [r7, #8]
 800dd4a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800dd4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd4e:	88db      	ldrh	r3, [r3, #6]
 800dd50:	b29a      	uxth	r2, r3
 800dd52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd54:	889b      	ldrh	r3, [r3, #4]
 800dd56:	b29b      	uxth	r3, r3
 800dd58:	429a      	cmp	r2, r3
 800dd5a:	d03d      	beq.n	800ddd8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800dd60:	e03a      	b.n	800ddd8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800dd62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd64:	88db      	ldrh	r3, [r3, #6]
 800dd66:	b29a      	uxth	r2, r3
 800dd68:	693b      	ldr	r3, [r7, #16]
 800dd6a:	889b      	ldrh	r3, [r3, #4]
 800dd6c:	b29b      	uxth	r3, r3
 800dd6e:	429a      	cmp	r2, r3
 800dd70:	d902      	bls.n	800dd78 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800dd72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dd76:	e0c5      	b.n	800df04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	68ba      	ldr	r2, [r7, #8]
 800dd7c:	605a      	str	r2, [r3, #4]
      break;
 800dd7e:	e02b      	b.n	800ddd8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800dd80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd82:	889b      	ldrh	r3, [r3, #4]
 800dd84:	b29a      	uxth	r2, r3
 800dd86:	693b      	ldr	r3, [r7, #16]
 800dd88:	889b      	ldrh	r3, [r3, #4]
 800dd8a:	b29b      	uxth	r3, r3
 800dd8c:	429a      	cmp	r2, r3
 800dd8e:	d102      	bne.n	800dd96 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800dd90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dd94:	e0b6      	b.n	800df04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800dd96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd98:	889b      	ldrh	r3, [r3, #4]
 800dd9a:	b29a      	uxth	r2, r3
 800dd9c:	693b      	ldr	r3, [r7, #16]
 800dd9e:	88db      	ldrh	r3, [r3, #6]
 800dda0:	b29b      	uxth	r3, r3
 800dda2:	429a      	cmp	r2, r3
 800dda4:	d202      	bcs.n	800ddac <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800dda6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ddaa:	e0ab      	b.n	800df04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800ddac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d009      	beq.n	800ddc6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800ddb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddb4:	88db      	ldrh	r3, [r3, #6]
 800ddb6:	b29a      	uxth	r2, r3
 800ddb8:	693b      	ldr	r3, [r7, #16]
 800ddba:	889b      	ldrh	r3, [r3, #4]
 800ddbc:	b29b      	uxth	r3, r3
 800ddbe:	429a      	cmp	r2, r3
 800ddc0:	d001      	beq.n	800ddc6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800ddc6:	693b      	ldr	r3, [r7, #16]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800ddcc:	693b      	ldr	r3, [r7, #16]
 800ddce:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800ddd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d193      	bne.n	800dcfe <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800ddd6:	e000      	b.n	800ddda <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800ddd8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800ddda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d12d      	bne.n	800de3c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800dde0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d01c      	beq.n	800de20 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800dde6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dde8:	88db      	ldrh	r3, [r3, #6]
 800ddea:	b29a      	uxth	r2, r3
 800ddec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddee:	889b      	ldrh	r3, [r3, #4]
 800ddf0:	b29b      	uxth	r3, r3
 800ddf2:	429a      	cmp	r2, r3
 800ddf4:	d906      	bls.n	800de04 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800ddf6:	4b45      	ldr	r3, [pc, #276]	; (800df0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ddf8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800ddfc:	4944      	ldr	r1, [pc, #272]	; (800df10 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800ddfe:	4845      	ldr	r0, [pc, #276]	; (800df14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800de00:	f000 fda0 	bl	800e944 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800de04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de06:	68ba      	ldr	r2, [r7, #8]
 800de08:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800de0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de0c:	88db      	ldrh	r3, [r3, #6]
 800de0e:	b29a      	uxth	r2, r3
 800de10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de12:	889b      	ldrh	r3, [r3, #4]
 800de14:	b29b      	uxth	r3, r3
 800de16:	429a      	cmp	r2, r3
 800de18:	d010      	beq.n	800de3c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800de1a:	2300      	movs	r3, #0
 800de1c:	623b      	str	r3, [r7, #32]
 800de1e:	e00d      	b.n	800de3c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	685b      	ldr	r3, [r3, #4]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d006      	beq.n	800de36 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800de28:	4b38      	ldr	r3, [pc, #224]	; (800df0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800de2a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800de2e:	493a      	ldr	r1, [pc, #232]	; (800df18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800de30:	4838      	ldr	r0, [pc, #224]	; (800df14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800de32:	f000 fd87 	bl	800e944 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	68ba      	ldr	r2, [r7, #8]
 800de3a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d105      	bne.n	800de4e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	7f9b      	ldrb	r3, [r3, #30]
 800de46:	f003 0301 	and.w	r3, r3, #1
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d059      	beq.n	800df02 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800de4e:	6a3b      	ldr	r3, [r7, #32]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d04f      	beq.n	800def4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	685b      	ldr	r3, [r3, #4]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d006      	beq.n	800de6a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	685b      	ldr	r3, [r3, #4]
 800de60:	685b      	ldr	r3, [r3, #4]
 800de62:	889b      	ldrh	r3, [r3, #4]
 800de64:	b29b      	uxth	r3, r3
 800de66:	2b00      	cmp	r3, #0
 800de68:	d002      	beq.n	800de70 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800de6a:	2300      	movs	r3, #0
 800de6c:	623b      	str	r3, [r7, #32]
 800de6e:	e041      	b.n	800def4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800de70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de72:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800de74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800de7a:	e012      	b.n	800dea2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800de7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de7e:	685b      	ldr	r3, [r3, #4]
 800de80:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800de82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de84:	88db      	ldrh	r3, [r3, #6]
 800de86:	b29a      	uxth	r2, r3
 800de88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de8a:	889b      	ldrh	r3, [r3, #4]
 800de8c:	b29b      	uxth	r3, r3
 800de8e:	429a      	cmp	r2, r3
 800de90:	d002      	beq.n	800de98 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800de92:	2300      	movs	r3, #0
 800de94:	623b      	str	r3, [r7, #32]
            break;
 800de96:	e007      	b.n	800dea8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800de98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de9a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800de9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800dea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d1e9      	bne.n	800de7c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800dea8:	6a3b      	ldr	r3, [r7, #32]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d022      	beq.n	800def4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	685b      	ldr	r3, [r3, #4]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d106      	bne.n	800dec4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800deb6:	4b15      	ldr	r3, [pc, #84]	; (800df0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800deb8:	f240 12df 	movw	r2, #479	; 0x1df
 800debc:	4917      	ldr	r1, [pc, #92]	; (800df1c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800debe:	4815      	ldr	r0, [pc, #84]	; (800df14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800dec0:	f000 fd40 	bl	800e944 <iprintf>
          LWIP_ASSERT("sanity check",
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	685b      	ldr	r3, [r3, #4]
 800dec8:	685b      	ldr	r3, [r3, #4]
 800deca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800decc:	429a      	cmp	r2, r3
 800dece:	d106      	bne.n	800dede <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800ded0:	4b0e      	ldr	r3, [pc, #56]	; (800df0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ded2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800ded6:	4911      	ldr	r1, [pc, #68]	; (800df1c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800ded8:	480e      	ldr	r0, [pc, #56]	; (800df14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800deda:	f000 fd33 	bl	800e944 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800dede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d006      	beq.n	800def4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800dee6:	4b09      	ldr	r3, [pc, #36]	; (800df0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800dee8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800deec:	490c      	ldr	r1, [pc, #48]	; (800df20 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800deee:	4809      	ldr	r0, [pc, #36]	; (800df14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800def0:	f000 fd28 	bl	800e944 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800def4:	6a3b      	ldr	r3, [r7, #32]
 800def6:	2b00      	cmp	r3, #0
 800def8:	bf14      	ite	ne
 800defa:	2301      	movne	r3, #1
 800defc:	2300      	moveq	r3, #0
 800defe:	b2db      	uxtb	r3, r3
 800df00:	e000      	b.n	800df04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800df02:	2300      	movs	r3, #0
}
 800df04:	4618      	mov	r0, r3
 800df06:	3730      	adds	r7, #48	; 0x30
 800df08:	46bd      	mov	sp, r7
 800df0a:	bd80      	pop	{r7, pc}
 800df0c:	08011ec8 	.word	0x08011ec8
 800df10:	08011fac 	.word	0x08011fac
 800df14:	08011f10 	.word	0x08011f10
 800df18:	08011fcc 	.word	0x08011fcc
 800df1c:	08012004 	.word	0x08012004
 800df20:	08012014 	.word	0x08012014

0800df24 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b08e      	sub	sp, #56	; 0x38
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	685b      	ldr	r3, [r3, #4]
 800df30:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800df32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df34:	781b      	ldrb	r3, [r3, #0]
 800df36:	f003 030f 	and.w	r3, r3, #15
 800df3a:	b2db      	uxtb	r3, r3
 800df3c:	009b      	lsls	r3, r3, #2
 800df3e:	b2db      	uxtb	r3, r3
 800df40:	2b14      	cmp	r3, #20
 800df42:	f040 8171 	bne.w	800e228 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800df46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df48:	88db      	ldrh	r3, [r3, #6]
 800df4a:	b29b      	uxth	r3, r3
 800df4c:	4618      	mov	r0, r3
 800df4e:	f7f6 fd81 	bl	8004a54 <lwip_htons>
 800df52:	4603      	mov	r3, r0
 800df54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800df58:	b29b      	uxth	r3, r3
 800df5a:	00db      	lsls	r3, r3, #3
 800df5c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800df5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df60:	885b      	ldrh	r3, [r3, #2]
 800df62:	b29b      	uxth	r3, r3
 800df64:	4618      	mov	r0, r3
 800df66:	f7f6 fd75 	bl	8004a54 <lwip_htons>
 800df6a:	4603      	mov	r3, r0
 800df6c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800df6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df70:	781b      	ldrb	r3, [r3, #0]
 800df72:	f003 030f 	and.w	r3, r3, #15
 800df76:	b2db      	uxtb	r3, r3
 800df78:	009b      	lsls	r3, r3, #2
 800df7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800df7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800df82:	b29b      	uxth	r3, r3
 800df84:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800df86:	429a      	cmp	r2, r3
 800df88:	f0c0 8150 	bcc.w	800e22c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800df8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800df90:	b29b      	uxth	r3, r3
 800df92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800df94:	1ad3      	subs	r3, r2, r3
 800df96:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800df98:	6878      	ldr	r0, [r7, #4]
 800df9a:	f7f8 f941 	bl	8006220 <pbuf_clen>
 800df9e:	4603      	mov	r3, r0
 800dfa0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800dfa2:	4b8c      	ldr	r3, [pc, #560]	; (800e1d4 <ip4_reass+0x2b0>)
 800dfa4:	881b      	ldrh	r3, [r3, #0]
 800dfa6:	461a      	mov	r2, r3
 800dfa8:	8c3b      	ldrh	r3, [r7, #32]
 800dfaa:	4413      	add	r3, r2
 800dfac:	2b0a      	cmp	r3, #10
 800dfae:	dd10      	ble.n	800dfd2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800dfb0:	8c3b      	ldrh	r3, [r7, #32]
 800dfb2:	4619      	mov	r1, r3
 800dfb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dfb6:	f7ff fd81 	bl	800dabc <ip_reass_remove_oldest_datagram>
 800dfba:	4603      	mov	r3, r0
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	f000 8137 	beq.w	800e230 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800dfc2:	4b84      	ldr	r3, [pc, #528]	; (800e1d4 <ip4_reass+0x2b0>)
 800dfc4:	881b      	ldrh	r3, [r3, #0]
 800dfc6:	461a      	mov	r2, r3
 800dfc8:	8c3b      	ldrh	r3, [r7, #32]
 800dfca:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800dfcc:	2b0a      	cmp	r3, #10
 800dfce:	f300 812f 	bgt.w	800e230 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800dfd2:	4b81      	ldr	r3, [pc, #516]	; (800e1d8 <ip4_reass+0x2b4>)
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	633b      	str	r3, [r7, #48]	; 0x30
 800dfd8:	e015      	b.n	800e006 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800dfda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfdc:	695a      	ldr	r2, [r3, #20]
 800dfde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfe0:	68db      	ldr	r3, [r3, #12]
 800dfe2:	429a      	cmp	r2, r3
 800dfe4:	d10c      	bne.n	800e000 <ip4_reass+0xdc>
 800dfe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfe8:	699a      	ldr	r2, [r3, #24]
 800dfea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfec:	691b      	ldr	r3, [r3, #16]
 800dfee:	429a      	cmp	r2, r3
 800dff0:	d106      	bne.n	800e000 <ip4_reass+0xdc>
 800dff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dff4:	899a      	ldrh	r2, [r3, #12]
 800dff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dff8:	889b      	ldrh	r3, [r3, #4]
 800dffa:	b29b      	uxth	r3, r3
 800dffc:	429a      	cmp	r2, r3
 800dffe:	d006      	beq.n	800e00e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	633b      	str	r3, [r7, #48]	; 0x30
 800e006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d1e6      	bne.n	800dfda <ip4_reass+0xb6>
 800e00c:	e000      	b.n	800e010 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800e00e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800e010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e012:	2b00      	cmp	r3, #0
 800e014:	d109      	bne.n	800e02a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800e016:	8c3b      	ldrh	r3, [r7, #32]
 800e018:	4619      	mov	r1, r3
 800e01a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e01c:	f7ff fdb0 	bl	800db80 <ip_reass_enqueue_new_datagram>
 800e020:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800e022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e024:	2b00      	cmp	r3, #0
 800e026:	d11c      	bne.n	800e062 <ip4_reass+0x13e>
      goto nullreturn;
 800e028:	e105      	b.n	800e236 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e02c:	88db      	ldrh	r3, [r3, #6]
 800e02e:	b29b      	uxth	r3, r3
 800e030:	4618      	mov	r0, r3
 800e032:	f7f6 fd0f 	bl	8004a54 <lwip_htons>
 800e036:	4603      	mov	r3, r0
 800e038:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d110      	bne.n	800e062 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800e040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e042:	89db      	ldrh	r3, [r3, #14]
 800e044:	4618      	mov	r0, r3
 800e046:	f7f6 fd05 	bl	8004a54 <lwip_htons>
 800e04a:	4603      	mov	r3, r0
 800e04c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e050:	2b00      	cmp	r3, #0
 800e052:	d006      	beq.n	800e062 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800e054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e056:	3308      	adds	r3, #8
 800e058:	2214      	movs	r2, #20
 800e05a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e05c:	4618      	mov	r0, r3
 800e05e:	f000 fd5e 	bl	800eb1e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800e062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e064:	88db      	ldrh	r3, [r3, #6]
 800e066:	b29b      	uxth	r3, r3
 800e068:	f003 0320 	and.w	r3, r3, #32
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	bf0c      	ite	eq
 800e070:	2301      	moveq	r3, #1
 800e072:	2300      	movne	r3, #0
 800e074:	b2db      	uxtb	r3, r3
 800e076:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800e078:	69fb      	ldr	r3, [r7, #28]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d00e      	beq.n	800e09c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800e07e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e080:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e082:	4413      	add	r3, r2
 800e084:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800e086:	8b7a      	ldrh	r2, [r7, #26]
 800e088:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e08a:	429a      	cmp	r2, r3
 800e08c:	f0c0 80a0 	bcc.w	800e1d0 <ip4_reass+0x2ac>
 800e090:	8b7b      	ldrh	r3, [r7, #26]
 800e092:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800e096:	4293      	cmp	r3, r2
 800e098:	f200 809a 	bhi.w	800e1d0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800e09c:	69fa      	ldr	r2, [r7, #28]
 800e09e:	6879      	ldr	r1, [r7, #4]
 800e0a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e0a2:	f7ff fdd5 	bl	800dc50 <ip_reass_chain_frag_into_datagram_and_validate>
 800e0a6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800e0a8:	697b      	ldr	r3, [r7, #20]
 800e0aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e0ae:	f000 809b 	beq.w	800e1e8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800e0b2:	4b48      	ldr	r3, [pc, #288]	; (800e1d4 <ip4_reass+0x2b0>)
 800e0b4:	881a      	ldrh	r2, [r3, #0]
 800e0b6:	8c3b      	ldrh	r3, [r7, #32]
 800e0b8:	4413      	add	r3, r2
 800e0ba:	b29a      	uxth	r2, r3
 800e0bc:	4b45      	ldr	r3, [pc, #276]	; (800e1d4 <ip4_reass+0x2b0>)
 800e0be:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800e0c0:	69fb      	ldr	r3, [r7, #28]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d00d      	beq.n	800e0e2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800e0c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e0c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e0ca:	4413      	add	r3, r2
 800e0cc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800e0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0d0:	8a7a      	ldrh	r2, [r7, #18]
 800e0d2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800e0d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0d6:	7f9b      	ldrb	r3, [r3, #30]
 800e0d8:	f043 0301 	orr.w	r3, r3, #1
 800e0dc:	b2da      	uxtb	r2, r3
 800e0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0e0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800e0e2:	697b      	ldr	r3, [r7, #20]
 800e0e4:	2b01      	cmp	r3, #1
 800e0e6:	d171      	bne.n	800e1cc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800e0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0ea:	8b9b      	ldrh	r3, [r3, #28]
 800e0ec:	3314      	adds	r3, #20
 800e0ee:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800e0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0f2:	685b      	ldr	r3, [r3, #4]
 800e0f4:	685b      	ldr	r3, [r3, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800e0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0fc:	685b      	ldr	r3, [r3, #4]
 800e0fe:	685b      	ldr	r3, [r3, #4]
 800e100:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800e102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e104:	3308      	adds	r3, #8
 800e106:	2214      	movs	r2, #20
 800e108:	4619      	mov	r1, r3
 800e10a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e10c:	f000 fd07 	bl	800eb1e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800e110:	8a3b      	ldrh	r3, [r7, #16]
 800e112:	4618      	mov	r0, r3
 800e114:	f7f6 fc9e 	bl	8004a54 <lwip_htons>
 800e118:	4603      	mov	r3, r0
 800e11a:	461a      	mov	r2, r3
 800e11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e11e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800e120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e122:	2200      	movs	r2, #0
 800e124:	719a      	strb	r2, [r3, #6]
 800e126:	2200      	movs	r2, #0
 800e128:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800e12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e12c:	2200      	movs	r2, #0
 800e12e:	729a      	strb	r2, [r3, #10]
 800e130:	2200      	movs	r2, #0
 800e132:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800e134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e136:	685b      	ldr	r3, [r3, #4]
 800e138:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800e13a:	e00d      	b.n	800e158 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800e13c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e13e:	685b      	ldr	r3, [r3, #4]
 800e140:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800e142:	2114      	movs	r1, #20
 800e144:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e146:	f7f7 ff5d 	bl	8006004 <pbuf_remove_header>
      pbuf_cat(p, r);
 800e14a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e14c:	6878      	ldr	r0, [r7, #4]
 800e14e:	f7f8 f8a1 	bl	8006294 <pbuf_cat>
      r = iprh->next_pbuf;
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800e158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d1ee      	bne.n	800e13c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800e15e:	4b1e      	ldr	r3, [pc, #120]	; (800e1d8 <ip4_reass+0x2b4>)
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e164:	429a      	cmp	r2, r3
 800e166:	d102      	bne.n	800e16e <ip4_reass+0x24a>
      ipr_prev = NULL;
 800e168:	2300      	movs	r3, #0
 800e16a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e16c:	e010      	b.n	800e190 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e16e:	4b1a      	ldr	r3, [pc, #104]	; (800e1d8 <ip4_reass+0x2b4>)
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e174:	e007      	b.n	800e186 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800e176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e17c:	429a      	cmp	r2, r3
 800e17e:	d006      	beq.n	800e18e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d1f4      	bne.n	800e176 <ip4_reass+0x252>
 800e18c:	e000      	b.n	800e190 <ip4_reass+0x26c>
          break;
 800e18e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800e190:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e192:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e194:	f7ff fd2e 	bl	800dbf4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800e198:	6878      	ldr	r0, [r7, #4]
 800e19a:	f7f8 f841 	bl	8006220 <pbuf_clen>
 800e19e:	4603      	mov	r3, r0
 800e1a0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800e1a2:	4b0c      	ldr	r3, [pc, #48]	; (800e1d4 <ip4_reass+0x2b0>)
 800e1a4:	881b      	ldrh	r3, [r3, #0]
 800e1a6:	8c3a      	ldrh	r2, [r7, #32]
 800e1a8:	429a      	cmp	r2, r3
 800e1aa:	d906      	bls.n	800e1ba <ip4_reass+0x296>
 800e1ac:	4b0b      	ldr	r3, [pc, #44]	; (800e1dc <ip4_reass+0x2b8>)
 800e1ae:	f240 229b 	movw	r2, #667	; 0x29b
 800e1b2:	490b      	ldr	r1, [pc, #44]	; (800e1e0 <ip4_reass+0x2bc>)
 800e1b4:	480b      	ldr	r0, [pc, #44]	; (800e1e4 <ip4_reass+0x2c0>)
 800e1b6:	f000 fbc5 	bl	800e944 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800e1ba:	4b06      	ldr	r3, [pc, #24]	; (800e1d4 <ip4_reass+0x2b0>)
 800e1bc:	881a      	ldrh	r2, [r3, #0]
 800e1be:	8c3b      	ldrh	r3, [r7, #32]
 800e1c0:	1ad3      	subs	r3, r2, r3
 800e1c2:	b29a      	uxth	r2, r3
 800e1c4:	4b03      	ldr	r3, [pc, #12]	; (800e1d4 <ip4_reass+0x2b0>)
 800e1c6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	e038      	b.n	800e23e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	e036      	b.n	800e23e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800e1d0:	bf00      	nop
 800e1d2:	e00a      	b.n	800e1ea <ip4_reass+0x2c6>
 800e1d4:	2000a60c 	.word	0x2000a60c
 800e1d8:	2000a608 	.word	0x2000a608
 800e1dc:	08011ec8 	.word	0x08011ec8
 800e1e0:	08012038 	.word	0x08012038
 800e1e4:	08011f10 	.word	0x08011f10
    goto nullreturn_ipr;
 800e1e8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800e1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d106      	bne.n	800e1fe <ip4_reass+0x2da>
 800e1f0:	4b15      	ldr	r3, [pc, #84]	; (800e248 <ip4_reass+0x324>)
 800e1f2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800e1f6:	4915      	ldr	r1, [pc, #84]	; (800e24c <ip4_reass+0x328>)
 800e1f8:	4815      	ldr	r0, [pc, #84]	; (800e250 <ip4_reass+0x32c>)
 800e1fa:	f000 fba3 	bl	800e944 <iprintf>
  if (ipr->p == NULL) {
 800e1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e200:	685b      	ldr	r3, [r3, #4]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d116      	bne.n	800e234 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800e206:	4b13      	ldr	r3, [pc, #76]	; (800e254 <ip4_reass+0x330>)
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e20c:	429a      	cmp	r2, r3
 800e20e:	d006      	beq.n	800e21e <ip4_reass+0x2fa>
 800e210:	4b0d      	ldr	r3, [pc, #52]	; (800e248 <ip4_reass+0x324>)
 800e212:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e216:	4910      	ldr	r1, [pc, #64]	; (800e258 <ip4_reass+0x334>)
 800e218:	480d      	ldr	r0, [pc, #52]	; (800e250 <ip4_reass+0x32c>)
 800e21a:	f000 fb93 	bl	800e944 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800e21e:	2100      	movs	r1, #0
 800e220:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e222:	f7ff fce7 	bl	800dbf4 <ip_reass_dequeue_datagram>
 800e226:	e006      	b.n	800e236 <ip4_reass+0x312>
    goto nullreturn;
 800e228:	bf00      	nop
 800e22a:	e004      	b.n	800e236 <ip4_reass+0x312>
    goto nullreturn;
 800e22c:	bf00      	nop
 800e22e:	e002      	b.n	800e236 <ip4_reass+0x312>
      goto nullreturn;
 800e230:	bf00      	nop
 800e232:	e000      	b.n	800e236 <ip4_reass+0x312>
  }

nullreturn:
 800e234:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800e236:	6878      	ldr	r0, [r7, #4]
 800e238:	f7f7 ff6a 	bl	8006110 <pbuf_free>
  return NULL;
 800e23c:	2300      	movs	r3, #0
}
 800e23e:	4618      	mov	r0, r3
 800e240:	3738      	adds	r7, #56	; 0x38
 800e242:	46bd      	mov	sp, r7
 800e244:	bd80      	pop	{r7, pc}
 800e246:	bf00      	nop
 800e248:	08011ec8 	.word	0x08011ec8
 800e24c:	08012054 	.word	0x08012054
 800e250:	08011f10 	.word	0x08011f10
 800e254:	2000a608 	.word	0x2000a608
 800e258:	08012060 	.word	0x08012060

0800e25c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800e260:	2005      	movs	r0, #5
 800e262:	f7f7 f86f 	bl	8005344 <memp_malloc>
 800e266:	4603      	mov	r3, r0
}
 800e268:	4618      	mov	r0, r3
 800e26a:	bd80      	pop	{r7, pc}

0800e26c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b082      	sub	sp, #8
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d106      	bne.n	800e288 <ip_frag_free_pbuf_custom_ref+0x1c>
 800e27a:	4b07      	ldr	r3, [pc, #28]	; (800e298 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800e27c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800e280:	4906      	ldr	r1, [pc, #24]	; (800e29c <ip_frag_free_pbuf_custom_ref+0x30>)
 800e282:	4807      	ldr	r0, [pc, #28]	; (800e2a0 <ip_frag_free_pbuf_custom_ref+0x34>)
 800e284:	f000 fb5e 	bl	800e944 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800e288:	6879      	ldr	r1, [r7, #4]
 800e28a:	2005      	movs	r0, #5
 800e28c:	f7f7 f8ca 	bl	8005424 <memp_free>
}
 800e290:	bf00      	nop
 800e292:	3708      	adds	r7, #8
 800e294:	46bd      	mov	sp, r7
 800e296:	bd80      	pop	{r7, pc}
 800e298:	08011ec8 	.word	0x08011ec8
 800e29c:	08012080 	.word	0x08012080
 800e2a0:	08011f10 	.word	0x08011f10

0800e2a4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	b084      	sub	sp, #16
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d106      	bne.n	800e2c4 <ipfrag_free_pbuf_custom+0x20>
 800e2b6:	4b11      	ldr	r3, [pc, #68]	; (800e2fc <ipfrag_free_pbuf_custom+0x58>)
 800e2b8:	f240 22ce 	movw	r2, #718	; 0x2ce
 800e2bc:	4910      	ldr	r1, [pc, #64]	; (800e300 <ipfrag_free_pbuf_custom+0x5c>)
 800e2be:	4811      	ldr	r0, [pc, #68]	; (800e304 <ipfrag_free_pbuf_custom+0x60>)
 800e2c0:	f000 fb40 	bl	800e944 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800e2c4:	68fa      	ldr	r2, [r7, #12]
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	429a      	cmp	r2, r3
 800e2ca:	d006      	beq.n	800e2da <ipfrag_free_pbuf_custom+0x36>
 800e2cc:	4b0b      	ldr	r3, [pc, #44]	; (800e2fc <ipfrag_free_pbuf_custom+0x58>)
 800e2ce:	f240 22cf 	movw	r2, #719	; 0x2cf
 800e2d2:	490d      	ldr	r1, [pc, #52]	; (800e308 <ipfrag_free_pbuf_custom+0x64>)
 800e2d4:	480b      	ldr	r0, [pc, #44]	; (800e304 <ipfrag_free_pbuf_custom+0x60>)
 800e2d6:	f000 fb35 	bl	800e944 <iprintf>
  if (pcr->original != NULL) {
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	695b      	ldr	r3, [r3, #20]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d004      	beq.n	800e2ec <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	695b      	ldr	r3, [r3, #20]
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	f7f7 ff12 	bl	8006110 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800e2ec:	68f8      	ldr	r0, [r7, #12]
 800e2ee:	f7ff ffbd 	bl	800e26c <ip_frag_free_pbuf_custom_ref>
}
 800e2f2:	bf00      	nop
 800e2f4:	3710      	adds	r7, #16
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	bd80      	pop	{r7, pc}
 800e2fa:	bf00      	nop
 800e2fc:	08011ec8 	.word	0x08011ec8
 800e300:	0801208c 	.word	0x0801208c
 800e304:	08011f10 	.word	0x08011f10
 800e308:	08012098 	.word	0x08012098

0800e30c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b094      	sub	sp, #80	; 0x50
 800e310:	af02      	add	r7, sp, #8
 800e312:	60f8      	str	r0, [r7, #12]
 800e314:	60b9      	str	r1, [r7, #8]
 800e316:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800e318:	2300      	movs	r3, #0
 800e31a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800e31e:	68bb      	ldr	r3, [r7, #8]
 800e320:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e322:	3b14      	subs	r3, #20
 800e324:	2b00      	cmp	r3, #0
 800e326:	da00      	bge.n	800e32a <ip4_frag+0x1e>
 800e328:	3307      	adds	r3, #7
 800e32a:	10db      	asrs	r3, r3, #3
 800e32c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800e32e:	2314      	movs	r3, #20
 800e330:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	685b      	ldr	r3, [r3, #4]
 800e336:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800e338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e33a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800e33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e33e:	781b      	ldrb	r3, [r3, #0]
 800e340:	f003 030f 	and.w	r3, r3, #15
 800e344:	b2db      	uxtb	r3, r3
 800e346:	009b      	lsls	r3, r3, #2
 800e348:	b2db      	uxtb	r3, r3
 800e34a:	2b14      	cmp	r3, #20
 800e34c:	d002      	beq.n	800e354 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800e34e:	f06f 0305 	mvn.w	r3, #5
 800e352:	e110      	b.n	800e576 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	895b      	ldrh	r3, [r3, #10]
 800e358:	2b13      	cmp	r3, #19
 800e35a:	d809      	bhi.n	800e370 <ip4_frag+0x64>
 800e35c:	4b88      	ldr	r3, [pc, #544]	; (800e580 <ip4_frag+0x274>)
 800e35e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800e362:	4988      	ldr	r1, [pc, #544]	; (800e584 <ip4_frag+0x278>)
 800e364:	4888      	ldr	r0, [pc, #544]	; (800e588 <ip4_frag+0x27c>)
 800e366:	f000 faed 	bl	800e944 <iprintf>
 800e36a:	f06f 0305 	mvn.w	r3, #5
 800e36e:	e102      	b.n	800e576 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800e370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e372:	88db      	ldrh	r3, [r3, #6]
 800e374:	b29b      	uxth	r3, r3
 800e376:	4618      	mov	r0, r3
 800e378:	f7f6 fb6c 	bl	8004a54 <lwip_htons>
 800e37c:	4603      	mov	r3, r0
 800e37e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800e380:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e382:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e386:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800e38a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e38c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e390:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	891b      	ldrh	r3, [r3, #8]
 800e396:	3b14      	subs	r3, #20
 800e398:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800e39c:	e0e1      	b.n	800e562 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800e39e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e3a0:	00db      	lsls	r3, r3, #3
 800e3a2:	b29b      	uxth	r3, r3
 800e3a4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e3a8:	4293      	cmp	r3, r2
 800e3aa:	bf28      	it	cs
 800e3ac:	4613      	movcs	r3, r2
 800e3ae:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800e3b0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e3b4:	2114      	movs	r1, #20
 800e3b6:	200e      	movs	r0, #14
 800e3b8:	f7f7 fbc6 	bl	8005b48 <pbuf_alloc>
 800e3bc:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800e3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	f000 80d5 	beq.w	800e570 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800e3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3c8:	895b      	ldrh	r3, [r3, #10]
 800e3ca:	2b13      	cmp	r3, #19
 800e3cc:	d806      	bhi.n	800e3dc <ip4_frag+0xd0>
 800e3ce:	4b6c      	ldr	r3, [pc, #432]	; (800e580 <ip4_frag+0x274>)
 800e3d0:	f44f 7249 	mov.w	r2, #804	; 0x324
 800e3d4:	496d      	ldr	r1, [pc, #436]	; (800e58c <ip4_frag+0x280>)
 800e3d6:	486c      	ldr	r0, [pc, #432]	; (800e588 <ip4_frag+0x27c>)
 800e3d8:	f000 fab4 	bl	800e944 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800e3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3de:	685b      	ldr	r3, [r3, #4]
 800e3e0:	2214      	movs	r2, #20
 800e3e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	f000 fb9a 	bl	800eb1e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800e3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ec:	685b      	ldr	r3, [r3, #4]
 800e3ee:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800e3f0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e3f2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800e3f6:	e064      	b.n	800e4c2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	895a      	ldrh	r2, [r3, #10]
 800e3fc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e3fe:	1ad3      	subs	r3, r2, r3
 800e400:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	895b      	ldrh	r3, [r3, #10]
 800e406:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e408:	429a      	cmp	r2, r3
 800e40a:	d906      	bls.n	800e41a <ip4_frag+0x10e>
 800e40c:	4b5c      	ldr	r3, [pc, #368]	; (800e580 <ip4_frag+0x274>)
 800e40e:	f240 322d 	movw	r2, #813	; 0x32d
 800e412:	495f      	ldr	r1, [pc, #380]	; (800e590 <ip4_frag+0x284>)
 800e414:	485c      	ldr	r0, [pc, #368]	; (800e588 <ip4_frag+0x27c>)
 800e416:	f000 fa95 	bl	800e944 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800e41a:	8bfa      	ldrh	r2, [r7, #30]
 800e41c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e420:	4293      	cmp	r3, r2
 800e422:	bf28      	it	cs
 800e424:	4613      	movcs	r3, r2
 800e426:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800e42a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d105      	bne.n	800e43e <ip4_frag+0x132>
        poff = 0;
 800e432:	2300      	movs	r3, #0
 800e434:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	60fb      	str	r3, [r7, #12]
        continue;
 800e43c:	e041      	b.n	800e4c2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800e43e:	f7ff ff0d 	bl	800e25c <ip_frag_alloc_pbuf_custom_ref>
 800e442:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800e444:	69bb      	ldr	r3, [r7, #24]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d103      	bne.n	800e452 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800e44a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e44c:	f7f7 fe60 	bl	8006110 <pbuf_free>
        goto memerr;
 800e450:	e08f      	b.n	800e572 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e452:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e458:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e45a:	4413      	add	r3, r2
 800e45c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800e460:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800e464:	9201      	str	r2, [sp, #4]
 800e466:	9300      	str	r3, [sp, #0]
 800e468:	4603      	mov	r3, r0
 800e46a:	2241      	movs	r2, #65	; 0x41
 800e46c:	2000      	movs	r0, #0
 800e46e:	f7f7 fc95 	bl	8005d9c <pbuf_alloced_custom>
 800e472:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800e474:	697b      	ldr	r3, [r7, #20]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d106      	bne.n	800e488 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800e47a:	69b8      	ldr	r0, [r7, #24]
 800e47c:	f7ff fef6 	bl	800e26c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800e480:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e482:	f7f7 fe45 	bl	8006110 <pbuf_free>
        goto memerr;
 800e486:	e074      	b.n	800e572 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800e488:	68f8      	ldr	r0, [r7, #12]
 800e48a:	f7f7 fee1 	bl	8006250 <pbuf_ref>
      pcr->original = p;
 800e48e:	69bb      	ldr	r3, [r7, #24]
 800e490:	68fa      	ldr	r2, [r7, #12]
 800e492:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800e494:	69bb      	ldr	r3, [r7, #24]
 800e496:	4a3f      	ldr	r2, [pc, #252]	; (800e594 <ip4_frag+0x288>)
 800e498:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800e49a:	6979      	ldr	r1, [r7, #20]
 800e49c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e49e:	f7f7 fef9 	bl	8006294 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800e4a2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800e4a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e4aa:	1ad3      	subs	r3, r2, r3
 800e4ac:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800e4b0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d004      	beq.n	800e4c2 <ip4_frag+0x1b6>
        poff = 0;
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800e4c2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d196      	bne.n	800e3f8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800e4ca:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e4cc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e4d0:	4413      	add	r3, r2
 800e4d2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800e4d4:	68bb      	ldr	r3, [r7, #8]
 800e4d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e4d8:	f1a3 0213 	sub.w	r2, r3, #19
 800e4dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e4e0:	429a      	cmp	r2, r3
 800e4e2:	bfcc      	ite	gt
 800e4e4:	2301      	movgt	r3, #1
 800e4e6:	2300      	movle	r3, #0
 800e4e8:	b2db      	uxtb	r3, r3
 800e4ea:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800e4ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e4f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e4f4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800e4f6:	6a3b      	ldr	r3, [r7, #32]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d002      	beq.n	800e502 <ip4_frag+0x1f6>
 800e4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d003      	beq.n	800e50a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800e502:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e504:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e508:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800e50a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e50c:	4618      	mov	r0, r3
 800e50e:	f7f6 faa1 	bl	8004a54 <lwip_htons>
 800e512:	4603      	mov	r3, r0
 800e514:	461a      	mov	r2, r3
 800e516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e518:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800e51a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e51c:	3314      	adds	r3, #20
 800e51e:	b29b      	uxth	r3, r3
 800e520:	4618      	mov	r0, r3
 800e522:	f7f6 fa97 	bl	8004a54 <lwip_htons>
 800e526:	4603      	mov	r3, r0
 800e528:	461a      	mov	r2, r3
 800e52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e52c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800e52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e530:	2200      	movs	r2, #0
 800e532:	729a      	strb	r2, [r3, #10]
 800e534:	2200      	movs	r2, #0
 800e536:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800e538:	68bb      	ldr	r3, [r7, #8]
 800e53a:	695b      	ldr	r3, [r3, #20]
 800e53c:	687a      	ldr	r2, [r7, #4]
 800e53e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e540:	68b8      	ldr	r0, [r7, #8]
 800e542:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800e544:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e546:	f7f7 fde3 	bl	8006110 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800e54a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e54e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e550:	1ad3      	subs	r3, r2, r3
 800e552:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800e556:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800e55a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e55c:	4413      	add	r3, r2
 800e55e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800e562:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e566:	2b00      	cmp	r3, #0
 800e568:	f47f af19 	bne.w	800e39e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800e56c:	2300      	movs	r3, #0
 800e56e:	e002      	b.n	800e576 <ip4_frag+0x26a>
      goto memerr;
 800e570:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800e572:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800e576:	4618      	mov	r0, r3
 800e578:	3748      	adds	r7, #72	; 0x48
 800e57a:	46bd      	mov	sp, r7
 800e57c:	bd80      	pop	{r7, pc}
 800e57e:	bf00      	nop
 800e580:	08011ec8 	.word	0x08011ec8
 800e584:	080120a4 	.word	0x080120a4
 800e588:	08011f10 	.word	0x08011f10
 800e58c:	080120c0 	.word	0x080120c0
 800e590:	080120e0 	.word	0x080120e0
 800e594:	0800e2a5 	.word	0x0800e2a5

0800e598 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b086      	sub	sp, #24
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
 800e5a0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800e5a2:	230e      	movs	r3, #14
 800e5a4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	895b      	ldrh	r3, [r3, #10]
 800e5aa:	2b0e      	cmp	r3, #14
 800e5ac:	d96e      	bls.n	800e68c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	7bdb      	ldrb	r3, [r3, #15]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d106      	bne.n	800e5c4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800e5b6:	683b      	ldr	r3, [r7, #0]
 800e5b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e5bc:	3301      	adds	r3, #1
 800e5be:	b2da      	uxtb	r2, r3
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	685b      	ldr	r3, [r3, #4]
 800e5c8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800e5ca:	693b      	ldr	r3, [r7, #16]
 800e5cc:	7b1a      	ldrb	r2, [r3, #12]
 800e5ce:	7b5b      	ldrb	r3, [r3, #13]
 800e5d0:	021b      	lsls	r3, r3, #8
 800e5d2:	4313      	orrs	r3, r2
 800e5d4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800e5d6:	693b      	ldr	r3, [r7, #16]
 800e5d8:	781b      	ldrb	r3, [r3, #0]
 800e5da:	f003 0301 	and.w	r3, r3, #1
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d023      	beq.n	800e62a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800e5e2:	693b      	ldr	r3, [r7, #16]
 800e5e4:	781b      	ldrb	r3, [r3, #0]
 800e5e6:	2b01      	cmp	r3, #1
 800e5e8:	d10f      	bne.n	800e60a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e5ea:	693b      	ldr	r3, [r7, #16]
 800e5ec:	785b      	ldrb	r3, [r3, #1]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d11b      	bne.n	800e62a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800e5f2:	693b      	ldr	r3, [r7, #16]
 800e5f4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e5f6:	2b5e      	cmp	r3, #94	; 0x5e
 800e5f8:	d117      	bne.n	800e62a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	7b5b      	ldrb	r3, [r3, #13]
 800e5fe:	f043 0310 	orr.w	r3, r3, #16
 800e602:	b2da      	uxtb	r2, r3
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	735a      	strb	r2, [r3, #13]
 800e608:	e00f      	b.n	800e62a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800e60a:	693b      	ldr	r3, [r7, #16]
 800e60c:	2206      	movs	r2, #6
 800e60e:	4928      	ldr	r1, [pc, #160]	; (800e6b0 <ethernet_input+0x118>)
 800e610:	4618      	mov	r0, r3
 800e612:	f000 f9ec 	bl	800e9ee <memcmp>
 800e616:	4603      	mov	r3, r0
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d106      	bne.n	800e62a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	7b5b      	ldrb	r3, [r3, #13]
 800e620:	f043 0308 	orr.w	r3, r3, #8
 800e624:	b2da      	uxtb	r2, r3
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800e62a:	89fb      	ldrh	r3, [r7, #14]
 800e62c:	2b08      	cmp	r3, #8
 800e62e:	d003      	beq.n	800e638 <ethernet_input+0xa0>
 800e630:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800e634:	d014      	beq.n	800e660 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800e636:	e032      	b.n	800e69e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e63e:	f003 0308 	and.w	r3, r3, #8
 800e642:	2b00      	cmp	r3, #0
 800e644:	d024      	beq.n	800e690 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e646:	8afb      	ldrh	r3, [r7, #22]
 800e648:	4619      	mov	r1, r3
 800e64a:	6878      	ldr	r0, [r7, #4]
 800e64c:	f7f7 fcda 	bl	8006004 <pbuf_remove_header>
 800e650:	4603      	mov	r3, r0
 800e652:	2b00      	cmp	r3, #0
 800e654:	d11e      	bne.n	800e694 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800e656:	6839      	ldr	r1, [r7, #0]
 800e658:	6878      	ldr	r0, [r7, #4]
 800e65a:	f7fe ff21 	bl	800d4a0 <ip4_input>
      break;
 800e65e:	e013      	b.n	800e688 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e660:	683b      	ldr	r3, [r7, #0]
 800e662:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e666:	f003 0308 	and.w	r3, r3, #8
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d014      	beq.n	800e698 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e66e:	8afb      	ldrh	r3, [r7, #22]
 800e670:	4619      	mov	r1, r3
 800e672:	6878      	ldr	r0, [r7, #4]
 800e674:	f7f7 fcc6 	bl	8006004 <pbuf_remove_header>
 800e678:	4603      	mov	r3, r0
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d10e      	bne.n	800e69c <ethernet_input+0x104>
        etharp_input(p, netif);
 800e67e:	6839      	ldr	r1, [r7, #0]
 800e680:	6878      	ldr	r0, [r7, #4]
 800e682:	f7fe f8c1 	bl	800c808 <etharp_input>
      break;
 800e686:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800e688:	2300      	movs	r3, #0
 800e68a:	e00c      	b.n	800e6a6 <ethernet_input+0x10e>
    goto free_and_return;
 800e68c:	bf00      	nop
 800e68e:	e006      	b.n	800e69e <ethernet_input+0x106>
        goto free_and_return;
 800e690:	bf00      	nop
 800e692:	e004      	b.n	800e69e <ethernet_input+0x106>
        goto free_and_return;
 800e694:	bf00      	nop
 800e696:	e002      	b.n	800e69e <ethernet_input+0x106>
        goto free_and_return;
 800e698:	bf00      	nop
 800e69a:	e000      	b.n	800e69e <ethernet_input+0x106>
        goto free_and_return;
 800e69c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800e69e:	6878      	ldr	r0, [r7, #4]
 800e6a0:	f7f7 fd36 	bl	8006110 <pbuf_free>
  return ERR_OK;
 800e6a4:	2300      	movs	r3, #0
}
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	3718      	adds	r7, #24
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	bd80      	pop	{r7, pc}
 800e6ae:	bf00      	nop
 800e6b0:	08012274 	.word	0x08012274

0800e6b4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b086      	sub	sp, #24
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	60f8      	str	r0, [r7, #12]
 800e6bc:	60b9      	str	r1, [r7, #8]
 800e6be:	607a      	str	r2, [r7, #4]
 800e6c0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800e6c2:	8c3b      	ldrh	r3, [r7, #32]
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	f7f6 f9c5 	bl	8004a54 <lwip_htons>
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800e6ce:	210e      	movs	r1, #14
 800e6d0:	68b8      	ldr	r0, [r7, #8]
 800e6d2:	f7f7 fc87 	bl	8005fe4 <pbuf_add_header>
 800e6d6:	4603      	mov	r3, r0
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d125      	bne.n	800e728 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800e6dc:	68bb      	ldr	r3, [r7, #8]
 800e6de:	685b      	ldr	r3, [r3, #4]
 800e6e0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800e6e2:	693b      	ldr	r3, [r7, #16]
 800e6e4:	8afa      	ldrh	r2, [r7, #22]
 800e6e6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800e6e8:	693b      	ldr	r3, [r7, #16]
 800e6ea:	2206      	movs	r2, #6
 800e6ec:	6839      	ldr	r1, [r7, #0]
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	f000 fa15 	bl	800eb1e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800e6f4:	693b      	ldr	r3, [r7, #16]
 800e6f6:	3306      	adds	r3, #6
 800e6f8:	2206      	movs	r2, #6
 800e6fa:	6879      	ldr	r1, [r7, #4]
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f000 fa0e 	bl	800eb1e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e708:	2b06      	cmp	r3, #6
 800e70a:	d006      	beq.n	800e71a <ethernet_output+0x66>
 800e70c:	4b0a      	ldr	r3, [pc, #40]	; (800e738 <ethernet_output+0x84>)
 800e70e:	f44f 7299 	mov.w	r2, #306	; 0x132
 800e712:	490a      	ldr	r1, [pc, #40]	; (800e73c <ethernet_output+0x88>)
 800e714:	480a      	ldr	r0, [pc, #40]	; (800e740 <ethernet_output+0x8c>)
 800e716:	f000 f915 	bl	800e944 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	699b      	ldr	r3, [r3, #24]
 800e71e:	68b9      	ldr	r1, [r7, #8]
 800e720:	68f8      	ldr	r0, [r7, #12]
 800e722:	4798      	blx	r3
 800e724:	4603      	mov	r3, r0
 800e726:	e002      	b.n	800e72e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800e728:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800e72a:	f06f 0301 	mvn.w	r3, #1
}
 800e72e:	4618      	mov	r0, r3
 800e730:	3718      	adds	r7, #24
 800e732:	46bd      	mov	sp, r7
 800e734:	bd80      	pop	{r7, pc}
 800e736:	bf00      	nop
 800e738:	080120f0 	.word	0x080120f0
 800e73c:	08012128 	.word	0x08012128
 800e740:	0801215c 	.word	0x0801215c

0800e744 <rand>:
 800e744:	4b16      	ldr	r3, [pc, #88]	; (800e7a0 <rand+0x5c>)
 800e746:	b510      	push	{r4, lr}
 800e748:	681c      	ldr	r4, [r3, #0]
 800e74a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e74c:	b9b3      	cbnz	r3, 800e77c <rand+0x38>
 800e74e:	2018      	movs	r0, #24
 800e750:	f000 fa5e 	bl	800ec10 <malloc>
 800e754:	4602      	mov	r2, r0
 800e756:	6320      	str	r0, [r4, #48]	; 0x30
 800e758:	b920      	cbnz	r0, 800e764 <rand+0x20>
 800e75a:	4b12      	ldr	r3, [pc, #72]	; (800e7a4 <rand+0x60>)
 800e75c:	4812      	ldr	r0, [pc, #72]	; (800e7a8 <rand+0x64>)
 800e75e:	2152      	movs	r1, #82	; 0x52
 800e760:	f000 f9ec 	bl	800eb3c <__assert_func>
 800e764:	4911      	ldr	r1, [pc, #68]	; (800e7ac <rand+0x68>)
 800e766:	4b12      	ldr	r3, [pc, #72]	; (800e7b0 <rand+0x6c>)
 800e768:	e9c0 1300 	strd	r1, r3, [r0]
 800e76c:	4b11      	ldr	r3, [pc, #68]	; (800e7b4 <rand+0x70>)
 800e76e:	6083      	str	r3, [r0, #8]
 800e770:	230b      	movs	r3, #11
 800e772:	8183      	strh	r3, [r0, #12]
 800e774:	2100      	movs	r1, #0
 800e776:	2001      	movs	r0, #1
 800e778:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800e77c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e77e:	480e      	ldr	r0, [pc, #56]	; (800e7b8 <rand+0x74>)
 800e780:	690b      	ldr	r3, [r1, #16]
 800e782:	694c      	ldr	r4, [r1, #20]
 800e784:	4a0d      	ldr	r2, [pc, #52]	; (800e7bc <rand+0x78>)
 800e786:	4358      	muls	r0, r3
 800e788:	fb02 0004 	mla	r0, r2, r4, r0
 800e78c:	fba3 3202 	umull	r3, r2, r3, r2
 800e790:	3301      	adds	r3, #1
 800e792:	eb40 0002 	adc.w	r0, r0, r2
 800e796:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800e79a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e79e:	bd10      	pop	{r4, pc}
 800e7a0:	20000084 	.word	0x20000084
 800e7a4:	08012282 	.word	0x08012282
 800e7a8:	08012299 	.word	0x08012299
 800e7ac:	abcd330e 	.word	0xabcd330e
 800e7b0:	e66d1234 	.word	0xe66d1234
 800e7b4:	0005deec 	.word	0x0005deec
 800e7b8:	5851f42d 	.word	0x5851f42d
 800e7bc:	4c957f2d 	.word	0x4c957f2d

0800e7c0 <std>:
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	b510      	push	{r4, lr}
 800e7c4:	4604      	mov	r4, r0
 800e7c6:	e9c0 3300 	strd	r3, r3, [r0]
 800e7ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e7ce:	6083      	str	r3, [r0, #8]
 800e7d0:	8181      	strh	r1, [r0, #12]
 800e7d2:	6643      	str	r3, [r0, #100]	; 0x64
 800e7d4:	81c2      	strh	r2, [r0, #14]
 800e7d6:	6183      	str	r3, [r0, #24]
 800e7d8:	4619      	mov	r1, r3
 800e7da:	2208      	movs	r2, #8
 800e7dc:	305c      	adds	r0, #92	; 0x5c
 800e7de:	f000 f916 	bl	800ea0e <memset>
 800e7e2:	4b0d      	ldr	r3, [pc, #52]	; (800e818 <std+0x58>)
 800e7e4:	6263      	str	r3, [r4, #36]	; 0x24
 800e7e6:	4b0d      	ldr	r3, [pc, #52]	; (800e81c <std+0x5c>)
 800e7e8:	62a3      	str	r3, [r4, #40]	; 0x28
 800e7ea:	4b0d      	ldr	r3, [pc, #52]	; (800e820 <std+0x60>)
 800e7ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e7ee:	4b0d      	ldr	r3, [pc, #52]	; (800e824 <std+0x64>)
 800e7f0:	6323      	str	r3, [r4, #48]	; 0x30
 800e7f2:	4b0d      	ldr	r3, [pc, #52]	; (800e828 <std+0x68>)
 800e7f4:	6224      	str	r4, [r4, #32]
 800e7f6:	429c      	cmp	r4, r3
 800e7f8:	d006      	beq.n	800e808 <std+0x48>
 800e7fa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800e7fe:	4294      	cmp	r4, r2
 800e800:	d002      	beq.n	800e808 <std+0x48>
 800e802:	33d0      	adds	r3, #208	; 0xd0
 800e804:	429c      	cmp	r4, r3
 800e806:	d105      	bne.n	800e814 <std+0x54>
 800e808:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e80c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e810:	f000 b982 	b.w	800eb18 <__retarget_lock_init_recursive>
 800e814:	bd10      	pop	{r4, pc}
 800e816:	bf00      	nop
 800e818:	0800e969 	.word	0x0800e969
 800e81c:	0800e98b 	.word	0x0800e98b
 800e820:	0800e9c3 	.word	0x0800e9c3
 800e824:	0800e9e7 	.word	0x0800e9e7
 800e828:	2000a610 	.word	0x2000a610

0800e82c <stdio_exit_handler>:
 800e82c:	4a02      	ldr	r2, [pc, #8]	; (800e838 <stdio_exit_handler+0xc>)
 800e82e:	4903      	ldr	r1, [pc, #12]	; (800e83c <stdio_exit_handler+0x10>)
 800e830:	4803      	ldr	r0, [pc, #12]	; (800e840 <stdio_exit_handler+0x14>)
 800e832:	f000 b869 	b.w	800e908 <_fwalk_sglue>
 800e836:	bf00      	nop
 800e838:	2000002c 	.word	0x2000002c
 800e83c:	0800f42d 	.word	0x0800f42d
 800e840:	20000038 	.word	0x20000038

0800e844 <cleanup_stdio>:
 800e844:	6841      	ldr	r1, [r0, #4]
 800e846:	4b0c      	ldr	r3, [pc, #48]	; (800e878 <cleanup_stdio+0x34>)
 800e848:	4299      	cmp	r1, r3
 800e84a:	b510      	push	{r4, lr}
 800e84c:	4604      	mov	r4, r0
 800e84e:	d001      	beq.n	800e854 <cleanup_stdio+0x10>
 800e850:	f000 fdec 	bl	800f42c <_fflush_r>
 800e854:	68a1      	ldr	r1, [r4, #8]
 800e856:	4b09      	ldr	r3, [pc, #36]	; (800e87c <cleanup_stdio+0x38>)
 800e858:	4299      	cmp	r1, r3
 800e85a:	d002      	beq.n	800e862 <cleanup_stdio+0x1e>
 800e85c:	4620      	mov	r0, r4
 800e85e:	f000 fde5 	bl	800f42c <_fflush_r>
 800e862:	68e1      	ldr	r1, [r4, #12]
 800e864:	4b06      	ldr	r3, [pc, #24]	; (800e880 <cleanup_stdio+0x3c>)
 800e866:	4299      	cmp	r1, r3
 800e868:	d004      	beq.n	800e874 <cleanup_stdio+0x30>
 800e86a:	4620      	mov	r0, r4
 800e86c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e870:	f000 bddc 	b.w	800f42c <_fflush_r>
 800e874:	bd10      	pop	{r4, pc}
 800e876:	bf00      	nop
 800e878:	2000a610 	.word	0x2000a610
 800e87c:	2000a678 	.word	0x2000a678
 800e880:	2000a6e0 	.word	0x2000a6e0

0800e884 <global_stdio_init.part.0>:
 800e884:	b510      	push	{r4, lr}
 800e886:	4b0b      	ldr	r3, [pc, #44]	; (800e8b4 <global_stdio_init.part.0+0x30>)
 800e888:	4c0b      	ldr	r4, [pc, #44]	; (800e8b8 <global_stdio_init.part.0+0x34>)
 800e88a:	4a0c      	ldr	r2, [pc, #48]	; (800e8bc <global_stdio_init.part.0+0x38>)
 800e88c:	601a      	str	r2, [r3, #0]
 800e88e:	4620      	mov	r0, r4
 800e890:	2200      	movs	r2, #0
 800e892:	2104      	movs	r1, #4
 800e894:	f7ff ff94 	bl	800e7c0 <std>
 800e898:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e89c:	2201      	movs	r2, #1
 800e89e:	2109      	movs	r1, #9
 800e8a0:	f7ff ff8e 	bl	800e7c0 <std>
 800e8a4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e8a8:	2202      	movs	r2, #2
 800e8aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e8ae:	2112      	movs	r1, #18
 800e8b0:	f7ff bf86 	b.w	800e7c0 <std>
 800e8b4:	2000a748 	.word	0x2000a748
 800e8b8:	2000a610 	.word	0x2000a610
 800e8bc:	0800e82d 	.word	0x0800e82d

0800e8c0 <__sfp_lock_acquire>:
 800e8c0:	4801      	ldr	r0, [pc, #4]	; (800e8c8 <__sfp_lock_acquire+0x8>)
 800e8c2:	f000 b92a 	b.w	800eb1a <__retarget_lock_acquire_recursive>
 800e8c6:	bf00      	nop
 800e8c8:	2000a751 	.word	0x2000a751

0800e8cc <__sfp_lock_release>:
 800e8cc:	4801      	ldr	r0, [pc, #4]	; (800e8d4 <__sfp_lock_release+0x8>)
 800e8ce:	f000 b925 	b.w	800eb1c <__retarget_lock_release_recursive>
 800e8d2:	bf00      	nop
 800e8d4:	2000a751 	.word	0x2000a751

0800e8d8 <__sinit>:
 800e8d8:	b510      	push	{r4, lr}
 800e8da:	4604      	mov	r4, r0
 800e8dc:	f7ff fff0 	bl	800e8c0 <__sfp_lock_acquire>
 800e8e0:	6a23      	ldr	r3, [r4, #32]
 800e8e2:	b11b      	cbz	r3, 800e8ec <__sinit+0x14>
 800e8e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e8e8:	f7ff bff0 	b.w	800e8cc <__sfp_lock_release>
 800e8ec:	4b04      	ldr	r3, [pc, #16]	; (800e900 <__sinit+0x28>)
 800e8ee:	6223      	str	r3, [r4, #32]
 800e8f0:	4b04      	ldr	r3, [pc, #16]	; (800e904 <__sinit+0x2c>)
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d1f5      	bne.n	800e8e4 <__sinit+0xc>
 800e8f8:	f7ff ffc4 	bl	800e884 <global_stdio_init.part.0>
 800e8fc:	e7f2      	b.n	800e8e4 <__sinit+0xc>
 800e8fe:	bf00      	nop
 800e900:	0800e845 	.word	0x0800e845
 800e904:	2000a748 	.word	0x2000a748

0800e908 <_fwalk_sglue>:
 800e908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e90c:	4607      	mov	r7, r0
 800e90e:	4688      	mov	r8, r1
 800e910:	4614      	mov	r4, r2
 800e912:	2600      	movs	r6, #0
 800e914:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e918:	f1b9 0901 	subs.w	r9, r9, #1
 800e91c:	d505      	bpl.n	800e92a <_fwalk_sglue+0x22>
 800e91e:	6824      	ldr	r4, [r4, #0]
 800e920:	2c00      	cmp	r4, #0
 800e922:	d1f7      	bne.n	800e914 <_fwalk_sglue+0xc>
 800e924:	4630      	mov	r0, r6
 800e926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e92a:	89ab      	ldrh	r3, [r5, #12]
 800e92c:	2b01      	cmp	r3, #1
 800e92e:	d907      	bls.n	800e940 <_fwalk_sglue+0x38>
 800e930:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e934:	3301      	adds	r3, #1
 800e936:	d003      	beq.n	800e940 <_fwalk_sglue+0x38>
 800e938:	4629      	mov	r1, r5
 800e93a:	4638      	mov	r0, r7
 800e93c:	47c0      	blx	r8
 800e93e:	4306      	orrs	r6, r0
 800e940:	3568      	adds	r5, #104	; 0x68
 800e942:	e7e9      	b.n	800e918 <_fwalk_sglue+0x10>

0800e944 <iprintf>:
 800e944:	b40f      	push	{r0, r1, r2, r3}
 800e946:	b507      	push	{r0, r1, r2, lr}
 800e948:	4906      	ldr	r1, [pc, #24]	; (800e964 <iprintf+0x20>)
 800e94a:	ab04      	add	r3, sp, #16
 800e94c:	6808      	ldr	r0, [r1, #0]
 800e94e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e952:	6881      	ldr	r1, [r0, #8]
 800e954:	9301      	str	r3, [sp, #4]
 800e956:	f000 fa39 	bl	800edcc <_vfiprintf_r>
 800e95a:	b003      	add	sp, #12
 800e95c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e960:	b004      	add	sp, #16
 800e962:	4770      	bx	lr
 800e964:	20000084 	.word	0x20000084

0800e968 <__sread>:
 800e968:	b510      	push	{r4, lr}
 800e96a:	460c      	mov	r4, r1
 800e96c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e970:	f000 f88a 	bl	800ea88 <_read_r>
 800e974:	2800      	cmp	r0, #0
 800e976:	bfab      	itete	ge
 800e978:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e97a:	89a3      	ldrhlt	r3, [r4, #12]
 800e97c:	181b      	addge	r3, r3, r0
 800e97e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e982:	bfac      	ite	ge
 800e984:	6563      	strge	r3, [r4, #84]	; 0x54
 800e986:	81a3      	strhlt	r3, [r4, #12]
 800e988:	bd10      	pop	{r4, pc}

0800e98a <__swrite>:
 800e98a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e98e:	461f      	mov	r7, r3
 800e990:	898b      	ldrh	r3, [r1, #12]
 800e992:	05db      	lsls	r3, r3, #23
 800e994:	4605      	mov	r5, r0
 800e996:	460c      	mov	r4, r1
 800e998:	4616      	mov	r6, r2
 800e99a:	d505      	bpl.n	800e9a8 <__swrite+0x1e>
 800e99c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9a0:	2302      	movs	r3, #2
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	f000 f85e 	bl	800ea64 <_lseek_r>
 800e9a8:	89a3      	ldrh	r3, [r4, #12]
 800e9aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e9ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e9b2:	81a3      	strh	r3, [r4, #12]
 800e9b4:	4632      	mov	r2, r6
 800e9b6:	463b      	mov	r3, r7
 800e9b8:	4628      	mov	r0, r5
 800e9ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e9be:	f000 b875 	b.w	800eaac <_write_r>

0800e9c2 <__sseek>:
 800e9c2:	b510      	push	{r4, lr}
 800e9c4:	460c      	mov	r4, r1
 800e9c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9ca:	f000 f84b 	bl	800ea64 <_lseek_r>
 800e9ce:	1c43      	adds	r3, r0, #1
 800e9d0:	89a3      	ldrh	r3, [r4, #12]
 800e9d2:	bf15      	itete	ne
 800e9d4:	6560      	strne	r0, [r4, #84]	; 0x54
 800e9d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e9da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e9de:	81a3      	strheq	r3, [r4, #12]
 800e9e0:	bf18      	it	ne
 800e9e2:	81a3      	strhne	r3, [r4, #12]
 800e9e4:	bd10      	pop	{r4, pc}

0800e9e6 <__sclose>:
 800e9e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9ea:	f000 b82b 	b.w	800ea44 <_close_r>

0800e9ee <memcmp>:
 800e9ee:	b510      	push	{r4, lr}
 800e9f0:	3901      	subs	r1, #1
 800e9f2:	4402      	add	r2, r0
 800e9f4:	4290      	cmp	r0, r2
 800e9f6:	d101      	bne.n	800e9fc <memcmp+0xe>
 800e9f8:	2000      	movs	r0, #0
 800e9fa:	e005      	b.n	800ea08 <memcmp+0x1a>
 800e9fc:	7803      	ldrb	r3, [r0, #0]
 800e9fe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ea02:	42a3      	cmp	r3, r4
 800ea04:	d001      	beq.n	800ea0a <memcmp+0x1c>
 800ea06:	1b18      	subs	r0, r3, r4
 800ea08:	bd10      	pop	{r4, pc}
 800ea0a:	3001      	adds	r0, #1
 800ea0c:	e7f2      	b.n	800e9f4 <memcmp+0x6>

0800ea0e <memset>:
 800ea0e:	4402      	add	r2, r0
 800ea10:	4603      	mov	r3, r0
 800ea12:	4293      	cmp	r3, r2
 800ea14:	d100      	bne.n	800ea18 <memset+0xa>
 800ea16:	4770      	bx	lr
 800ea18:	f803 1b01 	strb.w	r1, [r3], #1
 800ea1c:	e7f9      	b.n	800ea12 <memset+0x4>

0800ea1e <strncpy>:
 800ea1e:	b510      	push	{r4, lr}
 800ea20:	3901      	subs	r1, #1
 800ea22:	4603      	mov	r3, r0
 800ea24:	b132      	cbz	r2, 800ea34 <strncpy+0x16>
 800ea26:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ea2a:	f803 4b01 	strb.w	r4, [r3], #1
 800ea2e:	3a01      	subs	r2, #1
 800ea30:	2c00      	cmp	r4, #0
 800ea32:	d1f7      	bne.n	800ea24 <strncpy+0x6>
 800ea34:	441a      	add	r2, r3
 800ea36:	2100      	movs	r1, #0
 800ea38:	4293      	cmp	r3, r2
 800ea3a:	d100      	bne.n	800ea3e <strncpy+0x20>
 800ea3c:	bd10      	pop	{r4, pc}
 800ea3e:	f803 1b01 	strb.w	r1, [r3], #1
 800ea42:	e7f9      	b.n	800ea38 <strncpy+0x1a>

0800ea44 <_close_r>:
 800ea44:	b538      	push	{r3, r4, r5, lr}
 800ea46:	4d06      	ldr	r5, [pc, #24]	; (800ea60 <_close_r+0x1c>)
 800ea48:	2300      	movs	r3, #0
 800ea4a:	4604      	mov	r4, r0
 800ea4c:	4608      	mov	r0, r1
 800ea4e:	602b      	str	r3, [r5, #0]
 800ea50:	f7f2 f985 	bl	8000d5e <_close>
 800ea54:	1c43      	adds	r3, r0, #1
 800ea56:	d102      	bne.n	800ea5e <_close_r+0x1a>
 800ea58:	682b      	ldr	r3, [r5, #0]
 800ea5a:	b103      	cbz	r3, 800ea5e <_close_r+0x1a>
 800ea5c:	6023      	str	r3, [r4, #0]
 800ea5e:	bd38      	pop	{r3, r4, r5, pc}
 800ea60:	2000a74c 	.word	0x2000a74c

0800ea64 <_lseek_r>:
 800ea64:	b538      	push	{r3, r4, r5, lr}
 800ea66:	4d07      	ldr	r5, [pc, #28]	; (800ea84 <_lseek_r+0x20>)
 800ea68:	4604      	mov	r4, r0
 800ea6a:	4608      	mov	r0, r1
 800ea6c:	4611      	mov	r1, r2
 800ea6e:	2200      	movs	r2, #0
 800ea70:	602a      	str	r2, [r5, #0]
 800ea72:	461a      	mov	r2, r3
 800ea74:	f7f2 f99a 	bl	8000dac <_lseek>
 800ea78:	1c43      	adds	r3, r0, #1
 800ea7a:	d102      	bne.n	800ea82 <_lseek_r+0x1e>
 800ea7c:	682b      	ldr	r3, [r5, #0]
 800ea7e:	b103      	cbz	r3, 800ea82 <_lseek_r+0x1e>
 800ea80:	6023      	str	r3, [r4, #0]
 800ea82:	bd38      	pop	{r3, r4, r5, pc}
 800ea84:	2000a74c 	.word	0x2000a74c

0800ea88 <_read_r>:
 800ea88:	b538      	push	{r3, r4, r5, lr}
 800ea8a:	4d07      	ldr	r5, [pc, #28]	; (800eaa8 <_read_r+0x20>)
 800ea8c:	4604      	mov	r4, r0
 800ea8e:	4608      	mov	r0, r1
 800ea90:	4611      	mov	r1, r2
 800ea92:	2200      	movs	r2, #0
 800ea94:	602a      	str	r2, [r5, #0]
 800ea96:	461a      	mov	r2, r3
 800ea98:	f7f2 f928 	bl	8000cec <_read>
 800ea9c:	1c43      	adds	r3, r0, #1
 800ea9e:	d102      	bne.n	800eaa6 <_read_r+0x1e>
 800eaa0:	682b      	ldr	r3, [r5, #0]
 800eaa2:	b103      	cbz	r3, 800eaa6 <_read_r+0x1e>
 800eaa4:	6023      	str	r3, [r4, #0]
 800eaa6:	bd38      	pop	{r3, r4, r5, pc}
 800eaa8:	2000a74c 	.word	0x2000a74c

0800eaac <_write_r>:
 800eaac:	b538      	push	{r3, r4, r5, lr}
 800eaae:	4d07      	ldr	r5, [pc, #28]	; (800eacc <_write_r+0x20>)
 800eab0:	4604      	mov	r4, r0
 800eab2:	4608      	mov	r0, r1
 800eab4:	4611      	mov	r1, r2
 800eab6:	2200      	movs	r2, #0
 800eab8:	602a      	str	r2, [r5, #0]
 800eaba:	461a      	mov	r2, r3
 800eabc:	f7f2 f933 	bl	8000d26 <_write>
 800eac0:	1c43      	adds	r3, r0, #1
 800eac2:	d102      	bne.n	800eaca <_write_r+0x1e>
 800eac4:	682b      	ldr	r3, [r5, #0]
 800eac6:	b103      	cbz	r3, 800eaca <_write_r+0x1e>
 800eac8:	6023      	str	r3, [r4, #0]
 800eaca:	bd38      	pop	{r3, r4, r5, pc}
 800eacc:	2000a74c 	.word	0x2000a74c

0800ead0 <__libc_init_array>:
 800ead0:	b570      	push	{r4, r5, r6, lr}
 800ead2:	4d0d      	ldr	r5, [pc, #52]	; (800eb08 <__libc_init_array+0x38>)
 800ead4:	4c0d      	ldr	r4, [pc, #52]	; (800eb0c <__libc_init_array+0x3c>)
 800ead6:	1b64      	subs	r4, r4, r5
 800ead8:	10a4      	asrs	r4, r4, #2
 800eada:	2600      	movs	r6, #0
 800eadc:	42a6      	cmp	r6, r4
 800eade:	d109      	bne.n	800eaf4 <__libc_init_array+0x24>
 800eae0:	4d0b      	ldr	r5, [pc, #44]	; (800eb10 <__libc_init_array+0x40>)
 800eae2:	4c0c      	ldr	r4, [pc, #48]	; (800eb14 <__libc_init_array+0x44>)
 800eae4:	f000 fe52 	bl	800f78c <_init>
 800eae8:	1b64      	subs	r4, r4, r5
 800eaea:	10a4      	asrs	r4, r4, #2
 800eaec:	2600      	movs	r6, #0
 800eaee:	42a6      	cmp	r6, r4
 800eaf0:	d105      	bne.n	800eafe <__libc_init_array+0x2e>
 800eaf2:	bd70      	pop	{r4, r5, r6, pc}
 800eaf4:	f855 3b04 	ldr.w	r3, [r5], #4
 800eaf8:	4798      	blx	r3
 800eafa:	3601      	adds	r6, #1
 800eafc:	e7ee      	b.n	800eadc <__libc_init_array+0xc>
 800eafe:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb02:	4798      	blx	r3
 800eb04:	3601      	adds	r6, #1
 800eb06:	e7f2      	b.n	800eaee <__libc_init_array+0x1e>
 800eb08:	08012368 	.word	0x08012368
 800eb0c:	08012368 	.word	0x08012368
 800eb10:	08012368 	.word	0x08012368
 800eb14:	0801236c 	.word	0x0801236c

0800eb18 <__retarget_lock_init_recursive>:
 800eb18:	4770      	bx	lr

0800eb1a <__retarget_lock_acquire_recursive>:
 800eb1a:	4770      	bx	lr

0800eb1c <__retarget_lock_release_recursive>:
 800eb1c:	4770      	bx	lr

0800eb1e <memcpy>:
 800eb1e:	440a      	add	r2, r1
 800eb20:	4291      	cmp	r1, r2
 800eb22:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800eb26:	d100      	bne.n	800eb2a <memcpy+0xc>
 800eb28:	4770      	bx	lr
 800eb2a:	b510      	push	{r4, lr}
 800eb2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb30:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eb34:	4291      	cmp	r1, r2
 800eb36:	d1f9      	bne.n	800eb2c <memcpy+0xe>
 800eb38:	bd10      	pop	{r4, pc}
	...

0800eb3c <__assert_func>:
 800eb3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eb3e:	4614      	mov	r4, r2
 800eb40:	461a      	mov	r2, r3
 800eb42:	4b09      	ldr	r3, [pc, #36]	; (800eb68 <__assert_func+0x2c>)
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	4605      	mov	r5, r0
 800eb48:	68d8      	ldr	r0, [r3, #12]
 800eb4a:	b14c      	cbz	r4, 800eb60 <__assert_func+0x24>
 800eb4c:	4b07      	ldr	r3, [pc, #28]	; (800eb6c <__assert_func+0x30>)
 800eb4e:	9100      	str	r1, [sp, #0]
 800eb50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eb54:	4906      	ldr	r1, [pc, #24]	; (800eb70 <__assert_func+0x34>)
 800eb56:	462b      	mov	r3, r5
 800eb58:	f000 fc90 	bl	800f47c <fiprintf>
 800eb5c:	f000 fd46 	bl	800f5ec <abort>
 800eb60:	4b04      	ldr	r3, [pc, #16]	; (800eb74 <__assert_func+0x38>)
 800eb62:	461c      	mov	r4, r3
 800eb64:	e7f3      	b.n	800eb4e <__assert_func+0x12>
 800eb66:	bf00      	nop
 800eb68:	20000084 	.word	0x20000084
 800eb6c:	080122f1 	.word	0x080122f1
 800eb70:	080122fe 	.word	0x080122fe
 800eb74:	0801232c 	.word	0x0801232c

0800eb78 <_free_r>:
 800eb78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eb7a:	2900      	cmp	r1, #0
 800eb7c:	d044      	beq.n	800ec08 <_free_r+0x90>
 800eb7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb82:	9001      	str	r0, [sp, #4]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	f1a1 0404 	sub.w	r4, r1, #4
 800eb8a:	bfb8      	it	lt
 800eb8c:	18e4      	addlt	r4, r4, r3
 800eb8e:	f000 f8e7 	bl	800ed60 <__malloc_lock>
 800eb92:	4a1e      	ldr	r2, [pc, #120]	; (800ec0c <_free_r+0x94>)
 800eb94:	9801      	ldr	r0, [sp, #4]
 800eb96:	6813      	ldr	r3, [r2, #0]
 800eb98:	b933      	cbnz	r3, 800eba8 <_free_r+0x30>
 800eb9a:	6063      	str	r3, [r4, #4]
 800eb9c:	6014      	str	r4, [r2, #0]
 800eb9e:	b003      	add	sp, #12
 800eba0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eba4:	f000 b8e2 	b.w	800ed6c <__malloc_unlock>
 800eba8:	42a3      	cmp	r3, r4
 800ebaa:	d908      	bls.n	800ebbe <_free_r+0x46>
 800ebac:	6825      	ldr	r5, [r4, #0]
 800ebae:	1961      	adds	r1, r4, r5
 800ebb0:	428b      	cmp	r3, r1
 800ebb2:	bf01      	itttt	eq
 800ebb4:	6819      	ldreq	r1, [r3, #0]
 800ebb6:	685b      	ldreq	r3, [r3, #4]
 800ebb8:	1949      	addeq	r1, r1, r5
 800ebba:	6021      	streq	r1, [r4, #0]
 800ebbc:	e7ed      	b.n	800eb9a <_free_r+0x22>
 800ebbe:	461a      	mov	r2, r3
 800ebc0:	685b      	ldr	r3, [r3, #4]
 800ebc2:	b10b      	cbz	r3, 800ebc8 <_free_r+0x50>
 800ebc4:	42a3      	cmp	r3, r4
 800ebc6:	d9fa      	bls.n	800ebbe <_free_r+0x46>
 800ebc8:	6811      	ldr	r1, [r2, #0]
 800ebca:	1855      	adds	r5, r2, r1
 800ebcc:	42a5      	cmp	r5, r4
 800ebce:	d10b      	bne.n	800ebe8 <_free_r+0x70>
 800ebd0:	6824      	ldr	r4, [r4, #0]
 800ebd2:	4421      	add	r1, r4
 800ebd4:	1854      	adds	r4, r2, r1
 800ebd6:	42a3      	cmp	r3, r4
 800ebd8:	6011      	str	r1, [r2, #0]
 800ebda:	d1e0      	bne.n	800eb9e <_free_r+0x26>
 800ebdc:	681c      	ldr	r4, [r3, #0]
 800ebde:	685b      	ldr	r3, [r3, #4]
 800ebe0:	6053      	str	r3, [r2, #4]
 800ebe2:	440c      	add	r4, r1
 800ebe4:	6014      	str	r4, [r2, #0]
 800ebe6:	e7da      	b.n	800eb9e <_free_r+0x26>
 800ebe8:	d902      	bls.n	800ebf0 <_free_r+0x78>
 800ebea:	230c      	movs	r3, #12
 800ebec:	6003      	str	r3, [r0, #0]
 800ebee:	e7d6      	b.n	800eb9e <_free_r+0x26>
 800ebf0:	6825      	ldr	r5, [r4, #0]
 800ebf2:	1961      	adds	r1, r4, r5
 800ebf4:	428b      	cmp	r3, r1
 800ebf6:	bf04      	itt	eq
 800ebf8:	6819      	ldreq	r1, [r3, #0]
 800ebfa:	685b      	ldreq	r3, [r3, #4]
 800ebfc:	6063      	str	r3, [r4, #4]
 800ebfe:	bf04      	itt	eq
 800ec00:	1949      	addeq	r1, r1, r5
 800ec02:	6021      	streq	r1, [r4, #0]
 800ec04:	6054      	str	r4, [r2, #4]
 800ec06:	e7ca      	b.n	800eb9e <_free_r+0x26>
 800ec08:	b003      	add	sp, #12
 800ec0a:	bd30      	pop	{r4, r5, pc}
 800ec0c:	2000a754 	.word	0x2000a754

0800ec10 <malloc>:
 800ec10:	4b02      	ldr	r3, [pc, #8]	; (800ec1c <malloc+0xc>)
 800ec12:	4601      	mov	r1, r0
 800ec14:	6818      	ldr	r0, [r3, #0]
 800ec16:	f000 b823 	b.w	800ec60 <_malloc_r>
 800ec1a:	bf00      	nop
 800ec1c:	20000084 	.word	0x20000084

0800ec20 <sbrk_aligned>:
 800ec20:	b570      	push	{r4, r5, r6, lr}
 800ec22:	4e0e      	ldr	r6, [pc, #56]	; (800ec5c <sbrk_aligned+0x3c>)
 800ec24:	460c      	mov	r4, r1
 800ec26:	6831      	ldr	r1, [r6, #0]
 800ec28:	4605      	mov	r5, r0
 800ec2a:	b911      	cbnz	r1, 800ec32 <sbrk_aligned+0x12>
 800ec2c:	f000 fcce 	bl	800f5cc <_sbrk_r>
 800ec30:	6030      	str	r0, [r6, #0]
 800ec32:	4621      	mov	r1, r4
 800ec34:	4628      	mov	r0, r5
 800ec36:	f000 fcc9 	bl	800f5cc <_sbrk_r>
 800ec3a:	1c43      	adds	r3, r0, #1
 800ec3c:	d00a      	beq.n	800ec54 <sbrk_aligned+0x34>
 800ec3e:	1cc4      	adds	r4, r0, #3
 800ec40:	f024 0403 	bic.w	r4, r4, #3
 800ec44:	42a0      	cmp	r0, r4
 800ec46:	d007      	beq.n	800ec58 <sbrk_aligned+0x38>
 800ec48:	1a21      	subs	r1, r4, r0
 800ec4a:	4628      	mov	r0, r5
 800ec4c:	f000 fcbe 	bl	800f5cc <_sbrk_r>
 800ec50:	3001      	adds	r0, #1
 800ec52:	d101      	bne.n	800ec58 <sbrk_aligned+0x38>
 800ec54:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ec58:	4620      	mov	r0, r4
 800ec5a:	bd70      	pop	{r4, r5, r6, pc}
 800ec5c:	2000a758 	.word	0x2000a758

0800ec60 <_malloc_r>:
 800ec60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec64:	1ccd      	adds	r5, r1, #3
 800ec66:	f025 0503 	bic.w	r5, r5, #3
 800ec6a:	3508      	adds	r5, #8
 800ec6c:	2d0c      	cmp	r5, #12
 800ec6e:	bf38      	it	cc
 800ec70:	250c      	movcc	r5, #12
 800ec72:	2d00      	cmp	r5, #0
 800ec74:	4607      	mov	r7, r0
 800ec76:	db01      	blt.n	800ec7c <_malloc_r+0x1c>
 800ec78:	42a9      	cmp	r1, r5
 800ec7a:	d905      	bls.n	800ec88 <_malloc_r+0x28>
 800ec7c:	230c      	movs	r3, #12
 800ec7e:	603b      	str	r3, [r7, #0]
 800ec80:	2600      	movs	r6, #0
 800ec82:	4630      	mov	r0, r6
 800ec84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec88:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ed5c <_malloc_r+0xfc>
 800ec8c:	f000 f868 	bl	800ed60 <__malloc_lock>
 800ec90:	f8d8 3000 	ldr.w	r3, [r8]
 800ec94:	461c      	mov	r4, r3
 800ec96:	bb5c      	cbnz	r4, 800ecf0 <_malloc_r+0x90>
 800ec98:	4629      	mov	r1, r5
 800ec9a:	4638      	mov	r0, r7
 800ec9c:	f7ff ffc0 	bl	800ec20 <sbrk_aligned>
 800eca0:	1c43      	adds	r3, r0, #1
 800eca2:	4604      	mov	r4, r0
 800eca4:	d155      	bne.n	800ed52 <_malloc_r+0xf2>
 800eca6:	f8d8 4000 	ldr.w	r4, [r8]
 800ecaa:	4626      	mov	r6, r4
 800ecac:	2e00      	cmp	r6, #0
 800ecae:	d145      	bne.n	800ed3c <_malloc_r+0xdc>
 800ecb0:	2c00      	cmp	r4, #0
 800ecb2:	d048      	beq.n	800ed46 <_malloc_r+0xe6>
 800ecb4:	6823      	ldr	r3, [r4, #0]
 800ecb6:	4631      	mov	r1, r6
 800ecb8:	4638      	mov	r0, r7
 800ecba:	eb04 0903 	add.w	r9, r4, r3
 800ecbe:	f000 fc85 	bl	800f5cc <_sbrk_r>
 800ecc2:	4581      	cmp	r9, r0
 800ecc4:	d13f      	bne.n	800ed46 <_malloc_r+0xe6>
 800ecc6:	6821      	ldr	r1, [r4, #0]
 800ecc8:	1a6d      	subs	r5, r5, r1
 800ecca:	4629      	mov	r1, r5
 800eccc:	4638      	mov	r0, r7
 800ecce:	f7ff ffa7 	bl	800ec20 <sbrk_aligned>
 800ecd2:	3001      	adds	r0, #1
 800ecd4:	d037      	beq.n	800ed46 <_malloc_r+0xe6>
 800ecd6:	6823      	ldr	r3, [r4, #0]
 800ecd8:	442b      	add	r3, r5
 800ecda:	6023      	str	r3, [r4, #0]
 800ecdc:	f8d8 3000 	ldr.w	r3, [r8]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d038      	beq.n	800ed56 <_malloc_r+0xf6>
 800ece4:	685a      	ldr	r2, [r3, #4]
 800ece6:	42a2      	cmp	r2, r4
 800ece8:	d12b      	bne.n	800ed42 <_malloc_r+0xe2>
 800ecea:	2200      	movs	r2, #0
 800ecec:	605a      	str	r2, [r3, #4]
 800ecee:	e00f      	b.n	800ed10 <_malloc_r+0xb0>
 800ecf0:	6822      	ldr	r2, [r4, #0]
 800ecf2:	1b52      	subs	r2, r2, r5
 800ecf4:	d41f      	bmi.n	800ed36 <_malloc_r+0xd6>
 800ecf6:	2a0b      	cmp	r2, #11
 800ecf8:	d917      	bls.n	800ed2a <_malloc_r+0xca>
 800ecfa:	1961      	adds	r1, r4, r5
 800ecfc:	42a3      	cmp	r3, r4
 800ecfe:	6025      	str	r5, [r4, #0]
 800ed00:	bf18      	it	ne
 800ed02:	6059      	strne	r1, [r3, #4]
 800ed04:	6863      	ldr	r3, [r4, #4]
 800ed06:	bf08      	it	eq
 800ed08:	f8c8 1000 	streq.w	r1, [r8]
 800ed0c:	5162      	str	r2, [r4, r5]
 800ed0e:	604b      	str	r3, [r1, #4]
 800ed10:	4638      	mov	r0, r7
 800ed12:	f104 060b 	add.w	r6, r4, #11
 800ed16:	f000 f829 	bl	800ed6c <__malloc_unlock>
 800ed1a:	f026 0607 	bic.w	r6, r6, #7
 800ed1e:	1d23      	adds	r3, r4, #4
 800ed20:	1af2      	subs	r2, r6, r3
 800ed22:	d0ae      	beq.n	800ec82 <_malloc_r+0x22>
 800ed24:	1b9b      	subs	r3, r3, r6
 800ed26:	50a3      	str	r3, [r4, r2]
 800ed28:	e7ab      	b.n	800ec82 <_malloc_r+0x22>
 800ed2a:	42a3      	cmp	r3, r4
 800ed2c:	6862      	ldr	r2, [r4, #4]
 800ed2e:	d1dd      	bne.n	800ecec <_malloc_r+0x8c>
 800ed30:	f8c8 2000 	str.w	r2, [r8]
 800ed34:	e7ec      	b.n	800ed10 <_malloc_r+0xb0>
 800ed36:	4623      	mov	r3, r4
 800ed38:	6864      	ldr	r4, [r4, #4]
 800ed3a:	e7ac      	b.n	800ec96 <_malloc_r+0x36>
 800ed3c:	4634      	mov	r4, r6
 800ed3e:	6876      	ldr	r6, [r6, #4]
 800ed40:	e7b4      	b.n	800ecac <_malloc_r+0x4c>
 800ed42:	4613      	mov	r3, r2
 800ed44:	e7cc      	b.n	800ece0 <_malloc_r+0x80>
 800ed46:	230c      	movs	r3, #12
 800ed48:	603b      	str	r3, [r7, #0]
 800ed4a:	4638      	mov	r0, r7
 800ed4c:	f000 f80e 	bl	800ed6c <__malloc_unlock>
 800ed50:	e797      	b.n	800ec82 <_malloc_r+0x22>
 800ed52:	6025      	str	r5, [r4, #0]
 800ed54:	e7dc      	b.n	800ed10 <_malloc_r+0xb0>
 800ed56:	605b      	str	r3, [r3, #4]
 800ed58:	deff      	udf	#255	; 0xff
 800ed5a:	bf00      	nop
 800ed5c:	2000a754 	.word	0x2000a754

0800ed60 <__malloc_lock>:
 800ed60:	4801      	ldr	r0, [pc, #4]	; (800ed68 <__malloc_lock+0x8>)
 800ed62:	f7ff beda 	b.w	800eb1a <__retarget_lock_acquire_recursive>
 800ed66:	bf00      	nop
 800ed68:	2000a750 	.word	0x2000a750

0800ed6c <__malloc_unlock>:
 800ed6c:	4801      	ldr	r0, [pc, #4]	; (800ed74 <__malloc_unlock+0x8>)
 800ed6e:	f7ff bed5 	b.w	800eb1c <__retarget_lock_release_recursive>
 800ed72:	bf00      	nop
 800ed74:	2000a750 	.word	0x2000a750

0800ed78 <__sfputc_r>:
 800ed78:	6893      	ldr	r3, [r2, #8]
 800ed7a:	3b01      	subs	r3, #1
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	b410      	push	{r4}
 800ed80:	6093      	str	r3, [r2, #8]
 800ed82:	da08      	bge.n	800ed96 <__sfputc_r+0x1e>
 800ed84:	6994      	ldr	r4, [r2, #24]
 800ed86:	42a3      	cmp	r3, r4
 800ed88:	db01      	blt.n	800ed8e <__sfputc_r+0x16>
 800ed8a:	290a      	cmp	r1, #10
 800ed8c:	d103      	bne.n	800ed96 <__sfputc_r+0x1e>
 800ed8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed92:	f000 bb85 	b.w	800f4a0 <__swbuf_r>
 800ed96:	6813      	ldr	r3, [r2, #0]
 800ed98:	1c58      	adds	r0, r3, #1
 800ed9a:	6010      	str	r0, [r2, #0]
 800ed9c:	7019      	strb	r1, [r3, #0]
 800ed9e:	4608      	mov	r0, r1
 800eda0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eda4:	4770      	bx	lr

0800eda6 <__sfputs_r>:
 800eda6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eda8:	4606      	mov	r6, r0
 800edaa:	460f      	mov	r7, r1
 800edac:	4614      	mov	r4, r2
 800edae:	18d5      	adds	r5, r2, r3
 800edb0:	42ac      	cmp	r4, r5
 800edb2:	d101      	bne.n	800edb8 <__sfputs_r+0x12>
 800edb4:	2000      	movs	r0, #0
 800edb6:	e007      	b.n	800edc8 <__sfputs_r+0x22>
 800edb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edbc:	463a      	mov	r2, r7
 800edbe:	4630      	mov	r0, r6
 800edc0:	f7ff ffda 	bl	800ed78 <__sfputc_r>
 800edc4:	1c43      	adds	r3, r0, #1
 800edc6:	d1f3      	bne.n	800edb0 <__sfputs_r+0xa>
 800edc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800edcc <_vfiprintf_r>:
 800edcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edd0:	460d      	mov	r5, r1
 800edd2:	b09d      	sub	sp, #116	; 0x74
 800edd4:	4614      	mov	r4, r2
 800edd6:	4698      	mov	r8, r3
 800edd8:	4606      	mov	r6, r0
 800edda:	b118      	cbz	r0, 800ede4 <_vfiprintf_r+0x18>
 800eddc:	6a03      	ldr	r3, [r0, #32]
 800edde:	b90b      	cbnz	r3, 800ede4 <_vfiprintf_r+0x18>
 800ede0:	f7ff fd7a 	bl	800e8d8 <__sinit>
 800ede4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ede6:	07d9      	lsls	r1, r3, #31
 800ede8:	d405      	bmi.n	800edf6 <_vfiprintf_r+0x2a>
 800edea:	89ab      	ldrh	r3, [r5, #12]
 800edec:	059a      	lsls	r2, r3, #22
 800edee:	d402      	bmi.n	800edf6 <_vfiprintf_r+0x2a>
 800edf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800edf2:	f7ff fe92 	bl	800eb1a <__retarget_lock_acquire_recursive>
 800edf6:	89ab      	ldrh	r3, [r5, #12]
 800edf8:	071b      	lsls	r3, r3, #28
 800edfa:	d501      	bpl.n	800ee00 <_vfiprintf_r+0x34>
 800edfc:	692b      	ldr	r3, [r5, #16]
 800edfe:	b99b      	cbnz	r3, 800ee28 <_vfiprintf_r+0x5c>
 800ee00:	4629      	mov	r1, r5
 800ee02:	4630      	mov	r0, r6
 800ee04:	f000 fb8a 	bl	800f51c <__swsetup_r>
 800ee08:	b170      	cbz	r0, 800ee28 <_vfiprintf_r+0x5c>
 800ee0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee0c:	07dc      	lsls	r4, r3, #31
 800ee0e:	d504      	bpl.n	800ee1a <_vfiprintf_r+0x4e>
 800ee10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ee14:	b01d      	add	sp, #116	; 0x74
 800ee16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee1a:	89ab      	ldrh	r3, [r5, #12]
 800ee1c:	0598      	lsls	r0, r3, #22
 800ee1e:	d4f7      	bmi.n	800ee10 <_vfiprintf_r+0x44>
 800ee20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ee22:	f7ff fe7b 	bl	800eb1c <__retarget_lock_release_recursive>
 800ee26:	e7f3      	b.n	800ee10 <_vfiprintf_r+0x44>
 800ee28:	2300      	movs	r3, #0
 800ee2a:	9309      	str	r3, [sp, #36]	; 0x24
 800ee2c:	2320      	movs	r3, #32
 800ee2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ee32:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee36:	2330      	movs	r3, #48	; 0x30
 800ee38:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800efec <_vfiprintf_r+0x220>
 800ee3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ee40:	f04f 0901 	mov.w	r9, #1
 800ee44:	4623      	mov	r3, r4
 800ee46:	469a      	mov	sl, r3
 800ee48:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee4c:	b10a      	cbz	r2, 800ee52 <_vfiprintf_r+0x86>
 800ee4e:	2a25      	cmp	r2, #37	; 0x25
 800ee50:	d1f9      	bne.n	800ee46 <_vfiprintf_r+0x7a>
 800ee52:	ebba 0b04 	subs.w	fp, sl, r4
 800ee56:	d00b      	beq.n	800ee70 <_vfiprintf_r+0xa4>
 800ee58:	465b      	mov	r3, fp
 800ee5a:	4622      	mov	r2, r4
 800ee5c:	4629      	mov	r1, r5
 800ee5e:	4630      	mov	r0, r6
 800ee60:	f7ff ffa1 	bl	800eda6 <__sfputs_r>
 800ee64:	3001      	adds	r0, #1
 800ee66:	f000 80a9 	beq.w	800efbc <_vfiprintf_r+0x1f0>
 800ee6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ee6c:	445a      	add	r2, fp
 800ee6e:	9209      	str	r2, [sp, #36]	; 0x24
 800ee70:	f89a 3000 	ldrb.w	r3, [sl]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	f000 80a1 	beq.w	800efbc <_vfiprintf_r+0x1f0>
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ee80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee84:	f10a 0a01 	add.w	sl, sl, #1
 800ee88:	9304      	str	r3, [sp, #16]
 800ee8a:	9307      	str	r3, [sp, #28]
 800ee8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ee90:	931a      	str	r3, [sp, #104]	; 0x68
 800ee92:	4654      	mov	r4, sl
 800ee94:	2205      	movs	r2, #5
 800ee96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee9a:	4854      	ldr	r0, [pc, #336]	; (800efec <_vfiprintf_r+0x220>)
 800ee9c:	f7f1 f9d0 	bl	8000240 <memchr>
 800eea0:	9a04      	ldr	r2, [sp, #16]
 800eea2:	b9d8      	cbnz	r0, 800eedc <_vfiprintf_r+0x110>
 800eea4:	06d1      	lsls	r1, r2, #27
 800eea6:	bf44      	itt	mi
 800eea8:	2320      	movmi	r3, #32
 800eeaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eeae:	0713      	lsls	r3, r2, #28
 800eeb0:	bf44      	itt	mi
 800eeb2:	232b      	movmi	r3, #43	; 0x2b
 800eeb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eeb8:	f89a 3000 	ldrb.w	r3, [sl]
 800eebc:	2b2a      	cmp	r3, #42	; 0x2a
 800eebe:	d015      	beq.n	800eeec <_vfiprintf_r+0x120>
 800eec0:	9a07      	ldr	r2, [sp, #28]
 800eec2:	4654      	mov	r4, sl
 800eec4:	2000      	movs	r0, #0
 800eec6:	f04f 0c0a 	mov.w	ip, #10
 800eeca:	4621      	mov	r1, r4
 800eecc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eed0:	3b30      	subs	r3, #48	; 0x30
 800eed2:	2b09      	cmp	r3, #9
 800eed4:	d94d      	bls.n	800ef72 <_vfiprintf_r+0x1a6>
 800eed6:	b1b0      	cbz	r0, 800ef06 <_vfiprintf_r+0x13a>
 800eed8:	9207      	str	r2, [sp, #28]
 800eeda:	e014      	b.n	800ef06 <_vfiprintf_r+0x13a>
 800eedc:	eba0 0308 	sub.w	r3, r0, r8
 800eee0:	fa09 f303 	lsl.w	r3, r9, r3
 800eee4:	4313      	orrs	r3, r2
 800eee6:	9304      	str	r3, [sp, #16]
 800eee8:	46a2      	mov	sl, r4
 800eeea:	e7d2      	b.n	800ee92 <_vfiprintf_r+0xc6>
 800eeec:	9b03      	ldr	r3, [sp, #12]
 800eeee:	1d19      	adds	r1, r3, #4
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	9103      	str	r1, [sp, #12]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	bfbb      	ittet	lt
 800eef8:	425b      	neglt	r3, r3
 800eefa:	f042 0202 	orrlt.w	r2, r2, #2
 800eefe:	9307      	strge	r3, [sp, #28]
 800ef00:	9307      	strlt	r3, [sp, #28]
 800ef02:	bfb8      	it	lt
 800ef04:	9204      	strlt	r2, [sp, #16]
 800ef06:	7823      	ldrb	r3, [r4, #0]
 800ef08:	2b2e      	cmp	r3, #46	; 0x2e
 800ef0a:	d10c      	bne.n	800ef26 <_vfiprintf_r+0x15a>
 800ef0c:	7863      	ldrb	r3, [r4, #1]
 800ef0e:	2b2a      	cmp	r3, #42	; 0x2a
 800ef10:	d134      	bne.n	800ef7c <_vfiprintf_r+0x1b0>
 800ef12:	9b03      	ldr	r3, [sp, #12]
 800ef14:	1d1a      	adds	r2, r3, #4
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	9203      	str	r2, [sp, #12]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	bfb8      	it	lt
 800ef1e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ef22:	3402      	adds	r4, #2
 800ef24:	9305      	str	r3, [sp, #20]
 800ef26:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800effc <_vfiprintf_r+0x230>
 800ef2a:	7821      	ldrb	r1, [r4, #0]
 800ef2c:	2203      	movs	r2, #3
 800ef2e:	4650      	mov	r0, sl
 800ef30:	f7f1 f986 	bl	8000240 <memchr>
 800ef34:	b138      	cbz	r0, 800ef46 <_vfiprintf_r+0x17a>
 800ef36:	9b04      	ldr	r3, [sp, #16]
 800ef38:	eba0 000a 	sub.w	r0, r0, sl
 800ef3c:	2240      	movs	r2, #64	; 0x40
 800ef3e:	4082      	lsls	r2, r0
 800ef40:	4313      	orrs	r3, r2
 800ef42:	3401      	adds	r4, #1
 800ef44:	9304      	str	r3, [sp, #16]
 800ef46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef4a:	4829      	ldr	r0, [pc, #164]	; (800eff0 <_vfiprintf_r+0x224>)
 800ef4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ef50:	2206      	movs	r2, #6
 800ef52:	f7f1 f975 	bl	8000240 <memchr>
 800ef56:	2800      	cmp	r0, #0
 800ef58:	d03f      	beq.n	800efda <_vfiprintf_r+0x20e>
 800ef5a:	4b26      	ldr	r3, [pc, #152]	; (800eff4 <_vfiprintf_r+0x228>)
 800ef5c:	bb1b      	cbnz	r3, 800efa6 <_vfiprintf_r+0x1da>
 800ef5e:	9b03      	ldr	r3, [sp, #12]
 800ef60:	3307      	adds	r3, #7
 800ef62:	f023 0307 	bic.w	r3, r3, #7
 800ef66:	3308      	adds	r3, #8
 800ef68:	9303      	str	r3, [sp, #12]
 800ef6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef6c:	443b      	add	r3, r7
 800ef6e:	9309      	str	r3, [sp, #36]	; 0x24
 800ef70:	e768      	b.n	800ee44 <_vfiprintf_r+0x78>
 800ef72:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef76:	460c      	mov	r4, r1
 800ef78:	2001      	movs	r0, #1
 800ef7a:	e7a6      	b.n	800eeca <_vfiprintf_r+0xfe>
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	3401      	adds	r4, #1
 800ef80:	9305      	str	r3, [sp, #20]
 800ef82:	4619      	mov	r1, r3
 800ef84:	f04f 0c0a 	mov.w	ip, #10
 800ef88:	4620      	mov	r0, r4
 800ef8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef8e:	3a30      	subs	r2, #48	; 0x30
 800ef90:	2a09      	cmp	r2, #9
 800ef92:	d903      	bls.n	800ef9c <_vfiprintf_r+0x1d0>
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d0c6      	beq.n	800ef26 <_vfiprintf_r+0x15a>
 800ef98:	9105      	str	r1, [sp, #20]
 800ef9a:	e7c4      	b.n	800ef26 <_vfiprintf_r+0x15a>
 800ef9c:	fb0c 2101 	mla	r1, ip, r1, r2
 800efa0:	4604      	mov	r4, r0
 800efa2:	2301      	movs	r3, #1
 800efa4:	e7f0      	b.n	800ef88 <_vfiprintf_r+0x1bc>
 800efa6:	ab03      	add	r3, sp, #12
 800efa8:	9300      	str	r3, [sp, #0]
 800efaa:	462a      	mov	r2, r5
 800efac:	4b12      	ldr	r3, [pc, #72]	; (800eff8 <_vfiprintf_r+0x22c>)
 800efae:	a904      	add	r1, sp, #16
 800efb0:	4630      	mov	r0, r6
 800efb2:	f3af 8000 	nop.w
 800efb6:	4607      	mov	r7, r0
 800efb8:	1c78      	adds	r0, r7, #1
 800efba:	d1d6      	bne.n	800ef6a <_vfiprintf_r+0x19e>
 800efbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800efbe:	07d9      	lsls	r1, r3, #31
 800efc0:	d405      	bmi.n	800efce <_vfiprintf_r+0x202>
 800efc2:	89ab      	ldrh	r3, [r5, #12]
 800efc4:	059a      	lsls	r2, r3, #22
 800efc6:	d402      	bmi.n	800efce <_vfiprintf_r+0x202>
 800efc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800efca:	f7ff fda7 	bl	800eb1c <__retarget_lock_release_recursive>
 800efce:	89ab      	ldrh	r3, [r5, #12]
 800efd0:	065b      	lsls	r3, r3, #25
 800efd2:	f53f af1d 	bmi.w	800ee10 <_vfiprintf_r+0x44>
 800efd6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800efd8:	e71c      	b.n	800ee14 <_vfiprintf_r+0x48>
 800efda:	ab03      	add	r3, sp, #12
 800efdc:	9300      	str	r3, [sp, #0]
 800efde:	462a      	mov	r2, r5
 800efe0:	4b05      	ldr	r3, [pc, #20]	; (800eff8 <_vfiprintf_r+0x22c>)
 800efe2:	a904      	add	r1, sp, #16
 800efe4:	4630      	mov	r0, r6
 800efe6:	f000 f879 	bl	800f0dc <_printf_i>
 800efea:	e7e4      	b.n	800efb6 <_vfiprintf_r+0x1ea>
 800efec:	0801232d 	.word	0x0801232d
 800eff0:	08012337 	.word	0x08012337
 800eff4:	00000000 	.word	0x00000000
 800eff8:	0800eda7 	.word	0x0800eda7
 800effc:	08012333 	.word	0x08012333

0800f000 <_printf_common>:
 800f000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f004:	4616      	mov	r6, r2
 800f006:	4699      	mov	r9, r3
 800f008:	688a      	ldr	r2, [r1, #8]
 800f00a:	690b      	ldr	r3, [r1, #16]
 800f00c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f010:	4293      	cmp	r3, r2
 800f012:	bfb8      	it	lt
 800f014:	4613      	movlt	r3, r2
 800f016:	6033      	str	r3, [r6, #0]
 800f018:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f01c:	4607      	mov	r7, r0
 800f01e:	460c      	mov	r4, r1
 800f020:	b10a      	cbz	r2, 800f026 <_printf_common+0x26>
 800f022:	3301      	adds	r3, #1
 800f024:	6033      	str	r3, [r6, #0]
 800f026:	6823      	ldr	r3, [r4, #0]
 800f028:	0699      	lsls	r1, r3, #26
 800f02a:	bf42      	ittt	mi
 800f02c:	6833      	ldrmi	r3, [r6, #0]
 800f02e:	3302      	addmi	r3, #2
 800f030:	6033      	strmi	r3, [r6, #0]
 800f032:	6825      	ldr	r5, [r4, #0]
 800f034:	f015 0506 	ands.w	r5, r5, #6
 800f038:	d106      	bne.n	800f048 <_printf_common+0x48>
 800f03a:	f104 0a19 	add.w	sl, r4, #25
 800f03e:	68e3      	ldr	r3, [r4, #12]
 800f040:	6832      	ldr	r2, [r6, #0]
 800f042:	1a9b      	subs	r3, r3, r2
 800f044:	42ab      	cmp	r3, r5
 800f046:	dc26      	bgt.n	800f096 <_printf_common+0x96>
 800f048:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f04c:	1e13      	subs	r3, r2, #0
 800f04e:	6822      	ldr	r2, [r4, #0]
 800f050:	bf18      	it	ne
 800f052:	2301      	movne	r3, #1
 800f054:	0692      	lsls	r2, r2, #26
 800f056:	d42b      	bmi.n	800f0b0 <_printf_common+0xb0>
 800f058:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f05c:	4649      	mov	r1, r9
 800f05e:	4638      	mov	r0, r7
 800f060:	47c0      	blx	r8
 800f062:	3001      	adds	r0, #1
 800f064:	d01e      	beq.n	800f0a4 <_printf_common+0xa4>
 800f066:	6823      	ldr	r3, [r4, #0]
 800f068:	6922      	ldr	r2, [r4, #16]
 800f06a:	f003 0306 	and.w	r3, r3, #6
 800f06e:	2b04      	cmp	r3, #4
 800f070:	bf02      	ittt	eq
 800f072:	68e5      	ldreq	r5, [r4, #12]
 800f074:	6833      	ldreq	r3, [r6, #0]
 800f076:	1aed      	subeq	r5, r5, r3
 800f078:	68a3      	ldr	r3, [r4, #8]
 800f07a:	bf0c      	ite	eq
 800f07c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f080:	2500      	movne	r5, #0
 800f082:	4293      	cmp	r3, r2
 800f084:	bfc4      	itt	gt
 800f086:	1a9b      	subgt	r3, r3, r2
 800f088:	18ed      	addgt	r5, r5, r3
 800f08a:	2600      	movs	r6, #0
 800f08c:	341a      	adds	r4, #26
 800f08e:	42b5      	cmp	r5, r6
 800f090:	d11a      	bne.n	800f0c8 <_printf_common+0xc8>
 800f092:	2000      	movs	r0, #0
 800f094:	e008      	b.n	800f0a8 <_printf_common+0xa8>
 800f096:	2301      	movs	r3, #1
 800f098:	4652      	mov	r2, sl
 800f09a:	4649      	mov	r1, r9
 800f09c:	4638      	mov	r0, r7
 800f09e:	47c0      	blx	r8
 800f0a0:	3001      	adds	r0, #1
 800f0a2:	d103      	bne.n	800f0ac <_printf_common+0xac>
 800f0a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f0a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0ac:	3501      	adds	r5, #1
 800f0ae:	e7c6      	b.n	800f03e <_printf_common+0x3e>
 800f0b0:	18e1      	adds	r1, r4, r3
 800f0b2:	1c5a      	adds	r2, r3, #1
 800f0b4:	2030      	movs	r0, #48	; 0x30
 800f0b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f0ba:	4422      	add	r2, r4
 800f0bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f0c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f0c4:	3302      	adds	r3, #2
 800f0c6:	e7c7      	b.n	800f058 <_printf_common+0x58>
 800f0c8:	2301      	movs	r3, #1
 800f0ca:	4622      	mov	r2, r4
 800f0cc:	4649      	mov	r1, r9
 800f0ce:	4638      	mov	r0, r7
 800f0d0:	47c0      	blx	r8
 800f0d2:	3001      	adds	r0, #1
 800f0d4:	d0e6      	beq.n	800f0a4 <_printf_common+0xa4>
 800f0d6:	3601      	adds	r6, #1
 800f0d8:	e7d9      	b.n	800f08e <_printf_common+0x8e>
	...

0800f0dc <_printf_i>:
 800f0dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f0e0:	7e0f      	ldrb	r7, [r1, #24]
 800f0e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f0e4:	2f78      	cmp	r7, #120	; 0x78
 800f0e6:	4691      	mov	r9, r2
 800f0e8:	4680      	mov	r8, r0
 800f0ea:	460c      	mov	r4, r1
 800f0ec:	469a      	mov	sl, r3
 800f0ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f0f2:	d807      	bhi.n	800f104 <_printf_i+0x28>
 800f0f4:	2f62      	cmp	r7, #98	; 0x62
 800f0f6:	d80a      	bhi.n	800f10e <_printf_i+0x32>
 800f0f8:	2f00      	cmp	r7, #0
 800f0fa:	f000 80d4 	beq.w	800f2a6 <_printf_i+0x1ca>
 800f0fe:	2f58      	cmp	r7, #88	; 0x58
 800f100:	f000 80c0 	beq.w	800f284 <_printf_i+0x1a8>
 800f104:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f108:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f10c:	e03a      	b.n	800f184 <_printf_i+0xa8>
 800f10e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f112:	2b15      	cmp	r3, #21
 800f114:	d8f6      	bhi.n	800f104 <_printf_i+0x28>
 800f116:	a101      	add	r1, pc, #4	; (adr r1, 800f11c <_printf_i+0x40>)
 800f118:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f11c:	0800f175 	.word	0x0800f175
 800f120:	0800f189 	.word	0x0800f189
 800f124:	0800f105 	.word	0x0800f105
 800f128:	0800f105 	.word	0x0800f105
 800f12c:	0800f105 	.word	0x0800f105
 800f130:	0800f105 	.word	0x0800f105
 800f134:	0800f189 	.word	0x0800f189
 800f138:	0800f105 	.word	0x0800f105
 800f13c:	0800f105 	.word	0x0800f105
 800f140:	0800f105 	.word	0x0800f105
 800f144:	0800f105 	.word	0x0800f105
 800f148:	0800f28d 	.word	0x0800f28d
 800f14c:	0800f1b5 	.word	0x0800f1b5
 800f150:	0800f247 	.word	0x0800f247
 800f154:	0800f105 	.word	0x0800f105
 800f158:	0800f105 	.word	0x0800f105
 800f15c:	0800f2af 	.word	0x0800f2af
 800f160:	0800f105 	.word	0x0800f105
 800f164:	0800f1b5 	.word	0x0800f1b5
 800f168:	0800f105 	.word	0x0800f105
 800f16c:	0800f105 	.word	0x0800f105
 800f170:	0800f24f 	.word	0x0800f24f
 800f174:	682b      	ldr	r3, [r5, #0]
 800f176:	1d1a      	adds	r2, r3, #4
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	602a      	str	r2, [r5, #0]
 800f17c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f180:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f184:	2301      	movs	r3, #1
 800f186:	e09f      	b.n	800f2c8 <_printf_i+0x1ec>
 800f188:	6820      	ldr	r0, [r4, #0]
 800f18a:	682b      	ldr	r3, [r5, #0]
 800f18c:	0607      	lsls	r7, r0, #24
 800f18e:	f103 0104 	add.w	r1, r3, #4
 800f192:	6029      	str	r1, [r5, #0]
 800f194:	d501      	bpl.n	800f19a <_printf_i+0xbe>
 800f196:	681e      	ldr	r6, [r3, #0]
 800f198:	e003      	b.n	800f1a2 <_printf_i+0xc6>
 800f19a:	0646      	lsls	r6, r0, #25
 800f19c:	d5fb      	bpl.n	800f196 <_printf_i+0xba>
 800f19e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f1a2:	2e00      	cmp	r6, #0
 800f1a4:	da03      	bge.n	800f1ae <_printf_i+0xd2>
 800f1a6:	232d      	movs	r3, #45	; 0x2d
 800f1a8:	4276      	negs	r6, r6
 800f1aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f1ae:	485a      	ldr	r0, [pc, #360]	; (800f318 <_printf_i+0x23c>)
 800f1b0:	230a      	movs	r3, #10
 800f1b2:	e012      	b.n	800f1da <_printf_i+0xfe>
 800f1b4:	682b      	ldr	r3, [r5, #0]
 800f1b6:	6820      	ldr	r0, [r4, #0]
 800f1b8:	1d19      	adds	r1, r3, #4
 800f1ba:	6029      	str	r1, [r5, #0]
 800f1bc:	0605      	lsls	r5, r0, #24
 800f1be:	d501      	bpl.n	800f1c4 <_printf_i+0xe8>
 800f1c0:	681e      	ldr	r6, [r3, #0]
 800f1c2:	e002      	b.n	800f1ca <_printf_i+0xee>
 800f1c4:	0641      	lsls	r1, r0, #25
 800f1c6:	d5fb      	bpl.n	800f1c0 <_printf_i+0xe4>
 800f1c8:	881e      	ldrh	r6, [r3, #0]
 800f1ca:	4853      	ldr	r0, [pc, #332]	; (800f318 <_printf_i+0x23c>)
 800f1cc:	2f6f      	cmp	r7, #111	; 0x6f
 800f1ce:	bf0c      	ite	eq
 800f1d0:	2308      	moveq	r3, #8
 800f1d2:	230a      	movne	r3, #10
 800f1d4:	2100      	movs	r1, #0
 800f1d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f1da:	6865      	ldr	r5, [r4, #4]
 800f1dc:	60a5      	str	r5, [r4, #8]
 800f1de:	2d00      	cmp	r5, #0
 800f1e0:	bfa2      	ittt	ge
 800f1e2:	6821      	ldrge	r1, [r4, #0]
 800f1e4:	f021 0104 	bicge.w	r1, r1, #4
 800f1e8:	6021      	strge	r1, [r4, #0]
 800f1ea:	b90e      	cbnz	r6, 800f1f0 <_printf_i+0x114>
 800f1ec:	2d00      	cmp	r5, #0
 800f1ee:	d04b      	beq.n	800f288 <_printf_i+0x1ac>
 800f1f0:	4615      	mov	r5, r2
 800f1f2:	fbb6 f1f3 	udiv	r1, r6, r3
 800f1f6:	fb03 6711 	mls	r7, r3, r1, r6
 800f1fa:	5dc7      	ldrb	r7, [r0, r7]
 800f1fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f200:	4637      	mov	r7, r6
 800f202:	42bb      	cmp	r3, r7
 800f204:	460e      	mov	r6, r1
 800f206:	d9f4      	bls.n	800f1f2 <_printf_i+0x116>
 800f208:	2b08      	cmp	r3, #8
 800f20a:	d10b      	bne.n	800f224 <_printf_i+0x148>
 800f20c:	6823      	ldr	r3, [r4, #0]
 800f20e:	07de      	lsls	r6, r3, #31
 800f210:	d508      	bpl.n	800f224 <_printf_i+0x148>
 800f212:	6923      	ldr	r3, [r4, #16]
 800f214:	6861      	ldr	r1, [r4, #4]
 800f216:	4299      	cmp	r1, r3
 800f218:	bfde      	ittt	le
 800f21a:	2330      	movle	r3, #48	; 0x30
 800f21c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f220:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800f224:	1b52      	subs	r2, r2, r5
 800f226:	6122      	str	r2, [r4, #16]
 800f228:	f8cd a000 	str.w	sl, [sp]
 800f22c:	464b      	mov	r3, r9
 800f22e:	aa03      	add	r2, sp, #12
 800f230:	4621      	mov	r1, r4
 800f232:	4640      	mov	r0, r8
 800f234:	f7ff fee4 	bl	800f000 <_printf_common>
 800f238:	3001      	adds	r0, #1
 800f23a:	d14a      	bne.n	800f2d2 <_printf_i+0x1f6>
 800f23c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f240:	b004      	add	sp, #16
 800f242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f246:	6823      	ldr	r3, [r4, #0]
 800f248:	f043 0320 	orr.w	r3, r3, #32
 800f24c:	6023      	str	r3, [r4, #0]
 800f24e:	4833      	ldr	r0, [pc, #204]	; (800f31c <_printf_i+0x240>)
 800f250:	2778      	movs	r7, #120	; 0x78
 800f252:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f256:	6823      	ldr	r3, [r4, #0]
 800f258:	6829      	ldr	r1, [r5, #0]
 800f25a:	061f      	lsls	r7, r3, #24
 800f25c:	f851 6b04 	ldr.w	r6, [r1], #4
 800f260:	d402      	bmi.n	800f268 <_printf_i+0x18c>
 800f262:	065f      	lsls	r7, r3, #25
 800f264:	bf48      	it	mi
 800f266:	b2b6      	uxthmi	r6, r6
 800f268:	07df      	lsls	r7, r3, #31
 800f26a:	bf48      	it	mi
 800f26c:	f043 0320 	orrmi.w	r3, r3, #32
 800f270:	6029      	str	r1, [r5, #0]
 800f272:	bf48      	it	mi
 800f274:	6023      	strmi	r3, [r4, #0]
 800f276:	b91e      	cbnz	r6, 800f280 <_printf_i+0x1a4>
 800f278:	6823      	ldr	r3, [r4, #0]
 800f27a:	f023 0320 	bic.w	r3, r3, #32
 800f27e:	6023      	str	r3, [r4, #0]
 800f280:	2310      	movs	r3, #16
 800f282:	e7a7      	b.n	800f1d4 <_printf_i+0xf8>
 800f284:	4824      	ldr	r0, [pc, #144]	; (800f318 <_printf_i+0x23c>)
 800f286:	e7e4      	b.n	800f252 <_printf_i+0x176>
 800f288:	4615      	mov	r5, r2
 800f28a:	e7bd      	b.n	800f208 <_printf_i+0x12c>
 800f28c:	682b      	ldr	r3, [r5, #0]
 800f28e:	6826      	ldr	r6, [r4, #0]
 800f290:	6961      	ldr	r1, [r4, #20]
 800f292:	1d18      	adds	r0, r3, #4
 800f294:	6028      	str	r0, [r5, #0]
 800f296:	0635      	lsls	r5, r6, #24
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	d501      	bpl.n	800f2a0 <_printf_i+0x1c4>
 800f29c:	6019      	str	r1, [r3, #0]
 800f29e:	e002      	b.n	800f2a6 <_printf_i+0x1ca>
 800f2a0:	0670      	lsls	r0, r6, #25
 800f2a2:	d5fb      	bpl.n	800f29c <_printf_i+0x1c0>
 800f2a4:	8019      	strh	r1, [r3, #0]
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	6123      	str	r3, [r4, #16]
 800f2aa:	4615      	mov	r5, r2
 800f2ac:	e7bc      	b.n	800f228 <_printf_i+0x14c>
 800f2ae:	682b      	ldr	r3, [r5, #0]
 800f2b0:	1d1a      	adds	r2, r3, #4
 800f2b2:	602a      	str	r2, [r5, #0]
 800f2b4:	681d      	ldr	r5, [r3, #0]
 800f2b6:	6862      	ldr	r2, [r4, #4]
 800f2b8:	2100      	movs	r1, #0
 800f2ba:	4628      	mov	r0, r5
 800f2bc:	f7f0 ffc0 	bl	8000240 <memchr>
 800f2c0:	b108      	cbz	r0, 800f2c6 <_printf_i+0x1ea>
 800f2c2:	1b40      	subs	r0, r0, r5
 800f2c4:	6060      	str	r0, [r4, #4]
 800f2c6:	6863      	ldr	r3, [r4, #4]
 800f2c8:	6123      	str	r3, [r4, #16]
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f2d0:	e7aa      	b.n	800f228 <_printf_i+0x14c>
 800f2d2:	6923      	ldr	r3, [r4, #16]
 800f2d4:	462a      	mov	r2, r5
 800f2d6:	4649      	mov	r1, r9
 800f2d8:	4640      	mov	r0, r8
 800f2da:	47d0      	blx	sl
 800f2dc:	3001      	adds	r0, #1
 800f2de:	d0ad      	beq.n	800f23c <_printf_i+0x160>
 800f2e0:	6823      	ldr	r3, [r4, #0]
 800f2e2:	079b      	lsls	r3, r3, #30
 800f2e4:	d413      	bmi.n	800f30e <_printf_i+0x232>
 800f2e6:	68e0      	ldr	r0, [r4, #12]
 800f2e8:	9b03      	ldr	r3, [sp, #12]
 800f2ea:	4298      	cmp	r0, r3
 800f2ec:	bfb8      	it	lt
 800f2ee:	4618      	movlt	r0, r3
 800f2f0:	e7a6      	b.n	800f240 <_printf_i+0x164>
 800f2f2:	2301      	movs	r3, #1
 800f2f4:	4632      	mov	r2, r6
 800f2f6:	4649      	mov	r1, r9
 800f2f8:	4640      	mov	r0, r8
 800f2fa:	47d0      	blx	sl
 800f2fc:	3001      	adds	r0, #1
 800f2fe:	d09d      	beq.n	800f23c <_printf_i+0x160>
 800f300:	3501      	adds	r5, #1
 800f302:	68e3      	ldr	r3, [r4, #12]
 800f304:	9903      	ldr	r1, [sp, #12]
 800f306:	1a5b      	subs	r3, r3, r1
 800f308:	42ab      	cmp	r3, r5
 800f30a:	dcf2      	bgt.n	800f2f2 <_printf_i+0x216>
 800f30c:	e7eb      	b.n	800f2e6 <_printf_i+0x20a>
 800f30e:	2500      	movs	r5, #0
 800f310:	f104 0619 	add.w	r6, r4, #25
 800f314:	e7f5      	b.n	800f302 <_printf_i+0x226>
 800f316:	bf00      	nop
 800f318:	0801233e 	.word	0x0801233e
 800f31c:	0801234f 	.word	0x0801234f

0800f320 <__sflush_r>:
 800f320:	898a      	ldrh	r2, [r1, #12]
 800f322:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f326:	4605      	mov	r5, r0
 800f328:	0710      	lsls	r0, r2, #28
 800f32a:	460c      	mov	r4, r1
 800f32c:	d458      	bmi.n	800f3e0 <__sflush_r+0xc0>
 800f32e:	684b      	ldr	r3, [r1, #4]
 800f330:	2b00      	cmp	r3, #0
 800f332:	dc05      	bgt.n	800f340 <__sflush_r+0x20>
 800f334:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f336:	2b00      	cmp	r3, #0
 800f338:	dc02      	bgt.n	800f340 <__sflush_r+0x20>
 800f33a:	2000      	movs	r0, #0
 800f33c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f340:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f342:	2e00      	cmp	r6, #0
 800f344:	d0f9      	beq.n	800f33a <__sflush_r+0x1a>
 800f346:	2300      	movs	r3, #0
 800f348:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f34c:	682f      	ldr	r7, [r5, #0]
 800f34e:	6a21      	ldr	r1, [r4, #32]
 800f350:	602b      	str	r3, [r5, #0]
 800f352:	d032      	beq.n	800f3ba <__sflush_r+0x9a>
 800f354:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f356:	89a3      	ldrh	r3, [r4, #12]
 800f358:	075a      	lsls	r2, r3, #29
 800f35a:	d505      	bpl.n	800f368 <__sflush_r+0x48>
 800f35c:	6863      	ldr	r3, [r4, #4]
 800f35e:	1ac0      	subs	r0, r0, r3
 800f360:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f362:	b10b      	cbz	r3, 800f368 <__sflush_r+0x48>
 800f364:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f366:	1ac0      	subs	r0, r0, r3
 800f368:	2300      	movs	r3, #0
 800f36a:	4602      	mov	r2, r0
 800f36c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f36e:	6a21      	ldr	r1, [r4, #32]
 800f370:	4628      	mov	r0, r5
 800f372:	47b0      	blx	r6
 800f374:	1c43      	adds	r3, r0, #1
 800f376:	89a3      	ldrh	r3, [r4, #12]
 800f378:	d106      	bne.n	800f388 <__sflush_r+0x68>
 800f37a:	6829      	ldr	r1, [r5, #0]
 800f37c:	291d      	cmp	r1, #29
 800f37e:	d82b      	bhi.n	800f3d8 <__sflush_r+0xb8>
 800f380:	4a29      	ldr	r2, [pc, #164]	; (800f428 <__sflush_r+0x108>)
 800f382:	410a      	asrs	r2, r1
 800f384:	07d6      	lsls	r6, r2, #31
 800f386:	d427      	bmi.n	800f3d8 <__sflush_r+0xb8>
 800f388:	2200      	movs	r2, #0
 800f38a:	6062      	str	r2, [r4, #4]
 800f38c:	04d9      	lsls	r1, r3, #19
 800f38e:	6922      	ldr	r2, [r4, #16]
 800f390:	6022      	str	r2, [r4, #0]
 800f392:	d504      	bpl.n	800f39e <__sflush_r+0x7e>
 800f394:	1c42      	adds	r2, r0, #1
 800f396:	d101      	bne.n	800f39c <__sflush_r+0x7c>
 800f398:	682b      	ldr	r3, [r5, #0]
 800f39a:	b903      	cbnz	r3, 800f39e <__sflush_r+0x7e>
 800f39c:	6560      	str	r0, [r4, #84]	; 0x54
 800f39e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f3a0:	602f      	str	r7, [r5, #0]
 800f3a2:	2900      	cmp	r1, #0
 800f3a4:	d0c9      	beq.n	800f33a <__sflush_r+0x1a>
 800f3a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f3aa:	4299      	cmp	r1, r3
 800f3ac:	d002      	beq.n	800f3b4 <__sflush_r+0x94>
 800f3ae:	4628      	mov	r0, r5
 800f3b0:	f7ff fbe2 	bl	800eb78 <_free_r>
 800f3b4:	2000      	movs	r0, #0
 800f3b6:	6360      	str	r0, [r4, #52]	; 0x34
 800f3b8:	e7c0      	b.n	800f33c <__sflush_r+0x1c>
 800f3ba:	2301      	movs	r3, #1
 800f3bc:	4628      	mov	r0, r5
 800f3be:	47b0      	blx	r6
 800f3c0:	1c41      	adds	r1, r0, #1
 800f3c2:	d1c8      	bne.n	800f356 <__sflush_r+0x36>
 800f3c4:	682b      	ldr	r3, [r5, #0]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d0c5      	beq.n	800f356 <__sflush_r+0x36>
 800f3ca:	2b1d      	cmp	r3, #29
 800f3cc:	d001      	beq.n	800f3d2 <__sflush_r+0xb2>
 800f3ce:	2b16      	cmp	r3, #22
 800f3d0:	d101      	bne.n	800f3d6 <__sflush_r+0xb6>
 800f3d2:	602f      	str	r7, [r5, #0]
 800f3d4:	e7b1      	b.n	800f33a <__sflush_r+0x1a>
 800f3d6:	89a3      	ldrh	r3, [r4, #12]
 800f3d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f3dc:	81a3      	strh	r3, [r4, #12]
 800f3de:	e7ad      	b.n	800f33c <__sflush_r+0x1c>
 800f3e0:	690f      	ldr	r7, [r1, #16]
 800f3e2:	2f00      	cmp	r7, #0
 800f3e4:	d0a9      	beq.n	800f33a <__sflush_r+0x1a>
 800f3e6:	0793      	lsls	r3, r2, #30
 800f3e8:	680e      	ldr	r6, [r1, #0]
 800f3ea:	bf08      	it	eq
 800f3ec:	694b      	ldreq	r3, [r1, #20]
 800f3ee:	600f      	str	r7, [r1, #0]
 800f3f0:	bf18      	it	ne
 800f3f2:	2300      	movne	r3, #0
 800f3f4:	eba6 0807 	sub.w	r8, r6, r7
 800f3f8:	608b      	str	r3, [r1, #8]
 800f3fa:	f1b8 0f00 	cmp.w	r8, #0
 800f3fe:	dd9c      	ble.n	800f33a <__sflush_r+0x1a>
 800f400:	6a21      	ldr	r1, [r4, #32]
 800f402:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f404:	4643      	mov	r3, r8
 800f406:	463a      	mov	r2, r7
 800f408:	4628      	mov	r0, r5
 800f40a:	47b0      	blx	r6
 800f40c:	2800      	cmp	r0, #0
 800f40e:	dc06      	bgt.n	800f41e <__sflush_r+0xfe>
 800f410:	89a3      	ldrh	r3, [r4, #12]
 800f412:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f416:	81a3      	strh	r3, [r4, #12]
 800f418:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f41c:	e78e      	b.n	800f33c <__sflush_r+0x1c>
 800f41e:	4407      	add	r7, r0
 800f420:	eba8 0800 	sub.w	r8, r8, r0
 800f424:	e7e9      	b.n	800f3fa <__sflush_r+0xda>
 800f426:	bf00      	nop
 800f428:	dfbffffe 	.word	0xdfbffffe

0800f42c <_fflush_r>:
 800f42c:	b538      	push	{r3, r4, r5, lr}
 800f42e:	690b      	ldr	r3, [r1, #16]
 800f430:	4605      	mov	r5, r0
 800f432:	460c      	mov	r4, r1
 800f434:	b913      	cbnz	r3, 800f43c <_fflush_r+0x10>
 800f436:	2500      	movs	r5, #0
 800f438:	4628      	mov	r0, r5
 800f43a:	bd38      	pop	{r3, r4, r5, pc}
 800f43c:	b118      	cbz	r0, 800f446 <_fflush_r+0x1a>
 800f43e:	6a03      	ldr	r3, [r0, #32]
 800f440:	b90b      	cbnz	r3, 800f446 <_fflush_r+0x1a>
 800f442:	f7ff fa49 	bl	800e8d8 <__sinit>
 800f446:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d0f3      	beq.n	800f436 <_fflush_r+0xa>
 800f44e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f450:	07d0      	lsls	r0, r2, #31
 800f452:	d404      	bmi.n	800f45e <_fflush_r+0x32>
 800f454:	0599      	lsls	r1, r3, #22
 800f456:	d402      	bmi.n	800f45e <_fflush_r+0x32>
 800f458:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f45a:	f7ff fb5e 	bl	800eb1a <__retarget_lock_acquire_recursive>
 800f45e:	4628      	mov	r0, r5
 800f460:	4621      	mov	r1, r4
 800f462:	f7ff ff5d 	bl	800f320 <__sflush_r>
 800f466:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f468:	07da      	lsls	r2, r3, #31
 800f46a:	4605      	mov	r5, r0
 800f46c:	d4e4      	bmi.n	800f438 <_fflush_r+0xc>
 800f46e:	89a3      	ldrh	r3, [r4, #12]
 800f470:	059b      	lsls	r3, r3, #22
 800f472:	d4e1      	bmi.n	800f438 <_fflush_r+0xc>
 800f474:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f476:	f7ff fb51 	bl	800eb1c <__retarget_lock_release_recursive>
 800f47a:	e7dd      	b.n	800f438 <_fflush_r+0xc>

0800f47c <fiprintf>:
 800f47c:	b40e      	push	{r1, r2, r3}
 800f47e:	b503      	push	{r0, r1, lr}
 800f480:	4601      	mov	r1, r0
 800f482:	ab03      	add	r3, sp, #12
 800f484:	4805      	ldr	r0, [pc, #20]	; (800f49c <fiprintf+0x20>)
 800f486:	f853 2b04 	ldr.w	r2, [r3], #4
 800f48a:	6800      	ldr	r0, [r0, #0]
 800f48c:	9301      	str	r3, [sp, #4]
 800f48e:	f7ff fc9d 	bl	800edcc <_vfiprintf_r>
 800f492:	b002      	add	sp, #8
 800f494:	f85d eb04 	ldr.w	lr, [sp], #4
 800f498:	b003      	add	sp, #12
 800f49a:	4770      	bx	lr
 800f49c:	20000084 	.word	0x20000084

0800f4a0 <__swbuf_r>:
 800f4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4a2:	460e      	mov	r6, r1
 800f4a4:	4614      	mov	r4, r2
 800f4a6:	4605      	mov	r5, r0
 800f4a8:	b118      	cbz	r0, 800f4b2 <__swbuf_r+0x12>
 800f4aa:	6a03      	ldr	r3, [r0, #32]
 800f4ac:	b90b      	cbnz	r3, 800f4b2 <__swbuf_r+0x12>
 800f4ae:	f7ff fa13 	bl	800e8d8 <__sinit>
 800f4b2:	69a3      	ldr	r3, [r4, #24]
 800f4b4:	60a3      	str	r3, [r4, #8]
 800f4b6:	89a3      	ldrh	r3, [r4, #12]
 800f4b8:	071a      	lsls	r2, r3, #28
 800f4ba:	d525      	bpl.n	800f508 <__swbuf_r+0x68>
 800f4bc:	6923      	ldr	r3, [r4, #16]
 800f4be:	b31b      	cbz	r3, 800f508 <__swbuf_r+0x68>
 800f4c0:	6823      	ldr	r3, [r4, #0]
 800f4c2:	6922      	ldr	r2, [r4, #16]
 800f4c4:	1a98      	subs	r0, r3, r2
 800f4c6:	6963      	ldr	r3, [r4, #20]
 800f4c8:	b2f6      	uxtb	r6, r6
 800f4ca:	4283      	cmp	r3, r0
 800f4cc:	4637      	mov	r7, r6
 800f4ce:	dc04      	bgt.n	800f4da <__swbuf_r+0x3a>
 800f4d0:	4621      	mov	r1, r4
 800f4d2:	4628      	mov	r0, r5
 800f4d4:	f7ff ffaa 	bl	800f42c <_fflush_r>
 800f4d8:	b9e0      	cbnz	r0, 800f514 <__swbuf_r+0x74>
 800f4da:	68a3      	ldr	r3, [r4, #8]
 800f4dc:	3b01      	subs	r3, #1
 800f4de:	60a3      	str	r3, [r4, #8]
 800f4e0:	6823      	ldr	r3, [r4, #0]
 800f4e2:	1c5a      	adds	r2, r3, #1
 800f4e4:	6022      	str	r2, [r4, #0]
 800f4e6:	701e      	strb	r6, [r3, #0]
 800f4e8:	6962      	ldr	r2, [r4, #20]
 800f4ea:	1c43      	adds	r3, r0, #1
 800f4ec:	429a      	cmp	r2, r3
 800f4ee:	d004      	beq.n	800f4fa <__swbuf_r+0x5a>
 800f4f0:	89a3      	ldrh	r3, [r4, #12]
 800f4f2:	07db      	lsls	r3, r3, #31
 800f4f4:	d506      	bpl.n	800f504 <__swbuf_r+0x64>
 800f4f6:	2e0a      	cmp	r6, #10
 800f4f8:	d104      	bne.n	800f504 <__swbuf_r+0x64>
 800f4fa:	4621      	mov	r1, r4
 800f4fc:	4628      	mov	r0, r5
 800f4fe:	f7ff ff95 	bl	800f42c <_fflush_r>
 800f502:	b938      	cbnz	r0, 800f514 <__swbuf_r+0x74>
 800f504:	4638      	mov	r0, r7
 800f506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f508:	4621      	mov	r1, r4
 800f50a:	4628      	mov	r0, r5
 800f50c:	f000 f806 	bl	800f51c <__swsetup_r>
 800f510:	2800      	cmp	r0, #0
 800f512:	d0d5      	beq.n	800f4c0 <__swbuf_r+0x20>
 800f514:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f518:	e7f4      	b.n	800f504 <__swbuf_r+0x64>
	...

0800f51c <__swsetup_r>:
 800f51c:	b538      	push	{r3, r4, r5, lr}
 800f51e:	4b2a      	ldr	r3, [pc, #168]	; (800f5c8 <__swsetup_r+0xac>)
 800f520:	4605      	mov	r5, r0
 800f522:	6818      	ldr	r0, [r3, #0]
 800f524:	460c      	mov	r4, r1
 800f526:	b118      	cbz	r0, 800f530 <__swsetup_r+0x14>
 800f528:	6a03      	ldr	r3, [r0, #32]
 800f52a:	b90b      	cbnz	r3, 800f530 <__swsetup_r+0x14>
 800f52c:	f7ff f9d4 	bl	800e8d8 <__sinit>
 800f530:	89a3      	ldrh	r3, [r4, #12]
 800f532:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f536:	0718      	lsls	r0, r3, #28
 800f538:	d422      	bmi.n	800f580 <__swsetup_r+0x64>
 800f53a:	06d9      	lsls	r1, r3, #27
 800f53c:	d407      	bmi.n	800f54e <__swsetup_r+0x32>
 800f53e:	2309      	movs	r3, #9
 800f540:	602b      	str	r3, [r5, #0]
 800f542:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f546:	81a3      	strh	r3, [r4, #12]
 800f548:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f54c:	e034      	b.n	800f5b8 <__swsetup_r+0x9c>
 800f54e:	0758      	lsls	r0, r3, #29
 800f550:	d512      	bpl.n	800f578 <__swsetup_r+0x5c>
 800f552:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f554:	b141      	cbz	r1, 800f568 <__swsetup_r+0x4c>
 800f556:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f55a:	4299      	cmp	r1, r3
 800f55c:	d002      	beq.n	800f564 <__swsetup_r+0x48>
 800f55e:	4628      	mov	r0, r5
 800f560:	f7ff fb0a 	bl	800eb78 <_free_r>
 800f564:	2300      	movs	r3, #0
 800f566:	6363      	str	r3, [r4, #52]	; 0x34
 800f568:	89a3      	ldrh	r3, [r4, #12]
 800f56a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f56e:	81a3      	strh	r3, [r4, #12]
 800f570:	2300      	movs	r3, #0
 800f572:	6063      	str	r3, [r4, #4]
 800f574:	6923      	ldr	r3, [r4, #16]
 800f576:	6023      	str	r3, [r4, #0]
 800f578:	89a3      	ldrh	r3, [r4, #12]
 800f57a:	f043 0308 	orr.w	r3, r3, #8
 800f57e:	81a3      	strh	r3, [r4, #12]
 800f580:	6923      	ldr	r3, [r4, #16]
 800f582:	b94b      	cbnz	r3, 800f598 <__swsetup_r+0x7c>
 800f584:	89a3      	ldrh	r3, [r4, #12]
 800f586:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f58a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f58e:	d003      	beq.n	800f598 <__swsetup_r+0x7c>
 800f590:	4621      	mov	r1, r4
 800f592:	4628      	mov	r0, r5
 800f594:	f000 f857 	bl	800f646 <__smakebuf_r>
 800f598:	89a0      	ldrh	r0, [r4, #12]
 800f59a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f59e:	f010 0301 	ands.w	r3, r0, #1
 800f5a2:	d00a      	beq.n	800f5ba <__swsetup_r+0x9e>
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	60a3      	str	r3, [r4, #8]
 800f5a8:	6963      	ldr	r3, [r4, #20]
 800f5aa:	425b      	negs	r3, r3
 800f5ac:	61a3      	str	r3, [r4, #24]
 800f5ae:	6923      	ldr	r3, [r4, #16]
 800f5b0:	b943      	cbnz	r3, 800f5c4 <__swsetup_r+0xa8>
 800f5b2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f5b6:	d1c4      	bne.n	800f542 <__swsetup_r+0x26>
 800f5b8:	bd38      	pop	{r3, r4, r5, pc}
 800f5ba:	0781      	lsls	r1, r0, #30
 800f5bc:	bf58      	it	pl
 800f5be:	6963      	ldrpl	r3, [r4, #20]
 800f5c0:	60a3      	str	r3, [r4, #8]
 800f5c2:	e7f4      	b.n	800f5ae <__swsetup_r+0x92>
 800f5c4:	2000      	movs	r0, #0
 800f5c6:	e7f7      	b.n	800f5b8 <__swsetup_r+0x9c>
 800f5c8:	20000084 	.word	0x20000084

0800f5cc <_sbrk_r>:
 800f5cc:	b538      	push	{r3, r4, r5, lr}
 800f5ce:	4d06      	ldr	r5, [pc, #24]	; (800f5e8 <_sbrk_r+0x1c>)
 800f5d0:	2300      	movs	r3, #0
 800f5d2:	4604      	mov	r4, r0
 800f5d4:	4608      	mov	r0, r1
 800f5d6:	602b      	str	r3, [r5, #0]
 800f5d8:	f7f1 fbf6 	bl	8000dc8 <_sbrk>
 800f5dc:	1c43      	adds	r3, r0, #1
 800f5de:	d102      	bne.n	800f5e6 <_sbrk_r+0x1a>
 800f5e0:	682b      	ldr	r3, [r5, #0]
 800f5e2:	b103      	cbz	r3, 800f5e6 <_sbrk_r+0x1a>
 800f5e4:	6023      	str	r3, [r4, #0]
 800f5e6:	bd38      	pop	{r3, r4, r5, pc}
 800f5e8:	2000a74c 	.word	0x2000a74c

0800f5ec <abort>:
 800f5ec:	b508      	push	{r3, lr}
 800f5ee:	2006      	movs	r0, #6
 800f5f0:	f000 f88e 	bl	800f710 <raise>
 800f5f4:	2001      	movs	r0, #1
 800f5f6:	f7f1 fb6f 	bl	8000cd8 <_exit>

0800f5fa <__swhatbuf_r>:
 800f5fa:	b570      	push	{r4, r5, r6, lr}
 800f5fc:	460c      	mov	r4, r1
 800f5fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f602:	2900      	cmp	r1, #0
 800f604:	b096      	sub	sp, #88	; 0x58
 800f606:	4615      	mov	r5, r2
 800f608:	461e      	mov	r6, r3
 800f60a:	da0d      	bge.n	800f628 <__swhatbuf_r+0x2e>
 800f60c:	89a3      	ldrh	r3, [r4, #12]
 800f60e:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f612:	f04f 0100 	mov.w	r1, #0
 800f616:	bf0c      	ite	eq
 800f618:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f61c:	2340      	movne	r3, #64	; 0x40
 800f61e:	2000      	movs	r0, #0
 800f620:	6031      	str	r1, [r6, #0]
 800f622:	602b      	str	r3, [r5, #0]
 800f624:	b016      	add	sp, #88	; 0x58
 800f626:	bd70      	pop	{r4, r5, r6, pc}
 800f628:	466a      	mov	r2, sp
 800f62a:	f000 f879 	bl	800f720 <_fstat_r>
 800f62e:	2800      	cmp	r0, #0
 800f630:	dbec      	blt.n	800f60c <__swhatbuf_r+0x12>
 800f632:	9901      	ldr	r1, [sp, #4]
 800f634:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f638:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f63c:	4259      	negs	r1, r3
 800f63e:	4159      	adcs	r1, r3
 800f640:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f644:	e7eb      	b.n	800f61e <__swhatbuf_r+0x24>

0800f646 <__smakebuf_r>:
 800f646:	898b      	ldrh	r3, [r1, #12]
 800f648:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f64a:	079d      	lsls	r5, r3, #30
 800f64c:	4606      	mov	r6, r0
 800f64e:	460c      	mov	r4, r1
 800f650:	d507      	bpl.n	800f662 <__smakebuf_r+0x1c>
 800f652:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f656:	6023      	str	r3, [r4, #0]
 800f658:	6123      	str	r3, [r4, #16]
 800f65a:	2301      	movs	r3, #1
 800f65c:	6163      	str	r3, [r4, #20]
 800f65e:	b002      	add	sp, #8
 800f660:	bd70      	pop	{r4, r5, r6, pc}
 800f662:	ab01      	add	r3, sp, #4
 800f664:	466a      	mov	r2, sp
 800f666:	f7ff ffc8 	bl	800f5fa <__swhatbuf_r>
 800f66a:	9900      	ldr	r1, [sp, #0]
 800f66c:	4605      	mov	r5, r0
 800f66e:	4630      	mov	r0, r6
 800f670:	f7ff faf6 	bl	800ec60 <_malloc_r>
 800f674:	b948      	cbnz	r0, 800f68a <__smakebuf_r+0x44>
 800f676:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f67a:	059a      	lsls	r2, r3, #22
 800f67c:	d4ef      	bmi.n	800f65e <__smakebuf_r+0x18>
 800f67e:	f023 0303 	bic.w	r3, r3, #3
 800f682:	f043 0302 	orr.w	r3, r3, #2
 800f686:	81a3      	strh	r3, [r4, #12]
 800f688:	e7e3      	b.n	800f652 <__smakebuf_r+0xc>
 800f68a:	89a3      	ldrh	r3, [r4, #12]
 800f68c:	6020      	str	r0, [r4, #0]
 800f68e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f692:	81a3      	strh	r3, [r4, #12]
 800f694:	9b00      	ldr	r3, [sp, #0]
 800f696:	6163      	str	r3, [r4, #20]
 800f698:	9b01      	ldr	r3, [sp, #4]
 800f69a:	6120      	str	r0, [r4, #16]
 800f69c:	b15b      	cbz	r3, 800f6b6 <__smakebuf_r+0x70>
 800f69e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f6a2:	4630      	mov	r0, r6
 800f6a4:	f000 f84e 	bl	800f744 <_isatty_r>
 800f6a8:	b128      	cbz	r0, 800f6b6 <__smakebuf_r+0x70>
 800f6aa:	89a3      	ldrh	r3, [r4, #12]
 800f6ac:	f023 0303 	bic.w	r3, r3, #3
 800f6b0:	f043 0301 	orr.w	r3, r3, #1
 800f6b4:	81a3      	strh	r3, [r4, #12]
 800f6b6:	89a3      	ldrh	r3, [r4, #12]
 800f6b8:	431d      	orrs	r5, r3
 800f6ba:	81a5      	strh	r5, [r4, #12]
 800f6bc:	e7cf      	b.n	800f65e <__smakebuf_r+0x18>

0800f6be <_raise_r>:
 800f6be:	291f      	cmp	r1, #31
 800f6c0:	b538      	push	{r3, r4, r5, lr}
 800f6c2:	4604      	mov	r4, r0
 800f6c4:	460d      	mov	r5, r1
 800f6c6:	d904      	bls.n	800f6d2 <_raise_r+0x14>
 800f6c8:	2316      	movs	r3, #22
 800f6ca:	6003      	str	r3, [r0, #0]
 800f6cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f6d0:	bd38      	pop	{r3, r4, r5, pc}
 800f6d2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f6d4:	b112      	cbz	r2, 800f6dc <_raise_r+0x1e>
 800f6d6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f6da:	b94b      	cbnz	r3, 800f6f0 <_raise_r+0x32>
 800f6dc:	4620      	mov	r0, r4
 800f6de:	f000 f853 	bl	800f788 <_getpid_r>
 800f6e2:	462a      	mov	r2, r5
 800f6e4:	4601      	mov	r1, r0
 800f6e6:	4620      	mov	r0, r4
 800f6e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f6ec:	f000 b83a 	b.w	800f764 <_kill_r>
 800f6f0:	2b01      	cmp	r3, #1
 800f6f2:	d00a      	beq.n	800f70a <_raise_r+0x4c>
 800f6f4:	1c59      	adds	r1, r3, #1
 800f6f6:	d103      	bne.n	800f700 <_raise_r+0x42>
 800f6f8:	2316      	movs	r3, #22
 800f6fa:	6003      	str	r3, [r0, #0]
 800f6fc:	2001      	movs	r0, #1
 800f6fe:	e7e7      	b.n	800f6d0 <_raise_r+0x12>
 800f700:	2400      	movs	r4, #0
 800f702:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f706:	4628      	mov	r0, r5
 800f708:	4798      	blx	r3
 800f70a:	2000      	movs	r0, #0
 800f70c:	e7e0      	b.n	800f6d0 <_raise_r+0x12>
	...

0800f710 <raise>:
 800f710:	4b02      	ldr	r3, [pc, #8]	; (800f71c <raise+0xc>)
 800f712:	4601      	mov	r1, r0
 800f714:	6818      	ldr	r0, [r3, #0]
 800f716:	f7ff bfd2 	b.w	800f6be <_raise_r>
 800f71a:	bf00      	nop
 800f71c:	20000084 	.word	0x20000084

0800f720 <_fstat_r>:
 800f720:	b538      	push	{r3, r4, r5, lr}
 800f722:	4d07      	ldr	r5, [pc, #28]	; (800f740 <_fstat_r+0x20>)
 800f724:	2300      	movs	r3, #0
 800f726:	4604      	mov	r4, r0
 800f728:	4608      	mov	r0, r1
 800f72a:	4611      	mov	r1, r2
 800f72c:	602b      	str	r3, [r5, #0]
 800f72e:	f7f1 fb22 	bl	8000d76 <_fstat>
 800f732:	1c43      	adds	r3, r0, #1
 800f734:	d102      	bne.n	800f73c <_fstat_r+0x1c>
 800f736:	682b      	ldr	r3, [r5, #0]
 800f738:	b103      	cbz	r3, 800f73c <_fstat_r+0x1c>
 800f73a:	6023      	str	r3, [r4, #0]
 800f73c:	bd38      	pop	{r3, r4, r5, pc}
 800f73e:	bf00      	nop
 800f740:	2000a74c 	.word	0x2000a74c

0800f744 <_isatty_r>:
 800f744:	b538      	push	{r3, r4, r5, lr}
 800f746:	4d06      	ldr	r5, [pc, #24]	; (800f760 <_isatty_r+0x1c>)
 800f748:	2300      	movs	r3, #0
 800f74a:	4604      	mov	r4, r0
 800f74c:	4608      	mov	r0, r1
 800f74e:	602b      	str	r3, [r5, #0]
 800f750:	f7f1 fb21 	bl	8000d96 <_isatty>
 800f754:	1c43      	adds	r3, r0, #1
 800f756:	d102      	bne.n	800f75e <_isatty_r+0x1a>
 800f758:	682b      	ldr	r3, [r5, #0]
 800f75a:	b103      	cbz	r3, 800f75e <_isatty_r+0x1a>
 800f75c:	6023      	str	r3, [r4, #0]
 800f75e:	bd38      	pop	{r3, r4, r5, pc}
 800f760:	2000a74c 	.word	0x2000a74c

0800f764 <_kill_r>:
 800f764:	b538      	push	{r3, r4, r5, lr}
 800f766:	4d07      	ldr	r5, [pc, #28]	; (800f784 <_kill_r+0x20>)
 800f768:	2300      	movs	r3, #0
 800f76a:	4604      	mov	r4, r0
 800f76c:	4608      	mov	r0, r1
 800f76e:	4611      	mov	r1, r2
 800f770:	602b      	str	r3, [r5, #0]
 800f772:	f7f1 fa9f 	bl	8000cb4 <_kill>
 800f776:	1c43      	adds	r3, r0, #1
 800f778:	d102      	bne.n	800f780 <_kill_r+0x1c>
 800f77a:	682b      	ldr	r3, [r5, #0]
 800f77c:	b103      	cbz	r3, 800f780 <_kill_r+0x1c>
 800f77e:	6023      	str	r3, [r4, #0]
 800f780:	bd38      	pop	{r3, r4, r5, pc}
 800f782:	bf00      	nop
 800f784:	2000a74c 	.word	0x2000a74c

0800f788 <_getpid_r>:
 800f788:	f7f1 ba8c 	b.w	8000ca4 <_getpid>

0800f78c <_init>:
 800f78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f78e:	bf00      	nop
 800f790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f792:	bc08      	pop	{r3}
 800f794:	469e      	mov	lr, r3
 800f796:	4770      	bx	lr

0800f798 <_fini>:
 800f798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f79a:	bf00      	nop
 800f79c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f79e:	bc08      	pop	{r3}
 800f7a0:	469e      	mov	lr, r3
 800f7a2:	4770      	bx	lr
